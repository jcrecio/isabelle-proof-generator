{"file_name": "/home/qj213/afp-2021-10-22/thys/Elliptic_Curves_Group_Law/Elliptic_Axclass.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Elliptic_Curves_Group_Law", "problem_names": ["lemma on_curve_infinity [simp]: \"on_curve a b Infinity\"", "lemma opp_Infinity [simp]: \"opp Infinity = Infinity\"", "lemma opp_Point: \"opp (Point x y) = Point x (- y)\"", "lemma opp_opp: \"opp (opp p) = p\"", "lemma opp_closed:\n  \"on_curve a b p \\<Longrightarrow> on_curve a b (opp p)\"", "lemma curve_elt_opp:\n  assumes \"p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\"\n  and \"p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\"\n  and \"on_curve a b p\\<^sub>1\"\n  and \"on_curve a b p\\<^sub>2\"\n  and \"x\\<^sub>1 = x\\<^sub>2\"\n  shows \"p\\<^sub>1 = p\\<^sub>2 \\<or> p\\<^sub>1 = opp p\\<^sub>2\"", "lemma add_closed:\n  assumes \"on_curve a b p\\<^sub>1\" and \"on_curve a b p\\<^sub>2\"\n  shows \"on_curve a b (add a p\\<^sub>1 p\\<^sub>2)\"", "lemma add_case [consumes 2, case_names InfL InfR Opp Tan Gen]:\n  assumes p: \"on_curve a b p\"\n  and q: \"on_curve a b q\"\n  and R1: \"\\<And>p. P Infinity p p\"\n  and R2: \"\\<And>p. P p Infinity p\"\n  and R3: \"\\<And>p. on_curve a b p \\<Longrightarrow> P p (opp p) Infinity\"\n  and R4: \"\\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n    p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1 \\<Longrightarrow> p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2 \\<Longrightarrow>\n    p\\<^sub>2 = add a p\\<^sub>1 p\\<^sub>1 \\<Longrightarrow> y\\<^sub>1 \\<noteq> 0 \\<Longrightarrow>\n    l = (3 * x\\<^sub>1 ^ 2 + a) / (2 * y\\<^sub>1) \\<Longrightarrow>\n    x\\<^sub>2 = l ^ 2 - 2 * x\\<^sub>1 \\<Longrightarrow>\n    y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1) \\<Longrightarrow>\n    P p\\<^sub>1 p\\<^sub>1 p\\<^sub>2\"\n  and R5: \"\\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n    p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1 \\<Longrightarrow> p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2 \\<Longrightarrow> p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3 \\<Longrightarrow>\n    p\\<^sub>3 = add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow> x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<Longrightarrow>\n    l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) \\<Longrightarrow>\n    x\\<^sub>3 = l ^ 2 - x\\<^sub>1 - x\\<^sub>2 \\<Longrightarrow>\n    y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1) \\<Longrightarrow>\n    P p\\<^sub>1 p\\<^sub>2 p\\<^sub>3\"\n  shows \"P p q (add a p q)\"", "lemma eq_opp_is_zero: \"((x::'a::ell_field) = - x) = (x = 0)\"", "lemma add_casew [consumes 2, case_names InfL InfR Opp Gen]:\n  assumes p: \"on_curve a b p\"\n  and q: \"on_curve a b q\"\n  and R1: \"\\<And>p. P Infinity p p\"\n  and R2: \"\\<And>p. P p Infinity p\"\n  and R3: \"\\<And>p. on_curve a b p \\<Longrightarrow> P p (opp p) Infinity\"\n  and R4: \"\\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n    p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1 \\<Longrightarrow> p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2 \\<Longrightarrow> p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3 \\<Longrightarrow>\n    p\\<^sub>3 = add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow> p\\<^sub>1 \\<noteq> opp p\\<^sub>2 \\<Longrightarrow>\n    x\\<^sub>1 = x\\<^sub>2 \\<and> y\\<^sub>1 = y\\<^sub>2 \\<and> l = (3 * x\\<^sub>1 ^ 2 + a) / (2 * y\\<^sub>1) \\<or>\n    x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<and> l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) \\<Longrightarrow>\n    x\\<^sub>3 = l ^ 2 - x\\<^sub>1 - x\\<^sub>2 \\<Longrightarrow>\n    y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1) \\<Longrightarrow>\n    P p\\<^sub>1 p\\<^sub>2 p\\<^sub>3\"\n  shows \"P p q (add a p q)\"", "lemma diff_neq0:\n  \"(a::'a::ring) \\<noteq> b \\<Longrightarrow> a - b \\<noteq> 0\"\n  \"a \\<noteq> b \\<Longrightarrow> b - a \\<noteq> 0\"", "lemma minus2_not0: \"(-2::'a::ell_field) \\<noteq> 0\"", "lemmas [simp] = minus2_not0 [simplified]", "lemma spec1_assoc:\n  assumes p\\<^sub>1: \"on_curve a b p\\<^sub>1\"\n  and p\\<^sub>2: \"on_curve a b p\\<^sub>2\"\n  and p\\<^sub>3: \"on_curve a b p\\<^sub>3\"\n  and \"is_generic p\\<^sub>1 p\\<^sub>2\"\n  and \"is_generic p\\<^sub>2 p\\<^sub>3\"\n  and \"is_generic (add a p\\<^sub>1 p\\<^sub>2) p\\<^sub>3\"\n  and \"is_generic p\\<^sub>1 (add a p\\<^sub>2 p\\<^sub>3)\"\n  shows \"add a p\\<^sub>1 (add a p\\<^sub>2 p\\<^sub>3) = add a (add a p\\<^sub>1 p\\<^sub>2) p\\<^sub>3\"", "lemma spec2_assoc:\n  assumes p\\<^sub>1: \"on_curve a b p\\<^sub>1\"\n  and p\\<^sub>2: \"on_curve a b p\\<^sub>2\"\n  and p\\<^sub>3: \"on_curve a b p\\<^sub>3\"\n  and \"is_generic p\\<^sub>1 p\\<^sub>2\"\n  and \"is_tangent p\\<^sub>2 p\\<^sub>3\"\n  and \"is_generic (add a p\\<^sub>1 p\\<^sub>2) p\\<^sub>3\"\n  and \"is_generic p\\<^sub>1 (add a p\\<^sub>2 p\\<^sub>3)\"\n  shows \"add a p\\<^sub>1 (add a p\\<^sub>2 p\\<^sub>3) = add a (add a p\\<^sub>1 p\\<^sub>2) p\\<^sub>3\"", "lemma spec3_assoc:\n  assumes p\\<^sub>1: \"on_curve a b p\\<^sub>1\"\n  and p\\<^sub>2: \"on_curve a b p\\<^sub>2\"\n  and p\\<^sub>3: \"on_curve a b p\\<^sub>3\"\n  and \"is_generic p\\<^sub>1 p\\<^sub>2\"\n  and \"is_tangent p\\<^sub>2 p\\<^sub>3\"\n  and \"is_generic (add a p\\<^sub>1 p\\<^sub>2) p\\<^sub>3\"\n  and \"is_tangent p\\<^sub>1 (add a p\\<^sub>2 p\\<^sub>3)\"\n  shows \"add a p\\<^sub>1 (add a p\\<^sub>2 p\\<^sub>3) = add a (add a p\\<^sub>1 p\\<^sub>2) p\\<^sub>3\"", "lemma add_0_l: \"add a Infinity p = p\"", "lemma add_0_r: \"add a p Infinity = p\"", "lemma add_opp: \"on_curve a b p \\<Longrightarrow> add a p (opp p) = Infinity\"", "lemma add_comm:\n  assumes \"on_curve a b p\\<^sub>1\" \"on_curve a b p\\<^sub>2\"\n  shows \"add a p\\<^sub>1 p\\<^sub>2 = add a p\\<^sub>2 p\\<^sub>1\"", "lemma uniq_opp:\n  assumes \"add a p\\<^sub>1 p\\<^sub>2 = Infinity\"\n  shows \"p\\<^sub>2 = opp p\\<^sub>1\"", "lemma uniq_zero:\n  assumes ab: \"nonsingular a b\"\n  and p\\<^sub>1: \"on_curve a b p\\<^sub>1\"\n  and p\\<^sub>2: \"on_curve a b p\\<^sub>2\"\n  and add: \"add a p\\<^sub>1 p\\<^sub>2 = p\\<^sub>2\"\n  shows \"p\\<^sub>1 = Infinity\"", "lemma opp_add:\n  assumes p\\<^sub>1: \"on_curve a b p\\<^sub>1\"\n  and p\\<^sub>2: \"on_curve a b p\\<^sub>2\"\n  shows \"opp (add a p\\<^sub>1 p\\<^sub>2) = add a (opp p\\<^sub>1) (opp p\\<^sub>2)\"", "lemma compat_add_opp:\n  assumes p\\<^sub>1: \"on_curve a b p\\<^sub>1\"\n  and p\\<^sub>2: \"on_curve a b p\\<^sub>2\"\n  and \"add a p\\<^sub>1 p\\<^sub>2 = add a p\\<^sub>1 (opp p\\<^sub>2)\"\n  and \"p\\<^sub>1 \\<noteq> opp p\\<^sub>1\"\n  shows \"p\\<^sub>2 = opp p\\<^sub>2\"", "lemma compat_add_triple:\n  assumes ab: \"nonsingular a b\"\n  and p: \"on_curve a b p\"\n  and \"p \\<noteq> opp p\"\n  and \"add a p p \\<noteq> opp p\"\n  shows \"add a (add a p p) (opp p) = p\"", "lemma add_opp_double_opp:\n  assumes ab: \"nonsingular a b\"\n  and p\\<^sub>1: \"on_curve a b p\\<^sub>1\"\n  and p\\<^sub>2: \"on_curve a b p\\<^sub>2\"\n  and \"add a p\\<^sub>1 p\\<^sub>2 = opp p\\<^sub>1\"\n  shows \"p\\<^sub>2 = add a (opp p\\<^sub>1) (opp p\\<^sub>1)\"", "lemma cancel:\n  assumes ab: \"nonsingular a b\"\n  and p\\<^sub>1: \"on_curve a b p\\<^sub>1\"\n  and p\\<^sub>2: \"on_curve a b p\\<^sub>2\"\n  and p\\<^sub>3: \"on_curve a b p\\<^sub>3\"\n  and eq: \"add a p\\<^sub>1 p\\<^sub>2 = add a p\\<^sub>1 p\\<^sub>3\"\n  shows \"p\\<^sub>2 = p\\<^sub>3\"", "lemma add_minus_id:\n  assumes ab: \"nonsingular a b\"\n  and p\\<^sub>1: \"on_curve a b p\\<^sub>1\"\n  and p\\<^sub>2: \"on_curve a b p\\<^sub>2\"\n  shows \"add a (add a p\\<^sub>1 p\\<^sub>2) (opp p\\<^sub>2) = p\\<^sub>1\"", "lemma add_shift_minus:\n  assumes ab: \"nonsingular a b\"\n  and p\\<^sub>1: \"on_curve a b p\\<^sub>1\"\n  and p\\<^sub>2: \"on_curve a b p\\<^sub>2\"\n  and p\\<^sub>3: \"on_curve a b p\\<^sub>3\"\n  and eq: \"add a p\\<^sub>1 p\\<^sub>2 = p\\<^sub>3\"\n  shows \"p\\<^sub>1 = add a p\\<^sub>3 (opp p\\<^sub>2)\"", "lemma degen_assoc:\n  assumes ab: \"nonsingular a b\"\n  and p\\<^sub>1: \"on_curve a b p\\<^sub>1\"\n  and p\\<^sub>2: \"on_curve a b p\\<^sub>2\"\n  and p\\<^sub>3: \"on_curve a b p\\<^sub>3\"\n  and H:\n    \"(p\\<^sub>1 = Infinity \\<or> p\\<^sub>2 = Infinity \\<or> p\\<^sub>3 = Infinity) \\<or>\n     (p\\<^sub>1 = opp p\\<^sub>2 \\<or> p\\<^sub>2 = opp p\\<^sub>3) \\<or>\n     (opp p\\<^sub>1 = add a p\\<^sub>2 p\\<^sub>3 \\<or> opp p\\<^sub>3 = add a p\\<^sub>1 p\\<^sub>2)\"\n  shows \"add a p\\<^sub>1 (add a p\\<^sub>2 p\\<^sub>3) = add a (add a p\\<^sub>1 p\\<^sub>2) p\\<^sub>3\"", "lemma spec4_assoc:\n  assumes ab: \"nonsingular a b\"\n  and p\\<^sub>1: \"on_curve a b p\\<^sub>1\"\n  and p\\<^sub>2: \"on_curve a b p\\<^sub>2\"\n  shows \"add a p\\<^sub>1 (add a p\\<^sub>2 p\\<^sub>2) = add a (add a p\\<^sub>1 p\\<^sub>2) p\\<^sub>2\"", "lemma add_assoc:\n  assumes ab: \"nonsingular a b\"\n  and p\\<^sub>1: \"on_curve a b p\\<^sub>1\"\n  and p\\<^sub>2: \"on_curve a b p\\<^sub>2\"\n  and p\\<^sub>3: \"on_curve a b p\\<^sub>3\"\n  shows \"add a p\\<^sub>1 (add a p\\<^sub>2 p\\<^sub>3) = add a (add a p\\<^sub>1 p\\<^sub>2) p\\<^sub>3\"", "lemma add_comm':\n  \"nonsingular a b \\<Longrightarrow>\n   on_curve a b p\\<^sub>1 \\<Longrightarrow> on_curve a b p\\<^sub>2 \\<Longrightarrow> on_curve a b p\\<^sub>3 \\<Longrightarrow>\n   add a p\\<^sub>2 (add a p\\<^sub>1 p\\<^sub>3) = add a p\\<^sub>1 (add a p\\<^sub>2 p\\<^sub>3)\"", "lemma point_mult_closed: \"on_curve a b p \\<Longrightarrow> on_curve a b (point_mult a n p)\"", "lemma point_mult_add:\n  \"on_curve a b p \\<Longrightarrow> nonsingular a b \\<Longrightarrow>\n   point_mult a (m + n) p = add a (point_mult a m p) (point_mult a n p)\"", "lemma point_mult_mult:\n  \"on_curve a b p \\<Longrightarrow> nonsingular a b \\<Longrightarrow>\n   point_mult a (m * n) p = point_mult a n (point_mult a m p)\"", "lemma point_mult2_eq_double:\n  \"point_mult a 2 p = add a p p\"", "lemma on_curvep_infinity [simp]: \"on_curvep a b (x, y, 0)\"", "lemma make_affine_infinity [simp]: \"make_affine (x, y, 0) = Infinity\"", "lemma on_curvep_iff_on_curve:\n  \"on_curvep a b p = on_curve a b (make_affine p)\"", "lemma pdouble_infinity [simp]: \"pdouble a (x, y, 0) = (x, y, 0)\"", "lemma padd_infinity_l [simp]: \"padd a (x, y, 0) p = p\"", "lemma pdouble_correct:\n  \"make_affine (pdouble a p) = add a (make_affine p) (make_affine p)\"", "lemma padd_correct:\n  assumes p\\<^sub>1: \"on_curvep a b p\\<^sub>1\" and p\\<^sub>2: \"on_curvep a b p\\<^sub>2\"\n  shows \"make_affine (padd a p\\<^sub>1 p\\<^sub>2) = add a (make_affine p\\<^sub>1) (make_affine p\\<^sub>2)\"", "lemma pdouble_closed:\n  \"on_curvep a b p \\<Longrightarrow> on_curvep a b (pdouble a p)\"", "lemma padd_closed:\n  \"on_curvep a b p\\<^sub>1 \\<Longrightarrow> on_curvep a b p\\<^sub>2 \\<Longrightarrow> on_curvep a b (padd a p\\<^sub>1 p\\<^sub>2)\"", "lemma ppoint_mult_closed [simp]:\n  \"on_curvep a b p \\<Longrightarrow> on_curvep a b (ppoint_mult a n p)\"", "lemma ppoint_mult_correct: \"on_curvep a b p \\<Longrightarrow>\n  make_affine (ppoint_mult a n p) = point_mult a n (make_affine p)\"", "lemma proj_eq_refl: \"proj_eq p p\"", "lemma proj_eq_sym: \"proj_eq p p' \\<Longrightarrow> proj_eq p' p\"", "lemma proj_eq_trans:\n  \"in_carrierp p \\<Longrightarrow> in_carrierp p' \\<Longrightarrow> in_carrierp p'' \\<Longrightarrow>\n   proj_eq p p' \\<Longrightarrow> proj_eq p' p'' \\<Longrightarrow> proj_eq p p''\"", "lemma make_affine_proj_eq_iff:\n  \"proj_eq p p' = (make_affine p = make_affine p')\"", "lemma pdouble_proj_eq_cong:\n  \"proj_eq p p' \\<Longrightarrow> proj_eq (pdouble a p) (pdouble a p')\"", "lemma padd_proj_eq_cong:\n  \"on_curvep a b p\\<^sub>1 \\<Longrightarrow> on_curvep a b p\\<^sub>1' \\<Longrightarrow> on_curvep a b p\\<^sub>2 \\<Longrightarrow> on_curvep a b p\\<^sub>2' \\<Longrightarrow>\n   proj_eq p\\<^sub>1 p\\<^sub>1' \\<Longrightarrow> proj_eq p\\<^sub>2 p\\<^sub>2' \\<Longrightarrow> proj_eq (padd a p\\<^sub>1 p\\<^sub>2) (padd a p\\<^sub>1' p\\<^sub>2')\""], "translations": [["", "lemma on_curve_infinity [simp]: \"on_curve a b Infinity\""], ["proof (prove)\ngoal (1 subgoal):\n 1. on_curve a b Infinity", "by (simp add: on_curve_def)"], ["", "lemma opp_Infinity [simp]: \"opp Infinity = Infinity\""], ["proof (prove)\ngoal (1 subgoal):\n 1. opp Infinity = Infinity", "by (simp add: opp_def)"], ["", "lemma opp_Point: \"opp (Point x y) = Point x (- y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. opp (Point x y) = Point x (- y)", "by (simp add: opp_def)"], ["", "lemma opp_opp: \"opp (opp p) = p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. opp (opp p) = p", "by (simp add: opp_def split: point.split)"], ["", "lemma opp_closed:\n  \"on_curve a b p \\<Longrightarrow> on_curve a b (opp p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. on_curve a b p \\<Longrightarrow> on_curve a b (opp p)", "by (auto simp add: on_curve_def opp_def power2_eq_square\n    split: point.split)"], ["", "lemma curve_elt_opp:\n  assumes \"p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\"\n  and \"p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\"\n  and \"on_curve a b p\\<^sub>1\"\n  and \"on_curve a b p\\<^sub>2\"\n  and \"x\\<^sub>1 = x\\<^sub>2\"\n  shows \"p\\<^sub>1 = p\\<^sub>2 \\<or> p\\<^sub>1 = opp p\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p\\<^sub>1 = p\\<^sub>2 \\<or> p\\<^sub>1 = opp p\\<^sub>2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p\\<^sub>1 = p\\<^sub>2 \\<or> p\\<^sub>1 = opp p\\<^sub>2", "from \\<open>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\\<close> \\<open>on_curve a b p\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  on_curve a b p\\<^sub>1", "have \"y\\<^sub>1 ^ 2 = x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b\""], ["proof (prove)\nusing this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  on_curve a b p\\<^sub>1\n\ngoal (1 subgoal):\n 1. y\\<^sub>1\\<^sup>2 = x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b", "by (simp_all add: on_curve_def)"], ["proof (state)\nthis:\n  y\\<^sub>1\\<^sup>2 = x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 = p\\<^sub>2 \\<or> p\\<^sub>1 = opp p\\<^sub>2", "moreover"], ["proof (state)\nthis:\n  y\\<^sub>1\\<^sup>2 = x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 = p\\<^sub>2 \\<or> p\\<^sub>1 = opp p\\<^sub>2", "from \\<open>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\\<close> \\<open>on_curve a b p\\<^sub>2\\<close> \\<open>x\\<^sub>1 = x\\<^sub>2\\<close>"], ["proof (chain)\npicking this:\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  on_curve a b p\\<^sub>2\n  x\\<^sub>1 = x\\<^sub>2", "have \"x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b = y\\<^sub>2 ^ 2\""], ["proof (prove)\nusing this:\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  on_curve a b p\\<^sub>2\n  x\\<^sub>1 = x\\<^sub>2\n\ngoal (1 subgoal):\n 1. x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b = y\\<^sub>2\\<^sup>2", "by (simp_all add: on_curve_def)"], ["proof (state)\nthis:\n  x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b = y\\<^sub>2\\<^sup>2\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 = p\\<^sub>2 \\<or> p\\<^sub>1 = opp p\\<^sub>2", "ultimately"], ["proof (chain)\npicking this:\n  y\\<^sub>1\\<^sup>2 = x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b\n  x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b = y\\<^sub>2\\<^sup>2", "have \"y\\<^sub>1 = y\\<^sub>2 \\<or> y\\<^sub>1 = - y\\<^sub>2\""], ["proof (prove)\nusing this:\n  y\\<^sub>1\\<^sup>2 = x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b\n  x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b = y\\<^sub>2\\<^sup>2\n\ngoal (1 subgoal):\n 1. y\\<^sub>1 = y\\<^sub>2 \\<or> y\\<^sub>1 = - y\\<^sub>2", "by (simp add: square_eq_iff power2_eq_square)"], ["proof (state)\nthis:\n  y\\<^sub>1 = y\\<^sub>2 \\<or> y\\<^sub>1 = - y\\<^sub>2\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 = p\\<^sub>2 \\<or> p\\<^sub>1 = opp p\\<^sub>2", "with \\<open>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\\<close> \\<open>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\\<close> \\<open>x\\<^sub>1 = x\\<^sub>2\\<close>"], ["proof (chain)\npicking this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  x\\<^sub>1 = x\\<^sub>2\n  y\\<^sub>1 = y\\<^sub>2 \\<or> y\\<^sub>1 = - y\\<^sub>2", "show ?thesis"], ["proof (prove)\nusing this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  x\\<^sub>1 = x\\<^sub>2\n  y\\<^sub>1 = y\\<^sub>2 \\<or> y\\<^sub>1 = - y\\<^sub>2\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 = p\\<^sub>2 \\<or> p\\<^sub>1 = opp p\\<^sub>2", "by (auto simp add: opp_def)"], ["proof (state)\nthis:\n  p\\<^sub>1 = p\\<^sub>2 \\<or> p\\<^sub>1 = opp p\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma add_closed:\n  assumes \"on_curve a b p\\<^sub>1\" and \"on_curve a b p\\<^sub>2\"\n  shows \"on_curve a b (add a p\\<^sub>1 p\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "proof (cases p\\<^sub>1)"], ["proof (state)\ngoal (2 subgoals):\n 1. p\\<^sub>1 = Infinity \\<Longrightarrow>\n    on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n 2. \\<And>x21 x22.\n       p\\<^sub>1 = Point x21 x22 \\<Longrightarrow>\n       on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "case (Point x\\<^sub>1 y\\<^sub>1)"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n\ngoal (2 subgoals):\n 1. p\\<^sub>1 = Infinity \\<Longrightarrow>\n    on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n 2. \\<And>x21 x22.\n       p\\<^sub>1 = Point x21 x22 \\<Longrightarrow>\n       on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "note Point' = this"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n\ngoal (2 subgoals):\n 1. p\\<^sub>1 = Infinity \\<Longrightarrow>\n    on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n 2. \\<And>x21 x22.\n       p\\<^sub>1 = Point x21 x22 \\<Longrightarrow>\n       on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "proof (cases p\\<^sub>2)"], ["proof (state)\ngoal (2 subgoals):\n 1. p\\<^sub>2 = Infinity \\<Longrightarrow>\n    on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n 2. \\<And>x21 x22.\n       p\\<^sub>2 = Point x21 x22 \\<Longrightarrow>\n       on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "case (Point x\\<^sub>2 y\\<^sub>2)"], ["proof (state)\nthis:\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n\ngoal (2 subgoals):\n 1. p\\<^sub>2 = Infinity \\<Longrightarrow>\n    on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n 2. \\<And>x21 x22.\n       p\\<^sub>2 = Point x21 x22 \\<Longrightarrow>\n       on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "proof (cases \"x\\<^sub>1 = x\\<^sub>2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x\\<^sub>1 = x\\<^sub>2 \\<Longrightarrow>\n    on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n 2. x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<Longrightarrow>\n    on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "case True"], ["proof (state)\nthis:\n  x\\<^sub>1 = x\\<^sub>2\n\ngoal (2 subgoals):\n 1. x\\<^sub>1 = x\\<^sub>2 \\<Longrightarrow>\n    on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n 2. x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<Longrightarrow>\n    on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "note True' = this"], ["proof (state)\nthis:\n  x\\<^sub>1 = x\\<^sub>2\n\ngoal (2 subgoals):\n 1. x\\<^sub>1 = x\\<^sub>2 \\<Longrightarrow>\n    on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n 2. x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<Longrightarrow>\n    on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "proof (cases \"y\\<^sub>1 = - y\\<^sub>2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y\\<^sub>1 = - y\\<^sub>2 \\<Longrightarrow>\n    on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n 2. y\\<^sub>1 \\<noteq> - y\\<^sub>2 \\<Longrightarrow>\n    on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "case True"], ["proof (state)\nthis:\n  y\\<^sub>1 = - y\\<^sub>2\n\ngoal (2 subgoals):\n 1. y\\<^sub>1 = - y\\<^sub>2 \\<Longrightarrow>\n    on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n 2. y\\<^sub>1 \\<noteq> - y\\<^sub>2 \\<Longrightarrow>\n    on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "with True' Point Point'"], ["proof (chain)\npicking this:\n  x\\<^sub>1 = x\\<^sub>2\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  y\\<^sub>1 = - y\\<^sub>2", "show ?thesis"], ["proof (prove)\nusing this:\n  x\\<^sub>1 = x\\<^sub>2\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  y\\<^sub>1 = - y\\<^sub>2\n\ngoal (1 subgoal):\n 1. on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "by (simp add: on_curve_def add_def)"], ["proof (state)\nthis:\n  on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. y\\<^sub>1 \\<noteq> - y\\<^sub>2 \\<Longrightarrow>\n    on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. y\\<^sub>1 \\<noteq> - y\\<^sub>2 \\<Longrightarrow>\n    on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "case False"], ["proof (state)\nthis:\n  y\\<^sub>1 \\<noteq> - y\\<^sub>2\n\ngoal (1 subgoal):\n 1. y\\<^sub>1 \\<noteq> - y\\<^sub>2 \\<Longrightarrow>\n    on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "note on_curve1 = \\<open>on_curve a b p\\<^sub>1\\<close> [simplified Point' on_curve_def True', simplified]"], ["proof (state)\nthis:\n  y\\<^sub>1\\<^sup>2 = x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b\n\ngoal (1 subgoal):\n 1. y\\<^sub>1 \\<noteq> - y\\<^sub>2 \\<Longrightarrow>\n    on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "from False True' Point Point' assms"], ["proof (chain)\npicking this:\n  y\\<^sub>1 \\<noteq> - y\\<^sub>2\n  x\\<^sub>1 = x\\<^sub>2\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2", "have \"y\\<^sub>1 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  y\\<^sub>1 \\<noteq> - y\\<^sub>2\n  x\\<^sub>1 = x\\<^sub>2\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n\ngoal (1 subgoal):\n 1. y\\<^sub>1 \\<noteq> (0::'a)", "by (auto simp add: on_curve_def)"], ["proof (state)\nthis:\n  y\\<^sub>1 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. y\\<^sub>1 \\<noteq> - y\\<^sub>2 \\<Longrightarrow>\n    on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "with False True' Point Point' assms"], ["proof (chain)\npicking this:\n  y\\<^sub>1 \\<noteq> - y\\<^sub>2\n  x\\<^sub>1 = x\\<^sub>2\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  y\\<^sub>1 \\<noteq> (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  y\\<^sub>1 \\<noteq> - y\\<^sub>2\n  x\\<^sub>1 = x\\<^sub>2\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  y\\<^sub>1 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "apply (simp add: on_curve_def add_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>y\\<^sub>1 \\<noteq> - y\\<^sub>2; x\\<^sub>1 = x\\<^sub>2;\n     p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n     p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>1;\n     y\\<^sub>1\\<^sup>2 = x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b;\n     y\\<^sub>2\\<^sup>2 = x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b;\n     y\\<^sub>1 \\<noteq> (0::'a)\\<rbrakk>\n    \\<Longrightarrow> (- y\\<^sub>1 -\n                       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n                       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n                         ((2::'a) * y\\<^sub>1))\\<^sup>2 -\n                        (3::'a) * x\\<^sub>2) /\n                       ((2::'a) * y\\<^sub>1))\\<^sup>2 =\n                      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n                        ((2::'a) * y\\<^sub>1))\\<^sup>2 -\n                       (2::'a) * x\\<^sub>2) ^\n                      3 +\n                      a *\n                      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n                        ((2::'a) * y\\<^sub>1))\\<^sup>2 -\n                       (2::'a) * x\\<^sub>2) +\n                      b", "apply (field on_curve1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>y\\<^sub>1 \\<noteq> - y\\<^sub>2; x\\<^sub>1 = x\\<^sub>2;\n     p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n     p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>1;\n     y\\<^sub>1\\<^sup>2 = x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b;\n     y\\<^sub>2\\<^sup>2 = x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b;\n     y\\<^sub>1 \\<noteq> (0::'a)\\<rbrakk>\n    \\<Longrightarrow> (2::'a) * y\\<^sub>1 \\<noteq> (0::'a)", "apply (simp add: two_not_zero)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<Longrightarrow>\n    on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<Longrightarrow>\n    on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "case False"], ["proof (state)\nthis:\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n\ngoal (1 subgoal):\n 1. x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<Longrightarrow>\n    on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "note on_curve1 = \\<open>on_curve a b p\\<^sub>1\\<close> [simplified Point' on_curve_def, simplified]"], ["proof (state)\nthis:\n  y\\<^sub>1\\<^sup>2 = x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b\n\ngoal (1 subgoal):\n 1. x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<Longrightarrow>\n    on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "note on_curve2 = \\<open>on_curve a b p\\<^sub>2\\<close> [simplified Point on_curve_def, simplified]"], ["proof (state)\nthis:\n  y\\<^sub>2\\<^sup>2 = x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b\n\ngoal (1 subgoal):\n 1. x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<Longrightarrow>\n    on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "from assms"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2", "show ?thesis"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n\ngoal (1 subgoal):\n 1. on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "apply (simp add: on_curve_def add_def Let_def False Point Point')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>y\\<^sub>1\\<^sup>2 = x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b;\n     y\\<^sub>2\\<^sup>2 = x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b\\<rbrakk>\n    \\<Longrightarrow> (- y\\<^sub>1 -\n                       (y\\<^sub>2 - y\\<^sub>1) *\n                       (((y\\<^sub>2 - y\\<^sub>1) /\n                         (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n                        x\\<^sub>2 -\n                        (2::'a) * x\\<^sub>1) /\n                       (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 =\n                      (((y\\<^sub>2 - y\\<^sub>1) /\n                        (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n                       x\\<^sub>1 -\n                       x\\<^sub>2) ^\n                      3 +\n                      a *\n                      (((y\\<^sub>2 - y\\<^sub>1) /\n                        (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n                       x\\<^sub>1 -\n                       x\\<^sub>2) +\n                      b", "apply (field on_curve1 on_curve2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>y\\<^sub>1\\<^sup>2 = x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b;\n     y\\<^sub>2\\<^sup>2 = x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b\\<rbrakk>\n    \\<Longrightarrow> x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (simp add: False [symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 = Infinity \\<Longrightarrow>\n    on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p\\<^sub>2 = Infinity \\<Longrightarrow>\n    on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "case Infinity"], ["proof (state)\nthis:\n  p\\<^sub>2 = Infinity\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 = Infinity \\<Longrightarrow>\n    on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "with Point \\<open>on_curve a b p\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  on_curve a b p\\<^sub>1\n  p\\<^sub>2 = Infinity", "show ?thesis"], ["proof (prove)\nusing this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  on_curve a b p\\<^sub>1\n  p\\<^sub>2 = Infinity\n\ngoal (1 subgoal):\n 1. on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "by (simp add: add_def)"], ["proof (state)\nthis:\n  on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 = Infinity \\<Longrightarrow>\n    on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p\\<^sub>1 = Infinity \\<Longrightarrow>\n    on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "case Infinity"], ["proof (state)\nthis:\n  p\\<^sub>1 = Infinity\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 = Infinity \\<Longrightarrow>\n    on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "with \\<open>on_curve a b p\\<^sub>2\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>2\n  p\\<^sub>1 = Infinity", "show ?thesis"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>2\n  p\\<^sub>1 = Infinity\n\ngoal (1 subgoal):\n 1. on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "by (simp add: add_def)"], ["proof (state)\nthis:\n  on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma add_case [consumes 2, case_names InfL InfR Opp Tan Gen]:\n  assumes p: \"on_curve a b p\"\n  and q: \"on_curve a b q\"\n  and R1: \"\\<And>p. P Infinity p p\"\n  and R2: \"\\<And>p. P p Infinity p\"\n  and R3: \"\\<And>p. on_curve a b p \\<Longrightarrow> P p (opp p) Infinity\"\n  and R4: \"\\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n    p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1 \\<Longrightarrow> p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2 \\<Longrightarrow>\n    p\\<^sub>2 = add a p\\<^sub>1 p\\<^sub>1 \\<Longrightarrow> y\\<^sub>1 \\<noteq> 0 \\<Longrightarrow>\n    l = (3 * x\\<^sub>1 ^ 2 + a) / (2 * y\\<^sub>1) \\<Longrightarrow>\n    x\\<^sub>2 = l ^ 2 - 2 * x\\<^sub>1 \\<Longrightarrow>\n    y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1) \\<Longrightarrow>\n    P p\\<^sub>1 p\\<^sub>1 p\\<^sub>2\"\n  and R5: \"\\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n    p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1 \\<Longrightarrow> p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2 \\<Longrightarrow> p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3 \\<Longrightarrow>\n    p\\<^sub>3 = add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow> x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<Longrightarrow>\n    l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) \\<Longrightarrow>\n    x\\<^sub>3 = l ^ 2 - x\\<^sub>1 - x\\<^sub>2 \\<Longrightarrow>\n    y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1) \\<Longrightarrow>\n    P p\\<^sub>1 p\\<^sub>2 p\\<^sub>3\"\n  shows \"P p q (add a p q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P p q (ell_field_class.add a p q)", "proof (cases p)"], ["proof (state)\ngoal (2 subgoals):\n 1. p = Infinity \\<Longrightarrow> P p q (ell_field_class.add a p q)\n 2. \\<And>x21 x22.\n       p = Point x21 x22 \\<Longrightarrow> P p q (ell_field_class.add a p q)", "case Infinity"], ["proof (state)\nthis:\n  p = Infinity\n\ngoal (2 subgoals):\n 1. p = Infinity \\<Longrightarrow> P p q (ell_field_class.add a p q)\n 2. \\<And>x21 x22.\n       p = Point x21 x22 \\<Longrightarrow> P p q (ell_field_class.add a p q)", "then"], ["proof (chain)\npicking this:\n  p = Infinity", "show ?thesis"], ["proof (prove)\nusing this:\n  p = Infinity\n\ngoal (1 subgoal):\n 1. P p q (ell_field_class.add a p q)", "by (simp add: add_def R1)"], ["proof (state)\nthis:\n  P p q (ell_field_class.add a p q)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       p = Point x21 x22 \\<Longrightarrow> P p q (ell_field_class.add a p q)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       p = Point x21 x22 \\<Longrightarrow> P p q (ell_field_class.add a p q)", "case (Point x\\<^sub>1 y\\<^sub>1)"], ["proof (state)\nthis:\n  p = Point x\\<^sub>1 y\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       p = Point x21 x22 \\<Longrightarrow> P p q (ell_field_class.add a p q)", "note Point' = this"], ["proof (state)\nthis:\n  p = Point x\\<^sub>1 y\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       p = Point x21 x22 \\<Longrightarrow> P p q (ell_field_class.add a p q)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. P p q (ell_field_class.add a p q)", "proof (cases q)"], ["proof (state)\ngoal (2 subgoals):\n 1. q = Infinity \\<Longrightarrow> P p q (ell_field_class.add a p q)\n 2. \\<And>x21 x22.\n       q = Point x21 x22 \\<Longrightarrow> P p q (ell_field_class.add a p q)", "case Infinity"], ["proof (state)\nthis:\n  q = Infinity\n\ngoal (2 subgoals):\n 1. q = Infinity \\<Longrightarrow> P p q (ell_field_class.add a p q)\n 2. \\<And>x21 x22.\n       q = Point x21 x22 \\<Longrightarrow> P p q (ell_field_class.add a p q)", "with Point"], ["proof (chain)\npicking this:\n  p = Point x\\<^sub>1 y\\<^sub>1\n  q = Infinity", "show ?thesis"], ["proof (prove)\nusing this:\n  p = Point x\\<^sub>1 y\\<^sub>1\n  q = Infinity\n\ngoal (1 subgoal):\n 1. P p q (ell_field_class.add a p q)", "by (simp add: add_def R2)"], ["proof (state)\nthis:\n  P p q (ell_field_class.add a p q)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       q = Point x21 x22 \\<Longrightarrow> P p q (ell_field_class.add a p q)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       q = Point x21 x22 \\<Longrightarrow> P p q (ell_field_class.add a p q)", "case (Point x\\<^sub>2 y\\<^sub>2)"], ["proof (state)\nthis:\n  q = Point x\\<^sub>2 y\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       q = Point x21 x22 \\<Longrightarrow> P p q (ell_field_class.add a p q)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. P p q (ell_field_class.add a p q)", "proof (cases \"x\\<^sub>1 = x\\<^sub>2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x\\<^sub>1 = x\\<^sub>2 \\<Longrightarrow>\n    P p q (ell_field_class.add a p q)\n 2. x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<Longrightarrow>\n    P p q (ell_field_class.add a p q)", "case True"], ["proof (state)\nthis:\n  x\\<^sub>1 = x\\<^sub>2\n\ngoal (2 subgoals):\n 1. x\\<^sub>1 = x\\<^sub>2 \\<Longrightarrow>\n    P p q (ell_field_class.add a p q)\n 2. x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<Longrightarrow>\n    P p q (ell_field_class.add a p q)", "note True' = this"], ["proof (state)\nthis:\n  x\\<^sub>1 = x\\<^sub>2\n\ngoal (2 subgoals):\n 1. x\\<^sub>1 = x\\<^sub>2 \\<Longrightarrow>\n    P p q (ell_field_class.add a p q)\n 2. x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<Longrightarrow>\n    P p q (ell_field_class.add a p q)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. P p q (ell_field_class.add a p q)", "proof (cases \"y\\<^sub>1 = - y\\<^sub>2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y\\<^sub>1 = - y\\<^sub>2 \\<Longrightarrow>\n    P p q (ell_field_class.add a p q)\n 2. y\\<^sub>1 \\<noteq> - y\\<^sub>2 \\<Longrightarrow>\n    P p q (ell_field_class.add a p q)", "case True"], ["proof (state)\nthis:\n  y\\<^sub>1 = - y\\<^sub>2\n\ngoal (2 subgoals):\n 1. y\\<^sub>1 = - y\\<^sub>2 \\<Longrightarrow>\n    P p q (ell_field_class.add a p q)\n 2. y\\<^sub>1 \\<noteq> - y\\<^sub>2 \\<Longrightarrow>\n    P p q (ell_field_class.add a p q)", "with p Point Point' True' R3 [of p]"], ["proof (chain)\npicking this:\n  on_curve a b p\n  q = Point x\\<^sub>2 y\\<^sub>2\n  p = Point x\\<^sub>1 y\\<^sub>1\n  x\\<^sub>1 = x\\<^sub>2\n  on_curve a b p \\<Longrightarrow> P p (opp p) Infinity\n  y\\<^sub>1 = - y\\<^sub>2", "show ?thesis"], ["proof (prove)\nusing this:\n  on_curve a b p\n  q = Point x\\<^sub>2 y\\<^sub>2\n  p = Point x\\<^sub>1 y\\<^sub>1\n  x\\<^sub>1 = x\\<^sub>2\n  on_curve a b p \\<Longrightarrow> P p (opp p) Infinity\n  y\\<^sub>1 = - y\\<^sub>2\n\ngoal (1 subgoal):\n 1. P p q (ell_field_class.add a p q)", "by (simp add: add_def opp_def)"], ["proof (state)\nthis:\n  P p q (ell_field_class.add a p q)\n\ngoal (1 subgoal):\n 1. y\\<^sub>1 \\<noteq> - y\\<^sub>2 \\<Longrightarrow>\n    P p q (ell_field_class.add a p q)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. y\\<^sub>1 \\<noteq> - y\\<^sub>2 \\<Longrightarrow>\n    P p q (ell_field_class.add a p q)", "case False"], ["proof (state)\nthis:\n  y\\<^sub>1 \\<noteq> - y\\<^sub>2\n\ngoal (1 subgoal):\n 1. y\\<^sub>1 \\<noteq> - y\\<^sub>2 \\<Longrightarrow>\n    P p q (ell_field_class.add a p q)", "from True' Point Point' p q"], ["proof (chain)\npicking this:\n  x\\<^sub>1 = x\\<^sub>2\n  q = Point x\\<^sub>2 y\\<^sub>2\n  p = Point x\\<^sub>1 y\\<^sub>1\n  on_curve a b p\n  on_curve a b q", "have \"(y\\<^sub>1 - y\\<^sub>2) * (y\\<^sub>1 + y\\<^sub>2) = 0\""], ["proof (prove)\nusing this:\n  x\\<^sub>1 = x\\<^sub>2\n  q = Point x\\<^sub>2 y\\<^sub>2\n  p = Point x\\<^sub>1 y\\<^sub>1\n  on_curve a b p\n  on_curve a b q\n\ngoal (1 subgoal):\n 1. (y\\<^sub>1 - y\\<^sub>2) * (y\\<^sub>1 + y\\<^sub>2) = (0::'a)", "by (simp add: on_curve_def ring_distribs power2_eq_square)"], ["proof (state)\nthis:\n  (y\\<^sub>1 - y\\<^sub>2) * (y\\<^sub>1 + y\\<^sub>2) = (0::'a)\n\ngoal (1 subgoal):\n 1. y\\<^sub>1 \\<noteq> - y\\<^sub>2 \\<Longrightarrow>\n    P p q (ell_field_class.add a p q)", "with False"], ["proof (chain)\npicking this:\n  y\\<^sub>1 \\<noteq> - y\\<^sub>2\n  (y\\<^sub>1 - y\\<^sub>2) * (y\\<^sub>1 + y\\<^sub>2) = (0::'a)", "have \"y\\<^sub>1 = y\\<^sub>2\""], ["proof (prove)\nusing this:\n  y\\<^sub>1 \\<noteq> - y\\<^sub>2\n  (y\\<^sub>1 - y\\<^sub>2) * (y\\<^sub>1 + y\\<^sub>2) = (0::'a)\n\ngoal (1 subgoal):\n 1. y\\<^sub>1 = y\\<^sub>2", "by (simp add: eq_neg_iff_add_eq_0)"], ["proof (state)\nthis:\n  y\\<^sub>1 = y\\<^sub>2\n\ngoal (1 subgoal):\n 1. y\\<^sub>1 \\<noteq> - y\\<^sub>2 \\<Longrightarrow>\n    P p q (ell_field_class.add a p q)", "with False True' Point Point'"], ["proof (chain)\npicking this:\n  y\\<^sub>1 \\<noteq> - y\\<^sub>2\n  x\\<^sub>1 = x\\<^sub>2\n  q = Point x\\<^sub>2 y\\<^sub>2\n  p = Point x\\<^sub>1 y\\<^sub>1\n  y\\<^sub>1 = y\\<^sub>2", "show ?thesis"], ["proof (prove)\nusing this:\n  y\\<^sub>1 \\<noteq> - y\\<^sub>2\n  x\\<^sub>1 = x\\<^sub>2\n  q = Point x\\<^sub>2 y\\<^sub>2\n  p = Point x\\<^sub>1 y\\<^sub>1\n  y\\<^sub>1 = y\\<^sub>2\n\ngoal (1 subgoal):\n 1. P p q (ell_field_class.add a p q)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(2::'a) \\<noteq> (0::'a) \\<and> y\\<^sub>2 \\<noteq> (0::'a);\n     x\\<^sub>1 = x\\<^sub>2; q = Point x\\<^sub>2 y\\<^sub>2;\n     p = Point x\\<^sub>2 y\\<^sub>2; y\\<^sub>1 = y\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> P (Point x\\<^sub>2 y\\<^sub>2)\n                       (Point x\\<^sub>2 y\\<^sub>2)\n                       (ell_field_class.add a (Point x\\<^sub>2 y\\<^sub>2)\n                         (Point x\\<^sub>2 y\\<^sub>2))", "apply (rule R4)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>(2::'a) \\<noteq> (0::'a) \\<and> y\\<^sub>2 \\<noteq> (0::'a);\n     x\\<^sub>1 = x\\<^sub>2; q = Point x\\<^sub>2 y\\<^sub>2;\n     p = Point x\\<^sub>2 y\\<^sub>2; y\\<^sub>1 = y\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> Point x\\<^sub>2 y\\<^sub>2 =\n                      Point ?x\\<^sub>15 ?y\\<^sub>15\n 2. \\<lbrakk>(2::'a) \\<noteq> (0::'a) \\<and> y\\<^sub>2 \\<noteq> (0::'a);\n     x\\<^sub>1 = x\\<^sub>2; q = Point x\\<^sub>2 y\\<^sub>2;\n     p = Point x\\<^sub>2 y\\<^sub>2; y\\<^sub>1 = y\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a (Point x\\<^sub>2 y\\<^sub>2)\n                       (Point x\\<^sub>2 y\\<^sub>2) =\n                      Point ?x\\<^sub>25 ?y\\<^sub>25\n 3. \\<lbrakk>(2::'a) \\<noteq> (0::'a) \\<and> y\\<^sub>2 \\<noteq> (0::'a);\n     x\\<^sub>1 = x\\<^sub>2; q = Point x\\<^sub>2 y\\<^sub>2;\n     p = Point x\\<^sub>2 y\\<^sub>2; y\\<^sub>1 = y\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a (Point x\\<^sub>2 y\\<^sub>2)\n                       (Point x\\<^sub>2 y\\<^sub>2) =\n                      ell_field_class.add a (Point x\\<^sub>2 y\\<^sub>2)\n                       (Point x\\<^sub>2 y\\<^sub>2)\n 4. \\<lbrakk>(2::'a) \\<noteq> (0::'a) \\<and> y\\<^sub>2 \\<noteq> (0::'a);\n     x\\<^sub>1 = x\\<^sub>2; q = Point x\\<^sub>2 y\\<^sub>2;\n     p = Point x\\<^sub>2 y\\<^sub>2; y\\<^sub>1 = y\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ?y\\<^sub>15 \\<noteq> (0::'a)\n 5. \\<lbrakk>(2::'a) \\<noteq> (0::'a) \\<and> y\\<^sub>2 \\<noteq> (0::'a);\n     x\\<^sub>1 = x\\<^sub>2; q = Point x\\<^sub>2 y\\<^sub>2;\n     p = Point x\\<^sub>2 y\\<^sub>2; y\\<^sub>1 = y\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ?l5 =\n                      ((3::'a) * ?x\\<^sub>15\\<^sup>2 + a) /\n                      ((2::'a) * ?y\\<^sub>15)\n 6. \\<lbrakk>(2::'a) \\<noteq> (0::'a) \\<and> y\\<^sub>2 \\<noteq> (0::'a);\n     x\\<^sub>1 = x\\<^sub>2; q = Point x\\<^sub>2 y\\<^sub>2;\n     p = Point x\\<^sub>2 y\\<^sub>2; y\\<^sub>1 = y\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ?x\\<^sub>25 = ?l5\\<^sup>2 - (2::'a) * ?x\\<^sub>15\n 7. \\<lbrakk>(2::'a) \\<noteq> (0::'a) \\<and> y\\<^sub>2 \\<noteq> (0::'a);\n     x\\<^sub>1 = x\\<^sub>2; q = Point x\\<^sub>2 y\\<^sub>2;\n     p = Point x\\<^sub>2 y\\<^sub>2; y\\<^sub>1 = y\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ?y\\<^sub>25 =\n                      - ?y\\<^sub>15 - ?l5 * (?x\\<^sub>25 - ?x\\<^sub>15)", "apply (auto simp add: add_def Let_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  P p q (ell_field_class.add a p q)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P p q (ell_field_class.add a p q)\n\ngoal (1 subgoal):\n 1. x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<Longrightarrow>\n    P p q (ell_field_class.add a p q)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<Longrightarrow>\n    P p q (ell_field_class.add a p q)", "case False"], ["proof (state)\nthis:\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n\ngoal (1 subgoal):\n 1. x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<Longrightarrow>\n    P p q (ell_field_class.add a p q)", "with Point Point'"], ["proof (chain)\npicking this:\n  q = Point x\\<^sub>2 y\\<^sub>2\n  p = Point x\\<^sub>1 y\\<^sub>1\n  x\\<^sub>1 \\<noteq> x\\<^sub>2", "show ?thesis"], ["proof (prove)\nusing this:\n  q = Point x\\<^sub>2 y\\<^sub>2\n  p = Point x\\<^sub>1 y\\<^sub>1\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n\ngoal (1 subgoal):\n 1. P p q (ell_field_class.add a p q)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>q = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>1 y\\<^sub>1;\n     x\\<^sub>1 \\<noteq> x\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> P p q (ell_field_class.add a p q)", "apply (rule R5)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<lbrakk>q = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>1 y\\<^sub>1;\n     x\\<^sub>1 \\<noteq> x\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> p = Point ?x\\<^sub>13 ?y\\<^sub>13\n 2. \\<lbrakk>q = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>1 y\\<^sub>1;\n     x\\<^sub>1 \\<noteq> x\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> q = Point ?x\\<^sub>23 ?y\\<^sub>23\n 3. \\<lbrakk>q = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>1 y\\<^sub>1;\n     x\\<^sub>1 \\<noteq> x\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a p q =\n                      Point ?x\\<^sub>33 ?y\\<^sub>33\n 4. \\<lbrakk>q = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>1 y\\<^sub>1;\n     x\\<^sub>1 \\<noteq> x\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a p q = ell_field_class.add a p q\n 5. \\<lbrakk>q = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>1 y\\<^sub>1;\n     x\\<^sub>1 \\<noteq> x\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ?x\\<^sub>13 \\<noteq> ?x\\<^sub>23\n 6. \\<lbrakk>q = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>1 y\\<^sub>1;\n     x\\<^sub>1 \\<noteq> x\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ?l3 =\n                      (?y\\<^sub>23 - ?y\\<^sub>13) /\n                      (?x\\<^sub>23 - ?x\\<^sub>13)\n 7. \\<lbrakk>q = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>1 y\\<^sub>1;\n     x\\<^sub>1 \\<noteq> x\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ?x\\<^sub>33 = ?l3\\<^sup>2 - ?x\\<^sub>13 - ?x\\<^sub>23\n 8. \\<lbrakk>q = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>1 y\\<^sub>1;\n     x\\<^sub>1 \\<noteq> x\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ?y\\<^sub>33 =\n                      - ?y\\<^sub>13 - ?l3 * (?x\\<^sub>33 - ?x\\<^sub>13)", "apply (auto simp add: add_def Let_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  P p q (ell_field_class.add a p q)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P p q (ell_field_class.add a p q)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P p q (ell_field_class.add a p q)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma eq_opp_is_zero: \"((x::'a::ell_field) = - x) = (x = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x = - x) = (x = (0::'a))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. x = - x \\<Longrightarrow> x = (0::'a)\n 2. x = (0::'a) \\<Longrightarrow> x = - x", "assume \"x = - x\""], ["proof (state)\nthis:\n  x = - x\n\ngoal (2 subgoals):\n 1. x = - x \\<Longrightarrow> x = (0::'a)\n 2. x = (0::'a) \\<Longrightarrow> x = - x", "have \"2 * x = x + x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (2::'a) * x = x + x", "by simp"], ["proof (state)\nthis:\n  (2::'a) * x = x + x\n\ngoal (2 subgoals):\n 1. x = - x \\<Longrightarrow> x = (0::'a)\n 2. x = (0::'a) \\<Longrightarrow> x = - x", "also"], ["proof (state)\nthis:\n  (2::'a) * x = x + x\n\ngoal (2 subgoals):\n 1. x = - x \\<Longrightarrow> x = (0::'a)\n 2. x = (0::'a) \\<Longrightarrow> x = - x", "from \\<open>x = - x\\<close>"], ["proof (chain)\npicking this:\n  x = - x", "have \"\\<dots> = - x + x\""], ["proof (prove)\nusing this:\n  x = - x\n\ngoal (1 subgoal):\n 1. x + x = - x + x", "by simp"], ["proof (state)\nthis:\n  x + x = - x + x\n\ngoal (2 subgoals):\n 1. x = - x \\<Longrightarrow> x = (0::'a)\n 2. x = (0::'a) \\<Longrightarrow> x = - x", "also"], ["proof (state)\nthis:\n  x + x = - x + x\n\ngoal (2 subgoals):\n 1. x = - x \\<Longrightarrow> x = (0::'a)\n 2. x = (0::'a) \\<Longrightarrow> x = - x", "have \"\\<dots> = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - x + x = (0::'a)", "by simp"], ["proof (state)\nthis:\n  - x + x = (0::'a)\n\ngoal (2 subgoals):\n 1. x = - x \\<Longrightarrow> x = (0::'a)\n 2. x = (0::'a) \\<Longrightarrow> x = - x", "finally"], ["proof (chain)\npicking this:\n  (2::'a) * x = (0::'a)", "have \"2 * x = 0\""], ["proof (prove)\nusing this:\n  (2::'a) * x = (0::'a)\n\ngoal (1 subgoal):\n 1. (2::'a) * x = (0::'a)", "."], ["proof (state)\nthis:\n  (2::'a) * x = (0::'a)\n\ngoal (2 subgoals):\n 1. x = - x \\<Longrightarrow> x = (0::'a)\n 2. x = (0::'a) \\<Longrightarrow> x = - x", "with two_not_zero [where 'a='a]"], ["proof (chain)\npicking this:\n  (2::'a) \\<noteq> (0::'a)\n  (2::'a) * x = (0::'a)", "show \"x = 0\""], ["proof (prove)\nusing this:\n  (2::'a) \\<noteq> (0::'a)\n  (2::'a) * x = (0::'a)\n\ngoal (1 subgoal):\n 1. x = (0::'a)", "by simp"], ["proof (state)\nthis:\n  x = (0::'a)\n\ngoal (1 subgoal):\n 1. x = (0::'a) \\<Longrightarrow> x = - x", "qed simp"], ["", "lemma add_casew [consumes 2, case_names InfL InfR Opp Gen]:\n  assumes p: \"on_curve a b p\"\n  and q: \"on_curve a b q\"\n  and R1: \"\\<And>p. P Infinity p p\"\n  and R2: \"\\<And>p. P p Infinity p\"\n  and R3: \"\\<And>p. on_curve a b p \\<Longrightarrow> P p (opp p) Infinity\"\n  and R4: \"\\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n    p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1 \\<Longrightarrow> p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2 \\<Longrightarrow> p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3 \\<Longrightarrow>\n    p\\<^sub>3 = add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow> p\\<^sub>1 \\<noteq> opp p\\<^sub>2 \\<Longrightarrow>\n    x\\<^sub>1 = x\\<^sub>2 \\<and> y\\<^sub>1 = y\\<^sub>2 \\<and> l = (3 * x\\<^sub>1 ^ 2 + a) / (2 * y\\<^sub>1) \\<or>\n    x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<and> l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) \\<Longrightarrow>\n    x\\<^sub>3 = l ^ 2 - x\\<^sub>1 - x\\<^sub>2 \\<Longrightarrow>\n    y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1) \\<Longrightarrow>\n    P p\\<^sub>1 p\\<^sub>2 p\\<^sub>3\"\n  shows \"P p q (add a p q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P p q (ell_field_class.add a p q)", "using p q"], ["proof (prove)\nusing this:\n  on_curve a b p\n  on_curve a b q\n\ngoal (1 subgoal):\n 1. P p q (ell_field_class.add a p q)", "apply (rule add_case)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>p. P Infinity p p\n 2. \\<And>p. P p Infinity p\n 3. \\<And>p. on_curve a b p \\<Longrightarrow> P p (opp p) Infinity\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> P p\\<^sub>1 p\\<^sub>1 p\\<^sub>2\n 5. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> P p\\<^sub>1 p\\<^sub>2 p\\<^sub>3", "apply (rule R1)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>p. P p Infinity p\n 2. \\<And>p. on_curve a b p \\<Longrightarrow> P p (opp p) Infinity\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> P p\\<^sub>1 p\\<^sub>1 p\\<^sub>2\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> P p\\<^sub>1 p\\<^sub>2 p\\<^sub>3", "apply (rule R2)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>p. on_curve a b p \\<Longrightarrow> P p (opp p) Infinity\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> P p\\<^sub>1 p\\<^sub>1 p\\<^sub>2\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> P p\\<^sub>1 p\\<^sub>2 p\\<^sub>3", "apply (rule R3)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>p. on_curve a b p \\<Longrightarrow> on_curve a b p\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> P p\\<^sub>1 p\\<^sub>1 p\\<^sub>2\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> P p\\<^sub>1 p\\<^sub>2 p\\<^sub>3", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> P p\\<^sub>1 p\\<^sub>1 p\\<^sub>2\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> P p\\<^sub>1 p\\<^sub>2 p\\<^sub>3", "apply (rule R4)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 =\n                         Point\n                          (?x\\<^sub>110 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                            p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l)\n                          (?y\\<^sub>110 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                            p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l)\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 =\n                         Point\n                          (?x\\<^sub>210 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                            p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l)\n                          (?y\\<^sub>210 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                            p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l)\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         Point\n                          (?x\\<^sub>310 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                            p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l)\n                          (?y\\<^sub>310 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                            p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l)\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>1 p\\<^sub>1\n 5. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 \\<noteq> opp p\\<^sub>1\n 6. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> ?x\\<^sub>110 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                          p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l =\n                         ?x\\<^sub>210 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                          p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l \\<and>\n                         ?y\\<^sub>110 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                          p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l =\n                         ?y\\<^sub>210 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                          p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l \\<and>\n                         ?l10 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2\n                          x\\<^sub>2 y\\<^sub>2 l =\n                         ((3::'a) *\n                          (?x\\<^sub>110 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                            p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l)\\<^sup>2 +\n                          a) /\n                         ((2::'a) *\n                          ?y\\<^sub>110 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                           p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l) \\<or>\n                         ?x\\<^sub>110 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                          p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l \\<noteq>\n                         ?x\\<^sub>210 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                          p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l \\<and>\n                         ?l10 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2\n                          x\\<^sub>2 y\\<^sub>2 l =\n                         (?y\\<^sub>210 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                           p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l -\n                          ?y\\<^sub>110 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                           p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l) /\n                         (?x\\<^sub>210 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                           p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l -\n                          ?x\\<^sub>110 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                           p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l)\n 7. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> ?x\\<^sub>310 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                          p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l =\n                         (?l10 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2\n                           x\\<^sub>2 y\\<^sub>2 l)\\<^sup>2 -\n                         ?x\\<^sub>110 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                          p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l -\n                         ?x\\<^sub>210 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                          p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l\n 8. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> ?y\\<^sub>310 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                          p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l =\n                         - ?y\\<^sub>110 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                            p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l -\n                         ?l10 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2\n                          x\\<^sub>2 y\\<^sub>2 l *\n                         (?x\\<^sub>310 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                           p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l -\n                          ?x\\<^sub>110 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                           p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l)\n 9. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> P p\\<^sub>1 p\\<^sub>2 p\\<^sub>3", "apply assumption+"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 \\<noteq> opp p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> x\\<^sub>1 = x\\<^sub>1 \\<and>\n                         y\\<^sub>1 = y\\<^sub>1 \\<and>\n                         ?l10 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2\n                          x\\<^sub>2 y\\<^sub>2 l =\n                         ((3::'a) * x\\<^sub>1\\<^sup>2 + a) /\n                         ((2::'a) * y\\<^sub>1) \\<or>\n                         x\\<^sub>1 \\<noteq> x\\<^sub>1 \\<and>\n                         ?l10 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2\n                          x\\<^sub>2 y\\<^sub>2 l =\n                         (y\\<^sub>1 - y\\<^sub>1) / (x\\<^sub>1 - x\\<^sub>1)\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> x\\<^sub>2 =\n                         (?l10 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2\n                           x\\<^sub>2 y\\<^sub>2 l)\\<^sup>2 -\n                         x\\<^sub>1 -\n                         x\\<^sub>1\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> y\\<^sub>2 =\n                         - y\\<^sub>1 -\n                         ?l10 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2\n                          x\\<^sub>2 y\\<^sub>2 l *\n                         (x\\<^sub>2 - x\\<^sub>1)\n 5. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> P p\\<^sub>1 p\\<^sub>2 p\\<^sub>3", "apply (simp add: opp_def eq_opp_is_zero)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> x\\<^sub>1 = x\\<^sub>1 \\<and>\n                         y\\<^sub>1 = y\\<^sub>1 \\<and>\n                         ?l10 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2\n                          x\\<^sub>2 y\\<^sub>2 l =\n                         ((3::'a) * x\\<^sub>1\\<^sup>2 + a) /\n                         ((2::'a) * y\\<^sub>1) \\<or>\n                         x\\<^sub>1 \\<noteq> x\\<^sub>1 \\<and>\n                         ?l10 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2\n                          x\\<^sub>2 y\\<^sub>2 l =\n                         (y\\<^sub>1 - y\\<^sub>1) / (x\\<^sub>1 - x\\<^sub>1)\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> x\\<^sub>2 =\n                         (?l10 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2\n                           x\\<^sub>2 y\\<^sub>2 l)\\<^sup>2 -\n                         x\\<^sub>1 -\n                         x\\<^sub>1\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> y\\<^sub>2 =\n                         - y\\<^sub>1 -\n                         ?l10 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2\n                          x\\<^sub>2 y\\<^sub>2 l *\n                         (x\\<^sub>2 - x\\<^sub>1)\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> P p\\<^sub>1 p\\<^sub>2 p\\<^sub>3", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> x\\<^sub>2 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> y\\<^sub>2 =\n                         - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> P p\\<^sub>1 p\\<^sub>2 p\\<^sub>3", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> y\\<^sub>2 =\n                         - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> P p\\<^sub>1 p\\<^sub>2 p\\<^sub>3", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> P p\\<^sub>1 p\\<^sub>2 p\\<^sub>3", "apply (rule R4)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 =\n                         Point\n                          (?x\\<^sub>120 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                            p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3\n                            x\\<^sub>3 y\\<^sub>3 l)\n                          (?y\\<^sub>120 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                            p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3\n                            x\\<^sub>3 y\\<^sub>3 l)\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         Point\n                          (?x\\<^sub>220 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                            p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3\n                            x\\<^sub>3 y\\<^sub>3 l)\n                          (?y\\<^sub>220 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                            p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3\n                            x\\<^sub>3 y\\<^sub>3 l)\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         Point\n                          (?x\\<^sub>320 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                            p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3\n                            x\\<^sub>3 y\\<^sub>3 l)\n                          (?y\\<^sub>320 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                            p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3\n                            x\\<^sub>3 y\\<^sub>3 l)\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n 5. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 \\<noteq> opp p\\<^sub>2\n 6. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> ?x\\<^sub>120 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                          p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n                          y\\<^sub>3 l =\n                         ?x\\<^sub>220 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                          p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n                          y\\<^sub>3 l \\<and>\n                         ?y\\<^sub>120 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                          p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n                          y\\<^sub>3 l =\n                         ?y\\<^sub>220 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                          p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n                          y\\<^sub>3 l \\<and>\n                         ?l20 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2\n                          x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3 y\\<^sub>3\n                          l =\n                         ((3::'a) *\n                          (?x\\<^sub>120 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                            p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3\n                            x\\<^sub>3 y\\<^sub>3 l)\\<^sup>2 +\n                          a) /\n                         ((2::'a) *\n                          ?y\\<^sub>120 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                           p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n                           y\\<^sub>3 l) \\<or>\n                         ?x\\<^sub>120 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                          p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n                          y\\<^sub>3 l \\<noteq>\n                         ?x\\<^sub>220 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                          p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n                          y\\<^sub>3 l \\<and>\n                         ?l20 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2\n                          x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3 y\\<^sub>3\n                          l =\n                         (?y\\<^sub>220 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                           p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n                           y\\<^sub>3 l -\n                          ?y\\<^sub>120 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                           p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n                           y\\<^sub>3 l) /\n                         (?x\\<^sub>220 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                           p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n                           y\\<^sub>3 l -\n                          ?x\\<^sub>120 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                           p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n                           y\\<^sub>3 l)\n 7. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> ?x\\<^sub>320 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                          p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n                          y\\<^sub>3 l =\n                         (?l20 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2\n                           x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3 y\\<^sub>3\n                           l)\\<^sup>2 -\n                         ?x\\<^sub>120 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                          p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n                          y\\<^sub>3 l -\n                         ?x\\<^sub>220 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                          p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n                          y\\<^sub>3 l\n 8. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> ?y\\<^sub>320 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                          p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n                          y\\<^sub>3 l =\n                         - ?y\\<^sub>120 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                            p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3\n                            x\\<^sub>3 y\\<^sub>3 l -\n                         ?l20 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2\n                          x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3 y\\<^sub>3\n                          l *\n                         (?x\\<^sub>320 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                           p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n                           y\\<^sub>3 l -\n                          ?x\\<^sub>120 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1\n                           p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n                           y\\<^sub>3 l)", "apply assumption+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 \\<noteq> opp p\\<^sub>2\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> x\\<^sub>1 = x\\<^sub>2 \\<and>\n                         y\\<^sub>1 = y\\<^sub>2 \\<and>\n                         ?l20 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2\n                          x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3 y\\<^sub>3\n                          l =\n                         ((3::'a) * x\\<^sub>1\\<^sup>2 + a) /\n                         ((2::'a) * y\\<^sub>1) \\<or>\n                         x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<and>\n                         ?l20 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2\n                          x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3 y\\<^sub>3\n                          l =\n                         (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> x\\<^sub>3 =\n                         (?l20 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2\n                           x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3 y\\<^sub>3\n                           l)\\<^sup>2 -\n                         x\\<^sub>1 -\n                         x\\<^sub>2\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> y\\<^sub>3 =\n                         - y\\<^sub>1 -\n                         ?l20 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2\n                          x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3 y\\<^sub>3\n                          l *\n                         (x\\<^sub>3 - x\\<^sub>1)", "apply (simp add: opp_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> x\\<^sub>1 = x\\<^sub>2 \\<and>\n                         y\\<^sub>1 = y\\<^sub>2 \\<and>\n                         ?l20 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2\n                          x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3 y\\<^sub>3\n                          l =\n                         ((3::'a) * x\\<^sub>1\\<^sup>2 + a) /\n                         ((2::'a) * y\\<^sub>1) \\<or>\n                         x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<and>\n                         ?l20 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2\n                          x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3 y\\<^sub>3\n                          l =\n                         (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> x\\<^sub>3 =\n                         (?l20 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2\n                           x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3 y\\<^sub>3\n                           l)\\<^sup>2 -\n                         x\\<^sub>1 -\n                         x\\<^sub>2\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> y\\<^sub>3 =\n                         - y\\<^sub>1 -\n                         ?l20 p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2\n                          x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3 y\\<^sub>3\n                          l *\n                         (x\\<^sub>3 - x\\<^sub>1)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> y\\<^sub>3 =\n                         - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)", "apply assumption+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  \"is_tangent p q = (p \\<noteq> Infinity \\<and> p = q \\<and> p \\<noteq> opp q)\""], ["", "definition\n  \"is_generic p q =\n     (p \\<noteq> Infinity \\<and> q \\<noteq> Infinity \\<and>\n      p \\<noteq> q \\<and> p \\<noteq> opp q)\""], ["", "lemma diff_neq0:\n  \"(a::'a::ring) \\<noteq> b \\<Longrightarrow> a - b \\<noteq> 0\"\n  \"a \\<noteq> b \\<Longrightarrow> b - a \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<noteq> b \\<Longrightarrow> a - b \\<noteq> (0::'a)) &&&\n    (a \\<noteq> b \\<Longrightarrow> b - a \\<noteq> (0::'a))", "by simp_all"], ["", "lemma minus2_not0: \"(-2::'a::ell_field) \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - (2::'a) \\<noteq> (0::'a)", "using two_not_zero [where 'a='a]"], ["proof (prove)\nusing this:\n  (2::'a) \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. - (2::'a) \\<noteq> (0::'a)", "by simp"], ["", "lemmas [simp] = minus2_not0 [simplified]"], ["", "declare two_not_zero [simplified, simp add]"], ["", "lemma spec1_assoc:\n  assumes p\\<^sub>1: \"on_curve a b p\\<^sub>1\"\n  and p\\<^sub>2: \"on_curve a b p\\<^sub>2\"\n  and p\\<^sub>3: \"on_curve a b p\\<^sub>3\"\n  and \"is_generic p\\<^sub>1 p\\<^sub>2\"\n  and \"is_generic p\\<^sub>2 p\\<^sub>3\"\n  and \"is_generic (add a p\\<^sub>1 p\\<^sub>2) p\\<^sub>3\"\n  and \"is_generic p\\<^sub>1 (add a p\\<^sub>2 p\\<^sub>3)\"\n  shows \"add a p\\<^sub>1 (add a p\\<^sub>2 p\\<^sub>3) = add a (add a p\\<^sub>1 p\\<^sub>2) p\\<^sub>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "using p\\<^sub>1 p\\<^sub>2 assms"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n  is_generic p\\<^sub>1 p\\<^sub>2\n  is_generic p\\<^sub>2 p\\<^sub>3\n  is_generic (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) p\\<^sub>3\n  is_generic p\\<^sub>1 (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "proof (induct rule: add_case)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b Infinity; on_curve a b p;\n        on_curve a b p\\<^sub>3; is_generic Infinity p;\n        is_generic p p\\<^sub>3; is_generic p p\\<^sub>3;\n        is_generic Infinity (ell_field_class.add a p p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a Infinity\n                          (ell_field_class.add a p p\\<^sub>3) =\n                         ell_field_class.add a p p\\<^sub>3\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        on_curve a b p\\<^sub>3; is_generic p Infinity;\n        is_generic Infinity p\\<^sub>3; is_generic p p\\<^sub>3;\n        is_generic p (ell_field_class.add a Infinity p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a Infinity p\\<^sub>3) =\n                         ell_field_class.add a p p\\<^sub>3\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        on_curve a b p\\<^sub>3; is_generic p (opp p);\n        is_generic (opp p) p\\<^sub>3; is_generic Infinity p\\<^sub>3;\n        is_generic p (ell_field_class.add a (opp p) p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a (opp p) p\\<^sub>3) =\n                         ell_field_class.add a Infinity p\\<^sub>3\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 5. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "case InfL"], ["proof (state)\nthis:\n  on_curve a b Infinity\n  on_curve a b p_\n  on_curve a b p\\<^sub>3\n  is_generic Infinity p_\n  is_generic p_ p\\<^sub>3\n  is_generic p_ p\\<^sub>3\n  is_generic Infinity (ell_field_class.add a p_ p\\<^sub>3)\n\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b Infinity; on_curve a b p;\n        on_curve a b p\\<^sub>3; is_generic Infinity p;\n        is_generic p p\\<^sub>3; is_generic p p\\<^sub>3;\n        is_generic Infinity (ell_field_class.add a p p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a Infinity\n                          (ell_field_class.add a p p\\<^sub>3) =\n                         ell_field_class.add a p p\\<^sub>3\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        on_curve a b p\\<^sub>3; is_generic p Infinity;\n        is_generic Infinity p\\<^sub>3; is_generic p p\\<^sub>3;\n        is_generic p (ell_field_class.add a Infinity p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a Infinity p\\<^sub>3) =\n                         ell_field_class.add a p p\\<^sub>3\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        on_curve a b p\\<^sub>3; is_generic p (opp p);\n        is_generic (opp p) p\\<^sub>3; is_generic Infinity p\\<^sub>3;\n        is_generic p (ell_field_class.add a (opp p) p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a (opp p) p\\<^sub>3) =\n                         ell_field_class.add a Infinity p\\<^sub>3\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 5. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a Infinity (ell_field_class.add a p_ p\\<^sub>3) =\n    ell_field_class.add a p_ p\\<^sub>3", "by (simp add: add_def)"], ["proof (state)\nthis:\n  ell_field_class.add a Infinity (ell_field_class.add a p_ p\\<^sub>3) =\n  ell_field_class.add a p_ p\\<^sub>3\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        on_curve a b p\\<^sub>3; is_generic p Infinity;\n        is_generic Infinity p\\<^sub>3; is_generic p p\\<^sub>3;\n        is_generic p (ell_field_class.add a Infinity p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a Infinity p\\<^sub>3) =\n                         ell_field_class.add a p p\\<^sub>3\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        on_curve a b p\\<^sub>3; is_generic p (opp p);\n        is_generic (opp p) p\\<^sub>3; is_generic Infinity p\\<^sub>3;\n        is_generic p (ell_field_class.add a (opp p) p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a (opp p) p\\<^sub>3) =\n                         ell_field_class.add a Infinity p\\<^sub>3\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        on_curve a b p\\<^sub>3; is_generic p Infinity;\n        is_generic Infinity p\\<^sub>3; is_generic p p\\<^sub>3;\n        is_generic p (ell_field_class.add a Infinity p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a Infinity p\\<^sub>3) =\n                         ell_field_class.add a p p\\<^sub>3\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        on_curve a b p\\<^sub>3; is_generic p (opp p);\n        is_generic (opp p) p\\<^sub>3; is_generic Infinity p\\<^sub>3;\n        is_generic p (ell_field_class.add a (opp p) p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a (opp p) p\\<^sub>3) =\n                         ell_field_class.add a Infinity p\\<^sub>3\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "case InfR"], ["proof (state)\nthis:\n  on_curve a b p_\n  on_curve a b Infinity\n  on_curve a b p\\<^sub>3\n  is_generic p_ Infinity\n  is_generic Infinity p\\<^sub>3\n  is_generic p_ p\\<^sub>3\n  is_generic p_ (ell_field_class.add a Infinity p\\<^sub>3)\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        on_curve a b p\\<^sub>3; is_generic p Infinity;\n        is_generic Infinity p\\<^sub>3; is_generic p p\\<^sub>3;\n        is_generic p (ell_field_class.add a Infinity p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a Infinity p\\<^sub>3) =\n                         ell_field_class.add a p p\\<^sub>3\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        on_curve a b p\\<^sub>3; is_generic p (opp p);\n        is_generic (opp p) p\\<^sub>3; is_generic Infinity p\\<^sub>3;\n        is_generic p (ell_field_class.add a (opp p) p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a (opp p) p\\<^sub>3) =\n                         ell_field_class.add a Infinity p\\<^sub>3\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a p_ (ell_field_class.add a Infinity p\\<^sub>3) =\n    ell_field_class.add a p_ p\\<^sub>3", "by (simp add: add_def)"], ["proof (state)\nthis:\n  ell_field_class.add a p_ (ell_field_class.add a Infinity p\\<^sub>3) =\n  ell_field_class.add a p_ p\\<^sub>3\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        on_curve a b p\\<^sub>3; is_generic p (opp p);\n        is_generic (opp p) p\\<^sub>3; is_generic Infinity p\\<^sub>3;\n        is_generic p (ell_field_class.add a (opp p) p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a (opp p) p\\<^sub>3) =\n                         ell_field_class.add a Infinity p\\<^sub>3\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        on_curve a b p\\<^sub>3; is_generic p (opp p);\n        is_generic (opp p) p\\<^sub>3; is_generic Infinity p\\<^sub>3;\n        is_generic p (ell_field_class.add a (opp p) p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a (opp p) p\\<^sub>3) =\n                         ell_field_class.add a Infinity p\\<^sub>3\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "case Opp"], ["proof (state)\nthis:\n  on_curve a b p_\n  on_curve a b p_\n  on_curve a b (opp p_)\n  on_curve a b p\\<^sub>3\n  is_generic p_ (opp p_)\n  is_generic (opp p_) p\\<^sub>3\n  is_generic Infinity p\\<^sub>3\n  is_generic p_ (ell_field_class.add a (opp p_) p\\<^sub>3)\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        on_curve a b p\\<^sub>3; is_generic p (opp p);\n        is_generic (opp p) p\\<^sub>3; is_generic Infinity p\\<^sub>3;\n        is_generic p (ell_field_class.add a (opp p) p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a (opp p) p\\<^sub>3) =\n                         ell_field_class.add a Infinity p\\<^sub>3\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  on_curve a b p_\n  on_curve a b p_\n  on_curve a b (opp p_)\n  on_curve a b p\\<^sub>3\n  is_generic p_ (opp p_)\n  is_generic (opp p_) p\\<^sub>3\n  is_generic Infinity p\\<^sub>3\n  is_generic p_ (ell_field_class.add a (opp p_) p\\<^sub>3)", "show ?case"], ["proof (prove)\nusing this:\n  on_curve a b p_\n  on_curve a b p_\n  on_curve a b (opp p_)\n  on_curve a b p\\<^sub>3\n  is_generic p_ (opp p_)\n  is_generic (opp p_) p\\<^sub>3\n  is_generic Infinity p\\<^sub>3\n  is_generic p_ (ell_field_class.add a (opp p_) p\\<^sub>3)\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p_ (ell_field_class.add a (opp p_) p\\<^sub>3) =\n    ell_field_class.add a Infinity p\\<^sub>3", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  ell_field_class.add a p_ (ell_field_class.add a (opp p_) p\\<^sub>3) =\n  ell_field_class.add a Infinity p\\<^sub>3\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "case Tan"], ["proof (state)\nthis:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>3\n  is_generic p\\<^sub>1_ p\\<^sub>1_\n  is_generic p\\<^sub>1_ p\\<^sub>3\n  is_generic p\\<^sub>2_ p\\<^sub>3\n  is_generic p\\<^sub>1_ (ell_field_class.add a p\\<^sub>1_ p\\<^sub>3)\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>3\n  is_generic p\\<^sub>1_ p\\<^sub>1_\n  is_generic p\\<^sub>1_ p\\<^sub>3\n  is_generic p\\<^sub>2_ p\\<^sub>3\n  is_generic p\\<^sub>1_ (ell_field_class.add a p\\<^sub>1_ p\\<^sub>3)", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>3\n  is_generic p\\<^sub>1_ p\\<^sub>1_\n  is_generic p\\<^sub>1_ p\\<^sub>3\n  is_generic p\\<^sub>2_ p\\<^sub>3\n  is_generic p\\<^sub>1_ (ell_field_class.add a p\\<^sub>1_ p\\<^sub>3)\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1_\n     (ell_field_class.add a p\\<^sub>1_ p\\<^sub>3) =\n    ell_field_class.add a p\\<^sub>2_ p\\<^sub>3", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1_\n   (ell_field_class.add a p\\<^sub>1_ p\\<^sub>3) =\n  ell_field_class.add a p\\<^sub>2_ p\\<^sub>3\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "case (Gen p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>4 x\\<^sub>4 y\\<^sub>4 l)"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n  is_generic p\\<^sub>1 p\\<^sub>2\n  is_generic p\\<^sub>2 p\\<^sub>3\n  is_generic p\\<^sub>4 p\\<^sub>3\n  is_generic p\\<^sub>1 (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "with \\<open>on_curve a b p\\<^sub>2\\<close> \\<open>on_curve a b p\\<^sub>3\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n  is_generic p\\<^sub>1 p\\<^sub>2\n  is_generic p\\<^sub>2 p\\<^sub>3\n  is_generic p\\<^sub>4 p\\<^sub>3\n  is_generic p\\<^sub>1 (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)", "show ?case"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n  is_generic p\\<^sub>1 p\\<^sub>2\n  is_generic p\\<^sub>2 p\\<^sub>3\n  is_generic p\\<^sub>4 p\\<^sub>3\n  is_generic p\\<^sub>1 (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a p\\<^sub>4 p\\<^sub>3", "proof (induct rule: add_case)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Infinity = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 Infinity;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b Infinity; on_curve a b p;\n        is_generic p\\<^sub>1 Infinity; is_generic Infinity p;\n        is_generic p\\<^sub>4 p; is_generic p\\<^sub>1 p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p =\n                         ell_field_class.add a p\\<^sub>4 p\n 2. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b Infinity;\n        is_generic p\\<^sub>1 p; is_generic p Infinity;\n        is_generic p\\<^sub>4 Infinity; is_generic p\\<^sub>1 p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p =\n                         ell_field_class.add a p\\<^sub>4 Infinity\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b (opp p);\n        is_generic p\\<^sub>1 p; is_generic p (opp p);\n        is_generic p\\<^sub>4 (opp p); is_generic p\\<^sub>1 Infinity\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 Infinity =\n                         ell_field_class.add a p\\<^sub>4 (opp p)\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 5. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "case InfL"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  Infinity = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 Infinity\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b Infinity\n  on_curve a b p_\n  is_generic p\\<^sub>1 Infinity\n  is_generic Infinity p_\n  is_generic p\\<^sub>4 p_\n  is_generic p\\<^sub>1 p_\n\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Infinity = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 Infinity;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b Infinity; on_curve a b p;\n        is_generic p\\<^sub>1 Infinity; is_generic Infinity p;\n        is_generic p\\<^sub>4 p; is_generic p\\<^sub>1 p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p =\n                         ell_field_class.add a p\\<^sub>4 p\n 2. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b Infinity;\n        is_generic p\\<^sub>1 p; is_generic p Infinity;\n        is_generic p\\<^sub>4 Infinity; is_generic p\\<^sub>1 p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p =\n                         ell_field_class.add a p\\<^sub>4 Infinity\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b (opp p);\n        is_generic p\\<^sub>1 p; is_generic p (opp p);\n        is_generic p\\<^sub>4 (opp p); is_generic p\\<^sub>1 Infinity\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 Infinity =\n                         ell_field_class.add a p\\<^sub>4 (opp p)\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 5. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  Infinity = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 Infinity\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b Infinity\n  on_curve a b p_\n  is_generic p\\<^sub>1 Infinity\n  is_generic Infinity p_\n  is_generic p\\<^sub>4 p_\n  is_generic p\\<^sub>1 p_", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  Infinity = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 Infinity\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b Infinity\n  on_curve a b p_\n  is_generic p\\<^sub>1 Infinity\n  is_generic Infinity p_\n  is_generic p\\<^sub>4 p_\n  is_generic p\\<^sub>1 p_\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p_ = ell_field_class.add a p\\<^sub>4 p_", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p_ = ell_field_class.add a p\\<^sub>4 p_\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b Infinity;\n        is_generic p\\<^sub>1 p; is_generic p Infinity;\n        is_generic p\\<^sub>4 Infinity; is_generic p\\<^sub>1 p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p =\n                         ell_field_class.add a p\\<^sub>4 Infinity\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b (opp p);\n        is_generic p\\<^sub>1 p; is_generic p (opp p);\n        is_generic p\\<^sub>4 (opp p); is_generic p\\<^sub>1 Infinity\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 Infinity =\n                         ell_field_class.add a p\\<^sub>4 (opp p)\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b Infinity;\n        is_generic p\\<^sub>1 p; is_generic p Infinity;\n        is_generic p\\<^sub>4 Infinity; is_generic p\\<^sub>1 p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p =\n                         ell_field_class.add a p\\<^sub>4 Infinity\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b (opp p);\n        is_generic p\\<^sub>1 p; is_generic p (opp p);\n        is_generic p\\<^sub>4 (opp p); is_generic p\\<^sub>1 Infinity\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 Infinity =\n                         ell_field_class.add a p\\<^sub>4 (opp p)\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "case InfR"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p_ = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p_\n  on_curve a b Infinity\n  is_generic p\\<^sub>1 p_\n  is_generic p_ Infinity\n  is_generic p\\<^sub>4 Infinity\n  is_generic p\\<^sub>1 p_\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b Infinity;\n        is_generic p\\<^sub>1 p; is_generic p Infinity;\n        is_generic p\\<^sub>4 Infinity; is_generic p\\<^sub>1 p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p =\n                         ell_field_class.add a p\\<^sub>4 Infinity\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b (opp p);\n        is_generic p\\<^sub>1 p; is_generic p (opp p);\n        is_generic p\\<^sub>4 (opp p); is_generic p\\<^sub>1 Infinity\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 Infinity =\n                         ell_field_class.add a p\\<^sub>4 (opp p)\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p_ = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p_\n  on_curve a b Infinity\n  is_generic p\\<^sub>1 p_\n  is_generic p_ Infinity\n  is_generic p\\<^sub>4 Infinity\n  is_generic p\\<^sub>1 p_", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p_ = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p_\n  on_curve a b Infinity\n  is_generic p\\<^sub>1 p_\n  is_generic p_ Infinity\n  is_generic p\\<^sub>4 Infinity\n  is_generic p\\<^sub>1 p_\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p_ =\n    ell_field_class.add a p\\<^sub>4 Infinity", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p_ =\n  ell_field_class.add a p\\<^sub>4 Infinity\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b (opp p);\n        is_generic p\\<^sub>1 p; is_generic p (opp p);\n        is_generic p\\<^sub>4 (opp p); is_generic p\\<^sub>1 Infinity\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 Infinity =\n                         ell_field_class.add a p\\<^sub>4 (opp p)\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b (opp p);\n        is_generic p\\<^sub>1 p; is_generic p (opp p);\n        is_generic p\\<^sub>4 (opp p); is_generic p\\<^sub>1 Infinity\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 Infinity =\n                         ell_field_class.add a p\\<^sub>4 (opp p)\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "case Opp"], ["proof (state)\nthis:\n  on_curve a b p_\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p_ = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p_\n  on_curve a b (opp p_)\n  is_generic p\\<^sub>1 p_\n  is_generic p_ (opp p_)\n  is_generic p\\<^sub>4 (opp p_)\n  is_generic p\\<^sub>1 Infinity\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b (opp p);\n        is_generic p\\<^sub>1 p; is_generic p (opp p);\n        is_generic p\\<^sub>4 (opp p); is_generic p\\<^sub>1 Infinity\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 Infinity =\n                         ell_field_class.add a p\\<^sub>4 (opp p)\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  on_curve a b p_\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p_ = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p_\n  on_curve a b (opp p_)\n  is_generic p\\<^sub>1 p_\n  is_generic p_ (opp p_)\n  is_generic p\\<^sub>4 (opp p_)\n  is_generic p\\<^sub>1 Infinity", "show ?case"], ["proof (prove)\nusing this:\n  on_curve a b p_\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p_ = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p_\n  on_curve a b (opp p_)\n  is_generic p\\<^sub>1 p_\n  is_generic p_ (opp p_)\n  is_generic p\\<^sub>4 (opp p_)\n  is_generic p\\<^sub>1 Infinity\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 Infinity =\n    ell_field_class.add a p\\<^sub>4 (opp p_)", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 Infinity =\n  ell_field_class.add a p\\<^sub>4 (opp p_)\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "case Tan"], ["proof (state)\nthis:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>1_ = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>1_\n  is_generic p\\<^sub>1 p\\<^sub>1_\n  is_generic p\\<^sub>1_ p\\<^sub>1_\n  is_generic p\\<^sub>4 p\\<^sub>1_\n  is_generic p\\<^sub>1 p\\<^sub>2_\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>1_ = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>1_\n  is_generic p\\<^sub>1 p\\<^sub>1_\n  is_generic p\\<^sub>1_ p\\<^sub>1_\n  is_generic p\\<^sub>4 p\\<^sub>1_\n  is_generic p\\<^sub>1 p\\<^sub>2_", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>1_ = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>1_\n  is_generic p\\<^sub>1 p\\<^sub>1_\n  is_generic p\\<^sub>1_ p\\<^sub>1_\n  is_generic p\\<^sub>4 p\\<^sub>1_\n  is_generic p\\<^sub>1 p\\<^sub>2_\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2_ =\n    ell_field_class.add a p\\<^sub>4 p\\<^sub>1_", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2_ =\n  ell_field_class.add a p\\<^sub>4 p\\<^sub>1_\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "case (Gen p\\<^sub>2 x\\<^sub>2' y\\<^sub>2' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 p\\<^sub>5 x\\<^sub>5 y\\<^sub>5 l\\<^sub>1)"], ["proof (state)\nthis:\n  p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>5 = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5 = ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n  x\\<^sub>2' \\<noteq> x\\<^sub>3\n  l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n  is_generic p\\<^sub>1 p\\<^sub>2\n  is_generic p\\<^sub>2 p\\<^sub>3\n  is_generic p\\<^sub>4 p\\<^sub>3\n  is_generic p\\<^sub>1 p\\<^sub>5\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "from \\<open>on_curve a b p\\<^sub>2\\<close> \\<open>on_curve a b p\\<^sub>3\\<close> \\<open>p\\<^sub>5 = add a p\\<^sub>2 p\\<^sub>3\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n  p\\<^sub>5 = ell_field_class.add a p\\<^sub>2 p\\<^sub>3", "have \"on_curve a b p\\<^sub>5\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n  p\\<^sub>5 = ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n\ngoal (1 subgoal):\n 1. on_curve a b p\\<^sub>5", "by (simp add: add_closed)"], ["proof (state)\nthis:\n  on_curve a b p\\<^sub>5\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "with \\<open>on_curve a b p\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>5", "show ?case"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>5\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>5 =\n    ell_field_class.add a p\\<^sub>4 p\\<^sub>3", "using Gen [simplified \\<open>p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2'\\<close>]"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>5\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>5 = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5 = ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3\n  x\\<^sub>2' \\<noteq> x\\<^sub>3\n  l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2')\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b (Point x\\<^sub>2' y\\<^sub>2')\n  on_curve a b p\\<^sub>3\n  is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2')\n  is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3\n  is_generic p\\<^sub>4 p\\<^sub>3\n  is_generic p\\<^sub>1 p\\<^sub>5\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>5 =\n    ell_field_class.add a p\\<^sub>4 p\\<^sub>3", "proof (induct rule: add_case)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p = Point x\\<^sub>5 y\\<^sub>5;\n        p = ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        Infinity = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 =\n        ell_field_class.add a Infinity (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b Infinity; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3;\n        is_generic Infinity (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3; is_generic Infinity p\\<rbrakk>\n       \\<Longrightarrow> p = ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n 2. \\<And>p.\n       \\<lbrakk>Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        Infinity = Point x\\<^sub>5 y\\<^sub>5;\n        Infinity =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3; is_generic p (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3; is_generic p Infinity\\<rbrakk>\n       \\<Longrightarrow> p = ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        opp p = Point x\\<^sub>5 y\\<^sub>5;\n        opp p =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3; is_generic p (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3; is_generic p (opp p)\\<rbrakk>\n       \\<Longrightarrow> Infinity =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3;\n        is_generic p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n 5. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1' - la * (x\\<^sub>3' - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3", "case InfL"], ["proof (state)\nthis:\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  p_ = Point x\\<^sub>5 y\\<^sub>5\n  p_ = ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3\n  x\\<^sub>2' \\<noteq> x\\<^sub>3\n  l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  Infinity = Point x\\<^sub>1 y\\<^sub>1\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a Infinity (Point x\\<^sub>2' y\\<^sub>2')\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b Infinity\n  on_curve a b (Point x\\<^sub>2' y\\<^sub>2')\n  on_curve a b p\\<^sub>3\n  is_generic Infinity (Point x\\<^sub>2' y\\<^sub>2')\n  is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3\n  is_generic p\\<^sub>4 p\\<^sub>3\n  is_generic Infinity p_\n\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p = Point x\\<^sub>5 y\\<^sub>5;\n        p = ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        Infinity = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 =\n        ell_field_class.add a Infinity (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b Infinity; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3;\n        is_generic Infinity (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3; is_generic Infinity p\\<rbrakk>\n       \\<Longrightarrow> p = ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n 2. \\<And>p.\n       \\<lbrakk>Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        Infinity = Point x\\<^sub>5 y\\<^sub>5;\n        Infinity =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3; is_generic p (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3; is_generic p Infinity\\<rbrakk>\n       \\<Longrightarrow> p = ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        opp p = Point x\\<^sub>5 y\\<^sub>5;\n        opp p =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3; is_generic p (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3; is_generic p (opp p)\\<rbrakk>\n       \\<Longrightarrow> Infinity =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3;\n        is_generic p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n 5. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1' - la * (x\\<^sub>3' - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  p_ = Point x\\<^sub>5 y\\<^sub>5\n  p_ = ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3\n  x\\<^sub>2' \\<noteq> x\\<^sub>3\n  l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  Infinity = Point x\\<^sub>1 y\\<^sub>1\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a Infinity (Point x\\<^sub>2' y\\<^sub>2')\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b Infinity\n  on_curve a b (Point x\\<^sub>2' y\\<^sub>2')\n  on_curve a b p\\<^sub>3\n  is_generic Infinity (Point x\\<^sub>2' y\\<^sub>2')\n  is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3\n  is_generic p\\<^sub>4 p\\<^sub>3\n  is_generic Infinity p_", "show ?case"], ["proof (prove)\nusing this:\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  p_ = Point x\\<^sub>5 y\\<^sub>5\n  p_ = ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3\n  x\\<^sub>2' \\<noteq> x\\<^sub>3\n  l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  Infinity = Point x\\<^sub>1 y\\<^sub>1\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a Infinity (Point x\\<^sub>2' y\\<^sub>2')\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b Infinity\n  on_curve a b (Point x\\<^sub>2' y\\<^sub>2')\n  on_curve a b p\\<^sub>3\n  is_generic Infinity (Point x\\<^sub>2' y\\<^sub>2')\n  is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3\n  is_generic p\\<^sub>4 p\\<^sub>3\n  is_generic Infinity p_\n\ngoal (1 subgoal):\n 1. p_ = ell_field_class.add a p\\<^sub>4 p\\<^sub>3", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  p_ = ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        Infinity = Point x\\<^sub>5 y\\<^sub>5;\n        Infinity =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3; is_generic p (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3; is_generic p Infinity\\<rbrakk>\n       \\<Longrightarrow> p = ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        opp p = Point x\\<^sub>5 y\\<^sub>5;\n        opp p =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3; is_generic p (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3; is_generic p (opp p)\\<rbrakk>\n       \\<Longrightarrow> Infinity =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3;\n        is_generic p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1' - la * (x\\<^sub>3' - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        Infinity = Point x\\<^sub>5 y\\<^sub>5;\n        Infinity =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3; is_generic p (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3; is_generic p Infinity\\<rbrakk>\n       \\<Longrightarrow> p = ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        opp p = Point x\\<^sub>5 y\\<^sub>5;\n        opp p =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3; is_generic p (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3; is_generic p (opp p)\\<rbrakk>\n       \\<Longrightarrow> Infinity =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3;\n        is_generic p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1' - la * (x\\<^sub>3' - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3", "case InfR"], ["proof (state)\nthis:\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  Infinity = Point x\\<^sub>5 y\\<^sub>5\n  Infinity = ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3\n  x\\<^sub>2' \\<noteq> x\\<^sub>3\n  l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p_ = Point x\\<^sub>1 y\\<^sub>1\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p_ (Point x\\<^sub>2' y\\<^sub>2')\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p_\n  on_curve a b (Point x\\<^sub>2' y\\<^sub>2')\n  on_curve a b p\\<^sub>3\n  is_generic p_ (Point x\\<^sub>2' y\\<^sub>2')\n  is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3\n  is_generic p\\<^sub>4 p\\<^sub>3\n  is_generic p_ Infinity\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        Infinity = Point x\\<^sub>5 y\\<^sub>5;\n        Infinity =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3; is_generic p (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3; is_generic p Infinity\\<rbrakk>\n       \\<Longrightarrow> p = ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        opp p = Point x\\<^sub>5 y\\<^sub>5;\n        opp p =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3; is_generic p (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3; is_generic p (opp p)\\<rbrakk>\n       \\<Longrightarrow> Infinity =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3;\n        is_generic p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1' - la * (x\\<^sub>3' - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  Infinity = Point x\\<^sub>5 y\\<^sub>5\n  Infinity = ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3\n  x\\<^sub>2' \\<noteq> x\\<^sub>3\n  l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p_ = Point x\\<^sub>1 y\\<^sub>1\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p_ (Point x\\<^sub>2' y\\<^sub>2')\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p_\n  on_curve a b (Point x\\<^sub>2' y\\<^sub>2')\n  on_curve a b p\\<^sub>3\n  is_generic p_ (Point x\\<^sub>2' y\\<^sub>2')\n  is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3\n  is_generic p\\<^sub>4 p\\<^sub>3\n  is_generic p_ Infinity", "show ?case"], ["proof (prove)\nusing this:\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  Infinity = Point x\\<^sub>5 y\\<^sub>5\n  Infinity = ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3\n  x\\<^sub>2' \\<noteq> x\\<^sub>3\n  l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p_ = Point x\\<^sub>1 y\\<^sub>1\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p_ (Point x\\<^sub>2' y\\<^sub>2')\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p_\n  on_curve a b (Point x\\<^sub>2' y\\<^sub>2')\n  on_curve a b p\\<^sub>3\n  is_generic p_ (Point x\\<^sub>2' y\\<^sub>2')\n  is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3\n  is_generic p\\<^sub>4 p\\<^sub>3\n  is_generic p_ Infinity\n\ngoal (1 subgoal):\n 1. p_ = ell_field_class.add a p\\<^sub>4 p\\<^sub>3", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  p_ = ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        opp p = Point x\\<^sub>5 y\\<^sub>5;\n        opp p =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3; is_generic p (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3; is_generic p (opp p)\\<rbrakk>\n       \\<Longrightarrow> Infinity =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3;\n        is_generic p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1' - la * (x\\<^sub>3' - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        opp p = Point x\\<^sub>5 y\\<^sub>5;\n        opp p =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3; is_generic p (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3; is_generic p (opp p)\\<rbrakk>\n       \\<Longrightarrow> Infinity =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3;\n        is_generic p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1' - la * (x\\<^sub>3' - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3", "case (Opp p)"], ["proof (state)\nthis:\n  on_curve a b p\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  opp p = Point x\\<^sub>5 y\\<^sub>5\n  opp p = ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3\n  x\\<^sub>2' \\<noteq> x\\<^sub>3\n  l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p = Point x\\<^sub>1 y\\<^sub>1\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p (Point x\\<^sub>2' y\\<^sub>2')\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\n  on_curve a b (Point x\\<^sub>2' y\\<^sub>2')\n  on_curve a b p\\<^sub>3\n  is_generic p (Point x\\<^sub>2' y\\<^sub>2')\n  is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3\n  is_generic p\\<^sub>4 p\\<^sub>3\n  is_generic p (opp p)\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        opp p = Point x\\<^sub>5 y\\<^sub>5;\n        opp p =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3; is_generic p (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3; is_generic p (opp p)\\<rbrakk>\n       \\<Longrightarrow> Infinity =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3;\n        is_generic p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1' - la * (x\\<^sub>3' - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3", "from \\<open>is_generic p (opp p)\\<close>"], ["proof (chain)\npicking this:\n  is_generic p (opp p)", "show ?case"], ["proof (prove)\nusing this:\n  is_generic p (opp p)\n\ngoal (1 subgoal):\n 1. Infinity = ell_field_class.add a p\\<^sub>4 p\\<^sub>3", "by (simp add: is_generic_def opp_opp)"], ["proof (state)\nthis:\n  Infinity = ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3;\n        is_generic p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1' - la * (x\\<^sub>3' - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3;\n        is_generic p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1' - la * (x\\<^sub>3' - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3", "case Tan"], ["proof (state)\nthis:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>1_ = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>1_ = ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3\n  x\\<^sub>2' \\<noteq> x\\<^sub>3\n  l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1_ = Point x\\<^sub>1 y\\<^sub>1\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1_ (Point x\\<^sub>2' y\\<^sub>2')\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1_\n  on_curve a b (Point x\\<^sub>2' y\\<^sub>2')\n  on_curve a b p\\<^sub>3\n  is_generic p\\<^sub>1_ (Point x\\<^sub>2' y\\<^sub>2')\n  is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3\n  is_generic p\\<^sub>4 p\\<^sub>3\n  is_generic p\\<^sub>1_ p\\<^sub>1_\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3;\n        is_generic p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1' - la * (x\\<^sub>3' - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>1_ = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>1_ = ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3\n  x\\<^sub>2' \\<noteq> x\\<^sub>3\n  l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1_ = Point x\\<^sub>1 y\\<^sub>1\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1_ (Point x\\<^sub>2' y\\<^sub>2')\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1_\n  on_curve a b (Point x\\<^sub>2' y\\<^sub>2')\n  on_curve a b p\\<^sub>3\n  is_generic p\\<^sub>1_ (Point x\\<^sub>2' y\\<^sub>2')\n  is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3\n  is_generic p\\<^sub>4 p\\<^sub>3\n  is_generic p\\<^sub>1_ p\\<^sub>1_", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>1_ = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>1_ = ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3\n  x\\<^sub>2' \\<noteq> x\\<^sub>3\n  l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1_ = Point x\\<^sub>1 y\\<^sub>1\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1_ (Point x\\<^sub>2' y\\<^sub>2')\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1_\n  on_curve a b (Point x\\<^sub>2' y\\<^sub>2')\n  on_curve a b p\\<^sub>3\n  is_generic p\\<^sub>1_ (Point x\\<^sub>2' y\\<^sub>2')\n  is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3\n  is_generic p\\<^sub>4 p\\<^sub>3\n  is_generic p\\<^sub>1_ p\\<^sub>1_\n\ngoal (1 subgoal):\n 1. p\\<^sub>2_ = ell_field_class.add a p\\<^sub>4 p\\<^sub>3", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1' - la * (x\\<^sub>3' - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1' - la * (x\\<^sub>3' - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3", "case (Gen p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>5' x\\<^sub>5' y\\<^sub>5' p\\<^sub>6 x\\<^sub>6 y\\<^sub>6 l\\<^sub>2)"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5'\n  x\\<^sub>1' \\<noteq> x\\<^sub>5'\n  l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5' = ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3\n  x\\<^sub>2' \\<noteq> x\\<^sub>3\n  l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2')\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b (Point x\\<^sub>2' y\\<^sub>2')\n  on_curve a b p\\<^sub>3\n  is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2')\n  is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3\n  is_generic p\\<^sub>4 p\\<^sub>3\n  is_generic p\\<^sub>1 p\\<^sub>5'\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1' - la * (x\\<^sub>3' - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3", "from \\<open>on_curve a b p\\<^sub>1\\<close> \\<open>on_curve a b (Point x\\<^sub>2' y\\<^sub>2')\\<close>\n        \\<open>p\\<^sub>4 = add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2')\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>1\n  on_curve a b (Point x\\<^sub>2' y\\<^sub>2')\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2')", "have \"on_curve a b p\\<^sub>4\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  on_curve a b (Point x\\<^sub>2' y\\<^sub>2')\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2')\n\ngoal (1 subgoal):\n 1. on_curve a b p\\<^sub>4", "by (simp add: add_closed)"], ["proof (state)\nthis:\n  on_curve a b p\\<^sub>4\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1' - la * (x\\<^sub>3' - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>3;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3;\n        is_generic p\\<^sub>4 p\\<^sub>3;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>4", "show ?case"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>4\n\ngoal (1 subgoal):\n 1. p\\<^sub>6 = ell_field_class.add a p\\<^sub>4 p\\<^sub>3", "using \\<open>on_curve a b p\\<^sub>3\\<close> Gen"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>4\n  on_curve a b p\\<^sub>3\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5'\n  x\\<^sub>1' \\<noteq> x\\<^sub>5'\n  l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5' = ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3\n  x\\<^sub>2' \\<noteq> x\\<^sub>3\n  l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2')\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b (Point x\\<^sub>2' y\\<^sub>2')\n  on_curve a b p\\<^sub>3\n  is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2')\n  is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3\n  is_generic p\\<^sub>4 p\\<^sub>3\n  is_generic p\\<^sub>1 p\\<^sub>5'\n\ngoal (1 subgoal):\n 1. p\\<^sub>6 = ell_field_class.add a p\\<^sub>4 p\\<^sub>3", "proof (induct rule: add_case)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        Infinity = Point x\\<^sub>4 y\\<^sub>4;\n        Infinity =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p; is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p; is_generic Infinity p;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\n 2. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        Infinity = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') Infinity;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b Infinity;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') Infinity;\n        is_generic p Infinity; is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        opp p = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') (opp p);\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b (opp p);\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') (opp p);\n        is_generic p (opp p); is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = Infinity\n 4. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>1;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>1;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 5. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1'' - la * (x\\<^sub>3' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>2;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "case InfL"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5'\n  x\\<^sub>1' \\<noteq> x\\<^sub>5'\n  l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2'\n  p_ = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5' = ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p_\n  x\\<^sub>2' \\<noteq> x\\<^sub>3\n  l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2\n  Infinity = Point x\\<^sub>4 y\\<^sub>4\n  Infinity = ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2')\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b (Point x\\<^sub>2' y\\<^sub>2')\n  on_curve a b p_\n  is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2')\n  is_generic (Point x\\<^sub>2' y\\<^sub>2') p_\n  is_generic Infinity p_\n  is_generic p\\<^sub>1 p\\<^sub>5'\n\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        Infinity = Point x\\<^sub>4 y\\<^sub>4;\n        Infinity =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p; is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p; is_generic Infinity p;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\n 2. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        Infinity = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') Infinity;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b Infinity;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') Infinity;\n        is_generic p Infinity; is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        opp p = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') (opp p);\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b (opp p);\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') (opp p);\n        is_generic p (opp p); is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = Infinity\n 4. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>1;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>1;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 5. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1'' - la * (x\\<^sub>3' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>2;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5'\n  x\\<^sub>1' \\<noteq> x\\<^sub>5'\n  l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2'\n  p_ = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5' = ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p_\n  x\\<^sub>2' \\<noteq> x\\<^sub>3\n  l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2\n  Infinity = Point x\\<^sub>4 y\\<^sub>4\n  Infinity = ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2')\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b (Point x\\<^sub>2' y\\<^sub>2')\n  on_curve a b p_\n  is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2')\n  is_generic (Point x\\<^sub>2' y\\<^sub>2') p_\n  is_generic Infinity p_\n  is_generic p\\<^sub>1 p\\<^sub>5'", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5'\n  x\\<^sub>1' \\<noteq> x\\<^sub>5'\n  l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2'\n  p_ = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5' = ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p_\n  x\\<^sub>2' \\<noteq> x\\<^sub>3\n  l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2\n  Infinity = Point x\\<^sub>4 y\\<^sub>4\n  Infinity = ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2')\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b (Point x\\<^sub>2' y\\<^sub>2')\n  on_curve a b p_\n  is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2')\n  is_generic (Point x\\<^sub>2' y\\<^sub>2') p_\n  is_generic Infinity p_\n  is_generic p\\<^sub>1 p\\<^sub>5'\n\ngoal (1 subgoal):\n 1. p\\<^sub>6 = p_", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  p\\<^sub>6 = p_\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        Infinity = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') Infinity;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b Infinity;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') Infinity;\n        is_generic p Infinity; is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        opp p = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') (opp p);\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b (opp p);\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') (opp p);\n        is_generic p (opp p); is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = Infinity\n 3. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>1;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>1;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 4. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1'' - la * (x\\<^sub>3' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>2;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        Infinity = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') Infinity;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b Infinity;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') Infinity;\n        is_generic p Infinity; is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        opp p = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') (opp p);\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b (opp p);\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') (opp p);\n        is_generic p (opp p); is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = Infinity\n 3. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>1;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>1;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 4. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1'' - la * (x\\<^sub>3' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>2;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "case InfR"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5'\n  x\\<^sub>1' \\<noteq> x\\<^sub>5'\n  l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2'\n  Infinity = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5' = ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') Infinity\n  x\\<^sub>2' \\<noteq> x\\<^sub>3\n  l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2\n  p_ = Point x\\<^sub>4 y\\<^sub>4\n  p_ = ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2')\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b (Point x\\<^sub>2' y\\<^sub>2')\n  on_curve a b Infinity\n  is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2')\n  is_generic (Point x\\<^sub>2' y\\<^sub>2') Infinity\n  is_generic p_ Infinity\n  is_generic p\\<^sub>1 p\\<^sub>5'\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        Infinity = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') Infinity;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b Infinity;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') Infinity;\n        is_generic p Infinity; is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        opp p = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') (opp p);\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b (opp p);\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') (opp p);\n        is_generic p (opp p); is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = Infinity\n 3. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>1;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>1;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 4. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1'' - la * (x\\<^sub>3' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>2;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5'\n  x\\<^sub>1' \\<noteq> x\\<^sub>5'\n  l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2'\n  Infinity = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5' = ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') Infinity\n  x\\<^sub>2' \\<noteq> x\\<^sub>3\n  l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2\n  p_ = Point x\\<^sub>4 y\\<^sub>4\n  p_ = ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2')\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b (Point x\\<^sub>2' y\\<^sub>2')\n  on_curve a b Infinity\n  is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2')\n  is_generic (Point x\\<^sub>2' y\\<^sub>2') Infinity\n  is_generic p_ Infinity\n  is_generic p\\<^sub>1 p\\<^sub>5'", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5'\n  x\\<^sub>1' \\<noteq> x\\<^sub>5'\n  l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2'\n  Infinity = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5' = ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') Infinity\n  x\\<^sub>2' \\<noteq> x\\<^sub>3\n  l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2\n  p_ = Point x\\<^sub>4 y\\<^sub>4\n  p_ = ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2')\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b (Point x\\<^sub>2' y\\<^sub>2')\n  on_curve a b Infinity\n  is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2')\n  is_generic (Point x\\<^sub>2' y\\<^sub>2') Infinity\n  is_generic p_ Infinity\n  is_generic p\\<^sub>1 p\\<^sub>5'\n\ngoal (1 subgoal):\n 1. p\\<^sub>6 = p_", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  p\\<^sub>6 = p_\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        opp p = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') (opp p);\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b (opp p);\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') (opp p);\n        is_generic p (opp p); is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = Infinity\n 2. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>1;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>1;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 3. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1'' - la * (x\\<^sub>3' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>2;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        opp p = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') (opp p);\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b (opp p);\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') (opp p);\n        is_generic p (opp p); is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = Infinity\n 2. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>1;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>1;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 3. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1'' - la * (x\\<^sub>3' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>2;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "case (Opp p)"], ["proof (state)\nthis:\n  on_curve a b p\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5'\n  x\\<^sub>1' \\<noteq> x\\<^sub>5'\n  l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2'\n  opp p = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5' = ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') (opp p)\n  x\\<^sub>2' \\<noteq> x\\<^sub>3\n  l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2\n  p = Point x\\<^sub>4 y\\<^sub>4\n  p = ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2')\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b (Point x\\<^sub>2' y\\<^sub>2')\n  on_curve a b (opp p)\n  is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2')\n  is_generic (Point x\\<^sub>2' y\\<^sub>2') (opp p)\n  is_generic p (opp p)\n  is_generic p\\<^sub>1 p\\<^sub>5'\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        opp p = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') (opp p);\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b (opp p);\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') (opp p);\n        is_generic p (opp p); is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = Infinity\n 2. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>1;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>1;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 3. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1'' - la * (x\\<^sub>3' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>2;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "from \\<open>is_generic p (opp p)\\<close>"], ["proof (chain)\npicking this:\n  is_generic p (opp p)", "show ?case"], ["proof (prove)\nusing this:\n  is_generic p (opp p)\n\ngoal (1 subgoal):\n 1. p\\<^sub>6 = Infinity", "by (simp add: is_generic_def opp_opp)"], ["proof (state)\nthis:\n  p\\<^sub>6 = Infinity\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>1;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>1;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 2. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1'' - la * (x\\<^sub>3' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>2;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>1;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>1;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 2. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1'' - la * (x\\<^sub>3' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>2;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "case Tan"], ["proof (state)\nthis:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5'\n  x\\<^sub>1' \\<noteq> x\\<^sub>5'\n  l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>1_ = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5' =\n  ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>1_\n  x\\<^sub>2' \\<noteq> x\\<^sub>3\n  l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>1_ = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>1_ = ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2')\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b (Point x\\<^sub>2' y\\<^sub>2')\n  on_curve a b p\\<^sub>1_\n  is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2')\n  is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>1_\n  is_generic p\\<^sub>1_ p\\<^sub>1_\n  is_generic p\\<^sub>1 p\\<^sub>5'\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>1;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>1;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 2. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1'' - la * (x\\<^sub>3' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>2;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5'\n  x\\<^sub>1' \\<noteq> x\\<^sub>5'\n  l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>1_ = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5' =\n  ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>1_\n  x\\<^sub>2' \\<noteq> x\\<^sub>3\n  l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>1_ = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>1_ = ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2')\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b (Point x\\<^sub>2' y\\<^sub>2')\n  on_curve a b p\\<^sub>1_\n  is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2')\n  is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>1_\n  is_generic p\\<^sub>1_ p\\<^sub>1_\n  is_generic p\\<^sub>1 p\\<^sub>5'", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5'\n  x\\<^sub>1' \\<noteq> x\\<^sub>5'\n  l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>1_ = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5' =\n  ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>1_\n  x\\<^sub>2' \\<noteq> x\\<^sub>3\n  l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>1_ = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>1_ = ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2')\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b (Point x\\<^sub>2' y\\<^sub>2')\n  on_curve a b p\\<^sub>1_\n  is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2')\n  is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>1_\n  is_generic p\\<^sub>1_ p\\<^sub>1_\n  is_generic p\\<^sub>1 p\\<^sub>5'\n\ngoal (1 subgoal):\n 1. p\\<^sub>6 = p\\<^sub>2_", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  p\\<^sub>6 = p\\<^sub>2_\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1'' - la * (x\\<^sub>3' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>2;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1'' - la * (x\\<^sub>3' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>2;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "case (Gen p\\<^sub>4' x\\<^sub>4' y\\<^sub>4' p\\<^sub>3' x\\<^sub>3' y\\<^sub>3' p\\<^sub>7 x\\<^sub>7 y\\<^sub>7 l\\<^sub>3)"], ["proof (state)\nthis:\n  p\\<^sub>4' = Point x\\<^sub>4' y\\<^sub>4'\n  p\\<^sub>3' = Point x\\<^sub>3' y\\<^sub>3'\n  p\\<^sub>7 = Point x\\<^sub>7 y\\<^sub>7\n  p\\<^sub>7 = ell_field_class.add a p\\<^sub>4' p\\<^sub>3'\n  x\\<^sub>4' \\<noteq> x\\<^sub>3'\n  l\\<^sub>3 = (y\\<^sub>3' - y\\<^sub>4') / (x\\<^sub>3' - x\\<^sub>4')\n  x\\<^sub>7 = l\\<^sub>3\\<^sup>2 - x\\<^sub>4' - x\\<^sub>3'\n  y\\<^sub>7 = - y\\<^sub>4' - l\\<^sub>3 * (x\\<^sub>7 - x\\<^sub>4')\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5'\n  x\\<^sub>1' \\<noteq> x\\<^sub>5'\n  l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5' =\n  ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3'\n  x\\<^sub>2' \\<noteq> x\\<^sub>3\n  l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4' = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4' = ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2')\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b (Point x\\<^sub>2' y\\<^sub>2')\n  on_curve a b p\\<^sub>3'\n  is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2')\n  is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>3'\n  is_generic p\\<^sub>4' p\\<^sub>3'\n  is_generic p\\<^sub>1 p\\<^sub>5'\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1'' - la * (x\\<^sub>3' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>2;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "from \\<open>p\\<^sub>4' = Point x\\<^sub>4' y\\<^sub>4'\\<close> \\<open>p\\<^sub>4' = Point x\\<^sub>4 y\\<^sub>4\\<close>"], ["proof (chain)\npicking this:\n  p\\<^sub>4' = Point x\\<^sub>4' y\\<^sub>4'\n  p\\<^sub>4' = Point x\\<^sub>4 y\\<^sub>4", "have p\\<^sub>4: \"x\\<^sub>4' = x\\<^sub>4\" \"y\\<^sub>4' = y\\<^sub>4\""], ["proof (prove)\nusing this:\n  p\\<^sub>4' = Point x\\<^sub>4' y\\<^sub>4'\n  p\\<^sub>4' = Point x\\<^sub>4 y\\<^sub>4\n\ngoal (1 subgoal):\n 1. x\\<^sub>4' = x\\<^sub>4 &&& y\\<^sub>4' = y\\<^sub>4", "by simp_all"], ["proof (state)\nthis:\n  x\\<^sub>4' = x\\<^sub>4\n  y\\<^sub>4' = y\\<^sub>4\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1'' - la * (x\\<^sub>3' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>2;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "from \\<open>p\\<^sub>3' = Point x\\<^sub>3' y\\<^sub>3'\\<close> \\<open>p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3\\<close>"], ["proof (chain)\npicking this:\n  p\\<^sub>3' = Point x\\<^sub>3' y\\<^sub>3'\n  p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3", "have p\\<^sub>3: \"x\\<^sub>3' = x\\<^sub>3\" \"y\\<^sub>3' = y\\<^sub>3\""], ["proof (prove)\nusing this:\n  p\\<^sub>3' = Point x\\<^sub>3' y\\<^sub>3'\n  p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3\n\ngoal (1 subgoal):\n 1. x\\<^sub>3' = x\\<^sub>3 &&& y\\<^sub>3' = y\\<^sub>3", "by simp_all"], ["proof (state)\nthis:\n  x\\<^sub>3' = x\\<^sub>3\n  y\\<^sub>3' = y\\<^sub>3\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1'' - la * (x\\<^sub>3' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>2;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "from \\<open>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\\<close> \\<open>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1", "have p\\<^sub>1: \"x\\<^sub>1' = x\\<^sub>1\" \"y\\<^sub>1' = y\\<^sub>1\""], ["proof (prove)\nusing this:\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n\ngoal (1 subgoal):\n 1. x\\<^sub>1' = x\\<^sub>1 &&& y\\<^sub>1' = y\\<^sub>1", "by simp_all"], ["proof (state)\nthis:\n  x\\<^sub>1' = x\\<^sub>1\n  y\\<^sub>1' = y\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1'' - la * (x\\<^sub>3' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>2;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "from \\<open>p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5'\\<close> \\<open>p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5\\<close>"], ["proof (chain)\npicking this:\n  p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5'\n  p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5", "have p\\<^sub>5: \"x\\<^sub>5' = x\\<^sub>5\" \"y\\<^sub>5' = y\\<^sub>5\""], ["proof (prove)\nusing this:\n  p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5'\n  p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5\n\ngoal (1 subgoal):\n 1. x\\<^sub>5' = x\\<^sub>5 &&& y\\<^sub>5' = y\\<^sub>5", "by simp_all"], ["proof (state)\nthis:\n  x\\<^sub>5' = x\\<^sub>5\n  y\\<^sub>5' = y\\<^sub>5\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1'' - la * (x\\<^sub>3' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>2;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "from \\<open>Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2\\<close>"], ["proof (chain)\npicking this:\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2", "have p\\<^sub>2: \"x\\<^sub>2' = x\\<^sub>2\" \"y\\<^sub>2' = y\\<^sub>2\""], ["proof (prove)\nusing this:\n  Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2\n\ngoal (1 subgoal):\n 1. x\\<^sub>2' = x\\<^sub>2 &&& y\\<^sub>2' = y\\<^sub>2", "by simp_all"], ["proof (state)\nthis:\n  x\\<^sub>2' = x\\<^sub>2\n  y\\<^sub>2' = y\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1'' - la * (x\\<^sub>3' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>2;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "note ps = p\\<^sub>1 p\\<^sub>2 p\\<^sub>3 p\\<^sub>4 p\\<^sub>5"], ["proof (state)\nthis:\n  x\\<^sub>1' = x\\<^sub>1\n  y\\<^sub>1' = y\\<^sub>1\n  x\\<^sub>2' = x\\<^sub>2\n  y\\<^sub>2' = y\\<^sub>2\n  x\\<^sub>3' = x\\<^sub>3\n  y\\<^sub>3' = y\\<^sub>3\n  x\\<^sub>4' = x\\<^sub>4\n  y\\<^sub>4' = y\\<^sub>4\n  x\\<^sub>5' = x\\<^sub>5\n  y\\<^sub>5' = y\\<^sub>5\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1'' - la * (x\\<^sub>3' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>2;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "note ps' =\n          \\<open>on_curve a b p\\<^sub>1\\<close> [simplified \\<open>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\\<close> on_curve_def, simplified]\n          \\<open>on_curve a b p\\<^sub>2\\<close> [simplified \\<open>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\\<close> on_curve_def, simplified]\n          \\<open>on_curve a b p\\<^sub>3\\<close> [simplified \\<open>p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\\<close> on_curve_def, simplified]"], ["proof (state)\nthis:\n  y\\<^sub>1\\<^sup>2 = x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b\n  y\\<^sub>2\\<^sup>2 = x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b\n  y\\<^sub>3\\<^sup>2 = x\\<^sub>3 ^ 3 + a * x\\<^sub>3 + b\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3' = - y\\<^sub>1'' - la * (x\\<^sub>3' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' =\n        ell_field_class.add a (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        x\\<^sub>2' \\<noteq> x\\<^sub>3;\n        l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3;\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Point x\\<^sub>2' y\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 =\n        ell_field_class.add a p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (Point x\\<^sub>2' y\\<^sub>2');\n        on_curve a b p\\<^sub>2;\n        is_generic p\\<^sub>1 (Point x\\<^sub>2' y\\<^sub>2');\n        is_generic (Point x\\<^sub>2' y\\<^sub>2') p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. p\\<^sub>6 = p\\<^sub>7", "apply (simp add: \\<open>p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\\<close> \\<open>p\\<^sub>7 = Point x\\<^sub>7 y\\<^sub>7\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^sub>6 = x\\<^sub>7 \\<and> y\\<^sub>6 = y\\<^sub>7", "apply (simp only: ps\n            \\<open>x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5'\\<close> \\<open>x\\<^sub>7 = l\\<^sub>3\\<^sup>2 - x\\<^sub>4' - x\\<^sub>3'\\<close>\n            \\<open>y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\\<close> \\<open>y\\<^sub>7 = - y\\<^sub>4' - l\\<^sub>3 * (x\\<^sub>7 - x\\<^sub>4')\\<close>\n            \\<open>l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1')\\<close> \\<open>l\\<^sub>3 = (y\\<^sub>3' - y\\<^sub>4') / (x\\<^sub>3' - x\\<^sub>4')\\<close>\n            \\<open>l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2')\\<close> \\<open>l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\\<close>\n            \\<open>x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3\\<close> \\<open>y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\\<close>\n            \\<open>x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\\<close> \\<open>y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((- y\\<^sub>2 -\n      (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n      (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n       x\\<^sub>2 -\n       x\\<^sub>3 -\n       x\\<^sub>2) -\n      y\\<^sub>1) /\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3 -\n      x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 -\n    (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n     x\\<^sub>2 -\n     x\\<^sub>3) =\n    ((y\\<^sub>3 -\n      (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1))) /\n     (x\\<^sub>3 -\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2)))\\<^sup>2 -\n    (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     x\\<^sub>2) -\n    x\\<^sub>3 \\<and>\n    - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n     x\\<^sub>2 -\n     x\\<^sub>3 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n       (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n        x\\<^sub>2 -\n        x\\<^sub>3 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n       x\\<^sub>2 -\n       x\\<^sub>3 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>3 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>3 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>3 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((- y\\<^sub>2 -\n      (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n      (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n       x\\<^sub>2 -\n       x\\<^sub>3 -\n       x\\<^sub>2) -\n      y\\<^sub>1) /\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3 -\n      x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 -\n    (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n     x\\<^sub>2 -\n     x\\<^sub>3) =\n    ((y\\<^sub>3 -\n      (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1))) /\n     (x\\<^sub>3 -\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2)))\\<^sup>2 -\n    (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     x\\<^sub>2) -\n    x\\<^sub>3\n 2. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n     x\\<^sub>2 -\n     x\\<^sub>3 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n       (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n        x\\<^sub>2 -\n        x\\<^sub>3 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n       x\\<^sub>2 -\n       x\\<^sub>3 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>3 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>3 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>3 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (field ps')"], ["proof (prove)\ngoal (2 subgoals):\n 1. x\\<^sub>3 - x\\<^sub>2 \\<noteq> (0::'a) \\<and>\n    (y\\<^sub>3 - y\\<^sub>2)\\<^sup>2 -\n    x\\<^sub>2 * (x\\<^sub>3 - x\\<^sub>2)\\<^sup>2 -\n    x\\<^sub>3 * (x\\<^sub>3 - x\\<^sub>2)\\<^sup>2 -\n    x\\<^sub>1 * (x\\<^sub>3 - x\\<^sub>2)\\<^sup>2 \\<noteq>\n    (0::'a) \\<and>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a) \\<and>\n    x\\<^sub>3 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 2. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n     x\\<^sub>2 -\n     x\\<^sub>3 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n       (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n        x\\<^sub>2 -\n        x\\<^sub>3 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n       x\\<^sub>2 -\n       x\\<^sub>3 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>3 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>3 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>3 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. x\\<^sub>3 - x\\<^sub>2 \\<noteq> (0::'a)\n 2. (y\\<^sub>3 - y\\<^sub>2)\\<^sup>2 -\n    x\\<^sub>2 * (x\\<^sub>3 - x\\<^sub>2)\\<^sup>2 -\n    x\\<^sub>3 * (x\\<^sub>3 - x\\<^sub>2)\\<^sup>2 -\n    x\\<^sub>1 * (x\\<^sub>3 - x\\<^sub>2)\\<^sup>2 \\<noteq>\n    (0::'a) \\<and>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a) \\<and>\n    x\\<^sub>3 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 3. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n     x\\<^sub>2 -\n     x\\<^sub>3 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n       (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n        x\\<^sub>2 -\n        x\\<^sub>3 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n       x\\<^sub>2 -\n       x\\<^sub>3 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>3 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>3 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>3 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (simp add: \\<open>x\\<^sub>2' \\<noteq> x\\<^sub>3\\<close> [simplified \\<open>x\\<^sub>2' = x\\<^sub>2\\<close>, symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. (y\\<^sub>3 - y\\<^sub>2)\\<^sup>2 -\n    x\\<^sub>2 * (x\\<^sub>3 - x\\<^sub>2)\\<^sup>2 -\n    x\\<^sub>3 * (x\\<^sub>3 - x\\<^sub>2)\\<^sup>2 -\n    x\\<^sub>1 * (x\\<^sub>3 - x\\<^sub>2)\\<^sup>2 \\<noteq>\n    (0::'a) \\<and>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a) \\<and>\n    x\\<^sub>3 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 2. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n     x\\<^sub>2 -\n     x\\<^sub>3 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n       (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n        x\\<^sub>2 -\n        x\\<^sub>3 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n       x\\<^sub>2 -\n       x\\<^sub>3 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>3 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>3 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>3 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. (y\\<^sub>3 - y\\<^sub>2)\\<^sup>2 -\n    x\\<^sub>2 * (x\\<^sub>3 - x\\<^sub>2)\\<^sup>2 -\n    x\\<^sub>3 * (x\\<^sub>3 - x\\<^sub>2)\\<^sup>2 -\n    x\\<^sub>1 * (x\\<^sub>3 - x\\<^sub>2)\\<^sup>2 \\<noteq>\n    (0::'a)\n 2. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a) \\<and>\n    x\\<^sub>3 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 3. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n     x\\<^sub>2 -\n     x\\<^sub>3 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n       (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n        x\\<^sub>2 -\n        x\\<^sub>3 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n       x\\<^sub>2 -\n       x\\<^sub>3 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>3 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>3 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>3 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (rule notI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. (y\\<^sub>3 - y\\<^sub>2)\\<^sup>2 -\n    x\\<^sub>2 * (x\\<^sub>3 - x\\<^sub>2)\\<^sup>2 -\n    x\\<^sub>3 * (x\\<^sub>3 - x\\<^sub>2)\\<^sup>2 -\n    x\\<^sub>1 * (x\\<^sub>3 - x\\<^sub>2)\\<^sup>2 =\n    (0::'a) \\<Longrightarrow>\n    False\n 2. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a) \\<and>\n    x\\<^sub>3 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 3. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n     x\\<^sub>2 -\n     x\\<^sub>3 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n       (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n        x\\<^sub>2 -\n        x\\<^sub>3 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n       x\\<^sub>2 -\n       x\\<^sub>3 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>3 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>3 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>3 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (ring (prems) ps'(1-2))"], ["proof (prove)\ngoal (3 subgoals):\n 1. (- (2::'a) * y\\<^sub>3 ^ 1 + (0::'a)) * y\\<^sub>2 ^ 1 +\n    (((of_int (- 1) * x\\<^sub>2 ^ 1 + ((2::'a) * x\\<^sub>3 ^ 1 + (0::'a))) *\n      x\\<^sub>2 ^ 1 +\n      (of_int (- 1) * x\\<^sub>3\\<^sup>2 + (0::'a))) *\n     x\\<^sub>1 ^ 1 +\n     (((1::'a) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n      ((1::'a) * b ^ 1 +\n       ((((1::'a) * x\\<^sub>3 ^ 1 + (0::'a)) * x\\<^sub>2 ^ 1 +\n         ((1::'a) * x\\<^sub>3\\<^sup>2 + (0::'a))) *\n        x\\<^sub>2 ^ 1 +\n        ((1::'a) * y\\<^sub>3\\<^sup>2 +\n         (of_int (- 1) * x\\<^sub>3 ^ 3 + (0::'a))))))) =\n    (0::'a) \\<Longrightarrow>\n    False\n 2. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a) \\<and>\n    x\\<^sub>3 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 3. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n     x\\<^sub>2 -\n     x\\<^sub>3 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n       (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n        x\\<^sub>2 -\n        x\\<^sub>3 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n       x\\<^sub>2 -\n       x\\<^sub>3 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>3 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>3 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>3 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (cut_tac \\<open>x\\<^sub>1' \\<noteq> x\\<^sub>5'\\<close> [simplified \\<open>x\\<^sub>5' = x\\<^sub>5\\<close> \\<open>x\\<^sub>1' = x\\<^sub>1\\<close> \\<open>x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3\\<close>\n            \\<open>l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2')\\<close> \\<open>y\\<^sub>2' = y\\<^sub>2\\<close> \\<open>x\\<^sub>2' = x\\<^sub>2\\<close>])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>(- (2::'a) * y\\<^sub>3 ^ 1 + (0::'a)) * y\\<^sub>2 ^ 1 +\n             (((of_int (- 1) * x\\<^sub>2 ^ 1 +\n                ((2::'a) * x\\<^sub>3 ^ 1 + (0::'a))) *\n               x\\<^sub>2 ^ 1 +\n               (of_int (- 1) * x\\<^sub>3\\<^sup>2 + (0::'a))) *\n              x\\<^sub>1 ^ 1 +\n              (((1::'a) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n               ((1::'a) * b ^ 1 +\n                ((((1::'a) * x\\<^sub>3 ^ 1 + (0::'a)) * x\\<^sub>2 ^ 1 +\n                  ((1::'a) * x\\<^sub>3\\<^sup>2 + (0::'a))) *\n                 x\\<^sub>2 ^ 1 +\n                 ((1::'a) * y\\<^sub>3\\<^sup>2 +\n                  (of_int (- 1) * x\\<^sub>3 ^ 3 + (0::'a))))))) =\n             (0::'a);\n     x\\<^sub>1 \\<noteq>\n     ((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n     x\\<^sub>2 -\n     x\\<^sub>3\\<rbrakk>\n    \\<Longrightarrow> False\n 2. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a) \\<and>\n    x\\<^sub>3 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 3. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n     x\\<^sub>2 -\n     x\\<^sub>3 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n       (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n        x\\<^sub>2 -\n        x\\<^sub>3 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n       x\\<^sub>2 -\n       x\\<^sub>3 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>3 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>3 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>3 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (erule notE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. (- (2::'a) * y\\<^sub>3 ^ 1 + (0::'a)) * y\\<^sub>2 ^ 1 +\n    (((of_int (- 1) * x\\<^sub>2 ^ 1 + ((2::'a) * x\\<^sub>3 ^ 1 + (0::'a))) *\n      x\\<^sub>2 ^ 1 +\n      (of_int (- 1) * x\\<^sub>3\\<^sup>2 + (0::'a))) *\n     x\\<^sub>1 ^ 1 +\n     (((1::'a) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n      ((1::'a) * b ^ 1 +\n       ((((1::'a) * x\\<^sub>3 ^ 1 + (0::'a)) * x\\<^sub>2 ^ 1 +\n         ((1::'a) * x\\<^sub>3\\<^sup>2 + (0::'a))) *\n        x\\<^sub>2 ^ 1 +\n        ((1::'a) * y\\<^sub>3\\<^sup>2 +\n         (of_int (- 1) * x\\<^sub>3 ^ 3 + (0::'a))))))) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>1 =\n    ((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n    x\\<^sub>2 -\n    x\\<^sub>3\n 2. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a) \\<and>\n    x\\<^sub>3 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 3. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n     x\\<^sub>2 -\n     x\\<^sub>3 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n       (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n        x\\<^sub>2 -\n        x\\<^sub>3 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n       x\\<^sub>2 -\n       x\\<^sub>3 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>3 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>3 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>3 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (rule sym)"], ["proof (prove)\ngoal (3 subgoals):\n 1. (- (2::'a) * y\\<^sub>3 ^ 1 + (0::'a)) * y\\<^sub>2 ^ 1 +\n    (((of_int (- 1) * x\\<^sub>2 ^ 1 + ((2::'a) * x\\<^sub>3 ^ 1 + (0::'a))) *\n      x\\<^sub>2 ^ 1 +\n      (of_int (- 1) * x\\<^sub>3\\<^sup>2 + (0::'a))) *\n     x\\<^sub>1 ^ 1 +\n     (((1::'a) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n      ((1::'a) * b ^ 1 +\n       ((((1::'a) * x\\<^sub>3 ^ 1 + (0::'a)) * x\\<^sub>2 ^ 1 +\n         ((1::'a) * x\\<^sub>3\\<^sup>2 + (0::'a))) *\n        x\\<^sub>2 ^ 1 +\n        ((1::'a) * y\\<^sub>3\\<^sup>2 +\n         (of_int (- 1) * x\\<^sub>3 ^ 3 + (0::'a))))))) =\n    (0::'a) \\<Longrightarrow>\n    ((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n    x\\<^sub>2 -\n    x\\<^sub>3 =\n    x\\<^sub>1\n 2. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a) \\<and>\n    x\\<^sub>3 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 3. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n     x\\<^sub>2 -\n     x\\<^sub>3 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n       (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n        x\\<^sub>2 -\n        x\\<^sub>3 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n       x\\<^sub>2 -\n       x\\<^sub>3 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>3 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>3 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>3 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (field ps'(1-2))"], ["proof (prove)\ngoal (3 subgoals):\n 1. (- (2::'a) * y\\<^sub>3 ^ 1 + (0::'a)) * y\\<^sub>2 ^ 1 +\n    (((of_int (- 1) * x\\<^sub>2 ^ 1 + ((2::'a) * x\\<^sub>3 ^ 1 + (0::'a))) *\n      x\\<^sub>2 ^ 1 +\n      (of_int (- 1) * x\\<^sub>3\\<^sup>2 + (0::'a))) *\n     x\\<^sub>1 ^ 1 +\n     (((1::'a) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n      ((1::'a) * b ^ 1 +\n       ((((1::'a) * x\\<^sub>3 ^ 1 + (0::'a)) * x\\<^sub>2 ^ 1 +\n         ((1::'a) * x\\<^sub>3\\<^sup>2 + (0::'a))) *\n        x\\<^sub>2 ^ 1 +\n        ((1::'a) * y\\<^sub>3\\<^sup>2 +\n         (of_int (- 1) * x\\<^sub>3 ^ 3 + (0::'a))))))) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>3 - x\\<^sub>2 \\<noteq> (0::'a)\n 2. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a) \\<and>\n    x\\<^sub>3 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 3. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n     x\\<^sub>2 -\n     x\\<^sub>3 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n       (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n        x\\<^sub>2 -\n        x\\<^sub>3 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n       x\\<^sub>2 -\n       x\\<^sub>3 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>3 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>3 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>3 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (simp add: \\<open>x\\<^sub>2' \\<noteq> x\\<^sub>3\\<close> [simplified \\<open>x\\<^sub>2' = x\\<^sub>2\\<close>, symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a) \\<and>\n    x\\<^sub>3 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 2. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n     x\\<^sub>2 -\n     x\\<^sub>3 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n       (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n        x\\<^sub>2 -\n        x\\<^sub>3 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n       x\\<^sub>2 -\n       x\\<^sub>3 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>3 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>3 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>3 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)\n 2. x\\<^sub>3 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 3. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n     x\\<^sub>2 -\n     x\\<^sub>3 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n       (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n        x\\<^sub>2 -\n        x\\<^sub>3 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n       x\\<^sub>2 -\n       x\\<^sub>3 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>3 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>3 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>3 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (simp add: \\<open>x\\<^sub>1 \\<noteq> x\\<^sub>2\\<close> [symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. x\\<^sub>3 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 2. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n     x\\<^sub>2 -\n     x\\<^sub>3 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n       (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n        x\\<^sub>2 -\n        x\\<^sub>3 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n       x\\<^sub>2 -\n       x\\<^sub>3 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>3 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>3 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>3 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (rule notI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. x\\<^sub>3 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) =\n    (0::'a) \\<Longrightarrow>\n    False\n 2. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n     x\\<^sub>2 -\n     x\\<^sub>3 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n       (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n        x\\<^sub>2 -\n        x\\<^sub>3 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n       x\\<^sub>2 -\n       x\\<^sub>3 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>3 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>3 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>3 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (ring (prems) ps'(1-2))"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((2::'a) * y\\<^sub>2 ^ 1 + (0::'a)) * y\\<^sub>1 ^ 1 +\n    (((of_int (- 1) * x\\<^sub>2 ^ 1 + ((1::'a) * x\\<^sub>3 ^ 1 + (0::'a))) *\n      x\\<^sub>1 ^ 1 +\n      (of_int (- 1) * a ^ 1 +\n       ((of_int (- 1) * x\\<^sub>2 ^ 1 +\n         (- (2::'a) * x\\<^sub>3 ^ 1 + (0::'a))) *\n        x\\<^sub>2 ^ 1 +\n        (0::'a)))) *\n     x\\<^sub>1 ^ 1 +\n     ((of_int (- 1) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n      (- (2::'a) * b ^ 1 +\n       (((1::'a) * x\\<^sub>3 ^ 1 + (0::'a)) * x\\<^sub>2\\<^sup>2 +\n        (0::'a))))) =\n    (0::'a) \\<Longrightarrow>\n    False\n 2. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n     x\\<^sub>2 -\n     x\\<^sub>3 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n       (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n        x\\<^sub>2 -\n        x\\<^sub>3 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n       x\\<^sub>2 -\n       x\\<^sub>3 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>3 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>3 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>3 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (cut_tac \\<open>x\\<^sub>4' \\<noteq> x\\<^sub>3'\\<close> [simplified \\<open>x\\<^sub>4' = x\\<^sub>4\\<close> \\<open>x\\<^sub>3' = x\\<^sub>3\\<close> \\<open>x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\\<close>\n            \\<open>l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\\<close>])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>((2::'a) * y\\<^sub>2 ^ 1 + (0::'a)) * y\\<^sub>1 ^ 1 +\n             (((of_int (- 1) * x\\<^sub>2 ^ 1 +\n                ((1::'a) * x\\<^sub>3 ^ 1 + (0::'a))) *\n               x\\<^sub>1 ^ 1 +\n               (of_int (- 1) * a ^ 1 +\n                ((of_int (- 1) * x\\<^sub>2 ^ 1 +\n                  (- (2::'a) * x\\<^sub>3 ^ 1 + (0::'a))) *\n                 x\\<^sub>2 ^ 1 +\n                 (0::'a)))) *\n              x\\<^sub>1 ^ 1 +\n              ((of_int (- 1) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n               (- (2::'a) * b ^ 1 +\n                (((1::'a) * x\\<^sub>3 ^ 1 + (0::'a)) * x\\<^sub>2\\<^sup>2 +\n                 (0::'a))))) =\n             (0::'a);\n     ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     x\\<^sub>2 \\<noteq>\n     x\\<^sub>3\\<rbrakk>\n    \\<Longrightarrow> False\n 2. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n     x\\<^sub>2 -\n     x\\<^sub>3 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n       (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n        x\\<^sub>2 -\n        x\\<^sub>3 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n       x\\<^sub>2 -\n       x\\<^sub>3 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>3 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>3 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>3 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (erule notE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((2::'a) * y\\<^sub>2 ^ 1 + (0::'a)) * y\\<^sub>1 ^ 1 +\n    (((of_int (- 1) * x\\<^sub>2 ^ 1 + ((1::'a) * x\\<^sub>3 ^ 1 + (0::'a))) *\n      x\\<^sub>1 ^ 1 +\n      (of_int (- 1) * a ^ 1 +\n       ((of_int (- 1) * x\\<^sub>2 ^ 1 +\n         (- (2::'a) * x\\<^sub>3 ^ 1 + (0::'a))) *\n        x\\<^sub>2 ^ 1 +\n        (0::'a)))) *\n     x\\<^sub>1 ^ 1 +\n     ((of_int (- 1) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n      (- (2::'a) * b ^ 1 +\n       (((1::'a) * x\\<^sub>3 ^ 1 + (0::'a)) * x\\<^sub>2\\<^sup>2 +\n        (0::'a))))) =\n    (0::'a) \\<Longrightarrow>\n    ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 -\n    x\\<^sub>2 =\n    x\\<^sub>3\n 2. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n     x\\<^sub>2 -\n     x\\<^sub>3 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n       (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n        x\\<^sub>2 -\n        x\\<^sub>3 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n       x\\<^sub>2 -\n       x\\<^sub>3 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>3 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>3 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>3 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (rule sym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((2::'a) * y\\<^sub>2 ^ 1 + (0::'a)) * y\\<^sub>1 ^ 1 +\n    (((of_int (- 1) * x\\<^sub>2 ^ 1 + ((1::'a) * x\\<^sub>3 ^ 1 + (0::'a))) *\n      x\\<^sub>1 ^ 1 +\n      (of_int (- 1) * a ^ 1 +\n       ((of_int (- 1) * x\\<^sub>2 ^ 1 +\n         (- (2::'a) * x\\<^sub>3 ^ 1 + (0::'a))) *\n        x\\<^sub>2 ^ 1 +\n        (0::'a)))) *\n     x\\<^sub>1 ^ 1 +\n     ((of_int (- 1) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n      (- (2::'a) * b ^ 1 +\n       (((1::'a) * x\\<^sub>3 ^ 1 + (0::'a)) * x\\<^sub>2\\<^sup>2 +\n        (0::'a))))) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>3 =\n    ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 -\n    x\\<^sub>2\n 2. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n     x\\<^sub>2 -\n     x\\<^sub>3 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n       (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n        x\\<^sub>2 -\n        x\\<^sub>3 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n       x\\<^sub>2 -\n       x\\<^sub>3 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>3 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>3 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>3 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (field ps'(1-2))"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((2::'a) * y\\<^sub>2 ^ 1 + (0::'a)) * y\\<^sub>1 ^ 1 +\n    (((of_int (- 1) * x\\<^sub>2 ^ 1 + ((1::'a) * x\\<^sub>3 ^ 1 + (0::'a))) *\n      x\\<^sub>1 ^ 1 +\n      (of_int (- 1) * a ^ 1 +\n       ((of_int (- 1) * x\\<^sub>2 ^ 1 +\n         (- (2::'a) * x\\<^sub>3 ^ 1 + (0::'a))) *\n        x\\<^sub>2 ^ 1 +\n        (0::'a)))) *\n     x\\<^sub>1 ^ 1 +\n     ((of_int (- 1) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n      (- (2::'a) * b ^ 1 +\n       (((1::'a) * x\\<^sub>3 ^ 1 + (0::'a)) * x\\<^sub>2\\<^sup>2 +\n        (0::'a))))) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)\n 2. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n     x\\<^sub>2 -\n     x\\<^sub>3 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n       (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n        x\\<^sub>2 -\n        x\\<^sub>3 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n       x\\<^sub>2 -\n       x\\<^sub>3 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>3 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>3 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>3 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (simp add: \\<open>x\\<^sub>1 \\<noteq> x\\<^sub>2\\<close> [symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n     x\\<^sub>2 -\n     x\\<^sub>3 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       (y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2) *\n       (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n        x\\<^sub>2 -\n        x\\<^sub>3 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n       x\\<^sub>2 -\n       x\\<^sub>3 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     (((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n      x\\<^sub>2 -\n      x\\<^sub>3) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>3 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>3 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>3 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>3 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (field ps')"], ["proof (prove)\ngoal (1 subgoal):\n 1. (y\\<^sub>3 - y\\<^sub>2)\\<^sup>2 -\n    x\\<^sub>2 * (x\\<^sub>3 - x\\<^sub>2)\\<^sup>2 -\n    x\\<^sub>3 * (x\\<^sub>3 - x\\<^sub>2)\\<^sup>2 -\n    x\\<^sub>1 * (x\\<^sub>3 - x\\<^sub>2)\\<^sup>2 \\<noteq>\n    (0::'a) \\<and>\n    x\\<^sub>3 - x\\<^sub>2 \\<noteq> (0::'a) \\<and>\n    x\\<^sub>3 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a) \\<and>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (y\\<^sub>3 - y\\<^sub>2)\\<^sup>2 -\n    x\\<^sub>2 * (x\\<^sub>3 - x\\<^sub>2)\\<^sup>2 -\n    x\\<^sub>3 * (x\\<^sub>3 - x\\<^sub>2)\\<^sup>2 -\n    x\\<^sub>1 * (x\\<^sub>3 - x\\<^sub>2)\\<^sup>2 \\<noteq>\n    (0::'a)\n 2. x\\<^sub>3 - x\\<^sub>2 \\<noteq> (0::'a) \\<and>\n    x\\<^sub>3 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a) \\<and>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (rule notI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (y\\<^sub>3 - y\\<^sub>2)\\<^sup>2 -\n    x\\<^sub>2 * (x\\<^sub>3 - x\\<^sub>2)\\<^sup>2 -\n    x\\<^sub>3 * (x\\<^sub>3 - x\\<^sub>2)\\<^sup>2 -\n    x\\<^sub>1 * (x\\<^sub>3 - x\\<^sub>2)\\<^sup>2 =\n    (0::'a) \\<Longrightarrow>\n    False\n 2. x\\<^sub>3 - x\\<^sub>2 \\<noteq> (0::'a) \\<and>\n    x\\<^sub>3 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a) \\<and>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (ring (prems) ps'(1-2))"], ["proof (prove)\ngoal (2 subgoals):\n 1. (- (2::'a) * y\\<^sub>3 ^ 1 + (0::'a)) * y\\<^sub>2 ^ 1 +\n    (((of_int (- 1) * x\\<^sub>2 ^ 1 + ((2::'a) * x\\<^sub>3 ^ 1 + (0::'a))) *\n      x\\<^sub>2 ^ 1 +\n      (of_int (- 1) * x\\<^sub>3\\<^sup>2 + (0::'a))) *\n     x\\<^sub>1 ^ 1 +\n     (((1::'a) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n      ((1::'a) * b ^ 1 +\n       ((((1::'a) * x\\<^sub>3 ^ 1 + (0::'a)) * x\\<^sub>2 ^ 1 +\n         ((1::'a) * x\\<^sub>3\\<^sup>2 + (0::'a))) *\n        x\\<^sub>2 ^ 1 +\n        ((1::'a) * y\\<^sub>3\\<^sup>2 +\n         (of_int (- 1) * x\\<^sub>3 ^ 3 + (0::'a))))))) =\n    (0::'a) \\<Longrightarrow>\n    False\n 2. x\\<^sub>3 - x\\<^sub>2 \\<noteq> (0::'a) \\<and>\n    x\\<^sub>3 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a) \\<and>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (cut_tac \\<open>x\\<^sub>1' \\<noteq> x\\<^sub>5'\\<close> [simplified \\<open>x\\<^sub>5' = x\\<^sub>5\\<close> \\<open>x\\<^sub>1' = x\\<^sub>1\\<close> \\<open>x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - x\\<^sub>2' - x\\<^sub>3\\<close>\n            \\<open>l\\<^sub>1 = (y\\<^sub>3 - y\\<^sub>2') / (x\\<^sub>3 - x\\<^sub>2')\\<close> \\<open>y\\<^sub>2' = y\\<^sub>2\\<close> \\<open>x\\<^sub>2' = x\\<^sub>2\\<close>])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(- (2::'a) * y\\<^sub>3 ^ 1 + (0::'a)) * y\\<^sub>2 ^ 1 +\n             (((of_int (- 1) * x\\<^sub>2 ^ 1 +\n                ((2::'a) * x\\<^sub>3 ^ 1 + (0::'a))) *\n               x\\<^sub>2 ^ 1 +\n               (of_int (- 1) * x\\<^sub>3\\<^sup>2 + (0::'a))) *\n              x\\<^sub>1 ^ 1 +\n              (((1::'a) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n               ((1::'a) * b ^ 1 +\n                ((((1::'a) * x\\<^sub>3 ^ 1 + (0::'a)) * x\\<^sub>2 ^ 1 +\n                  ((1::'a) * x\\<^sub>3\\<^sup>2 + (0::'a))) *\n                 x\\<^sub>2 ^ 1 +\n                 ((1::'a) * y\\<^sub>3\\<^sup>2 +\n                  (of_int (- 1) * x\\<^sub>3 ^ 3 + (0::'a))))))) =\n             (0::'a);\n     x\\<^sub>1 \\<noteq>\n     ((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n     x\\<^sub>2 -\n     x\\<^sub>3\\<rbrakk>\n    \\<Longrightarrow> False\n 2. x\\<^sub>3 - x\\<^sub>2 \\<noteq> (0::'a) \\<and>\n    x\\<^sub>3 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a) \\<and>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (erule notE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (- (2::'a) * y\\<^sub>3 ^ 1 + (0::'a)) * y\\<^sub>2 ^ 1 +\n    (((of_int (- 1) * x\\<^sub>2 ^ 1 + ((2::'a) * x\\<^sub>3 ^ 1 + (0::'a))) *\n      x\\<^sub>2 ^ 1 +\n      (of_int (- 1) * x\\<^sub>3\\<^sup>2 + (0::'a))) *\n     x\\<^sub>1 ^ 1 +\n     (((1::'a) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n      ((1::'a) * b ^ 1 +\n       ((((1::'a) * x\\<^sub>3 ^ 1 + (0::'a)) * x\\<^sub>2 ^ 1 +\n         ((1::'a) * x\\<^sub>3\\<^sup>2 + (0::'a))) *\n        x\\<^sub>2 ^ 1 +\n        ((1::'a) * y\\<^sub>3\\<^sup>2 +\n         (of_int (- 1) * x\\<^sub>3 ^ 3 + (0::'a))))))) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>1 =\n    ((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n    x\\<^sub>2 -\n    x\\<^sub>3\n 2. x\\<^sub>3 - x\\<^sub>2 \\<noteq> (0::'a) \\<and>\n    x\\<^sub>3 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a) \\<and>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (rule sym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (- (2::'a) * y\\<^sub>3 ^ 1 + (0::'a)) * y\\<^sub>2 ^ 1 +\n    (((of_int (- 1) * x\\<^sub>2 ^ 1 + ((2::'a) * x\\<^sub>3 ^ 1 + (0::'a))) *\n      x\\<^sub>2 ^ 1 +\n      (of_int (- 1) * x\\<^sub>3\\<^sup>2 + (0::'a))) *\n     x\\<^sub>1 ^ 1 +\n     (((1::'a) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n      ((1::'a) * b ^ 1 +\n       ((((1::'a) * x\\<^sub>3 ^ 1 + (0::'a)) * x\\<^sub>2 ^ 1 +\n         ((1::'a) * x\\<^sub>3\\<^sup>2 + (0::'a))) *\n        x\\<^sub>2 ^ 1 +\n        ((1::'a) * y\\<^sub>3\\<^sup>2 +\n         (of_int (- 1) * x\\<^sub>3 ^ 3 + (0::'a))))))) =\n    (0::'a) \\<Longrightarrow>\n    ((y\\<^sub>3 - y\\<^sub>2) / (x\\<^sub>3 - x\\<^sub>2))\\<^sup>2 -\n    x\\<^sub>2 -\n    x\\<^sub>3 =\n    x\\<^sub>1\n 2. x\\<^sub>3 - x\\<^sub>2 \\<noteq> (0::'a) \\<and>\n    x\\<^sub>3 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a) \\<and>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (field ps'(1-2))"], ["proof (prove)\ngoal (2 subgoals):\n 1. (- (2::'a) * y\\<^sub>3 ^ 1 + (0::'a)) * y\\<^sub>2 ^ 1 +\n    (((of_int (- 1) * x\\<^sub>2 ^ 1 + ((2::'a) * x\\<^sub>3 ^ 1 + (0::'a))) *\n      x\\<^sub>2 ^ 1 +\n      (of_int (- 1) * x\\<^sub>3\\<^sup>2 + (0::'a))) *\n     x\\<^sub>1 ^ 1 +\n     (((1::'a) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n      ((1::'a) * b ^ 1 +\n       ((((1::'a) * x\\<^sub>3 ^ 1 + (0::'a)) * x\\<^sub>2 ^ 1 +\n         ((1::'a) * x\\<^sub>3\\<^sup>2 + (0::'a))) *\n        x\\<^sub>2 ^ 1 +\n        ((1::'a) * y\\<^sub>3\\<^sup>2 +\n         (of_int (- 1) * x\\<^sub>3 ^ 3 + (0::'a))))))) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>3 - x\\<^sub>2 \\<noteq> (0::'a)\n 2. x\\<^sub>3 - x\\<^sub>2 \\<noteq> (0::'a) \\<and>\n    x\\<^sub>3 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a) \\<and>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (simp add: \\<open>x\\<^sub>2' \\<noteq> x\\<^sub>3\\<close> [simplified \\<open>x\\<^sub>2' = x\\<^sub>2\\<close>, symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^sub>3 - x\\<^sub>2 \\<noteq> (0::'a) \\<and>\n    x\\<^sub>3 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a) \\<and>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. x\\<^sub>3 - x\\<^sub>2 \\<noteq> (0::'a)\n 2. x\\<^sub>3 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a) \\<and>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (simp add: \\<open>x\\<^sub>2' \\<noteq> x\\<^sub>3\\<close> [simplified \\<open>x\\<^sub>2' = x\\<^sub>2\\<close>, symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^sub>3 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a) \\<and>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. x\\<^sub>3 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 2. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (rule notI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. x\\<^sub>3 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) =\n    (0::'a) \\<Longrightarrow>\n    False\n 2. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (ring (prems) ps'(1-2))"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((2::'a) * y\\<^sub>2 ^ 1 + (0::'a)) * y\\<^sub>1 ^ 1 +\n    (((of_int (- 1) * x\\<^sub>2 ^ 1 + ((1::'a) * x\\<^sub>3 ^ 1 + (0::'a))) *\n      x\\<^sub>1 ^ 1 +\n      (of_int (- 1) * a ^ 1 +\n       ((of_int (- 1) * x\\<^sub>2 ^ 1 +\n         (- (2::'a) * x\\<^sub>3 ^ 1 + (0::'a))) *\n        x\\<^sub>2 ^ 1 +\n        (0::'a)))) *\n     x\\<^sub>1 ^ 1 +\n     ((of_int (- 1) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n      (- (2::'a) * b ^ 1 +\n       (((1::'a) * x\\<^sub>3 ^ 1 + (0::'a)) * x\\<^sub>2\\<^sup>2 +\n        (0::'a))))) =\n    (0::'a) \\<Longrightarrow>\n    False\n 2. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (cut_tac \\<open>x\\<^sub>4' \\<noteq> x\\<^sub>3'\\<close> [simplified \\<open>x\\<^sub>4' = x\\<^sub>4\\<close> \\<open>x\\<^sub>3' = x\\<^sub>3\\<close> \\<open>x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\\<close>\n            \\<open>l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\\<close>])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>((2::'a) * y\\<^sub>2 ^ 1 + (0::'a)) * y\\<^sub>1 ^ 1 +\n             (((of_int (- 1) * x\\<^sub>2 ^ 1 +\n                ((1::'a) * x\\<^sub>3 ^ 1 + (0::'a))) *\n               x\\<^sub>1 ^ 1 +\n               (of_int (- 1) * a ^ 1 +\n                ((of_int (- 1) * x\\<^sub>2 ^ 1 +\n                  (- (2::'a) * x\\<^sub>3 ^ 1 + (0::'a))) *\n                 x\\<^sub>2 ^ 1 +\n                 (0::'a)))) *\n              x\\<^sub>1 ^ 1 +\n              ((of_int (- 1) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n               (- (2::'a) * b ^ 1 +\n                (((1::'a) * x\\<^sub>3 ^ 1 + (0::'a)) * x\\<^sub>2\\<^sup>2 +\n                 (0::'a))))) =\n             (0::'a);\n     ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     x\\<^sub>2 \\<noteq>\n     x\\<^sub>3\\<rbrakk>\n    \\<Longrightarrow> False\n 2. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (erule notE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((2::'a) * y\\<^sub>2 ^ 1 + (0::'a)) * y\\<^sub>1 ^ 1 +\n    (((of_int (- 1) * x\\<^sub>2 ^ 1 + ((1::'a) * x\\<^sub>3 ^ 1 + (0::'a))) *\n      x\\<^sub>1 ^ 1 +\n      (of_int (- 1) * a ^ 1 +\n       ((of_int (- 1) * x\\<^sub>2 ^ 1 +\n         (- (2::'a) * x\\<^sub>3 ^ 1 + (0::'a))) *\n        x\\<^sub>2 ^ 1 +\n        (0::'a)))) *\n     x\\<^sub>1 ^ 1 +\n     ((of_int (- 1) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n      (- (2::'a) * b ^ 1 +\n       (((1::'a) * x\\<^sub>3 ^ 1 + (0::'a)) * x\\<^sub>2\\<^sup>2 +\n        (0::'a))))) =\n    (0::'a) \\<Longrightarrow>\n    ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 -\n    x\\<^sub>2 =\n    x\\<^sub>3\n 2. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (rule sym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((2::'a) * y\\<^sub>2 ^ 1 + (0::'a)) * y\\<^sub>1 ^ 1 +\n    (((of_int (- 1) * x\\<^sub>2 ^ 1 + ((1::'a) * x\\<^sub>3 ^ 1 + (0::'a))) *\n      x\\<^sub>1 ^ 1 +\n      (of_int (- 1) * a ^ 1 +\n       ((of_int (- 1) * x\\<^sub>2 ^ 1 +\n         (- (2::'a) * x\\<^sub>3 ^ 1 + (0::'a))) *\n        x\\<^sub>2 ^ 1 +\n        (0::'a)))) *\n     x\\<^sub>1 ^ 1 +\n     ((of_int (- 1) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n      (- (2::'a) * b ^ 1 +\n       (((1::'a) * x\\<^sub>3 ^ 1 + (0::'a)) * x\\<^sub>2\\<^sup>2 +\n        (0::'a))))) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>3 =\n    ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 -\n    x\\<^sub>2\n 2. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (field ps'(1-2))"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((2::'a) * y\\<^sub>2 ^ 1 + (0::'a)) * y\\<^sub>1 ^ 1 +\n    (((of_int (- 1) * x\\<^sub>2 ^ 1 + ((1::'a) * x\\<^sub>3 ^ 1 + (0::'a))) *\n      x\\<^sub>1 ^ 1 +\n      (of_int (- 1) * a ^ 1 +\n       ((of_int (- 1) * x\\<^sub>2 ^ 1 +\n         (- (2::'a) * x\\<^sub>3 ^ 1 + (0::'a))) *\n        x\\<^sub>2 ^ 1 +\n        (0::'a)))) *\n     x\\<^sub>1 ^ 1 +\n     ((of_int (- 1) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n      (- (2::'a) * b ^ 1 +\n       (((1::'a) * x\\<^sub>3 ^ 1 + (0::'a)) * x\\<^sub>2\\<^sup>2 +\n        (0::'a))))) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)\n 2. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (simp_all add: \\<open>x\\<^sub>1 \\<noteq> x\\<^sub>2\\<close> [symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  p\\<^sub>6 = p\\<^sub>7\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>5 =\n  ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma spec2_assoc:\n  assumes p\\<^sub>1: \"on_curve a b p\\<^sub>1\"\n  and p\\<^sub>2: \"on_curve a b p\\<^sub>2\"\n  and p\\<^sub>3: \"on_curve a b p\\<^sub>3\"\n  and \"is_generic p\\<^sub>1 p\\<^sub>2\"\n  and \"is_tangent p\\<^sub>2 p\\<^sub>3\"\n  and \"is_generic (add a p\\<^sub>1 p\\<^sub>2) p\\<^sub>3\"\n  and \"is_generic p\\<^sub>1 (add a p\\<^sub>2 p\\<^sub>3)\"\n  shows \"add a p\\<^sub>1 (add a p\\<^sub>2 p\\<^sub>3) = add a (add a p\\<^sub>1 p\\<^sub>2) p\\<^sub>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "using p\\<^sub>1 p\\<^sub>2 assms"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n  is_generic p\\<^sub>1 p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>3\n  is_generic (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) p\\<^sub>3\n  is_generic p\\<^sub>1 (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "proof (induct rule: add_case)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b Infinity; on_curve a b p;\n        on_curve a b p\\<^sub>3; is_generic Infinity p;\n        is_tangent p p\\<^sub>3; is_generic p p\\<^sub>3;\n        is_generic Infinity (ell_field_class.add a p p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a Infinity\n                          (ell_field_class.add a p p\\<^sub>3) =\n                         ell_field_class.add a p p\\<^sub>3\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        on_curve a b p\\<^sub>3; is_generic p Infinity;\n        is_tangent Infinity p\\<^sub>3; is_generic p p\\<^sub>3;\n        is_generic p (ell_field_class.add a Infinity p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a Infinity p\\<^sub>3) =\n                         ell_field_class.add a p p\\<^sub>3\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        on_curve a b p\\<^sub>3; is_generic p (opp p);\n        is_tangent (opp p) p\\<^sub>3; is_generic Infinity p\\<^sub>3;\n        is_generic p (ell_field_class.add a (opp p) p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a (opp p) p\\<^sub>3) =\n                         ell_field_class.add a Infinity p\\<^sub>3\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 5. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "case InfL"], ["proof (state)\nthis:\n  on_curve a b Infinity\n  on_curve a b p_\n  on_curve a b p\\<^sub>3\n  is_generic Infinity p_\n  is_tangent p_ p\\<^sub>3\n  is_generic p_ p\\<^sub>3\n  is_generic Infinity (ell_field_class.add a p_ p\\<^sub>3)\n\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b Infinity; on_curve a b p;\n        on_curve a b p\\<^sub>3; is_generic Infinity p;\n        is_tangent p p\\<^sub>3; is_generic p p\\<^sub>3;\n        is_generic Infinity (ell_field_class.add a p p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a Infinity\n                          (ell_field_class.add a p p\\<^sub>3) =\n                         ell_field_class.add a p p\\<^sub>3\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        on_curve a b p\\<^sub>3; is_generic p Infinity;\n        is_tangent Infinity p\\<^sub>3; is_generic p p\\<^sub>3;\n        is_generic p (ell_field_class.add a Infinity p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a Infinity p\\<^sub>3) =\n                         ell_field_class.add a p p\\<^sub>3\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        on_curve a b p\\<^sub>3; is_generic p (opp p);\n        is_tangent (opp p) p\\<^sub>3; is_generic Infinity p\\<^sub>3;\n        is_generic p (ell_field_class.add a (opp p) p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a (opp p) p\\<^sub>3) =\n                         ell_field_class.add a Infinity p\\<^sub>3\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 5. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a Infinity (ell_field_class.add a p_ p\\<^sub>3) =\n    ell_field_class.add a p_ p\\<^sub>3", "by (simp add: add_def)"], ["proof (state)\nthis:\n  ell_field_class.add a Infinity (ell_field_class.add a p_ p\\<^sub>3) =\n  ell_field_class.add a p_ p\\<^sub>3\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        on_curve a b p\\<^sub>3; is_generic p Infinity;\n        is_tangent Infinity p\\<^sub>3; is_generic p p\\<^sub>3;\n        is_generic p (ell_field_class.add a Infinity p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a Infinity p\\<^sub>3) =\n                         ell_field_class.add a p p\\<^sub>3\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        on_curve a b p\\<^sub>3; is_generic p (opp p);\n        is_tangent (opp p) p\\<^sub>3; is_generic Infinity p\\<^sub>3;\n        is_generic p (ell_field_class.add a (opp p) p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a (opp p) p\\<^sub>3) =\n                         ell_field_class.add a Infinity p\\<^sub>3\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        on_curve a b p\\<^sub>3; is_generic p Infinity;\n        is_tangent Infinity p\\<^sub>3; is_generic p p\\<^sub>3;\n        is_generic p (ell_field_class.add a Infinity p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a Infinity p\\<^sub>3) =\n                         ell_field_class.add a p p\\<^sub>3\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        on_curve a b p\\<^sub>3; is_generic p (opp p);\n        is_tangent (opp p) p\\<^sub>3; is_generic Infinity p\\<^sub>3;\n        is_generic p (ell_field_class.add a (opp p) p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a (opp p) p\\<^sub>3) =\n                         ell_field_class.add a Infinity p\\<^sub>3\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "case InfR"], ["proof (state)\nthis:\n  on_curve a b p_\n  on_curve a b Infinity\n  on_curve a b p\\<^sub>3\n  is_generic p_ Infinity\n  is_tangent Infinity p\\<^sub>3\n  is_generic p_ p\\<^sub>3\n  is_generic p_ (ell_field_class.add a Infinity p\\<^sub>3)\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        on_curve a b p\\<^sub>3; is_generic p Infinity;\n        is_tangent Infinity p\\<^sub>3; is_generic p p\\<^sub>3;\n        is_generic p (ell_field_class.add a Infinity p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a Infinity p\\<^sub>3) =\n                         ell_field_class.add a p p\\<^sub>3\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        on_curve a b p\\<^sub>3; is_generic p (opp p);\n        is_tangent (opp p) p\\<^sub>3; is_generic Infinity p\\<^sub>3;\n        is_generic p (ell_field_class.add a (opp p) p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a (opp p) p\\<^sub>3) =\n                         ell_field_class.add a Infinity p\\<^sub>3\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a p_ (ell_field_class.add a Infinity p\\<^sub>3) =\n    ell_field_class.add a p_ p\\<^sub>3", "by (simp add: add_def)"], ["proof (state)\nthis:\n  ell_field_class.add a p_ (ell_field_class.add a Infinity p\\<^sub>3) =\n  ell_field_class.add a p_ p\\<^sub>3\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        on_curve a b p\\<^sub>3; is_generic p (opp p);\n        is_tangent (opp p) p\\<^sub>3; is_generic Infinity p\\<^sub>3;\n        is_generic p (ell_field_class.add a (opp p) p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a (opp p) p\\<^sub>3) =\n                         ell_field_class.add a Infinity p\\<^sub>3\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        on_curve a b p\\<^sub>3; is_generic p (opp p);\n        is_tangent (opp p) p\\<^sub>3; is_generic Infinity p\\<^sub>3;\n        is_generic p (ell_field_class.add a (opp p) p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a (opp p) p\\<^sub>3) =\n                         ell_field_class.add a Infinity p\\<^sub>3\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "case Opp"], ["proof (state)\nthis:\n  on_curve a b p_\n  on_curve a b p_\n  on_curve a b (opp p_)\n  on_curve a b p\\<^sub>3\n  is_generic p_ (opp p_)\n  is_tangent (opp p_) p\\<^sub>3\n  is_generic Infinity p\\<^sub>3\n  is_generic p_ (ell_field_class.add a (opp p_) p\\<^sub>3)\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        on_curve a b p\\<^sub>3; is_generic p (opp p);\n        is_tangent (opp p) p\\<^sub>3; is_generic Infinity p\\<^sub>3;\n        is_generic p (ell_field_class.add a (opp p) p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a (opp p) p\\<^sub>3) =\n                         ell_field_class.add a Infinity p\\<^sub>3\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  on_curve a b p_\n  on_curve a b p_\n  on_curve a b (opp p_)\n  on_curve a b p\\<^sub>3\n  is_generic p_ (opp p_)\n  is_tangent (opp p_) p\\<^sub>3\n  is_generic Infinity p\\<^sub>3\n  is_generic p_ (ell_field_class.add a (opp p_) p\\<^sub>3)", "show ?case"], ["proof (prove)\nusing this:\n  on_curve a b p_\n  on_curve a b p_\n  on_curve a b (opp p_)\n  on_curve a b p\\<^sub>3\n  is_generic p_ (opp p_)\n  is_tangent (opp p_) p\\<^sub>3\n  is_generic Infinity p\\<^sub>3\n  is_generic p_ (ell_field_class.add a (opp p_) p\\<^sub>3)\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p_ (ell_field_class.add a (opp p_) p\\<^sub>3) =\n    ell_field_class.add a Infinity p\\<^sub>3", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  ell_field_class.add a p_ (ell_field_class.add a (opp p_) p\\<^sub>3) =\n  ell_field_class.add a Infinity p\\<^sub>3\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "case Tan"], ["proof (state)\nthis:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>3\n  is_generic p\\<^sub>1_ p\\<^sub>1_\n  is_tangent p\\<^sub>1_ p\\<^sub>3\n  is_generic p\\<^sub>2_ p\\<^sub>3\n  is_generic p\\<^sub>1_ (ell_field_class.add a p\\<^sub>1_ p\\<^sub>3)\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>3\n  is_generic p\\<^sub>1_ p\\<^sub>1_\n  is_tangent p\\<^sub>1_ p\\<^sub>3\n  is_generic p\\<^sub>2_ p\\<^sub>3\n  is_generic p\\<^sub>1_ (ell_field_class.add a p\\<^sub>1_ p\\<^sub>3)", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>3\n  is_generic p\\<^sub>1_ p\\<^sub>1_\n  is_tangent p\\<^sub>1_ p\\<^sub>3\n  is_generic p\\<^sub>2_ p\\<^sub>3\n  is_generic p\\<^sub>1_ (ell_field_class.add a p\\<^sub>1_ p\\<^sub>3)\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1_\n     (ell_field_class.add a p\\<^sub>1_ p\\<^sub>3) =\n    ell_field_class.add a p\\<^sub>2_ p\\<^sub>3", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1_\n   (ell_field_class.add a p\\<^sub>1_ p\\<^sub>3) =\n  ell_field_class.add a p\\<^sub>2_ p\\<^sub>3\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "case (Gen p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>4 x\\<^sub>4 y\\<^sub>4 l)"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n  is_generic p\\<^sub>1 p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>3\n  is_generic p\\<^sub>4 p\\<^sub>3\n  is_generic p\\<^sub>1 (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_generic p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "with \\<open>on_curve a b p\\<^sub>2\\<close> \\<open>on_curve a b p\\<^sub>3\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n  is_generic p\\<^sub>1 p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>3\n  is_generic p\\<^sub>4 p\\<^sub>3\n  is_generic p\\<^sub>1 (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)", "show ?case"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n  is_generic p\\<^sub>1 p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>3\n  is_generic p\\<^sub>4 p\\<^sub>3\n  is_generic p\\<^sub>1 (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a p\\<^sub>4 p\\<^sub>3", "proof (induct rule: add_case)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Infinity = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 Infinity;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b Infinity; on_curve a b p;\n        is_generic p\\<^sub>1 Infinity; is_tangent Infinity p;\n        is_generic p\\<^sub>4 p; is_generic p\\<^sub>1 p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p =\n                         ell_field_class.add a p\\<^sub>4 p\n 2. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b Infinity;\n        is_generic p\\<^sub>1 p; is_tangent p Infinity;\n        is_generic p\\<^sub>4 Infinity; is_generic p\\<^sub>1 p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p =\n                         ell_field_class.add a p\\<^sub>4 Infinity\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b (opp p);\n        is_generic p\\<^sub>1 p; is_tangent p (opp p);\n        is_generic p\\<^sub>4 (opp p); is_generic p\\<^sub>1 Infinity\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 Infinity =\n                         ell_field_class.add a p\\<^sub>4 (opp p)\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 5. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "case InfL"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  Infinity = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 Infinity\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b Infinity\n  on_curve a b p_\n  is_generic p\\<^sub>1 Infinity\n  is_tangent Infinity p_\n  is_generic p\\<^sub>4 p_\n  is_generic p\\<^sub>1 p_\n\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Infinity = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 Infinity;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b Infinity; on_curve a b p;\n        is_generic p\\<^sub>1 Infinity; is_tangent Infinity p;\n        is_generic p\\<^sub>4 p; is_generic p\\<^sub>1 p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p =\n                         ell_field_class.add a p\\<^sub>4 p\n 2. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b Infinity;\n        is_generic p\\<^sub>1 p; is_tangent p Infinity;\n        is_generic p\\<^sub>4 Infinity; is_generic p\\<^sub>1 p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p =\n                         ell_field_class.add a p\\<^sub>4 Infinity\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b (opp p);\n        is_generic p\\<^sub>1 p; is_tangent p (opp p);\n        is_generic p\\<^sub>4 (opp p); is_generic p\\<^sub>1 Infinity\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 Infinity =\n                         ell_field_class.add a p\\<^sub>4 (opp p)\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 5. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  Infinity = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 Infinity\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b Infinity\n  on_curve a b p_\n  is_generic p\\<^sub>1 Infinity\n  is_tangent Infinity p_\n  is_generic p\\<^sub>4 p_\n  is_generic p\\<^sub>1 p_", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  Infinity = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 Infinity\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b Infinity\n  on_curve a b p_\n  is_generic p\\<^sub>1 Infinity\n  is_tangent Infinity p_\n  is_generic p\\<^sub>4 p_\n  is_generic p\\<^sub>1 p_\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p_ = ell_field_class.add a p\\<^sub>4 p_", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p_ = ell_field_class.add a p\\<^sub>4 p_\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b Infinity;\n        is_generic p\\<^sub>1 p; is_tangent p Infinity;\n        is_generic p\\<^sub>4 Infinity; is_generic p\\<^sub>1 p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p =\n                         ell_field_class.add a p\\<^sub>4 Infinity\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b (opp p);\n        is_generic p\\<^sub>1 p; is_tangent p (opp p);\n        is_generic p\\<^sub>4 (opp p); is_generic p\\<^sub>1 Infinity\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 Infinity =\n                         ell_field_class.add a p\\<^sub>4 (opp p)\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b Infinity;\n        is_generic p\\<^sub>1 p; is_tangent p Infinity;\n        is_generic p\\<^sub>4 Infinity; is_generic p\\<^sub>1 p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p =\n                         ell_field_class.add a p\\<^sub>4 Infinity\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b (opp p);\n        is_generic p\\<^sub>1 p; is_tangent p (opp p);\n        is_generic p\\<^sub>4 (opp p); is_generic p\\<^sub>1 Infinity\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 Infinity =\n                         ell_field_class.add a p\\<^sub>4 (opp p)\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "case InfR"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p_ = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p_\n  on_curve a b Infinity\n  is_generic p\\<^sub>1 p_\n  is_tangent p_ Infinity\n  is_generic p\\<^sub>4 Infinity\n  is_generic p\\<^sub>1 p_\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b Infinity;\n        is_generic p\\<^sub>1 p; is_tangent p Infinity;\n        is_generic p\\<^sub>4 Infinity; is_generic p\\<^sub>1 p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p =\n                         ell_field_class.add a p\\<^sub>4 Infinity\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b (opp p);\n        is_generic p\\<^sub>1 p; is_tangent p (opp p);\n        is_generic p\\<^sub>4 (opp p); is_generic p\\<^sub>1 Infinity\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 Infinity =\n                         ell_field_class.add a p\\<^sub>4 (opp p)\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p_ = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p_\n  on_curve a b Infinity\n  is_generic p\\<^sub>1 p_\n  is_tangent p_ Infinity\n  is_generic p\\<^sub>4 Infinity\n  is_generic p\\<^sub>1 p_", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p_ = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p_\n  on_curve a b Infinity\n  is_generic p\\<^sub>1 p_\n  is_tangent p_ Infinity\n  is_generic p\\<^sub>4 Infinity\n  is_generic p\\<^sub>1 p_\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p_ =\n    ell_field_class.add a p\\<^sub>4 Infinity", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p_ =\n  ell_field_class.add a p\\<^sub>4 Infinity\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b (opp p);\n        is_generic p\\<^sub>1 p; is_tangent p (opp p);\n        is_generic p\\<^sub>4 (opp p); is_generic p\\<^sub>1 Infinity\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 Infinity =\n                         ell_field_class.add a p\\<^sub>4 (opp p)\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b (opp p);\n        is_generic p\\<^sub>1 p; is_tangent p (opp p);\n        is_generic p\\<^sub>4 (opp p); is_generic p\\<^sub>1 Infinity\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 Infinity =\n                         ell_field_class.add a p\\<^sub>4 (opp p)\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "case Opp"], ["proof (state)\nthis:\n  on_curve a b p_\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p_ = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p_\n  on_curve a b (opp p_)\n  is_generic p\\<^sub>1 p_\n  is_tangent p_ (opp p_)\n  is_generic p\\<^sub>4 (opp p_)\n  is_generic p\\<^sub>1 Infinity\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b (opp p);\n        is_generic p\\<^sub>1 p; is_tangent p (opp p);\n        is_generic p\\<^sub>4 (opp p); is_generic p\\<^sub>1 Infinity\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 Infinity =\n                         ell_field_class.add a p\\<^sub>4 (opp p)\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  on_curve a b p_\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p_ = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p_\n  on_curve a b (opp p_)\n  is_generic p\\<^sub>1 p_\n  is_tangent p_ (opp p_)\n  is_generic p\\<^sub>4 (opp p_)\n  is_generic p\\<^sub>1 Infinity", "show ?case"], ["proof (prove)\nusing this:\n  on_curve a b p_\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p_ = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p_\n  on_curve a b (opp p_)\n  is_generic p\\<^sub>1 p_\n  is_tangent p_ (opp p_)\n  is_generic p\\<^sub>4 (opp p_)\n  is_generic p\\<^sub>1 Infinity\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 Infinity =\n    ell_field_class.add a p\\<^sub>4 (opp p_)", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 Infinity =\n  ell_field_class.add a p\\<^sub>4 (opp p_)\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "case (Tan p\\<^sub>2 x\\<^sub>2' y\\<^sub>2' p\\<^sub>5 x\\<^sub>5 y\\<^sub>5 l\\<^sub>1)"], ["proof (state)\nthis:\n  p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>5 = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n  is_generic p\\<^sub>1 p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>2\n  is_generic p\\<^sub>4 p\\<^sub>2\n  is_generic p\\<^sub>1 p\\<^sub>5\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "from \\<open>on_curve a b p\\<^sub>2\\<close> \\<open>p\\<^sub>5 = add a p\\<^sub>2 p\\<^sub>2\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>2\n  p\\<^sub>5 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2", "have \"on_curve a b p\\<^sub>5\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>2\n  p\\<^sub>5 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n\ngoal (1 subgoal):\n 1. on_curve a b p\\<^sub>5", "by (simp add: add_closed)"], ["proof (state)\nthis:\n  on_curve a b p\\<^sub>5\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "with \\<open>on_curve a b p\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>5", "show ?case"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>5\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>5 =\n    ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "using Tan"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>5\n  p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>5 = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n  is_generic p\\<^sub>1 p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>2\n  is_generic p\\<^sub>4 p\\<^sub>2\n  is_generic p\\<^sub>1 p\\<^sub>5\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>5 =\n    ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "proof (induct rule: add_case)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p = Point x\\<^sub>5 y\\<^sub>5;\n        p = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        Infinity = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a Infinity p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b Infinity; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic Infinity p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic Infinity p\\<rbrakk>\n       \\<Longrightarrow> p = ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 2. \\<And>p.\n       \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        Infinity = Point x\\<^sub>5 y\\<^sub>5;\n        Infinity = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b p\\<^sub>2; on_curve a b p\\<^sub>2;\n        is_generic p p\\<^sub>2; is_tangent p\\<^sub>2 p\\<^sub>2;\n        is_generic p\\<^sub>4 p\\<^sub>2; is_generic p Infinity\\<rbrakk>\n       \\<Longrightarrow> p = ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        opp p = Point x\\<^sub>5 y\\<^sub>5;\n        opp p = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b p\\<^sub>2; on_curve a b p\\<^sub>2;\n        is_generic p p\\<^sub>2; is_tangent p\\<^sub>2 p\\<^sub>2;\n        is_generic p\\<^sub>4 p\\<^sub>2; is_generic p (opp p)\\<rbrakk>\n       \\<Longrightarrow> Infinity =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 5. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "case InfL"], ["proof (state)\nthis:\n  p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2'\n  p_ = Point x\\<^sub>5 y\\<^sub>5\n  p_ = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  Infinity = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a Infinity p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b Infinity\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n  is_generic Infinity p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>2\n  is_generic p\\<^sub>4 p\\<^sub>2\n  is_generic Infinity p_\n\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p = Point x\\<^sub>5 y\\<^sub>5;\n        p = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        Infinity = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a Infinity p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b Infinity; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic Infinity p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic Infinity p\\<rbrakk>\n       \\<Longrightarrow> p = ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 2. \\<And>p.\n       \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        Infinity = Point x\\<^sub>5 y\\<^sub>5;\n        Infinity = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b p\\<^sub>2; on_curve a b p\\<^sub>2;\n        is_generic p p\\<^sub>2; is_tangent p\\<^sub>2 p\\<^sub>2;\n        is_generic p\\<^sub>4 p\\<^sub>2; is_generic p Infinity\\<rbrakk>\n       \\<Longrightarrow> p = ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        opp p = Point x\\<^sub>5 y\\<^sub>5;\n        opp p = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b p\\<^sub>2; on_curve a b p\\<^sub>2;\n        is_generic p p\\<^sub>2; is_tangent p\\<^sub>2 p\\<^sub>2;\n        is_generic p\\<^sub>4 p\\<^sub>2; is_generic p (opp p)\\<rbrakk>\n       \\<Longrightarrow> Infinity =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 5. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2'\n  p_ = Point x\\<^sub>5 y\\<^sub>5\n  p_ = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  Infinity = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a Infinity p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b Infinity\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n  is_generic Infinity p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>2\n  is_generic p\\<^sub>4 p\\<^sub>2\n  is_generic Infinity p_", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2'\n  p_ = Point x\\<^sub>5 y\\<^sub>5\n  p_ = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  Infinity = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a Infinity p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b Infinity\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n  is_generic Infinity p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>2\n  is_generic p\\<^sub>4 p\\<^sub>2\n  is_generic Infinity p_\n\ngoal (1 subgoal):\n 1. p_ = ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  p_ = ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        Infinity = Point x\\<^sub>5 y\\<^sub>5;\n        Infinity = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b p\\<^sub>2; on_curve a b p\\<^sub>2;\n        is_generic p p\\<^sub>2; is_tangent p\\<^sub>2 p\\<^sub>2;\n        is_generic p\\<^sub>4 p\\<^sub>2; is_generic p Infinity\\<rbrakk>\n       \\<Longrightarrow> p = ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        opp p = Point x\\<^sub>5 y\\<^sub>5;\n        opp p = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b p\\<^sub>2; on_curve a b p\\<^sub>2;\n        is_generic p p\\<^sub>2; is_tangent p\\<^sub>2 p\\<^sub>2;\n        is_generic p\\<^sub>4 p\\<^sub>2; is_generic p (opp p)\\<rbrakk>\n       \\<Longrightarrow> Infinity =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        Infinity = Point x\\<^sub>5 y\\<^sub>5;\n        Infinity = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b p\\<^sub>2; on_curve a b p\\<^sub>2;\n        is_generic p p\\<^sub>2; is_tangent p\\<^sub>2 p\\<^sub>2;\n        is_generic p\\<^sub>4 p\\<^sub>2; is_generic p Infinity\\<rbrakk>\n       \\<Longrightarrow> p = ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        opp p = Point x\\<^sub>5 y\\<^sub>5;\n        opp p = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b p\\<^sub>2; on_curve a b p\\<^sub>2;\n        is_generic p p\\<^sub>2; is_tangent p\\<^sub>2 p\\<^sub>2;\n        is_generic p\\<^sub>4 p\\<^sub>2; is_generic p (opp p)\\<rbrakk>\n       \\<Longrightarrow> Infinity =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "case InfR"], ["proof (state)\nthis:\n  p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2'\n  Infinity = Point x\\<^sub>5 y\\<^sub>5\n  Infinity = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p_ = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p_ p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p_\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n  is_generic p_ p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>2\n  is_generic p\\<^sub>4 p\\<^sub>2\n  is_generic p_ Infinity\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        Infinity = Point x\\<^sub>5 y\\<^sub>5;\n        Infinity = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b p\\<^sub>2; on_curve a b p\\<^sub>2;\n        is_generic p p\\<^sub>2; is_tangent p\\<^sub>2 p\\<^sub>2;\n        is_generic p\\<^sub>4 p\\<^sub>2; is_generic p Infinity\\<rbrakk>\n       \\<Longrightarrow> p = ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        opp p = Point x\\<^sub>5 y\\<^sub>5;\n        opp p = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b p\\<^sub>2; on_curve a b p\\<^sub>2;\n        is_generic p p\\<^sub>2; is_tangent p\\<^sub>2 p\\<^sub>2;\n        is_generic p\\<^sub>4 p\\<^sub>2; is_generic p (opp p)\\<rbrakk>\n       \\<Longrightarrow> Infinity =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2'\n  Infinity = Point x\\<^sub>5 y\\<^sub>5\n  Infinity = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p_ = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p_ p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p_\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n  is_generic p_ p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>2\n  is_generic p\\<^sub>4 p\\<^sub>2\n  is_generic p_ Infinity", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2'\n  Infinity = Point x\\<^sub>5 y\\<^sub>5\n  Infinity = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p_ = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p_ p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p_\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n  is_generic p_ p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>2\n  is_generic p\\<^sub>4 p\\<^sub>2\n  is_generic p_ Infinity\n\ngoal (1 subgoal):\n 1. p_ = ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  p_ = ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        opp p = Point x\\<^sub>5 y\\<^sub>5;\n        opp p = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b p\\<^sub>2; on_curve a b p\\<^sub>2;\n        is_generic p p\\<^sub>2; is_tangent p\\<^sub>2 p\\<^sub>2;\n        is_generic p\\<^sub>4 p\\<^sub>2; is_generic p (opp p)\\<rbrakk>\n       \\<Longrightarrow> Infinity =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        opp p = Point x\\<^sub>5 y\\<^sub>5;\n        opp p = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b p\\<^sub>2; on_curve a b p\\<^sub>2;\n        is_generic p p\\<^sub>2; is_tangent p\\<^sub>2 p\\<^sub>2;\n        is_generic p\\<^sub>4 p\\<^sub>2; is_generic p (opp p)\\<rbrakk>\n       \\<Longrightarrow> Infinity =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "case (Opp p)"], ["proof (state)\nthis:\n  on_curve a b p\n  p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2'\n  opp p = Point x\\<^sub>5 y\\<^sub>5\n  opp p = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n  is_generic p p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>2\n  is_generic p\\<^sub>4 p\\<^sub>2\n  is_generic p (opp p)\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        opp p = Point x\\<^sub>5 y\\<^sub>5;\n        opp p = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b p\\<^sub>2; on_curve a b p\\<^sub>2;\n        is_generic p p\\<^sub>2; is_tangent p\\<^sub>2 p\\<^sub>2;\n        is_generic p\\<^sub>4 p\\<^sub>2; is_generic p (opp p)\\<rbrakk>\n       \\<Longrightarrow> Infinity =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "from \\<open>is_generic p (opp p)\\<close> \\<open>on_curve a b p\\<close>"], ["proof (chain)\npicking this:\n  is_generic p (opp p)\n  on_curve a b p", "show ?case"], ["proof (prove)\nusing this:\n  is_generic p (opp p)\n  on_curve a b p\n\ngoal (1 subgoal):\n 1. Infinity = ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "by (simp add: is_generic_def opp_opp)"], ["proof (state)\nthis:\n  Infinity = ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "case Tan"], ["proof (state)\nthis:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>1_ = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>1_ = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1_ = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1_ p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n  is_generic p\\<^sub>1_ p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>2\n  is_generic p\\<^sub>4 p\\<^sub>2\n  is_generic p\\<^sub>1_ p\\<^sub>1_\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>1_ = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>1_ = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1_ = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1_ p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n  is_generic p\\<^sub>1_ p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>2\n  is_generic p\\<^sub>4 p\\<^sub>2\n  is_generic p\\<^sub>1_ p\\<^sub>1_", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>1_ = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>1_ = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1_ = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1_ p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n  is_generic p\\<^sub>1_ p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>2\n  is_generic p\\<^sub>4 p\\<^sub>2\n  is_generic p\\<^sub>1_ p\\<^sub>1_\n\ngoal (1 subgoal):\n 1. p\\<^sub>2_ = ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "case (Gen p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>5' x\\<^sub>5' y\\<^sub>5' p\\<^sub>6 x\\<^sub>6 y\\<^sub>6 l\\<^sub>2)"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5'\n  x\\<^sub>1' \\<noteq> x\\<^sub>5'\n  l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5' = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n  is_generic p\\<^sub>1 p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>2\n  is_generic p\\<^sub>4 p\\<^sub>2\n  is_generic p\\<^sub>1 p\\<^sub>5'\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "from \\<open>on_curve a b p\\<^sub>1\\<close> \\<open>on_curve a b p\\<^sub>2\\<close> \\<open>p\\<^sub>4 = add a p\\<^sub>1 p\\<^sub>2\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2", "have \"on_curve a b p\\<^sub>4\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n\ngoal (1 subgoal):\n 1. on_curve a b p\\<^sub>4", "by (simp add: add_closed)"], ["proof (state)\nthis:\n  on_curve a b p\\<^sub>4\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>4", "show ?case"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>4\n\ngoal (1 subgoal):\n 1. p\\<^sub>6 = ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "using \\<open>on_curve a b p\\<^sub>2\\<close> Gen"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>4\n  on_curve a b p\\<^sub>2\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5'\n  x\\<^sub>1' \\<noteq> x\\<^sub>5'\n  l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5' = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n  is_generic p\\<^sub>1 p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>2\n  is_generic p\\<^sub>4 p\\<^sub>2\n  is_generic p\\<^sub>1 p\\<^sub>5'\n\ngoal (1 subgoal):\n 1. p\\<^sub>6 = ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "proof (induct rule: add_case)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a p p; y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2; Infinity = Point x\\<^sub>4 y\\<^sub>4;\n        Infinity = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b p;\n        is_generic p\\<^sub>1 p; is_tangent p p; is_generic Infinity p;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\n 2. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Infinity = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a Infinity Infinity;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Infinity = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 Infinity;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b Infinity;\n        on_curve a b Infinity; is_generic p\\<^sub>1 Infinity;\n        is_tangent Infinity Infinity; is_generic p Infinity;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        opp p = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a (opp p) (opp p);\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (opp p); on_curve a b (opp p);\n        is_generic p\\<^sub>1 (opp p); is_tangent (opp p) (opp p);\n        is_generic p (opp p); is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = Infinity\n 4. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 5. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "case InfL"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5'\n  x\\<^sub>1' \\<noteq> x\\<^sub>5'\n  l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  p_ = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5' = ell_field_class.add a p_ p_\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p_ = Point x\\<^sub>2 y\\<^sub>2\n  Infinity = Point x\\<^sub>4 y\\<^sub>4\n  Infinity = ell_field_class.add a p\\<^sub>1 p_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p_\n  on_curve a b p_\n  is_generic p\\<^sub>1 p_\n  is_tangent p_ p_\n  is_generic Infinity p_\n  is_generic p\\<^sub>1 p\\<^sub>5'\n\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a p p; y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2; Infinity = Point x\\<^sub>4 y\\<^sub>4;\n        Infinity = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b p;\n        is_generic p\\<^sub>1 p; is_tangent p p; is_generic Infinity p;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\n 2. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Infinity = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a Infinity Infinity;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Infinity = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 Infinity;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b Infinity;\n        on_curve a b Infinity; is_generic p\\<^sub>1 Infinity;\n        is_tangent Infinity Infinity; is_generic p Infinity;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        opp p = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a (opp p) (opp p);\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (opp p); on_curve a b (opp p);\n        is_generic p\\<^sub>1 (opp p); is_tangent (opp p) (opp p);\n        is_generic p (opp p); is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = Infinity\n 4. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 5. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5'\n  x\\<^sub>1' \\<noteq> x\\<^sub>5'\n  l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  p_ = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5' = ell_field_class.add a p_ p_\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p_ = Point x\\<^sub>2 y\\<^sub>2\n  Infinity = Point x\\<^sub>4 y\\<^sub>4\n  Infinity = ell_field_class.add a p\\<^sub>1 p_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p_\n  on_curve a b p_\n  is_generic p\\<^sub>1 p_\n  is_tangent p_ p_\n  is_generic Infinity p_\n  is_generic p\\<^sub>1 p\\<^sub>5'", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5'\n  x\\<^sub>1' \\<noteq> x\\<^sub>5'\n  l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  p_ = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5' = ell_field_class.add a p_ p_\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p_ = Point x\\<^sub>2 y\\<^sub>2\n  Infinity = Point x\\<^sub>4 y\\<^sub>4\n  Infinity = ell_field_class.add a p\\<^sub>1 p_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p_\n  on_curve a b p_\n  is_generic p\\<^sub>1 p_\n  is_tangent p_ p_\n  is_generic Infinity p_\n  is_generic p\\<^sub>1 p\\<^sub>5'\n\ngoal (1 subgoal):\n 1. p\\<^sub>6 = p_", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  p\\<^sub>6 = p_\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Infinity = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a Infinity Infinity;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Infinity = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 Infinity;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b Infinity;\n        on_curve a b Infinity; is_generic p\\<^sub>1 Infinity;\n        is_tangent Infinity Infinity; is_generic p Infinity;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        opp p = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a (opp p) (opp p);\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (opp p); on_curve a b (opp p);\n        is_generic p\\<^sub>1 (opp p); is_tangent (opp p) (opp p);\n        is_generic p (opp p); is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = Infinity\n 3. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 4. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Infinity = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a Infinity Infinity;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Infinity = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 Infinity;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b Infinity;\n        on_curve a b Infinity; is_generic p\\<^sub>1 Infinity;\n        is_tangent Infinity Infinity; is_generic p Infinity;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        opp p = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a (opp p) (opp p);\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (opp p); on_curve a b (opp p);\n        is_generic p\\<^sub>1 (opp p); is_tangent (opp p) (opp p);\n        is_generic p (opp p); is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = Infinity\n 3. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 4. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "case InfR"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5'\n  x\\<^sub>1' \\<noteq> x\\<^sub>5'\n  l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  Infinity = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5' = ell_field_class.add a Infinity Infinity\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  Infinity = Point x\\<^sub>2 y\\<^sub>2\n  p_ = Point x\\<^sub>4 y\\<^sub>4\n  p_ = ell_field_class.add a p\\<^sub>1 Infinity\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b Infinity\n  on_curve a b Infinity\n  is_generic p\\<^sub>1 Infinity\n  is_tangent Infinity Infinity\n  is_generic p_ Infinity\n  is_generic p\\<^sub>1 p\\<^sub>5'\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Infinity = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a Infinity Infinity;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Infinity = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 Infinity;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b Infinity;\n        on_curve a b Infinity; is_generic p\\<^sub>1 Infinity;\n        is_tangent Infinity Infinity; is_generic p Infinity;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        opp p = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a (opp p) (opp p);\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (opp p); on_curve a b (opp p);\n        is_generic p\\<^sub>1 (opp p); is_tangent (opp p) (opp p);\n        is_generic p (opp p); is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = Infinity\n 3. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 4. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5'\n  x\\<^sub>1' \\<noteq> x\\<^sub>5'\n  l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  Infinity = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5' = ell_field_class.add a Infinity Infinity\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  Infinity = Point x\\<^sub>2 y\\<^sub>2\n  p_ = Point x\\<^sub>4 y\\<^sub>4\n  p_ = ell_field_class.add a p\\<^sub>1 Infinity\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b Infinity\n  on_curve a b Infinity\n  is_generic p\\<^sub>1 Infinity\n  is_tangent Infinity Infinity\n  is_generic p_ Infinity\n  is_generic p\\<^sub>1 p\\<^sub>5'", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5'\n  x\\<^sub>1' \\<noteq> x\\<^sub>5'\n  l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  Infinity = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5' = ell_field_class.add a Infinity Infinity\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  Infinity = Point x\\<^sub>2 y\\<^sub>2\n  p_ = Point x\\<^sub>4 y\\<^sub>4\n  p_ = ell_field_class.add a p\\<^sub>1 Infinity\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b Infinity\n  on_curve a b Infinity\n  is_generic p\\<^sub>1 Infinity\n  is_tangent Infinity Infinity\n  is_generic p_ Infinity\n  is_generic p\\<^sub>1 p\\<^sub>5'\n\ngoal (1 subgoal):\n 1. p\\<^sub>6 = p_", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  p\\<^sub>6 = p_\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        opp p = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a (opp p) (opp p);\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (opp p); on_curve a b (opp p);\n        is_generic p\\<^sub>1 (opp p); is_tangent (opp p) (opp p);\n        is_generic p (opp p); is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = Infinity\n 2. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 3. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        opp p = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a (opp p) (opp p);\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (opp p); on_curve a b (opp p);\n        is_generic p\\<^sub>1 (opp p); is_tangent (opp p) (opp p);\n        is_generic p (opp p); is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = Infinity\n 2. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 3. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "case (Opp p)"], ["proof (state)\nthis:\n  on_curve a b p\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5'\n  x\\<^sub>1' \\<noteq> x\\<^sub>5'\n  l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  opp p = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5' = ell_field_class.add a (opp p) (opp p)\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  opp p = Point x\\<^sub>2 y\\<^sub>2\n  p = Point x\\<^sub>4 y\\<^sub>4\n  p = ell_field_class.add a p\\<^sub>1 (opp p)\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b (opp p)\n  on_curve a b (opp p)\n  is_generic p\\<^sub>1 (opp p)\n  is_tangent (opp p) (opp p)\n  is_generic p (opp p)\n  is_generic p\\<^sub>1 p\\<^sub>5'\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        opp p = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a (opp p) (opp p);\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (opp p); on_curve a b (opp p);\n        is_generic p\\<^sub>1 (opp p); is_tangent (opp p) (opp p);\n        is_generic p (opp p); is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = Infinity\n 2. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 3. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "from \\<open>is_generic p (opp p)\\<close>"], ["proof (chain)\npicking this:\n  is_generic p (opp p)", "show ?case"], ["proof (prove)\nusing this:\n  is_generic p (opp p)\n\ngoal (1 subgoal):\n 1. p\\<^sub>6 = Infinity", "by (simp add: is_generic_def opp_opp)"], ["proof (state)\nthis:\n  p\\<^sub>6 = Infinity\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 2. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 2. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "case Tan"], ["proof (state)\nthis:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5'\n  x\\<^sub>1' \\<noteq> x\\<^sub>5'\n  l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  p\\<^sub>1_ = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5' = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>1_ = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>1_ = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>1_ = ell_field_class.add a p\\<^sub>1 p\\<^sub>1_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>1_\n  is_generic p\\<^sub>1 p\\<^sub>1_\n  is_tangent p\\<^sub>1_ p\\<^sub>1_\n  is_generic p\\<^sub>1_ p\\<^sub>1_\n  is_generic p\\<^sub>1 p\\<^sub>5'\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 2. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5'\n  x\\<^sub>1' \\<noteq> x\\<^sub>5'\n  l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  p\\<^sub>1_ = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5' = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>1_ = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>1_ = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>1_ = ell_field_class.add a p\\<^sub>1 p\\<^sub>1_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>1_\n  is_generic p\\<^sub>1 p\\<^sub>1_\n  is_tangent p\\<^sub>1_ p\\<^sub>1_\n  is_generic p\\<^sub>1_ p\\<^sub>1_\n  is_generic p\\<^sub>1 p\\<^sub>5'", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5'\n  x\\<^sub>1' \\<noteq> x\\<^sub>5'\n  l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  p\\<^sub>1_ = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5' = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>1_ = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>1_ = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>1_ = ell_field_class.add a p\\<^sub>1 p\\<^sub>1_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>1_\n  is_generic p\\<^sub>1 p\\<^sub>1_\n  is_tangent p\\<^sub>1_ p\\<^sub>1_\n  is_generic p\\<^sub>1_ p\\<^sub>1_\n  is_generic p\\<^sub>1 p\\<^sub>5'\n\ngoal (1 subgoal):\n 1. p\\<^sub>6 = p\\<^sub>2_", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  p\\<^sub>6 = p\\<^sub>2_\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "case (Gen p\\<^sub>4' x\\<^sub>4' y\\<^sub>4' p\\<^sub>3' x\\<^sub>3' y\\<^sub>3' p\\<^sub>7 x\\<^sub>7 y\\<^sub>7 l\\<^sub>3)"], ["proof (state)\nthis:\n  p\\<^sub>4' = Point x\\<^sub>4' y\\<^sub>4'\n  p\\<^sub>3' = Point x\\<^sub>3' y\\<^sub>3'\n  p\\<^sub>7 = Point x\\<^sub>7 y\\<^sub>7\n  p\\<^sub>7 = ell_field_class.add a p\\<^sub>4' p\\<^sub>3'\n  x\\<^sub>4' \\<noteq> x\\<^sub>3'\n  l\\<^sub>3 = (y\\<^sub>3' - y\\<^sub>4') / (x\\<^sub>3' - x\\<^sub>4')\n  x\\<^sub>7 = l\\<^sub>3\\<^sup>2 - x\\<^sub>4' - x\\<^sub>3'\n  y\\<^sub>7 = - y\\<^sub>4' - l\\<^sub>3 * (x\\<^sub>7 - x\\<^sub>4')\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5'\n  x\\<^sub>1' \\<noteq> x\\<^sub>5'\n  l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  p\\<^sub>3' = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5' = ell_field_class.add a p\\<^sub>3' p\\<^sub>3'\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>3' = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4' = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4' = ell_field_class.add a p\\<^sub>1 p\\<^sub>3'\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>3'\n  on_curve a b p\\<^sub>3'\n  is_generic p\\<^sub>1 p\\<^sub>3'\n  is_tangent p\\<^sub>3' p\\<^sub>3'\n  is_generic p\\<^sub>4' p\\<^sub>3'\n  is_generic p\\<^sub>1 p\\<^sub>5'\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "from\n          \\<open>on_curve a b p\\<^sub>1\\<close> \\<open>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\\<close>\n          \\<open>on_curve a b p\\<^sub>2\\<close> \\<open>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>1\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2", "have\n          y1: \"y\\<^sub>1 ^ 2 = x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b\" and\n          y2: \"y\\<^sub>2 ^ 2 = x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n\ngoal (1 subgoal):\n 1. y\\<^sub>1\\<^sup>2 = x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b &&&\n    y\\<^sub>2\\<^sup>2 = x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b", "by (simp_all add: on_curve_def)"], ["proof (state)\nthis:\n  y\\<^sub>1\\<^sup>2 = x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b\n  y\\<^sub>2\\<^sup>2 = x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "from\n          \\<open>p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5'\\<close>\n          \\<open>p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5\\<close>\n          \\<open>p\\<^sub>4' = Point x\\<^sub>4' y\\<^sub>4'\\<close>\n          \\<open>p\\<^sub>4' = Point x\\<^sub>4 y\\<^sub>4\\<close>\n          \\<open>p\\<^sub>3' = Point x\\<^sub>2' y\\<^sub>2'\\<close>\n          \\<open>p\\<^sub>3' = Point x\\<^sub>2 y\\<^sub>2\\<close>\n          \\<open>p\\<^sub>3' = Point x\\<^sub>3' y\\<^sub>3'\\<close>\n          \\<open>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\\<close>\n          \\<open>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5'\n  p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>4' = Point x\\<^sub>4' y\\<^sub>4'\n  p\\<^sub>4' = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>3' = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>3' = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>3' = Point x\\<^sub>3' y\\<^sub>3'\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1", "have ps:\n          \"x\\<^sub>5' = x\\<^sub>5\" \"y\\<^sub>5' = y\\<^sub>5\"\n          \"x\\<^sub>4' = x\\<^sub>4\" \"y\\<^sub>4' = y\\<^sub>4\" \"x\\<^sub>3' = x\\<^sub>2\" \"y\\<^sub>3' = y\\<^sub>2\" \"x\\<^sub>2' = x\\<^sub>2\" \"y\\<^sub>2' = y\\<^sub>2\"\n          \"x\\<^sub>1' = x\\<^sub>1\" \"y\\<^sub>1' = y\\<^sub>1\""], ["proof (prove)\nusing this:\n  p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5'\n  p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>4' = Point x\\<^sub>4' y\\<^sub>4'\n  p\\<^sub>4' = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>3' = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>3' = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>3' = Point x\\<^sub>3' y\\<^sub>3'\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n\ngoal (1 subgoal):\n 1. ((x\\<^sub>5' = x\\<^sub>5 &&& y\\<^sub>5' = y\\<^sub>5) &&&\n     x\\<^sub>4' = x\\<^sub>4 &&&\n     y\\<^sub>4' = y\\<^sub>4 &&& x\\<^sub>3' = x\\<^sub>2) &&&\n    (y\\<^sub>3' = y\\<^sub>2 &&& x\\<^sub>2' = x\\<^sub>2) &&&\n    y\\<^sub>2' = y\\<^sub>2 &&&\n    x\\<^sub>1' = x\\<^sub>1 &&& y\\<^sub>1' = y\\<^sub>1", "by simp_all"], ["proof (state)\nthis:\n  x\\<^sub>5' = x\\<^sub>5\n  y\\<^sub>5' = y\\<^sub>5\n  x\\<^sub>4' = x\\<^sub>4\n  y\\<^sub>4' = y\\<^sub>4\n  x\\<^sub>3' = x\\<^sub>2\n  y\\<^sub>3' = y\\<^sub>2\n  x\\<^sub>2' = x\\<^sub>2\n  y\\<^sub>2' = y\\<^sub>2\n  x\\<^sub>1' = x\\<^sub>1\n  y\\<^sub>1' = y\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>5' = Point x\\<^sub>5' y\\<^sub>5';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>5';\n        x\\<^sub>1' \\<noteq> x\\<^sub>5';\n        l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - x\\<^sub>1' - x\\<^sub>5';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>5' = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>5' = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>5'\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. p\\<^sub>6 = p\\<^sub>7", "apply (simp add: \\<open>p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\\<close> \\<open>p\\<^sub>7 = Point x\\<^sub>7 y\\<^sub>7\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^sub>6 = x\\<^sub>7 \\<and> y\\<^sub>6 = y\\<^sub>7", "apply (simp only: ps\n            \\<open>x\\<^sub>7 = l\\<^sub>3 ^ 2 - x\\<^sub>4' - x\\<^sub>3'\\<close>\n            \\<open>y\\<^sub>7 = - y\\<^sub>4' - l\\<^sub>3 * (x\\<^sub>7 - x\\<^sub>4')\\<close>\n            \\<open>l\\<^sub>3 = (y\\<^sub>3' - y\\<^sub>4') / (x\\<^sub>3' - x\\<^sub>4')\\<close>\n            \\<open>x\\<^sub>6 = l\\<^sub>2 ^ 2 - x\\<^sub>1' - x\\<^sub>5'\\<close>\n            \\<open>y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\\<close>\n            \\<open>l\\<^sub>2 = (y\\<^sub>5' - y\\<^sub>1') / (x\\<^sub>5' - x\\<^sub>1')\\<close>\n            \\<open>x\\<^sub>5 = l\\<^sub>1 ^ 2 - 2 * x\\<^sub>2'\\<close>\n            \\<open>y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\\<close>\n            \\<open>l\\<^sub>1 = (3 * x\\<^sub>2' ^ 2 + a) / (2 * y\\<^sub>2')\\<close>\n            \\<open>x\\<^sub>4 = l ^ 2 - x\\<^sub>1 - x\\<^sub>2\\<close>\n            \\<open>y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\\<close>\n            \\<open>l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2) -\n      y\\<^sub>1) /\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 -\n      x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 -\n    ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n     (2::'a) * x\\<^sub>2) =\n    ((y\\<^sub>2 -\n      (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1))) /\n     (x\\<^sub>2 -\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2)))\\<^sup>2 -\n    (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     x\\<^sub>2) -\n    x\\<^sub>2 \\<and>\n    - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>2 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2) -\n      y\\<^sub>1) /\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 -\n      x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 -\n    ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n     (2::'a) * x\\<^sub>2) =\n    ((y\\<^sub>2 -\n      (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1))) /\n     (x\\<^sub>2 -\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2)))\\<^sup>2 -\n    (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     x\\<^sub>2) -\n    x\\<^sub>2\n 2. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>2 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (field y1 y2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a) \\<and>\n    ((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n    (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    x\\<^sub>1 * ((4::'a) * y\\<^sub>2\\<^sup>2) \\<noteq>\n    (0::'a) \\<and>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a) \\<and>\n    x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 2. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>2 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (intro conjI)"], ["proof (prove)\ngoal (5 subgoals):\n 1. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 2. ((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n    (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    x\\<^sub>1 * ((4::'a) * y\\<^sub>2\\<^sup>2) \\<noteq>\n    (0::'a)\n 3. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)\n 4. x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 5. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>2 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (simp add: \\<open>y\\<^sub>2' \\<noteq> 0\\<close> [simplified \\<open>y\\<^sub>2' = y\\<^sub>2\\<close>])"], ["proof (prove)\ngoal (4 subgoals):\n 1. ((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n    (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    x\\<^sub>1 * ((4::'a) * y\\<^sub>2\\<^sup>2) \\<noteq>\n    (0::'a)\n 2. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)\n 3. x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 4. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>2 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (rule notI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. ((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n    (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    x\\<^sub>1 * ((4::'a) * y\\<^sub>2\\<^sup>2) =\n    (0::'a) \\<Longrightarrow>\n    False\n 2. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)\n 3. x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 4. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>2 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (ring (prems) y1 y2)"], ["proof (prove)\ngoal (4 subgoals):\n 1. ((- (4::'a) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n     (- (4::'a) * b ^ 1 + (- (4::'a) * x\\<^sub>2 ^ 3 + (0::'a)))) *\n    x\\<^sub>1 ^ 1 +\n    (((1::'a) * a ^ 1 + (- (2::'a) * x\\<^sub>2\\<^sup>2 + (0::'a))) * a ^ 1 +\n     ((- (8::'a) * x\\<^sub>2 ^ 1 + (0::'a)) * b ^ 1 +\n      ((1::'a) * x\\<^sub>2 ^ 4 + (0::'a)))) =\n    (0::'a) \\<Longrightarrow>\n    False\n 2. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)\n 3. x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 4. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>2 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (rule notE [OF \\<open>x\\<^sub>1' \\<noteq> x\\<^sub>5'\\<close> [simplified\n            \\<open>x\\<^sub>5 = l\\<^sub>1 ^ 2 - 2 * x\\<^sub>2'\\<close>\n            \\<open>l\\<^sub>1 = (3 * x\\<^sub>2' ^ 2 + a) / (2 * y\\<^sub>2')\\<close>\n            \\<open>x\\<^sub>1' = x\\<^sub>1\\<close> \\<open>x\\<^sub>2' = x\\<^sub>2\\<close> \\<open>y\\<^sub>2' = y\\<^sub>2\\<close> \\<open>x\\<^sub>5' = x\\<^sub>5\\<close>]])"], ["proof (prove)\ngoal (4 subgoals):\n 1. ((- (4::'a) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n     (- (4::'a) * b ^ 1 + (- (4::'a) * x\\<^sub>2 ^ 3 + (0::'a)))) *\n    x\\<^sub>1 ^ 1 +\n    (((1::'a) * a ^ 1 + (- (2::'a) * x\\<^sub>2\\<^sup>2 + (0::'a))) * a ^ 1 +\n     ((- (8::'a) * x\\<^sub>2 ^ 1 + (0::'a)) * b ^ 1 +\n      ((1::'a) * x\\<^sub>2 ^ 4 + (0::'a)))) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>1 =\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n    (2::'a) * x\\<^sub>2\n 2. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)\n 3. x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 4. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>2 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (rule sym)"], ["proof (prove)\ngoal (4 subgoals):\n 1. ((- (4::'a) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n     (- (4::'a) * b ^ 1 + (- (4::'a) * x\\<^sub>2 ^ 3 + (0::'a)))) *\n    x\\<^sub>1 ^ 1 +\n    (((1::'a) * a ^ 1 + (- (2::'a) * x\\<^sub>2\\<^sup>2 + (0::'a))) * a ^ 1 +\n     ((- (8::'a) * x\\<^sub>2 ^ 1 + (0::'a)) * b ^ 1 +\n      ((1::'a) * x\\<^sub>2 ^ 4 + (0::'a)))) =\n    (0::'a) \\<Longrightarrow>\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n    (2::'a) * x\\<^sub>2 =\n    x\\<^sub>1\n 2. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)\n 3. x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 4. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>2 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (field y1 y2)"], ["proof (prove)\ngoal (4 subgoals):\n 1. ((- (4::'a) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n     (- (4::'a) * b ^ 1 + (- (4::'a) * x\\<^sub>2 ^ 3 + (0::'a)))) *\n    x\\<^sub>1 ^ 1 +\n    (((1::'a) * a ^ 1 + (- (2::'a) * x\\<^sub>2\\<^sup>2 + (0::'a))) * a ^ 1 +\n     ((- (8::'a) * x\\<^sub>2 ^ 1 + (0::'a)) * b ^ 1 +\n      ((1::'a) * x\\<^sub>2 ^ 4 + (0::'a)))) =\n    (0::'a) \\<Longrightarrow>\n    (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 2. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)\n 3. x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 4. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>2 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (simp add: \\<open>y\\<^sub>2' \\<noteq> 0\\<close> [simplified \\<open>y\\<^sub>2' = y\\<^sub>2\\<close>])"], ["proof (prove)\ngoal (3 subgoals):\n 1. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)\n 2. x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 3. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>2 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (simp add: \\<open>x\\<^sub>1 \\<noteq> x\\<^sub>2\\<close> [symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 2. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>2 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (rule notI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) =\n    (0::'a) \\<Longrightarrow>\n    False\n 2. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>2 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (ring (prems) y1 y2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((2::'a) * y\\<^sub>2 ^ 1 + (0::'a)) * y\\<^sub>1 ^ 1 +\n    ((of_int (- 1) * a ^ 1 + (- (3::'a) * x\\<^sub>2\\<^sup>2 + (0::'a))) *\n     x\\<^sub>1 ^ 1 +\n     ((of_int (- 1) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n      (- (2::'a) * b ^ 1 + ((1::'a) * x\\<^sub>2 ^ 3 + (0::'a))))) =\n    (0::'a) \\<Longrightarrow>\n    False\n 2. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>2 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (rule notE [OF \\<open>x\\<^sub>4' \\<noteq> x\\<^sub>3'\\<close> [simplified\n            \\<open>x\\<^sub>4 = l ^ 2 - x\\<^sub>1 - x\\<^sub>2\\<close>\n            \\<open>l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\\<close>\n            \\<open>x\\<^sub>4' = x\\<^sub>4\\<close> \\<open>x\\<^sub>3' = x\\<^sub>2\\<close>]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((2::'a) * y\\<^sub>2 ^ 1 + (0::'a)) * y\\<^sub>1 ^ 1 +\n    ((of_int (- 1) * a ^ 1 + (- (3::'a) * x\\<^sub>2\\<^sup>2 + (0::'a))) *\n     x\\<^sub>1 ^ 1 +\n     ((of_int (- 1) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n      (- (2::'a) * b ^ 1 + ((1::'a) * x\\<^sub>2 ^ 3 + (0::'a))))) =\n    (0::'a) \\<Longrightarrow>\n    ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 -\n    x\\<^sub>2 =\n    x\\<^sub>2\n 2. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>2 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (rule sym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((2::'a) * y\\<^sub>2 ^ 1 + (0::'a)) * y\\<^sub>1 ^ 1 +\n    ((of_int (- 1) * a ^ 1 + (- (3::'a) * x\\<^sub>2\\<^sup>2 + (0::'a))) *\n     x\\<^sub>1 ^ 1 +\n     ((of_int (- 1) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n      (- (2::'a) * b ^ 1 + ((1::'a) * x\\<^sub>2 ^ 3 + (0::'a))))) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>2 =\n    ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 -\n    x\\<^sub>2\n 2. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>2 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (field y1 y2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((2::'a) * y\\<^sub>2 ^ 1 + (0::'a)) * y\\<^sub>1 ^ 1 +\n    ((of_int (- 1) * a ^ 1 + (- (3::'a) * x\\<^sub>2\\<^sup>2 + (0::'a))) *\n     x\\<^sub>1 ^ 1 +\n     ((of_int (- 1) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n      (- (2::'a) * b ^ 1 + ((1::'a) * x\\<^sub>2 ^ 3 + (0::'a))))) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)\n 2. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>2 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (simp add: \\<open>x\\<^sub>1 \\<noteq> x\\<^sub>2\\<close> [symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. - y\\<^sub>1 -\n    (- y\\<^sub>2 -\n     ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 -\n      x\\<^sub>2) -\n     y\\<^sub>1) /\n    ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 -\n     x\\<^sub>1) *\n    (((- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2) -\n       y\\<^sub>1) /\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>1 -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     x\\<^sub>1) =\n    - (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2 -\n        x\\<^sub>1)) -\n    (y\\<^sub>2 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>1 -\n       x\\<^sub>2 -\n       x\\<^sub>1))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>1 -\n         x\\<^sub>2 -\n         x\\<^sub>1))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>1 -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n      x\\<^sub>1 -\n      x\\<^sub>2))", "apply (field y1 y2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n    (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    x\\<^sub>1 * ((4::'a) * y\\<^sub>2\\<^sup>2) \\<noteq>\n    (0::'a) \\<and>\n    (2::'a) * y\\<^sub>2 \\<noteq> (0::'a) \\<and>\n    x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a) \\<and>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (intro conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. ((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n    (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    x\\<^sub>1 * ((4::'a) * y\\<^sub>2\\<^sup>2) \\<noteq>\n    (0::'a)\n 2. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 3. x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 4. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (rule notI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. ((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n    (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    x\\<^sub>1 * ((4::'a) * y\\<^sub>2\\<^sup>2) =\n    (0::'a) \\<Longrightarrow>\n    False\n 2. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 3. x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 4. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (ring (prems) y1 y2)"], ["proof (prove)\ngoal (4 subgoals):\n 1. ((- (4::'a) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n     (- (4::'a) * b ^ 1 + (- (4::'a) * x\\<^sub>2 ^ 3 + (0::'a)))) *\n    x\\<^sub>1 ^ 1 +\n    (((1::'a) * a ^ 1 + (- (2::'a) * x\\<^sub>2\\<^sup>2 + (0::'a))) * a ^ 1 +\n     ((- (8::'a) * x\\<^sub>2 ^ 1 + (0::'a)) * b ^ 1 +\n      ((1::'a) * x\\<^sub>2 ^ 4 + (0::'a)))) =\n    (0::'a) \\<Longrightarrow>\n    False\n 2. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 3. x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 4. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (rule notE [OF \\<open>x\\<^sub>1' \\<noteq> x\\<^sub>5'\\<close> [simplified\n            \\<open>x\\<^sub>5 = l\\<^sub>1 ^ 2 - 2 * x\\<^sub>2'\\<close>\n            \\<open>l\\<^sub>1 = (3 * x\\<^sub>2' ^ 2 + a) / (2 * y\\<^sub>2')\\<close>\n            \\<open>x\\<^sub>1' = x\\<^sub>1\\<close> \\<open>x\\<^sub>2' = x\\<^sub>2\\<close> \\<open>y\\<^sub>2' = y\\<^sub>2\\<close> \\<open>x\\<^sub>5' = x\\<^sub>5\\<close>]])"], ["proof (prove)\ngoal (4 subgoals):\n 1. ((- (4::'a) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n     (- (4::'a) * b ^ 1 + (- (4::'a) * x\\<^sub>2 ^ 3 + (0::'a)))) *\n    x\\<^sub>1 ^ 1 +\n    (((1::'a) * a ^ 1 + (- (2::'a) * x\\<^sub>2\\<^sup>2 + (0::'a))) * a ^ 1 +\n     ((- (8::'a) * x\\<^sub>2 ^ 1 + (0::'a)) * b ^ 1 +\n      ((1::'a) * x\\<^sub>2 ^ 4 + (0::'a)))) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>1 =\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n    (2::'a) * x\\<^sub>2\n 2. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 3. x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 4. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (rule sym)"], ["proof (prove)\ngoal (4 subgoals):\n 1. ((- (4::'a) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n     (- (4::'a) * b ^ 1 + (- (4::'a) * x\\<^sub>2 ^ 3 + (0::'a)))) *\n    x\\<^sub>1 ^ 1 +\n    (((1::'a) * a ^ 1 + (- (2::'a) * x\\<^sub>2\\<^sup>2 + (0::'a))) * a ^ 1 +\n     ((- (8::'a) * x\\<^sub>2 ^ 1 + (0::'a)) * b ^ 1 +\n      ((1::'a) * x\\<^sub>2 ^ 4 + (0::'a)))) =\n    (0::'a) \\<Longrightarrow>\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n    (2::'a) * x\\<^sub>2 =\n    x\\<^sub>1\n 2. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 3. x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 4. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (field y1 y2)"], ["proof (prove)\ngoal (4 subgoals):\n 1. ((- (4::'a) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n     (- (4::'a) * b ^ 1 + (- (4::'a) * x\\<^sub>2 ^ 3 + (0::'a)))) *\n    x\\<^sub>1 ^ 1 +\n    (((1::'a) * a ^ 1 + (- (2::'a) * x\\<^sub>2\\<^sup>2 + (0::'a))) * a ^ 1 +\n     ((- (8::'a) * x\\<^sub>2 ^ 1 + (0::'a)) * b ^ 1 +\n      ((1::'a) * x\\<^sub>2 ^ 4 + (0::'a)))) =\n    (0::'a) \\<Longrightarrow>\n    (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 2. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 3. x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 4. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (simp add: \\<open>y\\<^sub>2' \\<noteq> 0\\<close> [simplified \\<open>y\\<^sub>2' = y\\<^sub>2\\<close>])"], ["proof (prove)\ngoal (3 subgoals):\n 1. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 2. x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 3. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (simp add: \\<open>y\\<^sub>2' \\<noteq> 0\\<close> [simplified \\<open>y\\<^sub>2' = y\\<^sub>2\\<close>])"], ["proof (prove)\ngoal (2 subgoals):\n 1. x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 2. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (rule notI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n    ((y\\<^sub>2 - y\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2) =\n    (0::'a) \\<Longrightarrow>\n    False\n 2. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (ring (prems) y1 y2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((2::'a) * y\\<^sub>2 ^ 1 + (0::'a)) * y\\<^sub>1 ^ 1 +\n    ((of_int (- 1) * a ^ 1 + (- (3::'a) * x\\<^sub>2\\<^sup>2 + (0::'a))) *\n     x\\<^sub>1 ^ 1 +\n     ((of_int (- 1) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n      (- (2::'a) * b ^ 1 + ((1::'a) * x\\<^sub>2 ^ 3 + (0::'a))))) =\n    (0::'a) \\<Longrightarrow>\n    False\n 2. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (rule notE [OF \\<open>x\\<^sub>4' \\<noteq> x\\<^sub>3'\\<close> [simplified\n            \\<open>x\\<^sub>4 = l ^ 2 - x\\<^sub>1 - x\\<^sub>2\\<close>\n            \\<open>l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\\<close>\n            \\<open>x\\<^sub>4' = x\\<^sub>4\\<close> \\<open>x\\<^sub>3' = x\\<^sub>2\\<close>]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((2::'a) * y\\<^sub>2 ^ 1 + (0::'a)) * y\\<^sub>1 ^ 1 +\n    ((of_int (- 1) * a ^ 1 + (- (3::'a) * x\\<^sub>2\\<^sup>2 + (0::'a))) *\n     x\\<^sub>1 ^ 1 +\n     ((of_int (- 1) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n      (- (2::'a) * b ^ 1 + ((1::'a) * x\\<^sub>2 ^ 3 + (0::'a))))) =\n    (0::'a) \\<Longrightarrow>\n    ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 -\n    x\\<^sub>2 =\n    x\\<^sub>2\n 2. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (rule sym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((2::'a) * y\\<^sub>2 ^ 1 + (0::'a)) * y\\<^sub>1 ^ 1 +\n    ((of_int (- 1) * a ^ 1 + (- (3::'a) * x\\<^sub>2\\<^sup>2 + (0::'a))) *\n     x\\<^sub>1 ^ 1 +\n     ((of_int (- 1) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n      (- (2::'a) * b ^ 1 + ((1::'a) * x\\<^sub>2 ^ 3 + (0::'a))))) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>2 =\n    ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 -\n    x\\<^sub>2\n 2. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (field y1 y2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((2::'a) * y\\<^sub>2 ^ 1 + (0::'a)) * y\\<^sub>1 ^ 1 +\n    ((of_int (- 1) * a ^ 1 + (- (3::'a) * x\\<^sub>2\\<^sup>2 + (0::'a))) *\n     x\\<^sub>1 ^ 1 +\n     ((of_int (- 1) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n      (- (2::'a) * b ^ 1 + ((1::'a) * x\\<^sub>2 ^ 3 + (0::'a))))) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)\n 2. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (simp_all add: \\<open>x\\<^sub>1 \\<noteq> x\\<^sub>2\\<close> [symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  p\\<^sub>6 = p\\<^sub>7\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>5 =\n  ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "case (Gen p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 p\\<^sub>5 x\\<^sub>5 y\\<^sub>5 p\\<^sub>6 x\\<^sub>6 y\\<^sub>6 l\\<^sub>1)"], ["proof (state)\nthis:\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>5 = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>3 p\\<^sub>5\n  x\\<^sub>3 \\<noteq> x\\<^sub>5\n  l\\<^sub>1 = (y\\<^sub>5 - y\\<^sub>3) / (x\\<^sub>5 - x\\<^sub>3)\n  x\\<^sub>6 = l\\<^sub>1\\<^sup>2 - x\\<^sub>3 - x\\<^sub>5\n  y\\<^sub>6 = - y\\<^sub>3 - l\\<^sub>1 * (x\\<^sub>6 - x\\<^sub>3)\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>3 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>3\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>3\n  on_curve a b p\\<^sub>5\n  is_generic p\\<^sub>1 p\\<^sub>3\n  is_tangent p\\<^sub>3 p\\<^sub>5\n  is_generic p\\<^sub>4 p\\<^sub>5\n  is_generic p\\<^sub>1 p\\<^sub>6\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_generic p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>5 = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>3 p\\<^sub>5\n  x\\<^sub>3 \\<noteq> x\\<^sub>5\n  l\\<^sub>1 = (y\\<^sub>5 - y\\<^sub>3) / (x\\<^sub>5 - x\\<^sub>3)\n  x\\<^sub>6 = l\\<^sub>1\\<^sup>2 - x\\<^sub>3 - x\\<^sub>5\n  y\\<^sub>6 = - y\\<^sub>3 - l\\<^sub>1 * (x\\<^sub>6 - x\\<^sub>3)\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>3 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>3\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>3\n  on_curve a b p\\<^sub>5\n  is_generic p\\<^sub>1 p\\<^sub>3\n  is_tangent p\\<^sub>3 p\\<^sub>5\n  is_generic p\\<^sub>4 p\\<^sub>5\n  is_generic p\\<^sub>1 p\\<^sub>6", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>5 = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>3 p\\<^sub>5\n  x\\<^sub>3 \\<noteq> x\\<^sub>5\n  l\\<^sub>1 = (y\\<^sub>5 - y\\<^sub>3) / (x\\<^sub>5 - x\\<^sub>3)\n  x\\<^sub>6 = l\\<^sub>1\\<^sup>2 - x\\<^sub>3 - x\\<^sub>5\n  y\\<^sub>6 = - y\\<^sub>3 - l\\<^sub>1 * (x\\<^sub>6 - x\\<^sub>3)\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>3 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>3\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>3\n  on_curve a b p\\<^sub>5\n  is_generic p\\<^sub>1 p\\<^sub>3\n  is_tangent p\\<^sub>3 p\\<^sub>5\n  is_generic p\\<^sub>4 p\\<^sub>5\n  is_generic p\\<^sub>1 p\\<^sub>6\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>6 =\n    ell_field_class.add a p\\<^sub>4 p\\<^sub>5", "by (simp add: is_tangent_def)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>6 =\n  ell_field_class.add a p\\<^sub>4 p\\<^sub>5\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma spec3_assoc:\n  assumes p\\<^sub>1: \"on_curve a b p\\<^sub>1\"\n  and p\\<^sub>2: \"on_curve a b p\\<^sub>2\"\n  and p\\<^sub>3: \"on_curve a b p\\<^sub>3\"\n  and \"is_generic p\\<^sub>1 p\\<^sub>2\"\n  and \"is_tangent p\\<^sub>2 p\\<^sub>3\"\n  and \"is_generic (add a p\\<^sub>1 p\\<^sub>2) p\\<^sub>3\"\n  and \"is_tangent p\\<^sub>1 (add a p\\<^sub>2 p\\<^sub>3)\"\n  shows \"add a p\\<^sub>1 (add a p\\<^sub>2 p\\<^sub>3) = add a (add a p\\<^sub>1 p\\<^sub>2) p\\<^sub>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "using p\\<^sub>1 p\\<^sub>2 assms"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n  is_generic p\\<^sub>1 p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>3\n  is_generic (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) p\\<^sub>3\n  is_tangent p\\<^sub>1 (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "proof (induct rule: add_case)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b Infinity; on_curve a b p;\n        on_curve a b p\\<^sub>3; is_generic Infinity p;\n        is_tangent p p\\<^sub>3; is_generic p p\\<^sub>3;\n        is_tangent Infinity (ell_field_class.add a p p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a Infinity\n                          (ell_field_class.add a p p\\<^sub>3) =\n                         ell_field_class.add a p p\\<^sub>3\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        on_curve a b p\\<^sub>3; is_generic p Infinity;\n        is_tangent Infinity p\\<^sub>3; is_generic p p\\<^sub>3;\n        is_tangent p (ell_field_class.add a Infinity p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a Infinity p\\<^sub>3) =\n                         ell_field_class.add a p p\\<^sub>3\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        on_curve a b p\\<^sub>3; is_generic p (opp p);\n        is_tangent (opp p) p\\<^sub>3; is_generic Infinity p\\<^sub>3;\n        is_tangent p (ell_field_class.add a (opp p) p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a (opp p) p\\<^sub>3) =\n                         ell_field_class.add a Infinity p\\<^sub>3\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_tangent p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 5. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_tangent p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "case InfL"], ["proof (state)\nthis:\n  on_curve a b Infinity\n  on_curve a b p_\n  on_curve a b p\\<^sub>3\n  is_generic Infinity p_\n  is_tangent p_ p\\<^sub>3\n  is_generic p_ p\\<^sub>3\n  is_tangent Infinity (ell_field_class.add a p_ p\\<^sub>3)\n\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b Infinity; on_curve a b p;\n        on_curve a b p\\<^sub>3; is_generic Infinity p;\n        is_tangent p p\\<^sub>3; is_generic p p\\<^sub>3;\n        is_tangent Infinity (ell_field_class.add a p p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a Infinity\n                          (ell_field_class.add a p p\\<^sub>3) =\n                         ell_field_class.add a p p\\<^sub>3\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        on_curve a b p\\<^sub>3; is_generic p Infinity;\n        is_tangent Infinity p\\<^sub>3; is_generic p p\\<^sub>3;\n        is_tangent p (ell_field_class.add a Infinity p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a Infinity p\\<^sub>3) =\n                         ell_field_class.add a p p\\<^sub>3\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        on_curve a b p\\<^sub>3; is_generic p (opp p);\n        is_tangent (opp p) p\\<^sub>3; is_generic Infinity p\\<^sub>3;\n        is_tangent p (ell_field_class.add a (opp p) p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a (opp p) p\\<^sub>3) =\n                         ell_field_class.add a Infinity p\\<^sub>3\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_tangent p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 5. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_tangent p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  on_curve a b Infinity\n  on_curve a b p_\n  on_curve a b p\\<^sub>3\n  is_generic Infinity p_\n  is_tangent p_ p\\<^sub>3\n  is_generic p_ p\\<^sub>3\n  is_tangent Infinity (ell_field_class.add a p_ p\\<^sub>3)", "show ?case"], ["proof (prove)\nusing this:\n  on_curve a b Infinity\n  on_curve a b p_\n  on_curve a b p\\<^sub>3\n  is_generic Infinity p_\n  is_tangent p_ p\\<^sub>3\n  is_generic p_ p\\<^sub>3\n  is_tangent Infinity (ell_field_class.add a p_ p\\<^sub>3)\n\ngoal (1 subgoal):\n 1. ell_field_class.add a Infinity (ell_field_class.add a p_ p\\<^sub>3) =\n    ell_field_class.add a p_ p\\<^sub>3", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  ell_field_class.add a Infinity (ell_field_class.add a p_ p\\<^sub>3) =\n  ell_field_class.add a p_ p\\<^sub>3\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        on_curve a b p\\<^sub>3; is_generic p Infinity;\n        is_tangent Infinity p\\<^sub>3; is_generic p p\\<^sub>3;\n        is_tangent p (ell_field_class.add a Infinity p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a Infinity p\\<^sub>3) =\n                         ell_field_class.add a p p\\<^sub>3\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        on_curve a b p\\<^sub>3; is_generic p (opp p);\n        is_tangent (opp p) p\\<^sub>3; is_generic Infinity p\\<^sub>3;\n        is_tangent p (ell_field_class.add a (opp p) p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a (opp p) p\\<^sub>3) =\n                         ell_field_class.add a Infinity p\\<^sub>3\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_tangent p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_tangent p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        on_curve a b p\\<^sub>3; is_generic p Infinity;\n        is_tangent Infinity p\\<^sub>3; is_generic p p\\<^sub>3;\n        is_tangent p (ell_field_class.add a Infinity p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a Infinity p\\<^sub>3) =\n                         ell_field_class.add a p p\\<^sub>3\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        on_curve a b p\\<^sub>3; is_generic p (opp p);\n        is_tangent (opp p) p\\<^sub>3; is_generic Infinity p\\<^sub>3;\n        is_tangent p (ell_field_class.add a (opp p) p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a (opp p) p\\<^sub>3) =\n                         ell_field_class.add a Infinity p\\<^sub>3\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_tangent p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_tangent p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "case InfR"], ["proof (state)\nthis:\n  on_curve a b p_\n  on_curve a b Infinity\n  on_curve a b p\\<^sub>3\n  is_generic p_ Infinity\n  is_tangent Infinity p\\<^sub>3\n  is_generic p_ p\\<^sub>3\n  is_tangent p_ (ell_field_class.add a Infinity p\\<^sub>3)\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        on_curve a b p\\<^sub>3; is_generic p Infinity;\n        is_tangent Infinity p\\<^sub>3; is_generic p p\\<^sub>3;\n        is_tangent p (ell_field_class.add a Infinity p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a Infinity p\\<^sub>3) =\n                         ell_field_class.add a p p\\<^sub>3\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        on_curve a b p\\<^sub>3; is_generic p (opp p);\n        is_tangent (opp p) p\\<^sub>3; is_generic Infinity p\\<^sub>3;\n        is_tangent p (ell_field_class.add a (opp p) p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a (opp p) p\\<^sub>3) =\n                         ell_field_class.add a Infinity p\\<^sub>3\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_tangent p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_tangent p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  on_curve a b p_\n  on_curve a b Infinity\n  on_curve a b p\\<^sub>3\n  is_generic p_ Infinity\n  is_tangent Infinity p\\<^sub>3\n  is_generic p_ p\\<^sub>3\n  is_tangent p_ (ell_field_class.add a Infinity p\\<^sub>3)", "show ?case"], ["proof (prove)\nusing this:\n  on_curve a b p_\n  on_curve a b Infinity\n  on_curve a b p\\<^sub>3\n  is_generic p_ Infinity\n  is_tangent Infinity p\\<^sub>3\n  is_generic p_ p\\<^sub>3\n  is_tangent p_ (ell_field_class.add a Infinity p\\<^sub>3)\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p_ (ell_field_class.add a Infinity p\\<^sub>3) =\n    ell_field_class.add a p_ p\\<^sub>3", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  ell_field_class.add a p_ (ell_field_class.add a Infinity p\\<^sub>3) =\n  ell_field_class.add a p_ p\\<^sub>3\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        on_curve a b p\\<^sub>3; is_generic p (opp p);\n        is_tangent (opp p) p\\<^sub>3; is_generic Infinity p\\<^sub>3;\n        is_tangent p (ell_field_class.add a (opp p) p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a (opp p) p\\<^sub>3) =\n                         ell_field_class.add a Infinity p\\<^sub>3\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_tangent p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_tangent p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        on_curve a b p\\<^sub>3; is_generic p (opp p);\n        is_tangent (opp p) p\\<^sub>3; is_generic Infinity p\\<^sub>3;\n        is_tangent p (ell_field_class.add a (opp p) p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a (opp p) p\\<^sub>3) =\n                         ell_field_class.add a Infinity p\\<^sub>3\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_tangent p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_tangent p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "case Opp"], ["proof (state)\nthis:\n  on_curve a b p_\n  on_curve a b p_\n  on_curve a b (opp p_)\n  on_curve a b p\\<^sub>3\n  is_generic p_ (opp p_)\n  is_tangent (opp p_) p\\<^sub>3\n  is_generic Infinity p\\<^sub>3\n  is_tangent p_ (ell_field_class.add a (opp p_) p\\<^sub>3)\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        on_curve a b p\\<^sub>3; is_generic p (opp p);\n        is_tangent (opp p) p\\<^sub>3; is_generic Infinity p\\<^sub>3;\n        is_tangent p (ell_field_class.add a (opp p) p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\n                          (ell_field_class.add a (opp p) p\\<^sub>3) =\n                         ell_field_class.add a Infinity p\\<^sub>3\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_tangent p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_tangent p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  on_curve a b p_\n  on_curve a b p_\n  on_curve a b (opp p_)\n  on_curve a b p\\<^sub>3\n  is_generic p_ (opp p_)\n  is_tangent (opp p_) p\\<^sub>3\n  is_generic Infinity p\\<^sub>3\n  is_tangent p_ (ell_field_class.add a (opp p_) p\\<^sub>3)", "show ?case"], ["proof (prove)\nusing this:\n  on_curve a b p_\n  on_curve a b p_\n  on_curve a b (opp p_)\n  on_curve a b p\\<^sub>3\n  is_generic p_ (opp p_)\n  is_tangent (opp p_) p\\<^sub>3\n  is_generic Infinity p\\<^sub>3\n  is_tangent p_ (ell_field_class.add a (opp p_) p\\<^sub>3)\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p_ (ell_field_class.add a (opp p_) p\\<^sub>3) =\n    ell_field_class.add a Infinity p\\<^sub>3", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  ell_field_class.add a p_ (ell_field_class.add a (opp p_) p\\<^sub>3) =\n  ell_field_class.add a Infinity p\\<^sub>3\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_tangent p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_tangent p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_tangent p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_tangent p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "case Tan"], ["proof (state)\nthis:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>3\n  is_generic p\\<^sub>1_ p\\<^sub>1_\n  is_tangent p\\<^sub>1_ p\\<^sub>3\n  is_generic p\\<^sub>2_ p\\<^sub>3\n  is_tangent p\\<^sub>1_ (ell_field_class.add a p\\<^sub>1_ p\\<^sub>3)\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>3; is_generic p\\<^sub>2 p\\<^sub>3;\n        is_tangent p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>1 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_tangent p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>3\n  is_generic p\\<^sub>1_ p\\<^sub>1_\n  is_tangent p\\<^sub>1_ p\\<^sub>3\n  is_generic p\\<^sub>2_ p\\<^sub>3\n  is_tangent p\\<^sub>1_ (ell_field_class.add a p\\<^sub>1_ p\\<^sub>3)", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>3\n  is_generic p\\<^sub>1_ p\\<^sub>1_\n  is_tangent p\\<^sub>1_ p\\<^sub>3\n  is_generic p\\<^sub>2_ p\\<^sub>3\n  is_tangent p\\<^sub>1_ (ell_field_class.add a p\\<^sub>1_ p\\<^sub>3)\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1_\n     (ell_field_class.add a p\\<^sub>1_ p\\<^sub>3) =\n    ell_field_class.add a p\\<^sub>2_ p\\<^sub>3", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1_\n   (ell_field_class.add a p\\<^sub>1_ p\\<^sub>3) =\n  ell_field_class.add a p\\<^sub>2_ p\\<^sub>3\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_tangent p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_tangent p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "case (Gen p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>4 x\\<^sub>4 y\\<^sub>4 l)"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n  is_generic p\\<^sub>1 p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>3\n  is_generic p\\<^sub>4 p\\<^sub>3\n  is_tangent p\\<^sub>1 (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>3; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>3; is_generic p\\<^sub>3' p\\<^sub>3;\n        is_tangent p\\<^sub>1\n         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                          (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                         ell_field_class.add a p\\<^sub>3' p\\<^sub>3", "with \\<open>on_curve a b p\\<^sub>2\\<close> \\<open>on_curve a b p\\<^sub>3\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n  is_generic p\\<^sub>1 p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>3\n  is_generic p\\<^sub>4 p\\<^sub>3\n  is_tangent p\\<^sub>1 (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)", "show ?case"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n  is_generic p\\<^sub>1 p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>3\n  is_generic p\\<^sub>4 p\\<^sub>3\n  is_tangent p\\<^sub>1 (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a p\\<^sub>4 p\\<^sub>3", "proof (induct rule: add_case)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Infinity = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 Infinity;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b Infinity; on_curve a b p;\n        is_generic p\\<^sub>1 Infinity; is_tangent Infinity p;\n        is_generic p\\<^sub>4 p; is_tangent p\\<^sub>1 p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p =\n                         ell_field_class.add a p\\<^sub>4 p\n 2. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b Infinity;\n        is_generic p\\<^sub>1 p; is_tangent p Infinity;\n        is_generic p\\<^sub>4 Infinity; is_tangent p\\<^sub>1 p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p =\n                         ell_field_class.add a p\\<^sub>4 Infinity\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b (opp p);\n        is_generic p\\<^sub>1 p; is_tangent p (opp p);\n        is_generic p\\<^sub>4 (opp p); is_tangent p\\<^sub>1 Infinity\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 Infinity =\n                         ell_field_class.add a p\\<^sub>4 (opp p)\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 5. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "case InfL"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  Infinity = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 Infinity\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b Infinity\n  on_curve a b p_\n  is_generic p\\<^sub>1 Infinity\n  is_tangent Infinity p_\n  is_generic p\\<^sub>4 p_\n  is_tangent p\\<^sub>1 p_\n\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Infinity = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 Infinity;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b Infinity; on_curve a b p;\n        is_generic p\\<^sub>1 Infinity; is_tangent Infinity p;\n        is_generic p\\<^sub>4 p; is_tangent p\\<^sub>1 p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p =\n                         ell_field_class.add a p\\<^sub>4 p\n 2. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b Infinity;\n        is_generic p\\<^sub>1 p; is_tangent p Infinity;\n        is_generic p\\<^sub>4 Infinity; is_tangent p\\<^sub>1 p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p =\n                         ell_field_class.add a p\\<^sub>4 Infinity\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b (opp p);\n        is_generic p\\<^sub>1 p; is_tangent p (opp p);\n        is_generic p\\<^sub>4 (opp p); is_tangent p\\<^sub>1 Infinity\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 Infinity =\n                         ell_field_class.add a p\\<^sub>4 (opp p)\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 5. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  Infinity = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 Infinity\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b Infinity\n  on_curve a b p_\n  is_generic p\\<^sub>1 Infinity\n  is_tangent Infinity p_\n  is_generic p\\<^sub>4 p_\n  is_tangent p\\<^sub>1 p_", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  Infinity = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 Infinity\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b Infinity\n  on_curve a b p_\n  is_generic p\\<^sub>1 Infinity\n  is_tangent Infinity p_\n  is_generic p\\<^sub>4 p_\n  is_tangent p\\<^sub>1 p_\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p_ = ell_field_class.add a p\\<^sub>4 p_", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p_ = ell_field_class.add a p\\<^sub>4 p_\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b Infinity;\n        is_generic p\\<^sub>1 p; is_tangent p Infinity;\n        is_generic p\\<^sub>4 Infinity; is_tangent p\\<^sub>1 p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p =\n                         ell_field_class.add a p\\<^sub>4 Infinity\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b (opp p);\n        is_generic p\\<^sub>1 p; is_tangent p (opp p);\n        is_generic p\\<^sub>4 (opp p); is_tangent p\\<^sub>1 Infinity\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 Infinity =\n                         ell_field_class.add a p\\<^sub>4 (opp p)\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b Infinity;\n        is_generic p\\<^sub>1 p; is_tangent p Infinity;\n        is_generic p\\<^sub>4 Infinity; is_tangent p\\<^sub>1 p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p =\n                         ell_field_class.add a p\\<^sub>4 Infinity\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b (opp p);\n        is_generic p\\<^sub>1 p; is_tangent p (opp p);\n        is_generic p\\<^sub>4 (opp p); is_tangent p\\<^sub>1 Infinity\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 Infinity =\n                         ell_field_class.add a p\\<^sub>4 (opp p)\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "case InfR"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p_ = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p_\n  on_curve a b Infinity\n  is_generic p\\<^sub>1 p_\n  is_tangent p_ Infinity\n  is_generic p\\<^sub>4 Infinity\n  is_tangent p\\<^sub>1 p_\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b Infinity;\n        is_generic p\\<^sub>1 p; is_tangent p Infinity;\n        is_generic p\\<^sub>4 Infinity; is_tangent p\\<^sub>1 p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p =\n                         ell_field_class.add a p\\<^sub>4 Infinity\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b (opp p);\n        is_generic p\\<^sub>1 p; is_tangent p (opp p);\n        is_generic p\\<^sub>4 (opp p); is_tangent p\\<^sub>1 Infinity\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 Infinity =\n                         ell_field_class.add a p\\<^sub>4 (opp p)\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p_ = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p_\n  on_curve a b Infinity\n  is_generic p\\<^sub>1 p_\n  is_tangent p_ Infinity\n  is_generic p\\<^sub>4 Infinity\n  is_tangent p\\<^sub>1 p_", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p_ = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p_\n  on_curve a b Infinity\n  is_generic p\\<^sub>1 p_\n  is_tangent p_ Infinity\n  is_generic p\\<^sub>4 Infinity\n  is_tangent p\\<^sub>1 p_\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p_ =\n    ell_field_class.add a p\\<^sub>4 Infinity", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p_ =\n  ell_field_class.add a p\\<^sub>4 Infinity\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b (opp p);\n        is_generic p\\<^sub>1 p; is_tangent p (opp p);\n        is_generic p\\<^sub>4 (opp p); is_tangent p\\<^sub>1 Infinity\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 Infinity =\n                         ell_field_class.add a p\\<^sub>4 (opp p)\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b (opp p);\n        is_generic p\\<^sub>1 p; is_tangent p (opp p);\n        is_generic p\\<^sub>4 (opp p); is_tangent p\\<^sub>1 Infinity\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 Infinity =\n                         ell_field_class.add a p\\<^sub>4 (opp p)\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "case Opp"], ["proof (state)\nthis:\n  on_curve a b p_\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p_ = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p_\n  on_curve a b (opp p_)\n  is_generic p\\<^sub>1 p_\n  is_tangent p_ (opp p_)\n  is_generic p\\<^sub>4 (opp p_)\n  is_tangent p\\<^sub>1 Infinity\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b (opp p);\n        is_generic p\\<^sub>1 p; is_tangent p (opp p);\n        is_generic p\\<^sub>4 (opp p); is_tangent p\\<^sub>1 Infinity\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 Infinity =\n                         ell_field_class.add a p\\<^sub>4 (opp p)\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  on_curve a b p_\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p_ = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p_\n  on_curve a b (opp p_)\n  is_generic p\\<^sub>1 p_\n  is_tangent p_ (opp p_)\n  is_generic p\\<^sub>4 (opp p_)\n  is_tangent p\\<^sub>1 Infinity", "show ?case"], ["proof (prove)\nusing this:\n  on_curve a b p_\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p_ = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p_\n  on_curve a b (opp p_)\n  is_generic p\\<^sub>1 p_\n  is_tangent p_ (opp p_)\n  is_generic p\\<^sub>4 (opp p_)\n  is_tangent p\\<^sub>1 Infinity\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 Infinity =\n    ell_field_class.add a p\\<^sub>4 (opp p_)", "by (simp add: is_tangent_def opp_opp)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 Infinity =\n  ell_field_class.add a p\\<^sub>4 (opp p_)\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "case (Tan p\\<^sub>2 x\\<^sub>2' y\\<^sub>2' p\\<^sub>5 x\\<^sub>5 y\\<^sub>5 l\\<^sub>1)"], ["proof (state)\nthis:\n  p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>5 = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n  is_generic p\\<^sub>1 p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>2\n  is_generic p\\<^sub>4 p\\<^sub>2\n  is_tangent p\\<^sub>1 p\\<^sub>5\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "from \\<open>on_curve a b p\\<^sub>2\\<close> \\<open>p\\<^sub>5 = add a p\\<^sub>2 p\\<^sub>2\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>2\n  p\\<^sub>5 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2", "have \"on_curve a b p\\<^sub>5\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>2\n  p\\<^sub>5 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n\ngoal (1 subgoal):\n 1. on_curve a b p\\<^sub>5", "by (simp add: add_closed)"], ["proof (state)\nthis:\n  on_curve a b p\\<^sub>5\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>4 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "with \\<open>on_curve a b p\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>5", "show ?case"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>5\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>5 =\n    ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "using Tan"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>5\n  p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>5 = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n  is_generic p\\<^sub>1 p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>2\n  is_generic p\\<^sub>4 p\\<^sub>2\n  is_tangent p\\<^sub>1 p\\<^sub>5\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>5 =\n    ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "proof (induct rule: add_case)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p = Point x\\<^sub>5 y\\<^sub>5;\n        p = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        Infinity = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a Infinity p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b Infinity; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic Infinity p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent Infinity p\\<rbrakk>\n       \\<Longrightarrow> p = ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 2. \\<And>p.\n       \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        Infinity = Point x\\<^sub>5 y\\<^sub>5;\n        Infinity = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b p\\<^sub>2; on_curve a b p\\<^sub>2;\n        is_generic p p\\<^sub>2; is_tangent p\\<^sub>2 p\\<^sub>2;\n        is_generic p\\<^sub>4 p\\<^sub>2; is_tangent p Infinity\\<rbrakk>\n       \\<Longrightarrow> p = ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        opp p = Point x\\<^sub>5 y\\<^sub>5;\n        opp p = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b p\\<^sub>2; on_curve a b p\\<^sub>2;\n        is_generic p p\\<^sub>2; is_tangent p\\<^sub>2 p\\<^sub>2;\n        is_generic p\\<^sub>4 p\\<^sub>2; is_tangent p (opp p)\\<rbrakk>\n       \\<Longrightarrow> Infinity =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 5. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "case InfL"], ["proof (state)\nthis:\n  p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2'\n  p_ = Point x\\<^sub>5 y\\<^sub>5\n  p_ = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  Infinity = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a Infinity p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b Infinity\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n  is_generic Infinity p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>2\n  is_generic p\\<^sub>4 p\\<^sub>2\n  is_tangent Infinity p_\n\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p = Point x\\<^sub>5 y\\<^sub>5;\n        p = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        Infinity = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a Infinity p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b Infinity; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic Infinity p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent Infinity p\\<rbrakk>\n       \\<Longrightarrow> p = ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 2. \\<And>p.\n       \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        Infinity = Point x\\<^sub>5 y\\<^sub>5;\n        Infinity = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b p\\<^sub>2; on_curve a b p\\<^sub>2;\n        is_generic p p\\<^sub>2; is_tangent p\\<^sub>2 p\\<^sub>2;\n        is_generic p\\<^sub>4 p\\<^sub>2; is_tangent p Infinity\\<rbrakk>\n       \\<Longrightarrow> p = ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        opp p = Point x\\<^sub>5 y\\<^sub>5;\n        opp p = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b p\\<^sub>2; on_curve a b p\\<^sub>2;\n        is_generic p p\\<^sub>2; is_tangent p\\<^sub>2 p\\<^sub>2;\n        is_generic p\\<^sub>4 p\\<^sub>2; is_tangent p (opp p)\\<rbrakk>\n       \\<Longrightarrow> Infinity =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 5. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2'\n  p_ = Point x\\<^sub>5 y\\<^sub>5\n  p_ = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  Infinity = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a Infinity p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b Infinity\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n  is_generic Infinity p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>2\n  is_generic p\\<^sub>4 p\\<^sub>2\n  is_tangent Infinity p_", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2'\n  p_ = Point x\\<^sub>5 y\\<^sub>5\n  p_ = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  Infinity = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a Infinity p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b Infinity\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n  is_generic Infinity p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>2\n  is_generic p\\<^sub>4 p\\<^sub>2\n  is_tangent Infinity p_\n\ngoal (1 subgoal):\n 1. p_ = ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  p_ = ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        Infinity = Point x\\<^sub>5 y\\<^sub>5;\n        Infinity = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b p\\<^sub>2; on_curve a b p\\<^sub>2;\n        is_generic p p\\<^sub>2; is_tangent p\\<^sub>2 p\\<^sub>2;\n        is_generic p\\<^sub>4 p\\<^sub>2; is_tangent p Infinity\\<rbrakk>\n       \\<Longrightarrow> p = ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        opp p = Point x\\<^sub>5 y\\<^sub>5;\n        opp p = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b p\\<^sub>2; on_curve a b p\\<^sub>2;\n        is_generic p p\\<^sub>2; is_tangent p\\<^sub>2 p\\<^sub>2;\n        is_generic p\\<^sub>4 p\\<^sub>2; is_tangent p (opp p)\\<rbrakk>\n       \\<Longrightarrow> Infinity =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        Infinity = Point x\\<^sub>5 y\\<^sub>5;\n        Infinity = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b p\\<^sub>2; on_curve a b p\\<^sub>2;\n        is_generic p p\\<^sub>2; is_tangent p\\<^sub>2 p\\<^sub>2;\n        is_generic p\\<^sub>4 p\\<^sub>2; is_tangent p Infinity\\<rbrakk>\n       \\<Longrightarrow> p = ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        opp p = Point x\\<^sub>5 y\\<^sub>5;\n        opp p = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b p\\<^sub>2; on_curve a b p\\<^sub>2;\n        is_generic p p\\<^sub>2; is_tangent p\\<^sub>2 p\\<^sub>2;\n        is_generic p\\<^sub>4 p\\<^sub>2; is_tangent p (opp p)\\<rbrakk>\n       \\<Longrightarrow> Infinity =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "case InfR"], ["proof (state)\nthis:\n  p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2'\n  Infinity = Point x\\<^sub>5 y\\<^sub>5\n  Infinity = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p_ = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p_ p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p_\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n  is_generic p_ p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>2\n  is_generic p\\<^sub>4 p\\<^sub>2\n  is_tangent p_ Infinity\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        Infinity = Point x\\<^sub>5 y\\<^sub>5;\n        Infinity = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b p\\<^sub>2; on_curve a b p\\<^sub>2;\n        is_generic p p\\<^sub>2; is_tangent p\\<^sub>2 p\\<^sub>2;\n        is_generic p\\<^sub>4 p\\<^sub>2; is_tangent p Infinity\\<rbrakk>\n       \\<Longrightarrow> p = ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        opp p = Point x\\<^sub>5 y\\<^sub>5;\n        opp p = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b p\\<^sub>2; on_curve a b p\\<^sub>2;\n        is_generic p p\\<^sub>2; is_tangent p\\<^sub>2 p\\<^sub>2;\n        is_generic p\\<^sub>4 p\\<^sub>2; is_tangent p (opp p)\\<rbrakk>\n       \\<Longrightarrow> Infinity =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2'\n  Infinity = Point x\\<^sub>5 y\\<^sub>5\n  Infinity = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p_ = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p_ p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p_\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n  is_generic p_ p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>2\n  is_generic p\\<^sub>4 p\\<^sub>2\n  is_tangent p_ Infinity", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2'\n  Infinity = Point x\\<^sub>5 y\\<^sub>5\n  Infinity = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p_ = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p_ p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p_\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n  is_generic p_ p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>2\n  is_generic p\\<^sub>4 p\\<^sub>2\n  is_tangent p_ Infinity\n\ngoal (1 subgoal):\n 1. p_ = ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  p_ = ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        opp p = Point x\\<^sub>5 y\\<^sub>5;\n        opp p = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b p\\<^sub>2; on_curve a b p\\<^sub>2;\n        is_generic p p\\<^sub>2; is_tangent p\\<^sub>2 p\\<^sub>2;\n        is_generic p\\<^sub>4 p\\<^sub>2; is_tangent p (opp p)\\<rbrakk>\n       \\<Longrightarrow> Infinity =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        opp p = Point x\\<^sub>5 y\\<^sub>5;\n        opp p = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b p\\<^sub>2; on_curve a b p\\<^sub>2;\n        is_generic p p\\<^sub>2; is_tangent p\\<^sub>2 p\\<^sub>2;\n        is_generic p\\<^sub>4 p\\<^sub>2; is_tangent p (opp p)\\<rbrakk>\n       \\<Longrightarrow> Infinity =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "case Opp"], ["proof (state)\nthis:\n  on_curve a b p_\n  p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2'\n  opp p_ = Point x\\<^sub>5 y\\<^sub>5\n  opp p_ = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p_ = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p_ p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p_\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n  is_generic p_ p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>2\n  is_generic p\\<^sub>4 p\\<^sub>2\n  is_tangent p_ (opp p_)\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        opp p = Point x\\<^sub>5 y\\<^sub>5;\n        opp p = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p; on_curve a b p\\<^sub>2; on_curve a b p\\<^sub>2;\n        is_generic p p\\<^sub>2; is_tangent p\\<^sub>2 p\\<^sub>2;\n        is_generic p\\<^sub>4 p\\<^sub>2; is_tangent p (opp p)\\<rbrakk>\n       \\<Longrightarrow> Infinity =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  on_curve a b p_\n  p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2'\n  opp p_ = Point x\\<^sub>5 y\\<^sub>5\n  opp p_ = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p_ = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p_ p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p_\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n  is_generic p_ p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>2\n  is_generic p\\<^sub>4 p\\<^sub>2\n  is_tangent p_ (opp p_)", "show ?case"], ["proof (prove)\nusing this:\n  on_curve a b p_\n  p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2'\n  opp p_ = Point x\\<^sub>5 y\\<^sub>5\n  opp p_ = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p_ = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p_ p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p_\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n  is_generic p_ p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>2\n  is_generic p\\<^sub>4 p\\<^sub>2\n  is_tangent p_ (opp p_)\n\ngoal (1 subgoal):\n 1. Infinity = ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "by (simp add: is_tangent_def opp_opp)"], ["proof (state)\nthis:\n  Infinity = ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "case (Tan p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>6 x\\<^sub>6 y\\<^sub>6 l\\<^sub>2)"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1\n  y\\<^sub>1' \\<noteq> (0::'a)\n  l\\<^sub>2 = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n  is_generic p\\<^sub>1 p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>2\n  is_generic p\\<^sub>4 p\\<^sub>2\n  is_tangent p\\<^sub>1 p\\<^sub>1\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "from \\<open>on_curve a b p\\<^sub>1\\<close> \\<open>on_curve a b p\\<^sub>2\\<close> \\<open>p\\<^sub>4 = add a p\\<^sub>1 p\\<^sub>2\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2", "have \"on_curve a b p\\<^sub>4\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n\ngoal (1 subgoal):\n 1. on_curve a b p\\<^sub>4", "by (simp add: add_closed)"], ["proof (state)\nthis:\n  on_curve a b p\\<^sub>4\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2'' = - y\\<^sub>1' - la * (x\\<^sub>2'' - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>4", "show ?case"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>4\n\ngoal (1 subgoal):\n 1. p\\<^sub>6 = ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "using \\<open>on_curve a b p\\<^sub>2\\<close> Tan"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>4\n  on_curve a b p\\<^sub>2\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1\n  y\\<^sub>1' \\<noteq> (0::'a)\n  l\\<^sub>2 = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n  is_generic p\\<^sub>1 p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>2\n  is_generic p\\<^sub>4 p\\<^sub>2\n  is_tangent p\\<^sub>1 p\\<^sub>1\n\ngoal (1 subgoal):\n 1. p\\<^sub>6 = ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "proof (induct rule: add_case)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p p; y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2; Infinity = Point x\\<^sub>4 y\\<^sub>4;\n        Infinity = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b p;\n        is_generic p\\<^sub>1 p; is_tangent p p; is_generic Infinity p;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\n 2. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Infinity = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a Infinity Infinity;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Infinity = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 Infinity;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b Infinity;\n        on_curve a b Infinity; is_generic p\\<^sub>1 Infinity;\n        is_tangent Infinity Infinity; is_generic p Infinity;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        opp p = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a (opp p) (opp p);\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (opp p); on_curve a b (opp p);\n        is_generic p\\<^sub>1 (opp p); is_tangent (opp p) (opp p);\n        is_generic p (opp p); is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = Infinity\n 4. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 5. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "case InfL"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1\n  y\\<^sub>1' \\<noteq> (0::'a)\n  l\\<^sub>2 = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  p_ = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>1 = ell_field_class.add a p_ p_\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p_ = Point x\\<^sub>2 y\\<^sub>2\n  Infinity = Point x\\<^sub>4 y\\<^sub>4\n  Infinity = ell_field_class.add a p\\<^sub>1 p_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p_\n  on_curve a b p_\n  is_generic p\\<^sub>1 p_\n  is_tangent p_ p_\n  is_generic Infinity p_\n  is_tangent p\\<^sub>1 p\\<^sub>1\n\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p p; y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p = Point x\\<^sub>2 y\\<^sub>2; Infinity = Point x\\<^sub>4 y\\<^sub>4;\n        Infinity = ell_field_class.add a p\\<^sub>1 p;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p; on_curve a b p;\n        is_generic p\\<^sub>1 p; is_tangent p p; is_generic Infinity p;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\n 2. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Infinity = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a Infinity Infinity;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Infinity = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 Infinity;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b Infinity;\n        on_curve a b Infinity; is_generic p\\<^sub>1 Infinity;\n        is_tangent Infinity Infinity; is_generic p Infinity;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        opp p = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a (opp p) (opp p);\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (opp p); on_curve a b (opp p);\n        is_generic p\\<^sub>1 (opp p); is_tangent (opp p) (opp p);\n        is_generic p (opp p); is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = Infinity\n 4. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 5. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1\n  y\\<^sub>1' \\<noteq> (0::'a)\n  l\\<^sub>2 = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  p_ = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>1 = ell_field_class.add a p_ p_\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p_ = Point x\\<^sub>2 y\\<^sub>2\n  Infinity = Point x\\<^sub>4 y\\<^sub>4\n  Infinity = ell_field_class.add a p\\<^sub>1 p_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p_\n  on_curve a b p_\n  is_generic p\\<^sub>1 p_\n  is_tangent p_ p_\n  is_generic Infinity p_\n  is_tangent p\\<^sub>1 p\\<^sub>1", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1\n  y\\<^sub>1' \\<noteq> (0::'a)\n  l\\<^sub>2 = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  p_ = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>1 = ell_field_class.add a p_ p_\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p_ = Point x\\<^sub>2 y\\<^sub>2\n  Infinity = Point x\\<^sub>4 y\\<^sub>4\n  Infinity = ell_field_class.add a p\\<^sub>1 p_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p_\n  on_curve a b p_\n  is_generic p\\<^sub>1 p_\n  is_tangent p_ p_\n  is_generic Infinity p_\n  is_tangent p\\<^sub>1 p\\<^sub>1\n\ngoal (1 subgoal):\n 1. p\\<^sub>6 = p_", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  p\\<^sub>6 = p_\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Infinity = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a Infinity Infinity;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Infinity = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 Infinity;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b Infinity;\n        on_curve a b Infinity; is_generic p\\<^sub>1 Infinity;\n        is_tangent Infinity Infinity; is_generic p Infinity;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        opp p = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a (opp p) (opp p);\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (opp p); on_curve a b (opp p);\n        is_generic p\\<^sub>1 (opp p); is_tangent (opp p) (opp p);\n        is_generic p (opp p); is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = Infinity\n 3. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 4. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Infinity = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a Infinity Infinity;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Infinity = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 Infinity;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b Infinity;\n        on_curve a b Infinity; is_generic p\\<^sub>1 Infinity;\n        is_tangent Infinity Infinity; is_generic p Infinity;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        opp p = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a (opp p) (opp p);\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (opp p); on_curve a b (opp p);\n        is_generic p\\<^sub>1 (opp p); is_tangent (opp p) (opp p);\n        is_generic p (opp p); is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = Infinity\n 3. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 4. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "case InfR"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1\n  y\\<^sub>1' \\<noteq> (0::'a)\n  l\\<^sub>2 = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  Infinity = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>1 = ell_field_class.add a Infinity Infinity\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  Infinity = Point x\\<^sub>2 y\\<^sub>2\n  p_ = Point x\\<^sub>4 y\\<^sub>4\n  p_ = ell_field_class.add a p\\<^sub>1 Infinity\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b Infinity\n  on_curve a b Infinity\n  is_generic p\\<^sub>1 Infinity\n  is_tangent Infinity Infinity\n  is_generic p_ Infinity\n  is_tangent p\\<^sub>1 p\\<^sub>1\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        Infinity = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a Infinity Infinity;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        Infinity = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 Infinity;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b Infinity;\n        on_curve a b Infinity; is_generic p\\<^sub>1 Infinity;\n        is_tangent Infinity Infinity; is_generic p Infinity;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        opp p = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a (opp p) (opp p);\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (opp p); on_curve a b (opp p);\n        is_generic p\\<^sub>1 (opp p); is_tangent (opp p) (opp p);\n        is_generic p (opp p); is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = Infinity\n 3. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 4. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1\n  y\\<^sub>1' \\<noteq> (0::'a)\n  l\\<^sub>2 = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  Infinity = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>1 = ell_field_class.add a Infinity Infinity\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  Infinity = Point x\\<^sub>2 y\\<^sub>2\n  p_ = Point x\\<^sub>4 y\\<^sub>4\n  p_ = ell_field_class.add a p\\<^sub>1 Infinity\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b Infinity\n  on_curve a b Infinity\n  is_generic p\\<^sub>1 Infinity\n  is_tangent Infinity Infinity\n  is_generic p_ Infinity\n  is_tangent p\\<^sub>1 p\\<^sub>1", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1\n  y\\<^sub>1' \\<noteq> (0::'a)\n  l\\<^sub>2 = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  Infinity = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>1 = ell_field_class.add a Infinity Infinity\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  Infinity = Point x\\<^sub>2 y\\<^sub>2\n  p_ = Point x\\<^sub>4 y\\<^sub>4\n  p_ = ell_field_class.add a p\\<^sub>1 Infinity\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b Infinity\n  on_curve a b Infinity\n  is_generic p\\<^sub>1 Infinity\n  is_tangent Infinity Infinity\n  is_generic p_ Infinity\n  is_tangent p\\<^sub>1 p\\<^sub>1\n\ngoal (1 subgoal):\n 1. p\\<^sub>6 = p_", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  p\\<^sub>6 = p_\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        opp p = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a (opp p) (opp p);\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (opp p); on_curve a b (opp p);\n        is_generic p\\<^sub>1 (opp p); is_tangent (opp p) (opp p);\n        is_generic p (opp p); is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = Infinity\n 2. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 3. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        opp p = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a (opp p) (opp p);\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (opp p); on_curve a b (opp p);\n        is_generic p\\<^sub>1 (opp p); is_tangent (opp p) (opp p);\n        is_generic p (opp p); is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = Infinity\n 2. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 3. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "case (Opp p)"], ["proof (state)\nthis:\n  on_curve a b p\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1\n  y\\<^sub>1' \\<noteq> (0::'a)\n  l\\<^sub>2 = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  opp p = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>1 = ell_field_class.add a (opp p) (opp p)\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  opp p = Point x\\<^sub>2 y\\<^sub>2\n  p = Point x\\<^sub>4 y\\<^sub>4\n  p = ell_field_class.add a p\\<^sub>1 (opp p)\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b (opp p)\n  on_curve a b (opp p)\n  is_generic p\\<^sub>1 (opp p)\n  is_tangent (opp p) (opp p)\n  is_generic p (opp p)\n  is_tangent p\\<^sub>1 p\\<^sub>1\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        opp p = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a (opp p) (opp p);\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2; p = Point x\\<^sub>4 y\\<^sub>4;\n        p = ell_field_class.add a p\\<^sub>1 (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b (opp p); on_curve a b (opp p);\n        is_generic p\\<^sub>1 (opp p); is_tangent (opp p) (opp p);\n        is_generic p (opp p); is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = Infinity\n 2. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 3. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "from \\<open>is_generic p (opp p)\\<close>"], ["proof (chain)\npicking this:\n  is_generic p (opp p)", "show ?case"], ["proof (prove)\nusing this:\n  is_generic p (opp p)\n\ngoal (1 subgoal):\n 1. p\\<^sub>6 = Infinity", "by (simp add: is_generic_def opp_opp)"], ["proof (state)\nthis:\n  p\\<^sub>6 = Infinity\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 2. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 2. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "case Tan"], ["proof (state)\nthis:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1\n  y\\<^sub>1' \\<noteq> (0::'a)\n  l\\<^sub>2 = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  p\\<^sub>1_ = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>1 = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>1_ = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>1_ = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>1_ = ell_field_class.add a p\\<^sub>1 p\\<^sub>1_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>1_\n  is_generic p\\<^sub>1 p\\<^sub>1_\n  is_tangent p\\<^sub>1_ p\\<^sub>1_\n  is_generic p\\<^sub>1_ p\\<^sub>1_\n  is_tangent p\\<^sub>1 p\\<^sub>1\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1'' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1''\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1'');\n        x\\<^sub>2'' = la\\<^sup>2 - (2::'a) * x\\<^sub>1'';\n        y\\<^sub>2'' = - y\\<^sub>1'' - la * (x\\<^sub>2'' - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>2\n 2. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1\n  y\\<^sub>1' \\<noteq> (0::'a)\n  l\\<^sub>2 = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  p\\<^sub>1_ = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>1 = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>1_ = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>1_ = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>1_ = ell_field_class.add a p\\<^sub>1 p\\<^sub>1_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>1_\n  is_generic p\\<^sub>1 p\\<^sub>1_\n  is_tangent p\\<^sub>1_ p\\<^sub>1_\n  is_generic p\\<^sub>1_ p\\<^sub>1_\n  is_tangent p\\<^sub>1 p\\<^sub>1", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1\n  y\\<^sub>1' \\<noteq> (0::'a)\n  l\\<^sub>2 = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  p\\<^sub>1_ = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>1 = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>1_ = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>1_ = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>1_ = ell_field_class.add a p\\<^sub>1 p\\<^sub>1_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>1_\n  is_generic p\\<^sub>1 p\\<^sub>1_\n  is_tangent p\\<^sub>1_ p\\<^sub>1_\n  is_generic p\\<^sub>1_ p\\<^sub>1_\n  is_tangent p\\<^sub>1 p\\<^sub>1\n\ngoal (1 subgoal):\n 1. p\\<^sub>6 = p\\<^sub>2_", "by (simp add: is_generic_def)"], ["proof (state)\nthis:\n  p\\<^sub>6 = p\\<^sub>2_\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "case (Gen p\\<^sub>4' x\\<^sub>4' y\\<^sub>4' p\\<^sub>2' x\\<^sub>2'' y\\<^sub>2'' p\\<^sub>7 x\\<^sub>7 y\\<^sub>7 l\\<^sub>3)"], ["proof (state)\nthis:\n  p\\<^sub>4' = Point x\\<^sub>4' y\\<^sub>4'\n  p\\<^sub>2' = Point x\\<^sub>2'' y\\<^sub>2''\n  p\\<^sub>7 = Point x\\<^sub>7 y\\<^sub>7\n  p\\<^sub>7 = ell_field_class.add a p\\<^sub>4' p\\<^sub>2'\n  x\\<^sub>4' \\<noteq> x\\<^sub>2''\n  l\\<^sub>3 = (y\\<^sub>2'' - y\\<^sub>4') / (x\\<^sub>2'' - x\\<^sub>4')\n  x\\<^sub>7 = l\\<^sub>3\\<^sup>2 - x\\<^sub>4' - x\\<^sub>2''\n  y\\<^sub>7 = - y\\<^sub>4' - l\\<^sub>3 * (x\\<^sub>7 - x\\<^sub>4')\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1\n  y\\<^sub>1' \\<noteq> (0::'a)\n  l\\<^sub>2 = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  p\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>1 = ell_field_class.add a p\\<^sub>2' p\\<^sub>2'\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4' = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2'\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2'\n  on_curve a b p\\<^sub>2'\n  is_generic p\\<^sub>1 p\\<^sub>2'\n  is_tangent p\\<^sub>2' p\\<^sub>2'\n  is_generic p\\<^sub>4' p\\<^sub>2'\n  is_tangent p\\<^sub>1 p\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "from\n          \\<open>on_curve a b p\\<^sub>1\\<close> \\<open>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\\<close>\n          \\<open>on_curve a b p\\<^sub>2\\<close> \\<open>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>1\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2", "have\n          y1: \"y\\<^sub>1 ^ 2 = x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b\" and\n          y2: \"y\\<^sub>2 ^ 2 = x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n\ngoal (1 subgoal):\n 1. y\\<^sub>1\\<^sup>2 = x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b &&&\n    y\\<^sub>2\\<^sup>2 = x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b", "by (simp_all add: on_curve_def)"], ["proof (state)\nthis:\n  y\\<^sub>1\\<^sup>2 = x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b\n  y\\<^sub>2\\<^sup>2 = x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "from\n          \\<open>p\\<^sub>4' = Point x\\<^sub>4' y\\<^sub>4'\\<close>\n          \\<open>p\\<^sub>4' = Point x\\<^sub>4 y\\<^sub>4\\<close>\n          \\<open>p\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2'\\<close>\n          \\<open>p\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2\\<close>\n          \\<open>p\\<^sub>2' = Point x\\<^sub>2'' y\\<^sub>2''\\<close>\n          \\<open>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\\<close>\n          \\<open>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\\<close>\n          \\<open>p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5\\<close>"], ["proof (chain)\npicking this:\n  p\\<^sub>4' = Point x\\<^sub>4' y\\<^sub>4'\n  p\\<^sub>4' = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>2' = Point x\\<^sub>2'' y\\<^sub>2''\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5", "have ps:\n          \"x\\<^sub>4' = x\\<^sub>4\" \"y\\<^sub>4' = y\\<^sub>4\" \"x\\<^sub>2' = x\\<^sub>2\" \"y\\<^sub>2' = y\\<^sub>2\" \"x\\<^sub>2'' = x\\<^sub>2\" \"y\\<^sub>2'' = y\\<^sub>2\"\n          \"x\\<^sub>1' = x\\<^sub>5\" \"y\\<^sub>1' = y\\<^sub>5\" \"x\\<^sub>1 = x\\<^sub>5\" \"y\\<^sub>1 = y\\<^sub>5\""], ["proof (prove)\nusing this:\n  p\\<^sub>4' = Point x\\<^sub>4' y\\<^sub>4'\n  p\\<^sub>4' = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>2' = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>2' = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>2' = Point x\\<^sub>2'' y\\<^sub>2''\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5\n\ngoal (1 subgoal):\n 1. ((x\\<^sub>4' = x\\<^sub>4 &&& y\\<^sub>4' = y\\<^sub>4) &&&\n     x\\<^sub>2' = x\\<^sub>2 &&&\n     y\\<^sub>2' = y\\<^sub>2 &&& x\\<^sub>2'' = x\\<^sub>2) &&&\n    (y\\<^sub>2'' = y\\<^sub>2 &&& x\\<^sub>1' = x\\<^sub>5) &&&\n    y\\<^sub>1' = y\\<^sub>5 &&&\n    x\\<^sub>1 = x\\<^sub>5 &&& y\\<^sub>1 = y\\<^sub>5", "by simp_all"], ["proof (state)\nthis:\n  x\\<^sub>4' = x\\<^sub>4\n  y\\<^sub>4' = y\\<^sub>4\n  x\\<^sub>2' = x\\<^sub>2\n  y\\<^sub>2' = y\\<^sub>2\n  x\\<^sub>2'' = x\\<^sub>2\n  y\\<^sub>2'' = y\\<^sub>2\n  x\\<^sub>1' = x\\<^sub>5\n  y\\<^sub>1' = y\\<^sub>5\n  x\\<^sub>1 = x\\<^sub>5\n  y\\<^sub>1 = y\\<^sub>5\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "note qs =\n          \\<open>x\\<^sub>7 = l\\<^sub>3 ^ 2 - x\\<^sub>4' - x\\<^sub>2''\\<close>\n          \\<open>y\\<^sub>7 = - y\\<^sub>4' - l\\<^sub>3 * (x\\<^sub>7 - x\\<^sub>4')\\<close>\n          \\<open>l\\<^sub>3 = (y\\<^sub>2'' - y\\<^sub>4') / (x\\<^sub>2'' - x\\<^sub>4')\\<close>\n          \\<open>x\\<^sub>6 = l\\<^sub>2 ^ 2 - 2 * x\\<^sub>1'\\<close>\n          \\<open>y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\\<close>\n          \\<open>x\\<^sub>5 = l\\<^sub>1 ^ 2 - 2 * x\\<^sub>2'\\<close>\n          \\<open>y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\\<close>\n          \\<open>l\\<^sub>1 = (3 * x\\<^sub>2' ^ 2 + a) / (2 * y\\<^sub>2')\\<close>\n          \\<open>l\\<^sub>2 = (3 * x\\<^sub>1' ^ 2 + a) / (2 * y\\<^sub>1')\\<close>\n          \\<open>x\\<^sub>4 = l ^ 2 - x\\<^sub>1 - x\\<^sub>2\\<close>\n          \\<open>y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\\<close>\n          \\<open>l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\\<close>"], ["proof (state)\nthis:\n  x\\<^sub>7 = l\\<^sub>3\\<^sup>2 - x\\<^sub>4' - x\\<^sub>2''\n  y\\<^sub>7 = - y\\<^sub>4' - l\\<^sub>3 * (x\\<^sub>7 - x\\<^sub>4')\n  l\\<^sub>3 = (y\\<^sub>2'' - y\\<^sub>4') / (x\\<^sub>2'' - x\\<^sub>4')\n  x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1'\n  y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  l\\<^sub>2 = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1')\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "from \\<open>y\\<^sub>2' \\<noteq> 0\\<close> \\<open>y\\<^sub>2' = y\\<^sub>2\\<close>"], ["proof (chain)\npicking this:\n  y\\<^sub>2' \\<noteq> (0::'a)\n  y\\<^sub>2' = y\\<^sub>2", "have \"2 * y\\<^sub>2 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  y\\<^sub>2' \\<noteq> (0::'a)\n  y\\<^sub>2' = y\\<^sub>2\n\ngoal (1 subgoal):\n 1. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)", "by simp"], ["proof (state)\nthis:\n  (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1'' y\\<^sub>1'' p\\<^sub>2 x\\<^sub>2''\n       y\\<^sub>2'' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1'' y\\<^sub>1'';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1'' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1'') / (x\\<^sub>2'' - x\\<^sub>1'');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1'' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1'' - la * (x\\<^sub>3 - x\\<^sub>1'');\n        p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6;\n        p\\<^sub>6 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        l\\<^sub>2 =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>6 = l\\<^sub>2\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>6 = - y\\<^sub>1' - l\\<^sub>2 * (x\\<^sub>6 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>1 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>6 = p\\<^sub>3", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. p\\<^sub>6 = p\\<^sub>7", "apply (simp add: \\<open>p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\\<close> \\<open>p\\<^sub>7 = Point x\\<^sub>7 y\\<^sub>7\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^sub>6 = x\\<^sub>7 \\<and> y\\<^sub>6 = y\\<^sub>7", "apply (simp only: ps qs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (((3::'a) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2)\\<^sup>2 +\n      a) /\n     ((2::'a) *\n      (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2))))\\<^sup>2 -\n    (2::'a) *\n    ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n     (2::'a) * x\\<^sub>2) =\n    ((y\\<^sub>2 -\n      (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))) /\n     (x\\<^sub>2 -\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2)))\\<^sup>2 -\n    (((y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     x\\<^sub>2) -\n    x\\<^sub>2 \\<and>\n    - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (((3::'a) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2)\\<^sup>2 +\n      a) /\n     ((2::'a) *\n      (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2))))\\<^sup>2 -\n    (2::'a) *\n    ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n     (2::'a) * x\\<^sub>2) =\n    ((y\\<^sub>2 -\n      (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))) /\n     (x\\<^sub>2 -\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2)))\\<^sup>2 -\n    (((y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     x\\<^sub>2) -\n    x\\<^sub>2\n 2. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply (field y2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. - y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n    ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n     x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a) \\<and>\n    x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a) \\<and>\n    (2::'a) * y\\<^sub>2 \\<noteq> (0::'a) \\<and>\n    x\\<^sub>2 *\n    ((4::'a) *\n     (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n      (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n     ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n    ((y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n      (- y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n        x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2))))\\<^sup>2 *\n     (4::'a) -\n     (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2) -\n     x\\<^sub>2 *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n      ((4::'a) * y\\<^sub>2\\<^sup>2))) \\<noteq>\n    (0::'a)\n 2. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply (intro conjI)"], ["proof (prove)\ngoal (5 subgoals):\n 1. - y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n    ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n     x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)\n 2. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)\n 3. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 4. x\\<^sub>2 *\n    ((4::'a) *\n     (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n      (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n     ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n    ((y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n      (- y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n        x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2))))\\<^sup>2 *\n     (4::'a) -\n     (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2) -\n     x\\<^sub>2 *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n      ((4::'a) * y\\<^sub>2\\<^sup>2))) \\<noteq>\n    (0::'a)\n 5. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply (rule notI)"], ["proof (prove)\ngoal (5 subgoals):\n 1. - y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n    ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n     x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) =\n    (0::'a) \\<Longrightarrow>\n    False\n 2. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)\n 3. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 4. x\\<^sub>2 *\n    ((4::'a) *\n     (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n      (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n     ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n    ((y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n      (- y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n        x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2))))\\<^sup>2 *\n     (4::'a) -\n     (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2) -\n     x\\<^sub>2 *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n      ((4::'a) * y\\<^sub>2\\<^sup>2))) \\<noteq>\n    (0::'a)\n 5. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply (ring (prems))"], ["proof (prove)\ngoal (5 subgoals):\n 1. (- (8::'a) * y\\<^sub>2\\<^sup>2 +\n     (((36::'a) * x\\<^sub>2\\<^sup>2 + ((12::'a) * a ^ 1 + (0::'a))) *\n      x\\<^sub>2 ^ 1 +\n      (0::'a))) *\n    y\\<^sub>2\\<^sup>2 +\n    (((- (27::'a) * x\\<^sub>2\\<^sup>2 + (- (27::'a) * a ^ 1 + (0::'a))) *\n      x\\<^sub>2\\<^sup>2 +\n      (- (9::'a) * a\\<^sup>2 + (0::'a))) *\n     x\\<^sub>2\\<^sup>2 +\n     (of_int (- 1) * a ^ 3 + (0::'a))) =\n    (0::'a) \\<Longrightarrow>\n    False\n 2. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)\n 3. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 4. x\\<^sub>2 *\n    ((4::'a) *\n     (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n      (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n     ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n    ((y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n      (- y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n        x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2))))\\<^sup>2 *\n     (4::'a) -\n     (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2) -\n     x\\<^sub>2 *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n      ((4::'a) * y\\<^sub>2\\<^sup>2))) \\<noteq>\n    (0::'a)\n 5. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply (rule notE [OF \\<open>y\\<^sub>1' \\<noteq> 0\\<close>])"], ["proof (prove)\ngoal (5 subgoals):\n 1. (- (8::'a) * y\\<^sub>2\\<^sup>2 +\n     (((36::'a) * x\\<^sub>2\\<^sup>2 + ((12::'a) * a ^ 1 + (0::'a))) *\n      x\\<^sub>2 ^ 1 +\n      (0::'a))) *\n    y\\<^sub>2\\<^sup>2 +\n    (((- (27::'a) * x\\<^sub>2\\<^sup>2 + (- (27::'a) * a ^ 1 + (0::'a))) *\n      x\\<^sub>2\\<^sup>2 +\n      (- (9::'a) * a\\<^sup>2 + (0::'a))) *\n     x\\<^sub>2\\<^sup>2 +\n     (of_int (- 1) * a ^ 3 + (0::'a))) =\n    (0::'a) \\<Longrightarrow>\n    y\\<^sub>1' = (0::'a)\n 2. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)\n 3. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 4. x\\<^sub>2 *\n    ((4::'a) *\n     (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n      (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n     ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n    ((y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n      (- y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n        x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2))))\\<^sup>2 *\n     (4::'a) -\n     (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2) -\n     x\\<^sub>2 *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n      ((4::'a) * y\\<^sub>2\\<^sup>2))) \\<noteq>\n    (0::'a)\n 5. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply (simp only: ps qs)"], ["proof (prove)\ngoal (5 subgoals):\n 1. (- (8::'a) * y\\<^sub>2\\<^sup>2 +\n     (((36::'a) * x\\<^sub>2\\<^sup>2 + ((12::'a) * a ^ 1 + (0::'a))) *\n      x\\<^sub>2 ^ 1 +\n      (0::'a))) *\n    y\\<^sub>2\\<^sup>2 +\n    (((- (27::'a) * x\\<^sub>2\\<^sup>2 + (- (27::'a) * a ^ 1 + (0::'a))) *\n      x\\<^sub>2\\<^sup>2 +\n      (- (9::'a) * a\\<^sup>2 + (0::'a))) *\n     x\\<^sub>2\\<^sup>2 +\n     (of_int (- 1) * a ^ 3 + (0::'a))) =\n    (0::'a) \\<Longrightarrow>\n    - y\\<^sub>2 -\n    ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n    ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 -\n     x\\<^sub>2) =\n    (0::'a)\n 2. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)\n 3. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 4. x\\<^sub>2 *\n    ((4::'a) *\n     (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n      (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n     ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n    ((y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n      (- y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n        x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2))))\\<^sup>2 *\n     (4::'a) -\n     (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2) -\n     x\\<^sub>2 *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n      ((4::'a) * y\\<^sub>2\\<^sup>2))) \\<noteq>\n    (0::'a)\n 5. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply field"], ["proof (prove)\ngoal (5 subgoals):\n 1. (- (8::'a) * y\\<^sub>2\\<^sup>2 +\n     (((36::'a) * x\\<^sub>2\\<^sup>2 + ((12::'a) * a ^ 1 + (0::'a))) *\n      x\\<^sub>2 ^ 1 +\n      (0::'a))) *\n    y\\<^sub>2\\<^sup>2 +\n    (((- (27::'a) * x\\<^sub>2\\<^sup>2 + (- (27::'a) * a ^ 1 + (0::'a))) *\n      x\\<^sub>2\\<^sup>2 +\n      (- (9::'a) * a\\<^sup>2 + (0::'a))) *\n     x\\<^sub>2\\<^sup>2 +\n     (of_int (- 1) * a ^ 3 + (0::'a))) =\n    (0::'a) \\<Longrightarrow>\n    (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 2. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)\n 3. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 4. x\\<^sub>2 *\n    ((4::'a) *\n     (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n      (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n     ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n    ((y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n      (- y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n        x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2))))\\<^sup>2 *\n     (4::'a) -\n     (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2) -\n     x\\<^sub>2 *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n      ((4::'a) * y\\<^sub>2\\<^sup>2))) \\<noteq>\n    (0::'a)\n 5. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply (rule \\<open>2 * y\\<^sub>2 \\<noteq> 0\\<close>)"], ["proof (prove)\ngoal (4 subgoals):\n 1. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)\n 2. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 3. x\\<^sub>2 *\n    ((4::'a) *\n     (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n      (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n     ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n    ((y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n      (- y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n        x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2))))\\<^sup>2 *\n     (4::'a) -\n     (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2) -\n     x\\<^sub>2 *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n      ((4::'a) * y\\<^sub>2\\<^sup>2))) \\<noteq>\n    (0::'a)\n 4. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply (rule notI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) =\n    (0::'a) \\<Longrightarrow>\n    False\n 2. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 3. x\\<^sub>2 *\n    ((4::'a) *\n     (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n      (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n     ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n    ((y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n      (- y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n        x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2))))\\<^sup>2 *\n     (4::'a) -\n     (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2) -\n     x\\<^sub>2 *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n      ((4::'a) * y\\<^sub>2\\<^sup>2))) \\<noteq>\n    (0::'a)\n 4. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply (ring (prems))"], ["proof (prove)\ngoal (4 subgoals):\n 1. ((- (9::'a) * x\\<^sub>2\\<^sup>2 + (- (6::'a) * a ^ 1 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     ((12::'a) * y\\<^sub>2\\<^sup>2 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    (of_int (- 1) * a\\<^sup>2 + (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    False\n 2. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 3. x\\<^sub>2 *\n    ((4::'a) *\n     (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n      (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n     ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n    ((y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n      (- y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n        x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2))))\\<^sup>2 *\n     (4::'a) -\n     (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2) -\n     x\\<^sub>2 *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n      ((4::'a) * y\\<^sub>2\\<^sup>2))) \\<noteq>\n    (0::'a)\n 4. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply (rule notE [OF \\<open>x\\<^sub>1 \\<noteq> x\\<^sub>2\\<close>])"], ["proof (prove)\ngoal (4 subgoals):\n 1. ((- (9::'a) * x\\<^sub>2\\<^sup>2 + (- (6::'a) * a ^ 1 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     ((12::'a) * y\\<^sub>2\\<^sup>2 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    (of_int (- 1) * a\\<^sup>2 + (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>1 = x\\<^sub>2\n 2. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 3. x\\<^sub>2 *\n    ((4::'a) *\n     (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n      (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n     ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n    ((y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n      (- y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n        x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2))))\\<^sup>2 *\n     (4::'a) -\n     (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2) -\n     x\\<^sub>2 *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n      ((4::'a) * y\\<^sub>2\\<^sup>2))) \\<noteq>\n    (0::'a)\n 4. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply (rule sym)"], ["proof (prove)\ngoal (4 subgoals):\n 1. ((- (9::'a) * x\\<^sub>2\\<^sup>2 + (- (6::'a) * a ^ 1 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     ((12::'a) * y\\<^sub>2\\<^sup>2 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    (of_int (- 1) * a\\<^sup>2 + (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>2 = x\\<^sub>1\n 2. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 3. x\\<^sub>2 *\n    ((4::'a) *\n     (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n      (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n     ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n    ((y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n      (- y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n        x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2))))\\<^sup>2 *\n     (4::'a) -\n     (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2) -\n     x\\<^sub>2 *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n      ((4::'a) * y\\<^sub>2\\<^sup>2))) \\<noteq>\n    (0::'a)\n 4. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply (simp only: ps qs)"], ["proof (prove)\ngoal (4 subgoals):\n 1. ((- (9::'a) * x\\<^sub>2\\<^sup>2 + (- (6::'a) * a ^ 1 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     ((12::'a) * y\\<^sub>2\\<^sup>2 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    (of_int (- 1) * a\\<^sup>2 + (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>2 =\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n    (2::'a) * x\\<^sub>2\n 2. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 3. x\\<^sub>2 *\n    ((4::'a) *\n     (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n      (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n     ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n    ((y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n      (- y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n        x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2))))\\<^sup>2 *\n     (4::'a) -\n     (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2) -\n     x\\<^sub>2 *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n      ((4::'a) * y\\<^sub>2\\<^sup>2))) \\<noteq>\n    (0::'a)\n 4. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply field"], ["proof (prove)\ngoal (4 subgoals):\n 1. ((- (9::'a) * x\\<^sub>2\\<^sup>2 + (- (6::'a) * a ^ 1 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     ((12::'a) * y\\<^sub>2\\<^sup>2 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    (of_int (- 1) * a\\<^sup>2 + (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 2. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 3. x\\<^sub>2 *\n    ((4::'a) *\n     (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n      (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n     ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n    ((y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n      (- y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n        x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2))))\\<^sup>2 *\n     (4::'a) -\n     (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2) -\n     x\\<^sub>2 *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n      ((4::'a) * y\\<^sub>2\\<^sup>2))) \\<noteq>\n    (0::'a)\n 4. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply (rule \\<open>2 * y\\<^sub>2 \\<noteq> 0\\<close>)"], ["proof (prove)\ngoal (3 subgoals):\n 1. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 2. x\\<^sub>2 *\n    ((4::'a) *\n     (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n      (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n     ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n    ((y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n      (- y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n        x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2))))\\<^sup>2 *\n     (4::'a) -\n     (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2) -\n     x\\<^sub>2 *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n      ((4::'a) * y\\<^sub>2\\<^sup>2))) \\<noteq>\n    (0::'a)\n 3. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply (rule \\<open>2 * y\\<^sub>2 \\<noteq> 0\\<close>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. x\\<^sub>2 *\n    ((4::'a) *\n     (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n      (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n     ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n    ((y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n      (- y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n        x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2))))\\<^sup>2 *\n     (4::'a) -\n     (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2) -\n     x\\<^sub>2 *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n      ((4::'a) * y\\<^sub>2\\<^sup>2))) \\<noteq>\n    (0::'a)\n 2. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply (rule notI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. x\\<^sub>2 *\n    ((4::'a) *\n     (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n      (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n     ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n    ((y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n      (- y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n        x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2))))\\<^sup>2 *\n     (4::'a) -\n     (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2) -\n     x\\<^sub>2 *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n      ((4::'a) * y\\<^sub>2\\<^sup>2))) =\n    (0::'a) \\<Longrightarrow>\n    False\n 2. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply (ring (prems))"], ["proof (prove)\ngoal (2 subgoals):\n 1. (((((- (3456::'a) * y\\<^sub>2 ^ 4 + (0::'a)) * x\\<^sub>2\\<^sup>2 +\n        ((- (3456::'a) * a ^ 1 + (0::'a)) * y\\<^sub>2 ^ 4 + (0::'a))) *\n       x\\<^sub>2 ^ 1 +\n       ((4608::'a) * y\\<^sub>2 ^ 6 + (0::'a))) *\n      x\\<^sub>2 ^ 1 +\n      ((- (1152::'a) * a\\<^sup>2 + (0::'a)) * y\\<^sub>2 ^ 4 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     (((1536::'a) * a ^ 1 + (0::'a)) * y\\<^sub>2 ^ 6 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    ((- (1024::'a) * y\\<^sub>2 ^ 4 + (- (128::'a) * a ^ 3 + (0::'a))) *\n     y\\<^sub>2 ^ 4 +\n     (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    False\n 2. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply (rule notE [OF \\<open>x\\<^sub>4' \\<noteq> x\\<^sub>2''\\<close>])"], ["proof (prove)\ngoal (2 subgoals):\n 1. (((((- (3456::'a) * y\\<^sub>2 ^ 4 + (0::'a)) * x\\<^sub>2\\<^sup>2 +\n        ((- (3456::'a) * a ^ 1 + (0::'a)) * y\\<^sub>2 ^ 4 + (0::'a))) *\n       x\\<^sub>2 ^ 1 +\n       ((4608::'a) * y\\<^sub>2 ^ 6 + (0::'a))) *\n      x\\<^sub>2 ^ 1 +\n      ((- (1152::'a) * a\\<^sup>2 + (0::'a)) * y\\<^sub>2 ^ 4 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     (((1536::'a) * a ^ 1 + (0::'a)) * y\\<^sub>2 ^ 6 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    ((- (1024::'a) * y\\<^sub>2 ^ 4 + (- (128::'a) * a ^ 3 + (0::'a))) *\n     y\\<^sub>2 ^ 4 +\n     (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>4' = x\\<^sub>2''\n 2. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply (rule sym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (((((- (3456::'a) * y\\<^sub>2 ^ 4 + (0::'a)) * x\\<^sub>2\\<^sup>2 +\n        ((- (3456::'a) * a ^ 1 + (0::'a)) * y\\<^sub>2 ^ 4 + (0::'a))) *\n       x\\<^sub>2 ^ 1 +\n       ((4608::'a) * y\\<^sub>2 ^ 6 + (0::'a))) *\n      x\\<^sub>2 ^ 1 +\n      ((- (1152::'a) * a\\<^sup>2 + (0::'a)) * y\\<^sub>2 ^ 4 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     (((1536::'a) * a ^ 1 + (0::'a)) * y\\<^sub>2 ^ 6 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    ((- (1024::'a) * y\\<^sub>2 ^ 4 + (- (128::'a) * a ^ 3 + (0::'a))) *\n     y\\<^sub>2 ^ 4 +\n     (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>2'' = x\\<^sub>4'\n 2. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply (simp only: ps qs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (((((- (3456::'a) * y\\<^sub>2 ^ 4 + (0::'a)) * x\\<^sub>2\\<^sup>2 +\n        ((- (3456::'a) * a ^ 1 + (0::'a)) * y\\<^sub>2 ^ 4 + (0::'a))) *\n       x\\<^sub>2 ^ 1 +\n       ((4608::'a) * y\\<^sub>2 ^ 6 + (0::'a))) *\n      x\\<^sub>2 ^ 1 +\n      ((- (1152::'a) * a\\<^sup>2 + (0::'a)) * y\\<^sub>2 ^ 4 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     (((1536::'a) * a ^ 1 + (0::'a)) * y\\<^sub>2 ^ 6 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    ((- (1024::'a) * y\\<^sub>2 ^ 4 + (- (128::'a) * a ^ 3 + (0::'a))) *\n     y\\<^sub>2 ^ 4 +\n     (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>2 =\n    ((y\\<^sub>2 -\n      (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2))) /\n     (x\\<^sub>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n    ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n     (2::'a) * x\\<^sub>2) -\n    x\\<^sub>2\n 2. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply field"], ["proof (prove)\ngoal (2 subgoals):\n 1. (((((- (3456::'a) * y\\<^sub>2 ^ 4 + (0::'a)) * x\\<^sub>2\\<^sup>2 +\n        ((- (3456::'a) * a ^ 1 + (0::'a)) * y\\<^sub>2 ^ 4 + (0::'a))) *\n       x\\<^sub>2 ^ 1 +\n       ((4608::'a) * y\\<^sub>2 ^ 6 + (0::'a))) *\n      x\\<^sub>2 ^ 1 +\n      ((- (1152::'a) * a\\<^sup>2 + (0::'a)) * y\\<^sub>2 ^ 4 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     (((1536::'a) * a ^ 1 + (0::'a)) * y\\<^sub>2 ^ 6 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    ((- (1024::'a) * y\\<^sub>2 ^ 4 + (- (128::'a) * a ^ 3 + (0::'a))) *\n     y\\<^sub>2 ^ 4 +\n     (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    (2::'a) * y\\<^sub>2 \\<noteq> (0::'a) \\<and>\n    x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)\n 2. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply (intro conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. (((((- (3456::'a) * y\\<^sub>2 ^ 4 + (0::'a)) * x\\<^sub>2\\<^sup>2 +\n        ((- (3456::'a) * a ^ 1 + (0::'a)) * y\\<^sub>2 ^ 4 + (0::'a))) *\n       x\\<^sub>2 ^ 1 +\n       ((4608::'a) * y\\<^sub>2 ^ 6 + (0::'a))) *\n      x\\<^sub>2 ^ 1 +\n      ((- (1152::'a) * a\\<^sup>2 + (0::'a)) * y\\<^sub>2 ^ 4 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     (((1536::'a) * a ^ 1 + (0::'a)) * y\\<^sub>2 ^ 6 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    ((- (1024::'a) * y\\<^sub>2 ^ 4 + (- (128::'a) * a ^ 3 + (0::'a))) *\n     y\\<^sub>2 ^ 4 +\n     (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 2. (((((- (3456::'a) * y\\<^sub>2 ^ 4 + (0::'a)) * x\\<^sub>2\\<^sup>2 +\n        ((- (3456::'a) * a ^ 1 + (0::'a)) * y\\<^sub>2 ^ 4 + (0::'a))) *\n       x\\<^sub>2 ^ 1 +\n       ((4608::'a) * y\\<^sub>2 ^ 6 + (0::'a))) *\n      x\\<^sub>2 ^ 1 +\n      ((- (1152::'a) * a\\<^sup>2 + (0::'a)) * y\\<^sub>2 ^ 4 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     (((1536::'a) * a ^ 1 + (0::'a)) * y\\<^sub>2 ^ 6 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    ((- (1024::'a) * y\\<^sub>2 ^ 4 + (- (128::'a) * a ^ 3 + (0::'a))) *\n     y\\<^sub>2 ^ 4 +\n     (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)\n 3. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply (rule \\<open>2 * y\\<^sub>2 \\<noteq> 0\\<close>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (((((- (3456::'a) * y\\<^sub>2 ^ 4 + (0::'a)) * x\\<^sub>2\\<^sup>2 +\n        ((- (3456::'a) * a ^ 1 + (0::'a)) * y\\<^sub>2 ^ 4 + (0::'a))) *\n       x\\<^sub>2 ^ 1 +\n       ((4608::'a) * y\\<^sub>2 ^ 6 + (0::'a))) *\n      x\\<^sub>2 ^ 1 +\n      ((- (1152::'a) * a\\<^sup>2 + (0::'a)) * y\\<^sub>2 ^ 4 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     (((1536::'a) * a ^ 1 + (0::'a)) * y\\<^sub>2 ^ 6 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    ((- (1024::'a) * y\\<^sub>2 ^ 4 + (- (128::'a) * a ^ 3 + (0::'a))) *\n     y\\<^sub>2 ^ 4 +\n     (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)\n 2. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply (erule thin_rl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)\n 2. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply (rule notI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) =\n    (0::'a) \\<Longrightarrow>\n    False\n 2. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply (ring (prems))"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((- (9::'a) * x\\<^sub>2\\<^sup>2 + (- (6::'a) * a ^ 1 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     ((12::'a) * y\\<^sub>2\\<^sup>2 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    (of_int (- 1) * a\\<^sup>2 + (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    False\n 2. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply (rule notE [OF \\<open>x\\<^sub>1 \\<noteq> x\\<^sub>2\\<close>])"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((- (9::'a) * x\\<^sub>2\\<^sup>2 + (- (6::'a) * a ^ 1 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     ((12::'a) * y\\<^sub>2\\<^sup>2 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    (of_int (- 1) * a\\<^sup>2 + (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>1 = x\\<^sub>2\n 2. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply (rule sym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((- (9::'a) * x\\<^sub>2\\<^sup>2 + (- (6::'a) * a ^ 1 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     ((12::'a) * y\\<^sub>2\\<^sup>2 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    (of_int (- 1) * a\\<^sup>2 + (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>2 = x\\<^sub>1\n 2. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply (simp only: ps qs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((- (9::'a) * x\\<^sub>2\\<^sup>2 + (- (6::'a) * a ^ 1 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     ((12::'a) * y\\<^sub>2\\<^sup>2 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    (of_int (- 1) * a\\<^sup>2 + (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>2 =\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n    (2::'a) * x\\<^sub>2\n 2. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply field"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((- (9::'a) * x\\<^sub>2\\<^sup>2 + (- (6::'a) * a ^ 1 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     ((12::'a) * y\\<^sub>2\\<^sup>2 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    (of_int (- 1) * a\\<^sup>2 + (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 2. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply (rule \\<open>2 * y\\<^sub>2 \\<noteq> 0\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. - (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2)) -\n    ((3::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)\\<^sup>2 +\n     a) /\n    ((2::'a) *\n     (- y\\<^sub>2 -\n      ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 -\n       x\\<^sub>2))) *\n    ((((3::'a) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)\\<^sup>2 +\n       a) /\n      ((2::'a) *\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))))\\<^sup>2 -\n     (2::'a) *\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2) -\n     ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n      (2::'a) * x\\<^sub>2)) =\n    - (- (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2)) -\n       (y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)) *\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2))) -\n    (y\\<^sub>2 -\n     (- (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2)) -\n      (y\\<^sub>2 -\n       (- y\\<^sub>2 -\n        ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2 -\n         x\\<^sub>2))) /\n      (x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)) *\n      (((y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2) -\n       x\\<^sub>2 -\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2)))) /\n    (x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2)) *\n    (((y\\<^sub>2 -\n       (- (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2)) -\n        (y\\<^sub>2 -\n         (- y\\<^sub>2 -\n          ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2 -\n           x\\<^sub>2))) /\n        (x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)) *\n        (((y\\<^sub>2 -\n           (- y\\<^sub>2 -\n            ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n            ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n              ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n             (2::'a) * x\\<^sub>2 -\n             x\\<^sub>2))) /\n          (x\\<^sub>2 -\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2) -\n         x\\<^sub>2 -\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2)))) /\n      (x\\<^sub>2 -\n       (((y\\<^sub>2 -\n          (- y\\<^sub>2 -\n           ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n           ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n             ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n            (2::'a) * x\\<^sub>2 -\n            x\\<^sub>2))) /\n         (x\\<^sub>2 -\n          ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n            ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n           (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2) -\n        x\\<^sub>2)))\\<^sup>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2) -\n     x\\<^sub>2 -\n     (((y\\<^sub>2 -\n        (- y\\<^sub>2 -\n         ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n         ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n           ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n          (2::'a) * x\\<^sub>2 -\n          x\\<^sub>2))) /\n       (x\\<^sub>2 -\n        ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n          ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n         (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2) -\n      x\\<^sub>2))", "apply (field y2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. - y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n    ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n     x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a) \\<and>\n    x\\<^sub>2 *\n    ((4::'a) *\n     (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n      (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n     ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n    ((y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n      (- y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n        x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2))))\\<^sup>2 *\n     (4::'a) -\n     (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2) -\n     x\\<^sub>2 *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n      ((4::'a) * y\\<^sub>2\\<^sup>2))) \\<noteq>\n    (0::'a) \\<and>\n    (2::'a) * y\\<^sub>2 \\<noteq> (0::'a) \\<and>\n    x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)", "apply (intro conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. - y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n    ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n     x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)\n 2. x\\<^sub>2 *\n    ((4::'a) *\n     (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n      (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n     ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n    ((y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n      (- y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n        x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2))))\\<^sup>2 *\n     (4::'a) -\n     (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2) -\n     x\\<^sub>2 *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n      ((4::'a) * y\\<^sub>2\\<^sup>2))) \\<noteq>\n    (0::'a)\n 3. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 4. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)", "apply (rule notI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. - y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n    ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n     x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) =\n    (0::'a) \\<Longrightarrow>\n    False\n 2. x\\<^sub>2 *\n    ((4::'a) *\n     (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n      (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n     ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n    ((y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n      (- y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n        x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2))))\\<^sup>2 *\n     (4::'a) -\n     (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2) -\n     x\\<^sub>2 *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n      ((4::'a) * y\\<^sub>2\\<^sup>2))) \\<noteq>\n    (0::'a)\n 3. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 4. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)", "apply (ring (prems))"], ["proof (prove)\ngoal (4 subgoals):\n 1. (- (8::'a) * y\\<^sub>2\\<^sup>2 +\n     (((36::'a) * x\\<^sub>2\\<^sup>2 + ((12::'a) * a ^ 1 + (0::'a))) *\n      x\\<^sub>2 ^ 1 +\n      (0::'a))) *\n    y\\<^sub>2\\<^sup>2 +\n    (((- (27::'a) * x\\<^sub>2\\<^sup>2 + (- (27::'a) * a ^ 1 + (0::'a))) *\n      x\\<^sub>2\\<^sup>2 +\n      (- (9::'a) * a\\<^sup>2 + (0::'a))) *\n     x\\<^sub>2\\<^sup>2 +\n     (of_int (- 1) * a ^ 3 + (0::'a))) =\n    (0::'a) \\<Longrightarrow>\n    False\n 2. x\\<^sub>2 *\n    ((4::'a) *\n     (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n      (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n     ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n    ((y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n      (- y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n        x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2))))\\<^sup>2 *\n     (4::'a) -\n     (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2) -\n     x\\<^sub>2 *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n      ((4::'a) * y\\<^sub>2\\<^sup>2))) \\<noteq>\n    (0::'a)\n 3. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 4. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)", "apply (rule notE [OF \\<open>y\\<^sub>1' \\<noteq> 0\\<close>])"], ["proof (prove)\ngoal (4 subgoals):\n 1. (- (8::'a) * y\\<^sub>2\\<^sup>2 +\n     (((36::'a) * x\\<^sub>2\\<^sup>2 + ((12::'a) * a ^ 1 + (0::'a))) *\n      x\\<^sub>2 ^ 1 +\n      (0::'a))) *\n    y\\<^sub>2\\<^sup>2 +\n    (((- (27::'a) * x\\<^sub>2\\<^sup>2 + (- (27::'a) * a ^ 1 + (0::'a))) *\n      x\\<^sub>2\\<^sup>2 +\n      (- (9::'a) * a\\<^sup>2 + (0::'a))) *\n     x\\<^sub>2\\<^sup>2 +\n     (of_int (- 1) * a ^ 3 + (0::'a))) =\n    (0::'a) \\<Longrightarrow>\n    y\\<^sub>1' = (0::'a)\n 2. x\\<^sub>2 *\n    ((4::'a) *\n     (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n      (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n     ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n    ((y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n      (- y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n        x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2))))\\<^sup>2 *\n     (4::'a) -\n     (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2) -\n     x\\<^sub>2 *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n      ((4::'a) * y\\<^sub>2\\<^sup>2))) \\<noteq>\n    (0::'a)\n 3. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 4. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)", "apply (simp only: ps qs)"], ["proof (prove)\ngoal (4 subgoals):\n 1. (- (8::'a) * y\\<^sub>2\\<^sup>2 +\n     (((36::'a) * x\\<^sub>2\\<^sup>2 + ((12::'a) * a ^ 1 + (0::'a))) *\n      x\\<^sub>2 ^ 1 +\n      (0::'a))) *\n    y\\<^sub>2\\<^sup>2 +\n    (((- (27::'a) * x\\<^sub>2\\<^sup>2 + (- (27::'a) * a ^ 1 + (0::'a))) *\n      x\\<^sub>2\\<^sup>2 +\n      (- (9::'a) * a\\<^sup>2 + (0::'a))) *\n     x\\<^sub>2\\<^sup>2 +\n     (of_int (- 1) * a ^ 3 + (0::'a))) =\n    (0::'a) \\<Longrightarrow>\n    - y\\<^sub>2 -\n    ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n    ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 -\n     x\\<^sub>2) =\n    (0::'a)\n 2. x\\<^sub>2 *\n    ((4::'a) *\n     (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n      (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n     ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n    ((y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n      (- y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n        x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2))))\\<^sup>2 *\n     (4::'a) -\n     (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2) -\n     x\\<^sub>2 *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n      ((4::'a) * y\\<^sub>2\\<^sup>2))) \\<noteq>\n    (0::'a)\n 3. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 4. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)", "apply field"], ["proof (prove)\ngoal (4 subgoals):\n 1. (- (8::'a) * y\\<^sub>2\\<^sup>2 +\n     (((36::'a) * x\\<^sub>2\\<^sup>2 + ((12::'a) * a ^ 1 + (0::'a))) *\n      x\\<^sub>2 ^ 1 +\n      (0::'a))) *\n    y\\<^sub>2\\<^sup>2 +\n    (((- (27::'a) * x\\<^sub>2\\<^sup>2 + (- (27::'a) * a ^ 1 + (0::'a))) *\n      x\\<^sub>2\\<^sup>2 +\n      (- (9::'a) * a\\<^sup>2 + (0::'a))) *\n     x\\<^sub>2\\<^sup>2 +\n     (of_int (- 1) * a ^ 3 + (0::'a))) =\n    (0::'a) \\<Longrightarrow>\n    (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 2. x\\<^sub>2 *\n    ((4::'a) *\n     (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n      (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n     ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n    ((y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n      (- y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n        x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2))))\\<^sup>2 *\n     (4::'a) -\n     (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2) -\n     x\\<^sub>2 *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n      ((4::'a) * y\\<^sub>2\\<^sup>2))) \\<noteq>\n    (0::'a)\n 3. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 4. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)", "apply (rule \\<open>2 * y\\<^sub>2 \\<noteq> 0\\<close>)"], ["proof (prove)\ngoal (3 subgoals):\n 1. x\\<^sub>2 *\n    ((4::'a) *\n     (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n      (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n     ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n    ((y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n      (- y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n        x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2))))\\<^sup>2 *\n     (4::'a) -\n     (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2) -\n     x\\<^sub>2 *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n      ((4::'a) * y\\<^sub>2\\<^sup>2))) \\<noteq>\n    (0::'a)\n 2. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 3. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)", "apply (rule notI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. x\\<^sub>2 *\n    ((4::'a) *\n     (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n      (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n       (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n     ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n    ((y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n      (- y\\<^sub>2 * ((2::'a) * y\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) *\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n        x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2))))\\<^sup>2 *\n     (4::'a) -\n     (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n      (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2) -\n     x\\<^sub>2 *\n     ((4::'a) *\n      (x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n       (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)))\\<^sup>2 *\n      ((4::'a) * y\\<^sub>2\\<^sup>2))) =\n    (0::'a) \\<Longrightarrow>\n    False\n 2. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 3. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)", "apply (ring (prems))"], ["proof (prove)\ngoal (3 subgoals):\n 1. (((((- (3456::'a) * y\\<^sub>2 ^ 4 + (0::'a)) * x\\<^sub>2\\<^sup>2 +\n        ((- (3456::'a) * a ^ 1 + (0::'a)) * y\\<^sub>2 ^ 4 + (0::'a))) *\n       x\\<^sub>2 ^ 1 +\n       ((4608::'a) * y\\<^sub>2 ^ 6 + (0::'a))) *\n      x\\<^sub>2 ^ 1 +\n      ((- (1152::'a) * a\\<^sup>2 + (0::'a)) * y\\<^sub>2 ^ 4 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     (((1536::'a) * a ^ 1 + (0::'a)) * y\\<^sub>2 ^ 6 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    ((- (1024::'a) * y\\<^sub>2 ^ 4 + (- (128::'a) * a ^ 3 + (0::'a))) *\n     y\\<^sub>2 ^ 4 +\n     (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    False\n 2. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 3. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)", "apply (rule notE [OF \\<open>x\\<^sub>4' \\<noteq> x\\<^sub>2''\\<close>])"], ["proof (prove)\ngoal (3 subgoals):\n 1. (((((- (3456::'a) * y\\<^sub>2 ^ 4 + (0::'a)) * x\\<^sub>2\\<^sup>2 +\n        ((- (3456::'a) * a ^ 1 + (0::'a)) * y\\<^sub>2 ^ 4 + (0::'a))) *\n       x\\<^sub>2 ^ 1 +\n       ((4608::'a) * y\\<^sub>2 ^ 6 + (0::'a))) *\n      x\\<^sub>2 ^ 1 +\n      ((- (1152::'a) * a\\<^sup>2 + (0::'a)) * y\\<^sub>2 ^ 4 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     (((1536::'a) * a ^ 1 + (0::'a)) * y\\<^sub>2 ^ 6 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    ((- (1024::'a) * y\\<^sub>2 ^ 4 + (- (128::'a) * a ^ 3 + (0::'a))) *\n     y\\<^sub>2 ^ 4 +\n     (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>4' = x\\<^sub>2''\n 2. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 3. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)", "apply (rule sym)"], ["proof (prove)\ngoal (3 subgoals):\n 1. (((((- (3456::'a) * y\\<^sub>2 ^ 4 + (0::'a)) * x\\<^sub>2\\<^sup>2 +\n        ((- (3456::'a) * a ^ 1 + (0::'a)) * y\\<^sub>2 ^ 4 + (0::'a))) *\n       x\\<^sub>2 ^ 1 +\n       ((4608::'a) * y\\<^sub>2 ^ 6 + (0::'a))) *\n      x\\<^sub>2 ^ 1 +\n      ((- (1152::'a) * a\\<^sup>2 + (0::'a)) * y\\<^sub>2 ^ 4 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     (((1536::'a) * a ^ 1 + (0::'a)) * y\\<^sub>2 ^ 6 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    ((- (1024::'a) * y\\<^sub>2 ^ 4 + (- (128::'a) * a ^ 3 + (0::'a))) *\n     y\\<^sub>2 ^ 4 +\n     (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>2'' = x\\<^sub>4'\n 2. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 3. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)", "apply (simp only: ps qs)"], ["proof (prove)\ngoal (3 subgoals):\n 1. (((((- (3456::'a) * y\\<^sub>2 ^ 4 + (0::'a)) * x\\<^sub>2\\<^sup>2 +\n        ((- (3456::'a) * a ^ 1 + (0::'a)) * y\\<^sub>2 ^ 4 + (0::'a))) *\n       x\\<^sub>2 ^ 1 +\n       ((4608::'a) * y\\<^sub>2 ^ 6 + (0::'a))) *\n      x\\<^sub>2 ^ 1 +\n      ((- (1152::'a) * a\\<^sup>2 + (0::'a)) * y\\<^sub>2 ^ 4 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     (((1536::'a) * a ^ 1 + (0::'a)) * y\\<^sub>2 ^ 6 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    ((- (1024::'a) * y\\<^sub>2 ^ 4 + (- (128::'a) * a ^ 3 + (0::'a))) *\n     y\\<^sub>2 ^ 4 +\n     (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>2 =\n    ((y\\<^sub>2 -\n      (- y\\<^sub>2 -\n       ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2) *\n       ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n         ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n        (2::'a) * x\\<^sub>2 -\n        x\\<^sub>2))) /\n     (x\\<^sub>2 -\n      ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n       (2::'a) * x\\<^sub>2)))\\<^sup>2 -\n    ((((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n     (2::'a) * x\\<^sub>2) -\n    x\\<^sub>2\n 2. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 3. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)", "apply field"], ["proof (prove)\ngoal (3 subgoals):\n 1. (((((- (3456::'a) * y\\<^sub>2 ^ 4 + (0::'a)) * x\\<^sub>2\\<^sup>2 +\n        ((- (3456::'a) * a ^ 1 + (0::'a)) * y\\<^sub>2 ^ 4 + (0::'a))) *\n       x\\<^sub>2 ^ 1 +\n       ((4608::'a) * y\\<^sub>2 ^ 6 + (0::'a))) *\n      x\\<^sub>2 ^ 1 +\n      ((- (1152::'a) * a\\<^sup>2 + (0::'a)) * y\\<^sub>2 ^ 4 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     (((1536::'a) * a ^ 1 + (0::'a)) * y\\<^sub>2 ^ 6 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    ((- (1024::'a) * y\\<^sub>2 ^ 4 + (- (128::'a) * a ^ 3 + (0::'a))) *\n     y\\<^sub>2 ^ 4 +\n     (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    (2::'a) * y\\<^sub>2 \\<noteq> (0::'a) \\<and>\n    x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)\n 2. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 3. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)", "apply (erule thin_rl)"], ["proof (prove)\ngoal (3 subgoals):\n 1. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a) \\<and>\n    x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)\n 2. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 3. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)", "apply (rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 2. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)\n 3. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 4. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)", "apply (rule \\<open>2 * y\\<^sub>2 \\<noteq> 0\\<close>)"], ["proof (prove)\ngoal (3 subgoals):\n 1. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)\n 2. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 3. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)", "apply (rule notI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) =\n    (0::'a) \\<Longrightarrow>\n    False\n 2. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 3. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)", "apply (ring (prems))"], ["proof (prove)\ngoal (3 subgoals):\n 1. ((- (9::'a) * x\\<^sub>2\\<^sup>2 + (- (6::'a) * a ^ 1 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     ((12::'a) * y\\<^sub>2\\<^sup>2 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    (of_int (- 1) * a\\<^sup>2 + (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    False\n 2. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 3. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)", "apply (rule notE [OF \\<open>x\\<^sub>1 \\<noteq> x\\<^sub>2\\<close>])"], ["proof (prove)\ngoal (3 subgoals):\n 1. ((- (9::'a) * x\\<^sub>2\\<^sup>2 + (- (6::'a) * a ^ 1 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     ((12::'a) * y\\<^sub>2\\<^sup>2 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    (of_int (- 1) * a\\<^sup>2 + (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>1 = x\\<^sub>2\n 2. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 3. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)", "apply (rule sym)"], ["proof (prove)\ngoal (3 subgoals):\n 1. ((- (9::'a) * x\\<^sub>2\\<^sup>2 + (- (6::'a) * a ^ 1 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     ((12::'a) * y\\<^sub>2\\<^sup>2 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    (of_int (- 1) * a\\<^sup>2 + (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>2 = x\\<^sub>1\n 2. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 3. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)", "apply (simp only: ps qs)"], ["proof (prove)\ngoal (3 subgoals):\n 1. ((- (9::'a) * x\\<^sub>2\\<^sup>2 + (- (6::'a) * a ^ 1 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     ((12::'a) * y\\<^sub>2\\<^sup>2 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    (of_int (- 1) * a\\<^sup>2 + (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>2 =\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n    (2::'a) * x\\<^sub>2\n 2. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 3. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)", "apply field"], ["proof (prove)\ngoal (3 subgoals):\n 1. ((- (9::'a) * x\\<^sub>2\\<^sup>2 + (- (6::'a) * a ^ 1 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     ((12::'a) * y\\<^sub>2\\<^sup>2 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    (of_int (- 1) * a\\<^sup>2 + (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 2. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 3. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)", "apply (rule \\<open>2 * y\\<^sub>2 \\<noteq> 0\\<close>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)\n 2. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)", "apply (rule \\<open>2 * y\\<^sub>2 \\<noteq> 0\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) \\<noteq>\n    (0::'a)", "apply (rule notI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2) -\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a)\\<^sup>2 -\n     (2::'a) * x\\<^sub>2 * ((4::'a) * y\\<^sub>2\\<^sup>2)) =\n    (0::'a) \\<Longrightarrow>\n    False", "apply (ring (prems))"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((- (9::'a) * x\\<^sub>2\\<^sup>2 + (- (6::'a) * a ^ 1 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     ((12::'a) * y\\<^sub>2\\<^sup>2 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    (of_int (- 1) * a\\<^sup>2 + (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    False", "apply (rule notE [OF \\<open>x\\<^sub>1 \\<noteq> x\\<^sub>2\\<close>])"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((- (9::'a) * x\\<^sub>2\\<^sup>2 + (- (6::'a) * a ^ 1 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     ((12::'a) * y\\<^sub>2\\<^sup>2 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    (of_int (- 1) * a\\<^sup>2 + (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>1 = x\\<^sub>2", "apply (rule sym)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((- (9::'a) * x\\<^sub>2\\<^sup>2 + (- (6::'a) * a ^ 1 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     ((12::'a) * y\\<^sub>2\\<^sup>2 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    (of_int (- 1) * a\\<^sup>2 + (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>2 = x\\<^sub>1", "apply (simp only: ps qs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((- (9::'a) * x\\<^sub>2\\<^sup>2 + (- (6::'a) * a ^ 1 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     ((12::'a) * y\\<^sub>2\\<^sup>2 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    (of_int (- 1) * a\\<^sup>2 + (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>2 =\n    (((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2))\\<^sup>2 -\n    (2::'a) * x\\<^sub>2", "apply field"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((- (9::'a) * x\\<^sub>2\\<^sup>2 + (- (6::'a) * a ^ 1 + (0::'a))) *\n     x\\<^sub>2 ^ 1 +\n     ((12::'a) * y\\<^sub>2\\<^sup>2 + (0::'a))) *\n    x\\<^sub>2 ^ 1 +\n    (of_int (- 1) * a\\<^sup>2 + (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    (2::'a) * y\\<^sub>2 \\<noteq> (0::'a)", "apply (rule \\<open>2 * y\\<^sub>2 \\<noteq> 0\\<close>)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  p\\<^sub>6 = p\\<^sub>7\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "case Gen"], ["proof (state)\nthis:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>3_ = Point x\\<^sub>3_ y\\<^sub>3_\n  p\\<^sub>3_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>2_\n  x\\<^sub>1_ \\<noteq> x\\<^sub>2_\n  l_ = (y\\<^sub>2_ - y\\<^sub>1_) / (x\\<^sub>2_ - x\\<^sub>1_)\n  x\\<^sub>3_ = l_\\<^sup>2 - x\\<^sub>1_ - x\\<^sub>2_\n  y\\<^sub>3_ = - y\\<^sub>1_ - l_ * (x\\<^sub>3_ - x\\<^sub>1_)\n  p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>2_ = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1_ = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1_ p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n  is_generic p\\<^sub>1_ p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>2\n  is_generic p\\<^sub>4 p\\<^sub>2\n  is_tangent p\\<^sub>1_ p\\<^sub>2_\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2'' y\\<^sub>2''\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2'' y\\<^sub>2'';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2'';\n        la = (y\\<^sub>2'' - y\\<^sub>1') / (x\\<^sub>2'' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2'';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = Point x\\<^sub>5 y\\<^sub>5;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n        y\\<^sub>2' \\<noteq> (0::'a);\n        l\\<^sub>1 =\n        ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2');\n        x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2';\n        y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>2;\n        is_tangent p\\<^sub>2 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>3_ = Point x\\<^sub>3_ y\\<^sub>3_\n  p\\<^sub>3_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>2_\n  x\\<^sub>1_ \\<noteq> x\\<^sub>2_\n  l_ = (y\\<^sub>2_ - y\\<^sub>1_) / (x\\<^sub>2_ - x\\<^sub>1_)\n  x\\<^sub>3_ = l_\\<^sup>2 - x\\<^sub>1_ - x\\<^sub>2_\n  y\\<^sub>3_ = - y\\<^sub>1_ - l_ * (x\\<^sub>3_ - x\\<^sub>1_)\n  p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>2_ = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1_ = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1_ p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n  is_generic p\\<^sub>1_ p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>2\n  is_generic p\\<^sub>4 p\\<^sub>2\n  is_tangent p\\<^sub>1_ p\\<^sub>2_", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>3_ = Point x\\<^sub>3_ y\\<^sub>3_\n  p\\<^sub>3_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>2_\n  x\\<^sub>1_ \\<noteq> x\\<^sub>2_\n  l_ = (y\\<^sub>2_ - y\\<^sub>1_) / (x\\<^sub>2_ - x\\<^sub>1_)\n  x\\<^sub>3_ = l_\\<^sup>2 - x\\<^sub>1_ - x\\<^sub>2_\n  y\\<^sub>3_ = - y\\<^sub>1_ - l_ * (x\\<^sub>3_ - x\\<^sub>1_)\n  p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2'\n  p\\<^sub>2_ = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  y\\<^sub>2' \\<noteq> (0::'a)\n  l\\<^sub>1 = ((3::'a) * x\\<^sub>2'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>2')\n  x\\<^sub>5 = l\\<^sub>1\\<^sup>2 - (2::'a) * x\\<^sub>2'\n  y\\<^sub>5 = - y\\<^sub>2' - l\\<^sub>1 * (x\\<^sub>5 - x\\<^sub>2')\n  p\\<^sub>1_ = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1_ p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n  is_generic p\\<^sub>1_ p\\<^sub>2\n  is_tangent p\\<^sub>2 p\\<^sub>2\n  is_generic p\\<^sub>4 p\\<^sub>2\n  is_tangent p\\<^sub>1_ p\\<^sub>2_\n\ngoal (1 subgoal):\n 1. p\\<^sub>3_ = ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "by (simp add: is_tangent_def)"], ["proof (state)\nthis:\n  p\\<^sub>3_ = ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>5 =\n  ell_field_class.add a p\\<^sub>4 p\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "case Gen"], ["proof (state)\nthis:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>3_ = Point x\\<^sub>3_ y\\<^sub>3_\n  p\\<^sub>3_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>2_\n  x\\<^sub>1_ \\<noteq> x\\<^sub>2_\n  l_ = (y\\<^sub>2_ - y\\<^sub>1_) / (x\\<^sub>2_ - x\\<^sub>1_)\n  x\\<^sub>3_ = l_\\<^sup>2 - x\\<^sub>1_ - x\\<^sub>2_\n  y\\<^sub>3_ = - y\\<^sub>1_ - l_ * (x\\<^sub>3_ - x\\<^sub>1_)\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>1_ = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>2_\n  is_generic p\\<^sub>1 p\\<^sub>1_\n  is_tangent p\\<^sub>1_ p\\<^sub>2_\n  is_generic p\\<^sub>4 p\\<^sub>2_\n  is_tangent p\\<^sub>1 p\\<^sub>3_\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3 = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3 = - y\\<^sub>1' - la * (x\\<^sub>3 - x\\<^sub>1');\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>1 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        on_curve a b p\\<^sub>2; is_generic p\\<^sub>1 p\\<^sub>1;\n        is_tangent p\\<^sub>1 p\\<^sub>2; is_generic p\\<^sub>4 p\\<^sub>2;\n        is_tangent p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>3 =\n                         ell_field_class.add a p\\<^sub>4 p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>3_ = Point x\\<^sub>3_ y\\<^sub>3_\n  p\\<^sub>3_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>2_\n  x\\<^sub>1_ \\<noteq> x\\<^sub>2_\n  l_ = (y\\<^sub>2_ - y\\<^sub>1_) / (x\\<^sub>2_ - x\\<^sub>1_)\n  x\\<^sub>3_ = l_\\<^sup>2 - x\\<^sub>1_ - x\\<^sub>2_\n  y\\<^sub>3_ = - y\\<^sub>1_ - l_ * (x\\<^sub>3_ - x\\<^sub>1_)\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>1_ = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>2_\n  is_generic p\\<^sub>1 p\\<^sub>1_\n  is_tangent p\\<^sub>1_ p\\<^sub>2_\n  is_generic p\\<^sub>4 p\\<^sub>2_\n  is_tangent p\\<^sub>1 p\\<^sub>3_", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>3_ = Point x\\<^sub>3_ y\\<^sub>3_\n  p\\<^sub>3_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>2_\n  x\\<^sub>1_ \\<noteq> x\\<^sub>2_\n  l_ = (y\\<^sub>2_ - y\\<^sub>1_) / (x\\<^sub>2_ - x\\<^sub>1_)\n  x\\<^sub>3_ = l_\\<^sup>2 - x\\<^sub>1_ - x\\<^sub>2_\n  y\\<^sub>3_ = - y\\<^sub>1_ - l_ * (x\\<^sub>3_ - x\\<^sub>1_)\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>1_ = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1_\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>1_\n  on_curve a b p\\<^sub>2_\n  is_generic p\\<^sub>1 p\\<^sub>1_\n  is_tangent p\\<^sub>1_ p\\<^sub>2_\n  is_generic p\\<^sub>4 p\\<^sub>2_\n  is_tangent p\\<^sub>1 p\\<^sub>3_\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>3_ =\n    ell_field_class.add a p\\<^sub>4 p\\<^sub>2_", "by (simp add: is_tangent_def)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>3_ =\n  ell_field_class.add a p\\<^sub>4 p\\<^sub>2_\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a p\\<^sub>4 p\\<^sub>3\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma add_0_l: \"add a Infinity p = p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a Infinity p = p", "by (simp add: add_def)"], ["", "lemma add_0_r: \"add a p Infinity = p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a p Infinity = p", "by (simp add: add_def split: point.split)"], ["", "lemma add_opp: \"on_curve a b p \\<Longrightarrow> add a p (opp p) = Infinity\""], ["proof (prove)\ngoal (1 subgoal):\n 1. on_curve a b p \\<Longrightarrow>\n    ell_field_class.add a p (opp p) = Infinity", "by (simp add: add_def opp_def on_curve_def split: point.split_asm)"], ["", "lemma add_comm:\n  assumes \"on_curve a b p\\<^sub>1\" \"on_curve a b p\\<^sub>2\"\n  shows \"add a p\\<^sub>1 p\\<^sub>2 = add a p\\<^sub>2 p\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>1", "proof (cases p\\<^sub>1)"], ["proof (state)\ngoal (2 subgoals):\n 1. p\\<^sub>1 = Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>1\n 2. \\<And>x21 x22.\n       p\\<^sub>1 = Point x21 x22 \\<Longrightarrow>\n       ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n       ell_field_class.add a p\\<^sub>2 p\\<^sub>1", "case Infinity"], ["proof (state)\nthis:\n  p\\<^sub>1 = Infinity\n\ngoal (2 subgoals):\n 1. p\\<^sub>1 = Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>1\n 2. \\<And>x21 x22.\n       p\\<^sub>1 = Point x21 x22 \\<Longrightarrow>\n       ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n       ell_field_class.add a p\\<^sub>2 p\\<^sub>1", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>1 = Infinity", "show ?thesis"], ["proof (prove)\nusing this:\n  p\\<^sub>1 = Infinity\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>1", "by (simp add: add_0_l add_0_r)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n  ell_field_class.add a p\\<^sub>2 p\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       p\\<^sub>1 = Point x21 x22 \\<Longrightarrow>\n       ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n       ell_field_class.add a p\\<^sub>2 p\\<^sub>1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       p\\<^sub>1 = Point x21 x22 \\<Longrightarrow>\n       ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n       ell_field_class.add a p\\<^sub>2 p\\<^sub>1", "case (Point x\\<^sub>1 y\\<^sub>1)"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       p\\<^sub>1 = Point x21 x22 \\<Longrightarrow>\n       ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n       ell_field_class.add a p\\<^sub>2 p\\<^sub>1", "note Point' = this"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       p\\<^sub>1 = Point x21 x22 \\<Longrightarrow>\n       ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n       ell_field_class.add a p\\<^sub>2 p\\<^sub>1", "with \\<open>on_curve a b p\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>1\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1", "have y1: \"y\\<^sub>1 ^ 2 = x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n\ngoal (1 subgoal):\n 1. y\\<^sub>1\\<^sup>2 = x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b", "by (simp add: on_curve_def)"], ["proof (state)\nthis:\n  y\\<^sub>1\\<^sup>2 = x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       p\\<^sub>1 = Point x21 x22 \\<Longrightarrow>\n       ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n       ell_field_class.add a p\\<^sub>2 p\\<^sub>1", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>1", "proof (cases p\\<^sub>2)"], ["proof (state)\ngoal (2 subgoals):\n 1. p\\<^sub>2 = Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>1\n 2. \\<And>x21 x22.\n       p\\<^sub>2 = Point x21 x22 \\<Longrightarrow>\n       ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n       ell_field_class.add a p\\<^sub>2 p\\<^sub>1", "case Infinity"], ["proof (state)\nthis:\n  p\\<^sub>2 = Infinity\n\ngoal (2 subgoals):\n 1. p\\<^sub>2 = Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>1\n 2. \\<And>x21 x22.\n       p\\<^sub>2 = Point x21 x22 \\<Longrightarrow>\n       ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n       ell_field_class.add a p\\<^sub>2 p\\<^sub>1", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>2 = Infinity", "show ?thesis"], ["proof (prove)\nusing this:\n  p\\<^sub>2 = Infinity\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>1", "by (simp add: add_0_l add_0_r)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n  ell_field_class.add a p\\<^sub>2 p\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       p\\<^sub>2 = Point x21 x22 \\<Longrightarrow>\n       ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n       ell_field_class.add a p\\<^sub>2 p\\<^sub>1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       p\\<^sub>2 = Point x21 x22 \\<Longrightarrow>\n       ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n       ell_field_class.add a p\\<^sub>2 p\\<^sub>1", "case (Point x\\<^sub>2 y\\<^sub>2)"], ["proof (state)\nthis:\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       p\\<^sub>2 = Point x21 x22 \\<Longrightarrow>\n       ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n       ell_field_class.add a p\\<^sub>2 p\\<^sub>1", "with \\<open>on_curve a b p\\<^sub>2\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>2\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2", "have y2: \"y\\<^sub>2 ^ 2 = x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>2\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n\ngoal (1 subgoal):\n 1. y\\<^sub>2\\<^sup>2 = x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b", "by (simp add: on_curve_def)"], ["proof (state)\nthis:\n  y\\<^sub>2\\<^sup>2 = x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       p\\<^sub>2 = Point x21 x22 \\<Longrightarrow>\n       ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n       ell_field_class.add a p\\<^sub>2 p\\<^sub>1", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>1", "proof (cases \"x\\<^sub>1 = x\\<^sub>2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x\\<^sub>1 = x\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>1\n 2. x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>1", "case True"], ["proof (state)\nthis:\n  x\\<^sub>1 = x\\<^sub>2\n\ngoal (2 subgoals):\n 1. x\\<^sub>1 = x\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>1\n 2. x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>1", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>1", "proof (cases \"y\\<^sub>1 = - y\\<^sub>2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y\\<^sub>1 = - y\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>1\n 2. y\\<^sub>1 \\<noteq> - y\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>1", "case True"], ["proof (state)\nthis:\n  y\\<^sub>1 = - y\\<^sub>2\n\ngoal (2 subgoals):\n 1. y\\<^sub>1 = - y\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>1\n 2. y\\<^sub>1 \\<noteq> - y\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>1", "with Point Point' \\<open>x\\<^sub>1 = x\\<^sub>2\\<close>"], ["proof (chain)\npicking this:\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  x\\<^sub>1 = x\\<^sub>2\n  y\\<^sub>1 = - y\\<^sub>2", "show ?thesis"], ["proof (prove)\nusing this:\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  x\\<^sub>1 = x\\<^sub>2\n  y\\<^sub>1 = - y\\<^sub>2\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>1", "by (simp add: add_def)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n  ell_field_class.add a p\\<^sub>2 p\\<^sub>1\n\ngoal (1 subgoal):\n 1. y\\<^sub>1 \\<noteq> - y\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. y\\<^sub>1 \\<noteq> - y\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>1", "case False"], ["proof (state)\nthis:\n  y\\<^sub>1 \\<noteq> - y\\<^sub>2\n\ngoal (1 subgoal):\n 1. y\\<^sub>1 \\<noteq> - y\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>1", "with y1 y2 [symmetric] \\<open>x\\<^sub>1 = x\\<^sub>2\\<close> Point Point'"], ["proof (chain)\npicking this:\n  y\\<^sub>1\\<^sup>2 = x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b\n  x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b = y\\<^sub>2\\<^sup>2\n  x\\<^sub>1 = x\\<^sub>2\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  y\\<^sub>1 \\<noteq> - y\\<^sub>2", "show ?thesis"], ["proof (prove)\nusing this:\n  y\\<^sub>1\\<^sup>2 = x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b\n  x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b = y\\<^sub>2\\<^sup>2\n  x\\<^sub>1 = x\\<^sub>2\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  y\\<^sub>1 \\<noteq> - y\\<^sub>2\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>1", "by (simp add: power2_eq_square square_eq_iff)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n  ell_field_class.add a p\\<^sub>2 p\\<^sub>1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n  ell_field_class.add a p\\<^sub>2 p\\<^sub>1\n\ngoal (1 subgoal):\n 1. x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>1", "case False"], ["proof (state)\nthis:\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n\ngoal (1 subgoal):\n 1. x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>1", "with Point Point'"], ["proof (chain)\npicking this:\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  x\\<^sub>1 \\<noteq> x\\<^sub>2", "show ?thesis"], ["proof (prove)\nusing this:\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>1", "apply (simp add: add_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n     p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n     x\\<^sub>1 \\<noteq> x\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ((y\\<^sub>2 - y\\<^sub>1) /\n                       (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 =\n                      ((y\\<^sub>1 - y\\<^sub>2) /\n                       (x\\<^sub>1 - x\\<^sub>2))\\<^sup>2 \\<and>\n                      - y\\<^sub>1 -\n                      (y\\<^sub>2 - y\\<^sub>1) *\n                      (((y\\<^sub>2 - y\\<^sub>1) /\n                        (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n                       x\\<^sub>2 -\n                       (2::'a) * x\\<^sub>1) /\n                      (x\\<^sub>2 - x\\<^sub>1) =\n                      - y\\<^sub>2 -\n                      (y\\<^sub>1 - y\\<^sub>2) *\n                      (((y\\<^sub>1 - y\\<^sub>2) /\n                        (x\\<^sub>1 - x\\<^sub>2))\\<^sup>2 -\n                       x\\<^sub>1 -\n                       (2::'a) * x\\<^sub>2) /\n                      (x\\<^sub>1 - x\\<^sub>2)", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n     p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n     x\\<^sub>1 \\<noteq> x\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ((y\\<^sub>2 - y\\<^sub>1) /\n                       (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 =\n                      ((y\\<^sub>1 - y\\<^sub>2) /\n                       (x\\<^sub>1 - x\\<^sub>2))\\<^sup>2\n 2. \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n     p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n     x\\<^sub>1 \\<noteq> x\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> - y\\<^sub>1 -\n                      (y\\<^sub>2 - y\\<^sub>1) *\n                      (((y\\<^sub>2 - y\\<^sub>1) /\n                        (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n                       x\\<^sub>2 -\n                       (2::'a) * x\\<^sub>1) /\n                      (x\\<^sub>2 - x\\<^sub>1) =\n                      - y\\<^sub>2 -\n                      (y\\<^sub>1 - y\\<^sub>2) *\n                      (((y\\<^sub>1 - y\\<^sub>2) /\n                        (x\\<^sub>1 - x\\<^sub>2))\\<^sup>2 -\n                       x\\<^sub>1 -\n                       (2::'a) * x\\<^sub>2) /\n                      (x\\<^sub>1 - x\\<^sub>2)", "apply field"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n     p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n     x\\<^sub>1 \\<noteq> x\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a) \\<and>\n                      x\\<^sub>1 - x\\<^sub>2 \\<noteq> (0::'a)\n 2. \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n     p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n     x\\<^sub>1 \\<noteq> x\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> - y\\<^sub>1 -\n                      (y\\<^sub>2 - y\\<^sub>1) *\n                      (((y\\<^sub>2 - y\\<^sub>1) /\n                        (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n                       x\\<^sub>2 -\n                       (2::'a) * x\\<^sub>1) /\n                      (x\\<^sub>2 - x\\<^sub>1) =\n                      - y\\<^sub>2 -\n                      (y\\<^sub>1 - y\\<^sub>2) *\n                      (((y\\<^sub>1 - y\\<^sub>2) /\n                        (x\\<^sub>1 - x\\<^sub>2))\\<^sup>2 -\n                       x\\<^sub>1 -\n                       (2::'a) * x\\<^sub>2) /\n                      (x\\<^sub>1 - x\\<^sub>2)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n     p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n     x\\<^sub>1 \\<noteq> x\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> - y\\<^sub>1 -\n                      (y\\<^sub>2 - y\\<^sub>1) *\n                      (((y\\<^sub>2 - y\\<^sub>1) /\n                        (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n                       x\\<^sub>2 -\n                       (2::'a) * x\\<^sub>1) /\n                      (x\\<^sub>2 - x\\<^sub>1) =\n                      - y\\<^sub>2 -\n                      (y\\<^sub>1 - y\\<^sub>2) *\n                      (((y\\<^sub>1 - y\\<^sub>2) /\n                        (x\\<^sub>1 - x\\<^sub>2))\\<^sup>2 -\n                       x\\<^sub>1 -\n                       (2::'a) * x\\<^sub>2) /\n                      (x\\<^sub>1 - x\\<^sub>2)", "apply field"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n     p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n     x\\<^sub>1 \\<noteq> x\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a) \\<and>\n                      x\\<^sub>1 - x\\<^sub>2 \\<noteq> (0::'a)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n  ell_field_class.add a p\\<^sub>2 p\\<^sub>1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n  ell_field_class.add a p\\<^sub>2 p\\<^sub>1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n  ell_field_class.add a p\\<^sub>2 p\\<^sub>1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma uniq_opp:\n  assumes \"add a p\\<^sub>1 p\\<^sub>2 = Infinity\"\n  shows \"p\\<^sub>2 = opp p\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p\\<^sub>2 = opp p\\<^sub>1", "using assms"], ["proof (prove)\nusing this:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = Infinity\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 = opp p\\<^sub>1", "by (auto simp add: add_def opp_def Let_def\n    split: point.split_asm if_split_asm)"], ["", "lemma uniq_zero:\n  assumes ab: \"nonsingular a b\"\n  and p\\<^sub>1: \"on_curve a b p\\<^sub>1\"\n  and p\\<^sub>2: \"on_curve a b p\\<^sub>2\"\n  and add: \"add a p\\<^sub>1 p\\<^sub>2 = p\\<^sub>2\"\n  shows \"p\\<^sub>1 = Infinity\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p\\<^sub>1 = Infinity", "using p\\<^sub>1 p\\<^sub>2 assms"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = p\\<^sub>2\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 = Infinity", "proof (induct rule: add_case)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>nonsingular a b; on_curve a b Infinity; on_curve a b p;\n        p = p\\<rbrakk>\n       \\<Longrightarrow> Infinity = Infinity\n 2. \\<And>p.\n       \\<lbrakk>nonsingular a b; on_curve a b p; on_curve a b Infinity;\n        p = Infinity\\<rbrakk>\n       \\<Longrightarrow> p = Infinity\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; nonsingular a b; on_curve a b p;\n        on_curve a b (opp p); Infinity = opp p\\<rbrakk>\n       \\<Longrightarrow> p = Infinity\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity\n 5. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "case InfL"], ["proof (state)\nthis:\n  nonsingular a b\n  on_curve a b Infinity\n  on_curve a b p_\n  p_ = p_\n\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>nonsingular a b; on_curve a b Infinity; on_curve a b p;\n        p = p\\<rbrakk>\n       \\<Longrightarrow> Infinity = Infinity\n 2. \\<And>p.\n       \\<lbrakk>nonsingular a b; on_curve a b p; on_curve a b Infinity;\n        p = Infinity\\<rbrakk>\n       \\<Longrightarrow> p = Infinity\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; nonsingular a b; on_curve a b p;\n        on_curve a b (opp p); Infinity = opp p\\<rbrakk>\n       \\<Longrightarrow> p = Infinity\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity\n 5. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Infinity = Infinity", ".."], ["proof (state)\nthis:\n  Infinity = Infinity\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>nonsingular a b; on_curve a b p; on_curve a b Infinity;\n        p = Infinity\\<rbrakk>\n       \\<Longrightarrow> p = Infinity\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; nonsingular a b; on_curve a b p;\n        on_curve a b (opp p); Infinity = opp p\\<rbrakk>\n       \\<Longrightarrow> p = Infinity\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>nonsingular a b; on_curve a b p; on_curve a b Infinity;\n        p = Infinity\\<rbrakk>\n       \\<Longrightarrow> p = Infinity\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; nonsingular a b; on_curve a b p;\n        on_curve a b (opp p); Infinity = opp p\\<rbrakk>\n       \\<Longrightarrow> p = Infinity\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "case InfR"], ["proof (state)\nthis:\n  nonsingular a b\n  on_curve a b p_\n  on_curve a b Infinity\n  p_ = Infinity\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>nonsingular a b; on_curve a b p; on_curve a b Infinity;\n        p = Infinity\\<rbrakk>\n       \\<Longrightarrow> p = Infinity\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; nonsingular a b; on_curve a b p;\n        on_curve a b (opp p); Infinity = opp p\\<rbrakk>\n       \\<Longrightarrow> p = Infinity\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "then"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p_\n  on_curve a b Infinity\n  p_ = Infinity", "show ?case"], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p_\n  on_curve a b Infinity\n  p_ = Infinity\n\ngoal (1 subgoal):\n 1. p_ = Infinity", "by simp"], ["proof (state)\nthis:\n  p_ = Infinity\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; nonsingular a b; on_curve a b p;\n        on_curve a b (opp p); Infinity = opp p\\<rbrakk>\n       \\<Longrightarrow> p = Infinity\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; nonsingular a b; on_curve a b p;\n        on_curve a b (opp p); Infinity = opp p\\<rbrakk>\n       \\<Longrightarrow> p = Infinity\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "case Opp"], ["proof (state)\nthis:\n  on_curve a b p_\n  nonsingular a b\n  on_curve a b p_\n  on_curve a b (opp p_)\n  Infinity = opp p_\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; nonsingular a b; on_curve a b p;\n        on_curve a b (opp p); Infinity = opp p\\<rbrakk>\n       \\<Longrightarrow> p = Infinity\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "then"], ["proof (chain)\npicking this:\n  on_curve a b p_\n  nonsingular a b\n  on_curve a b p_\n  on_curve a b (opp p_)\n  Infinity = opp p_", "show ?case"], ["proof (prove)\nusing this:\n  on_curve a b p_\n  nonsingular a b\n  on_curve a b p_\n  on_curve a b (opp p_)\n  Infinity = opp p_\n\ngoal (1 subgoal):\n 1. p_ = Infinity", "by (simp add: opp_def split: point.split_asm)"], ["proof (state)\nthis:\n  p_ = Infinity\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "case (Tan p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l)"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1\n  y\\<^sub>1 \\<noteq> (0::'a)\n  l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1)\n  x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1\n  y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>1\n  p\\<^sub>2 = p\\<^sub>1\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "from \\<open>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\\<close> \\<open>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\\<close> \\<open>p\\<^sub>2 = p\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>2 = p\\<^sub>1", "have \"x\\<^sub>2 = x\\<^sub>1\" \"y\\<^sub>2 = y\\<^sub>1\""], ["proof (prove)\nusing this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>2 = p\\<^sub>1\n\ngoal (1 subgoal):\n 1. x\\<^sub>2 = x\\<^sub>1 &&& y\\<^sub>2 = y\\<^sub>1", "by simp_all"], ["proof (state)\nthis:\n  x\\<^sub>2 = x\\<^sub>1\n  y\\<^sub>2 = y\\<^sub>1\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "with \\<open>y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\\<close> \\<open>y\\<^sub>1 \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\n  y\\<^sub>1 \\<noteq> (0::'a)\n  x\\<^sub>2 = x\\<^sub>1\n  y\\<^sub>2 = y\\<^sub>1", "have \"- y\\<^sub>1 = y\\<^sub>1\""], ["proof (prove)\nusing this:\n  y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\n  y\\<^sub>1 \\<noteq> (0::'a)\n  x\\<^sub>2 = x\\<^sub>1\n  y\\<^sub>2 = y\\<^sub>1\n\ngoal (1 subgoal):\n 1. - y\\<^sub>1 = y\\<^sub>1", "by simp"], ["proof (state)\nthis:\n  - y\\<^sub>1 = y\\<^sub>1\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "with \\<open>y\\<^sub>1 \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  y\\<^sub>1 \\<noteq> (0::'a)\n  - y\\<^sub>1 = y\\<^sub>1", "show ?case"], ["proof (prove)\nusing this:\n  y\\<^sub>1 \\<noteq> (0::'a)\n  - y\\<^sub>1 = y\\<^sub>1\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 = Infinity", "by simp"], ["proof (state)\nthis:\n  p\\<^sub>1 = Infinity\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "case (Gen p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l)"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>3 = p\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>3 = p\\<^sub>2", "have y1: \"y\\<^sub>1 ^ 2 = x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b\"\n    and y2: \"y\\<^sub>2 ^ 2 = x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b\""], ["proof (prove)\nusing this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>3 = p\\<^sub>2\n\ngoal (1 subgoal):\n 1. y\\<^sub>1\\<^sup>2 = x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b &&&\n    y\\<^sub>2\\<^sup>2 = x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b", "by (simp_all add: on_curve_def)"], ["proof (state)\nthis:\n  y\\<^sub>1\\<^sup>2 = x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b\n  y\\<^sub>2\\<^sup>2 = x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "from \\<open>p\\<^sub>3 = p\\<^sub>2\\<close> \\<open>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\\<close> \\<open>p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\\<close>"], ["proof (chain)\npicking this:\n  p\\<^sub>3 = p\\<^sub>2\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3", "have ps: \"x\\<^sub>3 = x\\<^sub>2\" \"y\\<^sub>3 = y\\<^sub>2\""], ["proof (prove)\nusing this:\n  p\\<^sub>3 = p\\<^sub>2\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n\ngoal (1 subgoal):\n 1. x\\<^sub>3 = x\\<^sub>2 &&& y\\<^sub>3 = y\\<^sub>2", "by simp_all"], ["proof (state)\nthis:\n  x\\<^sub>3 = x\\<^sub>2\n  y\\<^sub>3 = y\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "with \\<open>y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\\<close>"], ["proof (chain)\npicking this:\n  y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\n  x\\<^sub>3 = x\\<^sub>2\n  y\\<^sub>3 = y\\<^sub>2", "have \"y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\""], ["proof (prove)\nusing this:\n  y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\n  x\\<^sub>3 = x\\<^sub>2\n  y\\<^sub>3 = y\\<^sub>2\n\ngoal (1 subgoal):\n 1. y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)", "by simp"], ["proof (state)\nthis:\n  y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "also"], ["proof (state)\nthis:\n  y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "from \\<open>l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\\<close> \\<open>x\\<^sub>1 \\<noteq> x\\<^sub>2\\<close>"], ["proof (chain)\npicking this:\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>1 \\<noteq> x\\<^sub>2", "have \"l * (x\\<^sub>2 - x\\<^sub>1) = y\\<^sub>2 - y\\<^sub>1\""], ["proof (prove)\nusing this:\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n\ngoal (1 subgoal):\n 1. l * (x\\<^sub>2 - x\\<^sub>1) = y\\<^sub>2 - y\\<^sub>1", "by simp"], ["proof (state)\nthis:\n  l * (x\\<^sub>2 - x\\<^sub>1) = y\\<^sub>2 - y\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "also"], ["proof (state)\nthis:\n  l * (x\\<^sub>2 - x\\<^sub>1) = y\\<^sub>2 - y\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "have \"- y\\<^sub>1 - (y\\<^sub>2 - y\\<^sub>1) = (- y\\<^sub>1 + y\\<^sub>1) + - y\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - y\\<^sub>1 - (y\\<^sub>2 - y\\<^sub>1) =\n    - y\\<^sub>1 + y\\<^sub>1 + - y\\<^sub>2", "by simp"], ["proof (state)\nthis:\n  - y\\<^sub>1 - (y\\<^sub>2 - y\\<^sub>1) =\n  - y\\<^sub>1 + y\\<^sub>1 + - y\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "finally"], ["proof (chain)\npicking this:\n  y\\<^sub>2 = - y\\<^sub>1 + y\\<^sub>1 + - y\\<^sub>2", "have \"y\\<^sub>2 = 0\""], ["proof (prove)\nusing this:\n  y\\<^sub>2 = - y\\<^sub>1 + y\\<^sub>1 + - y\\<^sub>2\n\ngoal (1 subgoal):\n 1. y\\<^sub>2 = (0::'a)", "by simp"], ["proof (state)\nthis:\n  y\\<^sub>2 = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "with \\<open>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\\<close> \\<open>on_curve a b p\\<^sub>2\\<close>"], ["proof (chain)\npicking this:\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  on_curve a b p\\<^sub>2\n  y\\<^sub>2 = (0::'a)", "have x2: \"x\\<^sub>2 ^ 3 = - (a * x\\<^sub>2 + b)\""], ["proof (prove)\nusing this:\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  on_curve a b p\\<^sub>2\n  y\\<^sub>2 = (0::'a)\n\ngoal (1 subgoal):\n 1. x\\<^sub>2 ^ 3 = - (a * x\\<^sub>2 + b)", "by (simp add: on_curve_def eq_neg_iff_add_eq_0 add.assoc del: minus_add_distrib)"], ["proof (state)\nthis:\n  x\\<^sub>2 ^ 3 = - (a * x\\<^sub>2 + b)\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "from \\<open>x\\<^sub>3 = l ^ 2 - x\\<^sub>1 - x\\<^sub>2\\<close> \\<open>x\\<^sub>3 = x\\<^sub>2\\<close>"], ["proof (chain)\npicking this:\n  x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  x\\<^sub>3 = x\\<^sub>2", "have \"l ^ 2 - x\\<^sub>1 - x\\<^sub>2 - x\\<^sub>2 = x\\<^sub>2 - x\\<^sub>2\""], ["proof (prove)\nusing this:\n  x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  x\\<^sub>3 = x\\<^sub>2\n\ngoal (1 subgoal):\n 1. l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2 - x\\<^sub>2 = x\\<^sub>2 - x\\<^sub>2", "by simp"], ["proof (state)\nthis:\n  l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2 - x\\<^sub>2 = x\\<^sub>2 - x\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "then"], ["proof (chain)\npicking this:\n  l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2 - x\\<^sub>2 = x\\<^sub>2 - x\\<^sub>2", "have \"l ^ 2 - x\\<^sub>1 - 2 * x\\<^sub>2 = 0\""], ["proof (prove)\nusing this:\n  l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2 - x\\<^sub>2 = x\\<^sub>2 - x\\<^sub>2\n\ngoal (1 subgoal):\n 1. l\\<^sup>2 - x\\<^sub>1 - (2::'a) * x\\<^sub>2 = (0::'a)", "by simp"], ["proof (state)\nthis:\n  l\\<^sup>2 - x\\<^sub>1 - (2::'a) * x\\<^sub>2 = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "then"], ["proof (chain)\npicking this:\n  l\\<^sup>2 - x\\<^sub>1 - (2::'a) * x\\<^sub>2 = (0::'a)", "have \"x\\<^sub>2 * (l ^ 2 - x\\<^sub>1 - 2 * x\\<^sub>2) = x\\<^sub>2 * 0\""], ["proof (prove)\nusing this:\n  l\\<^sup>2 - x\\<^sub>1 - (2::'a) * x\\<^sub>2 = (0::'a)\n\ngoal (1 subgoal):\n 1. x\\<^sub>2 * (l\\<^sup>2 - x\\<^sub>1 - (2::'a) * x\\<^sub>2) =\n    x\\<^sub>2 * (0::'a)", "by simp"], ["proof (state)\nthis:\n  x\\<^sub>2 * (l\\<^sup>2 - x\\<^sub>1 - (2::'a) * x\\<^sub>2) =\n  x\\<^sub>2 * (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "then"], ["proof (chain)\npicking this:\n  x\\<^sub>2 * (l\\<^sup>2 - x\\<^sub>1 - (2::'a) * x\\<^sub>2) =\n  x\\<^sub>2 * (0::'a)", "have \"(x\\<^sub>2 - x\\<^sub>1) * (2 * a * x\\<^sub>2 + 3 * b) = 0\""], ["proof (prove)\nusing this:\n  x\\<^sub>2 * (l\\<^sup>2 - x\\<^sub>1 - (2::'a) * x\\<^sub>2) =\n  x\\<^sub>2 * (0::'a)\n\ngoal (1 subgoal):\n 1. (x\\<^sub>2 - x\\<^sub>1) * ((2::'a) * a * x\\<^sub>2 + (3::'a) * b) =\n    (0::'a)", "apply (simp only: \\<open>l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\\<close> \\<open>y\\<^sub>2 = 0\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^sub>2 *\n    ((((0::'a) - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 - x\\<^sub>1 -\n     (2::'a) * x\\<^sub>2) =\n    x\\<^sub>2 * (0::'a) \\<Longrightarrow>\n    (x\\<^sub>2 - x\\<^sub>1) * ((2::'a) * a * x\\<^sub>2 + (3::'a) * b) =\n    (0::'a)", "apply (field (prems) y1 x2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (((2::'a) * a ^ 1 + (0::'a)) * x\\<^sub>2 ^ 1 +\n     ((- (2::'a) * a ^ 1 + (0::'a)) * x\\<^sub>1 ^ 1 +\n      ((3::'a) * b ^ 1 + (0::'a)))) *\n    x\\<^sub>2 ^ 1 +\n    ((- (3::'a) * b ^ 1 + (0::'a)) * x\\<^sub>1 ^ 1 + (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    (x\\<^sub>2 - x\\<^sub>1) * ((2::'a) * a * x\\<^sub>2 + (3::'a) * b) =\n    (0::'a)\n 2. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (ring y1 x2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (simp add: \\<open>x\\<^sub>1 \\<noteq> x\\<^sub>2\\<close> [symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (x\\<^sub>2 - x\\<^sub>1) * ((2::'a) * a * x\\<^sub>2 + (3::'a) * b) =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "with \\<open>x\\<^sub>1 \\<noteq> x\\<^sub>2\\<close>"], ["proof (chain)\npicking this:\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  (x\\<^sub>2 - x\\<^sub>1) * ((2::'a) * a * x\\<^sub>2 + (3::'a) * b) =\n  (0::'a)", "have \"2 * a * x\\<^sub>2 + 3 * b = 0\""], ["proof (prove)\nusing this:\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  (x\\<^sub>2 - x\\<^sub>1) * ((2::'a) * a * x\\<^sub>2 + (3::'a) * b) =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. (2::'a) * a * x\\<^sub>2 + (3::'a) * b = (0::'a)", "by simp"], ["proof (state)\nthis:\n  (2::'a) * a * x\\<^sub>2 + (3::'a) * b = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "then"], ["proof (chain)\npicking this:\n  (2::'a) * a * x\\<^sub>2 + (3::'a) * b = (0::'a)", "have \"2 * a * x\\<^sub>2 = - (3 * b)\""], ["proof (prove)\nusing this:\n  (2::'a) * a * x\\<^sub>2 + (3::'a) * b = (0::'a)\n\ngoal (1 subgoal):\n 1. (2::'a) * a * x\\<^sub>2 = - ((3::'a) * b)", "by (simp add: eq_neg_iff_add_eq_0)"], ["proof (state)\nthis:\n  (2::'a) * a * x\\<^sub>2 = - ((3::'a) * b)\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "from y2 [symmetric] \\<open>y\\<^sub>2 = 0\\<close>"], ["proof (chain)\npicking this:\n  x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b = y\\<^sub>2\\<^sup>2\n  y\\<^sub>2 = (0::'a)", "have \"(- (2 * a)) ^ 3 * (x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b) = 0\""], ["proof (prove)\nusing this:\n  x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b = y\\<^sub>2\\<^sup>2\n  y\\<^sub>2 = (0::'a)\n\ngoal (1 subgoal):\n 1. (- ((2::'a) * a)) ^ 3 * (x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b) = (0::'a)", "by simp"], ["proof (state)\nthis:\n  (- ((2::'a) * a)) ^ 3 * (x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "then"], ["proof (chain)\npicking this:\n  (- ((2::'a) * a)) ^ 3 * (x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b) = (0::'a)", "have \"b * (4 * a ^ 3 + 27 * b ^ 2) = 0\""], ["proof (prove)\nusing this:\n  (- ((2::'a) * a)) ^ 3 * (x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b) = (0::'a)\n\ngoal (1 subgoal):\n 1. b * ((4::'a) * a ^ 3 + (27::'a) * b\\<^sup>2) = (0::'a)", "apply (ring (prems) \\<open>2 * a * x\\<^sub>2 = - (3 * b)\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((4::'a) * b ^ 1 + (0::'a)) * a ^ 3 + ((27::'a) * b ^ 3 + (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    b * ((4::'a) * a ^ 3 + (27::'a) * b\\<^sup>2) = (0::'a)", "apply (ring \\<open>2 * a * x\\<^sub>2 = - (3 * b)\\<close>)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  b * ((4::'a) * a ^ 3 + (27::'a) * b\\<^sup>2) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "with ab"], ["proof (chain)\npicking this:\n  nonsingular a b\n  b * ((4::'a) * a ^ 3 + (27::'a) * b\\<^sup>2) = (0::'a)", "have \"b = 0\""], ["proof (prove)\nusing this:\n  nonsingular a b\n  b * ((4::'a) * a ^ 3 + (27::'a) * b\\<^sup>2) = (0::'a)\n\ngoal (1 subgoal):\n 1. b = (0::'a)", "by (simp add: nonsingular_def)"], ["proof (state)\nthis:\n  b = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "with \\<open>2 * a * x\\<^sub>2 + 3 * b = 0\\<close> ab"], ["proof (chain)\npicking this:\n  (2::'a) * a * x\\<^sub>2 + (3::'a) * b = (0::'a)\n  nonsingular a b\n  b = (0::'a)", "have \"x\\<^sub>2 = 0\""], ["proof (prove)\nusing this:\n  (2::'a) * a * x\\<^sub>2 + (3::'a) * b = (0::'a)\n  nonsingular a b\n  b = (0::'a)\n\ngoal (1 subgoal):\n 1. x\\<^sub>2 = (0::'a)", "by (simp add: nonsingular_def)"], ["proof (state)\nthis:\n  x\\<^sub>2 = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = Infinity", "from \\<open>l ^ 2 - x\\<^sub>1 - 2 * x\\<^sub>2 = 0\\<close>"], ["proof (chain)\npicking this:\n  l\\<^sup>2 - x\\<^sub>1 - (2::'a) * x\\<^sub>2 = (0::'a)", "show ?case"], ["proof (prove)\nusing this:\n  l\\<^sup>2 - x\\<^sub>1 - (2::'a) * x\\<^sub>2 = (0::'a)\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 = Infinity", "apply (simp add: \\<open>x\\<^sub>2 = 0\\<close> \\<open>y\\<^sub>2 = 0\\<close> \\<open>l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (y\\<^sub>1 / x\\<^sub>1)\\<^sup>2 = x\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>1 = Infinity", "apply (field (prems) y1 \\<open>b = 0\\<close>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((1::'a) * a ^ 1 + (0::'a)) * x\\<^sub>1 ^ 1 + (0::'a) =\n    (0::'a) \\<Longrightarrow>\n    p\\<^sub>1 = Infinity\n 2. x\\<^sub>1 \\<noteq> (0::'a)", "apply (insert ab \\<open>b = 0\\<close> \\<open>x\\<^sub>1 \\<noteq> x\\<^sub>2\\<close> \\<open>x\\<^sub>2 = 0\\<close>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>((1::'a) * a ^ 1 + (0::'a)) * x\\<^sub>1 ^ 1 + (0::'a) =\n             (0::'a);\n     nonsingular a b; b = (0::'a); x\\<^sub>1 \\<noteq> x\\<^sub>2;\n     x\\<^sub>2 = (0::'a)\\<rbrakk>\n    \\<Longrightarrow> p\\<^sub>1 = Infinity\n 2. \\<lbrakk>nonsingular a b; b = (0::'a); x\\<^sub>1 \\<noteq> x\\<^sub>2;\n     x\\<^sub>2 = (0::'a)\\<rbrakk>\n    \\<Longrightarrow> x\\<^sub>1 \\<noteq> (0::'a)", "apply (simp add: nonsingular_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nonsingular a b; b = (0::'a); x\\<^sub>1 \\<noteq> x\\<^sub>2;\n     x\\<^sub>2 = (0::'a)\\<rbrakk>\n    \\<Longrightarrow> x\\<^sub>1 \\<noteq> (0::'a)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  p\\<^sub>1 = Infinity\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma opp_add:\n  assumes p\\<^sub>1: \"on_curve a b p\\<^sub>1\"\n  and p\\<^sub>2: \"on_curve a b p\\<^sub>2\"\n  shows \"opp (add a p\\<^sub>1 p\\<^sub>2) = add a (opp p\\<^sub>1) (opp p\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n    ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)", "proof (cases p\\<^sub>1)"], ["proof (state)\ngoal (2 subgoals):\n 1. p\\<^sub>1 = Infinity \\<Longrightarrow>\n    opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n    ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)\n 2. \\<And>x21 x22.\n       p\\<^sub>1 = Point x21 x22 \\<Longrightarrow>\n       opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n       ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)", "case Infinity"], ["proof (state)\nthis:\n  p\\<^sub>1 = Infinity\n\ngoal (2 subgoals):\n 1. p\\<^sub>1 = Infinity \\<Longrightarrow>\n    opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n    ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)\n 2. \\<And>x21 x22.\n       p\\<^sub>1 = Point x21 x22 \\<Longrightarrow>\n       opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n       ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>1 = Infinity", "show ?thesis"], ["proof (prove)\nusing this:\n  p\\<^sub>1 = Infinity\n\ngoal (1 subgoal):\n 1. opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n    ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)", "by (simp add: add_def opp_def)"], ["proof (state)\nthis:\n  opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n  ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       p\\<^sub>1 = Point x21 x22 \\<Longrightarrow>\n       opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n       ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       p\\<^sub>1 = Point x21 x22 \\<Longrightarrow>\n       opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n       ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)", "case (Point x\\<^sub>1 y\\<^sub>1)"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       p\\<^sub>1 = Point x21 x22 \\<Longrightarrow>\n       opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n       ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n    ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)", "proof (cases p\\<^sub>2)"], ["proof (state)\ngoal (2 subgoals):\n 1. p\\<^sub>2 = Infinity \\<Longrightarrow>\n    opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n    ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)\n 2. \\<And>x21 x22.\n       p\\<^sub>2 = Point x21 x22 \\<Longrightarrow>\n       opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n       ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)", "case Infinity"], ["proof (state)\nthis:\n  p\\<^sub>2 = Infinity\n\ngoal (2 subgoals):\n 1. p\\<^sub>2 = Infinity \\<Longrightarrow>\n    opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n    ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)\n 2. \\<And>x21 x22.\n       p\\<^sub>2 = Point x21 x22 \\<Longrightarrow>\n       opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n       ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)", "with \\<open>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Infinity", "show ?thesis"], ["proof (prove)\nusing this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Infinity\n\ngoal (1 subgoal):\n 1. opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n    ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)", "by (simp add: add_def opp_def)"], ["proof (state)\nthis:\n  opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n  ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       p\\<^sub>2 = Point x21 x22 \\<Longrightarrow>\n       opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n       ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       p\\<^sub>2 = Point x21 x22 \\<Longrightarrow>\n       opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n       ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)", "case (Point x\\<^sub>2 y\\<^sub>2)"], ["proof (state)\nthis:\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       p\\<^sub>2 = Point x21 x22 \\<Longrightarrow>\n       opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n       ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)", "with \\<open>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\\<close> p\\<^sub>1 p\\<^sub>2"], ["proof (chain)\npicking this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2", "have \"x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b = y\\<^sub>1 ^ 2\"\n      \"x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b = y\\<^sub>2 ^ 2\""], ["proof (prove)\nusing this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n\ngoal (1 subgoal):\n 1. x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b = y\\<^sub>1\\<^sup>2 &&&\n    x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b = y\\<^sub>2\\<^sup>2", "by (simp_all add: on_curve_def)"], ["proof (state)\nthis:\n  x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b = y\\<^sub>1\\<^sup>2\n  x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b = y\\<^sub>2\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       p\\<^sub>2 = Point x21 x22 \\<Longrightarrow>\n       opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n       ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)", "with Point \\<open>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b = y\\<^sub>1\\<^sup>2\n  x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b = y\\<^sub>2\\<^sup>2", "show ?thesis"], ["proof (prove)\nusing this:\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b = y\\<^sub>1\\<^sup>2\n  x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b = y\\<^sub>2\\<^sup>2\n\ngoal (1 subgoal):\n 1. opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n    ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)", "apply (cases \"x\\<^sub>1 = x\\<^sub>2\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n     p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n     x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b = y\\<^sub>1\\<^sup>2;\n     x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b = y\\<^sub>2\\<^sup>2;\n     x\\<^sub>1 = x\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n                      ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)\n 2. \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n     p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n     x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b = y\\<^sub>1\\<^sup>2;\n     x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b = y\\<^sub>2\\<^sup>2;\n     x\\<^sub>1 \\<noteq> x\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n                      ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)", "apply (cases \"y\\<^sub>1 = - y\\<^sub>2\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n     p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n     x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b = y\\<^sub>1\\<^sup>2;\n     x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b = y\\<^sub>2\\<^sup>2;\n     x\\<^sub>1 = x\\<^sub>2; y\\<^sub>1 = - y\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n                      ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)\n 2. \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n     p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n     x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b = y\\<^sub>1\\<^sup>2;\n     x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b = y\\<^sub>2\\<^sup>2;\n     x\\<^sub>1 = x\\<^sub>2; y\\<^sub>1 \\<noteq> - y\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n                      ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)\n 3. \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n     p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n     x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b = y\\<^sub>1\\<^sup>2;\n     x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b = y\\<^sub>2\\<^sup>2;\n     x\\<^sub>1 \\<noteq> x\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n                      ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)", "apply (simp add: add_def opp_def Let_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n     p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n     x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b = y\\<^sub>1\\<^sup>2;\n     x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b = y\\<^sub>2\\<^sup>2;\n     x\\<^sub>1 = x\\<^sub>2; y\\<^sub>1 \\<noteq> - y\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n                      ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)\n 2. \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n     p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n     x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b = y\\<^sub>1\\<^sup>2;\n     x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b = y\\<^sub>2\\<^sup>2;\n     x\\<^sub>1 \\<noteq> x\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n                      ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)", "apply (simp add: add_def opp_def Let_def trans [OF minus_equation_iff eq_commute])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n     p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n     x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b = y\\<^sub>1\\<^sup>2;\n     x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b = y\\<^sub>2\\<^sup>2;\n     x\\<^sub>1 \\<noteq> x\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n                      ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)", "apply (simp add: add_def opp_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n     p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n     x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b = y\\<^sub>1\\<^sup>2;\n     x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b = y\\<^sub>2\\<^sup>2;\n     x\\<^sub>1 \\<noteq> x\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ((y\\<^sub>2 - y\\<^sub>1) /\n                       (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 =\n                      ((y\\<^sub>1 - y\\<^sub>2) /\n                       (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 \\<and>\n                      (y\\<^sub>2 - y\\<^sub>1) *\n                      (((y\\<^sub>2 - y\\<^sub>1) /\n                        (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n                       x\\<^sub>2 -\n                       (2::'a) * x\\<^sub>1) /\n                      (x\\<^sub>2 - x\\<^sub>1) =\n                      - ((y\\<^sub>1 - y\\<^sub>2) *\n                         (((y\\<^sub>1 - y\\<^sub>2) /\n                           (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n                          x\\<^sub>2 -\n                          (2::'a) * x\\<^sub>1) /\n                         (x\\<^sub>2 - x\\<^sub>1))", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n     p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n     x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b = y\\<^sub>1\\<^sup>2;\n     x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b = y\\<^sub>2\\<^sup>2;\n     x\\<^sub>1 \\<noteq> x\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ((y\\<^sub>2 - y\\<^sub>1) /\n                       (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 =\n                      ((y\\<^sub>1 - y\\<^sub>2) /\n                       (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2\n 2. \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n     p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n     x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b = y\\<^sub>1\\<^sup>2;\n     x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b = y\\<^sub>2\\<^sup>2;\n     x\\<^sub>1 \\<noteq> x\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> (y\\<^sub>2 - y\\<^sub>1) *\n                      (((y\\<^sub>2 - y\\<^sub>1) /\n                        (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n                       x\\<^sub>2 -\n                       (2::'a) * x\\<^sub>1) /\n                      (x\\<^sub>2 - x\\<^sub>1) =\n                      - ((y\\<^sub>1 - y\\<^sub>2) *\n                         (((y\\<^sub>1 - y\\<^sub>2) /\n                           (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n                          x\\<^sub>2 -\n                          (2::'a) * x\\<^sub>1) /\n                         (x\\<^sub>2 - x\\<^sub>1))", "apply field"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n     p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n     x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b = y\\<^sub>1\\<^sup>2;\n     x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b = y\\<^sub>2\\<^sup>2;\n     x\\<^sub>1 \\<noteq> x\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)\n 2. \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n     p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n     x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b = y\\<^sub>1\\<^sup>2;\n     x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b = y\\<^sub>2\\<^sup>2;\n     x\\<^sub>1 \\<noteq> x\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> (y\\<^sub>2 - y\\<^sub>1) *\n                      (((y\\<^sub>2 - y\\<^sub>1) /\n                        (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n                       x\\<^sub>2 -\n                       (2::'a) * x\\<^sub>1) /\n                      (x\\<^sub>2 - x\\<^sub>1) =\n                      - ((y\\<^sub>1 - y\\<^sub>2) *\n                         (((y\\<^sub>1 - y\\<^sub>2) /\n                           (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n                          x\\<^sub>2 -\n                          (2::'a) * x\\<^sub>1) /\n                         (x\\<^sub>2 - x\\<^sub>1))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n     p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n     x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b = y\\<^sub>1\\<^sup>2;\n     x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b = y\\<^sub>2\\<^sup>2;\n     x\\<^sub>1 \\<noteq> x\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> (y\\<^sub>2 - y\\<^sub>1) *\n                      (((y\\<^sub>2 - y\\<^sub>1) /\n                        (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n                       x\\<^sub>2 -\n                       (2::'a) * x\\<^sub>1) /\n                      (x\\<^sub>2 - x\\<^sub>1) =\n                      - ((y\\<^sub>1 - y\\<^sub>2) *\n                         (((y\\<^sub>1 - y\\<^sub>2) /\n                           (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n                          x\\<^sub>2 -\n                          (2::'a) * x\\<^sub>1) /\n                         (x\\<^sub>2 - x\\<^sub>1))", "apply field"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n     p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n     x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b = y\\<^sub>1\\<^sup>2;\n     x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b = y\\<^sub>2\\<^sup>2;\n     x\\<^sub>1 \\<noteq> x\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n  ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n  ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma compat_add_opp:\n  assumes p\\<^sub>1: \"on_curve a b p\\<^sub>1\"\n  and p\\<^sub>2: \"on_curve a b p\\<^sub>2\"\n  and \"add a p\\<^sub>1 p\\<^sub>2 = add a p\\<^sub>1 (opp p\\<^sub>2)\"\n  and \"p\\<^sub>1 \\<noteq> opp p\\<^sub>1\"\n  shows \"p\\<^sub>2 = opp p\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p\\<^sub>2 = opp p\\<^sub>2", "using p\\<^sub>1 p\\<^sub>2 assms"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n  ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2)\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>1\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 = opp p\\<^sub>2", "proof (induct rule: add_case)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b Infinity; on_curve a b p;\n        p = ell_field_class.add a Infinity (opp p);\n        Infinity \\<noteq> opp Infinity\\<rbrakk>\n       \\<Longrightarrow> p = opp p\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        p = ell_field_class.add a p (opp Infinity);\n        p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> Infinity = opp Infinity\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        Infinity = ell_field_class.add a p (opp (opp p));\n        p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> opp p = opp (opp p)\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = opp p\\<^sub>1\n 5. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = opp p\\<^sub>2", "case InfL"], ["proof (state)\nthis:\n  on_curve a b Infinity\n  on_curve a b p_\n  p_ = ell_field_class.add a Infinity (opp p_)\n  Infinity \\<noteq> opp Infinity\n\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b Infinity; on_curve a b p;\n        p = ell_field_class.add a Infinity (opp p);\n        Infinity \\<noteq> opp Infinity\\<rbrakk>\n       \\<Longrightarrow> p = opp p\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        p = ell_field_class.add a p (opp Infinity);\n        p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> Infinity = opp Infinity\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        Infinity = ell_field_class.add a p (opp (opp p));\n        p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> opp p = opp (opp p)\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = opp p\\<^sub>1\n 5. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = opp p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  on_curve a b Infinity\n  on_curve a b p_\n  p_ = ell_field_class.add a Infinity (opp p_)\n  Infinity \\<noteq> opp Infinity", "show ?case"], ["proof (prove)\nusing this:\n  on_curve a b Infinity\n  on_curve a b p_\n  p_ = ell_field_class.add a Infinity (opp p_)\n  Infinity \\<noteq> opp Infinity\n\ngoal (1 subgoal):\n 1. p_ = opp p_", "by (simp add: add_0_l)"], ["proof (state)\nthis:\n  p_ = opp p_\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        p = ell_field_class.add a p (opp Infinity);\n        p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> Infinity = opp Infinity\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        Infinity = ell_field_class.add a p (opp (opp p));\n        p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> opp p = opp (opp p)\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = opp p\\<^sub>1\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = opp p\\<^sub>2", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        p = ell_field_class.add a p (opp Infinity);\n        p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> Infinity = opp Infinity\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        Infinity = ell_field_class.add a p (opp (opp p));\n        p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> opp p = opp (opp p)\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = opp p\\<^sub>1\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = opp p\\<^sub>2", "case InfR"], ["proof (state)\nthis:\n  on_curve a b p_\n  on_curve a b Infinity\n  p_ = ell_field_class.add a p_ (opp Infinity)\n  p_ \\<noteq> opp p_\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        p = ell_field_class.add a p (opp Infinity);\n        p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> Infinity = opp Infinity\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        Infinity = ell_field_class.add a p (opp (opp p));\n        p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> opp p = opp (opp p)\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = opp p\\<^sub>1\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = opp p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  on_curve a b p_\n  on_curve a b Infinity\n  p_ = ell_field_class.add a p_ (opp Infinity)\n  p_ \\<noteq> opp p_", "show ?case"], ["proof (prove)\nusing this:\n  on_curve a b p_\n  on_curve a b Infinity\n  p_ = ell_field_class.add a p_ (opp Infinity)\n  p_ \\<noteq> opp p_\n\ngoal (1 subgoal):\n 1. Infinity = opp Infinity", "by (simp add: opp_def add_0_r)"], ["proof (state)\nthis:\n  Infinity = opp Infinity\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        Infinity = ell_field_class.add a p (opp (opp p));\n        p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> opp p = opp (opp p)\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = opp p\\<^sub>1\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = opp p\\<^sub>2", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        Infinity = ell_field_class.add a p (opp (opp p));\n        p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> opp p = opp (opp p)\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = opp p\\<^sub>1\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = opp p\\<^sub>2", "case (Opp p)"], ["proof (state)\nthis:\n  on_curve a b p\n  on_curve a b p\n  on_curve a b (opp p)\n  Infinity = ell_field_class.add a p (opp (opp p))\n  p \\<noteq> opp p\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        Infinity = ell_field_class.add a p (opp (opp p));\n        p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> opp p = opp (opp p)\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = opp p\\<^sub>1\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = opp p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  on_curve a b p\n  on_curve a b p\n  on_curve a b (opp p)\n  Infinity = ell_field_class.add a p (opp (opp p))\n  p \\<noteq> opp p", "have \"add a p p = Infinity\""], ["proof (prove)\nusing this:\n  on_curve a b p\n  on_curve a b p\n  on_curve a b (opp p)\n  Infinity = ell_field_class.add a p (opp (opp p))\n  p \\<noteq> opp p\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p p = Infinity", "by (simp add: opp_opp)"], ["proof (state)\nthis:\n  ell_field_class.add a p p = Infinity\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        Infinity = ell_field_class.add a p (opp (opp p));\n        p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> opp p = opp (opp p)\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = opp p\\<^sub>1\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = opp p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  ell_field_class.add a p p = Infinity", "have \"p = opp p\""], ["proof (prove)\nusing this:\n  ell_field_class.add a p p = Infinity\n\ngoal (1 subgoal):\n 1. p = opp p", "by (rule uniq_opp)"], ["proof (state)\nthis:\n  p = opp p\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        Infinity = ell_field_class.add a p (opp (opp p));\n        p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> opp p = opp (opp p)\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = opp p\\<^sub>1\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = opp p\\<^sub>2", "with \\<open>p \\<noteq> opp p\\<close>"], ["proof (chain)\npicking this:\n  p \\<noteq> opp p\n  p = opp p", "show ?case"], ["proof (prove)\nusing this:\n  p \\<noteq> opp p\n  p = opp p\n\ngoal (1 subgoal):\n 1. opp p = opp (opp p)", ".."], ["proof (state)\nthis:\n  opp p = opp (opp p)\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = opp p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = opp p\\<^sub>2", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = opp p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = opp p\\<^sub>2", "case (Tan p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l)"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1\n  y\\<^sub>1 \\<noteq> (0::'a)\n  l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1)\n  x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1\n  y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>1\n  p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1)\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>1\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = opp p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = opp p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1\n  y\\<^sub>1 \\<noteq> (0::'a)\n  l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1)\n  x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1\n  y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>1\n  p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1)\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>1", "have \"add a p\\<^sub>1 p\\<^sub>1 = Infinity\""], ["proof (prove)\nusing this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1\n  y\\<^sub>1 \\<noteq> (0::'a)\n  l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1)\n  x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1\n  y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>1\n  p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1)\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>1\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>1 = Infinity", "by (simp add: add_opp)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>1 = Infinity\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = opp p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = opp p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>1 = Infinity", "have \"p\\<^sub>1 = opp p\\<^sub>1\""], ["proof (prove)\nusing this:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>1 = Infinity\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 = opp p\\<^sub>1", "by (rule uniq_opp)"], ["proof (state)\nthis:\n  p\\<^sub>1 = opp p\\<^sub>1\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 = opp p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = opp p\\<^sub>2", "with \\<open>p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>1\n  p\\<^sub>1 = opp p\\<^sub>1", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>1\n  p\\<^sub>1 = opp p\\<^sub>1\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 = opp p\\<^sub>1", ".."], ["proof (state)\nthis:\n  p\\<^sub>1 = opp p\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = opp p\\<^sub>2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = opp p\\<^sub>2", "case (Gen p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l)"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2)\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = opp p\\<^sub>2", "have \"(2::'a) * 2 \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (2::'a) * (2::'a) \\<noteq> (0::'a)", "by (simp only: mult_eq_0_iff) simp"], ["proof (state)\nthis:\n  (2::'a) * (2::'a) \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = opp p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  (2::'a) * (2::'a) \\<noteq> (0::'a)", "have \"(4::'a) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  (2::'a) * (2::'a) \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. (4::'a) \\<noteq> (0::'a)", "by simp"], ["proof (state)\nthis:\n  (4::'a) \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = opp p\\<^sub>2", "from Gen"], ["proof (chain)\npicking this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2)\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>1", "have \"((- y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)) ^ 2 - x\\<^sub>1 - x\\<^sub>2 =\n    ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)) ^ 2 - x\\<^sub>1 - x\\<^sub>2\""], ["proof (prove)\nusing this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2)\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>1\n\ngoal (1 subgoal):\n 1. ((- y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 -\n    x\\<^sub>2 =\n    ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 -\n    x\\<^sub>2", "by (simp add: add_def opp_def Let_def)"], ["proof (state)\nthis:\n  ((- y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n  x\\<^sub>1 -\n  x\\<^sub>2 =\n  ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 - x\\<^sub>1 -\n  x\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = opp p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  ((- y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n  x\\<^sub>1 -\n  x\\<^sub>2 =\n  ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 - x\\<^sub>1 -\n  x\\<^sub>2", "show ?case"], ["proof (prove)\nusing this:\n  ((- y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n  x\\<^sub>1 -\n  x\\<^sub>2 =\n  ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 - x\\<^sub>1 -\n  x\\<^sub>2\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 = opp p\\<^sub>2", "apply (field (prems))"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((4::'a) * y\\<^sub>1 ^ 1 + (0::'a)) * y\\<^sub>2 ^ 1 + (0::'a) =\n    (0::'a) \\<Longrightarrow>\n    p\\<^sub>2 = opp p\\<^sub>2\n 2. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (insert \\<open>p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<close>\n      \\<open>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\\<close> \\<open>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\\<close> \\<open>4 \\<noteq> 0\\<close>)[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>((4::'a) * y\\<^sub>1 ^ 1 + (0::'a)) * y\\<^sub>2 ^ 1 + (0::'a) =\n             (0::'a);\n     p\\<^sub>1 \\<noteq> opp p\\<^sub>1;\n     p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n     p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n     (4::'a) \\<noteq> (0::'a)\\<rbrakk>\n    \\<Longrightarrow> p\\<^sub>2 = opp p\\<^sub>2\n 2. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (simp add: opp_def eq_neg_iff_add_eq_0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (simp add: \\<open>x\\<^sub>1 \\<noteq> x\\<^sub>2\\<close> [symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  p\\<^sub>2 = opp p\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma compat_add_triple:\n  assumes ab: \"nonsingular a b\"\n  and p: \"on_curve a b p\"\n  and \"p \\<noteq> opp p\"\n  and \"add a p p \\<noteq> opp p\"\n  shows \"add a (add a p p) (opp p) = p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a (ell_field_class.add a p p) (opp p) = p", "using add_closed [OF p p] opp_closed [OF p] assms"], ["proof (prove)\nusing this:\n  on_curve a b (ell_field_class.add a p p)\n  on_curve a b (opp p)\n  nonsingular a b\n  on_curve a b p\n  p \\<noteq> opp p\n  ell_field_class.add a p p \\<noteq> opp p\n\ngoal (1 subgoal):\n 1. ell_field_class.add a (ell_field_class.add a p p) (opp p) = p", "proof (induct \"add a p p\" \"opp p\" rule: add_case)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<lbrakk>Infinity = ell_field_class.add a p p; nonsingular a b;\n     on_curve a b p; p \\<noteq> opp p;\n     ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                       (opp p) =\n                      p\n 2. \\<lbrakk>Infinity = opp p; nonsingular a b; on_curve a b p;\n     p \\<noteq> opp p; ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                       (opp p) =\n                      p\n 3. \\<lbrakk>on_curve a b (ell_field_class.add a p p);\n     opp (ell_field_class.add a p p) = opp p; nonsingular a b;\n     on_curve a b p; p \\<noteq> opp p;\n     ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                       (opp p) =\n                      p\n 4. \\<And>x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 =\n        ell_field_class.add a (ell_field_class.add a p p)\n         (ell_field_class.add a p p);\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        ell_field_class.add a p p = opp p; nonsingular a b; on_curve a b p;\n        p \\<noteq> opp p; ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p\n 5. \\<And>x\\<^sub>1 y\\<^sub>1 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n       y\\<^sub>3 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 =\n        ell_field_class.add a (ell_field_class.add a p p) (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p; p \\<noteq> opp p;\n        ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p", "case InfL"], ["proof (state)\nthis:\n  Infinity = ell_field_class.add a p p\n  nonsingular a b\n  on_curve a b p\n  p \\<noteq> opp p\n  ell_field_class.add a p p \\<noteq> opp p\n\ngoal (5 subgoals):\n 1. \\<lbrakk>Infinity = ell_field_class.add a p p; nonsingular a b;\n     on_curve a b p; p \\<noteq> opp p;\n     ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                       (opp p) =\n                      p\n 2. \\<lbrakk>Infinity = opp p; nonsingular a b; on_curve a b p;\n     p \\<noteq> opp p; ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                       (opp p) =\n                      p\n 3. \\<lbrakk>on_curve a b (ell_field_class.add a p p);\n     opp (ell_field_class.add a p p) = opp p; nonsingular a b;\n     on_curve a b p; p \\<noteq> opp p;\n     ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                       (opp p) =\n                      p\n 4. \\<And>x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 =\n        ell_field_class.add a (ell_field_class.add a p p)\n         (ell_field_class.add a p p);\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        ell_field_class.add a p p = opp p; nonsingular a b; on_curve a b p;\n        p \\<noteq> opp p; ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p\n 5. \\<And>x\\<^sub>1 y\\<^sub>1 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n       y\\<^sub>3 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 =\n        ell_field_class.add a (ell_field_class.add a p p) (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p; p \\<noteq> opp p;\n        ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p", "from \\<open>p \\<noteq> opp p\\<close> uniq_opp [OF \\<open>Infinity = add a p p\\<close> [symmetric]]"], ["proof (chain)\npicking this:\n  p \\<noteq> opp p\n  p = opp p", "show ?case"], ["proof (prove)\nusing this:\n  p \\<noteq> opp p\n  p = opp p\n\ngoal (1 subgoal):\n 1. ell_field_class.add a (ell_field_class.add a p p) (opp p) = p", ".."], ["proof (state)\nthis:\n  ell_field_class.add a (ell_field_class.add a p p) (opp p) = p\n\ngoal (4 subgoals):\n 1. \\<lbrakk>Infinity = opp p; nonsingular a b; on_curve a b p;\n     p \\<noteq> opp p; ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                       (opp p) =\n                      p\n 2. \\<lbrakk>on_curve a b (ell_field_class.add a p p);\n     opp (ell_field_class.add a p p) = opp p; nonsingular a b;\n     on_curve a b p; p \\<noteq> opp p;\n     ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                       (opp p) =\n                      p\n 3. \\<And>x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 =\n        ell_field_class.add a (ell_field_class.add a p p)\n         (ell_field_class.add a p p);\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        ell_field_class.add a p p = opp p; nonsingular a b; on_curve a b p;\n        p \\<noteq> opp p; ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p\n 4. \\<And>x\\<^sub>1 y\\<^sub>1 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n       y\\<^sub>3 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 =\n        ell_field_class.add a (ell_field_class.add a p p) (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p; p \\<noteq> opp p;\n        ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>Infinity = opp p; nonsingular a b; on_curve a b p;\n     p \\<noteq> opp p; ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                       (opp p) =\n                      p\n 2. \\<lbrakk>on_curve a b (ell_field_class.add a p p);\n     opp (ell_field_class.add a p p) = opp p; nonsingular a b;\n     on_curve a b p; p \\<noteq> opp p;\n     ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                       (opp p) =\n                      p\n 3. \\<And>x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 =\n        ell_field_class.add a (ell_field_class.add a p p)\n         (ell_field_class.add a p p);\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        ell_field_class.add a p p = opp p; nonsingular a b; on_curve a b p;\n        p \\<noteq> opp p; ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p\n 4. \\<And>x\\<^sub>1 y\\<^sub>1 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n       y\\<^sub>3 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 =\n        ell_field_class.add a (ell_field_class.add a p p) (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p; p \\<noteq> opp p;\n        ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p", "case InfR"], ["proof (state)\nthis:\n  Infinity = opp p\n  nonsingular a b\n  on_curve a b p\n  p \\<noteq> opp p\n  ell_field_class.add a p p \\<noteq> opp p\n\ngoal (4 subgoals):\n 1. \\<lbrakk>Infinity = opp p; nonsingular a b; on_curve a b p;\n     p \\<noteq> opp p; ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                       (opp p) =\n                      p\n 2. \\<lbrakk>on_curve a b (ell_field_class.add a p p);\n     opp (ell_field_class.add a p p) = opp p; nonsingular a b;\n     on_curve a b p; p \\<noteq> opp p;\n     ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                       (opp p) =\n                      p\n 3. \\<And>x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 =\n        ell_field_class.add a (ell_field_class.add a p p)\n         (ell_field_class.add a p p);\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        ell_field_class.add a p p = opp p; nonsingular a b; on_curve a b p;\n        p \\<noteq> opp p; ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p\n 4. \\<And>x\\<^sub>1 y\\<^sub>1 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n       y\\<^sub>3 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 =\n        ell_field_class.add a (ell_field_class.add a p p) (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p; p \\<noteq> opp p;\n        ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p", "then"], ["proof (chain)\npicking this:\n  Infinity = opp p\n  nonsingular a b\n  on_curve a b p\n  p \\<noteq> opp p\n  ell_field_class.add a p p \\<noteq> opp p", "show ?case"], ["proof (prove)\nusing this:\n  Infinity = opp p\n  nonsingular a b\n  on_curve a b p\n  p \\<noteq> opp p\n  ell_field_class.add a p p \\<noteq> opp p\n\ngoal (1 subgoal):\n 1. ell_field_class.add a (ell_field_class.add a p p) (opp p) = p", "by (simp add: opp_def split: point.split_asm)"], ["proof (state)\nthis:\n  ell_field_class.add a (ell_field_class.add a p p) (opp p) = p\n\ngoal (3 subgoals):\n 1. \\<lbrakk>on_curve a b (ell_field_class.add a p p);\n     opp (ell_field_class.add a p p) = opp p; nonsingular a b;\n     on_curve a b p; p \\<noteq> opp p;\n     ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                       (opp p) =\n                      p\n 2. \\<And>x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 =\n        ell_field_class.add a (ell_field_class.add a p p)\n         (ell_field_class.add a p p);\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        ell_field_class.add a p p = opp p; nonsingular a b; on_curve a b p;\n        p \\<noteq> opp p; ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p\n 3. \\<And>x\\<^sub>1 y\\<^sub>1 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n       y\\<^sub>3 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 =\n        ell_field_class.add a (ell_field_class.add a p p) (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p; p \\<noteq> opp p;\n        ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>on_curve a b (ell_field_class.add a p p);\n     opp (ell_field_class.add a p p) = opp p; nonsingular a b;\n     on_curve a b p; p \\<noteq> opp p;\n     ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                       (opp p) =\n                      p\n 2. \\<And>x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 =\n        ell_field_class.add a (ell_field_class.add a p p)\n         (ell_field_class.add a p p);\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        ell_field_class.add a p p = opp p; nonsingular a b; on_curve a b p;\n        p \\<noteq> opp p; ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p\n 3. \\<And>x\\<^sub>1 y\\<^sub>1 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n       y\\<^sub>3 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 =\n        ell_field_class.add a (ell_field_class.add a p p) (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p; p \\<noteq> opp p;\n        ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p", "case Opp"], ["proof (state)\nthis:\n  on_curve a b (ell_field_class.add a p p)\n  opp (ell_field_class.add a p p) = opp p\n  nonsingular a b\n  on_curve a b p\n  p \\<noteq> opp p\n  ell_field_class.add a p p \\<noteq> opp p\n\ngoal (3 subgoals):\n 1. \\<lbrakk>on_curve a b (ell_field_class.add a p p);\n     opp (ell_field_class.add a p p) = opp p; nonsingular a b;\n     on_curve a b p; p \\<noteq> opp p;\n     ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                       (opp p) =\n                      p\n 2. \\<And>x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 =\n        ell_field_class.add a (ell_field_class.add a p p)\n         (ell_field_class.add a p p);\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        ell_field_class.add a p p = opp p; nonsingular a b; on_curve a b p;\n        p \\<noteq> opp p; ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p\n 3. \\<And>x\\<^sub>1 y\\<^sub>1 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n       y\\<^sub>3 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 =\n        ell_field_class.add a (ell_field_class.add a p p) (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p; p \\<noteq> opp p;\n        ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p", "then"], ["proof (chain)\npicking this:\n  on_curve a b (ell_field_class.add a p p)\n  opp (ell_field_class.add a p p) = opp p\n  nonsingular a b\n  on_curve a b p\n  p \\<noteq> opp p\n  ell_field_class.add a p p \\<noteq> opp p", "have \"opp (opp (add a p p)) = opp (opp p)\""], ["proof (prove)\nusing this:\n  on_curve a b (ell_field_class.add a p p)\n  opp (ell_field_class.add a p p) = opp p\n  nonsingular a b\n  on_curve a b p\n  p \\<noteq> opp p\n  ell_field_class.add a p p \\<noteq> opp p\n\ngoal (1 subgoal):\n 1. opp (opp (ell_field_class.add a p p)) = opp (opp p)", "by simp"], ["proof (state)\nthis:\n  opp (opp (ell_field_class.add a p p)) = opp (opp p)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>on_curve a b (ell_field_class.add a p p);\n     opp (ell_field_class.add a p p) = opp p; nonsingular a b;\n     on_curve a b p; p \\<noteq> opp p;\n     ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                       (opp p) =\n                      p\n 2. \\<And>x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 =\n        ell_field_class.add a (ell_field_class.add a p p)\n         (ell_field_class.add a p p);\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        ell_field_class.add a p p = opp p; nonsingular a b; on_curve a b p;\n        p \\<noteq> opp p; ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p\n 3. \\<And>x\\<^sub>1 y\\<^sub>1 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n       y\\<^sub>3 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 =\n        ell_field_class.add a (ell_field_class.add a p p) (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p; p \\<noteq> opp p;\n        ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p", "then"], ["proof (chain)\npicking this:\n  opp (opp (ell_field_class.add a p p)) = opp (opp p)", "have \"add a p p = p\""], ["proof (prove)\nusing this:\n  opp (opp (ell_field_class.add a p p)) = opp (opp p)\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p p = p", "by (simp add: opp_opp)"], ["proof (state)\nthis:\n  ell_field_class.add a p p = p\n\ngoal (3 subgoals):\n 1. \\<lbrakk>on_curve a b (ell_field_class.add a p p);\n     opp (ell_field_class.add a p p) = opp p; nonsingular a b;\n     on_curve a b p; p \\<noteq> opp p;\n     ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                       (opp p) =\n                      p\n 2. \\<And>x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 =\n        ell_field_class.add a (ell_field_class.add a p p)\n         (ell_field_class.add a p p);\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        ell_field_class.add a p p = opp p; nonsingular a b; on_curve a b p;\n        p \\<noteq> opp p; ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p\n 3. \\<And>x\\<^sub>1 y\\<^sub>1 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n       y\\<^sub>3 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 =\n        ell_field_class.add a (ell_field_class.add a p p) (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p; p \\<noteq> opp p;\n        ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p", "with uniq_zero [OF ab p p] \\<open>p \\<noteq> opp p\\<close>"], ["proof (chain)\npicking this:\n  ell_field_class.add a p p = p \\<Longrightarrow> p = Infinity\n  p \\<noteq> opp p\n  ell_field_class.add a p p = p", "show ?case"], ["proof (prove)\nusing this:\n  ell_field_class.add a p p = p \\<Longrightarrow> p = Infinity\n  p \\<noteq> opp p\n  ell_field_class.add a p p = p\n\ngoal (1 subgoal):\n 1. ell_field_class.add a (ell_field_class.add a p p) (opp p) = p", "by (simp add: opp_def)"], ["proof (state)\nthis:\n  ell_field_class.add a (ell_field_class.add a p p) (opp p) = p\n\ngoal (2 subgoals):\n 1. \\<And>x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 =\n        ell_field_class.add a (ell_field_class.add a p p)\n         (ell_field_class.add a p p);\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        ell_field_class.add a p p = opp p; nonsingular a b; on_curve a b p;\n        p \\<noteq> opp p; ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p\n 2. \\<And>x\\<^sub>1 y\\<^sub>1 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n       y\\<^sub>3 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 =\n        ell_field_class.add a (ell_field_class.add a p p) (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p; p \\<noteq> opp p;\n        ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 =\n        ell_field_class.add a (ell_field_class.add a p p)\n         (ell_field_class.add a p p);\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        ell_field_class.add a p p = opp p; nonsingular a b; on_curve a b p;\n        p \\<noteq> opp p; ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p\n 2. \\<And>x\\<^sub>1 y\\<^sub>1 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n       y\\<^sub>3 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 =\n        ell_field_class.add a (ell_field_class.add a p p) (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p; p \\<noteq> opp p;\n        ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p", "case Tan"], ["proof (state)\nthis:\n  ell_field_class.add a p p = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ =\n  ell_field_class.add a (ell_field_class.add a p p)\n   (ell_field_class.add a p p)\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  ell_field_class.add a p p = opp p\n  nonsingular a b\n  on_curve a b p\n  p \\<noteq> opp p\n  ell_field_class.add a p p \\<noteq> opp p\n\ngoal (2 subgoals):\n 1. \\<And>x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 =\n        ell_field_class.add a (ell_field_class.add a p p)\n         (ell_field_class.add a p p);\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        ell_field_class.add a p p = opp p; nonsingular a b; on_curve a b p;\n        p \\<noteq> opp p; ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p\n 2. \\<And>x\\<^sub>1 y\\<^sub>1 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n       y\\<^sub>3 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 =\n        ell_field_class.add a (ell_field_class.add a p p) (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p; p \\<noteq> opp p;\n        ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p", "then"], ["proof (chain)\npicking this:\n  ell_field_class.add a p p = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ =\n  ell_field_class.add a (ell_field_class.add a p p)\n   (ell_field_class.add a p p)\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  ell_field_class.add a p p = opp p\n  nonsingular a b\n  on_curve a b p\n  p \\<noteq> opp p\n  ell_field_class.add a p p \\<noteq> opp p", "show ?case"], ["proof (prove)\nusing this:\n  ell_field_class.add a p p = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ =\n  ell_field_class.add a (ell_field_class.add a p p)\n   (ell_field_class.add a p p)\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  ell_field_class.add a p p = opp p\n  nonsingular a b\n  on_curve a b p\n  p \\<noteq> opp p\n  ell_field_class.add a p p \\<noteq> opp p\n\ngoal (1 subgoal):\n 1. ell_field_class.add a (ell_field_class.add a p p) (opp p) = p", "by simp"], ["proof (state)\nthis:\n  ell_field_class.add a (ell_field_class.add a p p) (opp p) = p\n\ngoal (1 subgoal):\n 1. \\<And>x\\<^sub>1 y\\<^sub>1 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n       y\\<^sub>3 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 =\n        ell_field_class.add a (ell_field_class.add a p p) (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p; p \\<noteq> opp p;\n        ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x\\<^sub>1 y\\<^sub>1 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n       y\\<^sub>3 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 =\n        ell_field_class.add a (ell_field_class.add a p p) (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p; p \\<noteq> opp p;\n        ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p", "case (Gen x\\<^sub>1 y\\<^sub>1 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l)"], ["proof (state)\nthis:\n  ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1\n  opp p = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>3 = ell_field_class.add a (ell_field_class.add a p p) (opp p)\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\n  nonsingular a b\n  on_curve a b p\n  p \\<noteq> opp p\n  ell_field_class.add a p p \\<noteq> opp p\n\ngoal (1 subgoal):\n 1. \\<And>x\\<^sub>1 y\\<^sub>1 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n       y\\<^sub>3 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 =\n        ell_field_class.add a (ell_field_class.add a p p) (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p; p \\<noteq> opp p;\n        ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p", "from \\<open>opp p = Point x\\<^sub>2 y\\<^sub>2\\<close>"], ["proof (chain)\npicking this:\n  opp p = Point x\\<^sub>2 y\\<^sub>2", "have \"p = Point x\\<^sub>2 (- y\\<^sub>2)\""], ["proof (prove)\nusing this:\n  opp p = Point x\\<^sub>2 y\\<^sub>2\n\ngoal (1 subgoal):\n 1. p = Point x\\<^sub>2 (- y\\<^sub>2)", "by (auto simp add: opp_def split: point.split_asm)"], ["proof (state)\nthis:\n  p = Point x\\<^sub>2 (- y\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<And>x\\<^sub>1 y\\<^sub>1 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n       y\\<^sub>3 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 =\n        ell_field_class.add a (ell_field_class.add a p p) (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p; p \\<noteq> opp p;\n        ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p", "with \\<open>add a p p = Point x\\<^sub>1 y\\<^sub>1\\<close> [symmetric]"], ["proof (chain)\npicking this:\n  Point x\\<^sub>1 y\\<^sub>1 = ell_field_class.add a p p\n  p = Point x\\<^sub>2 (- y\\<^sub>2)", "obtain l' where l':\n    \"l' = (3 * x\\<^sub>2 ^ 2 + a) / (2 * - y\\<^sub>2)\"\n    and xy: \"x\\<^sub>1 = l' ^ 2 - 2 * x\\<^sub>2\"\n    \"y\\<^sub>1 = - (- y\\<^sub>2) - l' * (x\\<^sub>1 - x\\<^sub>2)\"\n    and y2: \"- y\\<^sub>2 \\<noteq> - (- y\\<^sub>2)\""], ["proof (prove)\nusing this:\n  Point x\\<^sub>1 y\\<^sub>1 = ell_field_class.add a p p\n  p = Point x\\<^sub>2 (- y\\<^sub>2)\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>l' =\n                 ((3::'a) * x\\<^sub>2\\<^sup>2 + a) /\n                 ((2::'a) * - y\\<^sub>2);\n         x\\<^sub>1 = l'\\<^sup>2 - (2::'a) * x\\<^sub>2;\n         y\\<^sub>1 = - (- y\\<^sub>2) - l' * (x\\<^sub>1 - x\\<^sub>2);\n         - y\\<^sub>2 \\<noteq> - (- y\\<^sub>2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp add: add_def Let_def split: if_split_asm)"], ["proof (state)\nthis:\n  l' = ((3::'a) * x\\<^sub>2\\<^sup>2 + a) / ((2::'a) * - y\\<^sub>2)\n  x\\<^sub>1 = l'\\<^sup>2 - (2::'a) * x\\<^sub>2\n  y\\<^sub>1 = - (- y\\<^sub>2) - l' * (x\\<^sub>1 - x\\<^sub>2)\n  - y\\<^sub>2 \\<noteq> - (- y\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<And>x\\<^sub>1 y\\<^sub>1 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n       y\\<^sub>3 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 =\n        ell_field_class.add a (ell_field_class.add a p p) (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p; p \\<noteq> opp p;\n        ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p", "have \"x\\<^sub>3 = x\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^sub>3 = x\\<^sub>2", "apply (simp add: xy\n      \\<open>l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\\<close> \\<open>x\\<^sub>3 = l ^ 2 - x\\<^sub>1 - x\\<^sub>2\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (l' * (l'\\<^sup>2 - (3::'a) * x\\<^sub>2) /\n     ((3::'a) * x\\<^sub>2 - l'\\<^sup>2))\\<^sup>2 =\n    l'\\<^sup>2", "apply field"], ["proof (prove)\ngoal (1 subgoal):\n 1. (3::'a) * x\\<^sub>2 - l'\\<^sup>2 \\<noteq> (0::'a)", "apply (insert \\<open>x\\<^sub>1 \\<noteq> x\\<^sub>2\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<Longrightarrow>\n    (3::'a) * x\\<^sub>2 - l'\\<^sup>2 \\<noteq> (0::'a)", "apply (simp add: xy)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  x\\<^sub>3 = x\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>x\\<^sub>1 y\\<^sub>1 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n       y\\<^sub>3 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 =\n        ell_field_class.add a (ell_field_class.add a p p) (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p; p \\<noteq> opp p;\n        ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p", "then"], ["proof (chain)\npicking this:\n  x\\<^sub>3 = x\\<^sub>2", "have \"p\\<^sub>3 = p \\<or> p\\<^sub>3 = opp p\""], ["proof (prove)\nusing this:\n  x\\<^sub>3 = x\\<^sub>2\n\ngoal (1 subgoal):\n 1. p\\<^sub>3 = p \\<or> p\\<^sub>3 = opp p", "by (rule curve_elt_opp [OF \\<open>p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\\<close> \\<open>p = Point x\\<^sub>2 (- y\\<^sub>2)\\<close>\n      add_closed [OF add_closed [OF p p] opp_closed [OF p],\n        folded \\<open>p\\<^sub>3 = add a (add a p p) (opp p)\\<close>]\n     \\<open>on_curve a b p\\<close>])"], ["proof (state)\nthis:\n  p\\<^sub>3 = p \\<or> p\\<^sub>3 = opp p\n\ngoal (1 subgoal):\n 1. \\<And>x\\<^sub>1 y\\<^sub>1 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3\n       y\\<^sub>3 l.\n       \\<lbrakk>ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1;\n        opp p = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 =\n        ell_field_class.add a (ell_field_class.add a p p) (opp p);\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        nonsingular a b; on_curve a b p; p \\<noteq> opp p;\n        ell_field_class.add a p p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a (ell_field_class.add a p p)\n                          (opp p) =\n                         p", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>3 = p \\<or> p\\<^sub>3 = opp p", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>3 = p \\<or> p\\<^sub>3 = opp p\n\ngoal (1 subgoal):\n 1. ell_field_class.add a (ell_field_class.add a p p) (opp p) = p", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. p\\<^sub>3 = p \\<Longrightarrow>\n    ell_field_class.add a (ell_field_class.add a p p) (opp p) = p\n 2. p\\<^sub>3 = opp p \\<Longrightarrow>\n    ell_field_class.add a (ell_field_class.add a p p) (opp p) = p", "assume \"p\\<^sub>3 = p\""], ["proof (state)\nthis:\n  p\\<^sub>3 = p\n\ngoal (2 subgoals):\n 1. p\\<^sub>3 = p \\<Longrightarrow>\n    ell_field_class.add a (ell_field_class.add a p p) (opp p) = p\n 2. p\\<^sub>3 = opp p \\<Longrightarrow>\n    ell_field_class.add a (ell_field_class.add a p p) (opp p) = p", "with \\<open>p\\<^sub>3 = add a (add a p p) (opp p)\\<close>"], ["proof (chain)\npicking this:\n  p\\<^sub>3 = ell_field_class.add a (ell_field_class.add a p p) (opp p)\n  p\\<^sub>3 = p", "show ?thesis"], ["proof (prove)\nusing this:\n  p\\<^sub>3 = ell_field_class.add a (ell_field_class.add a p p) (opp p)\n  p\\<^sub>3 = p\n\ngoal (1 subgoal):\n 1. ell_field_class.add a (ell_field_class.add a p p) (opp p) = p", "by simp"], ["proof (state)\nthis:\n  ell_field_class.add a (ell_field_class.add a p p) (opp p) = p\n\ngoal (1 subgoal):\n 1. p\\<^sub>3 = opp p \\<Longrightarrow>\n    ell_field_class.add a (ell_field_class.add a p p) (opp p) = p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p\\<^sub>3 = opp p \\<Longrightarrow>\n    ell_field_class.add a (ell_field_class.add a p p) (opp p) = p", "assume \"p\\<^sub>3 = opp p\""], ["proof (state)\nthis:\n  p\\<^sub>3 = opp p\n\ngoal (1 subgoal):\n 1. p\\<^sub>3 = opp p \\<Longrightarrow>\n    ell_field_class.add a (ell_field_class.add a p p) (opp p) = p", "with \\<open>p\\<^sub>3 = add a (add a p p) (opp p)\\<close>"], ["proof (chain)\npicking this:\n  p\\<^sub>3 = ell_field_class.add a (ell_field_class.add a p p) (opp p)\n  p\\<^sub>3 = opp p", "have \"add a (add a p p) (opp p) = opp p\""], ["proof (prove)\nusing this:\n  p\\<^sub>3 = ell_field_class.add a (ell_field_class.add a p p) (opp p)\n  p\\<^sub>3 = opp p\n\ngoal (1 subgoal):\n 1. ell_field_class.add a (ell_field_class.add a p p) (opp p) = opp p", "by simp"], ["proof (state)\nthis:\n  ell_field_class.add a (ell_field_class.add a p p) (opp p) = opp p\n\ngoal (1 subgoal):\n 1. p\\<^sub>3 = opp p \\<Longrightarrow>\n    ell_field_class.add a (ell_field_class.add a p p) (opp p) = p", "with ab add_closed [OF p p] opp_closed [OF p]"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b (ell_field_class.add a p p)\n  on_curve a b (opp p)\n  ell_field_class.add a (ell_field_class.add a p p) (opp p) = opp p", "have \"add a p p = Infinity\""], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b (ell_field_class.add a p p)\n  on_curve a b (opp p)\n  ell_field_class.add a (ell_field_class.add a p p) (opp p) = opp p\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p p = Infinity", "by (rule uniq_zero)"], ["proof (state)\nthis:\n  ell_field_class.add a p p = Infinity\n\ngoal (1 subgoal):\n 1. p\\<^sub>3 = opp p \\<Longrightarrow>\n    ell_field_class.add a (ell_field_class.add a p p) (opp p) = p", "with \\<open>add a p p = Point x\\<^sub>1 y\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1\n  ell_field_class.add a p p = Infinity", "show ?thesis"], ["proof (prove)\nusing this:\n  ell_field_class.add a p p = Point x\\<^sub>1 y\\<^sub>1\n  ell_field_class.add a p p = Infinity\n\ngoal (1 subgoal):\n 1. ell_field_class.add a (ell_field_class.add a p p) (opp p) = p", "by simp"], ["proof (state)\nthis:\n  ell_field_class.add a (ell_field_class.add a p p) (opp p) = p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ell_field_class.add a (ell_field_class.add a p p) (opp p) = p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma add_opp_double_opp:\n  assumes ab: \"nonsingular a b\"\n  and p\\<^sub>1: \"on_curve a b p\\<^sub>1\"\n  and p\\<^sub>2: \"on_curve a b p\\<^sub>2\"\n  and \"add a p\\<^sub>1 p\\<^sub>2 = opp p\\<^sub>1\"\n  shows \"p\\<^sub>2 = add a (opp p\\<^sub>1) (opp p\\<^sub>1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "proof (cases \"p\\<^sub>1 = opp p\\<^sub>1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p\\<^sub>1 = opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)\n 2. p\\<^sub>1 \\<noteq> opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "case True"], ["proof (state)\nthis:\n  p\\<^sub>1 = opp p\\<^sub>1\n\ngoal (2 subgoals):\n 1. p\\<^sub>1 = opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)\n 2. p\\<^sub>1 \\<noteq> opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "with assms"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = opp p\\<^sub>1\n  p\\<^sub>1 = opp p\\<^sub>1", "have \"add a p\\<^sub>2 p\\<^sub>1 = p\\<^sub>1\""], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = opp p\\<^sub>1\n  p\\<^sub>1 = opp p\\<^sub>1\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>2 p\\<^sub>1 = p\\<^sub>1", "by (simp add: add_comm)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>2 p\\<^sub>1 = p\\<^sub>1\n\ngoal (2 subgoals):\n 1. p\\<^sub>1 = opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)\n 2. p\\<^sub>1 \\<noteq> opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "with ab p\\<^sub>2 p\\<^sub>1"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>1\n  ell_field_class.add a p\\<^sub>2 p\\<^sub>1 = p\\<^sub>1", "have \"p\\<^sub>2 = Infinity\""], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>1\n  ell_field_class.add a p\\<^sub>2 p\\<^sub>1 = p\\<^sub>1\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 = Infinity", "by (rule uniq_zero)"], ["proof (state)\nthis:\n  p\\<^sub>2 = Infinity\n\ngoal (2 subgoals):\n 1. p\\<^sub>1 = opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)\n 2. p\\<^sub>1 \\<noteq> opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "also"], ["proof (state)\nthis:\n  p\\<^sub>2 = Infinity\n\ngoal (2 subgoals):\n 1. p\\<^sub>1 = opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)\n 2. p\\<^sub>1 \\<noteq> opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "from \\<open>on_curve a b p\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>1", "have \"\\<dots> = add a p\\<^sub>1 (opp p\\<^sub>1)\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n\ngoal (1 subgoal):\n 1. Infinity = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1)", "by (simp add: add_opp)"], ["proof (state)\nthis:\n  Infinity = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1)\n\ngoal (2 subgoals):\n 1. p\\<^sub>1 = opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)\n 2. p\\<^sub>1 \\<noteq> opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "also"], ["proof (state)\nthis:\n  Infinity = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1)\n\ngoal (2 subgoals):\n 1. p\\<^sub>1 = opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)\n 2. p\\<^sub>1 \\<noteq> opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "from True"], ["proof (chain)\npicking this:\n  p\\<^sub>1 = opp p\\<^sub>1", "have \"\\<dots> = add a (opp p\\<^sub>1) (opp p\\<^sub>1)\""], ["proof (prove)\nusing this:\n  p\\<^sub>1 = opp p\\<^sub>1\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1) =\n    ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "by simp"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1) =\n  ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)\n\ngoal (2 subgoals):\n 1. p\\<^sub>1 = opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)\n 2. p\\<^sub>1 \\<noteq> opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "finally"], ["proof (chain)\npicking this:\n  p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "show ?thesis"], ["proof (prove)\nusing this:\n  p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "."], ["proof (state)\nthis:\n  p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq> opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq> opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "case False"], ["proof (state)\nthis:\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>1\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq> opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "from p\\<^sub>1 p\\<^sub>2 False assms"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>1\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = opp p\\<^sub>1", "show ?thesis"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>1\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = opp p\\<^sub>1\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "proof (induct rule: add_case)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>Infinity \\<noteq> opp Infinity; nonsingular a b;\n        on_curve a b Infinity; on_curve a b p; p = opp Infinity\\<rbrakk>\n       \\<Longrightarrow> p =\n                         ell_field_class.add a (opp Infinity) (opp Infinity)\n 2. \\<And>p.\n       \\<lbrakk>p \\<noteq> opp p; nonsingular a b; on_curve a b p;\n        on_curve a b Infinity; p = opp p\\<rbrakk>\n       \\<Longrightarrow> Infinity = ell_field_class.add a (opp p) (opp p)\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; p \\<noteq> opp p; nonsingular a b;\n        on_curve a b p; on_curve a b (opp p); Infinity = opp p\\<rbrakk>\n       \\<Longrightarrow> opp p = ell_field_class.add a (opp p) (opp p)\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)\n 5. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)", "case InfL"], ["proof (state)\nthis:\n  Infinity \\<noteq> opp Infinity\n  nonsingular a b\n  on_curve a b Infinity\n  on_curve a b p_\n  p_ = opp Infinity\n\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>Infinity \\<noteq> opp Infinity; nonsingular a b;\n        on_curve a b Infinity; on_curve a b p; p = opp Infinity\\<rbrakk>\n       \\<Longrightarrow> p =\n                         ell_field_class.add a (opp Infinity) (opp Infinity)\n 2. \\<And>p.\n       \\<lbrakk>p \\<noteq> opp p; nonsingular a b; on_curve a b p;\n        on_curve a b Infinity; p = opp p\\<rbrakk>\n       \\<Longrightarrow> Infinity = ell_field_class.add a (opp p) (opp p)\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; p \\<noteq> opp p; nonsingular a b;\n        on_curve a b p; on_curve a b (opp p); Infinity = opp p\\<rbrakk>\n       \\<Longrightarrow> opp p = ell_field_class.add a (opp p) (opp p)\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)\n 5. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)", "then"], ["proof (chain)\npicking this:\n  Infinity \\<noteq> opp Infinity\n  nonsingular a b\n  on_curve a b Infinity\n  on_curve a b p_\n  p_ = opp Infinity", "show ?case"], ["proof (prove)\nusing this:\n  Infinity \\<noteq> opp Infinity\n  nonsingular a b\n  on_curve a b Infinity\n  on_curve a b p_\n  p_ = opp Infinity\n\ngoal (1 subgoal):\n 1. p_ = ell_field_class.add a (opp Infinity) (opp Infinity)", "by simp"], ["proof (state)\nthis:\n  p_ = ell_field_class.add a (opp Infinity) (opp Infinity)\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> opp p; nonsingular a b; on_curve a b p;\n        on_curve a b Infinity; p = opp p\\<rbrakk>\n       \\<Longrightarrow> Infinity = ell_field_class.add a (opp p) (opp p)\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; p \\<noteq> opp p; nonsingular a b;\n        on_curve a b p; on_curve a b (opp p); Infinity = opp p\\<rbrakk>\n       \\<Longrightarrow> opp p = ell_field_class.add a (opp p) (opp p)\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> opp p; nonsingular a b; on_curve a b p;\n        on_curve a b Infinity; p = opp p\\<rbrakk>\n       \\<Longrightarrow> Infinity = ell_field_class.add a (opp p) (opp p)\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; p \\<noteq> opp p; nonsingular a b;\n        on_curve a b p; on_curve a b (opp p); Infinity = opp p\\<rbrakk>\n       \\<Longrightarrow> opp p = ell_field_class.add a (opp p) (opp p)\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)", "case InfR"], ["proof (state)\nthis:\n  p_ \\<noteq> opp p_\n  nonsingular a b\n  on_curve a b p_\n  on_curve a b Infinity\n  p_ = opp p_\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> opp p; nonsingular a b; on_curve a b p;\n        on_curve a b Infinity; p = opp p\\<rbrakk>\n       \\<Longrightarrow> Infinity = ell_field_class.add a (opp p) (opp p)\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; p \\<noteq> opp p; nonsingular a b;\n        on_curve a b p; on_curve a b (opp p); Infinity = opp p\\<rbrakk>\n       \\<Longrightarrow> opp p = ell_field_class.add a (opp p) (opp p)\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)", "then"], ["proof (chain)\npicking this:\n  p_ \\<noteq> opp p_\n  nonsingular a b\n  on_curve a b p_\n  on_curve a b Infinity\n  p_ = opp p_", "show ?case"], ["proof (prove)\nusing this:\n  p_ \\<noteq> opp p_\n  nonsingular a b\n  on_curve a b p_\n  on_curve a b Infinity\n  p_ = opp p_\n\ngoal (1 subgoal):\n 1. Infinity = ell_field_class.add a (opp p_) (opp p_)", "by simp"], ["proof (state)\nthis:\n  Infinity = ell_field_class.add a (opp p_) (opp p_)\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; p \\<noteq> opp p; nonsingular a b;\n        on_curve a b p; on_curve a b (opp p); Infinity = opp p\\<rbrakk>\n       \\<Longrightarrow> opp p = ell_field_class.add a (opp p) (opp p)\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; p \\<noteq> opp p; nonsingular a b;\n        on_curve a b p; on_curve a b (opp p); Infinity = opp p\\<rbrakk>\n       \\<Longrightarrow> opp p = ell_field_class.add a (opp p) (opp p)\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)", "case Opp"], ["proof (state)\nthis:\n  on_curve a b p_\n  p_ \\<noteq> opp p_\n  nonsingular a b\n  on_curve a b p_\n  on_curve a b (opp p_)\n  Infinity = opp p_\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; p \\<noteq> opp p; nonsingular a b;\n        on_curve a b p; on_curve a b (opp p); Infinity = opp p\\<rbrakk>\n       \\<Longrightarrow> opp p = ell_field_class.add a (opp p) (opp p)\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)", "then"], ["proof (chain)\npicking this:\n  on_curve a b p_\n  p_ \\<noteq> opp p_\n  nonsingular a b\n  on_curve a b p_\n  on_curve a b (opp p_)\n  Infinity = opp p_", "show ?case"], ["proof (prove)\nusing this:\n  on_curve a b p_\n  p_ \\<noteq> opp p_\n  nonsingular a b\n  on_curve a b p_\n  on_curve a b (opp p_)\n  Infinity = opp p_\n\ngoal (1 subgoal):\n 1. opp p_ = ell_field_class.add a (opp p_) (opp p_)", "by (simp add: add_0_l)"], ["proof (state)\nthis:\n  opp p_ = ell_field_class.add a (opp p_) (opp p_)\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)", "case (Tan p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l)"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1\n  y\\<^sub>1 \\<noteq> (0::'a)\n  l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1)\n  x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1\n  y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>1\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>1\n  p\\<^sub>2 = opp p\\<^sub>1\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)", "from \\<open>p\\<^sub>2 = opp p\\<^sub>1\\<close> \\<open>on_curve a b p\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  p\\<^sub>2 = opp p\\<^sub>1\n  on_curve a b p\\<^sub>1", "have \"p\\<^sub>1 = opp p\\<^sub>2\""], ["proof (prove)\nusing this:\n  p\\<^sub>2 = opp p\\<^sub>1\n  on_curve a b p\\<^sub>1\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 = opp p\\<^sub>2", "by (simp add: opp_opp)"], ["proof (state)\nthis:\n  p\\<^sub>1 = opp p\\<^sub>2\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)", "also"], ["proof (state)\nthis:\n  p\\<^sub>1 = opp p\\<^sub>2\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)", "note \\<open>p\\<^sub>2 = add a p\\<^sub>1 p\\<^sub>1\\<close>"], ["proof (state)\nthis:\n  p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>1 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)", "finally"], ["proof (chain)\npicking this:\n  p\\<^sub>1 = opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>1)", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>1 = opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>1)\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "using \\<open>on_curve a b p\\<^sub>1\\<close>"], ["proof (prove)\nusing this:\n  p\\<^sub>1 = opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>1)\n  on_curve a b p\\<^sub>1\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "by (simp add: opp_add)"], ["proof (state)\nthis:\n  p\\<^sub>1 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)", "case (Gen p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l)"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>1\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>3 = opp p\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)", "from \\<open>on_curve a b p\\<^sub>1\\<close> \\<open>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>1\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1", "have y\\<^sub>1: \"y\\<^sub>1 ^ 2 = x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n\ngoal (1 subgoal):\n 1. y\\<^sub>1\\<^sup>2 = x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b", "by (simp add: on_curve_def)"], ["proof (state)\nthis:\n  y\\<^sub>1\\<^sup>2 = x\\<^sub>1 ^ 3 + a * x\\<^sub>1 + b\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)", "from \\<open>on_curve a b p\\<^sub>2\\<close> \\<open>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>2\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2", "have y\\<^sub>2: \"y\\<^sub>2 ^ 2 = x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>2\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n\ngoal (1 subgoal):\n 1. y\\<^sub>2\\<^sup>2 = x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b", "by (simp add: on_curve_def)"], ["proof (state)\nthis:\n  y\\<^sub>2\\<^sup>2 = x\\<^sub>2 ^ 3 + a * x\\<^sub>2 + b\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)", "from \\<open>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\\<close> \\<open>p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>1", "have \"y\\<^sub>1 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>1\n\ngoal (1 subgoal):\n 1. y\\<^sub>1 \\<noteq> (0::'a)", "by (simp add: opp_Point)"], ["proof (state)\nthis:\n  y\\<^sub>1 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)", "from Gen"], ["proof (chain)\npicking this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>1\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>3 = opp p\\<^sub>1", "have \"x\\<^sub>1 = ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)) ^ 2 - x\\<^sub>1 - x\\<^sub>2\""], ["proof (prove)\nusing this:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>1\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>3 = opp p\\<^sub>1\n\ngoal (1 subgoal):\n 1. x\\<^sub>1 =\n    ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 -\n    x\\<^sub>2", "by (simp add: opp_Point)"], ["proof (state)\nthis:\n  x\\<^sub>1 =\n  ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 - x\\<^sub>1 -\n  x\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)", "then"], ["proof (chain)\npicking this:\n  x\\<^sub>1 =\n  ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 - x\\<^sub>1 -\n  x\\<^sub>2", "have \"2 * y\\<^sub>2 * y\\<^sub>1 = a * x\\<^sub>2 + 3 * x\\<^sub>2 * x\\<^sub>1 ^ 2 + a * x\\<^sub>1 -\n      x\\<^sub>1 ^ 3 + 2 * b\""], ["proof (prove)\nusing this:\n  x\\<^sub>1 =\n  ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 - x\\<^sub>1 -\n  x\\<^sub>2\n\ngoal (1 subgoal):\n 1. (2::'a) * y\\<^sub>2 * y\\<^sub>1 =\n    a * x\\<^sub>2 + (3::'a) * x\\<^sub>2 * x\\<^sub>1\\<^sup>2 +\n    a * x\\<^sub>1 -\n    x\\<^sub>1 ^ 3 +\n    (2::'a) * b", "apply (field (prems) y\\<^sub>1 y\\<^sub>2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((2::'a) * y\\<^sub>2 ^ 1 + (0::'a)) * y\\<^sub>1 ^ 1 +\n    ((((1::'a) * x\\<^sub>1 ^ 1 + (- (3::'a) * x\\<^sub>2 ^ 1 + (0::'a))) *\n      x\\<^sub>1 ^ 1 +\n      (of_int (- 1) * a ^ 1 + (0::'a))) *\n     x\\<^sub>1 ^ 1 +\n     ((of_int (- 1) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n      (- (2::'a) * b ^ 1 + (0::'a)))) =\n    (0::'a) \\<Longrightarrow>\n    (2::'a) * y\\<^sub>2 * y\\<^sub>1 =\n    a * x\\<^sub>2 + (3::'a) * x\\<^sub>2 * x\\<^sub>1\\<^sup>2 +\n    a * x\\<^sub>1 -\n    x\\<^sub>1 ^ 3 +\n    (2::'a) * b\n 2. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (field y\\<^sub>1 y\\<^sub>2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((2::'a) * y\\<^sub>2 ^ 1 + (0::'a)) * y\\<^sub>1 ^ 1 +\n    ((((1::'a) * x\\<^sub>1 ^ 1 + (- (3::'a) * x\\<^sub>2 ^ 1 + (0::'a))) *\n      x\\<^sub>1 ^ 1 +\n      (of_int (- 1) * a ^ 1 + (0::'a))) *\n     x\\<^sub>1 ^ 1 +\n     ((of_int (- 1) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n      (- (2::'a) * b ^ 1 + (0::'a)))) =\n    (0::'a) \\<Longrightarrow>\n    True\n 2. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (simp add: \\<open>x\\<^sub>1 \\<noteq> x\\<^sub>2\\<close> [symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (2::'a) * y\\<^sub>2 * y\\<^sub>1 =\n  a * x\\<^sub>2 + (3::'a) * x\\<^sub>2 * x\\<^sub>1\\<^sup>2 + a * x\\<^sub>1 -\n  x\\<^sub>1 ^ 3 +\n  (2::'a) * b\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)", "then"], ["proof (chain)\npicking this:\n  (2::'a) * y\\<^sub>2 * y\\<^sub>1 =\n  a * x\\<^sub>2 + (3::'a) * x\\<^sub>2 * x\\<^sub>1\\<^sup>2 + a * x\\<^sub>1 -\n  x\\<^sub>1 ^ 3 +\n  (2::'a) * b", "have \"(x\\<^sub>2 - (((3 * x\\<^sub>1 ^ 2 + a) / (2 * (- y\\<^sub>1))) ^ 2 -\n      2 * x\\<^sub>1)) * (x\\<^sub>2 - x\\<^sub>1) ^ 2 = 0\""], ["proof (prove)\nusing this:\n  (2::'a) * y\\<^sub>2 * y\\<^sub>1 =\n  a * x\\<^sub>2 + (3::'a) * x\\<^sub>2 * x\\<^sub>1\\<^sup>2 + a * x\\<^sub>1 -\n  x\\<^sub>1 ^ 3 +\n  (2::'a) * b\n\ngoal (1 subgoal):\n 1. (x\\<^sub>2 -\n     ((((3::'a) * x\\<^sub>1\\<^sup>2 + a) /\n       ((2::'a) * - y\\<^sub>1))\\<^sup>2 -\n      (2::'a) * x\\<^sub>1)) *\n    (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 =\n    (0::'a)", "apply (drule_tac f=\"\\<lambda>x. x ^ 2\" in arg_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((2::'a) * y\\<^sub>2 * y\\<^sub>1)\\<^sup>2 =\n    (a * x\\<^sub>2 + (3::'a) * x\\<^sub>2 * x\\<^sub>1\\<^sup>2 +\n     a * x\\<^sub>1 -\n     x\\<^sub>1 ^ 3 +\n     (2::'a) * b)\\<^sup>2 \\<Longrightarrow>\n    (x\\<^sub>2 -\n     ((((3::'a) * x\\<^sub>1\\<^sup>2 + a) /\n       ((2::'a) * - y\\<^sub>1))\\<^sup>2 -\n      (2::'a) * x\\<^sub>1)) *\n    (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 =\n    (0::'a)", "apply (field (prems) y\\<^sub>1 y\\<^sub>2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (((((of_int (- 1) * x\\<^sub>1 ^ 1 +\n         ((6::'a) * x\\<^sub>2 ^ 1 + (0::'a))) *\n        x\\<^sub>1 ^ 1 +\n        ((2::'a) * a ^ 1 + (- (9::'a) * x\\<^sub>2\\<^sup>2 + (0::'a)))) *\n       x\\<^sub>1 ^ 1 +\n       ((8::'a) * b ^ 1 + ((4::'a) * x\\<^sub>2 ^ 3 + (0::'a)))) *\n      x\\<^sub>1 ^ 1 +\n      ((of_int (- 1) * a ^ 1 + (- (6::'a) * x\\<^sub>2\\<^sup>2 + (0::'a))) *\n       a ^ 1 +\n       ((- (12::'a) * x\\<^sub>2 ^ 1 + (0::'a)) * b ^ 1 + (0::'a)))) *\n     x\\<^sub>1 ^ 1 +\n     ((((2::'a) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n       ((4::'a) * x\\<^sub>2 ^ 3 + (0::'a))) *\n      a ^ 1 +\n      (0::'a))) *\n    x\\<^sub>1 ^ 1 +\n    ((of_int (- 1) * x\\<^sub>2\\<^sup>2 + (0::'a)) * a\\<^sup>2 +\n     (((4::'a) * x\\<^sub>2 ^ 3 + (0::'a)) * b ^ 1 + (0::'a))) =\n    (0::'a) \\<Longrightarrow>\n    (x\\<^sub>2 -\n     ((((3::'a) * x\\<^sub>1\\<^sup>2 + a) /\n       ((2::'a) * - y\\<^sub>1))\\<^sup>2 -\n      (2::'a) * x\\<^sub>1)) *\n    (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 =\n    (0::'a)\n 2. True", "apply (field y\\<^sub>1 y\\<^sub>2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (((((of_int (- 1) * x\\<^sub>1 ^ 1 +\n         ((6::'a) * x\\<^sub>2 ^ 1 + (0::'a))) *\n        x\\<^sub>1 ^ 1 +\n        ((2::'a) * a ^ 1 + (- (9::'a) * x\\<^sub>2\\<^sup>2 + (0::'a)))) *\n       x\\<^sub>1 ^ 1 +\n       ((8::'a) * b ^ 1 + ((4::'a) * x\\<^sub>2 ^ 3 + (0::'a)))) *\n      x\\<^sub>1 ^ 1 +\n      ((of_int (- 1) * a ^ 1 + (- (6::'a) * x\\<^sub>2\\<^sup>2 + (0::'a))) *\n       a ^ 1 +\n       ((- (12::'a) * x\\<^sub>2 ^ 1 + (0::'a)) * b ^ 1 + (0::'a)))) *\n     x\\<^sub>1 ^ 1 +\n     ((((2::'a) * x\\<^sub>2 ^ 1 + (0::'a)) * a ^ 1 +\n       ((4::'a) * x\\<^sub>2 ^ 3 + (0::'a))) *\n      a ^ 1 +\n      (0::'a))) *\n    x\\<^sub>1 ^ 1 +\n    ((of_int (- 1) * x\\<^sub>2\\<^sup>2 + (0::'a)) * a\\<^sup>2 +\n     (((4::'a) * x\\<^sub>2 ^ 3 + (0::'a)) * b ^ 1 + (0::'a))) =\n    (0::'a) \\<Longrightarrow>\n    (2::'a) * - y\\<^sub>1 \\<noteq> (0::'a)\n 2. True", "apply (simp_all add: \\<open>y\\<^sub>1 \\<noteq> 0\\<close>)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (x\\<^sub>2 -\n   ((((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * - y\\<^sub>1))\\<^sup>2 -\n    (2::'a) * x\\<^sub>1)) *\n  (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)", "with \\<open>x\\<^sub>1 \\<noteq> x\\<^sub>2\\<close>"], ["proof (chain)\npicking this:\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  (x\\<^sub>2 -\n   ((((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * - y\\<^sub>1))\\<^sup>2 -\n    (2::'a) * x\\<^sub>1)) *\n  (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 =\n  (0::'a)", "have \"x\\<^sub>2 = ((3 * x\\<^sub>1 ^ 2 + a) / (2 * (- y\\<^sub>1))) ^ 2 - 2 * x\\<^sub>1\""], ["proof (prove)\nusing this:\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  (x\\<^sub>2 -\n   ((((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * - y\\<^sub>1))\\<^sup>2 -\n    (2::'a) * x\\<^sub>1)) *\n  (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. x\\<^sub>2 =\n    (((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * - y\\<^sub>1))\\<^sup>2 -\n    (2::'a) * x\\<^sub>1", "by simp"], ["proof (state)\nthis:\n  x\\<^sub>2 =\n  (((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * - y\\<^sub>1))\\<^sup>2 -\n  (2::'a) * x\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)", "with \\<open>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\\<close> _ \\<open>on_curve a b p\\<^sub>2\\<close>\n      add_closed [OF\n        opp_closed [OF \\<open>on_curve a b p\\<^sub>1\\<close>] opp_closed [OF \\<open>on_curve a b p\\<^sub>1\\<close>]]"], ["proof (chain)\npicking this:\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  on_curve a b p\\<^sub>2\n  on_curve a b (ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1))\n  x\\<^sub>2 =\n  (((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * - y\\<^sub>1))\\<^sup>2 -\n  (2::'a) * x\\<^sub>1", "have \"p\\<^sub>2 = add a (opp p\\<^sub>1) (opp p\\<^sub>1) \\<or> p\\<^sub>2 = opp (add a (opp p\\<^sub>1) (opp p\\<^sub>1))\""], ["proof (prove)\nusing this:\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  on_curve a b p\\<^sub>2\n  on_curve a b (ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1))\n  x\\<^sub>2 =\n  (((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * - y\\<^sub>1))\\<^sup>2 -\n  (2::'a) * x\\<^sub>1\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1) \\<or>\n    p\\<^sub>2 = opp (ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1))", "apply (rule curve_elt_opp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1) =\n    Point\n     ((((3::'a) * x\\<^sub>1\\<^sup>2 + a) /\n       ((2::'a) * - y\\<^sub>1))\\<^sup>2 -\n      (2::'a) * x\\<^sub>1)\n     ?y\\<^sub>2", "apply (simp add: add_def opp_Point Let_def \\<open>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\\<close> \\<open>y\\<^sub>1 \\<noteq> 0\\<close>)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1) \\<or>\n  p\\<^sub>2 = opp (ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1))\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>1; nonsingular a b;\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 = opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 =\n                         ell_field_class.add a (opp p\\<^sub>1)\n                          (opp p\\<^sub>1)", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1) \\<or>\n  p\\<^sub>2 = opp (ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1))", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1) \\<or>\n  p\\<^sub>2 = opp (ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1))\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. p\\<^sub>2 =\n    ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1) \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)\n 2. p\\<^sub>2 =\n    opp (ell_field_class.add a (opp p\\<^sub>1)\n          (opp p\\<^sub>1)) \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "assume \"p\\<^sub>2 = opp (add a (opp p\\<^sub>1) (opp p\\<^sub>1))\""], ["proof (state)\nthis:\n  p\\<^sub>2 = opp (ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1))\n\ngoal (2 subgoals):\n 1. p\\<^sub>2 =\n    ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1) \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)\n 2. p\\<^sub>2 =\n    opp (ell_field_class.add a (opp p\\<^sub>1)\n          (opp p\\<^sub>1)) \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "with \\<open>on_curve a b p\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>1\n  p\\<^sub>2 = opp (ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1))", "have \"p\\<^sub>2 = add a p\\<^sub>1 p\\<^sub>1\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  p\\<^sub>2 = opp (ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1))\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1", "by (simp add: opp_add [of a b] opp_opp opp_closed)"], ["proof (state)\nthis:\n  p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1\n\ngoal (2 subgoals):\n 1. p\\<^sub>2 =\n    ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1) \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)\n 2. p\\<^sub>2 =\n    opp (ell_field_class.add a (opp p\\<^sub>1)\n          (opp p\\<^sub>1)) \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "proof (cases \"add a p\\<^sub>1 p\\<^sub>1 = opp p\\<^sub>1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>1 =\n    opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)\n 2. ell_field_class.add a p\\<^sub>1 p\\<^sub>1 \\<noteq>\n    opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "case True"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>1 = opp p\\<^sub>1\n\ngoal (2 subgoals):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>1 =\n    opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)\n 2. ell_field_class.add a p\\<^sub>1 p\\<^sub>1 \\<noteq>\n    opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "from \\<open>on_curve a b p\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>1", "show ?thesis"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "apply (simp add: opp_add [symmetric] \\<open>p\\<^sub>2 = add a p\\<^sub>1 p\\<^sub>1\\<close> True)"], ["proof (prove)\ngoal (1 subgoal):\n 1. on_curve a b p\\<^sub>1 \\<Longrightarrow>\n    opp p\\<^sub>1 = opp (opp p\\<^sub>1)", "apply (simp add: \\<open>p\\<^sub>3 = add a p\\<^sub>1 p\\<^sub>2\\<close> [simplified \\<open>p\\<^sub>3 = opp p\\<^sub>1\\<close>])"], ["proof (prove)\ngoal (1 subgoal):\n 1. on_curve a b p\\<^sub>1 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "apply (simp add: \\<open>p\\<^sub>2 = add a p\\<^sub>1 p\\<^sub>1\\<close> True add_opp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>1 \\<noteq>\n    opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>1 \\<noteq>\n    opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "case False"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>1 \\<noteq> opp p\\<^sub>1\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>1 \\<noteq>\n    opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "from \\<open>on_curve a b p\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>1", "have \"add a p\\<^sub>1 (opp p\\<^sub>2) = opp (add a (add a p\\<^sub>1 p\\<^sub>1) (opp p\\<^sub>1))\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2) =\n    opp (ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>1)\n          (opp p\\<^sub>1))", "by (simp add: \\<open>p\\<^sub>2 = add a p\\<^sub>1 p\\<^sub>1\\<close>\n            opp_add [of a b] add_closed opp_closed opp_opp add_comm [of a b])"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2) =\n  opp (ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>1)\n        (opp p\\<^sub>1))\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>1 \\<noteq>\n    opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "with ab \\<open>on_curve a b p\\<^sub>1\\<close> \\<open>p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<close> False"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>1\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>1 \\<noteq> opp p\\<^sub>1\n  ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2) =\n  opp (ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>1)\n        (opp p\\<^sub>1))", "have \"add a p\\<^sub>1 (opp p\\<^sub>2) = opp p\\<^sub>1\""], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>1\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>1 \\<noteq> opp p\\<^sub>1\n  ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2) =\n  opp (ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>1)\n        (opp p\\<^sub>1))\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2) = opp p\\<^sub>1", "by (simp add: compat_add_triple)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2) = opp p\\<^sub>1\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>1 \\<noteq>\n    opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "with \\<open>p\\<^sub>3 = add a p\\<^sub>1 p\\<^sub>2\\<close> \\<open>p\\<^sub>3 = opp p\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  p\\<^sub>3 = opp p\\<^sub>1\n  ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2) = opp p\\<^sub>1", "have \"add a p\\<^sub>1 p\\<^sub>2 = add a p\\<^sub>1 (opp p\\<^sub>2)\""], ["proof (prove)\nusing this:\n  p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  p\\<^sub>3 = opp p\\<^sub>1\n  ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2) = opp p\\<^sub>1\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2)", "by simp"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n  ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>1 \\<noteq>\n    opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "with \\<open>on_curve a b p\\<^sub>1\\<close> \\<open>on_curve a b p\\<^sub>2\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n  ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2)", "have \"p\\<^sub>2 = opp p\\<^sub>2\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n  ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 = opp p\\<^sub>2", "using \\<open>p\\<^sub>1 \\<noteq> opp p\\<^sub>1\\<close>"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n  ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2)\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>1\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 = opp p\\<^sub>2", "by (rule compat_add_opp)"], ["proof (state)\nthis:\n  p\\<^sub>2 = opp p\\<^sub>2\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>1 \\<noteq>\n    opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "with \\<open>on_curve a b p\\<^sub>1\\<close> \\<open>p\\<^sub>2 = add a p\\<^sub>1 p\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>1\n  p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1\n  p\\<^sub>2 = opp p\\<^sub>2", "show ?thesis"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1\n  p\\<^sub>2 = opp p\\<^sub>2\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "by (simp add: opp_add)"], ["proof (state)\nthis:\n  p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 =\n    ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1) \\<Longrightarrow>\n    p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "qed"], ["proof (state)\nthis:\n  p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cancel:\n  assumes ab: \"nonsingular a b\"\n  and p\\<^sub>1: \"on_curve a b p\\<^sub>1\"\n  and p\\<^sub>2: \"on_curve a b p\\<^sub>2\"\n  and p\\<^sub>3: \"on_curve a b p\\<^sub>3\"\n  and eq: \"add a p\\<^sub>1 p\\<^sub>2 = add a p\\<^sub>1 p\\<^sub>3\"\n  shows \"p\\<^sub>2 = p\\<^sub>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p\\<^sub>2 = p\\<^sub>3", "using p\\<^sub>1 p\\<^sub>2 p\\<^sub>1 p\\<^sub>2 eq"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>3\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 = p\\<^sub>3", "proof (induct rule: add_casew)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b Infinity; on_curve a b p;\n        p = ell_field_class.add a Infinity p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> p = p\\<^sub>3\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        p = ell_field_class.add a p p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> Infinity = p\\<^sub>3\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        Infinity = ell_field_class.add a p p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> opp p = p\\<^sub>3\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n        x\\<^sub>1 = x\\<^sub>2 \\<and>\n        y\\<^sub>1 = y\\<^sub>2 \\<and>\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1) \\<or>\n        x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<and>\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "case InfL"], ["proof (state)\nthis:\n  on_curve a b Infinity\n  on_curve a b p_\n  p_ = ell_field_class.add a Infinity p\\<^sub>3\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b Infinity; on_curve a b p;\n        p = ell_field_class.add a Infinity p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> p = p\\<^sub>3\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        p = ell_field_class.add a p p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> Infinity = p\\<^sub>3\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        Infinity = ell_field_class.add a p p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> opp p = p\\<^sub>3\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n        x\\<^sub>1 = x\\<^sub>2 \\<and>\n        y\\<^sub>1 = y\\<^sub>2 \\<and>\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1) \\<or>\n        x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<and>\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  on_curve a b Infinity\n  on_curve a b p_\n  p_ = ell_field_class.add a Infinity p\\<^sub>3", "show ?case"], ["proof (prove)\nusing this:\n  on_curve a b Infinity\n  on_curve a b p_\n  p_ = ell_field_class.add a Infinity p\\<^sub>3\n\ngoal (1 subgoal):\n 1. p_ = p\\<^sub>3", "by (simp add: add_0_l)"], ["proof (state)\nthis:\n  p_ = p\\<^sub>3\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        p = ell_field_class.add a p p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> Infinity = p\\<^sub>3\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        Infinity = ell_field_class.add a p p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> opp p = p\\<^sub>3\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n        x\\<^sub>1 = x\\<^sub>2 \\<and>\n        y\\<^sub>1 = y\\<^sub>2 \\<and>\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1) \\<or>\n        x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<and>\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        p = ell_field_class.add a p p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> Infinity = p\\<^sub>3\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        Infinity = ell_field_class.add a p p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> opp p = p\\<^sub>3\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n        x\\<^sub>1 = x\\<^sub>2 \\<and>\n        y\\<^sub>1 = y\\<^sub>2 \\<and>\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1) \\<or>\n        x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<and>\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "case (InfR p)"], ["proof (state)\nthis:\n  on_curve a b p\n  on_curve a b Infinity\n  p = ell_field_class.add a p p\\<^sub>3\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        p = ell_field_class.add a p p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> Infinity = p\\<^sub>3\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        Infinity = ell_field_class.add a p p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> opp p = p\\<^sub>3\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n        x\\<^sub>1 = x\\<^sub>2 \\<and>\n        y\\<^sub>1 = y\\<^sub>2 \\<and>\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1) \\<or>\n        x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<and>\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "with p\\<^sub>3"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>3\n  on_curve a b p\n  on_curve a b Infinity\n  p = ell_field_class.add a p p\\<^sub>3", "have \"add a p\\<^sub>3 p = p\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>3\n  on_curve a b p\n  on_curve a b Infinity\n  p = ell_field_class.add a p p\\<^sub>3\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>3 p = p", "by (simp add: add_comm)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>3 p = p\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        p = ell_field_class.add a p p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> Infinity = p\\<^sub>3\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        Infinity = ell_field_class.add a p p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> opp p = p\\<^sub>3\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n        x\\<^sub>1 = x\\<^sub>2 \\<and>\n        y\\<^sub>1 = y\\<^sub>2 \\<and>\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1) \\<or>\n        x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<and>\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "with ab p\\<^sub>3 \\<open>on_curve a b p\\<close>"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>3\n  on_curve a b p\n  ell_field_class.add a p\\<^sub>3 p = p", "show ?case"], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>3\n  on_curve a b p\n  ell_field_class.add a p\\<^sub>3 p = p\n\ngoal (1 subgoal):\n 1. Infinity = p\\<^sub>3", "by (rule uniq_zero [symmetric])"], ["proof (state)\nthis:\n  Infinity = p\\<^sub>3\n\ngoal (2 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        Infinity = ell_field_class.add a p p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> opp p = p\\<^sub>3\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n        x\\<^sub>1 = x\\<^sub>2 \\<and>\n        y\\<^sub>1 = y\\<^sub>2 \\<and>\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1) \\<or>\n        x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<and>\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        Infinity = ell_field_class.add a p p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> opp p = p\\<^sub>3\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n        x\\<^sub>1 = x\\<^sub>2 \\<and>\n        y\\<^sub>1 = y\\<^sub>2 \\<and>\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1) \\<or>\n        x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<and>\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "case (Opp p)"], ["proof (state)\nthis:\n  on_curve a b p\n  on_curve a b p\n  on_curve a b (opp p)\n  Infinity = ell_field_class.add a p p\\<^sub>3\n\ngoal (2 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        Infinity = ell_field_class.add a p p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> opp p = p\\<^sub>3\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n        x\\<^sub>1 = x\\<^sub>2 \\<and>\n        y\\<^sub>1 = y\\<^sub>2 \\<and>\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1) \\<or>\n        x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<and>\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "from \\<open>Infinity = add a p p\\<^sub>3\\<close> [symmetric]"], ["proof (chain)\npicking this:\n  ell_field_class.add a p p\\<^sub>3 = Infinity", "show ?case"], ["proof (prove)\nusing this:\n  ell_field_class.add a p p\\<^sub>3 = Infinity\n\ngoal (1 subgoal):\n 1. opp p = p\\<^sub>3", "by (rule uniq_opp [symmetric])"], ["proof (state)\nthis:\n  opp p = p\\<^sub>3\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n        x\\<^sub>1 = x\\<^sub>2 \\<and>\n        y\\<^sub>1 = y\\<^sub>2 \\<and>\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1) \\<or>\n        x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<and>\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n        x\\<^sub>1 = x\\<^sub>2 \\<and>\n        y\\<^sub>1 = y\\<^sub>2 \\<and>\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1) \\<or>\n        x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<and>\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "case (Gen p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>4 x\\<^sub>4 y\\<^sub>4 l)"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>2\n  x\\<^sub>1 = x\\<^sub>2 \\<and>\n  y\\<^sub>1 = y\\<^sub>2 \\<and>\n  l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1) \\<or>\n  x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<and>\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>3\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3' x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3' = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n        x\\<^sub>1 = x\\<^sub>2 \\<and>\n        y\\<^sub>1 = y\\<^sub>2 \\<and>\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1) \\<or>\n        x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<and>\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3' = ell_field_class.add a p\\<^sub>1 p\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "from \\<open>on_curve a b p\\<^sub>1\\<close> p\\<^sub>3 \\<open>on_curve a b p\\<^sub>1\\<close> p\\<^sub>3 \\<open>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\\<close>\n    \\<open>p\\<^sub>4 = add a p\\<^sub>1 p\\<^sub>2\\<close> \\<open>p\\<^sub>4 = add a p\\<^sub>1 p\\<^sub>3\\<close> \\<open>p\\<^sub>1 \\<noteq> opp p\\<^sub>2\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>3\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>3\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>3\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>2", "show ?case"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>3\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>3\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>3\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>2\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 = p\\<^sub>3", "proof (induct rule: add_casew)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b Infinity; on_curve a b p;\n        Infinity = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a Infinity p\\<^sub>2; p\\<^sub>4 = p;\n        Infinity \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2; p\\<^sub>4 = p;\n        p \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = Infinity\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2; p\\<^sub>4 = Infinity;\n        p \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = opp p\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n        x\\<^sub>1' = x\\<^sub>2 \\<and>\n        y\\<^sub>1' = y\\<^sub>2 \\<and>\n        l =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1') \\<or>\n        x\\<^sub>1' \\<noteq> x\\<^sub>2 \\<and>\n        l = (y\\<^sub>2 - y\\<^sub>1') / (x\\<^sub>2 - x\\<^sub>1');\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1' - l * (x\\<^sub>3 - x\\<^sub>1');\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>4 = p\\<^sub>3; p\\<^sub>1 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>2", "case InfL"], ["proof (state)\nthis:\n  on_curve a b Infinity\n  on_curve a b p_\n  Infinity = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>4 = ell_field_class.add a Infinity p\\<^sub>2\n  p\\<^sub>4 = p_\n  Infinity \\<noteq> opp p\\<^sub>2\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b Infinity; on_curve a b p;\n        Infinity = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a Infinity p\\<^sub>2; p\\<^sub>4 = p;\n        Infinity \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2; p\\<^sub>4 = p;\n        p \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = Infinity\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2; p\\<^sub>4 = Infinity;\n        p \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = opp p\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n        x\\<^sub>1' = x\\<^sub>2 \\<and>\n        y\\<^sub>1' = y\\<^sub>2 \\<and>\n        l =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1') \\<or>\n        x\\<^sub>1' \\<noteq> x\\<^sub>2 \\<and>\n        l = (y\\<^sub>2 - y\\<^sub>1') / (x\\<^sub>2 - x\\<^sub>1');\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1' - l * (x\\<^sub>3 - x\\<^sub>1');\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>4 = p\\<^sub>3; p\\<^sub>1 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  on_curve a b Infinity\n  on_curve a b p_\n  Infinity = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>4 = ell_field_class.add a Infinity p\\<^sub>2\n  p\\<^sub>4 = p_\n  Infinity \\<noteq> opp p\\<^sub>2", "show ?case"], ["proof (prove)\nusing this:\n  on_curve a b Infinity\n  on_curve a b p_\n  Infinity = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>4 = ell_field_class.add a Infinity p\\<^sub>2\n  p\\<^sub>4 = p_\n  Infinity \\<noteq> opp p\\<^sub>2\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 = p_", "by (simp add: add_0_l)"], ["proof (state)\nthis:\n  p\\<^sub>2 = p_\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2; p\\<^sub>4 = p;\n        p \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = Infinity\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2; p\\<^sub>4 = Infinity;\n        p \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = opp p\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n        x\\<^sub>1' = x\\<^sub>2 \\<and>\n        y\\<^sub>1' = y\\<^sub>2 \\<and>\n        l =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1') \\<or>\n        x\\<^sub>1' \\<noteq> x\\<^sub>2 \\<and>\n        l = (y\\<^sub>2 - y\\<^sub>1') / (x\\<^sub>2 - x\\<^sub>1');\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1' - l * (x\\<^sub>3 - x\\<^sub>1');\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>4 = p\\<^sub>3; p\\<^sub>1 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>2", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2; p\\<^sub>4 = p;\n        p \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = Infinity\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2; p\\<^sub>4 = Infinity;\n        p \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = opp p\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n        x\\<^sub>1' = x\\<^sub>2 \\<and>\n        y\\<^sub>1' = y\\<^sub>2 \\<and>\n        l =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1') \\<or>\n        x\\<^sub>1' \\<noteq> x\\<^sub>2 \\<and>\n        l = (y\\<^sub>2 - y\\<^sub>1') / (x\\<^sub>2 - x\\<^sub>1');\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1' - l * (x\\<^sub>3 - x\\<^sub>1');\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>4 = p\\<^sub>3; p\\<^sub>1 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>2", "case (InfR p)"], ["proof (state)\nthis:\n  on_curve a b p\n  on_curve a b Infinity\n  p = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2\n  p\\<^sub>4 = p\n  p \\<noteq> opp p\\<^sub>2\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2; p\\<^sub>4 = p;\n        p \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = Infinity\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2; p\\<^sub>4 = Infinity;\n        p \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = opp p\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n        x\\<^sub>1' = x\\<^sub>2 \\<and>\n        y\\<^sub>1' = y\\<^sub>2 \\<and>\n        l =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1') \\<or>\n        x\\<^sub>1' \\<noteq> x\\<^sub>2 \\<and>\n        l = (y\\<^sub>2 - y\\<^sub>1') / (x\\<^sub>2 - x\\<^sub>1');\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1' - l * (x\\<^sub>3 - x\\<^sub>1');\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>4 = p\\<^sub>3; p\\<^sub>1 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>2", "with \\<open>on_curve a b p\\<^sub>2\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>2\n  on_curve a b p\n  on_curve a b Infinity\n  p = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2\n  p\\<^sub>4 = p\n  p \\<noteq> opp p\\<^sub>2", "have \"add a p\\<^sub>2 p = p\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>2\n  on_curve a b p\n  on_curve a b Infinity\n  p = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2\n  p\\<^sub>4 = p\n  p \\<noteq> opp p\\<^sub>2\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>2 p = p", "by (simp add: add_comm)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>2 p = p\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2; p\\<^sub>4 = p;\n        p \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = Infinity\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2; p\\<^sub>4 = Infinity;\n        p \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = opp p\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n        x\\<^sub>1' = x\\<^sub>2 \\<and>\n        y\\<^sub>1' = y\\<^sub>2 \\<and>\n        l =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1') \\<or>\n        x\\<^sub>1' \\<noteq> x\\<^sub>2 \\<and>\n        l = (y\\<^sub>2 - y\\<^sub>1') / (x\\<^sub>2 - x\\<^sub>1');\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1' - l * (x\\<^sub>3 - x\\<^sub>1');\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>4 = p\\<^sub>3; p\\<^sub>1 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>2", "with ab \\<open>on_curve a b p\\<^sub>2\\<close> \\<open>on_curve a b p\\<close>"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>2\n  on_curve a b p\n  ell_field_class.add a p\\<^sub>2 p = p", "show ?case"], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>2\n  on_curve a b p\n  ell_field_class.add a p\\<^sub>2 p = p\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 = Infinity", "by (rule uniq_zero)"], ["proof (state)\nthis:\n  p\\<^sub>2 = Infinity\n\ngoal (2 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2; p\\<^sub>4 = Infinity;\n        p \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = opp p\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n        x\\<^sub>1' = x\\<^sub>2 \\<and>\n        y\\<^sub>1' = y\\<^sub>2 \\<and>\n        l =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1') \\<or>\n        x\\<^sub>1' \\<noteq> x\\<^sub>2 \\<and>\n        l = (y\\<^sub>2 - y\\<^sub>1') / (x\\<^sub>2 - x\\<^sub>1');\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1' - l * (x\\<^sub>3 - x\\<^sub>1');\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>4 = p\\<^sub>3; p\\<^sub>1 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>2", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2; p\\<^sub>4 = Infinity;\n        p \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = opp p\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n        x\\<^sub>1' = x\\<^sub>2 \\<and>\n        y\\<^sub>1' = y\\<^sub>2 \\<and>\n        l =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1') \\<or>\n        x\\<^sub>1' \\<noteq> x\\<^sub>2 \\<and>\n        l = (y\\<^sub>2 - y\\<^sub>1') / (x\\<^sub>2 - x\\<^sub>1');\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1' - l * (x\\<^sub>3 - x\\<^sub>1');\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>4 = p\\<^sub>3; p\\<^sub>1 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>2", "case (Opp p)"], ["proof (state)\nthis:\n  on_curve a b p\n  on_curve a b p\n  on_curve a b (opp p)\n  p = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2\n  p\\<^sub>4 = Infinity\n  p \\<noteq> opp p\\<^sub>2\n\ngoal (2 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2; p\\<^sub>4 = Infinity;\n        p \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = opp p\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n        x\\<^sub>1' = x\\<^sub>2 \\<and>\n        y\\<^sub>1' = y\\<^sub>2 \\<and>\n        l =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1') \\<or>\n        x\\<^sub>1' \\<noteq> x\\<^sub>2 \\<and>\n        l = (y\\<^sub>2 - y\\<^sub>1') / (x\\<^sub>2 - x\\<^sub>1');\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1' - l * (x\\<^sub>3 - x\\<^sub>1');\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>4 = p\\<^sub>3; p\\<^sub>1 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  on_curve a b p\n  on_curve a b p\n  on_curve a b (opp p)\n  p = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2\n  p\\<^sub>4 = Infinity\n  p \\<noteq> opp p\\<^sub>2", "have \"add a p p\\<^sub>2 = Infinity\""], ["proof (prove)\nusing this:\n  on_curve a b p\n  on_curve a b p\n  on_curve a b (opp p)\n  p = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2\n  p\\<^sub>4 = Infinity\n  p \\<noteq> opp p\\<^sub>2\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p p\\<^sub>2 = Infinity", "by simp"], ["proof (state)\nthis:\n  ell_field_class.add a p p\\<^sub>2 = Infinity\n\ngoal (2 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        p = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a p p\\<^sub>2; p\\<^sub>4 = Infinity;\n        p \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = opp p\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n        x\\<^sub>1' = x\\<^sub>2 \\<and>\n        y\\<^sub>1' = y\\<^sub>2 \\<and>\n        l =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1') \\<or>\n        x\\<^sub>1' \\<noteq> x\\<^sub>2 \\<and>\n        l = (y\\<^sub>2 - y\\<^sub>1') / (x\\<^sub>2 - x\\<^sub>1');\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1' - l * (x\\<^sub>3 - x\\<^sub>1');\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>4 = p\\<^sub>3; p\\<^sub>1 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  ell_field_class.add a p p\\<^sub>2 = Infinity", "show ?case"], ["proof (prove)\nusing this:\n  ell_field_class.add a p p\\<^sub>2 = Infinity\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 = opp p", "by (rule uniq_opp)"], ["proof (state)\nthis:\n  p\\<^sub>2 = opp p\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n        x\\<^sub>1' = x\\<^sub>2 \\<and>\n        y\\<^sub>1' = y\\<^sub>2 \\<and>\n        l =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1') \\<or>\n        x\\<^sub>1' \\<noteq> x\\<^sub>2 \\<and>\n        l = (y\\<^sub>2 - y\\<^sub>1') / (x\\<^sub>2 - x\\<^sub>1');\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1' - l * (x\\<^sub>3 - x\\<^sub>1');\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>4 = p\\<^sub>3; p\\<^sub>1 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n        x\\<^sub>1' = x\\<^sub>2 \\<and>\n        y\\<^sub>1' = y\\<^sub>2 \\<and>\n        l =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1') \\<or>\n        x\\<^sub>1' \\<noteq> x\\<^sub>2 \\<and>\n        l = (y\\<^sub>2 - y\\<^sub>1') / (x\\<^sub>2 - x\\<^sub>1');\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1' - l * (x\\<^sub>3 - x\\<^sub>1');\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>4 = p\\<^sub>3; p\\<^sub>1 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>2", "case (Gen p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 p\\<^sub>5 x\\<^sub>5 y\\<^sub>5 l')"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>5 = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>5 = ell_field_class.add a p\\<^sub>1 p\\<^sub>3\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>3\n  x\\<^sub>1' = x\\<^sub>3 \\<and>\n  y\\<^sub>1' = y\\<^sub>3 \\<and>\n  l' = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1') \\<or>\n  x\\<^sub>1' \\<noteq> x\\<^sub>3 \\<and>\n  l' = (y\\<^sub>3 - y\\<^sub>1') / (x\\<^sub>3 - x\\<^sub>1')\n  x\\<^sub>5 = l'\\<^sup>2 - x\\<^sub>1' - x\\<^sub>3\n  y\\<^sub>5 = - y\\<^sub>1' - l' * (x\\<^sub>5 - x\\<^sub>1')\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>3\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  p\\<^sub>4 = p\\<^sub>5\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n        x\\<^sub>1' = x\\<^sub>2 \\<and>\n        y\\<^sub>1' = y\\<^sub>2 \\<and>\n        l =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1') \\<or>\n        x\\<^sub>1' \\<noteq> x\\<^sub>2 \\<and>\n        l = (y\\<^sub>2 - y\\<^sub>1') / (x\\<^sub>2 - x\\<^sub>1');\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1' - l * (x\\<^sub>3 - x\\<^sub>1');\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>4 = p\\<^sub>3; p\\<^sub>1 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>2", "from \\<open>p\\<^sub>4 = p\\<^sub>5\\<close> \\<open>p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\\<close> \\<open>p\\<^sub>5 = Point x\\<^sub>5 y\\<^sub>5\\<close>\n      \\<open>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\\<close> \\<open>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\\<close>\n      \\<open>y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\\<close> \\<open>y\\<^sub>5 = - y\\<^sub>1' - l' * (x\\<^sub>5 - x\\<^sub>1')\\<close>"], ["proof (chain)\npicking this:\n  p\\<^sub>4 = p\\<^sub>5\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>5 = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  y\\<^sub>5 = - y\\<^sub>1' - l' * (x\\<^sub>5 - x\\<^sub>1')", "have \"0 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1) - (- y\\<^sub>1 - l' * (x\\<^sub>4 - x\\<^sub>1))\""], ["proof (prove)\nusing this:\n  p\\<^sub>4 = p\\<^sub>5\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>5 = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  y\\<^sub>4 = - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1)\n  y\\<^sub>5 = - y\\<^sub>1' - l' * (x\\<^sub>5 - x\\<^sub>1')\n\ngoal (1 subgoal):\n 1. (0::'a) =\n    - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1) -\n    (- y\\<^sub>1 - l' * (x\\<^sub>4 - x\\<^sub>1))", "by auto"], ["proof (state)\nthis:\n  (0::'a) =\n  - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1) -\n  (- y\\<^sub>1 - l' * (x\\<^sub>4 - x\\<^sub>1))\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n        x\\<^sub>1' = x\\<^sub>2 \\<and>\n        y\\<^sub>1' = y\\<^sub>2 \\<and>\n        l =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1') \\<or>\n        x\\<^sub>1' \\<noteq> x\\<^sub>2 \\<and>\n        l = (y\\<^sub>2 - y\\<^sub>1') / (x\\<^sub>2 - x\\<^sub>1');\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1' - l * (x\\<^sub>3 - x\\<^sub>1');\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>4 = p\\<^sub>3; p\\<^sub>1 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  (0::'a) =\n  - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1) -\n  (- y\\<^sub>1 - l' * (x\\<^sub>4 - x\\<^sub>1))", "have \"l' = l \\<or> x\\<^sub>4 = x\\<^sub>1\""], ["proof (prove)\nusing this:\n  (0::'a) =\n  - y\\<^sub>1 - l * (x\\<^sub>4 - x\\<^sub>1) -\n  (- y\\<^sub>1 - l' * (x\\<^sub>4 - x\\<^sub>1))\n\ngoal (1 subgoal):\n 1. l' = l \\<or> x\\<^sub>4 = x\\<^sub>1", "by auto"], ["proof (state)\nthis:\n  l' = l \\<or> x\\<^sub>4 = x\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n        x\\<^sub>1' = x\\<^sub>2 \\<and>\n        y\\<^sub>1' = y\\<^sub>2 \\<and>\n        l =\n        ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1') \\<or>\n        x\\<^sub>1' \\<noteq> x\\<^sub>2 \\<and>\n        l = (y\\<^sub>2 - y\\<^sub>1') / (x\\<^sub>2 - x\\<^sub>1');\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1' - l * (x\\<^sub>3 - x\\<^sub>1');\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        p\\<^sub>4 = p\\<^sub>3; p\\<^sub>1 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  l' = l \\<or> x\\<^sub>4 = x\\<^sub>1", "show ?case"], ["proof (prove)\nusing this:\n  l' = l \\<or> x\\<^sub>4 = x\\<^sub>1\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 = p\\<^sub>3", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. l' = l \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3\n 2. x\\<^sub>4 = x\\<^sub>1 \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "assume \"l' = l\""], ["proof (state)\nthis:\n  l' = l\n\ngoal (2 subgoals):\n 1. l' = l \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3\n 2. x\\<^sub>4 = x\\<^sub>1 \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "with \\<open>p\\<^sub>4 = p\\<^sub>5\\<close> \\<open>p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\\<close> \\<open>p\\<^sub>5 = Point x\\<^sub>5 y\\<^sub>5\\<close>\n        \\<open>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\\<close> \\<open>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\\<close>\n        \\<open>x\\<^sub>4 = l ^ 2 - x\\<^sub>1 - x\\<^sub>2\\<close> \\<open>x\\<^sub>5 = l' ^ 2 - x\\<^sub>1' - x\\<^sub>3\\<close>"], ["proof (chain)\npicking this:\n  p\\<^sub>4 = p\\<^sub>5\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>5 = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  x\\<^sub>5 = l'\\<^sup>2 - x\\<^sub>1' - x\\<^sub>3\n  l' = l", "have \"0 = l ^ 2 - x\\<^sub>1 - x\\<^sub>2 - (l ^ 2 - x\\<^sub>1 - x\\<^sub>3)\""], ["proof (prove)\nusing this:\n  p\\<^sub>4 = p\\<^sub>5\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>5 = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  x\\<^sub>4 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  x\\<^sub>5 = l'\\<^sup>2 - x\\<^sub>1' - x\\<^sub>3\n  l' = l\n\ngoal (1 subgoal):\n 1. (0::'a) =\n    l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2 - (l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>3)", "by simp"], ["proof (state)\nthis:\n  (0::'a) =\n  l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2 - (l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>3)\n\ngoal (2 subgoals):\n 1. l' = l \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3\n 2. x\\<^sub>4 = x\\<^sub>1 \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  (0::'a) =\n  l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2 - (l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>3)", "have \"x\\<^sub>2 = x\\<^sub>3\""], ["proof (prove)\nusing this:\n  (0::'a) =\n  l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2 - (l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>3)\n\ngoal (1 subgoal):\n 1. x\\<^sub>2 = x\\<^sub>3", "by simp"], ["proof (state)\nthis:\n  x\\<^sub>2 = x\\<^sub>3\n\ngoal (2 subgoals):\n 1. l' = l \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3\n 2. x\\<^sub>4 = x\\<^sub>1 \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "with \\<open>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\\<close> \\<open>p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\\<close> \\<open>on_curve a b p\\<^sub>2\\<close> \\<open>on_curve a b p\\<^sub>3\\<close>"], ["proof (chain)\npicking this:\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n  x\\<^sub>2 = x\\<^sub>3", "have \"p\\<^sub>2 = p\\<^sub>3 \\<or> p\\<^sub>2 = opp p\\<^sub>3\""], ["proof (prove)\nusing this:\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n  x\\<^sub>2 = x\\<^sub>3\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 = p\\<^sub>3 \\<or> p\\<^sub>2 = opp p\\<^sub>3", "by (rule curve_elt_opp)"], ["proof (state)\nthis:\n  p\\<^sub>2 = p\\<^sub>3 \\<or> p\\<^sub>2 = opp p\\<^sub>3\n\ngoal (2 subgoals):\n 1. l' = l \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3\n 2. x\\<^sub>4 = x\\<^sub>1 \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>2 = p\\<^sub>3 \\<or> p\\<^sub>2 = opp p\\<^sub>3", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>2 = p\\<^sub>3 \\<or> p\\<^sub>2 = opp p\\<^sub>3\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 = p\\<^sub>3", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. p\\<^sub>2 = p\\<^sub>3 \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3\n 2. p\\<^sub>2 = opp p\\<^sub>3 \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "assume \"p\\<^sub>2 = opp p\\<^sub>3\""], ["proof (state)\nthis:\n  p\\<^sub>2 = opp p\\<^sub>3\n\ngoal (2 subgoals):\n 1. p\\<^sub>2 = p\\<^sub>3 \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3\n 2. p\\<^sub>2 = opp p\\<^sub>3 \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "with \\<open>on_curve a b p\\<^sub>3\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>3\n  p\\<^sub>2 = opp p\\<^sub>3", "have \"opp p\\<^sub>2 = p\\<^sub>3\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>3\n  p\\<^sub>2 = opp p\\<^sub>3\n\ngoal (1 subgoal):\n 1. opp p\\<^sub>2 = p\\<^sub>3", "by (simp add: opp_opp)"], ["proof (state)\nthis:\n  opp p\\<^sub>2 = p\\<^sub>3\n\ngoal (2 subgoals):\n 1. p\\<^sub>2 = p\\<^sub>3 \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3\n 2. p\\<^sub>2 = opp p\\<^sub>3 \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "with \\<open>p\\<^sub>4 = p\\<^sub>5\\<close> \\<open>p\\<^sub>4 = add a p\\<^sub>1 p\\<^sub>2\\<close> \\<open>p\\<^sub>5 = add a p\\<^sub>1 p\\<^sub>3\\<close>"], ["proof (chain)\npicking this:\n  p\\<^sub>4 = p\\<^sub>5\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  p\\<^sub>5 = ell_field_class.add a p\\<^sub>1 p\\<^sub>3\n  opp p\\<^sub>2 = p\\<^sub>3", "have \"add a p\\<^sub>1 p\\<^sub>2 = add a p\\<^sub>1 (opp p\\<^sub>2)\""], ["proof (prove)\nusing this:\n  p\\<^sub>4 = p\\<^sub>5\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  p\\<^sub>5 = ell_field_class.add a p\\<^sub>1 p\\<^sub>3\n  opp p\\<^sub>2 = p\\<^sub>3\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2)", "by simp"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n  ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2)\n\ngoal (2 subgoals):\n 1. p\\<^sub>2 = p\\<^sub>3 \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3\n 2. p\\<^sub>2 = opp p\\<^sub>3 \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. p\\<^sub>2 = p\\<^sub>3", "proof (cases \"p\\<^sub>1 = opp p\\<^sub>1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p\\<^sub>1 = opp p\\<^sub>1 \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3\n 2. p\\<^sub>1 \\<noteq> opp p\\<^sub>1 \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "case True"], ["proof (state)\nthis:\n  p\\<^sub>1 = opp p\\<^sub>1\n\ngoal (2 subgoals):\n 1. p\\<^sub>1 = opp p\\<^sub>1 \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3\n 2. p\\<^sub>1 \\<noteq> opp p\\<^sub>1 \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "with \\<open>p\\<^sub>1 \\<noteq> opp p\\<^sub>2\\<close> \\<open>p\\<^sub>1 \\<noteq> opp p\\<^sub>3\\<close>"], ["proof (chain)\npicking this:\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>2\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>3\n  p\\<^sub>1 = opp p\\<^sub>1", "have \"p\\<^sub>1 \\<noteq> p\\<^sub>2\" \"p\\<^sub>1 \\<noteq> p\\<^sub>3\""], ["proof (prove)\nusing this:\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>2\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>3\n  p\\<^sub>1 = opp p\\<^sub>1\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq> p\\<^sub>2 &&& p\\<^sub>1 \\<noteq> p\\<^sub>3", "by auto"], ["proof (state)\nthis:\n  p\\<^sub>1 \\<noteq> p\\<^sub>2\n  p\\<^sub>1 \\<noteq> p\\<^sub>3\n\ngoal (2 subgoals):\n 1. p\\<^sub>1 = opp p\\<^sub>1 \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3\n 2. p\\<^sub>1 \\<noteq> opp p\\<^sub>1 \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "with \\<open>l' = l\\<close> \\<open>x\\<^sub>1 = x\\<^sub>2 \\<and> _\\<or> _\\<close> \\<open>x\\<^sub>1' = x\\<^sub>3 \\<and> _ \\<or> _\\<close>\n            \\<open>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\\<close> \\<open>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\\<close>\n            \\<open>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\\<close> \\<open>p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\\<close>\n            \\<open>p\\<^sub>2 = opp p\\<^sub>3\\<close>"], ["proof (chain)\npicking this:\n  l' = l\n  x\\<^sub>1 = x\\<^sub>2 \\<and>\n  y\\<^sub>1 = y\\<^sub>2 \\<and>\n  l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1) \\<or>\n  x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<and>\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>1' = x\\<^sub>3 \\<and>\n  y\\<^sub>1' = y\\<^sub>3 \\<and>\n  l' = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1') \\<or>\n  x\\<^sub>1' \\<noteq> x\\<^sub>3 \\<and>\n  l' = (y\\<^sub>3 - y\\<^sub>1') / (x\\<^sub>3 - x\\<^sub>1')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>2 = opp p\\<^sub>3\n  p\\<^sub>1 \\<noteq> p\\<^sub>2\n  p\\<^sub>1 \\<noteq> p\\<^sub>3", "have eq: \"(y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) = (y\\<^sub>3 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\" and \"x\\<^sub>1 \\<noteq> x\\<^sub>2\""], ["proof (prove)\nusing this:\n  l' = l\n  x\\<^sub>1 = x\\<^sub>2 \\<and>\n  y\\<^sub>1 = y\\<^sub>2 \\<and>\n  l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1) \\<or>\n  x\\<^sub>1 \\<noteq> x\\<^sub>2 \\<and>\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>1' = x\\<^sub>3 \\<and>\n  y\\<^sub>1' = y\\<^sub>3 \\<and>\n  l' = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1') \\<or>\n  x\\<^sub>1' \\<noteq> x\\<^sub>3 \\<and>\n  l' = (y\\<^sub>3 - y\\<^sub>1') / (x\\<^sub>3 - x\\<^sub>1')\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1'\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>2 = opp p\\<^sub>3\n  p\\<^sub>1 \\<noteq> p\\<^sub>2\n  p\\<^sub>1 \\<noteq> p\\<^sub>3\n\ngoal (1 subgoal):\n 1. (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) =\n    (y\\<^sub>3 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) &&&\n    x\\<^sub>1 \\<noteq> x\\<^sub>2", "by (auto simp add: opp_Point)"], ["proof (state)\nthis:\n  (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) =\n  (y\\<^sub>3 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n\ngoal (2 subgoals):\n 1. p\\<^sub>1 = opp p\\<^sub>1 \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3\n 2. p\\<^sub>1 \\<noteq> opp p\\<^sub>1 \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "from eq"], ["proof (chain)\npicking this:\n  (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) =\n  (y\\<^sub>3 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)", "have \"y\\<^sub>2 = y\\<^sub>3\""], ["proof (prove)\nusing this:\n  (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1) =\n  (y\\<^sub>3 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n\ngoal (1 subgoal):\n 1. y\\<^sub>2 = y\\<^sub>3", "apply (field (prems))"], ["proof (prove)\ngoal (2 subgoals):\n 1. (1::'a) * y\\<^sub>2 ^ 1 + (of_int (- 1) * y\\<^sub>3 ^ 1 + (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    y\\<^sub>2 = y\\<^sub>3\n 2. x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (simp_all add: \\<open>x\\<^sub>1 \\<noteq> x\\<^sub>2\\<close> [symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  y\\<^sub>2 = y\\<^sub>3\n\ngoal (2 subgoals):\n 1. p\\<^sub>1 = opp p\\<^sub>1 \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3\n 2. p\\<^sub>1 \\<noteq> opp p\\<^sub>1 \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "with \\<open>p\\<^sub>2 = opp p\\<^sub>3\\<close> \\<open>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\\<close> \\<open>p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\\<close>"], ["proof (chain)\npicking this:\n  p\\<^sub>2 = opp p\\<^sub>3\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  y\\<^sub>2 = y\\<^sub>3", "show ?thesis"], ["proof (prove)\nusing this:\n  p\\<^sub>2 = opp p\\<^sub>3\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  y\\<^sub>2 = y\\<^sub>3\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 = p\\<^sub>3", "by (simp add: opp_Point)"], ["proof (state)\nthis:\n  p\\<^sub>2 = p\\<^sub>3\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq> opp p\\<^sub>1 \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq> opp p\\<^sub>1 \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "case False"], ["proof (state)\nthis:\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>1\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq> opp p\\<^sub>1 \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "with \\<open>on_curve a b p\\<^sub>1\\<close> \\<open>on_curve a b p\\<^sub>2\\<close>\n            \\<open>add a p\\<^sub>1 p\\<^sub>2 = add a p\\<^sub>1 (opp p\\<^sub>2)\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n  ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2)\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>1", "have \"p\\<^sub>2 = opp p\\<^sub>2\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n  ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2)\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>1\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 = opp p\\<^sub>2", "by (rule compat_add_opp)"], ["proof (state)\nthis:\n  p\\<^sub>2 = opp p\\<^sub>2\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq> opp p\\<^sub>1 \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "with \\<open>opp p\\<^sub>2 = p\\<^sub>3\\<close>"], ["proof (chain)\npicking this:\n  opp p\\<^sub>2 = p\\<^sub>3\n  p\\<^sub>2 = opp p\\<^sub>2", "show ?thesis"], ["proof (prove)\nusing this:\n  opp p\\<^sub>2 = p\\<^sub>3\n  p\\<^sub>2 = opp p\\<^sub>2\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 = p\\<^sub>3", "by simp"], ["proof (state)\nthis:\n  p\\<^sub>2 = p\\<^sub>3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p\\<^sub>2 = p\\<^sub>3\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 = p\\<^sub>3 \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "qed"], ["proof (state)\nthis:\n  p\\<^sub>2 = p\\<^sub>3\n\ngoal (1 subgoal):\n 1. x\\<^sub>4 = x\\<^sub>1 \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x\\<^sub>4 = x\\<^sub>1 \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "assume \"x\\<^sub>4 = x\\<^sub>1\""], ["proof (state)\nthis:\n  x\\<^sub>4 = x\\<^sub>1\n\ngoal (1 subgoal):\n 1. x\\<^sub>4 = x\\<^sub>1 \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "with \\<open>p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\\<close> [simplified \\<open>p\\<^sub>4 = add a p\\<^sub>1 p\\<^sub>2\\<close>]\n        \\<open>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\\<close>\n        add_closed [OF \\<open>on_curve a b p\\<^sub>1\\<close> \\<open>on_curve a b p\\<^sub>2\\<close>]\n        \\<open>on_curve a b p\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n  on_curve a b p\\<^sub>1\n  x\\<^sub>4 = x\\<^sub>1", "have \"add a p\\<^sub>1 p\\<^sub>2 = p\\<^sub>1 \\<or> add a p\\<^sub>1 p\\<^sub>2 = opp p\\<^sub>1\""], ["proof (prove)\nusing this:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  on_curve a b (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n  on_curve a b p\\<^sub>1\n  x\\<^sub>4 = x\\<^sub>1\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = p\\<^sub>1 \\<or>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = opp p\\<^sub>1", "by (rule curve_elt_opp)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = p\\<^sub>1 \\<or>\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = opp p\\<^sub>1\n\ngoal (1 subgoal):\n 1. x\\<^sub>4 = x\\<^sub>1 \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = p\\<^sub>1 \\<or>\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = opp p\\<^sub>1", "show ?case"], ["proof (prove)\nusing this:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = p\\<^sub>1 \\<or>\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = opp p\\<^sub>1\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 = p\\<^sub>3", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = p\\<^sub>3\n 2. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = p\\<^sub>3", "assume \"add a p\\<^sub>1 p\\<^sub>2 = p\\<^sub>1\""], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = p\\<^sub>1\n\ngoal (2 subgoals):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = p\\<^sub>3\n 2. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = p\\<^sub>3", "with \\<open>on_curve a b p\\<^sub>1\\<close> \\<open>on_curve a b p\\<^sub>2\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = p\\<^sub>1", "have \"add a p\\<^sub>2 p\\<^sub>1 = p\\<^sub>1\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = p\\<^sub>1\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>2 p\\<^sub>1 = p\\<^sub>1", "by (simp add: add_comm)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>2 p\\<^sub>1 = p\\<^sub>1\n\ngoal (2 subgoals):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = p\\<^sub>3\n 2. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = p\\<^sub>3", "with ab \\<open>on_curve a b p\\<^sub>2\\<close> \\<open>on_curve a b p\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>1\n  ell_field_class.add a p\\<^sub>2 p\\<^sub>1 = p\\<^sub>1", "have \"p\\<^sub>2 = Infinity\""], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>1\n  ell_field_class.add a p\\<^sub>2 p\\<^sub>1 = p\\<^sub>1\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 = Infinity", "by (rule uniq_zero)"], ["proof (state)\nthis:\n  p\\<^sub>2 = Infinity\n\ngoal (2 subgoals):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = p\\<^sub>3\n 2. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = p\\<^sub>3", "moreover"], ["proof (state)\nthis:\n  p\\<^sub>2 = Infinity\n\ngoal (2 subgoals):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = p\\<^sub>3\n 2. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = p\\<^sub>3", "from \\<open>add a p\\<^sub>1 p\\<^sub>2 = p\\<^sub>1\\<close>\n          \\<open>p\\<^sub>4 = p\\<^sub>5\\<close> \\<open>p\\<^sub>4 = add a p\\<^sub>1 p\\<^sub>2\\<close> \\<open>p\\<^sub>5 = add a p\\<^sub>1 p\\<^sub>3\\<close>\n          \\<open>on_curve a b p\\<^sub>1\\<close> \\<open>on_curve a b p\\<^sub>3\\<close>"], ["proof (chain)\npicking this:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = p\\<^sub>1\n  p\\<^sub>4 = p\\<^sub>5\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  p\\<^sub>5 = ell_field_class.add a p\\<^sub>1 p\\<^sub>3\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>3", "have \"add a p\\<^sub>3 p\\<^sub>1 = p\\<^sub>1\""], ["proof (prove)\nusing this:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = p\\<^sub>1\n  p\\<^sub>4 = p\\<^sub>5\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  p\\<^sub>5 = ell_field_class.add a p\\<^sub>1 p\\<^sub>3\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>3\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>3 p\\<^sub>1 = p\\<^sub>1", "by (simp add: add_comm)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>3 p\\<^sub>1 = p\\<^sub>1\n\ngoal (2 subgoals):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = p\\<^sub>3\n 2. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = p\\<^sub>3", "with ab \\<open>on_curve a b p\\<^sub>3\\<close> \\<open>on_curve a b p\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>3\n  on_curve a b p\\<^sub>1\n  ell_field_class.add a p\\<^sub>3 p\\<^sub>1 = p\\<^sub>1", "have \"p\\<^sub>3 = Infinity\""], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>3\n  on_curve a b p\\<^sub>1\n  ell_field_class.add a p\\<^sub>3 p\\<^sub>1 = p\\<^sub>1\n\ngoal (1 subgoal):\n 1. p\\<^sub>3 = Infinity", "by (rule uniq_zero)"], ["proof (state)\nthis:\n  p\\<^sub>3 = Infinity\n\ngoal (2 subgoals):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = p\\<^sub>3\n 2. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = p\\<^sub>3", "ultimately"], ["proof (chain)\npicking this:\n  p\\<^sub>2 = Infinity\n  p\\<^sub>3 = Infinity", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>2 = Infinity\n  p\\<^sub>3 = Infinity\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 = p\\<^sub>3", "by simp"], ["proof (state)\nthis:\n  p\\<^sub>2 = p\\<^sub>3\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = p\\<^sub>3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = p\\<^sub>3", "assume \"add a p\\<^sub>1 p\\<^sub>2 = opp p\\<^sub>1\""], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = opp p\\<^sub>1\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = p\\<^sub>3", "with ab \\<open>on_curve a b p\\<^sub>1\\<close> \\<open>on_curve a b p\\<^sub>2\\<close>"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = opp p\\<^sub>1", "have \"p\\<^sub>2 = add a (opp p\\<^sub>1) (opp p\\<^sub>1)\""], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = opp p\\<^sub>1\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "by (rule add_opp_double_opp)"], ["proof (state)\nthis:\n  p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = p\\<^sub>3", "moreover"], ["proof (state)\nthis:\n  p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = p\\<^sub>3", "from \\<open>add a p\\<^sub>1 p\\<^sub>2 = opp p\\<^sub>1\\<close>\n          \\<open>p\\<^sub>4 = p\\<^sub>5\\<close> \\<open>p\\<^sub>4 = add a p\\<^sub>1 p\\<^sub>2\\<close> \\<open>p\\<^sub>5 = add a p\\<^sub>1 p\\<^sub>3\\<close>"], ["proof (chain)\npicking this:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = opp p\\<^sub>1\n  p\\<^sub>4 = p\\<^sub>5\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  p\\<^sub>5 = ell_field_class.add a p\\<^sub>1 p\\<^sub>3", "have \"add a p\\<^sub>1 p\\<^sub>3 = opp p\\<^sub>1\""], ["proof (prove)\nusing this:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = opp p\\<^sub>1\n  p\\<^sub>4 = p\\<^sub>5\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  p\\<^sub>5 = ell_field_class.add a p\\<^sub>1 p\\<^sub>3\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>3 = opp p\\<^sub>1", "by simp"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>3 = opp p\\<^sub>1\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = p\\<^sub>3", "with ab \\<open>on_curve a b p\\<^sub>1\\<close> \\<open>on_curve a b p\\<^sub>3\\<close>"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>3\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>3 = opp p\\<^sub>1", "have \"p\\<^sub>3 = add a (opp p\\<^sub>1) (opp p\\<^sub>1)\""], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>3\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>3 = opp p\\<^sub>1\n\ngoal (1 subgoal):\n 1. p\\<^sub>3 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "by (rule add_opp_double_opp)"], ["proof (state)\nthis:\n  p\\<^sub>3 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    opp p\\<^sub>1 \\<Longrightarrow>\n    p\\<^sub>2 = p\\<^sub>3", "ultimately"], ["proof (chain)\npicking this:\n  p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)\n  p\\<^sub>3 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>2 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)\n  p\\<^sub>3 = ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>1)\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 = p\\<^sub>3", "by simp"], ["proof (state)\nthis:\n  p\\<^sub>2 = p\\<^sub>3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p\\<^sub>2 = p\\<^sub>3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p\\<^sub>2 = p\\<^sub>3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p\\<^sub>2 = p\\<^sub>3\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma add_minus_id:\n  assumes ab: \"nonsingular a b\"\n  and p\\<^sub>1: \"on_curve a b p\\<^sub>1\"\n  and p\\<^sub>2: \"on_curve a b p\\<^sub>2\"\n  shows \"add a (add a p\\<^sub>1 p\\<^sub>2) (opp p\\<^sub>2) = p\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     (opp p\\<^sub>2) =\n    p\\<^sub>1", "proof (cases \"add a p\\<^sub>1 p\\<^sub>2 = opp p\\<^sub>2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     (opp p\\<^sub>2) =\n    p\\<^sub>1\n 2. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<noteq>\n    opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     (opp p\\<^sub>2) =\n    p\\<^sub>1", "case True"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = opp p\\<^sub>2\n\ngoal (2 subgoals):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     (opp p\\<^sub>2) =\n    p\\<^sub>1\n 2. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<noteq>\n    opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     (opp p\\<^sub>2) =\n    p\\<^sub>1", "then"], ["proof (chain)\npicking this:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = opp p\\<^sub>2", "have \"add a (add a p\\<^sub>1 p\\<^sub>2) (opp p\\<^sub>2) = add a (opp p\\<^sub>2) (opp p\\<^sub>2)\""], ["proof (prove)\nusing this:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = opp p\\<^sub>2\n\ngoal (1 subgoal):\n 1. ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     (opp p\\<^sub>2) =\n    ell_field_class.add a (opp p\\<^sub>2) (opp p\\<^sub>2)", "by simp"], ["proof (state)\nthis:\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   (opp p\\<^sub>2) =\n  ell_field_class.add a (opp p\\<^sub>2) (opp p\\<^sub>2)\n\ngoal (2 subgoals):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     (opp p\\<^sub>2) =\n    p\\<^sub>1\n 2. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<noteq>\n    opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     (opp p\\<^sub>2) =\n    p\\<^sub>1", "also"], ["proof (state)\nthis:\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   (opp p\\<^sub>2) =\n  ell_field_class.add a (opp p\\<^sub>2) (opp p\\<^sub>2)\n\ngoal (2 subgoals):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     (opp p\\<^sub>2) =\n    p\\<^sub>1\n 2. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<noteq>\n    opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     (opp p\\<^sub>2) =\n    p\\<^sub>1", "from p\\<^sub>1 p\\<^sub>2 True"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = opp p\\<^sub>2", "have \"add a p\\<^sub>2 p\\<^sub>1 = opp p\\<^sub>2\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = opp p\\<^sub>2\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>2 p\\<^sub>1 = opp p\\<^sub>2", "by (simp add: add_comm)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>2 p\\<^sub>1 = opp p\\<^sub>2\n\ngoal (2 subgoals):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     (opp p\\<^sub>2) =\n    p\\<^sub>1\n 2. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<noteq>\n    opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     (opp p\\<^sub>2) =\n    p\\<^sub>1", "with ab p\\<^sub>2 p\\<^sub>1"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>1\n  ell_field_class.add a p\\<^sub>2 p\\<^sub>1 = opp p\\<^sub>2", "have \"add a (opp p\\<^sub>2) (opp p\\<^sub>2) = p\\<^sub>1\""], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>1\n  ell_field_class.add a p\\<^sub>2 p\\<^sub>1 = opp p\\<^sub>2\n\ngoal (1 subgoal):\n 1. ell_field_class.add a (opp p\\<^sub>2) (opp p\\<^sub>2) = p\\<^sub>1", "by (rule add_opp_double_opp [symmetric])"], ["proof (state)\nthis:\n  ell_field_class.add a (opp p\\<^sub>2) (opp p\\<^sub>2) = p\\<^sub>1\n\ngoal (2 subgoals):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n    opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     (opp p\\<^sub>2) =\n    p\\<^sub>1\n 2. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<noteq>\n    opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     (opp p\\<^sub>2) =\n    p\\<^sub>1", "finally"], ["proof (chain)\npicking this:\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   (opp p\\<^sub>2) =\n  p\\<^sub>1", "show ?thesis"], ["proof (prove)\nusing this:\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   (opp p\\<^sub>2) =\n  p\\<^sub>1\n\ngoal (1 subgoal):\n 1. ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     (opp p\\<^sub>2) =\n    p\\<^sub>1", "."], ["proof (state)\nthis:\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   (opp p\\<^sub>2) =\n  p\\<^sub>1\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<noteq>\n    opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     (opp p\\<^sub>2) =\n    p\\<^sub>1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<noteq>\n    opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     (opp p\\<^sub>2) =\n    p\\<^sub>1", "case False"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<noteq> opp p\\<^sub>2\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<noteq>\n    opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     (opp p\\<^sub>2) =\n    p\\<^sub>1", "from p\\<^sub>1 p\\<^sub>2 p\\<^sub>1 p\\<^sub>2 False"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<noteq> opp p\\<^sub>2", "show ?thesis"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<noteq> opp p\\<^sub>2\n\ngoal (1 subgoal):\n 1. ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     (opp p\\<^sub>2) =\n    p\\<^sub>1", "proof (induct rule: add_case)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b Infinity; on_curve a b p;\n        p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p (opp p) = Infinity\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        p \\<noteq> opp Infinity\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p (opp Infinity) = p\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        Infinity \\<noteq> opp (opp p)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a Infinity (opp (opp p)) = p\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 (opp p\\<^sub>1) =\n                         p\\<^sub>1\n 5. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2) =\n                         p\\<^sub>1", "case InfL"], ["proof (state)\nthis:\n  on_curve a b Infinity\n  on_curve a b p_\n  p_ \\<noteq> opp p_\n\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b Infinity; on_curve a b p;\n        p \\<noteq> opp p\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p (opp p) = Infinity\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        p \\<noteq> opp Infinity\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p (opp Infinity) = p\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        Infinity \\<noteq> opp (opp p)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a Infinity (opp (opp p)) = p\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 (opp p\\<^sub>1) =\n                         p\\<^sub>1\n 5. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2) =\n                         p\\<^sub>1", "then"], ["proof (chain)\npicking this:\n  on_curve a b Infinity\n  on_curve a b p_\n  p_ \\<noteq> opp p_", "show ?case"], ["proof (prove)\nusing this:\n  on_curve a b Infinity\n  on_curve a b p_\n  p_ \\<noteq> opp p_\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p_ (opp p_) = Infinity", "by (simp add: add_opp)"], ["proof (state)\nthis:\n  ell_field_class.add a p_ (opp p_) = Infinity\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        p \\<noteq> opp Infinity\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p (opp Infinity) = p\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        Infinity \\<noteq> opp (opp p)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a Infinity (opp (opp p)) = p\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 (opp p\\<^sub>1) =\n                         p\\<^sub>1\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2) =\n                         p\\<^sub>1", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        p \\<noteq> opp Infinity\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p (opp Infinity) = p\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        Infinity \\<noteq> opp (opp p)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a Infinity (opp (opp p)) = p\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 (opp p\\<^sub>1) =\n                         p\\<^sub>1\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2) =\n                         p\\<^sub>1", "case InfR"], ["proof (state)\nthis:\n  on_curve a b p_\n  on_curve a b Infinity\n  p_ \\<noteq> opp Infinity\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b Infinity;\n        p \\<noteq> opp Infinity\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p (opp Infinity) = p\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        Infinity \\<noteq> opp (opp p)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a Infinity (opp (opp p)) = p\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 (opp p\\<^sub>1) =\n                         p\\<^sub>1\n 4. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2) =\n                         p\\<^sub>1", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a p_ (opp Infinity) = p_", "by (simp add: add_0_r)"], ["proof (state)\nthis:\n  ell_field_class.add a p_ (opp Infinity) = p_\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        Infinity \\<noteq> opp (opp p)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a Infinity (opp (opp p)) = p\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 (opp p\\<^sub>1) =\n                         p\\<^sub>1\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2) =\n                         p\\<^sub>1", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        Infinity \\<noteq> opp (opp p)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a Infinity (opp (opp p)) = p\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 (opp p\\<^sub>1) =\n                         p\\<^sub>1\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2) =\n                         p\\<^sub>1", "case Opp"], ["proof (state)\nthis:\n  on_curve a b p_\n  on_curve a b p_\n  on_curve a b (opp p_)\n  Infinity \\<noteq> opp (opp p_)\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b p; on_curve a b (opp p);\n        Infinity \\<noteq> opp (opp p)\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a Infinity (opp (opp p)) = p\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 (opp p\\<^sub>1) =\n                         p\\<^sub>1\n 3. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2) =\n                         p\\<^sub>1", "then"], ["proof (chain)\npicking this:\n  on_curve a b p_\n  on_curve a b p_\n  on_curve a b (opp p_)\n  Infinity \\<noteq> opp (opp p_)", "show ?case"], ["proof (prove)\nusing this:\n  on_curve a b p_\n  on_curve a b p_\n  on_curve a b (opp p_)\n  Infinity \\<noteq> opp (opp p_)\n\ngoal (1 subgoal):\n 1. ell_field_class.add a Infinity (opp (opp p_)) = p_", "by (simp add: opp_opp add_0_l)"], ["proof (state)\nthis:\n  ell_field_class.add a Infinity (opp (opp p_)) = p_\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 (opp p\\<^sub>1) =\n                         p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2) =\n                         p\\<^sub>1", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 (opp p\\<^sub>1) =\n                         p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2) =\n                         p\\<^sub>1", "case (Tan p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l)"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1\n  y\\<^sub>1 \\<noteq> (0::'a)\n  l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1)\n  x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1\n  y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>1\n  p\\<^sub>2 \\<noteq> opp p\\<^sub>1\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 (opp p\\<^sub>1) =\n                         p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2) =\n                         p\\<^sub>1", "note ab \\<open>on_curve a b p\\<^sub>1\\<close>"], ["proof (state)\nthis:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 (opp p\\<^sub>1) =\n                         p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2) =\n                         p\\<^sub>1", "moreover"], ["proof (state)\nthis:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 (opp p\\<^sub>1) =\n                         p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2) =\n                         p\\<^sub>1", "from \\<open>y\\<^sub>1 \\<noteq> 0\\<close> \\<open>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  y\\<^sub>1 \\<noteq> (0::'a)\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1", "have \"p\\<^sub>1 \\<noteq> opp p\\<^sub>1\""], ["proof (prove)\nusing this:\n  y\\<^sub>1 \\<noteq> (0::'a)\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq> opp p\\<^sub>1", "by (simp add: opp_Point)"], ["proof (state)\nthis:\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>1\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 (opp p\\<^sub>1) =\n                         p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2) =\n                         p\\<^sub>1", "moreover"], ["proof (state)\nthis:\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>1\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 (opp p\\<^sub>1) =\n                         p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2) =\n                         p\\<^sub>1", "from \\<open>p\\<^sub>2 = add a p\\<^sub>1 p\\<^sub>1\\<close> \\<open>p\\<^sub>2 \\<noteq> opp p\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1\n  p\\<^sub>2 \\<noteq> opp p\\<^sub>1", "have \"add a p\\<^sub>1 p\\<^sub>1 \\<noteq> opp p\\<^sub>1\""], ["proof (prove)\nusing this:\n  p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1\n  p\\<^sub>2 \\<noteq> opp p\\<^sub>1\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p\\<^sub>1 \\<noteq> opp p\\<^sub>1", "by simp"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>1 \\<noteq> opp p\\<^sub>1\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 (opp p\\<^sub>1) =\n                         p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2) =\n                         p\\<^sub>1", "ultimately"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>1\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>1 \\<noteq> opp p\\<^sub>1", "have \"add a (add a p\\<^sub>1 p\\<^sub>1) (opp p\\<^sub>1) = p\\<^sub>1\""], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>1\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>1 \\<noteq> opp p\\<^sub>1\n\ngoal (1 subgoal):\n 1. ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>1)\n     (opp p\\<^sub>1) =\n    p\\<^sub>1", "by (rule compat_add_triple)"], ["proof (state)\nthis:\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>1)\n   (opp p\\<^sub>1) =\n  p\\<^sub>1\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1 \\<noteq> (0::'a);\n        l = ((3::'a) * x\\<^sub>1\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1);\n        x\\<^sub>2 = l\\<^sup>2 - (2::'a) * x\\<^sub>1;\n        y\\<^sub>2 = - y\\<^sub>1 - l * (x\\<^sub>2 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>1;\n        p\\<^sub>2 \\<noteq> opp p\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 (opp p\\<^sub>1) =\n                         p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2) =\n                         p\\<^sub>1", "with \\<open>p\\<^sub>2 = add a p\\<^sub>1 p\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>1)\n   (opp p\\<^sub>1) =\n  p\\<^sub>1", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>1)\n   (opp p\\<^sub>1) =\n  p\\<^sub>1\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>2 (opp p\\<^sub>1) = p\\<^sub>1", "by simp"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>2 (opp p\\<^sub>1) = p\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2) =\n                         p\\<^sub>1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2) =\n                         p\\<^sub>1", "case (Gen p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2 p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l)"], ["proof (state)\nthis:\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>3 \\<noteq> opp p\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2) =\n                         p\\<^sub>1", "from \\<open>p\\<^sub>3 = add a p\\<^sub>1 p\\<^sub>2\\<close> \\<open>on_curve a b p\\<^sub>2\\<close>"], ["proof (chain)\npicking this:\n  p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  on_curve a b p\\<^sub>2", "have \"p\\<^sub>3 = add a p\\<^sub>1 (opp (opp p\\<^sub>2))\""], ["proof (prove)\nusing this:\n  p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  on_curve a b p\\<^sub>2\n\ngoal (1 subgoal):\n 1. p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 (opp (opp p\\<^sub>2))", "by (simp add: opp_opp)"], ["proof (state)\nthis:\n  p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 (opp (opp p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1 y\\<^sub>1 p\\<^sub>2 x\\<^sub>2 y\\<^sub>2\n       p\\<^sub>3 x\\<^sub>3 y\\<^sub>3 l.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>3 \\<noteq> opp p\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2) =\n                         p\\<^sub>1", "with\n      add_closed [OF \\<open>on_curve a b p\\<^sub>1\\<close> \\<open>on_curve a b p\\<^sub>2\\<close>,\n        folded \\<open>p\\<^sub>3 = add a p\\<^sub>1 p\\<^sub>2\\<close>]\n      opp_closed [OF \\<open>on_curve a b p\\<^sub>2\\<close>]\n      opp_closed [OF \\<open>on_curve a b p\\<^sub>2\\<close>]\n      opp_opp [of p\\<^sub>2]\n      Gen"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>3\n  on_curve a b (opp p\\<^sub>2)\n  on_curve a b (opp p\\<^sub>2)\n  opp (opp p\\<^sub>2) = p\\<^sub>2\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>3 \\<noteq> opp p\\<^sub>2\n  p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 (opp (opp p\\<^sub>2))", "show ?case"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>3\n  on_curve a b (opp p\\<^sub>2)\n  on_curve a b (opp p\\<^sub>2)\n  opp (opp p\\<^sub>2) = p\\<^sub>2\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>3 = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>3 \\<noteq> opp p\\<^sub>2\n  p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 (opp (opp p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2) = p\\<^sub>1", "proof (induct rule: add_case)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; opp p = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        Infinity = Point x\\<^sub>3 y\\<^sub>3;\n        Infinity = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2; Infinity \\<noteq> p;\n        Infinity = ell_field_class.add a p\\<^sub>1 (opp p)\\<rbrakk>\n       \\<Longrightarrow> p = p\\<^sub>1\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b Infinity; opp Infinity = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p = Point x\\<^sub>3 y\\<^sub>3;\n        p = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2; p \\<noteq> Infinity;\n        p = ell_field_class.add a p\\<^sub>1 (opp Infinity)\\<rbrakk>\n       \\<Longrightarrow> p = p\\<^sub>1\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b (opp p);\n        opp (opp p) = p\\<^sub>2; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p = Point x\\<^sub>3 y\\<^sub>3;\n        p = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2; p \\<noteq> opp p;\n        p = ell_field_class.add a p\\<^sub>1 (opp (opp p))\\<rbrakk>\n       \\<Longrightarrow> Infinity = p\\<^sub>1\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        on_curve a b p\\<^sub>1; opp p\\<^sub>1 = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> p\\<^sub>1;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>1\n 5. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3' = - y\\<^sub>1' - la * (x\\<^sub>3' - x\\<^sub>1');\n        on_curve a b p\\<^sub>2; opp p\\<^sub>2 = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> p\\<^sub>2;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 = p\\<^sub>1", "case InfL"], ["proof (state)\nthis:\n  on_curve a b p_\n  opp p_ = p\\<^sub>2\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  Infinity = Point x\\<^sub>3 y\\<^sub>3\n  Infinity = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  Infinity \\<noteq> p_\n  Infinity = ell_field_class.add a p\\<^sub>1 (opp p_)\n\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; opp p = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        Infinity = Point x\\<^sub>3 y\\<^sub>3;\n        Infinity = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2; Infinity \\<noteq> p;\n        Infinity = ell_field_class.add a p\\<^sub>1 (opp p)\\<rbrakk>\n       \\<Longrightarrow> p = p\\<^sub>1\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b Infinity; opp Infinity = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p = Point x\\<^sub>3 y\\<^sub>3;\n        p = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2; p \\<noteq> Infinity;\n        p = ell_field_class.add a p\\<^sub>1 (opp Infinity)\\<rbrakk>\n       \\<Longrightarrow> p = p\\<^sub>1\n 3. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b (opp p);\n        opp (opp p) = p\\<^sub>2; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p = Point x\\<^sub>3 y\\<^sub>3;\n        p = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2; p \\<noteq> opp p;\n        p = ell_field_class.add a p\\<^sub>1 (opp (opp p))\\<rbrakk>\n       \\<Longrightarrow> Infinity = p\\<^sub>1\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        on_curve a b p\\<^sub>1; opp p\\<^sub>1 = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> p\\<^sub>1;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>1\n 5. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3' = - y\\<^sub>1' - la * (x\\<^sub>3' - x\\<^sub>1');\n        on_curve a b p\\<^sub>2; opp p\\<^sub>2 = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> p\\<^sub>2;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 = p\\<^sub>1", "then"], ["proof (chain)\npicking this:\n  on_curve a b p_\n  opp p_ = p\\<^sub>2\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  Infinity = Point x\\<^sub>3 y\\<^sub>3\n  Infinity = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  Infinity \\<noteq> p_\n  Infinity = ell_field_class.add a p\\<^sub>1 (opp p_)", "show ?case"], ["proof (prove)\nusing this:\n  on_curve a b p_\n  opp p_ = p\\<^sub>2\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  Infinity = Point x\\<^sub>3 y\\<^sub>3\n  Infinity = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  Infinity \\<noteq> p_\n  Infinity = ell_field_class.add a p\\<^sub>1 (opp p_)\n\ngoal (1 subgoal):\n 1. p_ = p\\<^sub>1", "by simp"], ["proof (state)\nthis:\n  p_ = p\\<^sub>1\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b Infinity; opp Infinity = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p = Point x\\<^sub>3 y\\<^sub>3;\n        p = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2; p \\<noteq> Infinity;\n        p = ell_field_class.add a p\\<^sub>1 (opp Infinity)\\<rbrakk>\n       \\<Longrightarrow> p = p\\<^sub>1\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b (opp p);\n        opp (opp p) = p\\<^sub>2; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p = Point x\\<^sub>3 y\\<^sub>3;\n        p = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2; p \\<noteq> opp p;\n        p = ell_field_class.add a p\\<^sub>1 (opp (opp p))\\<rbrakk>\n       \\<Longrightarrow> Infinity = p\\<^sub>1\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        on_curve a b p\\<^sub>1; opp p\\<^sub>1 = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> p\\<^sub>1;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>1\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3' = - y\\<^sub>1' - la * (x\\<^sub>3' - x\\<^sub>1');\n        on_curve a b p\\<^sub>2; opp p\\<^sub>2 = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> p\\<^sub>2;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 = p\\<^sub>1", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b Infinity; opp Infinity = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p = Point x\\<^sub>3 y\\<^sub>3;\n        p = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2; p \\<noteq> Infinity;\n        p = ell_field_class.add a p\\<^sub>1 (opp Infinity)\\<rbrakk>\n       \\<Longrightarrow> p = p\\<^sub>1\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b (opp p);\n        opp (opp p) = p\\<^sub>2; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p = Point x\\<^sub>3 y\\<^sub>3;\n        p = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2; p \\<noteq> opp p;\n        p = ell_field_class.add a p\\<^sub>1 (opp (opp p))\\<rbrakk>\n       \\<Longrightarrow> Infinity = p\\<^sub>1\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        on_curve a b p\\<^sub>1; opp p\\<^sub>1 = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> p\\<^sub>1;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>1\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3' = - y\\<^sub>1' - la * (x\\<^sub>3' - x\\<^sub>1');\n        on_curve a b p\\<^sub>2; opp p\\<^sub>2 = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> p\\<^sub>2;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 = p\\<^sub>1", "case InfR"], ["proof (state)\nthis:\n  on_curve a b Infinity\n  opp Infinity = p\\<^sub>2\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p_ = Point x\\<^sub>3 y\\<^sub>3\n  p_ = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p_ \\<noteq> Infinity\n  p_ = ell_field_class.add a p\\<^sub>1 (opp Infinity)\n\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b Infinity; opp Infinity = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p = Point x\\<^sub>3 y\\<^sub>3;\n        p = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2; p \\<noteq> Infinity;\n        p = ell_field_class.add a p\\<^sub>1 (opp Infinity)\\<rbrakk>\n       \\<Longrightarrow> p = p\\<^sub>1\n 2. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b (opp p);\n        opp (opp p) = p\\<^sub>2; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p = Point x\\<^sub>3 y\\<^sub>3;\n        p = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2; p \\<noteq> opp p;\n        p = ell_field_class.add a p\\<^sub>1 (opp (opp p))\\<rbrakk>\n       \\<Longrightarrow> Infinity = p\\<^sub>1\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        on_curve a b p\\<^sub>1; opp p\\<^sub>1 = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> p\\<^sub>1;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>1\n 4. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3' = - y\\<^sub>1' - la * (x\\<^sub>3' - x\\<^sub>1');\n        on_curve a b p\\<^sub>2; opp p\\<^sub>2 = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> p\\<^sub>2;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 = p\\<^sub>1", "then"], ["proof (chain)\npicking this:\n  on_curve a b Infinity\n  opp Infinity = p\\<^sub>2\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p_ = Point x\\<^sub>3 y\\<^sub>3\n  p_ = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p_ \\<noteq> Infinity\n  p_ = ell_field_class.add a p\\<^sub>1 (opp Infinity)", "show ?case"], ["proof (prove)\nusing this:\n  on_curve a b Infinity\n  opp Infinity = p\\<^sub>2\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p_ = Point x\\<^sub>3 y\\<^sub>3\n  p_ = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p_ \\<noteq> Infinity\n  p_ = ell_field_class.add a p\\<^sub>1 (opp Infinity)\n\ngoal (1 subgoal):\n 1. p_ = p\\<^sub>1", "by (simp add: add_0_r)"], ["proof (state)\nthis:\n  p_ = p\\<^sub>1\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b (opp p);\n        opp (opp p) = p\\<^sub>2; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p = Point x\\<^sub>3 y\\<^sub>3;\n        p = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2; p \\<noteq> opp p;\n        p = ell_field_class.add a p\\<^sub>1 (opp (opp p))\\<rbrakk>\n       \\<Longrightarrow> Infinity = p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        on_curve a b p\\<^sub>1; opp p\\<^sub>1 = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> p\\<^sub>1;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>1\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3' = - y\\<^sub>1' - la * (x\\<^sub>3' - x\\<^sub>1');\n        on_curve a b p\\<^sub>2; opp p\\<^sub>2 = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> p\\<^sub>2;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 = p\\<^sub>1", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b (opp p);\n        opp (opp p) = p\\<^sub>2; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p = Point x\\<^sub>3 y\\<^sub>3;\n        p = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2; p \\<noteq> opp p;\n        p = ell_field_class.add a p\\<^sub>1 (opp (opp p))\\<rbrakk>\n       \\<Longrightarrow> Infinity = p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        on_curve a b p\\<^sub>1; opp p\\<^sub>1 = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> p\\<^sub>1;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>1\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3' = - y\\<^sub>1' - la * (x\\<^sub>3' - x\\<^sub>1');\n        on_curve a b p\\<^sub>2; opp p\\<^sub>2 = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> p\\<^sub>2;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 = p\\<^sub>1", "case (Opp p)"], ["proof (state)\nthis:\n  on_curve a b p\n  on_curve a b (opp p)\n  opp (opp p) = p\\<^sub>2\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p = Point x\\<^sub>3 y\\<^sub>3\n  p = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p \\<noteq> opp p\n  p = ell_field_class.add a p\\<^sub>1 (opp (opp p))\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b (opp p);\n        opp (opp p) = p\\<^sub>2; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p = Point x\\<^sub>3 y\\<^sub>3;\n        p = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2; p \\<noteq> opp p;\n        p = ell_field_class.add a p\\<^sub>1 (opp (opp p))\\<rbrakk>\n       \\<Longrightarrow> Infinity = p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        on_curve a b p\\<^sub>1; opp p\\<^sub>1 = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> p\\<^sub>1;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>1\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3' = - y\\<^sub>1' - la * (x\\<^sub>3' - x\\<^sub>1');\n        on_curve a b p\\<^sub>2; opp p\\<^sub>2 = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> p\\<^sub>2;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 = p\\<^sub>1", "from \\<open>p = add a p\\<^sub>1 (opp (opp p))\\<close>"], ["proof (chain)\npicking this:\n  p = ell_field_class.add a p\\<^sub>1 (opp (opp p))", "have \"add a p\\<^sub>1 p = p\""], ["proof (prove)\nusing this:\n  p = ell_field_class.add a p\\<^sub>1 (opp (opp p))\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1 p = p", "by (simp add: opp_opp)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p = p\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>on_curve a b p; on_curve a b (opp p);\n        opp (opp p) = p\\<^sub>2; p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p = Point x\\<^sub>3 y\\<^sub>3;\n        p = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2; p \\<noteq> opp p;\n        p = ell_field_class.add a p\\<^sub>1 (opp (opp p))\\<rbrakk>\n       \\<Longrightarrow> Infinity = p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        on_curve a b p\\<^sub>1; opp p\\<^sub>1 = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> p\\<^sub>1;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>1\n 3. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3' = - y\\<^sub>1' - la * (x\\<^sub>3' - x\\<^sub>1');\n        on_curve a b p\\<^sub>2; opp p\\<^sub>2 = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> p\\<^sub>2;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 = p\\<^sub>1", "with ab \\<open>on_curve a b p\\<^sub>1\\<close> \\<open>on_curve a b p\\<close>"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\n  ell_field_class.add a p\\<^sub>1 p = p", "show ?case"], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\n  ell_field_class.add a p\\<^sub>1 p = p\n\ngoal (1 subgoal):\n 1. Infinity = p\\<^sub>1", "by (rule uniq_zero [symmetric])"], ["proof (state)\nthis:\n  Infinity = p\\<^sub>1\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        on_curve a b p\\<^sub>1; opp p\\<^sub>1 = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> p\\<^sub>1;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3' = - y\\<^sub>1' - la * (x\\<^sub>3' - x\\<^sub>1');\n        on_curve a b p\\<^sub>2; opp p\\<^sub>2 = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> p\\<^sub>2;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 = p\\<^sub>1", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        on_curve a b p\\<^sub>1; opp p\\<^sub>1 = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> p\\<^sub>1;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3' = - y\\<^sub>1' - la * (x\\<^sub>3' - x\\<^sub>1');\n        on_curve a b p\\<^sub>2; opp p\\<^sub>2 = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> p\\<^sub>2;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 = p\\<^sub>1", "case Tan"], ["proof (state)\nthis:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  on_curve a b p\\<^sub>1_\n  opp p\\<^sub>1_ = p\\<^sub>2\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>1_ = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>1_ = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>1_ \\<noteq> p\\<^sub>1_\n  p\\<^sub>1_ = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1_)\n\ngoal (2 subgoals):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>1;\n        y\\<^sub>1' \\<noteq> (0::'a);\n        la = ((3::'a) * x\\<^sub>1'\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1');\n        x\\<^sub>2' = la\\<^sup>2 - (2::'a) * x\\<^sub>1';\n        y\\<^sub>2' = - y\\<^sub>1' - la * (x\\<^sub>2' - x\\<^sub>1');\n        on_curve a b p\\<^sub>1; opp p\\<^sub>1 = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> p\\<^sub>1;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>2 = p\\<^sub>1\n 2. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3' = - y\\<^sub>1' - la * (x\\<^sub>3' - x\\<^sub>1');\n        on_curve a b p\\<^sub>2; opp p\\<^sub>2 = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> p\\<^sub>2;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 = p\\<^sub>1", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  on_curve a b p\\<^sub>1_\n  opp p\\<^sub>1_ = p\\<^sub>2\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>1_ = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>1_ = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>1_ \\<noteq> p\\<^sub>1_\n  p\\<^sub>1_ = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1_)", "show ?case"], ["proof (prove)\nusing this:\n  p\\<^sub>1_ = Point x\\<^sub>1_ y\\<^sub>1_\n  p\\<^sub>2_ = Point x\\<^sub>2_ y\\<^sub>2_\n  p\\<^sub>2_ = ell_field_class.add a p\\<^sub>1_ p\\<^sub>1_\n  y\\<^sub>1_ \\<noteq> (0::'a)\n  l_ = ((3::'a) * x\\<^sub>1_\\<^sup>2 + a) / ((2::'a) * y\\<^sub>1_)\n  x\\<^sub>2_ = l_\\<^sup>2 - (2::'a) * x\\<^sub>1_\n  y\\<^sub>2_ = - y\\<^sub>1_ - l_ * (x\\<^sub>2_ - x\\<^sub>1_)\n  on_curve a b p\\<^sub>1_\n  opp p\\<^sub>1_ = p\\<^sub>2\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>1_ = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>1_ = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>1_ \\<noteq> p\\<^sub>1_\n  p\\<^sub>1_ = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>1_)\n\ngoal (1 subgoal):\n 1. p\\<^sub>2_ = p\\<^sub>1", "by simp"], ["proof (state)\nthis:\n  p\\<^sub>2_ = p\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3' = - y\\<^sub>1' - la * (x\\<^sub>3' - x\\<^sub>1');\n        on_curve a b p\\<^sub>2; opp p\\<^sub>2 = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> p\\<^sub>2;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 = p\\<^sub>1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3' = - y\\<^sub>1' - la * (x\\<^sub>3' - x\\<^sub>1');\n        on_curve a b p\\<^sub>2; opp p\\<^sub>2 = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> p\\<^sub>2;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 = p\\<^sub>1", "case (Gen p\\<^sub>4 x\\<^sub>4 y\\<^sub>4 p\\<^sub>5 x\\<^sub>5 y\\<^sub>5 p\\<^sub>6 x\\<^sub>6 y\\<^sub>6 l')"], ["proof (state)\nthis:\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n  p\\<^sub>5 = Point x\\<^sub>5 y\\<^sub>5\n  p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\n  p\\<^sub>6 = ell_field_class.add a p\\<^sub>4 p\\<^sub>5\n  x\\<^sub>4 \\<noteq> x\\<^sub>5\n  l' = (y\\<^sub>5 - y\\<^sub>4) / (x\\<^sub>5 - x\\<^sub>4)\n  x\\<^sub>6 = l'\\<^sup>2 - x\\<^sub>4 - x\\<^sub>5\n  y\\<^sub>6 = - y\\<^sub>4 - l' * (x\\<^sub>6 - x\\<^sub>4)\n  on_curve a b p\\<^sub>5\n  opp p\\<^sub>5 = p\\<^sub>2\n  p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>4 = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  x\\<^sub>1 \\<noteq> x\\<^sub>2\n  l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\n  x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2\n  y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>4 \\<noteq> p\\<^sub>5\n  p\\<^sub>4 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>5)\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3' = - y\\<^sub>1' - la * (x\\<^sub>3' - x\\<^sub>1');\n        on_curve a b p\\<^sub>2; opp p\\<^sub>2 = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> p\\<^sub>2;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 = p\\<^sub>1", "from \\<open>on_curve a b p\\<^sub>5\\<close> \\<open>opp p\\<^sub>5 = p\\<^sub>2\\<close>\n        \\<open>p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\\<close> \\<open>p\\<^sub>5 = Point x\\<^sub>5 y\\<^sub>5\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>5\n  opp p\\<^sub>5 = p\\<^sub>2\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>5 = Point x\\<^sub>5 y\\<^sub>5", "have \"y\\<^sub>5 = - y\\<^sub>2\" \"x\\<^sub>5 = x\\<^sub>2\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>5\n  opp p\\<^sub>5 = p\\<^sub>2\n  p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2\n  p\\<^sub>5 = Point x\\<^sub>5 y\\<^sub>5\n\ngoal (1 subgoal):\n 1. y\\<^sub>5 = - y\\<^sub>2 &&& x\\<^sub>5 = x\\<^sub>2", "by (auto simp add: opp_Point on_curve_def)"], ["proof (state)\nthis:\n  y\\<^sub>5 = - y\\<^sub>2\n  x\\<^sub>5 = x\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3' = - y\\<^sub>1' - la * (x\\<^sub>3' - x\\<^sub>1');\n        on_curve a b p\\<^sub>2; opp p\\<^sub>2 = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> p\\<^sub>2;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 = p\\<^sub>1", "from \\<open>p\\<^sub>4 = Point x\\<^sub>3 y\\<^sub>3\\<close> \\<open>p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\\<close>"], ["proof (chain)\npicking this:\n  p\\<^sub>4 = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4", "have \"x\\<^sub>4 = x\\<^sub>3\" \"y\\<^sub>4 = y\\<^sub>3\""], ["proof (prove)\nusing this:\n  p\\<^sub>4 = Point x\\<^sub>3 y\\<^sub>3\n  p\\<^sub>4 = Point x\\<^sub>4 y\\<^sub>4\n\ngoal (1 subgoal):\n 1. x\\<^sub>4 = x\\<^sub>3 &&& y\\<^sub>4 = y\\<^sub>3", "by simp_all"], ["proof (state)\nthis:\n  x\\<^sub>4 = x\\<^sub>3\n  y\\<^sub>4 = y\\<^sub>3\n\ngoal (1 subgoal):\n 1. \\<And>p\\<^sub>1 x\\<^sub>1' y\\<^sub>1' p\\<^sub>2 x\\<^sub>2' y\\<^sub>2'\n       p\\<^sub>3 x\\<^sub>3' y\\<^sub>3' la.\n       \\<lbrakk>p\\<^sub>1 = Point x\\<^sub>1' y\\<^sub>1';\n        p\\<^sub>2 = Point x\\<^sub>2' y\\<^sub>2';\n        p\\<^sub>3 = Point x\\<^sub>3' y\\<^sub>3';\n        p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1' \\<noteq> x\\<^sub>2';\n        la = (y\\<^sub>2' - y\\<^sub>1') / (x\\<^sub>2' - x\\<^sub>1');\n        x\\<^sub>3' = la\\<^sup>2 - x\\<^sub>1' - x\\<^sub>2';\n        y\\<^sub>3' = - y\\<^sub>1' - la * (x\\<^sub>3' - x\\<^sub>1');\n        on_curve a b p\\<^sub>2; opp p\\<^sub>2 = p\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1;\n        p\\<^sub>2 = Point x\\<^sub>2 y\\<^sub>2;\n        p\\<^sub>1 = Point x\\<^sub>3 y\\<^sub>3;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n        x\\<^sub>1 \\<noteq> x\\<^sub>2;\n        l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1);\n        x\\<^sub>3 = l\\<^sup>2 - x\\<^sub>1 - x\\<^sub>2;\n        y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1);\n        on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n        p\\<^sub>1 \\<noteq> p\\<^sub>2;\n        p\\<^sub>1 = ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> p\\<^sub>3 = p\\<^sub>1", "from \\<open>x\\<^sub>4 \\<noteq> x\\<^sub>5\\<close>"], ["proof (chain)\npicking this:\n  x\\<^sub>4 \\<noteq> x\\<^sub>5", "show ?case"], ["proof (prove)\nusing this:\n  x\\<^sub>4 \\<noteq> x\\<^sub>5\n\ngoal (1 subgoal):\n 1. p\\<^sub>6 = p\\<^sub>1", "apply (simp add:\n          \\<open>y\\<^sub>5 = - y\\<^sub>2\\<close> \\<open>x\\<^sub>5 = x\\<^sub>2\\<close>\n          \\<open>x\\<^sub>4 = x\\<^sub>3\\<close> \\<open>y\\<^sub>4 = y\\<^sub>3\\<close>\n          \\<open>p\\<^sub>6 = Point x\\<^sub>6 y\\<^sub>6\\<close> \\<open>p\\<^sub>1 = Point x\\<^sub>1 y\\<^sub>1\\<close>\n          \\<open>x\\<^sub>6 = l' ^ 2 - x\\<^sub>4 - x\\<^sub>5\\<close> \\<open>y\\<^sub>6 = - y\\<^sub>4 - l' * (x\\<^sub>6 - x\\<^sub>4)\\<close>\n          \\<open>l' = (y\\<^sub>5 - y\\<^sub>4) / (x\\<^sub>5 - x\\<^sub>4)\\<close>\n          \\<open>x\\<^sub>3 = l ^ 2 - x\\<^sub>1 - x\\<^sub>2\\<close> \\<open>y\\<^sub>3 = - y\\<^sub>1 - l * (x\\<^sub>3 - x\\<^sub>1)\\<close>\n          \\<open>l = (y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1)\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 \\<noteq>\n    (2::'a) * x\\<^sub>2 \\<Longrightarrow>\n    ((- y\\<^sub>2 -\n      (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>2 -\n        (2::'a) * x\\<^sub>1) /\n       (x\\<^sub>2 - x\\<^sub>1))) /\n     ((2::'a) * x\\<^sub>2 +\n      (x\\<^sub>1 -\n       ((y\\<^sub>2 - y\\<^sub>1) /\n        (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2)))\\<^sup>2 =\n    ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 \\<and>\n    (y\\<^sub>2 - y\\<^sub>1) *\n    (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>2 -\n     (2::'a) * x\\<^sub>1) /\n    (x\\<^sub>2 - x\\<^sub>1) =\n    (- y\\<^sub>2 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>2 -\n       (2::'a) * x\\<^sub>1) /\n      (x\\<^sub>2 - x\\<^sub>1))) *\n    (((- y\\<^sub>2 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>2 -\n         (2::'a) * x\\<^sub>1) /\n        (x\\<^sub>2 - x\\<^sub>1))) /\n      ((2::'a) * x\\<^sub>2 +\n       (x\\<^sub>1 -\n        ((y\\<^sub>2 - y\\<^sub>1) /\n         (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2)))\\<^sup>2 +\n     ((2::'a) * x\\<^sub>1 + x\\<^sub>2) -\n     (2::'a) *\n     ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2) /\n    ((2::'a) * x\\<^sub>2 +\n     (x\\<^sub>1 -\n      ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2))", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 \\<noteq>\n    (2::'a) * x\\<^sub>2 \\<Longrightarrow>\n    ((- y\\<^sub>2 -\n      (- y\\<^sub>1 -\n       (y\\<^sub>2 - y\\<^sub>1) *\n       (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n        x\\<^sub>2 -\n        (2::'a) * x\\<^sub>1) /\n       (x\\<^sub>2 - x\\<^sub>1))) /\n     ((2::'a) * x\\<^sub>2 +\n      (x\\<^sub>1 -\n       ((y\\<^sub>2 - y\\<^sub>1) /\n        (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2)))\\<^sup>2 =\n    ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2\n 2. ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 \\<noteq>\n    (2::'a) * x\\<^sub>2 \\<Longrightarrow>\n    (y\\<^sub>2 - y\\<^sub>1) *\n    (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>2 -\n     (2::'a) * x\\<^sub>1) /\n    (x\\<^sub>2 - x\\<^sub>1) =\n    (- y\\<^sub>2 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>2 -\n       (2::'a) * x\\<^sub>1) /\n      (x\\<^sub>2 - x\\<^sub>1))) *\n    (((- y\\<^sub>2 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>2 -\n         (2::'a) * x\\<^sub>1) /\n        (x\\<^sub>2 - x\\<^sub>1))) /\n      ((2::'a) * x\\<^sub>2 +\n       (x\\<^sub>1 -\n        ((y\\<^sub>2 - y\\<^sub>1) /\n         (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2)))\\<^sup>2 +\n     ((2::'a) * x\\<^sub>1 + x\\<^sub>2) -\n     (2::'a) *\n     ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2) /\n    ((2::'a) * x\\<^sub>2 +\n     (x\\<^sub>1 -\n      ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2))", "apply field"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 \\<noteq>\n    (2::'a) * x\\<^sub>2 \\<Longrightarrow>\n    (2::'a) * x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 +\n    (x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     (y\\<^sub>2 - y\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a) \\<and>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)\n 2. ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 \\<noteq>\n    (2::'a) * x\\<^sub>2 \\<Longrightarrow>\n    (y\\<^sub>2 - y\\<^sub>1) *\n    (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>2 -\n     (2::'a) * x\\<^sub>1) /\n    (x\\<^sub>2 - x\\<^sub>1) =\n    (- y\\<^sub>2 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>2 -\n       (2::'a) * x\\<^sub>1) /\n      (x\\<^sub>2 - x\\<^sub>1))) *\n    (((- y\\<^sub>2 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>2 -\n         (2::'a) * x\\<^sub>1) /\n        (x\\<^sub>2 - x\\<^sub>1))) /\n      ((2::'a) * x\\<^sub>2 +\n       (x\\<^sub>1 -\n        ((y\\<^sub>2 - y\\<^sub>1) /\n         (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2)))\\<^sup>2 +\n     ((2::'a) * x\\<^sub>1 + x\\<^sub>2) -\n     (2::'a) *\n     ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2) /\n    ((2::'a) * x\\<^sub>2 +\n     (x\\<^sub>1 -\n      ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2))", "apply (rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 \\<noteq>\n    (2::'a) * x\\<^sub>2 \\<Longrightarrow>\n    (2::'a) * x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 +\n    (x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     (y\\<^sub>2 - y\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 2. ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 \\<noteq>\n    (2::'a) * x\\<^sub>2 \\<Longrightarrow>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)\n 3. ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 \\<noteq>\n    (2::'a) * x\\<^sub>2 \\<Longrightarrow>\n    (y\\<^sub>2 - y\\<^sub>1) *\n    (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>2 -\n     (2::'a) * x\\<^sub>1) /\n    (x\\<^sub>2 - x\\<^sub>1) =\n    (- y\\<^sub>2 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>2 -\n       (2::'a) * x\\<^sub>1) /\n      (x\\<^sub>2 - x\\<^sub>1))) *\n    (((- y\\<^sub>2 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>2 -\n         (2::'a) * x\\<^sub>1) /\n        (x\\<^sub>2 - x\\<^sub>1))) /\n      ((2::'a) * x\\<^sub>2 +\n       (x\\<^sub>1 -\n        ((y\\<^sub>2 - y\\<^sub>1) /\n         (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2)))\\<^sup>2 +\n     ((2::'a) * x\\<^sub>1 + x\\<^sub>2) -\n     (2::'a) *\n     ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2) /\n    ((2::'a) * x\\<^sub>2 +\n     (x\\<^sub>1 -\n      ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2))", "apply (rule notI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n             x\\<^sub>1 \\<noteq>\n             (2::'a) * x\\<^sub>2;\n     (2::'a) * x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 +\n     (x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n      (y\\<^sub>2 - y\\<^sub>1)\\<^sup>2) =\n     (0::'a)\\<rbrakk>\n    \\<Longrightarrow> False\n 2. ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 \\<noteq>\n    (2::'a) * x\\<^sub>2 \\<Longrightarrow>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)\n 3. ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 \\<noteq>\n    (2::'a) * x\\<^sub>2 \\<Longrightarrow>\n    (y\\<^sub>2 - y\\<^sub>1) *\n    (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>2 -\n     (2::'a) * x\\<^sub>1) /\n    (x\\<^sub>2 - x\\<^sub>1) =\n    (- y\\<^sub>2 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>2 -\n       (2::'a) * x\\<^sub>1) /\n      (x\\<^sub>2 - x\\<^sub>1))) *\n    (((- y\\<^sub>2 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>2 -\n         (2::'a) * x\\<^sub>1) /\n        (x\\<^sub>2 - x\\<^sub>1))) /\n      ((2::'a) * x\\<^sub>2 +\n       (x\\<^sub>1 -\n        ((y\\<^sub>2 - y\\<^sub>1) /\n         (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2)))\\<^sup>2 +\n     ((2::'a) * x\\<^sub>1 + x\\<^sub>2) -\n     (2::'a) *\n     ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2) /\n    ((2::'a) * x\\<^sub>2 +\n     (x\\<^sub>1 -\n      ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2))", "apply (erule notE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. (2::'a) * x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 +\n    (x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     (y\\<^sub>2 - y\\<^sub>1)\\<^sup>2) =\n    (0::'a) \\<Longrightarrow>\n    ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 =\n    (2::'a) * x\\<^sub>2\n 2. ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 \\<noteq>\n    (2::'a) * x\\<^sub>2 \\<Longrightarrow>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)\n 3. ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 \\<noteq>\n    (2::'a) * x\\<^sub>2 \\<Longrightarrow>\n    (y\\<^sub>2 - y\\<^sub>1) *\n    (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>2 -\n     (2::'a) * x\\<^sub>1) /\n    (x\\<^sub>2 - x\\<^sub>1) =\n    (- y\\<^sub>2 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>2 -\n       (2::'a) * x\\<^sub>1) /\n      (x\\<^sub>2 - x\\<^sub>1))) *\n    (((- y\\<^sub>2 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>2 -\n         (2::'a) * x\\<^sub>1) /\n        (x\\<^sub>2 - x\\<^sub>1))) /\n      ((2::'a) * x\\<^sub>2 +\n       (x\\<^sub>1 -\n        ((y\\<^sub>2 - y\\<^sub>1) /\n         (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2)))\\<^sup>2 +\n     ((2::'a) * x\\<^sub>1 + x\\<^sub>2) -\n     (2::'a) *\n     ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2) /\n    ((2::'a) * x\\<^sub>2 +\n     (x\\<^sub>1 -\n      ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2))", "apply (ring (prems))"], ["proof (prove)\ngoal (3 subgoals):\n 1. ((2::'a) * x\\<^sub>2 ^ 1 + (- (3::'a) * x\\<^sub>1 ^ 1 + (0::'a))) *\n    x\\<^sub>2\\<^sup>2 +\n    ((1::'a) * x\\<^sub>1 ^ 3 +\n     ((of_int (- 1) * y\\<^sub>2 ^ 1 + ((2::'a) * y\\<^sub>1 ^ 1 + (0::'a))) *\n      y\\<^sub>2 ^ 1 +\n      (of_int (- 1) * y\\<^sub>1\\<^sup>2 + (0::'a)))) =\n    (0::'a) \\<Longrightarrow>\n    ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 =\n    (2::'a) * x\\<^sub>2\n 2. ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 \\<noteq>\n    (2::'a) * x\\<^sub>2 \\<Longrightarrow>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)\n 3. ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 \\<noteq>\n    (2::'a) * x\\<^sub>2 \\<Longrightarrow>\n    (y\\<^sub>2 - y\\<^sub>1) *\n    (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>2 -\n     (2::'a) * x\\<^sub>1) /\n    (x\\<^sub>2 - x\\<^sub>1) =\n    (- y\\<^sub>2 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>2 -\n       (2::'a) * x\\<^sub>1) /\n      (x\\<^sub>2 - x\\<^sub>1))) *\n    (((- y\\<^sub>2 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>2 -\n         (2::'a) * x\\<^sub>1) /\n        (x\\<^sub>2 - x\\<^sub>1))) /\n      ((2::'a) * x\\<^sub>2 +\n       (x\\<^sub>1 -\n        ((y\\<^sub>2 - y\\<^sub>1) /\n         (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2)))\\<^sup>2 +\n     ((2::'a) * x\\<^sub>1 + x\\<^sub>2) -\n     (2::'a) *\n     ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2) /\n    ((2::'a) * x\\<^sub>2 +\n     (x\\<^sub>1 -\n      ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2))", "apply (rule sym)"], ["proof (prove)\ngoal (3 subgoals):\n 1. ((2::'a) * x\\<^sub>2 ^ 1 + (- (3::'a) * x\\<^sub>1 ^ 1 + (0::'a))) *\n    x\\<^sub>2\\<^sup>2 +\n    ((1::'a) * x\\<^sub>1 ^ 3 +\n     ((of_int (- 1) * y\\<^sub>2 ^ 1 + ((2::'a) * y\\<^sub>1 ^ 1 + (0::'a))) *\n      y\\<^sub>2 ^ 1 +\n      (of_int (- 1) * y\\<^sub>1\\<^sup>2 + (0::'a)))) =\n    (0::'a) \\<Longrightarrow>\n    (2::'a) * x\\<^sub>2 =\n    ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 - x\\<^sub>1\n 2. ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 \\<noteq>\n    (2::'a) * x\\<^sub>2 \\<Longrightarrow>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)\n 3. ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 \\<noteq>\n    (2::'a) * x\\<^sub>2 \\<Longrightarrow>\n    (y\\<^sub>2 - y\\<^sub>1) *\n    (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>2 -\n     (2::'a) * x\\<^sub>1) /\n    (x\\<^sub>2 - x\\<^sub>1) =\n    (- y\\<^sub>2 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>2 -\n       (2::'a) * x\\<^sub>1) /\n      (x\\<^sub>2 - x\\<^sub>1))) *\n    (((- y\\<^sub>2 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>2 -\n         (2::'a) * x\\<^sub>1) /\n        (x\\<^sub>2 - x\\<^sub>1))) /\n      ((2::'a) * x\\<^sub>2 +\n       (x\\<^sub>1 -\n        ((y\\<^sub>2 - y\\<^sub>1) /\n         (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2)))\\<^sup>2 +\n     ((2::'a) * x\\<^sub>1 + x\\<^sub>2) -\n     (2::'a) *\n     ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2) /\n    ((2::'a) * x\\<^sub>2 +\n     (x\\<^sub>1 -\n      ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2))", "apply field"], ["proof (prove)\ngoal (3 subgoals):\n 1. ((2::'a) * x\\<^sub>2 ^ 1 + (- (3::'a) * x\\<^sub>1 ^ 1 + (0::'a))) *\n    x\\<^sub>2\\<^sup>2 +\n    ((1::'a) * x\\<^sub>1 ^ 3 +\n     ((of_int (- 1) * y\\<^sub>2 ^ 1 + ((2::'a) * y\\<^sub>1 ^ 1 + (0::'a))) *\n      y\\<^sub>2 ^ 1 +\n      (of_int (- 1) * y\\<^sub>1\\<^sup>2 + (0::'a)))) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)\n 2. ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 \\<noteq>\n    (2::'a) * x\\<^sub>2 \\<Longrightarrow>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)\n 3. ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 \\<noteq>\n    (2::'a) * x\\<^sub>2 \\<Longrightarrow>\n    (y\\<^sub>2 - y\\<^sub>1) *\n    (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>2 -\n     (2::'a) * x\\<^sub>1) /\n    (x\\<^sub>2 - x\\<^sub>1) =\n    (- y\\<^sub>2 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>2 -\n       (2::'a) * x\\<^sub>1) /\n      (x\\<^sub>2 - x\\<^sub>1))) *\n    (((- y\\<^sub>2 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>2 -\n         (2::'a) * x\\<^sub>1) /\n        (x\\<^sub>2 - x\\<^sub>1))) /\n      ((2::'a) * x\\<^sub>2 +\n       (x\\<^sub>1 -\n        ((y\\<^sub>2 - y\\<^sub>1) /\n         (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2)))\\<^sup>2 +\n     ((2::'a) * x\\<^sub>1 + x\\<^sub>2) -\n     (2::'a) *\n     ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2) /\n    ((2::'a) * x\\<^sub>2 +\n     (x\\<^sub>1 -\n      ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2))", "apply (simp_all add: \\<open>x\\<^sub>1 \\<noteq> x\\<^sub>2\\<close> [symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 \\<noteq>\n    (2::'a) * x\\<^sub>2 \\<Longrightarrow>\n    (y\\<^sub>2 - y\\<^sub>1) *\n    (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n     x\\<^sub>2 -\n     (2::'a) * x\\<^sub>1) /\n    (x\\<^sub>2 - x\\<^sub>1) =\n    (- y\\<^sub>2 -\n     (- y\\<^sub>1 -\n      (y\\<^sub>2 - y\\<^sub>1) *\n      (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n       x\\<^sub>2 -\n       (2::'a) * x\\<^sub>1) /\n      (x\\<^sub>2 - x\\<^sub>1))) *\n    (((- y\\<^sub>2 -\n       (- y\\<^sub>1 -\n        (y\\<^sub>2 - y\\<^sub>1) *\n        (((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n         x\\<^sub>2 -\n         (2::'a) * x\\<^sub>1) /\n        (x\\<^sub>2 - x\\<^sub>1))) /\n      ((2::'a) * x\\<^sub>2 +\n       (x\\<^sub>1 -\n        ((y\\<^sub>2 - y\\<^sub>1) /\n         (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2)))\\<^sup>2 +\n     ((2::'a) * x\\<^sub>1 + x\\<^sub>2) -\n     (2::'a) *\n     ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2) /\n    ((2::'a) * x\\<^sub>2 +\n     (x\\<^sub>1 -\n      ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2))", "apply field"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 \\<noteq>\n    (2::'a) * x\\<^sub>2 \\<Longrightarrow>\n    (2::'a) * x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 +\n    (x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     (y\\<^sub>2 - y\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a) \\<and>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 \\<noteq>\n    (2::'a) * x\\<^sub>2 \\<Longrightarrow>\n    (2::'a) * x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 +\n    (x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     (y\\<^sub>2 - y\\<^sub>1)\\<^sup>2) \\<noteq>\n    (0::'a)\n 2. ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 \\<noteq>\n    (2::'a) * x\\<^sub>2 \\<Longrightarrow>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (rule notI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n             x\\<^sub>1 \\<noteq>\n             (2::'a) * x\\<^sub>2;\n     (2::'a) * x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 +\n     (x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n      (y\\<^sub>2 - y\\<^sub>1)\\<^sup>2) =\n     (0::'a)\\<rbrakk>\n    \\<Longrightarrow> False\n 2. ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 \\<noteq>\n    (2::'a) * x\\<^sub>2 \\<Longrightarrow>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (erule notE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (2::'a) * x\\<^sub>2 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 +\n    (x\\<^sub>1 * (x\\<^sub>2 - x\\<^sub>1)\\<^sup>2 -\n     (y\\<^sub>2 - y\\<^sub>1)\\<^sup>2) =\n    (0::'a) \\<Longrightarrow>\n    ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 =\n    (2::'a) * x\\<^sub>2\n 2. ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 \\<noteq>\n    (2::'a) * x\\<^sub>2 \\<Longrightarrow>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (ring (prems))"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((2::'a) * x\\<^sub>2 ^ 1 + (- (3::'a) * x\\<^sub>1 ^ 1 + (0::'a))) *\n    x\\<^sub>2\\<^sup>2 +\n    ((1::'a) * x\\<^sub>1 ^ 3 +\n     ((of_int (- 1) * y\\<^sub>2 ^ 1 + ((2::'a) * y\\<^sub>1 ^ 1 + (0::'a))) *\n      y\\<^sub>2 ^ 1 +\n      (of_int (- 1) * y\\<^sub>1\\<^sup>2 + (0::'a)))) =\n    (0::'a) \\<Longrightarrow>\n    ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 =\n    (2::'a) * x\\<^sub>2\n 2. ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 \\<noteq>\n    (2::'a) * x\\<^sub>2 \\<Longrightarrow>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (rule sym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((2::'a) * x\\<^sub>2 ^ 1 + (- (3::'a) * x\\<^sub>1 ^ 1 + (0::'a))) *\n    x\\<^sub>2\\<^sup>2 +\n    ((1::'a) * x\\<^sub>1 ^ 3 +\n     ((of_int (- 1) * y\\<^sub>2 ^ 1 + ((2::'a) * y\\<^sub>1 ^ 1 + (0::'a))) *\n      y\\<^sub>2 ^ 1 +\n      (of_int (- 1) * y\\<^sub>1\\<^sup>2 + (0::'a)))) =\n    (0::'a) \\<Longrightarrow>\n    (2::'a) * x\\<^sub>2 =\n    ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 - x\\<^sub>1\n 2. ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 \\<noteq>\n    (2::'a) * x\\<^sub>2 \\<Longrightarrow>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply field"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((2::'a) * x\\<^sub>2 ^ 1 + (- (3::'a) * x\\<^sub>1 ^ 1 + (0::'a))) *\n    x\\<^sub>2\\<^sup>2 +\n    ((1::'a) * x\\<^sub>1 ^ 3 +\n     ((of_int (- 1) * y\\<^sub>2 ^ 1 + ((2::'a) * y\\<^sub>1 ^ 1 + (0::'a))) *\n      y\\<^sub>2 ^ 1 +\n      (of_int (- 1) * y\\<^sub>1\\<^sup>2 + (0::'a)))) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)\n 2. ((y\\<^sub>2 - y\\<^sub>1) / (x\\<^sub>2 - x\\<^sub>1))\\<^sup>2 -\n    x\\<^sub>1 \\<noteq>\n    (2::'a) * x\\<^sub>2 \\<Longrightarrow>\n    x\\<^sub>2 - x\\<^sub>1 \\<noteq> (0::'a)", "apply (simp_all add: \\<open>x\\<^sub>1 \\<noteq> x\\<^sub>2\\<close> [symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  p\\<^sub>6 = p\\<^sub>1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2) = p\\<^sub>1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   (opp p\\<^sub>2) =\n  p\\<^sub>1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma add_shift_minus:\n  assumes ab: \"nonsingular a b\"\n  and p\\<^sub>1: \"on_curve a b p\\<^sub>1\"\n  and p\\<^sub>2: \"on_curve a b p\\<^sub>2\"\n  and p\\<^sub>3: \"on_curve a b p\\<^sub>3\"\n  and eq: \"add a p\\<^sub>1 p\\<^sub>2 = p\\<^sub>3\"\n  shows \"p\\<^sub>1 = add a p\\<^sub>3 (opp p\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p\\<^sub>1 = ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p\\<^sub>1 = ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2)", "note eq"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = p\\<^sub>3\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 = ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2)", "also"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = p\\<^sub>3\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 = ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2)", "from add_minus_id [OF ab p\\<^sub>3 opp_closed [OF p\\<^sub>2]] p\\<^sub>2"], ["proof (chain)\npicking this:\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2))\n   (opp (opp p\\<^sub>2)) =\n  p\\<^sub>3\n  on_curve a b p\\<^sub>2", "have \"p\\<^sub>3 = add a (add a p\\<^sub>3 (opp p\\<^sub>2)) p\\<^sub>2\""], ["proof (prove)\nusing this:\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2))\n   (opp (opp p\\<^sub>2)) =\n  p\\<^sub>3\n  on_curve a b p\\<^sub>2\n\ngoal (1 subgoal):\n 1. p\\<^sub>3 =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2))\n     p\\<^sub>2", "by (simp add: opp_opp)"], ["proof (state)\nthis:\n  p\\<^sub>3 =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2))\n   p\\<^sub>2\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 = ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2)", "finally"], ["proof (chain)\npicking this:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2))\n   p\\<^sub>2", "have \"add a p\\<^sub>2 p\\<^sub>1 = add a p\\<^sub>2 (add a p\\<^sub>3 (opp p\\<^sub>2))\""], ["proof (prove)\nusing this:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2))\n   p\\<^sub>2\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>2 p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2\n     (ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2))", "using p\\<^sub>1 p\\<^sub>2 p\\<^sub>3"], ["proof (prove)\nusing this:\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2))\n   p\\<^sub>2\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>2 p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2\n     (ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2))", "by (simp add: add_comm [of a b] add_closed opp_closed)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>2 p\\<^sub>1 =\n  ell_field_class.add a p\\<^sub>2\n   (ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 = ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2)", "with ab p\\<^sub>2 p\\<^sub>1 add_closed [OF p\\<^sub>3 opp_closed [OF p\\<^sub>2]]"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>1\n  on_curve a b (ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2))\n  ell_field_class.add a p\\<^sub>2 p\\<^sub>1 =\n  ell_field_class.add a p\\<^sub>2\n   (ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2))", "show ?thesis"], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>1\n  on_curve a b (ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2))\n  ell_field_class.add a p\\<^sub>2 p\\<^sub>1 =\n  ell_field_class.add a p\\<^sub>2\n   (ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 = ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2)", "by (rule cancel)"], ["proof (state)\nthis:\n  p\\<^sub>1 = ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma degen_assoc:\n  assumes ab: \"nonsingular a b\"\n  and p\\<^sub>1: \"on_curve a b p\\<^sub>1\"\n  and p\\<^sub>2: \"on_curve a b p\\<^sub>2\"\n  and p\\<^sub>3: \"on_curve a b p\\<^sub>3\"\n  and H:\n    \"(p\\<^sub>1 = Infinity \\<or> p\\<^sub>2 = Infinity \\<or> p\\<^sub>3 = Infinity) \\<or>\n     (p\\<^sub>1 = opp p\\<^sub>2 \\<or> p\\<^sub>2 = opp p\\<^sub>3) \\<or>\n     (opp p\\<^sub>1 = add a p\\<^sub>2 p\\<^sub>3 \\<or> opp p\\<^sub>3 = add a p\\<^sub>1 p\\<^sub>2)\"\n  shows \"add a p\\<^sub>1 (add a p\\<^sub>2 p\\<^sub>3) = add a (add a p\\<^sub>1 p\\<^sub>2) p\\<^sub>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "using H"], ["proof (prove)\nusing this:\n  (p\\<^sub>1 = Infinity \\<or>\n   p\\<^sub>2 = Infinity \\<or> p\\<^sub>3 = Infinity) \\<or>\n  (p\\<^sub>1 = opp p\\<^sub>2 \\<or> p\\<^sub>2 = opp p\\<^sub>3) \\<or>\n  opp p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<or>\n  opp p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "proof (elim disjE)"], ["proof (state)\ngoal (7 subgoals):\n 1. p\\<^sub>1 = Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>2 = Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 3. p\\<^sub>3 = Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 4. p\\<^sub>1 = opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 5. p\\<^sub>2 = opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 6. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 7. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "assume \"p\\<^sub>1 = Infinity\""], ["proof (state)\nthis:\n  p\\<^sub>1 = Infinity\n\ngoal (7 subgoals):\n 1. p\\<^sub>1 = Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>2 = Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 3. p\\<^sub>3 = Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 4. p\\<^sub>1 = opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 5. p\\<^sub>2 = opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 6. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 7. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>1 = Infinity", "show ?thesis"], ["proof (prove)\nusing this:\n  p\\<^sub>1 = Infinity\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "by (simp add: add_0_l)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>3\n\ngoal (6 subgoals):\n 1. p\\<^sub>2 = Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>3 = Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 3. p\\<^sub>1 = opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 4. p\\<^sub>2 = opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 5. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 6. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. p\\<^sub>2 = Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>3 = Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 3. p\\<^sub>1 = opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 4. p\\<^sub>2 = opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 5. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 6. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "assume \"p\\<^sub>2 = Infinity\""], ["proof (state)\nthis:\n  p\\<^sub>2 = Infinity\n\ngoal (6 subgoals):\n 1. p\\<^sub>2 = Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>3 = Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 3. p\\<^sub>1 = opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 4. p\\<^sub>2 = opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 5. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 6. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>2 = Infinity", "show ?thesis"], ["proof (prove)\nusing this:\n  p\\<^sub>2 = Infinity\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "by (simp add: add_0_l add_0_r)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>3\n\ngoal (5 subgoals):\n 1. p\\<^sub>3 = Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>1 = opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 3. p\\<^sub>2 = opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 4. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 5. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. p\\<^sub>3 = Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>1 = opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 3. p\\<^sub>2 = opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 4. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 5. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "assume \"p\\<^sub>3 = Infinity\""], ["proof (state)\nthis:\n  p\\<^sub>3 = Infinity\n\ngoal (5 subgoals):\n 1. p\\<^sub>3 = Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>1 = opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 3. p\\<^sub>2 = opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 4. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 5. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>3 = Infinity", "show ?thesis"], ["proof (prove)\nusing this:\n  p\\<^sub>3 = Infinity\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "by (simp add: add_0_r)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>3\n\ngoal (4 subgoals):\n 1. p\\<^sub>1 = opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>2 = opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 3. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 4. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. p\\<^sub>1 = opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>2 = opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 3. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 4. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "assume \"p\\<^sub>1 = opp p\\<^sub>2\""], ["proof (state)\nthis:\n  p\\<^sub>1 = opp p\\<^sub>2\n\ngoal (4 subgoals):\n 1. p\\<^sub>1 = opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>2 = opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 3. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 4. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "from p\\<^sub>2 p\\<^sub>3"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3", "have \"add a (opp p\\<^sub>2) (add a p\\<^sub>2 p\\<^sub>3) = add a (add a p\\<^sub>3 p\\<^sub>2) (opp p\\<^sub>2)\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n\ngoal (1 subgoal):\n 1. ell_field_class.add a (opp p\\<^sub>2)\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>3 p\\<^sub>2)\n     (opp p\\<^sub>2)", "by (simp add: add_comm [of a b] add_closed opp_closed)"], ["proof (state)\nthis:\n  ell_field_class.add a (opp p\\<^sub>2)\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>3 p\\<^sub>2)\n   (opp p\\<^sub>2)\n\ngoal (4 subgoals):\n 1. p\\<^sub>1 = opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>2 = opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 3. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 4. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "also"], ["proof (state)\nthis:\n  ell_field_class.add a (opp p\\<^sub>2)\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>3 p\\<^sub>2)\n   (opp p\\<^sub>2)\n\ngoal (4 subgoals):\n 1. p\\<^sub>1 = opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>2 = opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 3. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 4. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "from ab p\\<^sub>3 p\\<^sub>2"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>3\n  on_curve a b p\\<^sub>2", "have \"\\<dots> = p\\<^sub>3\""], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>3\n  on_curve a b p\\<^sub>2\n\ngoal (1 subgoal):\n 1. ell_field_class.add a (ell_field_class.add a p\\<^sub>3 p\\<^sub>2)\n     (opp p\\<^sub>2) =\n    p\\<^sub>3", "by (rule add_minus_id)"], ["proof (state)\nthis:\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>3 p\\<^sub>2)\n   (opp p\\<^sub>2) =\n  p\\<^sub>3\n\ngoal (4 subgoals):\n 1. p\\<^sub>1 = opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>2 = opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 3. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 4. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "also"], ["proof (state)\nthis:\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>3 p\\<^sub>2)\n   (opp p\\<^sub>2) =\n  p\\<^sub>3\n\ngoal (4 subgoals):\n 1. p\\<^sub>1 = opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>2 = opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 3. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 4. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "have \"\\<dots> = add a Infinity p\\<^sub>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p\\<^sub>3 = ell_field_class.add a Infinity p\\<^sub>3", "by (simp add: add_0_l)"], ["proof (state)\nthis:\n  p\\<^sub>3 = ell_field_class.add a Infinity p\\<^sub>3\n\ngoal (4 subgoals):\n 1. p\\<^sub>1 = opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>2 = opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 3. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 4. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "also"], ["proof (state)\nthis:\n  p\\<^sub>3 = ell_field_class.add a Infinity p\\<^sub>3\n\ngoal (4 subgoals):\n 1. p\\<^sub>1 = opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>2 = opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 3. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 4. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "from p\\<^sub>2"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>2", "have \"\\<dots> = add a (add a p\\<^sub>2 (opp p\\<^sub>2)) p\\<^sub>3\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>2\n\ngoal (1 subgoal):\n 1. ell_field_class.add a Infinity p\\<^sub>3 =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>2 (opp p\\<^sub>2))\n     p\\<^sub>3", "by (simp add: add_opp)"], ["proof (state)\nthis:\n  ell_field_class.add a Infinity p\\<^sub>3 =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>2 (opp p\\<^sub>2))\n   p\\<^sub>3\n\ngoal (4 subgoals):\n 1. p\\<^sub>1 = opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>2 = opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 3. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 4. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "also"], ["proof (state)\nthis:\n  ell_field_class.add a Infinity p\\<^sub>3 =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>2 (opp p\\<^sub>2))\n   p\\<^sub>3\n\ngoal (4 subgoals):\n 1. p\\<^sub>1 = opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>2 = opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 3. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 4. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "from p\\<^sub>2"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>2", "have \"\\<dots> = add a (add a (opp p\\<^sub>2) p\\<^sub>2) p\\<^sub>3\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>2\n\ngoal (1 subgoal):\n 1. ell_field_class.add a (ell_field_class.add a p\\<^sub>2 (opp p\\<^sub>2))\n     p\\<^sub>3 =\n    ell_field_class.add a (ell_field_class.add a (opp p\\<^sub>2) p\\<^sub>2)\n     p\\<^sub>3", "by (simp add: add_comm [of a b] opp_closed)"], ["proof (state)\nthis:\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>2 (opp p\\<^sub>2))\n   p\\<^sub>3 =\n  ell_field_class.add a (ell_field_class.add a (opp p\\<^sub>2) p\\<^sub>2)\n   p\\<^sub>3\n\ngoal (4 subgoals):\n 1. p\\<^sub>1 = opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>2 = opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 3. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 4. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "finally"], ["proof (chain)\npicking this:\n  ell_field_class.add a (opp p\\<^sub>2)\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a (opp p\\<^sub>2) p\\<^sub>2)\n   p\\<^sub>3", "show ?thesis"], ["proof (prove)\nusing this:\n  ell_field_class.add a (opp p\\<^sub>2)\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a (opp p\\<^sub>2) p\\<^sub>2)\n   p\\<^sub>3\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "using \\<open>p\\<^sub>1 = opp p\\<^sub>2\\<close>"], ["proof (prove)\nusing this:\n  ell_field_class.add a (opp p\\<^sub>2)\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a (opp p\\<^sub>2) p\\<^sub>2)\n   p\\<^sub>3\n  p\\<^sub>1 = opp p\\<^sub>2\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "by simp"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>3\n\ngoal (3 subgoals):\n 1. p\\<^sub>2 = opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 3. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. p\\<^sub>2 = opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 3. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "assume \"p\\<^sub>2 = opp p\\<^sub>3\""], ["proof (state)\nthis:\n  p\\<^sub>2 = opp p\\<^sub>3\n\ngoal (3 subgoals):\n 1. p\\<^sub>2 = opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 3. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "from p\\<^sub>3"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>3", "have \"add a p\\<^sub>1 (add a (opp p\\<^sub>3) p\\<^sub>3) = add a p\\<^sub>1 (add a p\\<^sub>3 (opp p\\<^sub>3))\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>3\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a (opp p\\<^sub>3) p\\<^sub>3) =\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>3))", "by (simp add: add_comm [of a b] opp_closed)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a (opp p\\<^sub>3) p\\<^sub>3) =\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>3))\n\ngoal (3 subgoals):\n 1. p\\<^sub>2 = opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 3. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "also"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a (opp p\\<^sub>3) p\\<^sub>3) =\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>3))\n\ngoal (3 subgoals):\n 1. p\\<^sub>2 = opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 3. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "from ab p\\<^sub>1 p\\<^sub>3"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>3", "have \"\\<dots> = add a (add a p\\<^sub>1 (opp p\\<^sub>3)) (opp (opp p\\<^sub>3))\""], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>3\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>3)) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>3))\n     (opp (opp p\\<^sub>3))", "by (simp add: add_opp add_minus_id add_0_r opp_closed)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>3)) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>3))\n   (opp (opp p\\<^sub>3))\n\ngoal (3 subgoals):\n 1. p\\<^sub>2 = opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 3. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "finally"], ["proof (chain)\npicking this:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a (opp p\\<^sub>3) p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>3))\n   (opp (opp p\\<^sub>3))", "show ?thesis"], ["proof (prove)\nusing this:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a (opp p\\<^sub>3) p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>3))\n   (opp (opp p\\<^sub>3))\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "using p\\<^sub>3 \\<open>p\\<^sub>2 = opp p\\<^sub>3\\<close>"], ["proof (prove)\nusing this:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a (opp p\\<^sub>3) p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 (opp p\\<^sub>3))\n   (opp (opp p\\<^sub>3))\n  on_curve a b p\\<^sub>3\n  p\\<^sub>2 = opp p\\<^sub>3\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "by (simp add: opp_opp)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>3\n\ngoal (2 subgoals):\n 1. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "assume eq: \"opp p\\<^sub>1 = add a p\\<^sub>2 p\\<^sub>3\""], ["proof (state)\nthis:\n  opp p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n\ngoal (2 subgoals):\n 1. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "from eq [symmetric] p\\<^sub>1"], ["proof (chain)\npicking this:\n  ell_field_class.add a p\\<^sub>2 p\\<^sub>3 = opp p\\<^sub>1\n  on_curve a b p\\<^sub>1", "have \"add a p\\<^sub>1 (add a p\\<^sub>2 p\\<^sub>3) = Infinity\""], ["proof (prove)\nusing this:\n  ell_field_class.add a p\\<^sub>2 p\\<^sub>3 = opp p\\<^sub>1\n  on_curve a b p\\<^sub>1\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    Infinity", "by (simp add: add_opp)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  Infinity\n\ngoal (2 subgoals):\n 1. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "also"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  Infinity\n\ngoal (2 subgoals):\n 1. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "from p\\<^sub>3"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>3", "have \"\\<dots> = add a p\\<^sub>3 (opp p\\<^sub>3)\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>3\n\ngoal (1 subgoal):\n 1. Infinity = ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>3)", "by (simp add: add_opp)"], ["proof (state)\nthis:\n  Infinity = ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>3)\n\ngoal (2 subgoals):\n 1. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "also"], ["proof (state)\nthis:\n  Infinity = ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>3)\n\ngoal (2 subgoals):\n 1. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "from p\\<^sub>3"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>3", "have \"\\<dots> = add a (opp p\\<^sub>3) p\\<^sub>3\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>3\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>3) =\n    ell_field_class.add a (opp p\\<^sub>3) p\\<^sub>3", "by (simp add: add_comm [of a b] opp_closed)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>3) =\n  ell_field_class.add a (opp p\\<^sub>3) p\\<^sub>3\n\ngoal (2 subgoals):\n 1. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "also"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>3) =\n  ell_field_class.add a (opp p\\<^sub>3) p\\<^sub>3\n\ngoal (2 subgoals):\n 1. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "from ab p\\<^sub>2 p\\<^sub>3"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3", "have \"\\<dots> = add a (add a (add a (opp p\\<^sub>3) (opp p\\<^sub>2)) (opp (opp p\\<^sub>2))) p\\<^sub>3\""], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n\ngoal (1 subgoal):\n 1. ell_field_class.add a (opp p\\<^sub>3) p\\<^sub>3 =\n    ell_field_class.add a\n     (ell_field_class.add a\n       (ell_field_class.add a (opp p\\<^sub>3) (opp p\\<^sub>2))\n       (opp (opp p\\<^sub>2)))\n     p\\<^sub>3", "by (simp add: add_minus_id opp_closed)"], ["proof (state)\nthis:\n  ell_field_class.add a (opp p\\<^sub>3) p\\<^sub>3 =\n  ell_field_class.add a\n   (ell_field_class.add a\n     (ell_field_class.add a (opp p\\<^sub>3) (opp p\\<^sub>2))\n     (opp (opp p\\<^sub>2)))\n   p\\<^sub>3\n\ngoal (2 subgoals):\n 1. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "also"], ["proof (state)\nthis:\n  ell_field_class.add a (opp p\\<^sub>3) p\\<^sub>3 =\n  ell_field_class.add a\n   (ell_field_class.add a\n     (ell_field_class.add a (opp p\\<^sub>3) (opp p\\<^sub>2))\n     (opp (opp p\\<^sub>2)))\n   p\\<^sub>3\n\ngoal (2 subgoals):\n 1. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "from p\\<^sub>2 p\\<^sub>3"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3", "have \"\\<dots> = add a (add a (add a (opp p\\<^sub>2) (opp p\\<^sub>3)) p\\<^sub>2) p\\<^sub>3\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n\ngoal (1 subgoal):\n 1. ell_field_class.add a\n     (ell_field_class.add a\n       (ell_field_class.add a (opp p\\<^sub>3) (opp p\\<^sub>2))\n       (opp (opp p\\<^sub>2)))\n     p\\<^sub>3 =\n    ell_field_class.add a\n     (ell_field_class.add a\n       (ell_field_class.add a (opp p\\<^sub>2) (opp p\\<^sub>3)) p\\<^sub>2)\n     p\\<^sub>3", "by (simp add: add_comm [of a b] opp_opp opp_closed)"], ["proof (state)\nthis:\n  ell_field_class.add a\n   (ell_field_class.add a\n     (ell_field_class.add a (opp p\\<^sub>3) (opp p\\<^sub>2))\n     (opp (opp p\\<^sub>2)))\n   p\\<^sub>3 =\n  ell_field_class.add a\n   (ell_field_class.add a\n     (ell_field_class.add a (opp p\\<^sub>2) (opp p\\<^sub>3)) p\\<^sub>2)\n   p\\<^sub>3\n\ngoal (2 subgoals):\n 1. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "finally"], ["proof (chain)\npicking this:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a\n   (ell_field_class.add a\n     (ell_field_class.add a (opp p\\<^sub>2) (opp p\\<^sub>3)) p\\<^sub>2)\n   p\\<^sub>3", "show ?thesis"], ["proof (prove)\nusing this:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a\n   (ell_field_class.add a\n     (ell_field_class.add a (opp p\\<^sub>2) (opp p\\<^sub>3)) p\\<^sub>2)\n   p\\<^sub>3\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "using opp_add [OF p\\<^sub>2 p\\<^sub>3] eq [symmetric] p\\<^sub>1"], ["proof (prove)\nusing this:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a\n   (ell_field_class.add a\n     (ell_field_class.add a (opp p\\<^sub>2) (opp p\\<^sub>3)) p\\<^sub>2)\n   p\\<^sub>3\n  opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (opp p\\<^sub>2) (opp p\\<^sub>3)\n  ell_field_class.add a p\\<^sub>2 p\\<^sub>3 = opp p\\<^sub>1\n  on_curve a b p\\<^sub>1\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "by (simp add: opp_opp)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>3\n\ngoal (1 subgoal):\n 1. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "assume eq: \"opp p\\<^sub>3 = add a p\\<^sub>1 p\\<^sub>2\""], ["proof (state)\nthis:\n  opp p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n\ngoal (1 subgoal):\n 1. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "from opp_add [OF p\\<^sub>1 p\\<^sub>2] eq [symmetric] p\\<^sub>3"], ["proof (chain)\npicking this:\n  opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n  ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = opp p\\<^sub>3\n  on_curve a b p\\<^sub>3", "have \"add a p\\<^sub>1 (add a p\\<^sub>2 p\\<^sub>3) = add a p\\<^sub>1 (add a p\\<^sub>2 (add a (opp p\\<^sub>1) (opp p\\<^sub>2)))\""], ["proof (prove)\nusing this:\n  opp (ell_field_class.add a p\\<^sub>1 p\\<^sub>2) =\n  ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = opp p\\<^sub>3\n  on_curve a b p\\<^sub>3\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2\n       (ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)))", "by (simp add: opp_opp)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2\n     (ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)))\n\ngoal (1 subgoal):\n 1. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "also"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2\n     (ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2)))\n\ngoal (1 subgoal):\n 1. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "from p\\<^sub>1 p\\<^sub>2"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2", "have \"\\<dots> = add a p\\<^sub>1 (add a (add a (opp p\\<^sub>1) (opp p\\<^sub>2)) (opp (opp p\\<^sub>2)))\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2\n       (ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2))) =\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a\n       (ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2))\n       (opp (opp p\\<^sub>2)))", "by (simp add: add_comm [of a b] opp_opp add_closed opp_closed)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2\n     (ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2))) =\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a\n     (ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2))\n     (opp (opp p\\<^sub>2)))\n\ngoal (1 subgoal):\n 1. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "also"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2\n     (ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2))) =\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a\n     (ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2))\n     (opp (opp p\\<^sub>2)))\n\ngoal (1 subgoal):\n 1. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "from ab p\\<^sub>1 p\\<^sub>2"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2", "have \"\\<dots> = Infinity\""], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a\n       (ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2))\n       (opp (opp p\\<^sub>2))) =\n    Infinity", "by (simp add: add_minus_id add_opp opp_closed)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a\n     (ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2))\n     (opp (opp p\\<^sub>2))) =\n  Infinity\n\ngoal (1 subgoal):\n 1. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "also"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a\n     (ell_field_class.add a (opp p\\<^sub>1) (opp p\\<^sub>2))\n     (opp (opp p\\<^sub>2))) =\n  Infinity\n\ngoal (1 subgoal):\n 1. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "from p\\<^sub>3"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>3", "have \"\\<dots> = add a p\\<^sub>3 (opp p\\<^sub>3)\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>3\n\ngoal (1 subgoal):\n 1. Infinity = ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>3)", "by (simp add: add_opp)"], ["proof (state)\nthis:\n  Infinity = ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>3)\n\ngoal (1 subgoal):\n 1. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "also"], ["proof (state)\nthis:\n  Infinity = ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>3)\n\ngoal (1 subgoal):\n 1. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "from p\\<^sub>3"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>3", "have \"\\<dots> = add a (opp p\\<^sub>3) p\\<^sub>3\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>3\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>3) =\n    ell_field_class.add a (opp p\\<^sub>3) p\\<^sub>3", "by (simp add: add_comm [of a b] opp_closed)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>3 (opp p\\<^sub>3) =\n  ell_field_class.add a (opp p\\<^sub>3) p\\<^sub>3\n\ngoal (1 subgoal):\n 1. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "finally"], ["proof (chain)\npicking this:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (opp p\\<^sub>3) p\\<^sub>3", "show ?thesis"], ["proof (prove)\nusing this:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (opp p\\<^sub>3) p\\<^sub>3\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "using eq [symmetric]"], ["proof (prove)\nusing this:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (opp p\\<^sub>3) p\\<^sub>3\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = opp p\\<^sub>3\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "by simp"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>3\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma spec4_assoc:\n  assumes ab: \"nonsingular a b\"\n  and p\\<^sub>1: \"on_curve a b p\\<^sub>1\"\n  and p\\<^sub>2: \"on_curve a b p\\<^sub>2\"\n  shows \"add a p\\<^sub>1 (add a p\\<^sub>2 p\\<^sub>2) = add a (add a p\\<^sub>1 p\\<^sub>2) p\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "proof (cases \"p\\<^sub>1 = Infinity\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p\\<^sub>1 = Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2\n 2. p\\<^sub>1 \\<noteq> Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "case True"], ["proof (state)\nthis:\n  p\\<^sub>1 = Infinity\n\ngoal (2 subgoals):\n 1. p\\<^sub>1 = Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2\n 2. p\\<^sub>1 \\<noteq> Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "from ab p\\<^sub>1 p\\<^sub>2 p\\<^sub>2"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2", "show ?thesis"], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "by (rule degen_assoc) (simp add: True)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>2\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq> Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq> Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "case False"], ["proof (state)\nthis:\n  p\\<^sub>1 \\<noteq> Infinity\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq> Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "proof (cases \"p\\<^sub>2 = Infinity\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p\\<^sub>2 = Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2\n 2. p\\<^sub>2 \\<noteq> Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "case True"], ["proof (state)\nthis:\n  p\\<^sub>2 = Infinity\n\ngoal (2 subgoals):\n 1. p\\<^sub>2 = Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2\n 2. p\\<^sub>2 \\<noteq> Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "from ab p\\<^sub>1 p\\<^sub>2 p\\<^sub>2"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2", "show ?thesis"], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "by (rule degen_assoc) (simp add: True)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>2\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 \\<noteq> Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p\\<^sub>2 \\<noteq> Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "case False"], ["proof (state)\nthis:\n  p\\<^sub>2 \\<noteq> Infinity\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 \\<noteq> Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "proof (cases \"p\\<^sub>2 = opp p\\<^sub>2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p\\<^sub>2 = opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2\n 2. p\\<^sub>2 \\<noteq> opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "case True"], ["proof (state)\nthis:\n  p\\<^sub>2 = opp p\\<^sub>2\n\ngoal (2 subgoals):\n 1. p\\<^sub>2 = opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2\n 2. p\\<^sub>2 \\<noteq> opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "from ab p\\<^sub>1 p\\<^sub>2 p\\<^sub>2"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2", "show ?thesis"], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "by (rule degen_assoc) (simp add: True [symmetric])"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>2\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 \\<noteq> opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p\\<^sub>2 \\<noteq> opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "case False"], ["proof (state)\nthis:\n  p\\<^sub>2 \\<noteq> opp p\\<^sub>2\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 \\<noteq> opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "proof (cases \"p\\<^sub>1 = opp p\\<^sub>2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p\\<^sub>1 = opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2\n 2. p\\<^sub>1 \\<noteq> opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "case True"], ["proof (state)\nthis:\n  p\\<^sub>1 = opp p\\<^sub>2\n\ngoal (2 subgoals):\n 1. p\\<^sub>1 = opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2\n 2. p\\<^sub>1 \\<noteq> opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "from ab p\\<^sub>1 p\\<^sub>2 p\\<^sub>2"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2", "show ?thesis"], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "by (rule degen_assoc) (simp add: True)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>2\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq> opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq> opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "case False"], ["proof (state)\nthis:\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>2\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq> opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "proof (cases \"opp p\\<^sub>1 = add a p\\<^sub>2 p\\<^sub>2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2\n 2. opp p\\<^sub>1 \\<noteq>\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "case True"], ["proof (state)\nthis:\n  opp p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n\ngoal (2 subgoals):\n 1. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2\n 2. opp p\\<^sub>1 \\<noteq>\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "from ab p\\<^sub>1 p\\<^sub>2 p\\<^sub>2"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2", "show ?thesis"], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "by (rule degen_assoc) (simp add: True)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>2\n\ngoal (1 subgoal):\n 1. opp p\\<^sub>1 \\<noteq>\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. opp p\\<^sub>1 \\<noteq>\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "case False"], ["proof (state)\nthis:\n  opp p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n\ngoal (1 subgoal):\n 1. opp p\\<^sub>1 \\<noteq>\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "proof (cases \"opp p\\<^sub>2 = add a p\\<^sub>1 p\\<^sub>2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. opp p\\<^sub>2 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2\n 2. opp p\\<^sub>2 \\<noteq>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "case True"], ["proof (state)\nthis:\n  opp p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n\ngoal (2 subgoals):\n 1. opp p\\<^sub>2 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2\n 2. opp p\\<^sub>2 \\<noteq>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "from ab p\\<^sub>1 p\\<^sub>2 p\\<^sub>2"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2", "show ?thesis"], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>2\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "by (rule degen_assoc) (simp add: True)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>2\n\ngoal (1 subgoal):\n 1. opp p\\<^sub>2 \\<noteq>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. opp p\\<^sub>2 \\<noteq>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "case False"], ["proof (state)\nthis:\n  opp p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n\ngoal (1 subgoal):\n 1. opp p\\<^sub>2 \\<noteq>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "proof (cases \"p\\<^sub>1 = add a p\\<^sub>2 p\\<^sub>2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2\n 2. p\\<^sub>1 \\<noteq>\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "case True"], ["proof (state)\nthis:\n  p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n\ngoal (2 subgoals):\n 1. p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2\n 2. p\\<^sub>1 \\<noteq>\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "from p\\<^sub>1 p\\<^sub>2 \\<open>p\\<^sub>1 \\<noteq> opp p\\<^sub>2\\<close> \\<open>p\\<^sub>2 \\<noteq> opp p\\<^sub>2\\<close>\n                \\<open>opp p\\<^sub>1 \\<noteq> add a p\\<^sub>2 p\\<^sub>2\\<close> \\<open>opp p\\<^sub>2 \\<noteq> add a p\\<^sub>1 p\\<^sub>2\\<close>\n                \\<open>p\\<^sub>1 \\<noteq> Infinity\\<close> \\<open>p\\<^sub>2 \\<noteq> Infinity\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>2\n  p\\<^sub>2 \\<noteq> opp p\\<^sub>2\n  opp p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  opp p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  p\\<^sub>1 \\<noteq> Infinity\n  p\\<^sub>2 \\<noteq> Infinity", "show ?thesis"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>2\n  p\\<^sub>2 \\<noteq> opp p\\<^sub>2\n  opp p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  opp p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  p\\<^sub>1 \\<noteq> Infinity\n  p\\<^sub>2 \\<noteq> Infinity\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "apply (simp add: True)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>on_curve a b (ell_field_class.add a p\\<^sub>2 p\\<^sub>2);\n     on_curve a b p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) \\<noteq>\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq>\n     ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n      p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a\n                       (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n                       (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n                      ell_field_class.add a\n                       (ell_field_class.add a\n                         (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n                         p\\<^sub>2)\n                       p\\<^sub>2", "apply (rule spec3_assoc)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>on_curve a b (ell_field_class.add a p\\<^sub>2 p\\<^sub>2);\n     on_curve a b p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) \\<noteq>\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq>\n     ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n      p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity\\<rbrakk>\n    \\<Longrightarrow> on_curve a ?b8\n                       (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n 2. \\<lbrakk>on_curve a b (ell_field_class.add a p\\<^sub>2 p\\<^sub>2);\n     on_curve a b p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) \\<noteq>\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq>\n     ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n      p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity\\<rbrakk>\n    \\<Longrightarrow> on_curve a ?b8 p\\<^sub>2\n 3. \\<lbrakk>on_curve a b (ell_field_class.add a p\\<^sub>2 p\\<^sub>2);\n     on_curve a b p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) \\<noteq>\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq>\n     ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n      p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity\\<rbrakk>\n    \\<Longrightarrow> on_curve a ?b8 p\\<^sub>2\n 4. \\<lbrakk>on_curve a b (ell_field_class.add a p\\<^sub>2 p\\<^sub>2);\n     on_curve a b p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) \\<noteq>\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq>\n     ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n      p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity\\<rbrakk>\n    \\<Longrightarrow> is_generic (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n                       p\\<^sub>2\n 5. \\<lbrakk>on_curve a b (ell_field_class.add a p\\<^sub>2 p\\<^sub>2);\n     on_curve a b p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) \\<noteq>\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq>\n     ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n      p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity\\<rbrakk>\n    \\<Longrightarrow> is_tangent p\\<^sub>2 p\\<^sub>2\n 6. \\<lbrakk>on_curve a b (ell_field_class.add a p\\<^sub>2 p\\<^sub>2);\n     on_curve a b p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) \\<noteq>\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq>\n     ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n      p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity\\<rbrakk>\n    \\<Longrightarrow> is_generic\n                       (ell_field_class.add a\n                         (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n                         p\\<^sub>2)\n                       p\\<^sub>2\n 7. \\<lbrakk>on_curve a b (ell_field_class.add a p\\<^sub>2 p\\<^sub>2);\n     on_curve a b p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) \\<noteq>\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq>\n     ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n      p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity\\<rbrakk>\n    \\<Longrightarrow> is_tangent (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n                       (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)", "apply (simp_all add: is_generic_def is_tangent_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>on_curve a b (ell_field_class.add a p\\<^sub>2 p\\<^sub>2);\n     on_curve a b p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) \\<noteq>\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq>\n     ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n      p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq>\n                      p\\<^sub>2\n 2. \\<lbrakk>on_curve a b (ell_field_class.add a p\\<^sub>2 p\\<^sub>2);\n     on_curve a b p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) \\<noteq>\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq>\n     ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n      p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a\n                       (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n                       p\\<^sub>2 \\<noteq>\n                      Infinity \\<and>\n                      ell_field_class.add a\n                       (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n                       p\\<^sub>2 \\<noteq>\n                      p\\<^sub>2", "apply (rule notI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>on_curve a b (ell_field_class.add a p\\<^sub>2 p\\<^sub>2);\n     on_curve a b p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) \\<noteq>\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq>\n     ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n      p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 = p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>on_curve a b (ell_field_class.add a p\\<^sub>2 p\\<^sub>2);\n     on_curve a b p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) \\<noteq>\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq>\n     ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n      p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a\n                       (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n                       p\\<^sub>2 \\<noteq>\n                      Infinity \\<and>\n                      ell_field_class.add a\n                       (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n                       p\\<^sub>2 \\<noteq>\n                      p\\<^sub>2", "apply (drule uniq_zero [OF ab p\\<^sub>2 p\\<^sub>2])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>on_curve a b (ell_field_class.add a p\\<^sub>2 p\\<^sub>2);\n     on_curve a b p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) \\<noteq>\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq>\n     ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n      p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity; p\\<^sub>2 = Infinity\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>on_curve a b (ell_field_class.add a p\\<^sub>2 p\\<^sub>2);\n     on_curve a b p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) \\<noteq>\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq>\n     ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n      p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a\n                       (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n                       p\\<^sub>2 \\<noteq>\n                      Infinity \\<and>\n                      ell_field_class.add a\n                       (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n                       p\\<^sub>2 \\<noteq>\n                      p\\<^sub>2", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>on_curve a b (ell_field_class.add a p\\<^sub>2 p\\<^sub>2);\n     on_curve a b p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) \\<noteq>\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq>\n     ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n      p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a\n                       (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n                       p\\<^sub>2 \\<noteq>\n                      Infinity \\<and>\n                      ell_field_class.add a\n                       (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n                       p\\<^sub>2 \\<noteq>\n                      p\\<^sub>2", "apply (intro conjI notI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>on_curve a b (ell_field_class.add a p\\<^sub>2 p\\<^sub>2);\n     on_curve a b p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) \\<noteq>\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq>\n     ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n      p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity;\n     ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n      p\\<^sub>2 =\n     Infinity\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>on_curve a b (ell_field_class.add a p\\<^sub>2 p\\<^sub>2);\n     on_curve a b p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) \\<noteq>\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq>\n     ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n      p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity;\n     ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n      p\\<^sub>2 =\n     p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> False", "apply (erule notE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>on_curve a b (ell_field_class.add a p\\<^sub>2 p\\<^sub>2);\n     on_curve a b p\\<^sub>2; p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) \\<noteq>\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq>\n     ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n      p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity;\n     ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n      p\\<^sub>2 =\n     Infinity\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 p\\<^sub>2 =\n                      opp p\\<^sub>2\n 2. \\<lbrakk>on_curve a b (ell_field_class.add a p\\<^sub>2 p\\<^sub>2);\n     on_curve a b p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) \\<noteq>\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq>\n     ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n      p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity;\n     ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n      p\\<^sub>2 =\n     p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> False", "apply (rule uniq_opp [of a])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>on_curve a b (ell_field_class.add a p\\<^sub>2 p\\<^sub>2);\n     on_curve a b p\\<^sub>2; p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) \\<noteq>\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq>\n     ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n      p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity;\n     ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n      p\\<^sub>2 =\n     Infinity\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a p\\<^sub>2\n                       (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n                      Infinity\n 2. \\<lbrakk>on_curve a b (ell_field_class.add a p\\<^sub>2 p\\<^sub>2);\n     on_curve a b p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) \\<noteq>\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq>\n     ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n      p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity;\n     ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n      p\\<^sub>2 =\n     p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add: add_comm [of a b] add_closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>on_curve a b (ell_field_class.add a p\\<^sub>2 p\\<^sub>2);\n     on_curve a b p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) \\<noteq>\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq>\n     ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n      p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity;\n     ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n      p\\<^sub>2 =\n     p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> False", "apply (erule notE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>on_curve a b (ell_field_class.add a p\\<^sub>2 p\\<^sub>2);\n     on_curve a b p\\<^sub>2; p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) \\<noteq>\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq>\n     ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n      p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity;\n     ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n      p\\<^sub>2 =\n     p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 p\\<^sub>2 =\n                      opp p\\<^sub>2", "apply (drule uniq_zero [OF ab add_closed [OF p\\<^sub>2 p\\<^sub>2] p\\<^sub>2])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>on_curve a b (ell_field_class.add a p\\<^sub>2 p\\<^sub>2);\n     on_curve a b p\\<^sub>2; p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) \\<noteq>\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq>\n     ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n      p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 = Infinity\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 p\\<^sub>2 =\n                      opp p\\<^sub>2", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>2\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq>\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq>\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "case False"], ["proof (state)\nthis:\n  p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq>\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "proof (cases \"p\\<^sub>2 = add a p\\<^sub>1 p\\<^sub>2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2\n 2. p\\<^sub>2 \\<noteq>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "case True"], ["proof (state)\nthis:\n  p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n\ngoal (2 subgoals):\n 1. p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2\n 2. p\\<^sub>2 \\<noteq>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "from ab p\\<^sub>1 p\\<^sub>2 True [symmetric]"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = p\\<^sub>2", "have \"p\\<^sub>1 = Infinity\""], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = p\\<^sub>2\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 = Infinity", "by (rule uniq_zero)"], ["proof (state)\nthis:\n  p\\<^sub>1 = Infinity\n\ngoal (2 subgoals):\n 1. p\\<^sub>2 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2\n 2. p\\<^sub>2 \\<noteq>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  p\\<^sub>1 = Infinity", "show ?thesis"], ["proof (prove)\nusing this:\n  p\\<^sub>1 = Infinity\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "by (simp add: add_0_l)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>2\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 \\<noteq>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p\\<^sub>2 \\<noteq>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "case False"], ["proof (state)\nthis:\n  p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 \\<noteq>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "proof (cases \"p\\<^sub>1 = p\\<^sub>2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p\\<^sub>1 = p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2\n 2. p\\<^sub>1 \\<noteq> p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "case True"], ["proof (state)\nthis:\n  p\\<^sub>1 = p\\<^sub>2\n\ngoal (2 subgoals):\n 1. p\\<^sub>1 = p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2\n 2. p\\<^sub>1 \\<noteq> p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "with p\\<^sub>2"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>2\n  p\\<^sub>1 = p\\<^sub>2", "show ?thesis"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>2\n  p\\<^sub>1 = p\\<^sub>2\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "by (simp add: add_comm [of a b] add_closed)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>2\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq> p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq> p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "case False"], ["proof (state)\nthis:\n  p\\<^sub>1 \\<noteq> p\\<^sub>2\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq> p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "with p\\<^sub>1 p\\<^sub>2 \\<open>p\\<^sub>1 \\<noteq> Infinity\\<close> \\<open>p\\<^sub>2 \\<noteq> Infinity\\<close>\n                    \\<open>p\\<^sub>1 \\<noteq> opp p\\<^sub>2\\<close> \\<open>p\\<^sub>2 \\<noteq> opp p\\<^sub>2\\<close>\n                    \\<open>p\\<^sub>1 \\<noteq> add a p\\<^sub>2 p\\<^sub>2\\<close> \\<open>p\\<^sub>2 \\<noteq> add a p\\<^sub>1 p\\<^sub>2\\<close> \\<open>opp p\\<^sub>2 \\<noteq> add a p\\<^sub>1 p\\<^sub>2\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>1 \\<noteq> Infinity\n  p\\<^sub>2 \\<noteq> Infinity\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>2\n  p\\<^sub>2 \\<noteq> opp p\\<^sub>2\n  p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  opp p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  p\\<^sub>1 \\<noteq> p\\<^sub>2", "show ?thesis"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>1 \\<noteq> Infinity\n  p\\<^sub>2 \\<noteq> Infinity\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>2\n  p\\<^sub>2 \\<noteq> opp p\\<^sub>2\n  p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>2\n  p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  opp p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  p\\<^sub>1 \\<noteq> p\\<^sub>2\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>2", "apply (rule_tac spec2_assoc)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> Infinity; p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> opp p\\<^sub>2; p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> on_curve a ?b10 p\\<^sub>1\n 2. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> Infinity; p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> opp p\\<^sub>2; p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> on_curve a ?b10 p\\<^sub>2\n 3. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> Infinity; p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> opp p\\<^sub>2; p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> on_curve a ?b10 p\\<^sub>2\n 4. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> Infinity; p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> opp p\\<^sub>2; p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> is_generic p\\<^sub>1 p\\<^sub>2\n 5. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> Infinity; p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> opp p\\<^sub>2; p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> is_tangent p\\<^sub>2 p\\<^sub>2\n 6. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> Infinity; p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> opp p\\<^sub>2; p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> is_generic (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n                       p\\<^sub>2\n 7. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> Infinity; p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> opp p\\<^sub>2; p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> is_generic p\\<^sub>1\n                       (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)", "apply (simp_all add: is_generic_def is_tangent_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> Infinity; p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> opp p\\<^sub>2; p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<noteq>\n                      Infinity\n 2. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> Infinity; p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> opp p\\<^sub>2; p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq>\n                      Infinity \\<and>\n                      p\\<^sub>1 \\<noteq>\n                      opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)", "apply (rule notI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> Infinity; p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> opp p\\<^sub>2; p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = Infinity\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> Infinity; p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> opp p\\<^sub>2; p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq>\n                      Infinity \\<and>\n                      p\\<^sub>1 \\<noteq>\n                      opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)", "apply (erule notE [of \"p\\<^sub>1 = opp p\\<^sub>2\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> Infinity; p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = Infinity\\<rbrakk>\n    \\<Longrightarrow> p\\<^sub>1 = opp p\\<^sub>2\n 2. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> Infinity; p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> opp p\\<^sub>2; p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq>\n                      Infinity \\<and>\n                      p\\<^sub>1 \\<noteq>\n                      opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)", "apply (rule uniq_opp [of a])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> Infinity; p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = Infinity\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 p\\<^sub>1 = Infinity\n 2. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> Infinity; p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> opp p\\<^sub>2; p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq>\n                      Infinity \\<and>\n                      p\\<^sub>1 \\<noteq>\n                      opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)", "apply (simp add: add_comm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> Infinity; p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> opp p\\<^sub>2; p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 p\\<^sub>2 \\<noteq>\n                      Infinity \\<and>\n                      p\\<^sub>1 \\<noteq>\n                      opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)", "apply (intro conjI notI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> Infinity; p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> opp p\\<^sub>2; p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 = Infinity\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> Infinity; p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> opp p\\<^sub>2; p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2;\n     p\\<^sub>1 = opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> False", "apply (erule notE [of \"p\\<^sub>2 = opp p\\<^sub>2\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> Infinity; p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 = Infinity\\<rbrakk>\n    \\<Longrightarrow> p\\<^sub>2 = opp p\\<^sub>2\n 2. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> Infinity; p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> opp p\\<^sub>2; p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2;\n     p\\<^sub>1 = opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> False", "apply (rule uniq_opp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> Infinity; p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>2 = Infinity\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add ?a22 p\\<^sub>2 p\\<^sub>2 =\n                      Infinity\n 2. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> Infinity; p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> opp p\\<^sub>2; p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2;\n     p\\<^sub>1 = opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> False", "apply assumption+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> Infinity; p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> opp p\\<^sub>2; p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2;\n     p\\<^sub>1 = opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> False", "apply (rule notE [OF \\<open>opp p\\<^sub>1 \\<noteq> add a p\\<^sub>2 p\\<^sub>2\\<close>])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> Infinity; p\\<^sub>2 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> opp p\\<^sub>2; p\\<^sub>2 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     opp p\\<^sub>2 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2;\n     p\\<^sub>1 = opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> opp p\\<^sub>1 =\n                      ell_field_class.add a p\\<^sub>2 p\\<^sub>2", "apply (simp add: opp_opp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma add_assoc:\n  assumes ab: \"nonsingular a b\"\n  and p\\<^sub>1: \"on_curve a b p\\<^sub>1\"\n  and p\\<^sub>2: \"on_curve a b p\\<^sub>2\"\n  and p\\<^sub>3: \"on_curve a b p\\<^sub>3\"\n  shows \"add a p\\<^sub>1 (add a p\\<^sub>2 p\\<^sub>3) = add a (add a p\\<^sub>1 p\\<^sub>2) p\\<^sub>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "proof (cases \"p\\<^sub>1 = Infinity\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p\\<^sub>1 = Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>1 \\<noteq> Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "case True"], ["proof (state)\nthis:\n  p\\<^sub>1 = Infinity\n\ngoal (2 subgoals):\n 1. p\\<^sub>1 = Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>1 \\<noteq> Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "from ab p\\<^sub>1 p\\<^sub>2 p\\<^sub>3"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3", "show ?thesis"], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "by (rule degen_assoc) (simp add: True)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>3\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq> Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq> Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "case False"], ["proof (state)\nthis:\n  p\\<^sub>1 \\<noteq> Infinity\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq> Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "proof (cases \"p\\<^sub>2 = Infinity\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p\\<^sub>2 = Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>2 \\<noteq> Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "case True"], ["proof (state)\nthis:\n  p\\<^sub>2 = Infinity\n\ngoal (2 subgoals):\n 1. p\\<^sub>2 = Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>2 \\<noteq> Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "from ab p\\<^sub>1 p\\<^sub>2 p\\<^sub>3"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3", "show ?thesis"], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "by (rule degen_assoc) (simp add: True)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>3\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 \\<noteq> Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p\\<^sub>2 \\<noteq> Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "case False"], ["proof (state)\nthis:\n  p\\<^sub>2 \\<noteq> Infinity\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 \\<noteq> Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "proof (cases \"p\\<^sub>3 = Infinity\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p\\<^sub>3 = Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>3 \\<noteq> Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "case True"], ["proof (state)\nthis:\n  p\\<^sub>3 = Infinity\n\ngoal (2 subgoals):\n 1. p\\<^sub>3 = Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>3 \\<noteq> Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "from ab p\\<^sub>1 p\\<^sub>2 p\\<^sub>3"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3", "show ?thesis"], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "by (rule degen_assoc) (simp add: True)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>3\n\ngoal (1 subgoal):\n 1. p\\<^sub>3 \\<noteq> Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p\\<^sub>3 \\<noteq> Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "case False"], ["proof (state)\nthis:\n  p\\<^sub>3 \\<noteq> Infinity\n\ngoal (1 subgoal):\n 1. p\\<^sub>3 \\<noteq> Infinity \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "proof (cases \"p\\<^sub>1 = p\\<^sub>2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p\\<^sub>1 = p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>1 \\<noteq> p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "case True"], ["proof (state)\nthis:\n  p\\<^sub>1 = p\\<^sub>2\n\ngoal (2 subgoals):\n 1. p\\<^sub>1 = p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>1 \\<noteq> p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "from p\\<^sub>2 p\\<^sub>3"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3", "have \"add a p\\<^sub>2 (add a p\\<^sub>2 p\\<^sub>3) = add a (add a p\\<^sub>3 p\\<^sub>2) p\\<^sub>2\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>2\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>3 p\\<^sub>2)\n     p\\<^sub>2", "by (simp add: add_comm [of a b] add_closed)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>2\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>3 p\\<^sub>2)\n   p\\<^sub>2\n\ngoal (2 subgoals):\n 1. p\\<^sub>1 = p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>1 \\<noteq> p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "also"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>2\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>3 p\\<^sub>2)\n   p\\<^sub>2\n\ngoal (2 subgoals):\n 1. p\\<^sub>1 = p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>1 \\<noteq> p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "from ab p\\<^sub>3 p\\<^sub>2"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>3\n  on_curve a b p\\<^sub>2", "have \"\\<dots> = add a p\\<^sub>3 (add a p\\<^sub>2 p\\<^sub>2)\""], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>3\n  on_curve a b p\\<^sub>2\n\ngoal (1 subgoal):\n 1. ell_field_class.add a (ell_field_class.add a p\\<^sub>3 p\\<^sub>2)\n     p\\<^sub>2 =\n    ell_field_class.add a p\\<^sub>3\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)", "by (simp add: spec4_assoc)"], ["proof (state)\nthis:\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>3 p\\<^sub>2)\n   p\\<^sub>2 =\n  ell_field_class.add a p\\<^sub>3\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n\ngoal (2 subgoals):\n 1. p\\<^sub>1 = p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>1 \\<noteq> p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "also"], ["proof (state)\nthis:\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>3 p\\<^sub>2)\n   p\\<^sub>2 =\n  ell_field_class.add a p\\<^sub>3\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n\ngoal (2 subgoals):\n 1. p\\<^sub>1 = p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>1 \\<noteq> p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "from p\\<^sub>2 p\\<^sub>3"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3", "have \"\\<dots> = add a (add a p\\<^sub>2 p\\<^sub>2) p\\<^sub>3\""], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>3\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n     p\\<^sub>3", "by (simp add: add_comm [of a b] add_closed)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>3\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>2) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n   p\\<^sub>3\n\ngoal (2 subgoals):\n 1. p\\<^sub>1 = p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>1 \\<noteq> p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "finally"], ["proof (chain)\npicking this:\n  ell_field_class.add a p\\<^sub>2\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n   p\\<^sub>3", "show ?thesis"], ["proof (prove)\nusing this:\n  ell_field_class.add a p\\<^sub>2\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n   p\\<^sub>3\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "using True"], ["proof (prove)\nusing this:\n  ell_field_class.add a p\\<^sub>2\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>2 p\\<^sub>2)\n   p\\<^sub>3\n  p\\<^sub>1 = p\\<^sub>2\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "by simp"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>3\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq> p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq> p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "case False"], ["proof (state)\nthis:\n  p\\<^sub>1 \\<noteq> p\\<^sub>2\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq> p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "proof (cases \"p\\<^sub>1 = opp p\\<^sub>2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p\\<^sub>1 = opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>1 \\<noteq> opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "case True"], ["proof (state)\nthis:\n  p\\<^sub>1 = opp p\\<^sub>2\n\ngoal (2 subgoals):\n 1. p\\<^sub>1 = opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>1 \\<noteq> opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "from ab p\\<^sub>1 p\\<^sub>2 p\\<^sub>3"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3", "show ?thesis"], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "by (rule degen_assoc) (simp add: True)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>3\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq> opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq> opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "case False"], ["proof (state)\nthis:\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>2\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq> opp p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "proof (cases \"p\\<^sub>2 = p\\<^sub>3\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p\\<^sub>2 = p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>2 \\<noteq> p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "case True"], ["proof (state)\nthis:\n  p\\<^sub>2 = p\\<^sub>3\n\ngoal (2 subgoals):\n 1. p\\<^sub>2 = p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>2 \\<noteq> p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "with ab p\\<^sub>1 p\\<^sub>3"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>3\n  p\\<^sub>2 = p\\<^sub>3", "show ?thesis"], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>3\n  p\\<^sub>2 = p\\<^sub>3\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "by (simp add: spec4_assoc)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>3\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 \\<noteq> p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p\\<^sub>2 \\<noteq> p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "case False"], ["proof (state)\nthis:\n  p\\<^sub>2 \\<noteq> p\\<^sub>3\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 \\<noteq> p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "proof (cases \"p\\<^sub>2 = opp p\\<^sub>3\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p\\<^sub>2 = opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>2 \\<noteq> opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "case True"], ["proof (state)\nthis:\n  p\\<^sub>2 = opp p\\<^sub>3\n\ngoal (2 subgoals):\n 1. p\\<^sub>2 = opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>2 \\<noteq> opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "from ab p\\<^sub>1 p\\<^sub>2 p\\<^sub>3"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3", "show ?thesis"], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "by (rule degen_assoc) (simp add: True)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>3\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 \\<noteq> opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p\\<^sub>2 \\<noteq> opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "case False"], ["proof (state)\nthis:\n  p\\<^sub>2 \\<noteq> opp p\\<^sub>3\n\ngoal (1 subgoal):\n 1. p\\<^sub>2 \\<noteq> opp p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "proof (cases \"opp p\\<^sub>1 = add a p\\<^sub>2 p\\<^sub>3\")"], ["proof (state)\ngoal (2 subgoals):\n 1. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. opp p\\<^sub>1 \\<noteq>\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "case True"], ["proof (state)\nthis:\n  opp p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n\ngoal (2 subgoals):\n 1. opp p\\<^sub>1 =\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. opp p\\<^sub>1 \\<noteq>\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "from ab p\\<^sub>1 p\\<^sub>2 p\\<^sub>3"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3", "show ?thesis"], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "by (rule degen_assoc) (simp add: True)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>3\n\ngoal (1 subgoal):\n 1. opp p\\<^sub>1 \\<noteq>\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. opp p\\<^sub>1 \\<noteq>\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "case False"], ["proof (state)\nthis:\n  opp p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n\ngoal (1 subgoal):\n 1. opp p\\<^sub>1 \\<noteq>\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "proof (cases \"opp p\\<^sub>3 = add a p\\<^sub>1 p\\<^sub>2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. opp p\\<^sub>3 \\<noteq>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "case True"], ["proof (state)\nthis:\n  opp p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n\ngoal (2 subgoals):\n 1. opp p\\<^sub>3 =\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. opp p\\<^sub>3 \\<noteq>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "from ab p\\<^sub>1 p\\<^sub>2 p\\<^sub>3"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3", "show ?thesis"], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "by (rule degen_assoc) (simp add: True)"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>3\n\ngoal (1 subgoal):\n 1. opp p\\<^sub>3 \\<noteq>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. opp p\\<^sub>3 \\<noteq>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "case False"], ["proof (state)\nthis:\n  opp p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n\ngoal (1 subgoal):\n 1. opp p\\<^sub>3 \\<noteq>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "proof (cases \"p\\<^sub>1 = add a p\\<^sub>2 p\\<^sub>3\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>1 \\<noteq>\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "case True"], ["proof (state)\nthis:\n  p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n\ngoal (2 subgoals):\n 1. p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>1 \\<noteq>\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "with ab p\\<^sub>2 p\\<^sub>3"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n  p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>3", "show ?thesis"], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n  p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nonsingular a b; on_curve a b p\\<^sub>2;\n     on_curve a b p\\<^sub>3;\n     p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>3\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a\n                       (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\n                       (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                      ell_field_class.add a\n                       (ell_field_class.add a\n                         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\n                         p\\<^sub>2)\n                       p\\<^sub>3", "apply (rule cancel [OF ab opp_closed [OF p\\<^sub>3]])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>nonsingular a b; on_curve a b p\\<^sub>2;\n     on_curve a b p\\<^sub>3;\n     p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>3\\<rbrakk>\n    \\<Longrightarrow> on_curve a b\n                       (ell_field_class.add a\n                         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\n                         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3))\n 2. \\<lbrakk>nonsingular a b; on_curve a b p\\<^sub>2;\n     on_curve a b p\\<^sub>3;\n     p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>3\\<rbrakk>\n    \\<Longrightarrow> on_curve a b\n                       (ell_field_class.add a\n                         (ell_field_class.add a\n                           (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\n                           p\\<^sub>2)\n                         p\\<^sub>3)\n 3. \\<lbrakk>nonsingular a b; on_curve a b p\\<^sub>2;\n     on_curve a b p\\<^sub>3;\n     p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>3\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a (opp p\\<^sub>3)\n                       (ell_field_class.add a\n                         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\n                         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)) =\n                      ell_field_class.add a (opp p\\<^sub>3)\n                       (ell_field_class.add a\n                         (ell_field_class.add a\n                           (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\n                           p\\<^sub>2)\n                         p\\<^sub>3)", "apply (simp_all add: add_closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nonsingular a b; on_curve a b p\\<^sub>2;\n     on_curve a b p\\<^sub>3;\n     p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>3\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a (opp p\\<^sub>3)\n                       (ell_field_class.add a\n                         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\n                         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)) =\n                      ell_field_class.add a (opp p\\<^sub>3)\n                       (ell_field_class.add a\n                         (ell_field_class.add a\n                           (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\n                           p\\<^sub>2)\n                         p\\<^sub>3)", "apply (simp add: spec4_assoc add_closed opp_closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nonsingular a b; on_curve a b p\\<^sub>2;\n     on_curve a b p\\<^sub>3;\n     p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>3\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a\n                       (ell_field_class.add a (opp p\\<^sub>3)\n                         (ell_field_class.add a p\\<^sub>2 p\\<^sub>3))\n                       (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                      ell_field_class.add a (opp p\\<^sub>3)\n                       (ell_field_class.add a\n                         (ell_field_class.add a\n                           (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\n                           p\\<^sub>2)\n                         p\\<^sub>3)", "apply (simp add: add_comm [of a b \"opp p\\<^sub>3\"]\n                        add_closed opp_closed add_minus_id)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nonsingular a b; on_curve a b p\\<^sub>2;\n     on_curve a b p\\<^sub>3;\n     p\\<^sub>1 = ell_field_class.add a p\\<^sub>2 p\\<^sub>3\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a p\\<^sub>2\n                       (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n                      ell_field_class.add a\n                       (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) p\\<^sub>2", "apply (simp add: add_comm [of a b] add_closed)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>3\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq>\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq>\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "case False"], ["proof (state)\nthis:\n  p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<noteq>\n    ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "proof (cases \"p\\<^sub>3 = add a p\\<^sub>1 p\\<^sub>2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>3 \\<noteq>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "case True"], ["proof (state)\nthis:\n  p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n\ngoal (2 subgoals):\n 1. p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3\n 2. p\\<^sub>3 \\<noteq>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "with ab p\\<^sub>1 p\\<^sub>2"], ["proof (chain)\npicking this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2", "show ?thesis"], ["proof (prove)\nusing this:\n  nonsingular a b\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nonsingular a b; on_curve a b p\\<^sub>1;\n     on_curve a b p\\<^sub>2;\n     p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a p\\<^sub>1\n                       (ell_field_class.add a p\\<^sub>2\n                         (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)) =\n                      ell_field_class.add a\n                       (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n                       (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "apply (rule cancel [OF ab opp_closed [OF p\\<^sub>1]])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>nonsingular a b; on_curve a b p\\<^sub>1;\n     on_curve a b p\\<^sub>2;\n     p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> on_curve a b\n                       (ell_field_class.add a p\\<^sub>1\n                         (ell_field_class.add a p\\<^sub>2\n                           (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)))\n 2. \\<lbrakk>nonsingular a b; on_curve a b p\\<^sub>1;\n     on_curve a b p\\<^sub>2;\n     p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> on_curve a b\n                       (ell_field_class.add a\n                         (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n                         (ell_field_class.add a p\\<^sub>1 p\\<^sub>2))\n 3. \\<lbrakk>nonsingular a b; on_curve a b p\\<^sub>1;\n     on_curve a b p\\<^sub>2;\n     p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a (opp p\\<^sub>1)\n                       (ell_field_class.add a p\\<^sub>1\n                         (ell_field_class.add a p\\<^sub>2\n                           (ell_field_class.add a p\\<^sub>1 p\\<^sub>2))) =\n                      ell_field_class.add a (opp p\\<^sub>1)\n                       (ell_field_class.add a\n                         (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n                         (ell_field_class.add a p\\<^sub>1 p\\<^sub>2))", "apply (simp_all add: add_closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nonsingular a b; on_curve a b p\\<^sub>1;\n     on_curve a b p\\<^sub>2;\n     p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a (opp p\\<^sub>1)\n                       (ell_field_class.add a p\\<^sub>1\n                         (ell_field_class.add a p\\<^sub>2\n                           (ell_field_class.add a p\\<^sub>1 p\\<^sub>2))) =\n                      ell_field_class.add a (opp p\\<^sub>1)\n                       (ell_field_class.add a\n                         (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n                         (ell_field_class.add a p\\<^sub>1 p\\<^sub>2))", "apply (simp add: spec4_assoc add_closed opp_closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nonsingular a b; on_curve a b p\\<^sub>1;\n     on_curve a b p\\<^sub>2;\n     p\\<^sub>3 = ell_field_class.add a p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a (opp p\\<^sub>1)\n                       (ell_field_class.add a p\\<^sub>1\n                         (ell_field_class.add a p\\<^sub>2\n                           (ell_field_class.add a p\\<^sub>1 p\\<^sub>2))) =\n                      ell_field_class.add a\n                       (ell_field_class.add a (opp p\\<^sub>1)\n                         (ell_field_class.add a p\\<^sub>1 p\\<^sub>2))\n                       (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)", "apply (simp add: add_comm [of a b \"opp p\\<^sub>1\"] add_comm [of a b p\\<^sub>1]\n                          add_closed opp_closed add_minus_id)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>3\n\ngoal (1 subgoal):\n 1. p\\<^sub>3 \\<noteq>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p\\<^sub>3 \\<noteq>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "case False"], ["proof (state)\nthis:\n  p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n\ngoal (1 subgoal):\n 1. p\\<^sub>3 \\<noteq>\n    ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<Longrightarrow>\n    ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "with p\\<^sub>1 p\\<^sub>2 p\\<^sub>3\n                        \\<open>p\\<^sub>1 \\<noteq> Infinity\\<close> \\<open>p\\<^sub>2 \\<noteq> Infinity\\<close> \\<open>p\\<^sub>3 \\<noteq> Infinity\\<close>\n                        \\<open>p\\<^sub>1 \\<noteq> p\\<^sub>2\\<close> \\<open>p\\<^sub>1 \\<noteq> opp p\\<^sub>2\\<close> \\<open>p\\<^sub>2 \\<noteq> p\\<^sub>3\\<close> \\<open>p\\<^sub>2 \\<noteq> opp p\\<^sub>3\\<close>\n                        \\<open>opp p\\<^sub>3 \\<noteq> add a p\\<^sub>1 p\\<^sub>2\\<close> \\<open>p\\<^sub>1 \\<noteq> add a p\\<^sub>2 p\\<^sub>3\\<close>"], ["proof (chain)\npicking this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n  p\\<^sub>1 \\<noteq> Infinity\n  p\\<^sub>2 \\<noteq> Infinity\n  p\\<^sub>3 \\<noteq> Infinity\n  p\\<^sub>1 \\<noteq> p\\<^sub>2\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>2\n  p\\<^sub>2 \\<noteq> p\\<^sub>3\n  p\\<^sub>2 \\<noteq> opp p\\<^sub>3\n  opp p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n  p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2", "show ?thesis"], ["proof (prove)\nusing this:\n  on_curve a b p\\<^sub>1\n  on_curve a b p\\<^sub>2\n  on_curve a b p\\<^sub>3\n  p\\<^sub>1 \\<noteq> Infinity\n  p\\<^sub>2 \\<noteq> Infinity\n  p\\<^sub>3 \\<noteq> Infinity\n  p\\<^sub>1 \\<noteq> p\\<^sub>2\n  p\\<^sub>1 \\<noteq> opp p\\<^sub>2\n  p\\<^sub>2 \\<noteq> p\\<^sub>3\n  p\\<^sub>2 \\<noteq> opp p\\<^sub>3\n  opp p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n  p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>3\n  p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2\n\ngoal (1 subgoal):\n 1. ell_field_class.add a p\\<^sub>1\n     (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n    ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n     p\\<^sub>3", "apply (rule_tac spec1_assoc [of a b])"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     on_curve a b p\\<^sub>3; p\\<^sub>1 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity; p\\<^sub>3 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2; p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> p\\<^sub>3; p\\<^sub>2 \\<noteq> opp p\\<^sub>3;\n     opp p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>3;\n     p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> on_curve a b p\\<^sub>1\n 2. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     on_curve a b p\\<^sub>3; p\\<^sub>1 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity; p\\<^sub>3 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2; p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> p\\<^sub>3; p\\<^sub>2 \\<noteq> opp p\\<^sub>3;\n     opp p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>3;\n     p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> on_curve a b p\\<^sub>2\n 3. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     on_curve a b p\\<^sub>3; p\\<^sub>1 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity; p\\<^sub>3 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2; p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> p\\<^sub>3; p\\<^sub>2 \\<noteq> opp p\\<^sub>3;\n     opp p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>3;\n     p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> on_curve a b p\\<^sub>3\n 4. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     on_curve a b p\\<^sub>3; p\\<^sub>1 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity; p\\<^sub>3 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2; p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> p\\<^sub>3; p\\<^sub>2 \\<noteq> opp p\\<^sub>3;\n     opp p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>3;\n     p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> is_generic p\\<^sub>1 p\\<^sub>2\n 5. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     on_curve a b p\\<^sub>3; p\\<^sub>1 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity; p\\<^sub>3 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2; p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> p\\<^sub>3; p\\<^sub>2 \\<noteq> opp p\\<^sub>3;\n     opp p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>3;\n     p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> is_generic p\\<^sub>2 p\\<^sub>3\n 6. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     on_curve a b p\\<^sub>3; p\\<^sub>1 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity; p\\<^sub>3 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2; p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> p\\<^sub>3; p\\<^sub>2 \\<noteq> opp p\\<^sub>3;\n     opp p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>3;\n     p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> is_generic (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n                       p\\<^sub>3\n 7. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     on_curve a b p\\<^sub>3; p\\<^sub>1 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity; p\\<^sub>3 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2; p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> p\\<^sub>3; p\\<^sub>2 \\<noteq> opp p\\<^sub>3;\n     opp p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>3;\n     p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> is_generic p\\<^sub>1\n                       (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)", "apply (simp_all add: is_generic_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     on_curve a b p\\<^sub>3; p\\<^sub>1 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity; p\\<^sub>3 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2; p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> p\\<^sub>3; p\\<^sub>2 \\<noteq> opp p\\<^sub>3;\n     opp p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>3;\n     p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a p\\<^sub>1 p\\<^sub>2 \\<noteq>\n                      Infinity\n 2. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     on_curve a b p\\<^sub>3; p\\<^sub>1 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity; p\\<^sub>3 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2; p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> p\\<^sub>3; p\\<^sub>2 \\<noteq> opp p\\<^sub>3;\n     opp p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>3;\n     p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<noteq>\n                      Infinity \\<and>\n                      p\\<^sub>1 \\<noteq>\n                      opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)", "apply (rule notI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     on_curve a b p\\<^sub>3; p\\<^sub>1 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity; p\\<^sub>3 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2; p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> p\\<^sub>3; p\\<^sub>2 \\<noteq> opp p\\<^sub>3;\n     opp p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>3;\n     p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = Infinity\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     on_curve a b p\\<^sub>3; p\\<^sub>1 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity; p\\<^sub>3 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2; p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> p\\<^sub>3; p\\<^sub>2 \\<noteq> opp p\\<^sub>3;\n     opp p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>3;\n     p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<noteq>\n                      Infinity \\<and>\n                      p\\<^sub>1 \\<noteq>\n                      opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)", "apply (erule notE [of \"p\\<^sub>1 = opp p\\<^sub>2\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     on_curve a b p\\<^sub>3; p\\<^sub>1 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity; p\\<^sub>3 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2; p\\<^sub>2 \\<noteq> p\\<^sub>3;\n     p\\<^sub>2 \\<noteq> opp p\\<^sub>3;\n     opp p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>3;\n     p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = Infinity\\<rbrakk>\n    \\<Longrightarrow> p\\<^sub>1 = opp p\\<^sub>2\n 2. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     on_curve a b p\\<^sub>3; p\\<^sub>1 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity; p\\<^sub>3 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2; p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> p\\<^sub>3; p\\<^sub>2 \\<noteq> opp p\\<^sub>3;\n     opp p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>3;\n     p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<noteq>\n                      Infinity \\<and>\n                      p\\<^sub>1 \\<noteq>\n                      opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)", "apply (rule uniq_opp [of a])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     on_curve a b p\\<^sub>3; p\\<^sub>1 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity; p\\<^sub>3 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2; p\\<^sub>2 \\<noteq> p\\<^sub>3;\n     p\\<^sub>2 \\<noteq> opp p\\<^sub>3;\n     opp p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>3;\n     p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>1 p\\<^sub>2 = Infinity\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 p\\<^sub>1 = Infinity\n 2. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     on_curve a b p\\<^sub>3; p\\<^sub>1 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity; p\\<^sub>3 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2; p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> p\\<^sub>3; p\\<^sub>2 \\<noteq> opp p\\<^sub>3;\n     opp p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>3;\n     p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<noteq>\n                      Infinity \\<and>\n                      p\\<^sub>1 \\<noteq>\n                      opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)", "apply (simp add: add_comm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     on_curve a b p\\<^sub>3; p\\<^sub>1 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity; p\\<^sub>3 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2; p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> p\\<^sub>3; p\\<^sub>2 \\<noteq> opp p\\<^sub>3;\n     opp p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>3;\n     p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a p\\<^sub>2 p\\<^sub>3 \\<noteq>\n                      Infinity \\<and>\n                      p\\<^sub>1 \\<noteq>\n                      opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)", "apply (intro conjI notI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     on_curve a b p\\<^sub>3; p\\<^sub>1 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity; p\\<^sub>3 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2; p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> p\\<^sub>3; p\\<^sub>2 \\<noteq> opp p\\<^sub>3;\n     opp p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>3;\n     p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>3 = Infinity\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     on_curve a b p\\<^sub>3; p\\<^sub>1 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity; p\\<^sub>3 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2; p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> p\\<^sub>3; p\\<^sub>2 \\<noteq> opp p\\<^sub>3;\n     opp p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>3;\n     p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 = opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n    \\<Longrightarrow> False", "apply (erule notE [of \"p\\<^sub>2 = opp p\\<^sub>3\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     on_curve a b p\\<^sub>3; p\\<^sub>1 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity; p\\<^sub>3 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2; p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> p\\<^sub>3;\n     opp p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>3;\n     p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>3 = Infinity\\<rbrakk>\n    \\<Longrightarrow> p\\<^sub>2 = opp p\\<^sub>3\n 2. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     on_curve a b p\\<^sub>3; p\\<^sub>1 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity; p\\<^sub>3 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2; p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> p\\<^sub>3; p\\<^sub>2 \\<noteq> opp p\\<^sub>3;\n     opp p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>3;\n     p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 = opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n    \\<Longrightarrow> False", "apply (rule uniq_opp [of a])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     on_curve a b p\\<^sub>3; p\\<^sub>1 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity; p\\<^sub>3 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2; p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> p\\<^sub>3;\n     opp p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>3;\n     p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     ell_field_class.add a p\\<^sub>2 p\\<^sub>3 = Infinity\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a p\\<^sub>3 p\\<^sub>2 = Infinity\n 2. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     on_curve a b p\\<^sub>3; p\\<^sub>1 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity; p\\<^sub>3 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2; p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> p\\<^sub>3; p\\<^sub>2 \\<noteq> opp p\\<^sub>3;\n     opp p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>3;\n     p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 = opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add: add_comm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     on_curve a b p\\<^sub>3; p\\<^sub>1 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity; p\\<^sub>3 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2; p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> p\\<^sub>3; p\\<^sub>2 \\<noteq> opp p\\<^sub>3;\n     opp p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>3;\n     p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 = opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n    \\<Longrightarrow> False", "apply (rule notE [OF \\<open>opp p\\<^sub>1 \\<noteq> add a p\\<^sub>2 p\\<^sub>3\\<close>])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>on_curve a b p\\<^sub>1; on_curve a b p\\<^sub>2;\n     on_curve a b p\\<^sub>3; p\\<^sub>1 \\<noteq> Infinity;\n     p\\<^sub>2 \\<noteq> Infinity; p\\<^sub>3 \\<noteq> Infinity;\n     p\\<^sub>1 \\<noteq> p\\<^sub>2; p\\<^sub>1 \\<noteq> opp p\\<^sub>2;\n     p\\<^sub>2 \\<noteq> p\\<^sub>3; p\\<^sub>2 \\<noteq> opp p\\<^sub>3;\n     opp p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 \\<noteq> ell_field_class.add a p\\<^sub>2 p\\<^sub>3;\n     p\\<^sub>3 \\<noteq> ell_field_class.add a p\\<^sub>1 p\\<^sub>2;\n     p\\<^sub>1 = opp (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)\\<rbrakk>\n    \\<Longrightarrow> opp p\\<^sub>1 =\n                      ell_field_class.add a p\\<^sub>2 p\\<^sub>3", "apply (simp add: opp_opp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ell_field_class.add a p\\<^sub>1\n   (ell_field_class.add a p\\<^sub>2 p\\<^sub>3) =\n  ell_field_class.add a (ell_field_class.add a p\\<^sub>1 p\\<^sub>2)\n   p\\<^sub>3\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma add_comm':\n  \"nonsingular a b \\<Longrightarrow>\n   on_curve a b p\\<^sub>1 \\<Longrightarrow> on_curve a b p\\<^sub>2 \\<Longrightarrow> on_curve a b p\\<^sub>3 \\<Longrightarrow>\n   add a p\\<^sub>2 (add a p\\<^sub>1 p\\<^sub>3) = add a p\\<^sub>1 (add a p\\<^sub>2 p\\<^sub>3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nonsingular a b; on_curve a b p\\<^sub>1;\n     on_curve a b p\\<^sub>2; on_curve a b p\\<^sub>3\\<rbrakk>\n    \\<Longrightarrow> ell_field_class.add a p\\<^sub>2\n                       (ell_field_class.add a p\\<^sub>1 p\\<^sub>3) =\n                      ell_field_class.add a p\\<^sub>1\n                       (ell_field_class.add a p\\<^sub>2 p\\<^sub>3)", "by (simp add: add_assoc add_comm)"], ["", "primrec (in ell_field) point_mult :: \"'a \\<Rightarrow> nat \\<Rightarrow> 'a point \\<Rightarrow> 'a point\"\nwhere\n    \"point_mult a 0 p = Infinity\"\n  | \"point_mult a (Suc n) p = add a p (point_mult a n p)\""], ["", "lemma point_mult_closed: \"on_curve a b p \\<Longrightarrow> on_curve a b (point_mult a n p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. on_curve a b p \\<Longrightarrow> on_curve a b (point_mult a n p)", "by (induct n) (simp_all add: add_closed)"], ["", "lemma point_mult_add:\n  \"on_curve a b p \\<Longrightarrow> nonsingular a b \\<Longrightarrow>\n   point_mult a (m + n) p = add a (point_mult a m p) (point_mult a n p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>on_curve a b p; nonsingular a b\\<rbrakk>\n    \\<Longrightarrow> point_mult a (m + n) p =\n                      ell_field_class.add a (point_mult a m p)\n                       (point_mult a n p)", "by (induct m) (simp_all add: add_assoc point_mult_closed add_0_l)"], ["", "lemma point_mult_mult:\n  \"on_curve a b p \\<Longrightarrow> nonsingular a b \\<Longrightarrow>\n   point_mult a (m * n) p = point_mult a n (point_mult a m p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>on_curve a b p; nonsingular a b\\<rbrakk>\n    \\<Longrightarrow> point_mult a (m * n) p =\n                      point_mult a n (point_mult a m p)", "by (induct n) (simp_all add: point_mult_add)"], ["", "lemma point_mult2_eq_double:\n  \"point_mult a 2 p = add a p p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. point_mult a 2 p = ell_field_class.add a p p", "by (simp add: numeral_2_eq_2 add_0_r)"], ["", "subsection \\<open>Projective Coordinates\\<close>"], ["", "type_synonym 'a ppoint = \"'a \\<times> 'a \\<times> 'a\""], ["", "context ell_field begin"], ["", "definition pdouble :: \"'a \\<Rightarrow> 'a ppoint \\<Rightarrow> 'a ppoint\" where\n  \"pdouble a p =\n     (let (x, y, z) = p\n      in\n        if z = 0 then p\n        else\n          let\n            l = 2 * y * z;\n            m = 3 * x ^ 2 + a * z ^ 2\n          in\n            (l * (m ^ 2 - 4 * x * y * l),\n             m * (6 * x * y * l - m ^ 2) -\n             2 * y ^ 2 * l ^ 2,\n             l ^ 3))\""], ["", "definition padd :: \"'a \\<Rightarrow> 'a ppoint \\<Rightarrow> 'a ppoint \\<Rightarrow> 'a ppoint\" where\n  \"padd a p\\<^sub>1 p\\<^sub>2 =\n     (let\n        (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1) = p\\<^sub>1;\n        (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2) = p\\<^sub>2\n      in\n        if z\\<^sub>1 = 0 then p\\<^sub>2\n        else if z\\<^sub>2 = 0 then p\\<^sub>1\n        else\n          let\n            d\\<^sub>1 = x\\<^sub>2 * z\\<^sub>1;\n            d\\<^sub>2 = x\\<^sub>1 * z\\<^sub>2;\n            l = d\\<^sub>1 - d\\<^sub>2;\n            m = y\\<^sub>2 * z\\<^sub>1 - y\\<^sub>1 * z\\<^sub>2\n          in\n            if l = 0 then\n              if m = 0 then pdouble a p\\<^sub>1\n              else (0, 0, 0)\n            else\n              let h = m ^ 2 * z\\<^sub>1 * z\\<^sub>2 - (d\\<^sub>1 + d\\<^sub>2) * l ^ 2\n              in\n                (l * h,\n                 (d\\<^sub>2 * l ^ 2 - h) * m - l ^ 3 * y\\<^sub>1 * z\\<^sub>2,\n                 l ^ 3 * z\\<^sub>1 * z\\<^sub>2))\""], ["", "definition make_affine :: \"'a ppoint \\<Rightarrow> 'a point\" where\n  \"make_affine p =\n     (let (x, y, z) = p\n      in if z = 0 then Infinity else Point (x / z) (y / z))\""], ["", "definition on_curvep :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a ppoint \\<Rightarrow> bool\" where\n  \"on_curvep a b = (\\<lambda>(x, y, z). z \\<noteq> 0 \\<longrightarrow>\n     y ^ 2 * z = x ^ 3 + a * x * z ^ 2 + b * z ^ 3)\""], ["", "end"], ["", "lemma on_curvep_infinity [simp]: \"on_curvep a b (x, y, 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. on_curvep a b (x, y, 0::'a)", "by (simp add: on_curvep_def)"], ["", "lemma make_affine_infinity [simp]: \"make_affine (x, y, 0) = Infinity\""], ["proof (prove)\ngoal (1 subgoal):\n 1. make_affine (x, y, 0::'a) = Infinity", "by (simp add: make_affine_def)"], ["", "lemma on_curvep_iff_on_curve:\n  \"on_curvep a b p = on_curve a b (make_affine p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. on_curvep a b p = on_curve a b (make_affine p)", "proof (induct p rule: prod_induct3)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa ba c.\n       on_curvep a b (aa, ba, c) = on_curve a b (make_affine (aa, ba, c))", "case (fields x y z)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>aa ba c.\n       on_curvep a b (aa, ba, c) = on_curve a b (make_affine (aa, ba, c))", "show \"on_curvep a b (x, y, z) = on_curve a b (make_affine (x, y, z))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. on_curvep a b (x, y, z) = on_curve a b (make_affine (x, y, z))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. on_curvep a b (x, y, z) \\<Longrightarrow>\n    on_curve a b (make_affine (x, y, z))\n 2. on_curve a b (make_affine (x, y, z)) \\<Longrightarrow>\n    on_curvep a b (x, y, z)", "assume H: \"on_curvep a b (x, y, z)\""], ["proof (state)\nthis:\n  on_curvep a b (x, y, z)\n\ngoal (2 subgoals):\n 1. on_curvep a b (x, y, z) \\<Longrightarrow>\n    on_curve a b (make_affine (x, y, z))\n 2. on_curve a b (make_affine (x, y, z)) \\<Longrightarrow>\n    on_curvep a b (x, y, z)", "then"], ["proof (chain)\npicking this:\n  on_curvep a b (x, y, z)", "have yz: \"z \\<noteq> 0 \\<Longrightarrow> y ^ 2 * z = x ^ 3 + a * x * z ^ 2 + b * z ^ 3\""], ["proof (prove)\nusing this:\n  on_curvep a b (x, y, z)\n\ngoal (1 subgoal):\n 1. z \\<noteq> (0::'a) \\<Longrightarrow>\n    y\\<^sup>2 * z = x ^ 3 + a * x * z\\<^sup>2 + b * z ^ 3", "by (simp_all add: on_curvep_def)"], ["proof (state)\nthis:\n  z \\<noteq> (0::'a) \\<Longrightarrow>\n  y\\<^sup>2 * z = x ^ 3 + a * x * z\\<^sup>2 + b * z ^ 3\n\ngoal (2 subgoals):\n 1. on_curvep a b (x, y, z) \\<Longrightarrow>\n    on_curve a b (make_affine (x, y, z))\n 2. on_curve a b (make_affine (x, y, z)) \\<Longrightarrow>\n    on_curvep a b (x, y, z)", "show \"on_curve a b (make_affine (x, y, z))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. on_curve a b (make_affine (x, y, z))", "proof (cases \"z = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. z = (0::'a) \\<Longrightarrow> on_curve a b (make_affine (x, y, z))\n 2. z \\<noteq> (0::'a) \\<Longrightarrow>\n    on_curve a b (make_affine (x, y, z))", "case True"], ["proof (state)\nthis:\n  z = (0::'a)\n\ngoal (2 subgoals):\n 1. z = (0::'a) \\<Longrightarrow> on_curve a b (make_affine (x, y, z))\n 2. z \\<noteq> (0::'a) \\<Longrightarrow>\n    on_curve a b (make_affine (x, y, z))", "then"], ["proof (chain)\npicking this:\n  z = (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  z = (0::'a)\n\ngoal (1 subgoal):\n 1. on_curve a b (make_affine (x, y, z))", "by (simp add: on_curve_def make_affine_def)"], ["proof (state)\nthis:\n  on_curve a b (make_affine (x, y, z))\n\ngoal (1 subgoal):\n 1. z \\<noteq> (0::'a) \\<Longrightarrow>\n    on_curve a b (make_affine (x, y, z))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. z \\<noteq> (0::'a) \\<Longrightarrow>\n    on_curve a b (make_affine (x, y, z))", "case False"], ["proof (state)\nthis:\n  z \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. z \\<noteq> (0::'a) \\<Longrightarrow>\n    on_curve a b (make_affine (x, y, z))", "then"], ["proof (chain)\npicking this:\n  z \\<noteq> (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  z \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. on_curve a b (make_affine (x, y, z))", "apply (simp add: on_curve_def make_affine_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<noteq> (0::'a) \\<Longrightarrow>\n    (y / z)\\<^sup>2 = (x / z) ^ 3 + a * x / z + b", "apply (field yz [OF False])"], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<noteq> (0::'a) \\<Longrightarrow> z \\<noteq> (0::'a)", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  on_curve a b (make_affine (x, y, z))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  on_curve a b (make_affine (x, y, z))\n\ngoal (1 subgoal):\n 1. on_curve a b (make_affine (x, y, z)) \\<Longrightarrow>\n    on_curvep a b (x, y, z)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. on_curve a b (make_affine (x, y, z)) \\<Longrightarrow>\n    on_curvep a b (x, y, z)", "assume H: \"on_curve a b (make_affine (x, y, z))\""], ["proof (state)\nthis:\n  on_curve a b (make_affine (x, y, z))\n\ngoal (1 subgoal):\n 1. on_curve a b (make_affine (x, y, z)) \\<Longrightarrow>\n    on_curvep a b (x, y, z)", "show \"on_curvep a b (x, y, z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. on_curvep a b (x, y, z)", "proof (cases \"z = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. z = (0::'a) \\<Longrightarrow> on_curvep a b (x, y, z)\n 2. z \\<noteq> (0::'a) \\<Longrightarrow> on_curvep a b (x, y, z)", "case True"], ["proof (state)\nthis:\n  z = (0::'a)\n\ngoal (2 subgoals):\n 1. z = (0::'a) \\<Longrightarrow> on_curvep a b (x, y, z)\n 2. z \\<noteq> (0::'a) \\<Longrightarrow> on_curvep a b (x, y, z)", "then"], ["proof (chain)\npicking this:\n  z = (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  z = (0::'a)\n\ngoal (1 subgoal):\n 1. on_curvep a b (x, y, z)", "by (simp add: on_curvep_def)"], ["proof (state)\nthis:\n  on_curvep a b (x, y, z)\n\ngoal (1 subgoal):\n 1. z \\<noteq> (0::'a) \\<Longrightarrow> on_curvep a b (x, y, z)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. z \\<noteq> (0::'a) \\<Longrightarrow> on_curvep a b (x, y, z)", "case False"], ["proof (state)\nthis:\n  z \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. z \\<noteq> (0::'a) \\<Longrightarrow> on_curvep a b (x, y, z)", "from H"], ["proof (chain)\npicking this:\n  on_curve a b (make_affine (x, y, z))", "show ?thesis"], ["proof (prove)\nusing this:\n  on_curve a b (make_affine (x, y, z))\n\ngoal (1 subgoal):\n 1. on_curvep a b (x, y, z)", "apply (simp add: on_curve_def on_curvep_def make_affine_def False)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (y / z)\\<^sup>2 = (x / z) ^ 3 + a * x / z + b \\<Longrightarrow>\n    y\\<^sup>2 * z = x ^ 3 + a * x * z\\<^sup>2 + b * z ^ 3", "apply (field (prems))"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((1::'a) * z ^ 1 + (0::'a)) * y\\<^sup>2 +\n    (((of_int (- 1) * b ^ 1 + (0::'a)) * z ^ 1 +\n      ((of_int (- 1) * a ^ 1 + (0::'a)) * x ^ 1 + (0::'a))) *\n     z\\<^sup>2 +\n     (of_int (- 1) * x ^ 3 + (0::'a))) =\n    (0::'a) \\<Longrightarrow>\n    y\\<^sup>2 * z = x ^ 3 + a * x * z\\<^sup>2 + b * z ^ 3\n 2. z \\<noteq> (0::'a)", "apply field"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((1::'a) * z ^ 1 + (0::'a)) * y\\<^sup>2 +\n    (((of_int (- 1) * b ^ 1 + (0::'a)) * z ^ 1 +\n      ((of_int (- 1) * a ^ 1 + (0::'a)) * x ^ 1 + (0::'a))) *\n     z\\<^sup>2 +\n     (of_int (- 1) * x ^ 3 + (0::'a))) =\n    (0::'a) \\<Longrightarrow>\n    True\n 2. z \\<noteq> (0::'a)", "apply (simp_all add: False)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  on_curvep a b (x, y, z)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  on_curvep a b (x, y, z)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  on_curvep a b (x, y, z) = on_curve a b (make_affine (x, y, z))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pdouble_infinity [simp]: \"pdouble a (x, y, 0) = (x, y, 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pdouble a (x, y, 0::'a) = (x, y, 0::'a)", "by (simp add: pdouble_def)"], ["", "lemma padd_infinity_l [simp]: \"padd a (x, y, 0) p = p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. padd a (x, y, 0::'a) p = p", "by (simp add: padd_def)"], ["", "lemma pdouble_correct:\n  \"make_affine (pdouble a p) = add a (make_affine p) (make_affine p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. make_affine (pdouble a p) =\n    ell_field_class.add a (make_affine p) (make_affine p)", "proof (induct p rule: prod_induct3)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa b c.\n       make_affine (pdouble a (aa, b, c)) =\n       ell_field_class.add a (make_affine (aa, b, c))\n        (make_affine (aa, b, c))", "case (fields x y z)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>aa b c.\n       make_affine (pdouble a (aa, b, c)) =\n       ell_field_class.add a (make_affine (aa, b, c))\n        (make_affine (aa, b, c))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. make_affine (pdouble a (x, y, z)) =\n    ell_field_class.add a (make_affine (x, y, z)) (make_affine (x, y, z))", "apply (auto simp add: add_def pdouble_def make_affine_def eq_opp_is_zero Let_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>y \\<noteq> (0::'a); z \\<noteq> (0::'a)\\<rbrakk>\n    \\<Longrightarrow> (2::'a) * y * z *\n                      (((3::'a) * x\\<^sup>2 + a * z\\<^sup>2)\\<^sup>2 -\n                       (8::'a) * (x * (y * (y * z)))) /\n                      ((2::'a) * y * z) ^ 3 =\n                      (((3::'a) * (x / z)\\<^sup>2 + a) * z /\n                       ((2::'a) * y))\\<^sup>2 -\n                      (2::'a) * x / z\n 2. \\<lbrakk>y \\<noteq> (0::'a); z \\<noteq> (0::'a)\\<rbrakk>\n    \\<Longrightarrow> (((3::'a) * x\\<^sup>2 + a * z\\<^sup>2) *\n                       ((12::'a) * (x * (y * (y * z))) -\n                        ((3::'a) * x\\<^sup>2 + a * z\\<^sup>2)\\<^sup>2) -\n                       (2::'a) * y\\<^sup>2 * ((2::'a) * y * z)\\<^sup>2) /\n                      ((2::'a) * y * z) ^ 3 =\n                      - (y / z) -\n                      ((3::'a) * (x / z)\\<^sup>2 + a) * z *\n                      ((((3::'a) * (x / z)\\<^sup>2 + a) * z /\n                        ((2::'a) * y))\\<^sup>2 -\n                       (2::'a) * x / z -\n                       x / z) /\n                      ((2::'a) * y)", "apply field"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>y \\<noteq> (0::'a); z \\<noteq> (0::'a)\\<rbrakk>\n    \\<Longrightarrow> ((2::'a) * y * z) ^ 3 \\<noteq> (0::'a) \\<and>\n                      (2::'a) * y \\<noteq> (0::'a) \\<and> z \\<noteq> (0::'a)\n 2. \\<lbrakk>y \\<noteq> (0::'a); z \\<noteq> (0::'a)\\<rbrakk>\n    \\<Longrightarrow> (((3::'a) * x\\<^sup>2 + a * z\\<^sup>2) *\n                       ((12::'a) * (x * (y * (y * z))) -\n                        ((3::'a) * x\\<^sup>2 + a * z\\<^sup>2)\\<^sup>2) -\n                       (2::'a) * y\\<^sup>2 * ((2::'a) * y * z)\\<^sup>2) /\n                      ((2::'a) * y * z) ^ 3 =\n                      - (y / z) -\n                      ((3::'a) * (x / z)\\<^sup>2 + a) * z *\n                      ((((3::'a) * (x / z)\\<^sup>2 + a) * z /\n                        ((2::'a) * y))\\<^sup>2 -\n                       (2::'a) * x / z -\n                       x / z) /\n                      ((2::'a) * y)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>y \\<noteq> (0::'a); z \\<noteq> (0::'a)\\<rbrakk>\n    \\<Longrightarrow> (((3::'a) * x\\<^sup>2 + a * z\\<^sup>2) *\n                       ((12::'a) * (x * (y * (y * z))) -\n                        ((3::'a) * x\\<^sup>2 + a * z\\<^sup>2)\\<^sup>2) -\n                       (2::'a) * y\\<^sup>2 * ((2::'a) * y * z)\\<^sup>2) /\n                      ((2::'a) * y * z) ^ 3 =\n                      - (y / z) -\n                      ((3::'a) * (x / z)\\<^sup>2 + a) * z *\n                      ((((3::'a) * (x / z)\\<^sup>2 + a) * z /\n                        ((2::'a) * y))\\<^sup>2 -\n                       (2::'a) * x / z -\n                       x / z) /\n                      ((2::'a) * y)", "apply field"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>y \\<noteq> (0::'a); z \\<noteq> (0::'a)\\<rbrakk>\n    \\<Longrightarrow> ((2::'a) * y * z) ^ 3 \\<noteq> (0::'a) \\<and>\n                      z \\<noteq> (0::'a) \\<and> (2::'a) * y \\<noteq> (0::'a)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  make_affine (pdouble a (x, y, z)) =\n  ell_field_class.add a (make_affine (x, y, z)) (make_affine (x, y, z))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma padd_correct:\n  assumes p\\<^sub>1: \"on_curvep a b p\\<^sub>1\" and p\\<^sub>2: \"on_curvep a b p\\<^sub>2\"\n  shows \"make_affine (padd a p\\<^sub>1 p\\<^sub>2) = add a (make_affine p\\<^sub>1) (make_affine p\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. make_affine (padd a p\\<^sub>1 p\\<^sub>2) =\n    ell_field_class.add a (make_affine p\\<^sub>1) (make_affine p\\<^sub>2)", "using p\\<^sub>1"], ["proof (prove)\nusing this:\n  on_curvep a b p\\<^sub>1\n\ngoal (1 subgoal):\n 1. make_affine (padd a p\\<^sub>1 p\\<^sub>2) =\n    ell_field_class.add a (make_affine p\\<^sub>1) (make_affine p\\<^sub>2)", "proof (induct p\\<^sub>1 rule: prod_induct3)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa ba c.\n       on_curvep a b (aa, ba, c) \\<Longrightarrow>\n       make_affine (padd a (aa, ba, c) p\\<^sub>2) =\n       ell_field_class.add a (make_affine (aa, ba, c))\n        (make_affine p\\<^sub>2)", "case (fields x\\<^sub>1 y\\<^sub>1 z\\<^sub>1)"], ["proof (state)\nthis:\n  on_curvep a b (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n\ngoal (1 subgoal):\n 1. \\<And>aa ba c.\n       on_curvep a b (aa, ba, c) \\<Longrightarrow>\n       make_affine (padd a (aa, ba, c) p\\<^sub>2) =\n       ell_field_class.add a (make_affine (aa, ba, c))\n        (make_affine p\\<^sub>2)", "note p\\<^sub>1' = fields"], ["proof (state)\nthis:\n  on_curvep a b (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n\ngoal (1 subgoal):\n 1. \\<And>aa ba c.\n       on_curvep a b (aa, ba, c) \\<Longrightarrow>\n       make_affine (padd a (aa, ba, c) p\\<^sub>2) =\n       ell_field_class.add a (make_affine (aa, ba, c))\n        (make_affine p\\<^sub>2)", "from p\\<^sub>2"], ["proof (chain)\npicking this:\n  on_curvep a b p\\<^sub>2", "show ?case"], ["proof (prove)\nusing this:\n  on_curvep a b p\\<^sub>2\n\ngoal (1 subgoal):\n 1. make_affine (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1) p\\<^sub>2) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine p\\<^sub>2)", "proof (induct p\\<^sub>2 rule: prod_induct3)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa ba c.\n       on_curvep a b (aa, ba, c) \\<Longrightarrow>\n       make_affine (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1) (aa, ba, c)) =\n       ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n        (make_affine (aa, ba, c))", "case (fields x\\<^sub>2 y\\<^sub>2 z\\<^sub>2)"], ["proof (state)\nthis:\n  on_curvep a b (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<And>aa ba c.\n       on_curvep a b (aa, ba, c) \\<Longrightarrow>\n       make_affine (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1) (aa, ba, c)) =\n       ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n        (make_affine (aa, ba, c))", "then"], ["proof (chain)\npicking this:\n  on_curvep a b (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)", "have\n      yz\\<^sub>2: \"z\\<^sub>2 \\<noteq> 0 \\<Longrightarrow> y\\<^sub>2 ^ 2 * z\\<^sub>2 * z\\<^sub>1 ^ 3 =\n        (x\\<^sub>2 ^ 3 + a * x\\<^sub>2 * z\\<^sub>2 ^ 2 + b * z\\<^sub>2 ^ 3) * z\\<^sub>1 ^ 3\""], ["proof (prove)\nusing this:\n  on_curvep a b (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)\n\ngoal (1 subgoal):\n 1. z\\<^sub>2 \\<noteq> (0::'a) \\<Longrightarrow>\n    y\\<^sub>2\\<^sup>2 * z\\<^sub>2 * z\\<^sub>1 ^ 3 =\n    (x\\<^sub>2 ^ 3 + a * x\\<^sub>2 * z\\<^sub>2\\<^sup>2 +\n     b * z\\<^sub>2 ^ 3) *\n    z\\<^sub>1 ^ 3", "by (simp_all add: on_curvep_def)"], ["proof (state)\nthis:\n  z\\<^sub>2 \\<noteq> (0::'a) \\<Longrightarrow>\n  y\\<^sub>2\\<^sup>2 * z\\<^sub>2 * z\\<^sub>1 ^ 3 =\n  (x\\<^sub>2 ^ 3 + a * x\\<^sub>2 * z\\<^sub>2\\<^sup>2 + b * z\\<^sub>2 ^ 3) *\n  z\\<^sub>1 ^ 3\n\ngoal (1 subgoal):\n 1. \\<And>aa ba c.\n       on_curvep a b (aa, ba, c) \\<Longrightarrow>\n       make_affine (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1) (aa, ba, c)) =\n       ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n        (make_affine (aa, ba, c))", "from p\\<^sub>1'"], ["proof (chain)\npicking this:\n  on_curvep a b (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)", "have\n      yz\\<^sub>1: \"z\\<^sub>1 \\<noteq> 0 \\<Longrightarrow> y\\<^sub>1 ^ 2 * z\\<^sub>1 * z\\<^sub>2 ^ 3 =\n        (x\\<^sub>1 ^ 3 + a * x\\<^sub>1 * z\\<^sub>1 ^ 2 + b * z\\<^sub>1 ^ 3) * z\\<^sub>2 ^ 3\""], ["proof (prove)\nusing this:\n  on_curvep a b (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n\ngoal (1 subgoal):\n 1. z\\<^sub>1 \\<noteq> (0::'a) \\<Longrightarrow>\n    y\\<^sub>1\\<^sup>2 * z\\<^sub>1 * z\\<^sub>2 ^ 3 =\n    (x\\<^sub>1 ^ 3 + a * x\\<^sub>1 * z\\<^sub>1\\<^sup>2 +\n     b * z\\<^sub>1 ^ 3) *\n    z\\<^sub>2 ^ 3", "by (simp_all add: on_curvep_def)"], ["proof (state)\nthis:\n  z\\<^sub>1 \\<noteq> (0::'a) \\<Longrightarrow>\n  y\\<^sub>1\\<^sup>2 * z\\<^sub>1 * z\\<^sub>2 ^ 3 =\n  (x\\<^sub>1 ^ 3 + a * x\\<^sub>1 * z\\<^sub>1\\<^sup>2 + b * z\\<^sub>1 ^ 3) *\n  z\\<^sub>2 ^ 3\n\ngoal (1 subgoal):\n 1. \\<And>aa ba c.\n       on_curvep a b (aa, ba, c) \\<Longrightarrow>\n       make_affine (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1) (aa, ba, c)) =\n       ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n        (make_affine (aa, ba, c))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "proof (cases \"z\\<^sub>1 = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. z\\<^sub>1 = (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))\n 2. z\\<^sub>1 \\<noteq> (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "case True"], ["proof (state)\nthis:\n  z\\<^sub>1 = (0::'a)\n\ngoal (2 subgoals):\n 1. z\\<^sub>1 = (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))\n 2. z\\<^sub>1 \\<noteq> (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "then"], ["proof (chain)\npicking this:\n  z\\<^sub>1 = (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  z\\<^sub>1 = (0::'a)\n\ngoal (1 subgoal):\n 1. make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "by (simp add: add_def padd_def make_affine_def)"], ["proof (state)\nthis:\n  make_affine\n   (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n     (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n  ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n   (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))\n\ngoal (1 subgoal):\n 1. z\\<^sub>1 \\<noteq> (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. z\\<^sub>1 \\<noteq> (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "case False"], ["proof (state)\nthis:\n  z\\<^sub>1 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. z\\<^sub>1 \\<noteq> (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "proof (cases \"z\\<^sub>2 = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. z\\<^sub>2 = (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))\n 2. z\\<^sub>2 \\<noteq> (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "case True"], ["proof (state)\nthis:\n  z\\<^sub>2 = (0::'a)\n\ngoal (2 subgoals):\n 1. z\\<^sub>2 = (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))\n 2. z\\<^sub>2 \\<noteq> (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "then"], ["proof (chain)\npicking this:\n  z\\<^sub>2 = (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  z\\<^sub>2 = (0::'a)\n\ngoal (1 subgoal):\n 1. make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "by (simp add: add_def padd_def make_affine_def)"], ["proof (state)\nthis:\n  make_affine\n   (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n     (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n  ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n   (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))\n\ngoal (1 subgoal):\n 1. z\\<^sub>2 \\<noteq> (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. z\\<^sub>2 \\<noteq> (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "case False"], ["proof (state)\nthis:\n  z\\<^sub>2 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. z\\<^sub>2 \\<noteq> (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "proof (cases \"x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 =\n    (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))\n 2. x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 \\<noteq>\n    (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "case True"], ["proof (state)\nthis:\n  x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 = (0::'a)\n\ngoal (2 subgoals):\n 1. x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 =\n    (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))\n 2. x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 \\<noteq>\n    (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "note x = this"], ["proof (state)\nthis:\n  x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 = (0::'a)\n\ngoal (2 subgoals):\n 1. x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 =\n    (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))\n 2. x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 \\<noteq>\n    (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "then"], ["proof (chain)\npicking this:\n  x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 = (0::'a)", "have x': \"x\\<^sub>2 * z\\<^sub>1 = x\\<^sub>1 * z\\<^sub>2\""], ["proof (prove)\nusing this:\n  x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 = (0::'a)\n\ngoal (1 subgoal):\n 1. x\\<^sub>2 * z\\<^sub>1 = x\\<^sub>1 * z\\<^sub>2", "by simp"], ["proof (state)\nthis:\n  x\\<^sub>2 * z\\<^sub>1 = x\\<^sub>1 * z\\<^sub>2\n\ngoal (2 subgoals):\n 1. x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 =\n    (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))\n 2. x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 \\<noteq>\n    (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "proof (cases \"y\\<^sub>2 * z\\<^sub>1 - y\\<^sub>1 * z\\<^sub>2 = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y\\<^sub>2 * z\\<^sub>1 - y\\<^sub>1 * z\\<^sub>2 =\n    (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))\n 2. y\\<^sub>2 * z\\<^sub>1 - y\\<^sub>1 * z\\<^sub>2 \\<noteq>\n    (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "case True"], ["proof (state)\nthis:\n  y\\<^sub>2 * z\\<^sub>1 - y\\<^sub>1 * z\\<^sub>2 = (0::'a)\n\ngoal (2 subgoals):\n 1. y\\<^sub>2 * z\\<^sub>1 - y\\<^sub>1 * z\\<^sub>2 =\n    (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))\n 2. y\\<^sub>2 * z\\<^sub>1 - y\\<^sub>1 * z\\<^sub>2 \\<noteq>\n    (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "then"], ["proof (chain)\npicking this:\n  y\\<^sub>2 * z\\<^sub>1 - y\\<^sub>1 * z\\<^sub>2 = (0::'a)", "have y: \"y\\<^sub>2 * z\\<^sub>1 = y\\<^sub>1 * z\\<^sub>2\""], ["proof (prove)\nusing this:\n  y\\<^sub>2 * z\\<^sub>1 - y\\<^sub>1 * z\\<^sub>2 = (0::'a)\n\ngoal (1 subgoal):\n 1. y\\<^sub>2 * z\\<^sub>1 = y\\<^sub>1 * z\\<^sub>2", "by simp"], ["proof (state)\nthis:\n  y\\<^sub>2 * z\\<^sub>1 = y\\<^sub>1 * z\\<^sub>2\n\ngoal (2 subgoals):\n 1. y\\<^sub>2 * z\\<^sub>1 - y\\<^sub>1 * z\\<^sub>2 =\n    (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))\n 2. y\\<^sub>2 * z\\<^sub>1 - y\\<^sub>1 * z\\<^sub>2 \\<noteq>\n    (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "from \\<open>z\\<^sub>1 \\<noteq> 0\\<close> \\<open>z\\<^sub>2 \\<noteq> 0\\<close> x"], ["proof (chain)\npicking this:\n  z\\<^sub>1 \\<noteq> (0::'a)\n  z\\<^sub>2 \\<noteq> (0::'a)\n  x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 = (0::'a)", "have \"make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2) = make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\""], ["proof (prove)\nusing this:\n  z\\<^sub>1 \\<noteq> (0::'a)\n  z\\<^sub>2 \\<noteq> (0::'a)\n  x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 = (0::'a)\n\ngoal (1 subgoal):\n 1. make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2) =\n    make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)", "apply (simp add: make_affine_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>z\\<^sub>1 \\<noteq> (0::'a); z\\<^sub>2 \\<noteq> (0::'a);\n     x\\<^sub>2 * z\\<^sub>1 = x\\<^sub>1 * z\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> x\\<^sub>2 / z\\<^sub>2 = x\\<^sub>1 / z\\<^sub>1 \\<and>\n                      y\\<^sub>2 / z\\<^sub>2 = y\\<^sub>1 / z\\<^sub>1", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>z\\<^sub>1 \\<noteq> (0::'a); z\\<^sub>2 \\<noteq> (0::'a);\n     x\\<^sub>2 * z\\<^sub>1 = x\\<^sub>1 * z\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> x\\<^sub>2 / z\\<^sub>2 = x\\<^sub>1 / z\\<^sub>1\n 2. \\<lbrakk>z\\<^sub>1 \\<noteq> (0::'a); z\\<^sub>2 \\<noteq> (0::'a);\n     x\\<^sub>2 * z\\<^sub>1 = x\\<^sub>1 * z\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> y\\<^sub>2 / z\\<^sub>2 = y\\<^sub>1 / z\\<^sub>1", "apply (field x')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>z\\<^sub>1 \\<noteq> (0::'a); z\\<^sub>2 \\<noteq> (0::'a);\n     x\\<^sub>2 * z\\<^sub>1 = x\\<^sub>1 * z\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> z\\<^sub>2 \\<noteq> (0::'a) \\<and>\n                      z\\<^sub>1 \\<noteq> (0::'a)\n 2. \\<lbrakk>z\\<^sub>1 \\<noteq> (0::'a); z\\<^sub>2 \\<noteq> (0::'a);\n     x\\<^sub>2 * z\\<^sub>1 = x\\<^sub>1 * z\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> y\\<^sub>2 / z\\<^sub>2 = y\\<^sub>1 / z\\<^sub>1", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>z\\<^sub>1 \\<noteq> (0::'a); z\\<^sub>2 \\<noteq> (0::'a);\n     x\\<^sub>2 * z\\<^sub>1 = x\\<^sub>1 * z\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> y\\<^sub>2 / z\\<^sub>2 = y\\<^sub>1 / z\\<^sub>1", "apply (field y)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>z\\<^sub>1 \\<noteq> (0::'a); z\\<^sub>2 \\<noteq> (0::'a);\n     x\\<^sub>2 * z\\<^sub>1 = x\\<^sub>1 * z\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> z\\<^sub>2 \\<noteq> (0::'a) \\<and>\n                      z\\<^sub>1 \\<noteq> (0::'a)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2) =\n  make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n\ngoal (2 subgoals):\n 1. y\\<^sub>2 * z\\<^sub>1 - y\\<^sub>1 * z\\<^sub>2 =\n    (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))\n 2. y\\<^sub>2 * z\\<^sub>1 - y\\<^sub>1 * z\\<^sub>2 \\<noteq>\n    (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "with True x \\<open>z\\<^sub>1 \\<noteq> 0\\<close> \\<open>z\\<^sub>2 \\<noteq> 0\\<close> p\\<^sub>1' fields"], ["proof (chain)\npicking this:\n  y\\<^sub>2 * z\\<^sub>1 - y\\<^sub>1 * z\\<^sub>2 = (0::'a)\n  x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 = (0::'a)\n  z\\<^sub>1 \\<noteq> (0::'a)\n  z\\<^sub>2 \\<noteq> (0::'a)\n  on_curvep a b (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n  on_curvep a b (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)\n  make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2) =\n  make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)", "show ?thesis"], ["proof (prove)\nusing this:\n  y\\<^sub>2 * z\\<^sub>1 - y\\<^sub>1 * z\\<^sub>2 = (0::'a)\n  x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 = (0::'a)\n  z\\<^sub>1 \\<noteq> (0::'a)\n  z\\<^sub>2 \\<noteq> (0::'a)\n  on_curvep a b (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n  on_curvep a b (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)\n  make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2) =\n  make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n\ngoal (1 subgoal):\n 1. make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "by (simp add: padd_def pdouble_correct)"], ["proof (state)\nthis:\n  make_affine\n   (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n     (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n  ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n   (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))\n\ngoal (1 subgoal):\n 1. y\\<^sub>2 * z\\<^sub>1 - y\\<^sub>1 * z\\<^sub>2 \\<noteq>\n    (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. y\\<^sub>2 * z\\<^sub>1 - y\\<^sub>1 * z\\<^sub>2 \\<noteq>\n    (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "case False"], ["proof (state)\nthis:\n  y\\<^sub>2 * z\\<^sub>1 - y\\<^sub>1 * z\\<^sub>2 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. y\\<^sub>2 * z\\<^sub>1 - y\\<^sub>1 * z\\<^sub>2 \\<noteq>\n    (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "have \"y\\<^sub>2 ^ 2 * z\\<^sub>1 ^ 3 * z\\<^sub>2 = y\\<^sub>1 ^ 2 * z\\<^sub>1 * z\\<^sub>2 ^ 3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y\\<^sub>2\\<^sup>2 * z\\<^sub>1 ^ 3 * z\\<^sub>2 =\n    y\\<^sub>1\\<^sup>2 * z\\<^sub>1 * z\\<^sub>2 ^ 3", "by (ring yz\\<^sub>1 [OF \\<open>z\\<^sub>1 \\<noteq> 0\\<close>] yz\\<^sub>2 [OF \\<open>z\\<^sub>2 \\<noteq> 0\\<close>] x')"], ["proof (state)\nthis:\n  y\\<^sub>2\\<^sup>2 * z\\<^sub>1 ^ 3 * z\\<^sub>2 =\n  y\\<^sub>1\\<^sup>2 * z\\<^sub>1 * z\\<^sub>2 ^ 3\n\ngoal (1 subgoal):\n 1. y\\<^sub>2 * z\\<^sub>1 - y\\<^sub>1 * z\\<^sub>2 \\<noteq>\n    (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "then"], ["proof (chain)\npicking this:\n  y\\<^sub>2\\<^sup>2 * z\\<^sub>1 ^ 3 * z\\<^sub>2 =\n  y\\<^sub>1\\<^sup>2 * z\\<^sub>1 * z\\<^sub>2 ^ 3", "have \"y\\<^sub>2 ^ 2 * z\\<^sub>1 ^ 3 * z\\<^sub>2 / z\\<^sub>1 / z\\<^sub>2 =\n              y\\<^sub>1 ^ 2 * z\\<^sub>1 * z\\<^sub>2 ^ 3 / z\\<^sub>1 / z\\<^sub>2\""], ["proof (prove)\nusing this:\n  y\\<^sub>2\\<^sup>2 * z\\<^sub>1 ^ 3 * z\\<^sub>2 =\n  y\\<^sub>1\\<^sup>2 * z\\<^sub>1 * z\\<^sub>2 ^ 3\n\ngoal (1 subgoal):\n 1. y\\<^sub>2\\<^sup>2 * z\\<^sub>1 ^ 3 * z\\<^sub>2 / z\\<^sub>1 / z\\<^sub>2 =\n    y\\<^sub>1\\<^sup>2 * z\\<^sub>1 * z\\<^sub>2 ^ 3 / z\\<^sub>1 / z\\<^sub>2", "by simp"], ["proof (state)\nthis:\n  y\\<^sub>2\\<^sup>2 * z\\<^sub>1 ^ 3 * z\\<^sub>2 / z\\<^sub>1 / z\\<^sub>2 =\n  y\\<^sub>1\\<^sup>2 * z\\<^sub>1 * z\\<^sub>2 ^ 3 / z\\<^sub>1 / z\\<^sub>2\n\ngoal (1 subgoal):\n 1. y\\<^sub>2 * z\\<^sub>1 - y\\<^sub>1 * z\\<^sub>2 \\<noteq>\n    (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "then"], ["proof (chain)\npicking this:\n  y\\<^sub>2\\<^sup>2 * z\\<^sub>1 ^ 3 * z\\<^sub>2 / z\\<^sub>1 / z\\<^sub>2 =\n  y\\<^sub>1\\<^sup>2 * z\\<^sub>1 * z\\<^sub>2 ^ 3 / z\\<^sub>1 / z\\<^sub>2", "have \"(y\\<^sub>2 * z\\<^sub>1) * (y\\<^sub>2 * z\\<^sub>1) = (y\\<^sub>1 * z\\<^sub>2) * (y\\<^sub>1 * z\\<^sub>2)\""], ["proof (prove)\nusing this:\n  y\\<^sub>2\\<^sup>2 * z\\<^sub>1 ^ 3 * z\\<^sub>2 / z\\<^sub>1 / z\\<^sub>2 =\n  y\\<^sub>1\\<^sup>2 * z\\<^sub>1 * z\\<^sub>2 ^ 3 / z\\<^sub>1 / z\\<^sub>2\n\ngoal (1 subgoal):\n 1. y\\<^sub>2 * z\\<^sub>1 * (y\\<^sub>2 * z\\<^sub>1) =\n    y\\<^sub>1 * z\\<^sub>2 * (y\\<^sub>1 * z\\<^sub>2)", "apply (field (prems))"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((1::'a) * z\\<^sub>1\\<^sup>2 + (0::'a)) * y\\<^sub>2\\<^sup>2 +\n    ((of_int (- 1) * z\\<^sub>2\\<^sup>2 + (0::'a)) * y\\<^sub>1\\<^sup>2 +\n     (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    y\\<^sub>2 * z\\<^sub>1 * (y\\<^sub>2 * z\\<^sub>1) =\n    y\\<^sub>1 * z\\<^sub>2 * (y\\<^sub>1 * z\\<^sub>2)\n 2. z\\<^sub>2 \\<noteq> (0::'a) \\<and> z\\<^sub>1 \\<noteq> (0::'a)", "apply (field)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((1::'a) * z\\<^sub>1\\<^sup>2 + (0::'a)) * y\\<^sub>2\\<^sup>2 +\n    ((of_int (- 1) * z\\<^sub>2\\<^sup>2 + (0::'a)) * y\\<^sub>1\\<^sup>2 +\n     (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    True\n 2. z\\<^sub>2 \\<noteq> (0::'a) \\<and> z\\<^sub>1 \\<noteq> (0::'a)", "apply (rule TrueI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. z\\<^sub>2 \\<noteq> (0::'a) \\<and> z\\<^sub>1 \\<noteq> (0::'a)", "apply (simp add: \\<open>z\\<^sub>1 \\<noteq> 0\\<close> \\<open>z\\<^sub>2 \\<noteq> 0\\<close>)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  y\\<^sub>2 * z\\<^sub>1 * (y\\<^sub>2 * z\\<^sub>1) =\n  y\\<^sub>1 * z\\<^sub>2 * (y\\<^sub>1 * z\\<^sub>2)\n\ngoal (1 subgoal):\n 1. y\\<^sub>2 * z\\<^sub>1 - y\\<^sub>1 * z\\<^sub>2 \\<noteq>\n    (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "with False"], ["proof (chain)\npicking this:\n  y\\<^sub>2 * z\\<^sub>1 - y\\<^sub>1 * z\\<^sub>2 \\<noteq> (0::'a)\n  y\\<^sub>2 * z\\<^sub>1 * (y\\<^sub>2 * z\\<^sub>1) =\n  y\\<^sub>1 * z\\<^sub>2 * (y\\<^sub>1 * z\\<^sub>2)", "have y\\<^sub>2z\\<^sub>1: \"y\\<^sub>2 * z\\<^sub>1 = - (y\\<^sub>1 * z\\<^sub>2)\""], ["proof (prove)\nusing this:\n  y\\<^sub>2 * z\\<^sub>1 - y\\<^sub>1 * z\\<^sub>2 \\<noteq> (0::'a)\n  y\\<^sub>2 * z\\<^sub>1 * (y\\<^sub>2 * z\\<^sub>1) =\n  y\\<^sub>1 * z\\<^sub>2 * (y\\<^sub>1 * z\\<^sub>2)\n\ngoal (1 subgoal):\n 1. y\\<^sub>2 * z\\<^sub>1 = - (y\\<^sub>1 * z\\<^sub>2)", "by (simp add: square_eq_iff)"], ["proof (state)\nthis:\n  y\\<^sub>2 * z\\<^sub>1 = - (y\\<^sub>1 * z\\<^sub>2)\n\ngoal (1 subgoal):\n 1. y\\<^sub>2 * z\\<^sub>1 - y\\<^sub>1 * z\\<^sub>2 \\<noteq>\n    (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "from x False \\<open>z\\<^sub>1 \\<noteq> 0\\<close> \\<open>z\\<^sub>2 \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 = (0::'a)\n  y\\<^sub>2 * z\\<^sub>1 - y\\<^sub>1 * z\\<^sub>2 \\<noteq> (0::'a)\n  z\\<^sub>1 \\<noteq> (0::'a)\n  z\\<^sub>2 \\<noteq> (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 = (0::'a)\n  y\\<^sub>2 * z\\<^sub>1 - y\\<^sub>1 * z\\<^sub>2 \\<noteq> (0::'a)\n  z\\<^sub>1 \\<noteq> (0::'a)\n  z\\<^sub>2 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "apply (simp add: padd_def add_def make_affine_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x\\<^sub>2 * z\\<^sub>1 = x\\<^sub>1 * z\\<^sub>2;\n     y\\<^sub>2 * z\\<^sub>1 \\<noteq> y\\<^sub>1 * z\\<^sub>2;\n     z\\<^sub>1 \\<noteq> (0::'a); z\\<^sub>2 \\<noteq> (0::'a)\\<rbrakk>\n    \\<Longrightarrow> (y\\<^sub>1 / z\\<^sub>1 =\n                       - (y\\<^sub>2 / z\\<^sub>2) \\<longrightarrow>\n                       x\\<^sub>1 / z\\<^sub>1 = x\\<^sub>2 / z\\<^sub>2) \\<and>\n                      y\\<^sub>1 / z\\<^sub>1 = - (y\\<^sub>2 / z\\<^sub>2)", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x\\<^sub>2 * z\\<^sub>1 = x\\<^sub>1 * z\\<^sub>2;\n     y\\<^sub>2 * z\\<^sub>1 \\<noteq> y\\<^sub>1 * z\\<^sub>2;\n     z\\<^sub>1 \\<noteq> (0::'a); z\\<^sub>2 \\<noteq> (0::'a)\\<rbrakk>\n    \\<Longrightarrow> y\\<^sub>1 / z\\<^sub>1 =\n                      - (y\\<^sub>2 / z\\<^sub>2) \\<longrightarrow>\n                      x\\<^sub>1 / z\\<^sub>1 = x\\<^sub>2 / z\\<^sub>2\n 2. \\<lbrakk>x\\<^sub>2 * z\\<^sub>1 = x\\<^sub>1 * z\\<^sub>2;\n     y\\<^sub>2 * z\\<^sub>1 \\<noteq> y\\<^sub>1 * z\\<^sub>2;\n     z\\<^sub>1 \\<noteq> (0::'a); z\\<^sub>2 \\<noteq> (0::'a)\\<rbrakk>\n    \\<Longrightarrow> y\\<^sub>1 / z\\<^sub>1 = - (y\\<^sub>2 / z\\<^sub>2)", "apply (rule impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x\\<^sub>2 * z\\<^sub>1 = x\\<^sub>1 * z\\<^sub>2;\n     y\\<^sub>2 * z\\<^sub>1 \\<noteq> y\\<^sub>1 * z\\<^sub>2;\n     z\\<^sub>1 \\<noteq> (0::'a); z\\<^sub>2 \\<noteq> (0::'a);\n     y\\<^sub>1 / z\\<^sub>1 = - (y\\<^sub>2 / z\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> x\\<^sub>1 / z\\<^sub>1 = x\\<^sub>2 / z\\<^sub>2\n 2. \\<lbrakk>x\\<^sub>2 * z\\<^sub>1 = x\\<^sub>1 * z\\<^sub>2;\n     y\\<^sub>2 * z\\<^sub>1 \\<noteq> y\\<^sub>1 * z\\<^sub>2;\n     z\\<^sub>1 \\<noteq> (0::'a); z\\<^sub>2 \\<noteq> (0::'a)\\<rbrakk>\n    \\<Longrightarrow> y\\<^sub>1 / z\\<^sub>1 = - (y\\<^sub>2 / z\\<^sub>2)", "apply (field x')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x\\<^sub>2 * z\\<^sub>1 = x\\<^sub>1 * z\\<^sub>2;\n     y\\<^sub>2 * z\\<^sub>1 \\<noteq> y\\<^sub>1 * z\\<^sub>2;\n     z\\<^sub>1 \\<noteq> (0::'a); z\\<^sub>2 \\<noteq> (0::'a);\n     y\\<^sub>1 / z\\<^sub>1 = - (y\\<^sub>2 / z\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> z\\<^sub>1 \\<noteq> (0::'a) \\<and>\n                      z\\<^sub>2 \\<noteq> (0::'a)\n 2. \\<lbrakk>x\\<^sub>2 * z\\<^sub>1 = x\\<^sub>1 * z\\<^sub>2;\n     y\\<^sub>2 * z\\<^sub>1 \\<noteq> y\\<^sub>1 * z\\<^sub>2;\n     z\\<^sub>1 \\<noteq> (0::'a); z\\<^sub>2 \\<noteq> (0::'a)\\<rbrakk>\n    \\<Longrightarrow> y\\<^sub>1 / z\\<^sub>1 = - (y\\<^sub>2 / z\\<^sub>2)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x\\<^sub>2 * z\\<^sub>1 = x\\<^sub>1 * z\\<^sub>2;\n     y\\<^sub>2 * z\\<^sub>1 \\<noteq> y\\<^sub>1 * z\\<^sub>2;\n     z\\<^sub>1 \\<noteq> (0::'a); z\\<^sub>2 \\<noteq> (0::'a)\\<rbrakk>\n    \\<Longrightarrow> y\\<^sub>1 / z\\<^sub>1 = - (y\\<^sub>2 / z\\<^sub>2)", "apply (field y\\<^sub>2z\\<^sub>1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x\\<^sub>2 * z\\<^sub>1 = x\\<^sub>1 * z\\<^sub>2;\n     y\\<^sub>2 * z\\<^sub>1 \\<noteq> y\\<^sub>1 * z\\<^sub>2;\n     z\\<^sub>1 \\<noteq> (0::'a); z\\<^sub>2 \\<noteq> (0::'a)\\<rbrakk>\n    \\<Longrightarrow> z\\<^sub>1 \\<noteq> (0::'a) \\<and>\n                      z\\<^sub>2 \\<noteq> (0::'a)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  make_affine\n   (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n     (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n  ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n   (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  make_affine\n   (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n     (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n  ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n   (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))\n\ngoal (1 subgoal):\n 1. x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 \\<noteq>\n    (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 \\<noteq>\n    (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "case False"], ["proof (state)\nthis:\n  x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 \\<noteq>\n    (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "then"], ["proof (chain)\npicking this:\n  x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 \\<noteq> (0::'a)", "have \"x\\<^sub>1 / z\\<^sub>1 \\<noteq> x\\<^sub>2 / z\\<^sub>2\""], ["proof (prove)\nusing this:\n  x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. x\\<^sub>1 / z\\<^sub>1 \\<noteq> x\\<^sub>2 / z\\<^sub>2", "apply (rule_tac notI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 \\<noteq> (0::'a);\n     x\\<^sub>1 / z\\<^sub>1 = x\\<^sub>2 / z\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> False", "apply (erule notE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^sub>1 / z\\<^sub>1 = x\\<^sub>2 / z\\<^sub>2 \\<Longrightarrow>\n    x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 = (0::'a)", "apply (drule sym)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^sub>2 / z\\<^sub>2 = x\\<^sub>1 / z\\<^sub>1 \\<Longrightarrow>\n    x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 = (0::'a)", "apply (field (prems))"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((1::'a) * z\\<^sub>1 ^ 1 + (0::'a)) * x\\<^sub>2 ^ 1 +\n    ((of_int (- 1) * z\\<^sub>2 ^ 1 + (0::'a)) * x\\<^sub>1 ^ 1 + (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 = (0::'a)\n 2. z\\<^sub>2 \\<noteq> (0::'a) \\<and> z\\<^sub>1 \\<noteq> (0::'a)", "apply ring"], ["proof (prove)\ngoal (1 subgoal):\n 1. z\\<^sub>2 \\<noteq> (0::'a) \\<and> z\\<^sub>1 \\<noteq> (0::'a)", "apply (simp add: \\<open>z\\<^sub>1 \\<noteq> 0\\<close> \\<open>z\\<^sub>2 \\<noteq> 0\\<close>)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  x\\<^sub>1 / z\\<^sub>1 \\<noteq> x\\<^sub>2 / z\\<^sub>2\n\ngoal (1 subgoal):\n 1. x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 \\<noteq>\n    (0::'a) \\<Longrightarrow>\n    make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "with False \\<open>z\\<^sub>1 \\<noteq> 0\\<close> \\<open>z\\<^sub>2 \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 \\<noteq> (0::'a)\n  z\\<^sub>1 \\<noteq> (0::'a)\n  z\\<^sub>2 \\<noteq> (0::'a)\n  x\\<^sub>1 / z\\<^sub>1 \\<noteq> x\\<^sub>2 / z\\<^sub>2", "show ?thesis"], ["proof (prove)\nusing this:\n  x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 \\<noteq> (0::'a)\n  z\\<^sub>1 \\<noteq> (0::'a)\n  z\\<^sub>2 \\<noteq> (0::'a)\n  x\\<^sub>1 / z\\<^sub>1 \\<noteq> x\\<^sub>2 / z\\<^sub>2\n\ngoal (1 subgoal):\n 1. make_affine\n     (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n       (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n    ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n     (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))", "apply (auto simp add: padd_def add_def make_affine_def Let_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x\\<^sub>2 * z\\<^sub>1 \\<noteq> x\\<^sub>1 * z\\<^sub>2;\n     z\\<^sub>1 \\<noteq> (0::'a); z\\<^sub>2 \\<noteq> (0::'a);\n     x\\<^sub>1 / z\\<^sub>1 \\<noteq> x\\<^sub>2 / z\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> (x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2) *\n                      ((y\\<^sub>2 * z\\<^sub>1 -\n                        y\\<^sub>1 * z\\<^sub>2)\\<^sup>2 *\n                       z\\<^sub>1 *\n                       z\\<^sub>2 -\n                       (x\\<^sub>2 * z\\<^sub>1 + x\\<^sub>1 * z\\<^sub>2) *\n                       (x\\<^sub>2 * z\\<^sub>1 -\n                        x\\<^sub>1 * z\\<^sub>2)\\<^sup>2) /\n                      ((x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2) ^ 3 *\n                       z\\<^sub>1 *\n                       z\\<^sub>2) =\n                      ((y\\<^sub>2 / z\\<^sub>2 - y\\<^sub>1 / z\\<^sub>1) /\n                       (x\\<^sub>2 / z\\<^sub>2 -\n                        x\\<^sub>1 / z\\<^sub>1))\\<^sup>2 -\n                      x\\<^sub>1 / z\\<^sub>1 -\n                      x\\<^sub>2 / z\\<^sub>2\n 2. \\<lbrakk>x\\<^sub>2 * z\\<^sub>1 \\<noteq> x\\<^sub>1 * z\\<^sub>2;\n     z\\<^sub>1 \\<noteq> (0::'a); z\\<^sub>2 \\<noteq> (0::'a);\n     x\\<^sub>1 / z\\<^sub>1 \\<noteq> x\\<^sub>2 / z\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ((x\\<^sub>1 * z\\<^sub>2 *\n                        (x\\<^sub>2 * z\\<^sub>1 -\n                         x\\<^sub>1 * z\\<^sub>2)\\<^sup>2 -\n                        ((y\\<^sub>2 * z\\<^sub>1 -\n                          y\\<^sub>1 * z\\<^sub>2)\\<^sup>2 *\n                         z\\<^sub>1 *\n                         z\\<^sub>2 -\n                         (x\\<^sub>2 * z\\<^sub>1 + x\\<^sub>1 * z\\<^sub>2) *\n                         (x\\<^sub>2 * z\\<^sub>1 -\n                          x\\<^sub>1 * z\\<^sub>2)\\<^sup>2)) *\n                       (y\\<^sub>2 * z\\<^sub>1 - y\\<^sub>1 * z\\<^sub>2) -\n                       (x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2) ^ 3 *\n                       y\\<^sub>1 *\n                       z\\<^sub>2) /\n                      ((x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2) ^ 3 *\n                       z\\<^sub>1 *\n                       z\\<^sub>2) =\n                      - (y\\<^sub>1 / z\\<^sub>1) -\n                      (y\\<^sub>2 / z\\<^sub>2 - y\\<^sub>1 / z\\<^sub>1) *\n                      (((y\\<^sub>2 / z\\<^sub>2 - y\\<^sub>1 / z\\<^sub>1) /\n                        (x\\<^sub>2 / z\\<^sub>2 -\n                         x\\<^sub>1 / z\\<^sub>1))\\<^sup>2 -\n                       x\\<^sub>2 / z\\<^sub>2 -\n                       (2::'a) * x\\<^sub>1 / z\\<^sub>1) /\n                      (x\\<^sub>2 / z\\<^sub>2 - x\\<^sub>1 / z\\<^sub>1)", "apply field"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x\\<^sub>2 * z\\<^sub>1 \\<noteq> x\\<^sub>1 * z\\<^sub>2;\n     z\\<^sub>1 \\<noteq> (0::'a); z\\<^sub>2 \\<noteq> (0::'a);\n     x\\<^sub>1 / z\\<^sub>1 \\<noteq> x\\<^sub>2 / z\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> (x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2) ^ 3 *\n                      z\\<^sub>1 *\n                      z\\<^sub>2 \\<noteq>\n                      (0::'a) \\<and>\n                      z\\<^sub>1 \\<noteq> (0::'a) \\<and>\n                      x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 \\<noteq>\n                      (0::'a) \\<and>\n                      z\\<^sub>2 \\<noteq> (0::'a)\n 2. \\<lbrakk>x\\<^sub>2 * z\\<^sub>1 \\<noteq> x\\<^sub>1 * z\\<^sub>2;\n     z\\<^sub>1 \\<noteq> (0::'a); z\\<^sub>2 \\<noteq> (0::'a);\n     x\\<^sub>1 / z\\<^sub>1 \\<noteq> x\\<^sub>2 / z\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ((x\\<^sub>1 * z\\<^sub>2 *\n                        (x\\<^sub>2 * z\\<^sub>1 -\n                         x\\<^sub>1 * z\\<^sub>2)\\<^sup>2 -\n                        ((y\\<^sub>2 * z\\<^sub>1 -\n                          y\\<^sub>1 * z\\<^sub>2)\\<^sup>2 *\n                         z\\<^sub>1 *\n                         z\\<^sub>2 -\n                         (x\\<^sub>2 * z\\<^sub>1 + x\\<^sub>1 * z\\<^sub>2) *\n                         (x\\<^sub>2 * z\\<^sub>1 -\n                          x\\<^sub>1 * z\\<^sub>2)\\<^sup>2)) *\n                       (y\\<^sub>2 * z\\<^sub>1 - y\\<^sub>1 * z\\<^sub>2) -\n                       (x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2) ^ 3 *\n                       y\\<^sub>1 *\n                       z\\<^sub>2) /\n                      ((x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2) ^ 3 *\n                       z\\<^sub>1 *\n                       z\\<^sub>2) =\n                      - (y\\<^sub>1 / z\\<^sub>1) -\n                      (y\\<^sub>2 / z\\<^sub>2 - y\\<^sub>1 / z\\<^sub>1) *\n                      (((y\\<^sub>2 / z\\<^sub>2 - y\\<^sub>1 / z\\<^sub>1) /\n                        (x\\<^sub>2 / z\\<^sub>2 -\n                         x\\<^sub>1 / z\\<^sub>1))\\<^sup>2 -\n                       x\\<^sub>2 / z\\<^sub>2 -\n                       (2::'a) * x\\<^sub>1 / z\\<^sub>1) /\n                      (x\\<^sub>2 / z\\<^sub>2 - x\\<^sub>1 / z\\<^sub>1)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x\\<^sub>2 * z\\<^sub>1 \\<noteq> x\\<^sub>1 * z\\<^sub>2;\n     z\\<^sub>1 \\<noteq> (0::'a); z\\<^sub>2 \\<noteq> (0::'a);\n     x\\<^sub>1 / z\\<^sub>1 \\<noteq> x\\<^sub>2 / z\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ((x\\<^sub>1 * z\\<^sub>2 *\n                        (x\\<^sub>2 * z\\<^sub>1 -\n                         x\\<^sub>1 * z\\<^sub>2)\\<^sup>2 -\n                        ((y\\<^sub>2 * z\\<^sub>1 -\n                          y\\<^sub>1 * z\\<^sub>2)\\<^sup>2 *\n                         z\\<^sub>1 *\n                         z\\<^sub>2 -\n                         (x\\<^sub>2 * z\\<^sub>1 + x\\<^sub>1 * z\\<^sub>2) *\n                         (x\\<^sub>2 * z\\<^sub>1 -\n                          x\\<^sub>1 * z\\<^sub>2)\\<^sup>2)) *\n                       (y\\<^sub>2 * z\\<^sub>1 - y\\<^sub>1 * z\\<^sub>2) -\n                       (x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2) ^ 3 *\n                       y\\<^sub>1 *\n                       z\\<^sub>2) /\n                      ((x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2) ^ 3 *\n                       z\\<^sub>1 *\n                       z\\<^sub>2) =\n                      - (y\\<^sub>1 / z\\<^sub>1) -\n                      (y\\<^sub>2 / z\\<^sub>2 - y\\<^sub>1 / z\\<^sub>1) *\n                      (((y\\<^sub>2 / z\\<^sub>2 - y\\<^sub>1 / z\\<^sub>1) /\n                        (x\\<^sub>2 / z\\<^sub>2 -\n                         x\\<^sub>1 / z\\<^sub>1))\\<^sup>2 -\n                       x\\<^sub>2 / z\\<^sub>2 -\n                       (2::'a) * x\\<^sub>1 / z\\<^sub>1) /\n                      (x\\<^sub>2 / z\\<^sub>2 - x\\<^sub>1 / z\\<^sub>1)", "apply field"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x\\<^sub>2 * z\\<^sub>1 \\<noteq> x\\<^sub>1 * z\\<^sub>2;\n     z\\<^sub>1 \\<noteq> (0::'a); z\\<^sub>2 \\<noteq> (0::'a);\n     x\\<^sub>1 / z\\<^sub>1 \\<noteq> x\\<^sub>2 / z\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> (x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2) ^ 3 *\n                      z\\<^sub>1 *\n                      z\\<^sub>2 \\<noteq>\n                      (0::'a) \\<and>\n                      x\\<^sub>2 * z\\<^sub>1 - x\\<^sub>1 * z\\<^sub>2 \\<noteq>\n                      (0::'a) \\<and>\n                      z\\<^sub>2 \\<noteq> (0::'a) \\<and>\n                      z\\<^sub>1 \\<noteq> (0::'a)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  make_affine\n   (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n     (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n  ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n   (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  make_affine\n   (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n     (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n  ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n   (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  make_affine\n   (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n     (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n  ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n   (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  make_affine\n   (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1)\n     (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2)) =\n  ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n   (make_affine (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  make_affine (padd a (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1) p\\<^sub>2) =\n  ell_field_class.add a (make_affine (x\\<^sub>1, y\\<^sub>1, z\\<^sub>1))\n   (make_affine p\\<^sub>2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pdouble_closed:\n  \"on_curvep a b p \\<Longrightarrow> on_curvep a b (pdouble a p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. on_curvep a b p \\<Longrightarrow> on_curvep a b (pdouble a p)", "by (simp add: on_curvep_iff_on_curve pdouble_correct add_closed)"], ["", "lemma padd_closed:\n  \"on_curvep a b p\\<^sub>1 \\<Longrightarrow> on_curvep a b p\\<^sub>2 \\<Longrightarrow> on_curvep a b (padd a p\\<^sub>1 p\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>on_curvep a b p\\<^sub>1; on_curvep a b p\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> on_curvep a b (padd a p\\<^sub>1 p\\<^sub>2)", "by (simp add: on_curvep_iff_on_curve padd_correct add_closed)"], ["", "primrec (in ell_field) ppoint_mult :: \"'a \\<Rightarrow> nat \\<Rightarrow> 'a ppoint \\<Rightarrow> 'a ppoint\"\nwhere\n    \"ppoint_mult a 0 p = (0, 0, 0)\"\n  | \"ppoint_mult a (Suc n) p = padd a p (ppoint_mult a n p)\""], ["", "lemma ppoint_mult_closed [simp]:\n  \"on_curvep a b p \\<Longrightarrow> on_curvep a b (ppoint_mult a n p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. on_curvep a b p \\<Longrightarrow> on_curvep a b (ppoint_mult a n p)", "by (induct n) (simp_all add: padd_closed)"], ["", "lemma ppoint_mult_correct: \"on_curvep a b p \\<Longrightarrow>\n  make_affine (ppoint_mult a n p) = point_mult a n (make_affine p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. on_curvep a b p \\<Longrightarrow>\n    make_affine (ppoint_mult a n p) = point_mult a n (make_affine p)", "by (induct n) (simp_all add: padd_correct)"], ["", "context ell_field begin"], ["", "definition proj_eq :: \"'a ppoint \\<Rightarrow> 'a ppoint \\<Rightarrow> bool\" where\n  \"proj_eq = (\\<lambda>(x\\<^sub>1, y\\<^sub>1, z\\<^sub>1) (x\\<^sub>2, y\\<^sub>2, z\\<^sub>2).\n     (z\\<^sub>1 = 0) = (z\\<^sub>2 = 0) \\<and> x\\<^sub>1 * z\\<^sub>2 = x\\<^sub>2 * z\\<^sub>1 \\<and> y\\<^sub>1 * z\\<^sub>2 = y\\<^sub>2 * z\\<^sub>1)\""], ["", "end"], ["", "lemma proj_eq_refl: \"proj_eq p p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proj_eq p p", "by (auto simp add: proj_eq_def)"], ["", "lemma proj_eq_sym: \"proj_eq p p' \\<Longrightarrow> proj_eq p' p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proj_eq p p' \\<Longrightarrow> proj_eq p' p", "by (auto simp add: proj_eq_def)"], ["", "lemma proj_eq_trans:\n  \"in_carrierp p \\<Longrightarrow> in_carrierp p' \\<Longrightarrow> in_carrierp p'' \\<Longrightarrow>\n   proj_eq p p' \\<Longrightarrow> proj_eq p' p'' \\<Longrightarrow> proj_eq p p''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>in_carrierp p; in_carrierp p'; in_carrierp p''; proj_eq p p';\n     proj_eq p' p''\\<rbrakk>\n    \\<Longrightarrow> proj_eq p p''", "proof (induct p rule: prod_induct3)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>in_carrierp (a, b, c); in_carrierp p'; in_carrierp p'';\n        proj_eq (a, b, c) p'; proj_eq p' p''\\<rbrakk>\n       \\<Longrightarrow> proj_eq (a, b, c) p''", "case (fields x y z)"], ["proof (state)\nthis:\n  in_carrierp (x, y, z)\n  in_carrierp p'\n  in_carrierp p''\n  proj_eq (x, y, z) p'\n  proj_eq p' p''\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>in_carrierp (a, b, c); in_carrierp p'; in_carrierp p'';\n        proj_eq (a, b, c) p'; proj_eq p' p''\\<rbrakk>\n       \\<Longrightarrow> proj_eq (a, b, c) p''", "then"], ["proof (chain)\npicking this:\n  in_carrierp (x, y, z)\n  in_carrierp p'\n  in_carrierp p''\n  proj_eq (x, y, z) p'\n  proj_eq p' p''", "show ?case"], ["proof (prove)\nusing this:\n  in_carrierp (x, y, z)\n  in_carrierp p'\n  in_carrierp p''\n  proj_eq (x, y, z) p'\n  proj_eq p' p''\n\ngoal (1 subgoal):\n 1. proj_eq (x, y, z) p''", "proof (induct p' rule: prod_induct3)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>in_carrierp (x, y, z); in_carrierp (a, b, c);\n        in_carrierp p''; proj_eq (x, y, z) (a, b, c);\n        proj_eq (a, b, c) p''\\<rbrakk>\n       \\<Longrightarrow> proj_eq (x, y, z) p''", "case (fields x' y' z')"], ["proof (state)\nthis:\n  in_carrierp (x, y, z)\n  in_carrierp (x', y', z')\n  in_carrierp p''\n  proj_eq (x, y, z) (x', y', z')\n  proj_eq (x', y', z') p''\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>in_carrierp (x, y, z); in_carrierp (a, b, c);\n        in_carrierp p''; proj_eq (x, y, z) (a, b, c);\n        proj_eq (a, b, c) p''\\<rbrakk>\n       \\<Longrightarrow> proj_eq (x, y, z) p''", "then"], ["proof (chain)\npicking this:\n  in_carrierp (x, y, z)\n  in_carrierp (x', y', z')\n  in_carrierp p''\n  proj_eq (x, y, z) (x', y', z')\n  proj_eq (x', y', z') p''", "show ?case"], ["proof (prove)\nusing this:\n  in_carrierp (x, y, z)\n  in_carrierp (x', y', z')\n  in_carrierp p''\n  proj_eq (x, y, z) (x', y', z')\n  proj_eq (x', y', z') p''\n\ngoal (1 subgoal):\n 1. proj_eq (x, y, z) p''", "proof (induct p'' rule: prod_induct3)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>in_carrierp (x, y, z); in_carrierp (x', y', z');\n        in_carrierp (a, b, c); proj_eq (x, y, z) (x', y', z');\n        proj_eq (x', y', z') (a, b, c)\\<rbrakk>\n       \\<Longrightarrow> proj_eq (x, y, z) (a, b, c)", "case (fields x'' y'' z'')"], ["proof (state)\nthis:\n  in_carrierp (x, y, z)\n  in_carrierp (x', y', z')\n  in_carrierp (x'', y'', z'')\n  proj_eq (x, y, z) (x', y', z')\n  proj_eq (x', y', z') (x'', y'', z'')\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>in_carrierp (x, y, z); in_carrierp (x', y', z');\n        in_carrierp (a, b, c); proj_eq (x, y, z) (x', y', z');\n        proj_eq (x', y', z') (a, b, c)\\<rbrakk>\n       \\<Longrightarrow> proj_eq (x, y, z) (a, b, c)", "then"], ["proof (chain)\npicking this:\n  in_carrierp (x, y, z)\n  in_carrierp (x', y', z')\n  in_carrierp (x'', y'', z'')\n  proj_eq (x, y, z) (x', y', z')\n  proj_eq (x', y', z') (x'', y'', z'')", "have\n        z: \"(z = 0) = (z' = 0)\" \"(z' = 0) = (z'' = 0)\" and\n        \"x * z' * z'' = x' * z * z''\"\n        \"y * z' * z'' = y' * z * z''\"\n        and xy:\n        \"x' * z'' = x'' * z'\"\n        \"y' * z'' = y'' * z'\""], ["proof (prove)\nusing this:\n  in_carrierp (x, y, z)\n  in_carrierp (x', y', z')\n  in_carrierp (x'', y'', z'')\n  proj_eq (x, y, z) (x', y', z')\n  proj_eq (x', y', z') (x'', y'', z'')\n\ngoal (1 subgoal):\n 1. ((z = (0::'a)) = (z' = (0::'a)) &&&\n     (z' = (0::'a)) = (z'' = (0::'a))) &&&\n    (x * z' * z'' = x' * z * z'' &&& y * z' * z'' = y' * z * z'') &&&\n    x' * z'' = x'' * z' &&& y' * z'' = y'' * z'", "by (simp_all add: proj_eq_def)"], ["proof (state)\nthis:\n  (z = (0::'a)) = (z' = (0::'a))\n  (z' = (0::'a)) = (z'' = (0::'a))\n  x * z' * z'' = x' * z * z''\n  y * z' * z'' = y' * z * z''\n  x' * z'' = x'' * z'\n  y' * z'' = y'' * z'\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>in_carrierp (x, y, z); in_carrierp (x', y', z');\n        in_carrierp (a, b, c); proj_eq (x, y, z) (x', y', z');\n        proj_eq (x', y', z') (a, b, c)\\<rbrakk>\n       \\<Longrightarrow> proj_eq (x, y, z) (a, b, c)", "from \\<open>x * z' * z'' = x' * z * z''\\<close>"], ["proof (chain)\npicking this:\n  x * z' * z'' = x' * z * z''", "have \"(x * z'') * z' = (x'' * z) * z'\""], ["proof (prove)\nusing this:\n  x * z' * z'' = x' * z * z''\n\ngoal (1 subgoal):\n 1. x * z'' * z' = x'' * z * z'", "by (ring (prems) xy) (ring xy)"], ["proof (state)\nthis:\n  x * z'' * z' = x'' * z * z'\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>in_carrierp (x, y, z); in_carrierp (x', y', z');\n        in_carrierp (a, b, c); proj_eq (x, y, z) (x', y', z');\n        proj_eq (x', y', z') (a, b, c)\\<rbrakk>\n       \\<Longrightarrow> proj_eq (x, y, z) (a, b, c)", "moreover"], ["proof (state)\nthis:\n  x * z'' * z' = x'' * z * z'\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>in_carrierp (x, y, z); in_carrierp (x', y', z');\n        in_carrierp (a, b, c); proj_eq (x, y, z) (x', y', z');\n        proj_eq (x', y', z') (a, b, c)\\<rbrakk>\n       \\<Longrightarrow> proj_eq (x, y, z) (a, b, c)", "from \\<open>y * z' * z'' = y' * z * z''\\<close>"], ["proof (chain)\npicking this:\n  y * z' * z'' = y' * z * z''", "have \"(y * z'') * z' = (y'' * z) * z'\""], ["proof (prove)\nusing this:\n  y * z' * z'' = y' * z * z''\n\ngoal (1 subgoal):\n 1. y * z'' * z' = y'' * z * z'", "by (ring (prems) xy) (ring xy)"], ["proof (state)\nthis:\n  y * z'' * z' = y'' * z * z'\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>in_carrierp (x, y, z); in_carrierp (x', y', z');\n        in_carrierp (a, b, c); proj_eq (x, y, z) (x', y', z');\n        proj_eq (x', y', z') (a, b, c)\\<rbrakk>\n       \\<Longrightarrow> proj_eq (x, y, z) (a, b, c)", "ultimately"], ["proof (chain)\npicking this:\n  x * z'' * z' = x'' * z * z'\n  y * z'' * z' = y'' * z * z'", "show ?case"], ["proof (prove)\nusing this:\n  x * z'' * z' = x'' * z * z'\n  y * z'' * z' = y'' * z * z'\n\ngoal (1 subgoal):\n 1. proj_eq (x, y, z) (x'', y'', z'')", "using z"], ["proof (prove)\nusing this:\n  x * z'' * z' = x'' * z * z'\n  y * z'' * z' = y'' * z * z'\n  (z = (0::'a)) = (z' = (0::'a))\n  (z' = (0::'a)) = (z'' = (0::'a))\n\ngoal (1 subgoal):\n 1. proj_eq (x, y, z) (x'', y'', z'')", "by (auto simp add: proj_eq_def)"], ["proof (state)\nthis:\n  proj_eq (x, y, z) (x'', y'', z'')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  proj_eq (x, y, z) p''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  proj_eq (x, y, z) p''\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma make_affine_proj_eq_iff:\n  \"proj_eq p p' = (make_affine p = make_affine p')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proj_eq p p' = (make_affine p = make_affine p')", "proof (induct p rule: prod_induct3)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       proj_eq (a, b, c) p' = (make_affine (a, b, c) = make_affine p')", "case (fields x y z)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       proj_eq (a, b, c) p' = (make_affine (a, b, c) = make_affine p')", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. proj_eq (x, y, z) p' = (make_affine (x, y, z) = make_affine p')", "proof (induct p' rule: prod_induct3)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       proj_eq (x, y, z) (a, b, c) =\n       (make_affine (x, y, z) = make_affine (a, b, c))", "case (fields x' y' z')"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       proj_eq (x, y, z) (a, b, c) =\n       (make_affine (x, y, z) = make_affine (a, b, c))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. proj_eq (x, y, z) (x', y', z') =\n    (make_affine (x, y, z) = make_affine (x', y', z'))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. proj_eq (x, y, z) (x', y', z') \\<Longrightarrow>\n    make_affine (x, y, z) = make_affine (x', y', z')\n 2. make_affine (x, y, z) = make_affine (x', y', z') \\<Longrightarrow>\n    proj_eq (x, y, z) (x', y', z')", "assume \"proj_eq (x, y, z) (x', y', z')\""], ["proof (state)\nthis:\n  proj_eq (x, y, z) (x', y', z')\n\ngoal (2 subgoals):\n 1. proj_eq (x, y, z) (x', y', z') \\<Longrightarrow>\n    make_affine (x, y, z) = make_affine (x', y', z')\n 2. make_affine (x, y, z) = make_affine (x', y', z') \\<Longrightarrow>\n    proj_eq (x, y, z) (x', y', z')", "then"], ["proof (chain)\npicking this:\n  proj_eq (x, y, z) (x', y', z')", "have \"(z = 0) = (z' = 0)\"\n        and xy: \"x * z' = x' * z\" \"y * z' = y' * z\""], ["proof (prove)\nusing this:\n  proj_eq (x, y, z) (x', y', z')\n\ngoal (1 subgoal):\n 1. (z = (0::'a)) = (z' = (0::'a)) &&& x * z' = x' * z &&& y * z' = y' * z", "by (simp_all add: proj_eq_def)"], ["proof (state)\nthis:\n  (z = (0::'a)) = (z' = (0::'a))\n  x * z' = x' * z\n  y * z' = y' * z\n\ngoal (2 subgoals):\n 1. proj_eq (x, y, z) (x', y', z') \\<Longrightarrow>\n    make_affine (x, y, z) = make_affine (x', y', z')\n 2. make_affine (x, y, z) = make_affine (x', y', z') \\<Longrightarrow>\n    proj_eq (x, y, z) (x', y', z')", "then"], ["proof (chain)\npicking this:\n  (z = (0::'a)) = (z' = (0::'a))\n  x * z' = x' * z\n  y * z' = y' * z", "show \"make_affine (x, y, z) = make_affine (x', y', z')\""], ["proof (prove)\nusing this:\n  (z = (0::'a)) = (z' = (0::'a))\n  x * z' = x' * z\n  y * z' = y' * z\n\ngoal (1 subgoal):\n 1. make_affine (x, y, z) = make_affine (x', y', z')", "apply (auto simp add: make_affine_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x * z' = x' * z; y * z' = y' * z; z \\<noteq> (0::'a);\n     z' \\<noteq> (0::'a)\\<rbrakk>\n    \\<Longrightarrow> x / z = x' / z'\n 2. \\<lbrakk>x * z' = x' * z; y * z' = y' * z; z \\<noteq> (0::'a);\n     z' \\<noteq> (0::'a)\\<rbrakk>\n    \\<Longrightarrow> y / z = y' / z'", "apply (field xy)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x * z' = x' * z; y * z' = y' * z; z \\<noteq> (0::'a);\n     z' \\<noteq> (0::'a)\\<rbrakk>\n    \\<Longrightarrow> z \\<noteq> (0::'a) \\<and> z' \\<noteq> (0::'a)\n 2. \\<lbrakk>x * z' = x' * z; y * z' = y' * z; z \\<noteq> (0::'a);\n     z' \\<noteq> (0::'a)\\<rbrakk>\n    \\<Longrightarrow> y / z = y' / z'", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x * z' = x' * z; y * z' = y' * z; z \\<noteq> (0::'a);\n     z' \\<noteq> (0::'a)\\<rbrakk>\n    \\<Longrightarrow> y / z = y' / z'", "apply (field xy)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x * z' = x' * z; y * z' = y' * z; z \\<noteq> (0::'a);\n     z' \\<noteq> (0::'a)\\<rbrakk>\n    \\<Longrightarrow> z \\<noteq> (0::'a) \\<and> z' \\<noteq> (0::'a)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  make_affine (x, y, z) = make_affine (x', y', z')\n\ngoal (1 subgoal):\n 1. make_affine (x, y, z) = make_affine (x', y', z') \\<Longrightarrow>\n    proj_eq (x, y, z) (x', y', z')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. make_affine (x, y, z) = make_affine (x', y', z') \\<Longrightarrow>\n    proj_eq (x, y, z) (x', y', z')", "assume H: \"make_affine (x, y, z) = make_affine (x', y', z')\""], ["proof (state)\nthis:\n  make_affine (x, y, z) = make_affine (x', y', z')\n\ngoal (1 subgoal):\n 1. make_affine (x, y, z) = make_affine (x', y', z') \\<Longrightarrow>\n    proj_eq (x, y, z) (x', y', z')", "show \"proj_eq (x, y, z) (x', y', z')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proj_eq (x, y, z) (x', y', z')", "proof (cases \"z = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. z = (0::'a) \\<Longrightarrow> proj_eq (x, y, z) (x', y', z')\n 2. z \\<noteq> (0::'a) \\<Longrightarrow> proj_eq (x, y, z) (x', y', z')", "case True"], ["proof (state)\nthis:\n  z = (0::'a)\n\ngoal (2 subgoals):\n 1. z = (0::'a) \\<Longrightarrow> proj_eq (x, y, z) (x', y', z')\n 2. z \\<noteq> (0::'a) \\<Longrightarrow> proj_eq (x, y, z) (x', y', z')", "with H"], ["proof (chain)\npicking this:\n  make_affine (x, y, z) = make_affine (x', y', z')\n  z = (0::'a)", "have \"z' = 0\""], ["proof (prove)\nusing this:\n  make_affine (x, y, z) = make_affine (x', y', z')\n  z = (0::'a)\n\ngoal (1 subgoal):\n 1. z' = (0::'a)", "by (simp add: make_affine_def split: if_split_asm)"], ["proof (state)\nthis:\n  z' = (0::'a)\n\ngoal (2 subgoals):\n 1. z = (0::'a) \\<Longrightarrow> proj_eq (x, y, z) (x', y', z')\n 2. z \\<noteq> (0::'a) \\<Longrightarrow> proj_eq (x, y, z) (x', y', z')", "with True"], ["proof (chain)\npicking this:\n  z = (0::'a)\n  z' = (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  z = (0::'a)\n  z' = (0::'a)\n\ngoal (1 subgoal):\n 1. proj_eq (x, y, z) (x', y', z')", "by (simp add: proj_eq_def)"], ["proof (state)\nthis:\n  proj_eq (x, y, z) (x', y', z')\n\ngoal (1 subgoal):\n 1. z \\<noteq> (0::'a) \\<Longrightarrow> proj_eq (x, y, z) (x', y', z')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. z \\<noteq> (0::'a) \\<Longrightarrow> proj_eq (x, y, z) (x', y', z')", "case False"], ["proof (state)\nthis:\n  z \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. z \\<noteq> (0::'a) \\<Longrightarrow> proj_eq (x, y, z) (x', y', z')", "with H"], ["proof (chain)\npicking this:\n  make_affine (x, y, z) = make_affine (x', y', z')\n  z \\<noteq> (0::'a)", "have \"z' \\<noteq> 0\" \"x / z = x' / z'\" \"y / z = y' / z'\""], ["proof (prove)\nusing this:\n  make_affine (x, y, z) = make_affine (x', y', z')\n  z \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. z' \\<noteq> (0::'a) &&& x / z = x' / z' &&& y / z = y' / z'", "by (simp_all add: make_affine_def split: if_split_asm)"], ["proof (state)\nthis:\n  z' \\<noteq> (0::'a)\n  x / z = x' / z'\n  y / z = y' / z'\n\ngoal (1 subgoal):\n 1. z \\<noteq> (0::'a) \\<Longrightarrow> proj_eq (x, y, z) (x', y', z')", "from \\<open>x / z = x' / z'\\<close>"], ["proof (chain)\npicking this:\n  x / z = x' / z'", "have \"x * z' = x' * z\""], ["proof (prove)\nusing this:\n  x / z = x' / z'\n\ngoal (1 subgoal):\n 1. x * z' = x' * z", "apply (field (prems))"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((1::'a) * z' ^ 1 + (0::'a)) * x ^ 1 +\n    ((of_int (- 1) * z ^ 1 + (0::'a)) * x' ^ 1 + (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    x * z' = x' * z\n 2. z \\<noteq> (0::'a) \\<and> z' \\<noteq> (0::'a)", "apply field"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((1::'a) * z' ^ 1 + (0::'a)) * x ^ 1 +\n    ((of_int (- 1) * z ^ 1 + (0::'a)) * x' ^ 1 + (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    True\n 2. z \\<noteq> (0::'a) \\<and> z' \\<noteq> (0::'a)", "apply (simp_all add: \\<open>z \\<noteq> 0\\<close> \\<open>z' \\<noteq> 0\\<close>)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  x * z' = x' * z\n\ngoal (1 subgoal):\n 1. z \\<noteq> (0::'a) \\<Longrightarrow> proj_eq (x, y, z) (x', y', z')", "moreover"], ["proof (state)\nthis:\n  x * z' = x' * z\n\ngoal (1 subgoal):\n 1. z \\<noteq> (0::'a) \\<Longrightarrow> proj_eq (x, y, z) (x', y', z')", "from \\<open>y / z = y' / z'\\<close>"], ["proof (chain)\npicking this:\n  y / z = y' / z'", "have \"y * z' = y' * z\""], ["proof (prove)\nusing this:\n  y / z = y' / z'\n\ngoal (1 subgoal):\n 1. y * z' = y' * z", "apply (field (prems))"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((1::'a) * z' ^ 1 + (0::'a)) * y ^ 1 +\n    ((of_int (- 1) * z ^ 1 + (0::'a)) * y' ^ 1 + (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    y * z' = y' * z\n 2. z \\<noteq> (0::'a) \\<and> z' \\<noteq> (0::'a)", "apply field"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((1::'a) * z' ^ 1 + (0::'a)) * y ^ 1 +\n    ((of_int (- 1) * z ^ 1 + (0::'a)) * y' ^ 1 + (0::'a)) =\n    (0::'a) \\<Longrightarrow>\n    True\n 2. z \\<noteq> (0::'a) \\<and> z' \\<noteq> (0::'a)", "apply (simp_all add: \\<open>z \\<noteq> 0\\<close> \\<open>z' \\<noteq> 0\\<close>)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  y * z' = y' * z\n\ngoal (1 subgoal):\n 1. z \\<noteq> (0::'a) \\<Longrightarrow> proj_eq (x, y, z) (x', y', z')", "ultimately"], ["proof (chain)\npicking this:\n  x * z' = x' * z\n  y * z' = y' * z", "show ?thesis"], ["proof (prove)\nusing this:\n  x * z' = x' * z\n  y * z' = y' * z\n\ngoal (1 subgoal):\n 1. proj_eq (x, y, z) (x', y', z')", "by (simp add: proj_eq_def \\<open>z \\<noteq> 0\\<close> \\<open>z' \\<noteq> 0\\<close>)"], ["proof (state)\nthis:\n  proj_eq (x, y, z) (x', y', z')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  proj_eq (x, y, z) (x', y', z')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  proj_eq (x, y, z) (x', y', z') =\n  (make_affine (x, y, z) = make_affine (x', y', z'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  proj_eq (x, y, z) p' = (make_affine (x, y, z) = make_affine p')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pdouble_proj_eq_cong:\n  \"proj_eq p p' \\<Longrightarrow> proj_eq (pdouble a p) (pdouble a p')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proj_eq p p' \\<Longrightarrow> proj_eq (pdouble a p) (pdouble a p')", "by (simp add: make_affine_proj_eq_iff pdouble_correct)"], ["", "lemma padd_proj_eq_cong:\n  \"on_curvep a b p\\<^sub>1 \\<Longrightarrow> on_curvep a b p\\<^sub>1' \\<Longrightarrow> on_curvep a b p\\<^sub>2 \\<Longrightarrow> on_curvep a b p\\<^sub>2' \\<Longrightarrow>\n   proj_eq p\\<^sub>1 p\\<^sub>1' \\<Longrightarrow> proj_eq p\\<^sub>2 p\\<^sub>2' \\<Longrightarrow> proj_eq (padd a p\\<^sub>1 p\\<^sub>2) (padd a p\\<^sub>1' p\\<^sub>2')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>on_curvep a b p\\<^sub>1; on_curvep a b p\\<^sub>1';\n     on_curvep a b p\\<^sub>2; on_curvep a b p\\<^sub>2';\n     proj_eq p\\<^sub>1 p\\<^sub>1'; proj_eq p\\<^sub>2 p\\<^sub>2'\\<rbrakk>\n    \\<Longrightarrow> proj_eq (padd a p\\<^sub>1 p\\<^sub>2)\n                       (padd a p\\<^sub>1' p\\<^sub>2')", "by (simp add: make_affine_proj_eq_iff padd_correct)"], ["", "end"]]}