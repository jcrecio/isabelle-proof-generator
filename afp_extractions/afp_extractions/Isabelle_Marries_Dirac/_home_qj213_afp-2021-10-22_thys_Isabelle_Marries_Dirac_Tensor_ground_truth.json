{"file_name": "/home/qj213/afp-2021-10-22/thys/Isabelle_Marries_Dirac/Tensor.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Isabelle_Marries_Dirac", "problem_names": ["lemma length_mat_to_cols_list [simp]:\n  \"length (mat_to_cols_list A) = dim_col A\"", "lemma length_cols_mat_to_cols_list [simp]:\n  assumes \"j < dim_col A\"\n  shows \"length [A $$ (i,j) . i <- [0..< dim_row A]] = dim_row A\"", "lemma length_row_mat_to_cols_list [simp]:\n  assumes \"i < dim_row A\"\n  shows \"length (row (mat_to_cols_list A) i) = dim_col A\"", "lemma length_col_mat_to_cols_list [simp]:\n  assumes \"j < dim_col A\"\n  shows \"length (col (mat_to_cols_list A) j) = dim_row A\"", "lemma mat_to_cols_list_is_not_Nil [simp]:\n  assumes \"dim_col A > 0\"\n  shows \"mat_to_cols_list A \\<noteq> []\"", "lemma row_length_mat_to_cols_list [simp]:\n  assumes \"dim_col A > 0\"\n  shows \"mult.row_length (mat_to_cols_list A) = dim_row A\"", "lemma mat_to_cols_list_is_mat [simp]:\n  assumes \"dim_col A > 0\"\n  shows \"mat (mult.row_length (mat_to_cols_list A)) (length (mat_to_cols_list A)) (mat_to_cols_list A)\"", "lemma index_mat_of_cols_list [simp]:\n  assumes \"i < nr\" and \"j < length cs\"\n  shows \"mat_of_cols_list nr cs $$ (i,j) = cs ! j ! i\"", "lemma mat_to_cols_list_to_mat [simp]:\n  \"mat_of_cols_list (dim_row A) (mat_to_cols_list A) = A\"", "lemma plus_mult_cpx [simp]:\n  \"plus_mult 1 (*) 0 (+) (a_inv cpx_rng)\"", "lemma list_to_mat_to_cols_list [simp]:\n  fixes l::\"complex list list\"\n  assumes \"mat nr nc l\"\n  shows \"mat_to_cols_list (mat_of_cols_list nr l) = l\"", "lemma col_mat_of_cols_list [simp]:\n  assumes \"j < length l\"\n  shows \"Matrix.col (mat_of_cols_list (length (l ! j)) l) j = vec_of_list (l ! j)\"", "lemma dim_row_tensor_mat [simp]:\n  \"dim_row (A \\<Otimes> B) = dim_row A * dim_row B\"", "lemma dim_col_tensor_mat [simp]:\n  \"dim_col (A \\<Otimes> B) = dim_col A * dim_col B\"", "lemma index_tensor_mat [simp]:\n  assumes a1:\"dim_row A = rA\" and a2:\"dim_col A = cA\" and a3:\"dim_row B = rB\" and a4:\"dim_col B = cB\"\n    and a5:\"i < rA * rB\" and a6:\"j < cA * cB\" and a7:\"cA > 0\" and a8:\"cB > 0\"\n  shows \"(A \\<Otimes> B) $$ (i,j) = A $$ (i div rB, j div cB) * B $$ (i mod rB, j mod cB)\"", "lemma Matrix_row_is_Legacy_row:\n  assumes \"i < dim_row A\"\n  shows \"Matrix.row A i = vec_of_list (row (mat_to_cols_list A) i)\"", "lemma Legacy_row_is_Matrix_row:\n  assumes \"i < mult.row_length A\"\n  shows \"row A i = list_of_vec (Matrix.row (mat_of_cols_list (mult.row_length A) A) i)\"", "lemma Matrix_col_is_Legacy_col:\n  assumes \"j < dim_col A\"\n  shows \"Matrix.col A j = vec_of_list (col (mat_to_cols_list A) j)\"", "lemma Legacy_col_is_Matrix_col:\n  assumes a1:\"j < length A\" and a2:\"length (A ! j) = mult.row_length A\"\n  shows \"col A j = list_of_vec (Matrix.col (mat_of_cols_list (mult.row_length A) A) j)\"", "lemma scalar_prod_is_Matrix_scalar_prod [simp]:\n  fixes u::\"complex list\" and v::\"complex list\"\n  assumes \"length u = length v\"\n  shows \"plus_mult.scalar_product (*) 0 (+) u v = (vec_of_list u) \\<bullet> (vec_of_list v)\"", "lemma matrix_mult_to_times_mat:\n  assumes \"dim_col A > 0\" and \"dim_col B > 0\" and \"dim_col (A::complex Matrix.mat) = dim_row B\"\n  shows \"A * B = mat_of_cols_list (dim_row A) (plus_mult.matrix_mult (*) 0 (+) (mat_to_cols_list A) (mat_to_cols_list B))\"", "lemma mat_to_cols_list_times_mat [simp]:\n  assumes \"dim_col A = dim_row B\" and \"dim_col A > 0\"\n  shows \"mat_to_cols_list (A * B) = plus_mult.matrix_mult (*) 0 (+) (mat_to_cols_list A) (mat_to_cols_list B)\"", "lemma mult_distr_tensor:\n  assumes a1:\"dim_col A = dim_row B\" and a2:\"dim_col C = dim_row D\" and a3:\"dim_col A > 0\" and \n    a4:\"dim_col B > 0\" and a5:\"dim_col C > 0\" and a6:\"dim_col D > 0\"\n  shows \"(A * B) \\<Otimes> (C * D) = (A \\<Otimes> C) * (B \\<Otimes> D)\"", "lemma tensor_mat_is_assoc:\n  fixes A B C:: \"complex Matrix.mat\"\n  shows \"A \\<Otimes> (B \\<Otimes> C) = (A \\<Otimes> B) \\<Otimes> C\""], "translations": [["", "lemma length_mat_to_cols_list [simp]:\n  \"length (mat_to_cols_list A) = dim_col A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (mat_to_cols_list A) = dim_col A", "by (simp add: mat_to_cols_list_def)"], ["", "lemma length_cols_mat_to_cols_list [simp]:\n  assumes \"j < dim_col A\"\n  shows \"length [A $$ (i,j) . i <- [0..< dim_row A]] = dim_row A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (map (\\<lambda>i. A $$ (i, j)) [0..<dim_row A]) = dim_row A", "using assms"], ["proof (prove)\nusing this:\n  j < dim_col A\n\ngoal (1 subgoal):\n 1. length (map (\\<lambda>i. A $$ (i, j)) [0..<dim_row A]) = dim_row A", "by simp"], ["", "lemma length_row_mat_to_cols_list [simp]:\n  assumes \"i < dim_row A\"\n  shows \"length (row (mat_to_cols_list A) i) = dim_col A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (Matrix_Legacy.row (mat_to_cols_list A) i) = dim_col A", "using assms"], ["proof (prove)\nusing this:\n  i < dim_row A\n\ngoal (1 subgoal):\n 1. length (Matrix_Legacy.row (mat_to_cols_list A) i) = dim_col A", "by (simp add: row_def)"], ["", "lemma length_col_mat_to_cols_list [simp]:\n  assumes \"j < dim_col A\"\n  shows \"length (col (mat_to_cols_list A) j) = dim_row A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (Matrix_Legacy.col (mat_to_cols_list A) j) = dim_row A", "using assms"], ["proof (prove)\nusing this:\n  j < dim_col A\n\ngoal (1 subgoal):\n 1. length (Matrix_Legacy.col (mat_to_cols_list A) j) = dim_row A", "by (simp add: col_def mat_to_cols_list_def)"], ["", "lemma mat_to_cols_list_is_not_Nil [simp]:\n  assumes \"dim_col A > 0\"\n  shows \"mat_to_cols_list A \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_to_cols_list A \\<noteq> []", "using assms"], ["proof (prove)\nusing this:\n  0 < dim_col A\n\ngoal (1 subgoal):\n 1. mat_to_cols_list A \\<noteq> []", "by (simp add: mat_to_cols_list_def)"], ["", "text \\<open>Link between Matrix\\_Tensor.row\\_length and Matrix.dim\\_row\\<close>"], ["", "lemma row_length_mat_to_cols_list [simp]:\n  assumes \"dim_col A > 0\"\n  shows \"mult.row_length (mat_to_cols_list A) = dim_row A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mult.row_length (mat_to_cols_list A) = dim_row A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. mult.row_length (mat_to_cols_list A) = dim_row A", "have \"mat_to_cols_list A \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_to_cols_list A \\<noteq> []", "by (simp add: assms)"], ["proof (state)\nthis:\n  mat_to_cols_list A \\<noteq> []\n\ngoal (1 subgoal):\n 1. mult.row_length (mat_to_cols_list A) = dim_row A", "then"], ["proof (chain)\npicking this:\n  mat_to_cols_list A \\<noteq> []", "have \"mult.row_length (mat_to_cols_list A) = length (hd (mat_to_cols_list A))\""], ["proof (prove)\nusing this:\n  mat_to_cols_list A \\<noteq> []\n\ngoal (1 subgoal):\n 1. mult.row_length (mat_to_cols_list A) = length (hd (mat_to_cols_list A))", "using mult.row_length_def[of \"1\" \"(*)\"]"], ["proof (prove)\nusing this:\n  mat_to_cols_list A \\<noteq> []\n  Matrix_Tensor.mult (1::?'a1) (*) \\<Longrightarrow>\n  mult.row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n\ngoal (1 subgoal):\n 1. mult.row_length (mat_to_cols_list A) = length (hd (mat_to_cols_list A))", "by (simp add: \\<open>\\<And>xs. Matrix_Tensor.mult 1 (*) \\<Longrightarrow> mult.row_length xs \\<equiv> if xs = [] then 0 else length (hd xs)\\<close> mult.intro)"], ["proof (state)\nthis:\n  mult.row_length (mat_to_cols_list A) = length (hd (mat_to_cols_list A))\n\ngoal (1 subgoal):\n 1. mult.row_length (mat_to_cols_list A) = dim_row A", "thus ?thesis"], ["proof (prove)\nusing this:\n  mult.row_length (mat_to_cols_list A) = length (hd (mat_to_cols_list A))\n\ngoal (1 subgoal):\n 1. mult.row_length (mat_to_cols_list A) = dim_row A", "by (simp add: assms mat_to_cols_list_def upt_conv_Cons)"], ["proof (state)\nthis:\n  mult.row_length (mat_to_cols_list A) = dim_row A\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>@{term mat_to_cols_list} is a matrix in the sense of @{theory Matrix.Matrix_Legacy}.\\<close>"], ["", "lemma mat_to_cols_list_is_mat [simp]:\n  assumes \"dim_col A > 0\"\n  shows \"mat (mult.row_length (mat_to_cols_list A)) (length (mat_to_cols_list A)) (mat_to_cols_list A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix_Legacy.mat (mult.row_length (mat_to_cols_list A))\n     (length (mat_to_cols_list A)) (mat_to_cols_list A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Matrix_Legacy.mat (mult.row_length (mat_to_cols_list A))\n     (length (mat_to_cols_list A)) (mat_to_cols_list A)", "have \"Ball (set (mat_to_cols_list A)) (Matrix_Legacy.vec (mult.row_length (mat_to_cols_list A)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ball (set (mat_to_cols_list A))\n     (Matrix_Legacy.vec (mult.row_length (mat_to_cols_list A)))", "using assms row_length_mat_to_cols_list mat_to_cols_list_def Ball_def set_def vec_def"], ["proof (prove)\nusing this:\n  0 < dim_col A\n  0 < dim_col ?A \\<Longrightarrow>\n  mult.row_length (mat_to_cols_list ?A) = dim_row ?A\n  mat_to_cols_list ?A =\n  map (\\<lambda>j. map (\\<lambda>i. ?A $$ (i, j)) [0..<dim_row ?A])\n   [0..<dim_col ?A]\n  Ball ?A ?P = (\\<forall>x. x \\<in> ?A \\<longrightarrow> ?P x)\n  set \\<equiv>\n  ctor_fold_list\n   (\\<lambda>z. set1_pre_list z \\<union> \\<Union> (set2_pre_list z))\n  Matrix_Legacy.vec ?n ?x = (length ?x = ?n)\n\ngoal (1 subgoal):\n 1. Ball (set (mat_to_cols_list A))\n     (Matrix_Legacy.vec (mult.row_length (mat_to_cols_list A)))", "by fastforce"], ["proof (state)\nthis:\n  Ball (set (mat_to_cols_list A))\n   (Matrix_Legacy.vec (mult.row_length (mat_to_cols_list A)))\n\ngoal (1 subgoal):\n 1. Matrix_Legacy.mat (mult.row_length (mat_to_cols_list A))\n     (length (mat_to_cols_list A)) (mat_to_cols_list A)", "thus ?thesis"], ["proof (prove)\nusing this:\n  Ball (set (mat_to_cols_list A))\n   (Matrix_Legacy.vec (mult.row_length (mat_to_cols_list A)))\n\ngoal (1 subgoal):\n 1. Matrix_Legacy.mat (mult.row_length (mat_to_cols_list A))\n     (length (mat_to_cols_list A)) (mat_to_cols_list A)", "by(auto simp: mat_def)"], ["proof (state)\nthis:\n  Matrix_Legacy.mat (mult.row_length (mat_to_cols_list A))\n   (length (mat_to_cols_list A)) (mat_to_cols_list A)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition mat_of_cols_list:: \"nat \\<Rightarrow> complex list list \\<Rightarrow> complex Matrix.mat\" where\n  \"mat_of_cols_list nr cs = Matrix.mat nr (length cs) (\\<lambda> (i,j). cs ! j ! i)\""], ["", "lemma index_mat_of_cols_list [simp]:\n  assumes \"i < nr\" and \"j < length cs\"\n  shows \"mat_of_cols_list nr cs $$ (i,j) = cs ! j ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tensor.mat_of_cols_list nr cs $$ (i, j) = cs ! j ! i", "by (simp add: assms mat_of_cols_list_def)"], ["", "lemma mat_to_cols_list_to_mat [simp]:\n  \"mat_of_cols_list (dim_row A) (mat_to_cols_list A) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tensor.mat_of_cols_list (dim_row A) (mat_to_cols_list A) = A", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row A; j < dim_col A\\<rbrakk>\n       \\<Longrightarrow> Tensor.mat_of_cols_list (dim_row A)\n                          (mat_to_cols_list A) $$\n                         (i, j) =\n                         A $$ (i, j)\n 2. dim_row (Tensor.mat_of_cols_list (dim_row A) (mat_to_cols_list A)) =\n    dim_row A\n 3. dim_col (Tensor.mat_of_cols_list (dim_row A) (mat_to_cols_list A)) =\n    dim_col A", "show f1:\"dim_row (mat_of_cols_list (dim_row A) (mat_to_cols_list A)) = dim_row A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (Tensor.mat_of_cols_list (dim_row A) (mat_to_cols_list A)) =\n    dim_row A", "by (simp add: mat_of_cols_list_def)"], ["proof (state)\nthis:\n  dim_row (Tensor.mat_of_cols_list (dim_row A) (mat_to_cols_list A)) =\n  dim_row A\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row A; j < dim_col A\\<rbrakk>\n       \\<Longrightarrow> Tensor.mat_of_cols_list (dim_row A)\n                          (mat_to_cols_list A) $$\n                         (i, j) =\n                         A $$ (i, j)\n 2. dim_col (Tensor.mat_of_cols_list (dim_row A) (mat_to_cols_list A)) =\n    dim_col A", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row A; j < dim_col A\\<rbrakk>\n       \\<Longrightarrow> Tensor.mat_of_cols_list (dim_row A)\n                          (mat_to_cols_list A) $$\n                         (i, j) =\n                         A $$ (i, j)\n 2. dim_col (Tensor.mat_of_cols_list (dim_row A) (mat_to_cols_list A)) =\n    dim_col A", "show f2:\"dim_col (mat_of_cols_list (dim_row A) (mat_to_cols_list A)) = dim_col A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (Tensor.mat_of_cols_list (dim_row A) (mat_to_cols_list A)) =\n    dim_col A", "by (simp add: Tensor.mat_of_cols_list_def)"], ["proof (state)\nthis:\n  dim_col (Tensor.mat_of_cols_list (dim_row A) (mat_to_cols_list A)) =\n  dim_col A\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row A; j < dim_col A\\<rbrakk>\n       \\<Longrightarrow> Tensor.mat_of_cols_list (dim_row A)\n                          (mat_to_cols_list A) $$\n                         (i, j) =\n                         A $$ (i, j)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row A; j < dim_col A\\<rbrakk>\n       \\<Longrightarrow> Tensor.mat_of_cols_list (dim_row A)\n                          (mat_to_cols_list A) $$\n                         (i, j) =\n                         A $$ (i, j)", "show \"\\<And>i j. i < dim_row A \\<Longrightarrow> j < dim_col A \\<Longrightarrow> \n    (mat_of_cols_list (dim_row A) (mat_to_cols_list A)) $$ (i, j) = A $$ (i, j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row A; j < dim_col A\\<rbrakk>\n       \\<Longrightarrow> Tensor.mat_of_cols_list (dim_row A)\n                          (mat_to_cols_list A) $$\n                         (i, j) =\n                         A $$ (i, j)", "by (simp add: mat_of_cols_list_def mat_to_cols_list_def)"], ["proof (state)\nthis:\n  \\<lbrakk>?i < dim_row A; ?j < dim_col A\\<rbrakk>\n  \\<Longrightarrow> Tensor.mat_of_cols_list (dim_row A)\n                     (mat_to_cols_list A) $$\n                    (?i, ?j) =\n                    A $$ (?i, ?j)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma plus_mult_cpx [simp]:\n  \"plus_mult 1 (*) 0 (+) (a_inv cpx_rng)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. plus_mult 1 (*) 0 (+) (a_inv cpx_rng)", "apply unfold_locales"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>a b. a * b = b * a\n 2. \\<And>a b c. a * b * c = a * (b * c)\n 3. \\<And>x. 1 * x = x\n 4. \\<And>x. x * 1 = x\n 5. \\<And>a b. a + b = b + a\n 6. \\<And>a b c. a + b + c = a + (b + c)\n 7. \\<And>x. 0 + x = x\n 8. \\<And>x. x + 0 = x\n 9. \\<And>a b c. a * (b + c) = a * b + a * c\n 10. \\<And>a b c. (a + b) * c = a * c + b * c\nA total of 12 subgoals...", "apply (auto intro: cpx_cring_is_field simp: field_simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. x + \\<ominus>\\<^bsub>cpx_rng\\<^esub> x = 0\n 2. \\<And>x. x + \\<ominus>\\<^bsub>cpx_rng\\<^esub> x = 0", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. x + \\<ominus>\\<^bsub>cpx_rng\\<^esub> x = 0\n 2. \\<And>x. x + \\<ominus>\\<^bsub>cpx_rng\\<^esub> x = 0", "show \"\\<And>x. x + \\<ominus>\\<^bsub>cpx_rng\\<^esub> x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. x + \\<ominus>\\<^bsub>cpx_rng\\<^esub> x = 0", "using group.r_inv[of \"cpx_rng\"] cpx_cring_is_field field_def domain_def cpx_rng_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>Group.group cpx_rng; ?x \\<in> carrier cpx_rng\\<rbrakk>\n  \\<Longrightarrow> ?x \\<otimes>\\<^bsub>cpx_rng\\<^esub>\n                    inv\\<^bsub>cpx_rng\\<^esub> ?x =\n                    \\<one>\\<^bsub>cpx_rng\\<^esub>\n  field cpx_rng\n  field ?R \\<equiv> domain ?R \\<and> field_axioms ?R\n  domain ?R \\<equiv> cring ?R \\<and> domain_axioms ?R\n  cpx_rng \\<equiv>\n  \\<lparr>carrier = UNIV, monoid.mult = (*), one = 1, zero = 0,\n     add = (+)\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>x. x + \\<ominus>\\<^bsub>cpx_rng\\<^esub> x = 0", "by (metis UNIV_I cring.cring_simprules(17) ordered_semiring_record_simps(1) \n        ordered_semiring_record_simps(11) ordered_semiring_record_simps(12))"], ["proof (state)\nthis:\n  ?x + \\<ominus>\\<^bsub>cpx_rng\\<^esub> ?x = 0\n\ngoal (1 subgoal):\n 1. \\<And>x. x + \\<ominus>\\<^bsub>cpx_rng\\<^esub> x = 0", "show \"\\<And>x. x + \\<ominus>\\<^bsub>cpx_rng\\<^esub> x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. x + \\<ominus>\\<^bsub>cpx_rng\\<^esub> x = 0", "using group.r_inv[of \"cpx_rng\"] cpx_cring_is_field field_def domain_def cpx_rng_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>Group.group cpx_rng; ?x \\<in> carrier cpx_rng\\<rbrakk>\n  \\<Longrightarrow> ?x \\<otimes>\\<^bsub>cpx_rng\\<^esub>\n                    inv\\<^bsub>cpx_rng\\<^esub> ?x =\n                    \\<one>\\<^bsub>cpx_rng\\<^esub>\n  field cpx_rng\n  field ?R \\<equiv> domain ?R \\<and> field_axioms ?R\n  domain ?R \\<equiv> cring ?R \\<and> domain_axioms ?R\n  cpx_rng \\<equiv>\n  \\<lparr>carrier = UNIV, monoid.mult = (*), one = 1, zero = 0,\n     add = (+)\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>x. x + \\<ominus>\\<^bsub>cpx_rng\\<^esub> x = 0", "by (metis UNIV_I cring.cring_simprules(17) ordered_semiring_record_simps(1) \n        ordered_semiring_record_simps(11) ordered_semiring_record_simps(12))"], ["proof (state)\nthis:\n  ?x + \\<ominus>\\<^bsub>cpx_rng\\<^esub> ?x = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma list_to_mat_to_cols_list [simp]:\n  fixes l::\"complex list list\"\n  assumes \"mat nr nc l\"\n  shows \"mat_to_cols_list (mat_of_cols_list nr l) = l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_to_cols_list (Tensor.mat_of_cols_list nr l) = l", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. mat_to_cols_list (Tensor.mat_of_cols_list nr l) = l", "have \"length (mat_to_cols_list (mat_of_cols_list nr l)) = length l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (mat_to_cols_list (Tensor.mat_of_cols_list nr l)) = length l", "by (simp add: mat_of_cols_list_def)"], ["proof (state)\nthis:\n  length (mat_to_cols_list (Tensor.mat_of_cols_list nr l)) = length l\n\ngoal (1 subgoal):\n 1. mat_to_cols_list (Tensor.mat_of_cols_list nr l) = l", "moreover"], ["proof (state)\nthis:\n  length (mat_to_cols_list (Tensor.mat_of_cols_list nr l)) = length l\n\ngoal (1 subgoal):\n 1. mat_to_cols_list (Tensor.mat_of_cols_list nr l) = l", "have f1:\"\\<forall>j<length l. length(l ! j) = mult.row_length l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j<length l. length (l ! j) = mult.row_length l", "using assms plus_mult.row_length_constant plus_mult_cpx"], ["proof (prove)\nusing this:\n  Matrix_Legacy.mat nr nc l\n  \\<lbrakk>plus_mult ?id ?f ?zer ?g ?inver; Matrix_Legacy.mat ?nr ?nc ?A;\n   ?j < length ?A\\<rbrakk>\n  \\<Longrightarrow> length (?A ! ?j) = mult.row_length ?A\n  plus_mult 1 (*) 0 (+) (a_inv cpx_rng)\n\ngoal (1 subgoal):\n 1. \\<forall>j<length l. length (l ! j) = mult.row_length l", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>j<length l. length (l ! j) = mult.row_length l\n\ngoal (1 subgoal):\n 1. mat_to_cols_list (Tensor.mat_of_cols_list nr l) = l", "moreover"], ["proof (state)\nthis:\n  \\<forall>j<length l. length (l ! j) = mult.row_length l\n\ngoal (1 subgoal):\n 1. mat_to_cols_list (Tensor.mat_of_cols_list nr l) = l", "have \"\\<And>j. j<length l \\<longrightarrow> mat_to_cols_list (mat_of_cols_list nr l) ! j = l ! j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < length l \\<longrightarrow>\n       mat_to_cols_list (Tensor.mat_of_cols_list nr l) ! j = l ! j", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < length l \\<Longrightarrow>\n       mat_to_cols_list (Tensor.mat_of_cols_list nr l) ! j = l ! j", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < length l \\<Longrightarrow>\n       mat_to_cols_list (Tensor.mat_of_cols_list nr l) ! j = l ! j", "assume a:\"j < length l\""], ["proof (state)\nthis:\n  j < length l\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < length l \\<Longrightarrow>\n       mat_to_cols_list (Tensor.mat_of_cols_list nr l) ! j = l ! j", "then"], ["proof (chain)\npicking this:\n  j < length l", "have f2:\"length (mat_to_cols_list (mat_of_cols_list nr l) ! j) = length (l ! j)\""], ["proof (prove)\nusing this:\n  j < length l\n\ngoal (1 subgoal):\n 1. length (mat_to_cols_list (Tensor.mat_of_cols_list nr l) ! j) =\n    length (l ! j)", "by (metis col_def mat_def vec_def mat_of_cols_list_def assms dim_col_mat(1) dim_row_mat(1) \nlength_col_mat_to_cols_list nth_mem)"], ["proof (state)\nthis:\n  length (mat_to_cols_list (Tensor.mat_of_cols_list nr l) ! j) =\n  length (l ! j)\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < length l \\<Longrightarrow>\n       mat_to_cols_list (Tensor.mat_of_cols_list nr l) ! j = l ! j", "then"], ["proof (chain)\npicking this:\n  length (mat_to_cols_list (Tensor.mat_of_cols_list nr l) ! j) =\n  length (l ! j)", "have \"\\<forall>i<mult.row_length l. mat_to_cols_list (mat_of_cols_list nr l) ! j ! i = l ! j ! i\""], ["proof (prove)\nusing this:\n  length (mat_to_cols_list (Tensor.mat_of_cols_list nr l) ! j) =\n  length (l ! j)\n\ngoal (1 subgoal):\n 1. \\<forall>i<mult.row_length l.\n       mat_to_cols_list (Tensor.mat_of_cols_list nr l) ! j ! i = l ! j ! i", "using a mat_to_cols_list_def mat_of_cols_list_def f1"], ["proof (prove)\nusing this:\n  length (mat_to_cols_list (Tensor.mat_of_cols_list nr l) ! j) =\n  length (l ! j)\n  j < length l\n  mat_to_cols_list ?A =\n  map (\\<lambda>j. map (\\<lambda>i. ?A $$ (i, j)) [0..<dim_row ?A])\n   [0..<dim_col ?A]\n  Tensor.mat_of_cols_list ?nr ?cs =\n  Matrix.mat ?nr (length ?cs) (\\<lambda>(i, j). ?cs ! j ! i)\n  \\<forall>j<length l. length (l ! j) = mult.row_length l\n\ngoal (1 subgoal):\n 1. \\<forall>i<mult.row_length l.\n       mat_to_cols_list (Tensor.mat_of_cols_list nr l) ! j ! i = l ! j ! i", "by simp"], ["proof (state)\nthis:\n  \\<forall>i<mult.row_length l.\n     mat_to_cols_list (Tensor.mat_of_cols_list nr l) ! j ! i = l ! j ! i\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < length l \\<Longrightarrow>\n       mat_to_cols_list (Tensor.mat_of_cols_list nr l) ! j = l ! j", "thus \"mat_to_cols_list (Tensor.mat_of_cols_list nr l) ! j = l ! j\""], ["proof (prove)\nusing this:\n  \\<forall>i<mult.row_length l.\n     mat_to_cols_list (Tensor.mat_of_cols_list nr l) ! j ! i = l ! j ! i\n\ngoal (1 subgoal):\n 1. mat_to_cols_list (Tensor.mat_of_cols_list nr l) ! j = l ! j", "using f2"], ["proof (prove)\nusing this:\n  \\<forall>i<mult.row_length l.\n     mat_to_cols_list (Tensor.mat_of_cols_list nr l) ! j ! i = l ! j ! i\n  length (mat_to_cols_list (Tensor.mat_of_cols_list nr l) ! j) =\n  length (l ! j)\n\ngoal (1 subgoal):\n 1. mat_to_cols_list (Tensor.mat_of_cols_list nr l) ! j = l ! j", "by(simp add: nth_equalityI a f1)"], ["proof (state)\nthis:\n  mat_to_cols_list (Tensor.mat_of_cols_list nr l) ! j = l ! j\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?j < length l \\<longrightarrow>\n  mat_to_cols_list (Tensor.mat_of_cols_list nr l) ! ?j = l ! ?j\n\ngoal (1 subgoal):\n 1. mat_to_cols_list (Tensor.mat_of_cols_list nr l) = l", "ultimately"], ["proof (chain)\npicking this:\n  length (mat_to_cols_list (Tensor.mat_of_cols_list nr l)) = length l\n  \\<forall>j<length l. length (l ! j) = mult.row_length l\n  ?j < length l \\<longrightarrow>\n  mat_to_cols_list (Tensor.mat_of_cols_list nr l) ! ?j = l ! ?j", "show ?thesis"], ["proof (prove)\nusing this:\n  length (mat_to_cols_list (Tensor.mat_of_cols_list nr l)) = length l\n  \\<forall>j<length l. length (l ! j) = mult.row_length l\n  ?j < length l \\<longrightarrow>\n  mat_to_cols_list (Tensor.mat_of_cols_list nr l) ! ?j = l ! ?j\n\ngoal (1 subgoal):\n 1. mat_to_cols_list (Tensor.mat_of_cols_list nr l) = l", "using nth_equalityI"], ["proof (prove)\nusing this:\n  length (mat_to_cols_list (Tensor.mat_of_cols_list nr l)) = length l\n  \\<forall>j<length l. length (l ! j) = mult.row_length l\n  ?j < length l \\<longrightarrow>\n  mat_to_cols_list (Tensor.mat_of_cols_list nr l) ! ?j = l ! ?j\n  \\<lbrakk>length ?xs = length ?ys;\n   \\<And>i. i < length ?xs \\<Longrightarrow> ?xs ! i = ?ys ! i\\<rbrakk>\n  \\<Longrightarrow> ?xs = ?ys\n\ngoal (1 subgoal):\n 1. mat_to_cols_list (Tensor.mat_of_cols_list nr l) = l", "by metis"], ["proof (state)\nthis:\n  mat_to_cols_list (Tensor.mat_of_cols_list nr l) = l\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma col_mat_of_cols_list [simp]:\n  assumes \"j < length l\"\n  shows \"Matrix.col (mat_of_cols_list (length (l ! j)) l) j = vec_of_list (l ! j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.col (Tensor.mat_of_cols_list (length (l ! j)) l) j =\n    vec_of_list (l ! j)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Matrix.col (Tensor.mat_of_cols_list (length (l ! j)) l) j =\n    vec_of_list (l ! j)", "define u where \"u = Matrix.col (mat_of_cols_list (length (l ! j)) l) j\""], ["proof (state)\nthis:\n  u = Matrix.col (Tensor.mat_of_cols_list (length (l ! j)) l) j\n\ngoal (1 subgoal):\n 1. Matrix.col (Tensor.mat_of_cols_list (length (l ! j)) l) j =\n    vec_of_list (l ! j)", "then"], ["proof (chain)\npicking this:\n  u = Matrix.col (Tensor.mat_of_cols_list (length (l ! j)) l) j", "have \"dim_vec u = dim_vec (vec_of_list (l ! j))\""], ["proof (prove)\nusing this:\n  u = Matrix.col (Tensor.mat_of_cols_list (length (l ! j)) l) j\n\ngoal (1 subgoal):\n 1. dim_vec u = dim_vec (vec_of_list (l ! j))", "by (auto simp: u_def mat_of_cols_list_def Matrix.col_def vec_of_list_def)\n      (metis dim_vec_of_list vec_of_list.abs_eq)"], ["proof (state)\nthis:\n  dim_vec u = dim_vec (vec_of_list (l ! j))\n\ngoal (1 subgoal):\n 1. Matrix.col (Tensor.mat_of_cols_list (length (l ! j)) l) j =\n    vec_of_list (l ! j)", "moreover"], ["proof (state)\nthis:\n  dim_vec u = dim_vec (vec_of_list (l ! j))\n\ngoal (1 subgoal):\n 1. Matrix.col (Tensor.mat_of_cols_list (length (l ! j)) l) j =\n    vec_of_list (l ! j)", "have \"\\<forall>i<length(l ! j). u $ i = vec_of_list (l ! j) $ i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<length (l ! j). u $ i = vec_of_list (l ! j) $ i", "by (simp add: u_def vec_of_list_index mat_of_cols_list_def assms)"], ["proof (state)\nthis:\n  \\<forall>i<length (l ! j). u $ i = vec_of_list (l ! j) $ i\n\ngoal (1 subgoal):\n 1. Matrix.col (Tensor.mat_of_cols_list (length (l ! j)) l) j =\n    vec_of_list (l ! j)", "ultimately"], ["proof (chain)\npicking this:\n  dim_vec u = dim_vec (vec_of_list (l ! j))\n  \\<forall>i<length (l ! j). u $ i = vec_of_list (l ! j) $ i", "show ?thesis"], ["proof (prove)\nusing this:\n  dim_vec u = dim_vec (vec_of_list (l ! j))\n  \\<forall>i<length (l ! j). u $ i = vec_of_list (l ! j) $ i\n\ngoal (1 subgoal):\n 1. Matrix.col (Tensor.mat_of_cols_list (length (l ! j)) l) j =\n    vec_of_list (l ! j)", "by(simp add: vec_eq_iff u_def)"], ["proof (state)\nthis:\n  Matrix.col (Tensor.mat_of_cols_list (length (l ! j)) l) j =\n  vec_of_list (l ! j)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition tensor_mat:: \"[complex Matrix.mat, complex Matrix.mat] \\<Rightarrow> complex Matrix.mat\" (infixl \"\\<Otimes>\" 63) where \n\"tensor_mat A B \\<equiv> \n  mat_of_cols_list (dim_row A * dim_row B) (mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list B))\""], ["", "lemma dim_row_tensor_mat [simp]:\n  \"dim_row (A \\<Otimes> B) = dim_row A * dim_row B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (A \\<Otimes> B) = dim_row A * dim_row B", "by (simp add: mat_of_cols_list_def tensor_mat_def)"], ["", "lemma dim_col_tensor_mat [simp]:\n  \"dim_col (A \\<Otimes> B) = dim_col A * dim_col B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (A \\<Otimes> B) = dim_col A * dim_col B", "using tensor_mat_def mat_of_cols_list_def mult.length_Tensor[of \"1\" \"(*)\"]"], ["proof (prove)\nusing this:\n  ?A \\<Otimes> ?B \\<equiv>\n  Tensor.mat_of_cols_list (dim_row ?A * dim_row ?B)\n   (mult.Tensor (*) (mat_to_cols_list ?A) (mat_to_cols_list ?B))\n  Tensor.mat_of_cols_list ?nr ?cs =\n  Matrix.mat ?nr (length ?cs) (\\<lambda>(i, j). ?cs ! j ! i)\n  Matrix_Tensor.mult (1::?'a1) (*) \\<Longrightarrow>\n  length (mult.Tensor (*) ?M1.0 ?M2.0) = length ?M1.0 * length ?M2.0\n\ngoal (1 subgoal):\n 1. dim_col (A \\<Otimes> B) = dim_col A * dim_col B", "by(simp add: \\<open>\\<And>M2 M1. Matrix_Tensor.mult 1 (*) \\<Longrightarrow> length (mult.Tensor (*) M1 M2) = length M1 * length M2\\<close> mult.intro)"], ["", "lemma index_tensor_mat [simp]:\n  assumes a1:\"dim_row A = rA\" and a2:\"dim_col A = cA\" and a3:\"dim_row B = rB\" and a4:\"dim_col B = cB\"\n    and a5:\"i < rA * rB\" and a6:\"j < cA * cB\" and a7:\"cA > 0\" and a8:\"cB > 0\"\n  shows \"(A \\<Otimes> B) $$ (i,j) = A $$ (i div rB, j div cB) * B $$ (i mod rB, j mod cB)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<Otimes> B) $$ (i, j) =\n    A $$ (i div rB, j div cB) * B $$ (i mod rB, j mod cB)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (A \\<Otimes> B) $$ (i, j) =\n    A $$ (i div rB, j div cB) * B $$ (i mod rB, j mod cB)", "have \"(A \\<Otimes> B) $$ (i,j) = (mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list B)) ! j ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<Otimes> B) $$ (i, j) =\n    mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list B) ! j ! i", "using assms tensor_mat_def mat_of_cols_list_def dim_col_tensor_mat"], ["proof (prove)\nusing this:\n  dim_row A = rA\n  dim_col A = cA\n  dim_row B = rB\n  dim_col B = cB\n  i < rA * rB\n  j < cA * cB\n  0 < cA\n  0 < cB\n  ?A \\<Otimes> ?B \\<equiv>\n  Tensor.mat_of_cols_list (dim_row ?A * dim_row ?B)\n   (mult.Tensor (*) (mat_to_cols_list ?A) (mat_to_cols_list ?B))\n  Tensor.mat_of_cols_list ?nr ?cs =\n  Matrix.mat ?nr (length ?cs) (\\<lambda>(i, j). ?cs ! j ! i)\n  dim_col (?A \\<Otimes> ?B) = dim_col ?A * dim_col ?B\n\ngoal (1 subgoal):\n 1. (A \\<Otimes> B) $$ (i, j) =\n    mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list B) ! j ! i", "by simp"], ["proof (state)\nthis:\n  (A \\<Otimes> B) $$ (i, j) =\n  mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list B) ! j ! i\n\ngoal (1 subgoal):\n 1. (A \\<Otimes> B) $$ (i, j) =\n    A $$ (i div rB, j div cB) * B $$ (i mod rB, j mod cB)", "moreover"], ["proof (state)\nthis:\n  (A \\<Otimes> B) $$ (i, j) =\n  mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list B) ! j ! i\n\ngoal (1 subgoal):\n 1. (A \\<Otimes> B) $$ (i, j) =\n    A $$ (i div rB, j div cB) * B $$ (i mod rB, j mod cB)", "have f:\"i < mult.row_length (mat_to_cols_list A) * mult.row_length (mat_to_cols_list B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < mult.row_length (mat_to_cols_list A) *\n        mult.row_length (mat_to_cols_list B)", "by (simp add: a1 a2 a3 a4 a5 a7 a8)"], ["proof (state)\nthis:\n  i < mult.row_length (mat_to_cols_list A) *\n      mult.row_length (mat_to_cols_list B)\n\ngoal (1 subgoal):\n 1. (A \\<Otimes> B) $$ (i, j) =\n    A $$ (i div rB, j div cB) * B $$ (i mod rB, j mod cB)", "moreover"], ["proof (state)\nthis:\n  i < mult.row_length (mat_to_cols_list A) *\n      mult.row_length (mat_to_cols_list B)\n\ngoal (1 subgoal):\n 1. (A \\<Otimes> B) $$ (i, j) =\n    A $$ (i div rB, j div cB) * B $$ (i mod rB, j mod cB)", "have \"j < length (mat_to_cols_list A) * length (mat_to_cols_list B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < length (mat_to_cols_list A) * length (mat_to_cols_list B)", "by (simp add: a2 a4 a6)"], ["proof (state)\nthis:\n  j < length (mat_to_cols_list A) * length (mat_to_cols_list B)\n\ngoal (1 subgoal):\n 1. (A \\<Otimes> B) $$ (i, j) =\n    A $$ (i div rB, j div cB) * B $$ (i mod rB, j mod cB)", "moreover"], ["proof (state)\nthis:\n  j < length (mat_to_cols_list A) * length (mat_to_cols_list B)\n\ngoal (1 subgoal):\n 1. (A \\<Otimes> B) $$ (i, j) =\n    A $$ (i div rB, j div cB) * B $$ (i mod rB, j mod cB)", "have \"mat (mult.row_length (mat_to_cols_list A)) (length (mat_to_cols_list A)) (mat_to_cols_list A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix_Legacy.mat (mult.row_length (mat_to_cols_list A))\n     (length (mat_to_cols_list A)) (mat_to_cols_list A)", "using a2 a7 mat_to_cols_list_is_mat"], ["proof (prove)\nusing this:\n  dim_col A = cA\n  0 < cA\n  0 < dim_col ?A \\<Longrightarrow>\n  Matrix_Legacy.mat (mult.row_length (mat_to_cols_list ?A))\n   (length (mat_to_cols_list ?A)) (mat_to_cols_list ?A)\n\ngoal (1 subgoal):\n 1. Matrix_Legacy.mat (mult.row_length (mat_to_cols_list A))\n     (length (mat_to_cols_list A)) (mat_to_cols_list A)", "by blast"], ["proof (state)\nthis:\n  Matrix_Legacy.mat (mult.row_length (mat_to_cols_list A))\n   (length (mat_to_cols_list A)) (mat_to_cols_list A)\n\ngoal (1 subgoal):\n 1. (A \\<Otimes> B) $$ (i, j) =\n    A $$ (i div rB, j div cB) * B $$ (i mod rB, j mod cB)", "moreover"], ["proof (state)\nthis:\n  Matrix_Legacy.mat (mult.row_length (mat_to_cols_list A))\n   (length (mat_to_cols_list A)) (mat_to_cols_list A)\n\ngoal (1 subgoal):\n 1. (A \\<Otimes> B) $$ (i, j) =\n    A $$ (i div rB, j div cB) * B $$ (i mod rB, j mod cB)", "have \"mat (mult.row_length (mat_to_cols_list B)) (length (mat_to_cols_list B)) (mat_to_cols_list B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix_Legacy.mat (mult.row_length (mat_to_cols_list B))\n     (length (mat_to_cols_list B)) (mat_to_cols_list B)", "using a4 a8 mat_to_cols_list_is_mat"], ["proof (prove)\nusing this:\n  dim_col B = cB\n  0 < cB\n  0 < dim_col ?A \\<Longrightarrow>\n  Matrix_Legacy.mat (mult.row_length (mat_to_cols_list ?A))\n   (length (mat_to_cols_list ?A)) (mat_to_cols_list ?A)\n\ngoal (1 subgoal):\n 1. Matrix_Legacy.mat (mult.row_length (mat_to_cols_list B))\n     (length (mat_to_cols_list B)) (mat_to_cols_list B)", "by blast"], ["proof (state)\nthis:\n  Matrix_Legacy.mat (mult.row_length (mat_to_cols_list B))\n   (length (mat_to_cols_list B)) (mat_to_cols_list B)\n\ngoal (1 subgoal):\n 1. (A \\<Otimes> B) $$ (i, j) =\n    A $$ (i div rB, j div cB) * B $$ (i mod rB, j mod cB)", "ultimately"], ["proof (chain)\npicking this:\n  (A \\<Otimes> B) $$ (i, j) =\n  mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list B) ! j ! i\n  i < mult.row_length (mat_to_cols_list A) *\n      mult.row_length (mat_to_cols_list B)\n  j < length (mat_to_cols_list A) * length (mat_to_cols_list B)\n  Matrix_Legacy.mat (mult.row_length (mat_to_cols_list A))\n   (length (mat_to_cols_list A)) (mat_to_cols_list A)\n  Matrix_Legacy.mat (mult.row_length (mat_to_cols_list B))\n   (length (mat_to_cols_list B)) (mat_to_cols_list B)", "have \"(A \\<Otimes> B) $$ (i,j) = \n    (mat_to_cols_list A) ! (j div length (mat_to_cols_list B)) ! (i div mult.row_length (mat_to_cols_list B)) \n    * (mat_to_cols_list B) ! (j mod length (mat_to_cols_list B)) ! (i mod mult.row_length (mat_to_cols_list B))\""], ["proof (prove)\nusing this:\n  (A \\<Otimes> B) $$ (i, j) =\n  mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list B) ! j ! i\n  i < mult.row_length (mat_to_cols_list A) *\n      mult.row_length (mat_to_cols_list B)\n  j < length (mat_to_cols_list A) * length (mat_to_cols_list B)\n  Matrix_Legacy.mat (mult.row_length (mat_to_cols_list A))\n   (length (mat_to_cols_list A)) (mat_to_cols_list A)\n  Matrix_Legacy.mat (mult.row_length (mat_to_cols_list B))\n   (length (mat_to_cols_list B)) (mat_to_cols_list B)\n\ngoal (1 subgoal):\n 1. (A \\<Otimes> B) $$ (i, j) =\n    mat_to_cols_list A ! (j div length (mat_to_cols_list B)) !\n    (i div mult.row_length (mat_to_cols_list B)) *\n    mat_to_cols_list B ! (j mod length (mat_to_cols_list B)) !\n    (i mod mult.row_length (mat_to_cols_list B))", "using mult.matrix_Tensor_elements[of \"1\" \"(*)\"]"], ["proof (prove)\nusing this:\n  (A \\<Otimes> B) $$ (i, j) =\n  mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list B) ! j ! i\n  i < mult.row_length (mat_to_cols_list A) *\n      mult.row_length (mat_to_cols_list B)\n  j < length (mat_to_cols_list A) * length (mat_to_cols_list B)\n  Matrix_Legacy.mat (mult.row_length (mat_to_cols_list A))\n   (length (mat_to_cols_list A)) (mat_to_cols_list A)\n  Matrix_Legacy.mat (mult.row_length (mat_to_cols_list B))\n   (length (mat_to_cols_list B)) (mat_to_cols_list B)\n  Matrix_Tensor.mult (1::?'a1) (*) \\<Longrightarrow>\n  \\<forall>i j.\n     (i < mult.row_length ?M1.0 * mult.row_length ?M2.0 \\<and>\n      j < length ?M1.0 * length ?M2.0) \\<and>\n     Matrix_Legacy.mat (mult.row_length ?M1.0) (length ?M1.0) ?M1.0 \\<and>\n     Matrix_Legacy.mat (mult.row_length ?M2.0) (length ?M2.0)\n      ?M2.0 \\<longrightarrow>\n     mult.Tensor (*) ?M1.0 ?M2.0 ! j ! i =\n     ?M1.0 ! (j div length ?M2.0) ! (i div mult.row_length ?M2.0) *\n     ?M2.0 ! (j mod length ?M2.0) ! (i mod mult.row_length ?M2.0)\n\ngoal (1 subgoal):\n 1. (A \\<Otimes> B) $$ (i, j) =\n    mat_to_cols_list A ! (j div length (mat_to_cols_list B)) !\n    (i div mult.row_length (mat_to_cols_list B)) *\n    mat_to_cols_list B ! (j mod length (mat_to_cols_list B)) !\n    (i mod mult.row_length (mat_to_cols_list B))", "by(simp add: \\<open>\\<And>M2 M1. mult 1 (*) \\<Longrightarrow> \\<forall>i j. (i<mult.row_length M1 * mult.row_length M2 \n    \\<and> j<length M1 * length M2) \\<and> mat (mult.row_length M1) (length M1) M1 \\<and> mat (mult.row_length M2) (length M2) M2 \\<longrightarrow> \n    mult.Tensor (*) M1 M2 ! j ! i = M1 ! (j div length M2) ! (i div mult.row_length M2) * M2 ! (j mod length M2) ! (i mod mult.row_length M2)\\<close>  mult.intro)"], ["proof (state)\nthis:\n  (A \\<Otimes> B) $$ (i, j) =\n  mat_to_cols_list A ! (j div length (mat_to_cols_list B)) !\n  (i div mult.row_length (mat_to_cols_list B)) *\n  mat_to_cols_list B ! (j mod length (mat_to_cols_list B)) !\n  (i mod mult.row_length (mat_to_cols_list B))\n\ngoal (1 subgoal):\n 1. (A \\<Otimes> B) $$ (i, j) =\n    A $$ (i div rB, j div cB) * B $$ (i mod rB, j mod cB)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (A \\<Otimes> B) $$ (i, j) =\n  mat_to_cols_list A ! (j div length (mat_to_cols_list B)) !\n  (i div mult.row_length (mat_to_cols_list B)) *\n  mat_to_cols_list B ! (j mod length (mat_to_cols_list B)) !\n  (i mod mult.row_length (mat_to_cols_list B))\n\ngoal (1 subgoal):\n 1. (A \\<Otimes> B) $$ (i, j) =\n    A $$ (i div rB, j div cB) * B $$ (i mod rB, j mod cB)", "using mat_to_cols_list_def"], ["proof (prove)\nusing this:\n  (A \\<Otimes> B) $$ (i, j) =\n  mat_to_cols_list A ! (j div length (mat_to_cols_list B)) !\n  (i div mult.row_length (mat_to_cols_list B)) *\n  mat_to_cols_list B ! (j mod length (mat_to_cols_list B)) !\n  (i mod mult.row_length (mat_to_cols_list B))\n  mat_to_cols_list ?A =\n  map (\\<lambda>j. map (\\<lambda>i. ?A $$ (i, j)) [0..<dim_row ?A])\n   [0..<dim_col ?A]\n\ngoal (1 subgoal):\n 1. (A \\<Otimes> B) $$ (i, j) =\n    A $$ (i div rB, j div cB) * B $$ (i mod rB, j mod cB)", "by (metis a2 a3 a4 a6 f index_mat_of_cols_list length_mat_to_cols_list less_mult_imp_div_less \nless_nat_zero_code mat_to_cols_list_to_mat mult_0_right neq0_conv row_length_mat_to_cols_list \nunique_euclidean_semiring_numeral_class.pos_mod_bound)"], ["proof (state)\nthis:\n  (A \\<Otimes> B) $$ (i, j) =\n  A $$ (i div rB, j div cB) * B $$ (i mod rB, j mod cB)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>To go from @{term Matrix.row} to @{term Matrix_Legacy.row}\\<close>"], ["", "lemma Matrix_row_is_Legacy_row:\n  assumes \"i < dim_row A\"\n  shows \"Matrix.row A i = vec_of_list (row (mat_to_cols_list A) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row A i = vec_of_list (Matrix_Legacy.row (mat_to_cols_list A) i)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ia.\n       ia < dim_vec\n             (vec_of_list\n               (Matrix_Legacy.row (mat_to_cols_list A) i)) \\<Longrightarrow>\n       Matrix.row A i $ ia =\n       vec_of_list (Matrix_Legacy.row (mat_to_cols_list A) i) $ ia\n 2. dim_vec (Matrix.row A i) =\n    dim_vec (vec_of_list (Matrix_Legacy.row (mat_to_cols_list A) i))", "show \"dim_vec (Matrix.row A i) = dim_vec (vec_of_list (row (mat_to_cols_list A) i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (Matrix.row A i) =\n    dim_vec (vec_of_list (Matrix_Legacy.row (mat_to_cols_list A) i))", "using length_mat_to_cols_list Matrix.dim_vec_of_list"], ["proof (prove)\nusing this:\n  length (mat_to_cols_list ?A) = dim_col ?A\n  dim_vec (vec_of_list ?as) = length ?as\n\ngoal (1 subgoal):\n 1. dim_vec (Matrix.row A i) =\n    dim_vec (vec_of_list (Matrix_Legacy.row (mat_to_cols_list A) i))", "by (metis row_def index_row(2) length_map)"], ["proof (state)\nthis:\n  dim_vec (Matrix.row A i) =\n  dim_vec (vec_of_list (Matrix_Legacy.row (mat_to_cols_list A) i))\n\ngoal (1 subgoal):\n 1. \\<And>ia.\n       ia < dim_vec\n             (vec_of_list\n               (Matrix_Legacy.row (mat_to_cols_list A) i)) \\<Longrightarrow>\n       Matrix.row A i $ ia =\n       vec_of_list (Matrix_Legacy.row (mat_to_cols_list A) i) $ ia", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ia.\n       ia < dim_vec\n             (vec_of_list\n               (Matrix_Legacy.row (mat_to_cols_list A) i)) \\<Longrightarrow>\n       Matrix.row A i $ ia =\n       vec_of_list (Matrix_Legacy.row (mat_to_cols_list A) i) $ ia", "show \"\\<And>j. j<dim_vec (vec_of_list (row (mat_to_cols_list A) i)) \\<Longrightarrow> \n              Matrix.row A i $ j = vec_of_list (row (mat_to_cols_list A) i) $ j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < dim_vec\n            (vec_of_list\n              (Matrix_Legacy.row (mat_to_cols_list A) i)) \\<Longrightarrow>\n       Matrix.row A i $ j =\n       vec_of_list (Matrix_Legacy.row (mat_to_cols_list A) i) $ j", "using Matrix.row_def vec_of_list_def mat_to_cols_list_def"], ["proof (prove)\nusing this:\n  Matrix.row ?A ?i = Matrix.vec (dim_col ?A) (\\<lambda>j. ?A $$ (?i, j))\n  vec_of_list \\<equiv>\n  map_fun id Abs_vec (\\<lambda>v. (length v, mk_vec (length v) ((!) v)))\n  mat_to_cols_list ?A =\n  map (\\<lambda>j. map (\\<lambda>i. ?A $$ (i, j)) [0..<dim_row ?A])\n   [0..<dim_col ?A]\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < dim_vec\n            (vec_of_list\n              (Matrix_Legacy.row (mat_to_cols_list A) i)) \\<Longrightarrow>\n       Matrix.row A i $ j =\n       vec_of_list (Matrix_Legacy.row (mat_to_cols_list A) i) $ j", "by(smt row_def assms dim_vec_of_list index_mat_of_cols_list index_row(1) \nlength_mat_to_cols_list length_row_mat_to_cols_list mat_to_cols_list_to_mat nth_map vec_of_list_index)"], ["proof (state)\nthis:\n  ?j < dim_vec\n        (vec_of_list\n          (Matrix_Legacy.row (mat_to_cols_list A) i)) \\<Longrightarrow>\n  Matrix.row A i $ ?j =\n  vec_of_list (Matrix_Legacy.row (mat_to_cols_list A) i) $ ?j\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>To go from @{term Matrix_Legacy.row} to @{term Matrix.row}\\<close>"], ["", "lemma Legacy_row_is_Matrix_row:\n  assumes \"i < mult.row_length A\"\n  shows \"row A i = list_of_vec (Matrix.row (mat_of_cols_list (mult.row_length A) A) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix_Legacy.row A i =\n    list_of_vec\n     (Matrix.row (Tensor.mat_of_cols_list (mult.row_length A) A) i)", "proof (rule nth_equalityI)"], ["proof (state)\ngoal (2 subgoals):\n 1. length (Matrix_Legacy.row A i) =\n    length\n     (list_of_vec\n       (Matrix.row (Tensor.mat_of_cols_list (mult.row_length A) A) i))\n 2. \\<And>ia.\n       ia < length (Matrix_Legacy.row A i) \\<Longrightarrow>\n       Matrix_Legacy.row A i ! ia =\n       list_of_vec\n        (Matrix.row (Tensor.mat_of_cols_list (mult.row_length A) A) i) !\n       ia", "show \"length (row A i) = length (list_of_vec (Matrix.row (mat_of_cols_list (mult.row_length A) A) i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (Matrix_Legacy.row A i) =\n    length\n     (list_of_vec\n       (Matrix.row (Tensor.mat_of_cols_list (mult.row_length A) A) i))", "using row_def length_list_of_vec"], ["proof (prove)\nusing this:\n  Matrix_Legacy.row ?m ?i \\<equiv> map (\\<lambda>w. w ! ?i) ?m\n  length (list_of_vec ?v) = dim_vec ?v\n\ngoal (1 subgoal):\n 1. length (Matrix_Legacy.row A i) =\n    length\n     (list_of_vec\n       (Matrix.row (Tensor.mat_of_cols_list (mult.row_length A) A) i))", "by(metis mat_of_cols_list_def dim_col_mat(1) index_row(2) length_map)"], ["proof (state)\nthis:\n  length (Matrix_Legacy.row A i) =\n  length\n   (list_of_vec\n     (Matrix.row (Tensor.mat_of_cols_list (mult.row_length A) A) i))\n\ngoal (1 subgoal):\n 1. \\<And>ia.\n       ia < length (Matrix_Legacy.row A i) \\<Longrightarrow>\n       Matrix_Legacy.row A i ! ia =\n       list_of_vec\n        (Matrix.row (Tensor.mat_of_cols_list (mult.row_length A) A) i) !\n       ia", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ia.\n       ia < length (Matrix_Legacy.row A i) \\<Longrightarrow>\n       Matrix_Legacy.row A i ! ia =\n       list_of_vec\n        (Matrix.row (Tensor.mat_of_cols_list (mult.row_length A) A) i) !\n       ia", "fix j:: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ia.\n       ia < length (Matrix_Legacy.row A i) \\<Longrightarrow>\n       Matrix_Legacy.row A i ! ia =\n       list_of_vec\n        (Matrix.row (Tensor.mat_of_cols_list (mult.row_length A) A) i) !\n       ia", "assume \"j < length (row A i)\""], ["proof (state)\nthis:\n  j < length (Matrix_Legacy.row A i)\n\ngoal (1 subgoal):\n 1. \\<And>ia.\n       ia < length (Matrix_Legacy.row A i) \\<Longrightarrow>\n       Matrix_Legacy.row A i ! ia =\n       list_of_vec\n        (Matrix.row (Tensor.mat_of_cols_list (mult.row_length A) A) i) !\n       ia", "then"], ["proof (chain)\npicking this:\n  j < length (Matrix_Legacy.row A i)", "show \"row A i ! j = list_of_vec (Matrix.row (mat_of_cols_list (mult.row_length A) A) i) ! j\""], ["proof (prove)\nusing this:\n  j < length (Matrix_Legacy.row A i)\n\ngoal (1 subgoal):\n 1. Matrix_Legacy.row A i ! j =\n    list_of_vec\n     (Matrix.row (Tensor.mat_of_cols_list (mult.row_length A) A) i) !\n    j", "using assms index_mat_of_cols_list"], ["proof (prove)\nusing this:\n  j < length (Matrix_Legacy.row A i)\n  i < mult.row_length A\n  \\<lbrakk>?i < ?nr; ?j < length ?cs\\<rbrakk>\n  \\<Longrightarrow> Tensor.mat_of_cols_list ?nr ?cs $$ (?i, ?j) =\n                    ?cs ! ?j ! ?i\n\ngoal (1 subgoal):\n 1. Matrix_Legacy.row A i ! j =\n    list_of_vec\n     (Matrix.row (Tensor.mat_of_cols_list (mult.row_length A) A) i) !\n    j", "by(metis row_def mat_of_cols_list_def dim_col_mat(1) dim_row_mat(1) index_row(1) length_map list_of_vec_index nth_map)"], ["proof (state)\nthis:\n  Matrix_Legacy.row A i ! j =\n  list_of_vec\n   (Matrix.row (Tensor.mat_of_cols_list (mult.row_length A) A) i) !\n  j\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>To go from @{term Matrix.col} to @{term Matrix_Legacy.col}\\<close>"], ["", "lemma Matrix_col_is_Legacy_col:\n  assumes \"j < dim_col A\"\n  shows \"Matrix.col A j = vec_of_list (col (mat_to_cols_list A) j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.col A j = vec_of_list (Matrix_Legacy.col (mat_to_cols_list A) j)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < dim_vec\n            (vec_of_list\n              (Matrix_Legacy.col (mat_to_cols_list A) j)) \\<Longrightarrow>\n       Matrix.col A j $ i =\n       vec_of_list (Matrix_Legacy.col (mat_to_cols_list A) j) $ i\n 2. dim_vec (Matrix.col A j) =\n    dim_vec (vec_of_list (Matrix_Legacy.col (mat_to_cols_list A) j))", "show \"dim_vec (Matrix.col A j) = dim_vec (vec_of_list (col (mat_to_cols_list A) j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (Matrix.col A j) =\n    dim_vec (vec_of_list (Matrix_Legacy.col (mat_to_cols_list A) j))", "by (simp add: col_def assms mat_to_cols_list_def)"], ["proof (state)\nthis:\n  dim_vec (Matrix.col A j) =\n  dim_vec (vec_of_list (Matrix_Legacy.col (mat_to_cols_list A) j))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < dim_vec\n            (vec_of_list\n              (Matrix_Legacy.col (mat_to_cols_list A) j)) \\<Longrightarrow>\n       Matrix.col A j $ i =\n       vec_of_list (Matrix_Legacy.col (mat_to_cols_list A) j) $ i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < dim_vec\n            (vec_of_list\n              (Matrix_Legacy.col (mat_to_cols_list A) j)) \\<Longrightarrow>\n       Matrix.col A j $ i =\n       vec_of_list (Matrix_Legacy.col (mat_to_cols_list A) j) $ i", "show \"\\<And>i. i < dim_vec (vec_of_list (col (mat_to_cols_list A) j)) \\<Longrightarrow>\n         Matrix.col A j $ i = vec_of_list (col (mat_to_cols_list A) j) $ i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < dim_vec\n            (vec_of_list\n              (Matrix_Legacy.col (mat_to_cols_list A) j)) \\<Longrightarrow>\n       Matrix.col A j $ i =\n       vec_of_list (Matrix_Legacy.col (mat_to_cols_list A) j) $ i", "using mat_to_cols_list_def"], ["proof (prove)\nusing this:\n  mat_to_cols_list ?A =\n  map (\\<lambda>j. map (\\<lambda>i. ?A $$ (i, j)) [0..<dim_row ?A])\n   [0..<dim_col ?A]\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < dim_vec\n            (vec_of_list\n              (Matrix_Legacy.col (mat_to_cols_list A) j)) \\<Longrightarrow>\n       Matrix.col A j $ i =\n       vec_of_list (Matrix_Legacy.col (mat_to_cols_list A) j) $ i", "by (metis col_def assms col_mat_of_cols_list length_col_mat_to_cols_list length_mat_to_cols_list \nmat_to_cols_list_to_mat)"], ["proof (state)\nthis:\n  ?i < dim_vec\n        (vec_of_list\n          (Matrix_Legacy.col (mat_to_cols_list A) j)) \\<Longrightarrow>\n  Matrix.col A j $ ?i =\n  vec_of_list (Matrix_Legacy.col (mat_to_cols_list A) j) $ ?i\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>To go from @{term Matrix_Legacy.col} to @{term Matrix.col}\\<close>"], ["", "lemma Legacy_col_is_Matrix_col:\n  assumes a1:\"j < length A\" and a2:\"length (A ! j) = mult.row_length A\"\n  shows \"col A j = list_of_vec (Matrix.col (mat_of_cols_list (mult.row_length A) A) j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix_Legacy.col A j =\n    list_of_vec\n     (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j)", "proof (rule nth_equalityI)"], ["proof (state)\ngoal (2 subgoals):\n 1. length (Matrix_Legacy.col A j) =\n    length\n     (list_of_vec\n       (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j))\n 2. \\<And>i.\n       i < length (Matrix_Legacy.col A j) \\<Longrightarrow>\n       Matrix_Legacy.col A j ! i =\n       list_of_vec\n        (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j) !\n       i", "have \"length (list_of_vec (Matrix.col (mat_of_cols_list (mult.row_length A) A) j)) = \ndim_vec (Matrix.col (mat_of_cols_list (mult.row_length A) A) j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length\n     (list_of_vec\n       (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j)) =\n    dim_vec (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j)", "using length_list_of_vec"], ["proof (prove)\nusing this:\n  length (list_of_vec ?v) = dim_vec ?v\n\ngoal (1 subgoal):\n 1. length\n     (list_of_vec\n       (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j)) =\n    dim_vec (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j)", "by blast"], ["proof (state)\nthis:\n  length\n   (list_of_vec\n     (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j)) =\n  dim_vec (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j)\n\ngoal (2 subgoals):\n 1. length (Matrix_Legacy.col A j) =\n    length\n     (list_of_vec\n       (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j))\n 2. \\<And>i.\n       i < length (Matrix_Legacy.col A j) \\<Longrightarrow>\n       Matrix_Legacy.col A j ! i =\n       list_of_vec\n        (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j) !\n       i", "also"], ["proof (state)\nthis:\n  length\n   (list_of_vec\n     (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j)) =\n  dim_vec (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j)\n\ngoal (2 subgoals):\n 1. length (Matrix_Legacy.col A j) =\n    length\n     (list_of_vec\n       (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j))\n 2. \\<And>i.\n       i < length (Matrix_Legacy.col A j) \\<Longrightarrow>\n       Matrix_Legacy.col A j ! i =\n       list_of_vec\n        (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j) !\n       i", "have \"\\<dots> = dim_row (mat_of_cols_list (mult.row_length A) A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j) =\n    dim_row (Tensor.mat_of_cols_list (mult.row_length A) A)", "using Matrix.col_def"], ["proof (prove)\nusing this:\n  Matrix.col ?A ?j = Matrix.vec (dim_row ?A) (\\<lambda>i. ?A $$ (i, ?j))\n\ngoal (1 subgoal):\n 1. dim_vec (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j) =\n    dim_row (Tensor.mat_of_cols_list (mult.row_length A) A)", "by simp"], ["proof (state)\nthis:\n  dim_vec (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j) =\n  dim_row (Tensor.mat_of_cols_list (mult.row_length A) A)\n\ngoal (2 subgoals):\n 1. length (Matrix_Legacy.col A j) =\n    length\n     (list_of_vec\n       (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j))\n 2. \\<And>i.\n       i < length (Matrix_Legacy.col A j) \\<Longrightarrow>\n       Matrix_Legacy.col A j ! i =\n       list_of_vec\n        (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j) !\n       i", "also"], ["proof (state)\nthis:\n  dim_vec (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j) =\n  dim_row (Tensor.mat_of_cols_list (mult.row_length A) A)\n\ngoal (2 subgoals):\n 1. length (Matrix_Legacy.col A j) =\n    length\n     (list_of_vec\n       (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j))\n 2. \\<And>i.\n       i < length (Matrix_Legacy.col A j) \\<Longrightarrow>\n       Matrix_Legacy.col A j ! i =\n       list_of_vec\n        (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j) !\n       i", "have f1:\"\\<dots> = mult.row_length A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (Tensor.mat_of_cols_list (mult.row_length A) A) =\n    mult.row_length A", "by (simp add: mat_of_cols_list_def)"], ["proof (state)\nthis:\n  dim_row (Tensor.mat_of_cols_list (mult.row_length A) A) =\n  mult.row_length A\n\ngoal (2 subgoals):\n 1. length (Matrix_Legacy.col A j) =\n    length\n     (list_of_vec\n       (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j))\n 2. \\<And>i.\n       i < length (Matrix_Legacy.col A j) \\<Longrightarrow>\n       Matrix_Legacy.col A j ! i =\n       list_of_vec\n        (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j) !\n       i", "finally"], ["proof (chain)\npicking this:\n  length\n   (list_of_vec\n     (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j)) =\n  mult.row_length A", "show f2:\"length (col A j) = length (list_of_vec (Matrix.col (mat_of_cols_list (mult.row_length A) A) j))\""], ["proof (prove)\nusing this:\n  length\n   (list_of_vec\n     (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j)) =\n  mult.row_length A\n\ngoal (1 subgoal):\n 1. length (Matrix_Legacy.col A j) =\n    length\n     (list_of_vec\n       (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j))", "using a2"], ["proof (prove)\nusing this:\n  length\n   (list_of_vec\n     (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j)) =\n  mult.row_length A\n  length (A ! j) = mult.row_length A\n\ngoal (1 subgoal):\n 1. length (Matrix_Legacy.col A j) =\n    length\n     (list_of_vec\n       (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j))", "by (simp add: col_def)"], ["proof (state)\nthis:\n  length (Matrix_Legacy.col A j) =\n  length\n   (list_of_vec\n     (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (Matrix_Legacy.col A j) \\<Longrightarrow>\n       Matrix_Legacy.col A j ! i =\n       list_of_vec\n        (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j) !\n       i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (Matrix_Legacy.col A j) \\<Longrightarrow>\n       Matrix_Legacy.col A j ! i =\n       list_of_vec\n        (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j) !\n       i", "fix i:: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (Matrix_Legacy.col A j) \\<Longrightarrow>\n       Matrix_Legacy.col A j ! i =\n       list_of_vec\n        (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j) !\n       i", "assume \"i<length (col A j)\""], ["proof (state)\nthis:\n  i < length (Matrix_Legacy.col A j)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (Matrix_Legacy.col A j) \\<Longrightarrow>\n       Matrix_Legacy.col A j ! i =\n       list_of_vec\n        (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j) !\n       i", "then"], ["proof (chain)\npicking this:\n  i < length (Matrix_Legacy.col A j)", "show \"(col A j) ! i = (list_of_vec (Matrix.col (mat_of_cols_list (mult.row_length A) A) j)) ! i\""], ["proof (prove)\nusing this:\n  i < length (Matrix_Legacy.col A j)\n\ngoal (1 subgoal):\n 1. Matrix_Legacy.col A j ! i =\n    list_of_vec\n     (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j) !\n    i", "by (metis col_def a1 a2 col_mat_of_cols_list list_vec)"], ["proof (state)\nthis:\n  Matrix_Legacy.col A j ! i =\n  list_of_vec\n   (Matrix.col (Tensor.mat_of_cols_list (mult.row_length A) A) j) !\n  i\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Link between @{term plus_mult.scalar_product} and @{term Matrix.scalar_prod}\\<close>"], ["", "lemma scalar_prod_is_Matrix_scalar_prod [simp]:\n  fixes u::\"complex list\" and v::\"complex list\"\n  assumes \"length u = length v\"\n  shows \"plus_mult.scalar_product (*) 0 (+) u v = (vec_of_list u) \\<bullet> (vec_of_list v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. plus_mult.scalar_product (*) 0 (+) u v =\n    vec_of_list u \\<bullet> vec_of_list v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. plus_mult.scalar_product (*) 0 (+) u v =\n    vec_of_list u \\<bullet> vec_of_list v", "have f:\"(vec_of_list u) \\<bullet> (vec_of_list v) = (\\<Sum>i=0..<length v. u ! i * v ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_of_list u \\<bullet> vec_of_list v =\n    (\\<Sum>i = 0..<length v. u ! i * v ! i)", "using assms scalar_prod_def[of \"vec_of_list u\" \"vec_of_list v\"] Matrix.dim_vec_of_list[of v] index_vec_of_list"], ["proof (prove)\nusing this:\n  length u = length v\n  vec_of_list u \\<bullet> vec_of_list v \\<equiv>\n  \\<Sum>i = 0..<dim_vec (vec_of_list v).\n     vec_of_list u $ i * vec_of_list v $ i\n  dim_vec (vec_of_list v) = length v\n  ?i < length ?xs \\<Longrightarrow> vec_of_list ?xs $ ?i = ?xs ! ?i\n\ngoal (1 subgoal):\n 1. vec_of_list u \\<bullet> vec_of_list v =\n    (\\<Sum>i = 0..<length v. u ! i * v ! i)", "by (metis (no_types, lifting) atLeastLessThan_iff sum.cong)"], ["proof (state)\nthis:\n  vec_of_list u \\<bullet> vec_of_list v =\n  (\\<Sum>i = 0..<length v. u ! i * v ! i)\n\ngoal (1 subgoal):\n 1. plus_mult.scalar_product (*) 0 (+) u v =\n    vec_of_list u \\<bullet> vec_of_list v", "thus ?thesis"], ["proof (prove)\nusing this:\n  vec_of_list u \\<bullet> vec_of_list v =\n  (\\<Sum>i = 0..<length v. u ! i * v ! i)\n\ngoal (1 subgoal):\n 1. plus_mult.scalar_product (*) 0 (+) u v =\n    vec_of_list u \\<bullet> vec_of_list v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. vec_of_list u \\<bullet> vec_of_list v =\n    (\\<Sum>i = 0..<length v. u ! i * v ! i) \\<Longrightarrow>\n    plus_mult.scalar_product (*) 0 (+) u v =\n    vec_of_list u \\<bullet> vec_of_list v", "have \"plus_mult.scalar_product (*) 0 (+) u v = semiring_0_class.scalar_prod u v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. plus_mult.scalar_product (*) 0 (+) u v =\n    semiring_0_class.scalar_prod u v", "using  plus_mult.scalar_product_def[of 1 \"(*)\" 0 \"(+)\" \"a_inv cpx_rng\" u v]"], ["proof (prove)\nusing this:\n  plus_mult 1 (*) 0 (+) (a_inv cpx_rng) \\<Longrightarrow>\n  plus_mult.scalar_product (*) 0 (+) u v = semiring_0_class.scalar_prod u v\n\ngoal (1 subgoal):\n 1. plus_mult.scalar_product (*) 0 (+) u v =\n    semiring_0_class.scalar_prod u v", "by simp"], ["proof (state)\nthis:\n  plus_mult.scalar_product (*) 0 (+) u v = semiring_0_class.scalar_prod u v\n\ngoal (1 subgoal):\n 1. vec_of_list u \\<bullet> vec_of_list v =\n    (\\<Sum>i = 0..<length v. u ! i * v ! i) \\<Longrightarrow>\n    plus_mult.scalar_product (*) 0 (+) u v =\n    vec_of_list u \\<bullet> vec_of_list v", "also"], ["proof (state)\nthis:\n  plus_mult.scalar_product (*) 0 (+) u v = semiring_0_class.scalar_prod u v\n\ngoal (1 subgoal):\n 1. vec_of_list u \\<bullet> vec_of_list v =\n    (\\<Sum>i = 0..<length v. u ! i * v ! i) \\<Longrightarrow>\n    plus_mult.scalar_product (*) 0 (+) u v =\n    vec_of_list u \\<bullet> vec_of_list v", "have \"\\<dots> = sum_list (map (\\<lambda>(x,y). x * y) (zip u v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semiring_0_class.scalar_prod u v = sum_list (map2 (*) u v)", "by (simp add: scalar_prod)"], ["proof (state)\nthis:\n  semiring_0_class.scalar_prod u v = sum_list (map2 (*) u v)\n\ngoal (1 subgoal):\n 1. vec_of_list u \\<bullet> vec_of_list v =\n    (\\<Sum>i = 0..<length v. u ! i * v ! i) \\<Longrightarrow>\n    plus_mult.scalar_product (*) 0 (+) u v =\n    vec_of_list u \\<bullet> vec_of_list v", "moreover"], ["proof (state)\nthis:\n  semiring_0_class.scalar_prod u v = sum_list (map2 (*) u v)\n\ngoal (1 subgoal):\n 1. vec_of_list u \\<bullet> vec_of_list v =\n    (\\<Sum>i = 0..<length v. u ! i * v ! i) \\<Longrightarrow>\n    plus_mult.scalar_product (*) 0 (+) u v =\n    vec_of_list u \\<bullet> vec_of_list v", "have \"\\<forall>i<length v. (zip u v) ! i = (u ! i, v ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<length v. zip u v ! i = (u ! i, v ! i)", "using assms zip_def"], ["proof (prove)\nusing this:\n  length u = length v\n  zip \\<equiv>\n  \\<lambda>uu uua.\n     rec_list (\\<lambda>xs. [])\n      (\\<lambda>y ys ysa xs.\n          case xs of [] \\<Rightarrow> []\n          | z # zs \\<Rightarrow> (z, y) # ysa zs)\n      uua uu\n\ngoal (1 subgoal):\n 1. \\<forall>i<length v. zip u v ! i = (u ! i, v ! i)", "by simp"], ["proof (state)\nthis:\n  \\<forall>i<length v. zip u v ! i = (u ! i, v ! i)\n\ngoal (1 subgoal):\n 1. vec_of_list u \\<bullet> vec_of_list v =\n    (\\<Sum>i = 0..<length v. u ! i * v ! i) \\<Longrightarrow>\n    plus_mult.scalar_product (*) 0 (+) u v =\n    vec_of_list u \\<bullet> vec_of_list v", "then"], ["proof (chain)\npicking this:\n  \\<forall>i<length v. zip u v ! i = (u ! i, v ! i)", "have \"\\<forall>i<length v. (map (\\<lambda>(x,y). x * y) (zip u v)) ! i = u ! i * v ! i\""], ["proof (prove)\nusing this:\n  \\<forall>i<length v. zip u v ! i = (u ! i, v ! i)\n\ngoal (1 subgoal):\n 1. \\<forall>i<length v. map2 (*) u v ! i = u ! i * v ! i", "by (simp add: assms)"], ["proof (state)\nthis:\n  \\<forall>i<length v. map2 (*) u v ! i = u ! i * v ! i\n\ngoal (1 subgoal):\n 1. vec_of_list u \\<bullet> vec_of_list v =\n    (\\<Sum>i = 0..<length v. u ! i * v ! i) \\<Longrightarrow>\n    plus_mult.scalar_product (*) 0 (+) u v =\n    vec_of_list u \\<bullet> vec_of_list v", "ultimately"], ["proof (chain)\npicking this:\n  plus_mult.scalar_product (*) 0 (+) u v = semiring_0_class.scalar_prod u v\n  semiring_0_class.scalar_prod u v = sum_list (map2 (*) u v)\n  \\<forall>i<length v. map2 (*) u v ! i = u ! i * v ! i", "have \"plus_mult.scalar_product (*) 0 (+) u v = (\\<Sum>i=0..<length v. u ! i * v ! i)\""], ["proof (prove)\nusing this:\n  plus_mult.scalar_product (*) 0 (+) u v = semiring_0_class.scalar_prod u v\n  semiring_0_class.scalar_prod u v = sum_list (map2 (*) u v)\n  \\<forall>i<length v. map2 (*) u v ! i = u ! i * v ! i\n\ngoal (1 subgoal):\n 1. plus_mult.scalar_product (*) 0 (+) u v =\n    (\\<Sum>i = 0..<length v. u ! i * v ! i)", "by(metis (no_types, lifting) assms atLeastLessThan_iff length_map map_fst_zip sum.cong sum_list_sum_nth)"], ["proof (state)\nthis:\n  plus_mult.scalar_product (*) 0 (+) u v =\n  (\\<Sum>i = 0..<length v. u ! i * v ! i)\n\ngoal (1 subgoal):\n 1. vec_of_list u \\<bullet> vec_of_list v =\n    (\\<Sum>i = 0..<length v. u ! i * v ! i) \\<Longrightarrow>\n    plus_mult.scalar_product (*) 0 (+) u v =\n    vec_of_list u \\<bullet> vec_of_list v", "thus ?thesis"], ["proof (prove)\nusing this:\n  plus_mult.scalar_product (*) 0 (+) u v =\n  (\\<Sum>i = 0..<length v. u ! i * v ! i)\n\ngoal (1 subgoal):\n 1. plus_mult.scalar_product (*) 0 (+) u v =\n    vec_of_list u \\<bullet> vec_of_list v", "by (simp add: f)"], ["proof (state)\nthis:\n  plus_mult.scalar_product (*) 0 (+) u v =\n  vec_of_list u \\<bullet> vec_of_list v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  plus_mult.scalar_product (*) 0 (+) u v =\n  vec_of_list u \\<bullet> vec_of_list v\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Link between @{term times} and @{term plus_mult.matrix_mult}\\<close>"], ["", "lemma matrix_mult_to_times_mat:\n  assumes \"dim_col A > 0\" and \"dim_col B > 0\" and \"dim_col (A::complex Matrix.mat) = dim_row B\"\n  shows \"A * B = mat_of_cols_list (dim_row A) (plus_mult.matrix_mult (*) 0 (+) (mat_to_cols_list A) (mat_to_cols_list B))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A * B =\n    Tensor.mat_of_cols_list (dim_row A)\n     (mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n       (mat_to_cols_list B))", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row\n                     (Tensor.mat_of_cols_list (dim_row A)\n                       (mat_mult (mult.row_length (mat_to_cols_list A))\n                         (mat_to_cols_list A) (mat_to_cols_list B)));\n        j < dim_col\n             (Tensor.mat_of_cols_list (dim_row A)\n               (mat_mult (mult.row_length (mat_to_cols_list A))\n                 (mat_to_cols_list A) (mat_to_cols_list B)))\\<rbrakk>\n       \\<Longrightarrow> (A * B) $$ (i, j) =\n                         Tensor.mat_of_cols_list (dim_row A)\n                          (mat_mult (mult.row_length (mat_to_cols_list A))\n                            (mat_to_cols_list A) (mat_to_cols_list B)) $$\n                         (i, j)\n 2. dim_row (A * B) =\n    dim_row\n     (Tensor.mat_of_cols_list (dim_row A)\n       (mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n         (mat_to_cols_list B)))\n 3. dim_col (A * B) =\n    dim_col\n     (Tensor.mat_of_cols_list (dim_row A)\n       (mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n         (mat_to_cols_list B)))", "define M where \"M = mat_of_cols_list (dim_row A) (plus_mult.matrix_mult (*) 0 (+) (mat_to_cols_list A) (mat_to_cols_list B))\""], ["proof (state)\nthis:\n  M =\n  Tensor.mat_of_cols_list (dim_row A)\n   (mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n     (mat_to_cols_list B))\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row\n                     (Tensor.mat_of_cols_list (dim_row A)\n                       (mat_mult (mult.row_length (mat_to_cols_list A))\n                         (mat_to_cols_list A) (mat_to_cols_list B)));\n        j < dim_col\n             (Tensor.mat_of_cols_list (dim_row A)\n               (mat_mult (mult.row_length (mat_to_cols_list A))\n                 (mat_to_cols_list A) (mat_to_cols_list B)))\\<rbrakk>\n       \\<Longrightarrow> (A * B) $$ (i, j) =\n                         Tensor.mat_of_cols_list (dim_row A)\n                          (mat_mult (mult.row_length (mat_to_cols_list A))\n                            (mat_to_cols_list A) (mat_to_cols_list B)) $$\n                         (i, j)\n 2. dim_row (A * B) =\n    dim_row\n     (Tensor.mat_of_cols_list (dim_row A)\n       (mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n         (mat_to_cols_list B)))\n 3. dim_col (A * B) =\n    dim_col\n     (Tensor.mat_of_cols_list (dim_row A)\n       (mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n         (mat_to_cols_list B)))", "then"], ["proof (chain)\npicking this:\n  M =\n  Tensor.mat_of_cols_list (dim_row A)\n   (mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n     (mat_to_cols_list B))", "show f1:\"dim_row (A * B) = dim_row M\""], ["proof (prove)\nusing this:\n  M =\n  Tensor.mat_of_cols_list (dim_row A)\n   (mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n     (mat_to_cols_list B))\n\ngoal (1 subgoal):\n 1. dim_row (A * B) = dim_row M", "by (simp add: mat_of_cols_list_def times_mat_def)"], ["proof (state)\nthis:\n  dim_row (A * B) = dim_row M\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row\n                     (Tensor.mat_of_cols_list (dim_row A)\n                       (mat_mult (mult.row_length (mat_to_cols_list A))\n                         (mat_to_cols_list A) (mat_to_cols_list B)));\n        j < dim_col\n             (Tensor.mat_of_cols_list (dim_row A)\n               (mat_mult (mult.row_length (mat_to_cols_list A))\n                 (mat_to_cols_list A) (mat_to_cols_list B)))\\<rbrakk>\n       \\<Longrightarrow> (A * B) $$ (i, j) =\n                         Tensor.mat_of_cols_list (dim_row A)\n                          (mat_mult (mult.row_length (mat_to_cols_list A))\n                            (mat_to_cols_list A) (mat_to_cols_list B)) $$\n                         (i, j)\n 2. dim_col (A * B) =\n    dim_col\n     (Tensor.mat_of_cols_list (dim_row A)\n       (mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n         (mat_to_cols_list B)))", "have \"length (plus_mult.matrix_mult (*) 0 (+) (mat_to_cols_list A) (mat_to_cols_list B)) = dim_col B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length\n     (mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n       (mat_to_cols_list B)) =\n    dim_col B", "by (simp add: mat_multI_def)"], ["proof (state)\nthis:\n  length\n   (mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n     (mat_to_cols_list B)) =\n  dim_col B\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row\n                     (Tensor.mat_of_cols_list (dim_row A)\n                       (mat_mult (mult.row_length (mat_to_cols_list A))\n                         (mat_to_cols_list A) (mat_to_cols_list B)));\n        j < dim_col\n             (Tensor.mat_of_cols_list (dim_row A)\n               (mat_mult (mult.row_length (mat_to_cols_list A))\n                 (mat_to_cols_list A) (mat_to_cols_list B)))\\<rbrakk>\n       \\<Longrightarrow> (A * B) $$ (i, j) =\n                         Tensor.mat_of_cols_list (dim_row A)\n                          (mat_mult (mult.row_length (mat_to_cols_list A))\n                            (mat_to_cols_list A) (mat_to_cols_list B)) $$\n                         (i, j)\n 2. dim_col (A * B) =\n    dim_col\n     (Tensor.mat_of_cols_list (dim_row A)\n       (mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n         (mat_to_cols_list B)))", "then"], ["proof (chain)\npicking this:\n  length\n   (mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n     (mat_to_cols_list B)) =\n  dim_col B", "show f2:\"dim_col (A * B) = dim_col M\""], ["proof (prove)\nusing this:\n  length\n   (mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n     (mat_to_cols_list B)) =\n  dim_col B\n\ngoal (1 subgoal):\n 1. dim_col (A * B) = dim_col M", "by (simp add: M_def times_mat_def mat_of_cols_list_def)"], ["proof (state)\nthis:\n  dim_col (A * B) = dim_col M\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row\n                     (Tensor.mat_of_cols_list (dim_row A)\n                       (mat_mult (mult.row_length (mat_to_cols_list A))\n                         (mat_to_cols_list A) (mat_to_cols_list B)));\n        j < dim_col\n             (Tensor.mat_of_cols_list (dim_row A)\n               (mat_mult (mult.row_length (mat_to_cols_list A))\n                 (mat_to_cols_list A) (mat_to_cols_list B)))\\<rbrakk>\n       \\<Longrightarrow> (A * B) $$ (i, j) =\n                         Tensor.mat_of_cols_list (dim_row A)\n                          (mat_mult (mult.row_length (mat_to_cols_list A))\n                            (mat_to_cols_list A) (mat_to_cols_list B)) $$\n                         (i, j)", "show \"\\<And>i j. i < dim_row M \\<Longrightarrow> j < dim_col M \\<Longrightarrow> (A * B) $$ (i, j) = M $$ (i, j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row M; j < dim_col M\\<rbrakk>\n       \\<Longrightarrow> (A * B) $$ (i, j) = M $$ (i, j)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row M; j < dim_col M\\<rbrakk>\n       \\<Longrightarrow> (A * B) $$ (i, j) = M $$ (i, j)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row M; j < dim_col M\\<rbrakk>\n       \\<Longrightarrow> (A * B) $$ (i, j) = M $$ (i, j)", "assume a1:\"i < dim_row M\" and a2:\"j < dim_col M\""], ["proof (state)\nthis:\n  i < dim_row M\n  j < dim_col M\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row M; j < dim_col M\\<rbrakk>\n       \\<Longrightarrow> (A * B) $$ (i, j) = M $$ (i, j)", "then"], ["proof (chain)\npicking this:\n  i < dim_row M\n  j < dim_col M", "have \"(A * B) $$ (i,j) = Matrix.row A i \\<bullet> Matrix.col B j\""], ["proof (prove)\nusing this:\n  i < dim_row M\n  j < dim_col M\n\ngoal (1 subgoal):\n 1. (A * B) $$ (i, j) = Matrix.row A i \\<bullet> Matrix.col B j", "using f1 f2"], ["proof (prove)\nusing this:\n  i < dim_row M\n  j < dim_col M\n  dim_row (A * B) = dim_row M\n  dim_col (A * B) = dim_col M\n\ngoal (1 subgoal):\n 1. (A * B) $$ (i, j) = Matrix.row A i \\<bullet> Matrix.col B j", "by simp"], ["proof (state)\nthis:\n  (A * B) $$ (i, j) = Matrix.row A i \\<bullet> Matrix.col B j\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row M; j < dim_col M\\<rbrakk>\n       \\<Longrightarrow> (A * B) $$ (i, j) = M $$ (i, j)", "also"], ["proof (state)\nthis:\n  (A * B) $$ (i, j) = Matrix.row A i \\<bullet> Matrix.col B j\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row M; j < dim_col M\\<rbrakk>\n       \\<Longrightarrow> (A * B) $$ (i, j) = M $$ (i, j)", "have \"\\<dots> = vec_of_list (row (mat_to_cols_list A) i) \\<bullet> vec_of_list (col (mat_to_cols_list B) j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row A i \\<bullet> Matrix.col B j =\n    vec_of_list (Matrix_Legacy.row (mat_to_cols_list A) i) \\<bullet>\n    vec_of_list (Matrix_Legacy.col (mat_to_cols_list B) j)", "using f1 f2 a1 a2"], ["proof (prove)\nusing this:\n  dim_row (A * B) = dim_row M\n  dim_col (A * B) = dim_col M\n  i < dim_row M\n  j < dim_col M\n\ngoal (1 subgoal):\n 1. Matrix.row A i \\<bullet> Matrix.col B j =\n    vec_of_list (Matrix_Legacy.row (mat_to_cols_list A) i) \\<bullet>\n    vec_of_list (Matrix_Legacy.col (mat_to_cols_list B) j)", "by (simp add: Matrix_row_is_Legacy_row Matrix_col_is_Legacy_col)"], ["proof (state)\nthis:\n  Matrix.row A i \\<bullet> Matrix.col B j =\n  vec_of_list (Matrix_Legacy.row (mat_to_cols_list A) i) \\<bullet>\n  vec_of_list (Matrix_Legacy.col (mat_to_cols_list B) j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row M; j < dim_col M\\<rbrakk>\n       \\<Longrightarrow> (A * B) $$ (i, j) = M $$ (i, j)", "also"], ["proof (state)\nthis:\n  Matrix.row A i \\<bullet> Matrix.col B j =\n  vec_of_list (Matrix_Legacy.row (mat_to_cols_list A) i) \\<bullet>\n  vec_of_list (Matrix_Legacy.col (mat_to_cols_list B) j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row M; j < dim_col M\\<rbrakk>\n       \\<Longrightarrow> (A * B) $$ (i, j) = M $$ (i, j)", "have \"\\<dots> = plus_mult.scalar_product (*) 0 (+) (row (mat_to_cols_list A) i) (col (mat_to_cols_list B) j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_of_list (Matrix_Legacy.row (mat_to_cols_list A) i) \\<bullet>\n    vec_of_list (Matrix_Legacy.col (mat_to_cols_list B) j) =\n    plus_mult.scalar_product (*) 0 (+)\n     (Matrix_Legacy.row (mat_to_cols_list A) i)\n     (Matrix_Legacy.col (mat_to_cols_list B) j)", "using a1 a2 assms(3) f1 f2"], ["proof (prove)\nusing this:\n  i < dim_row M\n  j < dim_col M\n  dim_col A = dim_row B\n  dim_row (A * B) = dim_row M\n  dim_col (A * B) = dim_col M\n\ngoal (1 subgoal):\n 1. vec_of_list (Matrix_Legacy.row (mat_to_cols_list A) i) \\<bullet>\n    vec_of_list (Matrix_Legacy.col (mat_to_cols_list B) j) =\n    plus_mult.scalar_product (*) 0 (+)\n     (Matrix_Legacy.row (mat_to_cols_list A) i)\n     (Matrix_Legacy.col (mat_to_cols_list B) j)", "by simp"], ["proof (state)\nthis:\n  vec_of_list (Matrix_Legacy.row (mat_to_cols_list A) i) \\<bullet>\n  vec_of_list (Matrix_Legacy.col (mat_to_cols_list B) j) =\n  plus_mult.scalar_product (*) 0 (+)\n   (Matrix_Legacy.row (mat_to_cols_list A) i)\n   (Matrix_Legacy.col (mat_to_cols_list B) j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row M; j < dim_col M\\<rbrakk>\n       \\<Longrightarrow> (A * B) $$ (i, j) = M $$ (i, j)", "also"], ["proof (state)\nthis:\n  vec_of_list (Matrix_Legacy.row (mat_to_cols_list A) i) \\<bullet>\n  vec_of_list (Matrix_Legacy.col (mat_to_cols_list B) j) =\n  plus_mult.scalar_product (*) 0 (+)\n   (Matrix_Legacy.row (mat_to_cols_list A) i)\n   (Matrix_Legacy.col (mat_to_cols_list B) j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row M; j < dim_col M\\<rbrakk>\n       \\<Longrightarrow> (A * B) $$ (i, j) = M $$ (i, j)", "have \"M $$ (i,j) =  plus_mult.scalar_product (*) 0 (+) (row (mat_to_cols_list A) i) (col (mat_to_cols_list B) j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M $$ (i, j) =\n    plus_mult.scalar_product (*) 0 (+)\n     (Matrix_Legacy.row (mat_to_cols_list A) i)\n     (Matrix_Legacy.col (mat_to_cols_list B) j)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. M $$ (i, j) =\n    plus_mult.scalar_product (*) 0 (+)\n     (Matrix_Legacy.row (mat_to_cols_list A) i)\n     (Matrix_Legacy.col (mat_to_cols_list B) j)", "have \"M $$ (i,j) = (plus_mult.matrix_mult (*) 0 (+) (mat_to_cols_list A) (mat_to_cols_list B)) ! j ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M $$ (i, j) =\n    mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n     (mat_to_cols_list B) !\n    j !\n    i", "using M_def f1 f2 \n\\<open>length (mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A) (mat_to_cols_list B)) = dim_col B\\<close> a1 a2"], ["proof (prove)\nusing this:\n  M =\n  Tensor.mat_of_cols_list (dim_row A)\n   (mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n     (mat_to_cols_list B))\n  dim_row (A * B) = dim_row M\n  dim_col (A * B) = dim_col M\n  length\n   (mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n     (mat_to_cols_list B)) =\n  dim_col B\n  i < dim_row M\n  j < dim_col M\n\ngoal (1 subgoal):\n 1. M $$ (i, j) =\n    mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n     (mat_to_cols_list B) !\n    j !\n    i", "by simp"], ["proof (state)\nthis:\n  M $$ (i, j) =\n  mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n   (mat_to_cols_list B) !\n  j !\n  i\n\ngoal (1 subgoal):\n 1. M $$ (i, j) =\n    plus_mult.scalar_product (*) 0 (+)\n     (Matrix_Legacy.row (mat_to_cols_list A) i)\n     (Matrix_Legacy.col (mat_to_cols_list B) j)", "moreover"], ["proof (state)\nthis:\n  M $$ (i, j) =\n  mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n   (mat_to_cols_list B) !\n  j !\n  i\n\ngoal (1 subgoal):\n 1. M $$ (i, j) =\n    plus_mult.scalar_product (*) 0 (+)\n     (Matrix_Legacy.row (mat_to_cols_list A) i)\n     (Matrix_Legacy.col (mat_to_cols_list B) j)", "have \"mat (mult.row_length (mat_to_cols_list A)) (dim_col A) (mat_to_cols_list A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix_Legacy.mat (mult.row_length (mat_to_cols_list A)) (dim_col A)\n     (mat_to_cols_list A)", "using mat_to_cols_list_is_mat assms(1)"], ["proof (prove)\nusing this:\n  0 < dim_col ?A \\<Longrightarrow>\n  Matrix_Legacy.mat (mult.row_length (mat_to_cols_list ?A))\n   (length (mat_to_cols_list ?A)) (mat_to_cols_list ?A)\n  0 < dim_col A\n\ngoal (1 subgoal):\n 1. Matrix_Legacy.mat (mult.row_length (mat_to_cols_list A)) (dim_col A)\n     (mat_to_cols_list A)", "by simp"], ["proof (state)\nthis:\n  Matrix_Legacy.mat (mult.row_length (mat_to_cols_list A)) (dim_col A)\n   (mat_to_cols_list A)\n\ngoal (1 subgoal):\n 1. M $$ (i, j) =\n    plus_mult.scalar_product (*) 0 (+)\n     (Matrix_Legacy.row (mat_to_cols_list A) i)\n     (Matrix_Legacy.col (mat_to_cols_list B) j)", "moreover"], ["proof (state)\nthis:\n  Matrix_Legacy.mat (mult.row_length (mat_to_cols_list A)) (dim_col A)\n   (mat_to_cols_list A)\n\ngoal (1 subgoal):\n 1. M $$ (i, j) =\n    plus_mult.scalar_product (*) 0 (+)\n     (Matrix_Legacy.row (mat_to_cols_list A) i)\n     (Matrix_Legacy.col (mat_to_cols_list B) j)", "have \"mat (dim_col A) (dim_col B) (mat_to_cols_list B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix_Legacy.mat (dim_col A) (dim_col B) (mat_to_cols_list B)", "using assms(2) assms(3) mat_to_cols_list_is_mat"], ["proof (prove)\nusing this:\n  0 < dim_col B\n  dim_col A = dim_row B\n  0 < dim_col ?A \\<Longrightarrow>\n  Matrix_Legacy.mat (mult.row_length (mat_to_cols_list ?A))\n   (length (mat_to_cols_list ?A)) (mat_to_cols_list ?A)\n\ngoal (1 subgoal):\n 1. Matrix_Legacy.mat (dim_col A) (dim_col B) (mat_to_cols_list B)", "by simp"], ["proof (state)\nthis:\n  Matrix_Legacy.mat (dim_col A) (dim_col B) (mat_to_cols_list B)\n\ngoal (1 subgoal):\n 1. M $$ (i, j) =\n    plus_mult.scalar_product (*) 0 (+)\n     (Matrix_Legacy.row (mat_to_cols_list A) i)\n     (Matrix_Legacy.col (mat_to_cols_list B) j)", "ultimately"], ["proof (chain)\npicking this:\n  M $$ (i, j) =\n  mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n   (mat_to_cols_list B) !\n  j !\n  i\n  Matrix_Legacy.mat (mult.row_length (mat_to_cols_list A)) (dim_col A)\n   (mat_to_cols_list A)\n  Matrix_Legacy.mat (dim_col A) (dim_col B) (mat_to_cols_list B)", "show ?thesis"], ["proof (prove)\nusing this:\n  M $$ (i, j) =\n  mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n   (mat_to_cols_list B) !\n  j !\n  i\n  Matrix_Legacy.mat (mult.row_length (mat_to_cols_list A)) (dim_col A)\n   (mat_to_cols_list A)\n  Matrix_Legacy.mat (dim_col A) (dim_col B) (mat_to_cols_list B)\n\ngoal (1 subgoal):\n 1. M $$ (i, j) =\n    plus_mult.scalar_product (*) 0 (+)\n     (Matrix_Legacy.row (mat_to_cols_list A) i)\n     (Matrix_Legacy.col (mat_to_cols_list B) j)", "using assms(1) a1 a2 row_length_mat_to_cols_list plus_mult.matrix_index[of 1 \"(*)\" 0 \"(+)\"] plus_mult_cpx"], ["proof (prove)\nusing this:\n  M $$ (i, j) =\n  mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n   (mat_to_cols_list B) !\n  j !\n  i\n  Matrix_Legacy.mat (mult.row_length (mat_to_cols_list A)) (dim_col A)\n   (mat_to_cols_list A)\n  Matrix_Legacy.mat (dim_col A) (dim_col B) (mat_to_cols_list B)\n  0 < dim_col A\n  i < dim_row M\n  j < dim_col M\n  0 < dim_col ?A \\<Longrightarrow>\n  mult.row_length (mat_to_cols_list ?A) = dim_row ?A\n  \\<lbrakk>plus_mult (1::?'a1) (*) (0::?'a1) (+) ?inver;\n   Matrix_Legacy.mat (mult.row_length ?m1.0) ?n ?m1.0;\n   Matrix_Legacy.mat ?n ?nc ?m2.0; ?i < mult.row_length ?m1.0;\n   ?j < ?nc\\<rbrakk>\n  \\<Longrightarrow> mat_multI (0::?'a1) (+) (*) (mult.row_length ?m1.0)\n                     ?m1.0 ?m2.0 !\n                    ?j !\n                    ?i =\n                    plus_mult.scalar_product (*) (0::?'a1) (+)\n                     (Matrix_Legacy.row ?m1.0 ?i)\n                     (Matrix_Legacy.col ?m2.0 ?j)\n  plus_mult 1 (*) 0 (+) (a_inv cpx_rng)\n\ngoal (1 subgoal):\n 1. M $$ (i, j) =\n    plus_mult.scalar_product (*) 0 (+)\n     (Matrix_Legacy.row (mat_to_cols_list A) i)\n     (Matrix_Legacy.col (mat_to_cols_list B) j)", "by (smt f1 f2 index_mult_mat(2) index_mult_mat(3))"], ["proof (state)\nthis:\n  M $$ (i, j) =\n  plus_mult.scalar_product (*) 0 (+)\n   (Matrix_Legacy.row (mat_to_cols_list A) i)\n   (Matrix_Legacy.col (mat_to_cols_list B) j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  M $$ (i, j) =\n  plus_mult.scalar_product (*) 0 (+)\n   (Matrix_Legacy.row (mat_to_cols_list A) i)\n   (Matrix_Legacy.col (mat_to_cols_list B) j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row M; j < dim_col M\\<rbrakk>\n       \\<Longrightarrow> (A * B) $$ (i, j) = M $$ (i, j)", "finally"], ["proof (chain)\npicking this:\n  M $$ (i, j) = (A * B) $$ (i, j)", "show \"(A * B) $$ (i, j) = M $$ (i, j)\""], ["proof (prove)\nusing this:\n  M $$ (i, j) = (A * B) $$ (i, j)\n\ngoal (1 subgoal):\n 1. (A * B) $$ (i, j) = M $$ (i, j)", "by simp"], ["proof (state)\nthis:\n  (A * B) $$ (i, j) = M $$ (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?i < dim_row M; ?j < dim_col M\\<rbrakk>\n  \\<Longrightarrow> (A * B) $$ (?i, ?j) = M $$ (?i, ?j)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mat_to_cols_list_times_mat [simp]:\n  assumes \"dim_col A = dim_row B\" and \"dim_col A > 0\"\n  shows \"mat_to_cols_list (A * B) = plus_mult.matrix_mult (*) 0 (+) (mat_to_cols_list A) (mat_to_cols_list B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_to_cols_list (A * B) =\n    mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n     (mat_to_cols_list B)", "proof (rule nth_equalityI)"], ["proof (state)\ngoal (2 subgoals):\n 1. length (mat_to_cols_list (A * B)) =\n    length\n     (mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n       (mat_to_cols_list B))\n 2. \\<And>i.\n       i < length (mat_to_cols_list (A * B)) \\<Longrightarrow>\n       mat_to_cols_list (A * B) ! i =\n       mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n        (mat_to_cols_list B) !\n       i", "define M where \"M = plus_mult.matrix_mult (*) 0 (+) (mat_to_cols_list A) (mat_to_cols_list B)\""], ["proof (state)\nthis:\n  M =\n  mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n   (mat_to_cols_list B)\n\ngoal (2 subgoals):\n 1. length (mat_to_cols_list (A * B)) =\n    length\n     (mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n       (mat_to_cols_list B))\n 2. \\<And>i.\n       i < length (mat_to_cols_list (A * B)) \\<Longrightarrow>\n       mat_to_cols_list (A * B) ! i =\n       mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n        (mat_to_cols_list B) !\n       i", "then"], ["proof (chain)\npicking this:\n  M =\n  mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n   (mat_to_cols_list B)", "show f0:\"length (mat_to_cols_list (A * B)) = length M\""], ["proof (prove)\nusing this:\n  M =\n  mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n   (mat_to_cols_list B)\n\ngoal (1 subgoal):\n 1. length (mat_to_cols_list (A * B)) = length M", "by (simp add: mat_multI_def)"], ["proof (state)\nthis:\n  length (mat_to_cols_list (A * B)) = length M\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (mat_to_cols_list (A * B)) \\<Longrightarrow>\n       mat_to_cols_list (A * B) ! i =\n       mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n        (mat_to_cols_list B) !\n       i", "moreover"], ["proof (state)\nthis:\n  length (mat_to_cols_list (A * B)) = length M\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (mat_to_cols_list (A * B)) \\<Longrightarrow>\n       mat_to_cols_list (A * B) ! i =\n       mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n        (mat_to_cols_list B) !\n       i", "have f1:\"\\<And>j. j<length (mat_to_cols_list (A * B)) \\<longrightarrow> mat_to_cols_list (A * B) ! j = M ! j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < length (mat_to_cols_list (A * B)) \\<longrightarrow>\n       mat_to_cols_list (A * B) ! j = M ! j", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < length (mat_to_cols_list (A * B)) \\<Longrightarrow>\n       mat_to_cols_list (A * B) ! j = M ! j", "fix j:: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < length (mat_to_cols_list (A * B)) \\<Longrightarrow>\n       mat_to_cols_list (A * B) ! j = M ! j", "assume a0:\"j < length (mat_to_cols_list (A * B))\""], ["proof (state)\nthis:\n  j < length (mat_to_cols_list (A * B))\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < length (mat_to_cols_list (A * B)) \\<Longrightarrow>\n       mat_to_cols_list (A * B) ! j = M ! j", "then"], ["proof (chain)\npicking this:\n  j < length (mat_to_cols_list (A * B))", "have \"length (mat_to_cols_list (A * B) ! j) = dim_row A\""], ["proof (prove)\nusing this:\n  j < length (mat_to_cols_list (A * B))\n\ngoal (1 subgoal):\n 1. length (mat_to_cols_list (A * B) ! j) = dim_row A", "by (simp add: mat_to_cols_list_def)"], ["proof (state)\nthis:\n  length (mat_to_cols_list (A * B) ! j) = dim_row A\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < length (mat_to_cols_list (A * B)) \\<Longrightarrow>\n       mat_to_cols_list (A * B) ! j = M ! j", "then"], ["proof (chain)\npicking this:\n  length (mat_to_cols_list (A * B) ! j) = dim_row A", "also"], ["proof (chain)\npicking this:\n  length (mat_to_cols_list (A * B) ! j) = dim_row A", "have f2:\"length (M ! j) = dim_row A\""], ["proof (prove)\nusing this:\n  length (mat_to_cols_list (A * B) ! j) = dim_row A\n\ngoal (1 subgoal):\n 1. length (M ! j) = dim_row A", "using a0 M_def mat_multI_def[of 0 \"(+)\" \"(*)\" \"dim_row A\" \"mat_to_cols_list A\" \"mat_to_cols_list B\"] \n        row_length_mat_to_cols_list assms(2)"], ["proof (prove)\nusing this:\n  length (mat_to_cols_list (A * B) ! j) = dim_row A\n  j < length (mat_to_cols_list (A * B))\n  M =\n  mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n   (mat_to_cols_list B)\n  mat_mult (dim_row A) (mat_to_cols_list A) (mat_to_cols_list B) \\<equiv>\n  map (matT_vec_multI 0 (+) (*)\n        (Matrix_Legacy.transpose (dim_row A) (mat_to_cols_list A)))\n   (mat_to_cols_list B)\n  0 < dim_col ?A \\<Longrightarrow>\n  mult.row_length (mat_to_cols_list ?A) = dim_row ?A\n  0 < dim_col A\n\ngoal (1 subgoal):\n 1. length (M ! j) = dim_row A", "by (metis assms(1) f0 length_greater_0_conv length_map length_mat_to_cols_list \nlist_to_mat_to_cols_list mat_mult mat_to_cols_list_is_mat matrix_mult_to_times_mat)"], ["proof (state)\nthis:\n  length (M ! j) = dim_row A\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < length (mat_to_cols_list (A * B)) \\<Longrightarrow>\n       mat_to_cols_list (A * B) ! j = M ! j", "ultimately"], ["proof (chain)\npicking this:\n  length (mat_to_cols_list (A * B) ! j) = dim_row A\n  length (M ! j) = dim_row A", "have \"length (mat_to_cols_list (A * B) ! j) = length (M ! j)\""], ["proof (prove)\nusing this:\n  length (mat_to_cols_list (A * B) ! j) = dim_row A\n  length (M ! j) = dim_row A\n\ngoal (1 subgoal):\n 1. length (mat_to_cols_list (A * B) ! j) = length (M ! j)", "by simp"], ["proof (state)\nthis:\n  length (mat_to_cols_list (A * B) ! j) = length (M ! j)\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < length (mat_to_cols_list (A * B)) \\<Longrightarrow>\n       mat_to_cols_list (A * B) ! j = M ! j", "moreover"], ["proof (state)\nthis:\n  length (mat_to_cols_list (A * B) ! j) = length (M ! j)\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < length (mat_to_cols_list (A * B)) \\<Longrightarrow>\n       mat_to_cols_list (A * B) ! j = M ! j", "have \"\\<And>i. i<dim_row A \\<longrightarrow> mat_to_cols_list (A * B) ! j ! i = M ! j ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < dim_row A \\<longrightarrow>\n       mat_to_cols_list (A * B) ! j ! i = M ! j ! i", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < dim_row A \\<Longrightarrow>\n       mat_to_cols_list (A * B) ! j ! i = M ! j ! i", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < dim_row A \\<Longrightarrow>\n       mat_to_cols_list (A * B) ! j ! i = M ! j ! i", "assume a1:\"i < dim_row A\""], ["proof (state)\nthis:\n  i < dim_row A\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < dim_row A \\<Longrightarrow>\n       mat_to_cols_list (A * B) ! j ! i = M ! j ! i", "have \"mat (mult.row_length (mat_to_cols_list A)) (dim_col A) (mat_to_cols_list A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix_Legacy.mat (mult.row_length (mat_to_cols_list A)) (dim_col A)\n     (mat_to_cols_list A)", "using mat_to_cols_list_is_mat assms(2)"], ["proof (prove)\nusing this:\n  0 < dim_col ?A \\<Longrightarrow>\n  Matrix_Legacy.mat (mult.row_length (mat_to_cols_list ?A))\n   (length (mat_to_cols_list ?A)) (mat_to_cols_list ?A)\n  0 < dim_col A\n\ngoal (1 subgoal):\n 1. Matrix_Legacy.mat (mult.row_length (mat_to_cols_list A)) (dim_col A)\n     (mat_to_cols_list A)", "by simp"], ["proof (state)\nthis:\n  Matrix_Legacy.mat (mult.row_length (mat_to_cols_list A)) (dim_col A)\n   (mat_to_cols_list A)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < dim_row A \\<Longrightarrow>\n       mat_to_cols_list (A * B) ! j ! i = M ! j ! i", "moreover"], ["proof (state)\nthis:\n  Matrix_Legacy.mat (mult.row_length (mat_to_cols_list A)) (dim_col A)\n   (mat_to_cols_list A)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < dim_row A \\<Longrightarrow>\n       mat_to_cols_list (A * B) ! j ! i = M ! j ! i", "have \"mat (dim_col A) (dim_col B) (mat_to_cols_list B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix_Legacy.mat (dim_col A) (dim_col B) (mat_to_cols_list B)", "using mat_to_cols_list_is_mat assms(1) a0"], ["proof (prove)\nusing this:\n  0 < dim_col ?A \\<Longrightarrow>\n  Matrix_Legacy.mat (mult.row_length (mat_to_cols_list ?A))\n   (length (mat_to_cols_list ?A)) (mat_to_cols_list ?A)\n  dim_col A = dim_row B\n  j < length (mat_to_cols_list (A * B))\n\ngoal (1 subgoal):\n 1. Matrix_Legacy.mat (dim_col A) (dim_col B) (mat_to_cols_list B)", "by simp"], ["proof (state)\nthis:\n  Matrix_Legacy.mat (dim_col A) (dim_col B) (mat_to_cols_list B)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < dim_row A \\<Longrightarrow>\n       mat_to_cols_list (A * B) ! j ! i = M ! j ! i", "ultimately"], ["proof (chain)\npicking this:\n  Matrix_Legacy.mat (mult.row_length (mat_to_cols_list A)) (dim_col A)\n   (mat_to_cols_list A)\n  Matrix_Legacy.mat (dim_col A) (dim_col B) (mat_to_cols_list B)", "have \"M ! j ! i = plus_mult.scalar_product (*) 0 (+) (row (mat_to_cols_list A) i) (col (mat_to_cols_list B) j)\""], ["proof (prove)\nusing this:\n  Matrix_Legacy.mat (mult.row_length (mat_to_cols_list A)) (dim_col A)\n   (mat_to_cols_list A)\n  Matrix_Legacy.mat (dim_col A) (dim_col B) (mat_to_cols_list B)\n\ngoal (1 subgoal):\n 1. M ! j ! i =\n    plus_mult.scalar_product (*) 0 (+)\n     (Matrix_Legacy.row (mat_to_cols_list A) i)\n     (Matrix_Legacy.col (mat_to_cols_list B) j)", "using plus_mult.matrix_index a0 a1 row_length_mat_to_cols_list assms(2) plus_mult_cpx M_def"], ["proof (prove)\nusing this:\n  Matrix_Legacy.mat (mult.row_length (mat_to_cols_list A)) (dim_col A)\n   (mat_to_cols_list A)\n  Matrix_Legacy.mat (dim_col A) (dim_col B) (mat_to_cols_list B)\n  \\<lbrakk>plus_mult ?id ?f ?zer ?g ?inver;\n   Matrix_Legacy.mat (mult.row_length ?m1.0) ?n ?m1.0;\n   Matrix_Legacy.mat ?n ?nc ?m2.0; ?i < mult.row_length ?m1.0;\n   ?j < ?nc\\<rbrakk>\n  \\<Longrightarrow> mat_multI ?zer ?g ?f (mult.row_length ?m1.0) ?m1.0\n                     ?m2.0 !\n                    ?j !\n                    ?i =\n                    plus_mult.scalar_product ?f ?zer ?g\n                     (Matrix_Legacy.row ?m1.0 ?i)\n                     (Matrix_Legacy.col ?m2.0 ?j)\n  j < length (mat_to_cols_list (A * B))\n  i < dim_row A\n  0 < dim_col ?A \\<Longrightarrow>\n  mult.row_length (mat_to_cols_list ?A) = dim_row ?A\n  0 < dim_col A\n  plus_mult 1 (*) 0 (+) (a_inv cpx_rng)\n  M =\n  mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n   (mat_to_cols_list B)\n\ngoal (1 subgoal):\n 1. M ! j ! i =\n    plus_mult.scalar_product (*) 0 (+)\n     (Matrix_Legacy.row (mat_to_cols_list A) i)\n     (Matrix_Legacy.col (mat_to_cols_list B) j)", "by (metis index_mult_mat(3) length_mat_to_cols_list)"], ["proof (state)\nthis:\n  M ! j ! i =\n  plus_mult.scalar_product (*) 0 (+)\n   (Matrix_Legacy.row (mat_to_cols_list A) i)\n   (Matrix_Legacy.col (mat_to_cols_list B) j)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < dim_row A \\<Longrightarrow>\n       mat_to_cols_list (A * B) ! j ! i = M ! j ! i", "also"], ["proof (state)\nthis:\n  M ! j ! i =\n  plus_mult.scalar_product (*) 0 (+)\n   (Matrix_Legacy.row (mat_to_cols_list A) i)\n   (Matrix_Legacy.col (mat_to_cols_list B) j)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < dim_row A \\<Longrightarrow>\n       mat_to_cols_list (A * B) ! j ! i = M ! j ! i", "have \"\\<dots> = vec_of_list (row (mat_to_cols_list A) i) \\<bullet> vec_of_list (col (mat_to_cols_list B) j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. plus_mult.scalar_product (*) 0 (+)\n     (Matrix_Legacy.row (mat_to_cols_list A) i)\n     (Matrix_Legacy.col (mat_to_cols_list B) j) =\n    vec_of_list (Matrix_Legacy.row (mat_to_cols_list A) i) \\<bullet>\n    vec_of_list (Matrix_Legacy.col (mat_to_cols_list B) j)", "using a0 a1 assms(1)"], ["proof (prove)\nusing this:\n  j < length (mat_to_cols_list (A * B))\n  i < dim_row A\n  dim_col A = dim_row B\n\ngoal (1 subgoal):\n 1. plus_mult.scalar_product (*) 0 (+)\n     (Matrix_Legacy.row (mat_to_cols_list A) i)\n     (Matrix_Legacy.col (mat_to_cols_list B) j) =\n    vec_of_list (Matrix_Legacy.row (mat_to_cols_list A) i) \\<bullet>\n    vec_of_list (Matrix_Legacy.col (mat_to_cols_list B) j)", "by simp"], ["proof (state)\nthis:\n  plus_mult.scalar_product (*) 0 (+)\n   (Matrix_Legacy.row (mat_to_cols_list A) i)\n   (Matrix_Legacy.col (mat_to_cols_list B) j) =\n  vec_of_list (Matrix_Legacy.row (mat_to_cols_list A) i) \\<bullet>\n  vec_of_list (Matrix_Legacy.col (mat_to_cols_list B) j)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < dim_row A \\<Longrightarrow>\n       mat_to_cols_list (A * B) ! j ! i = M ! j ! i", "finally"], ["proof (chain)\npicking this:\n  M ! j ! i =\n  vec_of_list (Matrix_Legacy.row (mat_to_cols_list A) i) \\<bullet>\n  vec_of_list (Matrix_Legacy.col (mat_to_cols_list B) j)", "show \"mat_to_cols_list (A * B) ! j ! i = M ! j ! i\""], ["proof (prove)\nusing this:\n  M ! j ! i =\n  vec_of_list (Matrix_Legacy.row (mat_to_cols_list A) i) \\<bullet>\n  vec_of_list (Matrix_Legacy.col (mat_to_cols_list B) j)\n\ngoal (1 subgoal):\n 1. mat_to_cols_list (A * B) ! j ! i = M ! j ! i", "using mat_to_cols_list_def index_mult_mat(1) a0 a1"], ["proof (prove)\nusing this:\n  M ! j ! i =\n  vec_of_list (Matrix_Legacy.row (mat_to_cols_list A) i) \\<bullet>\n  vec_of_list (Matrix_Legacy.col (mat_to_cols_list B) j)\n  mat_to_cols_list ?A =\n  map (\\<lambda>j. map (\\<lambda>i. ?A $$ (i, j)) [0..<dim_row ?A])\n   [0..<dim_col ?A]\n  \\<lbrakk>?i < dim_row ?A; ?j < dim_col ?B\\<rbrakk>\n  \\<Longrightarrow> (?A * ?B) $$ (?i, ?j) =\n                    Matrix.row ?A ?i \\<bullet> Matrix.col ?B ?j\n  j < length (mat_to_cols_list (A * B))\n  i < dim_row A\n\ngoal (1 subgoal):\n 1. mat_to_cols_list (A * B) ! j ! i = M ! j ! i", "by(simp add: Matrix_row_is_Legacy_row Matrix_col_is_Legacy_col)"], ["proof (state)\nthis:\n  mat_to_cols_list (A * B) ! j ! i = M ! j ! i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?i < dim_row A \\<longrightarrow>\n  mat_to_cols_list (A * B) ! j ! ?i = M ! j ! ?i\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < length (mat_to_cols_list (A * B)) \\<Longrightarrow>\n       mat_to_cols_list (A * B) ! j = M ! j", "ultimately"], ["proof (chain)\npicking this:\n  length (mat_to_cols_list (A * B) ! j) = length (M ! j)\n  ?i < dim_row A \\<longrightarrow>\n  mat_to_cols_list (A * B) ! j ! ?i = M ! j ! ?i", "show \"mat_to_cols_list (A * B) ! j = M ! j\""], ["proof (prove)\nusing this:\n  length (mat_to_cols_list (A * B) ! j) = length (M ! j)\n  ?i < dim_row A \\<longrightarrow>\n  mat_to_cols_list (A * B) ! j ! ?i = M ! j ! ?i\n\ngoal (1 subgoal):\n 1. mat_to_cols_list (A * B) ! j = M ! j", "by(simp add: nth_equalityI f2)"], ["proof (state)\nthis:\n  mat_to_cols_list (A * B) ! j = M ! j\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?j < length (mat_to_cols_list (A * B)) \\<longrightarrow>\n  mat_to_cols_list (A * B) ! ?j = M ! ?j\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (mat_to_cols_list (A * B)) \\<Longrightarrow>\n       mat_to_cols_list (A * B) ! i =\n       mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n        (mat_to_cols_list B) !\n       i", "fix i:: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (mat_to_cols_list (A * B)) \\<Longrightarrow>\n       mat_to_cols_list (A * B) ! i =\n       mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n        (mat_to_cols_list B) !\n       i", "assume \"i < length (mat_to_cols_list (A * B))\""], ["proof (state)\nthis:\n  i < length (mat_to_cols_list (A * B))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (mat_to_cols_list (A * B)) \\<Longrightarrow>\n       mat_to_cols_list (A * B) ! i =\n       mat_mult (mult.row_length (mat_to_cols_list A)) (mat_to_cols_list A)\n        (mat_to_cols_list B) !\n       i", "thus \"mat_to_cols_list (A * B) ! i = M ! i\""], ["proof (prove)\nusing this:\n  i < length (mat_to_cols_list (A * B))\n\ngoal (1 subgoal):\n 1. mat_to_cols_list (A * B) ! i = M ! i", "by (simp add: f1)"], ["proof (state)\nthis:\n  mat_to_cols_list (A * B) ! i = M ! i\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open> \nFinally, we prove that the tensor product of complex matrices is distributive over the \nmultiplication of complex matrices. \n\\<close>"], ["", "lemma mult_distr_tensor:\n  assumes a1:\"dim_col A = dim_row B\" and a2:\"dim_col C = dim_row D\" and a3:\"dim_col A > 0\" and \n    a4:\"dim_col B > 0\" and a5:\"dim_col C > 0\" and a6:\"dim_col D > 0\"\n  shows \"(A * B) \\<Otimes> (C * D) = (A \\<Otimes> C) * (B \\<Otimes> D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A * B \\<Otimes> C * D = (A \\<Otimes> C) * (B \\<Otimes> D)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A * B \\<Otimes> C * D = (A \\<Otimes> C) * (B \\<Otimes> D)", "define A' B' C' D' M N where \"A' = mat_to_cols_list A\" and \"B' = mat_to_cols_list B\" and \n    \"C' = mat_to_cols_list C\" and \"D' = mat_to_cols_list D\" and\n    \"M = mat_of_cols_list (dim_row A * dim_row C) (mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list C))\" and\n    \"N = mat_of_cols_list (dim_row B * dim_row D) (mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list D))\""], ["proof (state)\nthis:\n  A' = mat_to_cols_list A\n  B' = mat_to_cols_list B\n  C' = mat_to_cols_list C\n  D' = mat_to_cols_list D\n  M =\n  Tensor.mat_of_cols_list (dim_row A * dim_row C)\n   (mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list C))\n  N =\n  Tensor.mat_of_cols_list (dim_row B * dim_row D)\n   (mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list D))\n\ngoal (1 subgoal):\n 1. A * B \\<Otimes> C * D = (A \\<Otimes> C) * (B \\<Otimes> D)", "then"], ["proof (chain)\npicking this:\n  A' = mat_to_cols_list A\n  B' = mat_to_cols_list B\n  C' = mat_to_cols_list C\n  D' = mat_to_cols_list D\n  M =\n  Tensor.mat_of_cols_list (dim_row A * dim_row C)\n   (mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list C))\n  N =\n  Tensor.mat_of_cols_list (dim_row B * dim_row D)\n   (mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list D))", "have \"(A \\<Otimes> C) * (B \\<Otimes> D) = M * N\""], ["proof (prove)\nusing this:\n  A' = mat_to_cols_list A\n  B' = mat_to_cols_list B\n  C' = mat_to_cols_list C\n  D' = mat_to_cols_list D\n  M =\n  Tensor.mat_of_cols_list (dim_row A * dim_row C)\n   (mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list C))\n  N =\n  Tensor.mat_of_cols_list (dim_row B * dim_row D)\n   (mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list D))\n\ngoal (1 subgoal):\n 1. (A \\<Otimes> C) * (B \\<Otimes> D) = M * N", "by (simp add: tensor_mat_def)"], ["proof (state)\nthis:\n  (A \\<Otimes> C) * (B \\<Otimes> D) = M * N\n\ngoal (1 subgoal):\n 1. A * B \\<Otimes> C * D = (A \\<Otimes> C) * (B \\<Otimes> D)", "also"], ["proof (state)\nthis:\n  (A \\<Otimes> C) * (B \\<Otimes> D) = M * N\n\ngoal (1 subgoal):\n 1. A * B \\<Otimes> C * D = (A \\<Otimes> C) * (B \\<Otimes> D)", "have \"\\<dots> = mat_of_cols_list (dim_row A * dim_row C) (plus_mult.matrix_mult (*) 0 (+) \n  (mat_to_cols_list M) (mat_to_cols_list N))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M * N =\n    Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mat_to_cols_list M)) (mat_to_cols_list M)\n       (mat_to_cols_list N))", "using assms M_def N_def dim_col_tensor_mat dim_row_tensor_mat tensor_mat_def"], ["proof (prove)\nusing this:\n  dim_col A = dim_row B\n  dim_col C = dim_row D\n  0 < dim_col A\n  0 < dim_col B\n  0 < dim_col C\n  0 < dim_col D\n  M =\n  Tensor.mat_of_cols_list (dim_row A * dim_row C)\n   (mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list C))\n  N =\n  Tensor.mat_of_cols_list (dim_row B * dim_row D)\n   (mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list D))\n  dim_col (?A \\<Otimes> ?B) = dim_col ?A * dim_col ?B\n  dim_row (?A \\<Otimes> ?B) = dim_row ?A * dim_row ?B\n  ?A \\<Otimes> ?B \\<equiv>\n  Tensor.mat_of_cols_list (dim_row ?A * dim_row ?B)\n   (mult.Tensor (*) (mat_to_cols_list ?A) (mat_to_cols_list ?B))\n\ngoal (1 subgoal):\n 1. M * N =\n    Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mat_to_cols_list M)) (mat_to_cols_list M)\n       (mat_to_cols_list N))", "by(simp add: matrix_mult_to_times_mat)"], ["proof (state)\nthis:\n  M * N =\n  Tensor.mat_of_cols_list (dim_row A * dim_row C)\n   (mat_mult (mult.row_length (mat_to_cols_list M)) (mat_to_cols_list M)\n     (mat_to_cols_list N))\n\ngoal (1 subgoal):\n 1. A * B \\<Otimes> C * D = (A \\<Otimes> C) * (B \\<Otimes> D)", "also"], ["proof (state)\nthis:\n  M * N =\n  Tensor.mat_of_cols_list (dim_row A * dim_row C)\n   (mat_mult (mult.row_length (mat_to_cols_list M)) (mat_to_cols_list M)\n     (mat_to_cols_list N))\n\ngoal (1 subgoal):\n 1. A * B \\<Otimes> C * D = (A \\<Otimes> C) * (B \\<Otimes> D)", "have f1:\"\\<dots> = mat_of_cols_list (dim_row A * dim_row C) (plus_mult.matrix_mult (*) 0 (+) \n  (mult.Tensor (*) A' C') (mult.Tensor (*) B' D'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mat_to_cols_list M)) (mat_to_cols_list M)\n       (mat_to_cols_list N)) =\n    Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n       (mult.Tensor (*) A' C') (mult.Tensor (*) B' D'))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mat_to_cols_list M)) (mat_to_cols_list M)\n       (mat_to_cols_list N)) =\n    Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n       (mult.Tensor (*) A' C') (mult.Tensor (*) B' D'))", "define M' N' where \"M' = mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list C)\" and\n      \"N' = mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list D)\""], ["proof (state)\nthis:\n  M' = mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list C)\n  N' = mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list D)\n\ngoal (1 subgoal):\n 1. Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mat_to_cols_list M)) (mat_to_cols_list M)\n       (mat_to_cols_list N)) =\n    Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n       (mult.Tensor (*) A' C') (mult.Tensor (*) B' D'))", "then"], ["proof (chain)\npicking this:\n  M' = mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list C)\n  N' = mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list D)", "have \"mat (mult.row_length M') (length M') M'\""], ["proof (prove)\nusing this:\n  M' = mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list C)\n  N' = mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list D)\n\ngoal (1 subgoal):\n 1. Matrix_Legacy.mat (mult.row_length M') (length M') M'", "using M'_def mult.effective_well_defined_Tensor[of 1 \"(*)\"] mat_to_cols_list_is_mat a3 a5"], ["proof (prove)\nusing this:\n  M' = mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list C)\n  N' = mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list D)\n  M' = mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list C)\n  \\<lbrakk>Matrix_Tensor.mult (1::?'a1) (*);\n   Matrix_Legacy.mat (mult.row_length ?M1.0) (length ?M1.0) ?M1.0;\n   Matrix_Legacy.mat (mult.row_length ?M2.0) (length ?M2.0) ?M2.0\\<rbrakk>\n  \\<Longrightarrow> Matrix_Legacy.mat\n                     (mult.row_length ?M1.0 * mult.row_length ?M2.0)\n                     (length ?M1.0 * length ?M2.0)\n                     (mult.Tensor (*) ?M1.0 ?M2.0)\n  0 < dim_col ?A \\<Longrightarrow>\n  Matrix_Legacy.mat (mult.row_length (mat_to_cols_list ?A))\n   (length (mat_to_cols_list ?A)) (mat_to_cols_list ?A)\n  0 < dim_col A\n  0 < dim_col C\n\ngoal (1 subgoal):\n 1. Matrix_Legacy.mat (mult.row_length M') (length M') M'", "by (smt mult.length_Tensor mult.row_length_mat plus_mult_cpx plus_mult_def)"], ["proof (state)\nthis:\n  Matrix_Legacy.mat (mult.row_length M') (length M') M'\n\ngoal (1 subgoal):\n 1. Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mat_to_cols_list M)) (mat_to_cols_list M)\n       (mat_to_cols_list N)) =\n    Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n       (mult.Tensor (*) A' C') (mult.Tensor (*) B' D'))", "moreover"], ["proof (state)\nthis:\n  Matrix_Legacy.mat (mult.row_length M') (length M') M'\n\ngoal (1 subgoal):\n 1. Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mat_to_cols_list M)) (mat_to_cols_list M)\n       (mat_to_cols_list N)) =\n    Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n       (mult.Tensor (*) A' C') (mult.Tensor (*) B' D'))", "have \"mat (mult.row_length N') (length N') N'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix_Legacy.mat (mult.row_length N') (length N') N'", "using N'_def mult.effective_well_defined_Tensor[of 1 \"(*)\"] mat_to_cols_list_is_mat a4 a6"], ["proof (prove)\nusing this:\n  N' = mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list D)\n  \\<lbrakk>Matrix_Tensor.mult (1::?'a1) (*);\n   Matrix_Legacy.mat (mult.row_length ?M1.0) (length ?M1.0) ?M1.0;\n   Matrix_Legacy.mat (mult.row_length ?M2.0) (length ?M2.0) ?M2.0\\<rbrakk>\n  \\<Longrightarrow> Matrix_Legacy.mat\n                     (mult.row_length ?M1.0 * mult.row_length ?M2.0)\n                     (length ?M1.0 * length ?M2.0)\n                     (mult.Tensor (*) ?M1.0 ?M2.0)\n  0 < dim_col ?A \\<Longrightarrow>\n  Matrix_Legacy.mat (mult.row_length (mat_to_cols_list ?A))\n   (length (mat_to_cols_list ?A)) (mat_to_cols_list ?A)\n  0 < dim_col B\n  0 < dim_col D\n\ngoal (1 subgoal):\n 1. Matrix_Legacy.mat (mult.row_length N') (length N') N'", "by (smt mult.length_Tensor mult.row_length_mat plus_mult_cpx plus_mult_def)"], ["proof (state)\nthis:\n  Matrix_Legacy.mat (mult.row_length N') (length N') N'\n\ngoal (1 subgoal):\n 1. Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mat_to_cols_list M)) (mat_to_cols_list M)\n       (mat_to_cols_list N)) =\n    Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n       (mult.Tensor (*) A' C') (mult.Tensor (*) B' D'))", "ultimately"], ["proof (chain)\npicking this:\n  Matrix_Legacy.mat (mult.row_length M') (length M') M'\n  Matrix_Legacy.mat (mult.row_length N') (length N') N'", "show ?thesis"], ["proof (prove)\nusing this:\n  Matrix_Legacy.mat (mult.row_length M') (length M') M'\n  Matrix_Legacy.mat (mult.row_length N') (length N') N'\n\ngoal (1 subgoal):\n 1. Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mat_to_cols_list M)) (mat_to_cols_list M)\n       (mat_to_cols_list N)) =\n    Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n       (mult.Tensor (*) A' C') (mult.Tensor (*) B' D'))", "using list_to_mat_to_cols_list M_def N_def mult.row_length_mat row_length_mat_to_cols_list \n      assms(3) a4 a5 a6 A'_def B'_def C'_def D'_def"], ["proof (prove)\nusing this:\n  Matrix_Legacy.mat (mult.row_length M') (length M') M'\n  Matrix_Legacy.mat (mult.row_length N') (length N') N'\n  Matrix_Legacy.mat ?nr ?nc ?l \\<Longrightarrow>\n  mat_to_cols_list (Tensor.mat_of_cols_list ?nr ?l) = ?l\n  M =\n  Tensor.mat_of_cols_list (dim_row A * dim_row C)\n   (mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list C))\n  N =\n  Tensor.mat_of_cols_list (dim_row B * dim_row D)\n   (mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list D))\n  Matrix_Tensor.mult ?id ?f \\<Longrightarrow>\n  mult.row_length (mult.Tensor ?f ?m1.0 ?m2.0) =\n  mult.row_length ?m1.0 * mult.row_length ?m2.0\n  0 < dim_col ?A \\<Longrightarrow>\n  mult.row_length (mat_to_cols_list ?A) = dim_row ?A\n  0 < dim_col A\n  0 < dim_col B\n  0 < dim_col C\n  0 < dim_col D\n  A' = mat_to_cols_list A\n  B' = mat_to_cols_list B\n  C' = mat_to_cols_list C\n  D' = mat_to_cols_list D\n\ngoal (1 subgoal):\n 1. Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mat_to_cols_list M)) (mat_to_cols_list M)\n       (mat_to_cols_list N)) =\n    Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n       (mult.Tensor (*) A' C') (mult.Tensor (*) B' D'))", "by(metis M'_def N'_def plus_mult_cpx plus_mult_def)"], ["proof (state)\nthis:\n  Tensor.mat_of_cols_list (dim_row A * dim_row C)\n   (mat_mult (mult.row_length (mat_to_cols_list M)) (mat_to_cols_list M)\n     (mat_to_cols_list N)) =\n  Tensor.mat_of_cols_list (dim_row A * dim_row C)\n   (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n     (mult.Tensor (*) A' C') (mult.Tensor (*) B' D'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Tensor.mat_of_cols_list (dim_row A * dim_row C)\n   (mat_mult (mult.row_length (mat_to_cols_list M)) (mat_to_cols_list M)\n     (mat_to_cols_list N)) =\n  Tensor.mat_of_cols_list (dim_row A * dim_row C)\n   (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n     (mult.Tensor (*) A' C') (mult.Tensor (*) B' D'))\n\ngoal (1 subgoal):\n 1. A * B \\<Otimes> C * D = (A \\<Otimes> C) * (B \\<Otimes> D)", "also"], ["proof (state)\nthis:\n  Tensor.mat_of_cols_list (dim_row A * dim_row C)\n   (mat_mult (mult.row_length (mat_to_cols_list M)) (mat_to_cols_list M)\n     (mat_to_cols_list N)) =\n  Tensor.mat_of_cols_list (dim_row A * dim_row C)\n   (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n     (mult.Tensor (*) A' C') (mult.Tensor (*) B' D'))\n\ngoal (1 subgoal):\n 1. A * B \\<Otimes> C * D = (A \\<Otimes> C) * (B \\<Otimes> D)", "have \"\\<dots> = mat_of_cols_list (dim_row A * dim_row C) (mult.Tensor (*)\n    (plus_mult.matrix_mult (*) 0 (+) A' B')\n    (plus_mult.matrix_mult (*) 0 (+) C' D'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n       (mult.Tensor (*) A' C') (mult.Tensor (*) B' D')) =\n    Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mult.Tensor (*) (mat_mult (mult.row_length A') A' B')\n       (mat_mult (mult.row_length C') C' D'))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n       (mult.Tensor (*) A' C') (mult.Tensor (*) B' D')) =\n    Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mult.Tensor (*) (mat_mult (mult.row_length A') A' B')\n       (mat_mult (mult.row_length C') C' D'))", "have f2:\"mat (mult.row_length A') (length A') A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix_Legacy.mat (mult.row_length A') (length A') A'", "using A'_def a3 mat_to_cols_list_is_mat"], ["proof (prove)\nusing this:\n  A' = mat_to_cols_list A\n  0 < dim_col A\n  0 < dim_col ?A \\<Longrightarrow>\n  Matrix_Legacy.mat (mult.row_length (mat_to_cols_list ?A))\n   (length (mat_to_cols_list ?A)) (mat_to_cols_list ?A)\n\ngoal (1 subgoal):\n 1. Matrix_Legacy.mat (mult.row_length A') (length A') A'", "by simp"], ["proof (state)\nthis:\n  Matrix_Legacy.mat (mult.row_length A') (length A') A'\n\ngoal (1 subgoal):\n 1. Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n       (mult.Tensor (*) A' C') (mult.Tensor (*) B' D')) =\n    Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mult.Tensor (*) (mat_mult (mult.row_length A') A' B')\n       (mat_mult (mult.row_length C') C' D'))", "moreover"], ["proof (state)\nthis:\n  Matrix_Legacy.mat (mult.row_length A') (length A') A'\n\ngoal (1 subgoal):\n 1. Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n       (mult.Tensor (*) A' C') (mult.Tensor (*) B' D')) =\n    Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mult.Tensor (*) (mat_mult (mult.row_length A') A' B')\n       (mat_mult (mult.row_length C') C' D'))", "have \"mat (mult.row_length B') (length B') B'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix_Legacy.mat (mult.row_length B') (length B') B'", "using B'_def a4 mat_to_cols_list_is_mat"], ["proof (prove)\nusing this:\n  B' = mat_to_cols_list B\n  0 < dim_col B\n  0 < dim_col ?A \\<Longrightarrow>\n  Matrix_Legacy.mat (mult.row_length (mat_to_cols_list ?A))\n   (length (mat_to_cols_list ?A)) (mat_to_cols_list ?A)\n\ngoal (1 subgoal):\n 1. Matrix_Legacy.mat (mult.row_length B') (length B') B'", "by simp"], ["proof (state)\nthis:\n  Matrix_Legacy.mat (mult.row_length B') (length B') B'\n\ngoal (1 subgoal):\n 1. Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n       (mult.Tensor (*) A' C') (mult.Tensor (*) B' D')) =\n    Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mult.Tensor (*) (mat_mult (mult.row_length A') A' B')\n       (mat_mult (mult.row_length C') C' D'))", "moreover"], ["proof (state)\nthis:\n  Matrix_Legacy.mat (mult.row_length B') (length B') B'\n\ngoal (1 subgoal):\n 1. Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n       (mult.Tensor (*) A' C') (mult.Tensor (*) B' D')) =\n    Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mult.Tensor (*) (mat_mult (mult.row_length A') A' B')\n       (mat_mult (mult.row_length C') C' D'))", "have \"mat (mult.row_length C') (length C') C'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix_Legacy.mat (mult.row_length C') (length C') C'", "using C'_def a5 mat_to_cols_list_is_mat"], ["proof (prove)\nusing this:\n  C' = mat_to_cols_list C\n  0 < dim_col C\n  0 < dim_col ?A \\<Longrightarrow>\n  Matrix_Legacy.mat (mult.row_length (mat_to_cols_list ?A))\n   (length (mat_to_cols_list ?A)) (mat_to_cols_list ?A)\n\ngoal (1 subgoal):\n 1. Matrix_Legacy.mat (mult.row_length C') (length C') C'", "by simp"], ["proof (state)\nthis:\n  Matrix_Legacy.mat (mult.row_length C') (length C') C'\n\ngoal (1 subgoal):\n 1. Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n       (mult.Tensor (*) A' C') (mult.Tensor (*) B' D')) =\n    Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mult.Tensor (*) (mat_mult (mult.row_length A') A' B')\n       (mat_mult (mult.row_length C') C' D'))", "moreover"], ["proof (state)\nthis:\n  Matrix_Legacy.mat (mult.row_length C') (length C') C'\n\ngoal (1 subgoal):\n 1. Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n       (mult.Tensor (*) A' C') (mult.Tensor (*) B' D')) =\n    Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mult.Tensor (*) (mat_mult (mult.row_length A') A' B')\n       (mat_mult (mult.row_length C') C' D'))", "have \"mat (mult.row_length D') (length D') D'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix_Legacy.mat (mult.row_length D') (length D') D'", "using D'_def a6 mat_to_cols_list_is_mat"], ["proof (prove)\nusing this:\n  D' = mat_to_cols_list D\n  0 < dim_col D\n  0 < dim_col ?A \\<Longrightarrow>\n  Matrix_Legacy.mat (mult.row_length (mat_to_cols_list ?A))\n   (length (mat_to_cols_list ?A)) (mat_to_cols_list ?A)\n\ngoal (1 subgoal):\n 1. Matrix_Legacy.mat (mult.row_length D') (length D') D'", "by simp"], ["proof (state)\nthis:\n  Matrix_Legacy.mat (mult.row_length D') (length D') D'\n\ngoal (1 subgoal):\n 1. Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n       (mult.Tensor (*) A' C') (mult.Tensor (*) B' D')) =\n    Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mult.Tensor (*) (mat_mult (mult.row_length A') A' B')\n       (mat_mult (mult.row_length C') C' D'))", "moreover"], ["proof (state)\nthis:\n  Matrix_Legacy.mat (mult.row_length D') (length D') D'\n\ngoal (1 subgoal):\n 1. Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n       (mult.Tensor (*) A' C') (mult.Tensor (*) B' D')) =\n    Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mult.Tensor (*) (mat_mult (mult.row_length A') A' B')\n       (mat_mult (mult.row_length C') C' D'))", "have \"length A' = mult.row_length B'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length A' = mult.row_length B'", "using A'_def B'_def a1 a4"], ["proof (prove)\nusing this:\n  A' = mat_to_cols_list A\n  B' = mat_to_cols_list B\n  dim_col A = dim_row B\n  0 < dim_col B\n\ngoal (1 subgoal):\n 1. length A' = mult.row_length B'", "by simp"], ["proof (state)\nthis:\n  length A' = mult.row_length B'\n\ngoal (1 subgoal):\n 1. Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n       (mult.Tensor (*) A' C') (mult.Tensor (*) B' D')) =\n    Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mult.Tensor (*) (mat_mult (mult.row_length A') A' B')\n       (mat_mult (mult.row_length C') C' D'))", "moreover"], ["proof (state)\nthis:\n  length A' = mult.row_length B'\n\ngoal (1 subgoal):\n 1. Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n       (mult.Tensor (*) A' C') (mult.Tensor (*) B' D')) =\n    Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mult.Tensor (*) (mat_mult (mult.row_length A') A' B')\n       (mat_mult (mult.row_length C') C' D'))", "have \"length C' = mult.row_length D'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length C' = mult.row_length D'", "using C'_def D'_def a2 a6"], ["proof (prove)\nusing this:\n  C' = mat_to_cols_list C\n  D' = mat_to_cols_list D\n  dim_col C = dim_row D\n  0 < dim_col D\n\ngoal (1 subgoal):\n 1. length C' = mult.row_length D'", "by simp"], ["proof (state)\nthis:\n  length C' = mult.row_length D'\n\ngoal (1 subgoal):\n 1. Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n       (mult.Tensor (*) A' C') (mult.Tensor (*) B' D')) =\n    Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mult.Tensor (*) (mat_mult (mult.row_length A') A' B')\n       (mat_mult (mult.row_length C') C' D'))", "moreover"], ["proof (state)\nthis:\n  length C' = mult.row_length D'\n\ngoal (1 subgoal):\n 1. Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n       (mult.Tensor (*) A' C') (mult.Tensor (*) B' D')) =\n    Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mult.Tensor (*) (mat_mult (mult.row_length A') A' B')\n       (mat_mult (mult.row_length C') C' D'))", "have \"A' \\<noteq> [] \\<and> B' \\<noteq> [] \\<and> C' \\<noteq> [] \\<and> D' \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A' \\<noteq> [] \\<and>\n    B' \\<noteq> [] \\<and> C' \\<noteq> [] \\<and> D' \\<noteq> []", "using A'_def B'_def C'_def D'_def a3 a4 a5 a6"], ["proof (prove)\nusing this:\n  A' = mat_to_cols_list A\n  B' = mat_to_cols_list B\n  C' = mat_to_cols_list C\n  D' = mat_to_cols_list D\n  0 < dim_col A\n  0 < dim_col B\n  0 < dim_col C\n  0 < dim_col D\n\ngoal (1 subgoal):\n 1. A' \\<noteq> [] \\<and>\n    B' \\<noteq> [] \\<and> C' \\<noteq> [] \\<and> D' \\<noteq> []", "by simp"], ["proof (state)\nthis:\n  A' \\<noteq> [] \\<and>\n  B' \\<noteq> [] \\<and> C' \\<noteq> [] \\<and> D' \\<noteq> []\n\ngoal (1 subgoal):\n 1. Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n       (mult.Tensor (*) A' C') (mult.Tensor (*) B' D')) =\n    Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mult.Tensor (*) (mat_mult (mult.row_length A') A' B')\n       (mat_mult (mult.row_length C') C' D'))", "ultimately"], ["proof (chain)\npicking this:\n  Matrix_Legacy.mat (mult.row_length A') (length A') A'\n  Matrix_Legacy.mat (mult.row_length B') (length B') B'\n  Matrix_Legacy.mat (mult.row_length C') (length C') C'\n  Matrix_Legacy.mat (mult.row_length D') (length D') D'\n  length A' = mult.row_length B'\n  length C' = mult.row_length D'\n  A' \\<noteq> [] \\<and>\n  B' \\<noteq> [] \\<and> C' \\<noteq> [] \\<and> D' \\<noteq> []", "have \"plus_mult.matrix_match A' B' C' D'\""], ["proof (prove)\nusing this:\n  Matrix_Legacy.mat (mult.row_length A') (length A') A'\n  Matrix_Legacy.mat (mult.row_length B') (length B') B'\n  Matrix_Legacy.mat (mult.row_length C') (length C') C'\n  Matrix_Legacy.mat (mult.row_length D') (length D') D'\n  length A' = mult.row_length B'\n  length C' = mult.row_length D'\n  A' \\<noteq> [] \\<and>\n  B' \\<noteq> [] \\<and> C' \\<noteq> [] \\<and> D' \\<noteq> []\n\ngoal (1 subgoal):\n 1. plus_mult.matrix_match A' B' C' D'", "using plus_mult.matrix_match_def[of 1 \"(*)\" 0 \"(+)\" \"a_inv cpx_rng\"]"], ["proof (prove)\nusing this:\n  Matrix_Legacy.mat (mult.row_length A') (length A') A'\n  Matrix_Legacy.mat (mult.row_length B') (length B') B'\n  Matrix_Legacy.mat (mult.row_length C') (length C') C'\n  Matrix_Legacy.mat (mult.row_length D') (length D') D'\n  length A' = mult.row_length B'\n  length C' = mult.row_length D'\n  A' \\<noteq> [] \\<and>\n  B' \\<noteq> [] \\<and> C' \\<noteq> [] \\<and> D' \\<noteq> []\n  plus_mult 1 (*) 0 (+) (a_inv cpx_rng) \\<Longrightarrow>\n  plus_mult.matrix_match ?A1.0 ?A2.0 ?B1.0 ?B2.0 \\<equiv>\n  Matrix_Legacy.mat (mult.row_length ?A1.0) (length ?A1.0) ?A1.0 \\<and>\n  Matrix_Legacy.mat (mult.row_length ?A2.0) (length ?A2.0) ?A2.0 \\<and>\n  Matrix_Legacy.mat (mult.row_length ?B1.0) (length ?B1.0) ?B1.0 \\<and>\n  Matrix_Legacy.mat (mult.row_length ?B2.0) (length ?B2.0) ?B2.0 \\<and>\n  length ?A1.0 = mult.row_length ?A2.0 \\<and>\n  length ?B1.0 = mult.row_length ?B2.0 \\<and>\n  ?A1.0 \\<noteq> [] \\<and>\n  ?A2.0 \\<noteq> [] \\<and> ?B1.0 \\<noteq> [] \\<and> ?B2.0 \\<noteq> []\n\ngoal (1 subgoal):\n 1. plus_mult.matrix_match A' B' C' D'", "by simp"], ["proof (state)\nthis:\n  plus_mult.matrix_match A' B' C' D'\n\ngoal (1 subgoal):\n 1. Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n       (mult.Tensor (*) A' C') (mult.Tensor (*) B' D')) =\n    Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mult.Tensor (*) (mat_mult (mult.row_length A') A' B')\n       (mat_mult (mult.row_length C') C' D'))", "thus ?thesis"], ["proof (prove)\nusing this:\n  plus_mult.matrix_match A' B' C' D'\n\ngoal (1 subgoal):\n 1. Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n       (mult.Tensor (*) A' C') (mult.Tensor (*) B' D')) =\n    Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mult.Tensor (*) (mat_mult (mult.row_length A') A' B')\n       (mat_mult (mult.row_length C') C' D'))", "using f1 plus_mult.distributivity plus_mult_cpx"], ["proof (prove)\nusing this:\n  plus_mult.matrix_match A' B' C' D'\n  Tensor.mat_of_cols_list (dim_row A * dim_row C)\n   (mat_mult (mult.row_length (mat_to_cols_list M)) (mat_to_cols_list M)\n     (mat_to_cols_list N)) =\n  Tensor.mat_of_cols_list (dim_row A * dim_row C)\n   (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n     (mult.Tensor (*) A' C') (mult.Tensor (*) B' D'))\n  \\<lbrakk>plus_mult ?id ?f ?zer ?g ?inver;\n   plus_mult.matrix_match ?A1.0 ?A2.0 ?B1.0 ?B2.0\\<rbrakk>\n  \\<Longrightarrow> mult.Tensor ?f\n                     (mat_multI ?zer ?g ?f (mult.row_length ?A1.0) ?A1.0\n                       ?A2.0)\n                     (mat_multI ?zer ?g ?f (mult.row_length ?B1.0) ?B1.0\n                       ?B2.0) =\n                    mat_multI ?zer ?g ?f\n                     (mult.row_length (mult.Tensor ?f ?A1.0 ?B1.0))\n                     (mult.Tensor ?f ?A1.0 ?B1.0)\n                     (mult.Tensor ?f ?A2.0 ?B2.0)\n  plus_mult 1 (*) 0 (+) (a_inv cpx_rng)\n\ngoal (1 subgoal):\n 1. Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n       (mult.Tensor (*) A' C') (mult.Tensor (*) B' D')) =\n    Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mult.Tensor (*) (mat_mult (mult.row_length A') A' B')\n       (mat_mult (mult.row_length C') C' D'))", "by fastforce"], ["proof (state)\nthis:\n  Tensor.mat_of_cols_list (dim_row A * dim_row C)\n   (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n     (mult.Tensor (*) A' C') (mult.Tensor (*) B' D')) =\n  Tensor.mat_of_cols_list (dim_row A * dim_row C)\n   (mult.Tensor (*) (mat_mult (mult.row_length A') A' B')\n     (mat_mult (mult.row_length C') C' D'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Tensor.mat_of_cols_list (dim_row A * dim_row C)\n   (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n     (mult.Tensor (*) A' C') (mult.Tensor (*) B' D')) =\n  Tensor.mat_of_cols_list (dim_row A * dim_row C)\n   (mult.Tensor (*) (mat_mult (mult.row_length A') A' B')\n     (mat_mult (mult.row_length C') C' D'))\n\ngoal (1 subgoal):\n 1. A * B \\<Otimes> C * D = (A \\<Otimes> C) * (B \\<Otimes> D)", "also"], ["proof (state)\nthis:\n  Tensor.mat_of_cols_list (dim_row A * dim_row C)\n   (mat_mult (mult.row_length (mult.Tensor (*) A' C'))\n     (mult.Tensor (*) A' C') (mult.Tensor (*) B' D')) =\n  Tensor.mat_of_cols_list (dim_row A * dim_row C)\n   (mult.Tensor (*) (mat_mult (mult.row_length A') A' B')\n     (mat_mult (mult.row_length C') C' D'))\n\ngoal (1 subgoal):\n 1. A * B \\<Otimes> C * D = (A \\<Otimes> C) * (B \\<Otimes> D)", "have \"\\<dots> = mat_of_cols_list (dim_row A * dim_row C) (mult.Tensor (*) \n   (mat_to_cols_list (A * B)) (mat_to_cols_list (C * D)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mult.Tensor (*) (mat_mult (mult.row_length A') A' B')\n       (mat_mult (mult.row_length C') C' D')) =\n    Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mult.Tensor (*) (mat_to_cols_list (A * B)) (mat_to_cols_list (C * D)))", "using A'_def B'_def C'_def D'_def a1 a2 a3 a5"], ["proof (prove)\nusing this:\n  A' = mat_to_cols_list A\n  B' = mat_to_cols_list B\n  C' = mat_to_cols_list C\n  D' = mat_to_cols_list D\n  dim_col A = dim_row B\n  dim_col C = dim_row D\n  0 < dim_col A\n  0 < dim_col C\n\ngoal (1 subgoal):\n 1. Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mult.Tensor (*) (mat_mult (mult.row_length A') A' B')\n       (mat_mult (mult.row_length C') C' D')) =\n    Tensor.mat_of_cols_list (dim_row A * dim_row C)\n     (mult.Tensor (*) (mat_to_cols_list (A * B)) (mat_to_cols_list (C * D)))", "by simp"], ["proof (state)\nthis:\n  Tensor.mat_of_cols_list (dim_row A * dim_row C)\n   (mult.Tensor (*) (mat_mult (mult.row_length A') A' B')\n     (mat_mult (mult.row_length C') C' D')) =\n  Tensor.mat_of_cols_list (dim_row A * dim_row C)\n   (mult.Tensor (*) (mat_to_cols_list (A * B)) (mat_to_cols_list (C * D)))\n\ngoal (1 subgoal):\n 1. A * B \\<Otimes> C * D = (A \\<Otimes> C) * (B \\<Otimes> D)", "finally"], ["proof (chain)\npicking this:\n  (A \\<Otimes> C) * (B \\<Otimes> D) =\n  Tensor.mat_of_cols_list (dim_row A * dim_row C)\n   (mult.Tensor (*) (mat_to_cols_list (A * B)) (mat_to_cols_list (C * D)))", "show ?thesis"], ["proof (prove)\nusing this:\n  (A \\<Otimes> C) * (B \\<Otimes> D) =\n  Tensor.mat_of_cols_list (dim_row A * dim_row C)\n   (mult.Tensor (*) (mat_to_cols_list (A * B)) (mat_to_cols_list (C * D)))\n\ngoal (1 subgoal):\n 1. A * B \\<Otimes> C * D = (A \\<Otimes> C) * (B \\<Otimes> D)", "by(simp add: tensor_mat_def)"], ["proof (state)\nthis:\n  A * B \\<Otimes> C * D = (A \\<Otimes> C) * (B \\<Otimes> D)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tensor_mat_is_assoc:\n  fixes A B C:: \"complex Matrix.mat\"\n  shows \"A \\<Otimes> (B \\<Otimes> C) = (A \\<Otimes> B) \\<Otimes> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<Otimes> (B \\<Otimes> C) = A \\<Otimes> B \\<Otimes> C", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. A \\<Otimes> (B \\<Otimes> C) = A \\<Otimes> B \\<Otimes> C", "define M where d:\"M = mat_of_cols_list (dim_row B * dim_row C) (mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list C))\""], ["proof (state)\nthis:\n  M =\n  Tensor.mat_of_cols_list (dim_row B * dim_row C)\n   (mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list C))\n\ngoal (1 subgoal):\n 1. A \\<Otimes> (B \\<Otimes> C) = A \\<Otimes> B \\<Otimes> C", "then"], ["proof (chain)\npicking this:\n  M =\n  Tensor.mat_of_cols_list (dim_row B * dim_row C)\n   (mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list C))", "have \"B \\<Otimes> C = M\""], ["proof (prove)\nusing this:\n  M =\n  Tensor.mat_of_cols_list (dim_row B * dim_row C)\n   (mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list C))\n\ngoal (1 subgoal):\n 1. B \\<Otimes> C = M", "using tensor_mat_def"], ["proof (prove)\nusing this:\n  M =\n  Tensor.mat_of_cols_list (dim_row B * dim_row C)\n   (mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list C))\n  ?A \\<Otimes> ?B \\<equiv>\n  Tensor.mat_of_cols_list (dim_row ?A * dim_row ?B)\n   (mult.Tensor (*) (mat_to_cols_list ?A) (mat_to_cols_list ?B))\n\ngoal (1 subgoal):\n 1. B \\<Otimes> C = M", "by simp"], ["proof (state)\nthis:\n  B \\<Otimes> C = M\n\ngoal (1 subgoal):\n 1. A \\<Otimes> (B \\<Otimes> C) = A \\<Otimes> B \\<Otimes> C", "moreover"], ["proof (state)\nthis:\n  B \\<Otimes> C = M\n\ngoal (1 subgoal):\n 1. A \\<Otimes> (B \\<Otimes> C) = A \\<Otimes> B \\<Otimes> C", "have \"A \\<Otimes> (B \\<Otimes> C) = mat_of_cols_list (dim_row A * (dim_row B * dim_row C))\n(mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list M))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<Otimes> (B \\<Otimes> C) =\n    Tensor.mat_of_cols_list (dim_row A * (dim_row B * dim_row C))\n     (mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list M))", "using tensor_mat_def d dim_row_tensor_mat"], ["proof (prove)\nusing this:\n  ?A \\<Otimes> ?B \\<equiv>\n  Tensor.mat_of_cols_list (dim_row ?A * dim_row ?B)\n   (mult.Tensor (*) (mat_to_cols_list ?A) (mat_to_cols_list ?B))\n  M =\n  Tensor.mat_of_cols_list (dim_row B * dim_row C)\n   (mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list C))\n  dim_row (?A \\<Otimes> ?B) = dim_row ?A * dim_row ?B\n\ngoal (1 subgoal):\n 1. A \\<Otimes> (B \\<Otimes> C) =\n    Tensor.mat_of_cols_list (dim_row A * (dim_row B * dim_row C))\n     (mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list M))", "by simp"], ["proof (state)\nthis:\n  A \\<Otimes> (B \\<Otimes> C) =\n  Tensor.mat_of_cols_list (dim_row A * (dim_row B * dim_row C))\n   (mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list M))\n\ngoal (1 subgoal):\n 1. A \\<Otimes> (B \\<Otimes> C) = A \\<Otimes> B \\<Otimes> C", "moreover"], ["proof (state)\nthis:\n  A \\<Otimes> (B \\<Otimes> C) =\n  Tensor.mat_of_cols_list (dim_row A * (dim_row B * dim_row C))\n   (mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list M))\n\ngoal (1 subgoal):\n 1. A \\<Otimes> (B \\<Otimes> C) = A \\<Otimes> B \\<Otimes> C", "have \"mat_to_cols_list M = mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_to_cols_list M =\n    mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list C)", "using d list_to_mat_to_cols_list"], ["proof (prove)\nusing this:\n  M =\n  Tensor.mat_of_cols_list (dim_row B * dim_row C)\n   (mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list C))\n  Matrix_Legacy.mat ?nr ?nc ?l \\<Longrightarrow>\n  mat_to_cols_list (Tensor.mat_of_cols_list ?nr ?l) = ?l\n\ngoal (1 subgoal):\n 1. mat_to_cols_list M =\n    mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list C)", "by (smt calculation(1) dim_col_tensor_mat length_greater_0_conv length_mat_to_cols_list mat_to_cols_list_is_mat \nmult.Tensor.simps(1) mult.Tensor_null mult.well_defined_Tensor nat_0_less_mult_iff plus_mult_cpx plus_mult_def row_length_mat_to_cols_list)"], ["proof (state)\nthis:\n  mat_to_cols_list M =\n  mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list C)\n\ngoal (1 subgoal):\n 1. A \\<Otimes> (B \\<Otimes> C) = A \\<Otimes> B \\<Otimes> C", "ultimately"], ["proof (chain)\npicking this:\n  B \\<Otimes> C = M\n  A \\<Otimes> (B \\<Otimes> C) =\n  Tensor.mat_of_cols_list (dim_row A * (dim_row B * dim_row C))\n   (mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list M))\n  mat_to_cols_list M =\n  mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list C)", "have \"A \\<Otimes> (B \\<Otimes> C) = mat_of_cols_list (dim_row A * (dim_row B * dim_row C))\n(mult.Tensor (*) (mat_to_cols_list A) (mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list C)))\""], ["proof (prove)\nusing this:\n  B \\<Otimes> C = M\n  A \\<Otimes> (B \\<Otimes> C) =\n  Tensor.mat_of_cols_list (dim_row A * (dim_row B * dim_row C))\n   (mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list M))\n  mat_to_cols_list M =\n  mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list C)\n\ngoal (1 subgoal):\n 1. A \\<Otimes> (B \\<Otimes> C) =\n    Tensor.mat_of_cols_list (dim_row A * (dim_row B * dim_row C))\n     (mult.Tensor (*) (mat_to_cols_list A)\n       (mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list C)))", "by simp"], ["proof (state)\nthis:\n  A \\<Otimes> (B \\<Otimes> C) =\n  Tensor.mat_of_cols_list (dim_row A * (dim_row B * dim_row C))\n   (mult.Tensor (*) (mat_to_cols_list A)\n     (mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list C)))\n\ngoal (1 subgoal):\n 1. A \\<Otimes> (B \\<Otimes> C) = A \\<Otimes> B \\<Otimes> C", "moreover"], ["proof (state)\nthis:\n  A \\<Otimes> (B \\<Otimes> C) =\n  Tensor.mat_of_cols_list (dim_row A * (dim_row B * dim_row C))\n   (mult.Tensor (*) (mat_to_cols_list A)\n     (mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list C)))\n\ngoal (1 subgoal):\n 1. A \\<Otimes> (B \\<Otimes> C) = A \\<Otimes> B \\<Otimes> C", "have \"\\<dots> = mat_of_cols_list ((dim_row A * dim_row B) * dim_row C) \n(mult.Tensor (*) (mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list B)) (mat_to_cols_list C))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tensor.mat_of_cols_list (dim_row A * (dim_row B * dim_row C))\n     (mult.Tensor (*) (mat_to_cols_list A)\n       (mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list C))) =\n    Tensor.mat_of_cols_list (dim_row A * dim_row B * dim_row C)\n     (mult.Tensor (*)\n       (mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list B))\n       (mat_to_cols_list C))", "using Matrix_Tensor.mult.associativity"], ["proof (prove)\nusing this:\n  \\<lbrakk>Matrix_Tensor.mult ?id ?f;\n   Matrix_Legacy.mat (mult.row_length ?M1.0) (length ?M1.0) ?M1.0 \\<and>\n   Matrix_Legacy.mat (mult.row_length ?M2.0) (length ?M2.0) ?M2.0 \\<and>\n   Matrix_Legacy.mat (mult.row_length ?M3.0) (length ?M3.0) ?M3.0\\<rbrakk>\n  \\<Longrightarrow> mult.Tensor ?f ?M1.0 (mult.Tensor ?f ?M2.0 ?M3.0) =\n                    mult.Tensor ?f (mult.Tensor ?f ?M1.0 ?M2.0) ?M3.0\n\ngoal (1 subgoal):\n 1. Tensor.mat_of_cols_list (dim_row A * (dim_row B * dim_row C))\n     (mult.Tensor (*) (mat_to_cols_list A)\n       (mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list C))) =\n    Tensor.mat_of_cols_list (dim_row A * dim_row B * dim_row C)\n     (mult.Tensor (*)\n       (mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list B))\n       (mat_to_cols_list C))", "by (smt ab_semigroup_mult_class.mult_ac(1) length_greater_0_conv length_mat_to_cols_list\nmat_to_cols_list_is_mat mult.Tensor.simps(1) mult.Tensor_null plus_mult_cpx plus_mult_def)"], ["proof (state)\nthis:\n  Tensor.mat_of_cols_list (dim_row A * (dim_row B * dim_row C))\n   (mult.Tensor (*) (mat_to_cols_list A)\n     (mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list C))) =\n  Tensor.mat_of_cols_list (dim_row A * dim_row B * dim_row C)\n   (mult.Tensor (*)\n     (mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list B))\n     (mat_to_cols_list C))\n\ngoal (1 subgoal):\n 1. A \\<Otimes> (B \\<Otimes> C) = A \\<Otimes> B \\<Otimes> C", "ultimately"], ["proof (chain)\npicking this:\n  A \\<Otimes> (B \\<Otimes> C) =\n  Tensor.mat_of_cols_list (dim_row A * (dim_row B * dim_row C))\n   (mult.Tensor (*) (mat_to_cols_list A)\n     (mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list C)))\n  Tensor.mat_of_cols_list (dim_row A * (dim_row B * dim_row C))\n   (mult.Tensor (*) (mat_to_cols_list A)\n     (mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list C))) =\n  Tensor.mat_of_cols_list (dim_row A * dim_row B * dim_row C)\n   (mult.Tensor (*)\n     (mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list B))\n     (mat_to_cols_list C))", "show ?thesis"], ["proof (prove)\nusing this:\n  A \\<Otimes> (B \\<Otimes> C) =\n  Tensor.mat_of_cols_list (dim_row A * (dim_row B * dim_row C))\n   (mult.Tensor (*) (mat_to_cols_list A)\n     (mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list C)))\n  Tensor.mat_of_cols_list (dim_row A * (dim_row B * dim_row C))\n   (mult.Tensor (*) (mat_to_cols_list A)\n     (mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list C))) =\n  Tensor.mat_of_cols_list (dim_row A * dim_row B * dim_row C)\n   (mult.Tensor (*)\n     (mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list B))\n     (mat_to_cols_list C))\n\ngoal (1 subgoal):\n 1. A \\<Otimes> (B \\<Otimes> C) = A \\<Otimes> B \\<Otimes> C", "using tensor_mat_def"], ["proof (prove)\nusing this:\n  A \\<Otimes> (B \\<Otimes> C) =\n  Tensor.mat_of_cols_list (dim_row A * (dim_row B * dim_row C))\n   (mult.Tensor (*) (mat_to_cols_list A)\n     (mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list C)))\n  Tensor.mat_of_cols_list (dim_row A * (dim_row B * dim_row C))\n   (mult.Tensor (*) (mat_to_cols_list A)\n     (mult.Tensor (*) (mat_to_cols_list B) (mat_to_cols_list C))) =\n  Tensor.mat_of_cols_list (dim_row A * dim_row B * dim_row C)\n   (mult.Tensor (*)\n     (mult.Tensor (*) (mat_to_cols_list A) (mat_to_cols_list B))\n     (mat_to_cols_list C))\n  ?A \\<Otimes> ?B \\<equiv>\n  Tensor.mat_of_cols_list (dim_row ?A * dim_row ?B)\n   (mult.Tensor (*) (mat_to_cols_list ?A) (mat_to_cols_list ?B))\n\ngoal (1 subgoal):\n 1. A \\<Otimes> (B \\<Otimes> C) = A \\<Otimes> B \\<Otimes> C", "by (smt Tensor.mat_of_cols_list_def dim_col_mat(1) dim_col_tensor_mat dim_row_tensor_mat length_0_conv \nlist_to_mat_to_cols_list mat_to_cols_list_is_mat mult.well_defined_Tensor mult_is_0 neq0_conv \nplus_mult_cpx plus_mult_def row_length_mat_to_cols_list)"], ["proof (state)\nthis:\n  A \\<Otimes> (B \\<Otimes> C) = A \\<Otimes> B \\<Otimes> C\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}