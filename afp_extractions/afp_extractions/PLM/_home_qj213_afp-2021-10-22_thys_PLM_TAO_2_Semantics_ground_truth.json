{"file_name": "/home/qj213/afp-2021-10-22/thys/PLM/TAO_2_Semantics.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/PLM", "problem_names": ["lemma T1_1[semantics]:\n    \"(w \\<Turnstile> \\<lparr>F,x\\<rparr>) = (\\<exists> r o\\<^sub>1 . Some r = d\\<^sub>1 F \\<and> Some o\\<^sub>1 = d\\<^sub>\\<kappa> x \\<and> o\\<^sub>1 \\<in> ex1 r w)\"", "lemma T1_2[semantics]:\n    \"(w \\<Turnstile> \\<lparr>F,x,y\\<rparr>) = (\\<exists> r o\\<^sub>1 o\\<^sub>2 . Some r = d\\<^sub>2 F \\<and> Some o\\<^sub>1 = d\\<^sub>\\<kappa> x\n                               \\<and> Some o\\<^sub>2 = d\\<^sub>\\<kappa> y \\<and> (o\\<^sub>1, o\\<^sub>2) \\<in> ex2 r w)\"", "lemma T1_3[semantics]:\n    \"(w \\<Turnstile> \\<lparr>F,x,y,z\\<rparr>) = (\\<exists> r o\\<^sub>1 o\\<^sub>2 o\\<^sub>3 . Some r = d\\<^sub>3 F \\<and> Some o\\<^sub>1 = d\\<^sub>\\<kappa> x\n                                    \\<and> Some o\\<^sub>2 = d\\<^sub>\\<kappa> y \\<and> Some o\\<^sub>3 = d\\<^sub>\\<kappa> z\n                                    \\<and> (o\\<^sub>1, o\\<^sub>2, o\\<^sub>3) \\<in> ex3 r w)\"", "lemma T3[semantics]:\n    \"(w \\<Turnstile> \\<lparr>F\\<rparr>) = (\\<exists> r . Some r = d\\<^sub>0 F \\<and> ex0 r w)\"", "lemma T2[semantics]:\n    \"(w \\<Turnstile> \\<lbrace>x,F\\<rbrace>) = (\\<exists> r o\\<^sub>1 . Some r = d\\<^sub>1 F \\<and> Some o\\<^sub>1 = d\\<^sub>\\<kappa> x \\<and> o\\<^sub>1 \\<in> en r)\"", "lemma T4[semantics]: \"(w \\<Turnstile> \\<^bold>\\<not>\\<psi>) = (\\<not>(w \\<Turnstile> \\<psi>))\"", "lemma T5[semantics]: \"(w \\<Turnstile> \\<psi> \\<^bold>\\<rightarrow> \\<chi>) = (\\<not>(w \\<Turnstile> \\<psi>) \\<or> (w \\<Turnstile> \\<chi>))\"", "lemma T6[semantics]: \"(w \\<Turnstile> \\<^bold>\\<box>\\<psi>) = (\\<forall> v . (v \\<Turnstile> \\<psi>))\"", "lemma T7[semantics]: \"(w \\<Turnstile> \\<^bold>\\<A>\\<psi>) = (dw \\<Turnstile> \\<psi>)\"", "lemma T8_\\<nu>[semantics]: \"(w \\<Turnstile> \\<^bold>\\<forall>\\<^sub>\\<nu> x. \\<psi> x) = (\\<forall> x . (w \\<Turnstile> \\<psi> x))\"", "lemma T8_0[semantics]: \"(w \\<Turnstile> \\<^bold>\\<forall>\\<^sub>0 x. \\<psi> x) = (\\<forall> x . (w \\<Turnstile> \\<psi> x))\"", "lemma T8_1[semantics]: \"(w \\<Turnstile> \\<^bold>\\<forall>\\<^sub>1 x. \\<psi> x) = (\\<forall> x . (w \\<Turnstile> \\<psi> x))\"", "lemma T8_2[semantics]: \"(w \\<Turnstile> \\<^bold>\\<forall>\\<^sub>2 x. \\<psi> x) = (\\<forall> x . (w \\<Turnstile> \\<psi> x))\"", "lemma T8_3[semantics]: \"(w \\<Turnstile> \\<^bold>\\<forall>\\<^sub>3 x. \\<psi> x) = (\\<forall> x . (w \\<Turnstile> \\<psi> x))\"", "lemma T8_\\<o>[semantics]: \"(w \\<Turnstile> \\<^bold>\\<forall>\\<^sub>\\<o> x. \\<psi> x) = (\\<forall> x . (w \\<Turnstile> \\<psi> x))\"", "lemma D3[semantics]:\n    \"d\\<^sub>\\<kappa> (\\<^bold>\\<iota>x . \\<psi> x) = (if (\\<exists>x . (w\\<^sub>0 \\<Turnstile> \\<psi> x) \\<and> (\\<forall> y . (w\\<^sub>0  \\<Turnstile> \\<psi> y) \\<longrightarrow> y = x))\n                      then (Some (THE x . (w\\<^sub>0 \\<Turnstile> \\<psi> x))) else None)\"", "lemma D4_1[semantics]: \"d\\<^sub>1 (\\<^bold>\\<lambda> x . \\<lparr>F, x\\<^sup>P\\<rparr>) = d\\<^sub>1 F\"", "lemma D4_2[semantics]: \"d\\<^sub>2 (\\<^bold>\\<lambda>\\<^sup>2 (\\<lambda> x y . \\<lparr>F, x\\<^sup>P, y\\<^sup>P\\<rparr>)) = d\\<^sub>2 F\"", "lemma D4_3[semantics]: \"d\\<^sub>3 (\\<^bold>\\<lambda>\\<^sup>3 (\\<lambda> x y z . \\<lparr>F, x\\<^sup>P, y\\<^sup>P, z\\<^sup>P\\<rparr>)) = d\\<^sub>3 F\"", "lemma D5_1[semantics]:\n    assumes \"IsProperInX \\<phi>\"\n    shows \"\\<And> w o\\<^sub>1 r . Some r = d\\<^sub>1 (\\<^bold>\\<lambda> x . (\\<phi> (x\\<^sup>P))) \\<and> Some o\\<^sub>1 = d\\<^sub>\\<kappa> x\n                      \\<longrightarrow> (o\\<^sub>1 \\<in> ex1 r w) = (w \\<Turnstile> \\<phi> x)\"", "lemma D5_2[semantics]:\n    assumes \"IsProperInXY \\<phi>\"\n    shows \"\\<And> w o\\<^sub>1 o\\<^sub>2 r . Some r = d\\<^sub>2 (\\<^bold>\\<lambda>\\<^sup>2 (\\<lambda> x y . \\<phi> (x\\<^sup>P) (y\\<^sup>P)))\n                       \\<and> Some o\\<^sub>1 = d\\<^sub>\\<kappa> x \\<and> Some o\\<^sub>2 = d\\<^sub>\\<kappa> y\n                       \\<longrightarrow> ((o\\<^sub>1,o\\<^sub>2) \\<in> ex2 r w) = (w \\<Turnstile> \\<phi> x y)\"", "lemma D5_3[semantics]:\n    assumes \"IsProperInXYZ \\<phi>\"\n    shows \"\\<And> w o\\<^sub>1 o\\<^sub>2 o\\<^sub>3 r . Some r = d\\<^sub>3 (\\<^bold>\\<lambda>\\<^sup>3 (\\<lambda> x y z . \\<phi> (x\\<^sup>P) (y\\<^sup>P) (z\\<^sup>P)))\n                          \\<and> Some o\\<^sub>1 = d\\<^sub>\\<kappa> x \\<and> Some o\\<^sub>2 = d\\<^sub>\\<kappa> y \\<and> Some o\\<^sub>3 = d\\<^sub>\\<kappa> z\n                          \\<longrightarrow> ((o\\<^sub>1,o\\<^sub>2,o\\<^sub>3) \\<in> ex3 r w) = (w \\<Turnstile> \\<phi> x y z)\"", "lemma D6[semantics]: \"(\\<And> w r . Some r = d\\<^sub>0 (\\<^bold>\\<lambda>\\<^sup>0 \\<phi>) \\<longrightarrow> ex0 r w = (w \\<Turnstile> \\<phi>))\"", "lemma propex\\<^sub>0: \"\\<exists> r . Some r = d\\<^sub>0 F\"", "lemma propex\\<^sub>1: \"\\<exists> r . Some r = d\\<^sub>1 F\"", "lemma propex\\<^sub>2: \"\\<exists> r . Some r = d\\<^sub>2 F\"", "lemma propex\\<^sub>3: \"\\<exists> r . Some r = d\\<^sub>3 F\"", "lemma d\\<^sub>\\<kappa>_proper: \"d\\<^sub>\\<kappa> (u\\<^sup>P) = Some u\"", "lemma ConcretenessSemantics1:\n    \"Some r = d\\<^sub>1 E! \\<Longrightarrow> (\\<exists> w . \\<omega>\\<nu> x \\<in> ex1 r w)\"", "lemma ConcretenessSemantics2:\n    \"Some r = d\\<^sub>1 E! \\<Longrightarrow> (x \\<in> ex1 r w \\<longrightarrow> (\\<exists>y. x = \\<omega>\\<nu> y))\"", "lemma d\\<^sub>0_inject: \"\\<And>x y. d\\<^sub>0 x = d\\<^sub>0 y \\<Longrightarrow> x = y\"", "lemma d\\<^sub>1_inject: \"\\<And>x y. d\\<^sub>1 x = d\\<^sub>1 y \\<Longrightarrow> x = y\"", "lemma d\\<^sub>2_inject: \"\\<And>x y. d\\<^sub>2 x = d\\<^sub>2 y \\<Longrightarrow> x = y\"", "lemma d\\<^sub>3_inject: \"\\<And>x y. d\\<^sub>3 x = d\\<^sub>3 y \\<Longrightarrow> x = y\"", "lemma d\\<^sub>\\<kappa>_inject: \"\\<And>x y o\\<^sub>1. Some o\\<^sub>1 = d\\<^sub>\\<kappa> x \\<and> Some o\\<^sub>1 = d\\<^sub>\\<kappa> y \\<Longrightarrow> x = y\"", "lemma IsProperInX_intro[IsProper_intros]:\n  \"IsProperInX (\\<lambda> x . \\<chi>\n    \\<comment> \\<open>one place:\\<close> (\\<lambda> F . \\<lparr>F,x\\<rparr>)\n    \\<comment> \\<open>two place:\\<close> (\\<lambda> F . \\<lparr>F,x,x\\<rparr>) (\\<lambda> F a . \\<lparr>F,x,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,a,x\\<rparr>)\n    \\<comment> \\<open>three place three \\<open>x\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,x,x,x\\<rparr>)\n    \\<comment> \\<open>three place two \\<open>x\\<close>:\\<close> (\\<lambda> F a . \\<lparr>F,x,x,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,x,a,x\\<rparr>)\n                            (\\<lambda> F a . \\<lparr>F,a,x,x\\<rparr>)\n    \\<comment> \\<open>three place one \\<open>x\\<close>:\\<close> (\\<lambda> F a b. \\<lparr>F,x,a,b\\<rparr>) (\\<lambda> F a b. \\<lparr>F,a,x,b\\<rparr>)\n                            (\\<lambda> F a b . \\<lparr>F,a,b,x\\<rparr>))\"", "lemma IsProperInXY_intro[IsProper_intros]:\n  \"IsProperInXY (\\<lambda> x y . \\<chi>\n    \\<comment> \\<open>only \\<open>x\\<close>\\<close>\n      \\<comment> \\<open>one place:\\<close> (\\<lambda> F . \\<lparr>F,x\\<rparr>)\n      \\<comment> \\<open>two place:\\<close> (\\<lambda> F . \\<lparr>F,x,x\\<rparr>) (\\<lambda> F a . \\<lparr>F,x,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,a,x\\<rparr>)\n      \\<comment> \\<open>three place three \\<open>x\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,x,x,x\\<rparr>)\n      \\<comment> \\<open>three place two \\<open>x\\<close>:\\<close> (\\<lambda> F a . \\<lparr>F,x,x,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,x,a,x\\<rparr>)\n                              (\\<lambda> F a . \\<lparr>F,a,x,x\\<rparr>)\n      \\<comment> \\<open>three place one \\<open>x\\<close>:\\<close> (\\<lambda> F a b. \\<lparr>F,x,a,b\\<rparr>) (\\<lambda> F a b. \\<lparr>F,a,x,b\\<rparr>)\n                              (\\<lambda> F a b . \\<lparr>F,a,b,x\\<rparr>)\n    \\<comment> \\<open>only \\<open>y\\<close>\\<close>\n      \\<comment> \\<open>one place:\\<close> (\\<lambda> F . \\<lparr>F,y\\<rparr>)\n      \\<comment> \\<open>two place:\\<close> (\\<lambda> F . \\<lparr>F,y,y\\<rparr>) (\\<lambda> F a . \\<lparr>F,y,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,a,y\\<rparr>)\n      \\<comment> \\<open>three place three \\<open>y\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,y,y,y\\<rparr>)\n      \\<comment> \\<open>three place two \\<open>y\\<close>:\\<close> (\\<lambda> F a . \\<lparr>F,y,y,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,y,a,y\\<rparr>)\n                              (\\<lambda> F a . \\<lparr>F,a,y,y\\<rparr>)\n      \\<comment> \\<open>three place one \\<open>y\\<close>:\\<close> (\\<lambda> F a b. \\<lparr>F,y,a,b\\<rparr>) (\\<lambda> F a b. \\<lparr>F,a,y,b\\<rparr>)\n                              (\\<lambda> F a b . \\<lparr>F,a,b,y\\<rparr>)\n    \\<comment> \\<open>\\<open>x\\<close> and \\<open>y\\<close>\\<close>\n      \\<comment> \\<open>two place:\\<close> (\\<lambda> F . \\<lparr>F,x,y\\<rparr>) (\\<lambda> F . \\<lparr>F,y,x\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(x,y)\\<close>:\\<close> (\\<lambda> F a . \\<lparr>F,x,y,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,x,a,y\\<rparr>)\n                              (\\<lambda> F a . \\<lparr>F,a,x,y\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(y,x)\\<close>:\\<close> (\\<lambda> F a . \\<lparr>F,y,x,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,y,a,x\\<rparr>)\n                              (\\<lambda> F a . \\<lparr>F,a,y,x\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(x,x,y)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,x,x,y\\<rparr>) (\\<lambda> F . \\<lparr>F,x,y,x\\<rparr>)\n                                (\\<lambda> F . \\<lparr>F,y,x,x\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(x,y,y)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,x,y,y\\<rparr>) (\\<lambda> F . \\<lparr>F,y,x,y\\<rparr>)\n                                (\\<lambda> F . \\<lparr>F,y,y,x\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(x,x,x)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,x,x,x\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(y,y,y)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,y,y,y\\<rparr>))\"", "lemma IsProperInXYZ_intro[IsProper_intros]:\n  \"IsProperInXYZ (\\<lambda> x y z . \\<chi>\n    \\<comment> \\<open>only \\<open>x\\<close>\\<close>\n      \\<comment> \\<open>one place:\\<close> (\\<lambda> F . \\<lparr>F,x\\<rparr>)\n      \\<comment> \\<open>two place:\\<close> (\\<lambda> F . \\<lparr>F,x,x\\<rparr>) (\\<lambda> F a . \\<lparr>F,x,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,a,x\\<rparr>)\n      \\<comment> \\<open>three place three \\<open>x\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,x,x,x\\<rparr>)\n      \\<comment> \\<open>three place two \\<open>x\\<close>:\\<close> (\\<lambda> F a . \\<lparr>F,x,x,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,x,a,x\\<rparr>)\n                              (\\<lambda> F a . \\<lparr>F,a,x,x\\<rparr>)\n      \\<comment> \\<open>three place one \\<open>x\\<close>:\\<close> (\\<lambda> F a b. \\<lparr>F,x,a,b\\<rparr>) (\\<lambda> F a b. \\<lparr>F,a,x,b\\<rparr>)\n                              (\\<lambda> F a b . \\<lparr>F,a,b,x\\<rparr>)\n    \\<comment> \\<open>only \\<open>y\\<close>\\<close>\n      \\<comment> \\<open>one place:\\<close> (\\<lambda> F . \\<lparr>F,y\\<rparr>)\n      \\<comment> \\<open>two place:\\<close> (\\<lambda> F . \\<lparr>F,y,y\\<rparr>) (\\<lambda> F a . \\<lparr>F,y,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,a,y\\<rparr>)\n      \\<comment> \\<open>three place three \\<open>y\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,y,y,y\\<rparr>)\n      \\<comment> \\<open>three place two \\<open>y\\<close>:\\<close> (\\<lambda> F a . \\<lparr>F,y,y,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,y,a,y\\<rparr>)\n                              (\\<lambda> F a . \\<lparr>F,a,y,y\\<rparr>)\n      \\<comment> \\<open>three place one \\<open>y\\<close>:\\<close> (\\<lambda> F a b. \\<lparr>F,y,a,b\\<rparr>) (\\<lambda> F a b. \\<lparr>F,a,y,b\\<rparr>)\n                              (\\<lambda> F a b . \\<lparr>F,a,b,y\\<rparr>)\n    \\<comment> \\<open>only \\<open>z\\<close>\\<close>\n      \\<comment> \\<open>one place:\\<close> (\\<lambda> F . \\<lparr>F,z\\<rparr>)\n      \\<comment> \\<open>two place:\\<close> (\\<lambda> F . \\<lparr>F,z,z\\<rparr>) (\\<lambda> F a . \\<lparr>F,z,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,a,z\\<rparr>)\n      \\<comment> \\<open>three place three \\<open>z\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,z,z,z\\<rparr>)\n      \\<comment> \\<open>three place two \\<open>z\\<close>:\\<close> (\\<lambda> F a . \\<lparr>F,z,z,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,z,a,z\\<rparr>)\n                              (\\<lambda> F a . \\<lparr>F,a,z,z\\<rparr>)\n      \\<comment> \\<open>three place one \\<open>z\\<close>:\\<close> (\\<lambda> F a b. \\<lparr>F,z,a,b\\<rparr>) (\\<lambda> F a b. \\<lparr>F,a,z,b\\<rparr>)\n                              (\\<lambda> F a b . \\<lparr>F,a,b,z\\<rparr>)\n    \\<comment> \\<open>\\<open>x\\<close> and \\<open>y\\<close>\\<close>\n      \\<comment> \\<open>two place:\\<close> (\\<lambda> F . \\<lparr>F,x,y\\<rparr>) (\\<lambda> F . \\<lparr>F,y,x\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(x,y)\\<close>:\\<close> (\\<lambda> F a . \\<lparr>F,x,y,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,x,a,y\\<rparr>)\n                              (\\<lambda> F a . \\<lparr>F,a,x,y\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(y,x)\\<close>:\\<close> (\\<lambda> F a . \\<lparr>F,y,x,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,y,a,x\\<rparr>)\n                              (\\<lambda> F a . \\<lparr>F,a,y,x\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(x,x,y)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,x,x,y\\<rparr>) (\\<lambda> F . \\<lparr>F,x,y,x\\<rparr>)\n                                (\\<lambda> F . \\<lparr>F,y,x,x\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(x,y,y)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,x,y,y\\<rparr>) (\\<lambda> F . \\<lparr>F,y,x,y\\<rparr>)\n                                (\\<lambda> F . \\<lparr>F,y,y,x\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(x,x,x)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,x,x,x\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(y,y,y)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,y,y,y\\<rparr>)\n    \\<comment> \\<open>\\<open>x\\<close> and \\<open>z\\<close>\\<close>\n      \\<comment> \\<open>two place:\\<close> (\\<lambda> F . \\<lparr>F,x,z\\<rparr>) (\\<lambda> F . \\<lparr>F,z,x\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(x,z)\\<close>:\\<close> (\\<lambda> F a . \\<lparr>F,x,z,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,x,a,z\\<rparr>)\n                              (\\<lambda> F a . \\<lparr>F,a,x,z\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(z,x)\\<close>:\\<close> (\\<lambda> F a . \\<lparr>F,z,x,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,z,a,x\\<rparr>)\n                              (\\<lambda> F a . \\<lparr>F,a,z,x\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(x,x,z)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,x,x,z\\<rparr>) (\\<lambda> F . \\<lparr>F,x,z,x\\<rparr>)\n                                (\\<lambda> F . \\<lparr>F,z,x,x\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(x,z,z)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,x,z,z\\<rparr>) (\\<lambda> F . \\<lparr>F,z,x,z\\<rparr>)\n                                (\\<lambda> F . \\<lparr>F,z,z,x\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(x,x,x)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,x,x,x\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(z,z,z)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,z,z,z\\<rparr>)\n    \\<comment> \\<open>\\<open>y\\<close> and \\<open>z\\<close>\\<close>\n      \\<comment> \\<open>two place:\\<close> (\\<lambda> F . \\<lparr>F,y,z\\<rparr>) (\\<lambda> F . \\<lparr>F,z,y\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(y,z)\\<close>:\\<close> (\\<lambda> F a . \\<lparr>F,y,z,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,y,a,z\\<rparr>)\n                              (\\<lambda> F a . \\<lparr>F,a,y,z\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(z,y)\\<close>:\\<close> (\\<lambda> F a . \\<lparr>F,z,y,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,z,a,y\\<rparr>)\n                              (\\<lambda> F a . \\<lparr>F,a,z,y\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(y,y,z)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,y,y,z\\<rparr>) (\\<lambda> F . \\<lparr>F,y,z,y\\<rparr>)\n                                (\\<lambda> F . \\<lparr>F,z,y,y\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(y,z,z)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,y,z,z\\<rparr>) (\\<lambda> F . \\<lparr>F,z,y,z\\<rparr>)\n                                (\\<lambda> F . \\<lparr>F,z,z,y\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(y,y,y)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,y,y,y\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(z,z,z)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,z,z,z\\<rparr>)\n    \\<comment> \\<open>\\<open>x y z\\<close>\\<close>\n      \\<comment> \\<open>three place \\<open>(x,\\<dots>)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,x,y,z\\<rparr>) (\\<lambda> F . \\<lparr>F,x,z,y\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(y,\\<dots>)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,y,x,z\\<rparr>) (\\<lambda> F . \\<lparr>F,y,z,x\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(z,\\<dots>)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,z,x,y\\<rparr>) (\\<lambda> F . \\<lparr>F,z,y,x\\<rparr>))\""], "translations": [["", "lemma T1_1[semantics]:\n    \"(w \\<Turnstile> \\<lparr>F,x\\<rparr>) = (\\<exists> r o\\<^sub>1 . Some r = d\\<^sub>1 F \\<and> Some o\\<^sub>1 = d\\<^sub>\\<kappa> x \\<and> o\\<^sub>1 \\<in> ex1 r w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w \\<Turnstile> \\<lparr>F,x\\<rparr>) =\n    (\\<exists>r o\\<^sub>1.\n        Some r = d\\<^sub>1 F \\<and>\n        Some o\\<^sub>1 = d\\<^sub>\\<kappa> x \\<and> o\\<^sub>1 \\<in> ex1 r w)", "unfolding semantics_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. (w \\<Turnstile> \\<lparr>F,x\\<rparr>) =\n    (\\<exists>r o\\<^sub>1.\n        Some r = map_fun eval\\<Pi>\\<^sub>1 id Some F \\<and>\n        Some o\\<^sub>1 = map_fun eval\\<kappa> id id x \\<and>\n        o\\<^sub>1 \\<in> {x. r (\\<nu>\\<upsilon> x) dj w})", "apply (simp add: meta_defs meta_aux rep_def proper_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (None \\<noteq> eval\\<kappa> x \\<and>\n     eval\\<Pi>\\<^sub>1 F (\\<nu>\\<upsilon> (the (eval\\<kappa> x))) dj w) =\n    (\\<exists>o\\<^sub>1.\n        Some o\\<^sub>1 = eval\\<kappa> x \\<and>\n        eval\\<Pi>\\<^sub>1 F (\\<nu>\\<upsilon> o\\<^sub>1) dj w)", "by (metis option.discI option.exhaust option.sel)"], ["", "lemma T1_2[semantics]:\n    \"(w \\<Turnstile> \\<lparr>F,x,y\\<rparr>) = (\\<exists> r o\\<^sub>1 o\\<^sub>2 . Some r = d\\<^sub>2 F \\<and> Some o\\<^sub>1 = d\\<^sub>\\<kappa> x\n                               \\<and> Some o\\<^sub>2 = d\\<^sub>\\<kappa> y \\<and> (o\\<^sub>1, o\\<^sub>2) \\<in> ex2 r w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w \\<Turnstile> \\<lparr>F,x,y\\<rparr>) =\n    (\\<exists>r o\\<^sub>1 o\\<^sub>2.\n        Some r = d\\<^sub>2 F \\<and>\n        Some o\\<^sub>1 = d\\<^sub>\\<kappa> x \\<and>\n        Some o\\<^sub>2 = d\\<^sub>\\<kappa> y \\<and>\n        (o\\<^sub>1, o\\<^sub>2) \\<in> ex2 r w)", "unfolding semantics_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. (w \\<Turnstile> \\<lparr>F,x,y\\<rparr>) =\n    (\\<exists>r o\\<^sub>1 o\\<^sub>2.\n        Some r = map_fun eval\\<Pi>\\<^sub>2 id Some F \\<and>\n        Some o\\<^sub>1 = map_fun eval\\<kappa> id id x \\<and>\n        Some o\\<^sub>2 = map_fun eval\\<kappa> id id y \\<and>\n        (o\\<^sub>1, o\\<^sub>2)\n        \\<in> {(x, y). r (\\<nu>\\<upsilon> x) (\\<nu>\\<upsilon> y) dj w})", "apply (simp add: meta_defs meta_aux rep_def proper_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (None \\<noteq> eval\\<kappa> x \\<and>\n     None \\<noteq> eval\\<kappa> y \\<and>\n     eval\\<Pi>\\<^sub>2 F (\\<nu>\\<upsilon> (the (eval\\<kappa> x)))\n      (\\<nu>\\<upsilon> (the (eval\\<kappa> y))) dj w) =\n    (\\<exists>o\\<^sub>1.\n        Some o\\<^sub>1 = eval\\<kappa> x \\<and>\n        (\\<exists>o\\<^sub>2.\n            Some o\\<^sub>2 = eval\\<kappa> y \\<and>\n            eval\\<Pi>\\<^sub>2 F (\\<nu>\\<upsilon> o\\<^sub>1)\n             (\\<nu>\\<upsilon> o\\<^sub>2) dj w))", "by (metis option.discI option.exhaust option.sel)"], ["", "lemma T1_3[semantics]:\n    \"(w \\<Turnstile> \\<lparr>F,x,y,z\\<rparr>) = (\\<exists> r o\\<^sub>1 o\\<^sub>2 o\\<^sub>3 . Some r = d\\<^sub>3 F \\<and> Some o\\<^sub>1 = d\\<^sub>\\<kappa> x\n                                    \\<and> Some o\\<^sub>2 = d\\<^sub>\\<kappa> y \\<and> Some o\\<^sub>3 = d\\<^sub>\\<kappa> z\n                                    \\<and> (o\\<^sub>1, o\\<^sub>2, o\\<^sub>3) \\<in> ex3 r w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w \\<Turnstile> \\<lparr>F,x,y,z\\<rparr>) =\n    (\\<exists>r o\\<^sub>1 o\\<^sub>2 o\\<^sub>3.\n        Some r = d\\<^sub>3 F \\<and>\n        Some o\\<^sub>1 = d\\<^sub>\\<kappa> x \\<and>\n        Some o\\<^sub>2 = d\\<^sub>\\<kappa> y \\<and>\n        Some o\\<^sub>3 = d\\<^sub>\\<kappa> z \\<and>\n        (o\\<^sub>1, o\\<^sub>2, o\\<^sub>3) \\<in> ex3 r w)", "unfolding semantics_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. (w \\<Turnstile> \\<lparr>F,x,y,z\\<rparr>) =\n    (\\<exists>r o\\<^sub>1 o\\<^sub>2 o\\<^sub>3.\n        Some r = map_fun eval\\<Pi>\\<^sub>3 id Some F \\<and>\n        Some o\\<^sub>1 = map_fun eval\\<kappa> id id x \\<and>\n        Some o\\<^sub>2 = map_fun eval\\<kappa> id id y \\<and>\n        Some o\\<^sub>3 = map_fun eval\\<kappa> id id z \\<and>\n        (o\\<^sub>1, o\\<^sub>2, o\\<^sub>3)\n        \\<in> {(x, y, z).\n               r (\\<nu>\\<upsilon> x) (\\<nu>\\<upsilon> y) (\\<nu>\\<upsilon> z)\n                dj w})", "apply (simp add: meta_defs meta_aux rep_def proper_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (None \\<noteq> eval\\<kappa> x \\<and>\n     None \\<noteq> eval\\<kappa> y \\<and>\n     None \\<noteq> eval\\<kappa> z \\<and>\n     eval\\<Pi>\\<^sub>3 F (\\<nu>\\<upsilon> (the (eval\\<kappa> x)))\n      (\\<nu>\\<upsilon> (the (eval\\<kappa> y)))\n      (\\<nu>\\<upsilon> (the (eval\\<kappa> z))) dj w) =\n    (\\<exists>o\\<^sub>1.\n        Some o\\<^sub>1 = eval\\<kappa> x \\<and>\n        (\\<exists>o\\<^sub>2.\n            Some o\\<^sub>2 = eval\\<kappa> y \\<and>\n            (\\<exists>o\\<^sub>3.\n                Some o\\<^sub>3 = eval\\<kappa> z \\<and>\n                eval\\<Pi>\\<^sub>3 F (\\<nu>\\<upsilon> o\\<^sub>1)\n                 (\\<nu>\\<upsilon> o\\<^sub>2) (\\<nu>\\<upsilon> o\\<^sub>3) dj\n                 w)))", "by (metis option.discI option.exhaust option.sel)"], ["", "lemma T3[semantics]:\n    \"(w \\<Turnstile> \\<lparr>F\\<rparr>) = (\\<exists> r . Some r = d\\<^sub>0 F \\<and> ex0 r w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w \\<Turnstile> \\<lparr>F\\<rparr>) =\n    (\\<exists>r. Some r = d\\<^sub>0 F \\<and> ex0 r w)", "unfolding semantics_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. (w \\<Turnstile> \\<lparr>F\\<rparr>) =\n    (\\<exists>r. Some r = map_fun eval\\<o> id Some F \\<and> r dj w)", "by (simp add: meta_defs meta_aux)"], ["", "subsubsection\\<open>Truth Conditions of Encoding Formulas\\<close>"], ["", "text\\<open>\\label{TAO_Semantics_Semantics_Encoding}\\<close>"], ["", "lemma T2[semantics]:\n    \"(w \\<Turnstile> \\<lbrace>x,F\\<rbrace>) = (\\<exists> r o\\<^sub>1 . Some r = d\\<^sub>1 F \\<and> Some o\\<^sub>1 = d\\<^sub>\\<kappa> x \\<and> o\\<^sub>1 \\<in> en r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w \\<Turnstile> \\<lbrace>x,F\\<rbrace>) =\n    (\\<exists>r o\\<^sub>1.\n        Some r = d\\<^sub>1 F \\<and>\n        Some o\\<^sub>1 = d\\<^sub>\\<kappa> x \\<and> o\\<^sub>1 \\<in> en r)", "unfolding semantics_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. (w \\<Turnstile> \\<lbrace>x,F\\<rbrace>) =\n    (\\<exists>r o\\<^sub>1.\n        Some r = map_fun eval\\<Pi>\\<^sub>1 id Some F \\<and>\n        Some o\\<^sub>1 = map_fun eval\\<kappa> id id x \\<and>\n        o\\<^sub>1\n        \\<in> Collect\n               (case_\\<nu> (\\<lambda>\\<omega>. False)\n                 ((\\<in>) (make\\<Pi>\\<^sub>1 r))))", "apply (simp add: meta_defs meta_aux rep_def proper_def split: \\<nu>.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<exists>x1.\n         the (eval\\<kappa> x) = \\<omega>\\<nu> x1) \\<longrightarrow>\n     (\\<forall>x2.\n         Some (\\<alpha>\\<nu> x2) = eval\\<kappa> x \\<longrightarrow>\n         F \\<notin> x2)) \\<and>\n    (\\<forall>x2.\n        the (eval\\<kappa> x) = \\<alpha>\\<nu> x2 \\<longrightarrow>\n        (None \\<noteq> eval\\<kappa> x \\<and> F \\<in> x2) =\n        (\\<exists>o\\<^sub>1.\n            (\\<forall>x1. o\\<^sub>1 \\<noteq> \\<omega>\\<nu> x1) \\<and>\n            (\\<forall>x2.\n                o\\<^sub>1 = \\<alpha>\\<nu> x2 \\<longrightarrow>\n                Some (\\<alpha>\\<nu> x2) = eval\\<kappa> x \\<and>\n                F \\<in> x2)))", "by (metis \\<nu>.exhaust \\<nu>.inject(2) \\<nu>.simps(4) \\<nu>\\<kappa>.rep_eq option.collapse\n              option.discI rep.rep_eq rep_proper_id)"], ["", "subsubsection\\<open>Truth Conditions of Complex Formulas\\<close>"], ["", "text\\<open>\\label{TAO_Semantics_Semantics_Complex_Formulas}\\<close>"], ["", "lemma T4[semantics]: \"(w \\<Turnstile> \\<^bold>\\<not>\\<psi>) = (\\<not>(w \\<Turnstile> \\<psi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w \\<Turnstile> \\<^bold>\\<not>\\<psi>) = (\\<not> (w \\<Turnstile> \\<psi>))", "by (simp add: meta_defs meta_aux)"], ["", "lemma T5[semantics]: \"(w \\<Turnstile> \\<psi> \\<^bold>\\<rightarrow> \\<chi>) = (\\<not>(w \\<Turnstile> \\<psi>) \\<or> (w \\<Turnstile> \\<chi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w \\<Turnstile> \\<psi> \\<^bold>\\<rightarrow> \\<chi>) =\n    (\\<not> (w \\<Turnstile> \\<psi>) \\<or> (w \\<Turnstile> \\<chi>))", "by (simp add: meta_defs meta_aux)"], ["", "lemma T6[semantics]: \"(w \\<Turnstile> \\<^bold>\\<box>\\<psi>) = (\\<forall> v . (v \\<Turnstile> \\<psi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w \\<Turnstile> \\<^bold>\\<box>\\<psi>) =\n    (\\<forall>v. (v \\<Turnstile> \\<psi>))", "by (simp add: meta_defs meta_aux)"], ["", "lemma T7[semantics]: \"(w \\<Turnstile> \\<^bold>\\<A>\\<psi>) = (dw \\<Turnstile> \\<psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w \\<Turnstile> \\<^bold>\\<A>\\<psi>) = (dw \\<Turnstile> \\<psi>)", "by (simp add: meta_defs meta_aux)"], ["", "lemma T8_\\<nu>[semantics]: \"(w \\<Turnstile> \\<^bold>\\<forall>\\<^sub>\\<nu> x. \\<psi> x) = (\\<forall> x . (w \\<Turnstile> \\<psi> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w \\<Turnstile> \\<^bold>\\<forall>\\<^sub>\\<nu>x. \\<psi> x) =\n    (\\<forall>x. (w \\<Turnstile> \\<psi> x))", "by (simp add: meta_defs meta_aux)"], ["", "lemma T8_0[semantics]: \"(w \\<Turnstile> \\<^bold>\\<forall>\\<^sub>0 x. \\<psi> x) = (\\<forall> x . (w \\<Turnstile> \\<psi> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w \\<Turnstile> \\<^bold>\\<forall>\\<^sub>0x. \\<psi> x) =\n    (\\<forall>x. (w \\<Turnstile> \\<psi> x))", "by (simp add: meta_defs meta_aux)"], ["", "lemma T8_1[semantics]: \"(w \\<Turnstile> \\<^bold>\\<forall>\\<^sub>1 x. \\<psi> x) = (\\<forall> x . (w \\<Turnstile> \\<psi> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w \\<Turnstile> \\<^bold>\\<forall>\\<^sub>1x. \\<psi> x) =\n    (\\<forall>x. (w \\<Turnstile> \\<psi> x))", "by (simp add: meta_defs meta_aux)"], ["", "lemma T8_2[semantics]: \"(w \\<Turnstile> \\<^bold>\\<forall>\\<^sub>2 x. \\<psi> x) = (\\<forall> x . (w \\<Turnstile> \\<psi> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w \\<Turnstile> \\<^bold>\\<forall>\\<^sub>2x. \\<psi> x) =\n    (\\<forall>x. (w \\<Turnstile> \\<psi> x))", "by (simp add: meta_defs meta_aux)"], ["", "lemma T8_3[semantics]: \"(w \\<Turnstile> \\<^bold>\\<forall>\\<^sub>3 x. \\<psi> x) = (\\<forall> x . (w \\<Turnstile> \\<psi> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w \\<Turnstile> \\<^bold>\\<forall>\\<^sub>3x. \\<psi> x) =\n    (\\<forall>x. (w \\<Turnstile> \\<psi> x))", "by (simp add: meta_defs meta_aux)"], ["", "lemma T8_\\<o>[semantics]: \"(w \\<Turnstile> \\<^bold>\\<forall>\\<^sub>\\<o> x. \\<psi> x) = (\\<forall> x . (w \\<Turnstile> \\<psi> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w \\<Turnstile> \\<^bold>\\<forall>\\<^sub>\\<o>x. \\<psi> x) =\n    (\\<forall>x. (w \\<Turnstile> \\<psi> x))", "by (simp add: meta_defs meta_aux)"], ["", "subsubsection\\<open>Denotations of Descriptions\\<close>"], ["", "text\\<open>\\label{TAO_Semantics_Semantics_Descriptions}\\<close>"], ["", "lemma D3[semantics]:\n    \"d\\<^sub>\\<kappa> (\\<^bold>\\<iota>x . \\<psi> x) = (if (\\<exists>x . (w\\<^sub>0 \\<Turnstile> \\<psi> x) \\<and> (\\<forall> y . (w\\<^sub>0  \\<Turnstile> \\<psi> y) \\<longrightarrow> y = x))\n                      then (Some (THE x . (w\\<^sub>0 \\<Turnstile> \\<psi> x))) else None)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d\\<^sub>\\<kappa> (\\<^bold>\\<iota>x. \\<psi> x) =\n    (if \\<exists>x.\n           (w\\<^sub>0 \\<Turnstile> \\<psi> x) \\<and>\n           (\\<forall>y.\n               (w\\<^sub>0 \\<Turnstile> \\<psi> y) \\<longrightarrow> y = x)\n     then Some (THE x. (w\\<^sub>0 \\<Turnstile> \\<psi> x)) else None)", "unfolding semantics_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_fun eval\\<kappa> id id (\\<^bold>\\<iota>x. \\<psi> x) =\n    (if \\<exists>x.\n           (dw \\<Turnstile> \\<psi> x) \\<and>\n           (\\<forall>y. (dw \\<Turnstile> \\<psi> y) \\<longrightarrow> y = x)\n     then Some (THE x. (dw \\<Turnstile> \\<psi> x)) else None)", "by (auto simp: meta_defs meta_aux)"], ["", "subsubsection\\<open>Denotations of Lambda Expressions\\<close>"], ["", "text\\<open>\\label{TAO_Semantics_Semantics_Lambda_Expressions}\\<close>"], ["", "lemma D4_1[semantics]: \"d\\<^sub>1 (\\<^bold>\\<lambda> x . \\<lparr>F, x\\<^sup>P\\<rparr>) = d\\<^sub>1 F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d\\<^sub>1 (\\<^bold>\\<lambda>x. \\<lparr>F,x\\<^sup>P\\<rparr>) =\n    d\\<^sub>1 F", "by (simp add: meta_defs meta_aux)"], ["", "lemma D4_2[semantics]: \"d\\<^sub>2 (\\<^bold>\\<lambda>\\<^sup>2 (\\<lambda> x y . \\<lparr>F, x\\<^sup>P, y\\<^sup>P\\<rparr>)) = d\\<^sub>2 F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d\\<^sub>2\n     (\\<^bold>\\<lambda>\\<^sup>2\n       (\\<lambda>x y. \\<lparr>F,x\\<^sup>P,y\\<^sup>P\\<rparr>)) =\n    d\\<^sub>2 F", "by (simp add: meta_defs meta_aux)"], ["", "lemma D4_3[semantics]: \"d\\<^sub>3 (\\<^bold>\\<lambda>\\<^sup>3 (\\<lambda> x y z . \\<lparr>F, x\\<^sup>P, y\\<^sup>P, z\\<^sup>P\\<rparr>)) = d\\<^sub>3 F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d\\<^sub>3\n     (\\<^bold>\\<lambda>\\<^sup>3\n       (\\<lambda>x y z. \\<lparr>F,x\\<^sup>P,y\\<^sup>P,z\\<^sup>P\\<rparr>)) =\n    d\\<^sub>3 F", "by (simp add: meta_defs meta_aux)"], ["", "lemma D5_1[semantics]:\n    assumes \"IsProperInX \\<phi>\"\n    shows \"\\<And> w o\\<^sub>1 r . Some r = d\\<^sub>1 (\\<^bold>\\<lambda> x . (\\<phi> (x\\<^sup>P))) \\<and> Some o\\<^sub>1 = d\\<^sub>\\<kappa> x\n                      \\<longrightarrow> (o\\<^sub>1 \\<in> ex1 r w) = (w \\<Turnstile> \\<phi> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>w o\\<^sub>1 r.\n       Some r = d\\<^sub>1 (\\<^bold>\\<lambda>x. \\<phi> (x\\<^sup>P)) \\<and>\n       Some o\\<^sub>1 = d\\<^sub>\\<kappa> x \\<longrightarrow>\n       (o\\<^sub>1 \\<in> ex1 r w) = (w \\<Turnstile> \\<phi> x)", "using assms"], ["proof (prove)\nusing this:\n  IsProperInX \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>w o\\<^sub>1 r.\n       Some r = d\\<^sub>1 (\\<^bold>\\<lambda>x. \\<phi> (x\\<^sup>P)) \\<and>\n       Some o\\<^sub>1 = d\\<^sub>\\<kappa> x \\<longrightarrow>\n       (o\\<^sub>1 \\<in> ex1 r w) = (w \\<Turnstile> \\<phi> x)", "unfolding IsProperInX_def semantics_defs"], ["proof (prove)\nusing this:\n  map_fun (map_fun id eval\\<o>) id\n   (\\<lambda>\\<phi>.\n       \\<forall>x v.\n          (\\<exists>a.\n              \\<nu>\\<upsilon> a = \\<nu>\\<upsilon> x \\<and>\n              \\<phi> (a\\<^sup>P) dj v) =\n          \\<phi> (x\\<^sup>P) dj v)\n   \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>w o\\<^sub>1 r.\n       Some r =\n       map_fun eval\\<Pi>\\<^sub>1 id Some\n        (\\<^bold>\\<lambda>x. \\<phi> (x\\<^sup>P)) \\<and>\n       Some o\\<^sub>1 = map_fun eval\\<kappa> id id x \\<longrightarrow>\n       (o\\<^sub>1 \\<in> {x. r (\\<nu>\\<upsilon> x) dj w}) =\n       (w \\<Turnstile> \\<phi> x)", "by (auto simp: meta_defs meta_aux rep_def proper_def \\<nu>\\<kappa>.abs_eq)"], ["", "lemma D5_2[semantics]:\n    assumes \"IsProperInXY \\<phi>\"\n    shows \"\\<And> w o\\<^sub>1 o\\<^sub>2 r . Some r = d\\<^sub>2 (\\<^bold>\\<lambda>\\<^sup>2 (\\<lambda> x y . \\<phi> (x\\<^sup>P) (y\\<^sup>P)))\n                       \\<and> Some o\\<^sub>1 = d\\<^sub>\\<kappa> x \\<and> Some o\\<^sub>2 = d\\<^sub>\\<kappa> y\n                       \\<longrightarrow> ((o\\<^sub>1,o\\<^sub>2) \\<in> ex2 r w) = (w \\<Turnstile> \\<phi> x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>w o\\<^sub>1 o\\<^sub>2 r.\n       Some r =\n       d\\<^sub>2\n        (\\<^bold>\\<lambda>\\<^sup>2\n          (\\<lambda>x y. \\<phi> (x\\<^sup>P) (y\\<^sup>P))) \\<and>\n       Some o\\<^sub>1 = d\\<^sub>\\<kappa> x \\<and>\n       Some o\\<^sub>2 = d\\<^sub>\\<kappa> y \\<longrightarrow>\n       ((o\\<^sub>1, o\\<^sub>2) \\<in> ex2 r w) = (w \\<Turnstile> \\<phi> x y)", "using assms"], ["proof (prove)\nusing this:\n  IsProperInXY \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>w o\\<^sub>1 o\\<^sub>2 r.\n       Some r =\n       d\\<^sub>2\n        (\\<^bold>\\<lambda>\\<^sup>2\n          (\\<lambda>x y. \\<phi> (x\\<^sup>P) (y\\<^sup>P))) \\<and>\n       Some o\\<^sub>1 = d\\<^sub>\\<kappa> x \\<and>\n       Some o\\<^sub>2 = d\\<^sub>\\<kappa> y \\<longrightarrow>\n       ((o\\<^sub>1, o\\<^sub>2) \\<in> ex2 r w) = (w \\<Turnstile> \\<phi> x y)", "unfolding IsProperInXY_def semantics_defs"], ["proof (prove)\nusing this:\n  map_fun (map_fun id (map_fun id eval\\<o>)) id\n   (\\<lambda>\\<phi>.\n       \\<forall>x y v.\n          (\\<exists>a b.\n              \\<nu>\\<upsilon> a = \\<nu>\\<upsilon> x \\<and>\n              \\<nu>\\<upsilon> b = \\<nu>\\<upsilon> y \\<and>\n              \\<phi> (a\\<^sup>P) (b\\<^sup>P) dj v) =\n          \\<phi> (x\\<^sup>P) (y\\<^sup>P) dj v)\n   \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>w o\\<^sub>1 o\\<^sub>2 r.\n       Some r =\n       map_fun eval\\<Pi>\\<^sub>2 id Some\n        (\\<^bold>\\<lambda>\\<^sup>2\n          (\\<lambda>x y. \\<phi> (x\\<^sup>P) (y\\<^sup>P))) \\<and>\n       Some o\\<^sub>1 = map_fun eval\\<kappa> id id x \\<and>\n       Some o\\<^sub>2 = map_fun eval\\<kappa> id id y \\<longrightarrow>\n       ((o\\<^sub>1, o\\<^sub>2)\n        \\<in> {(x, y). r (\\<nu>\\<upsilon> x) (\\<nu>\\<upsilon> y) dj w}) =\n       (w \\<Turnstile> \\<phi> x y)", "by (auto simp: meta_defs meta_aux rep_def proper_def \\<nu>\\<kappa>.abs_eq)"], ["", "lemma D5_3[semantics]:\n    assumes \"IsProperInXYZ \\<phi>\"\n    shows \"\\<And> w o\\<^sub>1 o\\<^sub>2 o\\<^sub>3 r . Some r = d\\<^sub>3 (\\<^bold>\\<lambda>\\<^sup>3 (\\<lambda> x y z . \\<phi> (x\\<^sup>P) (y\\<^sup>P) (z\\<^sup>P)))\n                          \\<and> Some o\\<^sub>1 = d\\<^sub>\\<kappa> x \\<and> Some o\\<^sub>2 = d\\<^sub>\\<kappa> y \\<and> Some o\\<^sub>3 = d\\<^sub>\\<kappa> z\n                          \\<longrightarrow> ((o\\<^sub>1,o\\<^sub>2,o\\<^sub>3) \\<in> ex3 r w) = (w \\<Turnstile> \\<phi> x y z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>w o\\<^sub>1 o\\<^sub>2 o\\<^sub>3 r.\n       Some r =\n       d\\<^sub>3\n        (\\<^bold>\\<lambda>\\<^sup>3\n          (\\<lambda>x y z.\n              \\<phi> (x\\<^sup>P) (y\\<^sup>P) (z\\<^sup>P))) \\<and>\n       Some o\\<^sub>1 = d\\<^sub>\\<kappa> x \\<and>\n       Some o\\<^sub>2 = d\\<^sub>\\<kappa> y \\<and>\n       Some o\\<^sub>3 = d\\<^sub>\\<kappa> z \\<longrightarrow>\n       ((o\\<^sub>1, o\\<^sub>2, o\\<^sub>3) \\<in> ex3 r w) =\n       (w \\<Turnstile> \\<phi> x y z)", "using assms"], ["proof (prove)\nusing this:\n  IsProperInXYZ \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>w o\\<^sub>1 o\\<^sub>2 o\\<^sub>3 r.\n       Some r =\n       d\\<^sub>3\n        (\\<^bold>\\<lambda>\\<^sup>3\n          (\\<lambda>x y z.\n              \\<phi> (x\\<^sup>P) (y\\<^sup>P) (z\\<^sup>P))) \\<and>\n       Some o\\<^sub>1 = d\\<^sub>\\<kappa> x \\<and>\n       Some o\\<^sub>2 = d\\<^sub>\\<kappa> y \\<and>\n       Some o\\<^sub>3 = d\\<^sub>\\<kappa> z \\<longrightarrow>\n       ((o\\<^sub>1, o\\<^sub>2, o\\<^sub>3) \\<in> ex3 r w) =\n       (w \\<Turnstile> \\<phi> x y z)", "unfolding IsProperInXYZ_def semantics_defs"], ["proof (prove)\nusing this:\n  map_fun (map_fun id (map_fun id (map_fun id eval\\<o>))) id\n   (\\<lambda>\\<phi>.\n       \\<forall>x y z v.\n          (\\<exists>a b c.\n              \\<nu>\\<upsilon> a = \\<nu>\\<upsilon> x \\<and>\n              \\<nu>\\<upsilon> b = \\<nu>\\<upsilon> y \\<and>\n              \\<nu>\\<upsilon> c = \\<nu>\\<upsilon> z \\<and>\n              \\<phi> (a\\<^sup>P) (b\\<^sup>P) (c\\<^sup>P) dj v) =\n          \\<phi> (x\\<^sup>P) (y\\<^sup>P) (z\\<^sup>P) dj v)\n   \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>w o\\<^sub>1 o\\<^sub>2 o\\<^sub>3 r.\n       Some r =\n       map_fun eval\\<Pi>\\<^sub>3 id Some\n        (\\<^bold>\\<lambda>\\<^sup>3\n          (\\<lambda>x y z.\n              \\<phi> (x\\<^sup>P) (y\\<^sup>P) (z\\<^sup>P))) \\<and>\n       Some o\\<^sub>1 = map_fun eval\\<kappa> id id x \\<and>\n       Some o\\<^sub>2 = map_fun eval\\<kappa> id id y \\<and>\n       Some o\\<^sub>3 = map_fun eval\\<kappa> id id z \\<longrightarrow>\n       ((o\\<^sub>1, o\\<^sub>2, o\\<^sub>3)\n        \\<in> {(x, y, z).\n               r (\\<nu>\\<upsilon> x) (\\<nu>\\<upsilon> y) (\\<nu>\\<upsilon> z)\n                dj w}) =\n       (w \\<Turnstile> \\<phi> x y z)", "by (auto simp: meta_defs meta_aux rep_def proper_def \\<nu>\\<kappa>.abs_eq)"], ["", "lemma D6[semantics]: \"(\\<And> w r . Some r = d\\<^sub>0 (\\<^bold>\\<lambda>\\<^sup>0 \\<phi>) \\<longrightarrow> ex0 r w = (w \\<Turnstile> \\<phi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>w r.\n       Some r =\n       d\\<^sub>0 (\\<^bold>\\<lambda>\\<^sup>0 \\<phi>) \\<longrightarrow>\n       ex0 r w = (w \\<Turnstile> \\<phi>)", "by (auto simp: meta_defs meta_aux semantics_defs)"], ["", "subsubsection\\<open>Auxiliary Lemmas\\<close>"], ["", "text\\<open>\\label{TAO_Semantics_Semantics_Auxiliary_Lemmata}\\<close>"], ["", "lemma propex\\<^sub>0: \"\\<exists> r . Some r = d\\<^sub>0 F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>r. Some r = d\\<^sub>0 F", "unfolding d\\<^sub>0_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>r. Some r = map_fun eval\\<o> id Some F", "by simp"], ["", "lemma propex\\<^sub>1: \"\\<exists> r . Some r = d\\<^sub>1 F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>r. Some r = d\\<^sub>1 F", "unfolding d\\<^sub>1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>r. Some r = map_fun eval\\<Pi>\\<^sub>1 id Some F", "by simp"], ["", "lemma propex\\<^sub>2: \"\\<exists> r . Some r = d\\<^sub>2 F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>r. Some r = d\\<^sub>2 F", "unfolding d\\<^sub>2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>r. Some r = map_fun eval\\<Pi>\\<^sub>2 id Some F", "by simp"], ["", "lemma propex\\<^sub>3: \"\\<exists> r . Some r = d\\<^sub>3 F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>r. Some r = d\\<^sub>3 F", "unfolding d\\<^sub>3_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>r. Some r = map_fun eval\\<Pi>\\<^sub>3 id Some F", "by simp"], ["", "lemma d\\<^sub>\\<kappa>_proper: \"d\\<^sub>\\<kappa> (u\\<^sup>P) = Some u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d\\<^sub>\\<kappa> (u\\<^sup>P) = Some u", "unfolding d\\<^sub>\\<kappa>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_fun eval\\<kappa> id id (u\\<^sup>P) = Some u", "by (simp add: \\<nu>\\<kappa>_def meta_aux)"], ["", "lemma ConcretenessSemantics1:\n    \"Some r = d\\<^sub>1 E! \\<Longrightarrow> (\\<exists> w . \\<omega>\\<nu> x \\<in> ex1 r w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Some r = d\\<^sub>1 E! \\<Longrightarrow>\n    \\<exists>w. \\<omega>\\<nu> x \\<in> ex1 r w", "unfolding semantics_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. Some r = map_fun eval\\<Pi>\\<^sub>1 id Some E! \\<Longrightarrow>\n    \\<exists>w. \\<omega>\\<nu> x \\<in> {x. r (\\<nu>\\<upsilon> x) dj w}", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r x.\n       Some r =\n       map_fun (\\<lambda>x. x) id Some\n        (\\<lambda>u s w.\n            case u of \\<omega>\\<upsilon> x \\<Rightarrow> ConcreteInWorld x w\n            | \\<sigma>\\<upsilon> \\<sigma> \\<Rightarrow>\n                False) \\<Longrightarrow>\n       \\<exists>w. \\<omega>\\<nu> x \\<in> {x. r (\\<nu>\\<upsilon> x) dj w}", "by (simp add: OrdinaryObjectsPossiblyConcreteAxiom \\<nu>\\<upsilon>_\\<omega>\\<nu>_is_\\<omega>\\<upsilon>)"], ["", "lemma ConcretenessSemantics2:\n    \"Some r = d\\<^sub>1 E! \\<Longrightarrow> (x \\<in> ex1 r w \\<longrightarrow> (\\<exists>y. x = \\<omega>\\<nu> y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Some r = d\\<^sub>1 E! \\<Longrightarrow>\n    x \\<in> ex1 r w \\<longrightarrow> (\\<exists>y. x = \\<omega>\\<nu> y)", "unfolding semantics_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. Some r = map_fun eval\\<Pi>\\<^sub>1 id Some E! \\<Longrightarrow>\n    x \\<in> {x. r (\\<nu>\\<upsilon> x) dj w} \\<longrightarrow>\n    (\\<exists>y. x = \\<omega>\\<nu> y)", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r x w.\n       Some r =\n       map_fun (\\<lambda>x. x) id Some\n        (\\<lambda>u s w.\n            case u of \\<omega>\\<upsilon> x \\<Rightarrow> ConcreteInWorld x w\n            | \\<sigma>\\<upsilon> \\<sigma> \\<Rightarrow>\n                False) \\<Longrightarrow>\n       x \\<in> {x. r (\\<nu>\\<upsilon> x) dj w} \\<longrightarrow>\n       (\\<exists>y. x = \\<omega>\\<nu> y)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r x w.\n       r =\n       (\\<lambda>u s w.\n           case u of \\<omega>\\<upsilon> x \\<Rightarrow> ConcreteInWorld x w\n           | \\<sigma>\\<upsilon> \\<sigma> \\<Rightarrow>\n               False) \\<Longrightarrow>\n       (case \\<nu>\\<upsilon> x of\n        \\<omega>\\<upsilon> x \\<Rightarrow> ConcreteInWorld x w\n        | \\<sigma>\\<upsilon> \\<sigma> \\<Rightarrow> False) \\<longrightarrow>\n       (\\<exists>y. x = \\<omega>\\<nu> y)", "by (metis \\<nu>.exhaust \\<upsilon>.exhaust \\<upsilon>.simps(6) no_\\<alpha>\\<omega>)"], ["", "lemma d\\<^sub>0_inject: \"\\<And>x y. d\\<^sub>0 x = d\\<^sub>0 y \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y. d\\<^sub>0 x = d\\<^sub>0 y \\<Longrightarrow> x = y", "unfolding d\\<^sub>0_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       map_fun eval\\<o> id Some x =\n       map_fun eval\\<o> id Some y \\<Longrightarrow>\n       x = y", "by (simp add: eval\\<o>_inject)"], ["", "lemma d\\<^sub>1_inject: \"\\<And>x y. d\\<^sub>1 x = d\\<^sub>1 y \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y. d\\<^sub>1 x = d\\<^sub>1 y \\<Longrightarrow> x = y", "unfolding d\\<^sub>1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       map_fun eval\\<Pi>\\<^sub>1 id Some x =\n       map_fun eval\\<Pi>\\<^sub>1 id Some y \\<Longrightarrow>\n       x = y", "by (simp add: eval\\<Pi>\\<^sub>1_inject)"], ["", "lemma d\\<^sub>2_inject: \"\\<And>x y. d\\<^sub>2 x = d\\<^sub>2 y \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y. d\\<^sub>2 x = d\\<^sub>2 y \\<Longrightarrow> x = y", "unfolding d\\<^sub>2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       map_fun eval\\<Pi>\\<^sub>2 id Some x =\n       map_fun eval\\<Pi>\\<^sub>2 id Some y \\<Longrightarrow>\n       x = y", "by (simp add: eval\\<Pi>\\<^sub>2_inject)"], ["", "lemma d\\<^sub>3_inject: \"\\<And>x y. d\\<^sub>3 x = d\\<^sub>3 y \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y. d\\<^sub>3 x = d\\<^sub>3 y \\<Longrightarrow> x = y", "unfolding d\\<^sub>3_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       map_fun eval\\<Pi>\\<^sub>3 id Some x =\n       map_fun eval\\<Pi>\\<^sub>3 id Some y \\<Longrightarrow>\n       x = y", "by (simp add: eval\\<Pi>\\<^sub>3_inject)"], ["", "lemma d\\<^sub>\\<kappa>_inject: \"\\<And>x y o\\<^sub>1. Some o\\<^sub>1 = d\\<^sub>\\<kappa> x \\<and> Some o\\<^sub>1 = d\\<^sub>\\<kappa> y \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y o\\<^sub>1.\n       Some o\\<^sub>1 = d\\<^sub>\\<kappa> x \\<and>\n       Some o\\<^sub>1 = d\\<^sub>\\<kappa> y \\<Longrightarrow>\n       x = y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y o\\<^sub>1.\n       Some o\\<^sub>1 = d\\<^sub>\\<kappa> x \\<and>\n       Some o\\<^sub>1 = d\\<^sub>\\<kappa> y \\<Longrightarrow>\n       x = y", "fix x :: \\<kappa> and y :: \\<kappa> and o\\<^sub>1 :: \\<nu>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y o\\<^sub>1.\n       Some o\\<^sub>1 = d\\<^sub>\\<kappa> x \\<and>\n       Some o\\<^sub>1 = d\\<^sub>\\<kappa> y \\<Longrightarrow>\n       x = y", "assume \"Some o\\<^sub>1 = d\\<^sub>\\<kappa> x \\<and> Some o\\<^sub>1 = d\\<^sub>\\<kappa> y\""], ["proof (state)\nthis:\n  Some o\\<^sub>1 = d\\<^sub>\\<kappa> x \\<and>\n  Some o\\<^sub>1 = d\\<^sub>\\<kappa> y\n\ngoal (1 subgoal):\n 1. \\<And>x y o\\<^sub>1.\n       Some o\\<^sub>1 = d\\<^sub>\\<kappa> x \\<and>\n       Some o\\<^sub>1 = d\\<^sub>\\<kappa> y \\<Longrightarrow>\n       x = y", "thus \"x = y\""], ["proof (prove)\nusing this:\n  Some o\\<^sub>1 = d\\<^sub>\\<kappa> x \\<and>\n  Some o\\<^sub>1 = d\\<^sub>\\<kappa> y\n\ngoal (1 subgoal):\n 1. x = y", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>o\\<^sub>1 x y.\n       Some o\\<^sub>1 = id x \\<and> Some o\\<^sub>1 = id y \\<Longrightarrow>\n       x = y", "by auto"], ["proof (state)\nthis:\n  x = y\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection\\<open>Introduction Rules for Proper Maps\\<close>"], ["", "text\\<open>\\label{TAO_Semantics_Proper}\\<close>"], ["", "text\\<open>\n\\begin{remark}\n  Every map whose arguments only occur in exemplification\n  expressions is proper.\n\\end{remark}\n\\<close>"], ["", "named_theorems IsProper_intros"], ["", "lemma IsProperInX_intro[IsProper_intros]:\n  \"IsProperInX (\\<lambda> x . \\<chi>\n    \\<comment> \\<open>one place:\\<close> (\\<lambda> F . \\<lparr>F,x\\<rparr>)\n    \\<comment> \\<open>two place:\\<close> (\\<lambda> F . \\<lparr>F,x,x\\<rparr>) (\\<lambda> F a . \\<lparr>F,x,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,a,x\\<rparr>)\n    \\<comment> \\<open>three place three \\<open>x\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,x,x,x\\<rparr>)\n    \\<comment> \\<open>three place two \\<open>x\\<close>:\\<close> (\\<lambda> F a . \\<lparr>F,x,x,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,x,a,x\\<rparr>)\n                            (\\<lambda> F a . \\<lparr>F,a,x,x\\<rparr>)\n    \\<comment> \\<open>three place one \\<open>x\\<close>:\\<close> (\\<lambda> F a b. \\<lparr>F,x,a,b\\<rparr>) (\\<lambda> F a b. \\<lparr>F,a,x,b\\<rparr>)\n                            (\\<lambda> F a b . \\<lparr>F,a,b,x\\<rparr>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. IsProperInX\n     (\\<lambda>x.\n         \\<chi> (\\<lambda>F. \\<lparr>F,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,x\\<rparr>) (\\<lambda>F. exe2 F x)\n          (\\<lambda>F a. \\<lparr>F,a,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,x,x\\<rparr>) (\\<lambda>F. exe3 F x x)\n          (\\<lambda>F a. \\<lparr>F,x,a,x\\<rparr>)\n          (\\<lambda>F a. \\<lparr>F,a,x,x\\<rparr>) (\\<lambda>F. exe3 F x)\n          (\\<lambda>F a. exe3 F a x)\n          (\\<lambda>F a b. \\<lparr>F,a,b,x\\<rparr>))", "unfolding IsProperInX_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_fun (map_fun id eval\\<o>) id\n     (\\<lambda>\\<phi>.\n         \\<forall>x v.\n            (\\<exists>a.\n                \\<nu>\\<upsilon> a = \\<nu>\\<upsilon> x \\<and>\n                \\<phi> (a\\<^sup>P) dj v) =\n            \\<phi> (x\\<^sup>P) dj v)\n     (\\<lambda>x.\n         \\<chi> (\\<lambda>F. \\<lparr>F,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,x\\<rparr>) (\\<lambda>F. exe2 F x)\n          (\\<lambda>F a. \\<lparr>F,a,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,x,x\\<rparr>) (\\<lambda>F. exe3 F x x)\n          (\\<lambda>F a. \\<lparr>F,x,a,x\\<rparr>)\n          (\\<lambda>F a. \\<lparr>F,a,x,x\\<rparr>) (\\<lambda>F. exe3 F x)\n          (\\<lambda>F a. exe3 F a x)\n          (\\<lambda>F a b. \\<lparr>F,a,b,x\\<rparr>))", "by (auto simp: meta_defs meta_aux)"], ["", "lemma IsProperInXY_intro[IsProper_intros]:\n  \"IsProperInXY (\\<lambda> x y . \\<chi>\n    \\<comment> \\<open>only \\<open>x\\<close>\\<close>\n      \\<comment> \\<open>one place:\\<close> (\\<lambda> F . \\<lparr>F,x\\<rparr>)\n      \\<comment> \\<open>two place:\\<close> (\\<lambda> F . \\<lparr>F,x,x\\<rparr>) (\\<lambda> F a . \\<lparr>F,x,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,a,x\\<rparr>)\n      \\<comment> \\<open>three place three \\<open>x\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,x,x,x\\<rparr>)\n      \\<comment> \\<open>three place two \\<open>x\\<close>:\\<close> (\\<lambda> F a . \\<lparr>F,x,x,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,x,a,x\\<rparr>)\n                              (\\<lambda> F a . \\<lparr>F,a,x,x\\<rparr>)\n      \\<comment> \\<open>three place one \\<open>x\\<close>:\\<close> (\\<lambda> F a b. \\<lparr>F,x,a,b\\<rparr>) (\\<lambda> F a b. \\<lparr>F,a,x,b\\<rparr>)\n                              (\\<lambda> F a b . \\<lparr>F,a,b,x\\<rparr>)\n    \\<comment> \\<open>only \\<open>y\\<close>\\<close>\n      \\<comment> \\<open>one place:\\<close> (\\<lambda> F . \\<lparr>F,y\\<rparr>)\n      \\<comment> \\<open>two place:\\<close> (\\<lambda> F . \\<lparr>F,y,y\\<rparr>) (\\<lambda> F a . \\<lparr>F,y,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,a,y\\<rparr>)\n      \\<comment> \\<open>three place three \\<open>y\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,y,y,y\\<rparr>)\n      \\<comment> \\<open>three place two \\<open>y\\<close>:\\<close> (\\<lambda> F a . \\<lparr>F,y,y,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,y,a,y\\<rparr>)\n                              (\\<lambda> F a . \\<lparr>F,a,y,y\\<rparr>)\n      \\<comment> \\<open>three place one \\<open>y\\<close>:\\<close> (\\<lambda> F a b. \\<lparr>F,y,a,b\\<rparr>) (\\<lambda> F a b. \\<lparr>F,a,y,b\\<rparr>)\n                              (\\<lambda> F a b . \\<lparr>F,a,b,y\\<rparr>)\n    \\<comment> \\<open>\\<open>x\\<close> and \\<open>y\\<close>\\<close>\n      \\<comment> \\<open>two place:\\<close> (\\<lambda> F . \\<lparr>F,x,y\\<rparr>) (\\<lambda> F . \\<lparr>F,y,x\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(x,y)\\<close>:\\<close> (\\<lambda> F a . \\<lparr>F,x,y,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,x,a,y\\<rparr>)\n                              (\\<lambda> F a . \\<lparr>F,a,x,y\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(y,x)\\<close>:\\<close> (\\<lambda> F a . \\<lparr>F,y,x,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,y,a,x\\<rparr>)\n                              (\\<lambda> F a . \\<lparr>F,a,y,x\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(x,x,y)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,x,x,y\\<rparr>) (\\<lambda> F . \\<lparr>F,x,y,x\\<rparr>)\n                                (\\<lambda> F . \\<lparr>F,y,x,x\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(x,y,y)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,x,y,y\\<rparr>) (\\<lambda> F . \\<lparr>F,y,x,y\\<rparr>)\n                                (\\<lambda> F . \\<lparr>F,y,y,x\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(x,x,x)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,x,x,x\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(y,y,y)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,y,y,y\\<rparr>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. IsProperInXY\n     (\\<lambda>x y.\n         \\<chi> (\\<lambda>F. \\<lparr>F,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,x\\<rparr>) (\\<lambda>F. exe2 F x)\n          (\\<lambda>F a. \\<lparr>F,a,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,x,x\\<rparr>) (\\<lambda>F. exe3 F x x)\n          (\\<lambda>F a. \\<lparr>F,x,a,x\\<rparr>)\n          (\\<lambda>F a. \\<lparr>F,a,x,x\\<rparr>) (\\<lambda>F. exe3 F x)\n          (\\<lambda>F a. exe3 F a x)\n          (\\<lambda>F a b. \\<lparr>F,a,b,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,y\\<rparr>) (\\<lambda>F. exe2 F y)\n          (\\<lambda>F a. \\<lparr>F,a,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,y,y\\<rparr>) (\\<lambda>F. exe3 F y y)\n          (\\<lambda>F a. \\<lparr>F,y,a,y\\<rparr>)\n          (\\<lambda>F a. \\<lparr>F,a,y,y\\<rparr>) (\\<lambda>F. exe3 F y)\n          (\\<lambda>F a. exe3 F a y)\n          (\\<lambda>F a b. \\<lparr>F,a,b,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,x\\<rparr>) (\\<lambda>F. exe3 F x y)\n          (\\<lambda>F a. \\<lparr>F,x,a,y\\<rparr>)\n          (\\<lambda>F a. \\<lparr>F,a,x,y\\<rparr>) (\\<lambda>F. exe3 F y x)\n          (\\<lambda>F a. \\<lparr>F,y,a,x\\<rparr>)\n          (\\<lambda>F a. \\<lparr>F,a,y,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,x,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,y,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,x,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,y,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,x,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,y,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,x,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,y,y\\<rparr>))", "unfolding IsProperInXY_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_fun (map_fun id (map_fun id eval\\<o>)) id\n     (\\<lambda>\\<phi>.\n         \\<forall>x y v.\n            (\\<exists>a b.\n                \\<nu>\\<upsilon> a = \\<nu>\\<upsilon> x \\<and>\n                \\<nu>\\<upsilon> b = \\<nu>\\<upsilon> y \\<and>\n                \\<phi> (a\\<^sup>P) (b\\<^sup>P) dj v) =\n            \\<phi> (x\\<^sup>P) (y\\<^sup>P) dj v)\n     (\\<lambda>x y.\n         \\<chi> (\\<lambda>F. \\<lparr>F,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,x\\<rparr>) (\\<lambda>F. exe2 F x)\n          (\\<lambda>F a. \\<lparr>F,a,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,x,x\\<rparr>) (\\<lambda>F. exe3 F x x)\n          (\\<lambda>F a. \\<lparr>F,x,a,x\\<rparr>)\n          (\\<lambda>F a. \\<lparr>F,a,x,x\\<rparr>) (\\<lambda>F. exe3 F x)\n          (\\<lambda>F a. exe3 F a x)\n          (\\<lambda>F a b. \\<lparr>F,a,b,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,y\\<rparr>) (\\<lambda>F. exe2 F y)\n          (\\<lambda>F a. \\<lparr>F,a,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,y,y\\<rparr>) (\\<lambda>F. exe3 F y y)\n          (\\<lambda>F a. \\<lparr>F,y,a,y\\<rparr>)\n          (\\<lambda>F a. \\<lparr>F,a,y,y\\<rparr>) (\\<lambda>F. exe3 F y)\n          (\\<lambda>F a. exe3 F a y)\n          (\\<lambda>F a b. \\<lparr>F,a,b,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,x\\<rparr>) (\\<lambda>F. exe3 F x y)\n          (\\<lambda>F a. \\<lparr>F,x,a,y\\<rparr>)\n          (\\<lambda>F a. \\<lparr>F,a,x,y\\<rparr>) (\\<lambda>F. exe3 F y x)\n          (\\<lambda>F a. \\<lparr>F,y,a,x\\<rparr>)\n          (\\<lambda>F a. \\<lparr>F,a,y,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,x,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,y,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,x,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,y,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,x,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,y,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,x,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,y,y\\<rparr>))", "by (auto simp: meta_defs meta_aux)"], ["", "lemma IsProperInXYZ_intro[IsProper_intros]:\n  \"IsProperInXYZ (\\<lambda> x y z . \\<chi>\n    \\<comment> \\<open>only \\<open>x\\<close>\\<close>\n      \\<comment> \\<open>one place:\\<close> (\\<lambda> F . \\<lparr>F,x\\<rparr>)\n      \\<comment> \\<open>two place:\\<close> (\\<lambda> F . \\<lparr>F,x,x\\<rparr>) (\\<lambda> F a . \\<lparr>F,x,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,a,x\\<rparr>)\n      \\<comment> \\<open>three place three \\<open>x\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,x,x,x\\<rparr>)\n      \\<comment> \\<open>three place two \\<open>x\\<close>:\\<close> (\\<lambda> F a . \\<lparr>F,x,x,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,x,a,x\\<rparr>)\n                              (\\<lambda> F a . \\<lparr>F,a,x,x\\<rparr>)\n      \\<comment> \\<open>three place one \\<open>x\\<close>:\\<close> (\\<lambda> F a b. \\<lparr>F,x,a,b\\<rparr>) (\\<lambda> F a b. \\<lparr>F,a,x,b\\<rparr>)\n                              (\\<lambda> F a b . \\<lparr>F,a,b,x\\<rparr>)\n    \\<comment> \\<open>only \\<open>y\\<close>\\<close>\n      \\<comment> \\<open>one place:\\<close> (\\<lambda> F . \\<lparr>F,y\\<rparr>)\n      \\<comment> \\<open>two place:\\<close> (\\<lambda> F . \\<lparr>F,y,y\\<rparr>) (\\<lambda> F a . \\<lparr>F,y,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,a,y\\<rparr>)\n      \\<comment> \\<open>three place three \\<open>y\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,y,y,y\\<rparr>)\n      \\<comment> \\<open>three place two \\<open>y\\<close>:\\<close> (\\<lambda> F a . \\<lparr>F,y,y,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,y,a,y\\<rparr>)\n                              (\\<lambda> F a . \\<lparr>F,a,y,y\\<rparr>)\n      \\<comment> \\<open>three place one \\<open>y\\<close>:\\<close> (\\<lambda> F a b. \\<lparr>F,y,a,b\\<rparr>) (\\<lambda> F a b. \\<lparr>F,a,y,b\\<rparr>)\n                              (\\<lambda> F a b . \\<lparr>F,a,b,y\\<rparr>)\n    \\<comment> \\<open>only \\<open>z\\<close>\\<close>\n      \\<comment> \\<open>one place:\\<close> (\\<lambda> F . \\<lparr>F,z\\<rparr>)\n      \\<comment> \\<open>two place:\\<close> (\\<lambda> F . \\<lparr>F,z,z\\<rparr>) (\\<lambda> F a . \\<lparr>F,z,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,a,z\\<rparr>)\n      \\<comment> \\<open>three place three \\<open>z\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,z,z,z\\<rparr>)\n      \\<comment> \\<open>three place two \\<open>z\\<close>:\\<close> (\\<lambda> F a . \\<lparr>F,z,z,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,z,a,z\\<rparr>)\n                              (\\<lambda> F a . \\<lparr>F,a,z,z\\<rparr>)\n      \\<comment> \\<open>three place one \\<open>z\\<close>:\\<close> (\\<lambda> F a b. \\<lparr>F,z,a,b\\<rparr>) (\\<lambda> F a b. \\<lparr>F,a,z,b\\<rparr>)\n                              (\\<lambda> F a b . \\<lparr>F,a,b,z\\<rparr>)\n    \\<comment> \\<open>\\<open>x\\<close> and \\<open>y\\<close>\\<close>\n      \\<comment> \\<open>two place:\\<close> (\\<lambda> F . \\<lparr>F,x,y\\<rparr>) (\\<lambda> F . \\<lparr>F,y,x\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(x,y)\\<close>:\\<close> (\\<lambda> F a . \\<lparr>F,x,y,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,x,a,y\\<rparr>)\n                              (\\<lambda> F a . \\<lparr>F,a,x,y\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(y,x)\\<close>:\\<close> (\\<lambda> F a . \\<lparr>F,y,x,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,y,a,x\\<rparr>)\n                              (\\<lambda> F a . \\<lparr>F,a,y,x\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(x,x,y)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,x,x,y\\<rparr>) (\\<lambda> F . \\<lparr>F,x,y,x\\<rparr>)\n                                (\\<lambda> F . \\<lparr>F,y,x,x\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(x,y,y)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,x,y,y\\<rparr>) (\\<lambda> F . \\<lparr>F,y,x,y\\<rparr>)\n                                (\\<lambda> F . \\<lparr>F,y,y,x\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(x,x,x)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,x,x,x\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(y,y,y)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,y,y,y\\<rparr>)\n    \\<comment> \\<open>\\<open>x\\<close> and \\<open>z\\<close>\\<close>\n      \\<comment> \\<open>two place:\\<close> (\\<lambda> F . \\<lparr>F,x,z\\<rparr>) (\\<lambda> F . \\<lparr>F,z,x\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(x,z)\\<close>:\\<close> (\\<lambda> F a . \\<lparr>F,x,z,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,x,a,z\\<rparr>)\n                              (\\<lambda> F a . \\<lparr>F,a,x,z\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(z,x)\\<close>:\\<close> (\\<lambda> F a . \\<lparr>F,z,x,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,z,a,x\\<rparr>)\n                              (\\<lambda> F a . \\<lparr>F,a,z,x\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(x,x,z)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,x,x,z\\<rparr>) (\\<lambda> F . \\<lparr>F,x,z,x\\<rparr>)\n                                (\\<lambda> F . \\<lparr>F,z,x,x\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(x,z,z)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,x,z,z\\<rparr>) (\\<lambda> F . \\<lparr>F,z,x,z\\<rparr>)\n                                (\\<lambda> F . \\<lparr>F,z,z,x\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(x,x,x)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,x,x,x\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(z,z,z)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,z,z,z\\<rparr>)\n    \\<comment> \\<open>\\<open>y\\<close> and \\<open>z\\<close>\\<close>\n      \\<comment> \\<open>two place:\\<close> (\\<lambda> F . \\<lparr>F,y,z\\<rparr>) (\\<lambda> F . \\<lparr>F,z,y\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(y,z)\\<close>:\\<close> (\\<lambda> F a . \\<lparr>F,y,z,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,y,a,z\\<rparr>)\n                              (\\<lambda> F a . \\<lparr>F,a,y,z\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(z,y)\\<close>:\\<close> (\\<lambda> F a . \\<lparr>F,z,y,a\\<rparr>) (\\<lambda> F a . \\<lparr>F,z,a,y\\<rparr>)\n                              (\\<lambda> F a . \\<lparr>F,a,z,y\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(y,y,z)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,y,y,z\\<rparr>) (\\<lambda> F . \\<lparr>F,y,z,y\\<rparr>)\n                                (\\<lambda> F . \\<lparr>F,z,y,y\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(y,z,z)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,y,z,z\\<rparr>) (\\<lambda> F . \\<lparr>F,z,y,z\\<rparr>)\n                                (\\<lambda> F . \\<lparr>F,z,z,y\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(y,y,y)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,y,y,y\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(z,z,z)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,z,z,z\\<rparr>)\n    \\<comment> \\<open>\\<open>x y z\\<close>\\<close>\n      \\<comment> \\<open>three place \\<open>(x,\\<dots>)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,x,y,z\\<rparr>) (\\<lambda> F . \\<lparr>F,x,z,y\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(y,\\<dots>)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,y,x,z\\<rparr>) (\\<lambda> F . \\<lparr>F,y,z,x\\<rparr>)\n      \\<comment> \\<open>three place \\<open>(z,\\<dots>)\\<close>:\\<close> (\\<lambda> F . \\<lparr>F,z,x,y\\<rparr>) (\\<lambda> F . \\<lparr>F,z,y,x\\<rparr>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. IsProperInXYZ\n     (\\<lambda>x y z.\n         \\<chi> (\\<lambda>F. \\<lparr>F,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,x\\<rparr>) (\\<lambda>F. exe2 F x)\n          (\\<lambda>F a. \\<lparr>F,a,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,x,x\\<rparr>) (\\<lambda>F. exe3 F x x)\n          (\\<lambda>F a. \\<lparr>F,x,a,x\\<rparr>)\n          (\\<lambda>F a. \\<lparr>F,a,x,x\\<rparr>) (\\<lambda>F. exe3 F x)\n          (\\<lambda>F a. exe3 F a x)\n          (\\<lambda>F a b. \\<lparr>F,a,b,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,y\\<rparr>) (\\<lambda>F. exe2 F y)\n          (\\<lambda>F a. \\<lparr>F,a,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,y,y\\<rparr>) (\\<lambda>F. exe3 F y y)\n          (\\<lambda>F a. \\<lparr>F,y,a,y\\<rparr>)\n          (\\<lambda>F a. \\<lparr>F,a,y,y\\<rparr>) (\\<lambda>F. exe3 F y)\n          (\\<lambda>F a. exe3 F a y)\n          (\\<lambda>F a b. \\<lparr>F,a,b,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,z\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,z,z\\<rparr>) (\\<lambda>F. exe2 F z)\n          (\\<lambda>F a. \\<lparr>F,a,z\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,z,z,z\\<rparr>) (\\<lambda>F. exe3 F z z)\n          (\\<lambda>F a. \\<lparr>F,z,a,z\\<rparr>)\n          (\\<lambda>F a. \\<lparr>F,a,z,z\\<rparr>) (\\<lambda>F. exe3 F z)\n          (\\<lambda>F a. exe3 F a z)\n          (\\<lambda>F a b. \\<lparr>F,a,b,z\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,x\\<rparr>) (\\<lambda>F. exe3 F x y)\n          (\\<lambda>F a. \\<lparr>F,x,a,y\\<rparr>)\n          (\\<lambda>F a. \\<lparr>F,a,x,y\\<rparr>) (\\<lambda>F. exe3 F y x)\n          (\\<lambda>F a. \\<lparr>F,y,a,x\\<rparr>)\n          (\\<lambda>F a. \\<lparr>F,a,y,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,x,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,y,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,x,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,y,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,x,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,y,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,x,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,y,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,z\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,z,x\\<rparr>) (\\<lambda>F. exe3 F x z)\n          (\\<lambda>F a. \\<lparr>F,x,a,z\\<rparr>)\n          (\\<lambda>F a. \\<lparr>F,a,x,z\\<rparr>) (\\<lambda>F. exe3 F z x)\n          (\\<lambda>F a. \\<lparr>F,z,a,x\\<rparr>)\n          (\\<lambda>F a. \\<lparr>F,a,z,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,x,z\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,z,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,z,x,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,z,z\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,z,x,z\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,z,z,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,x,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,z,z,z\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,z\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,z,y\\<rparr>) (\\<lambda>F. exe3 F y z)\n          (\\<lambda>F a. \\<lparr>F,y,a,z\\<rparr>)\n          (\\<lambda>F a. \\<lparr>F,a,y,z\\<rparr>) (\\<lambda>F. exe3 F z y)\n          (\\<lambda>F a. \\<lparr>F,z,a,y\\<rparr>)\n          (\\<lambda>F a. \\<lparr>F,a,z,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,y,z\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,z,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,z,y,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,z,z\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,z,y,z\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,z,z,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,y,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,z,z,z\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,y,z\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,z,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,x,z\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,z,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,z,x,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,z,y,x\\<rparr>))", "unfolding IsProperInXYZ_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_fun (map_fun id (map_fun id (map_fun id eval\\<o>))) id\n     (\\<lambda>\\<phi>.\n         \\<forall>x y z v.\n            (\\<exists>a b c.\n                \\<nu>\\<upsilon> a = \\<nu>\\<upsilon> x \\<and>\n                \\<nu>\\<upsilon> b = \\<nu>\\<upsilon> y \\<and>\n                \\<nu>\\<upsilon> c = \\<nu>\\<upsilon> z \\<and>\n                \\<phi> (a\\<^sup>P) (b\\<^sup>P) (c\\<^sup>P) dj v) =\n            \\<phi> (x\\<^sup>P) (y\\<^sup>P) (z\\<^sup>P) dj v)\n     (\\<lambda>x y z.\n         \\<chi> (\\<lambda>F. \\<lparr>F,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,x\\<rparr>) (\\<lambda>F. exe2 F x)\n          (\\<lambda>F a. \\<lparr>F,a,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,x,x\\<rparr>) (\\<lambda>F. exe3 F x x)\n          (\\<lambda>F a. \\<lparr>F,x,a,x\\<rparr>)\n          (\\<lambda>F a. \\<lparr>F,a,x,x\\<rparr>) (\\<lambda>F. exe3 F x)\n          (\\<lambda>F a. exe3 F a x)\n          (\\<lambda>F a b. \\<lparr>F,a,b,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,y\\<rparr>) (\\<lambda>F. exe2 F y)\n          (\\<lambda>F a. \\<lparr>F,a,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,y,y\\<rparr>) (\\<lambda>F. exe3 F y y)\n          (\\<lambda>F a. \\<lparr>F,y,a,y\\<rparr>)\n          (\\<lambda>F a. \\<lparr>F,a,y,y\\<rparr>) (\\<lambda>F. exe3 F y)\n          (\\<lambda>F a. exe3 F a y)\n          (\\<lambda>F a b. \\<lparr>F,a,b,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,z\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,z,z\\<rparr>) (\\<lambda>F. exe2 F z)\n          (\\<lambda>F a. \\<lparr>F,a,z\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,z,z,z\\<rparr>) (\\<lambda>F. exe3 F z z)\n          (\\<lambda>F a. \\<lparr>F,z,a,z\\<rparr>)\n          (\\<lambda>F a. \\<lparr>F,a,z,z\\<rparr>) (\\<lambda>F. exe3 F z)\n          (\\<lambda>F a. exe3 F a z)\n          (\\<lambda>F a b. \\<lparr>F,a,b,z\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,x\\<rparr>) (\\<lambda>F. exe3 F x y)\n          (\\<lambda>F a. \\<lparr>F,x,a,y\\<rparr>)\n          (\\<lambda>F a. \\<lparr>F,a,x,y\\<rparr>) (\\<lambda>F. exe3 F y x)\n          (\\<lambda>F a. \\<lparr>F,y,a,x\\<rparr>)\n          (\\<lambda>F a. \\<lparr>F,a,y,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,x,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,y,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,x,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,y,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,x,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,y,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,x,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,y,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,z\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,z,x\\<rparr>) (\\<lambda>F. exe3 F x z)\n          (\\<lambda>F a. \\<lparr>F,x,a,z\\<rparr>)\n          (\\<lambda>F a. \\<lparr>F,a,x,z\\<rparr>) (\\<lambda>F. exe3 F z x)\n          (\\<lambda>F a. \\<lparr>F,z,a,x\\<rparr>)\n          (\\<lambda>F a. \\<lparr>F,a,z,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,x,z\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,z,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,z,x,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,z,z\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,z,x,z\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,z,z,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,x,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,z,z,z\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,z\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,z,y\\<rparr>) (\\<lambda>F. exe3 F y z)\n          (\\<lambda>F a. \\<lparr>F,y,a,z\\<rparr>)\n          (\\<lambda>F a. \\<lparr>F,a,y,z\\<rparr>) (\\<lambda>F. exe3 F z y)\n          (\\<lambda>F a. \\<lparr>F,z,a,y\\<rparr>)\n          (\\<lambda>F a. \\<lparr>F,a,z,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,y,z\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,z,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,z,y,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,z,z\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,z,y,z\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,z,z,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,y,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,z,z,z\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,y,z\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,x,z,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,x,z\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,y,z,x\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,z,x,y\\<rparr>)\n          (\\<lambda>F. \\<lparr>F,z,y,x\\<rparr>))", "by (auto simp: meta_defs meta_aux)"], ["", "method show_proper = (fast intro: IsProper_intros)"], ["", "subsection\\<open>Validity Syntax\\<close>"], ["", "text\\<open>\\label{TAO_Semantics_Validity}\\<close>"], ["", "(* disable list syntax [] to replace it with truth evaluation *)\n(*<*)"], ["", "no_syntax \"_list\" :: \"args \\<Rightarrow> 'a list\" (\"[(_)]\")"], ["", "(*>*) \n(*<*)"], ["", "no_syntax \"__listcompr\" :: \"args \\<Rightarrow> 'a list\" (\"[(_)]\")"], ["", "(*>*)"], ["", "abbreviation validity_in :: \"\\<o>\\<Rightarrow>i\\<Rightarrow>bool\" (\"[_ in _]\" [1]) where\n  \"validity_in \\<equiv> \\<lambda> \\<phi> v . v \\<Turnstile> \\<phi>\""], ["", "definition actual_validity :: \"\\<o>\\<Rightarrow>bool\" (\"[_]\" [1]) where\n  \"actual_validity \\<equiv> \\<lambda> \\<phi> . dw \\<Turnstile> \\<phi>\""], ["", "definition necessary_validity :: \"\\<o>\\<Rightarrow>bool\" (\"\\<box>[_]\" [1]) where\n  \"necessary_validity \\<equiv> \\<lambda> \\<phi> . \\<forall> v . (v \\<Turnstile> \\<phi>)\""], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}