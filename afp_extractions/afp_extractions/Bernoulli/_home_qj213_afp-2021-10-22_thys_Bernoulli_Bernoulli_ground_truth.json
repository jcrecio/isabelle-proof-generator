{"file_name": "/home/qj213/afp-2021-10-22/thys/Bernoulli/Bernoulli.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Bernoulli", "problem_names": ["lemma power_numeral_reduce: \"a ^ numeral n = a * a ^ pred_numeral n\"", "lemma fact_diff_Suc: \"n < Suc m \\<Longrightarrow> fact (Suc m - n) = of_nat (Suc m - n) * fact (m - n)\"", "lemma of_nat_binomial_Suc:\n  assumes \"k \\<le> n\"\n  shows   \"(of_nat (Suc n choose k) :: 'a :: field_char_0) = \n             of_nat (Suc n) / of_nat (Suc n - k) * of_nat (n choose k)\"", "lemma integrals_eq:\n  assumes \"f 0 = g 0\"\n  assumes \"\\<And> x. ((\\<lambda>x. f x - g x) has_real_derivative 0) (at x)\"\n  shows \"f x = g x\"", "lemma sum_diff: \"((\\<Sum>i\\<le>n::nat. f (i + 1) - f i)::'a::field) = f (n + 1) - f 0\"", "lemma Rats_sum: \"(\\<And>x. x \\<in> A \\<Longrightarrow> f x \\<in> \\<rat>) \\<Longrightarrow> sum f A \\<in> \\<rat>\"", "lemmas bernoulli_0 [simp] = bernoulli.simps(1)", "lemmas bernoulli_Suc = bernoulli.simps(2)", "lemma bernoulli_1 [simp]: \"bernoulli 1 = -1/2\"", "lemma bernoulli_Suc_0 [simp]: \"bernoulli (Suc 0) = -1/2\"", "lemma bernoulli'_0 [simp]: \"bernoulli' 0 = 1\"", "lemma bernoulli'_1 [simp]: \"bernoulli' (Suc 0) = 1/2\"", "lemma bernoulli_conv_bernoulli': \"n \\<noteq> 1 \\<Longrightarrow> bernoulli n = bernoulli' n\"", "lemma bernoulli'_conv_bernoulli: \"n \\<noteq> 1 \\<Longrightarrow> bernoulli' n = bernoulli n\"", "lemma bernoulli_conv_bernoulli'_if: \n    \"n \\<noteq> 1 \\<Longrightarrow> bernoulli n = (if n = 1 then -1/2 else bernoulli' n)\"", "lemma bernoulli_in_Rats: \"bernoulli n \\<in> \\<rat>\"", "lemma bernoulli'_in_Rats: \"bernoulli' n \\<in> \\<rat>\"", "lemma bernpoly_altdef:\n  \"bernpoly n = (\\<lambda>x. \\<Sum>k\\<le>n. of_nat (n choose k) * of_real (bernoulli (n - k)) * x ^ k)\"", "lemma bernoulli_Suc': \n  \"bernoulli (Suc n) = -1/(real n + 2) * (\\<Sum>k\\<le>n. real (n + 2 choose (k + 2)) * bernoulli (n - k))\"", "lemma bernpoly_0 [simp]: \"bernpoly n 0 = (of_real (bernoulli n) :: 'a :: real_algebra_1)\"", "lemma continuous_on_bernpoly [continuous_intros]: \n  \"continuous_on A (bernpoly n :: 'a \\<Rightarrow> 'a :: real_normed_algebra_1)\"", "lemma isCont_bernpoly [continuous_intros]: \n  \"isCont (bernpoly n :: 'a \\<Rightarrow> 'a :: real_normed_algebra_1) x\"", "lemma has_field_derivative_bernpoly:\n  \"(bernpoly (Suc n) has_field_derivative \n     (of_nat (n + 1) * bernpoly n x :: 'a :: real_normed_field)) (at x)\"", "lemmas has_field_derivative_bernpoly' [derivative_intros] =\n  DERIV_chain'[OF _ has_field_derivative_bernpoly]", "lemma sum_binomial_times_bernoulli:\n  \"(\\<Sum>k\\<le>n. ((Suc n) choose k) * bernoulli k) = (if n = 0 then 1 else 0)\"", "lemma sum_binomial_times_bernoulli':\n  \"(\\<Sum>k<n. real (n choose k) * bernoulli k) = (if n = 1 then 1 else 0)\"", "lemma binomial_unroll:\n  \"n > 0 \\<Longrightarrow> (n choose k) = (if k = 0 then 1 else (n - 1) choose (k - 1) + ((n - 1) choose k))\"", "lemma sum_unroll:\n  \"(\\<Sum>k\\<le>n::nat. f k) = (if n = 0 then f 0 else f n + (\\<Sum>k\\<le>n - 1. f k))\"", "lemma bernoulli_unroll:\n  \"n > 0 \\<Longrightarrow> bernoulli n = - 1 / (real n + 1) * (\\<Sum>k\\<le>n - 1. real (n + 1 choose k) * bernoulli k)\"", "lemmas bernoulli_unroll_all = binomial_unroll bernoulli_unroll sum_unroll bernpoly_def", "lemma bernpoly_1_1: \"bernpoly 1 1 = of_real (1/2)\"", "lemma diff_bernpoly:\n  fixes x :: real\n  shows \"bernpoly n (x + 1) - bernpoly n x = of_nat n * x ^ (n - 1)\"", "lemma bernpoly_of_real: \"bernpoly n (of_real x) = of_real (bernpoly n x)\"", "lemma bernpoly_1:\n  assumes \"n \\<noteq> 1\"\n  shows   \"bernpoly n 1 = of_real (bernoulli n)\"", "lemma bernpoly_1': \"bernpoly n 1 = of_real (bernoulli' n)\"", "theorem sum_of_powers: \n  \"(\\<Sum>k\\<le>n::nat. (real k) ^ m) = (bernpoly (Suc m) (n + 1) - bernpoly (Suc m) 0) / (m + 1)\"", "lemma sum_of_powers_nat_aux: \n  assumes \"real a = b / c\" \"real b' = b\" \"real c' = c\"\n  shows   \"a = b' div c'\"", "theorem sum_of_squares: \"real (\\<Sum>k\\<le>n::nat. k ^ 2) = real (2 * n ^ 3 + 3 * n ^ 2 + n) / 6\"", "theorem sum_of_cubes: \"real (\\<Sum>k\\<le>n::nat. k ^ 3) = real (n ^ 2 + n) ^ 2 / 4\""], "translations": [["", "lemma power_numeral_reduce: \"a ^ numeral n = a * a ^ pred_numeral n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a ^ numeral n = a * a ^ pred_numeral n", "by (simp only: numeral_eq_Suc power_Suc)"], ["", "lemma fact_diff_Suc: \"n < Suc m \\<Longrightarrow> fact (Suc m - n) = of_nat (Suc m - n) * fact (m - n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < Suc m \\<Longrightarrow>\n    fact (Suc m - n) = of_nat (Suc m - n) * fact (m - n)", "by (subst fact_reduce) auto"], ["", "lemma of_nat_binomial_Suc:\n  assumes \"k \\<le> n\"\n  shows   \"(of_nat (Suc n choose k) :: 'a :: field_char_0) = \n             of_nat (Suc n) / of_nat (Suc n - k) * of_nat (n choose k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_nat (Suc n choose k) =\n    of_nat (Suc n) / of_nat (Suc n - k) * of_nat (n choose k)", "using assms"], ["proof (prove)\nusing this:\n  k \\<le> n\n\ngoal (1 subgoal):\n 1. of_nat (Suc n choose k) =\n    of_nat (Suc n) / of_nat (Suc n - k) * of_nat (n choose k)", "by (simp add: binomial_fact divide_simps fact_diff_Suc of_nat_diff del: of_nat_Suc)"], ["", "lemma integrals_eq:\n  assumes \"f 0 = g 0\"\n  assumes \"\\<And> x. ((\\<lambda>x. f x - g x) has_real_derivative 0) (at x)\"\n  shows \"f x = g x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x = g x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f x = g x", "show \"f x = g x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x = g x", "proof (cases \"x \\<noteq> 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<noteq> 0 \\<Longrightarrow> f x = g x\n 2. \\<not> x \\<noteq> 0 \\<Longrightarrow> f x = g x", "case True"], ["proof (state)\nthis:\n  x \\<noteq> 0\n\ngoal (2 subgoals):\n 1. x \\<noteq> 0 \\<Longrightarrow> f x = g x\n 2. \\<not> x \\<noteq> 0 \\<Longrightarrow> f x = g x", "from assms DERIV_const_ratio_const[OF this, of \"\\<lambda>x. f x - g x\" 0]"], ["proof (chain)\npicking this:\n  f 0 = g 0\n  ((\\<lambda>x. f x - g x) has_real_derivative 0) (at ?x)\n  (\\<And>x.\n      ((\\<lambda>x. f x - g x) has_real_derivative 0)\n       (at x)) \\<Longrightarrow>\n  f 0 - g 0 - (f x - g x) = (0 - x) * 0", "show ?thesis"], ["proof (prove)\nusing this:\n  f 0 = g 0\n  ((\\<lambda>x. f x - g x) has_real_derivative 0) (at ?x)\n  (\\<And>x.\n      ((\\<lambda>x. f x - g x) has_real_derivative 0)\n       (at x)) \\<Longrightarrow>\n  f 0 - g 0 - (f x - g x) = (0 - x) * 0\n\ngoal (1 subgoal):\n 1. f x = g x", "by auto"], ["proof (state)\nthis:\n  f x = g x\n\ngoal (1 subgoal):\n 1. \\<not> x \\<noteq> 0 \\<Longrightarrow> f x = g x", "qed (simp add: assms)"], ["proof (state)\nthis:\n  f x = g x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_diff: \"((\\<Sum>i\\<le>n::nat. f (i + 1) - f i)::'a::field) = f (n + 1) - f 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>n. f (i + 1) - f i) = f (n + 1) - f 0", "by (induct n) (auto simp add: field_simps)"], ["", "lemma Rats_sum: \"(\\<And>x. x \\<in> A \\<Longrightarrow> f x \\<in> \\<rat>) \\<Longrightarrow> sum f A \\<in> \\<rat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x \\<in> A \\<Longrightarrow> f x \\<in> \\<rat>) \\<Longrightarrow>\n    sum f A \\<in> \\<rat>", "by (induction A rule: infinite_finite_induct) simp_all"], ["", "subsection \\<open>Bernoulli Numbers and Bernoulli Polynomials\\<close>"], ["", "declare sum.cong [fundef_cong]"], ["", "fun bernoulli :: \"nat \\<Rightarrow> real\"\nwhere\n  \"bernoulli 0 = (1::real)\"\n| \"bernoulli (Suc n) =  (-1 / (n + 2)) * (\\<Sum>k \\<le> n. ((n + 2 choose k) * bernoulli k))\""], ["", "declare bernoulli.simps[simp del]"], ["", "lemmas bernoulli_0 [simp] = bernoulli.simps(1)"], ["", "lemmas bernoulli_Suc = bernoulli.simps(2)"], ["", "lemma bernoulli_1 [simp]: \"bernoulli 1 = -1/2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bernoulli 1 = - 1 / 2", "by (simp add: bernoulli_Suc)"], ["", "lemma bernoulli_Suc_0 [simp]: \"bernoulli (Suc 0) = -1/2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bernoulli (Suc 0) = - 1 / 2", "by (simp add: bernoulli_Suc)"], ["", "text \\<open>\n  The ``normal'' Bernoulli numbers are the negative Bernoulli numbers $B_n^{-}$ we just defined\n  (so called because $B_1^{-} = -\\frac{1}{2}$). There is also another convention, the \n  positive Bernoulli numbers $B_n^{+}$, which differ from the negative ones only in that \n  $B_1^{+} = \\frac{1}{2}$. Both conventions have their justification, since a number of theorems \n  are easier to state with one than the other.\n\\<close>"], ["", "definition bernoulli' where\n  \"bernoulli' n = (if n = 1 then 1/2 else bernoulli n)\""], ["", "lemma bernoulli'_0 [simp]: \"bernoulli' 0 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bernoulli' 0 = 1", "by (simp add: bernoulli'_def)"], ["", "lemma bernoulli'_1 [simp]: \"bernoulli' (Suc 0) = 1/2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bernoulli' (Suc 0) = 1 / 2", "by (simp add: bernoulli'_def)"], ["", "lemma bernoulli_conv_bernoulli': \"n \\<noteq> 1 \\<Longrightarrow> bernoulli n = bernoulli' n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<noteq> 1 \\<Longrightarrow> bernoulli n = bernoulli' n", "by (simp add: bernoulli'_def)"], ["", "lemma bernoulli'_conv_bernoulli: \"n \\<noteq> 1 \\<Longrightarrow> bernoulli' n = bernoulli n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<noteq> 1 \\<Longrightarrow> bernoulli' n = bernoulli n", "by (simp add: bernoulli'_def)"], ["", "lemma bernoulli_conv_bernoulli'_if: \n    \"n \\<noteq> 1 \\<Longrightarrow> bernoulli n = (if n = 1 then -1/2 else bernoulli' n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<noteq> 1 \\<Longrightarrow>\n    bernoulli n = (if n = 1 then - 1 / 2 else bernoulli' n)", "by (simp add: bernoulli'_def)"], ["", "lemma bernoulli_in_Rats: \"bernoulli n \\<in> \\<rat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bernoulli n \\<in> \\<rat>", "proof (induction n rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<And>y.\n           y < x \\<Longrightarrow>\n           bernoulli y \\<in> \\<rat>) \\<Longrightarrow>\n       bernoulli x \\<in> \\<rat>", "case (less n)"], ["proof (state)\nthis:\n  ?y < n \\<Longrightarrow> bernoulli ?y \\<in> \\<rat>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<And>y.\n           y < x \\<Longrightarrow>\n           bernoulli y \\<in> \\<rat>) \\<Longrightarrow>\n       bernoulli x \\<in> \\<rat>", "thus ?case"], ["proof (prove)\nusing this:\n  ?y < n \\<Longrightarrow> bernoulli ?y \\<in> \\<rat>\n\ngoal (1 subgoal):\n 1. bernoulli n \\<in> \\<rat>", "by (cases n) (auto simp: bernoulli_Suc intro!: Rats_sum Rats_divide)"], ["proof (state)\nthis:\n  bernoulli n \\<in> \\<rat>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bernoulli'_in_Rats: \"bernoulli' n \\<in> \\<rat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bernoulli' n \\<in> \\<rat>", "by (simp add: bernoulli'_def bernoulli_in_Rats)"], ["", "definition bernpoly :: \"nat \\<Rightarrow> 'a \\<Rightarrow> 'a :: real_algebra_1\" where\n  \"bernpoly n = (\\<lambda>x. \\<Sum>k \\<le> n. of_nat (n choose k) * of_real (bernoulli k) * x ^ (n - k))\""], ["", "lemma bernpoly_altdef:\n  \"bernpoly n = (\\<lambda>x. \\<Sum>k\\<le>n. of_nat (n choose k) * of_real (bernoulli (n - k)) * x ^ k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bernpoly n =\n    (\\<lambda>x.\n        \\<Sum>k\\<le>n.\n           of_nat (n choose k) * of_real (bernoulli (n - k)) * x ^ k)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       bernpoly n x =\n       (\\<Sum>k\\<le>n.\n           of_nat (n choose k) * of_real (bernoulli (n - k)) * x ^ k)", "fix x :: 'a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       bernpoly n x =\n       (\\<Sum>k\\<le>n.\n           of_nat (n choose k) * of_real (bernoulli (n - k)) * x ^ k)", "have \"bernpoly n x = (\\<Sum>k\\<le>n. of_nat (n choose (n - k)) * \n          of_real (bernoulli (n - k)) * x ^ (n - (n - k)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bernpoly n x =\n    (\\<Sum>k\\<le>n.\n        of_nat (n choose (n - k)) * of_real (bernoulli (n - k)) *\n        x ^ (n - (n - k)))", "unfolding bernpoly_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>n.\n        of_nat (n choose k) * of_real (bernoulli k) * x ^ (n - k)) =\n    (\\<Sum>k\\<le>n.\n        of_nat (n choose (n - k)) * of_real (bernoulli (n - k)) *\n        x ^ (n - (n - k)))", "by (rule sum.reindex_bij_witness[of _ \"\\<lambda>k. n - k\" \"\\<lambda>k. n - k\"]) simp_all"], ["proof (state)\nthis:\n  bernpoly n x =\n  (\\<Sum>k\\<le>n.\n      of_nat (n choose (n - k)) * of_real (bernoulli (n - k)) *\n      x ^ (n - (n - k)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       bernpoly n x =\n       (\\<Sum>k\\<le>n.\n           of_nat (n choose k) * of_real (bernoulli (n - k)) * x ^ k)", "also"], ["proof (state)\nthis:\n  bernpoly n x =\n  (\\<Sum>k\\<le>n.\n      of_nat (n choose (n - k)) * of_real (bernoulli (n - k)) *\n      x ^ (n - (n - k)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       bernpoly n x =\n       (\\<Sum>k\\<le>n.\n           of_nat (n choose k) * of_real (bernoulli (n - k)) * x ^ k)", "have \"\\<dots> = (\\<Sum>k\\<le>n. of_nat (n choose k) * of_real (bernoulli (n - k)) * x ^ k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>n.\n        of_nat (n choose (n - k)) * of_real (bernoulli (n - k)) *\n        x ^ (n - (n - k))) =\n    (\\<Sum>k\\<le>n.\n        of_nat (n choose k) * of_real (bernoulli (n - k)) * x ^ k)", "by (intro sum.cong refl) (simp_all add: binomial_symmetric [symmetric])"], ["proof (state)\nthis:\n  (\\<Sum>k\\<le>n.\n      of_nat (n choose (n - k)) * of_real (bernoulli (n - k)) *\n      x ^ (n - (n - k))) =\n  (\\<Sum>k\\<le>n. of_nat (n choose k) * of_real (bernoulli (n - k)) * x ^ k)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       bernpoly n x =\n       (\\<Sum>k\\<le>n.\n           of_nat (n choose k) * of_real (bernoulli (n - k)) * x ^ k)", "finally"], ["proof (chain)\npicking this:\n  bernpoly n x =\n  (\\<Sum>k\\<le>n. of_nat (n choose k) * of_real (bernoulli (n - k)) * x ^ k)", "show \"bernpoly n x = \\<dots>\""], ["proof (prove)\nusing this:\n  bernpoly n x =\n  (\\<Sum>k\\<le>n. of_nat (n choose k) * of_real (bernoulli (n - k)) * x ^ k)\n\ngoal (1 subgoal):\n 1. bernpoly n x =\n    (\\<Sum>k\\<le>n.\n        of_nat (n choose k) * of_real (bernoulli (n - k)) * x ^ k)", "."], ["proof (state)\nthis:\n  bernpoly n x =\n  (\\<Sum>k\\<le>n. of_nat (n choose k) * of_real (bernoulli (n - k)) * x ^ k)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bernoulli_Suc': \n  \"bernoulli (Suc n) = -1/(real n + 2) * (\\<Sum>k\\<le>n. real (n + 2 choose (k + 2)) * bernoulli (n - k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bernoulli (Suc n) =\n    - 1 / (real n + 2) *\n    (\\<Sum>k\\<le>n. real (n + 2 choose (k + 2)) * bernoulli (n - k))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. bernoulli (Suc n) =\n    - 1 / (real n + 2) *\n    (\\<Sum>k\\<le>n. real (n + 2 choose (k + 2)) * bernoulli (n - k))", "have \"bernoulli (Suc n) = - 1 / (real n + 2) * (\\<Sum>k\\<le>n. real (n + 2 choose k) * bernoulli k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bernoulli (Suc n) =\n    - 1 / (real n + 2) *\n    (\\<Sum>k\\<le>n. real (n + 2 choose k) * bernoulli k)", "unfolding bernoulli.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. - 1 / (real n + 2) *\n    (\\<Sum>k\\<le>n. real (n + 2 choose k) * bernoulli k) =\n    - 1 / (real n + 2) *\n    (\\<Sum>k\\<le>n. real (n + 2 choose k) * bernoulli k)", ".."], ["proof (state)\nthis:\n  bernoulli (Suc n) =\n  - 1 / (real n + 2) * (\\<Sum>k\\<le>n. real (n + 2 choose k) * bernoulli k)\n\ngoal (1 subgoal):\n 1. bernoulli (Suc n) =\n    - 1 / (real n + 2) *\n    (\\<Sum>k\\<le>n. real (n + 2 choose (k + 2)) * bernoulli (n - k))", "also"], ["proof (state)\nthis:\n  bernoulli (Suc n) =\n  - 1 / (real n + 2) * (\\<Sum>k\\<le>n. real (n + 2 choose k) * bernoulli k)\n\ngoal (1 subgoal):\n 1. bernoulli (Suc n) =\n    - 1 / (real n + 2) *\n    (\\<Sum>k\\<le>n. real (n + 2 choose (k + 2)) * bernoulli (n - k))", "have \"(\\<Sum>k\\<le>n. real (n + 2 choose k) * bernoulli k) = \n               (\\<Sum>k\\<le>n. real (n + 2 choose (n - k)) * bernoulli (n - k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>n. real (n + 2 choose k) * bernoulli k) =\n    (\\<Sum>k\\<le>n. real (n + 2 choose (n - k)) * bernoulli (n - k))", "by (rule sum.reindex_bij_witness[of _ \"\\<lambda>k. n - k\" \"\\<lambda>k. n - k\"]) simp_all"], ["proof (state)\nthis:\n  (\\<Sum>k\\<le>n. real (n + 2 choose k) * bernoulli k) =\n  (\\<Sum>k\\<le>n. real (n + 2 choose (n - k)) * bernoulli (n - k))\n\ngoal (1 subgoal):\n 1. bernoulli (Suc n) =\n    - 1 / (real n + 2) *\n    (\\<Sum>k\\<le>n. real (n + 2 choose (k + 2)) * bernoulli (n - k))", "also"], ["proof (state)\nthis:\n  (\\<Sum>k\\<le>n. real (n + 2 choose k) * bernoulli k) =\n  (\\<Sum>k\\<le>n. real (n + 2 choose (n - k)) * bernoulli (n - k))\n\ngoal (1 subgoal):\n 1. bernoulli (Suc n) =\n    - 1 / (real n + 2) *\n    (\\<Sum>k\\<le>n. real (n + 2 choose (k + 2)) * bernoulli (n - k))", "have \"\\<dots> = (\\<Sum>k\\<le>n. real (n + 2 choose (k + 2)) * bernoulli (n - k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>n. real (n + 2 choose (n - k)) * bernoulli (n - k)) =\n    (\\<Sum>k\\<le>n. real (n + 2 choose (k + 2)) * bernoulli (n - k))", "by (intro sum.cong refl, subst binomial_symmetric) simp_all"], ["proof (state)\nthis:\n  (\\<Sum>k\\<le>n. real (n + 2 choose (n - k)) * bernoulli (n - k)) =\n  (\\<Sum>k\\<le>n. real (n + 2 choose (k + 2)) * bernoulli (n - k))\n\ngoal (1 subgoal):\n 1. bernoulli (Suc n) =\n    - 1 / (real n + 2) *\n    (\\<Sum>k\\<le>n. real (n + 2 choose (k + 2)) * bernoulli (n - k))", "finally"], ["proof (chain)\npicking this:\n  bernoulli (Suc n) =\n  - 1 / (real n + 2) *\n  (\\<Sum>k\\<le>n. real (n + 2 choose (k + 2)) * bernoulli (n - k))", "show ?thesis"], ["proof (prove)\nusing this:\n  bernoulli (Suc n) =\n  - 1 / (real n + 2) *\n  (\\<Sum>k\\<le>n. real (n + 2 choose (k + 2)) * bernoulli (n - k))\n\ngoal (1 subgoal):\n 1. bernoulli (Suc n) =\n    - 1 / (real n + 2) *\n    (\\<Sum>k\\<le>n. real (n + 2 choose (k + 2)) * bernoulli (n - k))", "."], ["proof (state)\nthis:\n  bernoulli (Suc n) =\n  - 1 / (real n + 2) *\n  (\\<Sum>k\\<le>n. real (n + 2 choose (k + 2)) * bernoulli (n - k))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Basic Observations on Bernoulli Polynomials\\<close>"], ["", "lemma bernpoly_0 [simp]: \"bernpoly n 0 = (of_real (bernoulli n) :: 'a :: real_algebra_1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bernpoly n (0::'a) = of_real (bernoulli n)", "proof (cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> bernpoly n (0::'a) = of_real (bernoulli n)\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       bernpoly n (0::'a) = of_real (bernoulli n)", "case 0"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> bernpoly n (0::'a) = of_real (bernoulli n)\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       bernpoly n (0::'a) = of_real (bernoulli n)", "then"], ["proof (chain)\npicking this:\n  n = 0", "show \"bernpoly n 0 = of_real (bernoulli n)\""], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. bernpoly n (0::'b) = of_real (bernoulli n)", "unfolding bernpoly_def bernoulli.simps"], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>n.\n        of_nat (n choose k) * of_real (bernoulli k) * (0::'b) ^ (n - k)) =\n    of_real (bernoulli n)", "by auto"], ["proof (state)\nthis:\n  bernpoly n (0::?'b1) = of_real (bernoulli n)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       bernpoly n (0::'a) = of_real (bernoulli n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       bernpoly n (0::'a) = of_real (bernoulli n)", "case (Suc n')"], ["proof (state)\nthis:\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       bernpoly n (0::'a) = of_real (bernoulli n)", "have \"(\\<Sum>k\\<le>n'. of_nat (Suc n' choose k) * of_real (bernoulli k) * 0 ^ (Suc n' - k)) = (0::'a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>n'.\n        of_nat (Suc n' choose k) * of_real (bernoulli k) *\n        (0::'a) ^ (Suc n' - k)) =\n    (0::'a)", "proof (intro sum.neutral ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {..n'} \\<Longrightarrow>\n       of_nat (Suc n' choose x) * of_real (bernoulli x) *\n       (0::'a) ^ (Suc n' - x) =\n       (0::'a)", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {..n'} \\<Longrightarrow>\n       of_nat (Suc n' choose x) * of_real (bernoulli x) *\n       (0::'a) ^ (Suc n' - x) =\n       (0::'a)", "assume \"k \\<in> {..n'}\""], ["proof (state)\nthis:\n  k \\<in> {..n'}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {..n'} \\<Longrightarrow>\n       of_nat (Suc n' choose x) * of_real (bernoulli x) *\n       (0::'a) ^ (Suc n' - x) =\n       (0::'a)", "thus \"of_nat (Suc n' choose k) * of_real (bernoulli k) * (0::'a) ^ (Suc n' - k) = 0\""], ["proof (prove)\nusing this:\n  k \\<in> {..n'}\n\ngoal (1 subgoal):\n 1. of_nat (Suc n' choose k) * of_real (bernoulli k) *\n    (0::'a) ^ (Suc n' - k) =\n    (0::'a)", "by (cases \"Suc n' - k\") auto"], ["proof (state)\nthis:\n  of_nat (Suc n' choose k) * of_real (bernoulli k) *\n  (0::'a) ^ (Suc n' - k) =\n  (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>k\\<le>n'.\n      of_nat (Suc n' choose k) * of_real (bernoulli k) *\n      (0::'a) ^ (Suc n' - k)) =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       bernpoly n (0::'a) = of_real (bernoulli n)", "with Suc"], ["proof (chain)\npicking this:\n  n = Suc n'\n  (\\<Sum>k\\<le>n'.\n      of_nat (Suc n' choose k) * of_real (bernoulli k) *\n      (0::'a) ^ (Suc n' - k)) =\n  (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  n = Suc n'\n  (\\<Sum>k\\<le>n'.\n      of_nat (Suc n' choose k) * of_real (bernoulli k) *\n      (0::'a) ^ (Suc n' - k)) =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. bernpoly n (0::'a) = of_real (bernoulli n)", "unfolding bernpoly_def"], ["proof (prove)\nusing this:\n  n = Suc n'\n  (\\<Sum>k\\<le>n'.\n      of_nat (Suc n' choose k) * of_real (bernoulli k) *\n      (0::'a) ^ (Suc n' - k)) =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>n.\n        of_nat (n choose k) * of_real (bernoulli k) * (0::'a) ^ (n - k)) =\n    of_real (bernoulli n)", "by simp"], ["proof (state)\nthis:\n  bernpoly n (0::'a) = of_real (bernoulli n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma continuous_on_bernpoly [continuous_intros]: \n  \"continuous_on A (bernpoly n :: 'a \\<Rightarrow> 'a :: real_normed_algebra_1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on A (bernpoly n)", "unfolding bernpoly_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on A\n     (\\<lambda>x.\n         \\<Sum>k\\<le>n.\n            of_nat (n choose k) * of_real (bernoulli k) * x ^ (n - k))", "by (auto intro!: continuous_intros)"], ["", "lemma isCont_bernpoly [continuous_intros]: \n  \"isCont (bernpoly n :: 'a \\<Rightarrow> 'a :: real_normed_algebra_1) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isCont (bernpoly n) x", "unfolding bernpoly_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. isCont\n     (\\<lambda>x.\n         \\<Sum>k\\<le>n.\n            of_nat (n choose k) * of_real (bernoulli k) * x ^ (n - k))\n     x", "by (auto intro!: continuous_intros)"], ["", "lemma has_field_derivative_bernpoly:\n  \"(bernpoly (Suc n) has_field_derivative \n     (of_nat (n + 1) * bernpoly n x :: 'a :: real_normed_field)) (at x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (bernpoly (Suc n) has_field_derivative of_nat (n + 1) * bernpoly n x)\n     (at x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (bernpoly (Suc n) has_field_derivative of_nat (n + 1) * bernpoly n x)\n     (at x)", "have \"(bernpoly (Suc n) has_field_derivative \n          (\\<Sum>k\\<le>n. of_nat (Suc n - k) * x ^ (n - k) * (of_nat (Suc n choose k) * \n            of_real (bernoulli k)))) (at x)\" (is \"(_ has_field_derivative ?D) _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (bernpoly (Suc n) has_field_derivative\n     (\\<Sum>k\\<le>n.\n         of_nat (Suc n - k) * x ^ (n - k) *\n         (of_nat (Suc n choose k) * of_real (bernoulli k))))\n     (at x)", "unfolding bernpoly_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         \\<Sum>k\\<le>Suc n.\n            of_nat (Suc n choose k) * of_real (bernoulli k) *\n            x ^ (Suc n - k)) has_field_derivative\n     (\\<Sum>k\\<le>n.\n         of_nat (Suc n - k) * x ^ (n - k) *\n         (of_nat (Suc n choose k) * of_real (bernoulli k))))\n     (at x)", "by (rule DERIV_cong) (fast intro!: derivative_intros, simp)"], ["proof (state)\nthis:\n  (bernpoly (Suc n) has_field_derivative\n   (\\<Sum>k\\<le>n.\n       of_nat (Suc n - k) * x ^ (n - k) *\n       (of_nat (Suc n choose k) * of_real (bernoulli k))))\n   (at x)\n\ngoal (1 subgoal):\n 1. (bernpoly (Suc n) has_field_derivative of_nat (n + 1) * bernpoly n x)\n     (at x)", "also"], ["proof (state)\nthis:\n  (bernpoly (Suc n) has_field_derivative\n   (\\<Sum>k\\<le>n.\n       of_nat (Suc n - k) * x ^ (n - k) *\n       (of_nat (Suc n choose k) * of_real (bernoulli k))))\n   (at x)\n\ngoal (1 subgoal):\n 1. (bernpoly (Suc n) has_field_derivative of_nat (n + 1) * bernpoly n x)\n     (at x)", "have \"?D = of_nat (n + 1) * bernpoly n x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>n.\n        of_nat (Suc n - k) * x ^ (n - k) *\n        (of_nat (Suc n choose k) * of_real (bernoulli k))) =\n    of_nat (n + 1) * bernpoly n x", "unfolding bernpoly_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>n.\n        of_nat (Suc n - k) * x ^ (n - k) *\n        (of_nat (Suc n choose k) * of_real (bernoulli k))) =\n    of_nat (n + 1) *\n    (\\<Sum>k\\<le>n.\n        of_nat (n choose k) * of_real (bernoulli k) * x ^ (n - k))", "by (subst sum_distrib_left, intro sum.cong refl, subst of_nat_binomial_Suc) simp_all"], ["proof (state)\nthis:\n  (\\<Sum>k\\<le>n.\n      of_nat (Suc n - k) * x ^ (n - k) *\n      (of_nat (Suc n choose k) * of_real (bernoulli k))) =\n  of_nat (n + 1) * bernpoly n x\n\ngoal (1 subgoal):\n 1. (bernpoly (Suc n) has_field_derivative of_nat (n + 1) * bernpoly n x)\n     (at x)", "ultimately"], ["proof (chain)\npicking this:\n  (bernpoly (Suc n) has_field_derivative\n   (\\<Sum>k\\<le>n.\n       of_nat (Suc n - k) * x ^ (n - k) *\n       (of_nat (Suc n choose k) * of_real (bernoulli k))))\n   (at x)\n  (\\<Sum>k\\<le>n.\n      of_nat (Suc n - k) * x ^ (n - k) *\n      (of_nat (Suc n choose k) * of_real (bernoulli k))) =\n  of_nat (n + 1) * bernpoly n x", "show ?thesis"], ["proof (prove)\nusing this:\n  (bernpoly (Suc n) has_field_derivative\n   (\\<Sum>k\\<le>n.\n       of_nat (Suc n - k) * x ^ (n - k) *\n       (of_nat (Suc n choose k) * of_real (bernoulli k))))\n   (at x)\n  (\\<Sum>k\\<le>n.\n      of_nat (Suc n - k) * x ^ (n - k) *\n      (of_nat (Suc n choose k) * of_real (bernoulli k))) =\n  of_nat (n + 1) * bernpoly n x\n\ngoal (1 subgoal):\n 1. (bernpoly (Suc n) has_field_derivative of_nat (n + 1) * bernpoly n x)\n     (at x)", "by (auto simp del: of_nat_Suc One_nat_def)"], ["proof (state)\nthis:\n  (bernpoly (Suc n) has_field_derivative of_nat (n + 1) * bernpoly n x)\n   (at x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas has_field_derivative_bernpoly' [derivative_intros] =\n  DERIV_chain'[OF _ has_field_derivative_bernpoly]"], ["", "lemma sum_binomial_times_bernoulli:\n  \"(\\<Sum>k\\<le>n. ((Suc n) choose k) * bernoulli k) = (if n = 0 then 1 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>n. real (Suc n choose k) * bernoulli k) =\n    (if n = 0 then 1 else 0)", "proof (cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    (\\<Sum>k\\<le>n. real (Suc n choose k) * bernoulli k) =\n    (if n = 0 then 1 else 0)\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       (\\<Sum>k\\<le>n. real (Suc n choose k) * bernoulli k) =\n       (if n = 0 then 1 else 0)", "case (Suc m)"], ["proof (state)\nthis:\n  n = Suc m\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    (\\<Sum>k\\<le>n. real (Suc n choose k) * bernoulli k) =\n    (if n = 0 then 1 else 0)\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       (\\<Sum>k\\<le>n. real (Suc n choose k) * bernoulli k) =\n       (if n = 0 then 1 else 0)", "then"], ["proof (chain)\npicking this:\n  n = Suc m", "show ?thesis"], ["proof (prove)\nusing this:\n  n = Suc m\n\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>n. real (Suc n choose k) * bernoulli k) =\n    (if n = 0 then 1 else 0)", "by (simp add: bernoulli_Suc)\n       (simp add: field_simps add_2_eq_Suc'[symmetric] del: add_2_eq_Suc add_2_eq_Suc')"], ["proof (state)\nthis:\n  (\\<Sum>k\\<le>n. real (Suc n choose k) * bernoulli k) =\n  (if n = 0 then 1 else 0)\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow>\n    (\\<Sum>k\\<le>n. real (Suc n choose k) * bernoulli k) =\n    (if n = 0 then 1 else 0)", "qed simp_all"], ["", "lemma sum_binomial_times_bernoulli':\n  \"(\\<Sum>k<n. real (n choose k) * bernoulli k) = (if n = 1 then 1 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k<n. real (n choose k) * bernoulli k) = (if n = 1 then 1 else 0)", "proof (cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    (\\<Sum>k<n. real (n choose k) * bernoulli k) = (if n = 1 then 1 else 0)\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       (\\<Sum>k<n. real (n choose k) * bernoulli k) =\n       (if n = 1 then 1 else 0)", "case (Suc m)"], ["proof (state)\nthis:\n  n = Suc m\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    (\\<Sum>k<n. real (n choose k) * bernoulli k) = (if n = 1 then 1 else 0)\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       (\\<Sum>k<n. real (n choose k) * bernoulli k) =\n       (if n = 1 then 1 else 0)", "have \"(\\<Sum>k<n. real (n choose k) * bernoulli k) =\n           (\\<Sum>k\\<le>m. real (Suc m choose k) * bernoulli k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k<n. real (n choose k) * bernoulli k) =\n    (\\<Sum>k\\<le>m. real (Suc m choose k) * bernoulli k)", "unfolding Suc lessThan_Suc_atMost"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>m. real (Suc m choose k) * bernoulli k) =\n    (\\<Sum>k\\<le>m. real (Suc m choose k) * bernoulli k)", ".."], ["proof (state)\nthis:\n  (\\<Sum>k<n. real (n choose k) * bernoulli k) =\n  (\\<Sum>k\\<le>m. real (Suc m choose k) * bernoulli k)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    (\\<Sum>k<n. real (n choose k) * bernoulli k) = (if n = 1 then 1 else 0)\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       (\\<Sum>k<n. real (n choose k) * bernoulli k) =\n       (if n = 1 then 1 else 0)", "also"], ["proof (state)\nthis:\n  (\\<Sum>k<n. real (n choose k) * bernoulli k) =\n  (\\<Sum>k\\<le>m. real (Suc m choose k) * bernoulli k)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    (\\<Sum>k<n. real (n choose k) * bernoulli k) = (if n = 1 then 1 else 0)\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       (\\<Sum>k<n. real (n choose k) * bernoulli k) =\n       (if n = 1 then 1 else 0)", "have \"\\<dots> = (if n = 1 then 1 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>m. real (Suc m choose k) * bernoulli k) =\n    (if n = 1 then 1 else 0)", "by (subst sum_binomial_times_bernoulli) (simp add: Suc)"], ["proof (state)\nthis:\n  (\\<Sum>k\\<le>m. real (Suc m choose k) * bernoulli k) =\n  (if n = 1 then 1 else 0)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    (\\<Sum>k<n. real (n choose k) * bernoulli k) = (if n = 1 then 1 else 0)\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       (\\<Sum>k<n. real (n choose k) * bernoulli k) =\n       (if n = 1 then 1 else 0)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>k<n. real (n choose k) * bernoulli k) = (if n = 1 then 1 else 0)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>k<n. real (n choose k) * bernoulli k) = (if n = 1 then 1 else 0)\n\ngoal (1 subgoal):\n 1. (\\<Sum>k<n. real (n choose k) * bernoulli k) = (if n = 1 then 1 else 0)", "."], ["proof (state)\nthis:\n  (\\<Sum>k<n. real (n choose k) * bernoulli k) = (if n = 1 then 1 else 0)\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow>\n    (\\<Sum>k<n. real (n choose k) * bernoulli k) = (if n = 1 then 1 else 0)", "qed simp_all"], ["", "lemma binomial_unroll:\n  \"n > 0 \\<Longrightarrow> (n choose k) = (if k = 0 then 1 else (n - 1) choose (k - 1) + ((n - 1) choose k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow>\n    n choose k =\n    (if k = 0 then 1 else n - 1 choose (k - 1) + (n - 1 choose k))", "by (auto simp add: gr0_conv_Suc)"], ["", "lemma sum_unroll:\n  \"(\\<Sum>k\\<le>n::nat. f k) = (if n = 0 then f 0 else f n + (\\<Sum>k\\<le>n - 1. f k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f {..n} = (if n = 0 then f 0 else f n + sum f {..n - 1})", "by (cases n) (simp_all add: add_ac)"], ["", "lemma bernoulli_unroll:\n  \"n > 0 \\<Longrightarrow> bernoulli n = - 1 / (real n + 1) * (\\<Sum>k\\<le>n - 1. real (n + 1 choose k) * bernoulli k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow>\n    bernoulli n =\n    - 1 / (real n + 1) *\n    (\\<Sum>k\\<le>n - 1. real (n + 1 choose k) * bernoulli k)", "by (cases n) (simp add: bernoulli_Suc)+"], ["", "lemmas bernoulli_unroll_all = binomial_unroll bernoulli_unroll sum_unroll bernpoly_def"], ["", "lemma bernpoly_1_1: \"bernpoly 1 1 = of_real (1/2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bernpoly 1 (1::'a) = of_real (1 / 2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. bernpoly 1 (1::'a) = of_real (1 / 2)", "have *: \"(1 :: 'a) = of_real 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) = of_real 1", "by simp"], ["proof (state)\nthis:\n  (1::'a) = of_real 1\n\ngoal (1 subgoal):\n 1. bernpoly 1 (1::'a) = of_real (1 / 2)", "have \"bernpoly 1 (1::'a) = 1 - of_real (1 / 2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bernpoly 1 (1::'a) = (1::'a) - of_real (1 / 2)", "by (simp add: bernoulli_unroll_all)"], ["proof (state)\nthis:\n  bernpoly 1 (1::'a) = (1::'a) - of_real (1 / 2)\n\ngoal (1 subgoal):\n 1. bernpoly 1 (1::'a) = of_real (1 / 2)", "also"], ["proof (state)\nthis:\n  bernpoly 1 (1::'a) = (1::'a) - of_real (1 / 2)\n\ngoal (1 subgoal):\n 1. bernpoly 1 (1::'a) = of_real (1 / 2)", "have \"\\<dots> = of_real (1 - 1 / 2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) - of_real (1 / 2) = of_real (1 - 1 / 2)", "by (simp only: *  of_real_diff)"], ["proof (state)\nthis:\n  (1::'a) - of_real (1 / 2) = of_real (1 - 1 / 2)\n\ngoal (1 subgoal):\n 1. bernpoly 1 (1::'a) = of_real (1 / 2)", "also"], ["proof (state)\nthis:\n  (1::'a) - of_real (1 / 2) = of_real (1 - 1 / 2)\n\ngoal (1 subgoal):\n 1. bernpoly 1 (1::'a) = of_real (1 / 2)", "have \"1 - 1 / 2 = (1 / 2 :: real)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 - 1 / 2 = 1 / 2", "by simp"], ["proof (state)\nthis:\n  1 - 1 / 2 = 1 / 2\n\ngoal (1 subgoal):\n 1. bernpoly 1 (1::'a) = of_real (1 / 2)", "finally"], ["proof (chain)\npicking this:\n  bernpoly 1 (1::'a) = of_real (1 / 2)", "show ?thesis"], ["proof (prove)\nusing this:\n  bernpoly 1 (1::'a) = of_real (1 / 2)\n\ngoal (1 subgoal):\n 1. bernpoly 1 (1::'a) = of_real (1 / 2)", "."], ["proof (state)\nthis:\n  bernpoly 1 (1::'a) = of_real (1 / 2)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Sum of Powers with Bernoulli Polynomials\\<close>"], ["", "(* TODO: Generalisation not possible here because mean-value theorem \n   is only available for reals *)"], ["", "lemma diff_bernpoly:\n  fixes x :: real\n  shows \"bernpoly n (x + 1) - bernpoly n x = of_nat n * x ^ (n - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bernpoly n (x + 1) - bernpoly n x = real n * x ^ (n - 1)", "proof (induct n arbitrary: x)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. bernpoly 0 (x + 1) - bernpoly 0 x = real 0 * x ^ (0 - 1)\n 2. \\<And>n x.\n       (\\<And>x.\n           bernpoly n (x + 1) - bernpoly n x =\n           real n * x ^ (n - 1)) \\<Longrightarrow>\n       bernpoly (Suc n) (x + 1) - bernpoly (Suc n) x =\n       real (Suc n) * x ^ (Suc n - 1)", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>x. bernpoly 0 (x + 1) - bernpoly 0 x = real 0 * x ^ (0 - 1)\n 2. \\<And>n x.\n       (\\<And>x.\n           bernpoly n (x + 1) - bernpoly n x =\n           real n * x ^ (n - 1)) \\<Longrightarrow>\n       bernpoly (Suc n) (x + 1) - bernpoly (Suc n) x =\n       real (Suc n) * x ^ (Suc n - 1)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. bernpoly 0 (x + 1) - bernpoly 0 x = real 0 * x ^ (0 - 1)", "unfolding bernpoly_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>0.\n        real (0 choose k) * of_real (bernoulli k) * (x + 1) ^ (0 - k)) -\n    (\\<Sum>k\\<le>0.\n        real (0 choose k) * of_real (bernoulli k) * x ^ (0 - k)) =\n    real 0 * x ^ (0 - 1)", "by auto"], ["proof (state)\nthis:\n  bernpoly 0 (x + 1) - bernpoly 0 x = real 0 * x ^ (0 - 1)\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       (\\<And>x.\n           bernpoly n (x + 1) - bernpoly n x =\n           real n * x ^ (n - 1)) \\<Longrightarrow>\n       bernpoly (Suc n) (x + 1) - bernpoly (Suc n) x =\n       real (Suc n) * x ^ (Suc n - 1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n x.\n       (\\<And>x.\n           bernpoly n (x + 1) - bernpoly n x =\n           real n * x ^ (n - 1)) \\<Longrightarrow>\n       bernpoly (Suc n) (x + 1) - bernpoly (Suc n) x =\n       real (Suc n) * x ^ (Suc n - 1)", "case (Suc n)"], ["proof (state)\nthis:\n  bernpoly n (?x + 1) - bernpoly n ?x = real n * ?x ^ (n - 1)\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       (\\<And>x.\n           bernpoly n (x + 1) - bernpoly n x =\n           real n * x ^ (n - 1)) \\<Longrightarrow>\n       bernpoly (Suc n) (x + 1) - bernpoly (Suc n) x =\n       real (Suc n) * x ^ (Suc n - 1)", "have \"bernpoly (Suc n) (0 + 1) - bernpoly (Suc n) (0 :: real) = \n          (\\<Sum>k\\<le>n. of_real (real (Suc n choose k) * bernoulli k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bernpoly (Suc n) (0 + 1) - bernpoly (Suc n) 0 =\n    (\\<Sum>k\\<le>n. of_real (real (Suc n choose k) * bernoulli k))", "unfolding bernpoly_0"], ["proof (prove)\ngoal (1 subgoal):\n 1. bernpoly (Suc n) (0 + 1) - of_real (bernoulli (Suc n)) =\n    (\\<Sum>k\\<le>n. of_real (real (Suc n choose k) * bernoulli k))", "unfolding bernpoly_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>Suc n.\n        real (Suc n choose k) * of_real (bernoulli k) *\n        (0 + 1) ^ (Suc n - k)) -\n    of_real (bernoulli (Suc n)) =\n    (\\<Sum>k\\<le>n. of_real (real (Suc n choose k) * bernoulli k))", "by simp"], ["proof (state)\nthis:\n  bernpoly (Suc n) (0 + 1) - bernpoly (Suc n) 0 =\n  (\\<Sum>k\\<le>n. of_real (real (Suc n choose k) * bernoulli k))\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       (\\<And>x.\n           bernpoly n (x + 1) - bernpoly n x =\n           real n * x ^ (n - 1)) \\<Longrightarrow>\n       bernpoly (Suc n) (x + 1) - bernpoly (Suc n) x =\n       real (Suc n) * x ^ (Suc n - 1)", "also"], ["proof (state)\nthis:\n  bernpoly (Suc n) (0 + 1) - bernpoly (Suc n) 0 =\n  (\\<Sum>k\\<le>n. of_real (real (Suc n choose k) * bernoulli k))\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       (\\<And>x.\n           bernpoly n (x + 1) - bernpoly n x =\n           real n * x ^ (n - 1)) \\<Longrightarrow>\n       bernpoly (Suc n) (x + 1) - bernpoly (Suc n) x =\n       real (Suc n) * x ^ (Suc n - 1)", "have \"\\<dots> = of_nat (Suc n) * 0 ^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>n. of_real (real (Suc n choose k) * bernoulli k)) =\n    real (Suc n) * 0 ^ n", "by (simp only: of_real_sum [symmetric] sum_binomial_times_bernoulli) simp"], ["proof (state)\nthis:\n  (\\<Sum>k\\<le>n. of_real (real (Suc n choose k) * bernoulli k)) =\n  real (Suc n) * 0 ^ n\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       (\\<And>x.\n           bernpoly n (x + 1) - bernpoly n x =\n           real n * x ^ (n - 1)) \\<Longrightarrow>\n       bernpoly (Suc n) (x + 1) - bernpoly (Suc n) x =\n       real (Suc n) * x ^ (Suc n - 1)", "finally"], ["proof (chain)\npicking this:\n  bernpoly (Suc n) (0 + 1) - bernpoly (Suc n) 0 = real (Suc n) * 0 ^ n", "have const: \"bernpoly (Suc n) (0 + 1) - bernpoly (Suc n) 0 = \\<dots>\""], ["proof (prove)\nusing this:\n  bernpoly (Suc n) (0 + 1) - bernpoly (Suc n) 0 = real (Suc n) * 0 ^ n\n\ngoal (1 subgoal):\n 1. bernpoly (Suc n) (0 + 1) - bernpoly (Suc n) 0 = real (Suc n) * 0 ^ n", "by simp"], ["proof (state)\nthis:\n  bernpoly (Suc n) (0 + 1) - bernpoly (Suc n) 0 = real (Suc n) * 0 ^ n\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       (\\<And>x.\n           bernpoly n (x + 1) - bernpoly n x =\n           real n * x ^ (n - 1)) \\<Longrightarrow>\n       bernpoly (Suc n) (x + 1) - bernpoly (Suc n) x =\n       real (Suc n) * x ^ (Suc n - 1)", "have hyps': \"of_nat (Suc n) * bernpoly n (x + 1) - \n                  of_nat (Suc n) * bernpoly n x = \n                  of_nat n * of_nat (Suc n) * x ^ (n - Suc 0)\" for x :: real"], ["proof (prove)\ngoal (1 subgoal):\n 1. real (Suc n) * bernpoly n (x + 1) - real (Suc n) * bernpoly n x =\n    real n * real (Suc n) * x ^ (n - Suc 0)", "unfolding right_diff_distrib[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. real (Suc n) * (bernpoly n (x + 1) - bernpoly n x) =\n    real n * real (Suc n) * x ^ (n - Suc 0)", "by (subst Suc) (simp_all add: algebra_simps)"], ["proof (state)\nthis:\n  real (Suc n) * bernpoly n (?x + 1) - real (Suc n) * bernpoly n ?x =\n  real n * real (Suc n) * ?x ^ (n - Suc 0)\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       (\\<And>x.\n           bernpoly n (x + 1) - bernpoly n x =\n           real n * x ^ (n - 1)) \\<Longrightarrow>\n       bernpoly (Suc n) (x + 1) - bernpoly (Suc n) x =\n       real (Suc n) * x ^ (Suc n - 1)", "have \"((\\<lambda>x. bernpoly (Suc n) (x + 1) - bernpoly (Suc n) x - of_nat (Suc n) * x ^ n) \n           has_field_derivative 0) (at x)\" for x :: real"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         bernpoly (Suc n) (x + 1) - bernpoly (Suc n) x -\n         real (Suc n) * x ^ n) has_real_derivative\n     0)\n     (at x)", "by (rule derivative_eq_intros refl)+ (insert hyps'[of x], simp add: algebra_simps)"], ["proof (state)\nthis:\n  ((\\<lambda>x.\n       bernpoly (Suc n) (x + 1) - bernpoly (Suc n) x -\n       real (Suc n) * x ^ n) has_real_derivative\n   0)\n   (at ?x)\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       (\\<And>x.\n           bernpoly n (x + 1) - bernpoly n x =\n           real n * x ^ (n - 1)) \\<Longrightarrow>\n       bernpoly (Suc n) (x + 1) - bernpoly (Suc n) x =\n       real (Suc n) * x ^ (Suc n - 1)", "from integrals_eq[OF const this]"], ["proof (chain)\npicking this:\n  bernpoly (Suc n) (?x + 1) - bernpoly (Suc n) ?x = real (Suc n) * ?x ^ n", "show ?case"], ["proof (prove)\nusing this:\n  bernpoly (Suc n) (?x + 1) - bernpoly (Suc n) ?x = real (Suc n) * ?x ^ n\n\ngoal (1 subgoal):\n 1. bernpoly (Suc n) (x + 1) - bernpoly (Suc n) x =\n    real (Suc n) * x ^ (Suc n - 1)", "by simp"], ["proof (state)\nthis:\n  bernpoly (Suc n) (x + 1) - bernpoly (Suc n) x =\n  real (Suc n) * x ^ (Suc n - 1)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bernpoly_of_real: \"bernpoly n (of_real x) = of_real (bernpoly n x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bernpoly n (of_real x) = of_real (bernpoly n x)", "by (simp add: bernpoly_def)"], ["", "lemma bernpoly_1:\n  assumes \"n \\<noteq> 1\"\n  shows   \"bernpoly n 1 = of_real (bernoulli n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bernpoly n (1::'a) = of_real (bernoulli n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. bernpoly n (1::'a) = of_real (bernoulli n)", "have \"bernpoly n 1 = bernoulli n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bernpoly n 1 = bernoulli n", "proof (cases \"n \\<ge> 2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 2 \\<le> n \\<Longrightarrow> bernpoly n 1 = bernoulli n\n 2. \\<not> 2 \\<le> n \\<Longrightarrow> bernpoly n 1 = bernoulli n", "case False"], ["proof (state)\nthis:\n  \\<not> 2 \\<le> n\n\ngoal (2 subgoals):\n 1. 2 \\<le> n \\<Longrightarrow> bernpoly n 1 = bernoulli n\n 2. \\<not> 2 \\<le> n \\<Longrightarrow> bernpoly n 1 = bernoulli n", "with assms"], ["proof (chain)\npicking this:\n  n \\<noteq> 1\n  \\<not> 2 \\<le> n", "have \"n = 0\""], ["proof (prove)\nusing this:\n  n \\<noteq> 1\n  \\<not> 2 \\<le> n\n\ngoal (1 subgoal):\n 1. n = 0", "by auto"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. 2 \\<le> n \\<Longrightarrow> bernpoly n 1 = bernoulli n\n 2. \\<not> 2 \\<le> n \\<Longrightarrow> bernpoly n 1 = bernoulli n", "thus ?thesis"], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. bernpoly n 1 = bernoulli n", "by (simp add: bernpoly_def)"], ["proof (state)\nthis:\n  bernpoly n 1 = bernoulli n\n\ngoal (1 subgoal):\n 1. 2 \\<le> n \\<Longrightarrow> bernpoly n 1 = bernoulli n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. 2 \\<le> n \\<Longrightarrow> bernpoly n 1 = bernoulli n", "case True"], ["proof (state)\nthis:\n  2 \\<le> n\n\ngoal (1 subgoal):\n 1. 2 \\<le> n \\<Longrightarrow> bernpoly n 1 = bernoulli n", "with diff_bernpoly[of n 0]"], ["proof (chain)\npicking this:\n  bernpoly n (0 + 1) - bernpoly n 0 = real n * 0 ^ (n - 1)\n  2 \\<le> n", "show ?thesis"], ["proof (prove)\nusing this:\n  bernpoly n (0 + 1) - bernpoly n 0 = real n * 0 ^ (n - 1)\n  2 \\<le> n\n\ngoal (1 subgoal):\n 1. bernpoly n 1 = bernoulli n", "by (simp add: power_0_left bernpoly_0)"], ["proof (state)\nthis:\n  bernpoly n 1 = bernoulli n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  bernpoly n 1 = bernoulli n\n\ngoal (1 subgoal):\n 1. bernpoly n (1::'a) = of_real (bernoulli n)", "hence \"bernpoly n (of_real 1) = of_real (bernoulli n)\""], ["proof (prove)\nusing this:\n  bernpoly n 1 = bernoulli n\n\ngoal (1 subgoal):\n 1. bernpoly n (of_real 1) = of_real (bernoulli n)", "by (simp only: bernpoly_of_real)"], ["proof (state)\nthis:\n  bernpoly n (of_real 1) = of_real (bernoulli n)\n\ngoal (1 subgoal):\n 1. bernpoly n (1::'a) = of_real (bernoulli n)", "thus ?thesis"], ["proof (prove)\nusing this:\n  bernpoly n (of_real 1) = of_real (bernoulli n)\n\ngoal (1 subgoal):\n 1. bernpoly n (1::'a) = of_real (bernoulli n)", "by simp"], ["proof (state)\nthis:\n  bernpoly n (1::'a) = of_real (bernoulli n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bernpoly_1': \"bernpoly n 1 = of_real (bernoulli' n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bernpoly n (1::'a) = of_real (bernoulli' n)", "using bernpoly_1_1 [where ?'a = 'a]"], ["proof (prove)\nusing this:\n  bernpoly 1 (1::'a) = of_real (1 / 2)\n\ngoal (1 subgoal):\n 1. bernpoly n (1::'a) = of_real (bernoulli' n)", "by (cases \"n = 1\") (simp_all add: bernpoly_1 bernoulli'_def)"], ["", "theorem sum_of_powers: \n  \"(\\<Sum>k\\<le>n::nat. (real k) ^ m) = (bernpoly (Suc m) (n + 1) - bernpoly (Suc m) 0) / (m + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>n. real k ^ m) =\n    (bernpoly (Suc m) (real n + 1) - bernpoly (Suc m) 0) / (real m + 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>n. real k ^ m) =\n    (bernpoly (Suc m) (real n + 1) - bernpoly (Suc m) 0) / (real m + 1)", "from diff_bernpoly[of \"Suc m\", simplified]"], ["proof (chain)\npicking this:\n  bernpoly (Suc m) (?x + 1) - bernpoly (Suc m) ?x = (1 + real m) * ?x ^ m", "have \"(m + (1::real)) * (\\<Sum>k\\<le>n. (real k) ^ m) = (\\<Sum>k\\<le>n. bernpoly (Suc m) (real k + 1) - bernpoly (Suc m) (real k))\""], ["proof (prove)\nusing this:\n  bernpoly (Suc m) (?x + 1) - bernpoly (Suc m) ?x = (1 + real m) * ?x ^ m\n\ngoal (1 subgoal):\n 1. (real m + 1) * (\\<Sum>k\\<le>n. real k ^ m) =\n    (\\<Sum>k\\<le>n.\n        bernpoly (Suc m) (real k + 1) - bernpoly (Suc m) (real k))", "by (auto simp add: sum_distrib_left intro!: sum.cong)"], ["proof (state)\nthis:\n  (real m + 1) * (\\<Sum>k\\<le>n. real k ^ m) =\n  (\\<Sum>k\\<le>n. bernpoly (Suc m) (real k + 1) - bernpoly (Suc m) (real k))\n\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>n. real k ^ m) =\n    (bernpoly (Suc m) (real n + 1) - bernpoly (Suc m) 0) / (real m + 1)", "also"], ["proof (state)\nthis:\n  (real m + 1) * (\\<Sum>k\\<le>n. real k ^ m) =\n  (\\<Sum>k\\<le>n. bernpoly (Suc m) (real k + 1) - bernpoly (Suc m) (real k))\n\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>n. real k ^ m) =\n    (bernpoly (Suc m) (real n + 1) - bernpoly (Suc m) 0) / (real m + 1)", "have \"... = (\\<Sum>k\\<le>n. bernpoly (Suc m) (real (k + 1)) - bernpoly (Suc m) (real k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>n.\n        bernpoly (Suc m) (real k + 1) - bernpoly (Suc m) (real k)) =\n    (\\<Sum>k\\<le>n.\n        bernpoly (Suc m) (real (k + 1)) - bernpoly (Suc m) (real k))", "by (simp add: add_ac)"], ["proof (state)\nthis:\n  (\\<Sum>k\\<le>n.\n      bernpoly (Suc m) (real k + 1) - bernpoly (Suc m) (real k)) =\n  (\\<Sum>k\\<le>n.\n      bernpoly (Suc m) (real (k + 1)) - bernpoly (Suc m) (real k))\n\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>n. real k ^ m) =\n    (bernpoly (Suc m) (real n + 1) - bernpoly (Suc m) 0) / (real m + 1)", "also"], ["proof (state)\nthis:\n  (\\<Sum>k\\<le>n.\n      bernpoly (Suc m) (real k + 1) - bernpoly (Suc m) (real k)) =\n  (\\<Sum>k\\<le>n.\n      bernpoly (Suc m) (real (k + 1)) - bernpoly (Suc m) (real k))\n\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>n. real k ^ m) =\n    (bernpoly (Suc m) (real n + 1) - bernpoly (Suc m) 0) / (real m + 1)", "have \"... = bernpoly (Suc m) (n + 1) - bernpoly (Suc m) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>n.\n        bernpoly (Suc m) (real (k + 1)) - bernpoly (Suc m) (real k)) =\n    bernpoly (Suc m) (real (n + 1)) - bernpoly (Suc m) 0", "by (simp only: sum_diff[where f=\"\\<lambda>k. bernpoly (Suc m) (real k)\"]) simp"], ["proof (state)\nthis:\n  (\\<Sum>k\\<le>n.\n      bernpoly (Suc m) (real (k + 1)) - bernpoly (Suc m) (real k)) =\n  bernpoly (Suc m) (real (n + 1)) - bernpoly (Suc m) 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>n. real k ^ m) =\n    (bernpoly (Suc m) (real n + 1) - bernpoly (Suc m) 0) / (real m + 1)", "finally"], ["proof (chain)\npicking this:\n  (real m + 1) * (\\<Sum>k\\<le>n. real k ^ m) =\n  bernpoly (Suc m) (real (n + 1)) - bernpoly (Suc m) 0", "show ?thesis"], ["proof (prove)\nusing this:\n  (real m + 1) * (\\<Sum>k\\<le>n. real k ^ m) =\n  bernpoly (Suc m) (real (n + 1)) - bernpoly (Suc m) 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>n. real k ^ m) =\n    (bernpoly (Suc m) (real n + 1) - bernpoly (Suc m) 0) / (real m + 1)", "by (auto simp add: field_simps intro!: eq_divide_imp)"], ["proof (state)\nthis:\n  (\\<Sum>k\\<le>n. real k ^ m) =\n  (bernpoly (Suc m) (real n + 1) - bernpoly (Suc m) 0) / (real m + 1)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_of_powers_nat_aux: \n  assumes \"real a = b / c\" \"real b' = b\" \"real c' = c\"\n  shows   \"a = b' div c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = b' div c'", "proof (cases \"c = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. c = 0 \\<Longrightarrow> a = b' div c'\n 2. c \\<noteq> 0 \\<Longrightarrow> a = b' div c'", "case False"], ["proof (state)\nthis:\n  c \\<noteq> 0\n\ngoal (2 subgoals):\n 1. c = 0 \\<Longrightarrow> a = b' div c'\n 2. c \\<noteq> 0 \\<Longrightarrow> a = b' div c'", "with assms"], ["proof (chain)\npicking this:\n  real a = b / c\n  real b' = b\n  real c' = c\n  c \\<noteq> 0", "have \"real (a * c') = real b'\""], ["proof (prove)\nusing this:\n  real a = b / c\n  real b' = b\n  real c' = c\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. real (a * c') = real b'", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  real (a * c') = real b'\n\ngoal (2 subgoals):\n 1. c = 0 \\<Longrightarrow> a = b' div c'\n 2. c \\<noteq> 0 \\<Longrightarrow> a = b' div c'", "hence \"b' = a * c'\""], ["proof (prove)\nusing this:\n  real (a * c') = real b'\n\ngoal (1 subgoal):\n 1. b' = a * c'", "by (subst (asm) of_nat_eq_iff) simp"], ["proof (state)\nthis:\n  b' = a * c'\n\ngoal (2 subgoals):\n 1. c = 0 \\<Longrightarrow> a = b' div c'\n 2. c \\<noteq> 0 \\<Longrightarrow> a = b' div c'", "with False assms"], ["proof (chain)\npicking this:\n  c \\<noteq> 0\n  real a = b / c\n  real b' = b\n  real c' = c\n  b' = a * c'", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<noteq> 0\n  real a = b / c\n  real b' = b\n  real c' = c\n  b' = a * c'\n\ngoal (1 subgoal):\n 1. a = b' div c'", "by simp"], ["proof (state)\nthis:\n  a = b' div c'\n\ngoal (1 subgoal):\n 1. c = 0 \\<Longrightarrow> a = b' div c'", "qed (insert assms, simp_all)"], ["", "subsection \\<open>Instances for Square And Cubic Numbers\\<close>"], ["", "theorem sum_of_squares: \"real (\\<Sum>k\\<le>n::nat. k ^ 2) = real (2 * n ^ 3 + 3 * n ^ 2 + n) / 6\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real (sum power2 {..n}) = real (2 * n ^ 3 + 3 * n\\<^sup>2 + n) / 6", "by (simp only: of_nat_sum of_nat_power sum_of_powers)\n     (simp add: bernoulli_unroll_all field_simps power2_eq_square power_numeral_reduce)"], ["", "corollary sum_of_squares_nat: \"(\\<Sum>k\\<le>n::nat. k ^ 2) = (2 * n ^ 3 + 3 * n ^ 2 + n) div 6\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum power2 {..n} = (2 * n ^ 3 + 3 * n\\<^sup>2 + n) div 6", "by (rule sum_of_powers_nat_aux[OF sum_of_squares]) simp_all"], ["", "theorem sum_of_cubes: \"real (\\<Sum>k\\<le>n::nat. k ^ 3) = real (n ^ 2 + n) ^ 2 / 4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real (\\<Sum>k\\<le>n. k ^ 3) = (real (n\\<^sup>2 + n))\\<^sup>2 / 4", "by (simp only: of_nat_sum of_nat_power sum_of_powers)\n     (simp add: bernoulli_unroll_all field_simps power2_eq_square power_numeral_reduce)"], ["", "corollary sum_of_cubes_nat: \"(\\<Sum>k\\<le>n::nat. k ^ 3) = (n ^ 2 + n) ^ 2 div 4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>n. k ^ 3) = (n\\<^sup>2 + n)\\<^sup>2 div 4", "by (rule sum_of_powers_nat_aux[OF sum_of_cubes]) simp_all"], ["", "end"]]}