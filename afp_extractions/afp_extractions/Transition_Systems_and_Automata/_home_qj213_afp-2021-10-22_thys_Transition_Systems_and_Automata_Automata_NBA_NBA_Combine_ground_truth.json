{"file_name": "/home/qj213/afp-2021-10-22/thys/Transition_Systems_and_Automata/Automata/NBA/NBA_Combine.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Transition_Systems_and_Automata", "problem_names": ["lemmas degeneralize_language[simp] = degeneralization.degeneralize_language[folded NBA.language_def]", "lemmas degeneralize_nodes_finite[iff] = degeneralization.degeneralize_nodes_finite[folded NBA.nodes_def]", "lemmas intersect'_language[simp] = intersection.product_language[folded NGBA.language_def]", "lemmas intersect'_nodes_finite[intro] = intersection.product_nodes_finite[folded NGBA.nodes_def]", "lemmas union_language = union.sum_language", "lemmas union_nodes_finite = union.sum_nodes_finite", "lemmas intersect_list'_language[simp] = intersection_list.product_language[folded NGBA.language_def]", "lemmas intersect_list'_nodes_finite[intro] = intersection_list.product_nodes_finite[folded NGBA.nodes_def]", "lemmas union_list_language = union_list.sum_language", "lemmas union_list_nodes_finite = union_list.sum_nodes_finite", "lemma intersect_language[simp]: \"NBA.language (intersect A B) = NBA.language A \\<inter> NBA.language B\"", "lemma intersect_nodes_finite[intro]:\n    assumes \"finite (NBA.nodes A)\" \"finite (NBA.nodes B)\"\n    shows \"finite (NBA.nodes (intersect A B))\"", "lemma intersect_list_language[simp]: \"NBA.language (intersect_list AA) = \\<Inter> (NBA.language ` set AA)\"", "lemma intersect_list_nodes_finite[intro]:\n    assumes \"list_all (finite \\<circ> NBA.nodes) AA\"\n    shows \"finite (NBA.nodes (intersect_list AA))\""], "translations": [["", "lemmas degeneralize_language[simp] = degeneralization.degeneralize_language[folded NBA.language_def]"], ["", "lemmas degeneralize_nodes_finite[iff] = degeneralization.degeneralize_nodes_finite[folded NBA.nodes_def]"], ["", "global_interpretation intersection: automaton_intersection_run\n    nba nba.alphabet nba.initial nba.transition nba.accepting \"\\<lambda> P w r p. infs P (p ## r)\"\n    nba nba.alphabet nba.initial nba.transition nba.accepting \"\\<lambda> P w r p. infs P (p ## r)\"\n    ngba ngba.alphabet ngba.initial ngba.transition ngba.accepting \"\\<lambda> P w r p. gen infs P (p ## r)\"\n    \"\\<lambda> c\\<^sub>1 c\\<^sub>2. [c\\<^sub>1 \\<circ> fst, c\\<^sub>2 \\<circ> snd]\"\n    defines intersect' = intersection.product"], ["proof (prove)\ngoal (1 subgoal):\n 1. automaton_intersection_run nba nba.alphabet nba.initial nba.transition\n     nba.accepting (\\<lambda>P w r p. infs P (p ## r)) nba nba.alphabet\n     nba.initial nba.transition nba.accepting\n     (\\<lambda>P w r p. infs P (p ## r)) ngba ngba.alphabet ngba.initial\n     ngba.transition ngba.accepting (\\<lambda>P w r p. gen infs P (p ## r))\n     (\\<lambda>c\\<^sub>1 c\\<^sub>2.\n         [c\\<^sub>1 \\<circ> fst, c\\<^sub>2 \\<circ> snd])", "by unfold_locales auto"], ["", "lemmas intersect'_language[simp] = intersection.product_language[folded NGBA.language_def]"], ["", "lemmas intersect'_nodes_finite[intro] = intersection.product_nodes_finite[folded NGBA.nodes_def]"], ["", "global_interpretation union: automaton_union_run\n    nba nba.alphabet nba.initial nba.transition nba.accepting \"\\<lambda> P w r p. infs P (p ## r)\"\n    nba nba.alphabet nba.initial nba.transition nba.accepting \"\\<lambda> P w r p. infs P (p ## r)\"\n    nba nba.alphabet nba.initial nba.transition nba.accepting \"\\<lambda> P w r p. infs P (p ## r)\"\n    case_sum\n    defines union = union.sum"], ["proof (prove)\ngoal (1 subgoal):\n 1. automaton_union_run nba nba.alphabet nba.initial nba.transition\n     nba.accepting (\\<lambda>P w r p. infs P (p ## r)) nba nba.alphabet\n     nba.initial nba.transition nba.accepting\n     (\\<lambda>P w r p. infs P (p ## r)) nba nba.alphabet nba.initial\n     nba.transition nba.accepting (\\<lambda>P w r p. infs P (p ## r))\n     case_sum", "by (unfold_locales) (auto simp: comp_def)"], ["", "lemmas union_language = union.sum_language"], ["", "lemmas union_nodes_finite = union.sum_nodes_finite"], ["", "global_interpretation intersection_list: automaton_intersection_list_run\n    nba nba.alphabet nba.initial nba.transition nba.accepting \"\\<lambda> P w r p. infs P (p ## r)\"\n    ngba ngba.alphabet ngba.initial ngba.transition ngba.accepting \"\\<lambda> P w r p. gen infs P (p ## r)\"\n    \"\\<lambda> cs. map (\\<lambda> k ps. (cs ! k) (ps ! k)) [0 ..< length cs]\"\n    defines intersect_list' = intersection_list.product"], ["proof (prove)\ngoal (1 subgoal):\n 1. automaton_intersection_list_run nba nba.alphabet nba.initial\n     nba.transition nba.accepting (\\<lambda>P w r p. infs P (p ## r)) ngba\n     ngba.alphabet ngba.initial ngba.transition ngba.accepting\n     (\\<lambda>P w r p. gen infs P (p ## r))\n     (\\<lambda>cs. map (\\<lambda>k ps. (cs ! k) (ps ! k)) [0..<length cs])", "proof unfold_locales"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>rs cs ps w.\n       \\<lbrakk>length rs = length cs; length ps = length cs\\<rbrakk>\n       \\<Longrightarrow> gen infs\n                          (map (\\<lambda>k ps. (cs ! k) (ps ! k))\n                            [0..<length cs])\n                          (ps ## stranspose rs) =\n                         list_all (\\<lambda>(c, r, p). infs c (p ## r))\n                          (cs || rs || ps)", "fix cs :: \"('b \\<Rightarrow> bool) list\" and rs :: \"'b stream list\" and w :: \"'a stream\" and ps :: \"'b list\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>rs cs ps w.\n       \\<lbrakk>length rs = length cs; length ps = length cs\\<rbrakk>\n       \\<Longrightarrow> gen infs\n                          (map (\\<lambda>k ps. (cs ! k) (ps ! k))\n                            [0..<length cs])\n                          (ps ## stranspose rs) =\n                         list_all (\\<lambda>(c, r, p). infs c (p ## r))\n                          (cs || rs || ps)", "assume 1: \"length rs = length cs\" \"length ps = length cs\""], ["proof (state)\nthis:\n  length rs = length cs\n  length ps = length cs\n\ngoal (1 subgoal):\n 1. \\<And>rs cs ps w.\n       \\<lbrakk>length rs = length cs; length ps = length cs\\<rbrakk>\n       \\<Longrightarrow> gen infs\n                          (map (\\<lambda>k ps. (cs ! k) (ps ! k))\n                            [0..<length cs])\n                          (ps ## stranspose rs) =\n                         list_all (\\<lambda>(c, r, p). infs c (p ## r))\n                          (cs || rs || ps)", "have \"gen infs (map (\\<lambda> k pp. (cs ! k) (pp ! k)) [0 ..< length cs]) (ps ## stranspose rs) \\<longleftrightarrow>\n      (\\<forall> k < length cs. infs (\\<lambda> pp. (cs ! k) (pp ! k)) (ps ## stranspose rs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen infs (map (\\<lambda>k pp. (cs ! k) (pp ! k)) [0..<length cs])\n     (ps ## stranspose rs) =\n    (\\<forall>k<length cs.\n        infs (\\<lambda>pp. (cs ! k) (pp ! k)) (ps ## stranspose rs))", "by (auto simp: gen_def)"], ["proof (state)\nthis:\n  gen infs (map (\\<lambda>k pp. (cs ! k) (pp ! k)) [0..<length cs])\n   (ps ## stranspose rs) =\n  (\\<forall>k<length cs.\n      infs (\\<lambda>pp. (cs ! k) (pp ! k)) (ps ## stranspose rs))\n\ngoal (1 subgoal):\n 1. \\<And>rs cs ps w.\n       \\<lbrakk>length rs = length cs; length ps = length cs\\<rbrakk>\n       \\<Longrightarrow> gen infs\n                          (map (\\<lambda>k ps. (cs ! k) (ps ! k))\n                            [0..<length cs])\n                          (ps ## stranspose rs) =\n                         list_all (\\<lambda>(c, r, p). infs c (p ## r))\n                          (cs || rs || ps)", "also"], ["proof (state)\nthis:\n  gen infs (map (\\<lambda>k pp. (cs ! k) (pp ! k)) [0..<length cs])\n   (ps ## stranspose rs) =\n  (\\<forall>k<length cs.\n      infs (\\<lambda>pp. (cs ! k) (pp ! k)) (ps ## stranspose rs))\n\ngoal (1 subgoal):\n 1. \\<And>rs cs ps w.\n       \\<lbrakk>length rs = length cs; length ps = length cs\\<rbrakk>\n       \\<Longrightarrow> gen infs\n                          (map (\\<lambda>k ps. (cs ! k) (ps ! k))\n                            [0..<length cs])\n                          (ps ## stranspose rs) =\n                         list_all (\\<lambda>(c, r, p). infs c (p ## r))\n                          (cs || rs || ps)", "have \"\\<dots> \\<longleftrightarrow> (\\<forall> k < length cs. infs (cs ! k) (smap (\\<lambda> pp. pp ! k) (ps ## stranspose rs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>k<length cs.\n        infs (\\<lambda>pp. (cs ! k) (pp ! k)) (ps ## stranspose rs)) =\n    (\\<forall>k<length cs.\n        infs (cs ! k) (smap (\\<lambda>pp. pp ! k) (ps ## stranspose rs)))", "by (simp add: comp_def)"], ["proof (state)\nthis:\n  (\\<forall>k<length cs.\n      infs (\\<lambda>pp. (cs ! k) (pp ! k)) (ps ## stranspose rs)) =\n  (\\<forall>k<length cs.\n      infs (cs ! k) (smap (\\<lambda>pp. pp ! k) (ps ## stranspose rs)))\n\ngoal (1 subgoal):\n 1. \\<And>rs cs ps w.\n       \\<lbrakk>length rs = length cs; length ps = length cs\\<rbrakk>\n       \\<Longrightarrow> gen infs\n                          (map (\\<lambda>k ps. (cs ! k) (ps ! k))\n                            [0..<length cs])\n                          (ps ## stranspose rs) =\n                         list_all (\\<lambda>(c, r, p). infs c (p ## r))\n                          (cs || rs || ps)", "also"], ["proof (state)\nthis:\n  (\\<forall>k<length cs.\n      infs (\\<lambda>pp. (cs ! k) (pp ! k)) (ps ## stranspose rs)) =\n  (\\<forall>k<length cs.\n      infs (cs ! k) (smap (\\<lambda>pp. pp ! k) (ps ## stranspose rs)))\n\ngoal (1 subgoal):\n 1. \\<And>rs cs ps w.\n       \\<lbrakk>length rs = length cs; length ps = length cs\\<rbrakk>\n       \\<Longrightarrow> gen infs\n                          (map (\\<lambda>k ps. (cs ! k) (ps ! k))\n                            [0..<length cs])\n                          (ps ## stranspose rs) =\n                         list_all (\\<lambda>(c, r, p). infs c (p ## r))\n                          (cs || rs || ps)", "have \"\\<dots> \\<longleftrightarrow> (\\<forall> k < length cs. infs (cs ! k) (rs ! k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>k<length cs.\n        infs (cs ! k) (smap (\\<lambda>pp. pp ! k) (ps ## stranspose rs))) =\n    (\\<forall>k<length cs. infs (cs ! k) (rs ! k))", "using 1"], ["proof (prove)\nusing this:\n  length rs = length cs\n  length ps = length cs\n\ngoal (1 subgoal):\n 1. (\\<forall>k<length cs.\n        infs (cs ! k) (smap (\\<lambda>pp. pp ! k) (ps ## stranspose rs))) =\n    (\\<forall>k<length cs. infs (cs ! k) (rs ! k))", "by simp"], ["proof (state)\nthis:\n  (\\<forall>k<length cs.\n      infs (cs ! k) (smap (\\<lambda>pp. pp ! k) (ps ## stranspose rs))) =\n  (\\<forall>k<length cs. infs (cs ! k) (rs ! k))\n\ngoal (1 subgoal):\n 1. \\<And>rs cs ps w.\n       \\<lbrakk>length rs = length cs; length ps = length cs\\<rbrakk>\n       \\<Longrightarrow> gen infs\n                          (map (\\<lambda>k ps. (cs ! k) (ps ! k))\n                            [0..<length cs])\n                          (ps ## stranspose rs) =\n                         list_all (\\<lambda>(c, r, p). infs c (p ## r))\n                          (cs || rs || ps)", "also"], ["proof (state)\nthis:\n  (\\<forall>k<length cs.\n      infs (cs ! k) (smap (\\<lambda>pp. pp ! k) (ps ## stranspose rs))) =\n  (\\<forall>k<length cs. infs (cs ! k) (rs ! k))\n\ngoal (1 subgoal):\n 1. \\<And>rs cs ps w.\n       \\<lbrakk>length rs = length cs; length ps = length cs\\<rbrakk>\n       \\<Longrightarrow> gen infs\n                          (map (\\<lambda>k ps. (cs ! k) (ps ! k))\n                            [0..<length cs])\n                          (ps ## stranspose rs) =\n                         list_all (\\<lambda>(c, r, p). infs c (p ## r))\n                          (cs || rs || ps)", "have \"\\<dots> \\<longleftrightarrow> list_all (\\<lambda> (c, r, p). infs c (p ## r)) (cs || rs || ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>k<length cs. infs (cs ! k) (rs ! k)) =\n    list_all (\\<lambda>(c, r, p). infs c (p ## r)) (cs || rs || ps)", "using 1"], ["proof (prove)\nusing this:\n  length rs = length cs\n  length ps = length cs\n\ngoal (1 subgoal):\n 1. (\\<forall>k<length cs. infs (cs ! k) (rs ! k)) =\n    list_all (\\<lambda>(c, r, p). infs c (p ## r)) (cs || rs || ps)", "unfolding list_all_length"], ["proof (prove)\nusing this:\n  length rs = length cs\n  length ps = length cs\n\ngoal (1 subgoal):\n 1. (\\<forall>k<length cs. infs (cs ! k) (rs ! k)) =\n    (\\<forall>n<length (cs || rs || ps).\n        case (cs || rs || ps) ! n of\n        (c, r, p) \\<Rightarrow> infs c (p ## r))", "by simp"], ["proof (state)\nthis:\n  (\\<forall>k<length cs. infs (cs ! k) (rs ! k)) =\n  list_all (\\<lambda>(c, r, p). infs c (p ## r)) (cs || rs || ps)\n\ngoal (1 subgoal):\n 1. \\<And>rs cs ps w.\n       \\<lbrakk>length rs = length cs; length ps = length cs\\<rbrakk>\n       \\<Longrightarrow> gen infs\n                          (map (\\<lambda>k ps. (cs ! k) (ps ! k))\n                            [0..<length cs])\n                          (ps ## stranspose rs) =\n                         list_all (\\<lambda>(c, r, p). infs c (p ## r))\n                          (cs || rs || ps)", "finally"], ["proof (chain)\npicking this:\n  gen infs (map (\\<lambda>k pp. (cs ! k) (pp ! k)) [0..<length cs])\n   (ps ## stranspose rs) =\n  list_all (\\<lambda>(c, r, p). infs c (p ## r)) (cs || rs || ps)", "show \"gen infs (map (\\<lambda> k ps. (cs ! k) (ps ! k)) [0 ..< length cs]) (ps ## stranspose rs) \\<longleftrightarrow>\n      list_all (\\<lambda> (c, r, p). infs c (p ## r)) (cs || rs || ps)\""], ["proof (prove)\nusing this:\n  gen infs (map (\\<lambda>k pp. (cs ! k) (pp ! k)) [0..<length cs])\n   (ps ## stranspose rs) =\n  list_all (\\<lambda>(c, r, p). infs c (p ## r)) (cs || rs || ps)\n\ngoal (1 subgoal):\n 1. gen infs (map (\\<lambda>k ps. (cs ! k) (ps ! k)) [0..<length cs])\n     (ps ## stranspose rs) =\n    list_all (\\<lambda>(c, r, p). infs c (p ## r)) (cs || rs || ps)", "by this"], ["proof (state)\nthis:\n  gen infs (map (\\<lambda>k ps. (cs ! k) (ps ! k)) [0..<length cs])\n   (ps ## stranspose rs) =\n  list_all (\\<lambda>(c, r, p). infs c (p ## r)) (cs || rs || ps)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas intersect_list'_language[simp] = intersection_list.product_language[folded NGBA.language_def]"], ["", "lemmas intersect_list'_nodes_finite[intro] = intersection_list.product_nodes_finite[folded NGBA.nodes_def]"], ["", "global_interpretation union_list: automaton_union_list_run\n    nba nba.alphabet nba.initial nba.transition nba.accepting \"\\<lambda> P w r p. infs P (p ## r)\"\n    nba nba.alphabet nba.initial nba.transition nba.accepting \"\\<lambda> P w r p. infs P (p ## r)\"\n    \"\\<lambda> cs (k, p). (cs ! k) p\"\n    defines union_list = union_list.sum"], ["proof (prove)\ngoal (1 subgoal):\n 1. automaton_union_list_run nba nba.alphabet nba.initial nba.transition\n     nba.accepting (\\<lambda>P w r p. infs P (p ## r)) nba nba.alphabet\n     nba.initial nba.transition nba.accepting\n     (\\<lambda>P w r p. infs P (p ## r)) (\\<lambda>cs (k, p). (cs ! k) p)", "by (unfold_locales) (auto simp: szip_sconst_smap_fst comp_def)"], ["", "lemmas union_list_language = union_list.sum_language"], ["", "lemmas union_list_nodes_finite = union_list.sum_nodes_finite"], ["", "abbreviation intersect where \"intersect A B \\<equiv> degeneralize (intersect' A B)\""], ["", "lemma intersect_language[simp]: \"NBA.language (intersect A B) = NBA.language A \\<inter> NBA.language B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NBA.language (intersect A B) = NBA.language A \\<inter> NBA.language B", "by simp"], ["", "lemma intersect_nodes_finite[intro]:\n    assumes \"finite (NBA.nodes A)\" \"finite (NBA.nodes B)\"\n    shows \"finite (NBA.nodes (intersect A B))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (NBA.nodes (intersect A B))", "using intersect'_nodes_finite assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite (NBA.nodes ?A); finite (NBA.nodes ?B)\\<rbrakk>\n  \\<Longrightarrow> finite (NGBA.nodes (intersect' ?A ?B))\n  finite (NBA.nodes A)\n  finite (NBA.nodes B)\n\ngoal (1 subgoal):\n 1. finite (NBA.nodes (intersect A B))", "by simp"], ["", "abbreviation intersect_list where \"intersect_list AA \\<equiv> degeneralize (intersect_list' AA)\""], ["", "lemma intersect_list_language[simp]: \"NBA.language (intersect_list AA) = \\<Inter> (NBA.language ` set AA)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NBA.language (intersect_list AA) = \\<Inter> (NBA.language ` set AA)", "by simp"], ["", "lemma intersect_list_nodes_finite[intro]:\n    assumes \"list_all (finite \\<circ> NBA.nodes) AA\"\n    shows \"finite (NBA.nodes (intersect_list AA))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (NBA.nodes (intersect_list AA))", "using intersect_list'_nodes_finite assms"], ["proof (prove)\nusing this:\n  list_all (finite \\<circ> NBA.nodes) ?AA \\<Longrightarrow>\n  finite (NGBA.nodes (intersect_list' ?AA))\n  list_all (finite \\<circ> NBA.nodes) AA\n\ngoal (1 subgoal):\n 1. finite (NBA.nodes (intersect_list AA))", "by simp"], ["", "end"]]}