{"file_name": "/home/qj213/afp-2021-10-22/thys/Transition_Systems_and_Automata/Transition_Systems/Transition_System_Extra.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Transition_Systems_and_Automata", "problem_names": ["lemma stake_run:\n      assumes \"\\<And> k. path (stake k r) p\"\n      shows \"run r p\"", "lemma snth_run:\n      assumes \"\\<And> k. enabled (r !! k) (target (stake k r) p)\"\n      shows \"run r p\"", "lemma run_stake:\n      assumes \"run r p\"\n      shows \"path (stake k r) p\"", "lemma run_sdrop:\n      assumes \"run r p\"\n      shows \"run (sdrop k r) (target (stake k r) p)\"", "lemma run_snth:\n      assumes \"run r p\"\n      shows \"enabled (r !! k) (target (stake k r) p)\"", "lemma run_alt_def_snth: \"run r p \\<longleftrightarrow> (\\<forall> k. enabled (r !! k) (target (stake k r) p))\"", "lemma reachable_states:\n      assumes \"q \\<in> reachable p\" \"path r q\"\n      shows \"set (states r q) \\<subseteq> reachable p\"", "lemma reachable_trace:\n      assumes \"q \\<in> reachable p\" \"run r q\"\n      shows \"sset (trace r q) \\<subseteq> reachable p\"", "lemma nodes_states:\n      assumes \"p \\<in> nodes\" \"path r p\"\n      shows \"set (states r p) \\<subseteq> nodes\"", "lemma nodes_trace:\n      assumes \"p \\<in> nodes\" \"run r p\"\n      shows \"sset (trace r p) \\<subseteq> nodes\""], "translations": [["", "lemma stake_run:\n      assumes \"\\<And> k. path (stake k r) p\"\n      shows \"run r p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. run r p", "using assms"], ["proof (prove)\nusing this:\n  path (stake ?k r) p\n\ngoal (1 subgoal):\n 1. run r p", "by (coinduction arbitrary: r p) (force elim: path.cases)"], ["", "lemma snth_run:\n      assumes \"\\<And> k. enabled (r !! k) (target (stake k r) p)\"\n      shows \"run r p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. run r p", "using assms"], ["proof (prove)\nusing this:\n  enabled (r !! ?k) (target (stake ?k r) p)\n\ngoal (1 subgoal):\n 1. run r p", "by (coinduction arbitrary: r p) (metis stream.sel fold_simps snth.simps stake.simps)"], ["", "lemma run_stake:\n      assumes \"run r p\"\n      shows \"path (stake k r) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path (stake k r) p", "using assms"], ["proof (prove)\nusing this:\n  run r p\n\ngoal (1 subgoal):\n 1. path (stake k r) p", "by (metis run_shift_elim stake_sdrop)"], ["", "lemma run_sdrop:\n      assumes \"run r p\"\n      shows \"run (sdrop k r) (target (stake k r) p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. run (sdrop k r) (target (stake k r) p)", "using assms"], ["proof (prove)\nusing this:\n  run r p\n\ngoal (1 subgoal):\n 1. run (sdrop k r) (target (stake k r) p)", "by (metis run_shift_elim stake_sdrop)"], ["", "lemma run_snth:\n      assumes \"run r p\"\n      shows \"enabled (r !! k) (target (stake k r) p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enabled (r !! k) (target (stake k r) p)", "using assms"], ["proof (prove)\nusing this:\n  run r p\n\ngoal (1 subgoal):\n 1. enabled (r !! k) (target (stake k r) p)", "by (metis stream.collapse sdrop_simps(1) run_scons_elim run_sdrop)"], ["", "lemma run_alt_def_snth: \"run r p \\<longleftrightarrow> (\\<forall> k. enabled (r !! k) (target (stake k r) p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. run r p = (\\<forall>k. enabled (r !! k) (target (stake k r) p))", "using snth_run run_snth"], ["proof (prove)\nusing this:\n  (\\<And>k. enabled (?r !! k) (target (stake k ?r) ?p)) \\<Longrightarrow>\n  run ?r ?p\n  run ?r ?p \\<Longrightarrow> enabled (?r !! ?k) (target (stake ?k ?r) ?p)\n\ngoal (1 subgoal):\n 1. run r p = (\\<forall>k. enabled (r !! k) (target (stake k r) p))", "by blast"], ["", "lemma reachable_states:\n      assumes \"q \\<in> reachable p\" \"path r q\"\n      shows \"set (states r q) \\<subseteq> reachable p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (states r q) \\<subseteq> reachable p", "using assms"], ["proof (prove)\nusing this:\n  q \\<in> reachable p\n  path r q\n\ngoal (1 subgoal):\n 1. set (states r q) \\<subseteq> reachable p", "by (induct r arbitrary: q) (auto)"], ["", "lemma reachable_trace:\n      assumes \"q \\<in> reachable p\" \"run r q\"\n      shows \"sset (trace r q) \\<subseteq> reachable p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sset (trace r q) \\<subseteq> reachable p", "using assms"], ["proof (prove)\nusing this:\n  q \\<in> reachable p\n  run r q\n\ngoal (1 subgoal):\n 1. sset (trace r q) \\<subseteq> reachable p", "unfolding sset_subset_stream_pred"], ["proof (prove)\nusing this:\n  q \\<in> reachable p\n  run r q\n\ngoal (1 subgoal):\n 1. pred_stream (\\<lambda>a. a \\<in> reachable p) (trace r q)", "by (coinduction arbitrary: r q) (force elim: run.cases)"], ["", "end"], ["", "context transition_system_initial\n  begin"], ["", "lemma nodes_states:\n      assumes \"p \\<in> nodes\" \"path r p\"\n      shows \"set (states r p) \\<subseteq> nodes\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (states r p) \\<subseteq> nodes", "using reachable_states assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?q \\<in> reachable ?p; path ?r ?q\\<rbrakk>\n  \\<Longrightarrow> set (states ?r ?q) \\<subseteq> reachable ?p\n  p \\<in> nodes\n  path r p\n\ngoal (1 subgoal):\n 1. set (states r p) \\<subseteq> nodes", "by blast"], ["", "lemma nodes_trace:\n      assumes \"p \\<in> nodes\" \"run r p\"\n      shows \"sset (trace r p) \\<subseteq> nodes\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sset (trace r p) \\<subseteq> nodes", "using reachable_trace assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?q \\<in> reachable ?p; run ?r ?q\\<rbrakk>\n  \\<Longrightarrow> sset (trace ?r ?q) \\<subseteq> reachable ?p\n  p \\<in> nodes\n  run r p\n\ngoal (1 subgoal):\n 1. sset (trace r p) \\<subseteq> nodes", "by blast"], ["", "end"], ["", "end"]]}