{"file_name": "/home/qj213/afp-2021-10-22/thys/Transition_Systems_and_Automata/Automata/DRA/DRA_Combine.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Transition_Systems_and_Automata", "problem_names": ["lemmas intersect_bc_language[simp] = intersection_bc.product_language[folded DCA.language_def DRA.language_def]", "lemmas intersect_bc_nodes_finite = intersection_bc.product_nodes_finite[folded DCA.nodes_def DRA.nodes_def]", "lemmas intersect_bc_nodes_card = intersection_bc.product_nodes_card[folded DCA.nodes_def DRA.nodes_def]", "lemmas union_list_language = union_list.product_language", "lemmas union_list_nodes_finite = union_list.product_nodes_finite", "lemmas union_list_nodes_card = union_list.product_nodes_card"], "translations": [["", "lemmas intersect_bc_language[simp] = intersection_bc.product_language[folded DCA.language_def DRA.language_def]"], ["", "lemmas intersect_bc_nodes_finite = intersection_bc.product_nodes_finite[folded DCA.nodes_def DRA.nodes_def]"], ["", "lemmas intersect_bc_nodes_card = intersection_bc.product_nodes_card[folded DCA.nodes_def DRA.nodes_def]"], ["", "(* TODO: are there some statements about the rabin constant hidden in here?\n    same for gen/cogen, also in other combinations, shouldn't have to unfold those *)"], ["", "global_interpretation union_list: automaton_union_list_run\n    dra.dra dra.alphabet dra.initial dra.transition dra.condition \"\\<lambda> P w r p. cogen rabin P (p ## r)\"\n    dra.dra dra.alphabet dra.initial dra.transition dra.condition \"\\<lambda> P w r p. cogen rabin P (p ## r)\"\n    \"\\<lambda> cs. do { k \\<leftarrow> [0 ..< length cs]; (f, g) \\<leftarrow> cs ! k; [(\\<lambda> pp. f (pp ! k), \\<lambda> pp. g (pp ! k))] }\"\n    defines union_list = union_list.product"], ["proof (prove)\ngoal (1 subgoal):\n 1. automaton_union_list_run dra dra.alphabet dra.initial dra.transition\n     condition (\\<lambda>P w r p. cogen rabin P (p ## r)) dra dra.alphabet\n     dra.initial dra.transition condition\n     (\\<lambda>P w r p. cogen rabin P (p ## r))\n     (\\<lambda>cs.\n         [0..<length cs] \\<bind>\n         (\\<lambda>k.\n             cs ! k \\<bind>\n             (\\<lambda>(f, g).\n                 [(\\<lambda>pp. f (pp ! k), \\<lambda>pp. g (pp ! k))])))", "by (unfold_locales) (auto simp: cogen_def rabin_def comp_def split_beta)"], ["", "lemmas union_list_language = union_list.product_language"], ["", "lemmas union_list_nodes_finite = union_list.product_nodes_finite"], ["", "lemmas union_list_nodes_card = union_list.product_nodes_card"], ["", "end"]]}