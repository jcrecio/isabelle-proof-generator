{"file_name": "/home/qj213/afp-2021-10-22/thys/Transition_Systems_and_Automata/Basic/Maps.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Transition_Systems_and_Automata", "problem_names": ["lemma fun_upd_None[simp]:\n    assumes \"p \\<notin> dom f\"\n    shows \"f (p := None) = f\"", "lemma finite_set_of_finite_maps':\n    assumes \"finite A\" \"finite B\"\n    shows \"finite {m. dom m \\<subseteq> A \\<and> ran m \\<subseteq> B}\"", "lemma fold_map_of:\n    assumes \"distinct xs\"\n    shows \"fold (\\<lambda> x (k, m). (Suc k, m (x \\<mapsto> k))) xs (k, m) =\n      (k + length xs, m ++ map_of (xs || [k ..< k + length xs]))\"", "lemma expand_update[simp]:\n    assumes \"f x \\<noteq> {}\"\n    shows \"expand (f (x := S)) = (\\<Union> y \\<in> S. (\\<lambda> g. g (x := y)) ` expand f)\"", "lemma expand_map_alt_def: \"expand_map f =\n    {g. dom g = dom f \\<and> (\\<forall> x S y. f x = Some S \\<longrightarrow> g x = Some y \\<longrightarrow> y \\<in> S)}\"", "lemma expand_map_dom:\n    assumes \"g \\<in> expand_map f\"\n    shows \"dom g = dom f\"", "lemma expand_map_empty[simp]: \"expand_map Map.empty = {Map.empty}\"", "lemma expand_map_update[simp]:\n    \"expand_map (f (x \\<mapsto> S)) = (\\<Union> y \\<in> S. (\\<lambda> g. g (x \\<mapsto> y)) ` expand_map (f (x := None)))\""], "translations": [["", "lemma fun_upd_None[simp]:\n    assumes \"p \\<notin> dom f\"\n    shows \"f (p := None) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f(p := None) = f", "using assms"], ["proof (prove)\nusing this:\n  p \\<notin> dom f\n\ngoal (1 subgoal):\n 1. f(p := None) = f", "by auto"], ["", "(* TODO: this is a strictly stronger version of finite_set_of_finite_maps, move to library *)"], ["", "lemma finite_set_of_finite_maps':\n    assumes \"finite A\" \"finite B\"\n    shows \"finite {m. dom m \\<subseteq> A \\<and> ran m \\<subseteq> B}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {m. dom m \\<subseteq> A \\<and> ran m \\<subseteq> B}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite {m. dom m \\<subseteq> A \\<and> ran m \\<subseteq> B}", "have \"{m. dom m \\<subseteq> A \\<and> ran m \\<subseteq> B} = (\\<Union> \\<A> \\<in> Pow A. {m. dom m = \\<A> \\<and> ran m \\<subseteq> B})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {m. dom m \\<subseteq> A \\<and> ran m \\<subseteq> B} =\n    (\\<Union>\\<A>\\<in>Pow A. {m. dom m = \\<A> \\<and> ran m \\<subseteq> B})", "by auto"], ["proof (state)\nthis:\n  {m. dom m \\<subseteq> A \\<and> ran m \\<subseteq> B} =\n  (\\<Union>\\<A>\\<in>Pow A. {m. dom m = \\<A> \\<and> ran m \\<subseteq> B})\n\ngoal (1 subgoal):\n 1. finite {m. dom m \\<subseteq> A \\<and> ran m \\<subseteq> B}", "also"], ["proof (state)\nthis:\n  {m. dom m \\<subseteq> A \\<and> ran m \\<subseteq> B} =\n  (\\<Union>\\<A>\\<in>Pow A. {m. dom m = \\<A> \\<and> ran m \\<subseteq> B})\n\ngoal (1 subgoal):\n 1. finite {m. dom m \\<subseteq> A \\<and> ran m \\<subseteq> B}", "have \"finite \\<dots>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     (\\<Union>\\<A>\\<in>Pow A. {m. dom m = \\<A> \\<and> ran m \\<subseteq> B})", "using finite_subset assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n  finite A\n  finite B\n\ngoal (1 subgoal):\n 1. finite\n     (\\<Union>\\<A>\\<in>Pow A. {m. dom m = \\<A> \\<and> ran m \\<subseteq> B})", "by (auto intro: finite_set_of_finite_maps)"], ["proof (state)\nthis:\n  finite\n   (\\<Union>\\<A>\\<in>Pow A. {m. dom m = \\<A> \\<and> ran m \\<subseteq> B})\n\ngoal (1 subgoal):\n 1. finite {m. dom m \\<subseteq> A \\<and> ran m \\<subseteq> B}", "finally"], ["proof (chain)\npicking this:\n  finite {m. dom m \\<subseteq> A \\<and> ran m \\<subseteq> B}", "show ?thesis"], ["proof (prove)\nusing this:\n  finite {m. dom m \\<subseteq> A \\<and> ran m \\<subseteq> B}\n\ngoal (1 subgoal):\n 1. finite {m. dom m \\<subseteq> A \\<and> ran m \\<subseteq> B}", "by this"], ["proof (state)\nthis:\n  finite {m. dom m \\<subseteq> A \\<and> ran m \\<subseteq> B}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fold_map_of:\n    assumes \"distinct xs\"\n    shows \"fold (\\<lambda> x (k, m). (Suc k, m (x \\<mapsto> k))) xs (k, m) =\n      (k + length xs, m ++ map_of (xs || [k ..< k + length xs]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fold (\\<lambda>x (k, m). (Suc k, m(x \\<mapsto> k))) xs (k, m) =\n    (k + length xs, m ++ map_of (xs || [k..<k + length xs]))", "using assms"], ["proof (prove)\nusing this:\n  distinct xs\n\ngoal (1 subgoal):\n 1. fold (\\<lambda>x (k, m). (Suc k, m(x \\<mapsto> k))) xs (k, m) =\n    (k + length xs, m ++ map_of (xs || [k..<k + length xs]))", "proof (induct xs arbitrary: k m)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k m.\n       distinct [] \\<Longrightarrow>\n       fold (\\<lambda>x (k, m). (Suc k, m(x \\<mapsto> k))) [] (k, m) =\n       (k + length [], m ++ map_of ([] || [k..<k + length []]))\n 2. \\<And>a xs k m.\n       \\<lbrakk>\\<And>k m.\n                   distinct xs \\<Longrightarrow>\n                   fold (\\<lambda>x (k, m). (Suc k, m(x \\<mapsto> k))) xs\n                    (k, m) =\n                   (k + length xs, m ++ map_of (xs || [k..<k + length xs]));\n        distinct (a # xs)\\<rbrakk>\n       \\<Longrightarrow> fold (\\<lambda>x (k, m). (Suc k, m(x \\<mapsto> k)))\n                          (a # xs) (k, m) =\n                         (k + length (a # xs),\n                          m ++ map_of (a # xs || [k..<k + length (a # xs)]))", "case Nil"], ["proof (state)\nthis:\n  distinct []\n\ngoal (2 subgoals):\n 1. \\<And>k m.\n       distinct [] \\<Longrightarrow>\n       fold (\\<lambda>x (k, m). (Suc k, m(x \\<mapsto> k))) [] (k, m) =\n       (k + length [], m ++ map_of ([] || [k..<k + length []]))\n 2. \\<And>a xs k m.\n       \\<lbrakk>\\<And>k m.\n                   distinct xs \\<Longrightarrow>\n                   fold (\\<lambda>x (k, m). (Suc k, m(x \\<mapsto> k))) xs\n                    (k, m) =\n                   (k + length xs, m ++ map_of (xs || [k..<k + length xs]));\n        distinct (a # xs)\\<rbrakk>\n       \\<Longrightarrow> fold (\\<lambda>x (k, m). (Suc k, m(x \\<mapsto> k)))\n                          (a # xs) (k, m) =\n                         (k + length (a # xs),\n                          m ++ map_of (a # xs || [k..<k + length (a # xs)]))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. fold\n     (\\<lambda>x a.\n         case a of (k, m) \\<Rightarrow> (Suc k, m(x \\<mapsto> k)))\n     [] (k, m) =\n    (k + length [], m ++ map_of ([] || [k..<k + length []]))", "by simp"], ["proof (state)\nthis:\n  fold\n   (\\<lambda>x a. case a of (k, m) \\<Rightarrow> (Suc k, m(x \\<mapsto> k)))\n   [] (k, m) =\n  (k + length [], m ++ map_of ([] || [k..<k + length []]))\n\ngoal (1 subgoal):\n 1. \\<And>a xs k m.\n       \\<lbrakk>\\<And>k m.\n                   distinct xs \\<Longrightarrow>\n                   fold (\\<lambda>x (k, m). (Suc k, m(x \\<mapsto> k))) xs\n                    (k, m) =\n                   (k + length xs, m ++ map_of (xs || [k..<k + length xs]));\n        distinct (a # xs)\\<rbrakk>\n       \\<Longrightarrow> fold (\\<lambda>x (k, m). (Suc k, m(x \\<mapsto> k)))\n                          (a # xs) (k, m) =\n                         (k + length (a # xs),\n                          m ++ map_of (a # xs || [k..<k + length (a # xs)]))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs k m.\n       \\<lbrakk>\\<And>k m.\n                   distinct xs \\<Longrightarrow>\n                   fold (\\<lambda>x (k, m). (Suc k, m(x \\<mapsto> k))) xs\n                    (k, m) =\n                   (k + length xs, m ++ map_of (xs || [k..<k + length xs]));\n        distinct (a # xs)\\<rbrakk>\n       \\<Longrightarrow> fold (\\<lambda>x (k, m). (Suc k, m(x \\<mapsto> k)))\n                          (a # xs) (k, m) =\n                         (k + length (a # xs),\n                          m ++ map_of (a # xs || [k..<k + length (a # xs)]))", "case (Cons x xs)"], ["proof (state)\nthis:\n  distinct xs \\<Longrightarrow>\n  fold\n   (\\<lambda>x a. case a of (k, m) \\<Rightarrow> (Suc k, m(x \\<mapsto> k)))\n   xs (?k, ?m) =\n  (?k + length xs, ?m ++ map_of (xs || [?k..<?k + length xs]))\n  distinct (x # xs)\n\ngoal (1 subgoal):\n 1. \\<And>a xs k m.\n       \\<lbrakk>\\<And>k m.\n                   distinct xs \\<Longrightarrow>\n                   fold (\\<lambda>x (k, m). (Suc k, m(x \\<mapsto> k))) xs\n                    (k, m) =\n                   (k + length xs, m ++ map_of (xs || [k..<k + length xs]));\n        distinct (a # xs)\\<rbrakk>\n       \\<Longrightarrow> fold (\\<lambda>x (k, m). (Suc k, m(x \\<mapsto> k)))\n                          (a # xs) (k, m) =\n                         (k + length (a # xs),\n                          m ++ map_of (a # xs || [k..<k + length (a # xs)]))", "have \"fold (\\<lambda> x (k, m). (Suc k, m (x \\<mapsto> k))) (x # xs) (k, m) =\n      (Suc k + length xs, (m ++ map_of (xs || [Suc k ..< Suc k + length xs])) (x \\<mapsto> k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fold (\\<lambda>x (k, m). (Suc k, m(x \\<mapsto> k))) (x # xs) (k, m) =\n    (Suc k + length xs, (m ++ map_of (xs || [Suc k..<Suc k + length xs]))(x \n     \\<mapsto> k))", "using Cons"], ["proof (prove)\nusing this:\n  distinct xs \\<Longrightarrow>\n  fold\n   (\\<lambda>x a. case a of (k, m) \\<Rightarrow> (Suc k, m(x \\<mapsto> k)))\n   xs (?k, ?m) =\n  (?k + length xs, ?m ++ map_of (xs || [?k..<?k + length xs]))\n  distinct (x # xs)\n\ngoal (1 subgoal):\n 1. fold (\\<lambda>x (k, m). (Suc k, m(x \\<mapsto> k))) (x # xs) (k, m) =\n    (Suc k + length xs, (m ++ map_of (xs || [Suc k..<Suc k + length xs]))(x \n     \\<mapsto> k))", "by (fastforce simp add: map_add_upd_left)"], ["proof (state)\nthis:\n  fold (\\<lambda>x (k, m). (Suc k, m(x \\<mapsto> k))) (x # xs) (k, m) =\n  (Suc k + length xs, (m ++ map_of (xs || [Suc k..<Suc k + length xs]))(x \n   \\<mapsto> k))\n\ngoal (1 subgoal):\n 1. \\<And>a xs k m.\n       \\<lbrakk>\\<And>k m.\n                   distinct xs \\<Longrightarrow>\n                   fold (\\<lambda>x (k, m). (Suc k, m(x \\<mapsto> k))) xs\n                    (k, m) =\n                   (k + length xs, m ++ map_of (xs || [k..<k + length xs]));\n        distinct (a # xs)\\<rbrakk>\n       \\<Longrightarrow> fold (\\<lambda>x (k, m). (Suc k, m(x \\<mapsto> k)))\n                          (a # xs) (k, m) =\n                         (k + length (a # xs),\n                          m ++ map_of (a # xs || [k..<k + length (a # xs)]))", "also"], ["proof (state)\nthis:\n  fold (\\<lambda>x (k, m). (Suc k, m(x \\<mapsto> k))) (x # xs) (k, m) =\n  (Suc k + length xs, (m ++ map_of (xs || [Suc k..<Suc k + length xs]))(x \n   \\<mapsto> k))\n\ngoal (1 subgoal):\n 1. \\<And>a xs k m.\n       \\<lbrakk>\\<And>k m.\n                   distinct xs \\<Longrightarrow>\n                   fold (\\<lambda>x (k, m). (Suc k, m(x \\<mapsto> k))) xs\n                    (k, m) =\n                   (k + length xs, m ++ map_of (xs || [k..<k + length xs]));\n        distinct (a # xs)\\<rbrakk>\n       \\<Longrightarrow> fold (\\<lambda>x (k, m). (Suc k, m(x \\<mapsto> k)))\n                          (a # xs) (k, m) =\n                         (k + length (a # xs),\n                          m ++ map_of (a # xs || [k..<k + length (a # xs)]))", "have \"\\<dots> = (k + length (x # xs), m ++ map_of (x # xs || [k ..< k + length (x # xs)]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Suc k + length xs, (m ++ map_of (xs || [Suc k..<Suc k + length xs]))(x \n     \\<mapsto> k)) =\n    (k + length (x # xs), m ++ map_of (x # xs || [k..<k + length (x # xs)]))", "by (simp add: upt_rec)"], ["proof (state)\nthis:\n  (Suc k + length xs, (m ++ map_of (xs || [Suc k..<Suc k + length xs]))(x \n   \\<mapsto> k)) =\n  (k + length (x # xs), m ++ map_of (x # xs || [k..<k + length (x # xs)]))\n\ngoal (1 subgoal):\n 1. \\<And>a xs k m.\n       \\<lbrakk>\\<And>k m.\n                   distinct xs \\<Longrightarrow>\n                   fold (\\<lambda>x (k, m). (Suc k, m(x \\<mapsto> k))) xs\n                    (k, m) =\n                   (k + length xs, m ++ map_of (xs || [k..<k + length xs]));\n        distinct (a # xs)\\<rbrakk>\n       \\<Longrightarrow> fold (\\<lambda>x (k, m). (Suc k, m(x \\<mapsto> k)))\n                          (a # xs) (k, m) =\n                         (k + length (a # xs),\n                          m ++ map_of (a # xs || [k..<k + length (a # xs)]))", "finally"], ["proof (chain)\npicking this:\n  fold (\\<lambda>x (k, m). (Suc k, m(x \\<mapsto> k))) (x # xs) (k, m) =\n  (k + length (x # xs), m ++ map_of (x # xs || [k..<k + length (x # xs)]))", "show ?case"], ["proof (prove)\nusing this:\n  fold (\\<lambda>x (k, m). (Suc k, m(x \\<mapsto> k))) (x # xs) (k, m) =\n  (k + length (x # xs), m ++ map_of (x # xs || [k..<k + length (x # xs)]))\n\ngoal (1 subgoal):\n 1. fold\n     (\\<lambda>x a.\n         case a of (k, m) \\<Rightarrow> (Suc k, m(x \\<mapsto> k)))\n     (x # xs) (k, m) =\n    (k + length (x # xs), m ++ map_of (x # xs || [k..<k + length (x # xs)]))", "by this"], ["proof (state)\nthis:\n  fold\n   (\\<lambda>x a. case a of (k, m) \\<Rightarrow> (Suc k, m(x \\<mapsto> k)))\n   (x # xs) (k, m) =\n  (k + length (x # xs), m ++ map_of (x # xs || [k..<k + length (x # xs)]))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Expanding set functions to sets of functions\\<close>"], ["", "definition expand :: \"('a \\<Rightarrow> 'b set) \\<Rightarrow> ('a \\<Rightarrow> 'b) set\" where\n    \"expand f = {g. \\<forall> x. g x \\<in> f x}\""], ["", "lemma expand_update[simp]:\n    assumes \"f x \\<noteq> {}\"\n    shows \"expand (f (x := S)) = (\\<Union> y \\<in> S. (\\<lambda> g. g (x := y)) ` expand f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. expand (f(x := S)) =\n    (\\<Union>y\\<in>S. (\\<lambda>g. g(x := y)) ` expand f)", "unfolding expand_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {g. \\<forall>xa. g xa \\<in> (f(x := S)) xa} =\n    (\\<Union>y\\<in>S.\n        (\\<lambda>g. g(x := y)) ` {g. \\<forall>x. g x \\<in> f x})", "proof (intro equalityI subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> {g. \\<forall>xa.\n                       g xa \\<in> (f(x := S)) xa} \\<Longrightarrow>\n       xa \\<in> (\\<Union>y\\<in>S.\n                    (\\<lambda>g. g(x := y)) `\n                    {g. \\<forall>x. g x \\<in> f x})\n 2. \\<And>xa.\n       xa \\<in> (\\<Union>y\\<in>S.\n                    (\\<lambda>g. g(x := y)) `\n                    {g. \\<forall>x. g x \\<in> f x}) \\<Longrightarrow>\n       xa \\<in> {g. \\<forall>xa. g xa \\<in> (f(x := S)) xa}", "fix g"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> {g. \\<forall>xa.\n                       g xa \\<in> (f(x := S)) xa} \\<Longrightarrow>\n       xa \\<in> (\\<Union>y\\<in>S.\n                    (\\<lambda>g. g(x := y)) `\n                    {g. \\<forall>x. g x \\<in> f x})\n 2. \\<And>xa.\n       xa \\<in> (\\<Union>y\\<in>S.\n                    (\\<lambda>g. g(x := y)) `\n                    {g. \\<forall>x. g x \\<in> f x}) \\<Longrightarrow>\n       xa \\<in> {g. \\<forall>xa. g xa \\<in> (f(x := S)) xa}", "assume 1: \"g \\<in> {g. \\<forall> y. g y \\<in> (f (x := S)) y}\""], ["proof (state)\nthis:\n  g \\<in> {g. \\<forall>y. g y \\<in> (f(x := S)) y}\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> {g. \\<forall>xa.\n                       g xa \\<in> (f(x := S)) xa} \\<Longrightarrow>\n       xa \\<in> (\\<Union>y\\<in>S.\n                    (\\<lambda>g. g(x := y)) `\n                    {g. \\<forall>x. g x \\<in> f x})\n 2. \\<And>xa.\n       xa \\<in> (\\<Union>y\\<in>S.\n                    (\\<lambda>g. g(x := y)) `\n                    {g. \\<forall>x. g x \\<in> f x}) \\<Longrightarrow>\n       xa \\<in> {g. \\<forall>xa. g xa \\<in> (f(x := S)) xa}", "have 2: \"g x \\<in> S\" \"\\<And> y. x \\<noteq> y \\<Longrightarrow> g y \\<in> f y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g x \\<in> S &&& (\\<And>y. x \\<noteq> y \\<Longrightarrow> g y \\<in> f y)", "using 1"], ["proof (prove)\nusing this:\n  g \\<in> {g. \\<forall>y. g y \\<in> (f(x := S)) y}\n\ngoal (1 subgoal):\n 1. g x \\<in> S &&& (\\<And>y. x \\<noteq> y \\<Longrightarrow> g y \\<in> f y)", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  g x \\<in> S\n  x \\<noteq> ?y \\<Longrightarrow> g ?y \\<in> f ?y\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> {g. \\<forall>xa.\n                       g xa \\<in> (f(x := S)) xa} \\<Longrightarrow>\n       xa \\<in> (\\<Union>y\\<in>S.\n                    (\\<lambda>g. g(x := y)) `\n                    {g. \\<forall>x. g x \\<in> f x})\n 2. \\<And>xa.\n       xa \\<in> (\\<Union>y\\<in>S.\n                    (\\<lambda>g. g(x := y)) `\n                    {g. \\<forall>x. g x \\<in> f x}) \\<Longrightarrow>\n       xa \\<in> {g. \\<forall>xa. g xa \\<in> (f(x := S)) xa}", "obtain y where 3: \"y \\<in> f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y. y \\<in> f x \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using assms"], ["proof (prove)\nusing this:\n  f x \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>y. y \\<in> f x \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  y \\<in> f x\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> {g. \\<forall>xa.\n                       g xa \\<in> (f(x := S)) xa} \\<Longrightarrow>\n       xa \\<in> (\\<Union>y\\<in>S.\n                    (\\<lambda>g. g(x := y)) `\n                    {g. \\<forall>x. g x \\<in> f x})\n 2. \\<And>xa.\n       xa \\<in> (\\<Union>y\\<in>S.\n                    (\\<lambda>g. g(x := y)) `\n                    {g. \\<forall>x. g x \\<in> f x}) \\<Longrightarrow>\n       xa \\<in> {g. \\<forall>xa. g xa \\<in> (f(x := S)) xa}", "show \"g \\<in> (\\<Union> y \\<in> S. (\\<lambda> g. g (x := y)) ` {g. \\<forall> x. g x \\<in> f x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<in> (\\<Union>y\\<in>S.\n                (\\<lambda>g. g(x := y)) ` {g. \\<forall>x. g x \\<in> f x})", "proof (intro UN_I image_eqI)"], ["proof (state)\ngoal (3 subgoals):\n 1. ?a \\<in> S\n 2. g = ?x1(x := ?a)\n 3. ?x1 \\<in> {g. \\<forall>x. g x \\<in> f x}", "show \"g x \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g x \\<in> S", "using 2(1)"], ["proof (prove)\nusing this:\n  g x \\<in> S\n\ngoal (1 subgoal):\n 1. g x \\<in> S", "by this"], ["proof (state)\nthis:\n  g x \\<in> S\n\ngoal (2 subgoals):\n 1. g = ?x1(x := g x)\n 2. ?x1 \\<in> {g. \\<forall>x. g x \\<in> f x}", "show \"g (x := y) \\<in> {g. \\<forall> x. g x \\<in> f x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g(x := y) \\<in> {g. \\<forall>x. g x \\<in> f x}", "using 2 3"], ["proof (prove)\nusing this:\n  g x \\<in> S\n  x \\<noteq> ?y \\<Longrightarrow> g ?y \\<in> f ?y\n  y \\<in> f x\n\ngoal (1 subgoal):\n 1. g(x := y) \\<in> {g. \\<forall>x. g x \\<in> f x}", "by auto"], ["proof (state)\nthis:\n  g(x := y) \\<in> {g. \\<forall>x. g x \\<in> f x}\n\ngoal (1 subgoal):\n 1. g = g(x := y, x := g x)", "show \"g = g (x := y, x := g x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g = g(x := y, x := g x)", "by simp"], ["proof (state)\nthis:\n  g = g(x := y, x := g x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  g \\<in> (\\<Union>y\\<in>S.\n              (\\<lambda>g. g(x := y)) ` {g. \\<forall>x. g x \\<in> f x})\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> (\\<Union>y\\<in>S.\n                    (\\<lambda>g. g(x := y)) `\n                    {g. \\<forall>x. g x \\<in> f x}) \\<Longrightarrow>\n       xa \\<in> {g. \\<forall>xa. g xa \\<in> (f(x := S)) xa}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> (\\<Union>y\\<in>S.\n                    (\\<lambda>g. g(x := y)) `\n                    {g. \\<forall>x. g x \\<in> f x}) \\<Longrightarrow>\n       xa \\<in> {g. \\<forall>xa. g xa \\<in> (f(x := S)) xa}", "fix g"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> (\\<Union>y\\<in>S.\n                    (\\<lambda>g. g(x := y)) `\n                    {g. \\<forall>x. g x \\<in> f x}) \\<Longrightarrow>\n       xa \\<in> {g. \\<forall>xa. g xa \\<in> (f(x := S)) xa}", "assume 1: \"g \\<in> (\\<Union> y \\<in> S. (\\<lambda> g. g (x := y)) ` {g. \\<forall> x. g x \\<in> f x})\""], ["proof (state)\nthis:\n  g \\<in> (\\<Union>y\\<in>S.\n              (\\<lambda>g. g(x := y)) ` {g. \\<forall>x. g x \\<in> f x})\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> (\\<Union>y\\<in>S.\n                    (\\<lambda>g. g(x := y)) `\n                    {g. \\<forall>x. g x \\<in> f x}) \\<Longrightarrow>\n       xa \\<in> {g. \\<forall>xa. g xa \\<in> (f(x := S)) xa}", "show \"g \\<in> {g. \\<forall> y. g y \\<in> (f (x := S)) y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<in> {g. \\<forall>y. g y \\<in> (f(x := S)) y}", "using 1"], ["proof (prove)\nusing this:\n  g \\<in> (\\<Union>y\\<in>S.\n              (\\<lambda>g. g(x := y)) ` {g. \\<forall>x. g x \\<in> f x})\n\ngoal (1 subgoal):\n 1. g \\<in> {g. \\<forall>y. g y \\<in> (f(x := S)) y}", "by auto"], ["proof (state)\nthis:\n  g \\<in> {g. \\<forall>y. g y \\<in> (f(x := S)) y}\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Expanding set maps into sets of maps\\<close>"], ["", "definition expand_map :: \"('a \\<rightharpoonup> 'b set) \\<Rightarrow> ('a \\<rightharpoonup> 'b) set\" where\n    \"expand_map f \\<equiv> expand (case_option {None} (image Some) \\<circ> f)\""], ["", "lemma expand_map_alt_def: \"expand_map f =\n    {g. dom g = dom f \\<and> (\\<forall> x S y. f x = Some S \\<longrightarrow> g x = Some y \\<longrightarrow> y \\<in> S)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. expand_map f =\n    {g. dom g = dom f \\<and>\n        (\\<forall>x S y.\n            f x = Some S \\<longrightarrow>\n            g x = Some y \\<longrightarrow> y \\<in> S)}", "unfolding expand_map_def expand_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {g. \\<forall>x. g x \\<in> (case_option {None} ((`) Some) \\<circ> f) x} =\n    {g. dom g = dom f \\<and>\n        (\\<forall>x S y.\n            f x = Some S \\<longrightarrow>\n            g x = Some y \\<longrightarrow> y \\<in> S)}", "by (auto split: option.splits) (force+)"], ["", "lemma expand_map_dom:\n    assumes \"g \\<in> expand_map f\"\n    shows \"dom g = dom f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom g = dom f", "using assms"], ["proof (prove)\nusing this:\n  g \\<in> expand_map f\n\ngoal (1 subgoal):\n 1. dom g = dom f", "unfolding expand_map_def expand_def"], ["proof (prove)\nusing this:\n  g \\<in> {g. \\<forall>x.\n                 g x \\<in> (case_option {None} ((`) Some) \\<circ> f) x}\n\ngoal (1 subgoal):\n 1. dom g = dom f", "by (auto split: option.splits)"], ["", "lemma expand_map_empty[simp]: \"expand_map Map.empty = {Map.empty}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. expand_map Map.empty = {Map.empty}", "unfolding expand_map_def expand_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {g. \\<forall>x.\n           g x \\<in> (case_option {None} ((`) Some) \\<circ> Map.empty) x} =\n    {Map.empty}", "by auto"], ["", "lemma expand_map_update[simp]:\n    \"expand_map (f (x \\<mapsto> S)) = (\\<Union> y \\<in> S. (\\<lambda> g. g (x \\<mapsto> y)) ` expand_map (f (x := None)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. expand_map (f(x \\<mapsto> S)) =\n    (\\<Union>y\\<in>S.\n        (\\<lambda>g. g(x \\<mapsto> y)) ` expand_map (f(x := None)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. expand_map (f(x \\<mapsto> S)) =\n    (\\<Union>y\\<in>S.\n        (\\<lambda>g. g(x \\<mapsto> y)) ` expand_map (f(x := None)))", "let ?m = \"case_option {None} (image Some)\""], ["proof (state)\ngoal (1 subgoal):\n 1. expand_map (f(x \\<mapsto> S)) =\n    (\\<Union>y\\<in>S.\n        (\\<lambda>g. g(x \\<mapsto> y)) ` expand_map (f(x := None)))", "have 1: \"((?m \\<circ> f) (x := {None})) x \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((case_option {None} ((`) Some) \\<circ> f)(x := {None})) x \\<noteq> {}", "by simp"], ["proof (state)\nthis:\n  ((case_option {None} ((`) Some) \\<circ> f)(x := {None})) x \\<noteq> {}\n\ngoal (1 subgoal):\n 1. expand_map (f(x \\<mapsto> S)) =\n    (\\<Union>y\\<in>S.\n        (\\<lambda>g. g(x \\<mapsto> y)) ` expand_map (f(x := None)))", "have \"expand_map (f (x := Some S)) = expand_map (f (x := None, x := Some S))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. expand_map (f(x \\<mapsto> S)) = expand_map (f(x := None)(x \\<mapsto> S))", "by simp"], ["proof (state)\nthis:\n  expand_map (f(x \\<mapsto> S)) = expand_map (f(x := None)(x \\<mapsto> S))\n\ngoal (1 subgoal):\n 1. expand_map (f(x \\<mapsto> S)) =\n    (\\<Union>y\\<in>S.\n        (\\<lambda>g. g(x \\<mapsto> y)) ` expand_map (f(x := None)))", "also"], ["proof (state)\nthis:\n  expand_map (f(x \\<mapsto> S)) = expand_map (f(x := None)(x \\<mapsto> S))\n\ngoal (1 subgoal):\n 1. expand_map (f(x \\<mapsto> S)) =\n    (\\<Union>y\\<in>S.\n        (\\<lambda>g. g(x \\<mapsto> y)) ` expand_map (f(x := None)))", "have \"\\<dots> = expand ((?m \\<circ> f) (x := {None}, x := ?m (Some S)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. expand_map (f(x := None)(x \\<mapsto> S)) =\n    expand\n     ((case_option {None} ((`) Some) \\<circ> f)\n      (x := {None},\n       x := case Some S of None \\<Rightarrow> {None}\n            | Some x \\<Rightarrow> Some ` x))", "unfolding expand_map_def fun_upd_comp"], ["proof (prove)\ngoal (1 subgoal):\n 1. expand\n     ((case_option {None} ((`) Some) \\<circ> f)\n      (x := case None of None \\<Rightarrow> {None}\n            | Some x \\<Rightarrow> Some ` x,\n       x := case Some S of None \\<Rightarrow> {None}\n            | Some x \\<Rightarrow> Some ` x)) =\n    expand\n     ((case_option {None} ((`) Some) \\<circ> f)\n      (x := {None},\n       x := case Some S of None \\<Rightarrow> {None}\n            | Some x \\<Rightarrow> Some ` x))", "by simp"], ["proof (state)\nthis:\n  expand_map (f(x := None)(x \\<mapsto> S)) =\n  expand\n   ((case_option {None} ((`) Some) \\<circ> f)\n    (x := {None},\n     x := case Some S of None \\<Rightarrow> {None}\n          | Some x \\<Rightarrow> Some ` x))\n\ngoal (1 subgoal):\n 1. expand_map (f(x \\<mapsto> S)) =\n    (\\<Union>y\\<in>S.\n        (\\<lambda>g. g(x \\<mapsto> y)) ` expand_map (f(x := None)))", "also"], ["proof (state)\nthis:\n  expand_map (f(x := None)(x \\<mapsto> S)) =\n  expand\n   ((case_option {None} ((`) Some) \\<circ> f)\n    (x := {None},\n     x := case Some S of None \\<Rightarrow> {None}\n          | Some x \\<Rightarrow> Some ` x))\n\ngoal (1 subgoal):\n 1. expand_map (f(x \\<mapsto> S)) =\n    (\\<Union>y\\<in>S.\n        (\\<lambda>g. g(x \\<mapsto> y)) ` expand_map (f(x := None)))", "have \"\\<dots> = (\\<Union> y \\<in> ?m (Some S). (\\<lambda> g. g (x := y)) ` expand ((?m \\<circ> f) (x := {None})))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. expand\n     ((case_option {None} ((`) Some) \\<circ> f)\n      (x := {None},\n       x := case Some S of None \\<Rightarrow> {None}\n            | Some x \\<Rightarrow> Some ` x)) =\n    (\\<Union>y\\<in>case Some S of None \\<Rightarrow> {None}\n                   | Some x \\<Rightarrow> Some ` x.\n        (\\<lambda>g. g(x := y)) `\n        expand ((case_option {None} ((`) Some) \\<circ> f)(x := {None})))", "using expand_update 1"], ["proof (prove)\nusing this:\n  ?f ?x \\<noteq> {} \\<Longrightarrow>\n  expand (?f(?x := ?S)) =\n  (\\<Union>y\\<in>?S. (\\<lambda>g. g(?x := y)) ` expand ?f)\n  ((case_option {None} ((`) Some) \\<circ> f)(x := {None})) x \\<noteq> {}\n\ngoal (1 subgoal):\n 1. expand\n     ((case_option {None} ((`) Some) \\<circ> f)\n      (x := {None},\n       x := case Some S of None \\<Rightarrow> {None}\n            | Some x \\<Rightarrow> Some ` x)) =\n    (\\<Union>y\\<in>case Some S of None \\<Rightarrow> {None}\n                   | Some x \\<Rightarrow> Some ` x.\n        (\\<lambda>g. g(x := y)) `\n        expand ((case_option {None} ((`) Some) \\<circ> f)(x := {None})))", "by this"], ["proof (state)\nthis:\n  expand\n   ((case_option {None} ((`) Some) \\<circ> f)\n    (x := {None},\n     x := case Some S of None \\<Rightarrow> {None}\n          | Some x \\<Rightarrow> Some ` x)) =\n  (\\<Union>y\\<in>case Some S of None \\<Rightarrow> {None}\n                 | Some x \\<Rightarrow> Some ` x.\n      (\\<lambda>g. g(x := y)) `\n      expand ((case_option {None} ((`) Some) \\<circ> f)(x := {None})))\n\ngoal (1 subgoal):\n 1. expand_map (f(x \\<mapsto> S)) =\n    (\\<Union>y\\<in>S.\n        (\\<lambda>g. g(x \\<mapsto> y)) ` expand_map (f(x := None)))", "also"], ["proof (state)\nthis:\n  expand\n   ((case_option {None} ((`) Some) \\<circ> f)\n    (x := {None},\n     x := case Some S of None \\<Rightarrow> {None}\n          | Some x \\<Rightarrow> Some ` x)) =\n  (\\<Union>y\\<in>case Some S of None \\<Rightarrow> {None}\n                 | Some x \\<Rightarrow> Some ` x.\n      (\\<lambda>g. g(x := y)) `\n      expand ((case_option {None} ((`) Some) \\<circ> f)(x := {None})))\n\ngoal (1 subgoal):\n 1. expand_map (f(x \\<mapsto> S)) =\n    (\\<Union>y\\<in>S.\n        (\\<lambda>g. g(x \\<mapsto> y)) ` expand_map (f(x := None)))", "have \"\\<dots> = (\\<Union> y \\<in> S. (\\<lambda> g. g (x \\<mapsto> y)) ` expand_map (f (x := None)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>y\\<in>case Some S of None \\<Rightarrow> {None}\n                   | Some x \\<Rightarrow> Some ` x.\n        (\\<lambda>g. g(x := y)) `\n        expand ((case_option {None} ((`) Some) \\<circ> f)(x := {None}))) =\n    (\\<Union>y\\<in>S.\n        (\\<lambda>g. g(x \\<mapsto> y)) ` expand_map (f(x := None)))", "unfolding expand_map_def fun_upd_comp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>y\\<in>case Some S of None \\<Rightarrow> {None}\n                   | Some x \\<Rightarrow> Some ` x.\n        (\\<lambda>g. g(x := y)) `\n        expand ((case_option {None} ((`) Some) \\<circ> f)(x := {None}))) =\n    (\\<Union>y\\<in>S.\n        (\\<lambda>g. g(x \\<mapsto> y)) `\n        expand\n         ((case_option {None} ((`) Some) \\<circ> f)\n          (x := case None of None \\<Rightarrow> {None}\n                | Some x \\<Rightarrow> Some ` x)))", "by simp"], ["proof (state)\nthis:\n  (\\<Union>y\\<in>case Some S of None \\<Rightarrow> {None}\n                 | Some x \\<Rightarrow> Some ` x.\n      (\\<lambda>g. g(x := y)) `\n      expand ((case_option {None} ((`) Some) \\<circ> f)(x := {None}))) =\n  (\\<Union>y\\<in>S.\n      (\\<lambda>g. g(x \\<mapsto> y)) ` expand_map (f(x := None)))\n\ngoal (1 subgoal):\n 1. expand_map (f(x \\<mapsto> S)) =\n    (\\<Union>y\\<in>S.\n        (\\<lambda>g. g(x \\<mapsto> y)) ` expand_map (f(x := None)))", "finally"], ["proof (chain)\npicking this:\n  expand_map (f(x \\<mapsto> S)) =\n  (\\<Union>y\\<in>S.\n      (\\<lambda>g. g(x \\<mapsto> y)) ` expand_map (f(x := None)))", "show ?thesis"], ["proof (prove)\nusing this:\n  expand_map (f(x \\<mapsto> S)) =\n  (\\<Union>y\\<in>S.\n      (\\<lambda>g. g(x \\<mapsto> y)) ` expand_map (f(x := None)))\n\ngoal (1 subgoal):\n 1. expand_map (f(x \\<mapsto> S)) =\n    (\\<Union>y\\<in>S.\n        (\\<lambda>g. g(x \\<mapsto> y)) ` expand_map (f(x := None)))", "by this"], ["proof (state)\nthis:\n  expand_map (f(x \\<mapsto> S)) =\n  (\\<Union>y\\<in>S.\n      (\\<lambda>g. g(x \\<mapsto> y)) ` expand_map (f(x := None)))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}