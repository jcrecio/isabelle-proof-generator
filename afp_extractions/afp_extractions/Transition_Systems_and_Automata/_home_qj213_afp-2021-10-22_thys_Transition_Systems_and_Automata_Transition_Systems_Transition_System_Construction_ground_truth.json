{"file_name": "/home/qj213/afp-2021-10-22/thys/Transition_Systems_and_Automata/Transition_Systems/Transition_System_Construction.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Transition_Systems_and_Automata", "problem_names": ["lemma invariant_run:\n      assumes \"P p\" \"\\<And> p. P p \\<Longrightarrow> \\<exists> a. enabled a p \\<and> P (execute a p) \\<and> Q p a\"\n      obtains r\n      where \"run r p\" \"pred_stream P (p ## trace r p)\" \"stream_all2 Q (p ## trace r p) r\"", "lemma recurring_condition:\n      assumes \"P p\" \"\\<And> p. P p \\<Longrightarrow> \\<exists> r. r \\<noteq> [] \\<and> path r p \\<and> P (target r p)\"\n      obtains r\n      where \"run r p\" \"infs P (p ## trace r p)\"", "lemma invariant_run_index:\n      assumes \"P n p\" \"\\<And> n p. P n p \\<Longrightarrow> \\<exists> a. enabled a p \\<and> P (Suc n) (execute a p) \\<and> Q n p a\"\n      obtains r\n      where\n        \"run r p\"\n        \"\\<And> i. P (n + i) (target (stake i r) p)\"\n        \"\\<And> i. Q (n + i) (target (stake i r) p) (r !! i)\"", "lemma koenig:\n      assumes \"infinite (reachable p)\"\n      assumes \"\\<And> q. q \\<in> reachable p \\<Longrightarrow> finite (successors q)\"\n      obtains r\n      where \"run r p\""], "translations": [["", "lemma invariant_run:\n      assumes \"P p\" \"\\<And> p. P p \\<Longrightarrow> \\<exists> a. enabled a p \\<and> P (execute a p) \\<and> Q p a\"\n      obtains r\n      where \"run r p\" \"pred_stream P (p ## trace r p)\" \"stream_all2 Q (p ## trace r p) r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>run r p; pred_stream P (p ## trace r p);\n         stream_all2 Q (p ## trace r p) r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>run r p; pred_stream P (p ## trace r p);\n         stream_all2 Q (p ## trace r p) r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain f where 1: \"enabled (f p) p\" \"P (execute (f p) p)\" \"Q p (f p)\" if \"P p\" for p"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<And>p. P p \\<Longrightarrow> enabled (f p) p;\n         \\<And>p. P p \\<Longrightarrow> P (execute (f p) p);\n         \\<And>p. P p \\<Longrightarrow> Q p (f p)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(2)"], ["proof (prove)\nusing this:\n  P ?p \\<Longrightarrow>\n  \\<exists>a. enabled a ?p \\<and> P (execute a ?p) \\<and> Q ?p a\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<And>p. P p \\<Longrightarrow> enabled (f p) p;\n         \\<And>p. P p \\<Longrightarrow> P (execute (f p) p);\n         \\<And>p. P p \\<Longrightarrow> Q p (f p)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  P ?p \\<Longrightarrow> enabled (f ?p) ?p\n  P ?p \\<Longrightarrow> P (execute (f ?p) ?p)\n  P ?p \\<Longrightarrow> Q ?p (f ?p)\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>run r p; pred_stream P (p ## trace r p);\n         stream_all2 Q (p ## trace r p) r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?g = \"\\<lambda> p. execute (f p) p\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>run r p; pred_stream P (p ## trace r p);\n         stream_all2 Q (p ## trace r p) r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?r = \"\\<lambda> p. smap f (siterate ?g p)\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>run r p; pred_stream P (p ## trace r p);\n         stream_all2 Q (p ## trace r p) r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. run ?r p\n 2. pred_stream P (p ## trace ?r p)\n 3. stream_all2 Q (p ## trace ?r p) ?r", "show \"run (?r p) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. run (smap f (siterate (\\<lambda>p. execute (f p) p) p)) p", "using assms(1) 1"], ["proof (prove)\nusing this:\n  P p\n  P ?p \\<Longrightarrow> enabled (f ?p) ?p\n  P ?p \\<Longrightarrow> P (execute (f ?p) ?p)\n  P ?p \\<Longrightarrow> Q ?p (f ?p)\n\ngoal (1 subgoal):\n 1. run (smap f (siterate (\\<lambda>p. execute (f p) p) p)) p", "by (coinduction arbitrary: p) (auto)"], ["proof (state)\nthis:\n  run (smap f (siterate (\\<lambda>p. execute (f p) p) p)) p\n\ngoal (2 subgoals):\n 1. pred_stream P\n     (p ## trace (smap f (siterate (\\<lambda>p. execute (f p) p) p)) p)\n 2. stream_all2 Q\n     (p ## trace (smap f (siterate (\\<lambda>p. execute (f p) p) p)) p)\n     (smap f (siterate (\\<lambda>p. execute (f p) p) p))", "show \"pred_stream P (p ## trace (?r p) p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pred_stream P\n     (p ## trace (smap f (siterate (\\<lambda>p. execute (f p) p) p)) p)", "using assms(1) 1"], ["proof (prove)\nusing this:\n  P p\n  P ?p \\<Longrightarrow> enabled (f ?p) ?p\n  P ?p \\<Longrightarrow> P (execute (f ?p) ?p)\n  P ?p \\<Longrightarrow> Q ?p (f ?p)\n\ngoal (1 subgoal):\n 1. pred_stream P\n     (p ## trace (smap f (siterate (\\<lambda>p. execute (f p) p) p)) p)", "by (coinduction arbitrary: p) (auto)"], ["proof (state)\nthis:\n  pred_stream P\n   (p ## trace (smap f (siterate (\\<lambda>p. execute (f p) p) p)) p)\n\ngoal (1 subgoal):\n 1. stream_all2 Q\n     (p ## trace (smap f (siterate (\\<lambda>p. execute (f p) p) p)) p)\n     (smap f (siterate (\\<lambda>p. execute (f p) p) p))", "show \"stream_all2 Q (p ## trace (?r p) p) (?r p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stream_all2 Q\n     (p ## trace (smap f (siterate (\\<lambda>p. execute (f p) p) p)) p)\n     (smap f (siterate (\\<lambda>p. execute (f p) p) p))", "using assms(1) 1"], ["proof (prove)\nusing this:\n  P p\n  P ?p \\<Longrightarrow> enabled (f ?p) ?p\n  P ?p \\<Longrightarrow> P (execute (f ?p) ?p)\n  P ?p \\<Longrightarrow> Q ?p (f ?p)\n\ngoal (1 subgoal):\n 1. stream_all2 Q\n     (p ## trace (smap f (siterate (\\<lambda>p. execute (f p) p) p)) p)\n     (smap f (siterate (\\<lambda>p. execute (f p) p) p))", "by (coinduction arbitrary: p) (auto)"], ["proof (state)\nthis:\n  stream_all2 Q\n   (p ## trace (smap f (siterate (\\<lambda>p. execute (f p) p) p)) p)\n   (smap f (siterate (\\<lambda>p. execute (f p) p) p))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma recurring_condition:\n      assumes \"P p\" \"\\<And> p. P p \\<Longrightarrow> \\<exists> r. r \\<noteq> [] \\<and> path r p \\<and> P (target r p)\"\n      obtains r\n      where \"run r p\" \"infs P (p ## trace r p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>run r p; infs P (p ## trace r p)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>run r p; infs P (p ## trace r p)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain f where 1: \"f p \\<noteq> []\" \"path (f p) p\" \"P (target (f p) p)\" if \"P p\" for p"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<And>p. P p \\<Longrightarrow> f p \\<noteq> [];\n         \\<And>p. P p \\<Longrightarrow> path (f p) p;\n         \\<And>p. P p \\<Longrightarrow> P (target (f p) p)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(2)"], ["proof (prove)\nusing this:\n  P ?p \\<Longrightarrow>\n  \\<exists>r. r \\<noteq> [] \\<and> path r ?p \\<and> P (target r ?p)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<And>p. P p \\<Longrightarrow> f p \\<noteq> [];\n         \\<And>p. P p \\<Longrightarrow> path (f p) p;\n         \\<And>p. P p \\<Longrightarrow> P (target (f p) p)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  P ?p \\<Longrightarrow> f ?p \\<noteq> []\n  P ?p \\<Longrightarrow> path (f ?p) ?p\n  P ?p \\<Longrightarrow> P (target (f ?p) ?p)\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>run r p; infs P (p ## trace r p)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?g = \"\\<lambda> p. target (f p) p\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>run r p; infs P (p ## trace r p)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?r = \"\\<lambda> p. flat (smap f (siterate ?g p))\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>run r p; infs P (p ## trace r p)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have 2: \"?r p = f p @- ?r (?g p)\" if \"P p\" for p"], ["proof (prove)\ngoal (1 subgoal):\n 1. flat (smap f (siterate (\\<lambda>p. target (f p) p) p)) =\n    f p @-\n    flat (smap f (siterate (\\<lambda>p. target (f p) p) (target (f p) p)))", "using that 1(1)"], ["proof (prove)\nusing this:\n  P p\n  P ?p \\<Longrightarrow> f ?p \\<noteq> []\n\ngoal (1 subgoal):\n 1. flat (smap f (siterate (\\<lambda>p. target (f p) p) p)) =\n    f p @-\n    flat (smap f (siterate (\\<lambda>p. target (f p) p) (target (f p) p)))", "by (simp add: flat_unfold)"], ["proof (state)\nthis:\n  P ?p \\<Longrightarrow>\n  flat (smap f (siterate (\\<lambda>p. target (f p) p) ?p)) =\n  f ?p @-\n  flat (smap f (siterate (\\<lambda>p. target (f p) p) (target (f ?p) ?p)))\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>run r p; infs P (p ## trace r p)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. run ?r p\n 2. infs P (p ## trace ?r p)", "show \"run (?r p) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. run (flat (smap f (siterate (\\<lambda>p. target (f p) p) p))) p", "using assms(1) 1 2"], ["proof (prove)\nusing this:\n  P p\n  P ?p \\<Longrightarrow> f ?p \\<noteq> []\n  P ?p \\<Longrightarrow> path (f ?p) ?p\n  P ?p \\<Longrightarrow> P (target (f ?p) ?p)\n  P ?p \\<Longrightarrow>\n  flat (smap f (siterate (\\<lambda>p. target (f p) p) ?p)) =\n  f ?p @-\n  flat (smap f (siterate (\\<lambda>p. target (f p) p) (target (f ?p) ?p)))\n\ngoal (1 subgoal):\n 1. run (flat (smap f (siterate (\\<lambda>p. target (f p) p) p))) p", "by (coinduction arbitrary: p rule: run_coinduct_shift) (blast)"], ["proof (state)\nthis:\n  run (flat (smap f (siterate (\\<lambda>p. target (f p) p) p))) p\n\ngoal (1 subgoal):\n 1. infs P\n     (p ##\n      trace (flat (smap f (siterate (\\<lambda>p. target (f p) p) p))) p)", "show \"infs P (p ## trace (?r p) p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infs P\n     (p ##\n      trace (flat (smap f (siterate (\\<lambda>p. target (f p) p) p))) p)", "using assms(1) 1 2"], ["proof (prove)\nusing this:\n  P p\n  P ?p \\<Longrightarrow> f ?p \\<noteq> []\n  P ?p \\<Longrightarrow> path (f ?p) ?p\n  P ?p \\<Longrightarrow> P (target (f ?p) ?p)\n  P ?p \\<Longrightarrow>\n  flat (smap f (siterate (\\<lambda>p. target (f p) p) ?p)) =\n  f ?p @-\n  flat (smap f (siterate (\\<lambda>p. target (f p) p) (target (f ?p) ?p)))\n\ngoal (1 subgoal):\n 1. infs P\n     (p ##\n      trace (flat (smap f (siterate (\\<lambda>p. target (f p) p) p))) p)", "by (coinduction arbitrary: p rule: infs_sscan_coinduct) (blast)"], ["proof (state)\nthis:\n  infs P\n   (p ## trace (flat (smap f (siterate (\\<lambda>p. target (f p) p) p))) p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma invariant_run_index:\n      assumes \"P n p\" \"\\<And> n p. P n p \\<Longrightarrow> \\<exists> a. enabled a p \\<and> P (Suc n) (execute a p) \\<and> Q n p a\"\n      obtains r\n      where\n        \"run r p\"\n        \"\\<And> i. P (n + i) (target (stake i r) p)\"\n        \"\\<And> i. Q (n + i) (target (stake i r) p) (r !! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>run r p; \\<And>i. P (n + i) (target (stake i r) p);\n         \\<And>i. Q (n + i) (target (stake i r) p) (r !! i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>run r p; \\<And>i. P (n + i) (target (stake i r) p);\n         \\<And>i. Q (n + i) (target (stake i r) p) (r !! i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define s where \"s \\<equiv> (n, p)\""], ["proof (state)\nthis:\n  s \\<equiv> (n, p)\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>run r p; \\<And>i. P (n + i) (target (stake i r) p);\n         \\<And>i. Q (n + i) (target (stake i r) p) (r !! i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have 1: \"case_prod P s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. case s of (x, xa) \\<Rightarrow> P x xa", "using assms(1)"], ["proof (prove)\nusing this:\n  P n p\n\ngoal (1 subgoal):\n 1. case s of (x, xa) \\<Rightarrow> P x xa", "unfolding s_def"], ["proof (prove)\nusing this:\n  P n p\n\ngoal (1 subgoal):\n 1. case (n, p) of (x, xa) \\<Rightarrow> P x xa", "by auto"], ["proof (state)\nthis:\n  case s of (x, xa) \\<Rightarrow> P x xa\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>run r p; \\<And>i. P (n + i) (target (stake i r) p);\n         \\<And>i. Q (n + i) (target (stake i r) p) (r !! i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain f where 2:\n        \"\\<And> n p. P n p \\<Longrightarrow> enabled (f n p) p\"\n        \"\\<And> n p. P n p \\<Longrightarrow> P (Suc n) (execute (f n p) p)\"\n        \"\\<And> n p. P n p \\<Longrightarrow> Q n p (f n p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<And>n p. P n p \\<Longrightarrow> enabled (f n p) p;\n         \\<And>n p. P n p \\<Longrightarrow> P (Suc n) (execute (f n p) p);\n         \\<And>n p. P n p \\<Longrightarrow> Q n p (f n p)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(2)"], ["proof (prove)\nusing this:\n  P ?n ?p \\<Longrightarrow>\n  \\<exists>a. enabled a ?p \\<and> P (Suc ?n) (execute a ?p) \\<and> Q ?n ?p a\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<And>n p. P n p \\<Longrightarrow> enabled (f n p) p;\n         \\<And>n p. P n p \\<Longrightarrow> P (Suc n) (execute (f n p) p);\n         \\<And>n p. P n p \\<Longrightarrow> Q n p (f n p)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  P ?n ?p \\<Longrightarrow> enabled (f ?n ?p) ?p\n  P ?n ?p \\<Longrightarrow> P (Suc ?n) (execute (f ?n ?p) ?p)\n  P ?n ?p \\<Longrightarrow> Q ?n ?p (f ?n ?p)\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>run r p; \\<And>i. P (n + i) (target (stake i r) p);\n         \\<And>i. Q (n + i) (target (stake i r) p) (r !! i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define g where \"g \\<equiv> \\<lambda> (n, p). (Suc n, execute (f n p) p)\""], ["proof (state)\nthis:\n  g \\<equiv> \\<lambda>(n, p). (Suc n, execute (f n p) p)\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>run r p; \\<And>i. P (n + i) (target (stake i r) p);\n         \\<And>i. Q (n + i) (target (stake i r) p) (r !! i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?r = \"smap (case_prod f) (siterate g s)\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>run r p; \\<And>i. P (n + i) (target (stake i r) p);\n         \\<And>i. Q (n + i) (target (stake i r) p) (r !! i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have 3: \"run ?r (snd s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. run (smap (\\<lambda>(x, y). f x y) (siterate g s)) (snd s)", "using 1 2(1, 2)"], ["proof (prove)\nusing this:\n  case s of (x, xa) \\<Rightarrow> P x xa\n  P ?n ?p \\<Longrightarrow> enabled (f ?n ?p) ?p\n  P ?n ?p \\<Longrightarrow> P (Suc ?n) (execute (f ?n ?p) ?p)\n\ngoal (1 subgoal):\n 1. run (smap (\\<lambda>(x, y). f x y) (siterate g s)) (snd s)", "unfolding g_def"], ["proof (prove)\nusing this:\n  case s of (x, xa) \\<Rightarrow> P x xa\n  P ?n ?p \\<Longrightarrow> enabled (f ?n ?p) ?p\n  P ?n ?p \\<Longrightarrow> P (Suc ?n) (execute (f ?n ?p) ?p)\n\ngoal (1 subgoal):\n 1. run (smap (\\<lambda>(x, y). f x y)\n          (siterate (\\<lambda>(n, p). (Suc n, execute (f n p) p)) s))\n     (snd s)", "by (coinduction arbitrary: s) (auto)"], ["proof (state)\nthis:\n  run (smap (\\<lambda>(x, y). f x y) (siterate g s)) (snd s)\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>run r p; \\<And>i. P (n + i) (target (stake i r) p);\n         \\<And>i. Q (n + i) (target (stake i r) p) (r !! i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have 4: \"case_prod P (compow k g s)\" for k"], ["proof (prove)\ngoal (1 subgoal):\n 1. case (g ^^ k) s of (x, xa) \\<Rightarrow> P x xa", "using 1 2(2)"], ["proof (prove)\nusing this:\n  case s of (x, xa) \\<Rightarrow> P x xa\n  P ?n ?p \\<Longrightarrow> P (Suc ?n) (execute (f ?n ?p) ?p)\n\ngoal (1 subgoal):\n 1. case (g ^^ k) s of (x, xa) \\<Rightarrow> P x xa", "unfolding g_def"], ["proof (prove)\nusing this:\n  case s of (x, xa) \\<Rightarrow> P x xa\n  P ?n ?p \\<Longrightarrow> P (Suc ?n) (execute (f ?n ?p) ?p)\n\ngoal (1 subgoal):\n 1. case ((\\<lambda>(n, p). (Suc n, execute (f n p) p)) ^^ k) s of\n    (x, xa) \\<Rightarrow> P x xa", "by (induct k) (auto)"], ["proof (state)\nthis:\n  case (g ^^ ?k) s of (x, xa) \\<Rightarrow> P x xa\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>run r p; \\<And>i. P (n + i) (target (stake i r) p);\n         \\<And>i. Q (n + i) (target (stake i r) p) (r !! i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have 5: \"case_prod Q (compow k g s) (?r !! k)\" for k"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case (g ^^ k) s of (x, xa) \\<Rightarrow> Q x xa)\n     (smap (\\<lambda>(x, y). f x y) (siterate g s) !! k)", "using 2(3) 4"], ["proof (prove)\nusing this:\n  P ?n ?p \\<Longrightarrow> Q ?n ?p (f ?n ?p)\n  case (g ^^ ?k) s of (x, xa) \\<Rightarrow> P x xa\n\ngoal (1 subgoal):\n 1. (case (g ^^ k) s of (x, xa) \\<Rightarrow> Q x xa)\n     (smap (\\<lambda>(x, y). f x y) (siterate g s) !! k)", "by (simp add: case_prod_beta)"], ["proof (state)\nthis:\n  (case (g ^^ ?k) s of (x, xa) \\<Rightarrow> Q x xa)\n   (smap (\\<lambda>(x, y). f x y) (siterate g s) !! ?k)\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>run r p; \\<And>i. P (n + i) (target (stake i r) p);\n         \\<And>i. Q (n + i) (target (stake i r) p) (r !! i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have 6: \"compow k g (n, p) = (n + k, target (stake k ?r) p)\" for k"], ["proof (prove)\ngoal (1 subgoal):\n 1. (g ^^ k) (n, p) =\n    (n + k,\n     target (stake k (smap (\\<lambda>(x, y). f x y) (siterate g s))) p)", "unfolding s_def g_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>(n, p). (Suc n, execute (f n p) p)) ^^ k) (n, p) =\n    (n + k,\n     target\n      (stake k\n        (smap (\\<lambda>(x, y). f x y)\n          (siterate (\\<lambda>(n, p). (Suc n, execute (f n p) p)) (n, p))))\n      p)", "by (induct k) (auto simp add: stake_Suc simp del: stake.simps(2))"], ["proof (state)\nthis:\n  (g ^^ ?k) (n, p) =\n  (n + ?k,\n   target (stake ?k (smap (\\<lambda>(x, y). f x y) (siterate g s))) p)\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>run r p; \\<And>i. P (n + i) (target (stake i r) p);\n         \\<And>i. Q (n + i) (target (stake i r) p) (r !! i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "using that 3 4 5"], ["proof (prove)\nusing this:\n  \\<lbrakk>run ?r p; \\<And>i. P (n + i) (target (stake i ?r) p);\n   \\<And>i. Q (n + i) (target (stake i ?r) p) (?r !! i)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  run (smap (\\<lambda>(x, y). f x y) (siterate g s)) (snd s)\n  case (g ^^ ?k) s of (x, xa) \\<Rightarrow> P x xa\n  (case (g ^^ ?k) s of (x, xa) \\<Rightarrow> Q x xa)\n   (smap (\\<lambda>(x, y). f x y) (siterate g s) !! ?k)\n\ngoal (1 subgoal):\n 1. thesis", "unfolding s_def 6"], ["proof (prove)\nusing this:\n  \\<lbrakk>run ?r p; \\<And>i. P (n + i) (target (stake i ?r) p);\n   \\<And>i. Q (n + i) (target (stake i ?r) p) (?r !! i)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  run (smap (\\<lambda>(x, y). f x y) (siterate g (n, p))) (snd (n, p))\n  case (n + ?k,\n        target\n         (stake ?k (smap (\\<lambda>(x, y). f x y) (siterate g (n, p))))\n         p) of\n  (x, xa) \\<Rightarrow> P x xa\n  (case (n + ?k,\n         target\n          (stake ?k (smap (\\<lambda>(x, y). f x y) (siterate g (n, p))))\n          p) of\n   (x, xa) \\<Rightarrow> Q x xa)\n   (smap (\\<lambda>(x, y). f x y) (siterate g (n, p)) !! ?k)\n\ngoal (1 subgoal):\n 1. thesis", "by simp"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma koenig:\n      assumes \"infinite (reachable p)\"\n      assumes \"\\<And> q. q \\<in> reachable p \\<Longrightarrow> finite (successors q)\"\n      obtains r\n      where \"run r p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r. run r p \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "proof (rule invariant_run[where ?P = \"\\<lambda> q. q \\<in> reachable p \\<and> infinite (reachable q)\"])"], ["proof (state)\ngoal (3 subgoals):\n 1. (\\<And>r. run r p \\<Longrightarrow> thesis) \\<Longrightarrow>\n    ?p2 \\<in> reachable p \\<and> infinite (reachable ?p2)\n 2. \\<And>pa.\n       \\<lbrakk>\\<And>r. run r p \\<Longrightarrow> thesis;\n        pa \\<in> reachable p \\<and> infinite (reachable pa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a.\n                            enabled a pa \\<and>\n                            (execute a pa \\<in> reachable p \\<and>\n                             infinite (reachable (execute a pa))) \\<and>\n                            ?Q2 pa a\n 3. \\<And>r.\n       \\<lbrakk>\\<And>r. run r p \\<Longrightarrow> thesis; run r ?p2;\n        pred_stream\n         (\\<lambda>q. q \\<in> reachable p \\<and> infinite (reachable q))\n         (?p2 ## trace r ?p2);\n        stream_all2 ?Q2 (?p2 ## trace r ?p2) r\\<rbrakk>\n       \\<Longrightarrow> thesis", "show \"p \\<in> reachable p \\<and> infinite (reachable p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> reachable p \\<and> infinite (reachable p)", "using assms(1)"], ["proof (prove)\nusing this:\n  infinite (reachable p)\n\ngoal (1 subgoal):\n 1. p \\<in> reachable p \\<and> infinite (reachable p)", "by auto"], ["proof (state)\nthis:\n  p \\<in> reachable p \\<and> infinite (reachable p)\n\ngoal (2 subgoals):\n 1. \\<And>pa.\n       \\<lbrakk>\\<And>r. run r p \\<Longrightarrow> thesis;\n        pa \\<in> reachable p \\<and> infinite (reachable pa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a.\n                            enabled a pa \\<and>\n                            (execute a pa \\<in> reachable p \\<and>\n                             infinite (reachable (execute a pa))) \\<and>\n                            ?Q2 pa a\n 2. \\<And>r.\n       \\<lbrakk>\\<And>r. run r p \\<Longrightarrow> thesis; run r p;\n        pred_stream\n         (\\<lambda>q. q \\<in> reachable p \\<and> infinite (reachable q))\n         (p ## trace r p);\n        stream_all2 ?Q2 (p ## trace r p) r\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>pa.\n       \\<lbrakk>\\<And>r. run r p \\<Longrightarrow> thesis;\n        pa \\<in> reachable p \\<and> infinite (reachable pa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a.\n                            enabled a pa \\<and>\n                            (execute a pa \\<in> reachable p \\<and>\n                             infinite (reachable (execute a pa))) \\<and>\n                            ?Q2 pa a\n 2. \\<And>r.\n       \\<lbrakk>\\<And>r. run r p \\<Longrightarrow> thesis; run r p;\n        pred_stream\n         (\\<lambda>q. q \\<in> reachable p \\<and> infinite (reachable q))\n         (p ## trace r p);\n        stream_all2 ?Q2 (p ## trace r p) r\\<rbrakk>\n       \\<Longrightarrow> thesis", "fix q"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>pa.\n       \\<lbrakk>\\<And>r. run r p \\<Longrightarrow> thesis;\n        pa \\<in> reachable p \\<and> infinite (reachable pa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a.\n                            enabled a pa \\<and>\n                            (execute a pa \\<in> reachable p \\<and>\n                             infinite (reachable (execute a pa))) \\<and>\n                            ?Q2 pa a\n 2. \\<And>r.\n       \\<lbrakk>\\<And>r. run r p \\<Longrightarrow> thesis; run r p;\n        pred_stream\n         (\\<lambda>q. q \\<in> reachable p \\<and> infinite (reachable q))\n         (p ## trace r p);\n        stream_all2 ?Q2 (p ## trace r p) r\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume 1: \"q \\<in> reachable p \\<and> infinite (reachable q)\""], ["proof (state)\nthis:\n  q \\<in> reachable p \\<and> infinite (reachable q)\n\ngoal (2 subgoals):\n 1. \\<And>pa.\n       \\<lbrakk>\\<And>r. run r p \\<Longrightarrow> thesis;\n        pa \\<in> reachable p \\<and> infinite (reachable pa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a.\n                            enabled a pa \\<and>\n                            (execute a pa \\<in> reachable p \\<and>\n                             infinite (reachable (execute a pa))) \\<and>\n                            ?Q2 pa a\n 2. \\<And>r.\n       \\<lbrakk>\\<And>r. run r p \\<Longrightarrow> thesis; run r p;\n        pred_stream\n         (\\<lambda>q. q \\<in> reachable p \\<and> infinite (reachable q))\n         (p ## trace r p);\n        stream_all2 ?Q2 (p ## trace r p) r\\<rbrakk>\n       \\<Longrightarrow> thesis", "have 2: \"finite (successors q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (successors q)", "using assms(2) 1"], ["proof (prove)\nusing this:\n  ?q \\<in> reachable p \\<Longrightarrow> finite (successors ?q)\n  q \\<in> reachable p \\<and> infinite (reachable q)\n\ngoal (1 subgoal):\n 1. finite (successors q)", "by auto"], ["proof (state)\nthis:\n  finite (successors q)\n\ngoal (2 subgoals):\n 1. \\<And>pa.\n       \\<lbrakk>\\<And>r. run r p \\<Longrightarrow> thesis;\n        pa \\<in> reachable p \\<and> infinite (reachable pa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a.\n                            enabled a pa \\<and>\n                            (execute a pa \\<in> reachable p \\<and>\n                             infinite (reachable (execute a pa))) \\<and>\n                            ?Q2 pa a\n 2. \\<And>r.\n       \\<lbrakk>\\<And>r. run r p \\<Longrightarrow> thesis; run r p;\n        pred_stream\n         (\\<lambda>q. q \\<in> reachable p \\<and> infinite (reachable q))\n         (p ## trace r p);\n        stream_all2 ?Q2 (p ## trace r p) r\\<rbrakk>\n       \\<Longrightarrow> thesis", "have 3: \"infinite (insert q (\\<Union>(reachable ` (successors q))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite (insert q (\\<Union> (reachable ` successors q)))", "using reachable_step 1"], ["proof (prove)\nusing this:\n  reachable ?p = insert ?p (\\<Union> (reachable ` successors ?p))\n  q \\<in> reachable p \\<and> infinite (reachable q)\n\ngoal (1 subgoal):\n 1. infinite (insert q (\\<Union> (reachable ` successors q)))", "by metis"], ["proof (state)\nthis:\n  infinite (insert q (\\<Union> (reachable ` successors q)))\n\ngoal (2 subgoals):\n 1. \\<And>pa.\n       \\<lbrakk>\\<And>r. run r p \\<Longrightarrow> thesis;\n        pa \\<in> reachable p \\<and> infinite (reachable pa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a.\n                            enabled a pa \\<and>\n                            (execute a pa \\<in> reachable p \\<and>\n                             infinite (reachable (execute a pa))) \\<and>\n                            ?Q2 pa a\n 2. \\<And>r.\n       \\<lbrakk>\\<And>r. run r p \\<Longrightarrow> thesis; run r p;\n        pred_stream\n         (\\<lambda>q. q \\<in> reachable p \\<and> infinite (reachable q))\n         (p ## trace r p);\n        stream_all2 ?Q2 (p ## trace r p) r\\<rbrakk>\n       \\<Longrightarrow> thesis", "obtain s where 4: \"s \\<in> successors q\" \"infinite (reachable s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>s \\<in> successors q; infinite (reachable s)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 2 3"], ["proof (prove)\nusing this:\n  finite (successors q)\n  infinite (insert q (\\<Union> (reachable ` successors q)))\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>s \\<in> successors q; infinite (reachable s)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  s \\<in> successors q\n  infinite (reachable s)\n\ngoal (2 subgoals):\n 1. \\<And>pa.\n       \\<lbrakk>\\<And>r. run r p \\<Longrightarrow> thesis;\n        pa \\<in> reachable p \\<and> infinite (reachable pa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a.\n                            enabled a pa \\<and>\n                            (execute a pa \\<in> reachable p \\<and>\n                             infinite (reachable (execute a pa))) \\<and>\n                            ?Q2 pa a\n 2. \\<And>r.\n       \\<lbrakk>\\<And>r. run r p \\<Longrightarrow> thesis; run r p;\n        pred_stream\n         (\\<lambda>q. q \\<in> reachable p \\<and> infinite (reachable q))\n         (p ## trace r p);\n        stream_all2 ?Q2 (p ## trace r p) r\\<rbrakk>\n       \\<Longrightarrow> thesis", "show \"\\<exists> a. enabled a q \\<and> (execute a q \\<in> reachable p \\<and> infinite (reachable (execute a q))) \\<and> True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a.\n       enabled a q \\<and>\n       (execute a q \\<in> reachable p \\<and>\n        infinite (reachable (execute a q))) \\<and>\n       True", "using 1 4"], ["proof (prove)\nusing this:\n  q \\<in> reachable p \\<and> infinite (reachable q)\n  s \\<in> successors q\n  infinite (reachable s)\n\ngoal (1 subgoal):\n 1. \\<exists>a.\n       enabled a q \\<and>\n       (execute a q \\<in> reachable p \\<and>\n        infinite (reachable (execute a q))) \\<and>\n       True", "by auto"], ["proof (state)\nthis:\n  \\<exists>a.\n     enabled a q \\<and>\n     (execute a q \\<in> reachable p \\<and>\n      infinite (reachable (execute a q))) \\<and>\n     True\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>\\<And>r. run r p \\<Longrightarrow> thesis; run r p;\n        pred_stream\n         (\\<lambda>q. q \\<in> reachable p \\<and> infinite (reachable q))\n         (p ## trace r p);\n        stream_all2 (\\<lambda>p a. True) (p ## trace r p) r\\<rbrakk>\n       \\<Longrightarrow> thesis", "qed"], ["", "end"], ["", "end"]]}