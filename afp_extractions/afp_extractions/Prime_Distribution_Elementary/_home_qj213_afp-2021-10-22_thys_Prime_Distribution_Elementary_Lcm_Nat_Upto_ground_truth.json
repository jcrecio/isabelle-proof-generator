{"file_name": "/home/qj213/afp-2021-10-22/thys/Prime_Distribution_Elementary/Lcm_Nat_Upto.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Prime_Distribution_Elementary", "problem_names": ["lemma multiplicity_Lcm:\n  fixes A :: \"'a :: {semiring_Gcd, factorial_semiring_gcd} set\"\n  assumes \"finite A\" \"A \\<noteq> {}\" \"prime p\" \"0 \\<notin> A\"\n  shows   \"multiplicity p (Lcm A) = Max (multiplicity p ` A)\"", "lemma multiplicity_Lcm_atLeast1AtMost_Suc:\n  fixes p n :: nat\n  assumes p: \"prime p\" and n: \"n > 0\"\n  shows \"multiplicity p (Lcm {1..Suc n}) =\n           (if \\<exists>k. Suc n = p ^ k then 1 else 0) + multiplicity p (Lcm {1..n})\"", "lemma Lcm_atLeast1AtMost_Suc:\n  \"Lcm {1..Suc n} = Lcm {1..n} * (if primepow (Suc n) then aprimedivisor (Suc n) else 1)\"", "lemma Lcm_atLeast1AtMost_conv_\\<psi>:\n  includes prime_counting_notation\n  shows \"real (Lcm {1..n}) = exp (\\<psi> (real n))\"", "lemma Lcm_upto_real_conv_\\<psi>:\n  includes prime_counting_notation\n  shows \"real (Lcm {1..nat \\<lfloor>x\\<rfloor>}) = exp (\\<psi> x)\""], "translations": [["", "lemma multiplicity_Lcm:\n  fixes A :: \"'a :: {semiring_Gcd, factorial_semiring_gcd} set\"\n  assumes \"finite A\" \"A \\<noteq> {}\" \"prime p\" \"0 \\<notin> A\"\n  shows   \"multiplicity p (Lcm A) = Max (multiplicity p ` A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity p (Lcm A) = Max (multiplicity p ` A)", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  A \\<noteq> {}\n  prime p\n  (0::'a) \\<notin> A\n\ngoal (1 subgoal):\n 1. multiplicity p (Lcm A) = Max (multiplicity p ` A)", "proof (induction A rule: finite_ne_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>prime p; (0::'a) \\<notin> {x}\\<rbrakk>\n       \\<Longrightarrow> multiplicity p (Lcm {x}) =\n                         Max (multiplicity p ` {x})\n 2. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<lbrakk>prime p; (0::'a) \\<notin> F\\<rbrakk>\n        \\<Longrightarrow> multiplicity p (Lcm F) = Max (multiplicity p ` F);\n        prime p; (0::'a) \\<notin> insert x F\\<rbrakk>\n       \\<Longrightarrow> multiplicity p (Lcm (insert x F)) =\n                         Max (multiplicity p ` insert x F)", "case (insert x A)"], ["proof (state)\nthis:\n  finite A\n  A \\<noteq> {}\n  x \\<notin> A\n  \\<lbrakk>prime p; (0::'a) \\<notin> A\\<rbrakk>\n  \\<Longrightarrow> multiplicity p (Lcm A) = Max (multiplicity p ` A)\n  prime p\n  (0::'a) \\<notin> insert x A\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>prime p; (0::'a) \\<notin> {x}\\<rbrakk>\n       \\<Longrightarrow> multiplicity p (Lcm {x}) =\n                         Max (multiplicity p ` {x})\n 2. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<lbrakk>prime p; (0::'a) \\<notin> F\\<rbrakk>\n        \\<Longrightarrow> multiplicity p (Lcm F) = Max (multiplicity p ` F);\n        prime p; (0::'a) \\<notin> insert x F\\<rbrakk>\n       \\<Longrightarrow> multiplicity p (Lcm (insert x F)) =\n                         Max (multiplicity p ` insert x F)", "have \"Lcm (insert x A) = lcm x (Lcm A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lcm (insert x A) = lcm x (Lcm A)", "by simp"], ["proof (state)\nthis:\n  Lcm (insert x A) = lcm x (Lcm A)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>prime p; (0::'a) \\<notin> {x}\\<rbrakk>\n       \\<Longrightarrow> multiplicity p (Lcm {x}) =\n                         Max (multiplicity p ` {x})\n 2. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<lbrakk>prime p; (0::'a) \\<notin> F\\<rbrakk>\n        \\<Longrightarrow> multiplicity p (Lcm F) = Max (multiplicity p ` F);\n        prime p; (0::'a) \\<notin> insert x F\\<rbrakk>\n       \\<Longrightarrow> multiplicity p (Lcm (insert x F)) =\n                         Max (multiplicity p ` insert x F)", "also"], ["proof (state)\nthis:\n  Lcm (insert x A) = lcm x (Lcm A)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>prime p; (0::'a) \\<notin> {x}\\<rbrakk>\n       \\<Longrightarrow> multiplicity p (Lcm {x}) =\n                         Max (multiplicity p ` {x})\n 2. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<lbrakk>prime p; (0::'a) \\<notin> F\\<rbrakk>\n        \\<Longrightarrow> multiplicity p (Lcm F) = Max (multiplicity p ` F);\n        prime p; (0::'a) \\<notin> insert x F\\<rbrakk>\n       \\<Longrightarrow> multiplicity p (Lcm (insert x F)) =\n                         Max (multiplicity p ` insert x F)", "have \"multiplicity p \\<dots> = Max (multiplicity p ` insert x A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity p (lcm x (Lcm A)) = Max (multiplicity p ` insert x A)", "using insert"], ["proof (prove)\nusing this:\n  finite A\n  A \\<noteq> {}\n  x \\<notin> A\n  \\<lbrakk>prime p; (0::'a) \\<notin> A\\<rbrakk>\n  \\<Longrightarrow> multiplicity p (Lcm A) = Max (multiplicity p ` A)\n  prime p\n  (0::'a) \\<notin> insert x A\n\ngoal (1 subgoal):\n 1. multiplicity p (lcm x (Lcm A)) = Max (multiplicity p ` insert x A)", "by (subst multiplicity_lcm) (auto simp: Lcm_0_iff)"], ["proof (state)\nthis:\n  multiplicity p (lcm x (Lcm A)) = Max (multiplicity p ` insert x A)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>prime p; (0::'a) \\<notin> {x}\\<rbrakk>\n       \\<Longrightarrow> multiplicity p (Lcm {x}) =\n                         Max (multiplicity p ` {x})\n 2. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<lbrakk>prime p; (0::'a) \\<notin> F\\<rbrakk>\n        \\<Longrightarrow> multiplicity p (Lcm F) = Max (multiplicity p ` F);\n        prime p; (0::'a) \\<notin> insert x F\\<rbrakk>\n       \\<Longrightarrow> multiplicity p (Lcm (insert x F)) =\n                         Max (multiplicity p ` insert x F)", "finally"], ["proof (chain)\npicking this:\n  multiplicity p (Lcm (insert x A)) = Max (multiplicity p ` insert x A)", "show ?case"], ["proof (prove)\nusing this:\n  multiplicity p (Lcm (insert x A)) = Max (multiplicity p ` insert x A)\n\ngoal (1 subgoal):\n 1. multiplicity p (Lcm (insert x A)) = Max (multiplicity p ` insert x A)", "by simp"], ["proof (state)\nthis:\n  multiplicity p (Lcm (insert x A)) = Max (multiplicity p ` insert x A)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>prime p; (0::'a) \\<notin> {x}\\<rbrakk>\n       \\<Longrightarrow> multiplicity p (Lcm {x}) =\n                         Max (multiplicity p ` {x})", "qed auto"], ["", "text \\<open>\n  The multiplicity of any prime \\<open>p\\<close> in @{term \"Lcm {1..(n::nat)}\"} differs from\n  that in @{term \"Lcm {1..(n - 1 :: nat)}\"} iff \\<open>n\\<close> is a power of \\<open>p\\<close>, in which case\n  it is greater by 1.\n\\<close>"], ["", "lemma multiplicity_Lcm_atLeast1AtMost_Suc:\n  fixes p n :: nat\n  assumes p: \"prime p\" and n: \"n > 0\"\n  shows \"multiplicity p (Lcm {1..Suc n}) =\n           (if \\<exists>k. Suc n = p ^ k then 1 else 0) + multiplicity p (Lcm {1..n})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity p (Lcm {1..Suc n}) =\n    (if \\<exists>k. Suc n = p ^ k then 1 else 0) +\n    multiplicity p (Lcm {1..n})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. multiplicity p (Lcm {1..Suc n}) =\n    (if \\<exists>k. Suc n = p ^ k then 1 else 0) +\n    multiplicity p (Lcm {1..n})", "define k where \"k = Max (multiplicity p ` {1..n})\""], ["proof (state)\nthis:\n  k = Max (multiplicity p ` {1..n})\n\ngoal (1 subgoal):\n 1. multiplicity p (Lcm {1..Suc n}) =\n    (if \\<exists>k. Suc n = p ^ k then 1 else 0) +\n    multiplicity p (Lcm {1..n})", "define l where \"l = multiplicity p (Suc n)\""], ["proof (state)\nthis:\n  l = multiplicity p (Suc n)\n\ngoal (1 subgoal):\n 1. multiplicity p (Lcm {1..Suc n}) =\n    (if \\<exists>k. Suc n = p ^ k then 1 else 0) +\n    multiplicity p (Lcm {1..n})", "have eq: \"{1..Suc n} = insert (Suc n) {1..n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {1..Suc n} = insert (Suc n) {1..n}", "by auto"], ["proof (state)\nthis:\n  {1..Suc n} = insert (Suc n) {1..n}\n\ngoal (1 subgoal):\n 1. multiplicity p (Lcm {1..Suc n}) =\n    (if \\<exists>k. Suc n = p ^ k then 1 else 0) +\n    multiplicity p (Lcm {1..n})", "from \\<open>prime p\\<close>"], ["proof (chain)\npicking this:\n  prime p", "have \"p > 1\""], ["proof (prove)\nusing this:\n  prime p\n\ngoal (1 subgoal):\n 1. 1 < p", "by (auto dest: prime_gt_1_nat)"], ["proof (state)\nthis:\n  1 < p\n\ngoal (1 subgoal):\n 1. multiplicity p (Lcm {1..Suc n}) =\n    (if \\<exists>k. Suc n = p ^ k then 1 else 0) +\n    multiplicity p (Lcm {1..n})", "have \"multiplicity p (Lcm {1..Suc n}) = Max (multiplicity p ` {1..Suc n})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity p (Lcm {1..Suc n}) = Max (multiplicity p ` {1..Suc n})", "using assms"], ["proof (prove)\nusing this:\n  prime p\n  0 < n\n\ngoal (1 subgoal):\n 1. multiplicity p (Lcm {1..Suc n}) = Max (multiplicity p ` {1..Suc n})", "by (subst multiplicity_Lcm) auto"], ["proof (state)\nthis:\n  multiplicity p (Lcm {1..Suc n}) = Max (multiplicity p ` {1..Suc n})\n\ngoal (1 subgoal):\n 1. multiplicity p (Lcm {1..Suc n}) =\n    (if \\<exists>k. Suc n = p ^ k then 1 else 0) +\n    multiplicity p (Lcm {1..n})", "also"], ["proof (state)\nthis:\n  multiplicity p (Lcm {1..Suc n}) = Max (multiplicity p ` {1..Suc n})\n\ngoal (1 subgoal):\n 1. multiplicity p (Lcm {1..Suc n}) =\n    (if \\<exists>k. Suc n = p ^ k then 1 else 0) +\n    multiplicity p (Lcm {1..n})", "have \"multiplicity p ` {1..Suc n} =\n               insert (multiplicity p (Suc n)) (multiplicity p ` {1..n})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity p ` {1..Suc n} =\n    insert (multiplicity p (Suc n)) (multiplicity p ` {1..n})", "by (simp only: eq image_insert)"], ["proof (state)\nthis:\n  multiplicity p ` {1..Suc n} =\n  insert (multiplicity p (Suc n)) (multiplicity p ` {1..n})\n\ngoal (1 subgoal):\n 1. multiplicity p (Lcm {1..Suc n}) =\n    (if \\<exists>k. Suc n = p ^ k then 1 else 0) +\n    multiplicity p (Lcm {1..n})", "also"], ["proof (state)\nthis:\n  multiplicity p ` {1..Suc n} =\n  insert (multiplicity p (Suc n)) (multiplicity p ` {1..n})\n\ngoal (1 subgoal):\n 1. multiplicity p (Lcm {1..Suc n}) =\n    (if \\<exists>k. Suc n = p ^ k then 1 else 0) +\n    multiplicity p (Lcm {1..n})", "have \"Max \\<dots> = max l k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Max (insert (multiplicity p (Suc n)) (multiplicity p ` {1..n})) =\n    max l k", "unfolding l_def k_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Max (insert (multiplicity p (Suc n)) (multiplicity p ` {1..n})) =\n    max (multiplicity p (Suc n)) (Max (multiplicity p ` {1..n}))", "using assms"], ["proof (prove)\nusing this:\n  prime p\n  0 < n\n\ngoal (1 subgoal):\n 1. Max (insert (multiplicity p (Suc n)) (multiplicity p ` {1..n})) =\n    max (multiplicity p (Suc n)) (Max (multiplicity p ` {1..n}))", "by (subst Max.insert) auto"], ["proof (state)\nthis:\n  Max (insert (multiplicity p (Suc n)) (multiplicity p ` {1..n})) = max l k\n\ngoal (1 subgoal):\n 1. multiplicity p (Lcm {1..Suc n}) =\n    (if \\<exists>k. Suc n = p ^ k then 1 else 0) +\n    multiplicity p (Lcm {1..n})", "also"], ["proof (state)\nthis:\n  Max (insert (multiplicity p (Suc n)) (multiplicity p ` {1..n})) = max l k\n\ngoal (1 subgoal):\n 1. multiplicity p (Lcm {1..Suc n}) =\n    (if \\<exists>k. Suc n = p ^ k then 1 else 0) +\n    multiplicity p (Lcm {1..n})", "have \"\\<dots> = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k", "proof (cases \"\\<exists>k. Suc n = p ^ k\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>k. Suc n = p ^ k \\<Longrightarrow>\n    max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k\n 2. \\<nexists>k. Suc n = p ^ k \\<Longrightarrow>\n    max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k", "case False"], ["proof (state)\nthis:\n  \\<nexists>k. Suc n = p ^ k\n\ngoal (2 subgoals):\n 1. \\<exists>k. Suc n = p ^ k \\<Longrightarrow>\n    max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k\n 2. \\<nexists>k. Suc n = p ^ k \\<Longrightarrow>\n    max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k", "have \"p ^ l dvd Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p ^ l dvd Suc n", "unfolding l_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. p ^ multiplicity p (Suc n) dvd Suc n", "by (intro multiplicity_dvd)"], ["proof (state)\nthis:\n  p ^ l dvd Suc n\n\ngoal (2 subgoals):\n 1. \\<exists>k. Suc n = p ^ k \\<Longrightarrow>\n    max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k\n 2. \\<nexists>k. Suc n = p ^ k \\<Longrightarrow>\n    max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k", "hence \"p ^ l \\<le> Suc n\""], ["proof (prove)\nusing this:\n  p ^ l dvd Suc n\n\ngoal (1 subgoal):\n 1. p ^ l \\<le> Suc n", "unfolding l_def"], ["proof (prove)\nusing this:\n  p ^ multiplicity p (Suc n) dvd Suc n\n\ngoal (1 subgoal):\n 1. p ^ multiplicity p (Suc n) \\<le> Suc n", "by (intro dvd_imp_le multiplicity_dvd) auto"], ["proof (state)\nthis:\n  p ^ l \\<le> Suc n\n\ngoal (2 subgoals):\n 1. \\<exists>k. Suc n = p ^ k \\<Longrightarrow>\n    max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k\n 2. \\<nexists>k. Suc n = p ^ k \\<Longrightarrow>\n    max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k", "moreover"], ["proof (state)\nthis:\n  p ^ l \\<le> Suc n\n\ngoal (2 subgoals):\n 1. \\<exists>k. Suc n = p ^ k \\<Longrightarrow>\n    max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k\n 2. \\<nexists>k. Suc n = p ^ k \\<Longrightarrow>\n    max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k", "have \"Suc n \\<noteq> p ^ l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc n \\<noteq> p ^ l", "using False"], ["proof (prove)\nusing this:\n  \\<nexists>k. Suc n = p ^ k\n\ngoal (1 subgoal):\n 1. Suc n \\<noteq> p ^ l", "by blast"], ["proof (state)\nthis:\n  Suc n \\<noteq> p ^ l\n\ngoal (2 subgoals):\n 1. \\<exists>k. Suc n = p ^ k \\<Longrightarrow>\n    max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k\n 2. \\<nexists>k. Suc n = p ^ k \\<Longrightarrow>\n    max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k", "ultimately"], ["proof (chain)\npicking this:\n  p ^ l \\<le> Suc n\n  Suc n \\<noteq> p ^ l", "have \"p ^ l < Suc n\""], ["proof (prove)\nusing this:\n  p ^ l \\<le> Suc n\n  Suc n \\<noteq> p ^ l\n\ngoal (1 subgoal):\n 1. p ^ l < Suc n", "by linarith"], ["proof (state)\nthis:\n  p ^ l < Suc n\n\ngoal (2 subgoals):\n 1. \\<exists>k. Suc n = p ^ k \\<Longrightarrow>\n    max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k\n 2. \\<nexists>k. Suc n = p ^ k \\<Longrightarrow>\n    max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k", "moreover"], ["proof (state)\nthis:\n  p ^ l < Suc n\n\ngoal (2 subgoals):\n 1. \\<exists>k. Suc n = p ^ k \\<Longrightarrow>\n    max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k\n 2. \\<nexists>k. Suc n = p ^ k \\<Longrightarrow>\n    max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k", "have \"p ^ l > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < p ^ l", "using \\<open>p > 1\\<close>"], ["proof (prove)\nusing this:\n  1 < p\n\ngoal (1 subgoal):\n 1. 0 < p ^ l", "by (intro zero_less_power) auto"], ["proof (state)\nthis:\n  0 < p ^ l\n\ngoal (2 subgoals):\n 1. \\<exists>k. Suc n = p ^ k \\<Longrightarrow>\n    max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k\n 2. \\<nexists>k. Suc n = p ^ k \\<Longrightarrow>\n    max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k", "ultimately"], ["proof (chain)\npicking this:\n  p ^ l < Suc n\n  0 < p ^ l", "have \"l = multiplicity p (p ^ l)\" and \"p ^ l \\<in> {1..n}\""], ["proof (prove)\nusing this:\n  p ^ l < Suc n\n  0 < p ^ l\n\ngoal (1 subgoal):\n 1. l = multiplicity p (p ^ l) &&& p ^ l \\<in> {1..n}", "using \\<open>prime p\\<close>"], ["proof (prove)\nusing this:\n  p ^ l < Suc n\n  0 < p ^ l\n  prime p\n\ngoal (1 subgoal):\n 1. l = multiplicity p (p ^ l) &&& p ^ l \\<in> {1..n}", "by auto"], ["proof (state)\nthis:\n  l = multiplicity p (p ^ l)\n  p ^ l \\<in> {1..n}\n\ngoal (2 subgoals):\n 1. \\<exists>k. Suc n = p ^ k \\<Longrightarrow>\n    max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k\n 2. \\<nexists>k. Suc n = p ^ k \\<Longrightarrow>\n    max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k", "hence \"l \\<le> k\""], ["proof (prove)\nusing this:\n  l = multiplicity p (p ^ l)\n  p ^ l \\<in> {1..n}\n\ngoal (1 subgoal):\n 1. l \\<le> k", "unfolding k_def"], ["proof (prove)\nusing this:\n  l = multiplicity p (p ^ l)\n  p ^ l \\<in> {1..n}\n\ngoal (1 subgoal):\n 1. l \\<le> Max (multiplicity p ` {1..n})", "by (intro Max.coboundedI) auto"], ["proof (state)\nthis:\n  l \\<le> k\n\ngoal (2 subgoals):\n 1. \\<exists>k. Suc n = p ^ k \\<Longrightarrow>\n    max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k\n 2. \\<nexists>k. Suc n = p ^ k \\<Longrightarrow>\n    max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k", "with False"], ["proof (chain)\npicking this:\n  \\<nexists>k. Suc n = p ^ k\n  l \\<le> k", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<nexists>k. Suc n = p ^ k\n  l \\<le> k\n\ngoal (1 subgoal):\n 1. max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k", "by (simp add: l_def k_def)"], ["proof (state)\nthis:\n  max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k\n\ngoal (1 subgoal):\n 1. \\<exists>k. Suc n = p ^ k \\<Longrightarrow>\n    max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k. Suc n = p ^ k \\<Longrightarrow>\n    max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k", "case True"], ["proof (state)\nthis:\n  \\<exists>k. Suc n = p ^ k\n\ngoal (1 subgoal):\n 1. \\<exists>k. Suc n = p ^ k \\<Longrightarrow>\n    max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k", "then"], ["proof (chain)\npicking this:\n  \\<exists>k. Suc n = p ^ k", "obtain x where x: \"Suc n = p ^ x\""], ["proof (prove)\nusing this:\n  \\<exists>k. Suc n = p ^ k\n\ngoal (1 subgoal):\n 1. (\\<And>x. Suc n = p ^ x \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Suc n = p ^ x\n\ngoal (1 subgoal):\n 1. \\<exists>k. Suc n = p ^ k \\<Longrightarrow>\n    max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k", "from x and \\<open>n > 0\\<close>"], ["proof (chain)\npicking this:\n  Suc n = p ^ x\n  0 < n", "have \"x > 0\""], ["proof (prove)\nusing this:\n  Suc n = p ^ x\n  0 < n\n\ngoal (1 subgoal):\n 1. 0 < x", "by (intro Nat.gr0I) auto"], ["proof (state)\nthis:\n  0 < x\n\ngoal (1 subgoal):\n 1. \\<exists>k. Suc n = p ^ k \\<Longrightarrow>\n    max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k", "from x"], ["proof (chain)\npicking this:\n  Suc n = p ^ x", "have [simp]: \"l = x\""], ["proof (prove)\nusing this:\n  Suc n = p ^ x\n\ngoal (1 subgoal):\n 1. l = x", "using \\<open>prime p\\<close>"], ["proof (prove)\nusing this:\n  Suc n = p ^ x\n  prime p\n\ngoal (1 subgoal):\n 1. l = x", "by (simp add: l_def)"], ["proof (state)\nthis:\n  l = x\n\ngoal (1 subgoal):\n 1. \\<exists>k. Suc n = p ^ k \\<Longrightarrow>\n    max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k", "have \"x = k + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = k + 1", "proof (intro antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<le> k + 1\n 2. k + 1 \\<le> x", "have \"p ^ (x - 1) < Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p ^ (x - 1) < Suc n", "using \\<open>x > 0\\<close> \\<open>p > 1\\<close>"], ["proof (prove)\nusing this:\n  0 < x\n  1 < p\n\ngoal (1 subgoal):\n 1. p ^ (x - 1) < Suc n", "unfolding x"], ["proof (prove)\nusing this:\n  0 < x\n  1 < p\n\ngoal (1 subgoal):\n 1. p ^ (x - 1) < p ^ x", "by (intro power_strict_increasing) auto"], ["proof (state)\nthis:\n  p ^ (x - 1) < Suc n\n\ngoal (2 subgoals):\n 1. x \\<le> k + 1\n 2. k + 1 \\<le> x", "moreover"], ["proof (state)\nthis:\n  p ^ (x - 1) < Suc n\n\ngoal (2 subgoals):\n 1. x \\<le> k + 1\n 2. k + 1 \\<le> x", "have \"p ^ (x - 1) > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < p ^ (x - 1)", "using \\<open>p > 1\\<close>"], ["proof (prove)\nusing this:\n  1 < p\n\ngoal (1 subgoal):\n 1. 0 < p ^ (x - 1)", "by (intro zero_less_power) auto"], ["proof (state)\nthis:\n  0 < p ^ (x - 1)\n\ngoal (2 subgoals):\n 1. x \\<le> k + 1\n 2. k + 1 \\<le> x", "ultimately"], ["proof (chain)\npicking this:\n  p ^ (x - 1) < Suc n\n  0 < p ^ (x - 1)", "have \"multiplicity p (p ^ (x - 1)) = x - 1\" and \"p ^ (x - 1) \\<in> {1..n}\""], ["proof (prove)\nusing this:\n  p ^ (x - 1) < Suc n\n  0 < p ^ (x - 1)\n\ngoal (1 subgoal):\n 1. multiplicity p (p ^ (x - 1)) = x - 1 &&& p ^ (x - 1) \\<in> {1..n}", "using \\<open>prime p\\<close>"], ["proof (prove)\nusing this:\n  p ^ (x - 1) < Suc n\n  0 < p ^ (x - 1)\n  prime p\n\ngoal (1 subgoal):\n 1. multiplicity p (p ^ (x - 1)) = x - 1 &&& p ^ (x - 1) \\<in> {1..n}", "by auto"], ["proof (state)\nthis:\n  multiplicity p (p ^ (x - 1)) = x - 1\n  p ^ (x - 1) \\<in> {1..n}\n\ngoal (2 subgoals):\n 1. x \\<le> k + 1\n 2. k + 1 \\<le> x", "hence \"x - 1 \\<le> k\""], ["proof (prove)\nusing this:\n  multiplicity p (p ^ (x - 1)) = x - 1\n  p ^ (x - 1) \\<in> {1..n}\n\ngoal (1 subgoal):\n 1. x - 1 \\<le> k", "unfolding k_def"], ["proof (prove)\nusing this:\n  multiplicity p (p ^ (x - 1)) = x - 1\n  p ^ (x - 1) \\<in> {1..n}\n\ngoal (1 subgoal):\n 1. x - 1 \\<le> Max (multiplicity p ` {1..n})", "by (intro Max.coboundedI) force+"], ["proof (state)\nthis:\n  x - 1 \\<le> k\n\ngoal (2 subgoals):\n 1. x \\<le> k + 1\n 2. k + 1 \\<le> x", "thus \"x \\<le> k + 1\""], ["proof (prove)\nusing this:\n  x - 1 \\<le> k\n\ngoal (1 subgoal):\n 1. x \\<le> k + 1", "by linarith"], ["proof (state)\nthis:\n  x \\<le> k + 1\n\ngoal (1 subgoal):\n 1. k + 1 \\<le> x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. k + 1 \\<le> x", "have \"multiplicity p y < x\" if \"y \\<in> {1..n}\" for y"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity p y < x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. multiplicity p y < x", "have \"p ^ multiplicity p y \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p ^ multiplicity p y \\<le> y", "using that"], ["proof (prove)\nusing this:\n  y \\<in> {1..n}\n\ngoal (1 subgoal):\n 1. p ^ multiplicity p y \\<le> y", "by (intro dvd_imp_le multiplicity_dvd) auto"], ["proof (state)\nthis:\n  p ^ multiplicity p y \\<le> y\n\ngoal (1 subgoal):\n 1. multiplicity p y < x", "also"], ["proof (state)\nthis:\n  p ^ multiplicity p y \\<le> y\n\ngoal (1 subgoal):\n 1. multiplicity p y < x", "have \"\\<dots> < Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y < Suc n", "using that"], ["proof (prove)\nusing this:\n  y \\<in> {1..n}\n\ngoal (1 subgoal):\n 1. y < Suc n", "by simp"], ["proof (state)\nthis:\n  y < Suc n\n\ngoal (1 subgoal):\n 1. multiplicity p y < x", "also"], ["proof (state)\nthis:\n  y < Suc n\n\ngoal (1 subgoal):\n 1. multiplicity p y < x", "have \"\\<dots> = p ^ x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc n = p ^ x", "by (fact x)"], ["proof (state)\nthis:\n  Suc n = p ^ x\n\ngoal (1 subgoal):\n 1. multiplicity p y < x", "finally"], ["proof (chain)\npicking this:\n  p ^ multiplicity p y < p ^ x", "show \"multiplicity p y < x\""], ["proof (prove)\nusing this:\n  p ^ multiplicity p y < p ^ x\n\ngoal (1 subgoal):\n 1. multiplicity p y < x", "using \\<open>p > 1\\<close>"], ["proof (prove)\nusing this:\n  p ^ multiplicity p y < p ^ x\n  1 < p\n\ngoal (1 subgoal):\n 1. multiplicity p y < x", "by (subst (asm) power_strict_increasing_iff)"], ["proof (state)\nthis:\n  multiplicity p y < x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?y \\<in> {1..n} \\<Longrightarrow> multiplicity p ?y < x\n\ngoal (1 subgoal):\n 1. k + 1 \\<le> x", "hence \"k < x\""], ["proof (prove)\nusing this:\n  ?y \\<in> {1..n} \\<Longrightarrow> multiplicity p ?y < x\n\ngoal (1 subgoal):\n 1. k < x", "using \\<open>n > 0\\<close>"], ["proof (prove)\nusing this:\n  ?y \\<in> {1..n} \\<Longrightarrow> multiplicity p ?y < x\n  0 < n\n\ngoal (1 subgoal):\n 1. k < x", "unfolding k_def"], ["proof (prove)\nusing this:\n  ?y \\<in> {1..n} \\<Longrightarrow> multiplicity p ?y < x\n  0 < n\n\ngoal (1 subgoal):\n 1. Max (multiplicity p ` {1..n}) < x", "by (subst Max_less_iff) auto"], ["proof (state)\nthis:\n  k < x\n\ngoal (1 subgoal):\n 1. k + 1 \\<le> x", "thus \"k + 1 \\<le> x\""], ["proof (prove)\nusing this:\n  k < x\n\ngoal (1 subgoal):\n 1. k + 1 \\<le> x", "by simp"], ["proof (state)\nthis:\n  k + 1 \\<le> x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x = k + 1\n\ngoal (1 subgoal):\n 1. \\<exists>k. Suc n = p ^ k \\<Longrightarrow>\n    max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k", "thus ?thesis"], ["proof (prove)\nusing this:\n  x = k + 1\n\ngoal (1 subgoal):\n 1. max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k", "using True"], ["proof (prove)\nusing this:\n  x = k + 1\n  \\<exists>k. Suc n = p ^ k\n\ngoal (1 subgoal):\n 1. max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k", "by simp"], ["proof (state)\nthis:\n  max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k\n\ngoal (1 subgoal):\n 1. multiplicity p (Lcm {1..Suc n}) =\n    (if \\<exists>k. Suc n = p ^ k then 1 else 0) +\n    multiplicity p (Lcm {1..n})", "also"], ["proof (state)\nthis:\n  max l k = (if \\<exists>k. Suc n = p ^ k then 1 else 0) + k\n\ngoal (1 subgoal):\n 1. multiplicity p (Lcm {1..Suc n}) =\n    (if \\<exists>k. Suc n = p ^ k then 1 else 0) +\n    multiplicity p (Lcm {1..n})", "have \"k = multiplicity p (Lcm {1..n})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k = multiplicity p (Lcm {1..n})", "unfolding k_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Max (multiplicity p ` {1..n}) = multiplicity p (Lcm {1..n})", "using \\<open>n > 0\\<close> and \\<open>prime p\\<close>"], ["proof (prove)\nusing this:\n  0 < n\n  prime p\n\ngoal (1 subgoal):\n 1. Max (multiplicity p ` {1..n}) = multiplicity p (Lcm {1..n})", "by (subst multiplicity_Lcm) auto"], ["proof (state)\nthis:\n  k = multiplicity p (Lcm {1..n})\n\ngoal (1 subgoal):\n 1. multiplicity p (Lcm {1..Suc n}) =\n    (if \\<exists>k. Suc n = p ^ k then 1 else 0) +\n    multiplicity p (Lcm {1..n})", "finally"], ["proof (chain)\npicking this:\n  multiplicity p (Lcm {1..Suc n}) =\n  (if \\<exists>k. Suc n = p ^ k then 1 else 0) + multiplicity p (Lcm {1..n})", "show ?thesis"], ["proof (prove)\nusing this:\n  multiplicity p (Lcm {1..Suc n}) =\n  (if \\<exists>k. Suc n = p ^ k then 1 else 0) + multiplicity p (Lcm {1..n})\n\ngoal (1 subgoal):\n 1. multiplicity p (Lcm {1..Suc n}) =\n    (if \\<exists>k. Suc n = p ^ k then 1 else 0) +\n    multiplicity p (Lcm {1..n})", "."], ["proof (state)\nthis:\n  multiplicity p (Lcm {1..Suc n}) =\n  (if \\<exists>k. Suc n = p ^ k then 1 else 0) + multiplicity p (Lcm {1..n})\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  Consequently, \\<^term>\\<open>Lcm {1..(n::nat)}\\<close> differs from \\<^term>\\<open>Lcm {1..(n-1::nat)}\\<close>\n  iff \\<open>n\\<close> is of the form $p^k$ for some prime $p$, in which case it is greater by a factor\n  of \\<open>p\\<close>.\n\\<close>"], ["", "lemma Lcm_atLeast1AtMost_Suc:\n  \"Lcm {1..Suc n} = Lcm {1..n} * (if primepow (Suc n) then aprimedivisor (Suc n) else 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lcm {1..Suc n} =\n    Lcm {1..n} * (if primepow (Suc n) then aprimedivisor (Suc n) else 1)", "proof (cases \"n > 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < n \\<Longrightarrow>\n    Lcm {1..Suc n} =\n    Lcm {1..n} * (if primepow (Suc n) then aprimedivisor (Suc n) else 1)\n 2. \\<not> 0 < n \\<Longrightarrow>\n    Lcm {1..Suc n} =\n    Lcm {1..n} * (if primepow (Suc n) then aprimedivisor (Suc n) else 1)", "case True"], ["proof (state)\nthis:\n  0 < n\n\ngoal (2 subgoals):\n 1. 0 < n \\<Longrightarrow>\n    Lcm {1..Suc n} =\n    Lcm {1..n} * (if primepow (Suc n) then aprimedivisor (Suc n) else 1)\n 2. \\<not> 0 < n \\<Longrightarrow>\n    Lcm {1..Suc n} =\n    Lcm {1..n} * (if primepow (Suc n) then aprimedivisor (Suc n) else 1)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lcm {1..Suc n} =\n    Lcm {1..n} * (if primepow (Suc n) then aprimedivisor (Suc n) else 1)", "proof (rule multiplicity_eq_nat)"], ["proof (state)\ngoal (3 subgoals):\n 1. 0 < Lcm {1..Suc n}\n 2. 0 < Lcm {1..n} * (if primepow (Suc n) then aprimedivisor (Suc n) else 1)\n 3. \\<And>p.\n       prime p \\<Longrightarrow>\n       multiplicity p (Lcm {1..Suc n}) =\n       multiplicity p\n        (Lcm {1..n} *\n         (if primepow (Suc n) then aprimedivisor (Suc n) else 1))", "fix p :: nat"], ["proof (state)\ngoal (3 subgoals):\n 1. 0 < Lcm {1..Suc n}\n 2. 0 < Lcm {1..n} * (if primepow (Suc n) then aprimedivisor (Suc n) else 1)\n 3. \\<And>p.\n       prime p \\<Longrightarrow>\n       multiplicity p (Lcm {1..Suc n}) =\n       multiplicity p\n        (Lcm {1..n} *\n         (if primepow (Suc n) then aprimedivisor (Suc n) else 1))", "assume \"prime p\""], ["proof (state)\nthis:\n  prime p\n\ngoal (3 subgoals):\n 1. 0 < Lcm {1..Suc n}\n 2. 0 < Lcm {1..n} * (if primepow (Suc n) then aprimedivisor (Suc n) else 1)\n 3. \\<And>p.\n       prime p \\<Longrightarrow>\n       multiplicity p (Lcm {1..Suc n}) =\n       multiplicity p\n        (Lcm {1..n} *\n         (if primepow (Suc n) then aprimedivisor (Suc n) else 1))", "define x where \"x = (if primepow (Suc n) then aprimedivisor (Suc n) else 1)\""], ["proof (state)\nthis:\n  x = (if primepow (Suc n) then aprimedivisor (Suc n) else 1)\n\ngoal (3 subgoals):\n 1. 0 < Lcm {1..Suc n}\n 2. 0 < Lcm {1..n} * (if primepow (Suc n) then aprimedivisor (Suc n) else 1)\n 3. \\<And>p.\n       prime p \\<Longrightarrow>\n       multiplicity p (Lcm {1..Suc n}) =\n       multiplicity p\n        (Lcm {1..n} *\n         (if primepow (Suc n) then aprimedivisor (Suc n) else 1))", "have \"x > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < x", "using \\<open>n > 0\\<close>"], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. 0 < x", "by (auto simp: x_def intro!: aprimedivisor_pos_nat)"], ["proof (state)\nthis:\n  0 < x\n\ngoal (3 subgoals):\n 1. 0 < Lcm {1..Suc n}\n 2. 0 < Lcm {1..n} * (if primepow (Suc n) then aprimedivisor (Suc n) else 1)\n 3. \\<And>p.\n       prime p \\<Longrightarrow>\n       multiplicity p (Lcm {1..Suc n}) =\n       multiplicity p\n        (Lcm {1..n} *\n         (if primepow (Suc n) then aprimedivisor (Suc n) else 1))", "have \"multiplicity p (Lcm {1..n} * x) = multiplicity p (Lcm {1..n}) + multiplicity p x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity p (Lcm {1..n} * x) =\n    multiplicity p (Lcm {1..n}) + multiplicity p x", "using \\<open>prime p\\<close> \\<open>x > 0\\<close>"], ["proof (prove)\nusing this:\n  prime p\n  0 < x\n\ngoal (1 subgoal):\n 1. multiplicity p (Lcm {1..n} * x) =\n    multiplicity p (Lcm {1..n}) + multiplicity p x", "by (subst prime_elem_multiplicity_mult_distrib) auto"], ["proof (state)\nthis:\n  multiplicity p (Lcm {1..n} * x) =\n  multiplicity p (Lcm {1..n}) + multiplicity p x\n\ngoal (3 subgoals):\n 1. 0 < Lcm {1..Suc n}\n 2. 0 < Lcm {1..n} * (if primepow (Suc n) then aprimedivisor (Suc n) else 1)\n 3. \\<And>p.\n       prime p \\<Longrightarrow>\n       multiplicity p (Lcm {1..Suc n}) =\n       multiplicity p\n        (Lcm {1..n} *\n         (if primepow (Suc n) then aprimedivisor (Suc n) else 1))", "also"], ["proof (state)\nthis:\n  multiplicity p (Lcm {1..n} * x) =\n  multiplicity p (Lcm {1..n}) + multiplicity p x\n\ngoal (3 subgoals):\n 1. 0 < Lcm {1..Suc n}\n 2. 0 < Lcm {1..n} * (if primepow (Suc n) then aprimedivisor (Suc n) else 1)\n 3. \\<And>p.\n       prime p \\<Longrightarrow>\n       multiplicity p (Lcm {1..Suc n}) =\n       multiplicity p\n        (Lcm {1..n} *\n         (if primepow (Suc n) then aprimedivisor (Suc n) else 1))", "consider \"\\<exists>k. Suc n = p ^ k\" | \"primepow (Suc n)\" \"\\<not>(\\<exists>k. Suc n = p ^ k)\" \n                | \"\\<not>primepow (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>k. Suc n = p ^ k \\<Longrightarrow> thesis;\n     \\<lbrakk>primepow (Suc n); \\<nexists>k. Suc n = p ^ k\\<rbrakk>\n     \\<Longrightarrow> thesis;\n     \\<not> primepow (Suc n) \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>\\<exists>k. Suc n = p ^ k \\<Longrightarrow> ?thesis;\n   \\<lbrakk>primepow (Suc n); \\<nexists>k. Suc n = p ^ k\\<rbrakk>\n   \\<Longrightarrow> ?thesis;\n   \\<not> primepow (Suc n) \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (3 subgoals):\n 1. 0 < Lcm {1..Suc n}\n 2. 0 < Lcm {1..n} * (if primepow (Suc n) then aprimedivisor (Suc n) else 1)\n 3. \\<And>p.\n       prime p \\<Longrightarrow>\n       multiplicity p (Lcm {1..Suc n}) =\n       multiplicity p\n        (Lcm {1..n} *\n         (if primepow (Suc n) then aprimedivisor (Suc n) else 1))", "hence \"multiplicity p x = (if \\<exists>k. Suc n = p ^ k then 1 else 0)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<exists>k. Suc n = p ^ k \\<Longrightarrow> ?thesis;\n   \\<lbrakk>primepow (Suc n); \\<nexists>k. Suc n = p ^ k\\<rbrakk>\n   \\<Longrightarrow> ?thesis;\n   \\<not> primepow (Suc n) \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. multiplicity p x = (if \\<exists>k. Suc n = p ^ k then 1 else 0)", "proof cases"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<exists>k. Suc n = p ^ k \\<Longrightarrow>\n    multiplicity p x = (if \\<exists>k. Suc n = p ^ k then 1 else 0)\n 2. \\<lbrakk>primepow (Suc n); \\<nexists>k. Suc n = p ^ k\\<rbrakk>\n    \\<Longrightarrow> multiplicity p x =\n                      (if \\<exists>k. Suc n = p ^ k then 1 else 0)\n 3. \\<not> primepow (Suc n) \\<Longrightarrow>\n    multiplicity p x = (if \\<exists>k. Suc n = p ^ k then 1 else 0)", "assume \"\\<exists>k. Suc n = p ^ k\""], ["proof (state)\nthis:\n  \\<exists>k. Suc n = p ^ k\n\ngoal (3 subgoals):\n 1. \\<exists>k. Suc n = p ^ k \\<Longrightarrow>\n    multiplicity p x = (if \\<exists>k. Suc n = p ^ k then 1 else 0)\n 2. \\<lbrakk>primepow (Suc n); \\<nexists>k. Suc n = p ^ k\\<rbrakk>\n    \\<Longrightarrow> multiplicity p x =\n                      (if \\<exists>k. Suc n = p ^ k then 1 else 0)\n 3. \\<not> primepow (Suc n) \\<Longrightarrow>\n    multiplicity p x = (if \\<exists>k. Suc n = p ^ k then 1 else 0)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>k. Suc n = p ^ k\n\ngoal (1 subgoal):\n 1. multiplicity p x = (if \\<exists>k. Suc n = p ^ k then 1 else 0)", "using \\<open>prime p\\<close> \\<open>n > 0\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>k. Suc n = p ^ k\n  prime p\n  0 < n\n\ngoal (1 subgoal):\n 1. multiplicity p x = (if \\<exists>k. Suc n = p ^ k then 1 else 0)", "by (auto simp: x_def aprimedivisor_prime_power intro!: Nat.gr0I)"], ["proof (state)\nthis:\n  multiplicity p x = (if \\<exists>k. Suc n = p ^ k then 1 else 0)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>primepow (Suc n); \\<nexists>k. Suc n = p ^ k\\<rbrakk>\n    \\<Longrightarrow> multiplicity p x =\n                      (if \\<exists>k. Suc n = p ^ k then 1 else 0)\n 2. \\<not> primepow (Suc n) \\<Longrightarrow>\n    multiplicity p x = (if \\<exists>k. Suc n = p ^ k then 1 else 0)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>primepow (Suc n); \\<nexists>k. Suc n = p ^ k\\<rbrakk>\n    \\<Longrightarrow> multiplicity p x =\n                      (if \\<exists>k. Suc n = p ^ k then 1 else 0)\n 2. \\<not> primepow (Suc n) \\<Longrightarrow>\n    multiplicity p x = (if \\<exists>k. Suc n = p ^ k then 1 else 0)", "assume *: \"primepow (Suc n)\" \"\\<nexists>k. Suc n = p ^ k\""], ["proof (state)\nthis:\n  primepow (Suc n)\n  \\<nexists>k. Suc n = p ^ k\n\ngoal (2 subgoals):\n 1. \\<lbrakk>primepow (Suc n); \\<nexists>k. Suc n = p ^ k\\<rbrakk>\n    \\<Longrightarrow> multiplicity p x =\n                      (if \\<exists>k. Suc n = p ^ k then 1 else 0)\n 2. \\<not> primepow (Suc n) \\<Longrightarrow>\n    multiplicity p x = (if \\<exists>k. Suc n = p ^ k then 1 else 0)", "then"], ["proof (chain)\npicking this:\n  primepow (Suc n)\n  \\<nexists>k. Suc n = p ^ k", "obtain q k where qk: \"prime q\" \"Suc n = q ^ k\" \"k > 0\" \"q \\<noteq> p\""], ["proof (prove)\nusing this:\n  primepow (Suc n)\n  \\<nexists>k. Suc n = p ^ k\n\ngoal (1 subgoal):\n 1. (\\<And>q k.\n        \\<lbrakk>prime q; Suc n = q ^ k; 0 < k; q \\<noteq> p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: primepow_def)"], ["proof (state)\nthis:\n  prime q\n  Suc n = q ^ k\n  0 < k\n  q \\<noteq> p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>primepow (Suc n); \\<nexists>k. Suc n = p ^ k\\<rbrakk>\n    \\<Longrightarrow> multiplicity p x =\n                      (if \\<exists>k. Suc n = p ^ k then 1 else 0)\n 2. \\<not> primepow (Suc n) \\<Longrightarrow>\n    multiplicity p x = (if \\<exists>k. Suc n = p ^ k then 1 else 0)", "thus ?thesis"], ["proof (prove)\nusing this:\n  prime q\n  Suc n = q ^ k\n  0 < k\n  q \\<noteq> p\n\ngoal (1 subgoal):\n 1. multiplicity p x = (if \\<exists>k. Suc n = p ^ k then 1 else 0)", "using \\<open>prime p\\<close>"], ["proof (prove)\nusing this:\n  prime q\n  Suc n = q ^ k\n  0 < k\n  q \\<noteq> p\n  prime p\n\ngoal (1 subgoal):\n 1. multiplicity p x = (if \\<exists>k. Suc n = p ^ k then 1 else 0)", "by (subst *) (auto simp: x_def aprimedivisor_prime_power prime_multiplicity_other)"], ["proof (state)\nthis:\n  multiplicity p x = (if \\<exists>k. Suc n = p ^ k then 1 else 0)\n\ngoal (1 subgoal):\n 1. \\<not> primepow (Suc n) \\<Longrightarrow>\n    multiplicity p x = (if \\<exists>k. Suc n = p ^ k then 1 else 0)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> primepow (Suc n) \\<Longrightarrow>\n    multiplicity p x = (if \\<exists>k. Suc n = p ^ k then 1 else 0)", "assume *: \"\\<not>primepow (Suc n)\""], ["proof (state)\nthis:\n  \\<not> primepow (Suc n)\n\ngoal (1 subgoal):\n 1. \\<not> primepow (Suc n) \\<Longrightarrow>\n    multiplicity p x = (if \\<exists>k. Suc n = p ^ k then 1 else 0)", "hence **: \"\\<nexists>k. Suc n = p ^ k\""], ["proof (prove)\nusing this:\n  \\<not> primepow (Suc n)\n\ngoal (1 subgoal):\n 1. \\<nexists>k. Suc n = p ^ k", "using \\<open>prime p\\<close> \\<open>n > 0\\<close>"], ["proof (prove)\nusing this:\n  \\<not> primepow (Suc n)\n  prime p\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<nexists>k. Suc n = p ^ k", "by auto"], ["proof (state)\nthis:\n  \\<nexists>k. Suc n = p ^ k\n\ngoal (1 subgoal):\n 1. \\<not> primepow (Suc n) \\<Longrightarrow>\n    multiplicity p x = (if \\<exists>k. Suc n = p ^ k then 1 else 0)", "from *"], ["proof (chain)\npicking this:\n  \\<not> primepow (Suc n)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> primepow (Suc n)\n\ngoal (1 subgoal):\n 1. multiplicity p x = (if \\<exists>k. Suc n = p ^ k then 1 else 0)", "unfolding x_def"], ["proof (prove)\nusing this:\n  \\<not> primepow (Suc n)\n\ngoal (1 subgoal):\n 1. multiplicity p (if primepow (Suc n) then aprimedivisor (Suc n) else 1) =\n    (if \\<exists>k. Suc n = p ^ k then 1 else 0)", "by (subst **) auto"], ["proof (state)\nthis:\n  multiplicity p x = (if \\<exists>k. Suc n = p ^ k then 1 else 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  multiplicity p x = (if \\<exists>k. Suc n = p ^ k then 1 else 0)\n\ngoal (3 subgoals):\n 1. 0 < Lcm {1..Suc n}\n 2. 0 < Lcm {1..n} * (if primepow (Suc n) then aprimedivisor (Suc n) else 1)\n 3. \\<And>p.\n       prime p \\<Longrightarrow>\n       multiplicity p (Lcm {1..Suc n}) =\n       multiplicity p\n        (Lcm {1..n} *\n         (if primepow (Suc n) then aprimedivisor (Suc n) else 1))", "also"], ["proof (state)\nthis:\n  multiplicity p x = (if \\<exists>k. Suc n = p ^ k then 1 else 0)\n\ngoal (3 subgoals):\n 1. 0 < Lcm {1..Suc n}\n 2. 0 < Lcm {1..n} * (if primepow (Suc n) then aprimedivisor (Suc n) else 1)\n 3. \\<And>p.\n       prime p \\<Longrightarrow>\n       multiplicity p (Lcm {1..Suc n}) =\n       multiplicity p\n        (Lcm {1..n} *\n         (if primepow (Suc n) then aprimedivisor (Suc n) else 1))", "have \"multiplicity p (Lcm {1..n}) + \\<dots> = multiplicity p (Lcm {1..Suc n})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity p (Lcm {1..n}) +\n    (if \\<exists>k. Suc n = p ^ k then 1 else 0) =\n    multiplicity p (Lcm {1..Suc n})", "using \\<open>prime p\\<close> \\<open>n > 0\\<close>"], ["proof (prove)\nusing this:\n  prime p\n  0 < n\n\ngoal (1 subgoal):\n 1. multiplicity p (Lcm {1..n}) +\n    (if \\<exists>k. Suc n = p ^ k then 1 else 0) =\n    multiplicity p (Lcm {1..Suc n})", "by (subst multiplicity_Lcm_atLeast1AtMost_Suc) (auto simp: x_def)"], ["proof (state)\nthis:\n  multiplicity p (Lcm {1..n}) +\n  (if \\<exists>k. Suc n = p ^ k then 1 else 0) =\n  multiplicity p (Lcm {1..Suc n})\n\ngoal (3 subgoals):\n 1. 0 < Lcm {1..Suc n}\n 2. 0 < Lcm {1..n} * (if primepow (Suc n) then aprimedivisor (Suc n) else 1)\n 3. \\<And>p.\n       prime p \\<Longrightarrow>\n       multiplicity p (Lcm {1..Suc n}) =\n       multiplicity p\n        (Lcm {1..n} *\n         (if primepow (Suc n) then aprimedivisor (Suc n) else 1))", "finally"], ["proof (chain)\npicking this:\n  multiplicity p (Lcm {1..n} * x) = multiplicity p (Lcm {1..Suc n})", "show \"multiplicity p (Lcm {1..Suc n}) = multiplicity p (Lcm {1..n} * x)\""], ["proof (prove)\nusing this:\n  multiplicity p (Lcm {1..n} * x) = multiplicity p (Lcm {1..Suc n})\n\ngoal (1 subgoal):\n 1. multiplicity p (Lcm {1..Suc n}) = multiplicity p (Lcm {1..n} * x)", ".."], ["proof (state)\nthis:\n  multiplicity p (Lcm {1..Suc n}) = multiplicity p (Lcm {1..n} * x)\n\ngoal (2 subgoals):\n 1. 0 < Lcm {1..Suc n}\n 2. 0 < Lcm {1..n} * (if primepow (Suc n) then aprimedivisor (Suc n) else 1)", "qed (use \\<open>n > 0\\<close> in \\<open>auto intro!: Nat.gr0I dest: aprimedivisor_pos_nat\\<close>)"], ["proof (state)\nthis:\n  Lcm {1..Suc n} =\n  Lcm {1..n} * (if primepow (Suc n) then aprimedivisor (Suc n) else 1)\n\ngoal (1 subgoal):\n 1. \\<not> 0 < n \\<Longrightarrow>\n    Lcm {1..Suc n} =\n    Lcm {1..n} * (if primepow (Suc n) then aprimedivisor (Suc n) else 1)", "qed auto"], ["", "text \\<open>\n  It follows by induction that $\\text{Lcm}\\ \\{1..n\\} = e^{\\psi(n)}$.\n\\<close>"], ["", "lemma Lcm_atLeast1AtMost_conv_\\<psi>:\n  includes prime_counting_notation\n  shows \"real (Lcm {1..n}) = exp (\\<psi> (real n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real (Lcm {1..n}) = exp (\\<psi> (real n))", "proof (induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. real (Lcm {1..0}) = exp (\\<psi> (real 0))\n 2. \\<And>n.\n       real (Lcm {1..n}) = exp (\\<psi> (real n)) \\<Longrightarrow>\n       real (Lcm {1..Suc n}) = exp (\\<psi> (real (Suc n)))", "case (Suc n)"], ["proof (state)\nthis:\n  real (Lcm {1..n}) = exp (\\<psi> (real n))\n\ngoal (2 subgoals):\n 1. real (Lcm {1..0}) = exp (\\<psi> (real 0))\n 2. \\<And>n.\n       real (Lcm {1..n}) = exp (\\<psi> (real n)) \\<Longrightarrow>\n       real (Lcm {1..Suc n}) = exp (\\<psi> (real (Suc n)))", "have \"real (Lcm {1..Suc n}) =\n          real (Lcm {1..n}) * (if primepow (Suc n) then aprimedivisor (Suc n) else 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real (Lcm {1..Suc n}) =\n    real (Lcm {1..n}) *\n    real (if primepow (Suc n) then aprimedivisor (Suc n) else 1)", "by (subst Lcm_atLeast1AtMost_Suc) auto"], ["proof (state)\nthis:\n  real (Lcm {1..Suc n}) =\n  real (Lcm {1..n}) *\n  real (if primepow (Suc n) then aprimedivisor (Suc n) else 1)\n\ngoal (2 subgoals):\n 1. real (Lcm {1..0}) = exp (\\<psi> (real 0))\n 2. \\<And>n.\n       real (Lcm {1..n}) = exp (\\<psi> (real n)) \\<Longrightarrow>\n       real (Lcm {1..Suc n}) = exp (\\<psi> (real (Suc n)))", "also"], ["proof (state)\nthis:\n  real (Lcm {1..Suc n}) =\n  real (Lcm {1..n}) *\n  real (if primepow (Suc n) then aprimedivisor (Suc n) else 1)\n\ngoal (2 subgoals):\n 1. real (Lcm {1..0}) = exp (\\<psi> (real 0))\n 2. \\<And>n.\n       real (Lcm {1..n}) = exp (\\<psi> (real n)) \\<Longrightarrow>\n       real (Lcm {1..Suc n}) = exp (\\<psi> (real (Suc n)))", "{"], ["proof (state)\nthis:\n  real (Lcm {1..Suc n}) =\n  real (Lcm {1..n}) *\n  real (if primepow (Suc n) then aprimedivisor (Suc n) else 1)\n\ngoal (2 subgoals):\n 1. real (Lcm {1..0}) = exp (\\<psi> (real 0))\n 2. \\<And>n.\n       real (Lcm {1..n}) = exp (\\<psi> (real n)) \\<Longrightarrow>\n       real (Lcm {1..Suc n}) = exp (\\<psi> (real (Suc n)))", "assume \"primepow (Suc n)\""], ["proof (state)\nthis:\n  primepow (Suc n)\n\ngoal (2 subgoals):\n 1. real (Lcm {1..0}) = exp (\\<psi> (real 0))\n 2. \\<And>n.\n       real (Lcm {1..n}) = exp (\\<psi> (real n)) \\<Longrightarrow>\n       real (Lcm {1..Suc n}) = exp (\\<psi> (real (Suc n)))", "hence \"Suc n > Suc 0\""], ["proof (prove)\nusing this:\n  primepow (Suc n)\n\ngoal (1 subgoal):\n 1. Suc 0 < Suc n", "by (rule primepow_gt_Suc_0)"], ["proof (state)\nthis:\n  Suc 0 < Suc n\n\ngoal (2 subgoals):\n 1. real (Lcm {1..0}) = exp (\\<psi> (real 0))\n 2. \\<And>n.\n       real (Lcm {1..n}) = exp (\\<psi> (real n)) \\<Longrightarrow>\n       real (Lcm {1..Suc n}) = exp (\\<psi> (real (Suc n)))", "hence \"aprimedivisor (Suc n) > 0\""], ["proof (prove)\nusing this:\n  Suc 0 < Suc n\n\ngoal (1 subgoal):\n 1. 0 < aprimedivisor (Suc n)", "by (intro aprimedivisor_pos_nat) auto"], ["proof (state)\nthis:\n  0 < aprimedivisor (Suc n)\n\ngoal (2 subgoals):\n 1. real (Lcm {1..0}) = exp (\\<psi> (real 0))\n 2. \\<And>n.\n       real (Lcm {1..n}) = exp (\\<psi> (real n)) \\<Longrightarrow>\n       real (Lcm {1..Suc n}) = exp (\\<psi> (real (Suc n)))", "}"], ["proof (state)\nthis:\n  primepow (Suc n) \\<Longrightarrow> 0 < aprimedivisor (Suc n)\n\ngoal (2 subgoals):\n 1. real (Lcm {1..0}) = exp (\\<psi> (real 0))\n 2. \\<And>n.\n       real (Lcm {1..n}) = exp (\\<psi> (real n)) \\<Longrightarrow>\n       real (Lcm {1..Suc n}) = exp (\\<psi> (real (Suc n)))", "hence \"(if primepow (Suc n) then aprimedivisor (Suc n) else 1) = exp (mangoldt (Suc n))\""], ["proof (prove)\nusing this:\n  primepow (Suc n) \\<Longrightarrow> 0 < aprimedivisor (Suc n)\n\ngoal (1 subgoal):\n 1. real (if primepow (Suc n) then aprimedivisor (Suc n) else 1) =\n    exp (mangoldt (Suc n))", "by (simp add: mangoldt_def)"], ["proof (state)\nthis:\n  real (if primepow (Suc n) then aprimedivisor (Suc n) else 1) =\n  exp (mangoldt (Suc n))\n\ngoal (2 subgoals):\n 1. real (Lcm {1..0}) = exp (\\<psi> (real 0))\n 2. \\<And>n.\n       real (Lcm {1..n}) = exp (\\<psi> (real n)) \\<Longrightarrow>\n       real (Lcm {1..Suc n}) = exp (\\<psi> (real (Suc n)))", "also"], ["proof (state)\nthis:\n  real (if primepow (Suc n) then aprimedivisor (Suc n) else 1) =\n  exp (mangoldt (Suc n))\n\ngoal (2 subgoals):\n 1. real (Lcm {1..0}) = exp (\\<psi> (real 0))\n 2. \\<And>n.\n       real (Lcm {1..n}) = exp (\\<psi> (real n)) \\<Longrightarrow>\n       real (Lcm {1..Suc n}) = exp (\\<psi> (real (Suc n)))", "have \"Lcm {1..n} * \\<dots> = exp (\\<psi> (real n + 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real (Lcm {1..n}) * exp (mangoldt (Suc n)) = exp (\\<psi> (real n + 1))", "using Suc.IH"], ["proof (prove)\nusing this:\n  real (Lcm {1..n}) = exp (\\<psi> (real n))\n\ngoal (1 subgoal):\n 1. real (Lcm {1..n}) * exp (mangoldt (Suc n)) = exp (\\<psi> (real n + 1))", "by (simp add: primes_psi_def sum_upto_plus1 exp_add)"], ["proof (state)\nthis:\n  real (Lcm {1..n}) * exp (mangoldt (Suc n)) = exp (\\<psi> (real n + 1))\n\ngoal (2 subgoals):\n 1. real (Lcm {1..0}) = exp (\\<psi> (real 0))\n 2. \\<And>n.\n       real (Lcm {1..n}) = exp (\\<psi> (real n)) \\<Longrightarrow>\n       real (Lcm {1..Suc n}) = exp (\\<psi> (real (Suc n)))", "finally"], ["proof (chain)\npicking this:\n  real (Lcm {1..Suc n}) = exp (\\<psi> (real n + 1))", "show ?case"], ["proof (prove)\nusing this:\n  real (Lcm {1..Suc n}) = exp (\\<psi> (real n + 1))\n\ngoal (1 subgoal):\n 1. real (Lcm {1..Suc n}) = exp (\\<psi> (real (Suc n)))", "by (simp add: add_ac)"], ["proof (state)\nthis:\n  real (Lcm {1..Suc n}) = exp (\\<psi> (real (Suc n)))\n\ngoal (1 subgoal):\n 1. real (Lcm {1..0}) = exp (\\<psi> (real 0))", "qed simp_all"], ["", "lemma Lcm_upto_real_conv_\\<psi>:\n  includes prime_counting_notation\n  shows \"real (Lcm {1..nat \\<lfloor>x\\<rfloor>}) = exp (\\<psi> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real (Lcm {1..nat \\<lfloor>x\\<rfloor>}) = exp (\\<psi> x)", "by (subst Lcm_atLeast1AtMost_conv_\\<psi>) (simp add: primes_psi_def sum_upto_altdef)"], ["", "end"]]}