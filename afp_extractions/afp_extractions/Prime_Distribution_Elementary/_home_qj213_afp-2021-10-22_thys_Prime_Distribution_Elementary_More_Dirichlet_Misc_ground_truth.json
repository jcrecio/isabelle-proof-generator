{"file_name": "/home/qj213/afp-2021-10-22/thys/Prime_Distribution_Elementary/More_Dirichlet_Misc.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Prime_Distribution_Elementary", "problem_names": ["lemma dirichlet_prod'_one_left:\n  \"dirichlet_prod' (\\<lambda>n. if n = 1 then 1 else 0) f x = (if x \\<ge> 1 then f x else 0)\"", "lemma dirichlet_prod'_cong:\n  assumes \"\\<And>n. n > 0 \\<Longrightarrow> real n \\<le> x \\<Longrightarrow> f n = f' n\"\n  assumes \"\\<And>y. y \\<ge> 1 \\<Longrightarrow> y \\<le> x \\<Longrightarrow> g y = g' y\"\n  assumes \"x = x'\"\n  shows   \"dirichlet_prod' f g x = dirichlet_prod' f' g' x'\"", "lemma dirichlet_prod'_assoc:\n  \"dirichlet_prod' f (\\<lambda>y. dirichlet_prod' g h y) x = dirichlet_prod' (dirichlet_prod f g) h x\"", "lemma dirichlet_prod'_inversion1:\n  assumes \"\\<forall>x\\<ge>1. g x = dirichlet_prod' a f x\" \"x \\<ge> 1\"\n          \"dirichlet_prod a ainv = (\\<lambda>n. if n = 1 then 1 else 0)\"\n  shows   \"f x = dirichlet_prod' ainv g x\"", "lemma dirichlet_prod'_inversion2:\n  assumes \"\\<forall>x\\<ge>1. f x = dirichlet_prod' ainv g x\" \"x \\<ge> 1\"\n          \"dirichlet_prod a ainv = (\\<lambda>n. if n = 1 then 1 else 0)\"\n  shows   \"g x = dirichlet_prod' a f x\"", "lemma dirichlet_prod'_inversion:\n  assumes \"dirichlet_prod a ainv = (\\<lambda>n. if n = 1 then 1 else 0)\"\n  shows   \"(\\<forall>x\\<ge>1. g x = dirichlet_prod' a f x) \\<longleftrightarrow> (\\<forall>x\\<ge>1. f x = dirichlet_prod' ainv g x)\"", "lemma dirichlet_prod'_inversion':\n  assumes \"a 1 * y = 1\"\n  defines \"ainv \\<equiv> dirichlet_inverse a y\"\n  shows   \"(\\<forall>x\\<ge>1. g x = dirichlet_prod' a f x) \\<longleftrightarrow> (\\<forall>x\\<ge>1. f x = dirichlet_prod' ainv g x)\"", "lemma dirichlet_prod'_floor_conv_sum_upto:\n  \"dirichlet_prod' f (\\<lambda>x. real_of_int (floor x)) x = sum_upto (\\<lambda>n. sum_upto f (x / n)) x\"", "lemma (in completely_multiplicative_function) dirichlet_prod_self:\n  \"dirichlet_prod f f n = f n * of_nat (divisor_count n)\"", "lemma completely_multiplicative_imp_moebius_mu_inverse:\n  fixes f :: \"nat \\<Rightarrow> 'a :: {comm_ring_1}\"\n  assumes \"completely_multiplicative_function f\"\n  shows   \"dirichlet_prod f (\\<lambda>n. moebius_mu n * f n) n = (if n = 1 then 1 else 0)\"", "lemma dirichlet_prod_inversion_completely_multiplicative:\n  fixes a :: \"nat \\<Rightarrow> 'a :: comm_ring_1\"\n  assumes \"completely_multiplicative_function a\"\n  shows   \"(\\<forall>x\\<ge>1. g x = dirichlet_prod' a f x) \\<longleftrightarrow>\n             (\\<forall>x\\<ge>1. f x = dirichlet_prod' (\\<lambda>n. moebius_mu n * a n) g x)\"", "lemma divisor_sigma_conv_dirichlet_prod:\n  \"divisor_sigma x n = dirichlet_prod (\\<lambda>n. real n powr x) (\\<lambda>_. 1) n\"", "lemma legendre_aux_not_prime [simp]: \"\\<not>prime p \\<Longrightarrow> legendre_aux x p = 0\"", "lemma legendre_aux_eq_0:\n  assumes \"real p > x\"\n  shows   \"legendre_aux x p = 0\"", "lemma legendre_aux_posD:\n  assumes \"legendre_aux x p > 0\"\n  shows   \"prime p\" \"real p \\<le> x\"", "lemma exponents_le_finite:\n  assumes \"p > (1 :: nat)\" \"k > 0\"\n  shows   \"finite {i. real (p ^ (k * i + l)) \\<le> x}\"", "lemma finite_sum_legendre_aux: \n  assumes \"prime p\"\n  shows   \"finite {m. m > 0 \\<and> real (p ^ m) \\<le> x}\"", "lemma legendre_aux_set_eq:\n  assumes \"prime p\" \"x \\<ge> 1\"\n  shows   \"{m. m > 0 \\<and> real (p ^ m) \\<le> x} = {0<..nat \\<lfloor>log (real p) x\\<rfloor>}\"", "lemma legendre_aux_altdef1:\n  \"legendre_aux x p = (if prime p \\<and> x \\<ge> 1 then\n                         (\\<Sum>m\\<in>{0<..nat \\<lfloor>log (real p) x\\<rfloor>}. nat \\<lfloor>x / p ^ m\\<rfloor>) else 0)\"", "lemma legendre_aux_altdef2:\n  assumes \"x \\<ge> 1\" \"prime p\" \"real p ^ Suc k > x\"\n  shows   \"legendre_aux x p = (\\<Sum>m\\<in>{0<..k}. nat \\<lfloor>x / p ^ m\\<rfloor>)\"", "theorem legendre_identity:\n  \"sum_upto ln x = prime_sum_upto (\\<lambda>p. legendre_aux x p * ln p) x\"", "lemma legendre_identity':\n  \"fact (nat \\<lfloor>x\\<rfloor>) = (\\<Prod>p | prime p \\<and> real p \\<le> x. p ^ legendre_aux x p)\"", "lemma abs_sum_upto_moebius_mu_over_n_less:\n  assumes x: \"x \\<ge> 2\"\n  shows   \"\\<bar>M x\\<bar> < 1\"", "lemma sum_upto_moebius_mu_over_n_eq:\n  assumes \"x < 2\"\n  shows   \"M x = (if x \\<ge> 1 then 1 else 0)\"", "lemma abs_sum_upto_moebius_mu_over_n_le: \"\\<bar>M x\\<bar> \\<le> 1\""], "translations": [["", "lemma dirichlet_prod'_one_left:\n  \"dirichlet_prod' (\\<lambda>n. if n = 1 then 1 else 0) f x = (if x \\<ge> 1 then f x else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod' (\\<lambda>n. if n = 1 then 1::'a else (0::'a)) f x =\n    (if 1 \\<le> x then f x else (0::'a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dirichlet_prod' (\\<lambda>n. if n = 1 then 1::'a else (0::'a)) f x =\n    (if 1 \\<le> x then f x else (0::'a))", "have  \"dirichlet_prod' (\\<lambda>n. if n = 1 then 1 else 0) f x =\n           (\\<Sum>i | 0 < i \\<and> real i \\<le> x. (if i = Suc 0 then 1 else 0) * f (x / real i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod' (\\<lambda>n. if n = 1 then 1::'a else (0::'a)) f x =\n    (\\<Sum>i | 0 < i \\<and> real i \\<le> x.\n       (if i = Suc 0 then 1::'a else (0::'a)) * f (x / real i))", "by (simp add: dirichlet_prod'_def sum_upto_def)"], ["proof (state)\nthis:\n  dirichlet_prod' (\\<lambda>n. if n = 1 then 1::'a else (0::'a)) f x =\n  (\\<Sum>i | 0 < i \\<and> real i \\<le> x.\n     (if i = Suc 0 then 1::'a else (0::'a)) * f (x / real i))\n\ngoal (1 subgoal):\n 1. dirichlet_prod' (\\<lambda>n. if n = 1 then 1::'a else (0::'a)) f x =\n    (if 1 \\<le> x then f x else (0::'a))", "also"], ["proof (state)\nthis:\n  dirichlet_prod' (\\<lambda>n. if n = 1 then 1::'a else (0::'a)) f x =\n  (\\<Sum>i | 0 < i \\<and> real i \\<le> x.\n     (if i = Suc 0 then 1::'a else (0::'a)) * f (x / real i))\n\ngoal (1 subgoal):\n 1. dirichlet_prod' (\\<lambda>n. if n = 1 then 1::'a else (0::'a)) f x =\n    (if 1 \\<le> x then f x else (0::'a))", "have \"\\<dots> = (\\<Sum>i\\<in>(if x \\<ge> 1 then {1::nat} else {}). f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i | 0 < i \\<and> real i \\<le> x.\n       (if i = Suc 0 then 1::'a else (0::'a)) * f (x / real i)) =\n    (\\<Sum>i\\<in>(if 1 \\<le> x then {1} else {}). f x)", "by (intro sum.mono_neutral_cong_right) (auto split: if_splits)"], ["proof (state)\nthis:\n  (\\<Sum>i | 0 < i \\<and> real i \\<le> x.\n     (if i = Suc 0 then 1::'a else (0::'a)) * f (x / real i)) =\n  (\\<Sum>i\\<in>(if 1 \\<le> x then {1} else {}). f x)\n\ngoal (1 subgoal):\n 1. dirichlet_prod' (\\<lambda>n. if n = 1 then 1::'a else (0::'a)) f x =\n    (if 1 \\<le> x then f x else (0::'a))", "also"], ["proof (state)\nthis:\n  (\\<Sum>i | 0 < i \\<and> real i \\<le> x.\n     (if i = Suc 0 then 1::'a else (0::'a)) * f (x / real i)) =\n  (\\<Sum>i\\<in>(if 1 \\<le> x then {1} else {}). f x)\n\ngoal (1 subgoal):\n 1. dirichlet_prod' (\\<lambda>n. if n = 1 then 1::'a else (0::'a)) f x =\n    (if 1 \\<le> x then f x else (0::'a))", "have \"\\<dots> = (if x \\<ge> 1 then f x else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>(if 1 \\<le> x then {1} else {}). f x) =\n    (if 1 \\<le> x then f x else (0::'a))", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>(if 1 \\<le> x then {1} else {}). f x) =\n  (if 1 \\<le> x then f x else (0::'a))\n\ngoal (1 subgoal):\n 1. dirichlet_prod' (\\<lambda>n. if n = 1 then 1::'a else (0::'a)) f x =\n    (if 1 \\<le> x then f x else (0::'a))", "finally"], ["proof (chain)\npicking this:\n  dirichlet_prod' (\\<lambda>n. if n = 1 then 1::'a else (0::'a)) f x =\n  (if 1 \\<le> x then f x else (0::'a))", "show ?thesis"], ["proof (prove)\nusing this:\n  dirichlet_prod' (\\<lambda>n. if n = 1 then 1::'a else (0::'a)) f x =\n  (if 1 \\<le> x then f x else (0::'a))\n\ngoal (1 subgoal):\n 1. dirichlet_prod' (\\<lambda>n. if n = 1 then 1::'a else (0::'a)) f x =\n    (if 1 \\<le> x then f x else (0::'a))", "."], ["proof (state)\nthis:\n  dirichlet_prod' (\\<lambda>n. if n = 1 then 1::'a else (0::'a)) f x =\n  (if 1 \\<le> x then f x else (0::'a))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dirichlet_prod'_cong:\n  assumes \"\\<And>n. n > 0 \\<Longrightarrow> real n \\<le> x \\<Longrightarrow> f n = f' n\"\n  assumes \"\\<And>y. y \\<ge> 1 \\<Longrightarrow> y \\<le> x \\<Longrightarrow> g y = g' y\"\n  assumes \"x = x'\"\n  shows   \"dirichlet_prod' f g x = dirichlet_prod' f' g' x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod' f g x = dirichlet_prod' f' g' x'", "unfolding dirichlet_prod'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>m. f m * g (x / real m)) x =\n    sum_upto (\\<lambda>m. f' m * g' (x' / real m)) x'", "by (intro sum_upto_cong' assms, (subst assms | simp add: assms field_simps)+)"], ["", "(* 2.21 *)"], ["", "lemma dirichlet_prod'_assoc:\n  \"dirichlet_prod' f (\\<lambda>y. dirichlet_prod' g h y) x = dirichlet_prod' (dirichlet_prod f g) h x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod' f (dirichlet_prod' g h) x =\n    dirichlet_prod' (dirichlet_prod f g) h x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dirichlet_prod' f (dirichlet_prod' g h) x =\n    dirichlet_prod' (dirichlet_prod f g) h x", "have \"dirichlet_prod' f (\\<lambda>y. dirichlet_prod' g h y) x =\n          (\\<Sum>m | m > 0 \\<and> real m \\<le> x. \\<Sum>n | n > 0 \\<and> real n \\<le> x / m. f m * g n * h (x / (m * n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod' f (dirichlet_prod' g h) x =\n    (\\<Sum>m | 0 < m \\<and> real m \\<le> x.\n       \\<Sum>n | 0 < n \\<and> real n \\<le> x / real m.\n         f m * g n * h (x / real (m * n)))", "by (simp add: algebra_simps dirichlet_prod'_def dirichlet_prod_def\n                  sum_upto_def sum_distrib_left sum_distrib_right)"], ["proof (state)\nthis:\n  dirichlet_prod' f (dirichlet_prod' g h) x =\n  (\\<Sum>m | 0 < m \\<and> real m \\<le> x.\n     \\<Sum>n | 0 < n \\<and> real n \\<le> x / real m.\n       f m * g n * h (x / real (m * n)))\n\ngoal (1 subgoal):\n 1. dirichlet_prod' f (dirichlet_prod' g h) x =\n    dirichlet_prod' (dirichlet_prod f g) h x", "also"], ["proof (state)\nthis:\n  dirichlet_prod' f (dirichlet_prod' g h) x =\n  (\\<Sum>m | 0 < m \\<and> real m \\<le> x.\n     \\<Sum>n | 0 < n \\<and> real n \\<le> x / real m.\n       f m * g n * h (x / real (m * n)))\n\ngoal (1 subgoal):\n 1. dirichlet_prod' f (dirichlet_prod' g h) x =\n    dirichlet_prod' (dirichlet_prod f g) h x", "have \"\\<dots> = (\\<Sum>(m,n)\\<in>(SIGMA m:{m. m > 0 \\<and> real m \\<le> x}. {n. n > 0 \\<and> real n \\<le> x / m}).\n                     f m * g n * h (x / (m * n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>m | 0 < m \\<and> real m \\<le> x.\n       \\<Sum>n | 0 < n \\<and> real n \\<le> x / real m.\n         f m * g n * h (x / real (m * n))) =\n    (\\<Sum>(m, n)\n           \\<in>(SIGMA xa:{m. 0 < m \\<and> real m \\<le> x}.\n                    {n. 0 < n \\<and> real n \\<le> x / real xa}).\n       f m * g n * h (x / real (m * n)))", "by (subst sum.Sigma) auto"], ["proof (state)\nthis:\n  (\\<Sum>m | 0 < m \\<and> real m \\<le> x.\n     \\<Sum>n | 0 < n \\<and> real n \\<le> x / real m.\n       f m * g n * h (x / real (m * n))) =\n  (\\<Sum>(m, n)\n         \\<in>(SIGMA xa:{m. 0 < m \\<and> real m \\<le> x}.\n                  {n. 0 < n \\<and> real n \\<le> x / real xa}).\n     f m * g n * h (x / real (m * n)))\n\ngoal (1 subgoal):\n 1. dirichlet_prod' f (dirichlet_prod' g h) x =\n    dirichlet_prod' (dirichlet_prod f g) h x", "also"], ["proof (state)\nthis:\n  (\\<Sum>m | 0 < m \\<and> real m \\<le> x.\n     \\<Sum>n | 0 < n \\<and> real n \\<le> x / real m.\n       f m * g n * h (x / real (m * n))) =\n  (\\<Sum>(m, n)\n         \\<in>(SIGMA xa:{m. 0 < m \\<and> real m \\<le> x}.\n                  {n. 0 < n \\<and> real n \\<le> x / real xa}).\n     f m * g n * h (x / real (m * n)))\n\ngoal (1 subgoal):\n 1. dirichlet_prod' f (dirichlet_prod' g h) x =\n    dirichlet_prod' (dirichlet_prod f g) h x", "have \"\\<dots> = (\\<Sum>(mn, m)\\<in>(SIGMA mn:{mn. mn > 0 \\<and> real mn \\<le> x}. {m. m dvd mn}).\n                    f m * g (mn div m) * h (x / mn))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(m, n)\n           \\<in>(SIGMA xa:{m. 0 < m \\<and> real m \\<le> x}.\n                    {n. 0 < n \\<and> real n \\<le> x / real xa}).\n       f m * g n * h (x / real (m * n))) =\n    (\\<Sum>(mn, m)\n           \\<in>(SIGMA mn:{mn. 0 < mn \\<and> real mn \\<le> x}.\n                    {m. m dvd mn}).\n       f m * g (mn div m) * h (x / real mn))", "by (rule sum.reindex_bij_witness[of _ \"\\<lambda>(mn, m). (m, mn div m)\" \"\\<lambda>(m, n). (m * n, m)\"])\n       (auto simp: case_prod_unfold field_simps dest: dvd_imp_le)"], ["proof (state)\nthis:\n  (\\<Sum>(m, n)\n         \\<in>(SIGMA xa:{m. 0 < m \\<and> real m \\<le> x}.\n                  {n. 0 < n \\<and> real n \\<le> x / real xa}).\n     f m * g n * h (x / real (m * n))) =\n  (\\<Sum>(mn, m)\n         \\<in>(SIGMA mn:{mn. 0 < mn \\<and> real mn \\<le> x}. {m. m dvd mn}).\n     f m * g (mn div m) * h (x / real mn))\n\ngoal (1 subgoal):\n 1. dirichlet_prod' f (dirichlet_prod' g h) x =\n    dirichlet_prod' (dirichlet_prod f g) h x", "also"], ["proof (state)\nthis:\n  (\\<Sum>(m, n)\n         \\<in>(SIGMA xa:{m. 0 < m \\<and> real m \\<le> x}.\n                  {n. 0 < n \\<and> real n \\<le> x / real xa}).\n     f m * g n * h (x / real (m * n))) =\n  (\\<Sum>(mn, m)\n         \\<in>(SIGMA mn:{mn. 0 < mn \\<and> real mn \\<le> x}. {m. m dvd mn}).\n     f m * g (mn div m) * h (x / real mn))\n\ngoal (1 subgoal):\n 1. dirichlet_prod' f (dirichlet_prod' g h) x =\n    dirichlet_prod' (dirichlet_prod f g) h x", "have \"\\<dots> = dirichlet_prod' (dirichlet_prod f g) h x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(mn, m)\n           \\<in>(SIGMA mn:{mn. 0 < mn \\<and> real mn \\<le> x}.\n                    {m. m dvd mn}).\n       f m * g (mn div m) * h (x / real mn)) =\n    dirichlet_prod' (dirichlet_prod f g) h x", "by (subst sum.Sigma [symmetric])\n       (simp_all add: dirichlet_prod'_def dirichlet_prod_def sum_upto_def\n                      algebra_simps sum_distrib_left sum_distrib_right)"], ["proof (state)\nthis:\n  (\\<Sum>(mn, m)\n         \\<in>(SIGMA mn:{mn. 0 < mn \\<and> real mn \\<le> x}. {m. m dvd mn}).\n     f m * g (mn div m) * h (x / real mn)) =\n  dirichlet_prod' (dirichlet_prod f g) h x\n\ngoal (1 subgoal):\n 1. dirichlet_prod' f (dirichlet_prod' g h) x =\n    dirichlet_prod' (dirichlet_prod f g) h x", "finally"], ["proof (chain)\npicking this:\n  dirichlet_prod' f (dirichlet_prod' g h) x =\n  dirichlet_prod' (dirichlet_prod f g) h x", "show ?thesis"], ["proof (prove)\nusing this:\n  dirichlet_prod' f (dirichlet_prod' g h) x =\n  dirichlet_prod' (dirichlet_prod f g) h x\n\ngoal (1 subgoal):\n 1. dirichlet_prod' f (dirichlet_prod' g h) x =\n    dirichlet_prod' (dirichlet_prod f g) h x", "."], ["proof (state)\nthis:\n  dirichlet_prod' f (dirichlet_prod' g h) x =\n  dirichlet_prod' (dirichlet_prod f g) h x\n\ngoal:\nNo subgoals!", "qed"], ["", "(* 2.22 *)"], ["", "lemma dirichlet_prod'_inversion1:\n  assumes \"\\<forall>x\\<ge>1. g x = dirichlet_prod' a f x\" \"x \\<ge> 1\"\n          \"dirichlet_prod a ainv = (\\<lambda>n. if n = 1 then 1 else 0)\"\n  shows   \"f x = dirichlet_prod' ainv g x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x = dirichlet_prod' ainv g x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f x = dirichlet_prod' ainv g x", "have \"dirichlet_prod' ainv g x = dirichlet_prod' ainv (dirichlet_prod' a f) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod' ainv g x = dirichlet_prod' ainv (dirichlet_prod' a f) x", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>x\\<ge>1. g x = dirichlet_prod' a f x\n  1 \\<le> x\n  dirichlet_prod a ainv = (\\<lambda>n. if n = 1 then 1::'a else (0::'a))\n\ngoal (1 subgoal):\n 1. dirichlet_prod' ainv g x = dirichlet_prod' ainv (dirichlet_prod' a f) x", "by (intro dirichlet_prod'_cong) auto"], ["proof (state)\nthis:\n  dirichlet_prod' ainv g x = dirichlet_prod' ainv (dirichlet_prod' a f) x\n\ngoal (1 subgoal):\n 1. f x = dirichlet_prod' ainv g x", "also"], ["proof (state)\nthis:\n  dirichlet_prod' ainv g x = dirichlet_prod' ainv (dirichlet_prod' a f) x\n\ngoal (1 subgoal):\n 1. f x = dirichlet_prod' ainv g x", "have \"\\<dots> = dirichlet_prod' (\\<lambda>n. if n = 1 then 1 else 0) f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod' ainv (dirichlet_prod' a f) x =\n    dirichlet_prod' (\\<lambda>n. if n = 1 then 1::'a else (0::'a)) f x", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>x\\<ge>1. g x = dirichlet_prod' a f x\n  1 \\<le> x\n  dirichlet_prod a ainv = (\\<lambda>n. if n = 1 then 1::'a else (0::'a))\n\ngoal (1 subgoal):\n 1. dirichlet_prod' ainv (dirichlet_prod' a f) x =\n    dirichlet_prod' (\\<lambda>n. if n = 1 then 1::'a else (0::'a)) f x", "by (simp add: dirichlet_prod'_assoc dirichlet_prod_commutes)"], ["proof (state)\nthis:\n  dirichlet_prod' ainv (dirichlet_prod' a f) x =\n  dirichlet_prod' (\\<lambda>n. if n = 1 then 1::'a else (0::'a)) f x\n\ngoal (1 subgoal):\n 1. f x = dirichlet_prod' ainv g x", "also"], ["proof (state)\nthis:\n  dirichlet_prod' ainv (dirichlet_prod' a f) x =\n  dirichlet_prod' (\\<lambda>n. if n = 1 then 1::'a else (0::'a)) f x\n\ngoal (1 subgoal):\n 1. f x = dirichlet_prod' ainv g x", "have \"\\<dots> = f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod' (\\<lambda>n. if n = 1 then 1::'a else (0::'a)) f x = f x", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>x\\<ge>1. g x = dirichlet_prod' a f x\n  1 \\<le> x\n  dirichlet_prod a ainv = (\\<lambda>n. if n = 1 then 1::'a else (0::'a))\n\ngoal (1 subgoal):\n 1. dirichlet_prod' (\\<lambda>n. if n = 1 then 1::'a else (0::'a)) f x = f x", "by (subst dirichlet_prod'_one_left) auto"], ["proof (state)\nthis:\n  dirichlet_prod' (\\<lambda>n. if n = 1 then 1::'a else (0::'a)) f x = f x\n\ngoal (1 subgoal):\n 1. f x = dirichlet_prod' ainv g x", "finally"], ["proof (chain)\npicking this:\n  dirichlet_prod' ainv g x = f x", "show ?thesis"], ["proof (prove)\nusing this:\n  dirichlet_prod' ainv g x = f x\n\ngoal (1 subgoal):\n 1. f x = dirichlet_prod' ainv g x", ".."], ["proof (state)\nthis:\n  f x = dirichlet_prod' ainv g x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dirichlet_prod'_inversion2:\n  assumes \"\\<forall>x\\<ge>1. f x = dirichlet_prod' ainv g x\" \"x \\<ge> 1\"\n          \"dirichlet_prod a ainv = (\\<lambda>n. if n = 1 then 1 else 0)\"\n  shows   \"g x = dirichlet_prod' a f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g x = dirichlet_prod' a f x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. g x = dirichlet_prod' a f x", "have \"dirichlet_prod' a f x = dirichlet_prod' a (dirichlet_prod' ainv g) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod' a f x = dirichlet_prod' a (dirichlet_prod' ainv g) x", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>x\\<ge>1. f x = dirichlet_prod' ainv g x\n  1 \\<le> x\n  dirichlet_prod a ainv = (\\<lambda>n. if n = 1 then 1::'a else (0::'a))\n\ngoal (1 subgoal):\n 1. dirichlet_prod' a f x = dirichlet_prod' a (dirichlet_prod' ainv g) x", "by (intro dirichlet_prod'_cong) auto"], ["proof (state)\nthis:\n  dirichlet_prod' a f x = dirichlet_prod' a (dirichlet_prod' ainv g) x\n\ngoal (1 subgoal):\n 1. g x = dirichlet_prod' a f x", "also"], ["proof (state)\nthis:\n  dirichlet_prod' a f x = dirichlet_prod' a (dirichlet_prod' ainv g) x\n\ngoal (1 subgoal):\n 1. g x = dirichlet_prod' a f x", "have \"\\<dots> = dirichlet_prod' (\\<lambda>n. if n = 1 then 1 else 0) g x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod' a (dirichlet_prod' ainv g) x =\n    dirichlet_prod' (\\<lambda>n. if n = 1 then 1::'a else (0::'a)) g x", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>x\\<ge>1. f x = dirichlet_prod' ainv g x\n  1 \\<le> x\n  dirichlet_prod a ainv = (\\<lambda>n. if n = 1 then 1::'a else (0::'a))\n\ngoal (1 subgoal):\n 1. dirichlet_prod' a (dirichlet_prod' ainv g) x =\n    dirichlet_prod' (\\<lambda>n. if n = 1 then 1::'a else (0::'a)) g x", "by (simp add: dirichlet_prod'_assoc dirichlet_prod_commutes)"], ["proof (state)\nthis:\n  dirichlet_prod' a (dirichlet_prod' ainv g) x =\n  dirichlet_prod' (\\<lambda>n. if n = 1 then 1::'a else (0::'a)) g x\n\ngoal (1 subgoal):\n 1. g x = dirichlet_prod' a f x", "also"], ["proof (state)\nthis:\n  dirichlet_prod' a (dirichlet_prod' ainv g) x =\n  dirichlet_prod' (\\<lambda>n. if n = 1 then 1::'a else (0::'a)) g x\n\ngoal (1 subgoal):\n 1. g x = dirichlet_prod' a f x", "have \"\\<dots> = g x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod' (\\<lambda>n. if n = 1 then 1::'a else (0::'a)) g x = g x", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>x\\<ge>1. f x = dirichlet_prod' ainv g x\n  1 \\<le> x\n  dirichlet_prod a ainv = (\\<lambda>n. if n = 1 then 1::'a else (0::'a))\n\ngoal (1 subgoal):\n 1. dirichlet_prod' (\\<lambda>n. if n = 1 then 1::'a else (0::'a)) g x = g x", "by (subst dirichlet_prod'_one_left) auto"], ["proof (state)\nthis:\n  dirichlet_prod' (\\<lambda>n. if n = 1 then 1::'a else (0::'a)) g x = g x\n\ngoal (1 subgoal):\n 1. g x = dirichlet_prod' a f x", "finally"], ["proof (chain)\npicking this:\n  dirichlet_prod' a f x = g x", "show ?thesis"], ["proof (prove)\nusing this:\n  dirichlet_prod' a f x = g x\n\ngoal (1 subgoal):\n 1. g x = dirichlet_prod' a f x", ".."], ["proof (state)\nthis:\n  g x = dirichlet_prod' a f x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dirichlet_prod'_inversion:\n  assumes \"dirichlet_prod a ainv = (\\<lambda>n. if n = 1 then 1 else 0)\"\n  shows   \"(\\<forall>x\\<ge>1. g x = dirichlet_prod' a f x) \\<longleftrightarrow> (\\<forall>x\\<ge>1. f x = dirichlet_prod' ainv g x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<ge>1. g x = dirichlet_prod' a f x) =\n    (\\<forall>x\\<ge>1. f x = dirichlet_prod' ainv g x)", "using dirichlet_prod'_inversion1[of g a f _ ainv] dirichlet_prod'_inversion2[of f ainv g _ a]\n        assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>x\\<ge>1. g x = dirichlet_prod' a f x; 1 \\<le> ?x;\n   dirichlet_prod a ainv =\n   (\\<lambda>n. if n = 1 then 1::'a else (0::'a))\\<rbrakk>\n  \\<Longrightarrow> f ?x = dirichlet_prod' ainv g ?x\n  \\<lbrakk>\\<forall>x\\<ge>1. f x = dirichlet_prod' ainv g x; 1 \\<le> ?x;\n   dirichlet_prod a ainv =\n   (\\<lambda>n. if n = 1 then 1::'a else (0::'a))\\<rbrakk>\n  \\<Longrightarrow> g ?x = dirichlet_prod' a f ?x\n  dirichlet_prod a ainv = (\\<lambda>n. if n = 1 then 1::'a else (0::'a))\n\ngoal (1 subgoal):\n 1. (\\<forall>x\\<ge>1. g x = dirichlet_prod' a f x) =\n    (\\<forall>x\\<ge>1. f x = dirichlet_prod' ainv g x)", "by blast"], ["", "lemma dirichlet_prod'_inversion':\n  assumes \"a 1 * y = 1\"\n  defines \"ainv \\<equiv> dirichlet_inverse a y\"\n  shows   \"(\\<forall>x\\<ge>1. g x = dirichlet_prod' a f x) \\<longleftrightarrow> (\\<forall>x\\<ge>1. f x = dirichlet_prod' ainv g x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<ge>1. g x = dirichlet_prod' a f x) =\n    (\\<forall>x\\<ge>1. f x = dirichlet_prod' ainv g x)", "unfolding ainv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<ge>1. g x = dirichlet_prod' a f x) =\n    (\\<forall>x\\<ge>1. f x = dirichlet_prod' (dirichlet_inverse a y) g x)", "by (intro dirichlet_prod'_inversion dirichlet_prod_inverse assms)"], ["", "(* 3.11 *)"], ["", "lemma dirichlet_prod'_floor_conv_sum_upto:\n  \"dirichlet_prod' f (\\<lambda>x. real_of_int (floor x)) x = sum_upto (\\<lambda>n. sum_upto f (x / n)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod' f (\\<lambda>x. real_of_int \\<lfloor>x\\<rfloor>) x =\n    sum_upto (\\<lambda>xa. sum_upto f (x / real xa)) x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dirichlet_prod' f (\\<lambda>x. real_of_int \\<lfloor>x\\<rfloor>) x =\n    sum_upto (\\<lambda>xa. sum_upto f (x / real xa)) x", "have [simp]: \"sum_upto (\\<lambda>_. 1 :: real) x = real (nat \\<lfloor>x\\<rfloor>)\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>_. 1) x = real (nat \\<lfloor>x\\<rfloor>)", "by (simp add: sum_upto_altdef)"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>_. 1) ?x = real (nat \\<lfloor>?x\\<rfloor>)\n\ngoal (1 subgoal):\n 1. dirichlet_prod' f (\\<lambda>x. real_of_int \\<lfloor>x\\<rfloor>) x =\n    sum_upto (\\<lambda>xa. sum_upto f (x / real xa)) x", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod' f (\\<lambda>x. real_of_int \\<lfloor>x\\<rfloor>) x =\n    sum_upto (\\<lambda>xa. sum_upto f (x / real xa)) x", "using sum_upto_dirichlet_prod[of \"\\<lambda>n. 1::real\" f] sum_upto_dirichlet_prod[of f \"\\<lambda>n. 1::real\"]"], ["proof (prove)\nusing this:\n  sum_upto (dirichlet_prod (\\<lambda>n. 1) f) ?x =\n  sum_upto (\\<lambda>d. 1 * sum_upto f (?x / real d)) ?x\n  sum_upto (dirichlet_prod f (\\<lambda>n. 1)) ?x =\n  sum_upto (\\<lambda>d. f d * sum_upto (\\<lambda>n. 1) (?x / real d)) ?x\n\ngoal (1 subgoal):\n 1. dirichlet_prod' f (\\<lambda>x. real_of_int \\<lfloor>x\\<rfloor>) x =\n    sum_upto (\\<lambda>xa. sum_upto f (x / real xa)) x", "by (simp add: dirichlet_prod'_def dirichlet_prod_commutes)"], ["proof (state)\nthis:\n  dirichlet_prod' f (\\<lambda>x. real_of_int \\<lfloor>x\\<rfloor>) x =\n  sum_upto (\\<lambda>xa. sum_upto f (x / real xa)) x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in completely_multiplicative_function) dirichlet_prod_self:\n  \"dirichlet_prod f f n = f n * of_nat (divisor_count n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod f f n = f n * of_nat (divisor_count n)", "proof (cases \"n = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f f n = f n * of_nat (divisor_count n)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f f n = f n * of_nat (divisor_count n)", "case False"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f f n = f n * of_nat (divisor_count n)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f f n = f n * of_nat (divisor_count n)", "have \"dirichlet_prod f f n = (\\<Sum>(r, d) | r * d = n. f (r * d))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod f f n = (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f (r * d))", "by (simp add: dirichlet_prod_altdef2 mult)"], ["proof (state)\nthis:\n  dirichlet_prod f f n = (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f (r * d))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f f n = f n * of_nat (divisor_count n)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f f n = f n * of_nat (divisor_count n)", "also"], ["proof (state)\nthis:\n  dirichlet_prod f f n = (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f (r * d))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f f n = f n * of_nat (divisor_count n)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f f n = f n * of_nat (divisor_count n)", "have \"\\<dots> = (\\<Sum>(r, d) | r * d = n. f n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f (r * d)) =\n    (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f n)", "by (intro sum.cong) auto"], ["proof (state)\nthis:\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f (r * d)) =\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f n)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f f n = f n * of_nat (divisor_count n)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f f n = f n * of_nat (divisor_count n)", "also"], ["proof (state)\nthis:\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f (r * d)) =\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f n)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f f n = f n * of_nat (divisor_count n)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f f n = f n * of_nat (divisor_count n)", "have \"\\<dots> = f n * of_nat (card {(r, d). r * d = n})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f n) =\n    f n * of_nat (card {(r, d). r * d = n})", "by (simp add: mult.commute)"], ["proof (state)\nthis:\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f n) =\n  f n * of_nat (card {(r, d). r * d = n})\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f f n = f n * of_nat (divisor_count n)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f f n = f n * of_nat (divisor_count n)", "also"], ["proof (state)\nthis:\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f n) =\n  f n * of_nat (card {(r, d). r * d = n})\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f f n = f n * of_nat (divisor_count n)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f f n = f n * of_nat (divisor_count n)", "have \"bij_betw fst {(r, d). r * d = n} {r. r dvd n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw fst {(r, d). r * d = n} {r. r dvd n}", "by (rule bij_betwI[of _ _ _ \"\\<lambda>r. (r, n div r)\"]) (use False in auto)"], ["proof (state)\nthis:\n  bij_betw fst {(r, d). r * d = n} {r. r dvd n}\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f f n = f n * of_nat (divisor_count n)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f f n = f n * of_nat (divisor_count n)", "hence \"card {(r, d). r * d = n} = card {r. r dvd n}\""], ["proof (prove)\nusing this:\n  bij_betw fst {(r, d). r * d = n} {r. r dvd n}\n\ngoal (1 subgoal):\n 1. card {(r, d). r * d = n} = card {r. r dvd n}", "by (rule bij_betw_same_card)"], ["proof (state)\nthis:\n  card {(r, d). r * d = n} = card {r. r dvd n}\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f f n = f n * of_nat (divisor_count n)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f f n = f n * of_nat (divisor_count n)", "also"], ["proof (state)\nthis:\n  card {(r, d). r * d = n} = card {r. r dvd n}\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f f n = f n * of_nat (divisor_count n)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f f n = f n * of_nat (divisor_count n)", "have \"\\<dots> = divisor_count n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {r. r dvd n} = divisor_count n", "by (simp add: divisor_count_def)"], ["proof (state)\nthis:\n  card {r. r dvd n} = divisor_count n\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f f n = f n * of_nat (divisor_count n)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f f n = f n * of_nat (divisor_count n)", "finally"], ["proof (chain)\npicking this:\n  dirichlet_prod f f n = f n * of_nat (divisor_count n)", "show ?thesis"], ["proof (prove)\nusing this:\n  dirichlet_prod f f n = f n * of_nat (divisor_count n)\n\ngoal (1 subgoal):\n 1. dirichlet_prod f f n = f n * of_nat (divisor_count n)", "."], ["proof (state)\nthis:\n  dirichlet_prod f f n = f n * of_nat (divisor_count n)\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f f n = f n * of_nat (divisor_count n)", "qed auto"], ["", "lemma completely_multiplicative_imp_moebius_mu_inverse:\n  fixes f :: \"nat \\<Rightarrow> 'a :: {comm_ring_1}\"\n  assumes \"completely_multiplicative_function f\"\n  shows   \"dirichlet_prod f (\\<lambda>n. moebius_mu n * f n) n = (if n = 1 then 1 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod f (\\<lambda>n. moebius_mu n * f n) n =\n    (if n = 1 then 1::'a else (0::'a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dirichlet_prod f (\\<lambda>n. moebius_mu n * f n) n =\n    (if n = 1 then 1::'a else (0::'a))", "interpret completely_multiplicative_function f"], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_multiplicative_function f", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. dirichlet_prod f (\\<lambda>n. moebius_mu n * f n) n =\n    (if n = 1 then 1::'a else (0::'a))", "have [simp]: \"fds f \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds f \\<noteq> 0", "by (auto simp: fds_eq_iff)"], ["proof (state)\nthis:\n  fds f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. dirichlet_prod f (\\<lambda>n. moebius_mu n * f n) n =\n    (if n = 1 then 1::'a else (0::'a))", "have \"dirichlet_prod f (\\<lambda>n. moebius_mu n * f n) n =\n          (\\<Sum>(r, d) | r * d = n. moebius_mu r * f (r * d))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod f (\\<lambda>n. moebius_mu n * f n) n =\n    (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. moebius_mu r * f (r * d))", "by (subst dirichlet_prod_commutes)\n       (simp add: fds_eq_iff fds_nth_mult fds_nth_fds dirichlet_prod_altdef2 mult_ac mult)"], ["proof (state)\nthis:\n  dirichlet_prod f (\\<lambda>n. moebius_mu n * f n) n =\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. moebius_mu r * f (r * d))\n\ngoal (1 subgoal):\n 1. dirichlet_prod f (\\<lambda>n. moebius_mu n * f n) n =\n    (if n = 1 then 1::'a else (0::'a))", "also"], ["proof (state)\nthis:\n  dirichlet_prod f (\\<lambda>n. moebius_mu n * f n) n =\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. moebius_mu r * f (r * d))\n\ngoal (1 subgoal):\n 1. dirichlet_prod f (\\<lambda>n. moebius_mu n * f n) n =\n    (if n = 1 then 1::'a else (0::'a))", "have \"\\<dots> = (\\<Sum>(r, d) | r * d = n. moebius_mu r * f n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. moebius_mu r * f (r * d)) =\n    (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. moebius_mu r * f n)", "by (intro sum.cong) auto"], ["proof (state)\nthis:\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. moebius_mu r * f (r * d)) =\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. moebius_mu r * f n)\n\ngoal (1 subgoal):\n 1. dirichlet_prod f (\\<lambda>n. moebius_mu n * f n) n =\n    (if n = 1 then 1::'a else (0::'a))", "also"], ["proof (state)\nthis:\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. moebius_mu r * f (r * d)) =\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. moebius_mu r * f n)\n\ngoal (1 subgoal):\n 1. dirichlet_prod f (\\<lambda>n. moebius_mu n * f n) n =\n    (if n = 1 then 1::'a else (0::'a))", "have \"\\<dots> = dirichlet_prod moebius_mu (\\<lambda>_. 1) n * f n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. moebius_mu r * f n) =\n    dirichlet_prod moebius_mu (\\<lambda>_. 1::'a) n * f n", "by (simp add: dirichlet_prod_altdef2 sum_distrib_right case_prod_unfold mult)"], ["proof (state)\nthis:\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. moebius_mu r * f n) =\n  dirichlet_prod moebius_mu (\\<lambda>_. 1::'a) n * f n\n\ngoal (1 subgoal):\n 1. dirichlet_prod f (\\<lambda>n. moebius_mu n * f n) n =\n    (if n = 1 then 1::'a else (0::'a))", "also"], ["proof (state)\nthis:\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. moebius_mu r * f n) =\n  dirichlet_prod moebius_mu (\\<lambda>_. 1::'a) n * f n\n\ngoal (1 subgoal):\n 1. dirichlet_prod f (\\<lambda>n. moebius_mu n * f n) n =\n    (if n = 1 then 1::'a else (0::'a))", "have \"dirichlet_prod moebius_mu (\\<lambda>_. 1) n = fds_nth (fds moebius_mu * fds_zeta) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod moebius_mu (\\<lambda>_. 1::'b) n =\n    fds_nth (fds moebius_mu * fds_zeta) n", "by (simp add: fds_nth_mult)"], ["proof (state)\nthis:\n  dirichlet_prod moebius_mu (\\<lambda>_. 1::?'b1) n =\n  fds_nth (fds moebius_mu * fds_zeta) n\n\ngoal (1 subgoal):\n 1. dirichlet_prod f (\\<lambda>n. moebius_mu n * f n) n =\n    (if n = 1 then 1::'a else (0::'a))", "also"], ["proof (state)\nthis:\n  dirichlet_prod moebius_mu (\\<lambda>_. 1::?'b1) n =\n  fds_nth (fds moebius_mu * fds_zeta) n\n\ngoal (1 subgoal):\n 1. dirichlet_prod f (\\<lambda>n. moebius_mu n * f n) n =\n    (if n = 1 then 1::'a else (0::'a))", "have \"fds moebius_mu * fds_zeta = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds moebius_mu * fds_zeta = 1", "by (simp add: mult_ac fds_zeta_times_moebius_mu)"], ["proof (state)\nthis:\n  fds moebius_mu * fds_zeta = 1\n\ngoal (1 subgoal):\n 1. dirichlet_prod f (\\<lambda>n. moebius_mu n * f n) n =\n    (if n = 1 then 1::'a else (0::'a))", "also"], ["proof (state)\nthis:\n  fds moebius_mu * fds_zeta = 1\n\ngoal (1 subgoal):\n 1. dirichlet_prod f (\\<lambda>n. moebius_mu n * f n) n =\n    (if n = 1 then 1::'a else (0::'a))", "have \"fds_nth 1 n * f n = fds_nth 1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth 1 n * f n = fds_nth 1 n", "by (auto simp: fds_eq_iff fds_nth_one)"], ["proof (state)\nthis:\n  fds_nth 1 n * f n = fds_nth 1 n\n\ngoal (1 subgoal):\n 1. dirichlet_prod f (\\<lambda>n. moebius_mu n * f n) n =\n    (if n = 1 then 1::'a else (0::'a))", "finally"], ["proof (chain)\npicking this:\n  dirichlet_prod f (\\<lambda>n. moebius_mu n * f n) n = fds_nth 1 n", "show ?thesis"], ["proof (prove)\nusing this:\n  dirichlet_prod f (\\<lambda>n. moebius_mu n * f n) n = fds_nth 1 n\n\ngoal (1 subgoal):\n 1. dirichlet_prod f (\\<lambda>n. moebius_mu n * f n) n =\n    (if n = 1 then 1::'a else (0::'a))", "by (simp add: fds_nth_one)"], ["proof (state)\nthis:\n  dirichlet_prod f (\\<lambda>n. moebius_mu n * f n) n =\n  (if n = 1 then 1::'a else (0::'a))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* 2.23 *)"], ["", "lemma dirichlet_prod_inversion_completely_multiplicative:\n  fixes a :: \"nat \\<Rightarrow> 'a :: comm_ring_1\"\n  assumes \"completely_multiplicative_function a\"\n  shows   \"(\\<forall>x\\<ge>1. g x = dirichlet_prod' a f x) \\<longleftrightarrow>\n             (\\<forall>x\\<ge>1. f x = dirichlet_prod' (\\<lambda>n. moebius_mu n * a n) g x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<ge>1. g x = dirichlet_prod' a f x) =\n    (\\<forall>x\\<ge>1.\n        f x = dirichlet_prod' (\\<lambda>n. moebius_mu n * a n) g x)", "by (intro dirichlet_prod'_inversion ext completely_multiplicative_imp_moebius_mu_inverse assms)"], ["", "lemma divisor_sigma_conv_dirichlet_prod:\n  \"divisor_sigma x n = dirichlet_prod (\\<lambda>n. real n powr x) (\\<lambda>_. 1) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. divisor_sigma x n =\n    dirichlet_prod (\\<lambda>n. real n powr x) (\\<lambda>_. 1) n", "proof (cases \"n = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    divisor_sigma x n =\n    dirichlet_prod (\\<lambda>n. real n powr x) (\\<lambda>_. 1) n\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    divisor_sigma x n =\n    dirichlet_prod (\\<lambda>n. real n powr x) (\\<lambda>_. 1) n", "case False"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    divisor_sigma x n =\n    dirichlet_prod (\\<lambda>n. real n powr x) (\\<lambda>_. 1) n\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    divisor_sigma x n =\n    dirichlet_prod (\\<lambda>n. real n powr x) (\\<lambda>_. 1) n", "have \"fds (divisor_sigma x) = fds_shift x fds_zeta * fds_zeta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds (divisor_sigma x) = fds_shift x fds_zeta * fds_zeta", "using fds_divisor_sigma[of x]"], ["proof (prove)\nusing this:\n  fds (divisor_sigma x) = fds_zeta * fds_shift x fds_zeta\n\ngoal (1 subgoal):\n 1. fds (divisor_sigma x) = fds_shift x fds_zeta * fds_zeta", "by (simp add: mult_ac)"], ["proof (state)\nthis:\n  fds (divisor_sigma x) = fds_shift x fds_zeta * fds_zeta\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    divisor_sigma x n =\n    dirichlet_prod (\\<lambda>n. real n powr x) (\\<lambda>_. 1) n\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    divisor_sigma x n =\n    dirichlet_prod (\\<lambda>n. real n powr x) (\\<lambda>_. 1) n", "thus ?thesis"], ["proof (prove)\nusing this:\n  fds (divisor_sigma x) = fds_shift x fds_zeta * fds_zeta\n\ngoal (1 subgoal):\n 1. divisor_sigma x n =\n    dirichlet_prod (\\<lambda>n. real n powr x) (\\<lambda>_. 1) n", "using False"], ["proof (prove)\nusing this:\n  fds (divisor_sigma x) = fds_shift x fds_zeta * fds_zeta\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. divisor_sigma x n =\n    dirichlet_prod (\\<lambda>n. real n powr x) (\\<lambda>_. 1) n", "by (auto simp: fds_eq_iff fds_nth_mult)"], ["proof (state)\nthis:\n  divisor_sigma x n =\n  dirichlet_prod (\\<lambda>n. real n powr x) (\\<lambda>_. 1) n\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow>\n    divisor_sigma x n =\n    dirichlet_prod (\\<lambda>n. real n powr x) (\\<lambda>_. 1) n", "qed simp_all"], ["", "subsection \\<open>Legendre's identity\\<close>"], ["", "definition legendre_aux :: \"real \\<Rightarrow> nat \\<Rightarrow> nat\" where\n  \"legendre_aux x p = (if prime p then (\\<Sum>m | m > 0 \\<and> real (p ^ m) \\<le> x. nat \\<lfloor>x / p ^ m\\<rfloor>) else 0)\""], ["", "lemma legendre_aux_not_prime [simp]: \"\\<not>prime p \\<Longrightarrow> legendre_aux x p = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> prime p \\<Longrightarrow> legendre_aux x p = 0", "by (simp add: legendre_aux_def)"], ["", "lemma legendre_aux_eq_0:\n  assumes \"real p > x\"\n  shows   \"legendre_aux x p = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. legendre_aux x p = 0", "proof (cases \"prime p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. prime p \\<Longrightarrow> legendre_aux x p = 0\n 2. \\<not> prime p \\<Longrightarrow> legendre_aux x p = 0", "case True"], ["proof (state)\nthis:\n  prime p\n\ngoal (2 subgoals):\n 1. prime p \\<Longrightarrow> legendre_aux x p = 0\n 2. \\<not> prime p \\<Longrightarrow> legendre_aux x p = 0", "have [simp]: \"\\<not>real p ^ m \\<le> x\" if \"m > 0\" for m"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> real p ^ m \\<le> x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> real p ^ m \\<le> x", "have \"x < real p ^ 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < real p ^ 1", "using assms"], ["proof (prove)\nusing this:\n  x < real p\n\ngoal (1 subgoal):\n 1. x < real p ^ 1", "by simp"], ["proof (state)\nthis:\n  x < real p ^ 1\n\ngoal (1 subgoal):\n 1. \\<not> real p ^ m \\<le> x", "also"], ["proof (state)\nthis:\n  x < real p ^ 1\n\ngoal (1 subgoal):\n 1. \\<not> real p ^ m \\<le> x", "have \"\\<dots> \\<le> real p ^ m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real p ^ 1 \\<le> real p ^ m", "using prime_gt_1_nat[OF True] that"], ["proof (prove)\nusing this:\n  1 < p\n  0 < m\n\ngoal (1 subgoal):\n 1. real p ^ 1 \\<le> real p ^ m", "by (intro power_increasing) auto"], ["proof (state)\nthis:\n  real p ^ 1 \\<le> real p ^ m\n\ngoal (1 subgoal):\n 1. \\<not> real p ^ m \\<le> x", "finally"], ["proof (chain)\npicking this:\n  x < real p ^ m", "show ?thesis"], ["proof (prove)\nusing this:\n  x < real p ^ m\n\ngoal (1 subgoal):\n 1. \\<not> real p ^ m \\<le> x", "by auto"], ["proof (state)\nthis:\n  \\<not> real p ^ m \\<le> x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < ?m \\<Longrightarrow> \\<not> real p ^ ?m \\<le> x\n\ngoal (2 subgoals):\n 1. prime p \\<Longrightarrow> legendre_aux x p = 0\n 2. \\<not> prime p \\<Longrightarrow> legendre_aux x p = 0", "from assms"], ["proof (chain)\npicking this:\n  x < real p", "have *: \"{m. m > 0 \\<and> real (p ^ m) \\<le> x} = {}\""], ["proof (prove)\nusing this:\n  x < real p\n\ngoal (1 subgoal):\n 1. {m. 0 < m \\<and> real (p ^ m) \\<le> x} = {}", "using prime_gt_1_nat[OF True]"], ["proof (prove)\nusing this:\n  x < real p\n  1 < p\n\ngoal (1 subgoal):\n 1. {m. 0 < m \\<and> real (p ^ m) \\<le> x} = {}", "by auto"], ["proof (state)\nthis:\n  {m. 0 < m \\<and> real (p ^ m) \\<le> x} = {}\n\ngoal (2 subgoals):\n 1. prime p \\<Longrightarrow> legendre_aux x p = 0\n 2. \\<not> prime p \\<Longrightarrow> legendre_aux x p = 0", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. legendre_aux x p = 0", "unfolding legendre_aux_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if prime p\n     then \\<Sum>m | 0 < m \\<and> real (p ^ m) \\<le> x.\n            nat \\<lfloor>x / real (p ^ m)\\<rfloor>\n     else 0) =\n    0", "by (subst *) auto"], ["proof (state)\nthis:\n  legendre_aux x p = 0\n\ngoal (1 subgoal):\n 1. \\<not> prime p \\<Longrightarrow> legendre_aux x p = 0", "qed (auto simp: legendre_aux_def)"], ["", "lemma legendre_aux_posD:\n  assumes \"legendre_aux x p > 0\"\n  shows   \"prime p\" \"real p \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime p &&& real p \\<le> x", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. prime p\n 2. real p \\<le> x", "show \"real p \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real p \\<le> x", "using legendre_aux_eq_0[of x p] assms"], ["proof (prove)\nusing this:\n  x < real p \\<Longrightarrow> legendre_aux x p = 0\n  0 < legendre_aux x p\n\ngoal (1 subgoal):\n 1. real p \\<le> x", "by (cases \"real p \\<le> x\") auto"], ["proof (state)\nthis:\n  real p \\<le> x\n\ngoal (1 subgoal):\n 1. prime p", "qed (use assms in \\<open>auto simp: legendre_aux_def split: if_splits\\<close>)"], ["", "lemma exponents_le_finite:\n  assumes \"p > (1 :: nat)\" \"k > 0\"\n  shows   \"finite {i. real (p ^ (k * i + l)) \\<le> x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {i. real (p ^ (k * i + l)) \\<le> x}", "proof (rule finite_subset)"], ["proof (state)\ngoal (2 subgoals):\n 1. {i. real (p ^ (k * i + l)) \\<le> x} \\<subseteq> ?B\n 2. finite ?B", "show \"{i. real (p ^ (k * i + l)) \\<le> x} \\<subseteq> {..nat \\<lfloor>x\\<rfloor>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. real (p ^ (k * i + l)) \\<le> x}\n    \\<subseteq> {..nat \\<lfloor>x\\<rfloor>}", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       real (p ^ (k * xa + l)) \\<le> x \\<Longrightarrow>\n       xa \\<le> nat \\<lfloor>x\\<rfloor>", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       real (p ^ (k * xa + l)) \\<le> x \\<Longrightarrow>\n       xa \\<le> nat \\<lfloor>x\\<rfloor>", "assume i: \"real (p ^ (k * i + l)) \\<le> x\""], ["proof (state)\nthis:\n  real (p ^ (k * i + l)) \\<le> x\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       real (p ^ (k * xa + l)) \\<le> x \\<Longrightarrow>\n       xa \\<le> nat \\<lfloor>x\\<rfloor>", "have \"i < 2 ^ i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < 2 ^ i", "by (induction i) auto"], ["proof (state)\nthis:\n  i < 2 ^ i\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       real (p ^ (k * xa + l)) \\<le> x \\<Longrightarrow>\n       xa \\<le> nat \\<lfloor>x\\<rfloor>", "also"], ["proof (state)\nthis:\n  i < 2 ^ i\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       real (p ^ (k * xa + l)) \\<le> x \\<Longrightarrow>\n       xa \\<le> nat \\<lfloor>x\\<rfloor>", "from assms"], ["proof (chain)\npicking this:\n  1 < p\n  0 < k", "have \"i \\<le> k * i + l\""], ["proof (prove)\nusing this:\n  1 < p\n  0 < k\n\ngoal (1 subgoal):\n 1. i \\<le> k * i + l", "by (cases k) auto"], ["proof (state)\nthis:\n  i \\<le> k * i + l\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       real (p ^ (k * xa + l)) \\<le> x \\<Longrightarrow>\n       xa \\<le> nat \\<lfloor>x\\<rfloor>", "hence \"2 ^ i \\<le> (2 ^ (k * i + l) :: nat)\""], ["proof (prove)\nusing this:\n  i \\<le> k * i + l\n\ngoal (1 subgoal):\n 1. 2 ^ i \\<le> 2 ^ (k * i + l)", "using assms"], ["proof (prove)\nusing this:\n  i \\<le> k * i + l\n  1 < p\n  0 < k\n\ngoal (1 subgoal):\n 1. 2 ^ i \\<le> 2 ^ (k * i + l)", "by (intro power_increasing) auto"], ["proof (state)\nthis:\n  2 ^ i \\<le> 2 ^ (k * i + l)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       real (p ^ (k * xa + l)) \\<le> x \\<Longrightarrow>\n       xa \\<le> nat \\<lfloor>x\\<rfloor>", "also"], ["proof (state)\nthis:\n  2 ^ i \\<le> 2 ^ (k * i + l)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       real (p ^ (k * xa + l)) \\<le> x \\<Longrightarrow>\n       xa \\<le> nat \\<lfloor>x\\<rfloor>", "have \"\\<dots> \\<le> p ^ (k * i + l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ (k * i + l) \\<le> p ^ (k * i + l)", "using assms"], ["proof (prove)\nusing this:\n  1 < p\n  0 < k\n\ngoal (1 subgoal):\n 1. 2 ^ (k * i + l) \\<le> p ^ (k * i + l)", "by (intro power_mono) auto"], ["proof (state)\nthis:\n  2 ^ (k * i + l) \\<le> p ^ (k * i + l)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       real (p ^ (k * xa + l)) \\<le> x \\<Longrightarrow>\n       xa \\<le> nat \\<lfloor>x\\<rfloor>", "also"], ["proof (state)\nthis:\n  2 ^ (k * i + l) \\<le> p ^ (k * i + l)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       real (p ^ (k * xa + l)) \\<le> x \\<Longrightarrow>\n       xa \\<le> nat \\<lfloor>x\\<rfloor>", "have \"real \\<dots> \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real (p ^ (k * i + l)) \\<le> x", "using i"], ["proof (prove)\nusing this:\n  real (p ^ (k * i + l)) \\<le> x\n\ngoal (1 subgoal):\n 1. real (p ^ (k * i + l)) \\<le> x", "by simp"], ["proof (state)\nthis:\n  real (p ^ (k * i + l)) \\<le> x\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       real (p ^ (k * xa + l)) \\<le> x \\<Longrightarrow>\n       xa \\<le> nat \\<lfloor>x\\<rfloor>", "finally"], ["proof (chain)\npicking this:\n  (\\<And>x y. x < y \\<Longrightarrow> real x < real y) \\<Longrightarrow>\n  real i < x", "show \"i \\<le> nat \\<lfloor>x\\<rfloor>\""], ["proof (prove)\nusing this:\n  (\\<And>x y. x < y \\<Longrightarrow> real x < real y) \\<Longrightarrow>\n  real i < x\n\ngoal (1 subgoal):\n 1. i \\<le> nat \\<lfloor>x\\<rfloor>", "by linarith"], ["proof (state)\nthis:\n  i \\<le> nat \\<lfloor>x\\<rfloor>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {i. real (p ^ (k * i + l)) \\<le> x}\n  \\<subseteq> {..nat \\<lfloor>x\\<rfloor>}\n\ngoal (1 subgoal):\n 1. finite {..nat \\<lfloor>x\\<rfloor>}", "qed auto"], ["", "lemma finite_sum_legendre_aux: \n  assumes \"prime p\"\n  shows   \"finite {m. m > 0 \\<and> real (p ^ m) \\<le> x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {m. 0 < m \\<and> real (p ^ m) \\<le> x}", "by (rule finite_subset[OF _ exponents_le_finite[where k = 1 and l = 0 and p = p]])\n     (use assms prime_gt_1_nat[of p] in auto)"], ["", "lemma legendre_aux_set_eq:\n  assumes \"prime p\" \"x \\<ge> 1\"\n  shows   \"{m. m > 0 \\<and> real (p ^ m) \\<le> x} = {0<..nat \\<lfloor>log (real p) x\\<rfloor>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {m. 0 < m \\<and> real (p ^ m) \\<le> x} =\n    {0<..nat \\<lfloor>log (real p) x\\<rfloor>}", "using prime_gt_1_nat[OF assms(1)] assms"], ["proof (prove)\nusing this:\n  1 < p\n  prime p\n  1 \\<le> x\n\ngoal (1 subgoal):\n 1. {m. 0 < m \\<and> real (p ^ m) \\<le> x} =\n    {0<..nat \\<lfloor>log (real p) x\\<rfloor>}", "by (auto simp: le_nat_iff le_log_iff le_floor_iff powr_realpow)"], ["", "lemma legendre_aux_altdef1:\n  \"legendre_aux x p = (if prime p \\<and> x \\<ge> 1 then\n                         (\\<Sum>m\\<in>{0<..nat \\<lfloor>log (real p) x\\<rfloor>}. nat \\<lfloor>x / p ^ m\\<rfloor>) else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. legendre_aux x p =\n    (if prime p \\<and> 1 \\<le> x\n     then \\<Sum>m\\<in>{0<..nat \\<lfloor>log (real p) x\\<rfloor>}.\n            nat \\<lfloor>x / real (p ^ m)\\<rfloor>\n     else 0)", "proof (cases \"prime p \\<and> x < 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. prime p \\<and> x < 1 \\<Longrightarrow>\n    legendre_aux x p =\n    (if prime p \\<and> 1 \\<le> x\n     then \\<Sum>m\\<in>{0<..nat \\<lfloor>log (real p) x\\<rfloor>}.\n            nat \\<lfloor>x / real (p ^ m)\\<rfloor>\n     else 0)\n 2. \\<not> (prime p \\<and> x < 1) \\<Longrightarrow>\n    legendre_aux x p =\n    (if prime p \\<and> 1 \\<le> x\n     then \\<Sum>m\\<in>{0<..nat \\<lfloor>log (real p) x\\<rfloor>}.\n            nat \\<lfloor>x / real (p ^ m)\\<rfloor>\n     else 0)", "case False"], ["proof (state)\nthis:\n  \\<not> (prime p \\<and> x < 1)\n\ngoal (2 subgoals):\n 1. prime p \\<and> x < 1 \\<Longrightarrow>\n    legendre_aux x p =\n    (if prime p \\<and> 1 \\<le> x\n     then \\<Sum>m\\<in>{0<..nat \\<lfloor>log (real p) x\\<rfloor>}.\n            nat \\<lfloor>x / real (p ^ m)\\<rfloor>\n     else 0)\n 2. \\<not> (prime p \\<and> x < 1) \\<Longrightarrow>\n    legendre_aux x p =\n    (if prime p \\<and> 1 \\<le> x\n     then \\<Sum>m\\<in>{0<..nat \\<lfloor>log (real p) x\\<rfloor>}.\n            nat \\<lfloor>x / real (p ^ m)\\<rfloor>\n     else 0)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> (prime p \\<and> x < 1)\n\ngoal (1 subgoal):\n 1. legendre_aux x p =\n    (if prime p \\<and> 1 \\<le> x\n     then \\<Sum>m\\<in>{0<..nat \\<lfloor>log (real p) x\\<rfloor>}.\n            nat \\<lfloor>x / real (p ^ m)\\<rfloor>\n     else 0)", "using legendre_aux_set_eq[of p x]"], ["proof (prove)\nusing this:\n  \\<not> (prime p \\<and> x < 1)\n  \\<lbrakk>prime p; 1 \\<le> x\\<rbrakk>\n  \\<Longrightarrow> {m. 0 < m \\<and> real (p ^ m) \\<le> x} =\n                    {0<..nat \\<lfloor>log (real p) x\\<rfloor>}\n\ngoal (1 subgoal):\n 1. legendre_aux x p =\n    (if prime p \\<and> 1 \\<le> x\n     then \\<Sum>m\\<in>{0<..nat \\<lfloor>log (real p) x\\<rfloor>}.\n            nat \\<lfloor>x / real (p ^ m)\\<rfloor>\n     else 0)", "by (auto simp: legendre_aux_def)"], ["proof (state)\nthis:\n  legendre_aux x p =\n  (if prime p \\<and> 1 \\<le> x\n   then \\<Sum>m\\<in>{0<..nat \\<lfloor>log (real p) x\\<rfloor>}.\n          nat \\<lfloor>x / real (p ^ m)\\<rfloor>\n   else 0)\n\ngoal (1 subgoal):\n 1. prime p \\<and> x < 1 \\<Longrightarrow>\n    legendre_aux x p =\n    (if prime p \\<and> 1 \\<le> x\n     then \\<Sum>m\\<in>{0<..nat \\<lfloor>log (real p) x\\<rfloor>}.\n            nat \\<lfloor>x / real (p ^ m)\\<rfloor>\n     else 0)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. prime p \\<and> x < 1 \\<Longrightarrow>\n    legendre_aux x p =\n    (if prime p \\<and> 1 \\<le> x\n     then \\<Sum>m\\<in>{0<..nat \\<lfloor>log (real p) x\\<rfloor>}.\n            nat \\<lfloor>x / real (p ^ m)\\<rfloor>\n     else 0)", "case True"], ["proof (state)\nthis:\n  prime p \\<and> x < 1\n\ngoal (1 subgoal):\n 1. prime p \\<and> x < 1 \\<Longrightarrow>\n    legendre_aux x p =\n    (if prime p \\<and> 1 \\<le> x\n     then \\<Sum>m\\<in>{0<..nat \\<lfloor>log (real p) x\\<rfloor>}.\n            nat \\<lfloor>x / real (p ^ m)\\<rfloor>\n     else 0)", "have [simp]: \"\\<not>(real p ^ m \\<le> x)\" for m"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> real p ^ m \\<le> x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> real p ^ m \\<le> x", "have \"x < real 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < real 1", "using True"], ["proof (prove)\nusing this:\n  prime p \\<and> x < 1\n\ngoal (1 subgoal):\n 1. x < real 1", "by simp"], ["proof (state)\nthis:\n  x < real 1\n\ngoal (1 subgoal):\n 1. \\<not> real p ^ m \\<le> x", "also"], ["proof (state)\nthis:\n  x < real 1\n\ngoal (1 subgoal):\n 1. \\<not> real p ^ m \\<le> x", "have \"real 1 \\<le> real (p ^ m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real 1 \\<le> real (p ^ m)", "unfolding of_nat_le_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<le> p ^ m", "by (intro one_le_power) (use prime_gt_1_nat[of p] True in auto)"], ["proof (state)\nthis:\n  real 1 \\<le> real (p ^ m)\n\ngoal (1 subgoal):\n 1. \\<not> real p ^ m \\<le> x", "finally"], ["proof (chain)\npicking this:\n  x < real (p ^ m)", "show \"\\<not>(real p ^ m \\<le> x)\""], ["proof (prove)\nusing this:\n  x < real (p ^ m)\n\ngoal (1 subgoal):\n 1. \\<not> real p ^ m \\<le> x", "by auto"], ["proof (state)\nthis:\n  \\<not> real p ^ m \\<le> x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> real p ^ ?m \\<le> x\n\ngoal (1 subgoal):\n 1. prime p \\<and> x < 1 \\<Longrightarrow>\n    legendre_aux x p =\n    (if prime p \\<and> 1 \\<le> x\n     then \\<Sum>m\\<in>{0<..nat \\<lfloor>log (real p) x\\<rfloor>}.\n            nat \\<lfloor>x / real (p ^ m)\\<rfloor>\n     else 0)", "have \"{m. m > 0 \\<and> real (p ^ m) \\<le> x} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {m. 0 < m \\<and> real (p ^ m) \\<le> x} = {}", "by simp"], ["proof (state)\nthis:\n  {m. 0 < m \\<and> real (p ^ m) \\<le> x} = {}\n\ngoal (1 subgoal):\n 1. prime p \\<and> x < 1 \\<Longrightarrow>\n    legendre_aux x p =\n    (if prime p \\<and> 1 \\<le> x\n     then \\<Sum>m\\<in>{0<..nat \\<lfloor>log (real p) x\\<rfloor>}.\n            nat \\<lfloor>x / real (p ^ m)\\<rfloor>\n     else 0)", "with True"], ["proof (chain)\npicking this:\n  prime p \\<and> x < 1\n  {m. 0 < m \\<and> real (p ^ m) \\<le> x} = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  prime p \\<and> x < 1\n  {m. 0 < m \\<and> real (p ^ m) \\<le> x} = {}\n\ngoal (1 subgoal):\n 1. legendre_aux x p =\n    (if prime p \\<and> 1 \\<le> x\n     then \\<Sum>m\\<in>{0<..nat \\<lfloor>log (real p) x\\<rfloor>}.\n            nat \\<lfloor>x / real (p ^ m)\\<rfloor>\n     else 0)", "by (simp add: legendre_aux_def)"], ["proof (state)\nthis:\n  legendre_aux x p =\n  (if prime p \\<and> 1 \\<le> x\n   then \\<Sum>m\\<in>{0<..nat \\<lfloor>log (real p) x\\<rfloor>}.\n          nat \\<lfloor>x / real (p ^ m)\\<rfloor>\n   else 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma legendre_aux_altdef2:\n  assumes \"x \\<ge> 1\" \"prime p\" \"real p ^ Suc k > x\"\n  shows   \"legendre_aux x p = (\\<Sum>m\\<in>{0<..k}. nat \\<lfloor>x / p ^ m\\<rfloor>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. legendre_aux x p =\n    (\\<Sum>m\\<in>{0<..k}. nat \\<lfloor>x / real (p ^ m)\\<rfloor>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. legendre_aux x p =\n    (\\<Sum>m\\<in>{0<..k}. nat \\<lfloor>x / real (p ^ m)\\<rfloor>)", "have \"legendre_aux x p = (\\<Sum>m | m > 0 \\<and> real (p ^ m) \\<le> x. nat \\<lfloor>x / p ^ m\\<rfloor>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. legendre_aux x p =\n    (\\<Sum>m | 0 < m \\<and> real (p ^ m) \\<le> x.\n       nat \\<lfloor>x / real (p ^ m)\\<rfloor>)", "using assms"], ["proof (prove)\nusing this:\n  1 \\<le> x\n  prime p\n  x < real p ^ Suc k\n\ngoal (1 subgoal):\n 1. legendre_aux x p =\n    (\\<Sum>m | 0 < m \\<and> real (p ^ m) \\<le> x.\n       nat \\<lfloor>x / real (p ^ m)\\<rfloor>)", "by (simp add: legendre_aux_def)"], ["proof (state)\nthis:\n  legendre_aux x p =\n  (\\<Sum>m | 0 < m \\<and> real (p ^ m) \\<le> x.\n     nat \\<lfloor>x / real (p ^ m)\\<rfloor>)\n\ngoal (1 subgoal):\n 1. legendre_aux x p =\n    (\\<Sum>m\\<in>{0<..k}. nat \\<lfloor>x / real (p ^ m)\\<rfloor>)", "also"], ["proof (state)\nthis:\n  legendre_aux x p =\n  (\\<Sum>m | 0 < m \\<and> real (p ^ m) \\<le> x.\n     nat \\<lfloor>x / real (p ^ m)\\<rfloor>)\n\ngoal (1 subgoal):\n 1. legendre_aux x p =\n    (\\<Sum>m\\<in>{0<..k}. nat \\<lfloor>x / real (p ^ m)\\<rfloor>)", "have \"\\<dots> = (\\<Sum>m\\<in>{0<..k}. nat \\<lfloor>x / p ^ m\\<rfloor>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>m | 0 < m \\<and> real (p ^ m) \\<le> x.\n       nat \\<lfloor>x / real (p ^ m)\\<rfloor>) =\n    (\\<Sum>m\\<in>{0<..k}. nat \\<lfloor>x / real (p ^ m)\\<rfloor>)", "proof (intro sum.mono_neutral_left)"], ["proof (state)\ngoal (3 subgoals):\n 1. finite {0<..k}\n 2. {m. 0 < m \\<and> real (p ^ m) \\<le> x} \\<subseteq> {0<..k}\n 3. \\<forall>i\\<in>{0<..k} - {m. 0 < m \\<and> real (p ^ m) \\<le> x}.\n       nat \\<lfloor>x / real (p ^ i)\\<rfloor> = 0", "show \"{m. 0 < m \\<and> real (p ^ m) \\<le> x} \\<subseteq> {0<..k}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {m. 0 < m \\<and> real (p ^ m) \\<le> x} \\<subseteq> {0<..k}", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>0 < xa; real (p ^ xa) \\<le> x\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> {0<..k}", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>0 < xa; real (p ^ xa) \\<le> x\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> {0<..k}", "assume \"m > 0\" \"real (p ^ m) \\<le> x\""], ["proof (state)\nthis:\n  0 < m\n  real (p ^ m) \\<le> x\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>0 < xa; real (p ^ xa) \\<le> x\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> {0<..k}", "hence \"real p ^ m \\<le> x\""], ["proof (prove)\nusing this:\n  0 < m\n  real (p ^ m) \\<le> x\n\ngoal (1 subgoal):\n 1. real p ^ m \\<le> x", "by simp"], ["proof (state)\nthis:\n  real p ^ m \\<le> x\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>0 < xa; real (p ^ xa) \\<le> x\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> {0<..k}", "also"], ["proof (state)\nthis:\n  real p ^ m \\<le> x\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>0 < xa; real (p ^ xa) \\<le> x\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> {0<..k}", "note \\<open>x < real p ^ Suc k\\<close>"], ["proof (state)\nthis:\n  x < real p ^ Suc k\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>0 < xa; real (p ^ xa) \\<le> x\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> {0<..k}", "finally"], ["proof (chain)\npicking this:\n  real p ^ m < real p ^ Suc k", "show \"m \\<in> {0<..k}\""], ["proof (prove)\nusing this:\n  real p ^ m < real p ^ Suc k\n\ngoal (1 subgoal):\n 1. m \\<in> {0<..k}", "using \\<open>m > 0\\<close>"], ["proof (prove)\nusing this:\n  real p ^ m < real p ^ Suc k\n  0 < m\n\ngoal (1 subgoal):\n 1. m \\<in> {0<..k}", "using prime_gt_1_nat[OF \\<open>prime p\\<close>]"], ["proof (prove)\nusing this:\n  real p ^ m < real p ^ Suc k\n  0 < m\n  1 < p\n\ngoal (1 subgoal):\n 1. m \\<in> {0<..k}", "by (subst (asm) power_strict_increasing_iff) auto"], ["proof (state)\nthis:\n  m \\<in> {0<..k}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {m. 0 < m \\<and> real (p ^ m) \\<le> x} \\<subseteq> {0<..k}\n\ngoal (2 subgoals):\n 1. finite {0<..k}\n 2. \\<forall>i\\<in>{0<..k} - {m. 0 < m \\<and> real (p ^ m) \\<le> x}.\n       nat \\<lfloor>x / real (p ^ i)\\<rfloor> = 0", "qed (use prime_gt_0_nat[of p] assms in \\<open>auto simp: field_simps\\<close>)"], ["proof (state)\nthis:\n  (\\<Sum>m | 0 < m \\<and> real (p ^ m) \\<le> x.\n     nat \\<lfloor>x / real (p ^ m)\\<rfloor>) =\n  (\\<Sum>m\\<in>{0<..k}. nat \\<lfloor>x / real (p ^ m)\\<rfloor>)\n\ngoal (1 subgoal):\n 1. legendre_aux x p =\n    (\\<Sum>m\\<in>{0<..k}. nat \\<lfloor>x / real (p ^ m)\\<rfloor>)", "finally"], ["proof (chain)\npicking this:\n  legendre_aux x p =\n  (\\<Sum>m\\<in>{0<..k}. nat \\<lfloor>x / real (p ^ m)\\<rfloor>)", "show ?thesis"], ["proof (prove)\nusing this:\n  legendre_aux x p =\n  (\\<Sum>m\\<in>{0<..k}. nat \\<lfloor>x / real (p ^ m)\\<rfloor>)\n\ngoal (1 subgoal):\n 1. legendre_aux x p =\n    (\\<Sum>m\\<in>{0<..k}. nat \\<lfloor>x / real (p ^ m)\\<rfloor>)", "."], ["proof (state)\nthis:\n  legendre_aux x p =\n  (\\<Sum>m\\<in>{0<..k}. nat \\<lfloor>x / real (p ^ m)\\<rfloor>)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* 3.14 *)"], ["", "theorem legendre_identity:\n  \"sum_upto ln x = prime_sum_upto (\\<lambda>p. legendre_aux x p * ln p) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>x. ln (real x)) x =\n    prime_sum_upto (\\<lambda>p. real (legendre_aux x p) * ln (real p)) x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>x. ln (real x)) x =\n    prime_sum_upto (\\<lambda>p. real (legendre_aux x p) * ln (real p)) x", "define S where \"S = (SIGMA p:{p. prime p \\<and> real p \\<le> x}. {i. i > 0 \\<and> real (p ^ i) \\<le> x})\""], ["proof (state)\nthis:\n  S =\n  (SIGMA p:{p. prime p \\<and> real p \\<le> x}.\n      {i. 0 < i \\<and> real (p ^ i) \\<le> x})\n\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>x. ln (real x)) x =\n    prime_sum_upto (\\<lambda>p. real (legendre_aux x p) * ln (real p)) x", "have prime_power_leD: \"real p \\<le> x\" if \"real p ^ i \\<le> x\" \"prime p\" \"i > 0\" for p i"], ["proof (prove)\ngoal (1 subgoal):\n 1. real p \\<le> x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. real p \\<le> x", "have \"real p ^ 1 \\<le> real p ^ i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real p ^ 1 \\<le> real p ^ i", "using that prime_gt_1_nat[of p]"], ["proof (prove)\nusing this:\n  real p ^ i \\<le> x\n  prime p\n  0 < i\n  prime p \\<Longrightarrow> 1 < p\n\ngoal (1 subgoal):\n 1. real p ^ 1 \\<le> real p ^ i", "by (intro power_increasing) auto"], ["proof (state)\nthis:\n  real p ^ 1 \\<le> real p ^ i\n\ngoal (1 subgoal):\n 1. real p \\<le> x", "also"], ["proof (state)\nthis:\n  real p ^ 1 \\<le> real p ^ i\n\ngoal (1 subgoal):\n 1. real p \\<le> x", "have \"\\<dots> \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real p ^ i \\<le> x", "by fact"], ["proof (state)\nthis:\n  real p ^ i \\<le> x\n\ngoal (1 subgoal):\n 1. real p \\<le> x", "finally"], ["proof (chain)\npicking this:\n  real p ^ 1 \\<le> x", "show \"real p \\<le> x\""], ["proof (prove)\nusing this:\n  real p ^ 1 \\<le> x\n\ngoal (1 subgoal):\n 1. real p \\<le> x", "by simp"], ["proof (state)\nthis:\n  real p \\<le> x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>real ?p ^ ?i \\<le> x; prime ?p; 0 < ?i\\<rbrakk>\n  \\<Longrightarrow> real ?p \\<le> x\n\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>x. ln (real x)) x =\n    prime_sum_upto (\\<lambda>p. real (legendre_aux x p) * ln (real p)) x", "have \"sum_upto ln x = sum_upto (\\<lambda>n. mangoldt n * real (nat \\<lfloor>x / real n\\<rfloor>)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>x. ln (real x)) x =\n    sum_upto\n     (\\<lambda>n. mangoldt n * real (nat \\<lfloor>x / real n\\<rfloor>)) x", "by (rule sum_upto_ln_conv_sum_upto_mangoldt)"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>x. ln (real x)) x =\n  sum_upto\n   (\\<lambda>n. mangoldt n * real (nat \\<lfloor>x / real n\\<rfloor>)) x\n\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>x. ln (real x)) x =\n    prime_sum_upto (\\<lambda>p. real (legendre_aux x p) * ln (real p)) x", "also"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>x. ln (real x)) x =\n  sum_upto\n   (\\<lambda>n. mangoldt n * real (nat \\<lfloor>x / real n\\<rfloor>)) x\n\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>x. ln (real x)) x =\n    prime_sum_upto (\\<lambda>p. real (legendre_aux x p) * ln (real p)) x", "have \"\\<dots> = (\\<Sum>(p, i) | prime p \\<and> 0 < i \\<and> real (p ^ i) \\<le> x.\n                     ln p * real (nat \\<lfloor>x / real (p ^ i)\\<rfloor>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto\n     (\\<lambda>n. mangoldt n * real (nat \\<lfloor>x / real n\\<rfloor>)) x =\n    (\\<Sum>(p, i)\n           \\<in>{(p, i). prime p \\<and> 0 < i \\<and> real (p ^ i) \\<le> x}.\n       ln (real p) * real (nat \\<lfloor>x / real (p ^ i)\\<rfloor>))", "by (subst sum_upto_primepows[where g = \"\\<lambda>p i. ln p * real (nat \\<lfloor>x / real (p ^ i)\\<rfloor>)\"])\n       (auto simp: mangoldt_non_primepow)"], ["proof (state)\nthis:\n  sum_upto\n   (\\<lambda>n. mangoldt n * real (nat \\<lfloor>x / real n\\<rfloor>)) x =\n  (\\<Sum>(p, i)\n         \\<in>{(p, i). prime p \\<and> 0 < i \\<and> real (p ^ i) \\<le> x}.\n     ln (real p) * real (nat \\<lfloor>x / real (p ^ i)\\<rfloor>))\n\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>x. ln (real x)) x =\n    prime_sum_upto (\\<lambda>p. real (legendre_aux x p) * ln (real p)) x", "also"], ["proof (state)\nthis:\n  sum_upto\n   (\\<lambda>n. mangoldt n * real (nat \\<lfloor>x / real n\\<rfloor>)) x =\n  (\\<Sum>(p, i)\n         \\<in>{(p, i). prime p \\<and> 0 < i \\<and> real (p ^ i) \\<le> x}.\n     ln (real p) * real (nat \\<lfloor>x / real (p ^ i)\\<rfloor>))\n\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>x. ln (real x)) x =\n    prime_sum_upto (\\<lambda>p. real (legendre_aux x p) * ln (real p)) x", "have \"\\<dots> = (\\<Sum>(p,i)\\<in>S. ln p * real (nat \\<lfloor>x / p ^ i\\<rfloor>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(p, i)\n           \\<in>{(p, i). prime p \\<and> 0 < i \\<and> real (p ^ i) \\<le> x}.\n       ln (real p) * real (nat \\<lfloor>x / real (p ^ i)\\<rfloor>)) =\n    (\\<Sum>(p, i)\\<in>S.\n       ln (real p) * real (nat \\<lfloor>x / real (p ^ i)\\<rfloor>))", "using prime_power_leD"], ["proof (prove)\nusing this:\n  \\<lbrakk>real ?p ^ ?i \\<le> x; prime ?p; 0 < ?i\\<rbrakk>\n  \\<Longrightarrow> real ?p \\<le> x\n\ngoal (1 subgoal):\n 1. (\\<Sum>(p, i)\n           \\<in>{(p, i). prime p \\<and> 0 < i \\<and> real (p ^ i) \\<le> x}.\n       ln (real p) * real (nat \\<lfloor>x / real (p ^ i)\\<rfloor>)) =\n    (\\<Sum>(p, i)\\<in>S.\n       ln (real p) * real (nat \\<lfloor>x / real (p ^ i)\\<rfloor>))", "by (intro sum.cong refl) (auto simp: S_def)"], ["proof (state)\nthis:\n  (\\<Sum>(p, i)\n         \\<in>{(p, i). prime p \\<and> 0 < i \\<and> real (p ^ i) \\<le> x}.\n     ln (real p) * real (nat \\<lfloor>x / real (p ^ i)\\<rfloor>)) =\n  (\\<Sum>(p, i)\\<in>S.\n     ln (real p) * real (nat \\<lfloor>x / real (p ^ i)\\<rfloor>))\n\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>x. ln (real x)) x =\n    prime_sum_upto (\\<lambda>p. real (legendre_aux x p) * ln (real p)) x", "also"], ["proof (state)\nthis:\n  (\\<Sum>(p, i)\n         \\<in>{(p, i). prime p \\<and> 0 < i \\<and> real (p ^ i) \\<le> x}.\n     ln (real p) * real (nat \\<lfloor>x / real (p ^ i)\\<rfloor>)) =\n  (\\<Sum>(p, i)\\<in>S.\n     ln (real p) * real (nat \\<lfloor>x / real (p ^ i)\\<rfloor>))\n\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>x. ln (real x)) x =\n    prime_sum_upto (\\<lambda>p. real (legendre_aux x p) * ln (real p)) x", "have \"\\<dots> = (\\<Sum>p | prime p \\<and> real p \\<le> x. \\<Sum>i | i > 0 \\<and> real (p ^ i) \\<le> x.\n                     ln p * real (nat \\<lfloor>x / p ^ i\\<rfloor>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(p, i)\\<in>S.\n       ln (real p) * real (nat \\<lfloor>x / real (p ^ i)\\<rfloor>)) =\n    (\\<Sum>p | prime p \\<and> real p \\<le> x.\n       \\<Sum>i | 0 < i \\<and> real (p ^ i) \\<le> x.\n         ln (real p) * real (nat \\<lfloor>x / real p ^ i\\<rfloor>))", "proof (unfold S_def, subst sum.Sigma)"], ["proof (state)\ngoal (3 subgoals):\n 1. finite {p. prime p \\<and> real p \\<le> x}\n 2. \\<forall>xa\\<in>{p. prime p \\<and> real p \\<le> x}.\n       finite {i. 0 < i \\<and> real (xa ^ i) \\<le> x}\n 3. (\\<Sum>(p, i)\n           \\<in>(SIGMA p:{p. prime p \\<and> real p \\<le> x}.\n                    {i. 0 < i \\<and> real (p ^ i) \\<le> x}).\n       ln (real p) * real (nat \\<lfloor>x / real (p ^ i)\\<rfloor>)) =\n    (\\<Sum>(p, i)\n           \\<in>(SIGMA xa:{p. prime p \\<and> real p \\<le> x}.\n                    {i. 0 < i \\<and> real (xa ^ i) \\<le> x}).\n       ln (real p) * real (nat \\<lfloor>x / real p ^ i\\<rfloor>))", "have \"{p. prime p \\<and> real p \\<le> x} \\<subseteq> {..nat \\<lfloor>x\\<rfloor>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. prime p \\<and> real p \\<le> x}\n    \\<subseteq> {..nat \\<lfloor>x\\<rfloor>}", "by (auto simp: le_nat_iff le_floor_iff)"], ["proof (state)\nthis:\n  {p. prime p \\<and> real p \\<le> x} \\<subseteq> {..nat \\<lfloor>x\\<rfloor>}\n\ngoal (3 subgoals):\n 1. finite {p. prime p \\<and> real p \\<le> x}\n 2. \\<forall>xa\\<in>{p. prime p \\<and> real p \\<le> x}.\n       finite {i. 0 < i \\<and> real (xa ^ i) \\<le> x}\n 3. (\\<Sum>(p, i)\n           \\<in>(SIGMA p:{p. prime p \\<and> real p \\<le> x}.\n                    {i. 0 < i \\<and> real (p ^ i) \\<le> x}).\n       ln (real p) * real (nat \\<lfloor>x / real (p ^ i)\\<rfloor>)) =\n    (\\<Sum>(p, i)\n           \\<in>(SIGMA xa:{p. prime p \\<and> real p \\<le> x}.\n                    {i. 0 < i \\<and> real (xa ^ i) \\<le> x}).\n       ln (real p) * real (nat \\<lfloor>x / real p ^ i\\<rfloor>))", "thus \"finite {p. prime p \\<and> real p \\<le> x}\""], ["proof (prove)\nusing this:\n  {p. prime p \\<and> real p \\<le> x} \\<subseteq> {..nat \\<lfloor>x\\<rfloor>}\n\ngoal (1 subgoal):\n 1. finite {p. prime p \\<and> real p \\<le> x}", "by (rule finite_subset) auto"], ["proof (state)\nthis:\n  finite {p. prime p \\<and> real p \\<le> x}\n\ngoal (2 subgoals):\n 1. \\<forall>xa\\<in>{p. prime p \\<and> real p \\<le> x}.\n       finite {i. 0 < i \\<and> real (xa ^ i) \\<le> x}\n 2. (\\<Sum>(p, i)\n           \\<in>(SIGMA p:{p. prime p \\<and> real p \\<le> x}.\n                    {i. 0 < i \\<and> real (p ^ i) \\<le> x}).\n       ln (real p) * real (nat \\<lfloor>x / real (p ^ i)\\<rfloor>)) =\n    (\\<Sum>(p, i)\n           \\<in>(SIGMA xa:{p. prime p \\<and> real p \\<le> x}.\n                    {i. 0 < i \\<and> real (xa ^ i) \\<le> x}).\n       ln (real p) * real (nat \\<lfloor>x / real p ^ i\\<rfloor>))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>xa\\<in>{p. prime p \\<and> real p \\<le> x}.\n       finite {i. 0 < i \\<and> real (xa ^ i) \\<le> x}\n 2. (\\<Sum>(p, i)\n           \\<in>(SIGMA p:{p. prime p \\<and> real p \\<le> x}.\n                    {i. 0 < i \\<and> real (p ^ i) \\<le> x}).\n       ln (real p) * real (nat \\<lfloor>x / real (p ^ i)\\<rfloor>)) =\n    (\\<Sum>(p, i)\n           \\<in>(SIGMA xa:{p. prime p \\<and> real p \\<le> x}.\n                    {i. 0 < i \\<and> real (xa ^ i) \\<le> x}).\n       ln (real p) * real (nat \\<lfloor>x / real p ^ i\\<rfloor>))", "show \"\\<forall>p\\<in>{p. prime p \\<and> real p \\<le> x}. finite {i. 0 < i \\<and> real (p ^ i) \\<le> x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>{p. prime p \\<and> real p \\<le> x}.\n       finite {i. 0 < i \\<and> real (p ^ i) \\<le> x}", "by (intro ballI finite_sum_legendre_aux) auto"], ["proof (state)\nthis:\n  \\<forall>p\\<in>{p. prime p \\<and> real p \\<le> x}.\n     finite {i. 0 < i \\<and> real (p ^ i) \\<le> x}\n\ngoal (1 subgoal):\n 1. (\\<Sum>(p, i)\n           \\<in>(SIGMA p:{p. prime p \\<and> real p \\<le> x}.\n                    {i. 0 < i \\<and> real (p ^ i) \\<le> x}).\n       ln (real p) * real (nat \\<lfloor>x / real (p ^ i)\\<rfloor>)) =\n    (\\<Sum>(p, i)\n           \\<in>(SIGMA xa:{p. prime p \\<and> real p \\<le> x}.\n                    {i. 0 < i \\<and> real (xa ^ i) \\<le> x}).\n       ln (real p) * real (nat \\<lfloor>x / real p ^ i\\<rfloor>))", "qed auto"], ["proof (state)\nthis:\n  (\\<Sum>(p, i)\\<in>S.\n     ln (real p) * real (nat \\<lfloor>x / real (p ^ i)\\<rfloor>)) =\n  (\\<Sum>p | prime p \\<and> real p \\<le> x.\n     \\<Sum>i | 0 < i \\<and> real (p ^ i) \\<le> x.\n       ln (real p) * real (nat \\<lfloor>x / real p ^ i\\<rfloor>))\n\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>x. ln (real x)) x =\n    prime_sum_upto (\\<lambda>p. real (legendre_aux x p) * ln (real p)) x", "also"], ["proof (state)\nthis:\n  (\\<Sum>(p, i)\\<in>S.\n     ln (real p) * real (nat \\<lfloor>x / real (p ^ i)\\<rfloor>)) =\n  (\\<Sum>p | prime p \\<and> real p \\<le> x.\n     \\<Sum>i | 0 < i \\<and> real (p ^ i) \\<le> x.\n       ln (real p) * real (nat \\<lfloor>x / real p ^ i\\<rfloor>))\n\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>x. ln (real x)) x =\n    prime_sum_upto (\\<lambda>p. real (legendre_aux x p) * ln (real p)) x", "have \"\\<dots> = (\\<Sum>p | prime p \\<and> real p \\<le> x. ln p *\n                    real (\\<Sum>i | i > 0 \\<and> real (p ^ i) \\<le> x. (nat \\<lfloor>x / p ^ i\\<rfloor>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>p | prime p \\<and> real p \\<le> x.\n       \\<Sum>i | 0 < i \\<and> real (p ^ i) \\<le> x.\n         ln (real p) * real (nat \\<lfloor>x / real p ^ i\\<rfloor>)) =\n    (\\<Sum>p | prime p \\<and> real p \\<le> x.\n       ln (real p) *\n       real\n        (\\<Sum>i | 0 < i \\<and> real (p ^ i) \\<le> x.\n           nat \\<lfloor>x / real p ^ i\\<rfloor>))", "by (simp add: sum_distrib_left)"], ["proof (state)\nthis:\n  (\\<Sum>p | prime p \\<and> real p \\<le> x.\n     \\<Sum>i | 0 < i \\<and> real (p ^ i) \\<le> x.\n       ln (real p) * real (nat \\<lfloor>x / real p ^ i\\<rfloor>)) =\n  (\\<Sum>p | prime p \\<and> real p \\<le> x.\n     ln (real p) *\n     real\n      (\\<Sum>i | 0 < i \\<and> real (p ^ i) \\<le> x.\n         nat \\<lfloor>x / real p ^ i\\<rfloor>))\n\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>x. ln (real x)) x =\n    prime_sum_upto (\\<lambda>p. real (legendre_aux x p) * ln (real p)) x", "also"], ["proof (state)\nthis:\n  (\\<Sum>p | prime p \\<and> real p \\<le> x.\n     \\<Sum>i | 0 < i \\<and> real (p ^ i) \\<le> x.\n       ln (real p) * real (nat \\<lfloor>x / real p ^ i\\<rfloor>)) =\n  (\\<Sum>p | prime p \\<and> real p \\<le> x.\n     ln (real p) *\n     real\n      (\\<Sum>i | 0 < i \\<and> real (p ^ i) \\<le> x.\n         nat \\<lfloor>x / real p ^ i\\<rfloor>))\n\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>x. ln (real x)) x =\n    prime_sum_upto (\\<lambda>p. real (legendre_aux x p) * ln (real p)) x", "have \"\\<dots> = (\\<Sum>p | prime p \\<and> real p \\<le> x. ln p * real (legendre_aux x p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>p | prime p \\<and> real p \\<le> x.\n       ln (real p) *\n       real\n        (\\<Sum>i | 0 < i \\<and> real (p ^ i) \\<le> x.\n           nat \\<lfloor>x / real p ^ i\\<rfloor>)) =\n    (\\<Sum>p | prime p \\<and> real p \\<le> x.\n       ln (real p) * real (legendre_aux x p))", "by (intro sum.cong refl) (auto simp: legendre_aux_def)"], ["proof (state)\nthis:\n  (\\<Sum>p | prime p \\<and> real p \\<le> x.\n     ln (real p) *\n     real\n      (\\<Sum>i | 0 < i \\<and> real (p ^ i) \\<le> x.\n         nat \\<lfloor>x / real p ^ i\\<rfloor>)) =\n  (\\<Sum>p | prime p \\<and> real p \\<le> x.\n     ln (real p) * real (legendre_aux x p))\n\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>x. ln (real x)) x =\n    prime_sum_upto (\\<lambda>p. real (legendre_aux x p) * ln (real p)) x", "also"], ["proof (state)\nthis:\n  (\\<Sum>p | prime p \\<and> real p \\<le> x.\n     ln (real p) *\n     real\n      (\\<Sum>i | 0 < i \\<and> real (p ^ i) \\<le> x.\n         nat \\<lfloor>x / real p ^ i\\<rfloor>)) =\n  (\\<Sum>p | prime p \\<and> real p \\<le> x.\n     ln (real p) * real (legendre_aux x p))\n\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>x. ln (real x)) x =\n    prime_sum_upto (\\<lambda>p. real (legendre_aux x p) * ln (real p)) x", "have \"\\<dots> = prime_sum_upto (\\<lambda>p. ln p * real (legendre_aux x p)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>p | prime p \\<and> real p \\<le> x.\n       ln (real p) * real (legendre_aux x p)) =\n    prime_sum_upto (\\<lambda>p. ln (real p) * real (legendre_aux x p)) x", "by (simp add: prime_sum_upto_def)"], ["proof (state)\nthis:\n  (\\<Sum>p | prime p \\<and> real p \\<le> x.\n     ln (real p) * real (legendre_aux x p)) =\n  prime_sum_upto (\\<lambda>p. ln (real p) * real (legendre_aux x p)) x\n\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>x. ln (real x)) x =\n    prime_sum_upto (\\<lambda>p. real (legendre_aux x p) * ln (real p)) x", "finally"], ["proof (chain)\npicking this:\n  sum_upto (\\<lambda>x. ln (real x)) x =\n  prime_sum_upto (\\<lambda>p. ln (real p) * real (legendre_aux x p)) x", "show ?thesis"], ["proof (prove)\nusing this:\n  sum_upto (\\<lambda>x. ln (real x)) x =\n  prime_sum_upto (\\<lambda>p. ln (real p) * real (legendre_aux x p)) x\n\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>x. ln (real x)) x =\n    prime_sum_upto (\\<lambda>p. real (legendre_aux x p) * ln (real p)) x", "by (simp add: mult_ac)"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>x. ln (real x)) x =\n  prime_sum_upto (\\<lambda>p. real (legendre_aux x p) * ln (real p)) x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma legendre_identity':\n  \"fact (nat \\<lfloor>x\\<rfloor>) = (\\<Prod>p | prime p \\<and> real p \\<le> x. p ^ legendre_aux x p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fact (nat \\<lfloor>x\\<rfloor>) =\n    (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}. p ^ legendre_aux x p)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fact (nat \\<lfloor>x\\<rfloor>) =\n    (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}. p ^ legendre_aux x p)", "have fin: \"finite {p. prime p \\<and> real p \\<le> x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {p. prime p \\<and> real p \\<le> x}", "by (rule finite_subset[of _ \"{..nat \\<lfloor>x\\<rfloor>}\"]) (auto simp: le_nat_iff le_floor_iff)"], ["proof (state)\nthis:\n  finite {p. prime p \\<and> real p \\<le> x}\n\ngoal (1 subgoal):\n 1. fact (nat \\<lfloor>x\\<rfloor>) =\n    (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}. p ^ legendre_aux x p)", "have \"real (fact (nat \\<lfloor>x\\<rfloor>)) = exp (sum_upto ln x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real (fact (nat \\<lfloor>x\\<rfloor>)) =\n    exp (sum_upto (\\<lambda>x. ln (real x)) x)", "by (subst sum_upto_ln_conv_ln_fact) auto"], ["proof (state)\nthis:\n  real (fact (nat \\<lfloor>x\\<rfloor>)) =\n  exp (sum_upto (\\<lambda>x. ln (real x)) x)\n\ngoal (1 subgoal):\n 1. fact (nat \\<lfloor>x\\<rfloor>) =\n    (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}. p ^ legendre_aux x p)", "also"], ["proof (state)\nthis:\n  real (fact (nat \\<lfloor>x\\<rfloor>)) =\n  exp (sum_upto (\\<lambda>x. ln (real x)) x)\n\ngoal (1 subgoal):\n 1. fact (nat \\<lfloor>x\\<rfloor>) =\n    (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}. p ^ legendre_aux x p)", "have \"sum_upto ln x = prime_sum_upto (\\<lambda>p. legendre_aux x p * ln p) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>x. ln (real x)) x =\n    prime_sum_upto (\\<lambda>p. real (legendre_aux x p) * ln (real p)) x", "by (rule legendre_identity)"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>x. ln (real x)) x =\n  prime_sum_upto (\\<lambda>p. real (legendre_aux x p) * ln (real p)) x\n\ngoal (1 subgoal):\n 1. fact (nat \\<lfloor>x\\<rfloor>) =\n    (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}. p ^ legendre_aux x p)", "also"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>x. ln (real x)) x =\n  prime_sum_upto (\\<lambda>p. real (legendre_aux x p) * ln (real p)) x\n\ngoal (1 subgoal):\n 1. fact (nat \\<lfloor>x\\<rfloor>) =\n    (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}. p ^ legendre_aux x p)", "have \"exp \\<dots> = (\\<Prod>p | prime p \\<and> real p \\<le> x. exp (ln (real p) * legendre_aux x p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exp (prime_sum_upto (\\<lambda>p. real (legendre_aux x p) * ln (real p))\n          x) =\n    (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}.\n       exp (ln (real p) * real (legendre_aux x p)))", "unfolding prime_sum_upto_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. exp (\\<Sum>p | prime p \\<and> real p \\<le> x.\n           real (legendre_aux x p) * ln (real p)) =\n    (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}.\n       exp (ln (real p) * real (legendre_aux x p)))", "using fin"], ["proof (prove)\nusing this:\n  finite {p. prime p \\<and> real p \\<le> x}\n\ngoal (1 subgoal):\n 1. exp (\\<Sum>p | prime p \\<and> real p \\<le> x.\n           real (legendre_aux x p) * ln (real p)) =\n    (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}.\n       exp (ln (real p) * real (legendre_aux x p)))", "by (subst exp_sum) (auto simp: mult_ac)"], ["proof (state)\nthis:\n  exp (prime_sum_upto (\\<lambda>p. real (legendre_aux x p) * ln (real p))\n        x) =\n  (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}.\n     exp (ln (real p) * real (legendre_aux x p)))\n\ngoal (1 subgoal):\n 1. fact (nat \\<lfloor>x\\<rfloor>) =\n    (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}. p ^ legendre_aux x p)", "also"], ["proof (state)\nthis:\n  exp (prime_sum_upto (\\<lambda>p. real (legendre_aux x p) * ln (real p))\n        x) =\n  (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}.\n     exp (ln (real p) * real (legendre_aux x p)))\n\ngoal (1 subgoal):\n 1. fact (nat \\<lfloor>x\\<rfloor>) =\n    (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}. p ^ legendre_aux x p)", "have \"\\<dots> = (\\<Prod>p | prime p \\<and> real p \\<le> x. real (p ^ legendre_aux x p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}.\n       exp (ln (real p) * real (legendre_aux x p))) =\n    (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}.\n       real (p ^ legendre_aux x p))", "proof (intro prod.cong refl)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> {p. prime p \\<and> real p \\<le> x} \\<Longrightarrow>\n       exp (ln (real xa) * real (legendre_aux x xa)) =\n       real (xa ^ legendre_aux x xa)", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> {p. prime p \\<and> real p \\<le> x} \\<Longrightarrow>\n       exp (ln (real xa) * real (legendre_aux x xa)) =\n       real (xa ^ legendre_aux x xa)", "assume \"p \\<in> {p. prime p \\<and> real p \\<le> x}\""], ["proof (state)\nthis:\n  p \\<in> {p. prime p \\<and> real p \\<le> x}\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> {p. prime p \\<and> real p \\<le> x} \\<Longrightarrow>\n       exp (ln (real xa) * real (legendre_aux x xa)) =\n       real (xa ^ legendre_aux x xa)", "hence \"p > 0\""], ["proof (prove)\nusing this:\n  p \\<in> {p. prime p \\<and> real p \\<le> x}\n\ngoal (1 subgoal):\n 1. 0 < p", "using prime_gt_0_nat[of p]"], ["proof (prove)\nusing this:\n  p \\<in> {p. prime p \\<and> real p \\<le> x}\n  prime p \\<Longrightarrow> 0 < p\n\ngoal (1 subgoal):\n 1. 0 < p", "by auto"], ["proof (state)\nthis:\n  0 < p\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> {p. prime p \\<and> real p \\<le> x} \\<Longrightarrow>\n       exp (ln (real xa) * real (legendre_aux x xa)) =\n       real (xa ^ legendre_aux x xa)", "from \\<open>p > 0\\<close>"], ["proof (chain)\npicking this:\n  0 < p", "have \"exp (ln (real p) * legendre_aux x p) = real p powr real (legendre_aux x p)\""], ["proof (prove)\nusing this:\n  0 < p\n\ngoal (1 subgoal):\n 1. exp (ln (real p) * real (legendre_aux x p)) =\n    real p powr real (legendre_aux x p)", "by (simp add: powr_def)"], ["proof (state)\nthis:\n  exp (ln (real p) * real (legendre_aux x p)) =\n  real p powr real (legendre_aux x p)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> {p. prime p \\<and> real p \\<le> x} \\<Longrightarrow>\n       exp (ln (real xa) * real (legendre_aux x xa)) =\n       real (xa ^ legendre_aux x xa)", "also"], ["proof (state)\nthis:\n  exp (ln (real p) * real (legendre_aux x p)) =\n  real p powr real (legendre_aux x p)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> {p. prime p \\<and> real p \\<le> x} \\<Longrightarrow>\n       exp (ln (real xa) * real (legendre_aux x xa)) =\n       real (xa ^ legendre_aux x xa)", "from \\<open>p > 0\\<close>"], ["proof (chain)\npicking this:\n  0 < p", "have \"\\<dots> = real (p ^ legendre_aux x p)\""], ["proof (prove)\nusing this:\n  0 < p\n\ngoal (1 subgoal):\n 1. real p powr real (legendre_aux x p) = real (p ^ legendre_aux x p)", "by (subst powr_realpow) auto"], ["proof (state)\nthis:\n  real p powr real (legendre_aux x p) = real (p ^ legendre_aux x p)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> {p. prime p \\<and> real p \\<le> x} \\<Longrightarrow>\n       exp (ln (real xa) * real (legendre_aux x xa)) =\n       real (xa ^ legendre_aux x xa)", "finally"], ["proof (chain)\npicking this:\n  exp (ln (real p) * real (legendre_aux x p)) = real (p ^ legendre_aux x p)", "show \"exp (ln (real p) * legendre_aux x p) = \\<dots>\""], ["proof (prove)\nusing this:\n  exp (ln (real p) * real (legendre_aux x p)) = real (p ^ legendre_aux x p)\n\ngoal (1 subgoal):\n 1. exp (ln (real p) * real (legendre_aux x p)) =\n    real (p ^ legendre_aux x p)", "."], ["proof (state)\nthis:\n  exp (ln (real p) * real (legendre_aux x p)) = real (p ^ legendre_aux x p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}.\n     exp (ln (real p) * real (legendre_aux x p))) =\n  (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}.\n     real (p ^ legendre_aux x p))\n\ngoal (1 subgoal):\n 1. fact (nat \\<lfloor>x\\<rfloor>) =\n    (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}. p ^ legendre_aux x p)", "also"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}.\n     exp (ln (real p) * real (legendre_aux x p))) =\n  (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}.\n     real (p ^ legendre_aux x p))\n\ngoal (1 subgoal):\n 1. fact (nat \\<lfloor>x\\<rfloor>) =\n    (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}. p ^ legendre_aux x p)", "have \"\\<dots> = real (\\<Prod>p | prime p \\<and> real p \\<le> x. p ^ legendre_aux x p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}.\n       real (p ^ legendre_aux x p)) =\n    real\n     (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}. p ^ legendre_aux x p)", "by simp"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}.\n     real (p ^ legendre_aux x p)) =\n  real\n   (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}. p ^ legendre_aux x p)\n\ngoal (1 subgoal):\n 1. fact (nat \\<lfloor>x\\<rfloor>) =\n    (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}. p ^ legendre_aux x p)", "finally"], ["proof (chain)\npicking this:\n  real (fact (nat \\<lfloor>x\\<rfloor>)) =\n  real\n   (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}. p ^ legendre_aux x p)", "show ?thesis"], ["proof (prove)\nusing this:\n  real (fact (nat \\<lfloor>x\\<rfloor>)) =\n  real\n   (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}. p ^ legendre_aux x p)\n\ngoal (1 subgoal):\n 1. fact (nat \\<lfloor>x\\<rfloor>) =\n    (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}. p ^ legendre_aux x p)", "unfolding of_nat_eq_iff"], ["proof (prove)\nusing this:\n  fact (nat \\<lfloor>x\\<rfloor>) =\n  (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}. p ^ legendre_aux x p)\n\ngoal (1 subgoal):\n 1. fact (nat \\<lfloor>x\\<rfloor>) =\n    (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}. p ^ legendre_aux x p)", "."], ["proof (state)\nthis:\n  fact (nat \\<lfloor>x\\<rfloor>) =\n  (\\<Prod>p\\<in>{p. prime p \\<and> real p \\<le> x}. p ^ legendre_aux x p)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>A weighted sum of the M?bius \\<open>\\<mu>\\<close> function\\<close>"], ["", "(* TODO: Move to Dirichlet_Series? *)\n\n(* 3.13 *)"], ["", "context\n  fixes M :: \"real \\<Rightarrow> real\"\n  defines \"M \\<equiv> (\\<lambda>x. sum_upto (\\<lambda>n. moebius_mu n / n) x)\"\nbegin"], ["", "lemma abs_sum_upto_moebius_mu_over_n_less:\n  assumes x: \"x \\<ge> 2\"\n  shows   \"\\<bar>M x\\<bar> < 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "have \"x * sum_upto (\\<lambda>n. moebius_mu n / n) x - sum_upto (\\<lambda>n. moebius_mu n * frac (x / n)) x =\n          sum_upto (\\<lambda>n. moebius_mu n * (x / n - frac (x / n))) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * sum_upto (\\<lambda>n. moebius_mu n / real n) x -\n    sum_upto (\\<lambda>n. moebius_mu n * frac (x / real n)) x =\n    sum_upto (\\<lambda>n. moebius_mu n * (x / real n - frac (x / real n))) x", "by (subst mult.commute[of x])\n       (simp add: sum_upto_def sum_distrib_right sum_subtractf ring_distribs)"], ["proof (state)\nthis:\n  x * sum_upto (\\<lambda>n. moebius_mu n / real n) x -\n  sum_upto (\\<lambda>n. moebius_mu n * frac (x / real n)) x =\n  sum_upto (\\<lambda>n. moebius_mu n * (x / real n - frac (x / real n))) x\n\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "also"], ["proof (state)\nthis:\n  x * sum_upto (\\<lambda>n. moebius_mu n / real n) x -\n  sum_upto (\\<lambda>n. moebius_mu n * frac (x / real n)) x =\n  sum_upto (\\<lambda>n. moebius_mu n * (x / real n - frac (x / real n))) x\n\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "have \"(\\<lambda>n. x / real n - frac (x / real n)) = (\\<lambda>n. of_int (floor (x / real n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. x / real n - frac (x / real n)) =\n    (\\<lambda>n. real_of_int \\<lfloor>x / real n\\<rfloor>)", "by (simp add: frac_def)"], ["proof (state)\nthis:\n  (\\<lambda>n. x / real n - frac (x / real n)) =\n  (\\<lambda>n. real_of_int \\<lfloor>x / real n\\<rfloor>)\n\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "also"], ["proof (state)\nthis:\n  (\\<lambda>n. x / real n - frac (x / real n)) =\n  (\\<lambda>n. real_of_int \\<lfloor>x / real n\\<rfloor>)\n\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "have \"sum_upto (\\<lambda>n. moebius_mu n * real_of_int \\<lfloor>x / real n\\<rfloor>) x =\n               real_of_int (sum_upto (\\<lambda>n. moebius_mu n * \\<lfloor>x / real n\\<rfloor>) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto\n     (\\<lambda>n. moebius_mu n * real_of_int \\<lfloor>x / real n\\<rfloor>)\n     x =\n    real_of_int\n     (sum_upto (\\<lambda>n. moebius_mu n * \\<lfloor>x / real n\\<rfloor>) x)", "by (simp add: sum_upto_def)"], ["proof (state)\nthis:\n  sum_upto\n   (\\<lambda>n. moebius_mu n * real_of_int \\<lfloor>x / real n\\<rfloor>) x =\n  real_of_int\n   (sum_upto (\\<lambda>n. moebius_mu n * \\<lfloor>x / real n\\<rfloor>) x)\n\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "also"], ["proof (state)\nthis:\n  sum_upto\n   (\\<lambda>n. moebius_mu n * real_of_int \\<lfloor>x / real n\\<rfloor>) x =\n  real_of_int\n   (sum_upto (\\<lambda>n. moebius_mu n * \\<lfloor>x / real n\\<rfloor>) x)\n\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "have \"\\<dots> = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real_of_int\n     (sum_upto (\\<lambda>n. moebius_mu n * \\<lfloor>x / real n\\<rfloor>)\n       x) =\n    1", "using x"], ["proof (prove)\nusing this:\n  2 \\<le> x\n\ngoal (1 subgoal):\n 1. real_of_int\n     (sum_upto (\\<lambda>n. moebius_mu n * \\<lfloor>x / real n\\<rfloor>)\n       x) =\n    1", "by (subst sum_upto_moebius_times_floor_linear) auto"], ["proof (state)\nthis:\n  real_of_int\n   (sum_upto (\\<lambda>n. moebius_mu n * \\<lfloor>x / real n\\<rfloor>) x) =\n  1\n\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "finally"], ["proof (chain)\npicking this:\n  x * sum_upto (\\<lambda>n. moebius_mu n / real n) x -\n  sum_upto (\\<lambda>n. moebius_mu n * frac (x / real n)) x =\n  1", "have eq: \"x * M x = 1 + sum_upto (\\<lambda>n. moebius_mu n * frac (x / n)) x\""], ["proof (prove)\nusing this:\n  x * sum_upto (\\<lambda>n. moebius_mu n / real n) x -\n  sum_upto (\\<lambda>n. moebius_mu n * frac (x / real n)) x =\n  1\n\ngoal (1 subgoal):\n 1. x * M x = 1 + sum_upto (\\<lambda>n. moebius_mu n * frac (x / real n)) x", "by (simp add: M_def)"], ["proof (state)\nthis:\n  x * M x = 1 + sum_upto (\\<lambda>n. moebius_mu n * frac (x / real n)) x\n\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "have \"x * \\<bar>M x\\<bar> = \\<bar>x * M x\\<bar>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * \\<bar>M x\\<bar> = \\<bar>x * M x\\<bar>", "using x"], ["proof (prove)\nusing this:\n  2 \\<le> x\n\ngoal (1 subgoal):\n 1. x * \\<bar>M x\\<bar> = \\<bar>x * M x\\<bar>", "by (simp add: abs_mult)"], ["proof (state)\nthis:\n  x * \\<bar>M x\\<bar> = \\<bar>x * M x\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "also"], ["proof (state)\nthis:\n  x * \\<bar>M x\\<bar> = \\<bar>x * M x\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "note eq"], ["proof (state)\nthis:\n  x * M x = 1 + sum_upto (\\<lambda>n. moebius_mu n * frac (x / real n)) x\n\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "also"], ["proof (state)\nthis:\n  x * M x = 1 + sum_upto (\\<lambda>n. moebius_mu n * frac (x / real n)) x\n\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "have \"\\<bar>1 + sum_upto (\\<lambda>n. moebius_mu n * frac (x / n)) x\\<bar> \\<le>\n               1 + \\<bar>sum_upto (\\<lambda>n. moebius_mu n * frac (x / n)) x\\<bar>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>1 +\n          sum_upto (\\<lambda>n. moebius_mu n * frac (x / real n)) x\\<bar>\n    \\<le> 1 +\n          \\<bar>sum_upto (\\<lambda>n. moebius_mu n * frac (x / real n))\n                 x\\<bar>", "by linarith"], ["proof (state)\nthis:\n  \\<bar>1 + sum_upto (\\<lambda>n. moebius_mu n * frac (x / real n)) x\\<bar>\n  \\<le> 1 +\n        \\<bar>sum_upto (\\<lambda>n. moebius_mu n * frac (x / real n))\n               x\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "also"], ["proof (state)\nthis:\n  \\<bar>1 + sum_upto (\\<lambda>n. moebius_mu n * frac (x / real n)) x\\<bar>\n  \\<le> 1 +\n        \\<bar>sum_upto (\\<lambda>n. moebius_mu n * frac (x / real n))\n               x\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "have \"\\<bar>sum_upto (\\<lambda>n. moebius_mu n * frac (x / n)) x\\<bar> \\<le>\n               sum_upto (\\<lambda>n. \\<bar>moebius_mu n * frac (x / n)\\<bar>) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (\\<lambda>n. moebius_mu n * frac (x / real n)) x\\<bar>\n    \\<le> sum_upto\n           (\\<lambda>n. \\<bar>moebius_mu n * frac (x / real n)\\<bar>) x", "unfolding sum_upto_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>\\<Sum>n\\<in>{i. 0 < i \\<and> real i \\<le> x}.\n            moebius_mu n * frac (x / real n)\\<bar>\n    \\<le> (\\<Sum>n\\<in>{i. 0 < i \\<and> real i \\<le> x}.\n             \\<bar>moebius_mu n * frac (x / real n)\\<bar>)", "by (rule sum_abs)"], ["proof (state)\nthis:\n  \\<bar>sum_upto (\\<lambda>n. moebius_mu n * frac (x / real n)) x\\<bar>\n  \\<le> sum_upto (\\<lambda>n. \\<bar>moebius_mu n * frac (x / real n)\\<bar>)\n         x\n\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "also"], ["proof (state)\nthis:\n  \\<bar>sum_upto (\\<lambda>n. moebius_mu n * frac (x / real n)) x\\<bar>\n  \\<le> sum_upto (\\<lambda>n. \\<bar>moebius_mu n * frac (x / real n)\\<bar>)\n         x\n\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "have \"\\<dots> \\<le> sum_upto (\\<lambda>n. frac (x / n)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>n. \\<bar>moebius_mu n * frac (x / real n)\\<bar>) x\n    \\<le> sum_upto (\\<lambda>xa. frac (x / real xa)) x", "unfolding sum_upto_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>n\\<in>{i. 0 < i \\<and> real i \\<le> x}.\n       \\<bar>moebius_mu n * frac (x / real n)\\<bar>)\n    \\<le> (\\<Sum>xa\\<in>{i. 0 < i \\<and> real i \\<le> x}.\n             frac (x / real xa))", "by (intro sum_mono) (auto simp: moebius_mu_def abs_mult)"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>n. \\<bar>moebius_mu n * frac (x / real n)\\<bar>) x\n  \\<le> sum_upto (\\<lambda>xa. frac (x / real xa)) x\n\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "also"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>n. \\<bar>moebius_mu n * frac (x / real n)\\<bar>) x\n  \\<le> sum_upto (\\<lambda>xa. frac (x / real xa)) x\n\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "have \"\\<dots> = (\\<Sum>n\\<in>{0<..nat \\<lfloor>x\\<rfloor>}. frac (x / n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>xa. frac (x / real xa)) x =\n    (\\<Sum>n\\<in>{0<..nat \\<lfloor>x\\<rfloor>}. frac (x / real n))", "by (simp add: sum_upto_altdef)"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>xa. frac (x / real xa)) x =\n  (\\<Sum>n\\<in>{0<..nat \\<lfloor>x\\<rfloor>}. frac (x / real n))\n\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "also"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>xa. frac (x / real xa)) x =\n  (\\<Sum>n\\<in>{0<..nat \\<lfloor>x\\<rfloor>}. frac (x / real n))\n\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "have \"{0<..nat \\<lfloor>x\\<rfloor>} = insert 1 {1<..nat \\<lfloor>x\\<rfloor>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {0<..nat \\<lfloor>x\\<rfloor>} = insert 1 {1<..nat \\<lfloor>x\\<rfloor>}", "using x"], ["proof (prove)\nusing this:\n  2 \\<le> x\n\ngoal (1 subgoal):\n 1. {0<..nat \\<lfloor>x\\<rfloor>} = insert 1 {1<..nat \\<lfloor>x\\<rfloor>}", "by (auto simp: le_nat_iff le_floor_iff)"], ["proof (state)\nthis:\n  {0<..nat \\<lfloor>x\\<rfloor>} = insert 1 {1<..nat \\<lfloor>x\\<rfloor>}\n\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "also"], ["proof (state)\nthis:\n  {0<..nat \\<lfloor>x\\<rfloor>} = insert 1 {1<..nat \\<lfloor>x\\<rfloor>}\n\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "have \"(\\<Sum>n\\<in>\\<dots>. frac (x / n)) = frac x + (\\<Sum>n\\<in>{1<..nat \\<lfloor>x\\<rfloor>}. frac (x / n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>n\\<in>insert 1 {1<..nat \\<lfloor>x\\<rfloor>}.\n       frac (x / real n)) =\n    frac x + (\\<Sum>n\\<in>{1<..nat \\<lfloor>x\\<rfloor>}. frac (x / real n))", "by (subst sum.insert) auto"], ["proof (state)\nthis:\n  (\\<Sum>n\\<in>insert 1 {1<..nat \\<lfloor>x\\<rfloor>}. frac (x / real n)) =\n  frac x + (\\<Sum>n\\<in>{1<..nat \\<lfloor>x\\<rfloor>}. frac (x / real n))\n\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "also"], ["proof (state)\nthis:\n  (\\<Sum>n\\<in>insert 1 {1<..nat \\<lfloor>x\\<rfloor>}. frac (x / real n)) =\n  frac x + (\\<Sum>n\\<in>{1<..nat \\<lfloor>x\\<rfloor>}. frac (x / real n))\n\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "have \"(\\<Sum>n\\<in>{1<..nat \\<lfloor>x\\<rfloor>}. frac (x / n)) < (\\<Sum>n\\<in>{1<..nat \\<lfloor>x\\<rfloor>}. 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>n\\<in>{1<..nat \\<lfloor>x\\<rfloor>}. frac (x / real n))\n    < (\\<Sum>n\\<in>{1<..nat \\<lfloor>x\\<rfloor>}. 1)", "using x"], ["proof (prove)\nusing this:\n  2 \\<le> x\n\ngoal (1 subgoal):\n 1. (\\<Sum>n\\<in>{1<..nat \\<lfloor>x\\<rfloor>}. frac (x / real n))\n    < (\\<Sum>n\\<in>{1<..nat \\<lfloor>x\\<rfloor>}. 1)", "by (intro sum_strict_mono frac_lt_1) auto"], ["proof (state)\nthis:\n  (\\<Sum>n\\<in>{1<..nat \\<lfloor>x\\<rfloor>}. frac (x / real n))\n  < (\\<Sum>n\\<in>{1<..nat \\<lfloor>x\\<rfloor>}. 1)\n\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "also"], ["proof (state)\nthis:\n  (\\<Sum>n\\<in>{1<..nat \\<lfloor>x\\<rfloor>}. frac (x / real n))\n  < (\\<Sum>n\\<in>{1<..nat \\<lfloor>x\\<rfloor>}. 1)\n\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "have \"\\<dots> = nat \\<lfloor>x\\<rfloor> - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>n\\<in>{1<..nat \\<lfloor>x\\<rfloor>}. 1) =\n    real (nat \\<lfloor>x\\<rfloor> - 1)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>n\\<in>{1<..nat \\<lfloor>x\\<rfloor>}. 1) =\n  real (nat \\<lfloor>x\\<rfloor> - 1)\n\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "also"], ["proof (state)\nthis:\n  (\\<Sum>n\\<in>{1<..nat \\<lfloor>x\\<rfloor>}. 1) =\n  real (nat \\<lfloor>x\\<rfloor> - 1)\n\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "have \"1 + (frac x + real (nat \\<lfloor>x\\<rfloor> - 1)) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 + (frac x + real (nat \\<lfloor>x\\<rfloor> - 1)) = x", "using x"], ["proof (prove)\nusing this:\n  2 \\<le> x\n\ngoal (1 subgoal):\n 1. 1 + (frac x + real (nat \\<lfloor>x\\<rfloor> - 1)) = x", "by (subst of_nat_diff) (auto simp: le_nat_iff le_floor_iff frac_def)"], ["proof (state)\nthis:\n  1 + (frac x + real (nat \\<lfloor>x\\<rfloor> - 1)) = x\n\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "finally"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>x y. x \\<le> y \\<Longrightarrow> 1 + x \\<le> 1 + y;\n   \\<And>x y. x \\<le> y \\<Longrightarrow> 1 + x \\<le> 1 + y;\n   \\<And>xa y.\n      xa < y \\<Longrightarrow> 1 + (frac x + xa) < 1 + (frac x + y)\\<rbrakk>\n  \\<Longrightarrow> x * \\<bar>M x\\<bar> < x", "have \"x * \\<bar>M x\\<bar> < x * 1\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x y. x \\<le> y \\<Longrightarrow> 1 + x \\<le> 1 + y;\n   \\<And>x y. x \\<le> y \\<Longrightarrow> 1 + x \\<le> 1 + y;\n   \\<And>xa y.\n      xa < y \\<Longrightarrow> 1 + (frac x + xa) < 1 + (frac x + y)\\<rbrakk>\n  \\<Longrightarrow> x * \\<bar>M x\\<bar> < x\n\ngoal (1 subgoal):\n 1. x * \\<bar>M x\\<bar> < x * 1", "by simp"], ["proof (state)\nthis:\n  x * \\<bar>M x\\<bar> < x * 1\n\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "with x"], ["proof (chain)\npicking this:\n  2 \\<le> x\n  x * \\<bar>M x\\<bar> < x * 1", "show \"\\<bar>M x\\<bar> < 1\""], ["proof (prove)\nusing this:\n  2 \\<le> x\n  x * \\<bar>M x\\<bar> < x * 1\n\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> < 1", "by (subst (asm) mult_less_cancel_left_pos) auto"], ["proof (state)\nthis:\n  \\<bar>M x\\<bar> < 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_upto_moebius_mu_over_n_eq:\n  assumes \"x < 2\"\n  shows   \"M x = (if x \\<ge> 1 then 1 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M x = (if 1 \\<le> x then 1 else 0)", "proof (cases \"x \\<ge> 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 1 \\<le> x \\<Longrightarrow> M x = (if 1 \\<le> x then 1 else 0)\n 2. \\<not> 1 \\<le> x \\<Longrightarrow> M x = (if 1 \\<le> x then 1 else 0)", "case True"], ["proof (state)\nthis:\n  1 \\<le> x\n\ngoal (2 subgoals):\n 1. 1 \\<le> x \\<Longrightarrow> M x = (if 1 \\<le> x then 1 else 0)\n 2. \\<not> 1 \\<le> x \\<Longrightarrow> M x = (if 1 \\<le> x then 1 else 0)", "have \"M x = (\\<Sum>n\\<in>{n. n > 0 \\<and> real n \\<le> x}. moebius_mu n / n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M x = (\\<Sum>n | 0 < n \\<and> real n \\<le> x. moebius_mu n / real n)", "by (simp add: M_def sum_upto_def)"], ["proof (state)\nthis:\n  M x = (\\<Sum>n | 0 < n \\<and> real n \\<le> x. moebius_mu n / real n)\n\ngoal (2 subgoals):\n 1. 1 \\<le> x \\<Longrightarrow> M x = (if 1 \\<le> x then 1 else 0)\n 2. \\<not> 1 \\<le> x \\<Longrightarrow> M x = (if 1 \\<le> x then 1 else 0)", "also"], ["proof (state)\nthis:\n  M x = (\\<Sum>n | 0 < n \\<and> real n \\<le> x. moebius_mu n / real n)\n\ngoal (2 subgoals):\n 1. 1 \\<le> x \\<Longrightarrow> M x = (if 1 \\<le> x then 1 else 0)\n 2. \\<not> 1 \\<le> x \\<Longrightarrow> M x = (if 1 \\<le> x then 1 else 0)", "from assms True"], ["proof (chain)\npicking this:\n  x < 2\n  1 \\<le> x", "have \"{n. n > 0 \\<and> real n \\<le> x} = {1}\""], ["proof (prove)\nusing this:\n  x < 2\n  1 \\<le> x\n\ngoal (1 subgoal):\n 1. {n. 0 < n \\<and> real n \\<le> x} = {1}", "by auto"], ["proof (state)\nthis:\n  {n. 0 < n \\<and> real n \\<le> x} = {1}\n\ngoal (2 subgoals):\n 1. 1 \\<le> x \\<Longrightarrow> M x = (if 1 \\<le> x then 1 else 0)\n 2. \\<not> 1 \\<le> x \\<Longrightarrow> M x = (if 1 \\<le> x then 1 else 0)", "thus ?thesis"], ["proof (prove)\nusing this:\n  {n. 0 < n \\<and> real n \\<le> x} = {1}\n\ngoal (1 subgoal):\n 1. M x = (if 1 \\<le> x then 1 else 0)", "using True"], ["proof (prove)\nusing this:\n  {n. 0 < n \\<and> real n \\<le> x} = {1}\n  1 \\<le> x\n\ngoal (1 subgoal):\n 1. M x = (if 1 \\<le> x then 1 else 0)", "by (simp add: M_def sum_upto_def)"], ["proof (state)\nthis:\n  M x = (if 1 \\<le> x then 1 else 0)\n\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> x \\<Longrightarrow> M x = (if 1 \\<le> x then 1 else 0)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> x \\<Longrightarrow> M x = (if 1 \\<le> x then 1 else 0)", "case False"], ["proof (state)\nthis:\n  \\<not> 1 \\<le> x\n\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> x \\<Longrightarrow> M x = (if 1 \\<le> x then 1 else 0)", "have \"M x = (\\<Sum>n\\<in>{n. n > 0 \\<and> real n \\<le> x}. moebius_mu n / n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M x = (\\<Sum>n | 0 < n \\<and> real n \\<le> x. moebius_mu n / real n)", "by (simp add: M_def sum_upto_def)"], ["proof (state)\nthis:\n  M x = (\\<Sum>n | 0 < n \\<and> real n \\<le> x. moebius_mu n / real n)\n\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> x \\<Longrightarrow> M x = (if 1 \\<le> x then 1 else 0)", "also"], ["proof (state)\nthis:\n  M x = (\\<Sum>n | 0 < n \\<and> real n \\<le> x. moebius_mu n / real n)\n\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> x \\<Longrightarrow> M x = (if 1 \\<le> x then 1 else 0)", "from False"], ["proof (chain)\npicking this:\n  \\<not> 1 \\<le> x", "have \"{n. n > 0 \\<and> real n \\<le> x} = {}\""], ["proof (prove)\nusing this:\n  \\<not> 1 \\<le> x\n\ngoal (1 subgoal):\n 1. {n. 0 < n \\<and> real n \\<le> x} = {}", "by auto"], ["proof (state)\nthis:\n  {n. 0 < n \\<and> real n \\<le> x} = {}\n\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> x \\<Longrightarrow> M x = (if 1 \\<le> x then 1 else 0)", "finally"], ["proof (chain)\npicking this:\n  M x = (\\<Sum>n\\<in>{}. moebius_mu n / real n)", "show ?thesis"], ["proof (prove)\nusing this:\n  M x = (\\<Sum>n\\<in>{}. moebius_mu n / real n)\n\ngoal (1 subgoal):\n 1. M x = (if 1 \\<le> x then 1 else 0)", "using False"], ["proof (prove)\nusing this:\n  M x = (\\<Sum>n\\<in>{}. moebius_mu n / real n)\n  \\<not> 1 \\<le> x\n\ngoal (1 subgoal):\n 1. M x = (if 1 \\<le> x then 1 else 0)", "by (simp add: M_def)"], ["proof (state)\nthis:\n  M x = (if 1 \\<le> x then 1 else 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma abs_sum_upto_moebius_mu_over_n_le: \"\\<bar>M x\\<bar> \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> \\<le> 1", "using sum_upto_moebius_mu_over_n_eq[of x] abs_sum_upto_moebius_mu_over_n_less[of x]"], ["proof (prove)\nusing this:\n  x < 2 \\<Longrightarrow> M x = (if 1 \\<le> x then 1 else 0)\n  2 \\<le> x \\<Longrightarrow> \\<bar>M x\\<bar> < 1\n\ngoal (1 subgoal):\n 1. \\<bar>M x\\<bar> \\<le> 1", "by (cases \"x < 2\") auto"], ["", "end"], ["", "end"]]}