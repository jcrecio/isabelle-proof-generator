{"file_name": "/home/qj213/afp-2021-10-22/thys/Prime_Distribution_Elementary/Primes_Omega.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Prime_Distribution_Elementary", "problem_names": ["lemma primes_omega_prime [simp]: \"prime p \\<Longrightarrow> primes_omega p = 1\"", "lemma primes_omega_0 [simp]: \"primes_omega 0 = 0\"", "lemma primes_omega_1 [simp]: \"primes_omega 1 = 0\"", "lemma primes_omega_Suc_0 [simp]: \"primes_omega (Suc 0) = 0\"", "lemma primes_omega_power [simp]: \"n > 0 \\<Longrightarrow> primes_omega (x ^ n) = primes_omega x\"", "lemma primes_omega_primepow [simp]: \"primepow n \\<Longrightarrow> primes_omega n = 1\"", "lemma primes_omega_eq_0_iff: \"primes_omega n = 0 \\<longleftrightarrow> n = 0 \\<or> n = 1\"", "lemma primes_omega_pos [simp, intro]: \"n > 1 \\<Longrightarrow> primes_omega n > 0\"", "lemma primes_omega_mult_coprime:\n  assumes \"coprime x y\" \"x > 0 \\<or> y > 0\"\n  shows   \"primes_omega (x * y) = primes_omega x + primes_omega y\"", "lemma divisor_count_squarefree:\n  assumes \"squarefree n\" \"n > 0\"\n  shows   \"divisor_count n = 2 ^ primes_omega n\""], "translations": [["", "lemma primes_omega_prime [simp]: \"prime p \\<Longrightarrow> primes_omega p = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime p \\<Longrightarrow> primes_omega p = 1", "by (simp add: primes_omega_def prime_factorization_prime)"], ["", "lemma primes_omega_0 [simp]: \"primes_omega 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. primes_omega 0 = 0", "by (simp add: primes_omega_def)"], ["", "lemma primes_omega_1 [simp]: \"primes_omega 1 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. primes_omega 1 = 0", "by (simp add: primes_omega_def)"], ["", "lemma primes_omega_Suc_0 [simp]: \"primes_omega (Suc 0) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. primes_omega (Suc 0) = 0", "by (simp add: primes_omega_def)"], ["", "lemma primes_omega_power [simp]: \"n > 0 \\<Longrightarrow> primes_omega (x ^ n) = primes_omega x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow> primes_omega (x ^ n) = primes_omega x", "by (simp add: primes_omega_def prime_factors_power)"], ["", "lemma primes_omega_primepow [simp]: \"primepow n \\<Longrightarrow> primes_omega n = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. primepow n \\<Longrightarrow> primes_omega n = 1", "by (auto simp: primepow_def)"], ["", "lemma primes_omega_eq_0_iff: \"primes_omega n = 0 \\<longleftrightarrow> n = 0 \\<or> n = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (primes_omega n = 0) = (n = 0 \\<or> n = 1)", "by (auto simp: primes_omega_def prime_factorization_empty_iff)"], ["", "lemma primes_omega_pos [simp, intro]: \"n > 1 \\<Longrightarrow> primes_omega n > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < n \\<Longrightarrow> 0 < primes_omega n", "by (cases \"primes_omega n > 0\") (auto simp: primes_omega_eq_0_iff)"], ["", "lemma primes_omega_mult_coprime:\n  assumes \"coprime x y\" \"x > 0 \\<or> y > 0\"\n  shows   \"primes_omega (x * y) = primes_omega x + primes_omega y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. primes_omega (x * y) = primes_omega x + primes_omega y", "proof (cases \"x = 0 \\<or> y = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x = 0 \\<or> y = 0 \\<Longrightarrow>\n    primes_omega (x * y) = primes_omega x + primes_omega y\n 2. \\<not> (x = 0 \\<or> y = 0) \\<Longrightarrow>\n    primes_omega (x * y) = primes_omega x + primes_omega y", "case False"], ["proof (state)\nthis:\n  \\<not> (x = 0 \\<or> y = 0)\n\ngoal (2 subgoals):\n 1. x = 0 \\<or> y = 0 \\<Longrightarrow>\n    primes_omega (x * y) = primes_omega x + primes_omega y\n 2. \\<not> (x = 0 \\<or> y = 0) \\<Longrightarrow>\n    primes_omega (x * y) = primes_omega x + primes_omega y", "hence \"prime_factors (x * y) = prime_factors x \\<union> prime_factors y\""], ["proof (prove)\nusing this:\n  \\<not> (x = 0 \\<or> y = 0)\n\ngoal (1 subgoal):\n 1. prime_factors (x * y) = prime_factors x \\<union> prime_factors y", "by (subst prime_factorization_mult) auto"], ["proof (state)\nthis:\n  prime_factors (x * y) = prime_factors x \\<union> prime_factors y\n\ngoal (2 subgoals):\n 1. x = 0 \\<or> y = 0 \\<Longrightarrow>\n    primes_omega (x * y) = primes_omega x + primes_omega y\n 2. \\<not> (x = 0 \\<or> y = 0) \\<Longrightarrow>\n    primes_omega (x * y) = primes_omega x + primes_omega y", "also"], ["proof (state)\nthis:\n  prime_factors (x * y) = prime_factors x \\<union> prime_factors y\n\ngoal (2 subgoals):\n 1. x = 0 \\<or> y = 0 \\<Longrightarrow>\n    primes_omega (x * y) = primes_omega x + primes_omega y\n 2. \\<not> (x = 0 \\<or> y = 0) \\<Longrightarrow>\n    primes_omega (x * y) = primes_omega x + primes_omega y", "{"], ["proof (state)\nthis:\n  prime_factors (x * y) = prime_factors x \\<union> prime_factors y\n\ngoal (2 subgoals):\n 1. x = 0 \\<or> y = 0 \\<Longrightarrow>\n    primes_omega (x * y) = primes_omega x + primes_omega y\n 2. \\<not> (x = 0 \\<or> y = 0) \\<Longrightarrow>\n    primes_omega (x * y) = primes_omega x + primes_omega y", "have \"prime_factors x \\<inter> prime_factors y = set_mset (prime_factorization (gcd x y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime_factors x \\<inter> prime_factors y = prime_factors (gcd x y)", "using False"], ["proof (prove)\nusing this:\n  \\<not> (x = 0 \\<or> y = 0)\n\ngoal (1 subgoal):\n 1. prime_factors x \\<inter> prime_factors y = prime_factors (gcd x y)", "by (subst prime_factorization_gcd) auto"], ["proof (state)\nthis:\n  prime_factors x \\<inter> prime_factors y = prime_factors (gcd x y)\n\ngoal (2 subgoals):\n 1. x = 0 \\<or> y = 0 \\<Longrightarrow>\n    primes_omega (x * y) = primes_omega x + primes_omega y\n 2. \\<not> (x = 0 \\<or> y = 0) \\<Longrightarrow>\n    primes_omega (x * y) = primes_omega x + primes_omega y", "also"], ["proof (state)\nthis:\n  prime_factors x \\<inter> prime_factors y = prime_factors (gcd x y)\n\ngoal (2 subgoals):\n 1. x = 0 \\<or> y = 0 \\<Longrightarrow>\n    primes_omega (x * y) = primes_omega x + primes_omega y\n 2. \\<not> (x = 0 \\<or> y = 0) \\<Longrightarrow>\n    primes_omega (x * y) = primes_omega x + primes_omega y", "have \"gcd x y = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd x y = 1", "using \\<open>coprime x y\\<close>"], ["proof (prove)\nusing this:\n  coprime x y\n\ngoal (1 subgoal):\n 1. gcd x y = 1", "by auto"], ["proof (state)\nthis:\n  gcd x y = 1\n\ngoal (2 subgoals):\n 1. x = 0 \\<or> y = 0 \\<Longrightarrow>\n    primes_omega (x * y) = primes_omega x + primes_omega y\n 2. \\<not> (x = 0 \\<or> y = 0) \\<Longrightarrow>\n    primes_omega (x * y) = primes_omega x + primes_omega y", "finally"], ["proof (chain)\npicking this:\n  prime_factors x \\<inter> prime_factors y = prime_factors 1", "have \"card (prime_factors x \\<union> prime_factors y) = primes_omega x + primes_omega y\""], ["proof (prove)\nusing this:\n  prime_factors x \\<inter> prime_factors y = prime_factors 1\n\ngoal (1 subgoal):\n 1. card (prime_factors x \\<union> prime_factors y) =\n    primes_omega x + primes_omega y", "unfolding primes_omega_def"], ["proof (prove)\nusing this:\n  prime_factors x \\<inter> prime_factors y = prime_factors 1\n\ngoal (1 subgoal):\n 1. card (prime_factors x \\<union> prime_factors y) =\n    card (prime_factors x) + card (prime_factors y)", "by (intro card_Un_disjoint) (use False in auto)"], ["proof (state)\nthis:\n  card (prime_factors x \\<union> prime_factors y) =\n  primes_omega x + primes_omega y\n\ngoal (2 subgoals):\n 1. x = 0 \\<or> y = 0 \\<Longrightarrow>\n    primes_omega (x * y) = primes_omega x + primes_omega y\n 2. \\<not> (x = 0 \\<or> y = 0) \\<Longrightarrow>\n    primes_omega (x * y) = primes_omega x + primes_omega y", "}"], ["proof (state)\nthis:\n  card (prime_factors x \\<union> prime_factors y) =\n  primes_omega x + primes_omega y\n\ngoal (2 subgoals):\n 1. x = 0 \\<or> y = 0 \\<Longrightarrow>\n    primes_omega (x * y) = primes_omega x + primes_omega y\n 2. \\<not> (x = 0 \\<or> y = 0) \\<Longrightarrow>\n    primes_omega (x * y) = primes_omega x + primes_omega y", "finally"], ["proof (chain)\npicking this:\n  card (prime_factors (x * y)) = primes_omega x + primes_omega y", "show ?thesis"], ["proof (prove)\nusing this:\n  card (prime_factors (x * y)) = primes_omega x + primes_omega y\n\ngoal (1 subgoal):\n 1. primes_omega (x * y) = primes_omega x + primes_omega y", "by (simp add: primes_omega_def)"], ["proof (state)\nthis:\n  primes_omega (x * y) = primes_omega x + primes_omega y\n\ngoal (1 subgoal):\n 1. x = 0 \\<or> y = 0 \\<Longrightarrow>\n    primes_omega (x * y) = primes_omega x + primes_omega y", "qed (use assms in auto)"], ["", "lemma divisor_count_squarefree:\n  assumes \"squarefree n\" \"n > 0\"\n  shows   \"divisor_count n = 2 ^ primes_omega n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. divisor_count n = 2 ^ primes_omega n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. divisor_count n = 2 ^ primes_omega n", "have \"divisor_count n = (\\<Prod>p\\<in>prime_factors n. Suc (multiplicity p n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. divisor_count n = (\\<Prod>p\\<in>prime_factors n. Suc (multiplicity p n))", "using assms"], ["proof (prove)\nusing this:\n  squarefree n\n  0 < n\n\ngoal (1 subgoal):\n 1. divisor_count n = (\\<Prod>p\\<in>prime_factors n. Suc (multiplicity p n))", "by (subst divisor_count.prod_prime_factors') auto"], ["proof (state)\nthis:\n  divisor_count n = (\\<Prod>p\\<in>prime_factors n. Suc (multiplicity p n))\n\ngoal (1 subgoal):\n 1. divisor_count n = 2 ^ primes_omega n", "also"], ["proof (state)\nthis:\n  divisor_count n = (\\<Prod>p\\<in>prime_factors n. Suc (multiplicity p n))\n\ngoal (1 subgoal):\n 1. divisor_count n = 2 ^ primes_omega n", "have \"\\<dots> = (\\<Prod>p\\<in>prime_factors n. 2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>prime_factors n. Suc (multiplicity p n)) =\n    (\\<Prod>p\\<in>prime_factors n. 2)", "using assms assms"], ["proof (prove)\nusing this:\n  squarefree n\n  0 < n\n  squarefree n\n  0 < n\n\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>prime_factors n. Suc (multiplicity p n)) =\n    (\\<Prod>p\\<in>prime_factors n. 2)", "by (intro prod.cong) (auto simp: squarefree_factorial_semiring')"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>prime_factors n. Suc (multiplicity p n)) =\n  (\\<Prod>p\\<in>prime_factors n. 2)\n\ngoal (1 subgoal):\n 1. divisor_count n = 2 ^ primes_omega n", "finally"], ["proof (chain)\npicking this:\n  divisor_count n = (\\<Prod>p\\<in>prime_factors n. 2)", "show ?thesis"], ["proof (prove)\nusing this:\n  divisor_count n = (\\<Prod>p\\<in>prime_factors n. 2)\n\ngoal (1 subgoal):\n 1. divisor_count n = 2 ^ primes_omega n", "by (simp add: primes_omega_def)"], ["proof (state)\nthis:\n  divisor_count n = 2 ^ primes_omega n\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}