{"file_name": "/home/qj213/afp-2021-10-22/thys/Prime_Distribution_Elementary/Summatory_Divisor_Sigma_Bounds.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Prime_Distribution_Elementary", "problem_names": ["theorem summatory_divisor_sum_asymptotics:\n  \"sum_upto divisor_sum =o (\\<lambda>x. pi\\<^sup>2 / 12 * x ^ 2) +o O(\\<lambda>x. x * ln x)\"", "theorem summatory_divisor_sigma_asymptotics_pos:\n  fixes \\<alpha> :: real\n  assumes \\<alpha>: \"\\<alpha> > 0\" \"\\<alpha> \\<noteq> 1\"\n  defines \"\\<zeta> \\<equiv> Re (zeta (\\<alpha> + 1))\"\n  shows  \"sum_upto (divisor_sigma \\<alpha>) =o\n            (\\<lambda>x. \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)) +o O(\\<lambda>x. x powr max 1 \\<alpha>)\"", "theorem summatory_divisor_sigma_asymptotics_neg:\n  fixes \\<alpha> :: real\n  assumes \\<alpha>: \"\\<alpha> > 0\"\n  defines \"\\<delta> \\<equiv> max 0 (1 - \\<alpha>)\"\n  defines \"\\<zeta> \\<equiv> Re (zeta (\\<alpha> + 1))\"\n  shows  \"sum_upto (divisor_sigma (-\\<alpha>)) =o (if \\<alpha> = 1 then (\\<lambda>x. pi\\<^sup>2/6 * x) +o O(ln)\n                                                     else (\\<lambda>x. \\<zeta> * x) +o O(\\<lambda>x. x powr \\<delta>))\""], "translations": [["", "theorem summatory_divisor_sum_asymptotics:\n  \"sum_upto divisor_sum =o (\\<lambda>x. pi\\<^sup>2 / 12 * x ^ 2) +o O(\\<lambda>x. x * ln x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. real (sum_upto divisor_sum x))\n    \\<in> (\\<lambda>x. pi\\<^sup>2 / 12 * x\\<^sup>2) +o\n          O(\\<lambda>x. x * ln x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x. real (sum_upto divisor_sum x))\n    \\<in> (\\<lambda>x. pi\\<^sup>2 / 12 * x\\<^sup>2) +o\n          O(\\<lambda>x. x * ln x)", "define \\<zeta> where \"\\<zeta> = Re (zeta 2)\""], ["proof (state)\nthis:\n  \\<zeta> = Re (zeta 2)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. real (sum_upto divisor_sum x))\n    \\<in> (\\<lambda>x. pi\\<^sup>2 / 12 * x\\<^sup>2) +o\n          O(\\<lambda>x. x * ln x)", "define R1 where \"R1 = (\\<lambda>x. sum_upto real x - x\\<^sup>2 / 2)\""], ["proof (state)\nthis:\n  R1 = (\\<lambda>x. sum_upto real x - x\\<^sup>2 / 2)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. real (sum_upto divisor_sum x))\n    \\<in> (\\<lambda>x. pi\\<^sup>2 / 12 * x\\<^sup>2) +o\n          O(\\<lambda>x. x * ln x)", "define R2 where \"R2 = (\\<lambda>x. sum_upto (\\<lambda>d. 1 / d\\<^sup>2) x - (\\<zeta> - 1 / x))\""], ["proof (state)\nthis:\n  R2 =\n  (\\<lambda>x.\n      sum_upto (\\<lambda>d. 1 / real (d\\<^sup>2)) x - (\\<zeta> - 1 / x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. real (sum_upto divisor_sum x))\n    \\<in> (\\<lambda>x. pi\\<^sup>2 / 12 * x\\<^sup>2) +o\n          O(\\<lambda>x. x * ln x)", "obtain c1 where c1: \"c1 > 0\" \"\\<And>x. x \\<ge> 1 \\<Longrightarrow> \\<bar>R1 x\\<bar> \\<le> c1 * x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c1.\n        \\<lbrakk>0 < c1;\n         \\<And>x.\n            1 \\<le> x \\<Longrightarrow>\n            \\<bar>R1 x\\<bar> \\<le> c1 * x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using zeta_partial_sum_le_neg[of 1]"], ["proof (prove)\nusing this:\n  0 < 1 \\<Longrightarrow>\n  \\<exists>c>0.\n     \\<forall>x\\<ge>1.\n        \\<bar>sum_upto (\\<lambda>n. real n powr 1) x -\n              x powr (1 + 1) / (1 + 1)\\<bar>\n        \\<le> c * x powr 1\n\ngoal (1 subgoal):\n 1. (\\<And>c1.\n        \\<lbrakk>0 < c1;\n         \\<And>x.\n            1 \\<le> x \\<Longrightarrow>\n            \\<bar>R1 x\\<bar> \\<le> c1 * x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: R1_def)"], ["proof (state)\nthis:\n  0 < c1\n  1 \\<le> ?x \\<Longrightarrow> \\<bar>R1 ?x\\<bar> \\<le> c1 * ?x\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. real (sum_upto divisor_sum x))\n    \\<in> (\\<lambda>x. pi\\<^sup>2 / 12 * x\\<^sup>2) +o\n          O(\\<lambda>x. x * ln x)", "obtain c2 where c2: \"c2 > 0\" \"\\<And>x. x \\<ge> 1 \\<Longrightarrow> \\<bar>R2 x\\<bar> \\<le> c2 / x\\<^sup>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c2.\n        \\<lbrakk>0 < c2;\n         \\<And>x.\n            1 \\<le> x \\<Longrightarrow>\n            \\<bar>R2 x\\<bar> \\<le> c2 / x\\<^sup>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using zeta_partial_sum_le_pos[of 2]"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 < 2; 2 \\<noteq> 1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c>0.\n                       \\<forall>x\\<ge>1.\n                          \\<bar>sum_upto (\\<lambda>x. real x powr - 2) x -\n                                (x powr (1 - 2) / (1 - 2) +\n                                 Re (zeta (complex_of_real 2)))\\<bar>\n                          \\<le> c * x powr - 2\n\ngoal (1 subgoal):\n 1. (\\<And>c2.\n        \\<lbrakk>0 < c2;\n         \\<And>x.\n            1 \\<le> x \\<Longrightarrow>\n            \\<bar>R2 x\\<bar> \\<le> c2 / x\\<^sup>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: \\<zeta>_def R2_def powr_minus field_simps\n              simp del: div_mult_self3 div_mult_self4 div_mult_self2 div_mult_self1)"], ["proof (state)\nthis:\n  0 < c2\n  1 \\<le> ?x \\<Longrightarrow> \\<bar>R2 ?x\\<bar> \\<le> c2 / ?x\\<^sup>2\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. real (sum_upto divisor_sum x))\n    \\<in> (\\<lambda>x. pi\\<^sup>2 / 12 * x\\<^sup>2) +o\n          O(\\<lambda>x. x * ln x)", "have le: \"\\<bar>sum_upto divisor_sum x - \\<zeta> / 2 * x\\<^sup>2\\<bar> \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)\"\n    if x: \"x \\<ge> 1\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2\\<bar>\n    \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<bar>real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2\\<bar>\n    \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)", "have div_le: \"real (a div b) \\<le> x\" if \"a \\<le> x\" for a b :: nat"], ["proof (prove)\ngoal (1 subgoal):\n 1. real (a div b) \\<le> x", "by (rule order.trans[OF _ that(1)]) auto"], ["proof (state)\nthis:\n  real ?a \\<le> x \\<Longrightarrow> real (?a div ?b) \\<le> x\n\ngoal (1 subgoal):\n 1. \\<bar>real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2\\<bar>\n    \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)", "have \"real (sum_upto divisor_sum x) = sum_upto (dirichlet_prod real (\\<lambda>_. 1)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real (sum_upto divisor_sum x) =\n    sum_upto (dirichlet_prod real (\\<lambda>_. 1)) x", "by (simp add: divisor_sigma_conv_dirichlet_prod [abs_def] \n                    sum_upto_def divisor_sigma_1_left [symmetric])"], ["proof (state)\nthis:\n  real (sum_upto divisor_sum x) =\n  sum_upto (dirichlet_prod real (\\<lambda>_. 1)) x\n\ngoal (1 subgoal):\n 1. \\<bar>real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2\\<bar>\n    \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)", "also"], ["proof (state)\nthis:\n  real (sum_upto divisor_sum x) =\n  sum_upto (dirichlet_prod real (\\<lambda>_. 1)) x\n\ngoal (1 subgoal):\n 1. \\<bar>real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2\\<bar>\n    \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)", "have \"\\<dots> = sum_upto (\\<lambda>n. \\<Sum>d | d dvd n. real d) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto (dirichlet_prod real (\\<lambda>_. 1)) x =\n    sum_upto (\\<lambda>n. sum real {d. d dvd n}) x", "by (simp add: dirichlet_prod_def)"], ["proof (state)\nthis:\n  sum_upto (dirichlet_prod real (\\<lambda>_. 1)) x =\n  sum_upto (\\<lambda>n. sum real {d. d dvd n}) x\n\ngoal (1 subgoal):\n 1. \\<bar>real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2\\<bar>\n    \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)", "also"], ["proof (state)\nthis:\n  sum_upto (dirichlet_prod real (\\<lambda>_. 1)) x =\n  sum_upto (\\<lambda>n. sum real {d. d dvd n}) x\n\ngoal (1 subgoal):\n 1. \\<bar>real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2\\<bar>\n    \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)", "have \"\\<dots> = (\\<Sum>(n, d) \\<in> (SIGMA n:{n. n > 0 \\<and> real n \\<le> x}. {d. d dvd n}). real d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>n. sum real {d. d dvd n}) x =\n    (\\<Sum>(n, y)\n           \\<in>(SIGMA n:{n. 0 < n \\<and> real n \\<le> x}. {d. d dvd n}).\n       real y)", "unfolding sum_upto_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>n\\<in>{i. 0 < i \\<and> real i \\<le> x}. sum real {d. d dvd n}) =\n    (\\<Sum>(n, y)\n           \\<in>(SIGMA n:{n. 0 < n \\<and> real n \\<le> x}. {d. d dvd n}).\n       real y)", "by (subst sum.Sigma) auto"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>n. sum real {d. d dvd n}) x =\n  (\\<Sum>(n, y)\n         \\<in>(SIGMA n:{n. 0 < n \\<and> real n \\<le> x}. {d. d dvd n}).\n     real y)\n\ngoal (1 subgoal):\n 1. \\<bar>real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2\\<bar>\n    \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)", "also"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>n. sum real {d. d dvd n}) x =\n  (\\<Sum>(n, y)\n         \\<in>(SIGMA n:{n. 0 < n \\<and> real n \\<le> x}. {d. d dvd n}).\n     real y)\n\ngoal (1 subgoal):\n 1. \\<bar>real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2\\<bar>\n    \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)", "have \"\\<dots> = (\\<Sum>(d, q) \\<in> (SIGMA d:{d. d > 0 \\<and> real d \\<le> x}. {q. q > 0 \\<and> real q \\<le> x / d}). real q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(n, y)\n           \\<in>(SIGMA n:{n. 0 < n \\<and> real n \\<le> x}. {d. d dvd n}).\n       real y) =\n    (\\<Sum>(d, y)\n           \\<in>(SIGMA xa:{d. 0 < d \\<and> real d \\<le> x}.\n                    {q. 0 < q \\<and> real q \\<le> x / real xa}).\n       real y)", "by (rule sum.reindex_bij_witness[of _ \"\\<lambda>(d, q). (d * q, q)\" \"\\<lambda>(n, d). (n div d, d)\"])\n         (use div_le in \\<open>auto simp: field_simps\\<close>)"], ["proof (state)\nthis:\n  (\\<Sum>(n, y)\n         \\<in>(SIGMA n:{n. 0 < n \\<and> real n \\<le> x}. {d. d dvd n}).\n     real y) =\n  (\\<Sum>(d, y)\n         \\<in>(SIGMA xa:{d. 0 < d \\<and> real d \\<le> x}.\n                  {q. 0 < q \\<and> real q \\<le> x / real xa}).\n     real y)\n\ngoal (1 subgoal):\n 1. \\<bar>real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2\\<bar>\n    \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)", "also"], ["proof (state)\nthis:\n  (\\<Sum>(n, y)\n         \\<in>(SIGMA n:{n. 0 < n \\<and> real n \\<le> x}. {d. d dvd n}).\n     real y) =\n  (\\<Sum>(d, y)\n         \\<in>(SIGMA xa:{d. 0 < d \\<and> real d \\<le> x}.\n                  {q. 0 < q \\<and> real q \\<le> x / real xa}).\n     real y)\n\ngoal (1 subgoal):\n 1. \\<bar>real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2\\<bar>\n    \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)", "have \"\\<dots> = sum_upto (\\<lambda>d. sum_upto real (x / d)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(d, y)\n           \\<in>(SIGMA xa:{d. 0 < d \\<and> real d \\<le> x}.\n                    {q. 0 < q \\<and> real q \\<le> x / real xa}).\n       real y) =\n    sum_upto (\\<lambda>xa. sum_upto real (x / real xa)) x", "by (simp add: sum_upto_def sum.Sigma)"], ["proof (state)\nthis:\n  (\\<Sum>(d, y)\n         \\<in>(SIGMA xa:{d. 0 < d \\<and> real d \\<le> x}.\n                  {q. 0 < q \\<and> real q \\<le> x / real xa}).\n     real y) =\n  sum_upto (\\<lambda>xa. sum_upto real (x / real xa)) x\n\ngoal (1 subgoal):\n 1. \\<bar>real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2\\<bar>\n    \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)", "also"], ["proof (state)\nthis:\n  (\\<Sum>(d, y)\n         \\<in>(SIGMA xa:{d. 0 < d \\<and> real d \\<le> x}.\n                  {q. 0 < q \\<and> real q \\<le> x / real xa}).\n     real y) =\n  sum_upto (\\<lambda>xa. sum_upto real (x / real xa)) x\n\ngoal (1 subgoal):\n 1. \\<bar>real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2\\<bar>\n    \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)", "have \"\\<dots> = x\\<^sup>2 * sum_upto (\\<lambda>d. 1 / d\\<^sup>2) x / 2 + sum_upto (\\<lambda>d. R1 (x / d)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>xa. sum_upto real (x / real xa)) x =\n    x\\<^sup>2 * sum_upto (\\<lambda>d. 1 / real (d\\<^sup>2)) x / 2 +\n    sum_upto (\\<lambda>d. R1 (x / real d)) x", "by (simp add: R1_def sum_upto_def sum.distrib sum_subtractf sum_divide_distrib\n                    power_divide sum_distrib_left)"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>xa. sum_upto real (x / real xa)) x =\n  x\\<^sup>2 * sum_upto (\\<lambda>d. 1 / real (d\\<^sup>2)) x / 2 +\n  sum_upto (\\<lambda>d. R1 (x / real d)) x\n\ngoal (1 subgoal):\n 1. \\<bar>real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2\\<bar>\n    \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)", "also"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>xa. sum_upto real (x / real xa)) x =\n  x\\<^sup>2 * sum_upto (\\<lambda>d. 1 / real (d\\<^sup>2)) x / 2 +\n  sum_upto (\\<lambda>d. R1 (x / real d)) x\n\ngoal (1 subgoal):\n 1. \\<bar>real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2\\<bar>\n    \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)", "have \"sum_upto (\\<lambda>d. 1 / d\\<^sup>2) x = \\<zeta> - 1 / x + R2 x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>d. 1 / real (d\\<^sup>2)) x = \\<zeta> - 1 / x + R2 x", "by (simp add: R2_def)"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>d. 1 / real (d\\<^sup>2)) x = \\<zeta> - 1 / x + R2 x\n\ngoal (1 subgoal):\n 1. \\<bar>real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2\\<bar>\n    \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)", "finally"], ["proof (chain)\npicking this:\n  real (sum_upto divisor_sum x) =\n  x\\<^sup>2 * (\\<zeta> - 1 / x + R2 x) / 2 +\n  sum_upto (\\<lambda>d. R1 (x / real d)) x", "have eq: \"real (sum_upto divisor_sum x) =\n                        x\\<^sup>2 * (\\<zeta> - 1 / x + R2 x) / 2 + sum_upto (\\<lambda>d. R1 (x / real d)) x\""], ["proof (prove)\nusing this:\n  real (sum_upto divisor_sum x) =\n  x\\<^sup>2 * (\\<zeta> - 1 / x + R2 x) / 2 +\n  sum_upto (\\<lambda>d. R1 (x / real d)) x\n\ngoal (1 subgoal):\n 1. real (sum_upto divisor_sum x) =\n    x\\<^sup>2 * (\\<zeta> - 1 / x + R2 x) / 2 +\n    sum_upto (\\<lambda>d. R1 (x / real d)) x", "."], ["proof (state)\nthis:\n  real (sum_upto divisor_sum x) =\n  x\\<^sup>2 * (\\<zeta> - 1 / x + R2 x) / 2 +\n  sum_upto (\\<lambda>d. R1 (x / real d)) x\n\ngoal (1 subgoal):\n 1. \\<bar>real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2\\<bar>\n    \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)", "have \"real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2 =\n            x\\<^sup>2 / 2 * R2 x - x / 2 + sum_upto (\\<lambda>d. R1 (x / real d)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2 =\n    x\\<^sup>2 / 2 * R2 x - x / 2 + sum_upto (\\<lambda>d. R1 (x / real d)) x", "using x"], ["proof (prove)\nusing this:\n  1 \\<le> x\n\ngoal (1 subgoal):\n 1. real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2 =\n    x\\<^sup>2 / 2 * R2 x - x / 2 + sum_upto (\\<lambda>d. R1 (x / real d)) x", "by (subst eq)\n         (simp add: field_simps power2_eq_square del: div_diff div_add\n               del: div_mult_self3 div_mult_self4 div_mult_self2 div_mult_self1)"], ["proof (state)\nthis:\n  real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2 =\n  x\\<^sup>2 / 2 * R2 x - x / 2 + sum_upto (\\<lambda>d. R1 (x / real d)) x\n\ngoal (1 subgoal):\n 1. \\<bar>real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2\\<bar>\n    \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)", "also"], ["proof (state)\nthis:\n  real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2 =\n  x\\<^sup>2 / 2 * R2 x - x / 2 + sum_upto (\\<lambda>d. R1 (x / real d)) x\n\ngoal (1 subgoal):\n 1. \\<bar>real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2\\<bar>\n    \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)", "have \"\\<bar>\\<dots>\\<bar> \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>x\\<^sup>2 / 2 * R2 x - x / 2 +\n          sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n    \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)", "proof (rule order.trans[OF abs_triangle_ineq] order.trans[OF abs_triangle_ineq4] add_mono)+"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<bar>x\\<^sup>2 / 2 * R2 x\\<bar> \\<le> c2 / 2\n 2. \\<bar>x / 2\\<bar> \\<le> x / 2\n 3. \\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n    \\<le> c1 * x * (ln x + 1)", "have \"\\<bar>x\\<^sup>2 / 2 * R2 x\\<bar> = x\\<^sup>2 / 2 * \\<bar>R2 x\\<bar>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>x\\<^sup>2 / 2 * R2 x\\<bar> = x\\<^sup>2 / 2 * \\<bar>R2 x\\<bar>", "using x"], ["proof (prove)\nusing this:\n  1 \\<le> x\n\ngoal (1 subgoal):\n 1. \\<bar>x\\<^sup>2 / 2 * R2 x\\<bar> = x\\<^sup>2 / 2 * \\<bar>R2 x\\<bar>", "by (simp add: abs_mult)"], ["proof (state)\nthis:\n  \\<bar>x\\<^sup>2 / 2 * R2 x\\<bar> = x\\<^sup>2 / 2 * \\<bar>R2 x\\<bar>\n\ngoal (3 subgoals):\n 1. \\<bar>x\\<^sup>2 / 2 * R2 x\\<bar> \\<le> c2 / 2\n 2. \\<bar>x / 2\\<bar> \\<le> x / 2\n 3. \\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n    \\<le> c1 * x * (ln x + 1)", "also"], ["proof (state)\nthis:\n  \\<bar>x\\<^sup>2 / 2 * R2 x\\<bar> = x\\<^sup>2 / 2 * \\<bar>R2 x\\<bar>\n\ngoal (3 subgoals):\n 1. \\<bar>x\\<^sup>2 / 2 * R2 x\\<bar> \\<le> c2 / 2\n 2. \\<bar>x / 2\\<bar> \\<le> x / 2\n 3. \\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n    \\<le> c1 * x * (ln x + 1)", "have \"\\<dots> \\<le> x\\<^sup>2 / 2 * (c2 / x\\<^sup>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^sup>2 / 2 * \\<bar>R2 x\\<bar> \\<le> x\\<^sup>2 / 2 * (c2 / x\\<^sup>2)", "using x"], ["proof (prove)\nusing this:\n  1 \\<le> x\n\ngoal (1 subgoal):\n 1. x\\<^sup>2 / 2 * \\<bar>R2 x\\<bar> \\<le> x\\<^sup>2 / 2 * (c2 / x\\<^sup>2)", "by (intro mult_left_mono c2) auto"], ["proof (state)\nthis:\n  x\\<^sup>2 / 2 * \\<bar>R2 x\\<bar> \\<le> x\\<^sup>2 / 2 * (c2 / x\\<^sup>2)\n\ngoal (3 subgoals):\n 1. \\<bar>x\\<^sup>2 / 2 * R2 x\\<bar> \\<le> c2 / 2\n 2. \\<bar>x / 2\\<bar> \\<le> x / 2\n 3. \\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n    \\<le> c1 * x * (ln x + 1)", "finally"], ["proof (chain)\npicking this:\n  \\<bar>x\\<^sup>2 / 2 * R2 x\\<bar> \\<le> x\\<^sup>2 / 2 * (c2 / x\\<^sup>2)", "show \"\\<bar>x\\<^sup>2 / 2 * R2 x\\<bar> \\<le> c2 / 2\""], ["proof (prove)\nusing this:\n  \\<bar>x\\<^sup>2 / 2 * R2 x\\<bar> \\<le> x\\<^sup>2 / 2 * (c2 / x\\<^sup>2)\n\ngoal (1 subgoal):\n 1. \\<bar>x\\<^sup>2 / 2 * R2 x\\<bar> \\<le> c2 / 2", "using x"], ["proof (prove)\nusing this:\n  \\<bar>x\\<^sup>2 / 2 * R2 x\\<bar> \\<le> x\\<^sup>2 / 2 * (c2 / x\\<^sup>2)\n  1 \\<le> x\n\ngoal (1 subgoal):\n 1. \\<bar>x\\<^sup>2 / 2 * R2 x\\<bar> \\<le> c2 / 2", "by simp"], ["proof (state)\nthis:\n  \\<bar>x\\<^sup>2 / 2 * R2 x\\<bar> \\<le> c2 / 2\n\ngoal (2 subgoals):\n 1. \\<bar>x / 2\\<bar> \\<le> x / 2\n 2. \\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n    \\<le> c1 * x * (ln x + 1)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<bar>x / 2\\<bar> \\<le> x / 2\n 2. \\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n    \\<le> c1 * x * (ln x + 1)", "have \"\\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar> \\<le> sum_upto (\\<lambda>d. \\<bar>R1 (x / real d)\\<bar>) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n    \\<le> sum_upto (\\<lambda>d. \\<bar>R1 (x / real d)\\<bar>) x", "unfolding sum_upto_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>\\<Sum>d\\<in>{i. 0 < i \\<and> real i \\<le> x}.\n            R1 (x / real d)\\<bar>\n    \\<le> (\\<Sum>d\\<in>{i. 0 < i \\<and> real i \\<le> x}.\n             \\<bar>R1 (x / real d)\\<bar>)", "by (rule sum_abs)"], ["proof (state)\nthis:\n  \\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n  \\<le> sum_upto (\\<lambda>d. \\<bar>R1 (x / real d)\\<bar>) x\n\ngoal (2 subgoals):\n 1. \\<bar>x / 2\\<bar> \\<le> x / 2\n 2. \\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n    \\<le> c1 * x * (ln x + 1)", "also"], ["proof (state)\nthis:\n  \\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n  \\<le> sum_upto (\\<lambda>d. \\<bar>R1 (x / real d)\\<bar>) x\n\ngoal (2 subgoals):\n 1. \\<bar>x / 2\\<bar> \\<le> x / 2\n 2. \\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n    \\<le> c1 * x * (ln x + 1)", "have \"\\<dots> \\<le> sum_upto (\\<lambda>d. c1 * (x / real d)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>d. \\<bar>R1 (x / real d)\\<bar>) x\n    \\<le> sum_upto (\\<lambda>d. c1 * (x / real d)) x", "unfolding sum_upto_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d\\<in>{i. 0 < i \\<and> real i \\<le> x}.\n       \\<bar>R1 (x / real d)\\<bar>)\n    \\<le> (\\<Sum>d\\<in>{i. 0 < i \\<and> real i \\<le> x}. c1 * (x / real d))", "by (intro sum_mono c1) auto"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>d. \\<bar>R1 (x / real d)\\<bar>) x\n  \\<le> sum_upto (\\<lambda>d. c1 * (x / real d)) x\n\ngoal (2 subgoals):\n 1. \\<bar>x / 2\\<bar> \\<le> x / 2\n 2. \\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n    \\<le> c1 * x * (ln x + 1)", "also"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>d. \\<bar>R1 (x / real d)\\<bar>) x\n  \\<le> sum_upto (\\<lambda>d. c1 * (x / real d)) x\n\ngoal (2 subgoals):\n 1. \\<bar>x / 2\\<bar> \\<le> x / 2\n 2. \\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n    \\<le> c1 * x * (ln x + 1)", "have \"\\<dots> = c1 * x * sum_upto (\\<lambda>d. 1 / real d) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>d. c1 * (x / real d)) x =\n    c1 * x * sum_upto (\\<lambda>d. 1 / real d) x", "by (simp add: sum_upto_def sum_distrib_left)"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>d. c1 * (x / real d)) x =\n  c1 * x * sum_upto (\\<lambda>d. 1 / real d) x\n\ngoal (2 subgoals):\n 1. \\<bar>x / 2\\<bar> \\<le> x / 2\n 2. \\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n    \\<le> c1 * x * (ln x + 1)", "also"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>d. c1 * (x / real d)) x =\n  c1 * x * sum_upto (\\<lambda>d. 1 / real d) x\n\ngoal (2 subgoals):\n 1. \\<bar>x / 2\\<bar> \\<le> x / 2\n 2. \\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n    \\<le> c1 * x * (ln x + 1)", "have \"sum_upto (\\<lambda>d. 1 / real d) x = harm (nat \\<lfloor>x\\<rfloor>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>d. 1 / real d) x = harm (nat \\<lfloor>x\\<rfloor>)", "unfolding sum_upto_altdef harm_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d\\<in>{0<..nat \\<lfloor>x\\<rfloor>}. 1 / real d) =\n    (\\<Sum>k = 1..nat \\<lfloor>x\\<rfloor>. inverse (real k))", "by (intro sum.cong) (auto simp: field_simps)"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>d. 1 / real d) x = harm (nat \\<lfloor>x\\<rfloor>)\n\ngoal (2 subgoals):\n 1. \\<bar>x / 2\\<bar> \\<le> x / 2\n 2. \\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n    \\<le> c1 * x * (ln x + 1)", "also"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>d. 1 / real d) x = harm (nat \\<lfloor>x\\<rfloor>)\n\ngoal (2 subgoals):\n 1. \\<bar>x / 2\\<bar> \\<le> x / 2\n 2. \\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n    \\<le> c1 * x * (ln x + 1)", "have \"\\<dots> \\<le> ln (nat \\<lfloor>x\\<rfloor>) + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. harm (nat \\<lfloor>x\\<rfloor>)\n    \\<le> ln (real (nat \\<lfloor>x\\<rfloor>)) + 1", "by (rule harm_le) (use x in \\<open>auto simp: le_nat_iff\\<close>)"], ["proof (state)\nthis:\n  harm (nat \\<lfloor>x\\<rfloor>)\n  \\<le> ln (real (nat \\<lfloor>x\\<rfloor>)) + 1\n\ngoal (2 subgoals):\n 1. \\<bar>x / 2\\<bar> \\<le> x / 2\n 2. \\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n    \\<le> c1 * x * (ln x + 1)", "also"], ["proof (state)\nthis:\n  harm (nat \\<lfloor>x\\<rfloor>)\n  \\<le> ln (real (nat \\<lfloor>x\\<rfloor>)) + 1\n\ngoal (2 subgoals):\n 1. \\<bar>x / 2\\<bar> \\<le> x / 2\n 2. \\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n    \\<le> c1 * x * (ln x + 1)", "have \"ln (nat \\<lfloor>x\\<rfloor>) \\<le> ln x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ln (real (nat \\<lfloor>x\\<rfloor>)) \\<le> ln x", "using x"], ["proof (prove)\nusing this:\n  1 \\<le> x\n\ngoal (1 subgoal):\n 1. ln (real (nat \\<lfloor>x\\<rfloor>)) \\<le> ln x", "by simp"], ["proof (state)\nthis:\n  ln (real (nat \\<lfloor>x\\<rfloor>)) \\<le> ln x\n\ngoal (2 subgoals):\n 1. \\<bar>x / 2\\<bar> \\<le> x / 2\n 2. \\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n    \\<le> c1 * x * (ln x + 1)", "finally"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>xa y.\n              xa \\<le> y \\<Longrightarrow> c1 * x * xa \\<le> c1 * x * y;\n   \\<And>xa y.\n      xa \\<le> y \\<Longrightarrow>\n      c1 * x * (xa + 1) \\<le> c1 * x * (y + 1)\\<rbrakk>\n  \\<Longrightarrow> \\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n                    \\<le> c1 * x * (ln x + 1)", "show \"\\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar> \\<le> c1 * x * (ln x + 1)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>xa y.\n              xa \\<le> y \\<Longrightarrow> c1 * x * xa \\<le> c1 * x * y;\n   \\<And>xa y.\n      xa \\<le> y \\<Longrightarrow>\n      c1 * x * (xa + 1) \\<le> c1 * x * (y + 1)\\<rbrakk>\n  \\<Longrightarrow> \\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n                    \\<le> c1 * x * (ln x + 1)\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n    \\<le> c1 * x * (ln x + 1)", "using c1(1) x"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>xa y.\n              xa \\<le> y \\<Longrightarrow> c1 * x * xa \\<le> c1 * x * y;\n   \\<And>xa y.\n      xa \\<le> y \\<Longrightarrow>\n      c1 * x * (xa + 1) \\<le> c1 * x * (y + 1)\\<rbrakk>\n  \\<Longrightarrow> \\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n                    \\<le> c1 * x * (ln x + 1)\n  0 < c1\n  1 \\<le> x\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n    \\<le> c1 * x * (ln x + 1)", "by simp"], ["proof (state)\nthis:\n  \\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n  \\<le> c1 * x * (ln x + 1)\n\ngoal (1 subgoal):\n 1. \\<bar>x / 2\\<bar> \\<le> x / 2", "qed (use x in auto)"], ["proof (state)\nthis:\n  \\<bar>x\\<^sup>2 / 2 * R2 x - x / 2 +\n        sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n  \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)\n\ngoal (1 subgoal):\n 1. \\<bar>real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2\\<bar>\n    \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)", "finally"], ["proof (chain)\npicking this:\n  \\<bar>real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2\\<bar>\n  \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)", "show \"\\<bar>sum_upto divisor_sum x - \\<zeta> / 2 * x\\<^sup>2\\<bar> \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)\""], ["proof (prove)\nusing this:\n  \\<bar>real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2\\<bar>\n  \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)\n\ngoal (1 subgoal):\n 1. \\<bar>real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2\\<bar>\n    \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)", "."], ["proof (state)\nthis:\n  \\<bar>real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2\\<bar>\n  \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  1 \\<le> ?x \\<Longrightarrow>\n  \\<bar>real (sum_upto divisor_sum ?x) - \\<zeta> / 2 * ?x\\<^sup>2\\<bar>\n  \\<le> c2 / 2 + ?x / 2 + c1 * ?x * (ln ?x + 1)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. real (sum_upto divisor_sum x))\n    \\<in> (\\<lambda>x. pi\\<^sup>2 / 12 * x\\<^sup>2) +o\n          O(\\<lambda>x. x * ln x)", "have \"eventually (\\<lambda>x. \\<bar>sum_upto divisor_sum x - \\<zeta> / 2 * x\\<^sup>2\\<bar> \\<le>\n                            c2 / 2 + x / 2 + c1 * x * (ln x + 1)) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top.\n       \\<bar>real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2\\<bar>\n       \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)", "using eventually_ge_at_top[of 1]"], ["proof (prove)\nusing this:\n  eventually ((\\<le>) (1::?'a1)) at_top\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top.\n       \\<bar>real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2\\<bar>\n       \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)", "by eventually_elim (use le in auto)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_top.\n     \\<bar>real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2\\<bar>\n     \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. real (sum_upto divisor_sum x))\n    \\<in> (\\<lambda>x. pi\\<^sup>2 / 12 * x\\<^sup>2) +o\n          O(\\<lambda>x. x * ln x)", "hence \"eventually (\\<lambda>x. \\<bar>sum_upto divisor_sum x - \\<zeta> / 2 * x\\<^sup>2\\<bar> \\<le>\n                              \\<bar>c2 / 2 + x / 2 + c1 * x * (ln x + 1)\\<bar>) at_top\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at_top.\n     \\<bar>real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2\\<bar>\n     \\<le> c2 / 2 + x / 2 + c1 * x * (ln x + 1)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top.\n       \\<bar>real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2\\<bar>\n       \\<le> \\<bar>c2 / 2 + x / 2 + c1 * x * (ln x + 1)\\<bar>", "by eventually_elim linarith"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_top.\n     \\<bar>real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2\\<bar>\n     \\<le> \\<bar>c2 / 2 + x / 2 + c1 * x * (ln x + 1)\\<bar>\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. real (sum_upto divisor_sum x))\n    \\<in> (\\<lambda>x. pi\\<^sup>2 / 12 * x\\<^sup>2) +o\n          O(\\<lambda>x. x * ln x)", "hence \"(\\<lambda>x. sum_upto divisor_sum x - \\<zeta> / 2 * x\\<^sup>2) \\<in> O(\\<lambda>x. c2 / 2 + x / 2 + c1 * x * (ln x + 1))\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at_top.\n     \\<bar>real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2\\<bar>\n     \\<le> \\<bar>c2 / 2 + x / 2 + c1 * x * (ln x + 1)\\<bar>\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2)\n    \\<in> O(\\<lambda>x. c2 / 2 + x / 2 + c1 * x * (ln x + 1))", "by (intro landau_o.bigI[of 1]) auto"], ["proof (state)\nthis:\n  (\\<lambda>x. real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2)\n  \\<in> O(\\<lambda>x. c2 / 2 + x / 2 + c1 * x * (ln x + 1))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. real (sum_upto divisor_sum x))\n    \\<in> (\\<lambda>x. pi\\<^sup>2 / 12 * x\\<^sup>2) +o\n          O(\\<lambda>x. x * ln x)", "also"], ["proof (state)\nthis:\n  (\\<lambda>x. real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2)\n  \\<in> O(\\<lambda>x. c2 / 2 + x / 2 + c1 * x * (ln x + 1))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. real (sum_upto divisor_sum x))\n    \\<in> (\\<lambda>x. pi\\<^sup>2 / 12 * x\\<^sup>2) +o\n          O(\\<lambda>x. x * ln x)", "have \"(\\<lambda>x. c2 / 2 + x / 2 + c1 * x * (ln x + 1)) \\<in> O(\\<lambda>x. x * ln x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. c2 / 2 + x / 2 + c1 * x * (ln x + 1))\n    \\<in> O(\\<lambda>x. x * ln x)", "by real_asymp"], ["proof (state)\nthis:\n  (\\<lambda>x. c2 / 2 + x / 2 + c1 * x * (ln x + 1))\n  \\<in> O(\\<lambda>x. x * ln x)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. real (sum_upto divisor_sum x))\n    \\<in> (\\<lambda>x. pi\\<^sup>2 / 12 * x\\<^sup>2) +o\n          O(\\<lambda>x. x * ln x)", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>x. real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2)\n  \\<in> O(\\<lambda>x. x * ln x)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>x. real (sum_upto divisor_sum x) - \\<zeta> / 2 * x\\<^sup>2)\n  \\<in> O(\\<lambda>x. x * ln x)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. real (sum_upto divisor_sum x))\n    \\<in> (\\<lambda>x. pi\\<^sup>2 / 12 * x\\<^sup>2) +o\n          O(\\<lambda>x. x * ln x)", "by (subst set_minus_plus [symmetric])\n       (simp_all add: fun_diff_def algebra_simps \\<zeta>_def zeta_even_numeral)"], ["proof (state)\nthis:\n  (\\<lambda>x. real (sum_upto divisor_sum x))\n  \\<in> (\\<lambda>x. pi\\<^sup>2 / 12 * x\\<^sup>2) +o O(\\<lambda>x. x * ln x)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Case 2: $\\alpha > 0$, $\\alpha \\neq 1$\\<close>"], ["", "(* TODO: Unify *)"], ["", "text \\<open>\n  Next, we consider the case $\\alpha > 0$ and $\\alpha\\neq 1$. We then have:\n  \\[\\sum_{n\\leq x} \\sigma_\\alpha(n) = \\frac{\\zeta(\\alpha + 1)}{\\alpha + 1} x^{\\alpha + 1} +\n       O\\left(x^{\\text{max}(1,\\alpha)}\\right)\\]\n\\<close>"], ["", "theorem summatory_divisor_sigma_asymptotics_pos:\n  fixes \\<alpha> :: real\n  assumes \\<alpha>: \"\\<alpha> > 0\" \"\\<alpha> \\<noteq> 1\"\n  defines \"\\<zeta> \\<equiv> Re (zeta (\\<alpha> + 1))\"\n  shows  \"sum_upto (divisor_sigma \\<alpha>) =o\n            (\\<lambda>x. \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)) +o O(\\<lambda>x. x powr max 1 \\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma \\<alpha>)\n    \\<in> (\\<lambda>x. \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)) +o\n          O(\\<lambda>x. x powr max 1 \\<alpha>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma \\<alpha>)\n    \\<in> (\\<lambda>x. \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)) +o\n          O(\\<lambda>x. x powr max 1 \\<alpha>)", "define R1 where \"R1 = (\\<lambda>x. sum_upto (\\<lambda>d. real d powr \\<alpha>) x - x powr (\\<alpha> + 1) / (\\<alpha> + 1))\""], ["proof (state)\nthis:\n  R1 =\n  (\\<lambda>x.\n      sum_upto (\\<lambda>d. real d powr \\<alpha>) x -\n      x powr (\\<alpha> + 1) / (\\<alpha> + 1))\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma \\<alpha>)\n    \\<in> (\\<lambda>x. \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)) +o\n          O(\\<lambda>x. x powr max 1 \\<alpha>)", "define R2 where \"R2 = (\\<lambda>x. sum_upto (\\<lambda>d. d powr (-\\<alpha> - 1)) x - (\\<zeta> - x powr -\\<alpha> / \\<alpha>))\""], ["proof (state)\nthis:\n  R2 =\n  (\\<lambda>x.\n      sum_upto (\\<lambda>x. real x powr (- \\<alpha> - 1)) x -\n      (\\<zeta> - x powr - \\<alpha> / \\<alpha>))\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma \\<alpha>)\n    \\<in> (\\<lambda>x. \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)) +o\n          O(\\<lambda>x. x powr max 1 \\<alpha>)", "define R3 where \"R3 = (\\<lambda>x. sum_upto (\\<lambda>d. d powr -\\<alpha>) x - x powr (1 - \\<alpha>) / (1 - \\<alpha>))\""], ["proof (state)\nthis:\n  R3 =\n  (\\<lambda>x.\n      sum_upto (\\<lambda>x. real x powr - \\<alpha>) x -\n      x powr (1 - \\<alpha>) / (1 - \\<alpha>))\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma \\<alpha>)\n    \\<in> (\\<lambda>x. \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)) +o\n          O(\\<lambda>x. x powr max 1 \\<alpha>)", "obtain c1 where c1: \"c1 > 0\" \"\\<And>x. x \\<ge> 1 \\<Longrightarrow> \\<bar>R1 x\\<bar> \\<le> c1 * x powr \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c1.\n        \\<lbrakk>0 < c1;\n         \\<And>x.\n            1 \\<le> x \\<Longrightarrow>\n            \\<bar>R1 x\\<bar> \\<le> c1 * x powr \\<alpha>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using zeta_partial_sum_le_neg[of \\<alpha>] \\<alpha>"], ["proof (prove)\nusing this:\n  0 < \\<alpha> \\<Longrightarrow>\n  \\<exists>c>0.\n     \\<forall>x\\<ge>1.\n        \\<bar>sum_upto (\\<lambda>n. real n powr \\<alpha>) x -\n              x powr (1 + \\<alpha>) / (1 + \\<alpha>)\\<bar>\n        \\<le> c * x powr \\<alpha>\n  0 < \\<alpha>\n  \\<alpha> \\<noteq> 1\n\ngoal (1 subgoal):\n 1. (\\<And>c1.\n        \\<lbrakk>0 < c1;\n         \\<And>x.\n            1 \\<le> x \\<Longrightarrow>\n            \\<bar>R1 x\\<bar> \\<le> c1 * x powr \\<alpha>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: R1_def add_ac)"], ["proof (state)\nthis:\n  0 < c1\n  1 \\<le> ?x \\<Longrightarrow> \\<bar>R1 ?x\\<bar> \\<le> c1 * ?x powr \\<alpha>\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma \\<alpha>)\n    \\<in> (\\<lambda>x. \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)) +o\n          O(\\<lambda>x. x powr max 1 \\<alpha>)", "obtain c2 where c2: \"c2 > 0\" \"\\<And>x. x \\<ge> 1 \\<Longrightarrow> \\<bar>R2 x\\<bar> \\<le> c2 * x powr (-\\<alpha>-1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c2.\n        \\<lbrakk>0 < c2;\n         \\<And>x.\n            1 \\<le> x \\<Longrightarrow>\n            \\<bar>R2 x\\<bar> \\<le> c2 * x powr (- \\<alpha> - 1)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using zeta_partial_sum_le_pos[of \"\\<alpha> + 1\"] \\<alpha>"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 < \\<alpha> + 1; \\<alpha> + 1 \\<noteq> 1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c>0.\n                       \\<forall>x\\<ge>1.\n                          \\<bar>sum_upto\n                                 (\\<lambda>x. real x powr - (\\<alpha> + 1))\n                                 x -\n                                (x powr (1 - (\\<alpha> + 1)) /\n                                 (1 - (\\<alpha> + 1)) +\n                                 Re (zeta\n(complex_of_real (\\<alpha> + 1))))\\<bar>\n                          \\<le> c * x powr - (\\<alpha> + 1)\n  0 < \\<alpha>\n  \\<alpha> \\<noteq> 1\n\ngoal (1 subgoal):\n 1. (\\<And>c2.\n        \\<lbrakk>0 < c2;\n         \\<And>x.\n            1 \\<le> x \\<Longrightarrow>\n            \\<bar>R2 x\\<bar> \\<le> c2 * x powr (- \\<alpha> - 1)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: \\<zeta>_def R2_def)"], ["proof (state)\nthis:\n  0 < c2\n  1 \\<le> ?x \\<Longrightarrow>\n  \\<bar>R2 ?x\\<bar> \\<le> c2 * ?x powr (- \\<alpha> - 1)\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma \\<alpha>)\n    \\<in> (\\<lambda>x. \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)) +o\n          O(\\<lambda>x. x powr max 1 \\<alpha>)", "obtain c3 where c3: \"c3 > 0\" \"\\<And>x. x \\<ge> 1 \\<Longrightarrow> \\<bar>R3 x\\<bar> \\<le> c3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c3.\n        \\<lbrakk>0 < c3;\n         \\<And>x.\n            1 \\<le> x \\<Longrightarrow> \\<bar>R3 x\\<bar> \\<le> c3\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using zeta_partial_sum_le_pos'[of \"\\<alpha>\"] \\<alpha>"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 < \\<alpha>; \\<alpha> \\<noteq> 1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c>0.\n                       \\<forall>x\\<ge>1.\n                          \\<bar>sum_upto\n                                 (\\<lambda>x. real x powr - \\<alpha>) x -\n                                x powr (1 - \\<alpha>) / (1 - \\<alpha>)\\<bar>\n                          \\<le> c\n  0 < \\<alpha>\n  \\<alpha> \\<noteq> 1\n\ngoal (1 subgoal):\n 1. (\\<And>c3.\n        \\<lbrakk>0 < c3;\n         \\<And>x.\n            1 \\<le> x \\<Longrightarrow> \\<bar>R3 x\\<bar> \\<le> c3\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: R3_def)"], ["proof (state)\nthis:\n  0 < c3\n  1 \\<le> ?x \\<Longrightarrow> \\<bar>R3 ?x\\<bar> \\<le> c3\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma \\<alpha>)\n    \\<in> (\\<lambda>x. \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)) +o\n          O(\\<lambda>x. x powr max 1 \\<alpha>)", "define ub :: \"real \\<Rightarrow> real\" where\n    \"ub = (\\<lambda>x. x / (\\<alpha> * (\\<alpha> + 1)) + c2 / (\\<alpha> + 1) + c1 * (1 / (1 - \\<alpha>) * x + c3 * x powr \\<alpha>))\""], ["proof (state)\nthis:\n  ub =\n  (\\<lambda>x.\n      x / (\\<alpha> * (\\<alpha> + 1)) + c2 / (\\<alpha> + 1) +\n      c1 * (1 / (1 - \\<alpha>) * x + c3 * x powr \\<alpha>))\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma \\<alpha>)\n    \\<in> (\\<lambda>x. \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)) +o\n          O(\\<lambda>x. x powr max 1 \\<alpha>)", "have le: \"\\<bar>sum_upto (divisor_sigma \\<alpha>) x - \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar> \\<le> ub x\"\n    if x: \"x \\<ge> 1\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma \\<alpha>) x -\n          \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar>\n    \\<le> ub x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma \\<alpha>) x -\n          \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar>\n    \\<le> ub x", "have div_le: \"real (a div b) \\<le> x\" if \"a \\<le> x\" for a b :: nat"], ["proof (prove)\ngoal (1 subgoal):\n 1. real (a div b) \\<le> x", "by (rule order.trans[OF _ that(1)]) auto"], ["proof (state)\nthis:\n  real ?a \\<le> x \\<Longrightarrow> real (?a div ?b) \\<le> x\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma \\<alpha>) x -\n          \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar>\n    \\<le> ub x", "have \"sum_upto (divisor_sigma \\<alpha>) x =\n            sum_upto (dirichlet_prod (\\<lambda>n. real n powr \\<alpha>) (\\<lambda>_. 1)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma \\<alpha>) x =\n    sum_upto\n     (dirichlet_prod (\\<lambda>n. real n powr \\<alpha>) (\\<lambda>_. 1)) x", "by (simp add: divisor_sigma_conv_dirichlet_prod [abs_def] \n                    sum_upto_def divisor_sigma_1_left [symmetric])"], ["proof (state)\nthis:\n  sum_upto (divisor_sigma \\<alpha>) x =\n  sum_upto\n   (dirichlet_prod (\\<lambda>n. real n powr \\<alpha>) (\\<lambda>_. 1)) x\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma \\<alpha>) x -\n          \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar>\n    \\<le> ub x", "also"], ["proof (state)\nthis:\n  sum_upto (divisor_sigma \\<alpha>) x =\n  sum_upto\n   (dirichlet_prod (\\<lambda>n. real n powr \\<alpha>) (\\<lambda>_. 1)) x\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma \\<alpha>) x -\n          \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar>\n    \\<le> ub x", "have \"\\<dots> = sum_upto (\\<lambda>n. \\<Sum>d | d dvd n. real d powr \\<alpha>) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto\n     (dirichlet_prod (\\<lambda>n. real n powr \\<alpha>) (\\<lambda>_. 1)) x =\n    sum_upto (\\<lambda>n. \\<Sum>d | d dvd n. real d powr \\<alpha>) x", "by (simp add: dirichlet_prod_def)"], ["proof (state)\nthis:\n  sum_upto\n   (dirichlet_prod (\\<lambda>n. real n powr \\<alpha>) (\\<lambda>_. 1)) x =\n  sum_upto (\\<lambda>n. \\<Sum>d | d dvd n. real d powr \\<alpha>) x\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma \\<alpha>) x -\n          \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar>\n    \\<le> ub x", "also"], ["proof (state)\nthis:\n  sum_upto\n   (dirichlet_prod (\\<lambda>n. real n powr \\<alpha>) (\\<lambda>_. 1)) x =\n  sum_upto (\\<lambda>n. \\<Sum>d | d dvd n. real d powr \\<alpha>) x\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma \\<alpha>) x -\n          \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar>\n    \\<le> ub x", "have \"\\<dots> = (\\<Sum>(n, d) \\<in> (SIGMA n:{n. n > 0 \\<and> real n \\<le> x}. {d. d dvd n}). real d powr \\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>n. \\<Sum>d | d dvd n. real d powr \\<alpha>) x =\n    (\\<Sum>(n, d)\n           \\<in>(SIGMA n:{n. 0 < n \\<and> real n \\<le> x}. {d. d dvd n}).\n       real d powr \\<alpha>)", "unfolding sum_upto_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>n\\<in>{i. 0 < i \\<and> real i \\<le> x}.\n       \\<Sum>d | d dvd n. real d powr \\<alpha>) =\n    (\\<Sum>(n, d)\n           \\<in>(SIGMA n:{n. 0 < n \\<and> real n \\<le> x}. {d. d dvd n}).\n       real d powr \\<alpha>)", "by (subst sum.Sigma) auto"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>n. \\<Sum>d | d dvd n. real d powr \\<alpha>) x =\n  (\\<Sum>(n, d)\n         \\<in>(SIGMA n:{n. 0 < n \\<and> real n \\<le> x}. {d. d dvd n}).\n     real d powr \\<alpha>)\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma \\<alpha>) x -\n          \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar>\n    \\<le> ub x", "also"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>n. \\<Sum>d | d dvd n. real d powr \\<alpha>) x =\n  (\\<Sum>(n, d)\n         \\<in>(SIGMA n:{n. 0 < n \\<and> real n \\<le> x}. {d. d dvd n}).\n     real d powr \\<alpha>)\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma \\<alpha>) x -\n          \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar>\n    \\<le> ub x", "have \"\\<dots> = (\\<Sum>(d, q) \\<in> (SIGMA d:{d. d > 0 \\<and> real d \\<le> x}. {q. q > 0 \\<and> real q \\<le> x / d}). real q powr \\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(n, d)\n           \\<in>(SIGMA n:{n. 0 < n \\<and> real n \\<le> x}. {d. d dvd n}).\n       real d powr \\<alpha>) =\n    (\\<Sum>(d, q)\n           \\<in>(SIGMA xa:{d. 0 < d \\<and> real d \\<le> x}.\n                    {q. 0 < q \\<and> real q \\<le> x / real xa}).\n       real q powr \\<alpha>)", "by (rule sum.reindex_bij_witness[of _ \"\\<lambda>(d, q). (d * q, q)\" \"\\<lambda>(n, d). (n div d, d)\"])\n         (use div_le in \\<open>auto simp: field_simps\\<close>)"], ["proof (state)\nthis:\n  (\\<Sum>(n, d)\n         \\<in>(SIGMA n:{n. 0 < n \\<and> real n \\<le> x}. {d. d dvd n}).\n     real d powr \\<alpha>) =\n  (\\<Sum>(d, q)\n         \\<in>(SIGMA xa:{d. 0 < d \\<and> real d \\<le> x}.\n                  {q. 0 < q \\<and> real q \\<le> x / real xa}).\n     real q powr \\<alpha>)\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma \\<alpha>) x -\n          \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar>\n    \\<le> ub x", "also"], ["proof (state)\nthis:\n  (\\<Sum>(n, d)\n         \\<in>(SIGMA n:{n. 0 < n \\<and> real n \\<le> x}. {d. d dvd n}).\n     real d powr \\<alpha>) =\n  (\\<Sum>(d, q)\n         \\<in>(SIGMA xa:{d. 0 < d \\<and> real d \\<le> x}.\n                  {q. 0 < q \\<and> real q \\<le> x / real xa}).\n     real q powr \\<alpha>)\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma \\<alpha>) x -\n          \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar>\n    \\<le> ub x", "have \"\\<dots> = sum_upto (\\<lambda>d. sum_upto (\\<lambda>q. q powr \\<alpha>) (x / d)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(d, q)\n           \\<in>(SIGMA xa:{d. 0 < d \\<and> real d \\<le> x}.\n                    {q. 0 < q \\<and> real q \\<le> x / real xa}).\n       real q powr \\<alpha>) =\n    sum_upto\n     (\\<lambda>xa.\n         sum_upto (\\<lambda>x. real x powr \\<alpha>) (x / real xa))\n     x", "by (simp add: sum_upto_def sum.Sigma)"], ["proof (state)\nthis:\n  (\\<Sum>(d, q)\n         \\<in>(SIGMA xa:{d. 0 < d \\<and> real d \\<le> x}.\n                  {q. 0 < q \\<and> real q \\<le> x / real xa}).\n     real q powr \\<alpha>) =\n  sum_upto\n   (\\<lambda>xa. sum_upto (\\<lambda>x. real x powr \\<alpha>) (x / real xa))\n   x\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma \\<alpha>) x -\n          \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar>\n    \\<le> ub x", "also"], ["proof (state)\nthis:\n  (\\<Sum>(d, q)\n         \\<in>(SIGMA xa:{d. 0 < d \\<and> real d \\<le> x}.\n                  {q. 0 < q \\<and> real q \\<le> x / real xa}).\n     real q powr \\<alpha>) =\n  sum_upto\n   (\\<lambda>xa. sum_upto (\\<lambda>x. real x powr \\<alpha>) (x / real xa))\n   x\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma \\<alpha>) x -\n          \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar>\n    \\<le> ub x", "have \"\\<dots> = x powr (\\<alpha> + 1) * sum_upto (\\<lambda>d. 1 / d powr (\\<alpha> + 1)) x / (\\<alpha> + 1) +\n                    sum_upto (\\<lambda>d. R1 (x / d)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto\n     (\\<lambda>xa.\n         sum_upto (\\<lambda>x. real x powr \\<alpha>) (x / real xa))\n     x =\n    x powr (\\<alpha> + 1) *\n    sum_upto (\\<lambda>x. 1 / real x powr (\\<alpha> + 1)) x /\n    (\\<alpha> + 1) +\n    sum_upto (\\<lambda>xa. R1 (x / real xa)) x", "by (simp add: R1_def sum_upto_def sum.distrib sum_subtractf sum_divide_distrib\n                    powr_divide sum_distrib_left)"], ["proof (state)\nthis:\n  sum_upto\n   (\\<lambda>xa. sum_upto (\\<lambda>x. real x powr \\<alpha>) (x / real xa))\n   x =\n  x powr (\\<alpha> + 1) *\n  sum_upto (\\<lambda>x. 1 / real x powr (\\<alpha> + 1)) x /\n  (\\<alpha> + 1) +\n  sum_upto (\\<lambda>xa. R1 (x / real xa)) x\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma \\<alpha>) x -\n          \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar>\n    \\<le> ub x", "also"], ["proof (state)\nthis:\n  sum_upto\n   (\\<lambda>xa. sum_upto (\\<lambda>x. real x powr \\<alpha>) (x / real xa))\n   x =\n  x powr (\\<alpha> + 1) *\n  sum_upto (\\<lambda>x. 1 / real x powr (\\<alpha> + 1)) x /\n  (\\<alpha> + 1) +\n  sum_upto (\\<lambda>xa. R1 (x / real xa)) x\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma \\<alpha>) x -\n          \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar>\n    \\<le> ub x", "have \"sum_upto (\\<lambda>d. 1 / d powr (\\<alpha> + 1)) x = \\<zeta> - x powr -\\<alpha> / \\<alpha> + R2 x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>x. 1 / real x powr (\\<alpha> + 1)) x =\n    \\<zeta> - x powr - \\<alpha> / \\<alpha> + R2 x", "by (simp add: R2_def powr_minus field_simps powr_diff powr_add)"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>x. 1 / real x powr (\\<alpha> + 1)) x =\n  \\<zeta> - x powr - \\<alpha> / \\<alpha> + R2 x\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma \\<alpha>) x -\n          \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar>\n    \\<le> ub x", "finally"], ["proof (chain)\npicking this:\n  sum_upto (divisor_sigma \\<alpha>) x =\n  x powr (\\<alpha> + 1) * (\\<zeta> - x powr - \\<alpha> / \\<alpha> + R2 x) /\n  (\\<alpha> + 1) +\n  sum_upto (\\<lambda>xa. R1 (x / real xa)) x", "have eq: \"sum_upto (divisor_sigma \\<alpha>) x =\n       x powr (\\<alpha> + 1) * (\\<zeta> - x powr -\\<alpha> / \\<alpha> + R2 x) / (\\<alpha> + 1) + sum_upto (\\<lambda>d. R1 (x / d)) x\""], ["proof (prove)\nusing this:\n  sum_upto (divisor_sigma \\<alpha>) x =\n  x powr (\\<alpha> + 1) * (\\<zeta> - x powr - \\<alpha> / \\<alpha> + R2 x) /\n  (\\<alpha> + 1) +\n  sum_upto (\\<lambda>xa. R1 (x / real xa)) x\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma \\<alpha>) x =\n    x powr (\\<alpha> + 1) *\n    (\\<zeta> - x powr - \\<alpha> / \\<alpha> + R2 x) /\n    (\\<alpha> + 1) +\n    sum_upto (\\<lambda>xa. R1 (x / real xa)) x", "."], ["proof (state)\nthis:\n  sum_upto (divisor_sigma \\<alpha>) x =\n  x powr (\\<alpha> + 1) * (\\<zeta> - x powr - \\<alpha> / \\<alpha> + R2 x) /\n  (\\<alpha> + 1) +\n  sum_upto (\\<lambda>xa. R1 (x / real xa)) x\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma \\<alpha>) x -\n          \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar>\n    \\<le> ub x", "have \"sum_upto (divisor_sigma \\<alpha>) x - \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1) =\n            -x / (\\<alpha> * (\\<alpha> + 1)) + x powr (\\<alpha> + 1) / (\\<alpha> + 1) * R2 x + sum_upto (\\<lambda>d. R1 (x / d)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma \\<alpha>) x -\n    \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1) =\n    - x / (\\<alpha> * (\\<alpha> + 1)) +\n    x powr (\\<alpha> + 1) / (\\<alpha> + 1) * R2 x +\n    sum_upto (\\<lambda>xa. R1 (x / real xa)) x", "using x \\<alpha>"], ["proof (prove)\nusing this:\n  1 \\<le> x\n  0 < \\<alpha>\n  \\<alpha> \\<noteq> 1\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma \\<alpha>) x -\n    \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1) =\n    - x / (\\<alpha> * (\\<alpha> + 1)) +\n    x powr (\\<alpha> + 1) / (\\<alpha> + 1) * R2 x +\n    sum_upto (\\<lambda>xa. R1 (x / real xa)) x", "by (subst eq, simp add: divide_simps\n                         del: div_mult_self3 div_mult_self4 div_mult_self2 div_mult_self1)\n         (simp add: field_simps power2_eq_square powr_add powr_minus del: div_diff div_add\n               del: div_mult_self3 div_mult_self4 div_mult_self2 div_mult_self1)"], ["proof (state)\nthis:\n  sum_upto (divisor_sigma \\<alpha>) x -\n  \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1) =\n  - x / (\\<alpha> * (\\<alpha> + 1)) +\n  x powr (\\<alpha> + 1) / (\\<alpha> + 1) * R2 x +\n  sum_upto (\\<lambda>xa. R1 (x / real xa)) x\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma \\<alpha>) x -\n          \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar>\n    \\<le> ub x", "also"], ["proof (state)\nthis:\n  sum_upto (divisor_sigma \\<alpha>) x -\n  \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1) =\n  - x / (\\<alpha> * (\\<alpha> + 1)) +\n  x powr (\\<alpha> + 1) / (\\<alpha> + 1) * R2 x +\n  sum_upto (\\<lambda>xa. R1 (x / real xa)) x\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma \\<alpha>) x -\n          \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar>\n    \\<le> ub x", "have \"\\<bar>\\<dots>\\<bar> \\<le> ub x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>- x / (\\<alpha> * (\\<alpha> + 1)) +\n          x powr (\\<alpha> + 1) / (\\<alpha> + 1) * R2 x +\n          sum_upto (\\<lambda>xa. R1 (x / real xa)) x\\<bar>\n    \\<le> ub x", "unfolding ub_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>- x / (\\<alpha> * (\\<alpha> + 1)) +\n          x powr (\\<alpha> + 1) / (\\<alpha> + 1) * R2 x +\n          sum_upto (\\<lambda>xa. R1 (x / real xa)) x\\<bar>\n    \\<le> x / (\\<alpha> * (\\<alpha> + 1)) + c2 / (\\<alpha> + 1) +\n          c1 * (1 / (1 - \\<alpha>) * x + c3 * x powr \\<alpha>)", "proof (rule order.trans[OF abs_triangle_ineq] order.trans[OF abs_triangle_ineq4] add_mono)+"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<bar>- x / (\\<alpha> * (\\<alpha> + 1))\\<bar>\n    \\<le> x / (\\<alpha> * (\\<alpha> + 1))\n 2. \\<bar>x powr (\\<alpha> + 1) / (\\<alpha> + 1) * R2 x\\<bar>\n    \\<le> c2 / (\\<alpha> + 1)\n 3. \\<bar>sum_upto (\\<lambda>xa. R1 (x / real xa)) x\\<bar>\n    \\<le> c1 * (1 / (1 - \\<alpha>) * x + c3 * x powr \\<alpha>)", "have \"\\<bar>x powr (\\<alpha> + 1) / (\\<alpha> + 1) * R2 x\\<bar> = x powr (\\<alpha> + 1) / (\\<alpha> + 1) * \\<bar>R2 x\\<bar>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>x powr (\\<alpha> + 1) / (\\<alpha> + 1) * R2 x\\<bar> =\n    x powr (\\<alpha> + 1) / (\\<alpha> + 1) * \\<bar>R2 x\\<bar>", "using x \\<alpha>"], ["proof (prove)\nusing this:\n  1 \\<le> x\n  0 < \\<alpha>\n  \\<alpha> \\<noteq> 1\n\ngoal (1 subgoal):\n 1. \\<bar>x powr (\\<alpha> + 1) / (\\<alpha> + 1) * R2 x\\<bar> =\n    x powr (\\<alpha> + 1) / (\\<alpha> + 1) * \\<bar>R2 x\\<bar>", "by (simp add: abs_mult)"], ["proof (state)\nthis:\n  \\<bar>x powr (\\<alpha> + 1) / (\\<alpha> + 1) * R2 x\\<bar> =\n  x powr (\\<alpha> + 1) / (\\<alpha> + 1) * \\<bar>R2 x\\<bar>\n\ngoal (3 subgoals):\n 1. \\<bar>- x / (\\<alpha> * (\\<alpha> + 1))\\<bar>\n    \\<le> x / (\\<alpha> * (\\<alpha> + 1))\n 2. \\<bar>x powr (\\<alpha> + 1) / (\\<alpha> + 1) * R2 x\\<bar>\n    \\<le> c2 / (\\<alpha> + 1)\n 3. \\<bar>sum_upto (\\<lambda>xa. R1 (x / real xa)) x\\<bar>\n    \\<le> c1 * (1 / (1 - \\<alpha>) * x + c3 * x powr \\<alpha>)", "also"], ["proof (state)\nthis:\n  \\<bar>x powr (\\<alpha> + 1) / (\\<alpha> + 1) * R2 x\\<bar> =\n  x powr (\\<alpha> + 1) / (\\<alpha> + 1) * \\<bar>R2 x\\<bar>\n\ngoal (3 subgoals):\n 1. \\<bar>- x / (\\<alpha> * (\\<alpha> + 1))\\<bar>\n    \\<le> x / (\\<alpha> * (\\<alpha> + 1))\n 2. \\<bar>x powr (\\<alpha> + 1) / (\\<alpha> + 1) * R2 x\\<bar>\n    \\<le> c2 / (\\<alpha> + 1)\n 3. \\<bar>sum_upto (\\<lambda>xa. R1 (x / real xa)) x\\<bar>\n    \\<le> c1 * (1 / (1 - \\<alpha>) * x + c3 * x powr \\<alpha>)", "have \"\\<dots> \\<le> x powr (\\<alpha> + 1) / (\\<alpha> + 1) * (c2 * x powr (-\\<alpha>-1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x powr (\\<alpha> + 1) / (\\<alpha> + 1) * \\<bar>R2 x\\<bar>\n    \\<le> x powr (\\<alpha> + 1) / (\\<alpha> + 1) *\n          (c2 * x powr (- \\<alpha> - 1))", "using x \\<alpha>"], ["proof (prove)\nusing this:\n  1 \\<le> x\n  0 < \\<alpha>\n  \\<alpha> \\<noteq> 1\n\ngoal (1 subgoal):\n 1. x powr (\\<alpha> + 1) / (\\<alpha> + 1) * \\<bar>R2 x\\<bar>\n    \\<le> x powr (\\<alpha> + 1) / (\\<alpha> + 1) *\n          (c2 * x powr (- \\<alpha> - 1))", "by (intro mult_left_mono c2) auto"], ["proof (state)\nthis:\n  x powr (\\<alpha> + 1) / (\\<alpha> + 1) * \\<bar>R2 x\\<bar>\n  \\<le> x powr (\\<alpha> + 1) / (\\<alpha> + 1) *\n        (c2 * x powr (- \\<alpha> - 1))\n\ngoal (3 subgoals):\n 1. \\<bar>- x / (\\<alpha> * (\\<alpha> + 1))\\<bar>\n    \\<le> x / (\\<alpha> * (\\<alpha> + 1))\n 2. \\<bar>x powr (\\<alpha> + 1) / (\\<alpha> + 1) * R2 x\\<bar>\n    \\<le> c2 / (\\<alpha> + 1)\n 3. \\<bar>sum_upto (\\<lambda>xa. R1 (x / real xa)) x\\<bar>\n    \\<le> c1 * (1 / (1 - \\<alpha>) * x + c3 * x powr \\<alpha>)", "also"], ["proof (state)\nthis:\n  x powr (\\<alpha> + 1) / (\\<alpha> + 1) * \\<bar>R2 x\\<bar>\n  \\<le> x powr (\\<alpha> + 1) / (\\<alpha> + 1) *\n        (c2 * x powr (- \\<alpha> - 1))\n\ngoal (3 subgoals):\n 1. \\<bar>- x / (\\<alpha> * (\\<alpha> + 1))\\<bar>\n    \\<le> x / (\\<alpha> * (\\<alpha> + 1))\n 2. \\<bar>x powr (\\<alpha> + 1) / (\\<alpha> + 1) * R2 x\\<bar>\n    \\<le> c2 / (\\<alpha> + 1)\n 3. \\<bar>sum_upto (\\<lambda>xa. R1 (x / real xa)) x\\<bar>\n    \\<le> c1 * (1 / (1 - \\<alpha>) * x + c3 * x powr \\<alpha>)", "have \"\\<dots> = c2 / (\\<alpha> + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x powr (\\<alpha> + 1) / (\\<alpha> + 1) *\n    (c2 * x powr (- \\<alpha> - 1)) =\n    c2 / (\\<alpha> + 1)", "using \\<alpha> x"], ["proof (prove)\nusing this:\n  0 < \\<alpha>\n  \\<alpha> \\<noteq> 1\n  1 \\<le> x\n\ngoal (1 subgoal):\n 1. x powr (\\<alpha> + 1) / (\\<alpha> + 1) *\n    (c2 * x powr (- \\<alpha> - 1)) =\n    c2 / (\\<alpha> + 1)", "by (simp add: field_simps powr_diff powr_minus powr_add)"], ["proof (state)\nthis:\n  x powr (\\<alpha> + 1) / (\\<alpha> + 1) * (c2 * x powr (- \\<alpha> - 1)) =\n  c2 / (\\<alpha> + 1)\n\ngoal (3 subgoals):\n 1. \\<bar>- x / (\\<alpha> * (\\<alpha> + 1))\\<bar>\n    \\<le> x / (\\<alpha> * (\\<alpha> + 1))\n 2. \\<bar>x powr (\\<alpha> + 1) / (\\<alpha> + 1) * R2 x\\<bar>\n    \\<le> c2 / (\\<alpha> + 1)\n 3. \\<bar>sum_upto (\\<lambda>xa. R1 (x / real xa)) x\\<bar>\n    \\<le> c1 * (1 / (1 - \\<alpha>) * x + c3 * x powr \\<alpha>)", "finally"], ["proof (chain)\npicking this:\n  \\<bar>x powr (\\<alpha> + 1) / (\\<alpha> + 1) * R2 x\\<bar>\n  \\<le> c2 / (\\<alpha> + 1)", "show \"\\<bar>x powr (\\<alpha> + 1) / (\\<alpha> + 1) * R2 x\\<bar> \\<le> c2 / (\\<alpha> + 1)\""], ["proof (prove)\nusing this:\n  \\<bar>x powr (\\<alpha> + 1) / (\\<alpha> + 1) * R2 x\\<bar>\n  \\<le> c2 / (\\<alpha> + 1)\n\ngoal (1 subgoal):\n 1. \\<bar>x powr (\\<alpha> + 1) / (\\<alpha> + 1) * R2 x\\<bar>\n    \\<le> c2 / (\\<alpha> + 1)", "."], ["proof (state)\nthis:\n  \\<bar>x powr (\\<alpha> + 1) / (\\<alpha> + 1) * R2 x\\<bar>\n  \\<le> c2 / (\\<alpha> + 1)\n\ngoal (2 subgoals):\n 1. \\<bar>- x / (\\<alpha> * (\\<alpha> + 1))\\<bar>\n    \\<le> x / (\\<alpha> * (\\<alpha> + 1))\n 2. \\<bar>sum_upto (\\<lambda>xa. R1 (x / real xa)) x\\<bar>\n    \\<le> c1 * (1 / (1 - \\<alpha>) * x + c3 * x powr \\<alpha>)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<bar>- x / (\\<alpha> * (\\<alpha> + 1))\\<bar>\n    \\<le> x / (\\<alpha> * (\\<alpha> + 1))\n 2. \\<bar>sum_upto (\\<lambda>xa. R1 (x / real xa)) x\\<bar>\n    \\<le> c1 * (1 / (1 - \\<alpha>) * x + c3 * x powr \\<alpha>)", "have \"\\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar> \\<le> sum_upto (\\<lambda>d. \\<bar>R1 (x / real d)\\<bar>) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n    \\<le> sum_upto (\\<lambda>d. \\<bar>R1 (x / real d)\\<bar>) x", "unfolding sum_upto_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>\\<Sum>d\\<in>{i. 0 < i \\<and> real i \\<le> x}.\n            R1 (x / real d)\\<bar>\n    \\<le> (\\<Sum>d\\<in>{i. 0 < i \\<and> real i \\<le> x}.\n             \\<bar>R1 (x / real d)\\<bar>)", "by (rule sum_abs)"], ["proof (state)\nthis:\n  \\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n  \\<le> sum_upto (\\<lambda>d. \\<bar>R1 (x / real d)\\<bar>) x\n\ngoal (2 subgoals):\n 1. \\<bar>- x / (\\<alpha> * (\\<alpha> + 1))\\<bar>\n    \\<le> x / (\\<alpha> * (\\<alpha> + 1))\n 2. \\<bar>sum_upto (\\<lambda>xa. R1 (x / real xa)) x\\<bar>\n    \\<le> c1 * (1 / (1 - \\<alpha>) * x + c3 * x powr \\<alpha>)", "also"], ["proof (state)\nthis:\n  \\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n  \\<le> sum_upto (\\<lambda>d. \\<bar>R1 (x / real d)\\<bar>) x\n\ngoal (2 subgoals):\n 1. \\<bar>- x / (\\<alpha> * (\\<alpha> + 1))\\<bar>\n    \\<le> x / (\\<alpha> * (\\<alpha> + 1))\n 2. \\<bar>sum_upto (\\<lambda>xa. R1 (x / real xa)) x\\<bar>\n    \\<le> c1 * (1 / (1 - \\<alpha>) * x + c3 * x powr \\<alpha>)", "have \"\\<dots> \\<le> sum_upto (\\<lambda>d. c1 * (x / real d) powr \\<alpha>) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>d. \\<bar>R1 (x / real d)\\<bar>) x\n    \\<le> sum_upto (\\<lambda>d. c1 * (x / real d) powr \\<alpha>) x", "unfolding sum_upto_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d\\<in>{i. 0 < i \\<and> real i \\<le> x}.\n       \\<bar>R1 (x / real d)\\<bar>)\n    \\<le> (\\<Sum>d\\<in>{i. 0 < i \\<and> real i \\<le> x}.\n             c1 * (x / real d) powr \\<alpha>)", "by (intro sum_mono c1) auto"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>d. \\<bar>R1 (x / real d)\\<bar>) x\n  \\<le> sum_upto (\\<lambda>d. c1 * (x / real d) powr \\<alpha>) x\n\ngoal (2 subgoals):\n 1. \\<bar>- x / (\\<alpha> * (\\<alpha> + 1))\\<bar>\n    \\<le> x / (\\<alpha> * (\\<alpha> + 1))\n 2. \\<bar>sum_upto (\\<lambda>xa. R1 (x / real xa)) x\\<bar>\n    \\<le> c1 * (1 / (1 - \\<alpha>) * x + c3 * x powr \\<alpha>)", "also"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>d. \\<bar>R1 (x / real d)\\<bar>) x\n  \\<le> sum_upto (\\<lambda>d. c1 * (x / real d) powr \\<alpha>) x\n\ngoal (2 subgoals):\n 1. \\<bar>- x / (\\<alpha> * (\\<alpha> + 1))\\<bar>\n    \\<le> x / (\\<alpha> * (\\<alpha> + 1))\n 2. \\<bar>sum_upto (\\<lambda>xa. R1 (x / real xa)) x\\<bar>\n    \\<le> c1 * (1 / (1 - \\<alpha>) * x + c3 * x powr \\<alpha>)", "have \"\\<dots> = c1 * x powr \\<alpha> * sum_upto (\\<lambda>d. 1 / real d powr \\<alpha>) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>d. c1 * (x / real d) powr \\<alpha>) x =\n    c1 * x powr \\<alpha> * sum_upto (\\<lambda>d. 1 / real d powr \\<alpha>) x", "by (simp add: sum_upto_def sum_distrib_left powr_divide)"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>d. c1 * (x / real d) powr \\<alpha>) x =\n  c1 * x powr \\<alpha> * sum_upto (\\<lambda>d. 1 / real d powr \\<alpha>) x\n\ngoal (2 subgoals):\n 1. \\<bar>- x / (\\<alpha> * (\\<alpha> + 1))\\<bar>\n    \\<le> x / (\\<alpha> * (\\<alpha> + 1))\n 2. \\<bar>sum_upto (\\<lambda>xa. R1 (x / real xa)) x\\<bar>\n    \\<le> c1 * (1 / (1 - \\<alpha>) * x + c3 * x powr \\<alpha>)", "also"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>d. c1 * (x / real d) powr \\<alpha>) x =\n  c1 * x powr \\<alpha> * sum_upto (\\<lambda>d. 1 / real d powr \\<alpha>) x\n\ngoal (2 subgoals):\n 1. \\<bar>- x / (\\<alpha> * (\\<alpha> + 1))\\<bar>\n    \\<le> x / (\\<alpha> * (\\<alpha> + 1))\n 2. \\<bar>sum_upto (\\<lambda>xa. R1 (x / real xa)) x\\<bar>\n    \\<le> c1 * (1 / (1 - \\<alpha>) * x + c3 * x powr \\<alpha>)", "have \"sum_upto (\\<lambda>d. 1 / real d powr \\<alpha>) x = x powr (1-\\<alpha>) / (1-\\<alpha>) + R3 x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>d. 1 / real d powr \\<alpha>) x =\n    x powr (1 - \\<alpha>) / (1 - \\<alpha>) + R3 x", "using x"], ["proof (prove)\nusing this:\n  1 \\<le> x\n\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>d. 1 / real d powr \\<alpha>) x =\n    x powr (1 - \\<alpha>) / (1 - \\<alpha>) + R3 x", "by (simp add: R3_def powr_minus field_simps)"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>d. 1 / real d powr \\<alpha>) x =\n  x powr (1 - \\<alpha>) / (1 - \\<alpha>) + R3 x\n\ngoal (2 subgoals):\n 1. \\<bar>- x / (\\<alpha> * (\\<alpha> + 1))\\<bar>\n    \\<le> x / (\\<alpha> * (\\<alpha> + 1))\n 2. \\<bar>sum_upto (\\<lambda>xa. R1 (x / real xa)) x\\<bar>\n    \\<le> c1 * (1 / (1 - \\<alpha>) * x + c3 * x powr \\<alpha>)", "also"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>d. 1 / real d powr \\<alpha>) x =\n  x powr (1 - \\<alpha>) / (1 - \\<alpha>) + R3 x\n\ngoal (2 subgoals):\n 1. \\<bar>- x / (\\<alpha> * (\\<alpha> + 1))\\<bar>\n    \\<le> x / (\\<alpha> * (\\<alpha> + 1))\n 2. \\<bar>sum_upto (\\<lambda>xa. R1 (x / real xa)) x\\<bar>\n    \\<le> c1 * (1 / (1 - \\<alpha>) * x + c3 * x powr \\<alpha>)", "have \"c1 * x powr \\<alpha> * (x powr (1 - \\<alpha>) / (1 - \\<alpha>) + R3 x) =\n                   c1 / (1 - \\<alpha>) * x + c1 * x powr \\<alpha> * R3 x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c1 * x powr \\<alpha> * (x powr (1 - \\<alpha>) / (1 - \\<alpha>) + R3 x) =\n    c1 / (1 - \\<alpha>) * x + c1 * x powr \\<alpha> * R3 x", "using x"], ["proof (prove)\nusing this:\n  1 \\<le> x\n\ngoal (1 subgoal):\n 1. c1 * x powr \\<alpha> * (x powr (1 - \\<alpha>) / (1 - \\<alpha>) + R3 x) =\n    c1 / (1 - \\<alpha>) * x + c1 * x powr \\<alpha> * R3 x", "by (simp add: powr_diff divide_simps\n                    del: div_mult_self3 div_mult_self4 div_mult_self2 div_mult_self1)\n                   (simp add: field_simps)"], ["proof (state)\nthis:\n  c1 * x powr \\<alpha> * (x powr (1 - \\<alpha>) / (1 - \\<alpha>) + R3 x) =\n  c1 / (1 - \\<alpha>) * x + c1 * x powr \\<alpha> * R3 x\n\ngoal (2 subgoals):\n 1. \\<bar>- x / (\\<alpha> * (\\<alpha> + 1))\\<bar>\n    \\<le> x / (\\<alpha> * (\\<alpha> + 1))\n 2. \\<bar>sum_upto (\\<lambda>xa. R1 (x / real xa)) x\\<bar>\n    \\<le> c1 * (1 / (1 - \\<alpha>) * x + c3 * x powr \\<alpha>)", "also"], ["proof (state)\nthis:\n  c1 * x powr \\<alpha> * (x powr (1 - \\<alpha>) / (1 - \\<alpha>) + R3 x) =\n  c1 / (1 - \\<alpha>) * x + c1 * x powr \\<alpha> * R3 x\n\ngoal (2 subgoals):\n 1. \\<bar>- x / (\\<alpha> * (\\<alpha> + 1))\\<bar>\n    \\<le> x / (\\<alpha> * (\\<alpha> + 1))\n 2. \\<bar>sum_upto (\\<lambda>xa. R1 (x / real xa)) x\\<bar>\n    \\<le> c1 * (1 / (1 - \\<alpha>) * x + c3 * x powr \\<alpha>)", "have \"c1 * x powr \\<alpha> * R3 x \\<le> c1 * x powr \\<alpha> * c3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c1 * x powr \\<alpha> * R3 x \\<le> c1 * x powr \\<alpha> * c3", "using x c1(1) c3(2)[of x]"], ["proof (prove)\nusing this:\n  1 \\<le> x\n  0 < c1\n  1 \\<le> x \\<Longrightarrow> \\<bar>R3 x\\<bar> \\<le> c3\n\ngoal (1 subgoal):\n 1. c1 * x powr \\<alpha> * R3 x \\<le> c1 * x powr \\<alpha> * c3", "by (intro mult_left_mono) auto"], ["proof (state)\nthis:\n  c1 * x powr \\<alpha> * R3 x \\<le> c1 * x powr \\<alpha> * c3\n\ngoal (2 subgoals):\n 1. \\<bar>- x / (\\<alpha> * (\\<alpha> + 1))\\<bar>\n    \\<le> x / (\\<alpha> * (\\<alpha> + 1))\n 2. \\<bar>sum_upto (\\<lambda>xa. R1 (x / real xa)) x\\<bar>\n    \\<le> c1 * (1 / (1 - \\<alpha>) * x + c3 * x powr \\<alpha>)", "finally"], ["proof (chain)\npicking this:\n  (\\<And>xa y.\n      xa \\<le> y \\<Longrightarrow>\n      c1 / (1 - \\<alpha>) * x + xa\n      \\<le> c1 / (1 - \\<alpha>) * x + y) \\<Longrightarrow>\n  \\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n  \\<le> c1 / (1 - \\<alpha>) * x + c1 * x powr \\<alpha> * c3", "show \"\\<bar>sum_upto (\\<lambda>d. R1 (x / d)) x\\<bar> \\<le> c1 * (1 / (1 - \\<alpha>) * x + c3 * x powr \\<alpha>)\""], ["proof (prove)\nusing this:\n  (\\<And>xa y.\n      xa \\<le> y \\<Longrightarrow>\n      c1 / (1 - \\<alpha>) * x + xa\n      \\<le> c1 / (1 - \\<alpha>) * x + y) \\<Longrightarrow>\n  \\<bar>sum_upto (\\<lambda>d. R1 (x / real d)) x\\<bar>\n  \\<le> c1 / (1 - \\<alpha>) * x + c1 * x powr \\<alpha> * c3\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (\\<lambda>xa. R1 (x / real xa)) x\\<bar>\n    \\<le> c1 * (1 / (1 - \\<alpha>) * x + c3 * x powr \\<alpha>)", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  \\<bar>sum_upto (\\<lambda>xa. R1 (x / real xa)) x\\<bar>\n  \\<le> c1 * (1 / (1 - \\<alpha>) * x + c3 * x powr \\<alpha>)\n\ngoal (1 subgoal):\n 1. \\<bar>- x / (\\<alpha> * (\\<alpha> + 1))\\<bar>\n    \\<le> x / (\\<alpha> * (\\<alpha> + 1))", "qed (use \\<alpha> x in simp_all)"], ["proof (state)\nthis:\n  \\<bar>- x / (\\<alpha> * (\\<alpha> + 1)) +\n        x powr (\\<alpha> + 1) / (\\<alpha> + 1) * R2 x +\n        sum_upto (\\<lambda>xa. R1 (x / real xa)) x\\<bar>\n  \\<le> ub x\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma \\<alpha>) x -\n          \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar>\n    \\<le> ub x", "finally"], ["proof (chain)\npicking this:\n  \\<bar>sum_upto (divisor_sigma \\<alpha>) x -\n        \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar>\n  \\<le> ub x", "show \"\\<bar>sum_upto (divisor_sigma \\<alpha>) x - \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar> \\<le> ub x\""], ["proof (prove)\nusing this:\n  \\<bar>sum_upto (divisor_sigma \\<alpha>) x -\n        \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar>\n  \\<le> ub x\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma \\<alpha>) x -\n          \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar>\n    \\<le> ub x", "."], ["proof (state)\nthis:\n  \\<bar>sum_upto (divisor_sigma \\<alpha>) x -\n        \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar>\n  \\<le> ub x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  1 \\<le> ?x \\<Longrightarrow>\n  \\<bar>sum_upto (divisor_sigma \\<alpha>) ?x -\n        \\<zeta> / (\\<alpha> + 1) * ?x powr (\\<alpha> + 1)\\<bar>\n  \\<le> ub ?x\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma \\<alpha>)\n    \\<in> (\\<lambda>x. \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)) +o\n          O(\\<lambda>x. x powr max 1 \\<alpha>)", "have \"eventually (\\<lambda>x. \\<bar>sum_upto (divisor_sigma \\<alpha>) x - \\<zeta> / (\\<alpha>+1) * x powr (\\<alpha>+1)\\<bar> \\<le> ub x) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top.\n       \\<bar>sum_upto (divisor_sigma \\<alpha>) x -\n             \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar>\n       \\<le> ub x", "using eventually_ge_at_top[of 1]"], ["proof (prove)\nusing this:\n  eventually ((\\<le>) (1::?'a1)) at_top\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top.\n       \\<bar>sum_upto (divisor_sigma \\<alpha>) x -\n             \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar>\n       \\<le> ub x", "by eventually_elim (use le in auto)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_top.\n     \\<bar>sum_upto (divisor_sigma \\<alpha>) x -\n           \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar>\n     \\<le> ub x\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma \\<alpha>)\n    \\<in> (\\<lambda>x. \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)) +o\n          O(\\<lambda>x. x powr max 1 \\<alpha>)", "hence \"eventually (\\<lambda>x. \\<bar>sum_upto (divisor_sigma \\<alpha>) x - \\<zeta>/(\\<alpha>+1) * x powr (\\<alpha>+1)\\<bar> \\<le> \\<bar>ub x\\<bar>) at_top\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at_top.\n     \\<bar>sum_upto (divisor_sigma \\<alpha>) x -\n           \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar>\n     \\<le> ub x\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top.\n       \\<bar>sum_upto (divisor_sigma \\<alpha>) x -\n             \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar>\n       \\<le> \\<bar>ub x\\<bar>", "by eventually_elim linarith"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_top.\n     \\<bar>sum_upto (divisor_sigma \\<alpha>) x -\n           \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar>\n     \\<le> \\<bar>ub x\\<bar>\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma \\<alpha>)\n    \\<in> (\\<lambda>x. \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)) +o\n          O(\\<lambda>x. x powr max 1 \\<alpha>)", "hence \"(\\<lambda>x. sum_upto (divisor_sigma \\<alpha>) x - \\<zeta>/(\\<alpha>+1) * x powr (\\<alpha>+1)) \\<in> O(ub)\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at_top.\n     \\<bar>sum_upto (divisor_sigma \\<alpha>) x -\n           \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)\\<bar>\n     \\<le> \\<bar>ub x\\<bar>\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        sum_upto (divisor_sigma \\<alpha>) x -\n        \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1))\n    \\<in> O(ub)", "by (intro landau_o.bigI[of 1]) auto"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      sum_upto (divisor_sigma \\<alpha>) x -\n      \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1))\n  \\<in> O(ub)\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma \\<alpha>)\n    \\<in> (\\<lambda>x. \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)) +o\n          O(\\<lambda>x. x powr max 1 \\<alpha>)", "also"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      sum_upto (divisor_sigma \\<alpha>) x -\n      \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1))\n  \\<in> O(ub)\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma \\<alpha>)\n    \\<in> (\\<lambda>x. \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)) +o\n          O(\\<lambda>x. x powr max 1 \\<alpha>)", "have \"ub \\<in> O(\\<lambda>x. x powr max 1 \\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ub \\<in> O(\\<lambda>x. x powr max 1 \\<alpha>)", "using \\<alpha>"], ["proof (prove)\nusing this:\n  0 < \\<alpha>\n  \\<alpha> \\<noteq> 1\n\ngoal (1 subgoal):\n 1. ub \\<in> O(\\<lambda>x. x powr max 1 \\<alpha>)", "unfolding ub_def"], ["proof (prove)\nusing this:\n  0 < \\<alpha>\n  \\<alpha> \\<noteq> 1\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        x / (\\<alpha> * (\\<alpha> + 1)) + c2 / (\\<alpha> + 1) +\n        c1 * (1 / (1 - \\<alpha>) * x + c3 * x powr \\<alpha>))\n    \\<in> O(\\<lambda>x. x powr max 1 \\<alpha>)", "by (cases \"\\<alpha> \\<ge> 1\"; real_asymp)"], ["proof (state)\nthis:\n  ub \\<in> O(\\<lambda>x. x powr max 1 \\<alpha>)\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma \\<alpha>)\n    \\<in> (\\<lambda>x. \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)) +o\n          O(\\<lambda>x. x powr max 1 \\<alpha>)", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>x.\n      sum_upto (divisor_sigma \\<alpha>) x -\n      \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1))\n  \\<in> O(\\<lambda>x. x powr max 1 \\<alpha>)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      sum_upto (divisor_sigma \\<alpha>) x -\n      \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1))\n  \\<in> O(\\<lambda>x. x powr max 1 \\<alpha>)\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma \\<alpha>)\n    \\<in> (\\<lambda>x. \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)) +o\n          O(\\<lambda>x. x powr max 1 \\<alpha>)", "by (subst set_minus_plus [symmetric])\n       (simp_all add: fun_diff_def algebra_simps \\<zeta>_def zeta_even_numeral)"], ["proof (state)\nthis:\n  sum_upto (divisor_sigma \\<alpha>)\n  \\<in> (\\<lambda>x. \\<zeta> / (\\<alpha> + 1) * x powr (\\<alpha> + 1)) +o\n        O(\\<lambda>x. x powr max 1 \\<alpha>)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Case 3: $\\alpha < 0$\\<close>"], ["", "text \\<open>\n  Last, we consider the case of a negative exponent. We have for $\\alpha > 0$:\n  \\[\\sum_{n\\leq x} \\sigma_{-\\alpha}(n) = \\zeta(\\alpha + 1)x + O(R(x))\\]\n  where $R(x) = \\ln x$ if $\\alpha = 1$ and $R(x) = x^{\\text{max}(0, 1-\\alpha)}$ otherwise.\n\\<close>"], ["", "theorem summatory_divisor_sigma_asymptotics_neg:\n  fixes \\<alpha> :: real\n  assumes \\<alpha>: \"\\<alpha> > 0\"\n  defines \"\\<delta> \\<equiv> max 0 (1 - \\<alpha>)\"\n  defines \"\\<zeta> \\<equiv> Re (zeta (\\<alpha> + 1))\"\n  shows  \"sum_upto (divisor_sigma (-\\<alpha>)) =o (if \\<alpha> = 1 then (\\<lambda>x. pi\\<^sup>2/6 * x) +o O(ln)\n                                                     else (\\<lambda>x. \\<zeta> * x) +o O(\\<lambda>x. x powr \\<delta>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "define Ra where \"Ra = (\\<lambda>x. -sum_upto (\\<lambda>d. d powr (-\\<alpha>) * frac (x / d)) x)\""], ["proof (state)\nthis:\n  Ra =\n  (\\<lambda>x.\n      - sum_upto (\\<lambda>xa. real xa powr - \\<alpha> * frac (x / real xa))\n         x)\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "define R1 where \"R1 = (\\<lambda>x. sum_upto (\\<lambda>d. real d powr (-\\<alpha>)) x - (x powr (1 - \\<alpha>) / (1 - \\<alpha>) + \\<zeta>))\""], ["proof (state)\nthis:\n  R1 =\n  (\\<lambda>x.\n      sum_upto (\\<lambda>d. real d powr - \\<alpha>) x -\n      (x powr (1 - \\<alpha>) / (1 - \\<alpha>) + \\<zeta>))\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "define R2 where \"R2 = (\\<lambda>x. sum_upto (\\<lambda>d. d powr (-\\<alpha> - 1)) x - (\\<zeta> - x powr -\\<alpha> / \\<alpha>))\""], ["proof (state)\nthis:\n  R2 =\n  (\\<lambda>x.\n      sum_upto (\\<lambda>x. real x powr (- \\<alpha> - 1)) x -\n      (\\<zeta> - x powr - \\<alpha> / \\<alpha>))\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "define R3 where \"R3 = (\\<lambda>x. sum_upto (\\<lambda>d. d powr -\\<alpha>) x - x powr (1 - \\<alpha>) / (1 - \\<alpha>))\""], ["proof (state)\nthis:\n  R3 =\n  (\\<lambda>x.\n      sum_upto (\\<lambda>x. real x powr - \\<alpha>) x -\n      x powr (1 - \\<alpha>) / (1 - \\<alpha>))\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "obtain c2 where c2: \"c2 > 0\" \"\\<And>x. x \\<ge> 1 \\<Longrightarrow> \\<bar>R2 x\\<bar> \\<le> c2 * x powr (-\\<alpha>-1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c2.\n        \\<lbrakk>0 < c2;\n         \\<And>x.\n            1 \\<le> x \\<Longrightarrow>\n            \\<bar>R2 x\\<bar> \\<le> c2 * x powr (- \\<alpha> - 1)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using zeta_partial_sum_le_pos[of \"\\<alpha> + 1\"] \\<alpha>"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 < \\<alpha> + 1; \\<alpha> + 1 \\<noteq> 1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c>0.\n                       \\<forall>x\\<ge>1.\n                          \\<bar>sum_upto\n                                 (\\<lambda>x. real x powr - (\\<alpha> + 1))\n                                 x -\n                                (x powr (1 - (\\<alpha> + 1)) /\n                                 (1 - (\\<alpha> + 1)) +\n                                 Re (zeta\n(complex_of_real (\\<alpha> + 1))))\\<bar>\n                          \\<le> c * x powr - (\\<alpha> + 1)\n  0 < \\<alpha>\n\ngoal (1 subgoal):\n 1. (\\<And>c2.\n        \\<lbrakk>0 < c2;\n         \\<And>x.\n            1 \\<le> x \\<Longrightarrow>\n            \\<bar>R2 x\\<bar> \\<le> c2 * x powr (- \\<alpha> - 1)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: \\<zeta>_def R2_def)"], ["proof (state)\nthis:\n  0 < c2\n  1 \\<le> ?x \\<Longrightarrow>\n  \\<bar>R2 ?x\\<bar> \\<le> c2 * ?x powr (- \\<alpha> - 1)\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "define ub :: \"real \\<Rightarrow> real\" where\n    \"ub = (\\<lambda>x. x powr (1 - \\<alpha>) / \\<alpha> + c2 * x powr - \\<alpha> + \\<bar>Ra x\\<bar>)\""], ["proof (state)\nthis:\n  ub =\n  (\\<lambda>x.\n      x powr (1 - \\<alpha>) / \\<alpha> + c2 * x powr - \\<alpha> +\n      \\<bar>Ra x\\<bar>)\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "have le: \"\\<bar>sum_upto (divisor_sigma (-\\<alpha>)) x - \\<zeta> * x\\<bar> \\<le> ub x\"\n    if x: \"x \\<ge> 1\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n    \\<le> ub x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n    \\<le> ub x", "have div_le: \"real (a div b) \\<le> x\" if \"a \\<le> x\" for a b :: nat"], ["proof (prove)\ngoal (1 subgoal):\n 1. real (a div b) \\<le> x", "by (rule order.trans[OF _ that(1)]) auto"], ["proof (state)\nthis:\n  real ?a \\<le> x \\<Longrightarrow> real (?a div ?b) \\<le> x\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n    \\<le> ub x", "have \"sum_upto (divisor_sigma (-\\<alpha>)) x =\n            sum_upto (dirichlet_prod (\\<lambda>n. real n powr (-\\<alpha>)) (\\<lambda>_. 1)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma (- \\<alpha>)) x =\n    sum_upto\n     (dirichlet_prod (\\<lambda>n. real n powr - \\<alpha>) (\\<lambda>_. 1)) x", "by (simp add: divisor_sigma_conv_dirichlet_prod [abs_def] \n                    sum_upto_def divisor_sigma_1_left [symmetric])"], ["proof (state)\nthis:\n  sum_upto (divisor_sigma (- \\<alpha>)) x =\n  sum_upto\n   (dirichlet_prod (\\<lambda>n. real n powr - \\<alpha>) (\\<lambda>_. 1)) x\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n    \\<le> ub x", "also"], ["proof (state)\nthis:\n  sum_upto (divisor_sigma (- \\<alpha>)) x =\n  sum_upto\n   (dirichlet_prod (\\<lambda>n. real n powr - \\<alpha>) (\\<lambda>_. 1)) x\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n    \\<le> ub x", "have \"\\<dots> = sum_upto (\\<lambda>n. \\<Sum>d | d dvd n. real d powr (-\\<alpha>)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto\n     (dirichlet_prod (\\<lambda>n. real n powr - \\<alpha>) (\\<lambda>_. 1))\n     x =\n    sum_upto (\\<lambda>n. \\<Sum>d | d dvd n. real d powr - \\<alpha>) x", "by (simp add: dirichlet_prod_def)"], ["proof (state)\nthis:\n  sum_upto\n   (dirichlet_prod (\\<lambda>n. real n powr - \\<alpha>) (\\<lambda>_. 1)) x =\n  sum_upto (\\<lambda>n. \\<Sum>d | d dvd n. real d powr - \\<alpha>) x\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n    \\<le> ub x", "also"], ["proof (state)\nthis:\n  sum_upto\n   (dirichlet_prod (\\<lambda>n. real n powr - \\<alpha>) (\\<lambda>_. 1)) x =\n  sum_upto (\\<lambda>n. \\<Sum>d | d dvd n. real d powr - \\<alpha>) x\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n    \\<le> ub x", "have \"\\<dots> = (\\<Sum>(n, d) \\<in> (SIGMA n:{n. n > 0 \\<and> real n \\<le> x}. {d. d dvd n}). real d powr (-\\<alpha>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>n. \\<Sum>d | d dvd n. real d powr - \\<alpha>) x =\n    (\\<Sum>(n, d)\n           \\<in>(SIGMA n:{n. 0 < n \\<and> real n \\<le> x}. {d. d dvd n}).\n       real d powr - \\<alpha>)", "unfolding sum_upto_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>n\\<in>{i. 0 < i \\<and> real i \\<le> x}.\n       \\<Sum>d | d dvd n. real d powr - \\<alpha>) =\n    (\\<Sum>(n, d)\n           \\<in>(SIGMA n:{n. 0 < n \\<and> real n \\<le> x}. {d. d dvd n}).\n       real d powr - \\<alpha>)", "by (subst sum.Sigma) auto"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>n. \\<Sum>d | d dvd n. real d powr - \\<alpha>) x =\n  (\\<Sum>(n, d)\n         \\<in>(SIGMA n:{n. 0 < n \\<and> real n \\<le> x}. {d. d dvd n}).\n     real d powr - \\<alpha>)\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n    \\<le> ub x", "also"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>n. \\<Sum>d | d dvd n. real d powr - \\<alpha>) x =\n  (\\<Sum>(n, d)\n         \\<in>(SIGMA n:{n. 0 < n \\<and> real n \\<le> x}. {d. d dvd n}).\n     real d powr - \\<alpha>)\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n    \\<le> ub x", "have \"\\<dots> = (\\<Sum>(d, q) \\<in> (SIGMA d:{d. d > 0 \\<and> real d \\<le> x}. {q. q > 0 \\<and> real q \\<le> x / d}).\n                         real d powr (-\\<alpha>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(n, d)\n           \\<in>(SIGMA n:{n. 0 < n \\<and> real n \\<le> x}. {d. d dvd n}).\n       real d powr - \\<alpha>) =\n    (\\<Sum>(d, q)\n           \\<in>(SIGMA xa:{d. 0 < d \\<and> real d \\<le> x}.\n                    {q. 0 < q \\<and> real q \\<le> x / real xa}).\n       real d powr - \\<alpha>)", "by (rule sum.reindex_bij_witness[of _ \"\\<lambda>(d, q). (d * q, d)\" \"\\<lambda>(n, d). (d, n div d)\"])\n         (use div_le in \\<open>auto simp: field_simps dest: dvd_imp_le\\<close>)"], ["proof (state)\nthis:\n  (\\<Sum>(n, d)\n         \\<in>(SIGMA n:{n. 0 < n \\<and> real n \\<le> x}. {d. d dvd n}).\n     real d powr - \\<alpha>) =\n  (\\<Sum>(d, q)\n         \\<in>(SIGMA xa:{d. 0 < d \\<and> real d \\<le> x}.\n                  {q. 0 < q \\<and> real q \\<le> x / real xa}).\n     real d powr - \\<alpha>)\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n    \\<le> ub x", "also"], ["proof (state)\nthis:\n  (\\<Sum>(n, d)\n         \\<in>(SIGMA n:{n. 0 < n \\<and> real n \\<le> x}. {d. d dvd n}).\n     real d powr - \\<alpha>) =\n  (\\<Sum>(d, q)\n         \\<in>(SIGMA xa:{d. 0 < d \\<and> real d \\<le> x}.\n                  {q. 0 < q \\<and> real q \\<le> x / real xa}).\n     real d powr - \\<alpha>)\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n    \\<le> ub x", "have \"\\<dots> = sum_upto (\\<lambda>d. sum_upto (\\<lambda>q. d powr (-\\<alpha>)) (x / d)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(d, q)\n           \\<in>(SIGMA xa:{d. 0 < d \\<and> real d \\<le> x}.\n                    {q. 0 < q \\<and> real q \\<le> x / real xa}).\n       real d powr - \\<alpha>) =\n    sum_upto\n     (\\<lambda>xa.\n         sum_upto (\\<lambda>q. real xa powr - \\<alpha>) (x / real xa))\n     x", "by (simp add: sum_upto_def sum.Sigma [symmetric])"], ["proof (state)\nthis:\n  (\\<Sum>(d, q)\n         \\<in>(SIGMA xa:{d. 0 < d \\<and> real d \\<le> x}.\n                  {q. 0 < q \\<and> real q \\<le> x / real xa}).\n     real d powr - \\<alpha>) =\n  sum_upto\n   (\\<lambda>xa.\n       sum_upto (\\<lambda>q. real xa powr - \\<alpha>) (x / real xa))\n   x\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n    \\<le> ub x", "also"], ["proof (state)\nthis:\n  (\\<Sum>(d, q)\n         \\<in>(SIGMA xa:{d. 0 < d \\<and> real d \\<le> x}.\n                  {q. 0 < q \\<and> real q \\<le> x / real xa}).\n     real d powr - \\<alpha>) =\n  sum_upto\n   (\\<lambda>xa.\n       sum_upto (\\<lambda>q. real xa powr - \\<alpha>) (x / real xa))\n   x\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n    \\<le> ub x", "have \"\\<dots> = sum_upto (\\<lambda>d. d powr (-\\<alpha>) * \\<lfloor>x / d\\<rfloor>) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto\n     (\\<lambda>xa.\n         sum_upto (\\<lambda>q. real xa powr - \\<alpha>) (x / real xa))\n     x =\n    sum_upto\n     (\\<lambda>xa.\n         real xa powr - \\<alpha> *\n         real_of_int \\<lfloor>x / real xa\\<rfloor>)\n     x", "using x"], ["proof (prove)\nusing this:\n  1 \\<le> x\n\ngoal (1 subgoal):\n 1. sum_upto\n     (\\<lambda>xa.\n         sum_upto (\\<lambda>q. real xa powr - \\<alpha>) (x / real xa))\n     x =\n    sum_upto\n     (\\<lambda>xa.\n         real xa powr - \\<alpha> *\n         real_of_int \\<lfloor>x / real xa\\<rfloor>)\n     x", "by (simp add: sum_upto_altdef mult_ac)"], ["proof (state)\nthis:\n  sum_upto\n   (\\<lambda>xa.\n       sum_upto (\\<lambda>q. real xa powr - \\<alpha>) (x / real xa))\n   x =\n  sum_upto\n   (\\<lambda>xa.\n       real xa powr - \\<alpha> * real_of_int \\<lfloor>x / real xa\\<rfloor>)\n   x\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n    \\<le> ub x", "also"], ["proof (state)\nthis:\n  sum_upto\n   (\\<lambda>xa.\n       sum_upto (\\<lambda>q. real xa powr - \\<alpha>) (x / real xa))\n   x =\n  sum_upto\n   (\\<lambda>xa.\n       real xa powr - \\<alpha> * real_of_int \\<lfloor>x / real xa\\<rfloor>)\n   x\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n    \\<le> ub x", "have \"\\<dots> = x * sum_upto (\\<lambda>d. d powr (-\\<alpha>) / d) x + Ra x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto\n     (\\<lambda>xa.\n         real xa powr - \\<alpha> *\n         real_of_int \\<lfloor>x / real xa\\<rfloor>)\n     x =\n    x * sum_upto (\\<lambda>x. real x powr - \\<alpha> / real x) x + Ra x", "by (simp add: frac_def sum_distrib_left sum_distrib_right\n                    sum_subtractf sum_upto_def algebra_simps Ra_def)"], ["proof (state)\nthis:\n  sum_upto\n   (\\<lambda>xa.\n       real xa powr - \\<alpha> * real_of_int \\<lfloor>x / real xa\\<rfloor>)\n   x =\n  x * sum_upto (\\<lambda>x. real x powr - \\<alpha> / real x) x + Ra x\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n    \\<le> ub x", "also"], ["proof (state)\nthis:\n  sum_upto\n   (\\<lambda>xa.\n       real xa powr - \\<alpha> * real_of_int \\<lfloor>x / real xa\\<rfloor>)\n   x =\n  x * sum_upto (\\<lambda>x. real x powr - \\<alpha> / real x) x + Ra x\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n    \\<le> ub x", "have \"sum_upto (\\<lambda>d. d powr (-\\<alpha>) / d) x = sum_upto (\\<lambda>d. d powr (-\\<alpha> - 1)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>x. real x powr - \\<alpha> / real x) x =\n    sum_upto (\\<lambda>x. real x powr (- \\<alpha> - 1)) x", "by (simp add: powr_diff powr_minus powr_add field_simps)"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>x. real x powr - \\<alpha> / real x) x =\n  sum_upto (\\<lambda>x. real x powr (- \\<alpha> - 1)) x\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n    \\<le> ub x", "also"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>x. real x powr - \\<alpha> / real x) x =\n  sum_upto (\\<lambda>x. real x powr (- \\<alpha> - 1)) x\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n    \\<le> ub x", "have \"\\<dots> = \\<zeta> - x powr - \\<alpha> / \\<alpha> + R2 x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>x. real x powr (- \\<alpha> - 1)) x =\n    \\<zeta> - x powr - \\<alpha> / \\<alpha> + R2 x", "by (simp add: R2_def)"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>x. real x powr (- \\<alpha> - 1)) x =\n  \\<zeta> - x powr - \\<alpha> / \\<alpha> + R2 x\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n    \\<le> ub x", "finally"], ["proof (chain)\npicking this:\n  sum_upto (divisor_sigma (- \\<alpha>)) x =\n  x * (\\<zeta> - x powr - \\<alpha> / \\<alpha> + R2 x) + Ra x", "have \"sum_upto (divisor_sigma (-\\<alpha>)) x - \\<zeta> * x = -(x powr (1 - \\<alpha>) / \\<alpha>) + x * R2 x + Ra x\""], ["proof (prove)\nusing this:\n  sum_upto (divisor_sigma (- \\<alpha>)) x =\n  x * (\\<zeta> - x powr - \\<alpha> / \\<alpha> + R2 x) + Ra x\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x =\n    - (x powr (1 - \\<alpha>) / \\<alpha>) + x * R2 x + Ra x", "using x \\<alpha>"], ["proof (prove)\nusing this:\n  sum_upto (divisor_sigma (- \\<alpha>)) x =\n  x * (\\<zeta> - x powr - \\<alpha> / \\<alpha> + R2 x) + Ra x\n  1 \\<le> x\n  0 < \\<alpha>\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x =\n    - (x powr (1 - \\<alpha>) / \\<alpha>) + x * R2 x + Ra x", "by (simp add: powr_diff powr_minus field_simps)"], ["proof (state)\nthis:\n  sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x =\n  - (x powr (1 - \\<alpha>) / \\<alpha>) + x * R2 x + Ra x\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n    \\<le> ub x", "also"], ["proof (state)\nthis:\n  sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x =\n  - (x powr (1 - \\<alpha>) / \\<alpha>) + x * R2 x + Ra x\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n    \\<le> ub x", "have \"\\<bar>\\<dots>\\<bar> \\<le> x powr (1 - \\<alpha>) / \\<alpha> + c2 * x powr -\\<alpha> + \\<bar>Ra x\\<bar>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>- (x powr (1 - \\<alpha>) / \\<alpha>) + x * R2 x + Ra x\\<bar>\n    \\<le> x powr (1 - \\<alpha>) / \\<alpha> + c2 * x powr - \\<alpha> +\n          \\<bar>Ra x\\<bar>", "proof (rule order.trans[OF abs_triangle_ineq] order.trans[OF abs_triangle_ineq4] add_mono)+"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<bar>- (x powr (1 - \\<alpha>) / \\<alpha>)\\<bar>\n    \\<le> x powr (1 - \\<alpha>) / \\<alpha>\n 2. \\<bar>x * R2 x\\<bar> \\<le> c2 * x powr - \\<alpha>\n 3. \\<bar>Ra x\\<bar> \\<le> \\<bar>Ra x\\<bar>", "from x"], ["proof (chain)\npicking this:\n  1 \\<le> x", "have \"\\<bar>x * R2 x\\<bar> \\<le> x * \\<bar>R2 x\\<bar>\""], ["proof (prove)\nusing this:\n  1 \\<le> x\n\ngoal (1 subgoal):\n 1. \\<bar>x * R2 x\\<bar> \\<le> x * \\<bar>R2 x\\<bar>", "by (simp add: abs_mult)"], ["proof (state)\nthis:\n  \\<bar>x * R2 x\\<bar> \\<le> x * \\<bar>R2 x\\<bar>\n\ngoal (3 subgoals):\n 1. \\<bar>- (x powr (1 - \\<alpha>) / \\<alpha>)\\<bar>\n    \\<le> x powr (1 - \\<alpha>) / \\<alpha>\n 2. \\<bar>x * R2 x\\<bar> \\<le> c2 * x powr - \\<alpha>\n 3. \\<bar>Ra x\\<bar> \\<le> \\<bar>Ra x\\<bar>", "also"], ["proof (state)\nthis:\n  \\<bar>x * R2 x\\<bar> \\<le> x * \\<bar>R2 x\\<bar>\n\ngoal (3 subgoals):\n 1. \\<bar>- (x powr (1 - \\<alpha>) / \\<alpha>)\\<bar>\n    \\<le> x powr (1 - \\<alpha>) / \\<alpha>\n 2. \\<bar>x * R2 x\\<bar> \\<le> c2 * x powr - \\<alpha>\n 3. \\<bar>Ra x\\<bar> \\<le> \\<bar>Ra x\\<bar>", "from x"], ["proof (chain)\npicking this:\n  1 \\<le> x", "have \"\\<dots> \\<le> x * (c2 * x powr (-\\<alpha> - 1))\""], ["proof (prove)\nusing this:\n  1 \\<le> x\n\ngoal (1 subgoal):\n 1. x * \\<bar>R2 x\\<bar> \\<le> x * (c2 * x powr (- \\<alpha> - 1))", "by (intro mult_left_mono c2) auto"], ["proof (state)\nthis:\n  x * \\<bar>R2 x\\<bar> \\<le> x * (c2 * x powr (- \\<alpha> - 1))\n\ngoal (3 subgoals):\n 1. \\<bar>- (x powr (1 - \\<alpha>) / \\<alpha>)\\<bar>\n    \\<le> x powr (1 - \\<alpha>) / \\<alpha>\n 2. \\<bar>x * R2 x\\<bar> \\<le> c2 * x powr - \\<alpha>\n 3. \\<bar>Ra x\\<bar> \\<le> \\<bar>Ra x\\<bar>", "also"], ["proof (state)\nthis:\n  x * \\<bar>R2 x\\<bar> \\<le> x * (c2 * x powr (- \\<alpha> - 1))\n\ngoal (3 subgoals):\n 1. \\<bar>- (x powr (1 - \\<alpha>) / \\<alpha>)\\<bar>\n    \\<le> x powr (1 - \\<alpha>) / \\<alpha>\n 2. \\<bar>x * R2 x\\<bar> \\<le> c2 * x powr - \\<alpha>\n 3. \\<bar>Ra x\\<bar> \\<le> \\<bar>Ra x\\<bar>", "have \"\\<dots> = c2 * x powr -\\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * (c2 * x powr (- \\<alpha> - 1)) = c2 * x powr - \\<alpha>", "using x"], ["proof (prove)\nusing this:\n  1 \\<le> x\n\ngoal (1 subgoal):\n 1. x * (c2 * x powr (- \\<alpha> - 1)) = c2 * x powr - \\<alpha>", "by (simp add: field_simps powr_minus powr_diff)"], ["proof (state)\nthis:\n  x * (c2 * x powr (- \\<alpha> - 1)) = c2 * x powr - \\<alpha>\n\ngoal (3 subgoals):\n 1. \\<bar>- (x powr (1 - \\<alpha>) / \\<alpha>)\\<bar>\n    \\<le> x powr (1 - \\<alpha>) / \\<alpha>\n 2. \\<bar>x * R2 x\\<bar> \\<le> c2 * x powr - \\<alpha>\n 3. \\<bar>Ra x\\<bar> \\<le> \\<bar>Ra x\\<bar>", "finally"], ["proof (chain)\npicking this:\n  \\<bar>x * R2 x\\<bar> \\<le> c2 * x powr - \\<alpha>", "show \"\\<bar>x * R2 x\\<bar> \\<le> \\<dots>\""], ["proof (prove)\nusing this:\n  \\<bar>x * R2 x\\<bar> \\<le> c2 * x powr - \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<bar>x * R2 x\\<bar> \\<le> c2 * x powr - \\<alpha>", "."], ["proof (state)\nthis:\n  \\<bar>x * R2 x\\<bar> \\<le> c2 * x powr - \\<alpha>\n\ngoal (2 subgoals):\n 1. \\<bar>- (x powr (1 - \\<alpha>) / \\<alpha>)\\<bar>\n    \\<le> x powr (1 - \\<alpha>) / \\<alpha>\n 2. \\<bar>Ra x\\<bar> \\<le> \\<bar>Ra x\\<bar>", "qed (use x \\<alpha> in auto)"], ["proof (state)\nthis:\n  \\<bar>- (x powr (1 - \\<alpha>) / \\<alpha>) + x * R2 x + Ra x\\<bar>\n  \\<le> x powr (1 - \\<alpha>) / \\<alpha> + c2 * x powr - \\<alpha> +\n        \\<bar>Ra x\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n    \\<le> ub x", "finally"], ["proof (chain)\npicking this:\n  \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n  \\<le> x powr (1 - \\<alpha>) / \\<alpha> + c2 * x powr - \\<alpha> +\n        \\<bar>Ra x\\<bar>", "show \"\\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar> \\<le> ub x\""], ["proof (prove)\nusing this:\n  \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n  \\<le> x powr (1 - \\<alpha>) / \\<alpha> + c2 * x powr - \\<alpha> +\n        \\<bar>Ra x\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n    \\<le> ub x", "by (simp add: ub_def)"], ["proof (state)\nthis:\n  \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n  \\<le> ub x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  1 \\<le> ?x \\<Longrightarrow>\n  \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) ?x - \\<zeta> * ?x\\<bar>\n  \\<le> ub ?x\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "have \"eventually (\\<lambda>x. \\<bar>sum_upto (divisor_sigma (-\\<alpha>)) x - \\<zeta> * x\\<bar> \\<le> ub x) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top.\n       \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n       \\<le> ub x", "using eventually_ge_at_top[of 1]"], ["proof (prove)\nusing this:\n  eventually ((\\<le>) (1::?'a1)) at_top\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top.\n       \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n       \\<le> ub x", "by eventually_elim (use le in auto)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_top.\n     \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n     \\<le> ub x\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "hence \"eventually (\\<lambda>x. \\<bar>sum_upto (divisor_sigma (-\\<alpha>)) x - \\<zeta> * x\\<bar> \\<le> \\<bar>ub x\\<bar>) at_top\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at_top.\n     \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n     \\<le> ub x\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top.\n       \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n       \\<le> \\<bar>ub x\\<bar>", "by eventually_elim linarith"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_top.\n     \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n     \\<le> \\<bar>ub x\\<bar>\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "hence bigo: \"(\\<lambda>x. sum_upto (divisor_sigma (-\\<alpha>)) x - \\<zeta> * x) \\<in> O(ub)\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at_top.\n     \\<bar>sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x\\<bar>\n     \\<le> \\<bar>ub x\\<bar>\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x)\n    \\<in> O(ub)", "by (intro landau_o.bigI[of 1]) auto"], ["proof (state)\nthis:\n  (\\<lambda>x. sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x)\n  \\<in> O(ub)\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "define ub' :: \"real \\<Rightarrow> real\" where \"ub' = sum_upto (\\<lambda>n. real n powr - \\<alpha>)\""], ["proof (state)\nthis:\n  ub' = sum_upto (\\<lambda>n. real n powr - \\<alpha>)\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "have \"\\<bar>Ra x\\<bar> \\<le> \\<bar>ub' x\\<bar>\" if \"x \\<ge> 1\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>Ra x\\<bar> \\<le> \\<bar>ub' x\\<bar>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<bar>Ra x\\<bar> \\<le> \\<bar>ub' x\\<bar>", "have \"\\<bar>Ra x\\<bar> \\<le> sum_upto (\\<lambda>n. \\<bar>real n powr -\\<alpha> * frac (x / n)\\<bar>) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>Ra x\\<bar>\n    \\<le> sum_upto\n           (\\<lambda>n.\n               \\<bar>real n powr - \\<alpha> * frac (x / real n)\\<bar>)\n           x", "unfolding Ra_def abs_minus sum_upto_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>\\<Sum>xa\\<in>{i. 0 < i \\<and> real i \\<le> x}.\n            real xa powr - \\<alpha> * frac (x / real xa)\\<bar>\n    \\<le> (\\<Sum>n\\<in>{i. 0 < i \\<and> real i \\<le> x}.\n             \\<bar>real n powr - \\<alpha> * frac (x / real n)\\<bar>)", "by (rule sum_abs)"], ["proof (state)\nthis:\n  \\<bar>Ra x\\<bar>\n  \\<le> sum_upto\n         (\\<lambda>n.\n             \\<bar>real n powr - \\<alpha> * frac (x / real n)\\<bar>)\n         x\n\ngoal (1 subgoal):\n 1. \\<bar>Ra x\\<bar> \\<le> \\<bar>ub' x\\<bar>", "also"], ["proof (state)\nthis:\n  \\<bar>Ra x\\<bar>\n  \\<le> sum_upto\n         (\\<lambda>n.\n             \\<bar>real n powr - \\<alpha> * frac (x / real n)\\<bar>)\n         x\n\ngoal (1 subgoal):\n 1. \\<bar>Ra x\\<bar> \\<le> \\<bar>ub' x\\<bar>", "have \"\\<dots> \\<le> sum_upto (\\<lambda>n. real n powr -\\<alpha> * 1) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto\n     (\\<lambda>n. \\<bar>real n powr - \\<alpha> * frac (x / real n)\\<bar>) x\n    \\<le> sum_upto (\\<lambda>n. real n powr - \\<alpha> * 1) x", "unfolding abs_mult sum_upto_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>n\\<in>{i. 0 < i \\<and> real i \\<le> x}.\n       \\<bar>real n powr - \\<alpha>\\<bar> * \\<bar>frac (x / real n)\\<bar>)\n    \\<le> (\\<Sum>n\\<in>{i. 0 < i \\<and> real i \\<le> x}.\n             real n powr - \\<alpha> * 1)", "by (intro sum_mono mult_mono) (auto intro: less_imp_le[OF frac_lt_1])"], ["proof (state)\nthis:\n  sum_upto\n   (\\<lambda>n. \\<bar>real n powr - \\<alpha> * frac (x / real n)\\<bar>) x\n  \\<le> sum_upto (\\<lambda>n. real n powr - \\<alpha> * 1) x\n\ngoal (1 subgoal):\n 1. \\<bar>Ra x\\<bar> \\<le> \\<bar>ub' x\\<bar>", "finally"], ["proof (chain)\npicking this:\n  \\<bar>Ra x\\<bar> \\<le> sum_upto (\\<lambda>n. real n powr - \\<alpha> * 1) x", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<bar>Ra x\\<bar> \\<le> sum_upto (\\<lambda>n. real n powr - \\<alpha> * 1) x\n\ngoal (1 subgoal):\n 1. \\<bar>Ra x\\<bar> \\<le> \\<bar>ub' x\\<bar>", "by (simp add: ub'_def)"], ["proof (state)\nthis:\n  \\<bar>Ra x\\<bar> \\<le> \\<bar>ub' x\\<bar>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  1 \\<le> ?x \\<Longrightarrow> \\<bar>Ra ?x\\<bar> \\<le> \\<bar>ub' ?x\\<bar>\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "hence \"Ra \\<in> O(ub')\""], ["proof (prove)\nusing this:\n  1 \\<le> ?x \\<Longrightarrow> \\<bar>Ra ?x\\<bar> \\<le> \\<bar>ub' ?x\\<bar>\n\ngoal (1 subgoal):\n 1. Ra \\<in> O(ub')", "by (intro bigoI[of _ 1] eventually_mono[OF eventually_ge_at_top[of 1]]) auto"], ["proof (state)\nthis:\n  Ra \\<in> O(ub')\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "also"], ["proof (state)\nthis:\n  Ra \\<in> O(ub')\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "have \"ub' \\<in> O(\\<lambda>x. if \\<alpha> = 1 then ln x else x powr \\<delta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ub' \\<in> O(\\<lambda>x. if \\<alpha> = 1 then ln x else x powr \\<delta>)", "proof (cases \"\\<alpha> = 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<alpha> = 1 \\<Longrightarrow>\n    ub' \\<in> O(\\<lambda>x. if \\<alpha> = 1 then ln x else x powr \\<delta>)\n 2. \\<alpha> \\<noteq> 1 \\<Longrightarrow>\n    ub' \\<in> O(\\<lambda>x. if \\<alpha> = 1 then ln x else x powr \\<delta>)", "case [simp]: True"], ["proof (state)\nthis:\n  \\<alpha> = 1\n\ngoal (2 subgoals):\n 1. \\<alpha> = 1 \\<Longrightarrow>\n    ub' \\<in> O(\\<lambda>x. if \\<alpha> = 1 then ln x else x powr \\<delta>)\n 2. \\<alpha> \\<noteq> 1 \\<Longrightarrow>\n    ub' \\<in> O(\\<lambda>x. if \\<alpha> = 1 then ln x else x powr \\<delta>)", "have \"sum_upto (\\<lambda>n. 1 / n) \\<in> O(ln)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>n. 1 / real n) \\<in> O(ln)", "by (intro asymp_equiv_imp_bigo harm_asymp_equiv)"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>n. 1 / real n) \\<in> O(ln)\n\ngoal (2 subgoals):\n 1. \\<alpha> = 1 \\<Longrightarrow>\n    ub' \\<in> O(\\<lambda>x. if \\<alpha> = 1 then ln x else x powr \\<delta>)\n 2. \\<alpha> \\<noteq> 1 \\<Longrightarrow>\n    ub' \\<in> O(\\<lambda>x. if \\<alpha> = 1 then ln x else x powr \\<delta>)", "thus ?thesis"], ["proof (prove)\nusing this:\n  sum_upto (\\<lambda>n. 1 / real n) \\<in> O(ln)\n\ngoal (1 subgoal):\n 1. ub' \\<in> O(\\<lambda>x. if \\<alpha> = 1 then ln x else x powr \\<delta>)", "by (simp add: ub'_def powr_minus field_simps)"], ["proof (state)\nthis:\n  ub' \\<in> O(\\<lambda>x. if \\<alpha> = 1 then ln x else x powr \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> 1 \\<Longrightarrow>\n    ub' \\<in> O(\\<lambda>x. if \\<alpha> = 1 then ln x else x powr \\<delta>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> 1 \\<Longrightarrow>\n    ub' \\<in> O(\\<lambda>x. if \\<alpha> = 1 then ln x else x powr \\<delta>)", "case False"], ["proof (state)\nthis:\n  \\<alpha> \\<noteq> 1\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> 1 \\<Longrightarrow>\n    ub' \\<in> O(\\<lambda>x. if \\<alpha> = 1 then ln x else x powr \\<delta>)", "have \"sum_upto (\\<lambda>n. real n powr - \\<alpha>) \\<in> O(\\<lambda>x. x powr \\<delta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>n. real n powr - \\<alpha>)\n    \\<in> O(\\<lambda>x. x powr \\<delta>)", "using assms False"], ["proof (prove)\nusing this:\n  0 < \\<alpha>\n  \\<delta> \\<equiv> max 0 (1 - \\<alpha>)\n  \\<zeta> \\<equiv> Re (zeta (complex_of_real (\\<alpha> + 1)))\n  \\<alpha> \\<noteq> 1\n\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>n. real n powr - \\<alpha>)\n    \\<in> O(\\<lambda>x. x powr \\<delta>)", "unfolding \\<delta>_def"], ["proof (prove)\nusing this:\n  0 < \\<alpha>\n  max 0 (1 - \\<alpha>) \\<equiv> max 0 (1 - \\<alpha>)\n  \\<zeta> \\<equiv> Re (zeta (complex_of_real (\\<alpha> + 1)))\n  \\<alpha> \\<noteq> 1\n\ngoal (1 subgoal):\n 1. sum_upto (\\<lambda>n. real n powr - \\<alpha>)\n    \\<in> O(\\<lambda>x. x powr max 0 (1 - \\<alpha>))", "by (intro zeta_partial_sum_pos_bigtheta bigthetaD1)"], ["proof (state)\nthis:\n  sum_upto (\\<lambda>n. real n powr - \\<alpha>)\n  \\<in> O(\\<lambda>x. x powr \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> 1 \\<Longrightarrow>\n    ub' \\<in> O(\\<lambda>x. if \\<alpha> = 1 then ln x else x powr \\<delta>)", "thus ?thesis"], ["proof (prove)\nusing this:\n  sum_upto (\\<lambda>n. real n powr - \\<alpha>)\n  \\<in> O(\\<lambda>x. x powr \\<delta>)\n\ngoal (1 subgoal):\n 1. ub' \\<in> O(\\<lambda>x. if \\<alpha> = 1 then ln x else x powr \\<delta>)", "using zeta_partial_sum_neg_asymp_equiv[of \\<alpha>] \\<alpha> False"], ["proof (prove)\nusing this:\n  sum_upto (\\<lambda>n. real n powr - \\<alpha>)\n  \\<in> O(\\<lambda>x. x powr \\<delta>)\n  0 < \\<alpha> \\<Longrightarrow>\n  sum_upto\n   (\\<lambda>n.\n       real n powr\n       \\<alpha>) \\<sim>[at_top] (\\<lambda>x.\n                                    x powr (1 + \\<alpha>) / (1 + \\<alpha>))\n  0 < \\<alpha>\n  \\<alpha> \\<noteq> 1\n\ngoal (1 subgoal):\n 1. ub' \\<in> O(\\<lambda>x. if \\<alpha> = 1 then ln x else x powr \\<delta>)", "by (simp add: ub'_def)"], ["proof (state)\nthis:\n  ub' \\<in> O(\\<lambda>x. if \\<alpha> = 1 then ln x else x powr \\<delta>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ub' \\<in> O(\\<lambda>x. if \\<alpha> = 1 then ln x else x powr \\<delta>)\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "finally"], ["proof (chain)\npicking this:\n  Ra \\<in> O(\\<lambda>x. if \\<alpha> = 1 then ln x else x powr \\<delta>)", "have Ra_bigo: \"Ra \\<in> \\<dots>\""], ["proof (prove)\nusing this:\n  Ra \\<in> O(\\<lambda>x. if \\<alpha> = 1 then ln x else x powr \\<delta>)\n\ngoal (1 subgoal):\n 1. Ra \\<in> O(\\<lambda>x. if \\<alpha> = 1 then ln x else x powr \\<delta>)", "."], ["proof (state)\nthis:\n  Ra \\<in> O(\\<lambda>x. if \\<alpha> = 1 then ln x else x powr \\<delta>)\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "proof (cases \"\\<alpha> = 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<alpha> = 1 \\<Longrightarrow>\n    sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))\n 2. \\<alpha> \\<noteq> 1 \\<Longrightarrow>\n    sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "case [simp]: True"], ["proof (state)\nthis:\n  \\<alpha> = 1\n\ngoal (2 subgoals):\n 1. \\<alpha> = 1 \\<Longrightarrow>\n    sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))\n 2. \\<alpha> \\<noteq> 1 \\<Longrightarrow>\n    sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "with Ra_bigo"], ["proof (chain)\npicking this:\n  Ra \\<in> O(\\<lambda>x. if \\<alpha> = 1 then ln x else x powr \\<delta>)\n  \\<alpha> = 1", "have Ra: \"(\\<lambda>x. \\<bar>Ra x\\<bar>) \\<in> O(ln)\""], ["proof (prove)\nusing this:\n  Ra \\<in> O(\\<lambda>x. if \\<alpha> = 1 then ln x else x powr \\<delta>)\n  \\<alpha> = 1\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. \\<bar>Ra x\\<bar>) \\<in> O(ln)", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>x. \\<bar>Ra x\\<bar>) \\<in> O(ln)\n\ngoal (2 subgoals):\n 1. \\<alpha> = 1 \\<Longrightarrow>\n    sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))\n 2. \\<alpha> \\<noteq> 1 \\<Longrightarrow>\n    sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "note bigo"], ["proof (state)\nthis:\n  (\\<lambda>x. sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x)\n  \\<in> O(ub)\n\ngoal (2 subgoals):\n 1. \\<alpha> = 1 \\<Longrightarrow>\n    sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))\n 2. \\<alpha> \\<noteq> 1 \\<Longrightarrow>\n    sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "also"], ["proof (state)\nthis:\n  (\\<lambda>x. sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x)\n  \\<in> O(ub)\n\ngoal (2 subgoals):\n 1. \\<alpha> = 1 \\<Longrightarrow>\n    sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))\n 2. \\<alpha> \\<noteq> 1 \\<Longrightarrow>\n    sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "have \"ub \\<in> O(\\<lambda>x. ln x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ub \\<in> O(ln)", "unfolding ub_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        x powr (1 - \\<alpha>) / \\<alpha> + c2 * x powr - \\<alpha> +\n        \\<bar>Ra x\\<bar>)\n    \\<in> O(ln)", "by (intro sum_in_bigo Ra) real_asymp+"], ["proof (state)\nthis:\n  ub \\<in> O(ln)\n\ngoal (2 subgoals):\n 1. \\<alpha> = 1 \\<Longrightarrow>\n    sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))\n 2. \\<alpha> \\<noteq> 1 \\<Longrightarrow>\n    sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>x. sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x)\n  \\<in> O(ln)", "have \"sum_upto (divisor_sigma (-\\<alpha>)) =o (\\<lambda>x. (pi\\<^sup>2 / 6) * x) +o O(ln)\""], ["proof (prove)\nusing this:\n  (\\<lambda>x. sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x)\n  \\<in> O(ln)\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (*) (pi\\<^sup>2 / 6) +o O(ln)", "by (subst set_minus_plus [symmetric])\n         (simp_all add: fun_diff_def algebra_simps \\<zeta>_def zeta_even_numeral)"], ["proof (state)\nthis:\n  sum_upto (divisor_sigma (- \\<alpha>)) \\<in> (*) (pi\\<^sup>2 / 6) +o O(ln)\n\ngoal (2 subgoals):\n 1. \\<alpha> = 1 \\<Longrightarrow>\n    sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))\n 2. \\<alpha> \\<noteq> 1 \\<Longrightarrow>\n    sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "thus ?thesis"], ["proof (prove)\nusing this:\n  sum_upto (divisor_sigma (- \\<alpha>)) \\<in> (*) (pi\\<^sup>2 / 6) +o O(ln)\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "by (simp only: True refl if_True)"], ["proof (state)\nthis:\n  sum_upto (divisor_sigma (- \\<alpha>))\n  \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n         else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> 1 \\<Longrightarrow>\n    sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> 1 \\<Longrightarrow>\n    sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "case False"], ["proof (state)\nthis:\n  \\<alpha> \\<noteq> 1\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> 1 \\<Longrightarrow>\n    sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "with Ra_bigo"], ["proof (chain)\npicking this:\n  Ra \\<in> O(\\<lambda>x. if \\<alpha> = 1 then ln x else x powr \\<delta>)\n  \\<alpha> \\<noteq> 1", "have Ra: \"(\\<lambda>x. \\<bar>Ra x\\<bar>) \\<in> O(\\<lambda>x. x powr \\<delta>)\""], ["proof (prove)\nusing this:\n  Ra \\<in> O(\\<lambda>x. if \\<alpha> = 1 then ln x else x powr \\<delta>)\n  \\<alpha> \\<noteq> 1\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. \\<bar>Ra x\\<bar>) \\<in> O(\\<lambda>x. x powr \\<delta>)", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>x. \\<bar>Ra x\\<bar>) \\<in> O(\\<lambda>x. x powr \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> 1 \\<Longrightarrow>\n    sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "have *: \"(\\<lambda>x. x powr (1 - \\<alpha>) / \\<alpha>) \\<in> O(\\<lambda>x. x powr \\<delta>)\"\n            \"(\\<lambda>x. c2 * x powr - \\<alpha>) \\<in> O(\\<lambda>x. x powr \\<delta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. x powr (1 - \\<alpha>) / \\<alpha>)\n    \\<in> O(\\<lambda>x. x powr \\<delta>) &&&\n    (\\<lambda>x. c2 * x powr - \\<alpha>)\n    \\<in> O(\\<lambda>x. x powr \\<delta>)", "unfolding \\<delta>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. x powr (1 - \\<alpha>) / \\<alpha>)\n    \\<in> O(\\<lambda>x. x powr max 0 (1 - \\<alpha>)) &&&\n    (\\<lambda>x. c2 * x powr - \\<alpha>)\n    \\<in> O(\\<lambda>x. x powr max 0 (1 - \\<alpha>))", "using \\<alpha> False"], ["proof (prove)\nusing this:\n  0 < \\<alpha>\n  \\<alpha> \\<noteq> 1\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x powr (1 - \\<alpha>) / \\<alpha>)\n    \\<in> O(\\<lambda>x. x powr max 0 (1 - \\<alpha>)) &&&\n    (\\<lambda>x. c2 * x powr - \\<alpha>)\n    \\<in> O(\\<lambda>x. x powr max 0 (1 - \\<alpha>))", "by (cases \"\\<alpha> > 1\"; real_asymp)+"], ["proof (state)\nthis:\n  (\\<lambda>x. x powr (1 - \\<alpha>) / \\<alpha>)\n  \\<in> O(\\<lambda>x. x powr \\<delta>)\n  (\\<lambda>x. c2 * x powr - \\<alpha>) \\<in> O(\\<lambda>x. x powr \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> 1 \\<Longrightarrow>\n    sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "note bigo"], ["proof (state)\nthis:\n  (\\<lambda>x. sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x)\n  \\<in> O(ub)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> 1 \\<Longrightarrow>\n    sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "also"], ["proof (state)\nthis:\n  (\\<lambda>x. sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x)\n  \\<in> O(ub)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> 1 \\<Longrightarrow>\n    sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "have \"ub \\<in> O(\\<lambda>x. x powr \\<delta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ub \\<in> O(\\<lambda>x. x powr \\<delta>)", "unfolding ub_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        x powr (1 - \\<alpha>) / \\<alpha> + c2 * x powr - \\<alpha> +\n        \\<bar>Ra x\\<bar>)\n    \\<in> O(\\<lambda>x. x powr \\<delta>)", "using \\<alpha> False"], ["proof (prove)\nusing this:\n  0 < \\<alpha>\n  \\<alpha> \\<noteq> 1\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        x powr (1 - \\<alpha>) / \\<alpha> + c2 * x powr - \\<alpha> +\n        \\<bar>Ra x\\<bar>)\n    \\<in> O(\\<lambda>x. x powr \\<delta>)", "by (intro sum_in_bigo Ra *)"], ["proof (state)\nthis:\n  ub \\<in> O(\\<lambda>x. x powr \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> 1 \\<Longrightarrow>\n    sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>x. sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x)\n  \\<in> O(\\<lambda>x. x powr \\<delta>)", "have \"sum_upto (divisor_sigma (-\\<alpha>)) =o (\\<lambda>x. \\<zeta> * x) +o O(\\<lambda>x. x powr \\<delta>)\""], ["proof (prove)\nusing this:\n  (\\<lambda>x. sum_upto (divisor_sigma (- \\<alpha>)) x - \\<zeta> * x)\n  \\<in> O(\\<lambda>x. x powr \\<delta>)\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>)", "by (subst set_minus_plus [symmetric])\n         (simp_all add: fun_diff_def algebra_simps \\<zeta>_def zeta_even_numeral)"], ["proof (state)\nthis:\n  sum_upto (divisor_sigma (- \\<alpha>))\n  \\<in> (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> 1 \\<Longrightarrow>\n    sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "thus ?thesis"], ["proof (prove)\nusing this:\n  sum_upto (divisor_sigma (- \\<alpha>))\n  \\<in> (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>)\n\ngoal (1 subgoal):\n 1. sum_upto (divisor_sigma (- \\<alpha>))\n    \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n           else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))", "by (simp only: False refl if_False)"], ["proof (state)\nthis:\n  sum_upto (divisor_sigma (- \\<alpha>))\n  \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n         else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sum_upto (divisor_sigma (- \\<alpha>))\n  \\<in> (if \\<alpha> = 1 then (*) (pi\\<^sup>2 / 6) +o O(ln)\n         else (*) \\<zeta> +o O(\\<lambda>x. x powr \\<delta>))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}