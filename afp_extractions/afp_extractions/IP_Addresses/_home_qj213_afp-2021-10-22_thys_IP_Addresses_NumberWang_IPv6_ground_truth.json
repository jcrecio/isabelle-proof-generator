{"file_name": "/home/qj213/afp-2021-10-22/thys/IP_Addresses/NumberWang_IPv6.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/IP_Addresses", "problem_names": ["lemma length_drop_bl: \"length (dropWhile Not (to_bl (of_bl bs))) \\<le> length bs\"", "lemma bl_drop_leading_zeros: \n      \"(of_bl:: bool list \\<Rightarrow> 'a::len word) (dropWhile Not bs) =\n       (of_bl:: bool list \\<Rightarrow> 'a::len word) bs\"", "lemma bl_length_drop_bound: assumes \"length (dropWhile Not bs) \\<le> n\"\n  shows \"length (dropWhile Not (to_bl ((of_bl:: bool list \\<Rightarrow> 'a::len word) bs))) \\<le> n\"", "lemma length_drop_mask_outer: fixes ip::\"'a::len word\"\n  shows \"LENGTH('a) - n' = len \\<Longrightarrow> length (dropWhile Not (to_bl (ip AND (mask n << n') >> n'))) \\<le> len\"", "lemma length_drop_mask_inner: fixes ip::\"'a::len word\"\n  shows \"n \\<le> LENGTH('a) - n' \\<Longrightarrow> length (dropWhile Not (to_bl (ip AND (mask n << n') >> n'))) \\<le> n\"", "lemma mask128: \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF = (mask 128 :: 'a::len word)\"", "lemma helper_masked_ucast_generic:\n  fixes b::\"16 word\"\n  assumes \"n + 16 \\<le> m\" and \"m < 128\"\n  shows \"((ucast:: 16 word \\<Rightarrow> 128 word) b << n) && (mask 16 << m) = 0\"", "lemma unat_of_bl_128_16_less_helper:\n  fixes b::\"16 word\"\n  shows \"unat ((of_bl::bool list \\<Rightarrow> 128 word) (to_bl b)) < 2^16\"", "lemma unat_of_bl_128_16_le_helper: \"unat ((of_bl:: bool list \\<Rightarrow> 128 word) (to_bl (b::16 word))) \\<le> 65535\"", "lemma helper_masked_ucast_reverse_generic:\n   fixes b::\"16 word\"\n   assumes \"m + 16 \\<le> n\" and \"n \\<le> 128 - 16\"\n   shows \"((ucast:: 16 word \\<Rightarrow> 128 word) b << n) && (mask 16 << m) = 0\"", "lemma helper_masked_ucast_equal_generic:\n  fixes b::\"16 word\"\n  assumes \"n \\<le> 128 - 16\"\n  shows \"ucast (((ucast:: 16 word \\<Rightarrow> 128 word) b << n) && (mask 16 << n) >> n) = b\""], "translations": [["", "lemma length_drop_bl: \"length (dropWhile Not (to_bl (of_bl bs))) \\<le> length bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (dropWhile Not (to_bl (of_bl bs))) \\<le> length bs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. length (dropWhile Not (to_bl (of_bl bs))) \\<le> length bs", "have length_takeWhile_Not_replicate_False:\n    \"length (takeWhile Not (replicate n False @ ls)) = n + length (takeWhile Not ls)\"\n  for n ls"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (takeWhile Not (replicate n False @ ls)) =\n    n + length (takeWhile Not ls)", "by(subst takeWhile_append2) simp+"], ["proof (state)\nthis:\n  length (takeWhile Not (replicate ?n False @ ?ls)) =\n  ?n + length (takeWhile Not ?ls)\n\ngoal (1 subgoal):\n 1. length (dropWhile Not (to_bl (of_bl bs))) \\<le> length bs", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (dropWhile Not (to_bl (of_bl bs))) \\<le> length bs", "by(simp add: word_rep_drop dropWhile_eq_drop length_takeWhile_Not_replicate_False)"], ["proof (state)\nthis:\n  length (dropWhile Not (to_bl (of_bl bs))) \\<le> length bs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bl_drop_leading_zeros: \n      \"(of_bl:: bool list \\<Rightarrow> 'a::len word) (dropWhile Not bs) =\n       (of_bl:: bool list \\<Rightarrow> 'a::len word) bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_bl (dropWhile Not bs) = of_bl bs", "by(induction bs) simp_all"], ["", "lemma bl_length_drop_bound: assumes \"length (dropWhile Not bs) \\<le> n\"\n  shows \"length (dropWhile Not (to_bl ((of_bl:: bool list \\<Rightarrow> 'a::len word) bs))) \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (dropWhile Not (to_bl (of_bl bs))) \\<le> n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. length (dropWhile Not (to_bl (of_bl bs))) \\<le> n", "have bl_length_drop_twice: \n      \"length (dropWhile Not (to_bl ((of_bl:: bool list \\<Rightarrow> 'a::len word) (dropWhile Not bs)))) =\n       length (dropWhile Not (to_bl ((of_bl:: bool list \\<Rightarrow> 'a::len word) bs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (dropWhile Not (to_bl (of_bl (dropWhile Not bs)))) =\n    length (dropWhile Not (to_bl (of_bl bs)))", "by(simp add: bl_drop_leading_zeros)"], ["proof (state)\nthis:\n  length (dropWhile Not (to_bl (of_bl (dropWhile Not bs)))) =\n  length (dropWhile Not (to_bl (of_bl bs)))\n\ngoal (1 subgoal):\n 1. length (dropWhile Not (to_bl (of_bl bs))) \\<le> n", "from length_drop_bl"], ["proof (chain)\npicking this:\n  length (dropWhile Not (to_bl (of_bl ?bs))) \\<le> length ?bs", "have *: \"length (dropWhile Not (to_bl ((of_bl:: bool list \\<Rightarrow> 'a::len word) bs))) \\<le> length (dropWhile Not bs)\""], ["proof (prove)\nusing this:\n  length (dropWhile Not (to_bl (of_bl ?bs))) \\<le> length ?bs\n\ngoal (1 subgoal):\n 1. length (dropWhile Not (to_bl (of_bl bs)))\n    \\<le> length (dropWhile Not bs)", "apply(rule dual_order.trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (dropWhile Not (to_bl (of_bl bs)))\n    \\<le> length (dropWhile Not (to_bl (of_bl (dropWhile Not bs))))", "apply(subst bl_length_drop_twice)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (dropWhile Not (to_bl (of_bl bs)))\n    \\<le> length (dropWhile Not (to_bl (of_bl bs)))", ".."], ["proof (state)\nthis:\n  length (dropWhile Not (to_bl (of_bl bs))) \\<le> length (dropWhile Not bs)\n\ngoal (1 subgoal):\n 1. length (dropWhile Not (to_bl (of_bl bs))) \\<le> n", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (dropWhile Not (to_bl (of_bl bs))) \\<le> n", "apply(rule order.trans, rule *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (dropWhile Not bs) \\<le> n", "using assms"], ["proof (prove)\nusing this:\n  length (dropWhile Not bs) \\<le> n\n\ngoal (1 subgoal):\n 1. length (dropWhile Not bs) \\<le> n", "by(simp)"], ["proof (state)\nthis:\n  length (dropWhile Not (to_bl (of_bl bs))) \\<le> n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma length_drop_mask_outer: fixes ip::\"'a::len word\"\n  shows \"LENGTH('a) - n' = len \\<Longrightarrow> length (dropWhile Not (to_bl (ip AND (mask n << n') >> n'))) \\<le> len\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LENGTH('a) - n' = len \\<Longrightarrow>\n    length (dropWhile Not (to_bl (ip && (mask n << n') >> n'))) \\<le> len", "apply(subst word_and_mask_shiftl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. LENGTH('a) - n' = len \\<Longrightarrow>\n    length (dropWhile Not (to_bl ((ip >> n') && mask n << n' >> n')))\n    \\<le> len", "apply(subst shiftl_shiftr1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. LENGTH('a) - n' = len \\<Longrightarrow> n' \\<le> n'\n 2. LENGTH('a) - n' = len \\<Longrightarrow>\n    length\n     (dropWhile Not\n       (to_bl\n         (((ip >> n') && mask n) &&\n          mask (size ((ip >> n') && mask n) - n') <<\n          n' - n')))\n    \\<le> len", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. LENGTH('a) - n' = len \\<Longrightarrow>\n    length\n     (dropWhile Not\n       (to_bl\n         (((ip >> n') && mask n) &&\n          mask (size ((ip >> n') && mask n) - n') <<\n          n' - n')))\n    \\<le> len", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. LENGTH('a) - n' = len \\<Longrightarrow>\n    length\n     (dropWhile Not\n       (to_bl\n         (((ip >> n') && mask n) &&\n          mask (size ((ip >> n') && mask n) - n'))))\n    \\<le> len", "apply(subst and_mask)"], ["proof (prove)\ngoal (1 subgoal):\n 1. LENGTH('a) - n' = len \\<Longrightarrow>\n    length\n     (dropWhile Not\n       (to_bl\n         ((ip >> n' << size (ip >> n') - n >> size (ip >> n') - n) &&\n          mask (size ((ip >> n') && mask n) - n'))))\n    \\<le> len", "apply(simp add: word_size)"], ["proof (prove)\ngoal (1 subgoal):\n 1. LENGTH('a) - n' = len \\<Longrightarrow>\n    length\n     (dropWhile Not\n       (to_bl ((ip >> n' << LENGTH('a) - n >> LENGTH('a) - n) && mask len)))\n    \\<le> len", "apply(simp add: length_drop_mask)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma length_drop_mask_inner: fixes ip::\"'a::len word\"\n  shows \"n \\<le> LENGTH('a) - n' \\<Longrightarrow> length (dropWhile Not (to_bl (ip AND (mask n << n') >> n'))) \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> LENGTH('a) - n' \\<Longrightarrow>\n    length (dropWhile Not (to_bl (ip && (mask n << n') >> n'))) \\<le> n", "apply(subst word_and_mask_shiftl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> LENGTH('a) - n' \\<Longrightarrow>\n    length (dropWhile Not (to_bl ((ip >> n') && mask n << n' >> n')))\n    \\<le> n", "apply(subst shiftl_shiftr3)"], ["proof (prove)\ngoal (2 subgoals):\n 1. n \\<le> LENGTH('a) - n' \\<Longrightarrow> n' \\<le> n'\n 2. n \\<le> LENGTH('a) - n' \\<Longrightarrow>\n    length\n     (dropWhile Not\n       (to_bl\n         (((ip >> n') && mask n >> n' - n') &&\n          mask (size ((ip >> n') && mask n) - n'))))\n    \\<le> n", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> LENGTH('a) - n' \\<Longrightarrow>\n    length\n     (dropWhile Not\n       (to_bl\n         (((ip >> n') && mask n >> n' - n') &&\n          mask (size ((ip >> n') && mask n) - n'))))\n    \\<le> n", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> LENGTH('a) - n' \\<Longrightarrow>\n    length\n     (dropWhile Not\n       (to_bl\n         (((ip >> n') && mask n) &&\n          mask (size ((ip >> n') && mask n) - n'))))\n    \\<le> n", "apply(simp add: word_size)"], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> LENGTH('a) - n' \\<Longrightarrow>\n    length\n     (dropWhile Not\n       (to_bl (((ip >> n') && mask n) && mask (LENGTH('a) - n'))))\n    \\<le> n", "apply(simp add: mask_twice)"], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> LENGTH('a) - n' \\<Longrightarrow>\n    length (dropWhile Not (to_bl ((ip >> n') && mask n))) \\<le> n", "apply(simp add: length_drop_mask)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mask128: \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF = (mask 128 :: 'a::len word)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 340282366920938463463374607431768211455 = mask 128", "by (simp add: mask_eq)"], ["", "(*-------------- things for ipv6 syntax round trip property two ------------------*)\n\n(*n small, m large*)"], ["", "lemma helper_masked_ucast_generic:\n  fixes b::\"16 word\"\n  assumes \"n + 16 \\<le> m\" and \"m < 128\"\n  shows \"((ucast:: 16 word \\<Rightarrow> 128 word) b << n) && (mask 16 << m) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (UCAST(16 \\<rightarrow> 128) b << n) && (mask 16 << m) = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (UCAST(16 \\<rightarrow> 128) b << n) && (mask 16 << m) = 0", "have \"x < 2 ^ (m - n)\" if mnh2: \"x < 0x10000\"\n    for x::\"128 word\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < 2 ^ (m - n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x < 2 ^ (m - n)", "from assms(1)"], ["proof (chain)\npicking this:\n  n + 16 \\<le> m", "have mnh3: \"16 \\<le> m - n\""], ["proof (prove)\nusing this:\n  n + 16 \\<le> m\n\ngoal (1 subgoal):\n 1. 16 \\<le> m - n", "by fastforce"], ["proof (state)\nthis:\n  16 \\<le> m - n\n\ngoal (1 subgoal):\n 1. x < 2 ^ (m - n)", "have power_2_16_nat: \"(16::nat) \\<le> n \\<Longrightarrow> (65535::nat) < 2 ^ n\" if a:\"16 \\<le> n\"for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. 16 \\<le> n \\<Longrightarrow> 65535 < 2 ^ n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 16 \\<le> n \\<Longrightarrow> 65535 < 2 ^ n", "have power2_rule: \"a \\<le> b \\<Longrightarrow> (2::nat)^a \\<le> 2 ^ b\" for a b"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> b \\<Longrightarrow> 2 ^ a \\<le> 2 ^ b", "by fastforce"], ["proof (state)\nthis:\n  ?a \\<le> ?b \\<Longrightarrow> 2 ^ ?a \\<le> 2 ^ ?b\n\ngoal (1 subgoal):\n 1. 16 \\<le> n \\<Longrightarrow> 65535 < 2 ^ n", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. 65535 < 2 ^ n", "apply(subgoal_tac \"65536 \\<le> 2 ^ n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. (65536::?'a1) \\<le> (2::?'a1) ^ n \\<Longrightarrow> 65535 < 2 ^ n\n 2. (65536::?'a1) \\<le> (2::?'a1) ^ n", "apply(subst Nat.less_eq_Suc_le)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (65536::?'a1) \\<le> (2::?'a1) ^ n \\<Longrightarrow>\n    Suc 65535 \\<le> 2 ^ n\n 2. (65536::?'a1) \\<le> (2::?'a1) ^ n", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 65536 \\<le> 2 ^ n", "apply(subgoal_tac \"(65536::nat) = 2^16\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. 65536 = 2 ^ 16 \\<Longrightarrow> 65536 \\<le> 2 ^ n\n 2. 65536 = 2 ^ 16", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. 65536 = 2 ^ 16 \\<Longrightarrow> 65536 \\<le> 2 ^ n", "using power2_rule \\<open>16 \\<le> n\\<close>"], ["proof (prove)\nusing this:\n  ?a \\<le> ?b \\<Longrightarrow> 2 ^ ?a \\<le> 2 ^ ?b\n  16 \\<le> n\n\ngoal (1 subgoal):\n 1. 65536 = 2 ^ 16 \\<Longrightarrow> 65536 \\<le> 2 ^ n", "by presburger"], ["proof (prove)\ngoal (1 subgoal):\n 1. 65536 = 2 ^ 16", "by(simp)"], ["proof (state)\nthis:\n  65535 < 2 ^ n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>16 \\<le> ?n; 16 \\<le> ?n\\<rbrakk>\n  \\<Longrightarrow> 65535 < 2 ^ ?n\n\ngoal (1 subgoal):\n 1. x < 2 ^ (m - n)", "have \"65536 = unat (65536::128 word)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 65536 = unat 65536", "by auto"], ["proof (state)\nthis:\n  65536 = unat 65536\n\ngoal (1 subgoal):\n 1. x < 2 ^ (m - n)", "moreover"], ["proof (state)\nthis:\n  65536 = unat 65536\n\ngoal (1 subgoal):\n 1. x < 2 ^ (m - n)", "from mnh2"], ["proof (chain)\npicking this:\n  x < 65536", "have \"unat x <  unat (65536::128 word)\""], ["proof (prove)\nusing this:\n  x < 65536\n\ngoal (1 subgoal):\n 1. unat x < unat 65536", "by(rule Word.unat_mono)"], ["proof (state)\nthis:\n  unat x < unat 65536\n\ngoal (1 subgoal):\n 1. x < 2 ^ (m - n)", "ultimately"], ["proof (chain)\npicking this:\n  65536 = unat 65536\n  unat x < unat 65536", "have x: \"unat x < 65536\""], ["proof (prove)\nusing this:\n  65536 = unat 65536\n  unat x < unat 65536\n\ngoal (1 subgoal):\n 1. unat x < 65536", "by simp"], ["proof (state)\nthis:\n  unat x < 65536\n\ngoal (1 subgoal):\n 1. x < 2 ^ (m - n)", "with mnh3"], ["proof (chain)\npicking this:\n  16 \\<le> m - n\n  unat x < 65536", "have \"unat x < 2 ^ (m - n)\""], ["proof (prove)\nusing this:\n  16 \\<le> m - n\n  unat x < 65536\n\ngoal (1 subgoal):\n 1. unat x < 2 ^ (m - n)", "apply(rule_tac b=65535 in Orderings.order_class.order.strict_trans1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>16 \\<le> m - n; unat x < 65536\\<rbrakk>\n    \\<Longrightarrow> unat x \\<le> 65535\n 2. \\<lbrakk>16 \\<le> m - n; unat x < 65536\\<rbrakk>\n    \\<Longrightarrow> 65535 < 2 ^ (m - n)", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>16 \\<le> m - n; unat x < 65536\\<rbrakk>\n    \\<Longrightarrow> 65535 < 2 ^ (m - n)", "using power_2_16_nat"], ["proof (prove)\nusing this:\n  \\<lbrakk>16 \\<le> ?n; 16 \\<le> ?n\\<rbrakk>\n  \\<Longrightarrow> 65535 < 2 ^ ?n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>16 \\<le> m - n; unat x < 65536\\<rbrakk>\n    \\<Longrightarrow> 65535 < 2 ^ (m - n)", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  unat x < 2 ^ (m - n)\n\ngoal (1 subgoal):\n 1. x < 2 ^ (m - n)", "with assms(2)"], ["proof (chain)\npicking this:\n  m < 128\n  unat x < 2 ^ (m - n)", "show ?thesis"], ["proof (prove)\nusing this:\n  m < 128\n  unat x < 2 ^ (m - n)\n\ngoal (1 subgoal):\n 1. x < 2 ^ (m - n)", "by(subst word_less_nat_alt) simp"], ["proof (state)\nthis:\n  x < 2 ^ (m - n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?x < 65536 \\<Longrightarrow> ?x < 2 ^ (m - n)\n\ngoal (1 subgoal):\n 1. (UCAST(16 \\<rightarrow> 128) b << n) && (mask 16 << m) = 0", "hence mnhelper2: \"(of_bl::bool list \\<Rightarrow> 128 word) (to_bl b) < 2 ^ (m - n)\""], ["proof (prove)\nusing this:\n  ?x < 65536 \\<Longrightarrow> ?x < 2 ^ (m - n)\n\ngoal (1 subgoal):\n 1. of_bl (to_bl b) < 2 ^ (m - n)", "apply(subgoal_tac \"(of_bl::bool list \\<Rightarrow> 128 word) (to_bl b) < 2^(LENGTH(16))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>x. x < 65536 \\<Longrightarrow> x < 2 ^ (m - n);\n     of_bl (to_bl b) < 2 ^ LENGTH(16)\\<rbrakk>\n    \\<Longrightarrow> of_bl (to_bl b) < 2 ^ (m - n)\n 2. (\\<And>x. x < 65536 \\<Longrightarrow> x < 2 ^ (m - n)) \\<Longrightarrow>\n    of_bl (to_bl b) < 2 ^ LENGTH(16)", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. x < 65536 \\<Longrightarrow> x < 2 ^ (m - n)) \\<Longrightarrow>\n    of_bl (to_bl b) < 2 ^ LENGTH(16)", "by(rule of_bl_length_less) simp+"], ["proof (state)\nthis:\n  of_bl (to_bl b) < 2 ^ (m - n)\n\ngoal (1 subgoal):\n 1. (UCAST(16 \\<rightarrow> 128) b << n) && (mask 16 << m) = 0", "have mnhelper3: \"(of_bl::bool list \\<Rightarrow> 128 word) (to_bl b) * 2 ^ n < 2 ^ m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_bl (to_bl b) * 2 ^ n < 2 ^ m", "apply(rule div_lt_mult)"], ["proof (prove)\ngoal (2 subgoals):\n 1. of_bl (to_bl b) < 2 ^ m div 2 ^ n\n 2. 0 < 2 ^ n", "apply(rule word_less_two_pow_divI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. of_bl (to_bl b) < 2 ^ (m - n)\n 2. n \\<le> m\n 3. m < LENGTH(128)\n 4. 0 < 2 ^ n", "using assms"], ["proof (prove)\nusing this:\n  n + 16 \\<le> m\n  m < 128\n\ngoal (4 subgoals):\n 1. of_bl (to_bl b) < 2 ^ (m - n)\n 2. n \\<le> m\n 3. m < LENGTH(128)\n 4. 0 < 2 ^ n", "by(simp_all add: mnhelper2 p2_gt_0)"], ["proof (state)\nthis:\n  of_bl (to_bl b) * 2 ^ n < 2 ^ m\n\ngoal (1 subgoal):\n 1. (UCAST(16 \\<rightarrow> 128) b << n) && (mask 16 << m) = 0", "from assms"], ["proof (chain)\npicking this:\n  n + 16 \\<le> m\n  m < 128", "show ?thesis"], ["proof (prove)\nusing this:\n  n + 16 \\<le> m\n  m < 128\n\ngoal (1 subgoal):\n 1. (UCAST(16 \\<rightarrow> 128) b << n) && (mask 16 << m) = 0", "apply(subst ucast_bl)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n + 16 \\<le> m; m < 128\\<rbrakk>\n    \\<Longrightarrow> (of_bl (to_bl b) << n) && (mask 16 << m) = 0", "apply(subst shiftl_of_bl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n + 16 \\<le> m; m < 128\\<rbrakk>\n    \\<Longrightarrow> of_bl (to_bl b @ replicate n False) &&\n                      (mask 16 << m) =\n                      0", "apply(subst of_bl_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n + 16 \\<le> m; m < 128\\<rbrakk>\n    \\<Longrightarrow> of_bl (to_bl b) * 2 ^ length (replicate n False) +\n                      of_bl (replicate n False) &&\n                      (mask 16 << m) =\n                      0", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n + 16 \\<le> m; m < 128\\<rbrakk>\n    \\<Longrightarrow> of_bl (to_bl b) * 2 ^ n && (mask 16 << m) = 0", "apply(subst word_and_mask_shiftl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n + 16 \\<le> m; m < 128\\<rbrakk>\n    \\<Longrightarrow> (of_bl (to_bl b) * 2 ^ n >> m) && mask 16 << m = 0", "apply(subst shiftr_div_2n_w)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n + 16 \\<le> m; m < 128\\<rbrakk>\n    \\<Longrightarrow> m < size (of_bl (to_bl b) * 2 ^ n)\n 2. \\<lbrakk>n + 16 \\<le> m; m < 128\\<rbrakk>\n    \\<Longrightarrow> of_bl (to_bl b) * 2 ^ n div 2 ^ m && mask 16 << m = 0", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n + 16 \\<le> m; m < 128\\<rbrakk>\n    \\<Longrightarrow> m < size (of_bl (to_bl b) * 2 ^ n)", "by(simp add: word_size; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n + 16 \\<le> m; m < 128\\<rbrakk>\n    \\<Longrightarrow> of_bl (to_bl b) * 2 ^ n div 2 ^ m && mask 16 << m = 0", "apply(subst word_div_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n + 16 \\<le> m; m < 128\\<rbrakk>\n    \\<Longrightarrow> of_bl (to_bl b) * 2 ^ n < 2 ^ m\n 2. \\<lbrakk>n + 16 \\<le> m; m < 128\\<rbrakk>\n    \\<Longrightarrow> 0 && mask 16 << m = 0", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n + 16 \\<le> m; m < 128\\<rbrakk>\n    \\<Longrightarrow> of_bl (to_bl b) * 2 ^ n < 2 ^ m", "by(rule mnhelper3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n + 16 \\<le> m; m < 128\\<rbrakk>\n    \\<Longrightarrow> 0 && mask 16 << m = 0", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (UCAST(16 \\<rightarrow> 128) b << n) && (mask 16 << m) = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma unat_of_bl_128_16_less_helper:\n  fixes b::\"16 word\"\n  shows \"unat ((of_bl::bool list \\<Rightarrow> 128 word) (to_bl b)) < 2^16\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unat (of_bl (to_bl b)) < 2 ^ 16", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. unat (of_bl (to_bl b)) < 2 ^ 16", "from word_bl_Rep'"], ["proof (chain)\npicking this:\n  length (to_bl ?x) = LENGTH(?'a)", "have 1: \"length (to_bl b) = 16\""], ["proof (prove)\nusing this:\n  length (to_bl ?x) = LENGTH(?'a)\n\ngoal (1 subgoal):\n 1. length (to_bl b) = 16", "by simp"], ["proof (state)\nthis:\n  length (to_bl b) = 16\n\ngoal (1 subgoal):\n 1. unat (of_bl (to_bl b)) < 2 ^ 16", "have \"unat ((of_bl::bool list \\<Rightarrow> 128 word) (to_bl b)) < 2^(length (to_bl b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unat (of_bl (to_bl b)) < 2 ^ length (to_bl b)", "by(fact unat_of_bl_length)"], ["proof (state)\nthis:\n  unat (of_bl (to_bl b)) < 2 ^ length (to_bl b)\n\ngoal (1 subgoal):\n 1. unat (of_bl (to_bl b)) < 2 ^ 16", "with 1"], ["proof (chain)\npicking this:\n  length (to_bl b) = 16\n  unat (of_bl (to_bl b)) < 2 ^ length (to_bl b)", "show ?thesis"], ["proof (prove)\nusing this:\n  length (to_bl b) = 16\n  unat (of_bl (to_bl b)) < 2 ^ length (to_bl b)\n\ngoal (1 subgoal):\n 1. unat (of_bl (to_bl b)) < 2 ^ 16", "by auto"], ["proof (state)\nthis:\n  unat (of_bl (to_bl b)) < 2 ^ 16\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma unat_of_bl_128_16_le_helper: \"unat ((of_bl:: bool list \\<Rightarrow> 128 word) (to_bl (b::16 word))) \\<le> 65535\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unat (of_bl (to_bl b)) \\<le> 65535", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. unat (of_bl (to_bl b)) \\<le> 65535", "from unat_of_bl_128_16_less_helper[of b]"], ["proof (chain)\npicking this:\n  unat (of_bl (to_bl b)) < 2 ^ 16", "have\n    \"unat ((of_bl:: bool list \\<Rightarrow> 128 word) (to_bl b)) < 65536\""], ["proof (prove)\nusing this:\n  unat (of_bl (to_bl b)) < 2 ^ 16\n\ngoal (1 subgoal):\n 1. unat (of_bl (to_bl b)) < 65536", "by simp"], ["proof (state)\nthis:\n  unat (of_bl (to_bl b)) < 65536\n\ngoal (1 subgoal):\n 1. unat (of_bl (to_bl b)) \\<le> 65535", "from Suc_leI[OF this]"], ["proof (chain)\npicking this:\n  Suc (unat (of_bl (to_bl b))) \\<le> 65536", "show ?thesis"], ["proof (prove)\nusing this:\n  Suc (unat (of_bl (to_bl b))) \\<le> 65536\n\ngoal (1 subgoal):\n 1. unat (of_bl (to_bl b)) \\<le> 65535", "by simp"], ["proof (state)\nthis:\n  unat (of_bl (to_bl b)) \\<le> 65535\n\ngoal:\nNo subgoals!", "qed"], ["", "(*reverse*)"], ["", "lemma helper_masked_ucast_reverse_generic:\n   fixes b::\"16 word\"\n   assumes \"m + 16 \\<le> n\" and \"n \\<le> 128 - 16\"\n   shows \"((ucast:: 16 word \\<Rightarrow> 128 word) b << n) && (mask 16 << m) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (UCAST(16 \\<rightarrow> 128) b << n) && (mask 16 << m) = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (UCAST(16 \\<rightarrow> 128) b << n) && (mask 16 << m) = 0", "have power_less_128_helper: \"2 ^ n * unat ((of_bl::bool list \\<Rightarrow> 128 word) (to_bl b)) < 2 ^ LENGTH(128)\"\n     if n: \"n \\<le> 128 - 16\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ n * unat (of_bl (to_bl b)) < 2 ^ LENGTH(128)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 2 ^ n * unat (of_bl (to_bl b)) < 2 ^ LENGTH(128)", "have help_mult: \"n \\<le> l \\<Longrightarrow> 2 ^ n * x < 2 ^ l \\<longleftrightarrow> x < 2 ^ (l - n)\" for x::nat and l"], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> l \\<Longrightarrow> (2 ^ n * x < 2 ^ l) = (x < 2 ^ (l - n))", "by (simp add: nat_mult_power_less_eq semiring_normalization_rules(7))"], ["proof (state)\nthis:\n  n \\<le> ?l \\<Longrightarrow> (2 ^ n * ?x < 2 ^ ?l) = (?x < 2 ^ (?l - n))\n\ngoal (1 subgoal):\n 1. 2 ^ n * unat (of_bl (to_bl b)) < 2 ^ LENGTH(128)", "from n"], ["proof (chain)\npicking this:\n  n \\<le> 128 - 16", "show ?thesis"], ["proof (prove)\nusing this:\n  n \\<le> 128 - 16\n\ngoal (1 subgoal):\n 1. 2 ^ n * unat (of_bl (to_bl b)) < 2 ^ LENGTH(128)", "apply(subst help_mult)"], ["proof (prove)\ngoal (2 subgoals):\n 1. n \\<le> 128 - 16 \\<Longrightarrow> n \\<le> LENGTH(128)\n 2. n \\<le> 128 - 16 \\<Longrightarrow>\n    unat (of_bl (to_bl b)) < 2 ^ (LENGTH(128) - n)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> 128 - 16 \\<Longrightarrow> n \\<le> LENGTH(128)", "by (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> 128 - 16 \\<Longrightarrow>\n    unat (of_bl (to_bl b)) < 2 ^ (LENGTH(128) - n)", "apply(rule order_less_le_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. n \\<le> 128 - 16 \\<Longrightarrow> unat (of_bl (to_bl b)) < ?y2\n 2. n \\<le> 128 - 16 \\<Longrightarrow> ?y2 \\<le> 2 ^ (LENGTH(128) - n)", "apply(rule unat_of_bl_128_16_less_helper)"], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> 128 - 16 \\<Longrightarrow> 2 ^ 16 \\<le> 2 ^ (LENGTH(128) - n)", "apply(rule Power.power_increasing)"], ["proof (prove)\ngoal (2 subgoals):\n 1. n \\<le> 128 - 16 \\<Longrightarrow> 16 \\<le> LENGTH(128) - n\n 2. n \\<le> 128 - 16 \\<Longrightarrow> 1 \\<le> 2", "apply(simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  2 ^ n * unat (of_bl (to_bl b)) < 2 ^ LENGTH(128)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?n \\<le> 128 - 16 \\<Longrightarrow>\n  2 ^ ?n * unat (of_bl (to_bl b)) < 2 ^ LENGTH(128)\n\ngoal (1 subgoal):\n 1. (UCAST(16 \\<rightarrow> 128) b << n) && (mask 16 << m) = 0", "have *: \"2 ^ m * (2 ^ (n - m) * unat ((of_bl::bool list \\<Rightarrow> 128 word) (to_bl b))) = \n            2 ^ n * unat ((of_bl::bool list \\<Rightarrow> 128 word) (to_bl b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ m * (2 ^ (n - m) * unat (of_bl (to_bl b))) =\n    2 ^ n * unat (of_bl (to_bl b))", "proof(cases \"unat ((of_bl::bool list \\<Rightarrow> 128 word) (to_bl b)) = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. unat (of_bl (to_bl b)) = 0 \\<Longrightarrow>\n    2 ^ m * (2 ^ (n - m) * unat (of_bl (to_bl b))) =\n    2 ^ n * unat (of_bl (to_bl b))\n 2. unat (of_bl (to_bl b)) \\<noteq> 0 \\<Longrightarrow>\n    2 ^ m * (2 ^ (n - m) * unat (of_bl (to_bl b))) =\n    2 ^ n * unat (of_bl (to_bl b))", "case True"], ["proof (state)\nthis:\n  unat (of_bl (to_bl b)) = 0\n\ngoal (2 subgoals):\n 1. unat (of_bl (to_bl b)) = 0 \\<Longrightarrow>\n    2 ^ m * (2 ^ (n - m) * unat (of_bl (to_bl b))) =\n    2 ^ n * unat (of_bl (to_bl b))\n 2. unat (of_bl (to_bl b)) \\<noteq> 0 \\<Longrightarrow>\n    2 ^ m * (2 ^ (n - m) * unat (of_bl (to_bl b))) =\n    2 ^ n * unat (of_bl (to_bl b))", "thus ?thesis"], ["proof (prove)\nusing this:\n  unat (of_bl (to_bl b)) = 0\n\ngoal (1 subgoal):\n 1. 2 ^ m * (2 ^ (n - m) * unat (of_bl (to_bl b))) =\n    2 ^ n * unat (of_bl (to_bl b))", "by simp"], ["proof (state)\nthis:\n  2 ^ m * (2 ^ (n - m) * unat (of_bl (to_bl b))) =\n  2 ^ n * unat (of_bl (to_bl b))\n\ngoal (1 subgoal):\n 1. unat (of_bl (to_bl b)) \\<noteq> 0 \\<Longrightarrow>\n    2 ^ m * (2 ^ (n - m) * unat (of_bl (to_bl b))) =\n    2 ^ n * unat (of_bl (to_bl b))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. unat (of_bl (to_bl b)) \\<noteq> 0 \\<Longrightarrow>\n    2 ^ m * (2 ^ (n - m) * unat (of_bl (to_bl b))) =\n    2 ^ n * unat (of_bl (to_bl b))", "case False"], ["proof (state)\nthis:\n  unat (of_bl (to_bl b)) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. unat (of_bl (to_bl b)) \\<noteq> 0 \\<Longrightarrow>\n    2 ^ m * (2 ^ (n - m) * unat (of_bl (to_bl b))) =\n    2 ^ n * unat (of_bl (to_bl b))", "have help_mult: \"x \\<noteq> 0 \\<Longrightarrow> b * (c * x) = a * (x::nat)  \\<longleftrightarrow> b * c = a\" for x a b c"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> (b * (c * x) = a * x) = (b * c = a)", "by simp"], ["proof (state)\nthis:\n  ?x \\<noteq> 0 \\<Longrightarrow>\n  (?b * (?c * ?x) = ?a * ?x) = (?b * ?c = ?a)\n\ngoal (1 subgoal):\n 1. unat (of_bl (to_bl b)) \\<noteq> 0 \\<Longrightarrow>\n    2 ^ m * (2 ^ (n - m) * unat (of_bl (to_bl b))) =\n    2 ^ n * unat (of_bl (to_bl b))", "from assms"], ["proof (chain)\npicking this:\n  m + 16 \\<le> n\n  n \\<le> 128 - 16", "show ?thesis"], ["proof (prove)\nusing this:\n  m + 16 \\<le> n\n  n \\<le> 128 - 16\n\ngoal (1 subgoal):\n 1. 2 ^ m * (2 ^ (n - m) * unat (of_bl (to_bl b))) =\n    2 ^ n * unat (of_bl (to_bl b))", "apply(subst help_mult[OF False])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m + 16 \\<le> n; n \\<le> 128 - 16\\<rbrakk>\n    \\<Longrightarrow> 2 ^ m * 2 ^ (n - m) = 2 ^ n", "apply(subst Power.monoid_mult_class.power_add[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m + 16 \\<le> n; n \\<le> 128 - 16\\<rbrakk>\n    \\<Longrightarrow> 2 ^ (m + (n - m)) = 2 ^ n", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  2 ^ m * (2 ^ (n - m) * unat (of_bl (to_bl b))) =\n  2 ^ n * unat (of_bl (to_bl b))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  2 ^ m * (2 ^ (n - m) * unat (of_bl (to_bl b))) =\n  2 ^ n * unat (of_bl (to_bl b))\n\ngoal (1 subgoal):\n 1. (UCAST(16 \\<rightarrow> 128) b << n) && (mask 16 << m) = 0", "from assms"], ["proof (chain)\npicking this:\n  m + 16 \\<le> n\n  n \\<le> 128 - 16", "have \"unat ((2 ^ n)::128 word) * unat ((of_bl::bool list \\<Rightarrow> 128 word) (to_bl b)) mod 2 ^ LENGTH(128) =\n        2 ^ m * (2 ^ (n - m) * unat ((of_bl::bool list \\<Rightarrow> 128 word) (to_bl b)) mod 2 ^ LENGTH(128))\""], ["proof (prove)\nusing this:\n  m + 16 \\<le> n\n  n \\<le> 128 - 16\n\ngoal (1 subgoal):\n 1. unat (2 ^ n) * unat (of_bl (to_bl b)) mod 2 ^ LENGTH(128) =\n    2 ^ m * (2 ^ (n - m) * unat (of_bl (to_bl b)) mod 2 ^ LENGTH(128))", "apply(subst nat_mod_eq')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>m + 16 \\<le> n; n \\<le> 128 - 16\\<rbrakk>\n    \\<Longrightarrow> unat (2 ^ n) * unat (of_bl (to_bl b))\n                      < 2 ^ LENGTH(128)\n 2. \\<lbrakk>m + 16 \\<le> n; n \\<le> 128 - 16\\<rbrakk>\n    \\<Longrightarrow> unat (2 ^ n) * unat (of_bl (to_bl b)) =\n                      2 ^ m *\n                      (2 ^ (n - m) * unat (of_bl (to_bl b)) mod\n                       2 ^ LENGTH(128))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m + 16 \\<le> n; n \\<le> 128 - 16\\<rbrakk>\n    \\<Longrightarrow> unat (2 ^ n) * unat (of_bl (to_bl b))\n                      < 2 ^ LENGTH(128)", "apply(subst unat_power_lower)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>m + 16 \\<le> n; n \\<le> 128 - 16\\<rbrakk>\n    \\<Longrightarrow> n < LENGTH(128)\n 2. \\<lbrakk>m + 16 \\<le> n; n \\<le> 128 - 16\\<rbrakk>\n    \\<Longrightarrow> 2 ^ n * unat (of_bl (to_bl b)) < 2 ^ LENGTH(128)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m + 16 \\<le> n; n \\<le> 128 - 16\\<rbrakk>\n    \\<Longrightarrow> n < LENGTH(128)", "by(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m + 16 \\<le> n; n \\<le> 128 - 16\\<rbrakk>\n    \\<Longrightarrow> 2 ^ n * unat (of_bl (to_bl b)) < 2 ^ LENGTH(128)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m + 16 \\<le> n; n \\<le> 128 - 16\\<rbrakk>\n    \\<Longrightarrow> 2 ^ n * unat (of_bl (to_bl b)) < 2 ^ LENGTH(128)", "by (rule power_less_128_helper) simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m + 16 \\<le> n; n \\<le> 128 - 16\\<rbrakk>\n    \\<Longrightarrow> unat (2 ^ n) * unat (of_bl (to_bl b)) =\n                      2 ^ m *\n                      (2 ^ (n - m) * unat (of_bl (to_bl b)) mod\n                       2 ^ LENGTH(128))", "apply(subst nat_mod_eq')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>m + 16 \\<le> n; n \\<le> 128 - 16\\<rbrakk>\n    \\<Longrightarrow> 2 ^ (n - m) * unat (of_bl (to_bl b)) < 2 ^ LENGTH(128)\n 2. \\<lbrakk>m + 16 \\<le> n; n \\<le> 128 - 16\\<rbrakk>\n    \\<Longrightarrow> unat (2 ^ n) * unat (of_bl (to_bl b)) =\n                      2 ^ m * (2 ^ (n - m) * unat (of_bl (to_bl b)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m + 16 \\<le> n; n \\<le> 128 - 16\\<rbrakk>\n    \\<Longrightarrow> 2 ^ (n - m) * unat (of_bl (to_bl b)) < 2 ^ LENGTH(128)", "by(rule power_less_128_helper) simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m + 16 \\<le> n; n \\<le> 128 - 16\\<rbrakk>\n    \\<Longrightarrow> unat (2 ^ n) * unat (of_bl (to_bl b)) =\n                      2 ^ m * (2 ^ (n - m) * unat (of_bl (to_bl b)))", "apply(subst unat_power_lower)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>m + 16 \\<le> n; n \\<le> 128 - 16\\<rbrakk>\n    \\<Longrightarrow> n < LENGTH(128)\n 2. \\<lbrakk>m + 16 \\<le> n; n \\<le> 128 - 16\\<rbrakk>\n    \\<Longrightarrow> 2 ^ n * unat (of_bl (to_bl b)) =\n                      2 ^ m * (2 ^ (n - m) * unat (of_bl (to_bl b)))", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m + 16 \\<le> n; n \\<le> 128 - 16\\<rbrakk>\n    \\<Longrightarrow> 2 ^ n * unat (of_bl (to_bl b)) =\n                      2 ^ m * (2 ^ (n - m) * unat (of_bl (to_bl b)))", "apply(simp only: *)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  unat (2 ^ n) * unat (of_bl (to_bl b)) mod 2 ^ LENGTH(128) =\n  2 ^ m * (2 ^ (n - m) * unat (of_bl (to_bl b)) mod 2 ^ LENGTH(128))\n\ngoal (1 subgoal):\n 1. (UCAST(16 \\<rightarrow> 128) b << n) && (mask 16 << m) = 0", "hence ex_k: \"\\<exists>k. unat ((2 ^ n)::128 word) * unat ((of_bl::bool list \\<Rightarrow> 128 word) (to_bl b)) mod 2 ^ LENGTH(128) = 2 ^ m * k\""], ["proof (prove)\nusing this:\n  unat (2 ^ n) * unat (of_bl (to_bl b)) mod 2 ^ LENGTH(128) =\n  2 ^ m * (2 ^ (n - m) * unat (of_bl (to_bl b)) mod 2 ^ LENGTH(128))\n\ngoal (1 subgoal):\n 1. \\<exists>k.\n       unat (2 ^ n) * unat (of_bl (to_bl b)) mod 2 ^ LENGTH(128) = 2 ^ m * k", "by blast"], ["proof (state)\nthis:\n  \\<exists>k.\n     unat (2 ^ n) * unat (of_bl (to_bl b)) mod 2 ^ LENGTH(128) = 2 ^ m * k\n\ngoal (1 subgoal):\n 1. (UCAST(16 \\<rightarrow> 128) b << n) && (mask 16 << m) = 0", "hence aligned: \"is_aligned ((of_bl::bool list \\<Rightarrow> 128 word) (to_bl b) << n) m\""], ["proof (prove)\nusing this:\n  \\<exists>k.\n     unat (2 ^ n) * unat (of_bl (to_bl b)) mod 2 ^ LENGTH(128) = 2 ^ m * k\n\ngoal (1 subgoal):\n 1. is_aligned (of_bl (to_bl b) << n) m", "unfolding is_aligned_iff_dvd_nat"], ["proof (prove)\nusing this:\n  \\<exists>k.\n     unat (2 ^ n) * unat (of_bl (to_bl b)) mod 2 ^ LENGTH(128) = 2 ^ m * k\n\ngoal (1 subgoal):\n 1. 2 ^ m dvd unat (of_bl (to_bl b) << n)", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  \\<exists>k.\n     unat (2 ^ n) * unat (of_bl (to_bl b)) mod 2 ^ LENGTH(128) = 2 ^ m * k\n\ngoal (1 subgoal):\n 1. \\<exists>k. unat (of_bl (to_bl b) << n) = 2 ^ m * k", "unfolding shiftl_t2n"], ["proof (prove)\nusing this:\n  \\<exists>k.\n     unat (2 ^ n) * unat (of_bl (to_bl b)) mod 2 ^ LENGTH(128) = 2 ^ m * k\n\ngoal (1 subgoal):\n 1. \\<exists>k. unat (2 ^ n * of_bl (to_bl b)) = 2 ^ m * k", "unfolding Word.unat_word_ariths(2)"], ["proof (prove)\nusing this:\n  \\<exists>k.\n     unat (2 ^ n) * unat (of_bl (to_bl b)) mod 2 ^ LENGTH(128) = 2 ^ m * k\n\ngoal (1 subgoal):\n 1. \\<exists>k.\n       unat (2 ^ n) * unat (of_bl (to_bl b)) mod 2 ^ LENGTH(128) = 2 ^ m * k", "by assumption"], ["proof (state)\nthis:\n  is_aligned (of_bl (to_bl b) << n) m\n\ngoal (1 subgoal):\n 1. (UCAST(16 \\<rightarrow> 128) b << n) && (mask 16 << m) = 0", "from assms"], ["proof (chain)\npicking this:\n  m + 16 \\<le> n\n  n \\<le> 128 - 16", "have of_bl_to_bl_shift_mask: \"((of_bl::bool list \\<Rightarrow> 128 word) (to_bl b) << n) && mask (16 + m) = 0\""], ["proof (prove)\nusing this:\n  m + 16 \\<le> n\n  n \\<le> 128 - 16\n\ngoal (1 subgoal):\n 1. (of_bl (to_bl b) << n) && mask (16 + m) = 0", "using is_aligned_mask is_aligned_shiftl"], ["proof (prove)\nusing this:\n  m + 16 \\<le> n\n  n \\<le> 128 - 16\n  is_aligned ?w ?n = (?w && mask ?n = 0)\n  is_aligned ?w (?n - ?m) \\<Longrightarrow> is_aligned (?w << ?m) ?n\n\ngoal (1 subgoal):\n 1. (of_bl (to_bl b) << n) && mask (16 + m) = 0", "by force"], ["proof (state)\nthis:\n  (of_bl (to_bl b) << n) && mask (16 + m) = 0\n\ngoal (1 subgoal):\n 1. (UCAST(16 \\<rightarrow> 128) b << n) && (mask 16 << m) = 0", "(*sledgehammer*)"], ["proof (state)\nthis:\n  (of_bl (to_bl b) << n) && mask (16 + m) = 0\n\ngoal (1 subgoal):\n 1. (UCAST(16 \\<rightarrow> 128) b << n) && (mask 16 << m) = 0", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (UCAST(16 \\<rightarrow> 128) b << n) && (mask 16 << m) = 0", "apply(subst ucast_bl)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. (of_bl (to_bl b) << n) && (mask 16 << m) = 0", "apply(subst word_and_mask_shiftl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (of_bl (to_bl b) << n >> m) && mask 16 << m = 0", "apply(subst aligned_shiftr_mask_shiftl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. is_aligned (of_bl (to_bl b) << n) m\n 2. (of_bl (to_bl b) << n) && mask (16 + m) = 0", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_aligned (of_bl (to_bl b) << n) m", "by (fact aligned)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (of_bl (to_bl b) << n) && mask (16 + m) = 0", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. (of_bl (to_bl b) << n) && mask (16 + m) = 0", "by (fact of_bl_to_bl_shift_mask)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (UCAST(16 \\<rightarrow> 128) b << n) && (mask 16 << m) = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma helper_masked_ucast_equal_generic:\n  fixes b::\"16 word\"\n  assumes \"n \\<le> 128 - 16\"\n  shows \"ucast (((ucast:: 16 word \\<Rightarrow> 128 word) b << n) && (mask 16 << n) >> n) = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. UCAST(128 \\<rightarrow> 16)\n     ((UCAST(16 \\<rightarrow> 128) b << n) && (mask 16 << n) >> n) =\n    b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. UCAST(128 \\<rightarrow> 16)\n     ((UCAST(16 \\<rightarrow> 128) b << n) && (mask 16 << n) >> n) =\n    b", "have ucast_mask: \"(ucast:: 16 word \\<Rightarrow> 128 word) b && mask 16 = ucast b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. UCAST(16 \\<rightarrow> 128) b && mask 16 = UCAST(16 \\<rightarrow> 128) b", "by transfer (simp flip: take_bit_eq_mask)"], ["proof (state)\nthis:\n  UCAST(16 \\<rightarrow> 128) b && mask 16 = UCAST(16 \\<rightarrow> 128) b\n\ngoal (1 subgoal):\n 1. UCAST(128 \\<rightarrow> 16)\n     ((UCAST(16 \\<rightarrow> 128) b << n) && (mask 16 << n) >> n) =\n    b", "from assms"], ["proof (chain)\npicking this:\n  n \\<le> 128 - 16", "have \"ucast (((ucast:: 16 word \\<Rightarrow> 128 word) b && mask (128 - n) && mask 16) && mask (128 - n)) = b\""], ["proof (prove)\nusing this:\n  n \\<le> 128 - 16\n\ngoal (1 subgoal):\n 1. UCAST(128 \\<rightarrow> 16)\n     ((UCAST(16 \\<rightarrow> 128) b && mask (128 - n) && mask 16) &&\n      mask (128 - n)) =\n    b", "by (auto simp add: nth_ucast word_size intro: word_eqI)"], ["proof (state)\nthis:\n  UCAST(128 \\<rightarrow> 16)\n   ((UCAST(16 \\<rightarrow> 128) b && mask (128 - n) && mask 16) &&\n    mask (128 - n)) =\n  b\n\ngoal (1 subgoal):\n 1. UCAST(128 \\<rightarrow> 16)\n     ((UCAST(16 \\<rightarrow> 128) b << n) && (mask 16 << n) >> n) =\n    b", "thus ?thesis"], ["proof (prove)\nusing this:\n  UCAST(128 \\<rightarrow> 16)\n   ((UCAST(16 \\<rightarrow> 128) b && mask (128 - n) && mask 16) &&\n    mask (128 - n)) =\n  b\n\ngoal (1 subgoal):\n 1. UCAST(128 \\<rightarrow> 16)\n     ((UCAST(16 \\<rightarrow> 128) b << n) && (mask 16 << n) >> n) =\n    b", "apply(subst word_and_mask_shiftl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. UCAST(128 \\<rightarrow> 16)\n     ((UCAST(16 \\<rightarrow> 128) b && mask (128 - n) && mask 16) &&\n      mask (128 - n)) =\n    b \\<Longrightarrow>\n    UCAST(128 \\<rightarrow> 16)\n     ((UCAST(16 \\<rightarrow> 128) b << n >> n) && mask 16 << n >> n) =\n    b", "apply(subst shiftl_shiftr3)"], ["proof (prove)\ngoal (2 subgoals):\n 1. UCAST(128 \\<rightarrow> 16)\n     ((UCAST(16 \\<rightarrow> 128) b && mask (128 - n) && mask 16) &&\n      mask (128 - n)) =\n    b \\<Longrightarrow>\n    n \\<le> n\n 2. UCAST(128 \\<rightarrow> 16)\n     ((UCAST(16 \\<rightarrow> 128) b && mask (128 - n) && mask 16) &&\n      mask (128 - n)) =\n    b \\<Longrightarrow>\n    UCAST(128 \\<rightarrow> 16)\n     (((UCAST(16 \\<rightarrow> 128) b >> n - n) &&\n       mask (size (UCAST(16 \\<rightarrow> 128) b) - n)) &&\n      mask 16 <<\n      n >>\n      n) =\n    b", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. UCAST(128 \\<rightarrow> 16)\n     ((UCAST(16 \\<rightarrow> 128) b && mask (128 - n) && mask 16) &&\n      mask (128 - n)) =\n    b \\<Longrightarrow>\n    UCAST(128 \\<rightarrow> 16)\n     (((UCAST(16 \\<rightarrow> 128) b >> n - n) &&\n       mask (size (UCAST(16 \\<rightarrow> 128) b) - n)) &&\n      mask 16 <<\n      n >>\n      n) =\n    b", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. UCAST(128 \\<rightarrow> 16)\n     ((UCAST(16 \\<rightarrow> 128) b && mask (128 - n) && mask 16) &&\n      mask (128 - n)) =\n    b \\<Longrightarrow>\n    UCAST(128 \\<rightarrow> 16)\n     ((UCAST(16 \\<rightarrow> 128) b &&\n       mask (size (UCAST(16 \\<rightarrow> 128) b) - n)) &&\n      mask 16 <<\n      n >>\n      n) =\n    b", "apply(subst shiftl_shiftr3)"], ["proof (prove)\ngoal (2 subgoals):\n 1. UCAST(128 \\<rightarrow> 16)\n     ((UCAST(16 \\<rightarrow> 128) b && mask (128 - n) && mask 16) &&\n      mask (128 - n)) =\n    b \\<Longrightarrow>\n    n \\<le> n\n 2. UCAST(128 \\<rightarrow> 16)\n     ((UCAST(16 \\<rightarrow> 128) b && mask (128 - n) && mask 16) &&\n      mask (128 - n)) =\n    b \\<Longrightarrow>\n    UCAST(128 \\<rightarrow> 16)\n     (((UCAST(16 \\<rightarrow> 128) b &&\n        mask (size (UCAST(16 \\<rightarrow> 128) b) - n)) &&\n       mask 16 >>\n       n - n) &&\n      mask\n       (size\n         ((UCAST(16 \\<rightarrow> 128) b &&\n           mask (size (UCAST(16 \\<rightarrow> 128) b) - n)) &&\n          mask 16) -\n        n)) =\n    b", "apply(simp_all add: word_size and.assoc)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  UCAST(128 \\<rightarrow> 16)\n   ((UCAST(16 \\<rightarrow> 128) b << n) && (mask 16 << n) >> n) =\n  b\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}