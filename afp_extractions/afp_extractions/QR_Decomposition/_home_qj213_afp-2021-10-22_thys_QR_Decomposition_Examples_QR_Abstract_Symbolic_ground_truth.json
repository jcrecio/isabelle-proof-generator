{"file_name": "/home/qj213/afp-2021-10-22/thys/QR_Decomposition/Examples_QR_Abstract_Symbolic.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/QR_Decomposition", "problem_names": ["lemma [code abstract]: \"vec_nth (show_vec_real v) = (% i. show_real (v $ i))\"", "lemma[code abstract]: \"vec_nth (show_matrix_real A) = (% i. show_vec_real (A $ i))\""], "translations": [["", "lemma [code abstract]: \"vec_nth (show_vec_real v) = (% i. show_real (v $ i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (show_vec_real v) = (\\<lambda>i. show_real (v $ i))", "unfolding show_vec_real_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (\\<chi>i. show_real (v $ i)) = (\\<lambda>i. show_real (v $ i))", "by auto"], ["", "definition \"show_matrix_real A = (\\<chi> i. show_vec_real (A $ i))\""], ["", "lemma[code abstract]: \"vec_nth (show_matrix_real A) = (% i. show_vec_real (A $ i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (show_matrix_real A) = (\\<lambda>i. show_vec_real (A $ i))", "unfolding show_matrix_real_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (\\<chi>i. show_vec_real (A $ i)) =\n    (\\<lambda>i. show_vec_real (A $ i))", "by auto"], ["", "subsubsection\\<open>Examples\\<close>"], ["", "value \"let A = list_of_list_to_matrix [[1,2,4],[9,4,5],[0,0,0]]::real^3^3 in \n  matrix_to_list_of_list (show_matrix_real (divide_by_norm A))\""], ["", "value \"let A = list_of_list_to_matrix [[1,2,4],[9,4,5],[0,0,4]]::real^3^3 in\n  matrix_to_list_of_list (show_matrix_real (fst (QR_decomposition A)))\""], ["", "value \"let A = list_of_list_to_matrix [[1,2,4],[9,4,5],[0,0,4]]::real^3^3 in\n  matrix_to_list_of_list (show_matrix_real (snd (QR_decomposition A)))\""], ["", "value \"let A = list_of_list_to_matrix [[1,2,4],[9,4,5],[0,0,4]]::real^3^3 in\n  matrix_to_list_of_list (show_matrix_real ((fst (QR_decomposition A)) ** (snd (QR_decomposition A))))\""], ["", "value \"let A = list_of_list_to_matrix [[1,2,4],[9,4,5],[0,0,4],[3,5,4]]::real^3^4 in\n  matrix_to_list_of_list (show_matrix_real ((fst (QR_decomposition A)) ** (snd (QR_decomposition A))))\""], ["", "(*Case m \\<ge> n and dependent columns*)"], ["", "value \"let A = list_of_list_to_matrix [[1,2,1],[9,4,9],[2,0,2],[0,5,0]]::real^3^4 in\n  matrix_to_list_of_list (show_matrix_real ((fst (QR_decomposition A)) ** (snd (QR_decomposition A))))\""], ["", "value \"let A = list_of_list_to_matrix [[1,2,1],[9,4,9],[2,0,2],[0,5,0]]::real^3^4 in\n  matrix_to_list_of_list (show_matrix_real (fst (QR_decomposition A)))\""], ["", "value \"let A = list_of_list_to_matrix [[1,2,1],[9,4,9],[2,0,2],[0,5,0]]::real^3^4 in\n  vec_to_list (show_vec_real ((column 0 (fst (QR_decomposition A)))))\""], ["", "value \"let A = list_of_list_to_matrix [[1,2,1],[9,4,9],[2,0,2],[0,5,0]]::real^3^4 in\n  vec_to_list (show_vec_real ((column 1 (fst (QR_decomposition A)))))\""], ["", "value \"let A = list_of_list_to_matrix [[1,2,1],[9,4,9],[2,0,2],[0,5,0]]::real^3^4 in\n  matrix_to_list_of_list (show_matrix_real (snd (QR_decomposition A)))\""], ["", "(*R is not invertible*)\n\n(*Case m < n and dependent columns*)"], ["", "value \"let A = list_of_list_to_matrix [[1,2,1],[9,4,9]]::real^3^2 in\n  matrix_to_list_of_list (show_matrix_real ((fst (QR_decomposition A)) ** (snd (QR_decomposition A))))\""], ["", "value \"let A = list_of_list_to_matrix [[1,2,1],[9,4,9]]::real^3^2 in\n  matrix_to_list_of_list (show_matrix_real ((fst (QR_decomposition A))))\""], ["", "value \"let A = list_of_list_to_matrix [[1,2,1],[9,4,9]]::real^3^2 in\n  matrix_to_list_of_list (show_matrix_real ((snd (QR_decomposition A))))\""], ["", "(*\n  Limitation: if the input matrix has irrational numbers, then probably we won't be working in the same\n  field extension so the computation will fail.\n*)\n\n(*\nvalue \"let A = list_of_list_to_matrix [[1,sqrt 2,4],[sqrt 5,4,5],[0,sqrt 7,4]]::real^3^3 in\n  matrix_to_list_of_list (show_matrix_real ((fst (QR_decomposition A))))\"\n*)"], ["", "definition \"example1 = (let A = list_of_list_to_matrix [[1,2,1],[9,4,9]]::real^3^2 in\n  matrix_to_list_of_list (show_matrix_real ((snd (QR_decomposition A)))))\""], ["", "export_code example1 in SML module_name QR"], ["", "end"]]}