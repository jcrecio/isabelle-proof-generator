{"file_name": "/home/qj213/afp-2021-10-22/thys/QR_Decomposition/QR_Decomposition.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/QR_Decomposition", "problem_names": ["lemma norm_column_divide_by_norm:\n  fixes A::\"'a::{real_inner}^'cols^'rows\"\n  assumes a: \"column a A \\<noteq> 0\"\n  shows \"norm (column a (divide_by_norm A)) = 1\"", "lemma span_columns_divide_by_norm:\n  shows \"span (columns A) = span (columns (divide_by_norm A))\"", "lemma divide_by_norm_row_code[code abstract]:\n  \"vec_nth (divide_by_norm_row A a) = (% b. ((1 / norm (column b A)) *\\<^sub>R column b A) $ a)\"", "lemma divide_by_norm_code [code abstract]:\n  \"vec_nth (divide_by_norm A) = divide_by_norm_row A\"", "lemma is_basis_columns_fst_QR_decomposition:\n  fixes A::\"real^'n::{mod_type}^'m::{mod_type}\"\n  assumes b: \"is_basis (columns A)\"\n  and c: \"card (columns A) = ncols A\"\n  shows \"is_basis (columns (fst (QR_decomposition A))) \n  \\<and> card (columns (fst (QR_decomposition A))) = ncols A\"", "lemma orthogonal_fst_QR_decomposition:\n  shows \"pairwise orthogonal (columns (fst (QR_decomposition A)))\"", "lemma qk_uk_norm:\n  \"(1/(norm (column k ((Gram_Schmidt_matrix A))))) *\\<^sub>R (column k ((Gram_Schmidt_matrix A))) \n  = column k (fst(QR_decomposition A))\"", "lemma norm_columns_fst_QR_decomposition:\n  fixes A::\"real^'n::{mod_type}^'m::{mod_type}\"\n  assumes \"rank A = ncols A\"\n  shows \"norm (column i (fst (QR_decomposition A))) = 1\"", "lemma independent_columns_fst_QR_decomposition:\n  fixes A::\"real^'n::{mod_type}^'m::{mod_type}\"\n  assumes b: \"vec.independent (columns A)\"\n  and c: \"card (columns A) = ncols A\"\n  shows \"vec.independent (columns (fst (QR_decomposition A))) \n  \\<and> card (columns (fst (QR_decomposition A))) = ncols A\"", "lemma orthogonal_matrix_fst_QR_decomposition:\n  fixes A::\"real^'n::{mod_type}^'m::{mod_type}\"\n  assumes r: \"rank A = ncols A\"\n  shows \"transpose (fst (QR_decomposition A)) ** (fst (QR_decomposition A)) = mat 1\"", "lemma column_eq_fst_QR_decomposition:\n  fixes A::\"real^'n::{mod_type}^'m::{mod_type}\"\n  assumes r: \"rank A = ncols A\"\n  and c: \"column i (fst (QR_decomposition A)) = column ia (fst (QR_decomposition A))\"\n  shows \"i = ia\"", "lemma column_QR_decomposition':\n  fixes A::\"real^'n::{mod_type}^'m::{mod_type}\"\n  assumes r: \"rank A = ncols A\"\n  shows \"(column k A) = column k ((Gram_Schmidt_matrix A)) \n  + (\\<Sum>x\\<in>{column i (fst (QR_decomposition A))|i. i < k}. (x \\<bullet> (column k A) / (x \\<bullet> x)) *\\<^sub>R x)\"", "lemma norm_uk_eq:\n  fixes A::\"real^'n::{mod_type}^'m::{mod_type}\"\n  assumes r: \"rank A = ncols A\"\n  shows \"norm (column k ((Gram_Schmidt_matrix A))) = ((column k (fst(QR_decomposition A))) \\<bullet> (column k A))\"", "lemma orthogonal_columns_fst_QR_decomposition:\n  assumes i_not_ia: \"(column i (fst (QR_decomposition A))) \\<noteq> (column ia (fst (QR_decomposition A)))\"\n  shows \"(column i (fst (QR_decomposition A)) \\<bullet> column ia (fst (QR_decomposition A))) = 0\"", "lemma scaler_column_fst_QR_decomposition:\n  fixes A::\"real^'n::{mod_type}^'m::{mod_type}\"\n  assumes i: \"i>j\"\n  and r: \"rank A = ncols A\"\n  shows \"column i (fst (QR_decomposition A)) \\<bullet> column j A = 0\"", "lemma R_Qi_Aj:\n  fixes A::\"real^'n::{mod_type}^'m::{mod_type}\"\n  shows \"(snd (QR_decomposition A)) $ i $ j = column i (fst (QR_decomposition A)) \\<bullet> column j A\"", "lemma sums_columns_Q_0:\n  fixes A::\"real^'n::{mod_type}^'m::{mod_type}\"\n  assumes r: \"rank A = ncols A\"\n  shows \"(\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i>b}. x \\<bullet> column b A * x $ a) = 0\"", "lemma QR_decomposition_mult:\n  fixes A::\"real^'n::{mod_type}^'m::{mod_type}\"\n  assumes r: \"rank A = ncols A\"\n  shows \"A = (fst (QR_decomposition A)) ** (snd (QR_decomposition A))\"", "lemma upper_triangular_snd_QR_decomposition:\n  fixes A::\"real^'n::{mod_type}^'m::{mod_type}\"\n  assumes r: \"rank A = ncols A\"\n  shows \"upper_triangular (snd (QR_decomposition A))\"", "lemma upper_triangular_invertible:\n  fixes A :: \"real^'n::{finite,wellorder}^'n::{finite,wellorder}\"\n  assumes u: \"upper_triangular A\"\n  and d: \"\\<forall>i. A $ i $ i \\<noteq> 0\" \n  shows \"invertible A\"", "lemma invertible_snd_QR_decomposition:\n  fixes A::\"real^'n::{mod_type}^'m::{mod_type}\"\n  assumes r: \"rank A = ncols A\"\n  shows \"invertible (snd (QR_decomposition A))\"", "lemma QR_decomposition:\n  fixes A::\"real^'n::{mod_type}^'m::{mod_type}\"\n  assumes r: \"rank A = ncols A\"\n  shows \"A = fst (QR_decomposition A) ** snd (QR_decomposition A) \\<and>\n  pairwise orthogonal (columns (fst (QR_decomposition A))) \\<and> \n  (\\<forall>i. norm (column i (fst (QR_decomposition A))) = 1) \\<and>\n  (transpose (fst (QR_decomposition A))) ** (fst (QR_decomposition A)) = mat 1 \\<and>\n  vec.independent (columns (fst (QR_decomposition A))) \\<and> \n  col_space A = col_space (fst (QR_decomposition A)) \\<and>\n  card (columns A) = card (columns (fst (QR_decomposition A))) \\<and>\n  invertible (snd (QR_decomposition A)) \\<and>\n  upper_triangular (snd (QR_decomposition A))\"", "lemma QR_decomposition_square:\n  fixes A::\"real^'n::{mod_type}^'n::{mod_type}\"\n  assumes r: \"rank A = ncols A\"\n  shows \"A = fst (QR_decomposition A) ** snd (QR_decomposition A) \\<and>\n  orthogonal_matrix (fst (QR_decomposition A)) \\<and>\n  upper_triangular (snd (QR_decomposition A)) \\<and>\n  invertible (snd (QR_decomposition A)) \\<and>    \n  pairwise orthogonal (columns (fst (QR_decomposition A))) \\<and> \n  (\\<forall>i. norm (column i (fst (QR_decomposition A))) = 1) \\<and>      \n  vec.independent (columns (fst (QR_decomposition A))) \\<and> \n  col_space A = col_space (fst (QR_decomposition A)) \\<and>\n  card (columns A) = card (columns (fst (QR_decomposition A)))\"", "lemma det_QR_decomposition:\n  fixes A::\"real^'n::{mod_type}^'n::{mod_type}\"\n  assumes r: \"rank A = ncols A\"\n  shows \"\\<bar>det A\\<bar> = \\<bar>(prod (\\<lambda>i. snd(QR_decomposition A)$i$i) (UNIV::'n set))\\<bar>\""], "translations": [["", "lemma norm_column_divide_by_norm:\n  fixes A::\"'a::{real_inner}^'cols^'rows\"\n  assumes a: \"column a A \\<noteq> 0\"\n  shows \"norm (column a (divide_by_norm A)) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (column a (divide_by_norm A)) = 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. norm (column a (divide_by_norm A)) = 1", "have not_0: \"norm (\\<chi> i. A $ i $ a) \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (\\<chi>i. A $ i $ a) \\<noteq> 0", "by (metis a column_def norm_eq_zero)"], ["proof (state)\nthis:\n  norm (\\<chi>i. A $ i $ a) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. norm (column a (divide_by_norm A)) = 1", "have \"column a (divide_by_norm A) = (\\<chi> i. (1 / norm (\\<chi> i. A $ i $ a)) *\\<^sub>R A $ i $ a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column a (divide_by_norm A) =\n    (\\<chi>i. (1 / norm (\\<chi>i. A $ i $ a)) *\\<^sub>R A $ i $ a)", "unfolding divide_by_norm_def column_def normalize_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>i.\n        (\\<chi>a b.\n            ((1 / norm (\\<chi>i. A $ i $ b)) *\\<^sub>R\n             (\\<chi>i. A $ i $ b)) $\n            a) $\n        i $\n        a) =\n    (\\<chi>i. (1 / norm (\\<chi>i. A $ i $ a)) *\\<^sub>R A $ i $ a)", "by auto"], ["proof (state)\nthis:\n  column a (divide_by_norm A) =\n  (\\<chi>i. (1 / norm (\\<chi>i. A $ i $ a)) *\\<^sub>R A $ i $ a)\n\ngoal (1 subgoal):\n 1. norm (column a (divide_by_norm A)) = 1", "also"], ["proof (state)\nthis:\n  column a (divide_by_norm A) =\n  (\\<chi>i. (1 / norm (\\<chi>i. A $ i $ a)) *\\<^sub>R A $ i $ a)\n\ngoal (1 subgoal):\n 1. norm (column a (divide_by_norm A)) = 1", "have \"... =  (1 / norm (\\<chi> i. A $ i $ a)) *\\<^sub>R (\\<chi> i.  A $ i $ a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>i. (1 / norm (\\<chi>i. A $ i $ a)) *\\<^sub>R A $ i $ a) =\n    (1 / norm (\\<chi>i. A $ i $ a)) *\\<^sub>R (\\<chi>i. A $ i $ a)", "unfolding vec_eq_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       (\\<chi>i. (1 / norm (\\<chi>i. A $ i $ a)) *\\<^sub>R A $ i $ a) $ i =\n       ((1 / norm (\\<chi>i. A $ i $ a)) *\\<^sub>R (\\<chi>i. A $ i $ a)) $ i", "by auto"], ["proof (state)\nthis:\n  (\\<chi>i. (1 / norm (\\<chi>i. A $ i $ a)) *\\<^sub>R A $ i $ a) =\n  (1 / norm (\\<chi>i. A $ i $ a)) *\\<^sub>R (\\<chi>i. A $ i $ a)\n\ngoal (1 subgoal):\n 1. norm (column a (divide_by_norm A)) = 1", "finally"], ["proof (chain)\npicking this:\n  column a (divide_by_norm A) =\n  (1 / norm (\\<chi>i. A $ i $ a)) *\\<^sub>R (\\<chi>i. A $ i $ a)", "have \"norm (column a (divide_by_norm A)) = norm ((1 / norm (\\<chi> i. A $ i $ a)) *\\<^sub>R (\\<chi> i.  A $ i $ a))\""], ["proof (prove)\nusing this:\n  column a (divide_by_norm A) =\n  (1 / norm (\\<chi>i. A $ i $ a)) *\\<^sub>R (\\<chi>i. A $ i $ a)\n\ngoal (1 subgoal):\n 1. norm (column a (divide_by_norm A)) =\n    norm ((1 / norm (\\<chi>i. A $ i $ a)) *\\<^sub>R (\\<chi>i. A $ i $ a))", "by simp"], ["proof (state)\nthis:\n  norm (column a (divide_by_norm A)) =\n  norm ((1 / norm (\\<chi>i. A $ i $ a)) *\\<^sub>R (\\<chi>i. A $ i $ a))\n\ngoal (1 subgoal):\n 1. norm (column a (divide_by_norm A)) = 1", "also"], ["proof (state)\nthis:\n  norm (column a (divide_by_norm A)) =\n  norm ((1 / norm (\\<chi>i. A $ i $ a)) *\\<^sub>R (\\<chi>i. A $ i $ a))\n\ngoal (1 subgoal):\n 1. norm (column a (divide_by_norm A)) = 1", "have \"... = \\<bar>1 / norm (\\<chi> i. A $ i $ a)\\<bar> * norm (\\<chi> i. A $ i $ a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm ((1 / norm (\\<chi>i. A $ i $ a)) *\\<^sub>R (\\<chi>i. A $ i $ a)) =\n    \\<bar>1 / norm (\\<chi>i. A $ i $ a)\\<bar> * norm (\\<chi>i. A $ i $ a)", "unfolding norm_scaleR"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>1 / norm (\\<chi>i. A $ i $ a)\\<bar> * norm (\\<chi>i. A $ i $ a) =\n    \\<bar>1 / norm (\\<chi>i. A $ i $ a)\\<bar> * norm (\\<chi>i. A $ i $ a)", ".."], ["proof (state)\nthis:\n  norm ((1 / norm (\\<chi>i. A $ i $ a)) *\\<^sub>R (\\<chi>i. A $ i $ a)) =\n  \\<bar>1 / norm (\\<chi>i. A $ i $ a)\\<bar> * norm (\\<chi>i. A $ i $ a)\n\ngoal (1 subgoal):\n 1. norm (column a (divide_by_norm A)) = 1", "also"], ["proof (state)\nthis:\n  norm ((1 / norm (\\<chi>i. A $ i $ a)) *\\<^sub>R (\\<chi>i. A $ i $ a)) =\n  \\<bar>1 / norm (\\<chi>i. A $ i $ a)\\<bar> * norm (\\<chi>i. A $ i $ a)\n\ngoal (1 subgoal):\n 1. norm (column a (divide_by_norm A)) = 1", "have \"... = (1 / norm (\\<chi> i. A $ i $ a)) * norm (\\<chi> i. A $ i $ a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>1 / norm (\\<chi>i. A $ i $ a)\\<bar> * norm (\\<chi>i. A $ i $ a) =\n    1 / norm (\\<chi>i. A $ i $ a) * norm (\\<chi>i. A $ i $ a)", "by auto"], ["proof (state)\nthis:\n  \\<bar>1 / norm (\\<chi>i. A $ i $ a)\\<bar> * norm (\\<chi>i. A $ i $ a) =\n  1 / norm (\\<chi>i. A $ i $ a) * norm (\\<chi>i. A $ i $ a)\n\ngoal (1 subgoal):\n 1. norm (column a (divide_by_norm A)) = 1", "also"], ["proof (state)\nthis:\n  \\<bar>1 / norm (\\<chi>i. A $ i $ a)\\<bar> * norm (\\<chi>i. A $ i $ a) =\n  1 / norm (\\<chi>i. A $ i $ a) * norm (\\<chi>i. A $ i $ a)\n\ngoal (1 subgoal):\n 1. norm (column a (divide_by_norm A)) = 1", "have \"... = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 / norm (\\<chi>i. A $ i $ a) * norm (\\<chi>i. A $ i $ a) = 1", "using not_0"], ["proof (prove)\nusing this:\n  norm (\\<chi>i. A $ i $ a) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 1 / norm (\\<chi>i. A $ i $ a) * norm (\\<chi>i. A $ i $ a) = 1", "by auto"], ["proof (state)\nthis:\n  1 / norm (\\<chi>i. A $ i $ a) * norm (\\<chi>i. A $ i $ a) = 1\n\ngoal (1 subgoal):\n 1. norm (column a (divide_by_norm A)) = 1", "finally"], ["proof (chain)\npicking this:\n  norm (column a (divide_by_norm A)) = 1", "show ?thesis"], ["proof (prove)\nusing this:\n  norm (column a (divide_by_norm A)) = 1\n\ngoal (1 subgoal):\n 1. norm (column a (divide_by_norm A)) = 1", "."], ["proof (state)\nthis:\n  norm (column a (divide_by_norm A)) = 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma span_columns_divide_by_norm:\n  shows \"span (columns A) = span (columns (divide_by_norm A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. span (columns A) = span (columns (divide_by_norm A))", "unfolding real_vector.span_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. columns A \\<subseteq> span (columns (divide_by_norm A)) \\<and>\n    columns (divide_by_norm A) \\<subseteq> span (columns A)", "proof (auto)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> columns A \\<Longrightarrow>\n       x \\<in> span (columns (divide_by_norm A))\n 2. \\<And>x.\n       x \\<in> columns (divide_by_norm A) \\<Longrightarrow>\n       x \\<in> span (columns A)", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> columns A \\<Longrightarrow>\n       x \\<in> span (columns (divide_by_norm A))\n 2. \\<And>x.\n       x \\<in> columns (divide_by_norm A) \\<Longrightarrow>\n       x \\<in> span (columns A)", "assume x: \"x \\<in> columns (divide_by_norm A)\""], ["proof (state)\nthis:\n  x \\<in> columns (divide_by_norm A)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> columns A \\<Longrightarrow>\n       x \\<in> span (columns (divide_by_norm A))\n 2. \\<And>x.\n       x \\<in> columns (divide_by_norm A) \\<Longrightarrow>\n       x \\<in> span (columns A)", "from this"], ["proof (chain)\npicking this:\n  x \\<in> columns (divide_by_norm A)", "obtain i where x_col_i: \"x=column i (divide_by_norm A)\""], ["proof (prove)\nusing this:\n  x \\<in> columns (divide_by_norm A)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        x = column i (divide_by_norm A) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding columns_def"], ["proof (prove)\nusing this:\n  x \\<in> {column i (divide_by_norm A) |i. i \\<in> UNIV}\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        x = column i (divide_by_norm A) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x = column i (divide_by_norm A)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> columns A \\<Longrightarrow>\n       x \\<in> span (columns (divide_by_norm A))\n 2. \\<And>x.\n       x \\<in> columns (divide_by_norm A) \\<Longrightarrow>\n       x \\<in> span (columns A)", "also"], ["proof (state)\nthis:\n  x = column i (divide_by_norm A)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> columns A \\<Longrightarrow>\n       x \\<in> span (columns (divide_by_norm A))\n 2. \\<And>x.\n       x \\<in> columns (divide_by_norm A) \\<Longrightarrow>\n       x \\<in> span (columns A)", "have \"... = (1/norm (column i  A)) *\\<^sub>R (column i A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column i (divide_by_norm A) =\n    (1 / norm (column i A)) *\\<^sub>R column i A", "unfolding divide_by_norm_def column_def normalize_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>ia.\n        (\\<chi>a b.\n            ((1 / norm (\\<chi>i. A $ i $ b)) *\\<^sub>R\n             (\\<chi>i. A $ i $ b)) $\n            a) $\n        ia $\n        i) =\n    (1 / norm (\\<chi>ia. A $ ia $ i)) *\\<^sub>R (\\<chi>ia. A $ ia $ i)", "by vector"], ["proof (state)\nthis:\n  column i (divide_by_norm A) = (1 / norm (column i A)) *\\<^sub>R column i A\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> columns A \\<Longrightarrow>\n       x \\<in> span (columns (divide_by_norm A))\n 2. \\<And>x.\n       x \\<in> columns (divide_by_norm A) \\<Longrightarrow>\n       x \\<in> span (columns A)", "finally"], ["proof (chain)\npicking this:\n  x = (1 / norm (column i A)) *\\<^sub>R column i A", "have x_eq: \"x=(1/norm (column i A)) *\\<^sub>R (column i A)\""], ["proof (prove)\nusing this:\n  x = (1 / norm (column i A)) *\\<^sub>R column i A\n\ngoal (1 subgoal):\n 1. x = (1 / norm (column i A)) *\\<^sub>R column i A", "."], ["proof (state)\nthis:\n  x = (1 / norm (column i A)) *\\<^sub>R column i A\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> columns A \\<Longrightarrow>\n       x \\<in> span (columns (divide_by_norm A))\n 2. \\<And>x.\n       x \\<in> columns (divide_by_norm A) \\<Longrightarrow>\n       x \\<in> span (columns A)", "show \"x \\<in> span (columns A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> span (columns A)", "by (unfold x_eq, rule span_mul, rule span_base, auto simp add: columns_def)"], ["proof (state)\nthis:\n  x \\<in> span (columns A)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> columns A \\<Longrightarrow>\n       x \\<in> span (columns (divide_by_norm A))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> columns A \\<Longrightarrow>\n       x \\<in> span (columns (divide_by_norm A))", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> columns A \\<Longrightarrow>\n       x \\<in> span (columns (divide_by_norm A))", "assume x: \"x \\<in> columns A\""], ["proof (state)\nthis:\n  x \\<in> columns A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> columns A \\<Longrightarrow>\n       x \\<in> span (columns (divide_by_norm A))", "show \"x \\<in> span (columns (divide_by_norm A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> span (columns (divide_by_norm A))", "proof (cases \"x=0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x = 0 \\<Longrightarrow> x \\<in> span (columns (divide_by_norm A))\n 2. x \\<noteq> 0 \\<Longrightarrow> x \\<in> span (columns (divide_by_norm A))", "case True"], ["proof (state)\nthis:\n  x = 0\n\ngoal (2 subgoals):\n 1. x = 0 \\<Longrightarrow> x \\<in> span (columns (divide_by_norm A))\n 2. x \\<noteq> 0 \\<Longrightarrow> x \\<in> span (columns (divide_by_norm A))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> span (columns (divide_by_norm A))", "by (metis True span_0)"], ["proof (state)\nthis:\n  x \\<in> span (columns (divide_by_norm A))\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> x \\<in> span (columns (divide_by_norm A))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> x \\<in> span (columns (divide_by_norm A))", "case False"], ["proof (state)\nthis:\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> x \\<in> span (columns (divide_by_norm A))", "from x"], ["proof (chain)\npicking this:\n  x \\<in> columns A", "obtain i where x_col_i: \"x=column i A\""], ["proof (prove)\nusing this:\n  x \\<in> columns A\n\ngoal (1 subgoal):\n 1. (\\<And>i. x = column i A \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding columns_def"], ["proof (prove)\nusing this:\n  x \\<in> {column i A |i. i \\<in> UNIV}\n\ngoal (1 subgoal):\n 1. (\\<And>i. x = column i A \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x = column i A\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> x \\<in> span (columns (divide_by_norm A))", "have \"x=column i A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = column i A", "using x_col_i"], ["proof (prove)\nusing this:\n  x = column i A\n\ngoal (1 subgoal):\n 1. x = column i A", "."], ["proof (state)\nthis:\n  x = column i A\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> x \\<in> span (columns (divide_by_norm A))", "also"], ["proof (state)\nthis:\n  x = column i A\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> x \\<in> span (columns (divide_by_norm A))", "have \"... = norm (column i A) *\\<^sub>R column i (divide_by_norm A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column i A = norm (column i A) *\\<^sub>R column i (divide_by_norm A)", "using False"], ["proof (prove)\nusing this:\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. column i A = norm (column i A) *\\<^sub>R column i (divide_by_norm A)", "unfolding x_col_i columns_def divide_by_norm_def column_def normalize_def"], ["proof (prove)\nusing this:\n  (\\<chi>ia. A $ ia $ i) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<chi>ia. A $ ia $ i) =\n    norm (\\<chi>ia. A $ ia $ i) *\\<^sub>R\n    (\\<chi>ia.\n        (\\<chi>a b.\n            ((1 / norm (\\<chi>i. A $ i $ b)) *\\<^sub>R\n             (\\<chi>i. A $ i $ b)) $\n            a) $\n        ia $\n        i)", "by vector"], ["proof (state)\nthis:\n  column i A = norm (column i A) *\\<^sub>R column i (divide_by_norm A)\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> x \\<in> span (columns (divide_by_norm A))", "finally"], ["proof (chain)\npicking this:\n  x = norm (column i A) *\\<^sub>R column i (divide_by_norm A)", "have x_eq: \"x = norm (column i A) *\\<^sub>R column i (divide_by_norm A)\""], ["proof (prove)\nusing this:\n  x = norm (column i A) *\\<^sub>R column i (divide_by_norm A)\n\ngoal (1 subgoal):\n 1. x = norm (column i A) *\\<^sub>R column i (divide_by_norm A)", "."], ["proof (state)\nthis:\n  x = norm (column i A) *\\<^sub>R column i (divide_by_norm A)\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> x \\<in> span (columns (divide_by_norm A))", "show \"x \\<in> span (columns (divide_by_norm A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> span (columns (divide_by_norm A))", "by (unfold x_eq, rule span_mul, rule span_base,\n        auto simp add: columns_def Let_def)"], ["proof (state)\nthis:\n  x \\<in> span (columns (divide_by_norm A))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> span (columns (divide_by_norm A))\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>Code lemmas\\<close>"], ["", "definition \"divide_by_norm_row A a = vec_lambda(% b. ((1 / norm (column b A)) *\\<^sub>R column b A) $ a)\""], ["", "lemma divide_by_norm_row_code[code abstract]:\n  \"vec_nth (divide_by_norm_row A a) = (% b. ((1 / norm (column b A)) *\\<^sub>R column b A) $ a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (divide_by_norm_row A a) =\n    (\\<lambda>b. ((1 / norm (column b A)) *\\<^sub>R column b A) $ a)", "unfolding divide_by_norm_row_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (\\<chi>b. ((1 / norm (column b A)) *\\<^sub>R column b A) $ a) =\n    (\\<lambda>b. ((1 / norm (column b A)) *\\<^sub>R column b A) $ a)", "by (metis (lifting) vec_lambda_beta)"], ["", "lemma divide_by_norm_code [code abstract]:\n  \"vec_nth (divide_by_norm A) = divide_by_norm_row A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (divide_by_norm A) = divide_by_norm_row A", "unfolding divide_by_norm_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (\\<chi>a b. Projections.normalize (column b A) $ a) =\n    divide_by_norm_row A", "unfolding divide_by_norm_row_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (\\<chi>a b. Projections.normalize (column b A) $ a) =\n    (\\<lambda>a.\n        \\<chi>b. ((1 / norm (column b A)) *\\<^sub>R column b A) $ a)", "unfolding normalize_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (\\<chi>a b. ((1 / norm (column b A)) *\\<^sub>R column b A) $ a) =\n    (\\<lambda>a.\n        \\<chi>b. ((1 / norm (column b A)) *\\<^sub>R column b A) $ a)", "by fastforce"], ["", "subsubsection\\<open>The QR Decomposition\\<close>"], ["", "text\\<open>The QR decomposition. Given a real matrix @{term \"A\"}, the algorithm will return a pair @{term \"(Q,R)\"}\n  where @{term \"Q\"} is an matrix whose columns are orthogonal unit vectors, @{term \"R\"} \n  is upper triangular and @{term \"A=Q**R\"}.\\<close>"], ["", "definition \"QR_decomposition A = (let Q = divide_by_norm (Gram_Schmidt_matrix A) in (Q, (transpose Q) ** A))\""], ["", "lemma is_basis_columns_fst_QR_decomposition:\n  fixes A::\"real^'n::{mod_type}^'m::{mod_type}\"\n  assumes b: \"is_basis (columns A)\"\n  and c: \"card (columns A) = ncols A\"\n  shows \"is_basis (columns (fst (QR_decomposition A))) \n  \\<and> card (columns (fst (QR_decomposition A))) = ncols A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_basis (columns (fst (QR_decomposition A))) \\<and>\n    card (columns (fst (QR_decomposition A))) = ncols A", "proof (rule conjI, unfold is_basis_def, rule conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. vec.independent (columns (fst (QR_decomposition A)))\n 2. vec.span (columns (fst (QR_decomposition A))) = UNIV\n 3. card (columns (fst (QR_decomposition A))) = ncols A", "have \"vec.span (columns (fst (QR_decomposition A))) = vec.span (columns (Gram_Schmidt_matrix A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec.span (columns (fst (QR_decomposition A))) =\n    vec.span (columns (Gram_Schmidt_matrix A))", "unfolding vec.span_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. columns (fst (QR_decomposition A))\n    \\<subseteq> vec.span (columns (Gram_Schmidt_matrix A)) \\<and>\n    columns (Gram_Schmidt_matrix A)\n    \\<subseteq> vec.span (columns (fst (QR_decomposition A)))", "proof (auto)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> columns (fst (QR_decomposition A)) \\<Longrightarrow>\n       x \\<in> vec.span (columns (Gram_Schmidt_matrix A))\n 2. \\<And>x.\n       x \\<in> columns (Gram_Schmidt_matrix A) \\<Longrightarrow>\n       x \\<in> vec.span (columns (fst (QR_decomposition A)))", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> columns (fst (QR_decomposition A)) \\<Longrightarrow>\n       x \\<in> vec.span (columns (Gram_Schmidt_matrix A))\n 2. \\<And>x.\n       x \\<in> columns (Gram_Schmidt_matrix A) \\<Longrightarrow>\n       x \\<in> vec.span (columns (fst (QR_decomposition A)))", "show \"x \\<in> vec.span (columns (Gram_Schmidt_matrix A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> vec.span (columns (Gram_Schmidt_matrix A))", "using assms(1) assms(2) is_basis_columns_Gram_Schmidt_matrix is_basis_def"], ["proof (prove)\nusing this:\n  is_basis (columns A)\n  card (columns A) = ncols A\n  \\<lbrakk>is_basis (columns ?A); card (columns ?A) = ncols ?A\\<rbrakk>\n  \\<Longrightarrow> is_basis (columns (Gram_Schmidt_matrix ?A)) \\<and>\n                    card (columns (Gram_Schmidt_matrix ?A)) = ncols ?A\n  is_basis ?S \\<equiv> vec.independent ?S \\<and> vec.span ?S = UNIV\n\ngoal (1 subgoal):\n 1. x \\<in> vec.span (columns (Gram_Schmidt_matrix A))", "by auto"], ["proof (state)\nthis:\n  x \\<in> vec.span (columns (Gram_Schmidt_matrix A))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> columns (Gram_Schmidt_matrix A) \\<Longrightarrow>\n       x \\<in> vec.span (columns (fst (QR_decomposition A)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> columns (Gram_Schmidt_matrix A) \\<Longrightarrow>\n       x \\<in> vec.span (columns (fst (QR_decomposition A)))", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> columns (Gram_Schmidt_matrix A) \\<Longrightarrow>\n       x \\<in> vec.span (columns (fst (QR_decomposition A)))", "assume x: \"x \\<in> columns (Gram_Schmidt_matrix A)\""], ["proof (state)\nthis:\n  x \\<in> columns (Gram_Schmidt_matrix A)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> columns (Gram_Schmidt_matrix A) \\<Longrightarrow>\n       x \\<in> vec.span (columns (fst (QR_decomposition A)))", "from this"], ["proof (chain)\npicking this:\n  x \\<in> columns (Gram_Schmidt_matrix A)", "obtain i where x_col_i: \"x=column i (Gram_Schmidt_matrix A)\""], ["proof (prove)\nusing this:\n  x \\<in> columns (Gram_Schmidt_matrix A)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        x = column i (Gram_Schmidt_matrix A) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding columns_def"], ["proof (prove)\nusing this:\n  x \\<in> {column i (Gram_Schmidt_matrix A) |i. i \\<in> UNIV}\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        x = column i (Gram_Schmidt_matrix A) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x = column i (Gram_Schmidt_matrix A)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> columns (Gram_Schmidt_matrix A) \\<Longrightarrow>\n       x \\<in> vec.span (columns (fst (QR_decomposition A)))", "have zero_not_in: \"x \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> 0", "using is_basis_columns_Gram_Schmidt_matrix[OF b c]"], ["proof (prove)\nusing this:\n  is_basis (columns (Gram_Schmidt_matrix A)) \\<and>\n  card (columns (Gram_Schmidt_matrix A)) = ncols A\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0", "unfolding is_basis_def"], ["proof (prove)\nusing this:\n  (vec.independent (columns (Gram_Schmidt_matrix A)) \\<and>\n   vec.span (columns (Gram_Schmidt_matrix A)) = UNIV) \\<and>\n  card (columns (Gram_Schmidt_matrix A)) = ncols A\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0", "using vec.dependent_zero[of \"(columns (Gram_Schmidt_matrix A))\"] x"], ["proof (prove)\nusing this:\n  (vec.independent (columns (Gram_Schmidt_matrix A)) \\<and>\n   vec.span (columns (Gram_Schmidt_matrix A)) = UNIV) \\<and>\n  card (columns (Gram_Schmidt_matrix A)) = ncols A\n  0 \\<in> columns (Gram_Schmidt_matrix A) \\<Longrightarrow>\n  vec.dependent (columns (Gram_Schmidt_matrix A))\n  x \\<in> columns (Gram_Schmidt_matrix A)\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> columns (Gram_Schmidt_matrix A) \\<Longrightarrow>\n       x \\<in> vec.span (columns (fst (QR_decomposition A)))", "have \"x=column i (Gram_Schmidt_matrix A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = column i (Gram_Schmidt_matrix A)", "using x_col_i"], ["proof (prove)\nusing this:\n  x = column i (Gram_Schmidt_matrix A)\n\ngoal (1 subgoal):\n 1. x = column i (Gram_Schmidt_matrix A)", "."], ["proof (state)\nthis:\n  x = column i (Gram_Schmidt_matrix A)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> columns (Gram_Schmidt_matrix A) \\<Longrightarrow>\n       x \\<in> vec.span (columns (fst (QR_decomposition A)))", "also"], ["proof (state)\nthis:\n  x = column i (Gram_Schmidt_matrix A)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> columns (Gram_Schmidt_matrix A) \\<Longrightarrow>\n       x \\<in> vec.span (columns (fst (QR_decomposition A)))", "have \"... = norm (column i (Gram_Schmidt_matrix A)) *\\<^sub>R column i (divide_by_norm (Gram_Schmidt_matrix A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column i (Gram_Schmidt_matrix A) =\n    norm (column i (Gram_Schmidt_matrix A)) *\\<^sub>R\n    column i (divide_by_norm (Gram_Schmidt_matrix A))", "using zero_not_in"], ["proof (prove)\nusing this:\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. column i (Gram_Schmidt_matrix A) =\n    norm (column i (Gram_Schmidt_matrix A)) *\\<^sub>R\n    column i (divide_by_norm (Gram_Schmidt_matrix A))", "unfolding x_col_i columns_def divide_by_norm_def column_def normalize_def"], ["proof (prove)\nusing this:\n  (\\<chi>ia. Gram_Schmidt_matrix A $ ia $ i) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<chi>ia. Gram_Schmidt_matrix A $ ia $ i) =\n    norm (\\<chi>ia. Gram_Schmidt_matrix A $ ia $ i) *\\<^sub>R\n    (\\<chi>ia.\n        (\\<chi>a b.\n            ((1 / norm (\\<chi>i. Gram_Schmidt_matrix A $ i $ b)) *\\<^sub>R\n             (\\<chi>i. Gram_Schmidt_matrix A $ i $ b)) $\n            a) $\n        ia $\n        i)", "by vector"], ["proof (state)\nthis:\n  column i (Gram_Schmidt_matrix A) =\n  norm (column i (Gram_Schmidt_matrix A)) *\\<^sub>R\n  column i (divide_by_norm (Gram_Schmidt_matrix A))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> columns (Gram_Schmidt_matrix A) \\<Longrightarrow>\n       x \\<in> vec.span (columns (fst (QR_decomposition A)))", "finally"], ["proof (chain)\npicking this:\n  x =\n  norm (column i (Gram_Schmidt_matrix A)) *\\<^sub>R\n  column i (divide_by_norm (Gram_Schmidt_matrix A))", "have x_eq: \"x = norm (column i (Gram_Schmidt_matrix A)) *\\<^sub>R column i (divide_by_norm (Gram_Schmidt_matrix A))\""], ["proof (prove)\nusing this:\n  x =\n  norm (column i (Gram_Schmidt_matrix A)) *\\<^sub>R\n  column i (divide_by_norm (Gram_Schmidt_matrix A))\n\ngoal (1 subgoal):\n 1. x =\n    norm (column i (Gram_Schmidt_matrix A)) *\\<^sub>R\n    column i (divide_by_norm (Gram_Schmidt_matrix A))", "."], ["proof (state)\nthis:\n  x =\n  norm (column i (Gram_Schmidt_matrix A)) *\\<^sub>R\n  column i (divide_by_norm (Gram_Schmidt_matrix A))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> columns (Gram_Schmidt_matrix A) \\<Longrightarrow>\n       x \\<in> vec.span (columns (fst (QR_decomposition A)))", "show \"x \\<in> vec.span (columns (fst (QR_decomposition A)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> vec.span (columns (fst (QR_decomposition A)))", "unfolding x_eq span_vec_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (column i (Gram_Schmidt_matrix A)) *\\<^sub>R\n    column i (divide_by_norm (Gram_Schmidt_matrix A))\n    \\<in> span (columns (fst (QR_decomposition A)))", "apply (rule subspace_mul)"], ["proof (prove)\ngoal (2 subgoals):\n 1. subspace (span (columns (fst (QR_decomposition A))))\n 2. column i (divide_by_norm (Gram_Schmidt_matrix A))\n    \\<in> span (columns (fst (QR_decomposition A)))", "apply (auto simp add: columns_def QR_decomposition_def Let_def subspace_span intro: span_superset)"], ["proof (prove)\ngoal (1 subgoal):\n 1. column i (divide_by_norm (Gram_Schmidt_matrix A))\n    \\<in> span\n           {uu_.\n            \\<exists>i.\n               uu_ = column i (divide_by_norm (Gram_Schmidt_matrix A))}", "using span_superset"], ["proof (prove)\nusing this:\n  ?S \\<subseteq> span ?S\n\ngoal (1 subgoal):\n 1. column i (divide_by_norm (Gram_Schmidt_matrix A))\n    \\<in> span\n           {uu_.\n            \\<exists>i.\n               uu_ = column i (divide_by_norm (Gram_Schmidt_matrix A))}", "by force"], ["proof (state)\nthis:\n  x \\<in> vec.span (columns (fst (QR_decomposition A)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  vec.span (columns (fst (QR_decomposition A))) =\n  vec.span (columns (Gram_Schmidt_matrix A))\n\ngoal (3 subgoals):\n 1. vec.independent (columns (fst (QR_decomposition A)))\n 2. vec.span (columns (fst (QR_decomposition A))) = UNIV\n 3. card (columns (fst (QR_decomposition A))) = ncols A", "thus s: \"vec.span (columns (fst (QR_decomposition A))) = (UNIV::(real^'m::{mod_type}) set)\""], ["proof (prove)\nusing this:\n  vec.span (columns (fst (QR_decomposition A))) =\n  vec.span (columns (Gram_Schmidt_matrix A))\n\ngoal (1 subgoal):\n 1. vec.span (columns (fst (QR_decomposition A))) = UNIV", "using is_basis_columns_Gram_Schmidt_matrix[OF b c]"], ["proof (prove)\nusing this:\n  vec.span (columns (fst (QR_decomposition A))) =\n  vec.span (columns (Gram_Schmidt_matrix A))\n  is_basis (columns (Gram_Schmidt_matrix A)) \\<and>\n  card (columns (Gram_Schmidt_matrix A)) = ncols A\n\ngoal (1 subgoal):\n 1. vec.span (columns (fst (QR_decomposition A))) = UNIV", "unfolding is_basis_def"], ["proof (prove)\nusing this:\n  vec.span (columns (fst (QR_decomposition A))) =\n  vec.span (columns (Gram_Schmidt_matrix A))\n  (vec.independent (columns (Gram_Schmidt_matrix A)) \\<and>\n   vec.span (columns (Gram_Schmidt_matrix A)) = UNIV) \\<and>\n  card (columns (Gram_Schmidt_matrix A)) = ncols A\n\ngoal (1 subgoal):\n 1. vec.span (columns (fst (QR_decomposition A))) = UNIV", "by simp"], ["proof (state)\nthis:\n  vec.span (columns (fst (QR_decomposition A))) = UNIV\n\ngoal (2 subgoals):\n 1. vec.independent (columns (fst (QR_decomposition A)))\n 2. card (columns (fst (QR_decomposition A))) = ncols A", "thus \"card (columns (fst (QR_decomposition A))) = ncols A\""], ["proof (prove)\nusing this:\n  vec.span (columns (fst (QR_decomposition A))) = UNIV\n\ngoal (1 subgoal):\n 1. card (columns (fst (QR_decomposition A))) = ncols A", "by (metis (hide_lams, mono_tags) b c card_columns_le_ncols vec.card_le_dim_spanning \n      finite_columns vec.indep_card_eq_dim_span is_basis_def ncols_def top_greatest)"], ["proof (state)\nthis:\n  card (columns (fst (QR_decomposition A))) = ncols A\n\ngoal (1 subgoal):\n 1. vec.independent (columns (fst (QR_decomposition A)))", "thus \"vec.independent (columns (fst (QR_decomposition A)))\""], ["proof (prove)\nusing this:\n  card (columns (fst (QR_decomposition A))) = ncols A\n\ngoal (1 subgoal):\n 1. vec.independent (columns (fst (QR_decomposition A)))", "by (metis s b c vec.card_eq_dim_span_indep finite_columns vec.indep_card_eq_dim_span is_basis_def)"], ["proof (state)\nthis:\n  vec.independent (columns (fst (QR_decomposition A)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma orthogonal_fst_QR_decomposition:\n  shows \"pairwise orthogonal (columns (fst (QR_decomposition A)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pairwise orthogonal (columns (fst (QR_decomposition A)))", "unfolding pairwise_def columns_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<in> UNIV}.\n       \\<forall>y\\<in>{column i (fst (QR_decomposition A)) |i.\n                       i \\<in> UNIV}.\n          x \\<noteq> y \\<longrightarrow> orthogonal x y", "proof (auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       column i (fst (QR_decomposition A)) \\<noteq>\n       column ia (fst (QR_decomposition A)) \\<Longrightarrow>\n       orthogonal (column i (fst (QR_decomposition A)))\n        (column ia (fst (QR_decomposition A)))", "fix i ia"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       column i (fst (QR_decomposition A)) \\<noteq>\n       column ia (fst (QR_decomposition A)) \\<Longrightarrow>\n       orthogonal (column i (fst (QR_decomposition A)))\n        (column ia (fst (QR_decomposition A)))", "assume col_not_eq: \"column i (fst (QR_decomposition A)) \\<noteq> column ia (fst (QR_decomposition A))\""], ["proof (state)\nthis:\n  column i (fst (QR_decomposition A)) \\<noteq>\n  column ia (fst (QR_decomposition A))\n\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       column i (fst (QR_decomposition A)) \\<noteq>\n       column ia (fst (QR_decomposition A)) \\<Longrightarrow>\n       orthogonal (column i (fst (QR_decomposition A)))\n        (column ia (fst (QR_decomposition A)))", "hence i_not_ia: \"i \\<noteq> ia\""], ["proof (prove)\nusing this:\n  column i (fst (QR_decomposition A)) \\<noteq>\n  column ia (fst (QR_decomposition A))\n\ngoal (1 subgoal):\n 1. i \\<noteq> ia", "by auto"], ["proof (state)\nthis:\n  i \\<noteq> ia\n\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       column i (fst (QR_decomposition A)) \\<noteq>\n       column ia (fst (QR_decomposition A)) \\<Longrightarrow>\n       orthogonal (column i (fst (QR_decomposition A)))\n        (column ia (fst (QR_decomposition A)))", "from col_not_eq"], ["proof (chain)\npicking this:\n  column i (fst (QR_decomposition A)) \\<noteq>\n  column ia (fst (QR_decomposition A))", "obtain a \n    where \"(fst (QR_decomposition A)) $ a $ i \\<noteq> (fst (QR_decomposition A)) $ a $ ia\""], ["proof (prove)\nusing this:\n  column i (fst (QR_decomposition A)) \\<noteq>\n  column ia (fst (QR_decomposition A))\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        fst (QR_decomposition A) $ a $ i \\<noteq>\n        fst (QR_decomposition A) $ a $ ia \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding column_def"], ["proof (prove)\nusing this:\n  (\\<chi>ia. fst (QR_decomposition A) $ ia $ i) \\<noteq>\n  (\\<chi>i. fst (QR_decomposition A) $ i $ ia)\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        fst (QR_decomposition A) $ a $ i \\<noteq>\n        fst (QR_decomposition A) $ a $ ia \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  fst (QR_decomposition A) $ a $ i \\<noteq>\n  fst (QR_decomposition A) $ a $ ia\n\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       column i (fst (QR_decomposition A)) \\<noteq>\n       column ia (fst (QR_decomposition A)) \\<Longrightarrow>\n       orthogonal (column i (fst (QR_decomposition A)))\n        (column ia (fst (QR_decomposition A)))", "hence col_not_eq2: \" (column i (Gram_Schmidt_matrix A)) \\<noteq> (column ia (Gram_Schmidt_matrix A))\""], ["proof (prove)\nusing this:\n  fst (QR_decomposition A) $ a $ i \\<noteq>\n  fst (QR_decomposition A) $ a $ ia\n\ngoal (1 subgoal):\n 1. column i (Gram_Schmidt_matrix A) \\<noteq>\n    column ia (Gram_Schmidt_matrix A)", "using col_not_eq"], ["proof (prove)\nusing this:\n  fst (QR_decomposition A) $ a $ i \\<noteq>\n  fst (QR_decomposition A) $ a $ ia\n  column i (fst (QR_decomposition A)) \\<noteq>\n  column ia (fst (QR_decomposition A))\n\ngoal (1 subgoal):\n 1. column i (Gram_Schmidt_matrix A) \\<noteq>\n    column ia (Gram_Schmidt_matrix A)", "unfolding QR_decomposition_def Let_def fst_conv"], ["proof (prove)\nusing this:\n  divide_by_norm (Gram_Schmidt_matrix A) $ a $ i \\<noteq>\n  divide_by_norm (Gram_Schmidt_matrix A) $ a $ ia\n  column i (divide_by_norm (Gram_Schmidt_matrix A)) \\<noteq>\n  column ia (divide_by_norm (Gram_Schmidt_matrix A))\n\ngoal (1 subgoal):\n 1. column i (Gram_Schmidt_matrix A) \\<noteq>\n    column ia (Gram_Schmidt_matrix A)", "by (metis (lifting) divide_by_norm_def vec_lambda_beta)"], ["proof (state)\nthis:\n  column i (Gram_Schmidt_matrix A) \\<noteq>\n  column ia (Gram_Schmidt_matrix A)\n\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       column i (fst (QR_decomposition A)) \\<noteq>\n       column ia (fst (QR_decomposition A)) \\<Longrightarrow>\n       orthogonal (column i (fst (QR_decomposition A)))\n        (column ia (fst (QR_decomposition A)))", "have d1: \"column i (fst (QR_decomposition A))\n    = (1 / norm (\\<chi> ia. Gram_Schmidt_matrix A $ ia $ i)) *\\<^sub>R (column i (Gram_Schmidt_matrix A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A)) =\n    (1 / norm (\\<chi>ia. Gram_Schmidt_matrix A $ ia $ i)) *\\<^sub>R\n    column i (Gram_Schmidt_matrix A)", "unfolding QR_decomposition_def Let_def fst_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. column i (divide_by_norm (Gram_Schmidt_matrix A)) =\n    (1 / norm (\\<chi>ia. Gram_Schmidt_matrix A $ ia $ i)) *\\<^sub>R\n    column i (Gram_Schmidt_matrix A)", "unfolding divide_by_norm_def column_def normalize_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>ia.\n        (\\<chi>a b.\n            ((1 / norm (\\<chi>i. Gram_Schmidt_matrix A $ i $ b)) *\\<^sub>R\n             (\\<chi>i. Gram_Schmidt_matrix A $ i $ b)) $\n            a) $\n        ia $\n        i) =\n    (1 / norm (\\<chi>ia. Gram_Schmidt_matrix A $ ia $ i)) *\\<^sub>R\n    (\\<chi>ia. Gram_Schmidt_matrix A $ ia $ i)", "unfolding vec_eq_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ia.\n       (\\<chi>ia.\n           (\\<chi>a b.\n               ((1 /\n                 norm (\\<chi>i. Gram_Schmidt_matrix A $ i $ b)) *\\<^sub>R\n                (\\<chi>i. Gram_Schmidt_matrix A $ i $ b)) $\n               a) $\n           ia $\n           i) $\n       ia =\n       ((1 / norm (\\<chi>ia. Gram_Schmidt_matrix A $ ia $ i)) *\\<^sub>R\n        (\\<chi>ia. Gram_Schmidt_matrix A $ ia $ i)) $\n       ia", "by auto"], ["proof (state)\nthis:\n  column i (fst (QR_decomposition A)) =\n  (1 / norm (\\<chi>ia. Gram_Schmidt_matrix A $ ia $ i)) *\\<^sub>R\n  column i (Gram_Schmidt_matrix A)\n\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       column i (fst (QR_decomposition A)) \\<noteq>\n       column ia (fst (QR_decomposition A)) \\<Longrightarrow>\n       orthogonal (column i (fst (QR_decomposition A)))\n        (column ia (fst (QR_decomposition A)))", "have d2: \"column ia (fst (QR_decomposition A))\n    = (1 / norm (\\<chi> i. Gram_Schmidt_matrix A $ i $ ia)) *\\<^sub>R (column ia (Gram_Schmidt_matrix A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column ia (fst (QR_decomposition A)) =\n    (1 / norm (\\<chi>i. Gram_Schmidt_matrix A $ i $ ia)) *\\<^sub>R\n    column ia (Gram_Schmidt_matrix A)", "unfolding QR_decomposition_def Let_def fst_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. column ia (divide_by_norm (Gram_Schmidt_matrix A)) =\n    (1 / norm (\\<chi>i. Gram_Schmidt_matrix A $ i $ ia)) *\\<^sub>R\n    column ia (Gram_Schmidt_matrix A)", "unfolding divide_by_norm_def column_def normalize_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>i.\n        (\\<chi>a b.\n            ((1 / norm (\\<chi>i. Gram_Schmidt_matrix A $ i $ b)) *\\<^sub>R\n             (\\<chi>i. Gram_Schmidt_matrix A $ i $ b)) $\n            a) $\n        i $\n        ia) =\n    (1 / norm (\\<chi>i. Gram_Schmidt_matrix A $ i $ ia)) *\\<^sub>R\n    (\\<chi>i. Gram_Schmidt_matrix A $ i $ ia)", "unfolding vec_eq_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       (\\<chi>i.\n           (\\<chi>a b.\n               ((1 /\n                 norm (\\<chi>i. Gram_Schmidt_matrix A $ i $ b)) *\\<^sub>R\n                (\\<chi>i. Gram_Schmidt_matrix A $ i $ b)) $\n               a) $\n           i $\n           ia) $\n       i =\n       ((1 / norm (\\<chi>i. Gram_Schmidt_matrix A $ i $ ia)) *\\<^sub>R\n        (\\<chi>i. Gram_Schmidt_matrix A $ i $ ia)) $\n       i", "by auto"], ["proof (state)\nthis:\n  column ia (fst (QR_decomposition A)) =\n  (1 / norm (\\<chi>i. Gram_Schmidt_matrix A $ i $ ia)) *\\<^sub>R\n  column ia (Gram_Schmidt_matrix A)\n\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       column i (fst (QR_decomposition A)) \\<noteq>\n       column ia (fst (QR_decomposition A)) \\<Longrightarrow>\n       orthogonal (column i (fst (QR_decomposition A)))\n        (column ia (fst (QR_decomposition A)))", "show \"orthogonal (column i (fst (QR_decomposition A))) (column ia (fst (QR_decomposition A)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. orthogonal (column i (fst (QR_decomposition A)))\n     (column ia (fst (QR_decomposition A)))", "unfolding d1 d2"], ["proof (prove)\ngoal (1 subgoal):\n 1. orthogonal\n     ((1 / norm (\\<chi>ia. Gram_Schmidt_matrix A $ ia $ i)) *\\<^sub>R\n      column i (Gram_Schmidt_matrix A))\n     ((1 / norm (\\<chi>i. Gram_Schmidt_matrix A $ i $ ia)) *\\<^sub>R\n      column ia (Gram_Schmidt_matrix A))", "apply (rule orthogonal_mult)"], ["proof (prove)\ngoal (1 subgoal):\n 1. orthogonal (column i (Gram_Schmidt_matrix A))\n     (column ia (Gram_Schmidt_matrix A))", "using orthogonal_Gram_Schmidt_matrix[of A]"], ["proof (prove)\nusing this:\n  pairwise orthogonal {column i (Gram_Schmidt_matrix A) |i. i \\<in> UNIV}\n\ngoal (1 subgoal):\n 1. orthogonal (column i (Gram_Schmidt_matrix A))\n     (column ia (Gram_Schmidt_matrix A))", "unfolding pairwise_def"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i \\<in> UNIV}.\n     \\<forall>y\\<in>{column i (Gram_Schmidt_matrix A) |i. i \\<in> UNIV}.\n        x \\<noteq> y \\<longrightarrow> orthogonal x y\n\ngoal (1 subgoal):\n 1. orthogonal (column i (Gram_Schmidt_matrix A))\n     (column ia (Gram_Schmidt_matrix A))", "using col_not_eq2"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i \\<in> UNIV}.\n     \\<forall>y\\<in>{column i (Gram_Schmidt_matrix A) |i. i \\<in> UNIV}.\n        x \\<noteq> y \\<longrightarrow> orthogonal x y\n  column i (Gram_Schmidt_matrix A) \\<noteq>\n  column ia (Gram_Schmidt_matrix A)\n\ngoal (1 subgoal):\n 1. orthogonal (column i (Gram_Schmidt_matrix A))\n     (column ia (Gram_Schmidt_matrix A))", "by auto"], ["proof (state)\nthis:\n  orthogonal (column i (fst (QR_decomposition A)))\n   (column ia (fst (QR_decomposition A)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma qk_uk_norm:\n  \"(1/(norm (column k ((Gram_Schmidt_matrix A))))) *\\<^sub>R (column k ((Gram_Schmidt_matrix A))) \n  = column k (fst(QR_decomposition A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1 / norm (column k (Gram_Schmidt_matrix A))) *\\<^sub>R\n    column k (Gram_Schmidt_matrix A) =\n    column k (fst (QR_decomposition A))", "unfolding QR_decomposition_def Let_def fst_conv divide_by_norm_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (1 / norm (column k (Gram_Schmidt_matrix A))) *\\<^sub>R\n    column k (Gram_Schmidt_matrix A) =\n    column k\n     (\\<chi>a b.\n         Projections.normalize (column b (Gram_Schmidt_matrix A)) $ a)", "unfolding column_def normalize_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (1 / norm (\\<chi>i. Gram_Schmidt_matrix A $ i $ k)) *\\<^sub>R\n    (\\<chi>i. Gram_Schmidt_matrix A $ i $ k) =\n    (\\<chi>i.\n        (\\<chi>a b.\n            ((1 / norm (\\<chi>i. Gram_Schmidt_matrix A $ i $ b)) *\\<^sub>R\n             (\\<chi>i. Gram_Schmidt_matrix A $ i $ b)) $\n            a) $\n        i $\n        k)", "by vector"], ["", "lemma norm_columns_fst_QR_decomposition:\n  fixes A::\"real^'n::{mod_type}^'m::{mod_type}\"\n  assumes \"rank A = ncols A\"\n  shows \"norm (column i (fst (QR_decomposition A))) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (column i (fst (QR_decomposition A))) = 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. norm (column i (fst (QR_decomposition A))) = 1", "have \"vec.independent (columns (Gram_Schmidt_matrix A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec.independent (columns (Gram_Schmidt_matrix A))", "by (metis assms full_rank_imp_is_basis2 independent_columns_Gram_Schmidt_matrix)"], ["proof (state)\nthis:\n  vec.independent (columns (Gram_Schmidt_matrix A))\n\ngoal (1 subgoal):\n 1. norm (column i (fst (QR_decomposition A))) = 1", "hence \"column i (Gram_Schmidt_matrix A) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  vec.independent (columns (Gram_Schmidt_matrix A))\n\ngoal (1 subgoal):\n 1. column i (Gram_Schmidt_matrix A) \\<noteq> 0", "using vec.dependent_zero[of \"columns (Gram_Schmidt_matrix A)\"]"], ["proof (prove)\nusing this:\n  vec.independent (columns (Gram_Schmidt_matrix A))\n  0 \\<in> columns (Gram_Schmidt_matrix A) \\<Longrightarrow>\n  vec.dependent (columns (Gram_Schmidt_matrix A))\n\ngoal (1 subgoal):\n 1. column i (Gram_Schmidt_matrix A) \\<noteq> 0", "unfolding columns_def"], ["proof (prove)\nusing this:\n  vec.independent {column i (Gram_Schmidt_matrix A) |i. i \\<in> UNIV}\n  0 \\<in> {column i (Gram_Schmidt_matrix A) |i.\n           i \\<in> UNIV} \\<Longrightarrow>\n  vec.dependent {column i (Gram_Schmidt_matrix A) |i. i \\<in> UNIV}\n\ngoal (1 subgoal):\n 1. column i (Gram_Schmidt_matrix A) \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  column i (Gram_Schmidt_matrix A) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. norm (column i (fst (QR_decomposition A))) = 1", "thus \"norm (column i (fst (QR_decomposition A))) = 1\""], ["proof (prove)\nusing this:\n  column i (Gram_Schmidt_matrix A) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. norm (column i (fst (QR_decomposition A))) = 1", "unfolding QR_decomposition_def Let_def fst_conv"], ["proof (prove)\nusing this:\n  column i (Gram_Schmidt_matrix A) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. norm (column i (divide_by_norm (Gram_Schmidt_matrix A))) = 1", "by (rule norm_column_divide_by_norm)"], ["proof (state)\nthis:\n  norm (column i (fst (QR_decomposition A))) = 1\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary span_fst_QR_decomposition:\n  fixes A::\"real^'n::{mod_type}^'m::{mod_type}\"\n  shows \"vec.span (columns A) = vec.span (columns (fst (QR_decomposition A)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec.span (columns A) = vec.span (columns (fst (QR_decomposition A)))", "unfolding span_Gram_Schmidt_matrix[of A]"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec.span (columns A) = vec.span (columns (fst (QR_decomposition A)))", "unfolding QR_decomposition_def Let_def fst_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec.span (columns A) =\n    vec.span (columns (divide_by_norm (Gram_Schmidt_matrix A)))", "by (metis \\<open>span (columns A) = span (columns (Gram_Schmidt_matrix A))\\<close> span_columns_divide_by_norm span_vec_eq)"], ["", "corollary col_space_QR_decomposition:\n  fixes A::\"real^'n::{mod_type}^'m::{mod_type}\"\n  shows \"col_space A = col_space (fst (QR_decomposition A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. col_space A = col_space (fst (QR_decomposition A))", "unfolding col_space_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec.span (columns A) = vec.span (columns (fst (QR_decomposition A)))", "using span_fst_QR_decomposition"], ["proof (prove)\nusing this:\n  vec.span (columns ?A) = vec.span (columns (fst (QR_decomposition ?A)))\n\ngoal (1 subgoal):\n 1. vec.span (columns A) = vec.span (columns (fst (QR_decomposition A)))", "by auto"], ["", "lemma independent_columns_fst_QR_decomposition:\n  fixes A::\"real^'n::{mod_type}^'m::{mod_type}\"\n  assumes b: \"vec.independent (columns A)\"\n  and c: \"card (columns A) = ncols A\"\n  shows \"vec.independent (columns (fst (QR_decomposition A))) \n  \\<and> card (columns (fst (QR_decomposition A))) = ncols A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec.independent (columns (fst (QR_decomposition A))) \\<and>\n    card (columns (fst (QR_decomposition A))) = ncols A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. vec.independent (columns (fst (QR_decomposition A))) \\<and>\n    card (columns (fst (QR_decomposition A))) = ncols A", "have r: \"rank A = ncols A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rank A = ncols A", "thm is_basis_imp_full_rank"], ["proof (prove)\ngoal (1 subgoal):\n 1. rank A = ncols A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rank A = ncols A", "have \"rank A = col_rank A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rank A = col_rank A", "unfolding rank_col_rank"], ["proof (prove)\ngoal (1 subgoal):\n 1. col_rank A = col_rank A", ".."], ["proof (state)\nthis:\n  rank A = col_rank A\n\ngoal (1 subgoal):\n 1. rank A = ncols A", "also"], ["proof (state)\nthis:\n  rank A = col_rank A\n\ngoal (1 subgoal):\n 1. rank A = ncols A", "have \"... = vec.dim (col_space A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. col_rank A = vec.dim (col_space A)", "unfolding col_rank_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec.dim (col_space A) = vec.dim (col_space A)", ".."], ["proof (state)\nthis:\n  col_rank A = vec.dim (col_space A)\n\ngoal (1 subgoal):\n 1. rank A = ncols A", "also"], ["proof (state)\nthis:\n  col_rank A = vec.dim (col_space A)\n\ngoal (1 subgoal):\n 1. rank A = ncols A", "have \"... = card (columns A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec.dim (col_space A) = card (columns A)", "unfolding col_space_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec.dim (vec.span (columns A)) = card (columns A)", "using b"], ["proof (prove)\nusing this:\n  vec.independent (columns A)\n\ngoal (1 subgoal):\n 1. vec.dim (vec.span (columns A)) = card (columns A)", "by (rule vec.dim_span_eq_card_independent)"], ["proof (state)\nthis:\n  vec.dim (col_space A) = card (columns A)\n\ngoal (1 subgoal):\n 1. rank A = ncols A", "also"], ["proof (state)\nthis:\n  vec.dim (col_space A) = card (columns A)\n\ngoal (1 subgoal):\n 1. rank A = ncols A", "have \"... = ncols A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (columns A) = ncols A", "using c"], ["proof (prove)\nusing this:\n  card (columns A) = ncols A\n\ngoal (1 subgoal):\n 1. card (columns A) = ncols A", "."], ["proof (state)\nthis:\n  card (columns A) = ncols A\n\ngoal (1 subgoal):\n 1. rank A = ncols A", "finally"], ["proof (chain)\npicking this:\n  rank A = ncols A", "show ?thesis"], ["proof (prove)\nusing this:\n  rank A = ncols A\n\ngoal (1 subgoal):\n 1. rank A = ncols A", "."], ["proof (state)\nthis:\n  rank A = ncols A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rank A = ncols A\n\ngoal (1 subgoal):\n 1. vec.independent (columns (fst (QR_decomposition A))) \\<and>\n    card (columns (fst (QR_decomposition A))) = ncols A", "have \"vec.independent (columns (fst (QR_decomposition A)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec.independent (columns (fst (QR_decomposition A)))", "by (metis b c col_rank_def col_space_QR_decomposition col_space_def \n      full_rank_imp_is_basis2 vec.indep_card_eq_dim_span ncols_def rank_col_rank)"], ["proof (state)\nthis:\n  vec.independent (columns (fst (QR_decomposition A)))\n\ngoal (1 subgoal):\n 1. vec.independent (columns (fst (QR_decomposition A))) \\<and>\n    card (columns (fst (QR_decomposition A))) = ncols A", "moreover"], ["proof (state)\nthis:\n  vec.independent (columns (fst (QR_decomposition A)))\n\ngoal (1 subgoal):\n 1. vec.independent (columns (fst (QR_decomposition A))) \\<and>\n    card (columns (fst (QR_decomposition A))) = ncols A", "have \"card (columns (fst (QR_decomposition A))) = ncols A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (columns (fst (QR_decomposition A))) = ncols A", "by (metis col_space_QR_decomposition full_rank_imp_is_basis2 ncols_def r rank_eq_dim_col_space')"], ["proof (state)\nthis:\n  card (columns (fst (QR_decomposition A))) = ncols A\n\ngoal (1 subgoal):\n 1. vec.independent (columns (fst (QR_decomposition A))) \\<and>\n    card (columns (fst (QR_decomposition A))) = ncols A", "ultimately"], ["proof (chain)\npicking this:\n  vec.independent (columns (fst (QR_decomposition A)))\n  card (columns (fst (QR_decomposition A))) = ncols A", "show ?thesis"], ["proof (prove)\nusing this:\n  vec.independent (columns (fst (QR_decomposition A)))\n  card (columns (fst (QR_decomposition A))) = ncols A\n\ngoal (1 subgoal):\n 1. vec.independent (columns (fst (QR_decomposition A))) \\<and>\n    card (columns (fst (QR_decomposition A))) = ncols A", "by simp"], ["proof (state)\nthis:\n  vec.independent (columns (fst (QR_decomposition A))) \\<and>\n  card (columns (fst (QR_decomposition A))) = ncols A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma orthogonal_matrix_fst_QR_decomposition:\n  fixes A::\"real^'n::{mod_type}^'m::{mod_type}\"\n  assumes r: \"rank A = ncols A\"\n  shows \"transpose (fst (QR_decomposition A)) ** (fst (QR_decomposition A)) = mat 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Finite_Cartesian_Product.transpose (fst (QR_decomposition A)) **\n    fst (QR_decomposition A) =\n    mat 1", "proof (unfold vec_eq_iff, clarify, unfold mat_1_fun, auto)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ia.\n       (Finite_Cartesian_Product.transpose (fst (QR_decomposition A)) **\n        fst (QR_decomposition A)) $\n       ia $\n       ia =\n       1\n 2. \\<And>i ia.\n       i \\<noteq> ia \\<Longrightarrow>\n       (Finite_Cartesian_Product.transpose (fst (QR_decomposition A)) **\n        fst (QR_decomposition A)) $\n       i $\n       ia =\n       0", "define Q where \"Q = fst (QR_decomposition A)\""], ["proof (state)\nthis:\n  Q = fst (QR_decomposition A)\n\ngoal (2 subgoals):\n 1. \\<And>ia.\n       (Finite_Cartesian_Product.transpose (fst (QR_decomposition A)) **\n        fst (QR_decomposition A)) $\n       ia $\n       ia =\n       1\n 2. \\<And>i ia.\n       i \\<noteq> ia \\<Longrightarrow>\n       (Finite_Cartesian_Product.transpose (fst (QR_decomposition A)) **\n        fst (QR_decomposition A)) $\n       i $\n       ia =\n       0", "have n: \"\\<forall>i. norm (column i Q) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. norm (column i Q) = 1", "unfolding Q_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. norm (column i (fst (QR_decomposition A))) = 1", "using norm_columns_fst_QR_decomposition[OF r]"], ["proof (prove)\nusing this:\n  norm (column ?i (fst (QR_decomposition A))) = 1\n\ngoal (1 subgoal):\n 1. \\<forall>i. norm (column i (fst (QR_decomposition A))) = 1", "by auto"], ["proof (state)\nthis:\n  \\<forall>i. norm (column i Q) = 1\n\ngoal (2 subgoals):\n 1. \\<And>ia.\n       (Finite_Cartesian_Product.transpose (fst (QR_decomposition A)) **\n        fst (QR_decomposition A)) $\n       ia $\n       ia =\n       1\n 2. \\<And>i ia.\n       i \\<noteq> ia \\<Longrightarrow>\n       (Finite_Cartesian_Product.transpose (fst (QR_decomposition A)) **\n        fst (QR_decomposition A)) $\n       i $\n       ia =\n       0", "have c: \"card (columns Q) = ncols A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (columns Q) = ncols A", "unfolding Q_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (columns (fst (QR_decomposition A))) = ncols A", "by (metis full_rank_imp_is_basis2 independent_columns_fst_QR_decomposition r)"], ["proof (state)\nthis:\n  card (columns Q) = ncols A\n\ngoal (2 subgoals):\n 1. \\<And>ia.\n       (Finite_Cartesian_Product.transpose (fst (QR_decomposition A)) **\n        fst (QR_decomposition A)) $\n       ia $\n       ia =\n       1\n 2. \\<And>i ia.\n       i \\<noteq> ia \\<Longrightarrow>\n       (Finite_Cartesian_Product.transpose (fst (QR_decomposition A)) **\n        fst (QR_decomposition A)) $\n       i $\n       ia =\n       0", "have p: \"pairwise orthogonal (columns Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pairwise orthogonal (columns Q)", "by (metis Q_def orthogonal_fst_QR_decomposition)"], ["proof (state)\nthis:\n  pairwise orthogonal (columns Q)\n\ngoal (2 subgoals):\n 1. \\<And>ia.\n       (Finite_Cartesian_Product.transpose (fst (QR_decomposition A)) **\n        fst (QR_decomposition A)) $\n       ia $\n       ia =\n       1\n 2. \\<And>i ia.\n       i \\<noteq> ia \\<Longrightarrow>\n       (Finite_Cartesian_Product.transpose (fst (QR_decomposition A)) **\n        fst (QR_decomposition A)) $\n       i $\n       ia =\n       0", "fix ia"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ia.\n       (Finite_Cartesian_Product.transpose (fst (QR_decomposition A)) **\n        fst (QR_decomposition A)) $\n       ia $\n       ia =\n       1\n 2. \\<And>i ia.\n       i \\<noteq> ia \\<Longrightarrow>\n       (Finite_Cartesian_Product.transpose (fst (QR_decomposition A)) **\n        fst (QR_decomposition A)) $\n       i $\n       ia =\n       0", "have \"(transpose Q ** Q) $ ia $ ia = column ia Q \\<bullet> column ia Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Finite_Cartesian_Product.transpose Q ** Q) $ ia $ ia =\n    column ia Q \\<bullet> column ia Q", "unfolding matrix_matrix_mult_inner_mult"], ["proof (prove)\ngoal (1 subgoal):\n 1. row ia (Finite_Cartesian_Product.transpose Q) \\<bullet> column ia Q =\n    column ia Q \\<bullet> column ia Q", "unfolding row_transpose"], ["proof (prove)\ngoal (1 subgoal):\n 1. column ia Q \\<bullet> column ia Q = column ia Q \\<bullet> column ia Q", ".."], ["proof (state)\nthis:\n  (Finite_Cartesian_Product.transpose Q ** Q) $ ia $ ia =\n  column ia Q \\<bullet> column ia Q\n\ngoal (2 subgoals):\n 1. \\<And>ia.\n       (Finite_Cartesian_Product.transpose (fst (QR_decomposition A)) **\n        fst (QR_decomposition A)) $\n       ia $\n       ia =\n       1\n 2. \\<And>i ia.\n       i \\<noteq> ia \\<Longrightarrow>\n       (Finite_Cartesian_Product.transpose (fst (QR_decomposition A)) **\n        fst (QR_decomposition A)) $\n       i $\n       ia =\n       0", "also"], ["proof (state)\nthis:\n  (Finite_Cartesian_Product.transpose Q ** Q) $ ia $ ia =\n  column ia Q \\<bullet> column ia Q\n\ngoal (2 subgoals):\n 1. \\<And>ia.\n       (Finite_Cartesian_Product.transpose (fst (QR_decomposition A)) **\n        fst (QR_decomposition A)) $\n       ia $\n       ia =\n       1\n 2. \\<And>i ia.\n       i \\<noteq> ia \\<Longrightarrow>\n       (Finite_Cartesian_Product.transpose (fst (QR_decomposition A)) **\n        fst (QR_decomposition A)) $\n       i $\n       ia =\n       0", "have \"... = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column ia Q \\<bullet> column ia Q = 1", "using n norm_eq_1"], ["proof (prove)\nusing this:\n  \\<forall>i. norm (column i Q) = 1\n  (norm ?x = 1) = (?x \\<bullet> ?x = 1)\n\ngoal (1 subgoal):\n 1. column ia Q \\<bullet> column ia Q = 1", "by blast"], ["proof (state)\nthis:\n  column ia Q \\<bullet> column ia Q = 1\n\ngoal (2 subgoals):\n 1. \\<And>ia.\n       (Finite_Cartesian_Product.transpose (fst (QR_decomposition A)) **\n        fst (QR_decomposition A)) $\n       ia $\n       ia =\n       1\n 2. \\<And>i ia.\n       i \\<noteq> ia \\<Longrightarrow>\n       (Finite_Cartesian_Product.transpose (fst (QR_decomposition A)) **\n        fst (QR_decomposition A)) $\n       i $\n       ia =\n       0", "finally"], ["proof (chain)\npicking this:\n  (Finite_Cartesian_Product.transpose Q ** Q) $ ia $ ia = 1", "show \"(transpose Q ** Q) $ ia $ ia = 1\""], ["proof (prove)\nusing this:\n  (Finite_Cartesian_Product.transpose Q ** Q) $ ia $ ia = 1\n\ngoal (1 subgoal):\n 1. (Finite_Cartesian_Product.transpose Q ** Q) $ ia $ ia = 1", "."], ["proof (state)\nthis:\n  (Finite_Cartesian_Product.transpose Q ** Q) $ ia $ ia = 1\n\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       i \\<noteq> ia \\<Longrightarrow>\n       (Finite_Cartesian_Product.transpose (fst (QR_decomposition A)) **\n        fst (QR_decomposition A)) $\n       i $\n       ia =\n       0", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       i \\<noteq> ia \\<Longrightarrow>\n       (Finite_Cartesian_Product.transpose (fst (QR_decomposition A)) **\n        fst (QR_decomposition A)) $\n       i $\n       ia =\n       0", "assume i_not_ia: \"i \\<noteq> ia\""], ["proof (state)\nthis:\n  i \\<noteq> ia\n\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       i \\<noteq> ia \\<Longrightarrow>\n       (Finite_Cartesian_Product.transpose (fst (QR_decomposition A)) **\n        fst (QR_decomposition A)) $\n       i $\n       ia =\n       0", "have column_i_not_ia: \"column i Q \\<noteq> column ia Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column i Q \\<noteq> column ia Q", "proof (rule ccontr, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. column i Q = column ia Q \\<Longrightarrow> False", "assume col_i_ia: \"column i Q = column ia Q\""], ["proof (state)\nthis:\n  column i Q = column ia Q\n\ngoal (1 subgoal):\n 1. column i Q = column ia Q \\<Longrightarrow> False", "have rw: \"(\\<lambda>i. column i Q)` (UNIV-{ia}) = {column i Q|i. i\\<noteq>ia}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>i. column i Q) ` (UNIV - {ia}) =\n    {column i Q |i. i \\<noteq> ia}", "unfolding columns_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>i. column i Q) ` (UNIV - {ia}) =\n    {column i Q |i. i \\<noteq> ia}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>i. column i Q) ` (UNIV - {ia}) = {column i Q |i. i \\<noteq> ia}\n\ngoal (1 subgoal):\n 1. column i Q = column ia Q \\<Longrightarrow> False", "have \"card (columns Q) = card ({column i Q|i. i\\<noteq>ia})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (columns Q) = card {column i Q |i. i \\<noteq> ia}", "by (rule bij_betw_same_card[of id], unfold bij_betw_def columns_def, auto, metis col_i_ia i_not_ia)"], ["proof (state)\nthis:\n  card (columns Q) = card {column i Q |i. i \\<noteq> ia}\n\ngoal (1 subgoal):\n 1. column i Q = column ia Q \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  card (columns Q) = card {column i Q |i. i \\<noteq> ia}\n\ngoal (1 subgoal):\n 1. column i Q = column ia Q \\<Longrightarrow> False", "have \"... = card ((\\<lambda>i. column i Q)` (UNIV-{ia}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {column i Q |i. i \\<noteq> ia} =\n    card ((\\<lambda>i. column i Q) ` (UNIV - {ia}))", "unfolding rw"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {column i Q |i. i \\<noteq> ia} =\n    card {column i Q |i. i \\<noteq> ia}", ".."], ["proof (state)\nthis:\n  card {column i Q |i. i \\<noteq> ia} =\n  card ((\\<lambda>i. column i Q) ` (UNIV - {ia}))\n\ngoal (1 subgoal):\n 1. column i Q = column ia Q \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  card {column i Q |i. i \\<noteq> ia} =\n  card ((\\<lambda>i. column i Q) ` (UNIV - {ia}))\n\ngoal (1 subgoal):\n 1. column i Q = column ia Q \\<Longrightarrow> False", "have \"... \\<le> card (UNIV - {ia})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card ((\\<lambda>i. column i Q) ` (UNIV - {ia})) \\<le> card (UNIV - {ia})", "by (metis card_image_le finite_code)"], ["proof (state)\nthis:\n  card ((\\<lambda>i. column i Q) ` (UNIV - {ia})) \\<le> card (UNIV - {ia})\n\ngoal (1 subgoal):\n 1. column i Q = column ia Q \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  card ((\\<lambda>i. column i Q) ` (UNIV - {ia})) \\<le> card (UNIV - {ia})\n\ngoal (1 subgoal):\n 1. column i Q = column ia Q \\<Longrightarrow> False", "have \"... < CARD ('n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (UNIV - {ia}) < CARD('n)", "by simp"], ["proof (state)\nthis:\n  card (UNIV - {ia}) < CARD('n)\n\ngoal (1 subgoal):\n 1. column i Q = column ia Q \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  card (columns Q) < CARD('n)", "show False"], ["proof (prove)\nusing this:\n  card (columns Q) < CARD('n)\n\ngoal (1 subgoal):\n 1. False", "using c"], ["proof (prove)\nusing this:\n  card (columns Q) < CARD('n)\n  card (columns Q) = ncols A\n\ngoal (1 subgoal):\n 1. False", "unfolding ncols_def"], ["proof (prove)\nusing this:\n  card (columns Q) < CARD('n)\n  card (columns Q) = CARD('n)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  column i Q \\<noteq> column ia Q\n\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       i \\<noteq> ia \\<Longrightarrow>\n       (Finite_Cartesian_Product.transpose (fst (QR_decomposition A)) **\n        fst (QR_decomposition A)) $\n       i $\n       ia =\n       0", "hence oia: \"orthogonal (column i Q) (column ia Q)\""], ["proof (prove)\nusing this:\n  column i Q \\<noteq> column ia Q\n\ngoal (1 subgoal):\n 1. orthogonal (column i Q) (column ia Q)", "using p"], ["proof (prove)\nusing this:\n  column i Q \\<noteq> column ia Q\n  pairwise orthogonal (columns Q)\n\ngoal (1 subgoal):\n 1. orthogonal (column i Q) (column ia Q)", "unfolding pairwise_def"], ["proof (prove)\nusing this:\n  column i Q \\<noteq> column ia Q\n  \\<forall>x\\<in>columns Q.\n     \\<forall>y\\<in>columns Q. x \\<noteq> y \\<longrightarrow> orthogonal x y\n\ngoal (1 subgoal):\n 1. orthogonal (column i Q) (column ia Q)", "unfolding columns_def"], ["proof (prove)\nusing this:\n  column i Q \\<noteq> column ia Q\n  \\<forall>x\\<in>{column i Q |i. i \\<in> UNIV}.\n     \\<forall>y\\<in>{column i Q |i. i \\<in> UNIV}.\n        x \\<noteq> y \\<longrightarrow> orthogonal x y\n\ngoal (1 subgoal):\n 1. orthogonal (column i Q) (column ia Q)", "by auto"], ["proof (state)\nthis:\n  orthogonal (column i Q) (column ia Q)\n\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       i \\<noteq> ia \\<Longrightarrow>\n       (Finite_Cartesian_Product.transpose (fst (QR_decomposition A)) **\n        fst (QR_decomposition A)) $\n       i $\n       ia =\n       0", "have \"(transpose Q ** Q) $ i $ ia = column i Q \\<bullet> column ia Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Finite_Cartesian_Product.transpose Q ** Q) $ i $ ia =\n    column i Q \\<bullet> column ia Q", "unfolding matrix_matrix_mult_inner_mult"], ["proof (prove)\ngoal (1 subgoal):\n 1. row i (Finite_Cartesian_Product.transpose Q) \\<bullet> column ia Q =\n    column i Q \\<bullet> column ia Q", "unfolding row_transpose"], ["proof (prove)\ngoal (1 subgoal):\n 1. column i Q \\<bullet> column ia Q = column i Q \\<bullet> column ia Q", ".."], ["proof (state)\nthis:\n  (Finite_Cartesian_Product.transpose Q ** Q) $ i $ ia =\n  column i Q \\<bullet> column ia Q\n\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       i \\<noteq> ia \\<Longrightarrow>\n       (Finite_Cartesian_Product.transpose (fst (QR_decomposition A)) **\n        fst (QR_decomposition A)) $\n       i $\n       ia =\n       0", "also"], ["proof (state)\nthis:\n  (Finite_Cartesian_Product.transpose Q ** Q) $ i $ ia =\n  column i Q \\<bullet> column ia Q\n\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       i \\<noteq> ia \\<Longrightarrow>\n       (Finite_Cartesian_Product.transpose (fst (QR_decomposition A)) **\n        fst (QR_decomposition A)) $\n       i $\n       ia =\n       0", "have \"... = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column i Q \\<bullet> column ia Q = 0", "using oia"], ["proof (prove)\nusing this:\n  orthogonal (column i Q) (column ia Q)\n\ngoal (1 subgoal):\n 1. column i Q \\<bullet> column ia Q = 0", "unfolding orthogonal_def"], ["proof (prove)\nusing this:\n  column i Q \\<bullet> column ia Q = 0\n\ngoal (1 subgoal):\n 1. column i Q \\<bullet> column ia Q = 0", "."], ["proof (state)\nthis:\n  column i Q \\<bullet> column ia Q = 0\n\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       i \\<noteq> ia \\<Longrightarrow>\n       (Finite_Cartesian_Product.transpose (fst (QR_decomposition A)) **\n        fst (QR_decomposition A)) $\n       i $\n       ia =\n       0", "finally"], ["proof (chain)\npicking this:\n  (Finite_Cartesian_Product.transpose Q ** Q) $ i $ ia = 0", "show \"(transpose Q ** Q) $ i $ ia = 0\""], ["proof (prove)\nusing this:\n  (Finite_Cartesian_Product.transpose Q ** Q) $ i $ ia = 0\n\ngoal (1 subgoal):\n 1. (Finite_Cartesian_Product.transpose Q ** Q) $ i $ ia = 0", "."], ["proof (state)\nthis:\n  (Finite_Cartesian_Product.transpose Q ** Q) $ i $ ia = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary orthogonal_matrix_fst_QR_decomposition':\n  fixes A::\"real^'n::{mod_type}^'n::{mod_type}\"\n  assumes \"rank A = ncols A\"\n  shows \"orthogonal_matrix (fst (QR_decomposition A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. orthogonal_matrix (fst (QR_decomposition A))", "by (metis assms orthogonal_matrix orthogonal_matrix_fst_QR_decomposition)"], ["", "lemma column_eq_fst_QR_decomposition:\n  fixes A::\"real^'n::{mod_type}^'m::{mod_type}\"\n  assumes r: \"rank A = ncols A\"\n  and c: \"column i (fst (QR_decomposition A)) = column ia (fst (QR_decomposition A))\"\n  shows \"i = ia\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i = ia", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<noteq> ia \\<Longrightarrow> False", "assume i_not_ia: \"i \\<noteq> ia\""], ["proof (state)\nthis:\n  i \\<noteq> ia\n\ngoal (1 subgoal):\n 1. i \\<noteq> ia \\<Longrightarrow> False", "have \"columns  (fst (QR_decomposition A)) = (\\<lambda>x. column x  (fst (QR_decomposition A)))` (UNIV::('n::{mod_type}) set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. columns (fst (QR_decomposition A)) =\n    range (\\<lambda>x. column x (fst (QR_decomposition A)))", "unfolding columns_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {column i (fst (QR_decomposition A)) |i. i \\<in> UNIV} =\n    range (\\<lambda>x. column x (fst (QR_decomposition A)))", "by auto"], ["proof (state)\nthis:\n  columns (fst (QR_decomposition A)) =\n  range (\\<lambda>x. column x (fst (QR_decomposition A)))\n\ngoal (1 subgoal):\n 1. i \\<noteq> ia \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  columns (fst (QR_decomposition A)) =\n  range (\\<lambda>x. column x (fst (QR_decomposition A)))\n\ngoal (1 subgoal):\n 1. i \\<noteq> ia \\<Longrightarrow> False", "have \"... = (\\<lambda>x. column x  (fst (QR_decomposition A)))` ((UNIV::('n::{mod_type}) set)-{ia})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. range (\\<lambda>x. column x (fst (QR_decomposition A))) =\n    (\\<lambda>x. column x (fst (QR_decomposition A))) ` (UNIV - {ia})", "proof (unfold image_def, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<exists>x\\<in>UNIV - {ia}.\n          column xa (fst (QR_decomposition A)) =\n          column x (fst (QR_decomposition A))", "fix xa"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<exists>x\\<in>UNIV - {ia}.\n          column xa (fst (QR_decomposition A)) =\n          column x (fst (QR_decomposition A))", "show \"\\<exists>x\\<in>UNIV - {ia}. column xa  (fst (QR_decomposition A)) = column x  (fst (QR_decomposition A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>UNIV - {ia}.\n       column xa (fst (QR_decomposition A)) =\n       column x (fst (QR_decomposition A))", "proof (cases \"xa = ia\")"], ["proof (state)\ngoal (2 subgoals):\n 1. xa = ia \\<Longrightarrow>\n    \\<exists>x\\<in>UNIV - {ia}.\n       column xa (fst (QR_decomposition A)) =\n       column x (fst (QR_decomposition A))\n 2. xa \\<noteq> ia \\<Longrightarrow>\n    \\<exists>x\\<in>UNIV - {ia}.\n       column xa (fst (QR_decomposition A)) =\n       column x (fst (QR_decomposition A))", "case True"], ["proof (state)\nthis:\n  xa = ia\n\ngoal (2 subgoals):\n 1. xa = ia \\<Longrightarrow>\n    \\<exists>x\\<in>UNIV - {ia}.\n       column xa (fst (QR_decomposition A)) =\n       column x (fst (QR_decomposition A))\n 2. xa \\<noteq> ia \\<Longrightarrow>\n    \\<exists>x\\<in>UNIV - {ia}.\n       column xa (fst (QR_decomposition A)) =\n       column x (fst (QR_decomposition A))", "thus ?thesis"], ["proof (prove)\nusing this:\n  xa = ia\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>UNIV - {ia}.\n       column xa (fst (QR_decomposition A)) =\n       column x (fst (QR_decomposition A))", "using c i_not_ia"], ["proof (prove)\nusing this:\n  xa = ia\n  column i (fst (QR_decomposition A)) = column ia (fst (QR_decomposition A))\n  i \\<noteq> ia\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>UNIV - {ia}.\n       column xa (fst (QR_decomposition A)) =\n       column x (fst (QR_decomposition A))", "by (metis DiffI UNIV_I empty_iff insert_iff)"], ["proof (state)\nthis:\n  \\<exists>x\\<in>UNIV - {ia}.\n     column xa (fst (QR_decomposition A)) =\n     column x (fst (QR_decomposition A))\n\ngoal (1 subgoal):\n 1. xa \\<noteq> ia \\<Longrightarrow>\n    \\<exists>x\\<in>UNIV - {ia}.\n       column xa (fst (QR_decomposition A)) =\n       column x (fst (QR_decomposition A))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. xa \\<noteq> ia \\<Longrightarrow>\n    \\<exists>x\\<in>UNIV - {ia}.\n       column xa (fst (QR_decomposition A)) =\n       column x (fst (QR_decomposition A))", "case False"], ["proof (state)\nthis:\n  xa \\<noteq> ia\n\ngoal (1 subgoal):\n 1. xa \\<noteq> ia \\<Longrightarrow>\n    \\<exists>x\\<in>UNIV - {ia}.\n       column xa (fst (QR_decomposition A)) =\n       column x (fst (QR_decomposition A))", "thus ?thesis"], ["proof (prove)\nusing this:\n  xa \\<noteq> ia\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>UNIV - {ia}.\n       column xa (fst (QR_decomposition A)) =\n       column x (fst (QR_decomposition A))", "by auto"], ["proof (state)\nthis:\n  \\<exists>x\\<in>UNIV - {ia}.\n     column xa (fst (QR_decomposition A)) =\n     column x (fst (QR_decomposition A))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x\\<in>UNIV - {ia}.\n     column xa (fst (QR_decomposition A)) =\n     column x (fst (QR_decomposition A))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  range (\\<lambda>x. column x (fst (QR_decomposition A))) =\n  (\\<lambda>x. column x (fst (QR_decomposition A))) ` (UNIV - {ia})\n\ngoal (1 subgoal):\n 1. i \\<noteq> ia \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  columns (fst (QR_decomposition A)) =\n  (\\<lambda>x. column x (fst (QR_decomposition A))) ` (UNIV - {ia})", "have columns_rw: \"columns  (fst (QR_decomposition A)) \n    = (\\<lambda>x. column x  (fst (QR_decomposition A))) ` (UNIV - {ia})\""], ["proof (prove)\nusing this:\n  columns (fst (QR_decomposition A)) =\n  (\\<lambda>x. column x (fst (QR_decomposition A))) ` (UNIV - {ia})\n\ngoal (1 subgoal):\n 1. columns (fst (QR_decomposition A)) =\n    (\\<lambda>x. column x (fst (QR_decomposition A))) ` (UNIV - {ia})", "."], ["proof (state)\nthis:\n  columns (fst (QR_decomposition A)) =\n  (\\<lambda>x. column x (fst (QR_decomposition A))) ` (UNIV - {ia})\n\ngoal (1 subgoal):\n 1. i \\<noteq> ia \\<Longrightarrow> False", "have \"ncols A = card (columns  (fst (QR_decomposition A)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ncols A = card (columns (fst (QR_decomposition A)))", "by (metis full_rank_imp_is_basis2 independent_columns_fst_QR_decomposition r)"], ["proof (state)\nthis:\n  ncols A = card (columns (fst (QR_decomposition A)))\n\ngoal (1 subgoal):\n 1. i \\<noteq> ia \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  ncols A = card (columns (fst (QR_decomposition A)))\n\ngoal (1 subgoal):\n 1. i \\<noteq> ia \\<Longrightarrow> False", "have \"... \\<le> card (UNIV - {ia})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (columns (fst (QR_decomposition A))) \\<le> card (UNIV - {ia})", "unfolding columns_rw"], ["proof (prove)\ngoal (1 subgoal):\n 1. card ((\\<lambda>x. column x (fst (QR_decomposition A))) ` (UNIV - {ia}))\n    \\<le> card (UNIV - {ia})", "by (rule card_image_le, simp)"], ["proof (state)\nthis:\n  card (columns (fst (QR_decomposition A))) \\<le> card (UNIV - {ia})\n\ngoal (1 subgoal):\n 1. i \\<noteq> ia \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  card (columns (fst (QR_decomposition A))) \\<le> card (UNIV - {ia})\n\ngoal (1 subgoal):\n 1. i \\<noteq> ia \\<Longrightarrow> False", "have \"... = card (UNIV::'n set) - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (UNIV - {ia}) = CARD('n) - 1", "by (simp add: card_Diff_singleton)"], ["proof (state)\nthis:\n  card (UNIV - {ia}) = CARD('n) - 1\n\ngoal (1 subgoal):\n 1. i \\<noteq> ia \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  ncols A \\<le> CARD('n) - 1", "show False"], ["proof (prove)\nusing this:\n  ncols A \\<le> CARD('n) - 1\n\ngoal (1 subgoal):\n 1. False", "unfolding ncols_def"], ["proof (prove)\nusing this:\n  CARD('n) \\<le> CARD('n) - 1\n\ngoal (1 subgoal):\n 1. False", "by (metis Nat.add_0_right le_diff_conv2 One_nat_def Suc_n_not_le_n add_Suc_right one_le_card_finite)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary column_QR_decomposition:\n  fixes A::\"real^'n::{mod_type}^'m::{mod_type}\"\n  assumes r: \"rank A = ncols A\"\n  shows \"column k ((Gram_Schmidt_matrix A)) \n  = (column k A) - (\\<Sum>x\\<in>{column i (fst (QR_decomposition A))|i. i < k}. (x \\<bullet> (column k A) / (x \\<bullet> x)) *\\<^sub>R x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    column k A -\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    column k A -\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "let ?uk=\"column k ((Gram_Schmidt_matrix A))\""], ["proof (state)\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    column k A -\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "let ?qk=\"column k (fst(QR_decomposition A))\""], ["proof (state)\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    column k A -\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "let ?ak=\"(column k A)\""], ["proof (state)\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    column k A -\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "define f where \"f x = (1/norm x) *\\<^sub>R x\" for x :: \"real^'m::{mod_type}\""], ["proof (state)\nthis:\n  f ?x = (1 / norm ?x) *\\<^sub>R ?x\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    column k A -\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "let ?g=\"\\<lambda>x::real^'m::{mod_type}. (x \\<bullet> (column k A) / (x \\<bullet> x)) *\\<^sub>R x\""], ["proof (state)\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    column k A -\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "have set_rw: \"{column i (fst (QR_decomposition A))|i. i < k} = f`{column i (Gram_Schmidt_matrix A)|i. i < k}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {column i (fst (QR_decomposition A)) |i. i < k} =\n    f ` {column i (Gram_Schmidt_matrix A) |i. i < k}", "proof (auto)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < k \\<Longrightarrow>\n       column i (fst (QR_decomposition A))\n       \\<in> f ` {column i (Gram_Schmidt_matrix A) |i. i < k}\n 2. \\<And>i.\n       i < k \\<Longrightarrow>\n       \\<exists>ia.\n          f (column i (Gram_Schmidt_matrix A)) =\n          column ia (fst (QR_decomposition A)) \\<and>\n          ia < k", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < k \\<Longrightarrow>\n       column i (fst (QR_decomposition A))\n       \\<in> f ` {column i (Gram_Schmidt_matrix A) |i. i < k}\n 2. \\<And>i.\n       i < k \\<Longrightarrow>\n       \\<exists>ia.\n          f (column i (Gram_Schmidt_matrix A)) =\n          column ia (fst (QR_decomposition A)) \\<and>\n          ia < k", "assume i: \"i < k\""], ["proof (state)\nthis:\n  i < k\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < k \\<Longrightarrow>\n       column i (fst (QR_decomposition A))\n       \\<in> f ` {column i (Gram_Schmidt_matrix A) |i. i < k}\n 2. \\<And>i.\n       i < k \\<Longrightarrow>\n       \\<exists>ia.\n          f (column i (Gram_Schmidt_matrix A)) =\n          column ia (fst (QR_decomposition A)) \\<and>\n          ia < k", "have col_rw: \"column i (fst (QR_decomposition A)) = \n      (1/norm (column i (Gram_Schmidt_matrix A))) *\\<^sub>R (column i (Gram_Schmidt_matrix A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A)) =\n    (1 / norm (column i (Gram_Schmidt_matrix A))) *\\<^sub>R\n    column i (Gram_Schmidt_matrix A)", "unfolding QR_decomposition_def Let_def fst_conv divide_by_norm_def column_def normalize_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>ia.\n        (\\<chi>a b.\n            ((1 / norm (\\<chi>i. Gram_Schmidt_matrix A $ i $ b)) *\\<^sub>R\n             (\\<chi>i. Gram_Schmidt_matrix A $ i $ b)) $\n            a) $\n        ia $\n        i) =\n    (1 / norm (\\<chi>ia. Gram_Schmidt_matrix A $ ia $ i)) *\\<^sub>R\n    (\\<chi>ia. Gram_Schmidt_matrix A $ ia $ i)", "by vector"], ["proof (state)\nthis:\n  column i (fst (QR_decomposition A)) =\n  (1 / norm (column i (Gram_Schmidt_matrix A))) *\\<^sub>R\n  column i (Gram_Schmidt_matrix A)\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < k \\<Longrightarrow>\n       column i (fst (QR_decomposition A))\n       \\<in> f ` {column i (Gram_Schmidt_matrix A) |i. i < k}\n 2. \\<And>i.\n       i < k \\<Longrightarrow>\n       \\<exists>ia.\n          f (column i (Gram_Schmidt_matrix A)) =\n          column ia (fst (QR_decomposition A)) \\<and>\n          ia < k", "thus \"column i (fst (QR_decomposition A)) \\<in> f ` {column i (Gram_Schmidt_matrix A) |i. i < k}\""], ["proof (prove)\nusing this:\n  column i (fst (QR_decomposition A)) =\n  (1 / norm (column i (Gram_Schmidt_matrix A))) *\\<^sub>R\n  column i (Gram_Schmidt_matrix A)\n\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A))\n    \\<in> f ` {column i (Gram_Schmidt_matrix A) |i. i < k}", "unfolding f_def"], ["proof (prove)\nusing this:\n  column i (fst (QR_decomposition A)) =\n  (1 / norm (column i (Gram_Schmidt_matrix A))) *\\<^sub>R\n  column i (Gram_Schmidt_matrix A)\n\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A))\n    \\<in> (\\<lambda>x. (1 / norm x) *\\<^sub>R x) `\n          {column i (Gram_Schmidt_matrix A) |i. i < k}", "using i"], ["proof (prove)\nusing this:\n  column i (fst (QR_decomposition A)) =\n  (1 / norm (column i (Gram_Schmidt_matrix A))) *\\<^sub>R\n  column i (Gram_Schmidt_matrix A)\n  i < k\n\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A))\n    \\<in> (\\<lambda>x. (1 / norm x) *\\<^sub>R x) `\n          {column i (Gram_Schmidt_matrix A) |i. i < k}", "by auto"], ["proof (state)\nthis:\n  column i (fst (QR_decomposition A))\n  \\<in> f ` {column i (Gram_Schmidt_matrix A) |i. i < k}\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < k \\<Longrightarrow>\n       \\<exists>ia.\n          f (column i (Gram_Schmidt_matrix A)) =\n          column ia (fst (QR_decomposition A)) \\<and>\n          ia < k", "show \"\\<exists>ia. f (column i (Gram_Schmidt_matrix A)) = column ia (fst (QR_decomposition A)) \\<and> ia < k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ia.\n       f (column i (Gram_Schmidt_matrix A)) =\n       column ia (fst (QR_decomposition A)) \\<and>\n       ia < k", "by (rule exI[of _ i], simp add: f_def col_rw i)"], ["proof (state)\nthis:\n  \\<exists>ia.\n     f (column i (Gram_Schmidt_matrix A)) =\n     column ia (fst (QR_decomposition A)) \\<and>\n     ia < k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {column i (fst (QR_decomposition A)) |i. i < k} =\n  f ` {column i (Gram_Schmidt_matrix A) |i. i < k}\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    column k A -\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "have \"(\\<Sum>x\\<in>{column i (fst (QR_decomposition A))|i. i < k}. (x \\<bullet> ?ak / (x \\<bullet> x)) *\\<^sub>R x) \n    = (\\<Sum>x\\<in>(f`{column i (Gram_Schmidt_matrix A)|i. i < k}). (x \\<bullet> ?ak / (x \\<bullet> x)) *\\<^sub>R x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n    (\\<Sum>x\\<in>f ` {column i (Gram_Schmidt_matrix A) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "unfolding set_rw"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>f ` {column i (Gram_Schmidt_matrix A) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n    (\\<Sum>x\\<in>f ` {column i (Gram_Schmidt_matrix A) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", ".."], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n  (\\<Sum>x\\<in>f ` {column i (Gram_Schmidt_matrix A) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    column k A -\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n  (\\<Sum>x\\<in>f ` {column i (Gram_Schmidt_matrix A) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    column k A -\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "have \"... = sum (?g  \\<circ> f) {column i (Gram_Schmidt_matrix A)|i. i < k}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>f ` {column i (Gram_Schmidt_matrix A) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n    sum ((\\<lambda>x.\n             (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) \\<circ>\n         f)\n     {column i (Gram_Schmidt_matrix A) |i. i < k}", "proof (rule sum.reindex, unfold inj_on_def, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       \\<lbrakk>i < k; ia < k;\n        f (column i (Gram_Schmidt_matrix A)) =\n        f (column ia (Gram_Schmidt_matrix A))\\<rbrakk>\n       \\<Longrightarrow> column i (Gram_Schmidt_matrix A) =\n                         column ia (Gram_Schmidt_matrix A)", "fix i ia"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       \\<lbrakk>i < k; ia < k;\n        f (column i (Gram_Schmidt_matrix A)) =\n        f (column ia (Gram_Schmidt_matrix A))\\<rbrakk>\n       \\<Longrightarrow> column i (Gram_Schmidt_matrix A) =\n                         column ia (Gram_Schmidt_matrix A)", "assume i: \"i < k\" and ia: \"ia < k\"\n      and f_eq: \"f (column i (Gram_Schmidt_matrix A)) = f (column ia (Gram_Schmidt_matrix A))\""], ["proof (state)\nthis:\n  i < k\n  ia < k\n  f (column i (Gram_Schmidt_matrix A)) =\n  f (column ia (Gram_Schmidt_matrix A))\n\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       \\<lbrakk>i < k; ia < k;\n        f (column i (Gram_Schmidt_matrix A)) =\n        f (column ia (Gram_Schmidt_matrix A))\\<rbrakk>\n       \\<Longrightarrow> column i (Gram_Schmidt_matrix A) =\n                         column ia (Gram_Schmidt_matrix A)", "have fi: \"f (column i (Gram_Schmidt_matrix A)) = column i (fst (QR_decomposition A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (column i (Gram_Schmidt_matrix A)) =\n    column i (fst (QR_decomposition A))", "unfolding f_def QR_decomposition_def Let_def fst_conv divide_by_norm_def column_def normalize_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (1 / norm (\\<chi>ia. Gram_Schmidt_matrix A $ ia $ i)) *\\<^sub>R\n    (\\<chi>ia. Gram_Schmidt_matrix A $ ia $ i) =\n    (\\<chi>ia.\n        (\\<chi>a b.\n            ((1 / norm (\\<chi>i. Gram_Schmidt_matrix A $ i $ b)) *\\<^sub>R\n             (\\<chi>i. Gram_Schmidt_matrix A $ i $ b)) $\n            a) $\n        ia $\n        i)", "by vector"], ["proof (state)\nthis:\n  f (column i (Gram_Schmidt_matrix A)) = column i (fst (QR_decomposition A))\n\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       \\<lbrakk>i < k; ia < k;\n        f (column i (Gram_Schmidt_matrix A)) =\n        f (column ia (Gram_Schmidt_matrix A))\\<rbrakk>\n       \\<Longrightarrow> column i (Gram_Schmidt_matrix A) =\n                         column ia (Gram_Schmidt_matrix A)", "have fia: \"f (column ia (Gram_Schmidt_matrix A)) = column ia (fst (QR_decomposition A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (column ia (Gram_Schmidt_matrix A)) =\n    column ia (fst (QR_decomposition A))", "unfolding f_def QR_decomposition_def Let_def fst_conv divide_by_norm_def column_def normalize_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (1 / norm (\\<chi>i. Gram_Schmidt_matrix A $ i $ ia)) *\\<^sub>R\n    (\\<chi>i. Gram_Schmidt_matrix A $ i $ ia) =\n    (\\<chi>i.\n        (\\<chi>a b.\n            ((1 / norm (\\<chi>i. Gram_Schmidt_matrix A $ i $ b)) *\\<^sub>R\n             (\\<chi>i. Gram_Schmidt_matrix A $ i $ b)) $\n            a) $\n        i $\n        ia)", "by vector"], ["proof (state)\nthis:\n  f (column ia (Gram_Schmidt_matrix A)) =\n  column ia (fst (QR_decomposition A))\n\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       \\<lbrakk>i < k; ia < k;\n        f (column i (Gram_Schmidt_matrix A)) =\n        f (column ia (Gram_Schmidt_matrix A))\\<rbrakk>\n       \\<Longrightarrow> column i (Gram_Schmidt_matrix A) =\n                         column ia (Gram_Schmidt_matrix A)", "have \"i = ia\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i = ia", "using column_eq_fst_QR_decomposition[OF r] f_eq"], ["proof (prove)\nusing this:\n  column ?i (fst (QR_decomposition A)) =\n  column ?ia (fst (QR_decomposition A)) \\<Longrightarrow>\n  ?i = ?ia\n  f (column i (Gram_Schmidt_matrix A)) =\n  f (column ia (Gram_Schmidt_matrix A))\n\ngoal (1 subgoal):\n 1. i = ia", "unfolding fi fia"], ["proof (prove)\nusing this:\n  column ?i (fst (QR_decomposition A)) =\n  column ?ia (fst (QR_decomposition A)) \\<Longrightarrow>\n  ?i = ?ia\n  column i (fst (QR_decomposition A)) = column ia (fst (QR_decomposition A))\n\ngoal (1 subgoal):\n 1. i = ia", "by simp"], ["proof (state)\nthis:\n  i = ia\n\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       \\<lbrakk>i < k; ia < k;\n        f (column i (Gram_Schmidt_matrix A)) =\n        f (column ia (Gram_Schmidt_matrix A))\\<rbrakk>\n       \\<Longrightarrow> column i (Gram_Schmidt_matrix A) =\n                         column ia (Gram_Schmidt_matrix A)", "thus \"column i (Gram_Schmidt_matrix A) = column ia (Gram_Schmidt_matrix A)\""], ["proof (prove)\nusing this:\n  i = ia\n\ngoal (1 subgoal):\n 1. column i (Gram_Schmidt_matrix A) = column ia (Gram_Schmidt_matrix A)", "by simp"], ["proof (state)\nthis:\n  column i (Gram_Schmidt_matrix A) = column ia (Gram_Schmidt_matrix A)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>f ` {column i (Gram_Schmidt_matrix A) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n  sum ((\\<lambda>x.\n           (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) \\<circ>\n       f)\n   {column i (Gram_Schmidt_matrix A) |i. i < k}\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    column k A -\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>f ` {column i (Gram_Schmidt_matrix A) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n  sum ((\\<lambda>x.\n           (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) \\<circ>\n       f)\n   {column i (Gram_Schmidt_matrix A) |i. i < k}\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    column k A -\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "have \"... =  (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i.\n    i < k}. ((1 / norm x) *\\<^sub>R x \\<bullet> ?ak / ((1 / norm x) *\\<^sub>R x \\<bullet> (1 / norm x) *\\<^sub>R x)) *\\<^sub>R (1 / norm x) *\\<^sub>R x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum ((\\<lambda>x.\n             (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) \\<circ>\n         f)\n     {column i (Gram_Schmidt_matrix A) |i. i < k} =\n    (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n       ((1 / norm x) *\\<^sub>R x \\<bullet> column k A /\n        ((1 / norm x) *\\<^sub>R x \\<bullet>\n         (1 / norm x) *\\<^sub>R x)) *\\<^sub>R\n       (1 / norm x) *\\<^sub>R x)", "unfolding o_def f_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n       ((1 / norm x) *\\<^sub>R x \\<bullet> column k A /\n        ((1 / norm x) *\\<^sub>R x \\<bullet>\n         (1 / norm x) *\\<^sub>R x)) *\\<^sub>R\n       (1 / norm x) *\\<^sub>R x) =\n    (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n       ((1 / norm x) *\\<^sub>R x \\<bullet> column k A /\n        ((1 / norm x) *\\<^sub>R x \\<bullet>\n         (1 / norm x) *\\<^sub>R x)) *\\<^sub>R\n       (1 / norm x) *\\<^sub>R x)", ".."], ["proof (state)\nthis:\n  sum ((\\<lambda>x.\n           (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) \\<circ>\n       f)\n   {column i (Gram_Schmidt_matrix A) |i. i < k} =\n  (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n     ((1 / norm x) *\\<^sub>R x \\<bullet> column k A /\n      ((1 / norm x) *\\<^sub>R x \\<bullet>\n       (1 / norm x) *\\<^sub>R x)) *\\<^sub>R\n     (1 / norm x) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    column k A -\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "also"], ["proof (state)\nthis:\n  sum ((\\<lambda>x.\n           (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) \\<circ>\n       f)\n   {column i (Gram_Schmidt_matrix A) |i. i < k} =\n  (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n     ((1 / norm x) *\\<^sub>R x \\<bullet> column k A /\n      ((1 / norm x) *\\<^sub>R x \\<bullet>\n       (1 / norm x) *\\<^sub>R x)) *\\<^sub>R\n     (1 / norm x) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    column k A -\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "have \"... =  (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i.\n    i < k}. ((1 / norm x) *\\<^sub>R x \\<bullet> ?ak)  *\\<^sub>R (1 / norm x) *\\<^sub>R x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n       ((1 / norm x) *\\<^sub>R x \\<bullet> column k A /\n        ((1 / norm x) *\\<^sub>R x \\<bullet>\n         (1 / norm x) *\\<^sub>R x)) *\\<^sub>R\n       (1 / norm x) *\\<^sub>R x) =\n    (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n       ((1 / norm x) *\\<^sub>R x \\<bullet> column k A) *\\<^sub>R\n       (1 / norm x) *\\<^sub>R x)", "proof (rule sum.cong, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {column i (Gram_Schmidt_matrix A) |i.\n                i < k} \\<Longrightarrow>\n       ((1 / norm x) *\\<^sub>R x \\<bullet> column k A /\n        ((1 / norm x) *\\<^sub>R x \\<bullet>\n         (1 / norm x) *\\<^sub>R x)) *\\<^sub>R\n       (1 / norm x) *\\<^sub>R x =\n       ((1 / norm x) *\\<^sub>R x \\<bullet> column k A) *\\<^sub>R\n       (1 / norm x) *\\<^sub>R x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {column i (Gram_Schmidt_matrix A) |i.\n                i < k} \\<Longrightarrow>\n       ((1 / norm x) *\\<^sub>R x \\<bullet> column k A /\n        ((1 / norm x) *\\<^sub>R x \\<bullet>\n         (1 / norm x) *\\<^sub>R x)) *\\<^sub>R\n       (1 / norm x) *\\<^sub>R x =\n       ((1 / norm x) *\\<^sub>R x \\<bullet> column k A) *\\<^sub>R\n       (1 / norm x) *\\<^sub>R x", "assume x: \"x \\<in> {column i (Gram_Schmidt_matrix A) |i. i < k}\""], ["proof (state)\nthis:\n  x \\<in> {column i (Gram_Schmidt_matrix A) |i. i < k}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {column i (Gram_Schmidt_matrix A) |i.\n                i < k} \\<Longrightarrow>\n       ((1 / norm x) *\\<^sub>R x \\<bullet> column k A /\n        ((1 / norm x) *\\<^sub>R x \\<bullet>\n         (1 / norm x) *\\<^sub>R x)) *\\<^sub>R\n       (1 / norm x) *\\<^sub>R x =\n       ((1 / norm x) *\\<^sub>R x \\<bullet> column k A) *\\<^sub>R\n       (1 / norm x) *\\<^sub>R x", "have \"vec.independent {column i (Gram_Schmidt_matrix A) |i. i < k}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec.independent {column i (Gram_Schmidt_matrix A) |i. i < k}", "proof (rule vec.independent_mono[of \"columns (Gram_Schmidt_matrix A)\"])"], ["proof (state)\ngoal (2 subgoals):\n 1. vec.independent (columns (Gram_Schmidt_matrix A))\n 2. {column i (Gram_Schmidt_matrix A) |i. i < k}\n    \\<subseteq> columns (Gram_Schmidt_matrix A)", "show \"vec.independent (columns (Gram_Schmidt_matrix A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec.independent (columns (Gram_Schmidt_matrix A))", "using full_rank_imp_is_basis2[of \"(Gram_Schmidt_matrix A)\"]"], ["proof (prove)\nusing this:\n  rank (Gram_Schmidt_matrix A) =\n  ncols (Gram_Schmidt_matrix A) \\<Longrightarrow>\n  vec.independent (columns (Gram_Schmidt_matrix A)) \\<and>\n  vec.span (columns (Gram_Schmidt_matrix A)) =\n  col_space (Gram_Schmidt_matrix A) \\<and>\n  card (columns (Gram_Schmidt_matrix A)) = ncols (Gram_Schmidt_matrix A)\n\ngoal (1 subgoal):\n 1. vec.independent (columns (Gram_Schmidt_matrix A))", "by (metis full_rank_imp_is_basis2 independent_columns_Gram_Schmidt_matrix r)"], ["proof (state)\nthis:\n  vec.independent (columns (Gram_Schmidt_matrix A))\n\ngoal (1 subgoal):\n 1. {column i (Gram_Schmidt_matrix A) |i. i < k}\n    \\<subseteq> columns (Gram_Schmidt_matrix A)", "show \"{column i (Gram_Schmidt_matrix A) |i. i < k} \\<subseteq> columns (Gram_Schmidt_matrix A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {column i (Gram_Schmidt_matrix A) |i. i < k}\n    \\<subseteq> columns (Gram_Schmidt_matrix A)", "unfolding columns_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {column i (Gram_Schmidt_matrix A) |i. i < k}\n    \\<subseteq> {column i (Gram_Schmidt_matrix A) |i. i \\<in> UNIV}", "by auto"], ["proof (state)\nthis:\n  {column i (Gram_Schmidt_matrix A) |i. i < k}\n  \\<subseteq> columns (Gram_Schmidt_matrix A)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  vec.independent {column i (Gram_Schmidt_matrix A) |i. i < k}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {column i (Gram_Schmidt_matrix A) |i.\n                i < k} \\<Longrightarrow>\n       ((1 / norm x) *\\<^sub>R x \\<bullet> column k A /\n        ((1 / norm x) *\\<^sub>R x \\<bullet>\n         (1 / norm x) *\\<^sub>R x)) *\\<^sub>R\n       (1 / norm x) *\\<^sub>R x =\n       ((1 / norm x) *\\<^sub>R x \\<bullet> column k A) *\\<^sub>R\n       (1 / norm x) *\\<^sub>R x", "hence \"x \\<noteq> 0\""], ["proof (prove)\nusing this:\n  vec.independent {column i (Gram_Schmidt_matrix A) |i. i < k}\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0", "using vec.dependent_zero[of \" {column i (Gram_Schmidt_matrix A) |i. i < k}\"] x"], ["proof (prove)\nusing this:\n  vec.independent {column i (Gram_Schmidt_matrix A) |i. i < k}\n  0 \\<in> {column i (Gram_Schmidt_matrix A) |i. i < k} \\<Longrightarrow>\n  vec.dependent {column i (Gram_Schmidt_matrix A) |i. i < k}\n  x \\<in> {column i (Gram_Schmidt_matrix A) |i. i < k}\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0", "by blast"], ["proof (state)\nthis:\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {column i (Gram_Schmidt_matrix A) |i.\n                i < k} \\<Longrightarrow>\n       ((1 / norm x) *\\<^sub>R x \\<bullet> column k A /\n        ((1 / norm x) *\\<^sub>R x \\<bullet>\n         (1 / norm x) *\\<^sub>R x)) *\\<^sub>R\n       (1 / norm x) *\\<^sub>R x =\n       ((1 / norm x) *\\<^sub>R x \\<bullet> column k A) *\\<^sub>R\n       (1 / norm x) *\\<^sub>R x", "hence \"((1 / norm x) *\\<^sub>R x \\<bullet> (1 / norm x) *\\<^sub>R x) = 1\""], ["proof (prove)\nusing this:\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (1 / norm x) *\\<^sub>R x \\<bullet> (1 / norm x) *\\<^sub>R x = 1", "by (metis inverse_eq_divide norm_eq_1 norm_sgn sgn_div_norm)"], ["proof (state)\nthis:\n  (1 / norm x) *\\<^sub>R x \\<bullet> (1 / norm x) *\\<^sub>R x = 1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {column i (Gram_Schmidt_matrix A) |i.\n                i < k} \\<Longrightarrow>\n       ((1 / norm x) *\\<^sub>R x \\<bullet> column k A /\n        ((1 / norm x) *\\<^sub>R x \\<bullet>\n         (1 / norm x) *\\<^sub>R x)) *\\<^sub>R\n       (1 / norm x) *\\<^sub>R x =\n       ((1 / norm x) *\\<^sub>R x \\<bullet> column k A) *\\<^sub>R\n       (1 / norm x) *\\<^sub>R x", "thus \"((1 / norm x) *\\<^sub>R x \\<bullet> ?ak / ((1 / norm x) *\\<^sub>R x \\<bullet> (1 / norm x) *\\<^sub>R x)) *\\<^sub>R (1 / norm x) *\\<^sub>R x =\n      ((1 / norm x) *\\<^sub>R x \\<bullet> column k A) *\\<^sub>R (1 / norm x) *\\<^sub>R x\""], ["proof (prove)\nusing this:\n  (1 / norm x) *\\<^sub>R x \\<bullet> (1 / norm x) *\\<^sub>R x = 1\n\ngoal (1 subgoal):\n 1. ((1 / norm x) *\\<^sub>R x \\<bullet> column k A /\n     ((1 / norm x) *\\<^sub>R x \\<bullet>\n      (1 / norm x) *\\<^sub>R x)) *\\<^sub>R\n    (1 / norm x) *\\<^sub>R x =\n    ((1 / norm x) *\\<^sub>R x \\<bullet> column k A) *\\<^sub>R\n    (1 / norm x) *\\<^sub>R x", "by auto"], ["proof (state)\nthis:\n  ((1 / norm x) *\\<^sub>R x \\<bullet> column k A /\n   ((1 / norm x) *\\<^sub>R x \\<bullet> (1 / norm x) *\\<^sub>R x)) *\\<^sub>R\n  (1 / norm x) *\\<^sub>R x =\n  ((1 / norm x) *\\<^sub>R x \\<bullet> column k A) *\\<^sub>R\n  (1 / norm x) *\\<^sub>R x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n     ((1 / norm x) *\\<^sub>R x \\<bullet> column k A /\n      ((1 / norm x) *\\<^sub>R x \\<bullet>\n       (1 / norm x) *\\<^sub>R x)) *\\<^sub>R\n     (1 / norm x) *\\<^sub>R x) =\n  (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n     ((1 / norm x) *\\<^sub>R x \\<bullet> column k A) *\\<^sub>R\n     (1 / norm x) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    column k A -\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n     ((1 / norm x) *\\<^sub>R x \\<bullet> column k A /\n      ((1 / norm x) *\\<^sub>R x \\<bullet>\n       (1 / norm x) *\\<^sub>R x)) *\\<^sub>R\n     (1 / norm x) *\\<^sub>R x) =\n  (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n     ((1 / norm x) *\\<^sub>R x \\<bullet> column k A) *\\<^sub>R\n     (1 / norm x) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    column k A -\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "have \"... = (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}. (((x \\<bullet> ?ak)) / (x \\<bullet> x)) *\\<^sub>R x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n       ((1 / norm x) *\\<^sub>R x \\<bullet> column k A) *\\<^sub>R\n       (1 / norm x) *\\<^sub>R x) =\n    (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "proof (rule sum.cong, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {column i (Gram_Schmidt_matrix A) |i.\n                i < k} \\<Longrightarrow>\n       ((1 / norm x) *\\<^sub>R x \\<bullet> column k A) *\\<^sub>R\n       (1 / norm x) *\\<^sub>R x =\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {column i (Gram_Schmidt_matrix A) |i.\n                i < k} \\<Longrightarrow>\n       ((1 / norm x) *\\<^sub>R x \\<bullet> column k A) *\\<^sub>R\n       (1 / norm x) *\\<^sub>R x =\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x", "assume x: \"x \\<in> {column i (Gram_Schmidt_matrix A) |i. i < k}\""], ["proof (state)\nthis:\n  x \\<in> {column i (Gram_Schmidt_matrix A) |i. i < k}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {column i (Gram_Schmidt_matrix A) |i.\n                i < k} \\<Longrightarrow>\n       ((1 / norm x) *\\<^sub>R x \\<bullet> column k A) *\\<^sub>R\n       (1 / norm x) *\\<^sub>R x =\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x", "show \"((1 / norm x) *\\<^sub>R x \\<bullet> column k A) *\\<^sub>R (1 / norm x) *\\<^sub>R x = (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((1 / norm x) *\\<^sub>R x \\<bullet> column k A) *\\<^sub>R\n    (1 / norm x) *\\<^sub>R x =\n    (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x", "by (metis (hide_lams, no_types) mult.right_neutral inner_commute inner_scaleR_right \n        norm_cauchy_schwarz_eq scaleR_one scaleR_scaleR times_divide_eq_right times_divide_times_eq)"], ["proof (state)\nthis:\n  ((1 / norm x) *\\<^sub>R x \\<bullet> column k A) *\\<^sub>R\n  (1 / norm x) *\\<^sub>R x =\n  (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n     ((1 / norm x) *\\<^sub>R x \\<bullet> column k A) *\\<^sub>R\n     (1 / norm x) *\\<^sub>R x) =\n  (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    column k A -\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n  (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "have \"?ak - (\\<Sum>x\\<in>{column i (fst (QR_decomposition A))|i. i < k}. (x \\<bullet> ?ak / (x \\<bullet> x)) *\\<^sub>R x)\n    = ?ak - (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}. (((x \\<bullet> ?ak)) / (x \\<bullet> x)) *\\<^sub>R x)\""], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n  (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. column k A -\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n    column k A -\n    (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "by auto"], ["proof (state)\nthis:\n  column k A -\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n  column k A -\n  (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    column k A -\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "also"], ["proof (state)\nthis:\n  column k A -\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n  column k A -\n  (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    column k A -\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "have \"... = ?uk\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column k A -\n    (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n    column k (Gram_Schmidt_matrix A)", "using column_Gram_Schmidt_matrix[of k A]"], ["proof (prove)\nusing this:\n  column k (Gram_Schmidt_matrix A) =\n  column k A -\n  (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. column k A -\n    (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n    column k (Gram_Schmidt_matrix A)", "by auto"], ["proof (state)\nthis:\n  column k A -\n  (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n  column k (Gram_Schmidt_matrix A)\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    column k A -\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "finally"], ["proof (chain)\npicking this:\n  column k A -\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n  column k (Gram_Schmidt_matrix A)", "show ?thesis"], ["proof (prove)\nusing this:\n  column k A -\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n  column k (Gram_Schmidt_matrix A)\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    column k A -\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", ".."], ["proof (state)\nthis:\n  column k (Gram_Schmidt_matrix A) =\n  column k A -\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma column_QR_decomposition':\n  fixes A::\"real^'n::{mod_type}^'m::{mod_type}\"\n  assumes r: \"rank A = ncols A\"\n  shows \"(column k A) = column k ((Gram_Schmidt_matrix A)) \n  + (\\<Sum>x\\<in>{column i (fst (QR_decomposition A))|i. i < k}. (x \\<bullet> (column k A) / (x \\<bullet> x)) *\\<^sub>R x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column k A =\n    column k (Gram_Schmidt_matrix A) +\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "using column_QR_decomposition[OF r]"], ["proof (prove)\nusing this:\n  column ?k (Gram_Schmidt_matrix A) =\n  column ?k A -\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < ?k}.\n     (x \\<bullet> column ?k A / (x \\<bullet> x)) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. column k A =\n    column k (Gram_Schmidt_matrix A) +\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "by simp"], ["", "lemma norm_uk_eq:\n  fixes A::\"real^'n::{mod_type}^'m::{mod_type}\"\n  assumes r: \"rank A = ncols A\"\n  shows \"norm (column k ((Gram_Schmidt_matrix A))) = ((column k (fst(QR_decomposition A))) \\<bullet> (column k A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (column k (Gram_Schmidt_matrix A)) =\n    column k (fst (QR_decomposition A)) \\<bullet> column k A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. norm (column k (Gram_Schmidt_matrix A)) =\n    column k (fst (QR_decomposition A)) \\<bullet> column k A", "let ?uk=\"column k ((Gram_Schmidt_matrix A))\""], ["proof (state)\ngoal (1 subgoal):\n 1. norm (column k (Gram_Schmidt_matrix A)) =\n    column k (fst (QR_decomposition A)) \\<bullet> column k A", "let ?qk=\"column k (fst(QR_decomposition A))\""], ["proof (state)\ngoal (1 subgoal):\n 1. norm (column k (Gram_Schmidt_matrix A)) =\n    column k (fst (QR_decomposition A)) \\<bullet> column k A", "let ?ak=\"(column k A)\""], ["proof (state)\ngoal (1 subgoal):\n 1. norm (column k (Gram_Schmidt_matrix A)) =\n    column k (fst (QR_decomposition A)) \\<bullet> column k A", "have sum_rw: \"(?uk \\<bullet> (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}. (x \\<bullet> ?ak / (x \\<bullet> x)) *\\<^sub>R x)) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) \\<bullet>\n    (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n    0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) \\<bullet>\n    (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n    0", "have \"(?uk \\<bullet> (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}. (x \\<bullet> ?ak / (x \\<bullet> x)) *\\<^sub>R x))\n      = ((\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}. ?uk \\<bullet> ((x \\<bullet> ?ak / (x \\<bullet> x)) *\\<^sub>R x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) \\<bullet>\n    (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n    (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n       column k (Gram_Schmidt_matrix A) \\<bullet>\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "unfolding inner_sum_right"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n       column k (Gram_Schmidt_matrix A) \\<bullet>\n       (y \\<bullet> column k A / (y \\<bullet> y)) *\\<^sub>R y) =\n    (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n       column k (Gram_Schmidt_matrix A) \\<bullet>\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", ".."], ["proof (state)\nthis:\n  column k (Gram_Schmidt_matrix A) \\<bullet>\n  (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n  (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n     column k (Gram_Schmidt_matrix A) \\<bullet>\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) \\<bullet>\n    (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n    0", "also"], ["proof (state)\nthis:\n  column k (Gram_Schmidt_matrix A) \\<bullet>\n  (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n  (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n     column k (Gram_Schmidt_matrix A) \\<bullet>\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) \\<bullet>\n    (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n    0", "have \"... = (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}. ((x \\<bullet> ?ak / (x \\<bullet> x)) * (?uk \\<bullet> x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n       column k (Gram_Schmidt_matrix A) \\<bullet>\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n    (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n       x \\<bullet> column k A / (x \\<bullet> x) *\n       (column k (Gram_Schmidt_matrix A) \\<bullet> x))", "unfolding inner_scaleR_right"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n       x \\<bullet> column k A / (x \\<bullet> x) *\n       (column k (Gram_Schmidt_matrix A) \\<bullet> x)) =\n    (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n       x \\<bullet> column k A / (x \\<bullet> x) *\n       (column k (Gram_Schmidt_matrix A) \\<bullet> x))", ".."], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n     column k (Gram_Schmidt_matrix A) \\<bullet>\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n  (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n     x \\<bullet> column k A / (x \\<bullet> x) *\n     (column k (Gram_Schmidt_matrix A) \\<bullet> x))\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) \\<bullet>\n    (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n    0", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n     column k (Gram_Schmidt_matrix A) \\<bullet>\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n  (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n     x \\<bullet> column k A / (x \\<bullet> x) *\n     (column k (Gram_Schmidt_matrix A) \\<bullet> x))\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) \\<bullet>\n    (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n    0", "have \"... = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n       x \\<bullet> column k A / (x \\<bullet> x) *\n       (column k (Gram_Schmidt_matrix A) \\<bullet> x)) =\n    0", "proof (rule sum.neutral, clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x i.\n       i < k \\<Longrightarrow>\n       column i (Gram_Schmidt_matrix A) \\<bullet> column k A /\n       (column i (Gram_Schmidt_matrix A) \\<bullet>\n        column i (Gram_Schmidt_matrix A)) *\n       (column k (Gram_Schmidt_matrix A) \\<bullet>\n        column i (Gram_Schmidt_matrix A)) =\n       0", "fix x i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x i.\n       i < k \\<Longrightarrow>\n       column i (Gram_Schmidt_matrix A) \\<bullet> column k A /\n       (column i (Gram_Schmidt_matrix A) \\<bullet>\n        column i (Gram_Schmidt_matrix A)) *\n       (column k (Gram_Schmidt_matrix A) \\<bullet>\n        column i (Gram_Schmidt_matrix A)) =\n       0", "assume \"i<k\""], ["proof (state)\nthis:\n  i < k\n\ngoal (1 subgoal):\n 1. \\<And>x i.\n       i < k \\<Longrightarrow>\n       column i (Gram_Schmidt_matrix A) \\<bullet> column k A /\n       (column i (Gram_Schmidt_matrix A) \\<bullet>\n        column i (Gram_Schmidt_matrix A)) *\n       (column k (Gram_Schmidt_matrix A) \\<bullet>\n        column i (Gram_Schmidt_matrix A)) =\n       0", "hence \"?uk \\<bullet> column i (Gram_Schmidt_matrix A) = 0\""], ["proof (prove)\nusing this:\n  i < k\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) \\<bullet>\n    column i (Gram_Schmidt_matrix A) =\n    0", "by (metis less_irrefl r scaleR_columns_Gram_Schmidt_matrix)"], ["proof (state)\nthis:\n  column k (Gram_Schmidt_matrix A) \\<bullet>\n  column i (Gram_Schmidt_matrix A) =\n  0\n\ngoal (1 subgoal):\n 1. \\<And>x i.\n       i < k \\<Longrightarrow>\n       column i (Gram_Schmidt_matrix A) \\<bullet> column k A /\n       (column i (Gram_Schmidt_matrix A) \\<bullet>\n        column i (Gram_Schmidt_matrix A)) *\n       (column k (Gram_Schmidt_matrix A) \\<bullet>\n        column i (Gram_Schmidt_matrix A)) =\n       0", "thus \"column i (Gram_Schmidt_matrix A) \\<bullet> ?ak / (column i (Gram_Schmidt_matrix A) \\<bullet> column i (Gram_Schmidt_matrix A)) *\n        (?uk \\<bullet> column i (Gram_Schmidt_matrix A)) = 0\""], ["proof (prove)\nusing this:\n  column k (Gram_Schmidt_matrix A) \\<bullet>\n  column i (Gram_Schmidt_matrix A) =\n  0\n\ngoal (1 subgoal):\n 1. column i (Gram_Schmidt_matrix A) \\<bullet> column k A /\n    (column i (Gram_Schmidt_matrix A) \\<bullet>\n     column i (Gram_Schmidt_matrix A)) *\n    (column k (Gram_Schmidt_matrix A) \\<bullet>\n     column i (Gram_Schmidt_matrix A)) =\n    0", "by auto"], ["proof (state)\nthis:\n  column i (Gram_Schmidt_matrix A) \\<bullet> column k A /\n  (column i (Gram_Schmidt_matrix A) \\<bullet>\n   column i (Gram_Schmidt_matrix A)) *\n  (column k (Gram_Schmidt_matrix A) \\<bullet>\n   column i (Gram_Schmidt_matrix A)) =\n  0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n     x \\<bullet> column k A / (x \\<bullet> x) *\n     (column k (Gram_Schmidt_matrix A) \\<bullet> x)) =\n  0\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) \\<bullet>\n    (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n    0", "finally"], ["proof (chain)\npicking this:\n  column k (Gram_Schmidt_matrix A) \\<bullet>\n  (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n  0", "show ?thesis"], ["proof (prove)\nusing this:\n  column k (Gram_Schmidt_matrix A) \\<bullet>\n  (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n  0\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) \\<bullet>\n    (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n    0", "."], ["proof (state)\nthis:\n  column k (Gram_Schmidt_matrix A) \\<bullet>\n  (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n  0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  column k (Gram_Schmidt_matrix A) \\<bullet>\n  (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n  0\n\ngoal (1 subgoal):\n 1. norm (column k (Gram_Schmidt_matrix A)) =\n    column k (fst (QR_decomposition A)) \\<bullet> column k A", "have \"?qk \\<bullet> ?ak = ((1/(norm ?uk)) *\\<^sub>R ?uk) \\<bullet> ?ak\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column k (fst (QR_decomposition A)) \\<bullet> column k A =\n    (1 / norm (column k (Gram_Schmidt_matrix A))) *\\<^sub>R\n    column k (Gram_Schmidt_matrix A) \\<bullet>\n    column k A", "unfolding qk_uk_norm"], ["proof (prove)\ngoal (1 subgoal):\n 1. column k (fst (QR_decomposition A)) \\<bullet> column k A =\n    column k (fst (QR_decomposition A)) \\<bullet> column k A", ".."], ["proof (state)\nthis:\n  column k (fst (QR_decomposition A)) \\<bullet> column k A =\n  (1 / norm (column k (Gram_Schmidt_matrix A))) *\\<^sub>R\n  column k (Gram_Schmidt_matrix A) \\<bullet>\n  column k A\n\ngoal (1 subgoal):\n 1. norm (column k (Gram_Schmidt_matrix A)) =\n    column k (fst (QR_decomposition A)) \\<bullet> column k A", "also"], ["proof (state)\nthis:\n  column k (fst (QR_decomposition A)) \\<bullet> column k A =\n  (1 / norm (column k (Gram_Schmidt_matrix A))) *\\<^sub>R\n  column k (Gram_Schmidt_matrix A) \\<bullet>\n  column k A\n\ngoal (1 subgoal):\n 1. norm (column k (Gram_Schmidt_matrix A)) =\n    column k (fst (QR_decomposition A)) \\<bullet> column k A", "have \"... = (1/(norm ?uk)) * (?uk \\<bullet> ?ak)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1 / norm (column k (Gram_Schmidt_matrix A))) *\\<^sub>R\n    column k (Gram_Schmidt_matrix A) \\<bullet>\n    column k A =\n    1 / norm (column k (Gram_Schmidt_matrix A)) *\n    (column k (Gram_Schmidt_matrix A) \\<bullet> column k A)", "unfolding inner_scaleR_left"], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 / norm (column k (Gram_Schmidt_matrix A)) *\n    (column k (Gram_Schmidt_matrix A) \\<bullet> column k A) =\n    1 / norm (column k (Gram_Schmidt_matrix A)) *\n    (column k (Gram_Schmidt_matrix A) \\<bullet> column k A)", ".."], ["proof (state)\nthis:\n  (1 / norm (column k (Gram_Schmidt_matrix A))) *\\<^sub>R\n  column k (Gram_Schmidt_matrix A) \\<bullet>\n  column k A =\n  1 / norm (column k (Gram_Schmidt_matrix A)) *\n  (column k (Gram_Schmidt_matrix A) \\<bullet> column k A)\n\ngoal (1 subgoal):\n 1. norm (column k (Gram_Schmidt_matrix A)) =\n    column k (fst (QR_decomposition A)) \\<bullet> column k A", "also"], ["proof (state)\nthis:\n  (1 / norm (column k (Gram_Schmidt_matrix A))) *\\<^sub>R\n  column k (Gram_Schmidt_matrix A) \\<bullet>\n  column k A =\n  1 / norm (column k (Gram_Schmidt_matrix A)) *\n  (column k (Gram_Schmidt_matrix A) \\<bullet> column k A)\n\ngoal (1 subgoal):\n 1. norm (column k (Gram_Schmidt_matrix A)) =\n    column k (fst (QR_decomposition A)) \\<bullet> column k A", "have \"... = \n    (1/(norm ?uk)) * (?uk \\<bullet> (?uk + (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}. (x \\<bullet> ?ak / (x \\<bullet> x)) *\\<^sub>R x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 / norm (column k (Gram_Schmidt_matrix A)) *\n    (column k (Gram_Schmidt_matrix A) \\<bullet> column k A) =\n    1 / norm (column k (Gram_Schmidt_matrix A)) *\n    (column k (Gram_Schmidt_matrix A) \\<bullet>\n     (column k (Gram_Schmidt_matrix A) +\n      (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n         (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)))", "using column_Gram_Schmidt_matrix2[of k A]"], ["proof (prove)\nusing this:\n  column k A =\n  column k (Gram_Schmidt_matrix A) +\n  (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. 1 / norm (column k (Gram_Schmidt_matrix A)) *\n    (column k (Gram_Schmidt_matrix A) \\<bullet> column k A) =\n    1 / norm (column k (Gram_Schmidt_matrix A)) *\n    (column k (Gram_Schmidt_matrix A) \\<bullet>\n     (column k (Gram_Schmidt_matrix A) +\n      (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n         (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)))", "by auto"], ["proof (state)\nthis:\n  1 / norm (column k (Gram_Schmidt_matrix A)) *\n  (column k (Gram_Schmidt_matrix A) \\<bullet> column k A) =\n  1 / norm (column k (Gram_Schmidt_matrix A)) *\n  (column k (Gram_Schmidt_matrix A) \\<bullet>\n   (column k (Gram_Schmidt_matrix A) +\n    (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)))\n\ngoal (1 subgoal):\n 1. norm (column k (Gram_Schmidt_matrix A)) =\n    column k (fst (QR_decomposition A)) \\<bullet> column k A", "also"], ["proof (state)\nthis:\n  1 / norm (column k (Gram_Schmidt_matrix A)) *\n  (column k (Gram_Schmidt_matrix A) \\<bullet> column k A) =\n  1 / norm (column k (Gram_Schmidt_matrix A)) *\n  (column k (Gram_Schmidt_matrix A) \\<bullet>\n   (column k (Gram_Schmidt_matrix A) +\n    (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)))\n\ngoal (1 subgoal):\n 1. norm (column k (Gram_Schmidt_matrix A)) =\n    column k (fst (QR_decomposition A)) \\<bullet> column k A", "have \"... = (1/(norm ?uk)) * ((?uk \\<bullet> ?uk) + (?uk \\<bullet> (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}. (x \\<bullet> ?ak / (x \\<bullet> x)) *\\<^sub>R x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 / norm (column k (Gram_Schmidt_matrix A)) *\n    (column k (Gram_Schmidt_matrix A) \\<bullet>\n     (column k (Gram_Schmidt_matrix A) +\n      (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n         (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x))) =\n    1 / norm (column k (Gram_Schmidt_matrix A)) *\n    (column k (Gram_Schmidt_matrix A) \\<bullet>\n     column k (Gram_Schmidt_matrix A) +\n     column k (Gram_Schmidt_matrix A) \\<bullet>\n     (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n        (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x))", "unfolding inner_add_right"], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 / norm (column k (Gram_Schmidt_matrix A)) *\n    (column k (Gram_Schmidt_matrix A) \\<bullet>\n     column k (Gram_Schmidt_matrix A) +\n     column k (Gram_Schmidt_matrix A) \\<bullet>\n     (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n        (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)) =\n    1 / norm (column k (Gram_Schmidt_matrix A)) *\n    (column k (Gram_Schmidt_matrix A) \\<bullet>\n     column k (Gram_Schmidt_matrix A) +\n     column k (Gram_Schmidt_matrix A) \\<bullet>\n     (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n        (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x))", ".."], ["proof (state)\nthis:\n  1 / norm (column k (Gram_Schmidt_matrix A)) *\n  (column k (Gram_Schmidt_matrix A) \\<bullet>\n   (column k (Gram_Schmidt_matrix A) +\n    (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x))) =\n  1 / norm (column k (Gram_Schmidt_matrix A)) *\n  (column k (Gram_Schmidt_matrix A) \\<bullet>\n   column k (Gram_Schmidt_matrix A) +\n   column k (Gram_Schmidt_matrix A) \\<bullet>\n   (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n      (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x))\n\ngoal (1 subgoal):\n 1. norm (column k (Gram_Schmidt_matrix A)) =\n    column k (fst (QR_decomposition A)) \\<bullet> column k A", "also"], ["proof (state)\nthis:\n  1 / norm (column k (Gram_Schmidt_matrix A)) *\n  (column k (Gram_Schmidt_matrix A) \\<bullet>\n   (column k (Gram_Schmidt_matrix A) +\n    (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x))) =\n  1 / norm (column k (Gram_Schmidt_matrix A)) *\n  (column k (Gram_Schmidt_matrix A) \\<bullet>\n   column k (Gram_Schmidt_matrix A) +\n   column k (Gram_Schmidt_matrix A) \\<bullet>\n   (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n      (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x))\n\ngoal (1 subgoal):\n 1. norm (column k (Gram_Schmidt_matrix A)) =\n    column k (fst (QR_decomposition A)) \\<bullet> column k A", "have \"... = (1/(norm ?uk)) * (?uk \\<bullet> ?uk)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 / norm (column k (Gram_Schmidt_matrix A)) *\n    (column k (Gram_Schmidt_matrix A) \\<bullet>\n     column k (Gram_Schmidt_matrix A) +\n     column k (Gram_Schmidt_matrix A) \\<bullet>\n     (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n        (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)) =\n    1 / norm (column k (Gram_Schmidt_matrix A)) *\n    (column k (Gram_Schmidt_matrix A) \\<bullet>\n     column k (Gram_Schmidt_matrix A))", "unfolding sum_rw"], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 / norm (column k (Gram_Schmidt_matrix A)) *\n    (column k (Gram_Schmidt_matrix A) \\<bullet>\n     column k (Gram_Schmidt_matrix A) +\n     0) =\n    1 / norm (column k (Gram_Schmidt_matrix A)) *\n    (column k (Gram_Schmidt_matrix A) \\<bullet>\n     column k (Gram_Schmidt_matrix A))", "by auto"], ["proof (state)\nthis:\n  1 / norm (column k (Gram_Schmidt_matrix A)) *\n  (column k (Gram_Schmidt_matrix A) \\<bullet>\n   column k (Gram_Schmidt_matrix A) +\n   column k (Gram_Schmidt_matrix A) \\<bullet>\n   (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n      (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)) =\n  1 / norm (column k (Gram_Schmidt_matrix A)) *\n  (column k (Gram_Schmidt_matrix A) \\<bullet>\n   column k (Gram_Schmidt_matrix A))\n\ngoal (1 subgoal):\n 1. norm (column k (Gram_Schmidt_matrix A)) =\n    column k (fst (QR_decomposition A)) \\<bullet> column k A", "also"], ["proof (state)\nthis:\n  1 / norm (column k (Gram_Schmidt_matrix A)) *\n  (column k (Gram_Schmidt_matrix A) \\<bullet>\n   column k (Gram_Schmidt_matrix A) +\n   column k (Gram_Schmidt_matrix A) \\<bullet>\n   (\\<Sum>x\\<in>{column i (Gram_Schmidt_matrix A) |i. i < k}.\n      (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)) =\n  1 / norm (column k (Gram_Schmidt_matrix A)) *\n  (column k (Gram_Schmidt_matrix A) \\<bullet>\n   column k (Gram_Schmidt_matrix A))\n\ngoal (1 subgoal):\n 1. norm (column k (Gram_Schmidt_matrix A)) =\n    column k (fst (QR_decomposition A)) \\<bullet> column k A", "have \"... = norm ?uk\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 / norm (column k (Gram_Schmidt_matrix A)) *\n    (column k (Gram_Schmidt_matrix A) \\<bullet>\n     column k (Gram_Schmidt_matrix A)) =\n    norm (column k (Gram_Schmidt_matrix A))", "by (metis abs_of_nonneg divide_eq_imp div_by_0 inner_commute inner_ge_zero inner_real_def \n      norm_mult_vec real_inner_1_right real_norm_def times_divide_eq_right)"], ["proof (state)\nthis:\n  1 / norm (column k (Gram_Schmidt_matrix A)) *\n  (column k (Gram_Schmidt_matrix A) \\<bullet>\n   column k (Gram_Schmidt_matrix A)) =\n  norm (column k (Gram_Schmidt_matrix A))\n\ngoal (1 subgoal):\n 1. norm (column k (Gram_Schmidt_matrix A)) =\n    column k (fst (QR_decomposition A)) \\<bullet> column k A", "finally"], ["proof (chain)\npicking this:\n  column k (fst (QR_decomposition A)) \\<bullet> column k A =\n  norm (column k (Gram_Schmidt_matrix A))", "show ?thesis"], ["proof (prove)\nusing this:\n  column k (fst (QR_decomposition A)) \\<bullet> column k A =\n  norm (column k (Gram_Schmidt_matrix A))\n\ngoal (1 subgoal):\n 1. norm (column k (Gram_Schmidt_matrix A)) =\n    column k (fst (QR_decomposition A)) \\<bullet> column k A", ".."], ["proof (state)\nthis:\n  norm (column k (Gram_Schmidt_matrix A)) =\n  column k (fst (QR_decomposition A)) \\<bullet> column k A\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary column_QR_decomposition2:\n  fixes A::\"real^'n::{mod_type}^'m::{mod_type}\"\n  assumes r: \"rank A = ncols A\"\n  shows \"(column k A) \n  = (\\<Sum>x\\<in>{column i (fst (QR_decomposition A))|i. i \\<le> k}. (x \\<bullet> (column k A)) *\\<^sub>R x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column k A =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> k}.\n       (x \\<bullet> column k A) *\\<^sub>R x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. column k A =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> k}.\n       (x \\<bullet> column k A) *\\<^sub>R x)", "let ?uk=\"column k ((Gram_Schmidt_matrix A))\""], ["proof (state)\ngoal (1 subgoal):\n 1. column k A =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> k}.\n       (x \\<bullet> column k A) *\\<^sub>R x)", "let ?qk=\"column k (fst(QR_decomposition A))\""], ["proof (state)\ngoal (1 subgoal):\n 1. column k A =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> k}.\n       (x \\<bullet> column k A) *\\<^sub>R x)", "let ?ak=\"(column k A)\""], ["proof (state)\ngoal (1 subgoal):\n 1. column k A =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> k}.\n       (x \\<bullet> column k A) *\\<^sub>R x)", "have set_rw: \"{column i (fst (QR_decomposition A))|i. i \\<le> k} \n    = insert (column k (fst (QR_decomposition A))) {column i (fst (QR_decomposition A))|i. i < k}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {column i (fst (QR_decomposition A)) |i. i \\<le> k} =\n    insert (column k (fst (QR_decomposition A)))\n     {column i (fst (QR_decomposition A)) |i. i < k}", "by (auto, metis less_linear not_less)"], ["proof (state)\nthis:\n  {column i (fst (QR_decomposition A)) |i. i \\<le> k} =\n  insert (column k (fst (QR_decomposition A)))\n   {column i (fst (QR_decomposition A)) |i. i < k}\n\ngoal (1 subgoal):\n 1. column k A =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> k}.\n       (x \\<bullet> column k A) *\\<^sub>R x)", "have uk_norm_uk_qk: \"?uk = norm ?uk *\\<^sub>R ?qk\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n    column k (fst (QR_decomposition A))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n    column k (fst (QR_decomposition A))", "have \"vec.independent (columns (Gram_Schmidt_matrix A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec.independent (columns (Gram_Schmidt_matrix A))", "by (metis full_rank_imp_is_basis2 independent_columns_Gram_Schmidt_matrix r)"], ["proof (state)\nthis:\n  vec.independent (columns (Gram_Schmidt_matrix A))\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n    column k (fst (QR_decomposition A))", "moreover"], ["proof (state)\nthis:\n  vec.independent (columns (Gram_Schmidt_matrix A))\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n    column k (fst (QR_decomposition A))", "have \"?uk \\<in> columns (Gram_Schmidt_matrix A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) \\<in> columns (Gram_Schmidt_matrix A)", "unfolding columns_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A)\n    \\<in> {column i (Gram_Schmidt_matrix A) |i. i \\<in> UNIV}", "by auto"], ["proof (state)\nthis:\n  column k (Gram_Schmidt_matrix A) \\<in> columns (Gram_Schmidt_matrix A)\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n    column k (fst (QR_decomposition A))", "ultimately"], ["proof (chain)\npicking this:\n  vec.independent (columns (Gram_Schmidt_matrix A))\n  column k (Gram_Schmidt_matrix A) \\<in> columns (Gram_Schmidt_matrix A)", "have \"?uk \\<noteq> 0\""], ["proof (prove)\nusing this:\n  vec.independent (columns (Gram_Schmidt_matrix A))\n  column k (Gram_Schmidt_matrix A) \\<in> columns (Gram_Schmidt_matrix A)\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) \\<noteq> 0", "using vec.dependent_zero[of \"columns (Gram_Schmidt_matrix A)\"]"], ["proof (prove)\nusing this:\n  vec.independent (columns (Gram_Schmidt_matrix A))\n  column k (Gram_Schmidt_matrix A) \\<in> columns (Gram_Schmidt_matrix A)\n  0 \\<in> columns (Gram_Schmidt_matrix A) \\<Longrightarrow>\n  vec.dependent (columns (Gram_Schmidt_matrix A))\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) \\<noteq> 0", "unfolding columns_def"], ["proof (prove)\nusing this:\n  vec.independent {column i (Gram_Schmidt_matrix A) |i. i \\<in> UNIV}\n  column k (Gram_Schmidt_matrix A)\n  \\<in> {column i (Gram_Schmidt_matrix A) |i. i \\<in> UNIV}\n  0 \\<in> {column i (Gram_Schmidt_matrix A) |i.\n           i \\<in> UNIV} \\<Longrightarrow>\n  vec.dependent {column i (Gram_Schmidt_matrix A) |i. i \\<in> UNIV}\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  column k (Gram_Schmidt_matrix A) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n    column k (fst (QR_decomposition A))", "hence norm_not_0: \"norm ?uk \\<noteq> 0\""], ["proof (prove)\nusing this:\n  column k (Gram_Schmidt_matrix A) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. norm (column k (Gram_Schmidt_matrix A)) \\<noteq> 0", "unfolding norm_eq_zero"], ["proof (prove)\nusing this:\n  column k (Gram_Schmidt_matrix A) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) \\<noteq> 0", "."], ["proof (state)\nthis:\n  norm (column k (Gram_Schmidt_matrix A)) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n    column k (fst (QR_decomposition A))", "have \"norm (?uk) *\\<^sub>R ?qk = (norm ?uk) *\\<^sub>R ((1 / norm ?uk) *\\<^sub>R ?uk)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n    column k (fst (QR_decomposition A)) =\n    norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n    (1 / norm (column k (Gram_Schmidt_matrix A))) *\\<^sub>R\n    column k (Gram_Schmidt_matrix A)", "using qk_uk_norm[of k A]"], ["proof (prove)\nusing this:\n  (1 / norm (column k (Gram_Schmidt_matrix A))) *\\<^sub>R\n  column k (Gram_Schmidt_matrix A) =\n  column k (fst (QR_decomposition A))\n\ngoal (1 subgoal):\n 1. norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n    column k (fst (QR_decomposition A)) =\n    norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n    (1 / norm (column k (Gram_Schmidt_matrix A))) *\\<^sub>R\n    column k (Gram_Schmidt_matrix A)", "by simp"], ["proof (state)\nthis:\n  norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n  column k (fst (QR_decomposition A)) =\n  norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n  (1 / norm (column k (Gram_Schmidt_matrix A))) *\\<^sub>R\n  column k (Gram_Schmidt_matrix A)\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n    column k (fst (QR_decomposition A))", "also"], ["proof (state)\nthis:\n  norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n  column k (fst (QR_decomposition A)) =\n  norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n  (1 / norm (column k (Gram_Schmidt_matrix A))) *\\<^sub>R\n  column k (Gram_Schmidt_matrix A)\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n    column k (fst (QR_decomposition A))", "have \"... = ((norm ?uk) * (1 / norm ?uk)) *\\<^sub>R ?uk\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n    (1 / norm (column k (Gram_Schmidt_matrix A))) *\\<^sub>R\n    column k (Gram_Schmidt_matrix A) =\n    (norm (column k (Gram_Schmidt_matrix A)) *\n     (1 / norm (column k (Gram_Schmidt_matrix A)))) *\\<^sub>R\n    column k (Gram_Schmidt_matrix A)", "unfolding scaleR_scaleR"], ["proof (prove)\ngoal (1 subgoal):\n 1. (norm (column k (Gram_Schmidt_matrix A)) *\n     (1 / norm (column k (Gram_Schmidt_matrix A)))) *\\<^sub>R\n    column k (Gram_Schmidt_matrix A) =\n    (norm (column k (Gram_Schmidt_matrix A)) *\n     (1 / norm (column k (Gram_Schmidt_matrix A)))) *\\<^sub>R\n    column k (Gram_Schmidt_matrix A)", ".."], ["proof (state)\nthis:\n  norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n  (1 / norm (column k (Gram_Schmidt_matrix A))) *\\<^sub>R\n  column k (Gram_Schmidt_matrix A) =\n  (norm (column k (Gram_Schmidt_matrix A)) *\n   (1 / norm (column k (Gram_Schmidt_matrix A)))) *\\<^sub>R\n  column k (Gram_Schmidt_matrix A)\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n    column k (fst (QR_decomposition A))", "also"], ["proof (state)\nthis:\n  norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n  (1 / norm (column k (Gram_Schmidt_matrix A))) *\\<^sub>R\n  column k (Gram_Schmidt_matrix A) =\n  (norm (column k (Gram_Schmidt_matrix A)) *\n   (1 / norm (column k (Gram_Schmidt_matrix A)))) *\\<^sub>R\n  column k (Gram_Schmidt_matrix A)\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n    column k (fst (QR_decomposition A))", "have \"... = ?uk\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (norm (column k (Gram_Schmidt_matrix A)) *\n     (1 / norm (column k (Gram_Schmidt_matrix A)))) *\\<^sub>R\n    column k (Gram_Schmidt_matrix A) =\n    column k (Gram_Schmidt_matrix A)", "using norm_not_0"], ["proof (prove)\nusing this:\n  norm (column k (Gram_Schmidt_matrix A)) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (norm (column k (Gram_Schmidt_matrix A)) *\n     (1 / norm (column k (Gram_Schmidt_matrix A)))) *\\<^sub>R\n    column k (Gram_Schmidt_matrix A) =\n    column k (Gram_Schmidt_matrix A)", "by auto"], ["proof (state)\nthis:\n  (norm (column k (Gram_Schmidt_matrix A)) *\n   (1 / norm (column k (Gram_Schmidt_matrix A)))) *\\<^sub>R\n  column k (Gram_Schmidt_matrix A) =\n  column k (Gram_Schmidt_matrix A)\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n    column k (fst (QR_decomposition A))", "finally"], ["proof (chain)\npicking this:\n  norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n  column k (fst (QR_decomposition A)) =\n  column k (Gram_Schmidt_matrix A)", "show ?thesis"], ["proof (prove)\nusing this:\n  norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n  column k (fst (QR_decomposition A)) =\n  column k (Gram_Schmidt_matrix A)\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) =\n    norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n    column k (fst (QR_decomposition A))", ".."], ["proof (state)\nthis:\n  column k (Gram_Schmidt_matrix A) =\n  norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n  column k (fst (QR_decomposition A))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  column k (Gram_Schmidt_matrix A) =\n  norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n  column k (fst (QR_decomposition A))\n\ngoal (1 subgoal):\n 1. column k A =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> k}.\n       (x \\<bullet> column k A) *\\<^sub>R x)", "have norm_qk_1: \"?qk  \\<bullet> ?qk = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column k (fst (QR_decomposition A)) \\<bullet>\n    column k (fst (QR_decomposition A)) =\n    1", "using norm_eq_1 norm_columns_fst_QR_decomposition[OF r]"], ["proof (prove)\nusing this:\n  (norm ?x = 1) = (?x \\<bullet> ?x = 1)\n  norm (column ?i (fst (QR_decomposition A))) = 1\n\ngoal (1 subgoal):\n 1. column k (fst (QR_decomposition A)) \\<bullet>\n    column k (fst (QR_decomposition A)) =\n    1", "by auto"], ["proof (state)\nthis:\n  column k (fst (QR_decomposition A)) \\<bullet>\n  column k (fst (QR_decomposition A)) =\n  1\n\ngoal (1 subgoal):\n 1. column k A =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> k}.\n       (x \\<bullet> column k A) *\\<^sub>R x)", "have \"?ak = ?uk + (\\<Sum>x\\<in>{column i (fst (QR_decomposition A))|i. i < k}. (x \\<bullet> ?ak / (x \\<bullet> x)) *\\<^sub>R x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column k A =\n    column k (Gram_Schmidt_matrix A) +\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "using column_QR_decomposition'[OF r]"], ["proof (prove)\nusing this:\n  column ?k A =\n  column ?k (Gram_Schmidt_matrix A) +\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < ?k}.\n     (x \\<bullet> column ?k A / (x \\<bullet> x)) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. column k A =\n    column k (Gram_Schmidt_matrix A) +\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "by auto"], ["proof (state)\nthis:\n  column k A =\n  column k (Gram_Schmidt_matrix A) +\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. column k A =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> k}.\n       (x \\<bullet> column k A) *\\<^sub>R x)", "also"], ["proof (state)\nthis:\n  column k A =\n  column k (Gram_Schmidt_matrix A) +\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. column k A =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> k}.\n       (x \\<bullet> column k A) *\\<^sub>R x)", "have \"... = (norm ?uk *\\<^sub>R ?qk)  + (\\<Sum>x\\<in>{column i (fst (QR_decomposition A))|i. i < k}. (x \\<bullet> ?ak / (x \\<bullet> x)) *\\<^sub>R x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) +\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n    norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n    column k (fst (QR_decomposition A)) +\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "using uk_norm_uk_qk"], ["proof (prove)\nusing this:\n  column k (Gram_Schmidt_matrix A) =\n  norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n  column k (fst (QR_decomposition A))\n\ngoal (1 subgoal):\n 1. column k (Gram_Schmidt_matrix A) +\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n    norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n    column k (fst (QR_decomposition A)) +\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "by simp"], ["proof (state)\nthis:\n  column k (Gram_Schmidt_matrix A) +\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n  norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n  column k (fst (QR_decomposition A)) +\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. column k A =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> k}.\n       (x \\<bullet> column k A) *\\<^sub>R x)", "also"], ["proof (state)\nthis:\n  column k (Gram_Schmidt_matrix A) +\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n  norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n  column k (fst (QR_decomposition A)) +\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. column k A =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> k}.\n       (x \\<bullet> column k A) *\\<^sub>R x)", "have \"... = ((?qk \\<bullet> ?ak) *\\<^sub>R ?qk)  \n    + (\\<Sum>x\\<in>{column i (fst (QR_decomposition A))|i. i < k}. (x \\<bullet> ?ak / (x \\<bullet> x)) *\\<^sub>R x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n    column k (fst (QR_decomposition A)) +\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n    (column k (fst (QR_decomposition A)) \\<bullet> column k A) *\\<^sub>R\n    column k (fst (QR_decomposition A)) +\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "unfolding norm_uk_eq[OF r]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (column k (fst (QR_decomposition A)) \\<bullet> column k A) *\\<^sub>R\n    column k (fst (QR_decomposition A)) +\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n    (column k (fst (QR_decomposition A)) \\<bullet> column k A) *\\<^sub>R\n    column k (fst (QR_decomposition A)) +\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", ".."], ["proof (state)\nthis:\n  norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n  column k (fst (QR_decomposition A)) +\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n  (column k (fst (QR_decomposition A)) \\<bullet> column k A) *\\<^sub>R\n  column k (fst (QR_decomposition A)) +\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. column k A =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> k}.\n       (x \\<bullet> column k A) *\\<^sub>R x)", "also"], ["proof (state)\nthis:\n  norm (column k (Gram_Schmidt_matrix A)) *\\<^sub>R\n  column k (fst (QR_decomposition A)) +\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n  (column k (fst (QR_decomposition A)) \\<bullet> column k A) *\\<^sub>R\n  column k (fst (QR_decomposition A)) +\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. column k A =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> k}.\n       (x \\<bullet> column k A) *\\<^sub>R x)", "have \"... = ((?qk \\<bullet> ?ak)/(?qk \\<bullet> ?qk)) *\\<^sub>R ?qk\n    + (\\<Sum>x\\<in>{column i (fst (QR_decomposition A))|i. i < k}. (x \\<bullet> ?ak / (x \\<bullet> x)) *\\<^sub>R x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (column k (fst (QR_decomposition A)) \\<bullet> column k A) *\\<^sub>R\n    column k (fst (QR_decomposition A)) +\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n    (column k (fst (QR_decomposition A)) \\<bullet> column k A /\n     (column k (fst (QR_decomposition A)) \\<bullet>\n      column k (fst (QR_decomposition A)))) *\\<^sub>R\n    column k (fst (QR_decomposition A)) +\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "using norm_qk_1"], ["proof (prove)\nusing this:\n  column k (fst (QR_decomposition A)) \\<bullet>\n  column k (fst (QR_decomposition A)) =\n  1\n\ngoal (1 subgoal):\n 1. (column k (fst (QR_decomposition A)) \\<bullet> column k A) *\\<^sub>R\n    column k (fst (QR_decomposition A)) +\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n    (column k (fst (QR_decomposition A)) \\<bullet> column k A /\n     (column k (fst (QR_decomposition A)) \\<bullet>\n      column k (fst (QR_decomposition A)))) *\\<^sub>R\n    column k (fst (QR_decomposition A)) +\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "by fastforce"], ["proof (state)\nthis:\n  (column k (fst (QR_decomposition A)) \\<bullet> column k A) *\\<^sub>R\n  column k (fst (QR_decomposition A)) +\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n  (column k (fst (QR_decomposition A)) \\<bullet> column k A /\n   (column k (fst (QR_decomposition A)) \\<bullet>\n    column k (fst (QR_decomposition A)))) *\\<^sub>R\n  column k (fst (QR_decomposition A)) +\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. column k A =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> k}.\n       (x \\<bullet> column k A) *\\<^sub>R x)", "also"], ["proof (state)\nthis:\n  (column k (fst (QR_decomposition A)) \\<bullet> column k A) *\\<^sub>R\n  column k (fst (QR_decomposition A)) +\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n  (column k (fst (QR_decomposition A)) \\<bullet> column k A /\n   (column k (fst (QR_decomposition A)) \\<bullet>\n    column k (fst (QR_decomposition A)))) *\\<^sub>R\n  column k (fst (QR_decomposition A)) +\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. column k A =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> k}.\n       (x \\<bullet> column k A) *\\<^sub>R x)", "have \"... = (\\<Sum>x\\<in>insert ?qk {column i (fst (QR_decomposition A))|i. i < k}. (x \\<bullet> ?ak / (x \\<bullet> x)) *\\<^sub>R x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (column k (fst (QR_decomposition A)) \\<bullet> column k A /\n     (column k (fst (QR_decomposition A)) \\<bullet>\n      column k (fst (QR_decomposition A)))) *\\<^sub>R\n    column k (fst (QR_decomposition A)) +\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n    (\\<Sum>x\\<in>insert (column k (fst (QR_decomposition A)))\n                  {column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)", "proof (rule sum.insert[symmetric])"], ["proof (state)\ngoal (2 subgoals):\n 1. finite {column i (fst (QR_decomposition A)) |i. i < k}\n 2. column k (fst (QR_decomposition A))\n    \\<notin> {column i (fst (QR_decomposition A)) |i. i < k}", "show \"finite {column i (fst (QR_decomposition A)) |i. i < k}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {column i (fst (QR_decomposition A)) |i. i < k}", "by simp"], ["proof (state)\nthis:\n  finite {column i (fst (QR_decomposition A)) |i. i < k}\n\ngoal (1 subgoal):\n 1. column k (fst (QR_decomposition A))\n    \\<notin> {column i (fst (QR_decomposition A)) |i. i < k}", "show \"column k (fst (QR_decomposition A)) \\<notin> {column i (fst (QR_decomposition A)) |i. i < k}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column k (fst (QR_decomposition A))\n    \\<notin> {column i (fst (QR_decomposition A)) |i. i < k}", "proof (rule ccontr, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>i.\n       column k (fst (QR_decomposition A)) =\n       column i (fst (QR_decomposition A)) \\<and>\n       i < k \\<Longrightarrow>\n    False", "assume \"\\<exists>i. column k (fst (QR_decomposition A)) = column i (fst (QR_decomposition A)) \\<and> i < k\""], ["proof (state)\nthis:\n  \\<exists>i.\n     column k (fst (QR_decomposition A)) =\n     column i (fst (QR_decomposition A)) \\<and>\n     i < k\n\ngoal (1 subgoal):\n 1. \\<exists>i.\n       column k (fst (QR_decomposition A)) =\n       column i (fst (QR_decomposition A)) \\<and>\n       i < k \\<Longrightarrow>\n    False", "from this"], ["proof (chain)\npicking this:\n  \\<exists>i.\n     column k (fst (QR_decomposition A)) =\n     column i (fst (QR_decomposition A)) \\<and>\n     i < k", "obtain i where col_eq: \"column k (fst (QR_decomposition A)) = column i (fst (QR_decomposition A))\"\n        and i_less_k: \"i < k\""], ["proof (prove)\nusing this:\n  \\<exists>i.\n     column k (fst (QR_decomposition A)) =\n     column i (fst (QR_decomposition A)) \\<and>\n     i < k\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>column k (fst (QR_decomposition A)) =\n                 column i (fst (QR_decomposition A));\n         i < k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  column k (fst (QR_decomposition A)) = column i (fst (QR_decomposition A))\n  i < k\n\ngoal (1 subgoal):\n 1. \\<exists>i.\n       column k (fst (QR_decomposition A)) =\n       column i (fst (QR_decomposition A)) \\<and>\n       i < k \\<Longrightarrow>\n    False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using column_eq_fst_QR_decomposition[OF r col_eq] i_less_k"], ["proof (prove)\nusing this:\n  k = i\n  i < k\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  column k (fst (QR_decomposition A))\n  \\<notin> {column i (fst (QR_decomposition A)) |i. i < k}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (column k (fst (QR_decomposition A)) \\<bullet> column k A /\n   (column k (fst (QR_decomposition A)) \\<bullet>\n    column k (fst (QR_decomposition A)))) *\\<^sub>R\n  column k (fst (QR_decomposition A)) +\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n  (\\<Sum>x\\<in>insert (column k (fst (QR_decomposition A)))\n                {column i (fst (QR_decomposition A)) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. column k A =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> k}.\n       (x \\<bullet> column k A) *\\<^sub>R x)", "also"], ["proof (state)\nthis:\n  (column k (fst (QR_decomposition A)) \\<bullet> column k A /\n   (column k (fst (QR_decomposition A)) \\<bullet>\n    column k (fst (QR_decomposition A)))) *\\<^sub>R\n  column k (fst (QR_decomposition A)) +\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n  (\\<Sum>x\\<in>insert (column k (fst (QR_decomposition A)))\n                {column i (fst (QR_decomposition A)) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. column k A =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> k}.\n       (x \\<bullet> column k A) *\\<^sub>R x)", "have \"... = (\\<Sum>x\\<in>{column i (fst (QR_decomposition A))|i. i \\<le> k}. (x \\<bullet> (column k A)) *\\<^sub>R x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>insert (column k (fst (QR_decomposition A)))\n                  {column i (fst (QR_decomposition A)) |i. i < k}.\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> k}.\n       (x \\<bullet> column k A) *\\<^sub>R x)", "proof (rule sum.cong, simp add: set_rw)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {column i (fst (QR_decomposition A)) |i.\n                i \\<le> k} \\<Longrightarrow>\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x =\n       (x \\<bullet> column k A) *\\<^sub>R x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {column i (fst (QR_decomposition A)) |i.\n                i \\<le> k} \\<Longrightarrow>\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x =\n       (x \\<bullet> column k A) *\\<^sub>R x", "assume x: \"x \\<in> {column i (fst (QR_decomposition A)) |i. i \\<le> k}\""], ["proof (state)\nthis:\n  x \\<in> {column i (fst (QR_decomposition A)) |i. i \\<le> k}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {column i (fst (QR_decomposition A)) |i.\n                i \\<le> k} \\<Longrightarrow>\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x =\n       (x \\<bullet> column k A) *\\<^sub>R x", "from this"], ["proof (chain)\npicking this:\n  x \\<in> {column i (fst (QR_decomposition A)) |i. i \\<le> k}", "obtain i where i: \"x=column i (fst (QR_decomposition A))\""], ["proof (prove)\nusing this:\n  x \\<in> {column i (fst (QR_decomposition A)) |i. i \\<le> k}\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        x = column i (fst (QR_decomposition A)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x = column i (fst (QR_decomposition A))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {column i (fst (QR_decomposition A)) |i.\n                i \\<le> k} \\<Longrightarrow>\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x =\n       (x \\<bullet> column k A) *\\<^sub>R x", "hence \"(x \\<bullet> x) = 1\""], ["proof (prove)\nusing this:\n  x = column i (fst (QR_decomposition A))\n\ngoal (1 subgoal):\n 1. x \\<bullet> x = 1", "using norm_eq_1 norm_columns_fst_QR_decomposition[OF r]"], ["proof (prove)\nusing this:\n  x = column i (fst (QR_decomposition A))\n  (norm ?x = 1) = (?x \\<bullet> ?x = 1)\n  norm (column ?i (fst (QR_decomposition A))) = 1\n\ngoal (1 subgoal):\n 1. x \\<bullet> x = 1", "by auto"], ["proof (state)\nthis:\n  x \\<bullet> x = 1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {column i (fst (QR_decomposition A)) |i.\n                i \\<le> k} \\<Longrightarrow>\n       (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x =\n       (x \\<bullet> column k A) *\\<^sub>R x", "thus \"(x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x = (x \\<bullet> column k A) *\\<^sub>R x\""], ["proof (prove)\nusing this:\n  x \\<bullet> x = 1\n\ngoal (1 subgoal):\n 1. (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x =\n    (x \\<bullet> column k A) *\\<^sub>R x", "by simp"], ["proof (state)\nthis:\n  (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x =\n  (x \\<bullet> column k A) *\\<^sub>R x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>insert (column k (fst (QR_decomposition A)))\n                {column i (fst (QR_decomposition A)) |i. i < k}.\n     (x \\<bullet> column k A / (x \\<bullet> x)) *\\<^sub>R x) =\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> k}.\n     (x \\<bullet> column k A) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. column k A =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> k}.\n       (x \\<bullet> column k A) *\\<^sub>R x)", "finally"], ["proof (chain)\npicking this:\n  column k A =\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> k}.\n     (x \\<bullet> column k A) *\\<^sub>R x)", "show ?thesis"], ["proof (prove)\nusing this:\n  column k A =\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> k}.\n     (x \\<bullet> column k A) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. column k A =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> k}.\n       (x \\<bullet> column k A) *\\<^sub>R x)", "."], ["proof (state)\nthis:\n  column k A =\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> k}.\n     (x \\<bullet> column k A) *\\<^sub>R x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma orthogonal_columns_fst_QR_decomposition:\n  assumes i_not_ia: \"(column i (fst (QR_decomposition A))) \\<noteq> (column ia (fst (QR_decomposition A)))\"\n  shows \"(column i (fst (QR_decomposition A)) \\<bullet> column ia (fst (QR_decomposition A))) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A)) \\<bullet>\n    column ia (fst (QR_decomposition A)) =\n    0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A)) \\<bullet>\n    column ia (fst (QR_decomposition A)) =\n    0", "have i: \"column i (fst (QR_decomposition A)) \\<in> columns (fst (QR_decomposition A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A))\n    \\<in> columns (fst (QR_decomposition A))", "unfolding columns_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A))\n    \\<in> {column i (fst (QR_decomposition A)) |i. i \\<in> UNIV}", "by auto"], ["proof (state)\nthis:\n  column i (fst (QR_decomposition A))\n  \\<in> columns (fst (QR_decomposition A))\n\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A)) \\<bullet>\n    column ia (fst (QR_decomposition A)) =\n    0", "have ia: \"column ia (fst (QR_decomposition A)) \\<in> columns (fst (QR_decomposition A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column ia (fst (QR_decomposition A))\n    \\<in> columns (fst (QR_decomposition A))", "unfolding columns_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. column ia (fst (QR_decomposition A))\n    \\<in> {column i (fst (QR_decomposition A)) |i. i \\<in> UNIV}", "by auto"], ["proof (state)\nthis:\n  column ia (fst (QR_decomposition A))\n  \\<in> columns (fst (QR_decomposition A))\n\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A)) \\<bullet>\n    column ia (fst (QR_decomposition A)) =\n    0", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A)) \\<bullet>\n    column ia (fst (QR_decomposition A)) =\n    0", "using orthogonal_fst_QR_decomposition[of A] i ia i_not_ia"], ["proof (prove)\nusing this:\n  pairwise orthogonal (columns (fst (QR_decomposition A)))\n  column i (fst (QR_decomposition A))\n  \\<in> columns (fst (QR_decomposition A))\n  column ia (fst (QR_decomposition A))\n  \\<in> columns (fst (QR_decomposition A))\n  column i (fst (QR_decomposition A)) \\<noteq>\n  column ia (fst (QR_decomposition A))\n\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A)) \\<bullet>\n    column ia (fst (QR_decomposition A)) =\n    0", "unfolding pairwise_def orthogonal_def"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>columns (fst (QR_decomposition A)).\n     \\<forall>y\\<in>columns (fst (QR_decomposition A)).\n        x \\<noteq> y \\<longrightarrow> x \\<bullet> y = 0\n  column i (fst (QR_decomposition A))\n  \\<in> columns (fst (QR_decomposition A))\n  column ia (fst (QR_decomposition A))\n  \\<in> columns (fst (QR_decomposition A))\n  column i (fst (QR_decomposition A)) \\<noteq>\n  column ia (fst (QR_decomposition A))\n\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A)) \\<bullet>\n    column ia (fst (QR_decomposition A)) =\n    0", "by auto"], ["proof (state)\nthis:\n  column i (fst (QR_decomposition A)) \\<bullet>\n  column ia (fst (QR_decomposition A)) =\n  0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma scaler_column_fst_QR_decomposition:\n  fixes A::\"real^'n::{mod_type}^'m::{mod_type}\"\n  assumes i: \"i>j\"\n  and r: \"rank A = ncols A\"\n  shows \"column i (fst (QR_decomposition A)) \\<bullet> column j A = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A)) \\<bullet> column j A = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A)) \\<bullet> column j A = 0", "have \"column i (fst(QR_decomposition A)) \\<bullet> column j A \n    = column i (fst (QR_decomposition A)) \\<bullet> (\\<Sum>x\\<in>{column i (fst (QR_decomposition A))|i. i \\<le> j}. (x \\<bullet> (column j A)) *\\<^sub>R x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A)) \\<bullet> column j A =\n    column i (fst (QR_decomposition A)) \\<bullet>\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> j}.\n       (x \\<bullet> column j A) *\\<^sub>R x)", "using column_QR_decomposition2[OF r]"], ["proof (prove)\nusing this:\n  column ?k A =\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> ?k}.\n     (x \\<bullet> column ?k A) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A)) \\<bullet> column j A =\n    column i (fst (QR_decomposition A)) \\<bullet>\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> j}.\n       (x \\<bullet> column j A) *\\<^sub>R x)", "by presburger"], ["proof (state)\nthis:\n  column i (fst (QR_decomposition A)) \\<bullet> column j A =\n  column i (fst (QR_decomposition A)) \\<bullet>\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> j}.\n     (x \\<bullet> column j A) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A)) \\<bullet> column j A = 0", "also"], ["proof (state)\nthis:\n  column i (fst (QR_decomposition A)) \\<bullet> column j A =\n  column i (fst (QR_decomposition A)) \\<bullet>\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> j}.\n     (x \\<bullet> column j A) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A)) \\<bullet> column j A = 0", "have \"... = (\\<Sum>x\\<in>{column i (fst (QR_decomposition A))|i. i \\<le> j}. \n    column i (fst (QR_decomposition A)) \\<bullet> (x \\<bullet> (column j A)) *\\<^sub>R x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A)) \\<bullet>\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> j}.\n       (x \\<bullet> column j A) *\\<^sub>R x) =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> j}.\n       column i (fst (QR_decomposition A)) \\<bullet>\n       (x \\<bullet> column j A) *\\<^sub>R x)", "unfolding real_inner_class.inner_sum_right"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> j}.\n       column i (fst (QR_decomposition A)) \\<bullet>\n       (y \\<bullet> column j A) *\\<^sub>R y) =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> j}.\n       column i (fst (QR_decomposition A)) \\<bullet>\n       (x \\<bullet> column j A) *\\<^sub>R x)", ".."], ["proof (state)\nthis:\n  column i (fst (QR_decomposition A)) \\<bullet>\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> j}.\n     (x \\<bullet> column j A) *\\<^sub>R x) =\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> j}.\n     column i (fst (QR_decomposition A)) \\<bullet>\n     (x \\<bullet> column j A) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A)) \\<bullet> column j A = 0", "also"], ["proof (state)\nthis:\n  column i (fst (QR_decomposition A)) \\<bullet>\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> j}.\n     (x \\<bullet> column j A) *\\<^sub>R x) =\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> j}.\n     column i (fst (QR_decomposition A)) \\<bullet>\n     (x \\<bullet> column j A) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A)) \\<bullet> column j A = 0", "have \"... = (\\<Sum>x\\<in>{column i (fst (QR_decomposition A))|i. i \\<le> j}. \n    (x \\<bullet> (column j A)) *(column i (fst (QR_decomposition A)) \\<bullet> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> j}.\n       column i (fst (QR_decomposition A)) \\<bullet>\n       (x \\<bullet> column j A) *\\<^sub>R x) =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> j}.\n       x \\<bullet> column j A *\n       (column i (fst (QR_decomposition A)) \\<bullet> x))", "unfolding real_inner_class.inner_scaleR_right"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> j}.\n       x \\<bullet> column j A *\n       (column i (fst (QR_decomposition A)) \\<bullet> x)) =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> j}.\n       x \\<bullet> column j A *\n       (column i (fst (QR_decomposition A)) \\<bullet> x))", ".."], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> j}.\n     column i (fst (QR_decomposition A)) \\<bullet>\n     (x \\<bullet> column j A) *\\<^sub>R x) =\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> j}.\n     x \\<bullet> column j A *\n     (column i (fst (QR_decomposition A)) \\<bullet> x))\n\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A)) \\<bullet> column j A = 0", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> j}.\n     column i (fst (QR_decomposition A)) \\<bullet>\n     (x \\<bullet> column j A) *\\<^sub>R x) =\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> j}.\n     x \\<bullet> column j A *\n     (column i (fst (QR_decomposition A)) \\<bullet> x))\n\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A)) \\<bullet> column j A = 0", "have \"... = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> j}.\n       x \\<bullet> column j A *\n       (column i (fst (QR_decomposition A)) \\<bullet> x)) =\n    0", "proof (rule sum.neutral, clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x ia.\n       ia \\<le> j \\<Longrightarrow>\n       column ia (fst (QR_decomposition A)) \\<bullet> column j A *\n       (column i (fst (QR_decomposition A)) \\<bullet>\n        column ia (fst (QR_decomposition A))) =\n       0", "fix ia"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x ia.\n       ia \\<le> j \\<Longrightarrow>\n       column ia (fst (QR_decomposition A)) \\<bullet> column j A *\n       (column i (fst (QR_decomposition A)) \\<bullet>\n        column ia (fst (QR_decomposition A))) =\n       0", "assume ia: \"ia \\<le> j\""], ["proof (state)\nthis:\n  ia \\<le> j\n\ngoal (1 subgoal):\n 1. \\<And>x ia.\n       ia \\<le> j \\<Longrightarrow>\n       column ia (fst (QR_decomposition A)) \\<bullet> column j A *\n       (column i (fst (QR_decomposition A)) \\<bullet>\n        column ia (fst (QR_decomposition A))) =\n       0", "have i_not_ia: \"i \\<noteq> ia\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<noteq> ia", "using i ia"], ["proof (prove)\nusing this:\n  j < i\n  ia \\<le> j\n\ngoal (1 subgoal):\n 1. i \\<noteq> ia", "by simp"], ["proof (state)\nthis:\n  i \\<noteq> ia\n\ngoal (1 subgoal):\n 1. \\<And>x ia.\n       ia \\<le> j \\<Longrightarrow>\n       column ia (fst (QR_decomposition A)) \\<bullet> column j A *\n       (column i (fst (QR_decomposition A)) \\<bullet>\n        column ia (fst (QR_decomposition A))) =\n       0", "hence \"(column i (fst (QR_decomposition A)) \\<noteq> column ia (fst (QR_decomposition A)))\""], ["proof (prove)\nusing this:\n  i \\<noteq> ia\n\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A)) \\<noteq>\n    column ia (fst (QR_decomposition A))", "by (metis column_eq_fst_QR_decomposition r)"], ["proof (state)\nthis:\n  column i (fst (QR_decomposition A)) \\<noteq>\n  column ia (fst (QR_decomposition A))\n\ngoal (1 subgoal):\n 1. \\<And>x ia.\n       ia \\<le> j \\<Longrightarrow>\n       column ia (fst (QR_decomposition A)) \\<bullet> column j A *\n       (column i (fst (QR_decomposition A)) \\<bullet>\n        column ia (fst (QR_decomposition A))) =\n       0", "hence \"(column i (fst (QR_decomposition A)) \\<bullet> column ia (fst (QR_decomposition A))) = 0\""], ["proof (prove)\nusing this:\n  column i (fst (QR_decomposition A)) \\<noteq>\n  column ia (fst (QR_decomposition A))\n\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A)) \\<bullet>\n    column ia (fst (QR_decomposition A)) =\n    0", "by (rule orthogonal_columns_fst_QR_decomposition)"], ["proof (state)\nthis:\n  column i (fst (QR_decomposition A)) \\<bullet>\n  column ia (fst (QR_decomposition A)) =\n  0\n\ngoal (1 subgoal):\n 1. \\<And>x ia.\n       ia \\<le> j \\<Longrightarrow>\n       column ia (fst (QR_decomposition A)) \\<bullet> column j A *\n       (column i (fst (QR_decomposition A)) \\<bullet>\n        column ia (fst (QR_decomposition A))) =\n       0", "thus \"column ia (fst (QR_decomposition A)) \\<bullet> column j A * (column i (fst (QR_decomposition A)) \\<bullet> column ia (fst (QR_decomposition A))) = 0\""], ["proof (prove)\nusing this:\n  column i (fst (QR_decomposition A)) \\<bullet>\n  column ia (fst (QR_decomposition A)) =\n  0\n\ngoal (1 subgoal):\n 1. column ia (fst (QR_decomposition A)) \\<bullet> column j A *\n    (column i (fst (QR_decomposition A)) \\<bullet>\n     column ia (fst (QR_decomposition A))) =\n    0", "by auto"], ["proof (state)\nthis:\n  column ia (fst (QR_decomposition A)) \\<bullet> column j A *\n  (column i (fst (QR_decomposition A)) \\<bullet>\n   column ia (fst (QR_decomposition A))) =\n  0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> j}.\n     x \\<bullet> column j A *\n     (column i (fst (QR_decomposition A)) \\<bullet> x)) =\n  0\n\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A)) \\<bullet> column j A = 0", "finally"], ["proof (chain)\npicking this:\n  column i (fst (QR_decomposition A)) \\<bullet> column j A = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  column i (fst (QR_decomposition A)) \\<bullet> column j A = 0\n\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A)) \\<bullet> column j A = 0", "."], ["proof (state)\nthis:\n  column i (fst (QR_decomposition A)) \\<bullet> column j A = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma R_Qi_Aj:\n  fixes A::\"real^'n::{mod_type}^'m::{mod_type}\"\n  shows \"(snd (QR_decomposition A)) $ i $ j = column i (fst (QR_decomposition A)) \\<bullet> column j A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (QR_decomposition A) $ i $ j =\n    column i (fst (QR_decomposition A)) \\<bullet> column j A", "unfolding QR_decomposition_def Let_def snd_conv matrix_matrix_mult_inner_mult"], ["proof (prove)\ngoal (1 subgoal):\n 1. row i\n     (Finite_Cartesian_Product.transpose\n       (divide_by_norm (Gram_Schmidt_matrix A))) \\<bullet>\n    column j A =\n    column i\n     (fst (divide_by_norm (Gram_Schmidt_matrix A),\n           Finite_Cartesian_Product.transpose\n            (divide_by_norm (Gram_Schmidt_matrix A)) **\n           A)) \\<bullet>\n    column j A", "unfolding row_transpose"], ["proof (prove)\ngoal (1 subgoal):\n 1. column i (divide_by_norm (Gram_Schmidt_matrix A)) \\<bullet> column j A =\n    column i\n     (fst (divide_by_norm (Gram_Schmidt_matrix A),\n           Finite_Cartesian_Product.transpose\n            (divide_by_norm (Gram_Schmidt_matrix A)) **\n           A)) \\<bullet>\n    column j A", "by auto"], ["", "lemma sums_columns_Q_0:\n  fixes A::\"real^'n::{mod_type}^'m::{mod_type}\"\n  assumes r: \"rank A = ncols A\"\n  shows \"(\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i>b}. x \\<bullet> column b A * x $ a) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. b < i}.\n       x \\<bullet> column b A * x $ a) =\n    0", "proof (rule sum.neutral, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>b < i;\n        column i (fst (QR_decomposition A)) $ a \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> column i (fst (QR_decomposition A)) \\<bullet>\n                         column b A =\n                         0", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>b < i;\n        column i (fst (QR_decomposition A)) $ a \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> column i (fst (QR_decomposition A)) \\<bullet>\n                         column b A =\n                         0", "assume \"b<i\""], ["proof (state)\nthis:\n  b < i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>b < i;\n        column i (fst (QR_decomposition A)) $ a \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> column i (fst (QR_decomposition A)) \\<bullet>\n                         column b A =\n                         0", "thus \"column i (fst (QR_decomposition A)) \\<bullet> column b A = 0\""], ["proof (prove)\nusing this:\n  b < i\n\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A)) \\<bullet> column b A = 0", "by (rule scaler_column_fst_QR_decomposition, simp add: r)"], ["proof (state)\nthis:\n  column i (fst (QR_decomposition A)) \\<bullet> column b A = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma QR_decomposition_mult:\n  fixes A::\"real^'n::{mod_type}^'m::{mod_type}\"\n  assumes r: \"rank A = ncols A\"\n  shows \"A = (fst (QR_decomposition A)) ** (snd (QR_decomposition A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = fst (QR_decomposition A) ** snd (QR_decomposition A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A = fst (QR_decomposition A) ** snd (QR_decomposition A)", "have \"\\<forall>b. column b A = column b ((fst (QR_decomposition A)) ** (snd (QR_decomposition A)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>b.\n       column b A =\n       column b (fst (QR_decomposition A) ** snd (QR_decomposition A))", "proof (clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b.\n       column b A =\n       column b (fst (QR_decomposition A) ** snd (QR_decomposition A))", "fix b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b.\n       column b A =\n       column b (fst (QR_decomposition A) ** snd (QR_decomposition A))", "have \"(fst (QR_decomposition A) ** snd (QR_decomposition A))  \n      =  (\\<chi> i j. \\<Sum>k\\<in>UNIV. fst (QR_decomposition A) $ i $ k * (column k (fst (QR_decomposition A)) \\<bullet> column j A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (QR_decomposition A) ** snd (QR_decomposition A) =\n    (\\<chi>i j.\n        \\<Sum>k\\<in>UNIV.\n          fst (QR_decomposition A) $ i $ k *\n          (column k (fst (QR_decomposition A)) \\<bullet> column j A))", "unfolding matrix_matrix_mult_def R_Qi_Aj"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>i j.\n        \\<Sum>k\\<in>UNIV.\n          fst (QR_decomposition A) $ i $ k *\n          (column k (fst (QR_decomposition A)) \\<bullet> column j A)) =\n    (\\<chi>i j.\n        \\<Sum>k\\<in>UNIV.\n          fst (QR_decomposition A) $ i $ k *\n          (column k (fst (QR_decomposition A)) \\<bullet> column j A))", "by auto"], ["proof (state)\nthis:\n  fst (QR_decomposition A) ** snd (QR_decomposition A) =\n  (\\<chi>i j.\n      \\<Sum>k\\<in>UNIV.\n        fst (QR_decomposition A) $ i $ k *\n        (column k (fst (QR_decomposition A)) \\<bullet> column j A))\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       column b A =\n       column b (fst (QR_decomposition A) ** snd (QR_decomposition A))", "hence \"column b ((fst (QR_decomposition A) ** snd (QR_decomposition A))) = \n      column b ((\\<chi> i j. \\<Sum>k\\<in>UNIV. fst (QR_decomposition A) $ i $ k * (column k (fst (QR_decomposition A)) \\<bullet> column j A)))\""], ["proof (prove)\nusing this:\n  fst (QR_decomposition A) ** snd (QR_decomposition A) =\n  (\\<chi>i j.\n      \\<Sum>k\\<in>UNIV.\n        fst (QR_decomposition A) $ i $ k *\n        (column k (fst (QR_decomposition A)) \\<bullet> column j A))\n\ngoal (1 subgoal):\n 1. column b (fst (QR_decomposition A) ** snd (QR_decomposition A)) =\n    column b\n     (\\<chi>i j.\n         \\<Sum>k\\<in>UNIV.\n           fst (QR_decomposition A) $ i $ k *\n           (column k (fst (QR_decomposition A)) \\<bullet> column j A))", "by auto"], ["proof (state)\nthis:\n  column b (fst (QR_decomposition A) ** snd (QR_decomposition A)) =\n  column b\n   (\\<chi>i j.\n       \\<Sum>k\\<in>UNIV.\n         fst (QR_decomposition A) $ i $ k *\n         (column k (fst (QR_decomposition A)) \\<bullet> column j A))\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       column b A =\n       column b (fst (QR_decomposition A) ** snd (QR_decomposition A))", "also"], ["proof (state)\nthis:\n  column b (fst (QR_decomposition A) ** snd (QR_decomposition A)) =\n  column b\n   (\\<chi>i j.\n       \\<Sum>k\\<in>UNIV.\n         fst (QR_decomposition A) $ i $ k *\n         (column k (fst (QR_decomposition A)) \\<bullet> column j A))\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       column b A =\n       column b (fst (QR_decomposition A) ** snd (QR_decomposition A))", "have \"... = (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}. (x \\<bullet> column b A) *\\<^sub>R x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column b\n     (\\<chi>i j.\n         \\<Sum>k\\<in>UNIV.\n           fst (QR_decomposition A) $ i $ k *\n           (column k (fst (QR_decomposition A)) \\<bullet> column j A)) =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n       (x \\<bullet> column b A) *\\<^sub>R x)", "proof (subst column_def, subst vec_eq_iff, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (\\<Sum>k\\<in>UNIV.\n          fst (QR_decomposition A) $ i $ k *\n          (column k (fst (QR_decomposition A)) \\<bullet> column b A)) =\n       (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n          x \\<bullet> column b A * x $ i)", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (\\<Sum>k\\<in>UNIV.\n          fst (QR_decomposition A) $ i $ k *\n          (column k (fst (QR_decomposition A)) \\<bullet> column b A)) =\n       (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n          x \\<bullet> column b A * x $ i)", "define f where \"f i = column i (fst (QR_decomposition A))\" for i"], ["proof (state)\nthis:\n  f ?i = column ?i (fst (QR_decomposition A))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       (\\<Sum>k\\<in>UNIV.\n          fst (QR_decomposition A) $ i $ k *\n          (column k (fst (QR_decomposition A)) \\<bullet> column b A)) =\n       (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n          x \\<bullet> column b A * x $ i)", "define g where \"g x = (THE i. x = column i (fst (QR_decomposition A)))\" for x"], ["proof (state)\nthis:\n  g ?x = (THE i. ?x = column i (fst (QR_decomposition A)))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       (\\<Sum>k\\<in>UNIV.\n          fst (QR_decomposition A) $ i $ k *\n          (column k (fst (QR_decomposition A)) \\<bullet> column b A)) =\n       (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n          x \\<bullet> column b A * x $ i)", "have f_eq: \"f`UNIV = {column i (fst (QR_decomposition A)) |i. i\\<in>UNIV}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. range f = {column i (fst (QR_decomposition A)) |i. i \\<in> UNIV}", "unfolding f_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. range (\\<lambda>i. column i (fst (QR_decomposition A))) =\n    {column i (fst (QR_decomposition A)) |i. i \\<in> UNIV}", "by auto"], ["proof (state)\nthis:\n  range f = {column i (fst (QR_decomposition A)) |i. i \\<in> UNIV}\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       (\\<Sum>k\\<in>UNIV.\n          fst (QR_decomposition A) $ i $ k *\n          (column k (fst (QR_decomposition A)) \\<bullet> column b A)) =\n       (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n          x \\<bullet> column b A * x $ i)", "have inj_f: \"inj f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj f", "by (metis inj_on_def f_def column_eq_fst_QR_decomposition r)"], ["proof (state)\nthis:\n  inj f\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       (\\<Sum>k\\<in>UNIV.\n          fst (QR_decomposition A) $ i $ k *\n          (column k (fst (QR_decomposition A)) \\<bullet> column b A)) =\n       (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n          x \\<bullet> column b A * x $ i)", "have \"(\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}. x \\<bullet> column b A * x $ a) \n        = (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i\\<in>UNIV}. x \\<bullet> column b A * x $ a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n       x \\<bullet> column b A * x $ a) =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<in> UNIV}.\n       x \\<bullet> column b A * x $ a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n       x \\<bullet> column b A * x $ a) =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<in> UNIV}.\n       x \\<bullet> column b A * x $ a)", "let ?c= \"{column i (fst (QR_decomposition A)) |i. i\\<in>UNIV}\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n       x \\<bullet> column b A * x $ a) =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<in> UNIV}.\n       x \\<bullet> column b A * x $ a)", "let ?d= \"{column i (fst (QR_decomposition A)) |i. i\\<le>b}\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n       x \\<bullet> column b A * x $ a) =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<in> UNIV}.\n       x \\<bullet> column b A * x $ a)", "let ?f = \"{column i (fst (QR_decomposition A)) |i. i>b}\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n       x \\<bullet> column b A * x $ a) =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<in> UNIV}.\n       x \\<bullet> column b A * x $ a)", "have set_rw: \"?c = ?d \\<union> ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {column i (fst (QR_decomposition A)) |i. i \\<in> UNIV} =\n    {column i (fst (QR_decomposition A)) |i. i \\<le> b} \\<union>\n    {column i (fst (QR_decomposition A)) |i. b < i}", "by force"], ["proof (state)\nthis:\n  {column i (fst (QR_decomposition A)) |i. i \\<in> UNIV} =\n  {column i (fst (QR_decomposition A)) |i. i \\<le> b} \\<union>\n  {column i (fst (QR_decomposition A)) |i. b < i}\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n       x \\<bullet> column b A * x $ a) =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<in> UNIV}.\n       x \\<bullet> column b A * x $ a)", "have \"(\\<Sum>x\\<in>?c. x \\<bullet> column b A * x $ a) \n          = (\\<Sum>x\\<in>(?d \\<union> ?f). x \\<bullet> column b A * x $ a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<in> UNIV}.\n       x \\<bullet> column b A * x $ a) =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i.\n                  i \\<le> b} \\<union>\n                 {column i (fst (QR_decomposition A)) |i. b < i}.\n       x \\<bullet> column b A * x $ a)", "using set_rw"], ["proof (prove)\nusing this:\n  {column i (fst (QR_decomposition A)) |i. i \\<in> UNIV} =\n  {column i (fst (QR_decomposition A)) |i. i \\<le> b} \\<union>\n  {column i (fst (QR_decomposition A)) |i. b < i}\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<in> UNIV}.\n       x \\<bullet> column b A * x $ a) =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i.\n                  i \\<le> b} \\<union>\n                 {column i (fst (QR_decomposition A)) |i. b < i}.\n       x \\<bullet> column b A * x $ a)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<in> UNIV}.\n     x \\<bullet> column b A * x $ a) =\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b} \\<union>\n               {column i (fst (QR_decomposition A)) |i. b < i}.\n     x \\<bullet> column b A * x $ a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n       x \\<bullet> column b A * x $ a) =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<in> UNIV}.\n       x \\<bullet> column b A * x $ a)", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<in> UNIV}.\n     x \\<bullet> column b A * x $ a) =\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b} \\<union>\n               {column i (fst (QR_decomposition A)) |i. b < i}.\n     x \\<bullet> column b A * x $ a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n       x \\<bullet> column b A * x $ a) =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<in> UNIV}.\n       x \\<bullet> column b A * x $ a)", "have \"... = (\\<Sum>x\\<in>?d. x \\<bullet> column b A * x $ a) + (\\<Sum>x\\<in>?f. x \\<bullet> column b A * x $ a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i.\n                  i \\<le> b} \\<union>\n                 {column i (fst (QR_decomposition A)) |i. b < i}.\n       x \\<bullet> column b A * x $ a) =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n       x \\<bullet> column b A * x $ a) +\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. b < i}.\n       x \\<bullet> column b A * x $ a)", "by (rule sum.union_disjoint, auto, metis f_def inj_eq inj_f not_le)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b} \\<union>\n               {column i (fst (QR_decomposition A)) |i. b < i}.\n     x \\<bullet> column b A * x $ a) =\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n     x \\<bullet> column b A * x $ a) +\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. b < i}.\n     x \\<bullet> column b A * x $ a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n       x \\<bullet> column b A * x $ a) =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<in> UNIV}.\n       x \\<bullet> column b A * x $ a)", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b} \\<union>\n               {column i (fst (QR_decomposition A)) |i. b < i}.\n     x \\<bullet> column b A * x $ a) =\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n     x \\<bullet> column b A * x $ a) +\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. b < i}.\n     x \\<bullet> column b A * x $ a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n       x \\<bullet> column b A * x $ a) =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<in> UNIV}.\n       x \\<bullet> column b A * x $ a)", "have \"... = (\\<Sum>x\\<in>?d. x \\<bullet> column b A * x $ a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n       x \\<bullet> column b A * x $ a) +\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. b < i}.\n       x \\<bullet> column b A * x $ a) =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n       x \\<bullet> column b A * x $ a)", "using sums_columns_Q_0[OF r]"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. ?b < i}.\n     x \\<bullet> column ?b A * x $ ?a) =\n  0\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n       x \\<bullet> column b A * x $ a) +\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. b < i}.\n       x \\<bullet> column b A * x $ a) =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n       x \\<bullet> column b A * x $ a)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n     x \\<bullet> column b A * x $ a) +\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. b < i}.\n     x \\<bullet> column b A * x $ a) =\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n     x \\<bullet> column b A * x $ a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n       x \\<bullet> column b A * x $ a) =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<in> UNIV}.\n       x \\<bullet> column b A * x $ a)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<in> UNIV}.\n     x \\<bullet> column b A * x $ a) =\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n     x \\<bullet> column b A * x $ a)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<in> UNIV}.\n     x \\<bullet> column b A * x $ a) =\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n     x \\<bullet> column b A * x $ a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n       x \\<bullet> column b A * x $ a) =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<in> UNIV}.\n       x \\<bullet> column b A * x $ a)", ".."], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n     x \\<bullet> column b A * x $ a) =\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<in> UNIV}.\n     x \\<bullet> column b A * x $ a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n     x \\<bullet> column b A * x $ a) =\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<in> UNIV}.\n     x \\<bullet> column b A * x $ a)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       (\\<Sum>k\\<in>UNIV.\n          fst (QR_decomposition A) $ i $ k *\n          (column k (fst (QR_decomposition A)) \\<bullet> column b A)) =\n       (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n          x \\<bullet> column b A * x $ i)", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n     x \\<bullet> column b A * x $ a) =\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<in> UNIV}.\n     x \\<bullet> column b A * x $ a)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       (\\<Sum>k\\<in>UNIV.\n          fst (QR_decomposition A) $ i $ k *\n          (column k (fst (QR_decomposition A)) \\<bullet> column b A)) =\n       (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n          x \\<bullet> column b A * x $ i)", "have \"... = (\\<Sum>x\\<in>f`UNIV. x \\<bullet> column b A * x $ a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<in> UNIV}.\n       x \\<bullet> column b A * x $ a) =\n    (\\<Sum>x\\<in>range f. x \\<bullet> column b A * x $ a)", "using f_eq"], ["proof (prove)\nusing this:\n  range f = {column i (fst (QR_decomposition A)) |i. i \\<in> UNIV}\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<in> UNIV}.\n       x \\<bullet> column b A * x $ a) =\n    (\\<Sum>x\\<in>range f. x \\<bullet> column b A * x $ a)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<in> UNIV}.\n     x \\<bullet> column b A * x $ a) =\n  (\\<Sum>x\\<in>range f. x \\<bullet> column b A * x $ a)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       (\\<Sum>k\\<in>UNIV.\n          fst (QR_decomposition A) $ i $ k *\n          (column k (fst (QR_decomposition A)) \\<bullet> column b A)) =\n       (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n          x \\<bullet> column b A * x $ i)", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<in> UNIV}.\n     x \\<bullet> column b A * x $ a) =\n  (\\<Sum>x\\<in>range f. x \\<bullet> column b A * x $ a)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       (\\<Sum>k\\<in>UNIV.\n          fst (QR_decomposition A) $ i $ k *\n          (column k (fst (QR_decomposition A)) \\<bullet> column b A)) =\n       (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n          x \\<bullet> column b A * x $ i)", "have \"... = (\\<Sum>k\\<in>UNIV. fst (QR_decomposition A) $ a $ k * (column k (fst (QR_decomposition A)) \\<bullet> column b A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>range f. x \\<bullet> column b A * x $ a) =\n    (\\<Sum>k\\<in>UNIV.\n       fst (QR_decomposition A) $ a $ k *\n       (column k (fst (QR_decomposition A)) \\<bullet> column b A))", "unfolding sum.reindex[OF inj_f]"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum ((\\<lambda>x. x \\<bullet> column b A * x $ a) \\<circ> f) UNIV =\n    (\\<Sum>k\\<in>UNIV.\n       fst (QR_decomposition A) $ a $ k *\n       (column k (fst (QR_decomposition A)) \\<bullet> column b A))", "unfolding f_def column_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum ((\\<lambda>x. x \\<bullet> (\\<chi>i. A $ i $ b) * x $ a) \\<circ>\n         (\\<lambda>i. \\<chi>ia. fst (QR_decomposition A) $ ia $ i))\n     UNIV =\n    (\\<Sum>k\\<in>UNIV.\n       fst (QR_decomposition A) $ a $ k *\n       ((\\<chi>i. fst (QR_decomposition A) $ i $ k) \\<bullet>\n        (\\<chi>i. A $ i $ b)))", "by (rule sum.cong, simp_all)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>range f. x \\<bullet> column b A * x $ a) =\n  (\\<Sum>k\\<in>UNIV.\n     fst (QR_decomposition A) $ a $ k *\n     (column k (fst (QR_decomposition A)) \\<bullet> column b A))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       (\\<Sum>k\\<in>UNIV.\n          fst (QR_decomposition A) $ i $ k *\n          (column k (fst (QR_decomposition A)) \\<bullet> column b A)) =\n       (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n          x \\<bullet> column b A * x $ i)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n     x \\<bullet> column b A * x $ a) =\n  (\\<Sum>k\\<in>UNIV.\n     fst (QR_decomposition A) $ a $ k *\n     (column k (fst (QR_decomposition A)) \\<bullet> column b A))", "show \" (\\<Sum>k\\<in>UNIV. fst (QR_decomposition A) $ a $ k * (column k (fst (QR_decomposition A)) \\<bullet> column b A)) =\n        (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}. x \\<bullet> column b A * x $ a)\""], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n     x \\<bullet> column b A * x $ a) =\n  (\\<Sum>k\\<in>UNIV.\n     fst (QR_decomposition A) $ a $ k *\n     (column k (fst (QR_decomposition A)) \\<bullet> column b A))\n\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<in>UNIV.\n       fst (QR_decomposition A) $ a $ k *\n       (column k (fst (QR_decomposition A)) \\<bullet> column b A)) =\n    (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n       x \\<bullet> column b A * x $ a)", ".."], ["proof (state)\nthis:\n  (\\<Sum>k\\<in>UNIV.\n     fst (QR_decomposition A) $ a $ k *\n     (column k (fst (QR_decomposition A)) \\<bullet> column b A)) =\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n     x \\<bullet> column b A * x $ a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  column b\n   (\\<chi>i j.\n       \\<Sum>k\\<in>UNIV.\n         fst (QR_decomposition A) $ i $ k *\n         (column k (fst (QR_decomposition A)) \\<bullet> column j A)) =\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n     (x \\<bullet> column b A) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       column b A =\n       column b (fst (QR_decomposition A) ** snd (QR_decomposition A))", "also"], ["proof (state)\nthis:\n  column b\n   (\\<chi>i j.\n       \\<Sum>k\\<in>UNIV.\n         fst (QR_decomposition A) $ i $ k *\n         (column k (fst (QR_decomposition A)) \\<bullet> column j A)) =\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n     (x \\<bullet> column b A) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       column b A =\n       column b (fst (QR_decomposition A) ** snd (QR_decomposition A))", "have \"... = column b A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n       (x \\<bullet> column b A) *\\<^sub>R x) =\n    column b A", "using column_QR_decomposition2[OF r]"], ["proof (prove)\nusing this:\n  column ?k A =\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> ?k}.\n     (x \\<bullet> column ?k A) *\\<^sub>R x)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n       (x \\<bullet> column b A) *\\<^sub>R x) =\n    column b A", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{column i (fst (QR_decomposition A)) |i. i \\<le> b}.\n     (x \\<bullet> column b A) *\\<^sub>R x) =\n  column b A\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       column b A =\n       column b (fst (QR_decomposition A) ** snd (QR_decomposition A))", "finally"], ["proof (chain)\npicking this:\n  column b (fst (QR_decomposition A) ** snd (QR_decomposition A)) =\n  column b A", "show \"column b A = column b (fst (QR_decomposition A) ** snd (QR_decomposition A))\""], ["proof (prove)\nusing this:\n  column b (fst (QR_decomposition A) ** snd (QR_decomposition A)) =\n  column b A\n\ngoal (1 subgoal):\n 1. column b A =\n    column b (fst (QR_decomposition A) ** snd (QR_decomposition A))", ".."], ["proof (state)\nthis:\n  column b A =\n  column b (fst (QR_decomposition A) ** snd (QR_decomposition A))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>b.\n     column b A =\n     column b (fst (QR_decomposition A) ** snd (QR_decomposition A))\n\ngoal (1 subgoal):\n 1. A = fst (QR_decomposition A) ** snd (QR_decomposition A)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>b.\n     column b A =\n     column b (fst (QR_decomposition A) ** snd (QR_decomposition A))\n\ngoal (1 subgoal):\n 1. A = fst (QR_decomposition A) ** snd (QR_decomposition A)", "unfolding column_def vec_eq_iff"], ["proof (prove)\nusing this:\n  \\<forall>b i.\n     (\\<chi>i. A $ i $ b) $ i =\n     (\\<chi>i.\n         (fst (QR_decomposition A) ** snd (QR_decomposition A)) $ i $ b) $\n     i\n\ngoal (1 subgoal):\n 1. \\<forall>i ia.\n       A $ i $ ia =\n       (fst (QR_decomposition A) ** snd (QR_decomposition A)) $ i $ ia", "by auto"], ["proof (state)\nthis:\n  A = fst (QR_decomposition A) ** snd (QR_decomposition A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma upper_triangular_snd_QR_decomposition:\n  fixes A::\"real^'n::{mod_type}^'m::{mod_type}\"\n  assumes r: \"rank A = ncols A\"\n  shows \"upper_triangular (snd (QR_decomposition A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. upper_triangular (snd (QR_decomposition A))", "proof (unfold upper_triangular_def, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j. j < i \\<Longrightarrow> snd (QR_decomposition A) $ i $ j = 0", "fix i j::'n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j. j < i \\<Longrightarrow> snd (QR_decomposition A) $ i $ j = 0", "assume j_less_i: \"j < i\""], ["proof (state)\nthis:\n  j < i\n\ngoal (1 subgoal):\n 1. \\<And>i j. j < i \\<Longrightarrow> snd (QR_decomposition A) $ i $ j = 0", "have \"snd (QR_decomposition A) $ i $ j = column i (fst (QR_decomposition A)) \\<bullet> column j A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (QR_decomposition A) $ i $ j =\n    column i (fst (QR_decomposition A)) \\<bullet> column j A", "unfolding QR_decomposition_def Let_def fst_conv snd_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Finite_Cartesian_Product.transpose\n      (divide_by_norm (Gram_Schmidt_matrix A)) **\n     A) $\n    i $\n    j =\n    column i (divide_by_norm (Gram_Schmidt_matrix A)) \\<bullet> column j A", "unfolding matrix_matrix_mult_inner_mult row_transpose"], ["proof (prove)\ngoal (1 subgoal):\n 1. column i (divide_by_norm (Gram_Schmidt_matrix A)) \\<bullet> column j A =\n    column i (divide_by_norm (Gram_Schmidt_matrix A)) \\<bullet> column j A", ".."], ["proof (state)\nthis:\n  snd (QR_decomposition A) $ i $ j =\n  column i (fst (QR_decomposition A)) \\<bullet> column j A\n\ngoal (1 subgoal):\n 1. \\<And>i j. j < i \\<Longrightarrow> snd (QR_decomposition A) $ i $ j = 0", "also"], ["proof (state)\nthis:\n  snd (QR_decomposition A) $ i $ j =\n  column i (fst (QR_decomposition A)) \\<bullet> column j A\n\ngoal (1 subgoal):\n 1. \\<And>i j. j < i \\<Longrightarrow> snd (QR_decomposition A) $ i $ j = 0", "have \"... = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A)) \\<bullet> column j A = 0", "using scaler_column_fst_QR_decomposition[OF j_less_i r]"], ["proof (prove)\nusing this:\n  column i (fst (QR_decomposition A)) \\<bullet> column j A = 0\n\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A)) \\<bullet> column j A = 0", "."], ["proof (state)\nthis:\n  column i (fst (QR_decomposition A)) \\<bullet> column j A = 0\n\ngoal (1 subgoal):\n 1. \\<And>i j. j < i \\<Longrightarrow> snd (QR_decomposition A) $ i $ j = 0", "finally"], ["proof (chain)\npicking this:\n  snd (QR_decomposition A) $ i $ j = 0", "show \"snd (QR_decomposition A) $ i $ j = 0\""], ["proof (prove)\nusing this:\n  snd (QR_decomposition A) $ i $ j = 0\n\ngoal (1 subgoal):\n 1. snd (QR_decomposition A) $ i $ j = 0", "by auto"], ["proof (state)\nthis:\n  snd (QR_decomposition A) $ i $ j = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma upper_triangular_invertible:\n  fixes A :: \"real^'n::{finite,wellorder}^'n::{finite,wellorder}\"\n  assumes u: \"upper_triangular A\"\n  and d: \"\\<forall>i. A $ i $ i \\<noteq> 0\" \n  shows \"invertible A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. invertible A", "have det_R: \"det A = (prod (\\<lambda>i. A$i$i) (UNIV::'n set))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. det A = (\\<Prod>i\\<in>UNIV. A $ i $ i)", "using det_upperdiagonal u"], ["proof (prove)\nusing this:\n  (\\<And>i j.\n      j < i \\<Longrightarrow> ?A $ i $ j = (0::?'a)) \\<Longrightarrow>\n  det ?A = (\\<Prod>i\\<in>UNIV. ?A $ i $ i)\n  upper_triangular A\n\ngoal (1 subgoal):\n 1. det A = (\\<Prod>i\\<in>UNIV. A $ i $ i)", "unfolding upper_triangular_def"], ["proof (prove)\nusing this:\n  (\\<And>i j.\n      j < i \\<Longrightarrow> ?A $ i $ j = (0::?'a)) \\<Longrightarrow>\n  det ?A = (\\<Prod>i\\<in>UNIV. ?A $ i $ i)\n  \\<forall>i j. j < i \\<longrightarrow> A $ i $ j = 0\n\ngoal (1 subgoal):\n 1. det A = (\\<Prod>i\\<in>UNIV. A $ i $ i)", "by blast"], ["proof (state)\nthis:\n  det A = (\\<Prod>i\\<in>UNIV. A $ i $ i)\n\ngoal (1 subgoal):\n 1. invertible A", "also"], ["proof (state)\nthis:\n  det A = (\\<Prod>i\\<in>UNIV. A $ i $ i)\n\ngoal (1 subgoal):\n 1. invertible A", "have \"... \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>i\\<in>UNIV. A $ i $ i) \\<noteq> 0", "using d"], ["proof (prove)\nusing this:\n  \\<forall>i. A $ i $ i \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<Prod>i\\<in>UNIV. A $ i $ i) \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  (\\<Prod>i\\<in>UNIV. A $ i $ i) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. invertible A", "finally"], ["proof (chain)\npicking this:\n  det A \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  det A \\<noteq> 0\n\ngoal (1 subgoal):\n 1. invertible A", "by (metis invertible_det_nz)"], ["proof (state)\nthis:\n  invertible A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma invertible_snd_QR_decomposition:\n  fixes A::\"real^'n::{mod_type}^'m::{mod_type}\"\n  assumes r: \"rank A = ncols A\"\n  shows \"invertible (snd (QR_decomposition A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible (snd (QR_decomposition A))", "proof (rule upper_triangular_invertible)"], ["proof (state)\ngoal (2 subgoals):\n 1. upper_triangular (snd (QR_decomposition A))\n 2. \\<forall>i. snd (QR_decomposition A) $ i $ i \\<noteq> 0", "show \"upper_triangular (snd (QR_decomposition A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. upper_triangular (snd (QR_decomposition A))", "using upper_triangular_snd_QR_decomposition[OF r]"], ["proof (prove)\nusing this:\n  upper_triangular (snd (QR_decomposition A))\n\ngoal (1 subgoal):\n 1. upper_triangular (snd (QR_decomposition A))", "."], ["proof (state)\nthis:\n  upper_triangular (snd (QR_decomposition A))\n\ngoal (1 subgoal):\n 1. \\<forall>i. snd (QR_decomposition A) $ i $ i \\<noteq> 0", "show \"\\<forall>i. snd (QR_decomposition A) $ i $ i \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. snd (QR_decomposition A) $ i $ i \\<noteq> 0", "proof (rule allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. snd (QR_decomposition A) $ i $ i \\<noteq> 0", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. snd (QR_decomposition A) $ i $ i \\<noteq> 0", "have ind: \"vec.independent (columns (Gram_Schmidt_matrix A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec.independent (columns (Gram_Schmidt_matrix A))", "by (metis full_rank_imp_is_basis2\n        independent_columns_Gram_Schmidt_matrix r)"], ["proof (state)\nthis:\n  vec.independent (columns (Gram_Schmidt_matrix A))\n\ngoal (1 subgoal):\n 1. \\<And>i. snd (QR_decomposition A) $ i $ i \\<noteq> 0", "hence zero_not_in: \"0 \\<notin> (columns (Gram_Schmidt_matrix A))\""], ["proof (prove)\nusing this:\n  vec.independent (columns (Gram_Schmidt_matrix A))\n\ngoal (1 subgoal):\n 1. 0 \\<notin> columns (Gram_Schmidt_matrix A)", "by (metis vec.dependent_zero)"], ["proof (state)\nthis:\n  0 \\<notin> columns (Gram_Schmidt_matrix A)\n\ngoal (1 subgoal):\n 1. \\<And>i. snd (QR_decomposition A) $ i $ i \\<noteq> 0", "hence c:\"column i (Gram_Schmidt_matrix A) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  0 \\<notin> columns (Gram_Schmidt_matrix A)\n\ngoal (1 subgoal):\n 1. column i (Gram_Schmidt_matrix A) \\<noteq> 0", "unfolding columns_def"], ["proof (prove)\nusing this:\n  0 \\<notin> {column i (Gram_Schmidt_matrix A) |i. i \\<in> UNIV}\n\ngoal (1 subgoal):\n 1. column i (Gram_Schmidt_matrix A) \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  column i (Gram_Schmidt_matrix A) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>i. snd (QR_decomposition A) $ i $ i \\<noteq> 0", "have \"snd (QR_decomposition A) $ i $ i = column i (fst (QR_decomposition A)) \\<bullet> column i A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (QR_decomposition A) $ i $ i =\n    column i (fst (QR_decomposition A)) \\<bullet> column i A", "unfolding QR_decomposition_def Let_def snd_conv fst_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Finite_Cartesian_Product.transpose\n      (divide_by_norm (Gram_Schmidt_matrix A)) **\n     A) $\n    i $\n    i =\n    column i (divide_by_norm (Gram_Schmidt_matrix A)) \\<bullet> column i A", "unfolding matrix_matrix_mult_inner_mult"], ["proof (prove)\ngoal (1 subgoal):\n 1. row i\n     (Finite_Cartesian_Product.transpose\n       (divide_by_norm (Gram_Schmidt_matrix A))) \\<bullet>\n    column i A =\n    column i (divide_by_norm (Gram_Schmidt_matrix A)) \\<bullet> column i A", "unfolding row_transpose"], ["proof (prove)\ngoal (1 subgoal):\n 1. column i (divide_by_norm (Gram_Schmidt_matrix A)) \\<bullet> column i A =\n    column i (divide_by_norm (Gram_Schmidt_matrix A)) \\<bullet> column i A", ".."], ["proof (state)\nthis:\n  snd (QR_decomposition A) $ i $ i =\n  column i (fst (QR_decomposition A)) \\<bullet> column i A\n\ngoal (1 subgoal):\n 1. \\<And>i. snd (QR_decomposition A) $ i $ i \\<noteq> 0", "also"], ["proof (state)\nthis:\n  snd (QR_decomposition A) $ i $ i =\n  column i (fst (QR_decomposition A)) \\<bullet> column i A\n\ngoal (1 subgoal):\n 1. \\<And>i. snd (QR_decomposition A) $ i $ i \\<noteq> 0", "have \"... = norm (column i (Gram_Schmidt_matrix A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column i (fst (QR_decomposition A)) \\<bullet> column i A =\n    norm (column i (Gram_Schmidt_matrix A))", "unfolding norm_uk_eq[OF r, symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (column i (Gram_Schmidt_matrix A)) =\n    norm (column i (Gram_Schmidt_matrix A))", ".."], ["proof (state)\nthis:\n  column i (fst (QR_decomposition A)) \\<bullet> column i A =\n  norm (column i (Gram_Schmidt_matrix A))\n\ngoal (1 subgoal):\n 1. \\<And>i. snd (QR_decomposition A) $ i $ i \\<noteq> 0", "also"], ["proof (state)\nthis:\n  column i (fst (QR_decomposition A)) \\<bullet> column i A =\n  norm (column i (Gram_Schmidt_matrix A))\n\ngoal (1 subgoal):\n 1. \\<And>i. snd (QR_decomposition A) $ i $ i \\<noteq> 0", "have \"... \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (column i (Gram_Schmidt_matrix A)) \\<noteq> 0", "by (rule ccontr, simp add: c)"], ["proof (state)\nthis:\n  norm (column i (Gram_Schmidt_matrix A)) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>i. snd (QR_decomposition A) $ i $ i \\<noteq> 0", "finally"], ["proof (chain)\npicking this:\n  snd (QR_decomposition A) $ i $ i \\<noteq> 0", "show \"snd (QR_decomposition A) $ i $ i \\<noteq> 0\""], ["proof (prove)\nusing this:\n  snd (QR_decomposition A) $ i $ i \\<noteq> 0\n\ngoal (1 subgoal):\n 1. snd (QR_decomposition A) $ i $ i \\<noteq> 0", "."], ["proof (state)\nthis:\n  snd (QR_decomposition A) $ i $ i \\<noteq> 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i. snd (QR_decomposition A) $ i $ i \\<noteq> 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma QR_decomposition:\n  fixes A::\"real^'n::{mod_type}^'m::{mod_type}\"\n  assumes r: \"rank A = ncols A\"\n  shows \"A = fst (QR_decomposition A) ** snd (QR_decomposition A) \\<and>\n  pairwise orthogonal (columns (fst (QR_decomposition A))) \\<and> \n  (\\<forall>i. norm (column i (fst (QR_decomposition A))) = 1) \\<and>\n  (transpose (fst (QR_decomposition A))) ** (fst (QR_decomposition A)) = mat 1 \\<and>\n  vec.independent (columns (fst (QR_decomposition A))) \\<and> \n  col_space A = col_space (fst (QR_decomposition A)) \\<and>\n  card (columns A) = card (columns (fst (QR_decomposition A))) \\<and>\n  invertible (snd (QR_decomposition A)) \\<and>\n  upper_triangular (snd (QR_decomposition A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = fst (QR_decomposition A) ** snd (QR_decomposition A) \\<and>\n    pairwise orthogonal (columns (fst (QR_decomposition A))) \\<and>\n    (\\<forall>i. norm (column i (fst (QR_decomposition A))) = 1) \\<and>\n    Finite_Cartesian_Product.transpose (fst (QR_decomposition A)) **\n    fst (QR_decomposition A) =\n    mat 1 \\<and>\n    vec.independent (columns (fst (QR_decomposition A))) \\<and>\n    col_space A = col_space (fst (QR_decomposition A)) \\<and>\n    card (columns A) = card (columns (fst (QR_decomposition A))) \\<and>\n    invertible (snd (QR_decomposition A)) \\<and>\n    upper_triangular (snd (QR_decomposition A))", "by (metis QR_decomposition_mult col_space_def full_rank_imp_is_basis2 \n    independent_columns_fst_QR_decomposition invertible_snd_QR_decomposition \n    norm_columns_fst_QR_decomposition orthogonal_fst_QR_decomposition \n    orthogonal_matrix_fst_QR_decomposition r span_fst_QR_decomposition \n    upper_triangular_snd_QR_decomposition)"], ["", "lemma QR_decomposition_square:\n  fixes A::\"real^'n::{mod_type}^'n::{mod_type}\"\n  assumes r: \"rank A = ncols A\"\n  shows \"A = fst (QR_decomposition A) ** snd (QR_decomposition A) \\<and>\n  orthogonal_matrix (fst (QR_decomposition A)) \\<and>\n  upper_triangular (snd (QR_decomposition A)) \\<and>\n  invertible (snd (QR_decomposition A)) \\<and>    \n  pairwise orthogonal (columns (fst (QR_decomposition A))) \\<and> \n  (\\<forall>i. norm (column i (fst (QR_decomposition A))) = 1) \\<and>      \n  vec.independent (columns (fst (QR_decomposition A))) \\<and> \n  col_space A = col_space (fst (QR_decomposition A)) \\<and>\n  card (columns A) = card (columns (fst (QR_decomposition A)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = fst (QR_decomposition A) ** snd (QR_decomposition A) \\<and>\n    orthogonal_matrix (fst (QR_decomposition A)) \\<and>\n    upper_triangular (snd (QR_decomposition A)) \\<and>\n    invertible (snd (QR_decomposition A)) \\<and>\n    pairwise orthogonal (columns (fst (QR_decomposition A))) \\<and>\n    (\\<forall>i. norm (column i (fst (QR_decomposition A))) = 1) \\<and>\n    vec.independent (columns (fst (QR_decomposition A))) \\<and>\n    col_space A = col_space (fst (QR_decomposition A)) \\<and>\n    card (columns A) = card (columns (fst (QR_decomposition A)))", "by (metis QR_decomposition orthogonal_matrix_fst_QR_decomposition' r)"], ["", "text\\<open>QR for computing determinants\\<close>"], ["", "lemma det_QR_decomposition:\n  fixes A::\"real^'n::{mod_type}^'n::{mod_type}\"\n  assumes r: \"rank A = ncols A\"\n  shows \"\\<bar>det A\\<bar> = \\<bar>(prod (\\<lambda>i. snd(QR_decomposition A)$i$i) (UNIV::'n set))\\<bar>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>det A\\<bar> =\n    \\<bar>\\<Prod>i\\<in>UNIV. snd (QR_decomposition A) $ i $ i\\<bar>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<bar>det A\\<bar> =\n    \\<bar>\\<Prod>i\\<in>UNIV. snd (QR_decomposition A) $ i $ i\\<bar>", "let ?Q=\"fst(QR_decomposition A)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<bar>det A\\<bar> =\n    \\<bar>\\<Prod>i\\<in>UNIV. snd (QR_decomposition A) $ i $ i\\<bar>", "let ?R=\"snd(QR_decomposition A)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<bar>det A\\<bar> =\n    \\<bar>\\<Prod>i\\<in>UNIV. snd (QR_decomposition A) $ i $ i\\<bar>", "have det_R: \"det ?R = (prod (\\<lambda>i. snd(QR_decomposition A)$i$i) (UNIV::'n set))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. det (snd (QR_decomposition A)) =\n    (\\<Prod>i\\<in>UNIV. snd (QR_decomposition A) $ i $ i)", "apply (rule det_upperdiagonal)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j. j < i \\<Longrightarrow> snd (QR_decomposition A) $ i $ j = 0", "using upper_triangular_snd_QR_decomposition[OF r]"], ["proof (prove)\nusing this:\n  upper_triangular (snd (QR_decomposition A))\n\ngoal (1 subgoal):\n 1. \\<And>i j. j < i \\<Longrightarrow> snd (QR_decomposition A) $ i $ j = 0", "unfolding upper_triangular_def"], ["proof (prove)\nusing this:\n  \\<forall>i j. j < i \\<longrightarrow> snd (QR_decomposition A) $ i $ j = 0\n\ngoal (1 subgoal):\n 1. \\<And>i j. j < i \\<Longrightarrow> snd (QR_decomposition A) $ i $ j = 0", "by simp"], ["proof (state)\nthis:\n  det (snd (QR_decomposition A)) =\n  (\\<Prod>i\\<in>UNIV. snd (QR_decomposition A) $ i $ i)\n\ngoal (1 subgoal):\n 1. \\<bar>det A\\<bar> =\n    \\<bar>\\<Prod>i\\<in>UNIV. snd (QR_decomposition A) $ i $ i\\<bar>", "have \"\\<bar>det A\\<bar> = \\<bar>det ?Q * det ?R\\<bar>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>det A\\<bar> =\n    \\<bar>det (fst (QR_decomposition A)) *\n          det (snd (QR_decomposition A))\\<bar>", "by (metis QR_decomposition_mult det_mul r)"], ["proof (state)\nthis:\n  \\<bar>det A\\<bar> =\n  \\<bar>det (fst (QR_decomposition A)) *\n        det (snd (QR_decomposition A))\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>det A\\<bar> =\n    \\<bar>\\<Prod>i\\<in>UNIV. snd (QR_decomposition A) $ i $ i\\<bar>", "also"], ["proof (state)\nthis:\n  \\<bar>det A\\<bar> =\n  \\<bar>det (fst (QR_decomposition A)) *\n        det (snd (QR_decomposition A))\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>det A\\<bar> =\n    \\<bar>\\<Prod>i\\<in>UNIV. snd (QR_decomposition A) $ i $ i\\<bar>", "have \"... = \\<bar>det ?Q\\<bar> * \\<bar>det ?R\\<bar>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>det (fst (QR_decomposition A)) *\n          det (snd (QR_decomposition A))\\<bar> =\n    \\<bar>det (fst (QR_decomposition A))\\<bar> *\n    \\<bar>det (snd (QR_decomposition A))\\<bar>", "unfolding abs_mult"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>det (fst (QR_decomposition A))\\<bar> *\n    \\<bar>det (snd (QR_decomposition A))\\<bar> =\n    \\<bar>det (fst (QR_decomposition A))\\<bar> *\n    \\<bar>det (snd (QR_decomposition A))\\<bar>", ".."], ["proof (state)\nthis:\n  \\<bar>det (fst (QR_decomposition A)) *\n        det (snd (QR_decomposition A))\\<bar> =\n  \\<bar>det (fst (QR_decomposition A))\\<bar> *\n  \\<bar>det (snd (QR_decomposition A))\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>det A\\<bar> =\n    \\<bar>\\<Prod>i\\<in>UNIV. snd (QR_decomposition A) $ i $ i\\<bar>", "also"], ["proof (state)\nthis:\n  \\<bar>det (fst (QR_decomposition A)) *\n        det (snd (QR_decomposition A))\\<bar> =\n  \\<bar>det (fst (QR_decomposition A))\\<bar> *\n  \\<bar>det (snd (QR_decomposition A))\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>det A\\<bar> =\n    \\<bar>\\<Prod>i\\<in>UNIV. snd (QR_decomposition A) $ i $ i\\<bar>", "have \"... = 1 * \\<bar>det ?R\\<bar>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>det (fst (QR_decomposition A))\\<bar> *\n    \\<bar>det (snd (QR_decomposition A))\\<bar> =\n    1 * \\<bar>det (snd (QR_decomposition A))\\<bar>", "using det_orthogonal_matrix[OF orthogonal_matrix_fst_QR_decomposition'[OF r]]"], ["proof (prove)\nusing this:\n  det (fst (QR_decomposition A)) = 1 \\<or>\n  det (fst (QR_decomposition A)) = - 1\n\ngoal (1 subgoal):\n 1. \\<bar>det (fst (QR_decomposition A))\\<bar> *\n    \\<bar>det (snd (QR_decomposition A))\\<bar> =\n    1 * \\<bar>det (snd (QR_decomposition A))\\<bar>", "by auto"], ["proof (state)\nthis:\n  \\<bar>det (fst (QR_decomposition A))\\<bar> *\n  \\<bar>det (snd (QR_decomposition A))\\<bar> =\n  1 * \\<bar>det (snd (QR_decomposition A))\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>det A\\<bar> =\n    \\<bar>\\<Prod>i\\<in>UNIV. snd (QR_decomposition A) $ i $ i\\<bar>", "also"], ["proof (state)\nthis:\n  \\<bar>det (fst (QR_decomposition A))\\<bar> *\n  \\<bar>det (snd (QR_decomposition A))\\<bar> =\n  1 * \\<bar>det (snd (QR_decomposition A))\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>det A\\<bar> =\n    \\<bar>\\<Prod>i\\<in>UNIV. snd (QR_decomposition A) $ i $ i\\<bar>", "have \"... = \\<bar>det ?R\\<bar>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 * \\<bar>det (snd (QR_decomposition A))\\<bar> =\n    \\<bar>det (snd (QR_decomposition A))\\<bar>", "by simp"], ["proof (state)\nthis:\n  1 * \\<bar>det (snd (QR_decomposition A))\\<bar> =\n  \\<bar>det (snd (QR_decomposition A))\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>det A\\<bar> =\n    \\<bar>\\<Prod>i\\<in>UNIV. snd (QR_decomposition A) $ i $ i\\<bar>", "also"], ["proof (state)\nthis:\n  1 * \\<bar>det (snd (QR_decomposition A))\\<bar> =\n  \\<bar>det (snd (QR_decomposition A))\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>det A\\<bar> =\n    \\<bar>\\<Prod>i\\<in>UNIV. snd (QR_decomposition A) $ i $ i\\<bar>", "have \"... = \\<bar>(prod (\\<lambda>i. snd(QR_decomposition A)$i$i) (UNIV::'n set))\\<bar>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>det (snd (QR_decomposition A))\\<bar> =\n    \\<bar>\\<Prod>i\\<in>UNIV. snd (QR_decomposition A) $ i $ i\\<bar>", "unfolding det_R"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>\\<Prod>i\\<in>UNIV. snd (QR_decomposition A) $ i $ i\\<bar> =\n    \\<bar>\\<Prod>i\\<in>UNIV. snd (QR_decomposition A) $ i $ i\\<bar>", ".."], ["proof (state)\nthis:\n  \\<bar>det (snd (QR_decomposition A))\\<bar> =\n  \\<bar>\\<Prod>i\\<in>UNIV. snd (QR_decomposition A) $ i $ i\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>det A\\<bar> =\n    \\<bar>\\<Prod>i\\<in>UNIV. snd (QR_decomposition A) $ i $ i\\<bar>", "finally"], ["proof (chain)\npicking this:\n  \\<bar>det A\\<bar> =\n  \\<bar>\\<Prod>i\\<in>UNIV. snd (QR_decomposition A) $ i $ i\\<bar>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<bar>det A\\<bar> =\n  \\<bar>\\<Prod>i\\<in>UNIV. snd (QR_decomposition A) $ i $ i\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>det A\\<bar> =\n    \\<bar>\\<Prod>i\\<in>UNIV. snd (QR_decomposition A) $ i $ i\\<bar>", "."], ["proof (state)\nthis:\n  \\<bar>det A\\<bar> =\n  \\<bar>\\<Prod>i\\<in>UNIV. snd (QR_decomposition A) $ i $ i\\<bar>\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}