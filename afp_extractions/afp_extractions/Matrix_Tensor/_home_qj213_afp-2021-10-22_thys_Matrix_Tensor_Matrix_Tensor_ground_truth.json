{"file_name": "/home/qj213/afp-2021-10-22/thys/Matrix_Tensor/Matrix_Tensor.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Matrix_Tensor", "problem_names": ["lemma times_scalar_id: \"times id v = v\"", "lemma times_vector_id: \"times v [id] = [v]\"", "lemma preserving_length: \"length (times n y) = (length y)\"", "lemma vec_vec_Tensor_left_id: \"vec_vec_Tensor [id] v = v\"", "lemma vec_vec_Tensor_right_id: \"vec_vec_Tensor v [id] = v\"", "theorem vec_vec_Tensor_length : \n \"(length(vec_vec_Tensor x y)) = (length x)*(length y)\"", "theorem vec_length: assumes \"vec m x\" and \"vec n y\"\nshows \"vec (m*n) (vec_vec_Tensor x y)\"", "lemma vec_mat_Tensor_vector_id: \"vec_mat_Tensor [id] v = v\"", "lemma vec_mat_Tensor_matrix_id: \"vec_mat_Tensor  v [[id]] = [v]\"", "theorem vec_mat_Tensor_length: \n \"length(vec_mat_Tensor xs ys) = length ys\"", "theorem length_matrix: \n assumes \"mat nr nc (y#ys)\" and \"length v = k\"\n     and \"(vec_mat_Tensor v (y#ys) = x#xs)\" \n shows \"(vec (nr*k) x)\"", "lemma matrix_set_list: \n assumes \"mat nr nc M\" \n     and \"length v = k\"\n     and \" x \\<in> set M\" \n shows \"\\<exists>ys.\\<exists>zs.(ys@x#zs = M)\"", "lemma length_reduct: \n assumes \"m \\<noteq> []\"\n shows \"length (reduct m) +1  = (length m)\"", "lemma mat_empty_column_length: assumes \"mat nr nc M\" and \"M = []\"\nshows \"nc = 0\"", "lemma vec_uniqueness: \n assumes \"vec m v\" \n     and \"vec n v\" \n shows \"m = n\"", "lemma mat_uniqueness: \n assumes \"mat nr1 nc M\" \n and \"mat nr2 nc M\" and \"z = hd M\" and \"M \\<noteq> []\"\n shows \"(\\<forall>x\\<in>(set M).(nr1 = nr2))\"", "lemma mat_empty_row_length: assumes \"mat nr nc M\" and \"M = []\"\nshows \"mat 0 nc M\"", "lemma null_mat:\"null_matrix = [[]]\"", "lemma zero_matrix:\" mat 0 0 []\"", "lemma row_length_Nil: \n \"row_length [] =0\"", "lemma row_length_Null: \n \"row_length [[]] =0\"", "lemma row_length_vect_mat: \n \"row_length (vec_mat_Tensor v m)  = length v*(row_length m)\"", "lemma Tensor_null: \"xs \\<otimes>[] = []\"", "lemma Tensor_left_id: \"  [[id]] \\<otimes> xs = xs\"", "lemma Tensor_right_id: \"  xs \\<otimes> [[id]] = xs\"", "lemma row_length_mat: \n    \"(row_length (m1\\<otimes>m2)) = (row_length m1)*(row_length m2)\"", "lemma hd_set:assumes \"x \\<in> set (a#M)\" shows \"(x = a) \\<or> (x\\<in>(set M))\"", "theorem matrix_row_length: \n assumes \"mat nr nc M\" \n shows \"mat (row_length M) (length M) M\"", "lemma reduct_matrix: \n assumes \"mat (row_length (a#M)) (length (a#M)) (a#M)\"\n shows \"mat (row_length M) (length M) M\"", "theorem well_defined_vec_mat_Tensor:\n\"(mat (row_length M) (length M) M) \\<Longrightarrow>\n                  (mat \n                    ((row_length M)*(length v)) \n                    (length M) \n                           (vec_mat_Tensor v M))\"", "lemma length_Tensor:\" (length (M1\\<otimes>M2)) = (length M1)*(length M2)\"", "lemma append_reduct_matrix: \n\"(mat (row_length (M1@M2)) (length (M1@M2)) (M1@M2))\n\\<Longrightarrow>(mat (row_length M2) (length M2) M2)\"", "theorem well_defined_Tensor:\n \"(mat (row_length M1) (length M1) M1) \n\\<and> (mat (row_length M2) (length M2) M2)\n\\<Longrightarrow>(mat ((row_length M1)*(row_length M2)) ((length M1)*(length M2)) (M1\\<otimes>M2))\"", "theorem effective_well_defined_Tensor:\n assumes \"(mat (row_length M1) (length M1) M1)\" \n     and \"(mat (row_length M2) (length M2) M2)\"\n shows \"mat \n            ((row_length M1)*(row_length M2)) \n            ((length M1)*(length M2)) \n                               (M1\\<otimes>M2)\"", "theorem times_elements:\n \"\\<forall>i.((i<(length v)) \\<longrightarrow> (times a v)!i = f a (v!i))\"", "lemma simpl_times_elements:\n assumes \"(i<length xs)\" \n shows \"((i<(length v)) \\<longrightarrow> (times a v)!i = f a (v!i))\"", "lemma append_simpl: \"i<(length xs) \\<longrightarrow> (xs@ys)!i = (xs!i)\"", "lemma append_simpl2: \"i \\<ge>(length xs) \\<longrightarrow> (xs@ys)!i = (ys!(i- (length xs)))\"", "lemma append_simpl3: \n assumes \"i > (length y)\"\n shows \" (i <((length (z#zs))*(length y))) \n                  \\<longrightarrow> (i - (length y))< (length zs)*(length y)\"", "lemma append_simpl4: \n\"(i > (length y))\n         \\<longrightarrow> ((i <((length (z#zs))*(length y)))) \n                \\<longrightarrow> ((i - (length y))< (length zs)*(length y))\"", "lemma vec_vec_Tensor_simpl: \n   \"i<(length y) \\<longrightarrow> (vec_vec_Tensor (z#zs) y)!i = (times z y)!i\"", "lemma vec_vec_Tensor_simpl2: \n  \"(i \\<ge> (length y)) \n  \\<longrightarrow> ((vec_vec_Tensor (z#zs) y)!i = (vec_vec_Tensor zs y)!(i- (length y)))\"", "lemma division_product: \n assumes \"(b::int)>0\"\n and \"a \\<ge>b\"\n shows \" (a div b) = ((a - b) div b) + 1\"", "lemma int_nat_div: \n   \"(int a) div (int b) = int ((a::nat) div b)\"", "lemma int_nat_eq: \n assumes \"int (a::nat) = int b\"\n shows \"a = b\"", "lemma nat_div: \n assumes \"(b::nat) > 0\" \n     and \"a > b\"\n shows \"(a div b) = ((a - b) div b) + 1\"", "lemma mod_eq:\n \"(m::int) mod n = (m + (-1)*n) mod n\"", "lemma nat_mod_eq: \"int m mod int n = int (m mod n)\"", "lemma nat_mod: \n assumes  \"(m::nat) > n\"\n shows \"(m::nat) mod n = (m -n) mod n\"", "lemma logic: \n assumes \"A \\<longrightarrow> B\" \n     and \"\\<not>A \\<longrightarrow> B\" \n shows \"B\"", "theorem vec_vec_Tensor_elements:\n assumes \" (y \\<noteq> [])\"\n shows \n   \"\\<forall>i.((i<((length x)*(length y)))\n       \\<longrightarrow> ((vec_vec_Tensor x y)!i) \n             = f (x!(i div (length y))) (y!(i mod (length y))))\"", "lemma nat_int:  \"nat (int x + int y) = x + y\"", "lemma int_nat_equiv: \"(x > 0) \\<longrightarrow> (nat ((int x) + -1)+1) = x\"", "lemma list_int_nat: \"(k>0) \\<longrightarrow> ((x#xs)!k = xs!(nat ((int k)+-1)))\"", "lemma row_length_eq:\n \"(mat  (row_length (a#b#N))  (length (a#b#N)) (a#b#N)) \n   \\<longrightarrow> \n    (row_length (a#b#N) = (row_length (b#N)))\"", "theorem vec_mat_Tensor_elements: \n \"\\<forall>i.\\<forall>j.\n  (((i<((length v)*(row_length M)))\n  \\<and>(j < (length M)))\n  \\<and>(mat (row_length M) (length M) M)\n   \\<longrightarrow> ((vec_mat_Tensor v M)!j!i) \n               = f (v!(i div (row_length M))) (M!j!(i mod (row_length M))))\"", "theorem matrix_Tensor_elements: \n fixes M1 M2\nshows\n \"\\<forall>i.\\<forall>j.(((i<((row_length M1)*(row_length M2)))\n       \\<and>(j < (length M1)*(length M2)))\n       \\<and>(mat (row_length M1) (length M1) M1)\n       \\<and>(mat (row_length M2) (length M2) M2)\n            \\<longrightarrow> ((M1 \\<otimes> M2)!j!i) = \n                     f  \n                        (M1!(j div (length M2))!(i div (row_length M2))) \n                        (M2!(j mod length M2)!(i mod (row_length M2))))\"", "theorem effective_matrix_tensor_elements:\n  \" (((i<((row_length M1)*(row_length M2))) \n  \\<and>(j < (length M1)*(length M2)))\n  \\<and>(mat (row_length M1) (length M1) M1)\n  \\<and>(mat (row_length M2) (length M2) M2)\n \\<Longrightarrow> ((M1 \\<otimes> M2)!j!i) \n   = f (M1!(j div (length M2))!(i div (row_length M2))) \n       (M2!(j mod length M2)!(i mod (row_length M2))))\"", "theorem effective_matrix_tensor_elements2:\n assumes  \" i<(row_length M1)*(row_length M2)\"\n and \"j < (length M1)*(length M2)\"\n and \"mat (row_length M1) (length M1) M1\"\n and \"mat (row_length M2) (length M2) M2\"\n shows \"(M1 \\<otimes> M2)!j!i = \n             (M1!(j div (length M2))!(i div (row_length M2)))\n              * (M2!(j mod length M2)!(i mod (row_length M2)))\"", "lemma div_left_ineq:\n assumes \"(x::nat) < y*z\" \n shows \" (x div z) < y\"", "lemma div_right_ineq:\n assumes \"(x::nat) < y*z\" \n shows \" (x div y) < z\"", "lemma col_vec_mat_Tensor_prelim:\n \" \\<forall>j.(j < (length M) \n     \\<longrightarrow>\n      col (vec_mat_Tensor v M) j = vec_vec_Tensor v (col M j))\"", "lemma col_vec_mat_Tensor:fixes j M v\n assumes \"j < (length M)\" \n shows \"col (vec_mat_Tensor v M) j = vec_vec_Tensor v (col M j)\"", "lemma  col_formula:\n fixes M1 and M2\n shows \"\\<forall>j.((j < (length M1)*(length M2)) \n         \\<and> (mat (row_length M1) (length M1) M1)\n         \\<and> (mat (row_length M2) (length M2) M2)\n         \\<longrightarrow> col (M1 \\<otimes> M2) j \n                =  vec_vec_Tensor \n                        (col M1 (j div length M2)) \n                        (col M2 (j mod length M2)))\"", "lemma row_Cons:\"row (v#M) i = (v!i)#(row M i)\"", "lemma row_append:\"row (A@B)i = (row A i)@(row B i)\"", "lemma row_empty:\"row [] i = []\"", "lemma vec_vec_Tensor_right_empty:\"vec_vec_Tensor x [] = []\"", "lemma \"vec_mat_Tensor v ([]#[]) = [[]] \"", "lemma \"i<0 \\<longrightarrow> [[]!i] = []\"", "lemma row_vec_mat_Tensor_prelim:\n \"\\<forall>i.\n     ((i < (length v)*(row_length M))\\<and>(mat nr (length M) M) \n      \\<longrightarrow> row (vec_mat_Tensor v M) i \n            = times (v!(i div row_length M)) (row M (i mod row_length M)))\"", "lemma  row_formula:\n fixes M1 and M2\n shows \"\\<forall>i.((i < (row_length M1)*(row_length M2))\n          \\<and>(mat (row_length M1) (length M1) M1)\n          \\<and>(mat (row_length M2) (length M2) M2)\n             \\<longrightarrow> row (M1 \\<otimes> M2) i \n                        =  vec_vec_Tensor \n                                 (row M1 (i div row_length M2)) \n                                 (row M2 (i mod row_length M2)))\"", "lemma  effective_row_formula:\n fixes M1 and M2\n assumes \"i < (row_length M1)*(row_length M2)\" \n     and \"(mat (row_length M1) (length M1) M1)\"\n     and \"(mat (row_length M2) (length M2) M2)\"\n shows \"row (M1 \\<otimes> M2) i \n               =  vec_vec_Tensor \n                       (row M1 (i div row_length M2)) \n                       (row M2 (i mod row_length M2))\"", "lemma alt_effective_matrix_tensor_elements:\n \" (((i<((row_length M2)*(row_length M3)))\n \\<and>(j < (length M2)*(length M3)))\n \\<and>(mat (row_length M2) (length M2) M2)\n \\<and>(mat (row_length M3) (length M3) M3)\n \\<Longrightarrow> ((M2 \\<otimes> M3)!j!i) = f (M2!(j div (length M3))!(i div (row_length M3))) \n(M3!(j mod length M3)!(i mod (row_length M3))))\"", "lemma trans_impl:\"(\\<forall> i j.(P i j \\<longrightarrow> Q i j))\\<and>(\\<forall> i j. (Q i j \\<longrightarrow> R i j)) \n        \\<Longrightarrow> (\\<forall> i j. (P i j \\<longrightarrow> R i j))\"", "lemma \"((x::nat) div y) div z = (x div (y*z))\"", "lemma \"(\\<not>((a::nat) < b)) \\<Longrightarrow> (a \\<ge> b)\"", "lemma not_null: \"xs \\<noteq> [] \\<Longrightarrow> \\<exists>y ys. xs = y#ys\"", "lemma \"(y::nat) \\<noteq> 0 \\<Longrightarrow> (x mod y) < y\"", "lemma mod_prop1:\"((a::nat) mod (b*c)) mod c = (a mod c)\"", "lemma mod_div_relation:\"((a::nat) mod (b*c)) div c = (a div c) mod b\"", "lemma associativity:\n fixes M1 M2 M3\n shows\n      \" (mat (row_length M1) (length M1) M1) \n      \\<and> (mat (row_length M2) (length M2) M2)\n      \\<and> (mat (row_length M3) (length M3) M3)\n        \\<Longrightarrow>\n           M1 \\<otimes> (M2 \\<otimes> M3) = (M1 \\<otimes> M2) \\<otimes> M3\" (is \"?x \\<Longrightarrow>?l = ?r\")", "lemma \" \\<And>(a::nat) b.(times  a  b) =(times  b  a)\"", "lemma fixes M1 M2 M3\n      shows \"(mat (row_length M1) (length M1) M1) \n            \\<and>(mat (row_length M2) (length M2) M2)\n            \\<and>(mat (row_length M3) (length M3) M3)\n             \\<Longrightarrow> (M1 \\<otimes> (M2 \\<otimes> M3)) = ((M1 \\<otimes> M2) \\<otimes> M3)\"", "lemma ma :\n assumes wf1: \"mat nr n m1\"\n     and wf2: \"mat n nc m2\"\n        and i: \"i < nr\"\n        and j: \"j < nc\"\n shows \"mat_multI zer g f nr m1 m2 ! j ! i \n                  = scalar_prodI zer g f (row m1 i) (col m2 j)\"", "lemma matrix_index:\n  assumes wf1: \"mat (row_length m1) n m1\"\n      and wf2: \"mat n nc m2\"\n        and i: \"i < (row_length m1)\"\n        and j: \"j < nc\"\n shows  \"matrix_mult  m1 m2 ! j ! i \n                 = scalar_product  (row m1 i) (col m2 j)\"", "lemma unique_row_col:\n assumes \"mat nr1 nc1 M\" and \"mat nr2 nc2 M\" and \"M \\<noteq> []\"\n shows \"nr1 = nr2\" and \"nc1 = nc2\"", "lemma matrix_mult_index: \n assumes \"m1 \\<noteq> []\"\n  and  wf1: \"mat nr n m1\"\n  and wf2: \"mat n nc m2\"\n    and i: \"i < nr\"\n    and j: \"j < nc\"\n shows  \"matrix_mult  m1 m2 ! j ! i = scalar_product  (row m1 i) (col m2 j)\"", "lemma non_empty_mat_mult:\n assumes wf1:\"mat nr n A\"\n     and wf2:\"mat n nc B\"\n         and \"A \\<noteq> []\" and \" B \\<noteq> []\"\n shows  \"A \\<circ> B \\<noteq> []\"", "lemma tensor_compose_distribution1:\nassumes wf1:\"mat (row_length A1) (length A1) A1\"\n    and wf2:\"mat (row_length A2) (length A2) A2\"\n    and wf3:\"mat (row_length B1) (length B1) B1\"\n    and wf4:\"mat (row_length B2) (length B2) B2\"\n    and matchAA:\"length A1 = row_length A2\" \n    and matchBB:\"length B1 = row_length B2\"\n    and non_Nil:\"(A1 \\<noteq> [])\\<and>(A2 \\<noteq> [])\\<and>(B1 \\<noteq> [])\\<and>(B2 \\<noteq> [])\" \n shows \"mat ((row_length A1)*(row_length B1)) \n            ((length A2)*(length B2)) \n                    ((A1\\<circ>A2)\\<otimes>(B1\\<circ>B2))\"", "lemma effective_tensor_compose_distribution1:\n \"matrix_match A1 A2 B1 B2 \\<Longrightarrow> mat ((row_length A1)*(row_length B1)) \n            ((length A2)*(length B2)) \n                    ((A1\\<circ>A2)\\<otimes>(B1\\<circ>B2))\"", "lemma tensor_compose_distribution2:\n assumes wf1:\"mat (row_length A1) (length A1) A1\"\n    and wf2:\"mat (row_length A2) (length A2) A2\"\n    and wf3:\"mat (row_length B1) (length B1) B1\"\n    and wf4:\"mat (row_length B2) (length B2) B2\"\n    and matchAA:\"length A1 = row_length A2\"\n    and matchBB:\"length B1 = row_length B2\"\n    and non_Nil:\"(A1 \\<noteq> [])\\<and>(A2 \\<noteq> [])\\<and>(B1 \\<noteq> [])\\<and>(B2 \\<noteq> [])\" \n shows \"mat ((row_length A1)*(row_length B1)) \n            ((length A2)*(length B2)) \n                    ((A1 \\<otimes> B1) \\<circ>(A2 \\<otimes>B2))\"", "theorem tensor_non_empty: assumes \"A \\<noteq> []\" and \"B \\<noteq> []\"\n shows \"A \\<otimes> B \\<noteq> []\"", "theorem non_empty_distribution:\n assumes \"mat nr1 n1 A1\" \n     and \"mat n1 nc1 A2\" \n     and \"mat nr2 n2 B1\" \n     and \"mat n2 nc2 B2\" \n     and \"A1 \\<noteq> []\" and \"B1 \\<noteq> []\" and \"A2 \\<noteq> []\" and \"B2 \\<noteq> []\" \n shows \"((A1\\<circ>A2)\\<otimes>(B1\\<circ>B2)) \\<noteq> []\"", "lemma effective_tensor_compose_distribution2:\"matrix_match A1 A2 B1 B2 \\<Longrightarrow> \n   mat ((row_length A1)*(row_length B1)) \n            ((length A2)*(length B2)) \n                    ((A1 \\<otimes> B1) \\<circ>(A2 \\<otimes>B2))\"", "theorem effective_matrix_Tensor_elements: \n fixes M1 M2 i j \n assumes \"i<((row_length M1)*(row_length M2))\"\n     and \"j < (length M1)*(length M2)\"\n     and \"mat (row_length M1) (length M1) M1\"\n     and \"mat (row_length M2) (length M2) M2\"\n shows\n \"((M1 \\<otimes> M2)!j!i) = f (M1!(j div (length M2))!(i div (row_length M2))) \n(M2!(j mod length M2)!(i mod (row_length M2)))\"", "theorem effective_matrix_Tensor_elements2: \n fixes M1 M2 \n assumes \"mat (row_length M1) (length M1) M1\"\n     and \"mat (row_length M2) (length M2) M2\"\n shows\n  \"(\\<forall>i <((row_length M1)*(row_length M2)).\n    \\<forall>j < ((length M1)*(length M2))\n       .((M1 \\<otimes> M2)!j!i) = f (M1!(j div (length M2))!(i div (row_length M2))) \n                             (M2!(j mod length M2)!(i mod (row_length M2))))\"", "theorem elements_matrix_distribution_1:\nassumes wf1:\"mat (row_length A1) (length A1) A1\"\n   and wf2:\"mat (row_length A2) (length A2) A2\"\n   and wf3:\"mat (row_length B1) (length B1) B1\"\n   and wf4:\"mat (row_length B2) (length B2) B2\"\n   and matchAA:\"length A1 = row_length A2\"\n   and matchBB:\"length B1 = row_length B2\"\n   and non_Nil:\"(A1 \\<noteq> [])\\<and>(A2 \\<noteq> [])\\<and>(B1 \\<noteq> [])\\<and>(B2 \\<noteq> [])\" \n   and \"i<(row_length A1)*(row_length B1)\" and \"j< (length A2)*(length B2)\"\nshows\n\"((matrix_mult A1  A2)\\<otimes>(matrix_mult B1  B2))!j!i\n  =  f (scalar_product (row A1 (i div (row_length B1))) \n                        (col A2  (j div (length B2))))\n       (scalar_product (row B1 (i mod (row_length B1))) \n                       (col B2 (j mod (length B2))))\"", "lemma effective_elements_matrix_distribution1:\n \"matrix_compose_cond A1 A2 B1 B2 i j \\<Longrightarrow>\n ((matrix_mult A1  A2)\\<otimes>(matrix_mult B1  B2))!j!i\n  =  f (scalar_product (row A1 (i div (row_length B1))) (col A2  (j div (length B2))))\n       (scalar_product (row B1 (i mod (row_length B1))) (col B2 (j mod (length B2))))\"", "lemma matrix_match_condn_1:\n\"matrix_match A1 A2 B1 B2 \n      \\<and>((i<(row_length A1)*(row_length B1))\n      \\<and>(j<(length A2)*(length B2)))\n       \\<Longrightarrow>  ((matrix_mult A1  A2)\\<otimes>(matrix_mult B1  B2))!j!i\n  =  f\n       (scalar_product \n                 (row A1 (i div (row_length B1))) \n                 (col A2  (j div (length B2))))\n       (scalar_product \n                 (row B1 (i mod (row_length B1))) \n                 (col B2 (j mod (length B2))))\"", "lemma effective_matrix_match_condn_1: \n assumes \"(matrix_match A1 A2 B1 B2) \"\n shows \"\\<forall>i j.((i<(row_length A1)*(row_length B1))\n             \\<and>(j<(length A2)*(length B2))\n              \\<longrightarrow>   ((A1 \\<circ>  A2)\\<otimes>(B1 \\<circ> B2))!j!i\n                        =  f \n                            (scalar_product \n                                  (row A1 (i div (row_length B1))) \n                                  (col A2  (j div (length B2))))\n                            (scalar_product \n                                  (row B1 (i mod (row_length B1))) \n                                  (col B2 (j mod (length B2)))))\"", "theorem elements_matrix_distribution2:\nfixes A1 A2 B1 B2 i j\nassumes wf1:\"mat (row_length A1) (length A1) A1\"\n   and wf2:\"mat (row_length A2) (length A2) A2\"\n   and wf3:\"mat (row_length B1) (length B1) B1\"\n   and wf4:\"mat (row_length B2) (length B2) B2\"\n   and matchAA:\"length A1 = row_length A2\"\n   and matchBB:\"length B1 = row_length B2\"\n   and non_Nil:\"(A1 \\<noteq> [])\\<and>(A2 \\<noteq> [])\\<and>(B1 \\<noteq> [])\\<and>(B2 \\<noteq> [])\"    \n         and i:\"i<(row_length A1)*(row_length B1)\" and j:\"j< (length A2)*(length B2)\" \nshows\n\"((A1 \\<otimes> B1)\\<circ>(A2 \\<otimes> B2))!j!i\n  =  scalar_product \n          (vec_vec_Tensor \n                    (row A1 (i div row_length B1)) \n                    (row B1 (i mod row_length B1))) \n          (vec_vec_Tensor \n                    (col A2 (j div length B2)) \n                    (col B2 (j mod length B2)))\"", "lemma matrix_match_condn_2:\n\"matrix_match A1 A2 B1 B2 \n \\<and>((i<(row_length A1)*(row_length B1))\n \\<and>(j<(length A2)*(length B2)))\n  \\<Longrightarrow> ((A1 \\<otimes> B1)\\<circ>(A2 \\<otimes> B2))!j!i\n          =  scalar_product \n                (vec_vec_Tensor \n                        (row A1 (i div row_length B1)) \n                        (row B1 (i mod row_length B1))) \n                (vec_vec_Tensor \n                        (col A2 (j div length B2)) \n                        (col B2 (j mod length B2)))\"", "lemma effective_matrix_match_condn_2: \n assumes \"(matrix_match A1 A2 B1 B2) \"\n shows \"\\<forall>i j.((i<(row_length A1)*(row_length B1))\n         \\<and>(j<(length A2)*(length B2))\n            \\<longrightarrow> ((A1 \\<otimes> B1)\\<circ>(A2 \\<otimes> B2))!j!i\n           =  scalar_product \n                  (vec_vec_Tensor \n                           (row A1 (i div row_length B1)) \n                           (row B1 (i mod row_length B1))) \n                  (vec_vec_Tensor \n                           (col A2 (j div length B2)) \n                           (col B2 (j mod length B2))))\"", "lemma zip_Nil:\"zip [] [] = []\"", "lemma zer_left_mult:\"f zer x = zer\"", "lemma zip_Cons:\"(length v = length w) \\<Longrightarrow> zip (a#v) (b#w) = (a,b)#(zip v w)\"", "lemma scalar_product_times:\n \"\\<forall>w1 w2.(length w1 = length w2) \\<and>(length w1 = n) \\<longrightarrow> \n           (f (x*y) (scalar_product w1 w2)) \n                      = (scalar_product \n                               (times x w1) \n                               (times y w2))\"", "lemma effective_scalar_product_times:\n assumes \"(length w1 = length w2)\"  \n shows \"(f (x*y) (scalar_product w1 w2)) \n                       = (scalar_product (times x w1) ( times y w2))\"", "lemma zip_append:\"(length zs = length ws)\\<and>(length xs = length ys) \n                       \\<Longrightarrow> (zip (xs@zs) (ys@ws)) = (zip xs ys)@(zip zs ws)\"", "lemma scalar_product_append:\n \"\\<forall>xs ys zs ws.(length zs = length ws)\n               \\<and>(length xs = length ys) \n               \\<and>(length xs = n)  \\<longrightarrow> \n                     (scalar_product (xs@zs) (ys@ws))\n                                   = (scalar_product xs ys)\n                                         +(scalar_product zs ws)\"", "lemma effective_scalar_product_append:\nassumes \"length zs = length ws\" and  \"(length xs = length ys)\"   \n shows \"(scalar_product (xs@zs) (ys@ws)) = (scalar_product xs ys)+(scalar_product zs ws)\"", "lemma scalar_product_distributivity:\n\"\\<forall>v1 v2 w1 w2.((length v1 = length v2)\\<and>(length v1 = n)\\<and> (length w1 = length w2)\n           \\<longrightarrow>  (scalar_product v1 v2)*(scalar_product w1 w2)\n      = scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)) \"", "lemma effective_scalar_product_distributivity:\n assumes \"length v1 = length v2\" and \"length w1 = length w2\"\n shows \"(scalar_product v1 v2)*(scalar_product w1 w2)\n      = scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2) \"", "lemma row_length_constant:assumes \"mat nr nc A\" and \"j < length A\" \n         shows \"length (A!j) = (row_length A)\"", "theorem row_col_match:\n fixes A1 A2 B1 B2 i j\n assumes wf1:\"mat (row_length A1) (length A1) A1\"\n    and wf2:\"mat (row_length A2) (length A2) A2\"\n    and wf3:\"mat (row_length B1) (length B1) B1\"\n    and wf4:\"mat (row_length B2) (length B2) B2\"\n    and matchAA:\"length A1 = row_length A2\"\n    and matchBB:\"length B1 = row_length B2\"\n    and non_Nil:\"(A1 \\<noteq> [])\\<and>(A2 \\<noteq> [])\\<and>(B1 \\<noteq> [])\\<and>(B2 \\<noteq> [])\"\n    and i:\"i<(row_length A1)*(row_length B1)\" and j:\"j< (length A2)*(length B2)\"\n shows \"length (row A1 (i div (row_length B1))) \n                 = length (col A2  (j div (length B2)))\"\n and \"length (row B1 (i mod (row_length B1))) \n                 = length (col B2 (j mod (length B2)))\"", "lemma effective_row_col_match: assumes \"matrix_match A1 A2 B1 B2\"\n shows \"\\<forall>i j. ((i<(row_length A1)*(row_length B1))\\<and>(j<(length A2)*(length B2))) \n       \\<longrightarrow>length (row A1 (i div (row_length B1))) = length (col A2  (j div (length B2)))\"\n  \"\\<forall>i j. ((i<(row_length A1)*(row_length B1))\\<and>(j<(length A2)*(length B2))) \n           \\<longrightarrow>length (row B1 (i mod (row_length B1))) = length (col B2 (j mod (length B2)))\"", "theorem prelim_element_match:\n \"matrix_match A1 A2 B1 B2 \\<Longrightarrow> (\\<forall>i j.((i<(row_length A1)*(row_length B1))\n                              \\<and>(j<(length A2)*(length B2))) \n         \\<longrightarrow>\n  (((A1 \\<circ> A2)\\<otimes>(B1 \\<circ>  B2))!j!i\n                  = ((A1 \\<otimes> B1)\\<circ>(A2 \\<otimes> B2))!j!i))\"", "theorem element_match:\n \"matrix_match A1 A2 B1 B2 \\<Longrightarrow>(\\<forall>i<((row_length A1)*(row_length B1)).\n                              \\<forall>j<((length A2)*(length B2)). \n(((A1 \\<circ> A2)\\<otimes>(B1 \\<circ>  B2))!j!i\n                  = ((A1 \\<otimes> B1)\\<circ>(A2 \\<otimes> B2))!j!i))\"", "lemma application: fixes m1 m2 \nshows \"\\<forall>m1 m2.(mat nr nc m1)\n              \\<and>(mat nr nc m2)\n              \\<and>(\\<forall> j < nc. \\<forall> i < nr. m1 ! j ! i = m2 ! j ! i)\n                  \\<longrightarrow> (m1 = m2)\"", "theorem tensor_compose_condn: \nassumes wf1:\"mat nr nc ((A1\\<circ>A2)\\<otimes>(B1\\<circ>B2))\"\n   and wf2:\"mat nr nc ((A1 \\<otimes> B1)\\<circ>(A2 \\<otimes> B2))\"\n   and wf3:\"\\<forall>j<nc.\\<forall>i<nr.(((A1 \\<circ> A2)\\<otimes>(B1 \\<circ>B2))!j!i  \n                              = ((A1 \\<otimes> B1)\\<circ>(A2 \\<otimes> B2))!j!i)\" \n shows \"((A1 \\<circ> A2) \\<otimes> (B1 \\<circ> B2))  \n                              = ((A1 \\<otimes> B1)\\<circ>(A2 \\<otimes> B2))\"", "theorem distributivity: \n assumes  \"matrix_match A1 A2 B1 B2\"\n shows \"((A1 \\<circ> A2)\\<otimes>(B1\\<circ>B2)) = ((A1 \\<otimes> B1)\\<circ>(A2 \\<otimes> B2))\""], "translations": [["", "lemma times_scalar_id: \"times id v = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.times id v = v", "by(induction v)(auto simp add:left_id)"], ["", "lemma times_vector_id: \"times v [id] = [v]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.times v [id] = [v]", "by(simp add:right_id)"], ["", "lemma preserving_length: \"length (times n y) = (length y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (local.times n y) = length y", "by(induction y)(auto)"], ["", "text\\<open>vec$\\_$vec$\\_$Tensor is the tensor product of two vectors. It is \nillustrated by the following relation\n \n$vec\\_vec\\_Tensor (v_1,v_2,...v_n) (w_1,w_2,...w_m) \n                 = (v_1 \\cdot w_1,...,v_1 \\cdot w_m,...\n                          , v_n \\cdot w_1 , ..., v_n \\cdot w_m)$\\<close>"], ["", "primrec vec_vec_Tensor:: \"'a vec \\<Rightarrow> 'a vec \\<Rightarrow> 'a vec\"\nwhere\n\"vec_vec_Tensor [] ys = []\"|\n\"vec_vec_Tensor (x#xs) ys = (times x ys)@(vec_vec_Tensor xs ys)\""], ["", "lemma vec_vec_Tensor_left_id: \"vec_vec_Tensor [id] v = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_vec_Tensor [id] v = v", "by(induction v)(auto simp add:left_id)"], ["", "lemma vec_vec_Tensor_right_id: \"vec_vec_Tensor v [id] = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_vec_Tensor v [id] = v", "by(induction v)(auto simp add:right_id)"], ["", "theorem vec_vec_Tensor_length : \n \"(length(vec_vec_Tensor x y)) = (length x)*(length y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (vec_vec_Tensor x y) = length x * length y", "by(induction x)(auto simp add: preserving_length)"], ["", "theorem vec_length: assumes \"vec m x\" and \"vec n y\"\nshows \"vec (m*n) (vec_vec_Tensor x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec (m * n) (vec_vec_Tensor x y)", "apply(simp add:vec_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (vec_vec_Tensor x y) = m * n", "apply(simp add:vec_vec_Tensor_length)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length x * length y = m * n", "apply (metis assms(1) assms(2) vec_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text\\<open>vec$\\_$mat$\\_$Tensor is the tensor product of two vectors. It is \nillusstrated by the following relation\n \nvec\\_mat\\_Tensor ($v_1,v_2,...v_n) (C_1,C_2,...C_m) \n                 = (v_1 \\cdot C_1,...,v_n \\cdot C_1,\n                               ...,v_1 \\cdot C_m , ..., v_n \\cdot C_m$)\\<close>"], ["", "primrec vec_mat_Tensor::\"'a vec \\<Rightarrow> 'a mat \\<Rightarrow>'a mat\"\nwhere\n\"vec_mat_Tensor xs []  = []\"|\n\"vec_mat_Tensor xs (ys#yss) = (vec_vec_Tensor xs ys)#(vec_mat_Tensor xs yss)\""], ["", "lemma vec_mat_Tensor_vector_id: \"vec_mat_Tensor [id] v = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_mat_Tensor [id] v = v", "by(induction v)(auto simp add: times_scalar_id)"], ["", "lemma vec_mat_Tensor_matrix_id: \"vec_mat_Tensor  v [[id]] = [v]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_mat_Tensor v [[id]] = [v]", "by(induction v)(auto simp add: right_id)"], ["", "theorem vec_mat_Tensor_length: \n \"length(vec_mat_Tensor xs ys) = length ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (vec_mat_Tensor xs ys) = length ys", "by(induction ys)(auto)"], ["", "theorem length_matrix: \n assumes \"mat nr nc (y#ys)\" and \"length v = k\"\n     and \"(vec_mat_Tensor v (y#ys) = x#xs)\" \n shows \"(vec (nr*k) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec (nr * k) x", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. vec (nr * k) x", "have \"vec_mat_Tensor v (y#ys) = (vec_vec_Tensor v y)#(vec_mat_Tensor v ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_mat_Tensor v (y # ys) = vec_vec_Tensor v y # vec_mat_Tensor v ys", "using vec_mat_Tensor_def assms"], ["proof (prove)\nusing this:\n  vec_mat_Tensor \\<equiv>\n  \\<lambda>uu uua.\n     rec_list (\\<lambda>xs. [])\n      (\\<lambda>ys yss yssa xs. vec_vec_Tensor xs ys # yssa xs) uua uu\n  mat nr nc (y # ys)\n  length v = k\n  vec_mat_Tensor v (y # ys) = x # xs\n\ngoal (1 subgoal):\n 1. vec_mat_Tensor v (y # ys) = vec_vec_Tensor v y # vec_mat_Tensor v ys", "by auto"], ["proof (state)\nthis:\n  vec_mat_Tensor v (y # ys) = vec_vec_Tensor v y # vec_mat_Tensor v ys\n\ngoal (1 subgoal):\n 1. vec (nr * k) x", "also"], ["proof (state)\nthis:\n  vec_mat_Tensor v (y # ys) = vec_vec_Tensor v y # vec_mat_Tensor v ys\n\ngoal (1 subgoal):\n 1. vec (nr * k) x", "have \"(vec_vec_Tensor v y) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_vec_Tensor v y = x", "using assms"], ["proof (prove)\nusing this:\n  mat nr nc (y # ys)\n  length v = k\n  vec_mat_Tensor v (y # ys) = x # xs\n\ngoal (1 subgoal):\n 1. vec_vec_Tensor v y = x", "by auto"], ["proof (state)\nthis:\n  vec_vec_Tensor v y = x\n\ngoal (1 subgoal):\n 1. vec (nr * k) x", "also"], ["proof (state)\nthis:\n  vec_vec_Tensor v y = x\n\ngoal (1 subgoal):\n 1. vec (nr * k) x", "have \"length y = nr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length y = nr", "using assms mat_def"], ["proof (prove)\nusing this:\n  mat nr nc (y # ys)\n  length v = k\n  vec_mat_Tensor v (y # ys) = x # xs\n  mat ?nr ?nc ?m = (length ?m = ?nc \\<and> Ball (set ?m) (vec ?nr))\n\ngoal (1 subgoal):\n 1. length y = nr", "by (metis in_set_member member_rec(1) vec_def)"], ["proof (state)\nthis:\n  length y = nr\n\ngoal (1 subgoal):\n 1. vec (nr * k) x", "from this"], ["proof (chain)\npicking this:\n  length y = nr", "have \"length (vec_vec_Tensor v y) = nr*k\""], ["proof (prove)\nusing this:\n  length y = nr\n\ngoal (1 subgoal):\n 1. length (vec_vec_Tensor v y) = nr * k", "using assms vec_vec_Tensor_length"], ["proof (prove)\nusing this:\n  length y = nr\n  mat nr nc (y # ys)\n  length v = k\n  vec_mat_Tensor v (y # ys) = x # xs\n  length (vec_vec_Tensor ?x ?y) = length ?x * length ?y\n\ngoal (1 subgoal):\n 1. length (vec_vec_Tensor v y) = nr * k", "by auto"], ["proof (state)\nthis:\n  length (vec_vec_Tensor v y) = nr * k\n\ngoal (1 subgoal):\n 1. vec (nr * k) x", "from this"], ["proof (chain)\npicking this:\n  length (vec_vec_Tensor v y) = nr * k", "have \"length x = nr*k\""], ["proof (prove)\nusing this:\n  length (vec_vec_Tensor v y) = nr * k\n\ngoal (1 subgoal):\n 1. length x = nr * k", "by (simp add: \\<open>vec_vec_Tensor v y = x\\<close>)"], ["proof (state)\nthis:\n  length x = nr * k\n\ngoal (1 subgoal):\n 1. vec (nr * k) x", "from this"], ["proof (chain)\npicking this:\n  length x = nr * k", "have \"vec (nr*k) x\""], ["proof (prove)\nusing this:\n  length x = nr * k\n\ngoal (1 subgoal):\n 1. vec (nr * k) x", "using vec_def"], ["proof (prove)\nusing this:\n  length x = nr * k\n  vec ?n ?x = (length ?x = ?n)\n\ngoal (1 subgoal):\n 1. vec (nr * k) x", "by auto"], ["proof (state)\nthis:\n  vec (nr * k) x\n\ngoal (1 subgoal):\n 1. vec (nr * k) x", "from this"], ["proof (chain)\npicking this:\n  vec (nr * k) x", "show ?thesis"], ["proof (prove)\nusing this:\n  vec (nr * k) x\n\ngoal (1 subgoal):\n 1. vec (nr * k) x", "by auto"], ["proof (state)\nthis:\n  vec (nr * k) x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma matrix_set_list: \n assumes \"mat nr nc M\" \n     and \"length v = k\"\n     and \" x \\<in> set M\" \n shows \"\\<exists>ys.\\<exists>zs.(ys@x#zs = M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ys zs. ys @ x # zs = M", "using assms set_def in_set_conv_decomp"], ["proof (prove)\nusing this:\n  mat nr nc M\n  length v = k\n  x \\<in> set M\n  set \\<equiv>\n  ctor_fold_list\n   (\\<lambda>z. set1_pre_list z \\<union> \\<Union> (set2_pre_list z))\n  (?x \\<in> set ?xs) = (\\<exists>ys zs. ?xs = ys @ ?x # zs)\n\ngoal (1 subgoal):\n 1. \\<exists>ys zs. ys @ x # zs = M", "by metis"], ["", "primrec reduct :: \"'a mat \\<Rightarrow> 'a mat\"\nwhere\n\"reduct [] = []\"\n|\"reduct (x#xs) = xs\""], ["", "lemma length_reduct: \n assumes \"m \\<noteq> []\"\n shows \"length (reduct m) +1  = (length m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (reduct m) + 1 = length m", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (length (reduct m)) = length m", "by (metis One_nat_def Suc_eq_plus1 assms list.size(4) neq_Nil_conv reduct.simps(2))"], ["", "lemma mat_empty_column_length: assumes \"mat nr nc M\" and \"M = []\"\nshows \"nc = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nc = 0", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. nc = 0", "have \"(length M = nc)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length M = nc", "using mat_def assms"], ["proof (prove)\nusing this:\n  mat ?nr ?nc ?m = (length ?m = ?nc \\<and> Ball (set ?m) (vec ?nr))\n  mat nr nc M\n  M = []\n\ngoal (1 subgoal):\n 1. length M = nc", "by metis"], ["proof (state)\nthis:\n  length M = nc\n\ngoal (1 subgoal):\n 1. nc = 0", "from this"], ["proof (chain)\npicking this:\n  length M = nc", "have \"nc = 0\""], ["proof (prove)\nusing this:\n  length M = nc\n\ngoal (1 subgoal):\n 1. nc = 0", "using assms"], ["proof (prove)\nusing this:\n  length M = nc\n  mat nr nc M\n  M = []\n\ngoal (1 subgoal):\n 1. nc = 0", "by auto"], ["proof (state)\nthis:\n  nc = 0\n\ngoal (1 subgoal):\n 1. nc = 0", "from this"], ["proof (chain)\npicking this:\n  nc = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  nc = 0\n\ngoal (1 subgoal):\n 1. nc = 0", "by simp"], ["proof (state)\nthis:\n  nc = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma vec_uniqueness: \n assumes \"vec m v\" \n     and \"vec n v\" \n shows \"m = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m = n", "using vec_def assms(1) assms(2)"], ["proof (prove)\nusing this:\n  vec ?n ?x = (length ?x = ?n)\n  vec m v\n  vec n v\n\ngoal (1 subgoal):\n 1. m = n", "by metis"], ["", "lemma mat_uniqueness: \n assumes \"mat nr1 nc M\" \n and \"mat nr2 nc M\" and \"z = hd M\" and \"M \\<noteq> []\"\n shows \"(\\<forall>x\\<in>(set M).(nr1 = nr2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set M. nr1 = nr2", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set M. nr1 = nr2", "have A:\"z \\<in> set M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<in> set M", "using assms(1) assms(3) assms(4) set_def mat_def"], ["proof (prove)\nusing this:\n  mat nr1 nc M\n  z = hd M\n  M \\<noteq> []\n  set \\<equiv>\n  ctor_fold_list\n   (\\<lambda>z. set1_pre_list z \\<union> \\<Union> (set2_pre_list z))\n  mat ?nr ?nc ?m = (length ?m = ?nc \\<and> Ball (set ?m) (vec ?nr))\n\ngoal (1 subgoal):\n 1. z \\<in> set M", "by (metis hd_in_set)"], ["proof (state)\nthis:\n  z \\<in> set M\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set M. nr1 = nr2", "have \"Ball (set M) (vec nr1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ball (set M) (vec nr1)", "using mat_def assms(1)"], ["proof (prove)\nusing this:\n  mat ?nr ?nc ?m = (length ?m = ?nc \\<and> Ball (set ?m) (vec ?nr))\n  mat nr1 nc M\n\ngoal (1 subgoal):\n 1. Ball (set M) (vec nr1)", "by auto"], ["proof (state)\nthis:\n  Ball (set M) (vec nr1)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set M. nr1 = nr2", "then"], ["proof (chain)\npicking this:\n  Ball (set M) (vec nr1)", "have step1: \"((x \\<in> (set M)) \\<longrightarrow> (vec nr1 x))\""], ["proof (prove)\nusing this:\n  Ball (set M) (vec nr1)\n\ngoal (1 subgoal):\n 1. x \\<in> set M \\<longrightarrow> vec nr1 x", "using Ball_def assms"], ["proof (prove)\nusing this:\n  Ball (set M) (vec nr1)\n  Ball ?A ?P = (\\<forall>x. x \\<in> ?A \\<longrightarrow> ?P x)\n  mat nr1 nc M\n  mat nr2 nc M\n  z = hd M\n  M \\<noteq> []\n\ngoal (1 subgoal):\n 1. x \\<in> set M \\<longrightarrow> vec nr1 x", "by auto"], ["proof (state)\nthis:\n  x \\<in> set M \\<longrightarrow> vec nr1 x\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set M. nr1 = nr2", "have \"Ball (set M) (vec nr2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ball (set M) (vec nr2)", "using mat_def assms(2)"], ["proof (prove)\nusing this:\n  mat ?nr ?nc ?m = (length ?m = ?nc \\<and> Ball (set ?m) (vec ?nr))\n  mat nr2 nc M\n\ngoal (1 subgoal):\n 1. Ball (set M) (vec nr2)", "by auto"], ["proof (state)\nthis:\n  Ball (set M) (vec nr2)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set M. nr1 = nr2", "then"], ["proof (chain)\npicking this:\n  Ball (set M) (vec nr2)", "have step2: \"((x \\<in> (set M)) \\<longrightarrow> (vec nr2 x))\""], ["proof (prove)\nusing this:\n  Ball (set M) (vec nr2)\n\ngoal (1 subgoal):\n 1. x \\<in> set M \\<longrightarrow> vec nr2 x", "using Ball_def assms"], ["proof (prove)\nusing this:\n  Ball (set M) (vec nr2)\n  Ball ?A ?P = (\\<forall>x. x \\<in> ?A \\<longrightarrow> ?P x)\n  mat nr1 nc M\n  mat nr2 nc M\n  z = hd M\n  M \\<noteq> []\n\ngoal (1 subgoal):\n 1. x \\<in> set M \\<longrightarrow> vec nr2 x", "by auto"], ["proof (state)\nthis:\n  x \\<in> set M \\<longrightarrow> vec nr2 x\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set M. nr1 = nr2", "from step1 and step2"], ["proof (chain)\npicking this:\n  x \\<in> set M \\<longrightarrow> vec nr1 x\n  x \\<in> set M \\<longrightarrow> vec nr2 x", "have step3:\"\\<forall>x.((x \\<in> (set M))\\<longrightarrow> ((vec nr1 x)\\<and> (vec nr2 x)))\""], ["proof (prove)\nusing this:\n  x \\<in> set M \\<longrightarrow> vec nr1 x\n  x \\<in> set M \\<longrightarrow> vec nr2 x\n\ngoal (1 subgoal):\n 1. \\<forall>x. x \\<in> set M \\<longrightarrow> vec nr1 x \\<and> vec nr2 x", "by (metis \\<open>Ball (set M) (vec nr1)\\<close> \\<open>Ball (set M) (vec nr2)\\<close>)"], ["proof (state)\nthis:\n  \\<forall>x. x \\<in> set M \\<longrightarrow> vec nr1 x \\<and> vec nr2 x\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set M. nr1 = nr2", "have \"((vec nr1 x)\\<and> (vec nr2 x)) \\<longrightarrow> (nr1 = nr2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec nr1 x \\<and> vec nr2 x \\<longrightarrow> nr1 = nr2", "using vec_uniqueness"], ["proof (prove)\nusing this:\n  \\<lbrakk>vec ?m ?v; vec ?n ?v\\<rbrakk> \\<Longrightarrow> ?m = ?n\n\ngoal (1 subgoal):\n 1. vec nr1 x \\<and> vec nr2 x \\<longrightarrow> nr1 = nr2", "by auto"], ["proof (state)\nthis:\n  vec nr1 x \\<and> vec nr2 x \\<longrightarrow> nr1 = nr2\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set M. nr1 = nr2", "with step3"], ["proof (chain)\npicking this:\n  \\<forall>x. x \\<in> set M \\<longrightarrow> vec nr1 x \\<and> vec nr2 x\n  vec nr1 x \\<and> vec nr2 x \\<longrightarrow> nr1 = nr2", "have \"(\\<forall>x.((x \\<in> (set M)) \\<longrightarrow>((nr1 = nr2))))\""], ["proof (prove)\nusing this:\n  \\<forall>x. x \\<in> set M \\<longrightarrow> vec nr1 x \\<and> vec nr2 x\n  vec nr1 x \\<and> vec nr2 x \\<longrightarrow> nr1 = nr2\n\ngoal (1 subgoal):\n 1. \\<forall>x. x \\<in> set M \\<longrightarrow> nr1 = nr2", "by (metis vec_uniqueness)"], ["proof (state)\nthis:\n  \\<forall>x. x \\<in> set M \\<longrightarrow> nr1 = nr2\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set M. nr1 = nr2", "then"], ["proof (chain)\npicking this:\n  \\<forall>x. x \\<in> set M \\<longrightarrow> nr1 = nr2", "have \"(\\<forall>x\\<in>(set M).(nr1 = nr2))\""], ["proof (prove)\nusing this:\n  \\<forall>x. x \\<in> set M \\<longrightarrow> nr1 = nr2\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set M. nr1 = nr2", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set M. nr1 = nr2\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set M. nr1 = nr2", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set M. nr1 = nr2", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set M. nr1 = nr2\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set M. nr1 = nr2", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set M. nr1 = nr2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mat_empty_row_length: assumes \"mat nr nc M\" and \"M = []\"\nshows \"mat 0 nc M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat 0 nc M", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. mat 0 nc M", "have \"set M = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set M = {}", "using mat_def assms  empty_set"], ["proof (prove)\nusing this:\n  mat ?nr ?nc ?m = (length ?m = ?nc \\<and> Ball (set ?m) (vec ?nr))\n  mat nr nc M\n  M = []\n  {} = set []\n\ngoal (1 subgoal):\n 1. set M = {}", "by auto"], ["proof (state)\nthis:\n  set M = {}\n\ngoal (1 subgoal):\n 1. mat 0 nc M", "then"], ["proof (chain)\npicking this:\n  set M = {}", "have \"Ball (set M) (vec 0)\""], ["proof (prove)\nusing this:\n  set M = {}\n\ngoal (1 subgoal):\n 1. Ball (set M) (vec 0)", "using Ball_def"], ["proof (prove)\nusing this:\n  set M = {}\n  Ball ?A ?P = (\\<forall>x. x \\<in> ?A \\<longrightarrow> ?P x)\n\ngoal (1 subgoal):\n 1. Ball (set M) (vec 0)", "by auto"], ["proof (state)\nthis:\n  Ball (set M) (vec 0)\n\ngoal (1 subgoal):\n 1. mat 0 nc M", "then"], ["proof (chain)\npicking this:\n  Ball (set M) (vec 0)", "have \"mat 0 nc M\""], ["proof (prove)\nusing this:\n  Ball (set M) (vec 0)\n\ngoal (1 subgoal):\n 1. mat 0 nc M", "using mat_def assms(1) assms(2) gen_length_code(1) length_code"], ["proof (prove)\nusing this:\n  Ball (set M) (vec 0)\n  mat ?nr ?nc ?m = (length ?m = ?nc \\<and> Ball (set ?m) (vec ?nr))\n  mat nr nc M\n  M = []\n  List.gen_length ?n [] = ?n\n  length = List.gen_length 0\n\ngoal (1 subgoal):\n 1. mat 0 nc M", "by (metis (full_types) )"], ["proof (state)\nthis:\n  mat 0 nc M\n\ngoal (1 subgoal):\n 1. mat 0 nc M", "then"], ["proof (chain)\npicking this:\n  mat 0 nc M", "show ?thesis"], ["proof (prove)\nusing this:\n  mat 0 nc M\n\ngoal (1 subgoal):\n 1. mat 0 nc M", "by auto"], ["proof (state)\nthis:\n  mat 0 nc M\n\ngoal:\nNo subgoals!", "qed"], ["", "abbreviation null_matrix::\"'a list list\"\nwhere\n\"null_matrix \\<equiv> [Nil] \""], ["", "lemma null_mat:\"null_matrix = [[]]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. null_matrix = null_matrix", "by auto"], ["", "lemma zero_matrix:\" mat 0 0 []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat 0 0 []", "using mat_def in_set_insert insert_Nil list.size(3) not_Cons_self2"], ["proof (prove)\nusing this:\n  mat ?nr ?nc ?m = (length ?m = ?nc \\<and> Ball (set ?m) (vec ?nr))\n  ?x \\<in> set ?xs \\<Longrightarrow> List.insert ?x ?xs = ?xs\n  List.insert ?x [] = [?x]\n  length [] = 0\n  ?x # ?xs \\<noteq> ?xs\n\ngoal (1 subgoal):\n 1. mat 0 0 []", "by (metis (full_types))"], ["", "text\\<open>row\\_length gives the length of the first row of a matrix. For a `valid'\nmatrix, it is equal to the number of rows\\<close>"], ["", "definition row_length:: \"'a mat \\<Rightarrow> nat\"\nwhere\n\"row_length xs \\<equiv> if (xs = []) then 0 else (length (hd xs))\""], ["", "lemma row_length_Nil: \n \"row_length [] =0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_length [] = 0", "using row_length_def"], ["proof (prove)\nusing this:\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n\ngoal (1 subgoal):\n 1. row_length [] = 0", "by (metis )"], ["", "lemma row_length_Null: \n \"row_length [[]] =0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_length null_matrix = 0", "using row_length_def"], ["proof (prove)\nusing this:\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n\ngoal (1 subgoal):\n 1. row_length null_matrix = 0", "by auto"], ["", "lemma row_length_vect_mat: \n \"row_length (vec_mat_Tensor v m)  = length v*(row_length m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_length (vec_mat_Tensor v m) = length v * row_length m", "proof(induct m)"], ["proof (state)\ngoal (2 subgoals):\n 1. row_length (vec_mat_Tensor v []) = length v * row_length []\n 2. \\<And>a m.\n       row_length (vec_mat_Tensor v m) =\n       length v * row_length m \\<Longrightarrow>\n       row_length (vec_mat_Tensor v (a # m)) = length v * row_length (a # m)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. row_length (vec_mat_Tensor v []) = length v * row_length []\n 2. \\<And>a m.\n       row_length (vec_mat_Tensor v m) =\n       length v * row_length m \\<Longrightarrow>\n       row_length (vec_mat_Tensor v (a # m)) = length v * row_length (a # m)", "have \"row_length [] = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_length [] = 0", "using row_length_Nil"], ["proof (prove)\nusing this:\n  row_length [] = 0\n\ngoal (1 subgoal):\n 1. row_length [] = 0", "by simp"], ["proof (state)\nthis:\n  row_length [] = 0\n\ngoal (2 subgoals):\n 1. row_length (vec_mat_Tensor v []) = length v * row_length []\n 2. \\<And>a m.\n       row_length (vec_mat_Tensor v m) =\n       length v * row_length m \\<Longrightarrow>\n       row_length (vec_mat_Tensor v (a # m)) = length v * row_length (a # m)", "moreover"], ["proof (state)\nthis:\n  row_length [] = 0\n\ngoal (2 subgoals):\n 1. row_length (vec_mat_Tensor v []) = length v * row_length []\n 2. \\<And>a m.\n       row_length (vec_mat_Tensor v m) =\n       length v * row_length m \\<Longrightarrow>\n       row_length (vec_mat_Tensor v (a # m)) = length v * row_length (a # m)", "have \"vec_mat_Tensor v [] = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_mat_Tensor v [] = []", "using vec_mat_Tensor.simps(1)"], ["proof (prove)\nusing this:\n  vec_mat_Tensor ?xs [] = []\n\ngoal (1 subgoal):\n 1. vec_mat_Tensor v [] = []", "by auto"], ["proof (state)\nthis:\n  vec_mat_Tensor v [] = []\n\ngoal (2 subgoals):\n 1. row_length (vec_mat_Tensor v []) = length v * row_length []\n 2. \\<And>a m.\n       row_length (vec_mat_Tensor v m) =\n       length v * row_length m \\<Longrightarrow>\n       row_length (vec_mat_Tensor v (a # m)) = length v * row_length (a # m)", "ultimately"], ["proof (chain)\npicking this:\n  row_length [] = 0\n  vec_mat_Tensor v [] = []", "have \n   \"row_length (vec_mat_Tensor v [])  = length v*(row_length [])\""], ["proof (prove)\nusing this:\n  row_length [] = 0\n  vec_mat_Tensor v [] = []\n\ngoal (1 subgoal):\n 1. row_length (vec_mat_Tensor v []) = length v * row_length []", "using mult_0_right"], ["proof (prove)\nusing this:\n  row_length [] = 0\n  vec_mat_Tensor v [] = []\n  ?m * 0 = 0\n\ngoal (1 subgoal):\n 1. row_length (vec_mat_Tensor v []) = length v * row_length []", "by (metis )"], ["proof (state)\nthis:\n  row_length (vec_mat_Tensor v []) = length v * row_length []\n\ngoal (2 subgoals):\n 1. row_length (vec_mat_Tensor v []) = length v * row_length []\n 2. \\<And>a m.\n       row_length (vec_mat_Tensor v m) =\n       length v * row_length m \\<Longrightarrow>\n       row_length (vec_mat_Tensor v (a # m)) = length v * row_length (a # m)", "then"], ["proof (chain)\npicking this:\n  row_length (vec_mat_Tensor v []) = length v * row_length []", "show ?case"], ["proof (prove)\nusing this:\n  row_length (vec_mat_Tensor v []) = length v * row_length []\n\ngoal (1 subgoal):\n 1. row_length (vec_mat_Tensor v []) = length v * row_length []", "by metis"], ["proof (state)\nthis:\n  row_length (vec_mat_Tensor v []) = length v * row_length []\n\ngoal (1 subgoal):\n 1. \\<And>a m.\n       row_length (vec_mat_Tensor v m) =\n       length v * row_length m \\<Longrightarrow>\n       row_length (vec_mat_Tensor v (a # m)) = length v * row_length (a # m)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a m.\n       row_length (vec_mat_Tensor v m) =\n       length v * row_length m \\<Longrightarrow>\n       row_length (vec_mat_Tensor v (a # m)) = length v * row_length (a # m)", "fix a m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a m.\n       row_length (vec_mat_Tensor v m) =\n       length v * row_length m \\<Longrightarrow>\n       row_length (vec_mat_Tensor v (a # m)) = length v * row_length (a # m)", "assume A:\"row_length (vec_mat_Tensor v m) = length v * row_length m\""], ["proof (state)\nthis:\n  row_length (vec_mat_Tensor v m) = length v * row_length m\n\ngoal (1 subgoal):\n 1. \\<And>a m.\n       row_length (vec_mat_Tensor v m) =\n       length v * row_length m \\<Longrightarrow>\n       row_length (vec_mat_Tensor v (a # m)) = length v * row_length (a # m)", "let ?case = \n         \"row_length (vec_mat_Tensor v (a#m)) = (length v)*(row_length (a#m))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a m.\n       row_length (vec_mat_Tensor v m) =\n       length v * row_length m \\<Longrightarrow>\n       row_length (vec_mat_Tensor v (a # m)) = length v * row_length (a # m)", "have A:\"row_length (a # m) = length a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_length (a # m) = length a", "using row_length_def   list.distinct(1)"], ["proof (prove)\nusing this:\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n  [] \\<noteq> ?x21.0 # ?x22.0\n\ngoal (1 subgoal):\n 1. row_length (a # m) = length a", "by auto"], ["proof (state)\nthis:\n  row_length (a # m) = length a\n\ngoal (1 subgoal):\n 1. \\<And>a m.\n       row_length (vec_mat_Tensor v m) =\n       length v * row_length m \\<Longrightarrow>\n       row_length (vec_mat_Tensor v (a # m)) = length v * row_length (a # m)", "have \"(vec_mat_Tensor v  (a#m)) = (vec_vec_Tensor v a)#(vec_mat_Tensor v m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_mat_Tensor v (a # m) = vec_vec_Tensor v a # vec_mat_Tensor v m", "using vec_mat_Tensor_def vec_mat_Tensor.simps(2)"], ["proof (prove)\nusing this:\n  vec_mat_Tensor \\<equiv>\n  \\<lambda>uu uua.\n     rec_list (\\<lambda>xs. [])\n      (\\<lambda>ys yss yssa xs. vec_vec_Tensor xs ys # yssa xs) uua uu\n  vec_mat_Tensor ?xs (?ys # ?yss) =\n  vec_vec_Tensor ?xs ?ys # vec_mat_Tensor ?xs ?yss\n\ngoal (1 subgoal):\n 1. vec_mat_Tensor v (a # m) = vec_vec_Tensor v a # vec_mat_Tensor v m", "by auto"], ["proof (state)\nthis:\n  vec_mat_Tensor v (a # m) = vec_vec_Tensor v a # vec_mat_Tensor v m\n\ngoal (1 subgoal):\n 1. \\<And>a m.\n       row_length (vec_mat_Tensor v m) =\n       length v * row_length m \\<Longrightarrow>\n       row_length (vec_mat_Tensor v (a # m)) = length v * row_length (a # m)", "from this"], ["proof (chain)\npicking this:\n  vec_mat_Tensor v (a # m) = vec_vec_Tensor v a # vec_mat_Tensor v m", "have \n       \"row_length (vec_mat_Tensor v (a#m)) = length (vec_vec_Tensor v a)\""], ["proof (prove)\nusing this:\n  vec_mat_Tensor v (a # m) = vec_vec_Tensor v a # vec_mat_Tensor v m\n\ngoal (1 subgoal):\n 1. row_length (vec_mat_Tensor v (a # m)) = length (vec_vec_Tensor v a)", "using row_length_def   list.distinct(1)  vec_mat_Tensor.simps(2)"], ["proof (prove)\nusing this:\n  vec_mat_Tensor v (a # m) = vec_vec_Tensor v a # vec_mat_Tensor v m\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n  [] \\<noteq> ?x21.0 # ?x22.0\n  vec_mat_Tensor ?xs (?ys # ?yss) =\n  vec_vec_Tensor ?xs ?ys # vec_mat_Tensor ?xs ?yss\n\ngoal (1 subgoal):\n 1. row_length (vec_mat_Tensor v (a # m)) = length (vec_vec_Tensor v a)", "by auto"], ["proof (state)\nthis:\n  row_length (vec_mat_Tensor v (a # m)) = length (vec_vec_Tensor v a)\n\ngoal (1 subgoal):\n 1. \\<And>a m.\n       row_length (vec_mat_Tensor v m) =\n       length v * row_length m \\<Longrightarrow>\n       row_length (vec_mat_Tensor v (a # m)) = length v * row_length (a # m)", "from this and vec_vec_Tensor_length"], ["proof (chain)\npicking this:\n  row_length (vec_mat_Tensor v (a # m)) = length (vec_vec_Tensor v a)\n  length (vec_vec_Tensor ?x ?y) = length ?x * length ?y", "have \n          \"row_length (vec_mat_Tensor v (a#m)) = (length v)*(length a)\""], ["proof (prove)\nusing this:\n  row_length (vec_mat_Tensor v (a # m)) = length (vec_vec_Tensor v a)\n  length (vec_vec_Tensor ?x ?y) = length ?x * length ?y\n\ngoal (1 subgoal):\n 1. row_length (vec_mat_Tensor v (a # m)) = length v * length a", "by auto"], ["proof (state)\nthis:\n  row_length (vec_mat_Tensor v (a # m)) = length v * length a\n\ngoal (1 subgoal):\n 1. \\<And>a m.\n       row_length (vec_mat_Tensor v m) =\n       length v * row_length m \\<Longrightarrow>\n       row_length (vec_mat_Tensor v (a # m)) = length v * row_length (a # m)", "from this and A"], ["proof (chain)\npicking this:\n  row_length (vec_mat_Tensor v (a # m)) = length v * length a\n  row_length (a # m) = length a", "have \n         \"row_length (vec_mat_Tensor v (a#m)) = (length v)*(row_length (a#m))\""], ["proof (prove)\nusing this:\n  row_length (vec_mat_Tensor v (a # m)) = length v * length a\n  row_length (a # m) = length a\n\ngoal (1 subgoal):\n 1. row_length (vec_mat_Tensor v (a # m)) = length v * row_length (a # m)", "by auto"], ["proof (state)\nthis:\n  row_length (vec_mat_Tensor v (a # m)) = length v * row_length (a # m)\n\ngoal (1 subgoal):\n 1. \\<And>a m.\n       row_length (vec_mat_Tensor v m) =\n       length v * row_length m \\<Longrightarrow>\n       row_length (vec_mat_Tensor v (a # m)) = length v * row_length (a # m)", "from this"], ["proof (chain)\npicking this:\n  row_length (vec_mat_Tensor v (a # m)) = length v * row_length (a # m)", "show ?case"], ["proof (prove)\nusing this:\n  row_length (vec_mat_Tensor v (a # m)) = length v * row_length (a # m)\n\ngoal (1 subgoal):\n 1. row_length (vec_mat_Tensor v (a # m)) = length v * row_length (a # m)", "by auto"], ["proof (state)\nthis:\n  row_length (vec_mat_Tensor v (a # m)) = length v * row_length (a # m)\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>Tensor is the tensor product of matrices\\<close>"], ["", "primrec Tensor::\" 'a mat \\<Rightarrow> 'a mat \\<Rightarrow>'a mat\" (infixl \"\\<otimes>\" 63)\nwhere\n\"Tensor [] xs = []\"|\n\"Tensor (x#xs) ys = (vec_mat_Tensor x ys)@(Tensor xs ys)\""], ["", "lemma Tensor_null: \"xs \\<otimes>[] = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<otimes> [] = []", "by(induction xs)(auto)"], ["", "text\\<open>Tensor commutes with left and right identity\\<close>"], ["", "lemma Tensor_left_id: \"  [[id]] \\<otimes> xs = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [[id]] \\<otimes> xs = xs", "by(induction xs)(auto simp add:times_scalar_id)"], ["", "lemma Tensor_right_id: \"  xs \\<otimes> [[id]] = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<otimes> [[id]] = xs", "by(induction xs)(auto simp add: vec_vec_Tensor_right_id)"], ["", "text\\<open>row$\\_$length of tensor product of matrices is the product of \ntheir respective row lengths\\<close>"], ["", "lemma row_length_mat: \n    \"(row_length (m1\\<otimes>m2)) = (row_length m1)*(row_length m2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_length (m1 \\<otimes> m2) = row_length m1 * row_length m2", "proof(induct m1)"], ["proof (state)\ngoal (2 subgoals):\n 1. row_length ([] \\<otimes> m2) = row_length [] * row_length m2\n 2. \\<And>a m1.\n       row_length (m1 \\<otimes> m2) =\n       row_length m1 * row_length m2 \\<Longrightarrow>\n       row_length (a # m1 \\<otimes> m2) =\n       row_length (a # m1) * row_length m2", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. row_length ([] \\<otimes> m2) = row_length [] * row_length m2\n 2. \\<And>a m1.\n       row_length (m1 \\<otimes> m2) =\n       row_length m1 * row_length m2 \\<Longrightarrow>\n       row_length (a # m1 \\<otimes> m2) =\n       row_length (a # m1) * row_length m2", "have \"row_length ([]\\<otimes>m2) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_length ([] \\<otimes> m2) = 0", "using Tensor.simps(1) row_length_def"], ["proof (prove)\nusing this:\n  [] \\<otimes> ?xs = []\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n\ngoal (1 subgoal):\n 1. row_length ([] \\<otimes> m2) = 0", "by metis"], ["proof (state)\nthis:\n  row_length ([] \\<otimes> m2) = 0\n\ngoal (2 subgoals):\n 1. row_length ([] \\<otimes> m2) = row_length [] * row_length m2\n 2. \\<And>a m1.\n       row_length (m1 \\<otimes> m2) =\n       row_length m1 * row_length m2 \\<Longrightarrow>\n       row_length (a # m1 \\<otimes> m2) =\n       row_length (a # m1) * row_length m2", "from this"], ["proof (chain)\npicking this:\n  row_length ([] \\<otimes> m2) = 0", "have \"row_length ([]\\<otimes>m2) = (row_length [])*(row_length m2)\""], ["proof (prove)\nusing this:\n  row_length ([] \\<otimes> m2) = 0\n\ngoal (1 subgoal):\n 1. row_length ([] \\<otimes> m2) = row_length [] * row_length m2", "using  row_length_Nil"], ["proof (prove)\nusing this:\n  row_length ([] \\<otimes> m2) = 0\n  row_length [] = 0\n\ngoal (1 subgoal):\n 1. row_length ([] \\<otimes> m2) = row_length [] * row_length m2", "by auto"], ["proof (state)\nthis:\n  row_length ([] \\<otimes> m2) = row_length [] * row_length m2\n\ngoal (2 subgoals):\n 1. row_length ([] \\<otimes> m2) = row_length [] * row_length m2\n 2. \\<And>a m1.\n       row_length (m1 \\<otimes> m2) =\n       row_length m1 * row_length m2 \\<Longrightarrow>\n       row_length (a # m1 \\<otimes> m2) =\n       row_length (a # m1) * row_length m2", "then"], ["proof (chain)\npicking this:\n  row_length ([] \\<otimes> m2) = row_length [] * row_length m2", "show ?case"], ["proof (prove)\nusing this:\n  row_length ([] \\<otimes> m2) = row_length [] * row_length m2\n\ngoal (1 subgoal):\n 1. row_length ([] \\<otimes> m2) = row_length [] * row_length m2", "by metis"], ["proof (state)\nthis:\n  row_length ([] \\<otimes> m2) = row_length [] * row_length m2\n\ngoal (1 subgoal):\n 1. \\<And>a m1.\n       row_length (m1 \\<otimes> m2) =\n       row_length m1 * row_length m2 \\<Longrightarrow>\n       row_length (a # m1 \\<otimes> m2) =\n       row_length (a # m1) * row_length m2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a m1.\n       row_length (m1 \\<otimes> m2) =\n       row_length m1 * row_length m2 \\<Longrightarrow>\n       row_length (a # m1 \\<otimes> m2) =\n       row_length (a # m1) * row_length m2", "fix a m1"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a m1.\n       row_length (m1 \\<otimes> m2) =\n       row_length m1 * row_length m2 \\<Longrightarrow>\n       row_length (a # m1 \\<otimes> m2) =\n       row_length (a # m1) * row_length m2", "assume \"row_length (m1 \\<otimes> m2) = row_length m1 * row_length m2\""], ["proof (state)\nthis:\n  row_length (m1 \\<otimes> m2) = row_length m1 * row_length m2\n\ngoal (1 subgoal):\n 1. \\<And>a m1.\n       row_length (m1 \\<otimes> m2) =\n       row_length m1 * row_length m2 \\<Longrightarrow>\n       row_length (a # m1 \\<otimes> m2) =\n       row_length (a # m1) * row_length m2", "let ?case = \n    \"row_length ((a # m1) \\<otimes> m2) = row_length (a # m1) * row_length m2\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a m1.\n       row_length (m1 \\<otimes> m2) =\n       row_length m1 * row_length m2 \\<Longrightarrow>\n       row_length (a # m1 \\<otimes> m2) =\n       row_length (a # m1) * row_length m2", "have B: \"row_length (a#m1) = length a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_length (a # m1) = length a", "using row_length_def   list.distinct(1)"], ["proof (prove)\nusing this:\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n  [] \\<noteq> ?x21.0 # ?x22.0\n\ngoal (1 subgoal):\n 1. row_length (a # m1) = length a", "by auto"], ["proof (state)\nthis:\n  row_length (a # m1) = length a\n\ngoal (1 subgoal):\n 1. \\<And>a m1.\n       row_length (m1 \\<otimes> m2) =\n       row_length m1 * row_length m2 \\<Longrightarrow>\n       row_length (a # m1 \\<otimes> m2) =\n       row_length (a # m1) * row_length m2", "have \"row_length ((a # m1) \\<otimes> m2) = row_length (a # m1) * row_length m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_length (a # m1 \\<otimes> m2) = row_length (a # m1) * row_length m2", "proof(induct m2)"], ["proof (state)\ngoal (2 subgoals):\n 1. row_length (a # m1 \\<otimes> []) = row_length (a # m1) * row_length []\n 2. \\<And>aa m2.\n       row_length (a # m1 \\<otimes> m2) =\n       row_length (a # m1) * row_length m2 \\<Longrightarrow>\n       row_length (a # m1 \\<otimes> aa # m2) =\n       row_length (a # m1) * row_length (aa # m2)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. row_length (a # m1 \\<otimes> []) = row_length (a # m1) * row_length []\n 2. \\<And>aa m2.\n       row_length (a # m1 \\<otimes> m2) =\n       row_length (a # m1) * row_length m2 \\<Longrightarrow>\n       row_length (a # m1 \\<otimes> aa # m2) =\n       row_length (a # m1) * row_length (aa # m2)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. row_length (a # m1 \\<otimes> []) = row_length (a # m1) * row_length []", "using Tensor_null row_length_def  mult_0_right"], ["proof (prove)\nusing this:\n  ?xs \\<otimes> [] = []\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n  ?m * 0 = 0\n\ngoal (1 subgoal):\n 1. row_length (a # m1 \\<otimes> []) = row_length (a # m1) * row_length []", "by (metis)"], ["proof (state)\nthis:\n  row_length (a # m1 \\<otimes> []) = row_length (a # m1) * row_length []\n\ngoal (1 subgoal):\n 1. \\<And>aa m2.\n       row_length (a # m1 \\<otimes> m2) =\n       row_length (a # m1) * row_length m2 \\<Longrightarrow>\n       row_length (a # m1 \\<otimes> aa # m2) =\n       row_length (a # m1) * row_length (aa # m2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa m2.\n       row_length (a # m1 \\<otimes> m2) =\n       row_length (a # m1) * row_length m2 \\<Longrightarrow>\n       row_length (a # m1 \\<otimes> aa # m2) =\n       row_length (a # m1) * row_length (aa # m2)", "fix aa m2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa m2.\n       row_length (a # m1 \\<otimes> m2) =\n       row_length (a # m1) * row_length m2 \\<Longrightarrow>\n       row_length (a # m1 \\<otimes> aa # m2) =\n       row_length (a # m1) * row_length (aa # m2)", "assume \"row_length (a # m1 \\<otimes> m2) = row_length (a # m1) * row_length m2\""], ["proof (state)\nthis:\n  row_length (a # m1 \\<otimes> m2) = row_length (a # m1) * row_length m2\n\ngoal (1 subgoal):\n 1. \\<And>aa m2.\n       row_length (a # m1 \\<otimes> m2) =\n       row_length (a # m1) * row_length m2 \\<Longrightarrow>\n       row_length (a # m1 \\<otimes> aa # m2) =\n       row_length (a # m1) * row_length (aa # m2)", "let ?case= \n      \"row_length (a # m1 \\<otimes> aa # m2) \n                  = row_length (a # m1) * row_length (aa # m2)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa m2.\n       row_length (a # m1 \\<otimes> m2) =\n       row_length (a # m1) * row_length m2 \\<Longrightarrow>\n       row_length (a # m1 \\<otimes> aa # m2) =\n       row_length (a # m1) * row_length (aa # m2)", "have \"aa#m2 \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aa # m2 \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  aa # m2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>aa m2.\n       row_length (a # m1 \\<otimes> m2) =\n       row_length (a # m1) * row_length m2 \\<Longrightarrow>\n       row_length (a # m1 \\<otimes> aa # m2) =\n       row_length (a # m1) * row_length (aa # m2)", "from this"], ["proof (chain)\npicking this:\n  aa # m2 \\<noteq> []", "have non_zero:\"(vec_mat_Tensor a (aa#m2)) \\<noteq> []\""], ["proof (prove)\nusing this:\n  aa # m2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. vec_mat_Tensor a (aa # m2) \\<noteq> []", "using vec_mat_Tensor_def"], ["proof (prove)\nusing this:\n  aa # m2 \\<noteq> []\n  vec_mat_Tensor \\<equiv>\n  \\<lambda>uu uua.\n     rec_list (\\<lambda>xs. [])\n      (\\<lambda>ys yss yssa xs. vec_vec_Tensor xs ys # yssa xs) uua uu\n\ngoal (1 subgoal):\n 1. vec_mat_Tensor a (aa # m2) \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  vec_mat_Tensor a (aa # m2) \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>aa m2.\n       row_length (a # m1 \\<otimes> m2) =\n       row_length (a # m1) * row_length m2 \\<Longrightarrow>\n       row_length (a # m1 \\<otimes> aa # m2) =\n       row_length (a # m1) * row_length (aa # m2)", "from this"], ["proof (chain)\npicking this:\n  vec_mat_Tensor a (aa # m2) \\<noteq> []", "have \n            \"hd ((vec_mat_Tensor a (aa#m2))@(m1\\<otimes>m2))\n                  = hd (vec_mat_Tensor a (aa#m2))\""], ["proof (prove)\nusing this:\n  vec_mat_Tensor a (aa # m2) \\<noteq> []\n\ngoal (1 subgoal):\n 1. hd (vec_mat_Tensor a (aa # m2) @ (m1 \\<otimes> m2)) =\n    hd (vec_mat_Tensor a (aa # m2))", "by auto"], ["proof (state)\nthis:\n  hd (vec_mat_Tensor a (aa # m2) @ (m1 \\<otimes> m2)) =\n  hd (vec_mat_Tensor a (aa # m2))\n\ngoal (1 subgoal):\n 1. \\<And>aa m2.\n       row_length (a # m1 \\<otimes> m2) =\n       row_length (a # m1) * row_length m2 \\<Longrightarrow>\n       row_length (a # m1 \\<otimes> aa # m2) =\n       row_length (a # m1) * row_length (aa # m2)", "from this"], ["proof (chain)\npicking this:\n  hd (vec_mat_Tensor a (aa # m2) @ (m1 \\<otimes> m2)) =\n  hd (vec_mat_Tensor a (aa # m2))", "have \n            \"hd ((a#m1)\\<otimes>(aa#m2)) = hd (vec_mat_Tensor a (aa#m2))\""], ["proof (prove)\nusing this:\n  hd (vec_mat_Tensor a (aa # m2) @ (m1 \\<otimes> m2)) =\n  hd (vec_mat_Tensor a (aa # m2))\n\ngoal (1 subgoal):\n 1. hd (a # m1 \\<otimes> aa # m2) = hd (vec_mat_Tensor a (aa # m2))", "using Tensor.simps(2)"], ["proof (prove)\nusing this:\n  hd (vec_mat_Tensor a (aa # m2) @ (m1 \\<otimes> m2)) =\n  hd (vec_mat_Tensor a (aa # m2))\n  ?x # ?xs \\<otimes> ?ys = vec_mat_Tensor ?x ?ys @ (?xs \\<otimes> ?ys)\n\ngoal (1 subgoal):\n 1. hd (a # m1 \\<otimes> aa # m2) = hd (vec_mat_Tensor a (aa # m2))", "by auto"], ["proof (state)\nthis:\n  hd (a # m1 \\<otimes> aa # m2) = hd (vec_mat_Tensor a (aa # m2))\n\ngoal (1 subgoal):\n 1. \\<And>aa m2.\n       row_length (a # m1 \\<otimes> m2) =\n       row_length (a # m1) * row_length m2 \\<Longrightarrow>\n       row_length (a # m1 \\<otimes> aa # m2) =\n       row_length (a # m1) * row_length (aa # m2)", "from this"], ["proof (chain)\npicking this:\n  hd (a # m1 \\<otimes> aa # m2) = hd (vec_mat_Tensor a (aa # m2))", "have s1: \"row_length ((a#m1)\\<otimes>(aa#m2)) \n                       = row_length (vec_mat_Tensor a (aa#m2))\""], ["proof (prove)\nusing this:\n  hd (a # m1 \\<otimes> aa # m2) = hd (vec_mat_Tensor a (aa # m2))\n\ngoal (1 subgoal):\n 1. row_length (a # m1 \\<otimes> aa # m2) =\n    row_length (vec_mat_Tensor a (aa # m2))", "using row_length_def  Nil_is_append_conv non_zero Tensor.simps(2)"], ["proof (prove)\nusing this:\n  hd (a # m1 \\<otimes> aa # m2) = hd (vec_mat_Tensor a (aa # m2))\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n  ([] = ?xs @ ?ys) = (?xs = [] \\<and> ?ys = [])\n  vec_mat_Tensor a (aa # m2) \\<noteq> []\n  ?x # ?xs \\<otimes> ?ys = vec_mat_Tensor ?x ?ys @ (?xs \\<otimes> ?ys)\n\ngoal (1 subgoal):\n 1. row_length (a # m1 \\<otimes> aa # m2) =\n    row_length (vec_mat_Tensor a (aa # m2))", "by auto"], ["proof (state)\nthis:\n  row_length (a # m1 \\<otimes> aa # m2) =\n  row_length (vec_mat_Tensor a (aa # m2))\n\ngoal (1 subgoal):\n 1. \\<And>aa m2.\n       row_length (a # m1 \\<otimes> m2) =\n       row_length (a # m1) * row_length m2 \\<Longrightarrow>\n       row_length (a # m1 \\<otimes> aa # m2) =\n       row_length (a # m1) * row_length (aa # m2)", "have \"row_length (vec_mat_Tensor a (aa#m2)) \n                    = (length a)*row_length(aa#m2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_length (vec_mat_Tensor a (aa # m2)) =\n    length a * row_length (aa # m2)", "using row_length_vect_mat"], ["proof (prove)\nusing this:\n  row_length (vec_mat_Tensor ?v ?m) = length ?v * row_length ?m\n\ngoal (1 subgoal):\n 1. row_length (vec_mat_Tensor a (aa # m2)) =\n    length a * row_length (aa # m2)", "by metis"], ["proof (state)\nthis:\n  row_length (vec_mat_Tensor a (aa # m2)) = length a * row_length (aa # m2)\n\ngoal (1 subgoal):\n 1. \\<And>aa m2.\n       row_length (a # m1 \\<otimes> m2) =\n       row_length (a # m1) * row_length m2 \\<Longrightarrow>\n       row_length (a # m1 \\<otimes> aa # m2) =\n       row_length (a # m1) * row_length (aa # m2)", "from this and s1"], ["proof (chain)\npicking this:\n  row_length (vec_mat_Tensor a (aa # m2)) = length a * row_length (aa # m2)\n  row_length (a # m1 \\<otimes> aa # m2) =\n  row_length (vec_mat_Tensor a (aa # m2))", "have \"row_length (vec_mat_Tensor a (aa#m2)) \n                             = (length a)*row_length(aa#m2)\""], ["proof (prove)\nusing this:\n  row_length (vec_mat_Tensor a (aa # m2)) = length a * row_length (aa # m2)\n  row_length (a # m1 \\<otimes> aa # m2) =\n  row_length (vec_mat_Tensor a (aa # m2))\n\ngoal (1 subgoal):\n 1. row_length (vec_mat_Tensor a (aa # m2)) =\n    length a * row_length (aa # m2)", "by auto"], ["proof (state)\nthis:\n  row_length (vec_mat_Tensor a (aa # m2)) = length a * row_length (aa # m2)\n\ngoal (1 subgoal):\n 1. \\<And>aa m2.\n       row_length (a # m1 \\<otimes> m2) =\n       row_length (a # m1) * row_length m2 \\<Longrightarrow>\n       row_length (a # m1 \\<otimes> aa # m2) =\n       row_length (a # m1) * row_length (aa # m2)", "from this and B"], ["proof (chain)\npicking this:\n  row_length (vec_mat_Tensor a (aa # m2)) = length a * row_length (aa # m2)\n  row_length (a # m1) = length a", "have \"row_length (vec_mat_Tensor a (aa#m2)) \n                           = (row_length (a#m1))*row_length(aa#m2)\""], ["proof (prove)\nusing this:\n  row_length (vec_mat_Tensor a (aa # m2)) = length a * row_length (aa # m2)\n  row_length (a # m1) = length a\n\ngoal (1 subgoal):\n 1. row_length (vec_mat_Tensor a (aa # m2)) =\n    row_length (a # m1) * row_length (aa # m2)", "by auto"], ["proof (state)\nthis:\n  row_length (vec_mat_Tensor a (aa # m2)) =\n  row_length (a # m1) * row_length (aa # m2)\n\ngoal (1 subgoal):\n 1. \\<And>aa m2.\n       row_length (a # m1 \\<otimes> m2) =\n       row_length (a # m1) * row_length m2 \\<Longrightarrow>\n       row_length (a # m1 \\<otimes> aa # m2) =\n       row_length (a # m1) * row_length (aa # m2)", "from this  and s1"], ["proof (chain)\npicking this:\n  row_length (vec_mat_Tensor a (aa # m2)) =\n  row_length (a # m1) * row_length (aa # m2)\n  row_length (a # m1 \\<otimes> aa # m2) =\n  row_length (vec_mat_Tensor a (aa # m2))", "show ?case"], ["proof (prove)\nusing this:\n  row_length (vec_mat_Tensor a (aa # m2)) =\n  row_length (a # m1) * row_length (aa # m2)\n  row_length (a # m1 \\<otimes> aa # m2) =\n  row_length (vec_mat_Tensor a (aa # m2))\n\ngoal (1 subgoal):\n 1. row_length (a # m1 \\<otimes> aa # m2) =\n    row_length (a # m1) * row_length (aa # m2)", "by auto"], ["proof (state)\nthis:\n  row_length (a # m1 \\<otimes> aa # m2) =\n  row_length (a # m1) * row_length (aa # m2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  row_length (a # m1 \\<otimes> m2) = row_length (a # m1) * row_length m2\n\ngoal (1 subgoal):\n 1. \\<And>a m1.\n       row_length (m1 \\<otimes> m2) =\n       row_length m1 * row_length m2 \\<Longrightarrow>\n       row_length (a # m1 \\<otimes> m2) =\n       row_length (a # m1) * row_length m2", "from this"], ["proof (chain)\npicking this:\n  row_length (a # m1 \\<otimes> m2) = row_length (a # m1) * row_length m2", "show ?case"], ["proof (prove)\nusing this:\n  row_length (a # m1 \\<otimes> m2) = row_length (a # m1) * row_length m2\n\ngoal (1 subgoal):\n 1. row_length (a # m1 \\<otimes> m2) = row_length (a # m1) * row_length m2", "by auto"], ["proof (state)\nthis:\n  row_length (a # m1 \\<otimes> m2) = row_length (a # m1) * row_length m2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma hd_set:assumes \"x \\<in> set (a#M)\" shows \"(x = a) \\<or> (x\\<in>(set M))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = a \\<or> x \\<in> set M", "using set_def assms set_ConsD"], ["proof (prove)\nusing this:\n  set \\<equiv>\n  ctor_fold_list\n   (\\<lambda>z. set1_pre_list z \\<union> \\<Union> (set2_pre_list z))\n  x \\<in> set (a # M)\n  ?y \\<in> set (?x # ?xs) \\<Longrightarrow> ?y = ?x \\<or> ?y \\<in> set ?xs\n\ngoal (1 subgoal):\n 1. x = a \\<or> x \\<in> set M", "by auto"], ["", "text\\<open>for every valid matrix can also be written in the following form\\<close>"], ["", "theorem matrix_row_length: \n assumes \"mat nr nc M\" \n shows \"mat (row_length M) (length M) M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length M) (length M) M", "proof(cases M)"], ["proof (state)\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow> mat (row_length M) (length M) M\n 2. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "case Nil"], ["proof (state)\nthis:\n  M = []\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow> mat (row_length M) (length M) M\n 2. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "have \"row_length M= 0 \""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_length M = 0", "using row_length_def"], ["proof (prove)\nusing this:\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n\ngoal (1 subgoal):\n 1. row_length M = 0", "by (metis Nil)"], ["proof (state)\nthis:\n  row_length M = 0\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow> mat (row_length M) (length M) M\n 2. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "moreover"], ["proof (state)\nthis:\n  row_length M = 0\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow> mat (row_length M) (length M) M\n 2. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "have \"length M = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length M = 0", "by (metis Nil list.size(3))"], ["proof (state)\nthis:\n  length M = 0\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow> mat (row_length M) (length M) M\n 2. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "moreover"], ["proof (state)\nthis:\n  length M = 0\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow> mat (row_length M) (length M) M\n 2. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "have \"mat 0 0 M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat 0 0 M", "using zero_matrix Nil"], ["proof (prove)\nusing this:\n  mat 0 0 []\n  M = []\n\ngoal (1 subgoal):\n 1. mat 0 0 M", "by auto"], ["proof (state)\nthis:\n  mat 0 0 M\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow> mat (row_length M) (length M) M\n 2. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "ultimately"], ["proof (chain)\npicking this:\n  row_length M = 0\n  length M = 0\n  mat 0 0 M", "show ?thesis"], ["proof (prove)\nusing this:\n  row_length M = 0\n  length M = 0\n  mat 0 0 M\n\ngoal (1 subgoal):\n 1. mat (row_length M) (length M) M", "using mat_empty_row_length row_length_def mat_def"], ["proof (prove)\nusing this:\n  row_length M = 0\n  length M = 0\n  mat 0 0 M\n  \\<lbrakk>mat ?nr ?nc ?M; ?M = []\\<rbrakk> \\<Longrightarrow> mat 0 ?nc ?M\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n  mat ?nr ?nc ?m = (length ?m = ?nc \\<and> Ball (set ?m) (vec ?nr))\n\ngoal (1 subgoal):\n 1. mat (row_length M) (length M) M", "by metis"], ["proof (state)\nthis:\n  mat (row_length M) (length M) M\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "case (Cons a N)"], ["proof (state)\nthis:\n  M = a # N\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "have 1: \"mat nr nc (a#N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat nr nc (a # N)", "using assms Cons"], ["proof (prove)\nusing this:\n  mat nr nc M\n  M = a # N\n\ngoal (1 subgoal):\n 1. mat nr nc (a # N)", "by auto"], ["proof (state)\nthis:\n  mat nr nc (a # N)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "from this"], ["proof (chain)\npicking this:\n  mat nr nc (a # N)", "have \"(x \\<in> set (a #N)) \\<longrightarrow> (x = a) \\<or> (x \\<in> (set N))\""], ["proof (prove)\nusing this:\n  mat nr nc (a # N)\n\ngoal (1 subgoal):\n 1. x \\<in> set (a # N) \\<longrightarrow> x = a \\<or> x \\<in> set N", "using hd_set"], ["proof (prove)\nusing this:\n  mat nr nc (a # N)\n  ?x \\<in> set (?a # ?M) \\<Longrightarrow> ?x = ?a \\<or> ?x \\<in> set ?M\n\ngoal (1 subgoal):\n 1. x \\<in> set (a # N) \\<longrightarrow> x = a \\<or> x \\<in> set N", "by auto"], ["proof (state)\nthis:\n  x \\<in> set (a # N) \\<longrightarrow> x = a \\<or> x \\<in> set N\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "from this and 1"], ["proof (chain)\npicking this:\n  x \\<in> set (a # N) \\<longrightarrow> x = a \\<or> x \\<in> set N\n  mat nr nc (a # N)", "have 2:\"vec nr a\""], ["proof (prove)\nusing this:\n  x \\<in> set (a # N) \\<longrightarrow> x = a \\<or> x \\<in> set N\n  mat nr nc (a # N)\n\ngoal (1 subgoal):\n 1. vec nr a", "using mat_def"], ["proof (prove)\nusing this:\n  x \\<in> set (a # N) \\<longrightarrow> x = a \\<or> x \\<in> set N\n  mat nr nc (a # N)\n  mat ?nr ?nc ?m = (length ?m = ?nc \\<and> Ball (set ?m) (vec ?nr))\n\ngoal (1 subgoal):\n 1. vec nr a", "by (metis Ball_set_list_all list_all_simps(1))"], ["proof (state)\nthis:\n  vec nr a\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "have \"row_length (a#N) = length a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_length (a # N) = length a", "using row_length_def Cons  list.distinct(1)"], ["proof (prove)\nusing this:\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n  M = a # N\n  [] \\<noteq> ?x21.0 # ?x22.0\n\ngoal (1 subgoal):\n 1. row_length (a # N) = length a", "by auto"], ["proof (state)\nthis:\n  row_length (a # N) = length a\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "from this"], ["proof (chain)\npicking this:\n  row_length (a # N) = length a", "have \" vec (row_length (a#N)) a\""], ["proof (prove)\nusing this:\n  row_length (a # N) = length a\n\ngoal (1 subgoal):\n 1. vec (row_length (a # N)) a", "using vec_def"], ["proof (prove)\nusing this:\n  row_length (a # N) = length a\n  vec ?n ?x = (length ?x = ?n)\n\ngoal (1 subgoal):\n 1. vec (row_length (a # N)) a", "by auto"], ["proof (state)\nthis:\n  vec (row_length (a # N)) a\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "from this and 2"], ["proof (chain)\npicking this:\n  vec (row_length (a # N)) a\n  vec nr a", "have 3:\"(row_length M)  = nr\""], ["proof (prove)\nusing this:\n  vec (row_length (a # N)) a\n  vec nr a\n\ngoal (1 subgoal):\n 1. row_length M = nr", "using vec_uniqueness Cons"], ["proof (prove)\nusing this:\n  vec (row_length (a # N)) a\n  vec nr a\n  \\<lbrakk>vec ?m ?v; vec ?n ?v\\<rbrakk> \\<Longrightarrow> ?m = ?n\n  M = a # N\n\ngoal (1 subgoal):\n 1. row_length M = nr", "by auto"], ["proof (state)\nthis:\n  row_length M = nr\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "have \" nc = (length M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nc = length M", "using 1 and mat_def and assms"], ["proof (prove)\nusing this:\n  mat nr nc (a # N)\n  mat ?nr ?nc ?m = (length ?m = ?nc \\<and> Ball (set ?m) (vec ?nr))\n  mat nr nc M\n\ngoal (1 subgoal):\n 1. nc = length M", "by metis"], ["proof (state)\nthis:\n  nc = length M\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "with 3"], ["proof (chain)\npicking this:\n  row_length M = nr\n  nc = length M", "have \"mat (row_length M) (length M) M\""], ["proof (prove)\nusing this:\n  row_length M = nr\n  nc = length M\n\ngoal (1 subgoal):\n 1. mat (row_length M) (length M) M", "using assms"], ["proof (prove)\nusing this:\n  row_length M = nr\n  nc = length M\n  mat nr nc M\n\ngoal (1 subgoal):\n 1. mat (row_length M) (length M) M", "by auto"], ["proof (state)\nthis:\n  mat (row_length M) (length M) M\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "from this"], ["proof (chain)\npicking this:\n  mat (row_length M) (length M) M", "show ?thesis"], ["proof (prove)\nusing this:\n  mat (row_length M) (length M) M\n\ngoal (1 subgoal):\n 1. mat (row_length M) (length M) M", "by auto"], ["proof (state)\nthis:\n  mat (row_length M) (length M) M\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reduct_matrix: \n assumes \"mat (row_length (a#M)) (length (a#M)) (a#M)\"\n shows \"mat (row_length M) (length M) M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length M) (length M) M", "proof(cases M)"], ["proof (state)\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow> mat (row_length M) (length M) M\n 2. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "case Nil"], ["proof (state)\nthis:\n  M = []\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow> mat (row_length M) (length M) M\n 2. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length M) (length M) M", "using row_length_def zero_matrix Nil  list.size(3)"], ["proof (prove)\nusing this:\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n  mat 0 0 []\n  M = []\n  length [] = 0\n\ngoal (1 subgoal):\n 1. mat (row_length M) (length M) M", "by (metis)"], ["proof (state)\nthis:\n  mat (row_length M) (length M) M\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "case (Cons b N)"], ["proof (state)\nthis:\n  M = b # N\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "have 1: \"b \\<in> (set M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<in> set M", "using set_def  Cons ListMem_iff elem"], ["proof (prove)\nusing this:\n  set \\<equiv>\n  ctor_fold_list\n   (\\<lambda>z. set1_pre_list z \\<union> \\<Union> (set2_pre_list z))\n  M = b # N\n  ListMem ?x ?xs = (?x \\<in> set ?xs)\n  ListMem ?x (?x # ?xs)\n\ngoal (1 subgoal):\n 1. b \\<in> set M", "by auto"], ["proof (state)\nthis:\n  b \\<in> set M\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "have \"mat (row_length (a#M)) (length (a#M)) (a#M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length (a # M)) (length (a # M)) (a # M)", "using assms"], ["proof (prove)\nusing this:\n  mat (row_length (a # M)) (length (a # M)) (a # M)\n\ngoal (1 subgoal):\n 1. mat (row_length (a # M)) (length (a # M)) (a # M)", "by auto"], ["proof (state)\nthis:\n  mat (row_length (a # M)) (length (a # M)) (a # M)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "then"], ["proof (chain)\npicking this:\n  mat (row_length (a # M)) (length (a # M)) (a # M)", "have \"(x \\<in> (set (a#M))) \\<longrightarrow> ((x = a) \\<or> (x \\<in> set M))\""], ["proof (prove)\nusing this:\n  mat (row_length (a # M)) (length (a # M)) (a # M)\n\ngoal (1 subgoal):\n 1. x \\<in> set (a # M) \\<longrightarrow> x = a \\<or> x \\<in> set M", "by auto"], ["proof (state)\nthis:\n  x \\<in> set (a # M) \\<longrightarrow> x = a \\<or> x \\<in> set M\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "then"], ["proof (chain)\npicking this:\n  x \\<in> set (a # M) \\<longrightarrow> x = a \\<or> x \\<in> set M", "have \" (x \\<in> (set (a#M))) \\<longrightarrow> (vec (row_length (a#M)) x)\""], ["proof (prove)\nusing this:\n  x \\<in> set (a # M) \\<longrightarrow> x = a \\<or> x \\<in> set M\n\ngoal (1 subgoal):\n 1. x \\<in> set (a # M) \\<longrightarrow> vec (row_length (a # M)) x", "using mat_def Ball_def assms"], ["proof (prove)\nusing this:\n  x \\<in> set (a # M) \\<longrightarrow> x = a \\<or> x \\<in> set M\n  mat ?nr ?nc ?m = (length ?m = ?nc \\<and> Ball (set ?m) (vec ?nr))\n  Ball ?A ?P = (\\<forall>x. x \\<in> ?A \\<longrightarrow> ?P x)\n  mat (row_length (a # M)) (length (a # M)) (a # M)\n\ngoal (1 subgoal):\n 1. x \\<in> set (a # M) \\<longrightarrow> vec (row_length (a # M)) x", "by metis"], ["proof (state)\nthis:\n  x \\<in> set (a # M) \\<longrightarrow> vec (row_length (a # M)) x\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "then"], ["proof (chain)\npicking this:\n  x \\<in> set (a # M) \\<longrightarrow> vec (row_length (a # M)) x", "have \"(x \\<in> (set (a#M))) \\<longrightarrow> (vec (length a) x)\""], ["proof (prove)\nusing this:\n  x \\<in> set (a # M) \\<longrightarrow> vec (row_length (a # M)) x\n\ngoal (1 subgoal):\n 1. x \\<in> set (a # M) \\<longrightarrow> vec (length a) x", "using row_length_def  list.distinct(1)"], ["proof (prove)\nusing this:\n  x \\<in> set (a # M) \\<longrightarrow> vec (row_length (a # M)) x\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n  [] \\<noteq> ?x21.0 # ?x22.0\n\ngoal (1 subgoal):\n 1. x \\<in> set (a # M) \\<longrightarrow> vec (length a) x", "by auto"], ["proof (state)\nthis:\n  x \\<in> set (a # M) \\<longrightarrow> vec (length a) x\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "then"], ["proof (chain)\npicking this:\n  x \\<in> set (a # M) \\<longrightarrow> vec (length a) x", "have 2:\"x \\<in> (set M) \\<longrightarrow> (vec (length a) x)\""], ["proof (prove)\nusing this:\n  x \\<in> set (a # M) \\<longrightarrow> vec (length a) x\n\ngoal (1 subgoal):\n 1. x \\<in> set M \\<longrightarrow> vec (length a) x", "by auto"], ["proof (state)\nthis:\n  x \\<in> set M \\<longrightarrow> vec (length a) x\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "with 1"], ["proof (chain)\npicking this:\n  b \\<in> set M\n  x \\<in> set M \\<longrightarrow> vec (length a) x", "have 3:\"(vec (length a) b)\""], ["proof (prove)\nusing this:\n  b \\<in> set M\n  x \\<in> set M \\<longrightarrow> vec (length a) x\n\ngoal (1 subgoal):\n 1. vec (length a) b", "using assms in_set_member mat_def member_rec(1) vec_def"], ["proof (prove)\nusing this:\n  b \\<in> set M\n  x \\<in> set M \\<longrightarrow> vec (length a) x\n  mat (row_length (a # M)) (length (a # M)) (a # M)\n  (?x \\<in> set ?xs) = List.member ?xs ?x\n  mat ?nr ?nc ?m = (length ?m = ?nc \\<and> Ball (set ?m) (vec ?nr))\n  List.member (?x # ?xs) ?y = (?x = ?y \\<or> List.member ?xs ?y)\n  vec ?n ?x = (length ?x = ?n)\n\ngoal (1 subgoal):\n 1. vec (length a) b", "by metis"], ["proof (state)\nthis:\n  vec (length a) b\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "have 5: \"(vec (length b) b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec (length b) b", "using vec_def"], ["proof (prove)\nusing this:\n  vec ?n ?x = (length ?x = ?n)\n\ngoal (1 subgoal):\n 1. vec (length b) b", "by auto"], ["proof (state)\nthis:\n  vec (length b) b\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "with 3"], ["proof (chain)\npicking this:\n  vec (length a) b\n  vec (length b) b", "have \"(length a) = (length b)\""], ["proof (prove)\nusing this:\n  vec (length a) b\n  vec (length b) b\n\ngoal (1 subgoal):\n 1. length a = length b", "using vec_uniqueness"], ["proof (prove)\nusing this:\n  vec (length a) b\n  vec (length b) b\n  \\<lbrakk>vec ?m ?v; vec ?n ?v\\<rbrakk> \\<Longrightarrow> ?m = ?n\n\ngoal (1 subgoal):\n 1. length a = length b", "by auto"], ["proof (state)\nthis:\n  length a = length b\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "with 2"], ["proof (chain)\npicking this:\n  x \\<in> set M \\<longrightarrow> vec (length a) x\n  length a = length b", "have 4: \"x \\<in> (set M) \\<longrightarrow> (vec (length b) x)\""], ["proof (prove)\nusing this:\n  x \\<in> set M \\<longrightarrow> vec (length a) x\n  length a = length b\n\ngoal (1 subgoal):\n 1. x \\<in> set M \\<longrightarrow> vec (length b) x", "by auto"], ["proof (state)\nthis:\n  x \\<in> set M \\<longrightarrow> vec (length b) x\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "have 6: \"row_length M = (length b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_length M = length b", "using row_length_def   Cons list.distinct(1)"], ["proof (prove)\nusing this:\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n  M = b # N\n  [] \\<noteq> ?x21.0 # ?x22.0\n\ngoal (1 subgoal):\n 1. row_length M = length b", "by auto"], ["proof (state)\nthis:\n  row_length M = length b\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "with 4"], ["proof (chain)\npicking this:\n  x \\<in> set M \\<longrightarrow> vec (length b) x\n  row_length M = length b", "have \"x \\<in> (set M) \\<longrightarrow> (vec (row_length M) x)\""], ["proof (prove)\nusing this:\n  x \\<in> set M \\<longrightarrow> vec (length b) x\n  row_length M = length b\n\ngoal (1 subgoal):\n 1. x \\<in> set M \\<longrightarrow> vec (row_length M) x", "by auto"], ["proof (state)\nthis:\n  x \\<in> set M \\<longrightarrow> vec (row_length M) x\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "then"], ["proof (chain)\npicking this:\n  x \\<in> set M \\<longrightarrow> vec (row_length M) x", "have \"(\\<forall>x. (x \\<in> (set M) \\<longrightarrow> (vec (row_length M) x)))\""], ["proof (prove)\nusing this:\n  x \\<in> set M \\<longrightarrow> vec (row_length M) x\n\ngoal (1 subgoal):\n 1. \\<forall>x. x \\<in> set M \\<longrightarrow> vec (row_length M) x", "using Cons 5 6 assms in_set_member mat_def member_rec(1) \n         vec_uniqueness"], ["proof (prove)\nusing this:\n  x \\<in> set M \\<longrightarrow> vec (row_length M) x\n  M = b # N\n  vec (length b) b\n  row_length M = length b\n  mat (row_length (a # M)) (length (a # M)) (a # M)\n  (?x \\<in> set ?xs) = List.member ?xs ?x\n  mat ?nr ?nc ?m = (length ?m = ?nc \\<and> Ball (set ?m) (vec ?nr))\n  List.member (?x # ?xs) ?y = (?x = ?y \\<or> List.member ?xs ?y)\n  \\<lbrakk>vec ?m ?v; vec ?n ?v\\<rbrakk> \\<Longrightarrow> ?m = ?n\n\ngoal (1 subgoal):\n 1. \\<forall>x. x \\<in> set M \\<longrightarrow> vec (row_length M) x", "by metis"], ["proof (state)\nthis:\n  \\<forall>x. x \\<in> set M \\<longrightarrow> vec (row_length M) x\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "then"], ["proof (chain)\npicking this:\n  \\<forall>x. x \\<in> set M \\<longrightarrow> vec (row_length M) x", "have \"Ball (set M) (vec (row_length M))\""], ["proof (prove)\nusing this:\n  \\<forall>x. x \\<in> set M \\<longrightarrow> vec (row_length M) x\n\ngoal (1 subgoal):\n 1. Ball (set M) (vec (row_length M))", "using Ball_def"], ["proof (prove)\nusing this:\n  \\<forall>x. x \\<in> set M \\<longrightarrow> vec (row_length M) x\n  Ball ?A ?P = (\\<forall>x. x \\<in> ?A \\<longrightarrow> ?P x)\n\ngoal (1 subgoal):\n 1. Ball (set M) (vec (row_length M))", "by auto"], ["proof (state)\nthis:\n  Ball (set M) (vec (row_length M))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "then"], ["proof (chain)\npicking this:\n  Ball (set M) (vec (row_length M))", "have \"(mat (row_length M) (length M) M)\""], ["proof (prove)\nusing this:\n  Ball (set M) (vec (row_length M))\n\ngoal (1 subgoal):\n 1. mat (row_length M) (length M) M", "using mat_def"], ["proof (prove)\nusing this:\n  Ball (set M) (vec (row_length M))\n  mat ?nr ?nc ?m = (length ?m = ?nc \\<and> Ball (set ?m) (vec ?nr))\n\ngoal (1 subgoal):\n 1. mat (row_length M) (length M) M", "by auto"], ["proof (state)\nthis:\n  mat (row_length M) (length M) M\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow> mat (row_length M) (length M) M", "then"], ["proof (chain)\npicking this:\n  mat (row_length M) (length M) M", "show ?thesis"], ["proof (prove)\nusing this:\n  mat (row_length M) (length M) M\n\ngoal (1 subgoal):\n 1. mat (row_length M) (length M) M", "by auto"], ["proof (state)\nthis:\n  mat (row_length M) (length M) M\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem well_defined_vec_mat_Tensor:\n\"(mat (row_length M) (length M) M) \\<Longrightarrow>\n                  (mat \n                    ((row_length M)*(length v)) \n                    (length M) \n                           (vec_mat_Tensor v M))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length M) (length M) M \\<Longrightarrow>\n    mat (row_length M * length v) (length M) (vec_mat_Tensor v M)", "proof(induct M)"], ["proof (state)\ngoal (2 subgoals):\n 1. mat (row_length []) (length []) [] \\<Longrightarrow>\n    mat (row_length [] * length v) (length []) (vec_mat_Tensor v [])\n 2. \\<And>a M.\n       \\<lbrakk>mat (row_length M) (length M) M \\<Longrightarrow>\n                mat (row_length M * length v) (length M)\n                 (vec_mat_Tensor v M);\n        mat (row_length (a # M)) (length (a # M)) (a # M)\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M) * length v)\n                          (length (a # M)) (vec_mat_Tensor v (a # M))", "case Nil"], ["proof (state)\nthis:\n  mat (row_length []) (length []) []\n\ngoal (2 subgoals):\n 1. mat (row_length []) (length []) [] \\<Longrightarrow>\n    mat (row_length [] * length v) (length []) (vec_mat_Tensor v [])\n 2. \\<And>a M.\n       \\<lbrakk>mat (row_length M) (length M) M \\<Longrightarrow>\n                mat (row_length M * length v) (length M)\n                 (vec_mat_Tensor v M);\n        mat (row_length (a # M)) (length (a # M)) (a # M)\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M) * length v)\n                          (length (a # M)) (vec_mat_Tensor v (a # M))", "have \"(vec_mat_Tensor v []) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_mat_Tensor v [] = []", "using vec_mat_Tensor.simps(1) Nil"], ["proof (prove)\nusing this:\n  vec_mat_Tensor ?xs [] = []\n  mat (row_length []) (length []) []\n\ngoal (1 subgoal):\n 1. vec_mat_Tensor v [] = []", "by simp"], ["proof (state)\nthis:\n  vec_mat_Tensor v [] = []\n\ngoal (2 subgoals):\n 1. mat (row_length []) (length []) [] \\<Longrightarrow>\n    mat (row_length [] * length v) (length []) (vec_mat_Tensor v [])\n 2. \\<And>a M.\n       \\<lbrakk>mat (row_length M) (length M) M \\<Longrightarrow>\n                mat (row_length M * length v) (length M)\n                 (vec_mat_Tensor v M);\n        mat (row_length (a # M)) (length (a # M)) (a # M)\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M) * length v)\n                          (length (a # M)) (vec_mat_Tensor v (a # M))", "moreover"], ["proof (state)\nthis:\n  vec_mat_Tensor v [] = []\n\ngoal (2 subgoals):\n 1. mat (row_length []) (length []) [] \\<Longrightarrow>\n    mat (row_length [] * length v) (length []) (vec_mat_Tensor v [])\n 2. \\<And>a M.\n       \\<lbrakk>mat (row_length M) (length M) M \\<Longrightarrow>\n                mat (row_length M * length v) (length M)\n                 (vec_mat_Tensor v M);\n        mat (row_length (a # M)) (length (a # M)) (a # M)\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M) * length v)\n                          (length (a # M)) (vec_mat_Tensor v (a # M))", "have \"(row_length [] = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_length [] = 0", "using row_length_def Nil"], ["proof (prove)\nusing this:\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n  mat (row_length []) (length []) []\n\ngoal (1 subgoal):\n 1. row_length [] = 0", "by metis"], ["proof (state)\nthis:\n  row_length [] = 0\n\ngoal (2 subgoals):\n 1. mat (row_length []) (length []) [] \\<Longrightarrow>\n    mat (row_length [] * length v) (length []) (vec_mat_Tensor v [])\n 2. \\<And>a M.\n       \\<lbrakk>mat (row_length M) (length M) M \\<Longrightarrow>\n                mat (row_length M * length v) (length M)\n                 (vec_mat_Tensor v M);\n        mat (row_length (a # M)) (length (a # M)) (a # M)\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M) * length v)\n                          (length (a # M)) (vec_mat_Tensor v (a # M))", "moreover"], ["proof (state)\nthis:\n  row_length [] = 0\n\ngoal (2 subgoals):\n 1. mat (row_length []) (length []) [] \\<Longrightarrow>\n    mat (row_length [] * length v) (length []) (vec_mat_Tensor v [])\n 2. \\<And>a M.\n       \\<lbrakk>mat (row_length M) (length M) M \\<Longrightarrow>\n                mat (row_length M * length v) (length M)\n                 (vec_mat_Tensor v M);\n        mat (row_length (a # M)) (length (a # M)) (a # M)\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M) * length v)\n                          (length (a # M)) (vec_mat_Tensor v (a # M))", "have \"(length []) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length [] = 0", "using Nil"], ["proof (prove)\nusing this:\n  mat (row_length []) (length []) []\n\ngoal (1 subgoal):\n 1. length [] = 0", "by simp"], ["proof (state)\nthis:\n  length [] = 0\n\ngoal (2 subgoals):\n 1. mat (row_length []) (length []) [] \\<Longrightarrow>\n    mat (row_length [] * length v) (length []) (vec_mat_Tensor v [])\n 2. \\<And>a M.\n       \\<lbrakk>mat (row_length M) (length M) M \\<Longrightarrow>\n                mat (row_length M * length v) (length M)\n                 (vec_mat_Tensor v M);\n        mat (row_length (a # M)) (length (a # M)) (a # M)\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M) * length v)\n                          (length (a # M)) (vec_mat_Tensor v (a # M))", "ultimately"], ["proof (chain)\npicking this:\n  vec_mat_Tensor v [] = []\n  row_length [] = 0\n  length [] = 0", "have \n       \"mat ((row_length [])*(length v)) (length []) (vec_mat_Tensor v [])\""], ["proof (prove)\nusing this:\n  vec_mat_Tensor v [] = []\n  row_length [] = 0\n  length [] = 0\n\ngoal (1 subgoal):\n 1. mat (row_length [] * length v) (length []) (vec_mat_Tensor v [])", "using zero_matrix"], ["proof (prove)\nusing this:\n  vec_mat_Tensor v [] = []\n  row_length [] = 0\n  length [] = 0\n  mat 0 0 []\n\ngoal (1 subgoal):\n 1. mat (row_length [] * length v) (length []) (vec_mat_Tensor v [])", "by (metis mult_zero_left)"], ["proof (state)\nthis:\n  mat (row_length [] * length v) (length []) (vec_mat_Tensor v [])\n\ngoal (2 subgoals):\n 1. mat (row_length []) (length []) [] \\<Longrightarrow>\n    mat (row_length [] * length v) (length []) (vec_mat_Tensor v [])\n 2. \\<And>a M.\n       \\<lbrakk>mat (row_length M) (length M) M \\<Longrightarrow>\n                mat (row_length M * length v) (length M)\n                 (vec_mat_Tensor v M);\n        mat (row_length (a # M)) (length (a # M)) (a # M)\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M) * length v)\n                          (length (a # M)) (vec_mat_Tensor v (a # M))", "then"], ["proof (chain)\npicking this:\n  mat (row_length [] * length v) (length []) (vec_mat_Tensor v [])", "show ?case"], ["proof (prove)\nusing this:\n  mat (row_length [] * length v) (length []) (vec_mat_Tensor v [])\n\ngoal (1 subgoal):\n 1. mat (row_length [] * length v) (length []) (vec_mat_Tensor v [])", "by simp"], ["proof (state)\nthis:\n  mat (row_length [] * length v) (length []) (vec_mat_Tensor v [])\n\ngoal (1 subgoal):\n 1. \\<And>a M.\n       \\<lbrakk>mat (row_length M) (length M) M \\<Longrightarrow>\n                mat (row_length M * length v) (length M)\n                 (vec_mat_Tensor v M);\n        mat (row_length (a # M)) (length (a # M)) (a # M)\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M) * length v)\n                          (length (a # M)) (vec_mat_Tensor v (a # M))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a M.\n       \\<lbrakk>mat (row_length M) (length M) M \\<Longrightarrow>\n                mat (row_length M * length v) (length M)\n                 (vec_mat_Tensor v M);\n        mat (row_length (a # M)) (length (a # M)) (a # M)\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M) * length v)\n                          (length (a # M)) (vec_mat_Tensor v (a # M))", "fix a M"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a M.\n       \\<lbrakk>mat (row_length M) (length M) M \\<Longrightarrow>\n                mat (row_length M * length v) (length M)\n                 (vec_mat_Tensor v M);\n        mat (row_length (a # M)) (length (a # M)) (a # M)\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M) * length v)\n                          (length (a # M)) (vec_mat_Tensor v (a # M))", "assume hyp :\n   \"(mat (row_length M) (length M) M \n           \\<Longrightarrow> mat (row_length M * length v) (length M) (vec_mat_Tensor v M))\"\n   \"mat (row_length (a#M)) (length (a#M)) (a#M)\""], ["proof (state)\nthis:\n  mat (row_length M) (length M) M \\<Longrightarrow>\n  mat (row_length M * length v) (length M) (vec_mat_Tensor v M)\n  mat (row_length (a # M)) (length (a # M)) (a # M)\n\ngoal (1 subgoal):\n 1. \\<And>a M.\n       \\<lbrakk>mat (row_length M) (length M) M \\<Longrightarrow>\n                mat (row_length M * length v) (length M)\n                 (vec_mat_Tensor v M);\n        mat (row_length (a # M)) (length (a # M)) (a # M)\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M) * length v)\n                          (length (a # M)) (vec_mat_Tensor v (a # M))", "let ?case = \n   \"mat (row_length (a#M) * length v) (length (a#M)) (vec_mat_Tensor v (a#M))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a M.\n       \\<lbrakk>mat (row_length M) (length M) M \\<Longrightarrow>\n                mat (row_length M * length v) (length M)\n                 (vec_mat_Tensor v M);\n        mat (row_length (a # M)) (length (a # M)) (a # M)\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M) * length v)\n                          (length (a # M)) (vec_mat_Tensor v (a # M))", "have step1: \"mat (row_length M) (length M) M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length M) (length M) M", "using hyp(2) reduct_matrix"], ["proof (prove)\nusing this:\n  mat (row_length (a # M)) (length (a # M)) (a # M)\n  mat (row_length (?a # ?M)) (length (?a # ?M)) (?a # ?M) \\<Longrightarrow>\n  mat (row_length ?M) (length ?M) ?M\n\ngoal (1 subgoal):\n 1. mat (row_length M) (length M) M", "by auto"], ["proof (state)\nthis:\n  mat (row_length M) (length M) M\n\ngoal (1 subgoal):\n 1. \\<And>a M.\n       \\<lbrakk>mat (row_length M) (length M) M \\<Longrightarrow>\n                mat (row_length M * length v) (length M)\n                 (vec_mat_Tensor v M);\n        mat (row_length (a # M)) (length (a # M)) (a # M)\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M) * length v)\n                          (length (a # M)) (vec_mat_Tensor v (a # M))", "then"], ["proof (chain)\npicking this:\n  mat (row_length M) (length M) M", "have step2:\n    \"mat (row_length M * length v) (length M) (vec_mat_Tensor v M)\""], ["proof (prove)\nusing this:\n  mat (row_length M) (length M) M\n\ngoal (1 subgoal):\n 1. mat (row_length M * length v) (length M) (vec_mat_Tensor v M)", "using hyp(1)"], ["proof (prove)\nusing this:\n  mat (row_length M) (length M) M\n  mat (row_length M) (length M) M \\<Longrightarrow>\n  mat (row_length M * length v) (length M) (vec_mat_Tensor v M)\n\ngoal (1 subgoal):\n 1. mat (row_length M * length v) (length M) (vec_mat_Tensor v M)", "by auto"], ["proof (state)\nthis:\n  mat (row_length M * length v) (length M) (vec_mat_Tensor v M)\n\ngoal (1 subgoal):\n 1. \\<And>a M.\n       \\<lbrakk>mat (row_length M) (length M) M \\<Longrightarrow>\n                mat (row_length M * length v) (length M)\n                 (vec_mat_Tensor v M);\n        mat (row_length (a # M)) (length (a # M)) (a # M)\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M) * length v)\n                          (length (a # M)) (vec_mat_Tensor v (a # M))", "have \n   \"mat \n        (row_length (a#M) * length v) \n        (length (a#M)) \n             (vec_mat_Tensor v (a#M))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length (a # M) * length v) (length (a # M))\n     (vec_mat_Tensor v (a # M))", "proof (cases M)"], ["proof (state)\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow>\n    mat (row_length (a # M) * length v) (length (a # M))\n     (vec_mat_Tensor v (a # M))\n 2. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "case Nil"], ["proof (state)\nthis:\n  M = []\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow>\n    mat (row_length (a # M) * length v) (length (a # M))\n     (vec_mat_Tensor v (a # M))\n 2. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow>\n    mat (row_length (a # M) * length v) (length (a # M))\n     (vec_mat_Tensor v (a # M))\n 2. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "have 1:\"(vec_mat_Tensor v (a#M)) = [vec_vec_Tensor v a]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_mat_Tensor v (a # M) = [vec_vec_Tensor v a]", "using vec_mat_Tensor.simps Nil"], ["proof (prove)\nusing this:\n  vec_mat_Tensor ?xs [] = []\n  vec_mat_Tensor ?xs (?ys # ?yss) =\n  vec_vec_Tensor ?xs ?ys # vec_mat_Tensor ?xs ?yss\n  M = []\n\ngoal (1 subgoal):\n 1. vec_mat_Tensor v (a # M) = [vec_vec_Tensor v a]", "by auto"], ["proof (state)\nthis:\n  vec_mat_Tensor v (a # M) = [vec_vec_Tensor v a]\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow>\n    mat (row_length (a # M) * length v) (length (a # M))\n     (vec_mat_Tensor v (a # M))\n 2. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "have   \"(x \\<in> (set [vec_vec_Tensor v a])) \\<longrightarrow>  x = (vec_vec_Tensor v a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set [vec_vec_Tensor v a] \\<longrightarrow>\n    x = vec_vec_Tensor v a", "using set_def"], ["proof (prove)\nusing this:\n  set \\<equiv>\n  ctor_fold_list\n   (\\<lambda>z. set1_pre_list z \\<union> \\<Union> (set2_pre_list z))\n\ngoal (1 subgoal):\n 1. x \\<in> set [vec_vec_Tensor v a] \\<longrightarrow>\n    x = vec_vec_Tensor v a", "by auto"], ["proof (state)\nthis:\n  x \\<in> set [vec_vec_Tensor v a] \\<longrightarrow> x = vec_vec_Tensor v a\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow>\n    mat (row_length (a # M) * length v) (length (a # M))\n     (vec_mat_Tensor v (a # M))\n 2. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "then"], ["proof (chain)\npicking this:\n  x \\<in> set [vec_vec_Tensor v a] \\<longrightarrow> x = vec_vec_Tensor v a", "have 2:\n        \"(x \\<in> (set [vec_vec_Tensor v a])) \n                    \\<longrightarrow> (vec (length (vec_vec_Tensor v a)) x)\""], ["proof (prove)\nusing this:\n  x \\<in> set [vec_vec_Tensor v a] \\<longrightarrow> x = vec_vec_Tensor v a\n\ngoal (1 subgoal):\n 1. x \\<in> set [vec_vec_Tensor v a] \\<longrightarrow>\n    vec (length (vec_vec_Tensor v a)) x", "using vec_def"], ["proof (prove)\nusing this:\n  x \\<in> set [vec_vec_Tensor v a] \\<longrightarrow> x = vec_vec_Tensor v a\n  vec ?n ?x = (length ?x = ?n)\n\ngoal (1 subgoal):\n 1. x \\<in> set [vec_vec_Tensor v a] \\<longrightarrow>\n    vec (length (vec_vec_Tensor v a)) x", "by metis"], ["proof (state)\nthis:\n  x \\<in> set [vec_vec_Tensor v a] \\<longrightarrow>\n  vec (length (vec_vec_Tensor v a)) x\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow>\n    mat (row_length (a # M) * length v) (length (a # M))\n     (vec_mat_Tensor v (a # M))\n 2. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "have 3:\"length (vec_vec_Tensor v a) = (length v)*(length a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (vec_vec_Tensor v a) = length v * length a", "using vec_vec_Tensor_length"], ["proof (prove)\nusing this:\n  length (vec_vec_Tensor ?x ?y) = length ?x * length ?y\n\ngoal (1 subgoal):\n 1. length (vec_vec_Tensor v a) = length v * length a", "by auto"], ["proof (state)\nthis:\n  length (vec_vec_Tensor v a) = length v * length a\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow>\n    mat (row_length (a # M) * length v) (length (a # M))\n     (vec_mat_Tensor v (a # M))\n 2. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "then"], ["proof (chain)\npicking this:\n  length (vec_vec_Tensor v a) = length v * length a", "have 4:\n        \"length (vec_vec_Tensor v a) = (length v)*(row_length (a#M))\""], ["proof (prove)\nusing this:\n  length (vec_vec_Tensor v a) = length v * length a\n\ngoal (1 subgoal):\n 1. length (vec_vec_Tensor v a) = length v * row_length (a # M)", "using row_length_def  list.distinct(1)"], ["proof (prove)\nusing this:\n  length (vec_vec_Tensor v a) = length v * length a\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n  [] \\<noteq> ?x21.0 # ?x22.0\n\ngoal (1 subgoal):\n 1. length (vec_vec_Tensor v a) = length v * row_length (a # M)", "by auto"], ["proof (state)\nthis:\n  length (vec_vec_Tensor v a) = length v * row_length (a # M)\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow>\n    mat (row_length (a # M) * length v) (length (a # M))\n     (vec_mat_Tensor v (a # M))\n 2. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "have 6: \"length (vec_mat_Tensor v (a#M)) = (length (a#M))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (vec_mat_Tensor v (a # M)) = length (a # M)", "using vec_mat_Tensor_length"], ["proof (prove)\nusing this:\n  length (vec_mat_Tensor ?xs ?ys) = length ?ys\n\ngoal (1 subgoal):\n 1. length (vec_mat_Tensor v (a # M)) = length (a # M)", "by auto"], ["proof (state)\nthis:\n  length (vec_mat_Tensor v (a # M)) = length (a # M)\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow>\n    mat (row_length (a # M) * length v) (length (a # M))\n     (vec_mat_Tensor v (a # M))\n 2. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "hence \"mat (length (vec_vec_Tensor v a)) (length (a # M)) [vec_vec_Tensor v a]\""], ["proof (prove)\nusing this:\n  length (vec_mat_Tensor v (a # M)) = length (a # M)\n\ngoal (1 subgoal):\n 1. mat (length (vec_vec_Tensor v a)) (length (a # M)) [vec_vec_Tensor v a]", "by (simp add: Nil mat_def vec_def)"], ["proof (state)\nthis:\n  mat (length (vec_vec_Tensor v a)) (length (a # M)) [vec_vec_Tensor v a]\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow>\n    mat (row_length (a # M) * length v) (length (a # M))\n     (vec_mat_Tensor v (a # M))\n 2. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "hence\n        \"mat (row_length (a#M) * length v) \n             (length (vec_mat_Tensor v (a#M))) \n             (vec_mat_Tensor v (a#M))\""], ["proof (prove)\nusing this:\n  mat (length (vec_vec_Tensor v a)) (length (a # M)) [vec_vec_Tensor v a]\n\ngoal (1 subgoal):\n 1. mat (row_length (a # M) * length v) (length (vec_mat_Tensor v (a # M)))\n     (vec_mat_Tensor v (a # M))", "using 1 4 6"], ["proof (prove)\nusing this:\n  mat (length (vec_vec_Tensor v a)) (length (a # M)) [vec_vec_Tensor v a]\n  vec_mat_Tensor v (a # M) = [vec_vec_Tensor v a]\n  length (vec_vec_Tensor v a) = length v * row_length (a # M)\n  length (vec_mat_Tensor v (a # M)) = length (a # M)\n\ngoal (1 subgoal):\n 1. mat (row_length (a # M) * length v) (length (vec_mat_Tensor v (a # M)))\n     (vec_mat_Tensor v (a # M))", "by (simp add: mult.commute)"], ["proof (state)\nthis:\n  mat (row_length (a # M) * length v) (length (vec_mat_Tensor v (a # M)))\n   (vec_mat_Tensor v (a # M))\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow>\n    mat (row_length (a # M) * length v) (length (a # M))\n     (vec_mat_Tensor v (a # M))\n 2. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "then"], ["proof (chain)\npicking this:\n  mat (row_length (a # M) * length v) (length (vec_mat_Tensor v (a # M)))\n   (vec_mat_Tensor v (a # M))", "show ?thesis"], ["proof (prove)\nusing this:\n  mat (row_length (a # M) * length v) (length (vec_mat_Tensor v (a # M)))\n   (vec_mat_Tensor v (a # M))\n\ngoal (1 subgoal):\n 1. mat (row_length (a # M) * length v) (length (a # M))\n     (vec_mat_Tensor v (a # M))", "using 6"], ["proof (prove)\nusing this:\n  mat (row_length (a # M) * length v) (length (vec_mat_Tensor v (a # M)))\n   (vec_mat_Tensor v (a # M))\n  length (vec_mat_Tensor v (a # M)) = length (a # M)\n\ngoal (1 subgoal):\n 1. mat (row_length (a # M) * length v) (length (a # M))\n     (vec_mat_Tensor v (a # M))", "by auto"], ["proof (state)\nthis:\n  mat (row_length (a # M) * length v) (length (a # M))\n   (vec_mat_Tensor v (a # M))\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "case (Cons b L)"], ["proof (state)\nthis:\n  M = b # L\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "have 1:\"x \\<in> (set (a#M)) \\<longrightarrow> ((x=a) \\<or> (x \\<in> (set M)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set (a # M) \\<longrightarrow> x = a \\<or> x \\<in> set M", "using hd_set"], ["proof (prove)\nusing this:\n  ?x \\<in> set (?a # ?M) \\<Longrightarrow> ?x = ?a \\<or> ?x \\<in> set ?M\n\ngoal (1 subgoal):\n 1. x \\<in> set (a # M) \\<longrightarrow> x = a \\<or> x \\<in> set M", "by auto"], ["proof (state)\nthis:\n  x \\<in> set (a # M) \\<longrightarrow> x = a \\<or> x \\<in> set M\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "have \"mat (row_length (a#M)) (length (a#M)) (a#M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length (a # M)) (length (a # M)) (a # M)", "using hyp"], ["proof (prove)\nusing this:\n  mat (row_length M) (length M) M \\<Longrightarrow>\n  mat (row_length M * length v) (length M) (vec_mat_Tensor v M)\n  mat (row_length (a # M)) (length (a # M)) (a # M)\n\ngoal (1 subgoal):\n 1. mat (row_length (a # M)) (length (a # M)) (a # M)", "by auto"], ["proof (state)\nthis:\n  mat (row_length (a # M)) (length (a # M)) (a # M)\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "then"], ["proof (chain)\npicking this:\n  mat (row_length (a # M)) (length (a # M)) (a # M)", "have \"x\\<in> (set (a#M)) \\<longrightarrow> (vec (row_length (a#M)) x)\""], ["proof (prove)\nusing this:\n  mat (row_length (a # M)) (length (a # M)) (a # M)\n\ngoal (1 subgoal):\n 1. x \\<in> set (a # M) \\<longrightarrow> vec (row_length (a # M)) x", "using mat_def Ball_def"], ["proof (prove)\nusing this:\n  mat (row_length (a # M)) (length (a # M)) (a # M)\n  mat ?nr ?nc ?m = (length ?m = ?nc \\<and> Ball (set ?m) (vec ?nr))\n  Ball ?A ?P = (\\<forall>x. x \\<in> ?A \\<longrightarrow> ?P x)\n\ngoal (1 subgoal):\n 1. x \\<in> set (a # M) \\<longrightarrow> vec (row_length (a # M)) x", "by metis"], ["proof (state)\nthis:\n  x \\<in> set (a # M) \\<longrightarrow> vec (row_length (a # M)) x\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "then"], ["proof (chain)\npicking this:\n  x \\<in> set (a # M) \\<longrightarrow> vec (row_length (a # M)) x", "have \"x\\<in> (set (a#M))\\<longrightarrow> (vec (length a) x)\""], ["proof (prove)\nusing this:\n  x \\<in> set (a # M) \\<longrightarrow> vec (row_length (a # M)) x\n\ngoal (1 subgoal):\n 1. x \\<in> set (a # M) \\<longrightarrow> vec (length a) x", "using row_length_def  list.distinct(1)"], ["proof (prove)\nusing this:\n  x \\<in> set (a # M) \\<longrightarrow> vec (row_length (a # M)) x\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n  [] \\<noteq> ?x21.0 # ?x22.0\n\ngoal (1 subgoal):\n 1. x \\<in> set (a # M) \\<longrightarrow> vec (length a) x", "by auto"], ["proof (state)\nthis:\n  x \\<in> set (a # M) \\<longrightarrow> vec (length a) x\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "with 1"], ["proof (chain)\npicking this:\n  x \\<in> set (a # M) \\<longrightarrow> x = a \\<or> x \\<in> set M\n  x \\<in> set (a # M) \\<longrightarrow> vec (length a) x", "have \"x\\<in> (set M)\\<longrightarrow> (vec (length a) x)\""], ["proof (prove)\nusing this:\n  x \\<in> set (a # M) \\<longrightarrow> x = a \\<or> x \\<in> set M\n  x \\<in> set (a # M) \\<longrightarrow> vec (length a) x\n\ngoal (1 subgoal):\n 1. x \\<in> set M \\<longrightarrow> vec (length a) x", "by auto"], ["proof (state)\nthis:\n  x \\<in> set M \\<longrightarrow> vec (length a) x\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "moreover"], ["proof (state)\nthis:\n  x \\<in> set M \\<longrightarrow> vec (length a) x\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "have \" b \\<in> (set M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<in> set M", "using Cons"], ["proof (prove)\nusing this:\n  M = b # L\n\ngoal (1 subgoal):\n 1. b \\<in> set M", "by auto"], ["proof (state)\nthis:\n  b \\<in> set M\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "ultimately"], ["proof (chain)\npicking this:\n  x \\<in> set M \\<longrightarrow> vec (length a) x\n  b \\<in> set M", "have \"vec (length a) b\""], ["proof (prove)\nusing this:\n  x \\<in> set M \\<longrightarrow> vec (length a) x\n  b \\<in> set M\n\ngoal (1 subgoal):\n 1. vec (length a) b", "using  hyp(2) in_set_member mat_def member_rec(1) vec_def"], ["proof (prove)\nusing this:\n  x \\<in> set M \\<longrightarrow> vec (length a) x\n  b \\<in> set M\n  mat (row_length (a # M)) (length (a # M)) (a # M)\n  (?x \\<in> set ?xs) = List.member ?xs ?x\n  mat ?nr ?nc ?m = (length ?m = ?nc \\<and> Ball (set ?m) (vec ?nr))\n  List.member (?x # ?xs) ?y = (?x = ?y \\<or> List.member ?xs ?y)\n  vec ?n ?x = (length ?x = ?n)\n\ngoal (1 subgoal):\n 1. vec (length a) b", "by (metis)"], ["proof (state)\nthis:\n  vec (length a) b\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "then"], ["proof (chain)\npicking this:\n  vec (length a) b", "have \"(length b) = (length a)\""], ["proof (prove)\nusing this:\n  vec (length a) b\n\ngoal (1 subgoal):\n 1. length b = length a", "using vec_def vec_uniqueness"], ["proof (prove)\nusing this:\n  vec (length a) b\n  vec ?n ?x = (length ?x = ?n)\n  \\<lbrakk>vec ?m ?v; vec ?n ?v\\<rbrakk> \\<Longrightarrow> ?m = ?n\n\ngoal (1 subgoal):\n 1. length b = length a", "by auto"], ["proof (state)\nthis:\n  length b = length a\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "then"], ["proof (chain)\npicking this:\n  length b = length a", "have 2:\"row_length M = (length a)\""], ["proof (prove)\nusing this:\n  length b = length a\n\ngoal (1 subgoal):\n 1. row_length M = length a", "using row_length_def   Cons list.distinct(1)"], ["proof (prove)\nusing this:\n  length b = length a\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n  M = b # L\n  [] \\<noteq> ?x21.0 # ?x22.0\n\ngoal (1 subgoal):\n 1. row_length M = length a", "by auto"], ["proof (state)\nthis:\n  row_length M = length a\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "have \"mat (row_length M * length v) (length M) (vec_mat_Tensor v M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length M * length v) (length M) (vec_mat_Tensor v M)", "using step2"], ["proof (prove)\nusing this:\n  mat (row_length M * length v) (length M) (vec_mat_Tensor v M)\n\ngoal (1 subgoal):\n 1. mat (row_length M * length v) (length M) (vec_mat_Tensor v M)", "by auto"], ["proof (state)\nthis:\n  mat (row_length M * length v) (length M) (vec_mat_Tensor v M)\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "then"], ["proof (chain)\npicking this:\n  mat (row_length M * length v) (length M) (vec_mat_Tensor v M)", "have 3:\n          \"Ball (set (vec_mat_Tensor v M)) (vec ((row_length M)*(length v)))\""], ["proof (prove)\nusing this:\n  mat (row_length M * length v) (length M) (vec_mat_Tensor v M)\n\ngoal (1 subgoal):\n 1. Ball (set (vec_mat_Tensor v M)) (vec (row_length M * length v))", "using mat_def"], ["proof (prove)\nusing this:\n  mat (row_length M * length v) (length M) (vec_mat_Tensor v M)\n  mat ?nr ?nc ?m = (length ?m = ?nc \\<and> Ball (set ?m) (vec ?nr))\n\ngoal (1 subgoal):\n 1. Ball (set (vec_mat_Tensor v M)) (vec (row_length M * length v))", "by auto"], ["proof (state)\nthis:\n  Ball (set (vec_mat_Tensor v M)) (vec (row_length M * length v))\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "then"], ["proof (chain)\npicking this:\n  Ball (set (vec_mat_Tensor v M)) (vec (row_length M * length v))", "have \"(x \\<in> set (vec_mat_Tensor v M)) \n                        \\<longrightarrow> (vec ((row_length M)*(length v)) x)\""], ["proof (prove)\nusing this:\n  Ball (set (vec_mat_Tensor v M)) (vec (row_length M * length v))\n\ngoal (1 subgoal):\n 1. x \\<in> set (vec_mat_Tensor v M) \\<longrightarrow>\n    vec (row_length M * length v) x", "using mat_def Ball_def"], ["proof (prove)\nusing this:\n  Ball (set (vec_mat_Tensor v M)) (vec (row_length M * length v))\n  mat ?nr ?nc ?m = (length ?m = ?nc \\<and> Ball (set ?m) (vec ?nr))\n  Ball ?A ?P = (\\<forall>x. x \\<in> ?A \\<longrightarrow> ?P x)\n\ngoal (1 subgoal):\n 1. x \\<in> set (vec_mat_Tensor v M) \\<longrightarrow>\n    vec (row_length M * length v) x", "by auto"], ["proof (state)\nthis:\n  x \\<in> set (vec_mat_Tensor v M) \\<longrightarrow>\n  vec (row_length M * length v) x\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "then"], ["proof (chain)\npicking this:\n  x \\<in> set (vec_mat_Tensor v M) \\<longrightarrow>\n  vec (row_length M * length v) x", "have 4:\"(x \\<in> set (vec_mat_Tensor v M)) \n                          \\<longrightarrow> (vec ((length a)*(length v)) x)\""], ["proof (prove)\nusing this:\n  x \\<in> set (vec_mat_Tensor v M) \\<longrightarrow>\n  vec (row_length M * length v) x\n\ngoal (1 subgoal):\n 1. x \\<in> set (vec_mat_Tensor v M) \\<longrightarrow>\n    vec (length a * length v) x", "using 2"], ["proof (prove)\nusing this:\n  x \\<in> set (vec_mat_Tensor v M) \\<longrightarrow>\n  vec (row_length M * length v) x\n  row_length M = length a\n\ngoal (1 subgoal):\n 1. x \\<in> set (vec_mat_Tensor v M) \\<longrightarrow>\n    vec (length a * length v) x", "by auto"], ["proof (state)\nthis:\n  x \\<in> set (vec_mat_Tensor v M) \\<longrightarrow>\n  vec (length a * length v) x\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "have 5:\"length (vec_vec_Tensor v a) = (length a)*(length v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (vec_vec_Tensor v a) = length a * length v", "using   vec_vec_Tensor_length"], ["proof (prove)\nusing this:\n  length (vec_vec_Tensor ?x ?y) = length ?x * length ?y\n\ngoal (1 subgoal):\n 1. length (vec_vec_Tensor v a) = length a * length v", "by auto"], ["proof (state)\nthis:\n  length (vec_vec_Tensor v a) = length a * length v\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "then"], ["proof (chain)\npicking this:\n  length (vec_vec_Tensor v a) = length a * length v", "have 6:\" vec ((length a)*(length v)) (vec_vec_Tensor v a)\""], ["proof (prove)\nusing this:\n  length (vec_vec_Tensor v a) = length a * length v\n\ngoal (1 subgoal):\n 1. vec (length a * length v) (vec_vec_Tensor v a)", "using vec_vec_Tensor_length vec_def"], ["proof (prove)\nusing this:\n  length (vec_vec_Tensor v a) = length a * length v\n  length (vec_vec_Tensor ?x ?y) = length ?x * length ?y\n  vec ?n ?x = (length ?x = ?n)\n\ngoal (1 subgoal):\n 1. vec (length a * length v) (vec_vec_Tensor v a)", "by (metis (full_types))"], ["proof (state)\nthis:\n  vec (length a * length v) (vec_vec_Tensor v a)\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "have 7:\"(length a) = (row_length (a#M))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length a = row_length (a # M)", "using row_length_def   list.distinct(1)"], ["proof (prove)\nusing this:\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n  [] \\<noteq> ?x21.0 # ?x22.0\n\ngoal (1 subgoal):\n 1. length a = row_length (a # M)", "by auto"], ["proof (state)\nthis:\n  length a = row_length (a # M)\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "have \"vec_mat_Tensor v (a#M) \n                   = (vec_vec_Tensor v a)#(vec_mat_Tensor v M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_mat_Tensor v (a # M) = vec_vec_Tensor v a # vec_mat_Tensor v M", "using vec_mat_Tensor.simps(2)"], ["proof (prove)\nusing this:\n  vec_mat_Tensor ?xs (?ys # ?yss) =\n  vec_vec_Tensor ?xs ?ys # vec_mat_Tensor ?xs ?yss\n\ngoal (1 subgoal):\n 1. vec_mat_Tensor v (a # M) = vec_vec_Tensor v a # vec_mat_Tensor v M", "by auto"], ["proof (state)\nthis:\n  vec_mat_Tensor v (a # M) = vec_vec_Tensor v a # vec_mat_Tensor v M\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "then"], ["proof (chain)\npicking this:\n  vec_mat_Tensor v (a # M) = vec_vec_Tensor v a # vec_mat_Tensor v M", "have \"(x \\<in> set (vec_mat_Tensor v (a#M)))\n                      \\<longrightarrow> ((x = (vec_vec_Tensor v a)) \n                           \\<or> (x \\<in> (set (vec_mat_Tensor v M))))\""], ["proof (prove)\nusing this:\n  vec_mat_Tensor v (a # M) = vec_vec_Tensor v a # vec_mat_Tensor v M\n\ngoal (1 subgoal):\n 1. x \\<in> set (vec_mat_Tensor v (a # M)) \\<longrightarrow>\n    x = vec_vec_Tensor v a \\<or> x \\<in> set (vec_mat_Tensor v M)", "using  hd_set"], ["proof (prove)\nusing this:\n  vec_mat_Tensor v (a # M) = vec_vec_Tensor v a # vec_mat_Tensor v M\n  ?x \\<in> set (?a # ?M) \\<Longrightarrow> ?x = ?a \\<or> ?x \\<in> set ?M\n\ngoal (1 subgoal):\n 1. x \\<in> set (vec_mat_Tensor v (a # M)) \\<longrightarrow>\n    x = vec_vec_Tensor v a \\<or> x \\<in> set (vec_mat_Tensor v M)", "by auto"], ["proof (state)\nthis:\n  x \\<in> set (vec_mat_Tensor v (a # M)) \\<longrightarrow>\n  x = vec_vec_Tensor v a \\<or> x \\<in> set (vec_mat_Tensor v M)\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "with 4 6"], ["proof (chain)\npicking this:\n  x \\<in> set (vec_mat_Tensor v M) \\<longrightarrow>\n  vec (length a * length v) x\n  vec (length a * length v) (vec_vec_Tensor v a)\n  x \\<in> set (vec_mat_Tensor v (a # M)) \\<longrightarrow>\n  x = vec_vec_Tensor v a \\<or> x \\<in> set (vec_mat_Tensor v M)", "have \"(x \\<in> set (vec_mat_Tensor v (a#M)))\n                             \\<longrightarrow>  vec ((length a)*(length v)) x\""], ["proof (prove)\nusing this:\n  x \\<in> set (vec_mat_Tensor v M) \\<longrightarrow>\n  vec (length a * length v) x\n  vec (length a * length v) (vec_vec_Tensor v a)\n  x \\<in> set (vec_mat_Tensor v (a # M)) \\<longrightarrow>\n  x = vec_vec_Tensor v a \\<or> x \\<in> set (vec_mat_Tensor v M)\n\ngoal (1 subgoal):\n 1. x \\<in> set (vec_mat_Tensor v (a # M)) \\<longrightarrow>\n    vec (length a * length v) x", "by auto"], ["proof (state)\nthis:\n  x \\<in> set (vec_mat_Tensor v (a # M)) \\<longrightarrow>\n  vec (length a * length v) x\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "with 7"], ["proof (chain)\npicking this:\n  length a = row_length (a # M)\n  x \\<in> set (vec_mat_Tensor v (a # M)) \\<longrightarrow>\n  vec (length a * length v) x", "have \"(x \\<in> set (vec_mat_Tensor v (a#M)))\n                                \\<longrightarrow>  vec ((row_length (a#M))*(length v)) x\""], ["proof (prove)\nusing this:\n  length a = row_length (a # M)\n  x \\<in> set (vec_mat_Tensor v (a # M)) \\<longrightarrow>\n  vec (length a * length v) x\n\ngoal (1 subgoal):\n 1. x \\<in> set (vec_mat_Tensor v (a # M)) \\<longrightarrow>\n    vec (row_length (a # M) * length v) x", "by auto"], ["proof (state)\nthis:\n  x \\<in> set (vec_mat_Tensor v (a # M)) \\<longrightarrow>\n  vec (row_length (a # M) * length v) x\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "then"], ["proof (chain)\npicking this:\n  x \\<in> set (vec_mat_Tensor v (a # M)) \\<longrightarrow>\n  vec (row_length (a # M) * length v) x", "have \"\\<forall>x.((x \\<in> set (vec_mat_Tensor v (a#M)))\n                                \\<longrightarrow>  vec ((row_length (a#M))*(length v)) x)\""], ["proof (prove)\nusing this:\n  x \\<in> set (vec_mat_Tensor v (a # M)) \\<longrightarrow>\n  vec (row_length (a # M) * length v) x\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in> set (vec_mat_Tensor v (a # M)) \\<longrightarrow>\n       vec (row_length (a # M) * length v) x", "using \"2\" \"3\" \"6\" \"7\" hd_set vec_mat_Tensor.simps(2)"], ["proof (prove)\nusing this:\n  x \\<in> set (vec_mat_Tensor v (a # M)) \\<longrightarrow>\n  vec (row_length (a # M) * length v) x\n  row_length M = length a\n  Ball (set (vec_mat_Tensor v M)) (vec (row_length M * length v))\n  vec (length a * length v) (vec_vec_Tensor v a)\n  length a = row_length (a # M)\n  ?x \\<in> set (?a # ?M) \\<Longrightarrow> ?x = ?a \\<or> ?x \\<in> set ?M\n  vec_mat_Tensor ?xs (?ys # ?yss) =\n  vec_vec_Tensor ?xs ?ys # vec_mat_Tensor ?xs ?yss\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in> set (vec_mat_Tensor v (a # M)) \\<longrightarrow>\n       vec (row_length (a # M) * length v) x", "by auto"], ["proof (state)\nthis:\n  \\<forall>x.\n     x \\<in> set (vec_mat_Tensor v (a # M)) \\<longrightarrow>\n     vec (row_length (a # M) * length v) x\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "then"], ["proof (chain)\npicking this:\n  \\<forall>x.\n     x \\<in> set (vec_mat_Tensor v (a # M)) \\<longrightarrow>\n     vec (row_length (a # M) * length v) x", "have 7: \n      \"Ball \n            (set (vec_mat_Tensor v (a#M))) \n            (vec ((row_length (a#M))*(length v)))\""], ["proof (prove)\nusing this:\n  \\<forall>x.\n     x \\<in> set (vec_mat_Tensor v (a # M)) \\<longrightarrow>\n     vec (row_length (a # M) * length v) x\n\ngoal (1 subgoal):\n 1. Ball (set (vec_mat_Tensor v (a # M)))\n     (vec (row_length (a # M) * length v))", "using Ball_def"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     x \\<in> set (vec_mat_Tensor v (a # M)) \\<longrightarrow>\n     vec (row_length (a # M) * length v) x\n  Ball ?A ?P = (\\<forall>x. x \\<in> ?A \\<longrightarrow> ?P x)\n\ngoal (1 subgoal):\n 1. Ball (set (vec_mat_Tensor v (a # M)))\n     (vec (row_length (a # M) * length v))", "by auto"], ["proof (state)\nthis:\n  Ball (set (vec_mat_Tensor v (a # M)))\n   (vec (row_length (a # M) * length v))\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "have 8: \"length (vec_mat_Tensor v (a#M)) = length (a#M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (vec_mat_Tensor v (a # M)) = length (a # M)", "using vec_mat_Tensor_length"], ["proof (prove)\nusing this:\n  length (vec_mat_Tensor ?xs ?ys) = length ?ys\n\ngoal (1 subgoal):\n 1. length (vec_mat_Tensor v (a # M)) = length (a # M)", "by auto"], ["proof (state)\nthis:\n  length (vec_mat_Tensor v (a # M)) = length (a # M)\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "with 6  7"], ["proof (chain)\npicking this:\n  vec (length a * length v) (vec_vec_Tensor v a)\n  Ball (set (vec_mat_Tensor v (a # M)))\n   (vec (row_length (a # M) * length v))\n  length (vec_mat_Tensor v (a # M)) = length (a # M)", "have \n               \"mat \n                 ((row_length (a#M))*(length v)) \n                 (length (a#M)) \n                           (vec_mat_Tensor v (a#M))\""], ["proof (prove)\nusing this:\n  vec (length a * length v) (vec_vec_Tensor v a)\n  Ball (set (vec_mat_Tensor v (a # M)))\n   (vec (row_length (a # M) * length v))\n  length (vec_mat_Tensor v (a # M)) = length (a # M)\n\ngoal (1 subgoal):\n 1. mat (row_length (a # M) * length v) (length (a # M))\n     (vec_mat_Tensor v (a # M))", "using mat_def  \"5\" length_code"], ["proof (prove)\nusing this:\n  vec (length a * length v) (vec_vec_Tensor v a)\n  Ball (set (vec_mat_Tensor v (a # M)))\n   (vec (row_length (a # M) * length v))\n  length (vec_mat_Tensor v (a # M)) = length (a # M)\n  mat ?nr ?nc ?m = (length ?m = ?nc \\<and> Ball (set ?m) (vec ?nr))\n  length (vec_vec_Tensor v a) = length a * length v\n  length = List.gen_length 0\n\ngoal (1 subgoal):\n 1. mat (row_length (a # M) * length v) (length (a # M))\n     (vec_mat_Tensor v (a # M))", "by (metis (hide_lams, no_types))"], ["proof (state)\nthis:\n  mat (row_length (a # M) * length v) (length (a # M))\n   (vec_mat_Tensor v (a # M))\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       mat (row_length (a # M) * length v) (length (a # M))\n        (vec_mat_Tensor v (a # M))", "then"], ["proof (chain)\npicking this:\n  mat (row_length (a # M) * length v) (length (a # M))\n   (vec_mat_Tensor v (a # M))", "show ?thesis"], ["proof (prove)\nusing this:\n  mat (row_length (a # M) * length v) (length (a # M))\n   (vec_mat_Tensor v (a # M))\n\ngoal (1 subgoal):\n 1. mat (row_length (a # M) * length v) (length (a # M))\n     (vec_mat_Tensor v (a # M))", "by auto"], ["proof (state)\nthis:\n  mat (row_length (a # M) * length v) (length (a # M))\n   (vec_mat_Tensor v (a # M))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mat (row_length (a # M) * length v) (length (a # M))\n   (vec_mat_Tensor v (a # M))\n\ngoal (1 subgoal):\n 1. \\<And>a M.\n       \\<lbrakk>mat (row_length M) (length M) M \\<Longrightarrow>\n                mat (row_length M * length v) (length M)\n                 (vec_mat_Tensor v M);\n        mat (row_length (a # M)) (length (a # M)) (a # M)\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M) * length v)\n                          (length (a # M)) (vec_mat_Tensor v (a # M))", "with  hyp"], ["proof (chain)\npicking this:\n  mat (row_length M) (length M) M \\<Longrightarrow>\n  mat (row_length M * length v) (length M) (vec_mat_Tensor v M)\n  mat (row_length (a # M)) (length (a # M)) (a # M)\n  mat (row_length (a # M) * length v) (length (a # M))\n   (vec_mat_Tensor v (a # M))", "show ?case"], ["proof (prove)\nusing this:\n  mat (row_length M) (length M) M \\<Longrightarrow>\n  mat (row_length M * length v) (length M) (vec_mat_Tensor v M)\n  mat (row_length (a # M)) (length (a # M)) (a # M)\n  mat (row_length (a # M) * length v) (length (a # M))\n   (vec_mat_Tensor v (a # M))\n\ngoal (1 subgoal):\n 1. mat (row_length (a # M) * length v) (length (a # M))\n     (vec_mat_Tensor v (a # M))", "by auto"], ["proof (state)\nthis:\n  mat (row_length (a # M) * length v) (length (a # M))\n   (vec_mat_Tensor v (a # M))\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>The following theorem  gives length of tensor product of two matrices\\<close>"], ["", "lemma length_Tensor:\" (length (M1\\<otimes>M2)) = (length M1)*(length M2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (M1 \\<otimes> M2) = length M1 * length M2", "proof(induct M1)"], ["proof (state)\ngoal (2 subgoals):\n 1. length ([] \\<otimes> M2) = length [] * length M2\n 2. \\<And>a M1.\n       length (M1 \\<otimes> M2) = length M1 * length M2 \\<Longrightarrow>\n       length (a # M1 \\<otimes> M2) = length (a # M1) * length M2", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. length ([] \\<otimes> M2) = length [] * length M2\n 2. \\<And>a M1.\n       length (M1 \\<otimes> M2) = length M1 * length M2 \\<Longrightarrow>\n       length (a # M1 \\<otimes> M2) = length (a # M1) * length M2", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. length ([] \\<otimes> M2) = length [] * length M2", "by auto"], ["proof (state)\nthis:\n  length ([] \\<otimes> M2) = length [] * length M2\n\ngoal (1 subgoal):\n 1. \\<And>a M1.\n       length (M1 \\<otimes> M2) = length M1 * length M2 \\<Longrightarrow>\n       length (a # M1 \\<otimes> M2) = length (a # M1) * length M2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a M1.\n       length (M1 \\<otimes> M2) = length M1 * length M2 \\<Longrightarrow>\n       length (a # M1 \\<otimes> M2) = length (a # M1) * length M2", "case (Cons a M1)"], ["proof (state)\nthis:\n  length (M1 \\<otimes> M2) = length M1 * length M2\n\ngoal (1 subgoal):\n 1. \\<And>a M1.\n       length (M1 \\<otimes> M2) = length M1 * length M2 \\<Longrightarrow>\n       length (a # M1 \\<otimes> M2) = length (a # M1) * length M2", "have \"((a # M1) \\<otimes> M2) = (vec_mat_Tensor a M2)@(M1 \\<otimes> M2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a # M1 \\<otimes> M2 = vec_mat_Tensor a M2 @ (M1 \\<otimes> M2)", "using Tensor.simps(2)"], ["proof (prove)\nusing this:\n  ?x # ?xs \\<otimes> ?ys = vec_mat_Tensor ?x ?ys @ (?xs \\<otimes> ?ys)\n\ngoal (1 subgoal):\n 1. a # M1 \\<otimes> M2 = vec_mat_Tensor a M2 @ (M1 \\<otimes> M2)", "by auto"], ["proof (state)\nthis:\n  a # M1 \\<otimes> M2 = vec_mat_Tensor a M2 @ (M1 \\<otimes> M2)\n\ngoal (1 subgoal):\n 1. \\<And>a M1.\n       length (M1 \\<otimes> M2) = length M1 * length M2 \\<Longrightarrow>\n       length (a # M1 \\<otimes> M2) = length (a # M1) * length M2", "then"], ["proof (chain)\npicking this:\n  a # M1 \\<otimes> M2 = vec_mat_Tensor a M2 @ (M1 \\<otimes> M2)", "have 1:\n          \"length ((a # M1) \\<otimes> M2) = length ((vec_mat_Tensor a M2)@(M1 \\<otimes> M2))\""], ["proof (prove)\nusing this:\n  a # M1 \\<otimes> M2 = vec_mat_Tensor a M2 @ (M1 \\<otimes> M2)\n\ngoal (1 subgoal):\n 1. length (a # M1 \\<otimes> M2) =\n    length (vec_mat_Tensor a M2 @ (M1 \\<otimes> M2))", "by auto"], ["proof (state)\nthis:\n  length (a # M1 \\<otimes> M2) =\n  length (vec_mat_Tensor a M2 @ (M1 \\<otimes> M2))\n\ngoal (1 subgoal):\n 1. \\<And>a M1.\n       length (M1 \\<otimes> M2) = length M1 * length M2 \\<Longrightarrow>\n       length (a # M1 \\<otimes> M2) = length (a # M1) * length M2", "have 2:\"length ((vec_mat_Tensor a M2)@(M1 \\<otimes> M2)) \n              = length (vec_mat_Tensor a M2)+ length (M1 \\<otimes> M2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (vec_mat_Tensor a M2 @ (M1 \\<otimes> M2)) =\n    length (vec_mat_Tensor a M2) + length (M1 \\<otimes> M2)", "using append_def"], ["proof (prove)\nusing this:\n  (@) \\<equiv> rec_list (\\<lambda>ys. ys) (\\<lambda>x xs xsa ys. x # xsa ys)\n\ngoal (1 subgoal):\n 1. length (vec_mat_Tensor a M2 @ (M1 \\<otimes> M2)) =\n    length (vec_mat_Tensor a M2) + length (M1 \\<otimes> M2)", "by auto"], ["proof (state)\nthis:\n  length (vec_mat_Tensor a M2 @ (M1 \\<otimes> M2)) =\n  length (vec_mat_Tensor a M2) + length (M1 \\<otimes> M2)\n\ngoal (1 subgoal):\n 1. \\<And>a M1.\n       length (M1 \\<otimes> M2) = length M1 * length M2 \\<Longrightarrow>\n       length (a # M1 \\<otimes> M2) = length (a # M1) * length M2", "have 3:\"(length (vec_mat_Tensor a M2)) = length M2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (vec_mat_Tensor a M2) = length M2", "using vec_mat_Tensor_length"], ["proof (prove)\nusing this:\n  length (vec_mat_Tensor ?xs ?ys) = length ?ys\n\ngoal (1 subgoal):\n 1. length (vec_mat_Tensor a M2) = length M2", "by (auto)"], ["proof (state)\nthis:\n  length (vec_mat_Tensor a M2) = length M2\n\ngoal (1 subgoal):\n 1. \\<And>a M1.\n       length (M1 \\<otimes> M2) = length M1 * length M2 \\<Longrightarrow>\n       length (a # M1 \\<otimes> M2) = length (a # M1) * length M2", "have 4:\"length (M1 \\<otimes> M2) = (length M1)*(length M2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (M1 \\<otimes> M2) = length M1 * length M2", "using  Cons.hyps"], ["proof (prove)\nusing this:\n  length (M1 \\<otimes> M2) = length M1 * length M2\n\ngoal (1 subgoal):\n 1. length (M1 \\<otimes> M2) = length M1 * length M2", "by auto"], ["proof (state)\nthis:\n  length (M1 \\<otimes> M2) = length M1 * length M2\n\ngoal (1 subgoal):\n 1. \\<And>a M1.\n       length (M1 \\<otimes> M2) = length M1 * length M2 \\<Longrightarrow>\n       length (a # M1 \\<otimes> M2) = length (a # M1) * length M2", "with 2 3"], ["proof (chain)\npicking this:\n  length (vec_mat_Tensor a M2 @ (M1 \\<otimes> M2)) =\n  length (vec_mat_Tensor a M2) + length (M1 \\<otimes> M2)\n  length (vec_mat_Tensor a M2) = length M2\n  length (M1 \\<otimes> M2) = length M1 * length M2", "have \"length ((vec_mat_Tensor a M2)@(M1 \\<otimes> M2)) \n                              = (length M2) + (length M1)*(length M2)\""], ["proof (prove)\nusing this:\n  length (vec_mat_Tensor a M2 @ (M1 \\<otimes> M2)) =\n  length (vec_mat_Tensor a M2) + length (M1 \\<otimes> M2)\n  length (vec_mat_Tensor a M2) = length M2\n  length (M1 \\<otimes> M2) = length M1 * length M2\n\ngoal (1 subgoal):\n 1. length (vec_mat_Tensor a M2 @ (M1 \\<otimes> M2)) =\n    length M2 + length M1 * length M2", "by auto"], ["proof (state)\nthis:\n  length (vec_mat_Tensor a M2 @ (M1 \\<otimes> M2)) =\n  length M2 + length M1 * length M2\n\ngoal (1 subgoal):\n 1. \\<And>a M1.\n       length (M1 \\<otimes> M2) = length M1 * length M2 \\<Longrightarrow>\n       length (a # M1 \\<otimes> M2) = length (a # M1) * length M2", "then"], ["proof (chain)\npicking this:\n  length (vec_mat_Tensor a M2 @ (M1 \\<otimes> M2)) =\n  length M2 + length M1 * length M2", "have 5:\n    \"length ((vec_mat_Tensor a M2)@(M1 \\<otimes> M2)) = (1 + (length M1))*(length M2)\""], ["proof (prove)\nusing this:\n  length (vec_mat_Tensor a M2 @ (M1 \\<otimes> M2)) =\n  length M2 + length M1 * length M2\n\ngoal (1 subgoal):\n 1. length (vec_mat_Tensor a M2 @ (M1 \\<otimes> M2)) =\n    (1 + length M1) * length M2", "by auto"], ["proof (state)\nthis:\n  length (vec_mat_Tensor a M2 @ (M1 \\<otimes> M2)) =\n  (1 + length M1) * length M2\n\ngoal (1 subgoal):\n 1. \\<And>a M1.\n       length (M1 \\<otimes> M2) = length M1 * length M2 \\<Longrightarrow>\n       length (a # M1 \\<otimes> M2) = length (a # M1) * length M2", "with 1"], ["proof (chain)\npicking this:\n  length (a # M1 \\<otimes> M2) =\n  length (vec_mat_Tensor a M2 @ (M1 \\<otimes> M2))\n  length (vec_mat_Tensor a M2 @ (M1 \\<otimes> M2)) =\n  (1 + length M1) * length M2", "have \"length ((a # M1) \\<otimes> M2) = ((length (a # M1)) * (length M2))\""], ["proof (prove)\nusing this:\n  length (a # M1 \\<otimes> M2) =\n  length (vec_mat_Tensor a M2 @ (M1 \\<otimes> M2))\n  length (vec_mat_Tensor a M2 @ (M1 \\<otimes> M2)) =\n  (1 + length M1) * length M2\n\ngoal (1 subgoal):\n 1. length (a # M1 \\<otimes> M2) = length (a # M1) * length M2", "by auto"], ["proof (state)\nthis:\n  length (a # M1 \\<otimes> M2) = length (a # M1) * length M2\n\ngoal (1 subgoal):\n 1. \\<And>a M1.\n       length (M1 \\<otimes> M2) = length M1 * length M2 \\<Longrightarrow>\n       length (a # M1 \\<otimes> M2) = length (a # M1) * length M2", "then"], ["proof (chain)\npicking this:\n  length (a # M1 \\<otimes> M2) = length (a # M1) * length M2", "show ?case"], ["proof (prove)\nusing this:\n  length (a # M1 \\<otimes> M2) = length (a # M1) * length M2\n\ngoal (1 subgoal):\n 1. length (a # M1 \\<otimes> M2) = length (a # M1) * length M2", "by auto"], ["proof (state)\nthis:\n  length (a # M1 \\<otimes> M2) = length (a # M1) * length M2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma append_reduct_matrix: \n\"(mat (row_length (M1@M2)) (length (M1@M2)) (M1@M2))\n\\<Longrightarrow>(mat (row_length M2) (length M2) M2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length (M1 @ M2)) (length (M1 @ M2))\n     (M1 @ M2) \\<Longrightarrow>\n    mat (row_length M2) (length M2) M2", "proof(induct M1)"], ["proof (state)\ngoal (2 subgoals):\n 1. mat (row_length ([] @ M2)) (length ([] @ M2))\n     ([] @ M2) \\<Longrightarrow>\n    mat (row_length M2) (length M2) M2\n 2. \\<And>a M1.\n       \\<lbrakk>mat (row_length (M1 @ M2)) (length (M1 @ M2))\n                 (M1 @ M2) \\<Longrightarrow>\n                mat (row_length M2) (length M2) M2;\n        mat (row_length ((a # M1) @ M2)) (length ((a # M1) @ M2))\n         ((a # M1) @ M2)\\<rbrakk>\n       \\<Longrightarrow> mat (row_length M2) (length M2) M2", "case Nil"], ["proof (state)\nthis:\n  mat (row_length ([] @ M2)) (length ([] @ M2)) ([] @ M2)\n\ngoal (2 subgoals):\n 1. mat (row_length ([] @ M2)) (length ([] @ M2))\n     ([] @ M2) \\<Longrightarrow>\n    mat (row_length M2) (length M2) M2\n 2. \\<And>a M1.\n       \\<lbrakk>mat (row_length (M1 @ M2)) (length (M1 @ M2))\n                 (M1 @ M2) \\<Longrightarrow>\n                mat (row_length M2) (length M2) M2;\n        mat (row_length ((a # M1) @ M2)) (length ((a # M1) @ M2))\n         ((a # M1) @ M2)\\<rbrakk>\n       \\<Longrightarrow> mat (row_length M2) (length M2) M2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length M2) (length M2) M2", "using Nil append.simps(1)"], ["proof (prove)\nusing this:\n  mat (row_length ([] @ M2)) (length ([] @ M2)) ([] @ M2)\n  [] @ ?ys = ?ys\n\ngoal (1 subgoal):\n 1. mat (row_length M2) (length M2) M2", "by auto"], ["proof (state)\nthis:\n  mat (row_length M2) (length M2) M2\n\ngoal (1 subgoal):\n 1. \\<And>a M1.\n       \\<lbrakk>mat (row_length (M1 @ M2)) (length (M1 @ M2))\n                 (M1 @ M2) \\<Longrightarrow>\n                mat (row_length M2) (length M2) M2;\n        mat (row_length ((a # M1) @ M2)) (length ((a # M1) @ M2))\n         ((a # M1) @ M2)\\<rbrakk>\n       \\<Longrightarrow> mat (row_length M2) (length M2) M2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a M1.\n       \\<lbrakk>mat (row_length (M1 @ M2)) (length (M1 @ M2))\n                 (M1 @ M2) \\<Longrightarrow>\n                mat (row_length M2) (length M2) M2;\n        mat (row_length ((a # M1) @ M2)) (length ((a # M1) @ M2))\n         ((a # M1) @ M2)\\<rbrakk>\n       \\<Longrightarrow> mat (row_length M2) (length M2) M2", "case (Cons a M1)"], ["proof (state)\nthis:\n  mat (row_length (M1 @ M2)) (length (M1 @ M2)) (M1 @ M2) \\<Longrightarrow>\n  mat (row_length M2) (length M2) M2\n  mat (row_length ((a # M1) @ M2)) (length ((a # M1) @ M2)) ((a # M1) @ M2)\n\ngoal (1 subgoal):\n 1. \\<And>a M1.\n       \\<lbrakk>mat (row_length (M1 @ M2)) (length (M1 @ M2))\n                 (M1 @ M2) \\<Longrightarrow>\n                mat (row_length M2) (length M2) M2;\n        mat (row_length ((a # M1) @ M2)) (length ((a # M1) @ M2))\n         ((a # M1) @ M2)\\<rbrakk>\n       \\<Longrightarrow> mat (row_length M2) (length M2) M2", "have \"mat (row_length (M1 @ M2)) (length (M1 @ M2)) (M1 @ M2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length (M1 @ M2)) (length (M1 @ M2)) (M1 @ M2)", "using reduct_matrix Cons.prems append_Cons"], ["proof (prove)\nusing this:\n  mat (row_length (?a # ?M)) (length (?a # ?M)) (?a # ?M) \\<Longrightarrow>\n  mat (row_length ?M) (length ?M) ?M\n  mat (row_length ((a # M1) @ M2)) (length ((a # M1) @ M2)) ((a # M1) @ M2)\n  (?x # ?xs) @ ?ys = ?x # ?xs @ ?ys\n\ngoal (1 subgoal):\n 1. mat (row_length (M1 @ M2)) (length (M1 @ M2)) (M1 @ M2)", "by metis"], ["proof (state)\nthis:\n  mat (row_length (M1 @ M2)) (length (M1 @ M2)) (M1 @ M2)\n\ngoal (1 subgoal):\n 1. \\<And>a M1.\n       \\<lbrakk>mat (row_length (M1 @ M2)) (length (M1 @ M2))\n                 (M1 @ M2) \\<Longrightarrow>\n                mat (row_length M2) (length M2) M2;\n        mat (row_length ((a # M1) @ M2)) (length ((a # M1) @ M2))\n         ((a # M1) @ M2)\\<rbrakk>\n       \\<Longrightarrow> mat (row_length M2) (length M2) M2", "from this"], ["proof (chain)\npicking this:\n  mat (row_length (M1 @ M2)) (length (M1 @ M2)) (M1 @ M2)", "have \"(mat (row_length M2) (length M2) M2)\""], ["proof (prove)\nusing this:\n  mat (row_length (M1 @ M2)) (length (M1 @ M2)) (M1 @ M2)\n\ngoal (1 subgoal):\n 1. mat (row_length M2) (length M2) M2", "using Cons.hyps"], ["proof (prove)\nusing this:\n  mat (row_length (M1 @ M2)) (length (M1 @ M2)) (M1 @ M2)\n  mat (row_length (M1 @ M2)) (length (M1 @ M2)) (M1 @ M2) \\<Longrightarrow>\n  mat (row_length M2) (length M2) M2\n\ngoal (1 subgoal):\n 1. mat (row_length M2) (length M2) M2", "by auto"], ["proof (state)\nthis:\n  mat (row_length M2) (length M2) M2\n\ngoal (1 subgoal):\n 1. \\<And>a M1.\n       \\<lbrakk>mat (row_length (M1 @ M2)) (length (M1 @ M2))\n                 (M1 @ M2) \\<Longrightarrow>\n                mat (row_length M2) (length M2) M2;\n        mat (row_length ((a # M1) @ M2)) (length ((a # M1) @ M2))\n         ((a # M1) @ M2)\\<rbrakk>\n       \\<Longrightarrow> mat (row_length M2) (length M2) M2", "from this"], ["proof (chain)\npicking this:\n  mat (row_length M2) (length M2) M2", "show?thesis"], ["proof (prove)\nusing this:\n  mat (row_length M2) (length M2) M2\n\ngoal (1 subgoal):\n 1. mat (row_length M2) (length M2) M2", "by simp"], ["proof (state)\nthis:\n  mat (row_length M2) (length M2) M2\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>The following theorem proves that tensor product of two valid matrices\nis a valid matrix\\<close>"], ["", "theorem well_defined_Tensor:\n \"(mat (row_length M1) (length M1) M1) \n\\<and> (mat (row_length M2) (length M2) M2)\n\\<Longrightarrow>(mat ((row_length M1)*(row_length M2)) ((length M1)*(length M2)) (M1\\<otimes>M2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    mat (row_length M1 * row_length M2) (length M1 * length M2)\n     (M1 \\<otimes> M2)", "proof(induct M1)"], ["proof (state)\ngoal (2 subgoals):\n 1. mat (row_length []) (length []) [] \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    mat (row_length [] * row_length M2) (length [] * length M2)\n     ([] \\<otimes> M2)\n 2. \\<And>a M1.\n       \\<lbrakk>mat (row_length M1) (length M1) M1 \\<and>\n                mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n                mat (row_length M1 * row_length M2) (length M1 * length M2)\n                 (M1 \\<otimes> M2);\n        mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n        mat (row_length M2) (length M2) M2\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M1) * row_length M2)\n                          (length (a # M1) * length M2)\n                          (a # M1 \\<otimes> M2)", "case Nil"], ["proof (state)\nthis:\n  mat (row_length []) (length []) [] \\<and>\n  mat (row_length M2) (length M2) M2\n\ngoal (2 subgoals):\n 1. mat (row_length []) (length []) [] \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    mat (row_length [] * row_length M2) (length [] * length M2)\n     ([] \\<otimes> M2)\n 2. \\<And>a M1.\n       \\<lbrakk>mat (row_length M1) (length M1) M1 \\<and>\n                mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n                mat (row_length M1 * row_length M2) (length M1 * length M2)\n                 (M1 \\<otimes> M2);\n        mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n        mat (row_length M2) (length M2) M2\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M1) * row_length M2)\n                          (length (a # M1) * length M2)\n                          (a # M1 \\<otimes> M2)", "have \"(row_length []) * (row_length M2) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_length [] * row_length M2 = 0", "using row_length_def  mult_zero_left"], ["proof (prove)\nusing this:\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n  (0::?'a) * ?a = (0::?'a)\n\ngoal (1 subgoal):\n 1. row_length [] * row_length M2 = 0", "by (metis)"], ["proof (state)\nthis:\n  row_length [] * row_length M2 = 0\n\ngoal (2 subgoals):\n 1. mat (row_length []) (length []) [] \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    mat (row_length [] * row_length M2) (length [] * length M2)\n     ([] \\<otimes> M2)\n 2. \\<And>a M1.\n       \\<lbrakk>mat (row_length M1) (length M1) M1 \\<and>\n                mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n                mat (row_length M1 * row_length M2) (length M1 * length M2)\n                 (M1 \\<otimes> M2);\n        mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n        mat (row_length M2) (length M2) M2\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M1) * row_length M2)\n                          (length (a # M1) * length M2)\n                          (a # M1 \\<otimes> M2)", "moreover"], ["proof (state)\nthis:\n  row_length [] * row_length M2 = 0\n\ngoal (2 subgoals):\n 1. mat (row_length []) (length []) [] \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    mat (row_length [] * row_length M2) (length [] * length M2)\n     ([] \\<otimes> M2)\n 2. \\<And>a M1.\n       \\<lbrakk>mat (row_length M1) (length M1) M1 \\<and>\n                mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n                mat (row_length M1 * row_length M2) (length M1 * length M2)\n                 (M1 \\<otimes> M2);\n        mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n        mat (row_length M2) (length M2) M2\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M1) * row_length M2)\n                          (length (a # M1) * length M2)\n                          (a # M1 \\<otimes> M2)", "have \"(length []) * (length M2) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length [] * length M2 = 0", "using  mult_zero_left list.size(3)"], ["proof (prove)\nusing this:\n  (0::?'a) * ?a = (0::?'a)\n  length [] = 0\n\ngoal (1 subgoal):\n 1. length [] * length M2 = 0", "by auto"], ["proof (state)\nthis:\n  length [] * length M2 = 0\n\ngoal (2 subgoals):\n 1. mat (row_length []) (length []) [] \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    mat (row_length [] * row_length M2) (length [] * length M2)\n     ([] \\<otimes> M2)\n 2. \\<And>a M1.\n       \\<lbrakk>mat (row_length M1) (length M1) M1 \\<and>\n                mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n                mat (row_length M1 * row_length M2) (length M1 * length M2)\n                 (M1 \\<otimes> M2);\n        mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n        mat (row_length M2) (length M2) M2\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M1) * row_length M2)\n                          (length (a # M1) * length M2)\n                          (a # M1 \\<otimes> M2)", "moreover"], ["proof (state)\nthis:\n  length [] * length M2 = 0\n\ngoal (2 subgoals):\n 1. mat (row_length []) (length []) [] \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    mat (row_length [] * row_length M2) (length [] * length M2)\n     ([] \\<otimes> M2)\n 2. \\<And>a M1.\n       \\<lbrakk>mat (row_length M1) (length M1) M1 \\<and>\n                mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n                mat (row_length M1 * row_length M2) (length M1 * length M2)\n                 (M1 \\<otimes> M2);\n        mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n        mat (row_length M2) (length M2) M2\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M1) * row_length M2)\n                          (length (a # M1) * length M2)\n                          (a # M1 \\<otimes> M2)", "have \"[] \\<otimes> M2 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<otimes> M2 = []", "using Tensor.simps(1)"], ["proof (prove)\nusing this:\n  [] \\<otimes> ?xs = []\n\ngoal (1 subgoal):\n 1. [] \\<otimes> M2 = []", "by auto"], ["proof (state)\nthis:\n  [] \\<otimes> M2 = []\n\ngoal (2 subgoals):\n 1. mat (row_length []) (length []) [] \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    mat (row_length [] * row_length M2) (length [] * length M2)\n     ([] \\<otimes> M2)\n 2. \\<And>a M1.\n       \\<lbrakk>mat (row_length M1) (length M1) M1 \\<and>\n                mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n                mat (row_length M1 * row_length M2) (length M1 * length M2)\n                 (M1 \\<otimes> M2);\n        mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n        mat (row_length M2) (length M2) M2\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M1) * row_length M2)\n                          (length (a # M1) * length M2)\n                          (a # M1 \\<otimes> M2)", "ultimately"], ["proof (chain)\npicking this:\n  row_length [] * row_length M2 = 0\n  length [] * length M2 = 0\n  [] \\<otimes> M2 = []", "have \n       \"mat (row_length []*row_length M2) (length []*length M2) ([] \\<otimes> M2)\""], ["proof (prove)\nusing this:\n  row_length [] * row_length M2 = 0\n  length [] * length M2 = 0\n  [] \\<otimes> M2 = []\n\ngoal (1 subgoal):\n 1. mat (row_length [] * row_length M2) (length [] * length M2)\n     ([] \\<otimes> M2)", "using zero_matrix"], ["proof (prove)\nusing this:\n  row_length [] * row_length M2 = 0\n  length [] * length M2 = 0\n  [] \\<otimes> M2 = []\n  mat 0 0 []\n\ngoal (1 subgoal):\n 1. mat (row_length [] * row_length M2) (length [] * length M2)\n     ([] \\<otimes> M2)", "by metis"], ["proof (state)\nthis:\n  mat (row_length [] * row_length M2) (length [] * length M2)\n   ([] \\<otimes> M2)\n\ngoal (2 subgoals):\n 1. mat (row_length []) (length []) [] \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    mat (row_length [] * row_length M2) (length [] * length M2)\n     ([] \\<otimes> M2)\n 2. \\<And>a M1.\n       \\<lbrakk>mat (row_length M1) (length M1) M1 \\<and>\n                mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n                mat (row_length M1 * row_length M2) (length M1 * length M2)\n                 (M1 \\<otimes> M2);\n        mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n        mat (row_length M2) (length M2) M2\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M1) * row_length M2)\n                          (length (a # M1) * length M2)\n                          (a # M1 \\<otimes> M2)", "then"], ["proof (chain)\npicking this:\n  mat (row_length [] * row_length M2) (length [] * length M2)\n   ([] \\<otimes> M2)", "show ?case"], ["proof (prove)\nusing this:\n  mat (row_length [] * row_length M2) (length [] * length M2)\n   ([] \\<otimes> M2)\n\ngoal (1 subgoal):\n 1. mat (row_length [] * row_length M2) (length [] * length M2)\n     ([] \\<otimes> M2)", "by simp"], ["proof (state)\nthis:\n  mat (row_length [] * row_length M2) (length [] * length M2)\n   ([] \\<otimes> M2)\n\ngoal (1 subgoal):\n 1. \\<And>a M1.\n       \\<lbrakk>mat (row_length M1) (length M1) M1 \\<and>\n                mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n                mat (row_length M1 * row_length M2) (length M1 * length M2)\n                 (M1 \\<otimes> M2);\n        mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n        mat (row_length M2) (length M2) M2\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M1) * row_length M2)\n                          (length (a # M1) * length M2)\n                          (a # M1 \\<otimes> M2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a M1.\n       \\<lbrakk>mat (row_length M1) (length M1) M1 \\<and>\n                mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n                mat (row_length M1 * row_length M2) (length M1 * length M2)\n                 (M1 \\<otimes> M2);\n        mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n        mat (row_length M2) (length M2) M2\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M1) * row_length M2)\n                          (length (a # M1) * length M2)\n                          (a # M1 \\<otimes> M2)", "case (Cons a M1)"], ["proof (state)\nthis:\n  mat (row_length M1) (length M1) M1 \\<and>\n  mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n  mat (row_length M1 * row_length M2) (length M1 * length M2)\n   (M1 \\<otimes> M2)\n  mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n  mat (row_length M2) (length M2) M2\n\ngoal (1 subgoal):\n 1. \\<And>a M1.\n       \\<lbrakk>mat (row_length M1) (length M1) M1 \\<and>\n                mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n                mat (row_length M1 * row_length M2) (length M1 * length M2)\n                 (M1 \\<otimes> M2);\n        mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n        mat (row_length M2) (length M2) M2\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M1) * row_length M2)\n                          (length (a # M1) * length M2)\n                          (a # M1 \\<otimes> M2)", "have step1: \"mat (row_length (a # M1)) (length (a # M1)) (a # M1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length (a # M1)) (length (a # M1)) (a # M1)", "using Cons.prems"], ["proof (prove)\nusing this:\n  mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n  mat (row_length M2) (length M2) M2\n\ngoal (1 subgoal):\n 1. mat (row_length (a # M1)) (length (a # M1)) (a # M1)", "by auto"], ["proof (state)\nthis:\n  mat (row_length (a # M1)) (length (a # M1)) (a # M1)\n\ngoal (1 subgoal):\n 1. \\<And>a M1.\n       \\<lbrakk>mat (row_length M1) (length M1) M1 \\<and>\n                mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n                mat (row_length M1 * row_length M2) (length M1 * length M2)\n                 (M1 \\<otimes> M2);\n        mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n        mat (row_length M2) (length M2) M2\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M1) * row_length M2)\n                          (length (a # M1) * length M2)\n                          (a # M1 \\<otimes> M2)", "then"], ["proof (chain)\npicking this:\n  mat (row_length (a # M1)) (length (a # M1)) (a # M1)", "have \"mat (row_length (M1)) (length (M1)) (M1)\""], ["proof (prove)\nusing this:\n  mat (row_length (a # M1)) (length (a # M1)) (a # M1)\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1", "using reduct_matrix"], ["proof (prove)\nusing this:\n  mat (row_length (a # M1)) (length (a # M1)) (a # M1)\n  mat (row_length (?a # ?M)) (length (?a # ?M)) (?a # ?M) \\<Longrightarrow>\n  mat (row_length ?M) (length ?M) ?M\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1", "by auto"], ["proof (state)\nthis:\n  mat (row_length M1) (length M1) M1\n\ngoal (1 subgoal):\n 1. \\<And>a M1.\n       \\<lbrakk>mat (row_length M1) (length M1) M1 \\<and>\n                mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n                mat (row_length M1 * row_length M2) (length M1 * length M2)\n                 (M1 \\<otimes> M2);\n        mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n        mat (row_length M2) (length M2) M2\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M1) * row_length M2)\n                          (length (a # M1) * length M2)\n                          (a # M1 \\<otimes> M2)", "moreover"], ["proof (state)\nthis:\n  mat (row_length M1) (length M1) M1\n\ngoal (1 subgoal):\n 1. \\<And>a M1.\n       \\<lbrakk>mat (row_length M1) (length M1) M1 \\<and>\n                mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n                mat (row_length M1 * row_length M2) (length M1 * length M2)\n                 (M1 \\<otimes> M2);\n        mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n        mat (row_length M2) (length M2) M2\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M1) * row_length M2)\n                          (length (a # M1) * length M2)\n                          (a # M1 \\<otimes> M2)", "have \"mat (row_length (M2)) (length (M2)) (M2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length M2) (length M2) M2", "using Cons.prems"], ["proof (prove)\nusing this:\n  mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n  mat (row_length M2) (length M2) M2\n\ngoal (1 subgoal):\n 1. mat (row_length M2) (length M2) M2", "by auto"], ["proof (state)\nthis:\n  mat (row_length M2) (length M2) M2\n\ngoal (1 subgoal):\n 1. \\<And>a M1.\n       \\<lbrakk>mat (row_length M1) (length M1) M1 \\<and>\n                mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n                mat (row_length M1 * row_length M2) (length M1 * length M2)\n                 (M1 \\<otimes> M2);\n        mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n        mat (row_length M2) (length M2) M2\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M1) * row_length M2)\n                          (length (a # M1) * length M2)\n                          (a # M1 \\<otimes> M2)", "ultimately"], ["proof (chain)\npicking this:\n  mat (row_length M1) (length M1) M1\n  mat (row_length M2) (length M2) M2", "have step2:\n      \"mat (row_length M1 * row_length M2) (length M1 * length M2) (M1 \\<otimes> M2)\""], ["proof (prove)\nusing this:\n  mat (row_length M1) (length M1) M1\n  mat (row_length M2) (length M2) M2\n\ngoal (1 subgoal):\n 1. mat (row_length M1 * row_length M2) (length M1 * length M2)\n     (M1 \\<otimes> M2)", "using Cons.hyps"], ["proof (prove)\nusing this:\n  mat (row_length M1) (length M1) M1\n  mat (row_length M2) (length M2) M2\n  mat (row_length M1) (length M1) M1 \\<and>\n  mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n  mat (row_length M1 * row_length M2) (length M1 * length M2)\n   (M1 \\<otimes> M2)\n\ngoal (1 subgoal):\n 1. mat (row_length M1 * row_length M2) (length M1 * length M2)\n     (M1 \\<otimes> M2)", "by auto"], ["proof (state)\nthis:\n  mat (row_length M1 * row_length M2) (length M1 * length M2)\n   (M1 \\<otimes> M2)\n\ngoal (1 subgoal):\n 1. \\<And>a M1.\n       \\<lbrakk>mat (row_length M1) (length M1) M1 \\<and>\n                mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n                mat (row_length M1 * row_length M2) (length M1 * length M2)\n                 (M1 \\<otimes> M2);\n        mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n        mat (row_length M2) (length M2) M2\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M1) * row_length M2)\n                          (length (a # M1) * length M2)\n                          (a # M1 \\<otimes> M2)", "have 0:\"row_length (a#M1) = length a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_length (a # M1) = length a", "using row_length_def  list.distinct(1)"], ["proof (prove)\nusing this:\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n  [] \\<noteq> ?x21.0 # ?x22.0\n\ngoal (1 subgoal):\n 1. row_length (a # M1) = length a", "by auto"], ["proof (state)\nthis:\n  row_length (a # M1) = length a\n\ngoal (1 subgoal):\n 1. \\<And>a M1.\n       \\<lbrakk>mat (row_length M1) (length M1) M1 \\<and>\n                mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n                mat (row_length M1 * row_length M2) (length M1 * length M2)\n                 (M1 \\<otimes> M2);\n        mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n        mat (row_length M2) (length M2) M2\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M1) * row_length M2)\n                          (length (a # M1) * length M2)\n                          (a # M1 \\<otimes> M2)", "have \"mat \n           (row_length (a # M1)*row_length M2) \n           (length (a # M1)*length M2) \n                           (a # M1 \\<otimes> M2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length (a # M1) * row_length M2) (length (a # M1) * length M2)\n     (a # M1 \\<otimes> M2)", "proof(cases M1)"], ["proof (state)\ngoal (2 subgoals):\n 1. M1 = [] \\<Longrightarrow>\n    mat (row_length (a # M1) * row_length M2) (length (a # M1) * length M2)\n     (a # M1 \\<otimes> M2)\n 2. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "case Nil"], ["proof (state)\nthis:\n  M1 = []\n\ngoal (2 subgoals):\n 1. M1 = [] \\<Longrightarrow>\n    mat (row_length (a # M1) * row_length M2) (length (a # M1) * length M2)\n     (a # M1 \\<otimes> M2)\n 2. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "have \"(mat ((row_length M2)*(length a)) (length M2) (vec_mat_Tensor a M2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length M2 * length a) (length M2) (vec_mat_Tensor a M2)", "using Cons.prems well_defined_vec_mat_Tensor"], ["proof (prove)\nusing this:\n  mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n  mat (row_length M2) (length M2) M2\n  mat (row_length ?M) (length ?M) ?M \\<Longrightarrow>\n  mat (row_length ?M * length ?v) (length ?M) (vec_mat_Tensor ?v ?M)\n\ngoal (1 subgoal):\n 1. mat (row_length M2 * length a) (length M2) (vec_mat_Tensor a M2)", "by auto"], ["proof (state)\nthis:\n  mat (row_length M2 * length a) (length M2) (vec_mat_Tensor a M2)\n\ngoal (2 subgoals):\n 1. M1 = [] \\<Longrightarrow>\n    mat (row_length (a # M1) * row_length M2) (length (a # M1) * length M2)\n     (a # M1 \\<otimes> M2)\n 2. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "moreover"], ["proof (state)\nthis:\n  mat (row_length M2 * length a) (length M2) (vec_mat_Tensor a M2)\n\ngoal (2 subgoals):\n 1. M1 = [] \\<Longrightarrow>\n    mat (row_length (a # M1) * row_length M2) (length (a # M1) * length M2)\n     (a # M1 \\<otimes> M2)\n 2. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "have \"(length (a # M1)) * (length M2) = length M2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (a # M1) * length M2 = length M2", "using Nil"], ["proof (prove)\nusing this:\n  M1 = []\n\ngoal (1 subgoal):\n 1. length (a # M1) * length M2 = length M2", "by auto"], ["proof (state)\nthis:\n  length (a # M1) * length M2 = length M2\n\ngoal (2 subgoals):\n 1. M1 = [] \\<Longrightarrow>\n    mat (row_length (a # M1) * row_length M2) (length (a # M1) * length M2)\n     (a # M1 \\<otimes> M2)\n 2. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "moreover"], ["proof (state)\nthis:\n  length (a # M1) * length M2 = length M2\n\ngoal (2 subgoals):\n 1. M1 = [] \\<Longrightarrow>\n    mat (row_length (a # M1) * row_length M2) (length (a # M1) * length M2)\n     (a # M1 \\<otimes> M2)\n 2. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "have \"(a#M1)\\<otimes>M2 = (vec_mat_Tensor a M2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a # M1 \\<otimes> M2 = vec_mat_Tensor a M2", "using Nil Tensor.simps append.simps(1)"], ["proof (prove)\nusing this:\n  M1 = []\n  [] \\<otimes> ?xs = []\n  ?x # ?xs \\<otimes> ?ys = vec_mat_Tensor ?x ?ys @ (?xs \\<otimes> ?ys)\n  [] @ ?ys = ?ys\n\ngoal (1 subgoal):\n 1. a # M1 \\<otimes> M2 = vec_mat_Tensor a M2", "by auto"], ["proof (state)\nthis:\n  a # M1 \\<otimes> M2 = vec_mat_Tensor a M2\n\ngoal (2 subgoals):\n 1. M1 = [] \\<Longrightarrow>\n    mat (row_length (a # M1) * row_length M2) (length (a # M1) * length M2)\n     (a # M1 \\<otimes> M2)\n 2. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "ultimately"], ["proof (chain)\npicking this:\n  mat (row_length M2 * length a) (length M2) (vec_mat_Tensor a M2)\n  length (a # M1) * length M2 = length M2\n  a # M1 \\<otimes> M2 = vec_mat_Tensor a M2", "have \n        \"(mat \n            ((row_length M2)*(row_length (a#M1))) \n            ((length (a # M1)) * (length M2))\n               ((a#M1)\\<otimes>M2))\""], ["proof (prove)\nusing this:\n  mat (row_length M2 * length a) (length M2) (vec_mat_Tensor a M2)\n  length (a # M1) * length M2 = length M2\n  a # M1 \\<otimes> M2 = vec_mat_Tensor a M2\n\ngoal (1 subgoal):\n 1. mat (row_length M2 * row_length (a # M1)) (length (a # M1) * length M2)\n     (a # M1 \\<otimes> M2)", "using 0"], ["proof (prove)\nusing this:\n  mat (row_length M2 * length a) (length M2) (vec_mat_Tensor a M2)\n  length (a # M1) * length M2 = length M2\n  a # M1 \\<otimes> M2 = vec_mat_Tensor a M2\n  row_length (a # M1) = length a\n\ngoal (1 subgoal):\n 1. mat (row_length M2 * row_length (a # M1)) (length (a # M1) * length M2)\n     (a # M1 \\<otimes> M2)", "by auto"], ["proof (state)\nthis:\n  mat (row_length M2 * row_length (a # M1)) (length (a # M1) * length M2)\n   (a # M1 \\<otimes> M2)\n\ngoal (2 subgoals):\n 1. M1 = [] \\<Longrightarrow>\n    mat (row_length (a # M1) * row_length M2) (length (a # M1) * length M2)\n     (a # M1 \\<otimes> M2)\n 2. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "then"], ["proof (chain)\npicking this:\n  mat (row_length M2 * row_length (a # M1)) (length (a # M1) * length M2)\n   (a # M1 \\<otimes> M2)", "show ?thesis"], ["proof (prove)\nusing this:\n  mat (row_length M2 * row_length (a # M1)) (length (a # M1) * length M2)\n   (a # M1 \\<otimes> M2)\n\ngoal (1 subgoal):\n 1. mat (row_length (a # M1) * row_length M2) (length (a # M1) * length M2)\n     (a # M1 \\<otimes> M2)", "by (simp add: mult.commute)"], ["proof (state)\nthis:\n  mat (row_length (a # M1) * row_length M2) (length (a # M1) * length M2)\n   (a # M1 \\<otimes> M2)\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "case (Cons b N1)"], ["proof (state)\nthis:\n  M1 = b # N1\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "have 1:\"x \\<in> (set (a#M1)) \\<longrightarrow> ((x=a) \\<or> (x \\<in> (set M1)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set (a # M1) \\<longrightarrow> x = a \\<or> x \\<in> set M1", "using hd_set"], ["proof (prove)\nusing this:\n  ?x \\<in> set (?a # ?M) \\<Longrightarrow> ?x = ?a \\<or> ?x \\<in> set ?M\n\ngoal (1 subgoal):\n 1. x \\<in> set (a # M1) \\<longrightarrow> x = a \\<or> x \\<in> set M1", "by auto"], ["proof (state)\nthis:\n  x \\<in> set (a # M1) \\<longrightarrow> x = a \\<or> x \\<in> set M1\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "have \"mat (row_length (a#M1)) (length (a#M1)) (a#M1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length (a # M1)) (length (a # M1)) (a # M1)", "using Cons.prems"], ["proof (prove)\nusing this:\n  mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n  mat (row_length M2) (length M2) M2\n\ngoal (1 subgoal):\n 1. mat (row_length (a # M1)) (length (a # M1)) (a # M1)", "by auto"], ["proof (state)\nthis:\n  mat (row_length (a # M1)) (length (a # M1)) (a # M1)\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "then"], ["proof (chain)\npicking this:\n  mat (row_length (a # M1)) (length (a # M1)) (a # M1)", "have \"x\\<in> (set (a#M1)) \\<longrightarrow> (vec (row_length (a#M1)) x)\""], ["proof (prove)\nusing this:\n  mat (row_length (a # M1)) (length (a # M1)) (a # M1)\n\ngoal (1 subgoal):\n 1. x \\<in> set (a # M1) \\<longrightarrow> vec (row_length (a # M1)) x", "using mat_def Ball_def"], ["proof (prove)\nusing this:\n  mat (row_length (a # M1)) (length (a # M1)) (a # M1)\n  mat ?nr ?nc ?m = (length ?m = ?nc \\<and> Ball (set ?m) (vec ?nr))\n  Ball ?A ?P = (\\<forall>x. x \\<in> ?A \\<longrightarrow> ?P x)\n\ngoal (1 subgoal):\n 1. x \\<in> set (a # M1) \\<longrightarrow> vec (row_length (a # M1)) x", "by metis"], ["proof (state)\nthis:\n  x \\<in> set (a # M1) \\<longrightarrow> vec (row_length (a # M1)) x\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "then"], ["proof (chain)\npicking this:\n  x \\<in> set (a # M1) \\<longrightarrow> vec (row_length (a # M1)) x", "have \"x\\<in> (set (a#M1))\\<longrightarrow> (vec (length a) x)\""], ["proof (prove)\nusing this:\n  x \\<in> set (a # M1) \\<longrightarrow> vec (row_length (a # M1)) x\n\ngoal (1 subgoal):\n 1. x \\<in> set (a # M1) \\<longrightarrow> vec (length a) x", "using row_length_def  list.distinct(1)"], ["proof (prove)\nusing this:\n  x \\<in> set (a # M1) \\<longrightarrow> vec (row_length (a # M1)) x\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n  [] \\<noteq> ?x21.0 # ?x22.0\n\ngoal (1 subgoal):\n 1. x \\<in> set (a # M1) \\<longrightarrow> vec (length a) x", "by auto"], ["proof (state)\nthis:\n  x \\<in> set (a # M1) \\<longrightarrow> vec (length a) x\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "with 1"], ["proof (chain)\npicking this:\n  x \\<in> set (a # M1) \\<longrightarrow> x = a \\<or> x \\<in> set M1\n  x \\<in> set (a # M1) \\<longrightarrow> vec (length a) x", "have \"x\\<in> (set M1)\\<longrightarrow> (vec (length a) x)\""], ["proof (prove)\nusing this:\n  x \\<in> set (a # M1) \\<longrightarrow> x = a \\<or> x \\<in> set M1\n  x \\<in> set (a # M1) \\<longrightarrow> vec (length a) x\n\ngoal (1 subgoal):\n 1. x \\<in> set M1 \\<longrightarrow> vec (length a) x", "by auto"], ["proof (state)\nthis:\n  x \\<in> set M1 \\<longrightarrow> vec (length a) x\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "moreover"], ["proof (state)\nthis:\n  x \\<in> set M1 \\<longrightarrow> vec (length a) x\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "have \" b \\<in> (set M1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<in> set M1", "using Cons"], ["proof (prove)\nusing this:\n  M1 = b # N1\n\ngoal (1 subgoal):\n 1. b \\<in> set M1", "by auto"], ["proof (state)\nthis:\n  b \\<in> set M1\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "ultimately"], ["proof (chain)\npicking this:\n  x \\<in> set M1 \\<longrightarrow> vec (length a) x\n  b \\<in> set M1", "have \"vec (length a) b\""], ["proof (prove)\nusing this:\n  x \\<in> set M1 \\<longrightarrow> vec (length a) x\n  b \\<in> set M1\n\ngoal (1 subgoal):\n 1. vec (length a) b", "using  Cons.prems in_set_member mat_def member_rec(1) vec_def"], ["proof (prove)\nusing this:\n  x \\<in> set M1 \\<longrightarrow> vec (length a) x\n  b \\<in> set M1\n  mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n  mat (row_length M2) (length M2) M2\n  (?x \\<in> set ?xs) = List.member ?xs ?x\n  mat ?nr ?nc ?m = (length ?m = ?nc \\<and> Ball (set ?m) (vec ?nr))\n  List.member (?x # ?xs) ?y = (?x = ?y \\<or> List.member ?xs ?y)\n  vec ?n ?x = (length ?x = ?n)\n\ngoal (1 subgoal):\n 1. vec (length a) b", "by metis"], ["proof (state)\nthis:\n  vec (length a) b\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "then"], ["proof (chain)\npicking this:\n  vec (length a) b", "have \"(length b) = (length a)\""], ["proof (prove)\nusing this:\n  vec (length a) b\n\ngoal (1 subgoal):\n 1. length b = length a", "using vec_def vec_uniqueness"], ["proof (prove)\nusing this:\n  vec (length a) b\n  vec ?n ?x = (length ?x = ?n)\n  \\<lbrakk>vec ?m ?v; vec ?n ?v\\<rbrakk> \\<Longrightarrow> ?m = ?n\n\ngoal (1 subgoal):\n 1. length b = length a", "by auto"], ["proof (state)\nthis:\n  length b = length a\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "then"], ["proof (chain)\npicking this:\n  length b = length a", "have 2:\"row_length M1 = (length a)\""], ["proof (prove)\nusing this:\n  length b = length a\n\ngoal (1 subgoal):\n 1. row_length M1 = length a", "using row_length_def Cons"], ["proof (prove)\nusing this:\n  length b = length a\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n  M1 = b # N1\n\ngoal (1 subgoal):\n 1. row_length M1 = length a", "by auto"], ["proof (state)\nthis:\n  row_length M1 = length a\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "then"], ["proof (chain)\npicking this:\n  row_length M1 = length a", "have \"mat \n                    ((length a) * row_length M2) \n                    (length M1 * length M2) \n                                    (M1 \\<otimes> M2)\""], ["proof (prove)\nusing this:\n  row_length M1 = length a\n\ngoal (1 subgoal):\n 1. mat (length a * row_length M2) (length M1 * length M2) (M1 \\<otimes> M2)", "using step2"], ["proof (prove)\nusing this:\n  row_length M1 = length a\n  mat (row_length M1 * row_length M2) (length M1 * length M2)\n   (M1 \\<otimes> M2)\n\ngoal (1 subgoal):\n 1. mat (length a * row_length M2) (length M1 * length M2) (M1 \\<otimes> M2)", "by auto"], ["proof (state)\nthis:\n  mat (length a * row_length M2) (length M1 * length M2) (M1 \\<otimes> M2)\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "then"], ["proof (chain)\npicking this:\n  mat (length a * row_length M2) (length M1 * length M2) (M1 \\<otimes> M2)", "have \"Ball (set (M1\\<otimes>M2)) (vec ((length a)*(row_length M2))) \""], ["proof (prove)\nusing this:\n  mat (length a * row_length M2) (length M1 * length M2) (M1 \\<otimes> M2)\n\ngoal (1 subgoal):\n 1. Ball (set (M1 \\<otimes> M2)) (vec (length a * row_length M2))", "using mat_def"], ["proof (prove)\nusing this:\n  mat (length a * row_length M2) (length M1 * length M2) (M1 \\<otimes> M2)\n  mat ?nr ?nc ?m = (length ?m = ?nc \\<and> Ball (set ?m) (vec ?nr))\n\ngoal (1 subgoal):\n 1. Ball (set (M1 \\<otimes> M2)) (vec (length a * row_length M2))", "by auto"], ["proof (state)\nthis:\n  Ball (set (M1 \\<otimes> M2)) (vec (length a * row_length M2))\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "from this"], ["proof (chain)\npicking this:\n  Ball (set (M1 \\<otimes> M2)) (vec (length a * row_length M2))", "have 3:\n         \"\\<forall>x. x \\<in> (set (M1 \\<otimes> M2)) \\<longrightarrow> (vec ((length a)*(row_length M2)) x)\""], ["proof (prove)\nusing this:\n  Ball (set (M1 \\<otimes> M2)) (vec (length a * row_length M2))\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in> set (M1 \\<otimes> M2) \\<longrightarrow>\n       vec (length a * row_length M2) x", "using Ball_def"], ["proof (prove)\nusing this:\n  Ball (set (M1 \\<otimes> M2)) (vec (length a * row_length M2))\n  Ball ?A ?P = (\\<forall>x. x \\<in> ?A \\<longrightarrow> ?P x)\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in> set (M1 \\<otimes> M2) \\<longrightarrow>\n       vec (length a * row_length M2) x", "by auto"], ["proof (state)\nthis:\n  \\<forall>x.\n     x \\<in> set (M1 \\<otimes> M2) \\<longrightarrow>\n     vec (length a * row_length M2) x\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "have \"mat \n              ((row_length M2)*(length a)) \n              (length M2) \n                 (vec_mat_Tensor a M2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length M2 * length a) (length M2) (vec_mat_Tensor a M2)", "using well_defined_vec_mat_Tensor Cons.prems"], ["proof (prove)\nusing this:\n  mat (row_length ?M) (length ?M) ?M \\<Longrightarrow>\n  mat (row_length ?M * length ?v) (length ?M) (vec_mat_Tensor ?v ?M)\n  mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n  mat (row_length M2) (length M2) M2\n\ngoal (1 subgoal):\n 1. mat (row_length M2 * length a) (length M2) (vec_mat_Tensor a M2)", "by auto"], ["proof (state)\nthis:\n  mat (row_length M2 * length a) (length M2) (vec_mat_Tensor a M2)\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "then"], ["proof (chain)\npicking this:\n  mat (row_length M2 * length a) (length M2) (vec_mat_Tensor a M2)", "have \"Ball \n                    (set (vec_mat_Tensor a M2)) \n                    (vec ((row_length M2)*(length a)))\""], ["proof (prove)\nusing this:\n  mat (row_length M2 * length a) (length M2) (vec_mat_Tensor a M2)\n\ngoal (1 subgoal):\n 1. Ball (set (vec_mat_Tensor a M2)) (vec (row_length M2 * length a))", "using mat_def"], ["proof (prove)\nusing this:\n  mat (row_length M2 * length a) (length M2) (vec_mat_Tensor a M2)\n  mat ?nr ?nc ?m = (length ?m = ?nc \\<and> Ball (set ?m) (vec ?nr))\n\ngoal (1 subgoal):\n 1. Ball (set (vec_mat_Tensor a M2)) (vec (row_length M2 * length a))", "by auto"], ["proof (state)\nthis:\n  Ball (set (vec_mat_Tensor a M2)) (vec (row_length M2 * length a))\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "then"], ["proof (chain)\npicking this:\n  Ball (set (vec_mat_Tensor a M2)) (vec (row_length M2 * length a))", "have 4:\n              \"\\<forall>x. x \\<in> (set (vec_mat_Tensor a M2)) \n                        \\<longrightarrow> (vec ((length a)*(row_length M2)) x)\""], ["proof (prove)\nusing this:\n  Ball (set (vec_mat_Tensor a M2)) (vec (row_length M2 * length a))\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in> set (vec_mat_Tensor a M2) \\<longrightarrow>\n       vec (length a * row_length M2) x", "using mult.commute"], ["proof (prove)\nusing this:\n  Ball (set (vec_mat_Tensor a M2)) (vec (row_length M2 * length a))\n  ?a * ?b = ?b * ?a\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in> set (vec_mat_Tensor a M2) \\<longrightarrow>\n       vec (length a * row_length M2) x", "by metis"], ["proof (state)\nthis:\n  \\<forall>x.\n     x \\<in> set (vec_mat_Tensor a M2) \\<longrightarrow>\n     vec (length a * row_length M2) x\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "with 3"], ["proof (chain)\npicking this:\n  \\<forall>x.\n     x \\<in> set (M1 \\<otimes> M2) \\<longrightarrow>\n     vec (length a * row_length M2) x\n  \\<forall>x.\n     x \\<in> set (vec_mat_Tensor a M2) \\<longrightarrow>\n     vec (length a * row_length M2) x", "have 5: \"\\<forall>x. (x \\<in> (set (vec_mat_Tensor a M2)))\n                          \\<or>(x \\<in> (set (M1 \\<otimes> M2))) \n                                 \\<longrightarrow> (vec ((length a)*(row_length M2)) x)\""], ["proof (prove)\nusing this:\n  \\<forall>x.\n     x \\<in> set (M1 \\<otimes> M2) \\<longrightarrow>\n     vec (length a * row_length M2) x\n  \\<forall>x.\n     x \\<in> set (vec_mat_Tensor a M2) \\<longrightarrow>\n     vec (length a * row_length M2) x\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in> set (vec_mat_Tensor a M2) \\<or>\n       x \\<in> set (M1 \\<otimes> M2) \\<longrightarrow>\n       vec (length a * row_length M2) x", "by auto"], ["proof (state)\nthis:\n  \\<forall>x.\n     x \\<in> set (vec_mat_Tensor a M2) \\<or>\n     x \\<in> set (M1 \\<otimes> M2) \\<longrightarrow>\n     vec (length a * row_length M2) x\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "have 6:\"(a # M1 \\<otimes> M2) = (vec_mat_Tensor a M2)@(M1 \\<otimes>M2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a # M1 \\<otimes> M2 = vec_mat_Tensor a M2 @ (M1 \\<otimes> M2)", "using Tensor.simps(2)"], ["proof (prove)\nusing this:\n  ?x # ?xs \\<otimes> ?ys = vec_mat_Tensor ?x ?ys @ (?xs \\<otimes> ?ys)\n\ngoal (1 subgoal):\n 1. a # M1 \\<otimes> M2 = vec_mat_Tensor a M2 @ (M1 \\<otimes> M2)", "by auto"], ["proof (state)\nthis:\n  a # M1 \\<otimes> M2 = vec_mat_Tensor a M2 @ (M1 \\<otimes> M2)\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "then"], ["proof (chain)\npicking this:\n  a # M1 \\<otimes> M2 = vec_mat_Tensor a M2 @ (M1 \\<otimes> M2)", "have \"x \\<in> (set (a # M1 \\<otimes> M2)) \n                 \\<longrightarrow> (x \\<in> (set (vec_mat_Tensor a M2)))\\<or>(x \\<in> (set (M1 \\<otimes> M2)))\""], ["proof (prove)\nusing this:\n  a # M1 \\<otimes> M2 = vec_mat_Tensor a M2 @ (M1 \\<otimes> M2)\n\ngoal (1 subgoal):\n 1. x \\<in> set (a # M1 \\<otimes> M2) \\<longrightarrow>\n    x \\<in> set (vec_mat_Tensor a M2) \\<or> x \\<in> set (M1 \\<otimes> M2)", "using set_def append_def"], ["proof (prove)\nusing this:\n  a # M1 \\<otimes> M2 = vec_mat_Tensor a M2 @ (M1 \\<otimes> M2)\n  set \\<equiv>\n  ctor_fold_list\n   (\\<lambda>z. set1_pre_list z \\<union> \\<Union> (set2_pre_list z))\n  (@) \\<equiv> rec_list (\\<lambda>ys. ys) (\\<lambda>x xs xsa ys. x # xsa ys)\n\ngoal (1 subgoal):\n 1. x \\<in> set (a # M1 \\<otimes> M2) \\<longrightarrow>\n    x \\<in> set (vec_mat_Tensor a M2) \\<or> x \\<in> set (M1 \\<otimes> M2)", "by auto"], ["proof (state)\nthis:\n  x \\<in> set (a # M1 \\<otimes> M2) \\<longrightarrow>\n  x \\<in> set (vec_mat_Tensor a M2) \\<or> x \\<in> set (M1 \\<otimes> M2)\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "with 5"], ["proof (chain)\npicking this:\n  \\<forall>x.\n     x \\<in> set (vec_mat_Tensor a M2) \\<or>\n     x \\<in> set (M1 \\<otimes> M2) \\<longrightarrow>\n     vec (length a * row_length M2) x\n  x \\<in> set (a # M1 \\<otimes> M2) \\<longrightarrow>\n  x \\<in> set (vec_mat_Tensor a M2) \\<or> x \\<in> set (M1 \\<otimes> M2)", "have 7:\"\\<forall>x. (x \\<in>  (set (a # M1 \\<otimes> M2)))\n                         \\<longrightarrow> (vec ((length a)*(row_length M2)) x)\""], ["proof (prove)\nusing this:\n  \\<forall>x.\n     x \\<in> set (vec_mat_Tensor a M2) \\<or>\n     x \\<in> set (M1 \\<otimes> M2) \\<longrightarrow>\n     vec (length a * row_length M2) x\n  x \\<in> set (a # M1 \\<otimes> M2) \\<longrightarrow>\n  x \\<in> set (vec_mat_Tensor a M2) \\<or> x \\<in> set (M1 \\<otimes> M2)\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in> set (a # M1 \\<otimes> M2) \\<longrightarrow>\n       vec (length a * row_length M2) x", "by auto"], ["proof (state)\nthis:\n  \\<forall>x.\n     x \\<in> set (a # M1 \\<otimes> M2) \\<longrightarrow>\n     vec (length a * row_length M2) x\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "then"], ["proof (chain)\npicking this:\n  \\<forall>x.\n     x \\<in> set (a # M1 \\<otimes> M2) \\<longrightarrow>\n     vec (length a * row_length M2) x", "have 8:\n        \"Ball (set (a # M1 \\<otimes> M2)) (vec ((row_length (a#M1))*(row_length M2)))\""], ["proof (prove)\nusing this:\n  \\<forall>x.\n     x \\<in> set (a # M1 \\<otimes> M2) \\<longrightarrow>\n     vec (length a * row_length M2) x\n\ngoal (1 subgoal):\n 1. Ball (set (a # M1 \\<otimes> M2))\n     (vec (row_length (a # M1) * row_length M2))", "using Ball_def 0"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     x \\<in> set (a # M1 \\<otimes> M2) \\<longrightarrow>\n     vec (length a * row_length M2) x\n  Ball ?A ?P = (\\<forall>x. x \\<in> ?A \\<longrightarrow> ?P x)\n  row_length (a # M1) = length a\n\ngoal (1 subgoal):\n 1. Ball (set (a # M1 \\<otimes> M2))\n     (vec (row_length (a # M1) * row_length M2))", "by auto"], ["proof (state)\nthis:\n  Ball (set (a # M1 \\<otimes> M2))\n   (vec (row_length (a # M1) * row_length M2))\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "have \"(length ((a#M1)\\<otimes>M2)) = (length (a#M1))*(length M2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (a # M1 \\<otimes> M2) = length (a # M1) * length M2", "using length_Tensor"], ["proof (prove)\nusing this:\n  length (?M1.0 \\<otimes> ?M2.0) = length ?M1.0 * length ?M2.0\n\ngoal (1 subgoal):\n 1. length (a # M1 \\<otimes> M2) = length (a # M1) * length M2", "by metis"], ["proof (state)\nthis:\n  length (a # M1 \\<otimes> M2) = length (a # M1) * length M2\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "with 7 8"], ["proof (chain)\npicking this:\n  \\<forall>x.\n     x \\<in> set (a # M1 \\<otimes> M2) \\<longrightarrow>\n     vec (length a * row_length M2) x\n  Ball (set (a # M1 \\<otimes> M2))\n   (vec (row_length (a # M1) * row_length M2))\n  length (a # M1 \\<otimes> M2) = length (a # M1) * length M2", "have \"mat \n                     (row_length (a # M1) * row_length M2) \n                       (length (a # M1) * length M2) \n                                (a # M1 \\<otimes> M2)\""], ["proof (prove)\nusing this:\n  \\<forall>x.\n     x \\<in> set (a # M1 \\<otimes> M2) \\<longrightarrow>\n     vec (length a * row_length M2) x\n  Ball (set (a # M1 \\<otimes> M2))\n   (vec (row_length (a # M1) * row_length M2))\n  length (a # M1 \\<otimes> M2) = length (a # M1) * length M2\n\ngoal (1 subgoal):\n 1. mat (row_length (a # M1) * row_length M2) (length (a # M1) * length M2)\n     (a # M1 \\<otimes> M2)", "using mat_def"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     x \\<in> set (a # M1 \\<otimes> M2) \\<longrightarrow>\n     vec (length a * row_length M2) x\n  Ball (set (a # M1 \\<otimes> M2))\n   (vec (row_length (a # M1) * row_length M2))\n  length (a # M1 \\<otimes> M2) = length (a # M1) * length M2\n  mat ?nr ?nc ?m = (length ?m = ?nc \\<and> Ball (set ?m) (vec ?nr))\n\ngoal (1 subgoal):\n 1. mat (row_length (a # M1) * row_length M2) (length (a # M1) * length M2)\n     (a # M1 \\<otimes> M2)", "by (metis \"0\"  length_Tensor)"], ["proof (state)\nthis:\n  mat (row_length (a # M1) * row_length M2) (length (a # M1) * length M2)\n   (a # M1 \\<otimes> M2)\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M1 = aa # list \\<Longrightarrow>\n       mat (row_length (a # M1) * row_length M2)\n        (length (a # M1) * length M2) (a # M1 \\<otimes> M2)", "then"], ["proof (chain)\npicking this:\n  mat (row_length (a # M1) * row_length M2) (length (a # M1) * length M2)\n   (a # M1 \\<otimes> M2)", "show ?thesis"], ["proof (prove)\nusing this:\n  mat (row_length (a # M1) * row_length M2) (length (a # M1) * length M2)\n   (a # M1 \\<otimes> M2)\n\ngoal (1 subgoal):\n 1. mat (row_length (a # M1) * row_length M2) (length (a # M1) * length M2)\n     (a # M1 \\<otimes> M2)", "by auto"], ["proof (state)\nthis:\n  mat (row_length (a # M1) * row_length M2) (length (a # M1) * length M2)\n   (a # M1 \\<otimes> M2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mat (row_length (a # M1) * row_length M2) (length (a # M1) * length M2)\n   (a # M1 \\<otimes> M2)\n\ngoal (1 subgoal):\n 1. \\<And>a M1.\n       \\<lbrakk>mat (row_length M1) (length M1) M1 \\<and>\n                mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n                mat (row_length M1 * row_length M2) (length M1 * length M2)\n                 (M1 \\<otimes> M2);\n        mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n        mat (row_length M2) (length M2) M2\\<rbrakk>\n       \\<Longrightarrow> mat (row_length (a # M1) * row_length M2)\n                          (length (a # M1) * length M2)\n                          (a # M1 \\<otimes> M2)", "then"], ["proof (chain)\npicking this:\n  mat (row_length (a # M1) * row_length M2) (length (a # M1) * length M2)\n   (a # M1 \\<otimes> M2)", "show ?case"], ["proof (prove)\nusing this:\n  mat (row_length (a # M1) * row_length M2) (length (a # M1) * length M2)\n   (a # M1 \\<otimes> M2)\n\ngoal (1 subgoal):\n 1. mat (row_length (a # M1) * row_length M2) (length (a # M1) * length M2)\n     (a # M1 \\<otimes> M2)", "by auto"], ["proof (state)\nthis:\n  mat (row_length (a # M1) * row_length M2) (length (a # M1) * length M2)\n   (a # M1 \\<otimes> M2)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem effective_well_defined_Tensor:\n assumes \"(mat (row_length M1) (length M1) M1)\" \n     and \"(mat (row_length M2) (length M2) M2)\"\n shows \"mat \n            ((row_length M1)*(row_length M2)) \n            ((length M1)*(length M2)) \n                               (M1\\<otimes>M2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length M1 * row_length M2) (length M1 * length M2)\n     (M1 \\<otimes> M2)", "using well_defined_Tensor assms"], ["proof (prove)\nusing this:\n  mat (row_length ?M1.0) (length ?M1.0) ?M1.0 \\<and>\n  mat (row_length ?M2.0) (length ?M2.0) ?M2.0 \\<Longrightarrow>\n  mat (row_length ?M1.0 * row_length ?M2.0) (length ?M1.0 * length ?M2.0)\n   (?M1.0 \\<otimes> ?M2.0)\n  mat (row_length M1) (length M1) M1\n  mat (row_length M2) (length M2) M2\n\ngoal (1 subgoal):\n 1. mat (row_length M1 * row_length M2) (length M1 * length M2)\n     (M1 \\<otimes> M2)", "by auto"], ["", "definition natmod::\"nat \\<Rightarrow> nat \\<Rightarrow> nat\" (infixl \"nmod\" 50)\nwhere\n \"natmod x y = nat ((int x) mod (int y))\""], ["", "theorem times_elements:\n \"\\<forall>i.((i<(length v)) \\<longrightarrow> (times a v)!i = f a (v!i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<length v. local.times a v ! i = a * v ! i", "apply(rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. i < length v \\<longrightarrow> local.times a v ! i = a * v ! i", "proof(induct v)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < length [] \\<longrightarrow> local.times a [] ! i = a * [] ! i\n 2. \\<And>aa v i.\n       (\\<And>i.\n           i < length v \\<longrightarrow>\n           local.times a v ! i = a * v ! i) \\<Longrightarrow>\n       i < length (aa # v) \\<longrightarrow>\n       local.times a (aa # v) ! i = a * (aa # v) ! i", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < length [] \\<longrightarrow> local.times a [] ! i = a * [] ! i\n 2. \\<And>aa v i.\n       (\\<And>i.\n           i < length v \\<longrightarrow>\n           local.times a v ! i = a * v ! i) \\<Longrightarrow>\n       i < length (aa # v) \\<longrightarrow>\n       local.times a (aa # v) ! i = a * (aa # v) ! i", "have \"(length [] = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length [] = 0", "by auto"], ["proof (state)\nthis:\n  length [] = 0\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < length [] \\<longrightarrow> local.times a [] ! i = a * [] ! i\n 2. \\<And>aa v i.\n       (\\<And>i.\n           i < length v \\<longrightarrow>\n           local.times a v ! i = a * v ! i) \\<Longrightarrow>\n       i < length (aa # v) \\<longrightarrow>\n       local.times a (aa # v) ! i = a * (aa # v) ! i", "then"], ["proof (chain)\npicking this:\n  length [] = 0", "have \"i <(length []) \\<Longrightarrow> False\""], ["proof (prove)\nusing this:\n  length [] = 0\n\ngoal (1 subgoal):\n 1. i < length [] \\<Longrightarrow> False", "by auto"], ["proof (state)\nthis:\n  i < length [] \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < length [] \\<longrightarrow> local.times a [] ! i = a * [] ! i\n 2. \\<And>aa v i.\n       (\\<And>i.\n           i < length v \\<longrightarrow>\n           local.times a v ! i = a * v ! i) \\<Longrightarrow>\n       i < length (aa # v) \\<longrightarrow>\n       local.times a (aa # v) ! i = a * (aa # v) ! i", "moreover"], ["proof (state)\nthis:\n  i < length [] \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < length [] \\<longrightarrow> local.times a [] ! i = a * [] ! i\n 2. \\<And>aa v i.\n       (\\<And>i.\n           i < length v \\<longrightarrow>\n           local.times a v ! i = a * v ! i) \\<Longrightarrow>\n       i < length (aa # v) \\<longrightarrow>\n       local.times a (aa # v) ! i = a * (aa # v) ! i", "have \"(times a []) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.times a [] = []", "using times.simps(1)"], ["proof (prove)\nusing this:\n  local.times ?n [] = []\n\ngoal (1 subgoal):\n 1. local.times a [] = []", "by auto"], ["proof (state)\nthis:\n  local.times a [] = []\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < length [] \\<longrightarrow> local.times a [] ! i = a * [] ! i\n 2. \\<And>aa v i.\n       (\\<And>i.\n           i < length v \\<longrightarrow>\n           local.times a v ! i = a * v ! i) \\<Longrightarrow>\n       i < length (aa # v) \\<longrightarrow>\n       local.times a (aa # v) ! i = a * (aa # v) ! i", "ultimately"], ["proof (chain)\npicking this:\n  i < length [] \\<Longrightarrow> False\n  local.times a [] = []", "have \"(i<(length [])) \\<longrightarrow> (times a [])!i = f a ([]!i)\""], ["proof (prove)\nusing this:\n  i < length [] \\<Longrightarrow> False\n  local.times a [] = []\n\ngoal (1 subgoal):\n 1. i < length [] \\<longrightarrow> local.times a [] ! i = a * [] ! i", "by auto"], ["proof (state)\nthis:\n  i < length [] \\<longrightarrow> local.times a [] ! i = a * [] ! i\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < length [] \\<longrightarrow> local.times a [] ! i = a * [] ! i\n 2. \\<And>aa v i.\n       (\\<And>i.\n           i < length v \\<longrightarrow>\n           local.times a v ! i = a * v ! i) \\<Longrightarrow>\n       i < length (aa # v) \\<longrightarrow>\n       local.times a (aa # v) ! i = a * (aa # v) ! i", "then"], ["proof (chain)\npicking this:\n  i < length [] \\<longrightarrow> local.times a [] ! i = a * [] ! i", "have \"\\<forall>i. ((i<(length [])) \\<longrightarrow> (times a [])!i = f a ([]!i))\""], ["proof (prove)\nusing this:\n  i < length [] \\<longrightarrow> local.times a [] ! i = a * [] ! i\n\ngoal (1 subgoal):\n 1. \\<forall>i<length []. local.times a [] ! i = a * [] ! i", "by auto"], ["proof (state)\nthis:\n  \\<forall>i<length []. local.times a [] ! i = a * [] ! i\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < length [] \\<longrightarrow> local.times a [] ! i = a * [] ! i\n 2. \\<And>aa v i.\n       (\\<And>i.\n           i < length v \\<longrightarrow>\n           local.times a v ! i = a * v ! i) \\<Longrightarrow>\n       i < length (aa # v) \\<longrightarrow>\n       local.times a (aa # v) ! i = a * (aa # v) ! i", "then"], ["proof (chain)\npicking this:\n  \\<forall>i<length []. local.times a [] ! i = a * [] ! i", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>i<length []. local.times a [] ! i = a * [] ! i\n\ngoal (1 subgoal):\n 1. i < length [] \\<longrightarrow> local.times a [] ! i = a * [] ! i", "by auto"], ["proof (state)\nthis:\n  i < length [] \\<longrightarrow> local.times a [] ! i = a * [] ! i\n\ngoal (1 subgoal):\n 1. \\<And>aa v i.\n       (\\<And>i.\n           i < length v \\<longrightarrow>\n           local.times a v ! i = a * v ! i) \\<Longrightarrow>\n       i < length (aa # v) \\<longrightarrow>\n       local.times a (aa # v) ! i = a * (aa # v) ! i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa v i.\n       (\\<And>i.\n           i < length v \\<longrightarrow>\n           local.times a v ! i = a * v ! i) \\<Longrightarrow>\n       i < length (aa # v) \\<longrightarrow>\n       local.times a (aa # v) ! i = a * (aa # v) ! i", "case (Cons x xs)"], ["proof (state)\nthis:\n  ?i < length xs \\<longrightarrow> local.times a xs ! ?i = a * xs ! ?i\n\ngoal (1 subgoal):\n 1. \\<And>aa v i.\n       (\\<And>i.\n           i < length v \\<longrightarrow>\n           local.times a v ! i = a * v ! i) \\<Longrightarrow>\n       i < length (aa # v) \\<longrightarrow>\n       local.times a (aa # v) ! i = a * (aa # v) ! i", "have \"\\<forall>i.((x#xs)!(i+1) = (xs)!i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. (x # xs) ! (i + 1) = xs ! i", "by auto"], ["proof (state)\nthis:\n  \\<forall>i. (x # xs) ! (i + 1) = xs ! i\n\ngoal (1 subgoal):\n 1. \\<And>aa v i.\n       (\\<And>i.\n           i < length v \\<longrightarrow>\n           local.times a v ! i = a * v ! i) \\<Longrightarrow>\n       i < length (aa # v) \\<longrightarrow>\n       local.times a (aa # v) ! i = a * (aa # v) ! i", "have 0:\"((i<length (x#xs))\\<longrightarrow> ((i<(length xs)) \\<or> (i = (length xs))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length (x # xs) \\<longrightarrow> i < length xs \\<or> i = length xs", "by auto"], ["proof (state)\nthis:\n  i < length (x # xs) \\<longrightarrow> i < length xs \\<or> i = length xs\n\ngoal (1 subgoal):\n 1. \\<And>aa v i.\n       (\\<And>i.\n           i < length v \\<longrightarrow>\n           local.times a v ! i = a * v ! i) \\<Longrightarrow>\n       i < length (aa # v) \\<longrightarrow>\n       local.times a (aa # v) ! i = a * (aa # v) ! i", "have 1:\" ((i<length xs) \\<longrightarrow>((times a xs)!i = f a (xs!i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length xs \\<longrightarrow> local.times a xs ! i = a * xs ! i", "by (metis Cons.hyps)"], ["proof (state)\nthis:\n  i < length xs \\<longrightarrow> local.times a xs ! i = a * xs ! i\n\ngoal (1 subgoal):\n 1. \\<And>aa v i.\n       (\\<And>i.\n           i < length v \\<longrightarrow>\n           local.times a v ! i = a * v ! i) \\<Longrightarrow>\n       i < length (aa # v) \\<longrightarrow>\n       local.times a (aa # v) ! i = a * (aa # v) ! i", "have \"\\<forall>i.((x#xs)!(i+1) = (xs)!i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. (x # xs) ! (i + 1) = xs ! i", "by auto"], ["proof (state)\nthis:\n  \\<forall>i. (x # xs) ! (i + 1) = xs ! i\n\ngoal (1 subgoal):\n 1. \\<And>aa v i.\n       (\\<And>i.\n           i < length v \\<longrightarrow>\n           local.times a v ! i = a * v ! i) \\<Longrightarrow>\n       i < length (aa # v) \\<longrightarrow>\n       local.times a (aa # v) ! i = a * (aa # v) ! i", "have \"((i <length (x#xs)) \\<longrightarrow>(times a (x#xs))!i = f a ((x#xs)!i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length (x # xs) \\<longrightarrow>\n    local.times a (x # xs) ! i = a * (x # xs) ! i", "proof(cases i)"], ["proof (state)\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    i < length (x # xs) \\<longrightarrow>\n    local.times a (x # xs) ! i = a * (x # xs) ! i\n 2. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       i < length (x # xs) \\<longrightarrow>\n       local.times a (x # xs) ! i = a * (x # xs) ! i", "case 0"], ["proof (state)\nthis:\n  i = 0\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    i < length (x # xs) \\<longrightarrow>\n    local.times a (x # xs) ! i = a * (x # xs) ! i\n 2. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       i < length (x # xs) \\<longrightarrow>\n       local.times a (x # xs) ! i = a * (x # xs) ! i", "have \"((times a (x#xs))!i) = f a x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.times a (x # xs) ! i = a * x", "using 0 times.simps(2)"], ["proof (prove)\nusing this:\n  i = 0\n  local.times ?n (?y # ?ys) = (?n * ?y) # local.times ?n ?ys\n\ngoal (1 subgoal):\n 1. local.times a (x # xs) ! i = a * x", "by auto"], ["proof (state)\nthis:\n  local.times a (x # xs) ! i = a * x\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    i < length (x # xs) \\<longrightarrow>\n    local.times a (x # xs) ! i = a * (x # xs) ! i\n 2. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       i < length (x # xs) \\<longrightarrow>\n       local.times a (x # xs) ! i = a * (x # xs) ! i", "then"], ["proof (chain)\npicking this:\n  local.times a (x # xs) ! i = a * x", "have \"(times a (x#xs))!i = f a ((x#xs)!i)\""], ["proof (prove)\nusing this:\n  local.times a (x # xs) ! i = a * x\n\ngoal (1 subgoal):\n 1. local.times a (x # xs) ! i = a * (x # xs) ! i", "using 0"], ["proof (prove)\nusing this:\n  local.times a (x # xs) ! i = a * x\n  i = 0\n\ngoal (1 subgoal):\n 1. local.times a (x # xs) ! i = a * (x # xs) ! i", "by auto"], ["proof (state)\nthis:\n  local.times a (x # xs) ! i = a * (x # xs) ! i\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    i < length (x # xs) \\<longrightarrow>\n    local.times a (x # xs) ! i = a * (x # xs) ! i\n 2. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       i < length (x # xs) \\<longrightarrow>\n       local.times a (x # xs) ! i = a * (x # xs) ! i", "then"], ["proof (chain)\npicking this:\n  local.times a (x # xs) ! i = a * (x # xs) ! i", "show ?thesis"], ["proof (prove)\nusing this:\n  local.times a (x # xs) ! i = a * (x # xs) ! i\n\ngoal (1 subgoal):\n 1. i < length (x # xs) \\<longrightarrow>\n    local.times a (x # xs) ! i = a * (x # xs) ! i", "by auto"], ["proof (state)\nthis:\n  i < length (x # xs) \\<longrightarrow>\n  local.times a (x # xs) ! i = a * (x # xs) ! i\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       i < length (x # xs) \\<longrightarrow>\n       local.times a (x # xs) ! i = a * (x # xs) ! i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       i < length (x # xs) \\<longrightarrow>\n       local.times a (x # xs) ! i = a * (x # xs) ! i", "case (Suc j)"], ["proof (state)\nthis:\n  i = Suc j\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       i < length (x # xs) \\<longrightarrow>\n       local.times a (x # xs) ! i = a * (x # xs) ! i", "have 1:\"(times a (x#xs))!i = ((f a x)#(times a xs))!i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.times a (x # xs) ! i = ((a * x) # local.times a xs) ! i", "using times.simps(2)"], ["proof (prove)\nusing this:\n  local.times ?n (?y # ?ys) = (?n * ?y) # local.times ?n ?ys\n\ngoal (1 subgoal):\n 1. local.times a (x # xs) ! i = ((a * x) # local.times a xs) ! i", "by auto"], ["proof (state)\nthis:\n  local.times a (x # xs) ! i = ((a * x) # local.times a xs) ! i\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       i < length (x # xs) \\<longrightarrow>\n       local.times a (x # xs) ! i = a * (x # xs) ! i", "have 2:\"((f a x)#(times a xs))!i = (times a xs)!j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((a * x) # local.times a xs) ! i = local.times a xs ! j", "using Suc"], ["proof (prove)\nusing this:\n  i = Suc j\n\ngoal (1 subgoal):\n 1. ((a * x) # local.times a xs) ! i = local.times a xs ! j", "by auto"], ["proof (state)\nthis:\n  ((a * x) # local.times a xs) ! i = local.times a xs ! j\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       i < length (x # xs) \\<longrightarrow>\n       local.times a (x # xs) ! i = a * (x # xs) ! i", "have 3:\"(i <length (x#xs)) \\<longrightarrow> (j<length xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length (x # xs) \\<longrightarrow> j < length xs", "using One_nat_def Suc Suc_eq_plus1 list.size(4) not_less_eq"], ["proof (prove)\nusing this:\n  1 = Suc 0\n  i = Suc j\n  Suc ?n = ?n + 1\n  length (?x21.0 # ?x22.0) = length ?x22.0 + Suc 0\n  (\\<not> ?m < ?n) = (?n < Suc ?m)\n\ngoal (1 subgoal):\n 1. i < length (x # xs) \\<longrightarrow> j < length xs", "by metis"], ["proof (state)\nthis:\n  i < length (x # xs) \\<longrightarrow> j < length xs\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       i < length (x # xs) \\<longrightarrow>\n       local.times a (x # xs) ! i = a * (x # xs) ! i", "have 4:\"(j<length xs) \\<longrightarrow> ((times a xs)!j = (f a (xs!j)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < length xs \\<longrightarrow> local.times a xs ! j = a * xs ! j", "using 1"], ["proof (prove)\nusing this:\n  local.times a (x # xs) ! i = ((a * x) # local.times a xs) ! i\n\ngoal (1 subgoal):\n 1. j < length xs \\<longrightarrow> local.times a xs ! j = a * xs ! j", "by (metis Cons.hyps)"], ["proof (state)\nthis:\n  j < length xs \\<longrightarrow> local.times a xs ! j = a * xs ! j\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       i < length (x # xs) \\<longrightarrow>\n       local.times a (x # xs) ! i = a * (x # xs) ! i", "have 5:\"(x#xs)!i = (xs!j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x # xs) ! i = xs ! j", "using Suc"], ["proof (prove)\nusing this:\n  i = Suc j\n\ngoal (1 subgoal):\n 1. (x # xs) ! i = xs ! j", "by (metis nth_Cons_Suc)"], ["proof (state)\nthis:\n  (x # xs) ! i = xs ! j\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       i < length (x # xs) \\<longrightarrow>\n       local.times a (x # xs) ! i = a * (x # xs) ! i", "with 1 2 4"], ["proof (chain)\npicking this:\n  local.times a (x # xs) ! i = ((a * x) # local.times a xs) ! i\n  ((a * x) # local.times a xs) ! i = local.times a xs ! j\n  j < length xs \\<longrightarrow> local.times a xs ! j = a * xs ! j\n  (x # xs) ! i = xs ! j", "have \"(j<length xs) \n                            \\<longrightarrow> ((times a (x#xs))!i = (f a ((x#xs)!i)))\""], ["proof (prove)\nusing this:\n  local.times a (x # xs) ! i = ((a * x) # local.times a xs) ! i\n  ((a * x) # local.times a xs) ! i = local.times a xs ! j\n  j < length xs \\<longrightarrow> local.times a xs ! j = a * xs ! j\n  (x # xs) ! i = xs ! j\n\ngoal (1 subgoal):\n 1. j < length xs \\<longrightarrow>\n    local.times a (x # xs) ! i = a * (x # xs) ! i", "by auto"], ["proof (state)\nthis:\n  j < length xs \\<longrightarrow>\n  local.times a (x # xs) ! i = a * (x # xs) ! i\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       i < length (x # xs) \\<longrightarrow>\n       local.times a (x # xs) ! i = a * (x # xs) ! i", "with 3"], ["proof (chain)\npicking this:\n  i < length (x # xs) \\<longrightarrow> j < length xs\n  j < length xs \\<longrightarrow>\n  local.times a (x # xs) ! i = a * (x # xs) ! i", "have \"(i <length (x#xs)) \n                            \\<longrightarrow> ((times a (x#xs))!i = (f a ((x#xs)!i)))\""], ["proof (prove)\nusing this:\n  i < length (x # xs) \\<longrightarrow> j < length xs\n  j < length xs \\<longrightarrow>\n  local.times a (x # xs) ! i = a * (x # xs) ! i\n\ngoal (1 subgoal):\n 1. i < length (x # xs) \\<longrightarrow>\n    local.times a (x # xs) ! i = a * (x # xs) ! i", "by auto"], ["proof (state)\nthis:\n  i < length (x # xs) \\<longrightarrow>\n  local.times a (x # xs) ! i = a * (x # xs) ! i\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       i < length (x # xs) \\<longrightarrow>\n       local.times a (x # xs) ! i = a * (x # xs) ! i", "then"], ["proof (chain)\npicking this:\n  i < length (x # xs) \\<longrightarrow>\n  local.times a (x # xs) ! i = a * (x # xs) ! i", "show ?thesis"], ["proof (prove)\nusing this:\n  i < length (x # xs) \\<longrightarrow>\n  local.times a (x # xs) ! i = a * (x # xs) ! i\n\ngoal (1 subgoal):\n 1. i < length (x # xs) \\<longrightarrow>\n    local.times a (x # xs) ! i = a * (x # xs) ! i", "by auto"], ["proof (state)\nthis:\n  i < length (x # xs) \\<longrightarrow>\n  local.times a (x # xs) ! i = a * (x # xs) ! i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i < length (x # xs) \\<longrightarrow>\n  local.times a (x # xs) ! i = a * (x # xs) ! i\n\ngoal (1 subgoal):\n 1. \\<And>aa v i.\n       (\\<And>i.\n           i < length v \\<longrightarrow>\n           local.times a v ! i = a * v ! i) \\<Longrightarrow>\n       i < length (aa # v) \\<longrightarrow>\n       local.times a (aa # v) ! i = a * (aa # v) ! i", "then"], ["proof (chain)\npicking this:\n  i < length (x # xs) \\<longrightarrow>\n  local.times a (x # xs) ! i = a * (x # xs) ! i", "show ?case"], ["proof (prove)\nusing this:\n  i < length (x # xs) \\<longrightarrow>\n  local.times a (x # xs) ! i = a * (x # xs) ! i\n\ngoal (1 subgoal):\n 1. i < length (x # xs) \\<longrightarrow>\n    local.times a (x # xs) ! i = a * (x # xs) ! i", "by auto"], ["proof (state)\nthis:\n  i < length (x # xs) \\<longrightarrow>\n  local.times a (x # xs) ! i = a * (x # xs) ! i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma simpl_times_elements:\n assumes \"(i<length xs)\" \n shows \"((i<(length v)) \\<longrightarrow> (times a v)!i = f a (v!i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length v \\<longrightarrow> local.times a v ! i = a * v ! i", "using times_elements"], ["proof (prove)\nusing this:\n  \\<forall>i<length ?v. local.times ?a ?v ! i = ?a * ?v ! i\n\ngoal (1 subgoal):\n 1. i < length v \\<longrightarrow> local.times a v ! i = a * v ! i", "by auto"], ["", "(*some lemmas which are used to prove theorems*)"], ["", "lemma append_simpl: \"i<(length xs) \\<longrightarrow> (xs@ys)!i = (xs!i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length xs \\<longrightarrow> (xs @ ys) ! i = xs ! i", "using nth_append"], ["proof (prove)\nusing this:\n  (?xs @ ?ys) ! ?n =\n  (if ?n < length ?xs then ?xs ! ?n else ?ys ! (?n - length ?xs))\n\ngoal (1 subgoal):\n 1. i < length xs \\<longrightarrow> (xs @ ys) ! i = xs ! i", "by metis"], ["", "lemma append_simpl2: \"i \\<ge>(length xs) \\<longrightarrow> (xs@ys)!i = (ys!(i- (length xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs \\<le> i \\<longrightarrow> (xs @ ys) ! i = ys ! (i - length xs)", "using nth_append less_asym  leD"], ["proof (prove)\nusing this:\n  (?xs @ ?ys) ! ?n =\n  (if ?n < length ?xs then ?xs ! ?n else ?ys ! (?n - length ?xs))\n  \\<lbrakk>?x < ?y; \\<not> ?P \\<Longrightarrow> ?y < ?x\\<rbrakk>\n  \\<Longrightarrow> ?P\n  ?y \\<le> ?x \\<Longrightarrow> \\<not> ?x < ?y\n\ngoal (1 subgoal):\n 1. length xs \\<le> i \\<longrightarrow> (xs @ ys) ! i = ys ! (i - length xs)", "by metis"], ["", "lemma append_simpl3: \n assumes \"i > (length y)\"\n shows \" (i <((length (z#zs))*(length y))) \n                  \\<longrightarrow> (i - (length y))< (length zs)*(length y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length (z # zs) * length y \\<longrightarrow>\n    i - length y < length zs * length y", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. i < length (z # zs) * length y \\<longrightarrow>\n    i - length y < length zs * length y", "have \"length (z#zs) = (length zs)+1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (z # zs) = length zs + 1", "by auto"], ["proof (state)\nthis:\n  length (z # zs) = length zs + 1\n\ngoal (1 subgoal):\n 1. i < length (z # zs) * length y \\<longrightarrow>\n    i - length y < length zs * length y", "then"], ["proof (chain)\npicking this:\n  length (z # zs) = length zs + 1", "have \"i <((length (z#zs))*(length y)) \n                   \\<longrightarrow> i <((length zs)+1)*(length y)\""], ["proof (prove)\nusing this:\n  length (z # zs) = length zs + 1\n\ngoal (1 subgoal):\n 1. i < length (z # zs) * length y \\<longrightarrow>\n    i < (length zs + 1) * length y", "by auto"], ["proof (state)\nthis:\n  i < length (z # zs) * length y \\<longrightarrow>\n  i < (length zs + 1) * length y\n\ngoal (1 subgoal):\n 1. i < length (z # zs) * length y \\<longrightarrow>\n    i - length y < length zs * length y", "then"], ["proof (chain)\npicking this:\n  i < length (z # zs) * length y \\<longrightarrow>\n  i < (length zs + 1) * length y", "have 1: \"i <((length (z#zs))*(length y)) \n                  \\<longrightarrow> (i <((length zs)*(length y)+ (length y)))\""], ["proof (prove)\nusing this:\n  i < length (z # zs) * length y \\<longrightarrow>\n  i < (length zs + 1) * length y\n\ngoal (1 subgoal):\n 1. i < length (z # zs) * length y \\<longrightarrow>\n    i < length zs * length y + length y", "by auto"], ["proof (state)\nthis:\n  i < length (z # zs) * length y \\<longrightarrow>\n  i < length zs * length y + length y\n\ngoal (1 subgoal):\n 1. i < length (z # zs) * length y \\<longrightarrow>\n    i - length y < length zs * length y", "have \"i <((length zs)*(length y)+ (length y)) \n                   = ((i - (length y)) <((length zs)*(length y)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < length zs * length y + length y) =\n    (i - length y < length zs * length y)", "using assms"], ["proof (prove)\nusing this:\n  length y < i\n\ngoal (1 subgoal):\n 1. (i < length zs * length y + length y) =\n    (i - length y < length zs * length y)", "by auto"], ["proof (state)\nthis:\n  (i < length zs * length y + length y) =\n  (i - length y < length zs * length y)\n\ngoal (1 subgoal):\n 1. i < length (z # zs) * length y \\<longrightarrow>\n    i - length y < length zs * length y", "then"], ["proof (chain)\npicking this:\n  (i < length zs * length y + length y) =\n  (i - length y < length zs * length y)", "have \"(i <((length (z#zs))*(length y))) \n                  \\<longrightarrow> ((i - (length y)) <((length zs)*(length y)))\""], ["proof (prove)\nusing this:\n  (i < length zs * length y + length y) =\n  (i - length y < length zs * length y)\n\ngoal (1 subgoal):\n 1. i < length (z # zs) * length y \\<longrightarrow>\n    i - length y < length zs * length y", "by auto"], ["proof (state)\nthis:\n  i < length (z # zs) * length y \\<longrightarrow>\n  i - length y < length zs * length y\n\ngoal (1 subgoal):\n 1. i < length (z # zs) * length y \\<longrightarrow>\n    i - length y < length zs * length y", "then"], ["proof (chain)\npicking this:\n  i < length (z # zs) * length y \\<longrightarrow>\n  i - length y < length zs * length y", "show ?thesis"], ["proof (prove)\nusing this:\n  i < length (z # zs) * length y \\<longrightarrow>\n  i - length y < length zs * length y\n\ngoal (1 subgoal):\n 1. i < length (z # zs) * length y \\<longrightarrow>\n    i - length y < length zs * length y", "by auto"], ["proof (state)\nthis:\n  i < length (z # zs) * length y \\<longrightarrow>\n  i - length y < length zs * length y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma append_simpl4: \n\"(i > (length y))\n         \\<longrightarrow> ((i <((length (z#zs))*(length y)))) \n                \\<longrightarrow> ((i - (length y))< (length zs)*(length y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length y < i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    i - length y < length zs * length y", "using append_simpl3"], ["proof (prove)\nusing this:\n  length ?y < ?i \\<Longrightarrow>\n  ?i < length (?z # ?zs) * length ?y \\<longrightarrow>\n  ?i - length ?y < length ?zs * length ?y\n\ngoal (1 subgoal):\n 1. length y < i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    i - length y < length zs * length y", "by auto"], ["", "lemma vec_vec_Tensor_simpl: \n   \"i<(length y) \\<longrightarrow> (vec_vec_Tensor (z#zs) y)!i = (times z y)!i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i = local.times z y ! i", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. i < length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i = local.times z y ! i", "have a: \"vec_vec_Tensor (z#zs) y = (times z y)@(vec_vec_Tensor zs y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_vec_Tensor (z # zs) y = local.times z y @ vec_vec_Tensor zs y", "by auto"], ["proof (state)\nthis:\n  vec_vec_Tensor (z # zs) y = local.times z y @ vec_vec_Tensor zs y\n\ngoal (1 subgoal):\n 1. i < length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i = local.times z y ! i", "have b: \"length (times z y) = (length y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (local.times z y) = length y", "using preserving_length"], ["proof (prove)\nusing this:\n  length (local.times ?n ?y) = length ?y\n\ngoal (1 subgoal):\n 1. length (local.times z y) = length y", "by auto"], ["proof (state)\nthis:\n  length (local.times z y) = length y\n\ngoal (1 subgoal):\n 1. i < length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i = local.times z y ! i", "have \"i<(length (times z y)) \n          \\<longrightarrow> ((times z y)@(vec_vec_Tensor zs y))!i = (times z y)!i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length (local.times z y) \\<longrightarrow>\n    (local.times z y @ vec_vec_Tensor zs y) ! i = local.times z y ! i", "using append_simpl"], ["proof (prove)\nusing this:\n  ?i < length ?xs \\<longrightarrow> (?xs @ ?ys) ! ?i = ?xs ! ?i\n\ngoal (1 subgoal):\n 1. i < length (local.times z y) \\<longrightarrow>\n    (local.times z y @ vec_vec_Tensor zs y) ! i = local.times z y ! i", "by metis"], ["proof (state)\nthis:\n  i < length (local.times z y) \\<longrightarrow>\n  (local.times z y @ vec_vec_Tensor zs y) ! i = local.times z y ! i\n\ngoal (1 subgoal):\n 1. i < length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i = local.times z y ! i", "with b"], ["proof (chain)\npicking this:\n  length (local.times z y) = length y\n  i < length (local.times z y) \\<longrightarrow>\n  (local.times z y @ vec_vec_Tensor zs y) ! i = local.times z y ! i", "have \"i<(length y) \n          \\<longrightarrow> ((times z y)@(vec_vec_Tensor zs y))!i = (times z y)!i\""], ["proof (prove)\nusing this:\n  length (local.times z y) = length y\n  i < length (local.times z y) \\<longrightarrow>\n  (local.times z y @ vec_vec_Tensor zs y) ! i = local.times z y ! i\n\ngoal (1 subgoal):\n 1. i < length y \\<longrightarrow>\n    (local.times z y @ vec_vec_Tensor zs y) ! i = local.times z y ! i", "by auto"], ["proof (state)\nthis:\n  i < length y \\<longrightarrow>\n  (local.times z y @ vec_vec_Tensor zs y) ! i = local.times z y ! i\n\ngoal (1 subgoal):\n 1. i < length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i = local.times z y ! i", "with  a"], ["proof (chain)\npicking this:\n  vec_vec_Tensor (z # zs) y = local.times z y @ vec_vec_Tensor zs y\n  i < length y \\<longrightarrow>\n  (local.times z y @ vec_vec_Tensor zs y) ! i = local.times z y ! i", "have \"i<(length y) \n          \\<longrightarrow> (vec_vec_Tensor (z#zs) y)!i = (times z y)!i\""], ["proof (prove)\nusing this:\n  vec_vec_Tensor (z # zs) y = local.times z y @ vec_vec_Tensor zs y\n  i < length y \\<longrightarrow>\n  (local.times z y @ vec_vec_Tensor zs y) ! i = local.times z y ! i\n\ngoal (1 subgoal):\n 1. i < length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i = local.times z y ! i", "by auto"], ["proof (state)\nthis:\n  i < length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i = local.times z y ! i\n\ngoal (1 subgoal):\n 1. i < length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i = local.times z y ! i", "then"], ["proof (chain)\npicking this:\n  i < length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i = local.times z y ! i", "show ?thesis"], ["proof (prove)\nusing this:\n  i < length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i = local.times z y ! i\n\ngoal (1 subgoal):\n 1. i < length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i = local.times z y ! i", "by auto"], ["proof (state)\nthis:\n  i < length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i = local.times z y ! i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma vec_vec_Tensor_simpl2: \n  \"(i \\<ge> (length y)) \n  \\<longrightarrow> ((vec_vec_Tensor (z#zs) y)!i = (vec_vec_Tensor zs y)!(i- (length y)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length y \\<le> i \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i = vec_vec_Tensor zs y ! (i - length y)", "using vec_vec_Tensor.simps(2) append_simpl2  preserving_length"], ["proof (prove)\nusing this:\n  vec_vec_Tensor (?x # ?xs) ?ys =\n  local.times ?x ?ys @ vec_vec_Tensor ?xs ?ys\n  length ?xs \\<le> ?i \\<longrightarrow>\n  (?xs @ ?ys) ! ?i = ?ys ! (?i - length ?xs)\n  length (local.times ?n ?y) = length ?y\n\ngoal (1 subgoal):\n 1. length y \\<le> i \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i = vec_vec_Tensor zs y ! (i - length y)", "by metis"], ["", "lemma division_product: \n assumes \"(b::int)>0\"\n and \"a \\<ge>b\"\n shows \" (a div b) = ((a - b) div b) + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a div b = (a - b) div b + 1", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. a div b = (a - b) div b + 1", "fix c"], ["proof (state)\ngoal (1 subgoal):\n 1. a div b = (a - b) div b + 1", "have \"a -b \\<ge>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> a - b", "using assms(2)"], ["proof (prove)\nusing this:\n  b \\<le> a\n\ngoal (1 subgoal):\n 1. 0 \\<le> a - b", "by auto"], ["proof (state)\nthis:\n  0 \\<le> a - b\n\ngoal (1 subgoal):\n 1. a div b = (a - b) div b + 1", "have 1: \"a - b = a + (-1)*b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a - b = a + - 1 * b", "by auto"], ["proof (state)\nthis:\n  a - b = a + - 1 * b\n\ngoal (1 subgoal):\n 1. a div b = (a - b) div b + 1", "have \"(b \\<noteq> 0) \\<longrightarrow> ((a + b * (-1)) div b = (-1) + a div b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<noteq> 0 \\<longrightarrow> (a + b * - 1) div b = - 1 + a div b", "using div_mult_self2"], ["proof (prove)\nusing this:\n  ?b \\<noteq> (0::?'a) \\<Longrightarrow>\n  (?a + ?b * ?c) div ?b = ?c + ?a div ?b\n\ngoal (1 subgoal):\n 1. b \\<noteq> 0 \\<longrightarrow> (a + b * - 1) div b = - 1 + a div b", "by metis"], ["proof (state)\nthis:\n  b \\<noteq> 0 \\<longrightarrow> (a + b * - 1) div b = - 1 + a div b\n\ngoal (1 subgoal):\n 1. a div b = (a - b) div b + 1", "with 1 assms(1)"], ["proof (chain)\npicking this:\n  a - b = a + - 1 * b\n  0 < b\n  b \\<noteq> 0 \\<longrightarrow> (a + b * - 1) div b = - 1 + a div b", "have \"((a - b) div b) = (-1) + a div b\""], ["proof (prove)\nusing this:\n  a - b = a + - 1 * b\n  0 < b\n  b \\<noteq> 0 \\<longrightarrow> (a + b * - 1) div b = - 1 + a div b\n\ngoal (1 subgoal):\n 1. (a - b) div b = - 1 + a div b", "using less_int_code(1)"], ["proof (prove)\nusing this:\n  a - b = a + - 1 * b\n  0 < b\n  b \\<noteq> 0 \\<longrightarrow> (a + b * - 1) div b = - 1 + a div b\n  (0 < 0) = False\n\ngoal (1 subgoal):\n 1. (a - b) div b = - 1 + a div b", "by auto"], ["proof (state)\nthis:\n  (a - b) div b = - 1 + a div b\n\ngoal (1 subgoal):\n 1. a div b = (a - b) div b + 1", "then"], ["proof (chain)\npicking this:\n  (a - b) div b = - 1 + a div b", "have \"(a div b) = ((a - b) div b) + 1\""], ["proof (prove)\nusing this:\n  (a - b) div b = - 1 + a div b\n\ngoal (1 subgoal):\n 1. a div b = (a - b) div b + 1", "by auto"], ["proof (state)\nthis:\n  a div b = (a - b) div b + 1\n\ngoal (1 subgoal):\n 1. a div b = (a - b) div b + 1", "then"], ["proof (chain)\npicking this:\n  a div b = (a - b) div b + 1", "show ?thesis"], ["proof (prove)\nusing this:\n  a div b = (a - b) div b + 1\n\ngoal (1 subgoal):\n 1. a div b = (a - b) div b + 1", "by auto"], ["proof (state)\nthis:\n  a div b = (a - b) div b + 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma int_nat_div: \n   \"(int a) div (int b) = int ((a::nat) div b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int a div int b = int (a div b)", "by (metis zdiv_int)"], ["", "lemma int_nat_eq: \n assumes \"int (a::nat) = int b\"\n shows \"a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = b", "using  assms of_nat_eq_iff"], ["proof (prove)\nusing this:\n  int a = int b\n  (of_nat ?m = of_nat ?n) = (?m = ?n)\n\ngoal (1 subgoal):\n 1. a = b", "by auto"], ["", "lemma nat_div: \n assumes \"(b::nat) > 0\" \n     and \"a > b\"\n shows \"(a div b) = ((a - b) div b) + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a div b = (a - b) div b + 1", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. a div b = (a - b) div b + 1", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. a div b = (a - b) div b + 1", "have 1:\"(int b)>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < int b", "using assms(1) division_product"], ["proof (prove)\nusing this:\n  0 < b\n  \\<lbrakk>0 < ?b; ?b \\<le> ?a\\<rbrakk>\n  \\<Longrightarrow> ?a div ?b = (?a - ?b) div ?b + 1\n\ngoal (1 subgoal):\n 1. 0 < int b", "by auto"], ["proof (state)\nthis:\n  0 < int b\n\ngoal (1 subgoal):\n 1. a div b = (a - b) div b + 1", "moreover"], ["proof (state)\nthis:\n  0 < int b\n\ngoal (1 subgoal):\n 1. a div b = (a - b) div b + 1", "have \"(int a)>(int b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int b < int a", "using assms(2)"], ["proof (prove)\nusing this:\n  b < a\n\ngoal (1 subgoal):\n 1. int b < int a", "by auto"], ["proof (state)\nthis:\n  int b < int a\n\ngoal (1 subgoal):\n 1. a div b = (a - b) div b + 1", "with 1"], ["proof (chain)\npicking this:\n  0 < int b\n  int b < int a", "have 2: \"((int a) div (int b)) \n                   = (((int a) - (int b)) div (int b)) + 1\""], ["proof (prove)\nusing this:\n  0 < int b\n  int b < int a\n\ngoal (1 subgoal):\n 1. int a div int b = (int a - int b) div int b + 1", "using division_product"], ["proof (prove)\nusing this:\n  0 < int b\n  int b < int a\n  \\<lbrakk>0 < ?b; ?b \\<le> ?a\\<rbrakk>\n  \\<Longrightarrow> ?a div ?b = (?a - ?b) div ?b + 1\n\ngoal (1 subgoal):\n 1. int a div int b = (int a - int b) div int b + 1", "by auto"], ["proof (state)\nthis:\n  int a div int b = (int a - int b) div int b + 1\n\ngoal (1 subgoal):\n 1. a div b = (a - b) div b + 1", "from int_nat_div"], ["proof (chain)\npicking this:\n  int ?a div int ?b = int (?a div ?b)", "have 3: \"((int a) div (int b)) = int ( a div b)\""], ["proof (prove)\nusing this:\n  int ?a div int ?b = int (?a div ?b)\n\ngoal (1 subgoal):\n 1. int a div int b = int (a div b)", "by auto"], ["proof (state)\nthis:\n  int a div int b = int (a div b)\n\ngoal (1 subgoal):\n 1. a div b = (a - b) div b + 1", "from int_nat_div assms(2)"], ["proof (chain)\npicking this:\n  int ?a div int ?b = int (?a div ?b)\n  b < a", "have 4: \n        \"(((int a) - (int b)) div (int b)) = int ((a - b) div b)\""], ["proof (prove)\nusing this:\n  int ?a div int ?b = int (?a div ?b)\n  b < a\n\ngoal (1 subgoal):\n 1. (int a - int b) div int b = int ((a - b) div b)", "by (metis (full_types) less_asym not_less of_nat_diff)"], ["proof (state)\nthis:\n  (int a - int b) div int b = int ((a - b) div b)\n\ngoal (1 subgoal):\n 1. a div b = (a - b) div b + 1", "have \"(int x) + 1 = int (x +1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int x + 1 = int (x + 1)", "by auto"], ["proof (state)\nthis:\n  int x + 1 = int (x + 1)\n\ngoal (1 subgoal):\n 1. a div b = (a - b) div b + 1", "with 2 3 4"], ["proof (chain)\npicking this:\n  int a div int b = (int a - int b) div int b + 1\n  int a div int b = int (a div b)\n  (int a - int b) div int b = int ((a - b) div b)\n  int x + 1 = int (x + 1)", "have \"int (a div b) = int (((a - b) div b) + 1)\""], ["proof (prove)\nusing this:\n  int a div int b = (int a - int b) div int b + 1\n  int a div int b = int (a div b)\n  (int a - int b) div int b = int ((a - b) div b)\n  int x + 1 = int (x + 1)\n\ngoal (1 subgoal):\n 1. int (a div b) = int ((a - b) div b + 1)", "by auto"], ["proof (state)\nthis:\n  int (a div b) = int ((a - b) div b + 1)\n\ngoal (1 subgoal):\n 1. a div b = (a - b) div b + 1", "with int_nat_eq"], ["proof (chain)\npicking this:\n  int ?a = int ?b \\<Longrightarrow> ?a = ?b\n  int (a div b) = int ((a - b) div b + 1)", "have \"(a div b) = ((a - b) div b) + 1\""], ["proof (prove)\nusing this:\n  int ?a = int ?b \\<Longrightarrow> ?a = ?b\n  int (a div b) = int ((a - b) div b + 1)\n\ngoal (1 subgoal):\n 1. a div b = (a - b) div b + 1", "by auto"], ["proof (state)\nthis:\n  a div b = (a - b) div b + 1\n\ngoal (1 subgoal):\n 1. a div b = (a - b) div b + 1", "then"], ["proof (chain)\npicking this:\n  a div b = (a - b) div b + 1", "show ?thesis"], ["proof (prove)\nusing this:\n  a div b = (a - b) div b + 1\n\ngoal (1 subgoal):\n 1. a div b = (a - b) div b + 1", "by auto"], ["proof (state)\nthis:\n  a div b = (a - b) div b + 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mod_eq:\n \"(m::int) mod n = (m + (-1)*n) mod n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m mod n = (m + - 1 * n) mod n", "using mod_mult_self1"], ["proof (prove)\nusing this:\n  (?a + ?c * ?b) mod ?b = ?a mod ?b\n\ngoal (1 subgoal):\n 1. m mod n = (m + - 1 * n) mod n", "by metis"], ["", "lemma nat_mod_eq: \"int m mod int n = int (m mod n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int m mod int n = int (m mod n)", "by (simp add: of_nat_mod)"], ["", "lemma nat_mod: \n assumes  \"(m::nat) > n\"\n shows \"(m::nat) mod n = (m -n) mod n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m mod n = (m - n) mod n", "using assms mod_if not_less_iff_gr_or_eq"], ["proof (prove)\nusing this:\n  n < m\n  ?m mod ?n = (if ?m < ?n then ?m else (?m - ?n) mod ?n)\n  (\\<not> ?x < ?y) = (?y < ?x \\<or> ?x = ?y)\n\ngoal (1 subgoal):\n 1. m mod n = (m - n) mod n", "by auto"], ["", "lemma logic: \n assumes \"A \\<longrightarrow> B\" \n     and \"\\<not>A \\<longrightarrow> B\" \n shows \"B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B", "using assms(1) assms(2)"], ["proof (prove)\nusing this:\n  A \\<longrightarrow> B\n  \\<not> A \\<longrightarrow> B\n\ngoal (1 subgoal):\n 1. B", "by auto"], ["", "theorem vec_vec_Tensor_elements:\n assumes \" (y \\<noteq> [])\"\n shows \n   \"\\<forall>i.((i<((length x)*(length y)))\n       \\<longrightarrow> ((vec_vec_Tensor x y)!i) \n             = f (x!(i div (length y))) (y!(i mod (length y))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<length x * length y.\n       vec_vec_Tensor x y ! i = x ! (i div length y) * y ! (i mod length y)", "apply(rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length x * length y \\<longrightarrow>\n       vec_vec_Tensor x y ! i = x ! (i div length y) * y ! (i mod length y)", "proof(induct x)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < length [] * length y \\<longrightarrow>\n       vec_vec_Tensor [] y ! i =\n       [] ! (i div length y) * y ! (i mod length y)\n 2. \\<And>a x i.\n       (\\<And>i.\n           i < length x * length y \\<longrightarrow>\n           vec_vec_Tensor x y ! i =\n           x ! (i div length y) * y ! (i mod length y)) \\<Longrightarrow>\n       i < length (a # x) * length y \\<longrightarrow>\n       vec_vec_Tensor (a # x) y ! i =\n       (a # x) ! (i div length y) * y ! (i mod length y)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < length [] * length y \\<longrightarrow>\n       vec_vec_Tensor [] y ! i =\n       [] ! (i div length y) * y ! (i mod length y)\n 2. \\<And>a x i.\n       (\\<And>i.\n           i < length x * length y \\<longrightarrow>\n           vec_vec_Tensor x y ! i =\n           x ! (i div length y) * y ! (i mod length y)) \\<Longrightarrow>\n       i < length (a # x) * length y \\<longrightarrow>\n       vec_vec_Tensor (a # x) y ! i =\n       (a # x) ! (i div length y) * y ! (i mod length y)", "have \"(length [] = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length [] = 0", "by auto"], ["proof (state)\nthis:\n  length [] = 0\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < length [] * length y \\<longrightarrow>\n       vec_vec_Tensor [] y ! i =\n       [] ! (i div length y) * y ! (i mod length y)\n 2. \\<And>a x i.\n       (\\<And>i.\n           i < length x * length y \\<longrightarrow>\n           vec_vec_Tensor x y ! i =\n           x ! (i div length y) * y ! (i mod length y)) \\<Longrightarrow>\n       i < length (a # x) * length y \\<longrightarrow>\n       vec_vec_Tensor (a # x) y ! i =\n       (a # x) ! (i div length y) * y ! (i mod length y)", "also"], ["proof (state)\nthis:\n  length [] = 0\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < length [] * length y \\<longrightarrow>\n       vec_vec_Tensor [] y ! i =\n       [] ! (i div length y) * y ! (i mod length y)\n 2. \\<And>a x i.\n       (\\<And>i.\n           i < length x * length y \\<longrightarrow>\n           vec_vec_Tensor x y ! i =\n           x ! (i div length y) * y ! (i mod length y)) \\<Longrightarrow>\n       i < length (a # x) * length y \\<longrightarrow>\n       vec_vec_Tensor (a # x) y ! i =\n       (a # x) ! (i div length y) * y ! (i mod length y)", "have \"length (vec_vec_Tensor [] y) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (vec_vec_Tensor [] y) = 0", "using vec_vec_Tensor.simps(1)"], ["proof (prove)\nusing this:\n  vec_vec_Tensor [] ?ys = []\n\ngoal (1 subgoal):\n 1. length (vec_vec_Tensor [] y) = 0", "by auto"], ["proof (state)\nthis:\n  length (vec_vec_Tensor [] y) = 0\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < length [] * length y \\<longrightarrow>\n       vec_vec_Tensor [] y ! i =\n       [] ! (i div length y) * y ! (i mod length y)\n 2. \\<And>a x i.\n       (\\<And>i.\n           i < length x * length y \\<longrightarrow>\n           vec_vec_Tensor x y ! i =\n           x ! (i div length y) * y ! (i mod length y)) \\<Longrightarrow>\n       i < length (a # x) * length y \\<longrightarrow>\n       vec_vec_Tensor (a # x) y ! i =\n       (a # x) ! (i div length y) * y ! (i mod length y)", "then"], ["proof (chain)\npicking this:\n  length (vec_vec_Tensor [] y) = 0", "have \"i <(length (vec_vec_Tensor [] y)) \\<Longrightarrow> False\""], ["proof (prove)\nusing this:\n  length (vec_vec_Tensor [] y) = 0\n\ngoal (1 subgoal):\n 1. i < length (vec_vec_Tensor [] y) \\<Longrightarrow> False", "by auto"], ["proof (state)\nthis:\n  i < length (vec_vec_Tensor [] y) \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < length [] * length y \\<longrightarrow>\n       vec_vec_Tensor [] y ! i =\n       [] ! (i div length y) * y ! (i mod length y)\n 2. \\<And>a x i.\n       (\\<And>i.\n           i < length x * length y \\<longrightarrow>\n           vec_vec_Tensor x y ! i =\n           x ! (i div length y) * y ! (i mod length y)) \\<Longrightarrow>\n       i < length (a # x) * length y \\<longrightarrow>\n       vec_vec_Tensor (a # x) y ! i =\n       (a # x) ! (i div length y) * y ! (i mod length y)", "moreover"], ["proof (state)\nthis:\n  i < length (vec_vec_Tensor [] y) \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < length [] * length y \\<longrightarrow>\n       vec_vec_Tensor [] y ! i =\n       [] ! (i div length y) * y ! (i mod length y)\n 2. \\<And>a x i.\n       (\\<And>i.\n           i < length x * length y \\<longrightarrow>\n           vec_vec_Tensor x y ! i =\n           x ! (i div length y) * y ! (i mod length y)) \\<Longrightarrow>\n       i < length (a # x) * length y \\<longrightarrow>\n       vec_vec_Tensor (a # x) y ! i =\n       (a # x) ! (i div length y) * y ! (i mod length y)", "have \"(vec_vec_Tensor [] y) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_vec_Tensor [] y = []", "by auto"], ["proof (state)\nthis:\n  vec_vec_Tensor [] y = []\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < length [] * length y \\<longrightarrow>\n       vec_vec_Tensor [] y ! i =\n       [] ! (i div length y) * y ! (i mod length y)\n 2. \\<And>a x i.\n       (\\<And>i.\n           i < length x * length y \\<longrightarrow>\n           vec_vec_Tensor x y ! i =\n           x ! (i div length y) * y ! (i mod length y)) \\<Longrightarrow>\n       i < length (a # x) * length y \\<longrightarrow>\n       vec_vec_Tensor (a # x) y ! i =\n       (a # x) ! (i div length y) * y ! (i mod length y)", "moreover"], ["proof (state)\nthis:\n  vec_vec_Tensor [] y = []\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < length [] * length y \\<longrightarrow>\n       vec_vec_Tensor [] y ! i =\n       [] ! (i div length y) * y ! (i mod length y)\n 2. \\<And>a x i.\n       (\\<And>i.\n           i < length x * length y \\<longrightarrow>\n           vec_vec_Tensor x y ! i =\n           x ! (i div length y) * y ! (i mod length y)) \\<Longrightarrow>\n       i < length (a # x) * length y \\<longrightarrow>\n       vec_vec_Tensor (a # x) y ! i =\n       (a # x) ! (i div length y) * y ! (i mod length y)", "have \n   \"(i<(length (vec_vec_Tensor [] y))) \\<longrightarrow> \n   ((vec_vec_Tensor x y)!i) = f (x!(i div (length y))) (y!(i mod (length y)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length (vec_vec_Tensor [] y) \\<longrightarrow>\n    vec_vec_Tensor x y ! i = x ! (i div length y) * y ! (i mod length y)", "by auto"], ["proof (state)\nthis:\n  i < length (vec_vec_Tensor [] y) \\<longrightarrow>\n  vec_vec_Tensor x y ! i = x ! (i div length y) * y ! (i mod length y)\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < length [] * length y \\<longrightarrow>\n       vec_vec_Tensor [] y ! i =\n       [] ! (i div length y) * y ! (i mod length y)\n 2. \\<And>a x i.\n       (\\<And>i.\n           i < length x * length y \\<longrightarrow>\n           vec_vec_Tensor x y ! i =\n           x ! (i div length y) * y ! (i mod length y)) \\<Longrightarrow>\n       i < length (a # x) * length y \\<longrightarrow>\n       vec_vec_Tensor (a # x) y ! i =\n       (a # x) ! (i div length y) * y ! (i mod length y)", "then"], ["proof (chain)\npicking this:\n  i < length (vec_vec_Tensor [] y) \\<longrightarrow>\n  vec_vec_Tensor x y ! i = x ! (i div length y) * y ! (i mod length y)", "show ?case"], ["proof (prove)\nusing this:\n  i < length (vec_vec_Tensor [] y) \\<longrightarrow>\n  vec_vec_Tensor x y ! i = x ! (i div length y) * y ! (i mod length y)\n\ngoal (1 subgoal):\n 1. i < length [] * length y \\<longrightarrow>\n    vec_vec_Tensor [] y ! i = [] ! (i div length y) * y ! (i mod length y)", "by auto"], ["proof (state)\nthis:\n  i < length [] * length y \\<longrightarrow>\n  vec_vec_Tensor [] y ! i = [] ! (i div length y) * y ! (i mod length y)\n\ngoal (1 subgoal):\n 1. \\<And>a x i.\n       (\\<And>i.\n           i < length x * length y \\<longrightarrow>\n           vec_vec_Tensor x y ! i =\n           x ! (i div length y) * y ! (i mod length y)) \\<Longrightarrow>\n       i < length (a # x) * length y \\<longrightarrow>\n       vec_vec_Tensor (a # x) y ! i =\n       (a # x) ! (i div length y) * y ! (i mod length y)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x i.\n       (\\<And>i.\n           i < length x * length y \\<longrightarrow>\n           vec_vec_Tensor x y ! i =\n           x ! (i div length y) * y ! (i mod length y)) \\<Longrightarrow>\n       i < length (a # x) * length y \\<longrightarrow>\n       vec_vec_Tensor (a # x) y ! i =\n       (a # x) ! (i div length y) * y ! (i mod length y)", "case (Cons z zs)"], ["proof (state)\nthis:\n  ?i < length zs * length y \\<longrightarrow>\n  vec_vec_Tensor zs y ! ?i = zs ! (?i div length y) * y ! (?i mod length y)\n\ngoal (1 subgoal):\n 1. \\<And>a x i.\n       (\\<And>i.\n           i < length x * length y \\<longrightarrow>\n           vec_vec_Tensor x y ! i =\n           x ! (i div length y) * y ! (i mod length y)) \\<Longrightarrow>\n       i < length (a # x) * length y \\<longrightarrow>\n       vec_vec_Tensor (a # x) y ! i =\n       (a # x) ! (i div length y) * y ! (i mod length y)", "have 1:\"vec_vec_Tensor (z#zs) y = (times z y)@(vec_vec_Tensor zs y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_vec_Tensor (z # zs) y = local.times z y @ vec_vec_Tensor zs y", "by auto"], ["proof (state)\nthis:\n  vec_vec_Tensor (z # zs) y = local.times z y @ vec_vec_Tensor zs y\n\ngoal (1 subgoal):\n 1. \\<And>a x i.\n       (\\<And>i.\n           i < length x * length y \\<longrightarrow>\n           vec_vec_Tensor x y ! i =\n           x ! (i div length y) * y ! (i mod length y)) \\<Longrightarrow>\n       i < length (a # x) * length y \\<longrightarrow>\n       vec_vec_Tensor (a # x) y ! i =\n       (a # x) ! (i div length y) * y ! (i mod length y)", "have 2:\"i<(length y)\\<longrightarrow>((times z y)!i = f z (y!i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length y \\<longrightarrow> local.times z y ! i = z * y ! i", "using times_elements"], ["proof (prove)\nusing this:\n  \\<forall>i<length ?v. local.times ?a ?v ! i = ?a * ?v ! i\n\ngoal (1 subgoal):\n 1. i < length y \\<longrightarrow> local.times z y ! i = z * y ! i", "by auto"], ["proof (state)\nthis:\n  i < length y \\<longrightarrow> local.times z y ! i = z * y ! i\n\ngoal (1 subgoal):\n 1. \\<And>a x i.\n       (\\<And>i.\n           i < length x * length y \\<longrightarrow>\n           vec_vec_Tensor x y ! i =\n           x ! (i div length y) * y ! (i mod length y)) \\<Longrightarrow>\n       i < length (a # x) * length y \\<longrightarrow>\n       vec_vec_Tensor (a # x) y ! i =\n       (a # x) ! (i div length y) * y ! (i mod length y)", "moreover"], ["proof (state)\nthis:\n  i < length y \\<longrightarrow> local.times z y ! i = z * y ! i\n\ngoal (1 subgoal):\n 1. \\<And>a x i.\n       (\\<And>i.\n           i < length x * length y \\<longrightarrow>\n           vec_vec_Tensor x y ! i =\n           x ! (i div length y) * y ! (i mod length y)) \\<Longrightarrow>\n       i < length (a # x) * length y \\<longrightarrow>\n       vec_vec_Tensor (a # x) y ! i =\n       (a # x) ! (i div length y) * y ! (i mod length y)", "have 3:\n        \"i<(length y) \n           \\<longrightarrow> (vec_vec_Tensor (z#zs) y)!i = (times z y)!i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i = local.times z y ! i", "using vec_vec_Tensor_simpl"], ["proof (prove)\nusing this:\n  ?i < length ?y \\<longrightarrow>\n  vec_vec_Tensor (?z # ?zs) ?y ! ?i = local.times ?z ?y ! ?i\n\ngoal (1 subgoal):\n 1. i < length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i = local.times z y ! i", "by auto"], ["proof (state)\nthis:\n  i < length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i = local.times z y ! i\n\ngoal (1 subgoal):\n 1. \\<And>a x i.\n       (\\<And>i.\n           i < length x * length y \\<longrightarrow>\n           vec_vec_Tensor x y ! i =\n           x ! (i div length y) * y ! (i mod length y)) \\<Longrightarrow>\n       i < length (a # x) * length y \\<longrightarrow>\n       vec_vec_Tensor (a # x) y ! i =\n       (a # x) ! (i div length y) * y ! (i mod length y)", "moreover"], ["proof (state)\nthis:\n  i < length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i = local.times z y ! i\n\ngoal (1 subgoal):\n 1. \\<And>a x i.\n       (\\<And>i.\n           i < length x * length y \\<longrightarrow>\n           vec_vec_Tensor x y ! i =\n           x ! (i div length y) * y ! (i mod length y)) \\<Longrightarrow>\n       i < length (a # x) * length y \\<longrightarrow>\n       vec_vec_Tensor (a # x) y ! i =\n       (a # x) ! (i div length y) * y ! (i mod length y)", "have 35:\n           \"i<(length y) \\<longrightarrow> (vec_vec_Tensor (z#zs) y)!i = f z (y!i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length y \\<longrightarrow> vec_vec_Tensor (z # zs) y ! i = z * y ! i", "using calculation(1) calculation(2)"], ["proof (prove)\nusing this:\n  i < length y \\<longrightarrow> local.times z y ! i = z * y ! i\n  i < length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i = local.times z y ! i\n\ngoal (1 subgoal):\n 1. i < length y \\<longrightarrow> vec_vec_Tensor (z # zs) y ! i = z * y ! i", "by metis"], ["proof (state)\nthis:\n  i < length y \\<longrightarrow> vec_vec_Tensor (z # zs) y ! i = z * y ! i\n\ngoal (1 subgoal):\n 1. \\<And>a x i.\n       (\\<And>i.\n           i < length x * length y \\<longrightarrow>\n           vec_vec_Tensor x y ! i =\n           x ! (i div length y) * y ! (i mod length y)) \\<Longrightarrow>\n       i < length (a # x) * length y \\<longrightarrow>\n       vec_vec_Tensor (a # x) y ! i =\n       (a # x) ! (i div length y) * y ! (i mod length y)", "have 4:\"(y \\<noteq> []) \\<longrightarrow> (length y) >0 \""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<noteq> [] \\<longrightarrow> 0 < length y", "by auto"], ["proof (state)\nthis:\n  y \\<noteq> [] \\<longrightarrow> 0 < length y\n\ngoal (1 subgoal):\n 1. \\<And>a x i.\n       (\\<And>i.\n           i < length x * length y \\<longrightarrow>\n           vec_vec_Tensor x y ! i =\n           x ! (i div length y) * y ! (i mod length y)) \\<Longrightarrow>\n       i < length (a # x) * length y \\<longrightarrow>\n       vec_vec_Tensor (a # x) y ! i =\n       (a # x) ! (i div length y) * y ! (i mod length y)", "have \"(i <(length y)) \\<longrightarrow>  ((i div (length y)) = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length y \\<longrightarrow> i div length y = 0", "by auto"], ["proof (state)\nthis:\n  i < length y \\<longrightarrow> i div length y = 0\n\ngoal (1 subgoal):\n 1. \\<And>a x i.\n       (\\<And>i.\n           i < length x * length y \\<longrightarrow>\n           vec_vec_Tensor x y ! i =\n           x ! (i div length y) * y ! (i mod length y)) \\<Longrightarrow>\n       i < length (a # x) * length y \\<longrightarrow>\n       vec_vec_Tensor (a # x) y ! i =\n       (a # x) ! (i div length y) * y ! (i mod length y)", "then"], ["proof (chain)\npicking this:\n  i < length y \\<longrightarrow> i div length y = 0", "have  6:\"(i <(length y)) \\<longrightarrow> (z#zs)!(i div (length y)) = z\""], ["proof (prove)\nusing this:\n  i < length y \\<longrightarrow> i div length y = 0\n\ngoal (1 subgoal):\n 1. i < length y \\<longrightarrow> (z # zs) ! (i div length y) = z", "using nth_Cons_0"], ["proof (prove)\nusing this:\n  i < length y \\<longrightarrow> i div length y = 0\n  (?x # ?xs) ! 0 = ?x\n\ngoal (1 subgoal):\n 1. i < length y \\<longrightarrow> (z # zs) ! (i div length y) = z", "by auto"], ["proof (state)\nthis:\n  i < length y \\<longrightarrow> (z # zs) ! (i div length y) = z\n\ngoal (1 subgoal):\n 1. \\<And>a x i.\n       (\\<And>i.\n           i < length x * length y \\<longrightarrow>\n           vec_vec_Tensor x y ! i =\n           x ! (i div length y) * y ! (i mod length y)) \\<Longrightarrow>\n       i < length (a # x) * length y \\<longrightarrow>\n       vec_vec_Tensor (a # x) y ! i =\n       (a # x) ! (i div length y) * y ! (i mod length y)", "then"], ["proof (chain)\npicking this:\n  i < length y \\<longrightarrow> (z # zs) ! (i div length y) = z", "have 7:\"(i <(length y)) \\<longrightarrow> (i mod (length y)) = i\""], ["proof (prove)\nusing this:\n  i < length y \\<longrightarrow> (z # zs) ! (i div length y) = z\n\ngoal (1 subgoal):\n 1. i < length y \\<longrightarrow> i mod length y = i", "by auto"], ["proof (state)\nthis:\n  i < length y \\<longrightarrow> i mod length y = i\n\ngoal (1 subgoal):\n 1. \\<And>a x i.\n       (\\<And>i.\n           i < length x * length y \\<longrightarrow>\n           vec_vec_Tensor x y ! i =\n           x ! (i div length y) * y ! (i mod length y)) \\<Longrightarrow>\n       i < length (a # x) * length y \\<longrightarrow>\n       vec_vec_Tensor (a # x) y ! i =\n       (a # x) ! (i div length y) * y ! (i mod length y)", "with 2 6"], ["proof (chain)\npicking this:\n  i < length y \\<longrightarrow> local.times z y ! i = z * y ! i\n  i < length y \\<longrightarrow> (z # zs) ! (i div length y) = z\n  i < length y \\<longrightarrow> i mod length y = i", "have \"(i < (length y)) \n        \\<longrightarrow> (times z y)!i \n                 = f  ((z#zs)!(i div (length y))) (y! (i mod (length y)))\""], ["proof (prove)\nusing this:\n  i < length y \\<longrightarrow> local.times z y ! i = z * y ! i\n  i < length y \\<longrightarrow> (z # zs) ! (i div length y) = z\n  i < length y \\<longrightarrow> i mod length y = i\n\ngoal (1 subgoal):\n 1. i < length y \\<longrightarrow>\n    local.times z y ! i = (z # zs) ! (i div length y) * y ! (i mod length y)", "by auto"], ["proof (state)\nthis:\n  i < length y \\<longrightarrow>\n  local.times z y ! i = (z # zs) ! (i div length y) * y ! (i mod length y)\n\ngoal (1 subgoal):\n 1. \\<And>a x i.\n       (\\<And>i.\n           i < length x * length y \\<longrightarrow>\n           vec_vec_Tensor x y ! i =\n           x ! (i div length y) * y ! (i mod length y)) \\<Longrightarrow>\n       i < length (a # x) * length y \\<longrightarrow>\n       vec_vec_Tensor (a # x) y ! i =\n       (a # x) ! (i div length y) * y ! (i mod length y)", "with 3"], ["proof (chain)\npicking this:\n  i < length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i = local.times z y ! i\n  i < length y \\<longrightarrow>\n  local.times z y ! i = (z # zs) ! (i div length y) * y ! (i mod length y)", "have step1:\n      \"((i < (length y)) \n          \\<longrightarrow> ((i<((length x)*(length y)) \n          \\<longrightarrow> ((vec_vec_Tensor (z#zs) y)!i \n                      =  f  \n                             ((z#zs)!(i div (length y))) \n                              (y! (i mod (length y)))))))\""], ["proof (prove)\nusing this:\n  i < length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i = local.times z y ! i\n  i < length y \\<longrightarrow>\n  local.times z y ! i = (z # zs) ! (i div length y) * y ! (i mod length y)\n\ngoal (1 subgoal):\n 1. i < length y \\<longrightarrow>\n    i < length x * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "by auto"], ["proof (state)\nthis:\n  i < length y \\<longrightarrow>\n  i < length x * length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i =\n  (z # zs) ! (i div length y) * y ! (i mod length y)\n\ngoal (1 subgoal):\n 1. \\<And>a x i.\n       (\\<And>i.\n           i < length x * length y \\<longrightarrow>\n           vec_vec_Tensor x y ! i =\n           x ! (i div length y) * y ! (i mod length y)) \\<Longrightarrow>\n       i < length (a # x) * length y \\<longrightarrow>\n       vec_vec_Tensor (a # x) y ! i =\n       (a # x) ! (i div length y) * y ! (i mod length y)", "have \"((length y) \\<le> i) \\<longrightarrow> (i - (length y)) \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length y \\<le> i \\<longrightarrow> 0 \\<le> i - length y", "by auto"], ["proof (state)\nthis:\n  length y \\<le> i \\<longrightarrow> 0 \\<le> i - length y\n\ngoal (1 subgoal):\n 1. \\<And>a x i.\n       (\\<And>i.\n           i < length x * length y \\<longrightarrow>\n           vec_vec_Tensor x y ! i =\n           x ! (i div length y) * y ! (i mod length y)) \\<Longrightarrow>\n       i < length (a # x) * length y \\<longrightarrow>\n       vec_vec_Tensor (a # x) y ! i =\n       (a # x) ! (i div length y) * y ! (i mod length y)", "have step2: \n        \"((length y) < i) \n           \\<longrightarrow> ((i < (length (z#zs)*(length y)))\n           \\<longrightarrow>((vec_vec_Tensor (z#zs) y)!i) \n                          = f \n                              ((z#zs)!(i div (length y))) \n                              (y!(i mod (length y))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length y < i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. length y < i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "have \"(length y)>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < length y", "using assms"], ["proof (prove)\nusing this:\n  y \\<noteq> []\n\ngoal (1 subgoal):\n 1. 0 < length y", "by auto"], ["proof (state)\nthis:\n  0 < length y\n\ngoal (1 subgoal):\n 1. length y < i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "then"], ["proof (chain)\npicking this:\n  0 < length y", "have 1: \n           \"(i > (length y))\n               \\<longrightarrow>(i div (length y)) = ((i-(length y)) div (length y)) + 1\""], ["proof (prove)\nusing this:\n  0 < length y\n\ngoal (1 subgoal):\n 1. length y < i \\<longrightarrow>\n    i div length y = (i - length y) div length y + 1", "using nat_div"], ["proof (prove)\nusing this:\n  0 < length y\n  \\<lbrakk>0 < ?b; ?b < ?a\\<rbrakk>\n  \\<Longrightarrow> ?a div ?b = (?a - ?b) div ?b + 1\n\ngoal (1 subgoal):\n 1. length y < i \\<longrightarrow>\n    i div length y = (i - length y) div length y + 1", "by auto"], ["proof (state)\nthis:\n  length y < i \\<longrightarrow>\n  i div length y = (i - length y) div length y + 1\n\ngoal (1 subgoal):\n 1. length y < i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "have \"zs!j = (z#zs)!(j+1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. zs ! j = (z # zs) ! (j + 1)", "by auto"], ["proof (state)\nthis:\n  zs ! j = (z # zs) ! (j + 1)\n\ngoal (1 subgoal):\n 1. length y < i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "then"], ["proof (chain)\npicking this:\n  zs ! j = (z # zs) ! (j + 1)", "have \n            \"(zs!((i - (length y)) div (length y))) \n                     = (z#zs)!(((i - (length y)) div (length y))+1)\""], ["proof (prove)\nusing this:\n  zs ! j = (z # zs) ! (j + 1)\n\ngoal (1 subgoal):\n 1. zs ! ((i - length y) div length y) =\n    (z # zs) ! ((i - length y) div length y + 1)", "by auto"], ["proof (state)\nthis:\n  zs ! ((i - length y) div length y) =\n  (z # zs) ! ((i - length y) div length y + 1)\n\ngoal (1 subgoal):\n 1. length y < i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "with 1"], ["proof (chain)\npicking this:\n  length y < i \\<longrightarrow>\n  i div length y = (i - length y) div length y + 1\n  zs ! ((i - length y) div length y) =\n  (z # zs) ! ((i - length y) div length y + 1)", "have 2: \n           \"(i > (length y))\n              \\<longrightarrow> (zs!((i - (length y)) div (length y)) \n                     = (z#zs)!(i div (length y)))\""], ["proof (prove)\nusing this:\n  length y < i \\<longrightarrow>\n  i div length y = (i - length y) div length y + 1\n  zs ! ((i - length y) div length y) =\n  (z # zs) ! ((i - length y) div length y + 1)\n\ngoal (1 subgoal):\n 1. length y < i \\<longrightarrow>\n    zs ! ((i - length y) div length y) = (z # zs) ! (i div length y)", "by auto"], ["proof (state)\nthis:\n  length y < i \\<longrightarrow>\n  zs ! ((i - length y) div length y) = (z # zs) ! (i div length y)\n\ngoal (1 subgoal):\n 1. length y < i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "have \"(i > (length y))\n               \\<longrightarrow>((i mod (length y)) \n                                 = ((i - (length y)) mod (length y)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length y < i \\<longrightarrow>\n    i mod length y = (i - length y) mod length y", "using nat_mod"], ["proof (prove)\nusing this:\n  ?n < ?m \\<Longrightarrow> ?m mod ?n = (?m - ?n) mod ?n\n\ngoal (1 subgoal):\n 1. length y < i \\<longrightarrow>\n    i mod length y = (i - length y) mod length y", "by auto"], ["proof (state)\nthis:\n  length y < i \\<longrightarrow>\n  i mod length y = (i - length y) mod length y\n\ngoal (1 subgoal):\n 1. length y < i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "then"], ["proof (chain)\npicking this:\n  length y < i \\<longrightarrow>\n  i mod length y = (i - length y) mod length y", "have 3:\n          \"(i > (length y))\n                  \\<longrightarrow>((y! (i mod (length y))) \n                                = (y! ((i - (length y)) mod (length y))))\""], ["proof (prove)\nusing this:\n  length y < i \\<longrightarrow>\n  i mod length y = (i - length y) mod length y\n\ngoal (1 subgoal):\n 1. length y < i \\<longrightarrow>\n    y ! (i mod length y) = y ! ((i - length y) mod length y)", "by auto"], ["proof (state)\nthis:\n  length y < i \\<longrightarrow>\n  y ! (i mod length y) = y ! ((i - length y) mod length y)\n\ngoal (1 subgoal):\n 1. length y < i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "have 4:\"(i > (length y))\n                       \\<longrightarrow>(vec_vec_Tensor (z#zs) y)!i \n                                = (vec_vec_Tensor zs y)!(i- (length y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length y < i \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i = vec_vec_Tensor zs y ! (i - length y)", "using vec_vec_Tensor_simpl2"], ["proof (prove)\nusing this:\n  length ?y \\<le> ?i \\<longrightarrow>\n  vec_vec_Tensor (?z # ?zs) ?y ! ?i =\n  vec_vec_Tensor ?zs ?y ! (?i - length ?y)\n\ngoal (1 subgoal):\n 1. length y < i \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i = vec_vec_Tensor zs y ! (i - length y)", "by auto"], ["proof (state)\nthis:\n  length y < i \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i = vec_vec_Tensor zs y ! (i - length y)\n\ngoal (1 subgoal):\n 1. length y < i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "have 5: \"(i > (length y)) \n                 \\<longrightarrow>((i <((length (z#zs))*(length y)))) \n                          = (i - (length y)< (length zs)*(length y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length y < i \\<longrightarrow>\n    (i < length (z # zs) * length y) = (i - length y < length zs * length y)", "by auto"], ["proof (state)\nthis:\n  length y < i \\<longrightarrow>\n  (i < length (z # zs) * length y) = (i - length y < length zs * length y)\n\ngoal (1 subgoal):\n 1. length y < i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "then"], ["proof (chain)\npicking this:\n  length y < i \\<longrightarrow>\n  (i < length (z # zs) * length y) = (i - length y < length zs * length y)", "have 6:\n             \"\\<forall>i.((i<((length zs)*(length y)))\n                       \\<longrightarrow> ((vec_vec_Tensor zs y)!i) \n                                 = f \n                                    (zs!(i div (length y))) \n                                    (y!(i mod (length y))))\""], ["proof (prove)\nusing this:\n  length y < i \\<longrightarrow>\n  (i < length (z # zs) * length y) = (i - length y < length zs * length y)\n\ngoal (1 subgoal):\n 1. \\<forall>i<length zs * length y.\n       vec_vec_Tensor zs y ! i =\n       zs ! (i div length y) * y ! (i mod length y)", "using Cons.hyps"], ["proof (prove)\nusing this:\n  length y < i \\<longrightarrow>\n  (i < length (z # zs) * length y) = (i - length y < length zs * length y)\n  ?i < length zs * length y \\<longrightarrow>\n  vec_vec_Tensor zs y ! ?i = zs ! (?i div length y) * y ! (?i mod length y)\n\ngoal (1 subgoal):\n 1. \\<forall>i<length zs * length y.\n       vec_vec_Tensor zs y ! i =\n       zs ! (i div length y) * y ! (i mod length y)", "by auto"], ["proof (state)\nthis:\n  \\<forall>i<length zs * length y.\n     vec_vec_Tensor zs y ! i = zs ! (i div length y) * y ! (i mod length y)\n\ngoal (1 subgoal):\n 1. length y < i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "with 5"], ["proof (chain)\npicking this:\n  length y < i \\<longrightarrow>\n  (i < length (z # zs) * length y) = (i - length y < length zs * length y)\n  \\<forall>i<length zs * length y.\n     vec_vec_Tensor zs y ! i = zs ! (i div length y) * y ! (i mod length y)", "have \"(i > (length y))\n                       \\<longrightarrow> ((i<((length (z#zs))*(length y)))\n                       \\<longrightarrow> ((vec_vec_Tensor zs y)!(i -(length y))) \n                               = f \n                                  (zs!((i -(length y)) div (length y))) \n                                  (y!((i -(length y)) mod (length y))))\n                                   = ((i<((length zs)*(length y)))\n                                      \\<longrightarrow> ((vec_vec_Tensor zs y)!i) \n                                                = f \n                                                    (zs!(i div (length y))) \n                                                    (y!(i mod (length y))))\""], ["proof (prove)\nusing this:\n  length y < i \\<longrightarrow>\n  (i < length (z # zs) * length y) = (i - length y < length zs * length y)\n  \\<forall>i<length zs * length y.\n     vec_vec_Tensor zs y ! i = zs ! (i div length y) * y ! (i mod length y)\n\ngoal (1 subgoal):\n 1. length y < i \\<longrightarrow>\n    (i < length (z # zs) * length y \\<longrightarrow>\n     vec_vec_Tensor zs y ! (i - length y) =\n     zs ! ((i - length y) div length y) *\n     y ! ((i - length y) mod length y)) =\n    (i < length zs * length y \\<longrightarrow>\n     vec_vec_Tensor zs y ! i = zs ! (i div length y) * y ! (i mod length y))", "by auto"], ["proof (state)\nthis:\n  length y < i \\<longrightarrow>\n  (i < length (z # zs) * length y \\<longrightarrow>\n   vec_vec_Tensor zs y ! (i - length y) =\n   zs ! ((i - length y) div length y) * y ! ((i - length y) mod length y)) =\n  (i < length zs * length y \\<longrightarrow>\n   vec_vec_Tensor zs y ! i = zs ! (i div length y) * y ! (i mod length y))\n\ngoal (1 subgoal):\n 1. length y < i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "with 6"], ["proof (chain)\npicking this:\n  \\<forall>i<length zs * length y.\n     vec_vec_Tensor zs y ! i = zs ! (i div length y) * y ! (i mod length y)\n  length y < i \\<longrightarrow>\n  (i < length (z # zs) * length y \\<longrightarrow>\n   vec_vec_Tensor zs y ! (i - length y) =\n   zs ! ((i - length y) div length y) * y ! ((i - length y) mod length y)) =\n  (i < length zs * length y \\<longrightarrow>\n   vec_vec_Tensor zs y ! i = zs ! (i div length y) * y ! (i mod length y))", "have \n           \"(i > (length y))\n                \\<longrightarrow>((i<((length (z#zs))*(length y)))\n                \\<longrightarrow> ((vec_vec_Tensor zs y)!(i -(length y))) \n                            = f \n                               (zs!((i -(length y)) div (length y))) \n                               (y!((i -(length y))  mod (length y))))\""], ["proof (prove)\nusing this:\n  \\<forall>i<length zs * length y.\n     vec_vec_Tensor zs y ! i = zs ! (i div length y) * y ! (i mod length y)\n  length y < i \\<longrightarrow>\n  (i < length (z # zs) * length y \\<longrightarrow>\n   vec_vec_Tensor zs y ! (i - length y) =\n   zs ! ((i - length y) div length y) * y ! ((i - length y) mod length y)) =\n  (i < length zs * length y \\<longrightarrow>\n   vec_vec_Tensor zs y ! i = zs ! (i div length y) * y ! (i mod length y))\n\ngoal (1 subgoal):\n 1. length y < i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor zs y ! (i - length y) =\n    zs ! ((i - length y) div length y) * y ! ((i - length y) mod length y)", "by auto"], ["proof (state)\nthis:\n  length y < i \\<longrightarrow>\n  i < length (z # zs) * length y \\<longrightarrow>\n  vec_vec_Tensor zs y ! (i - length y) =\n  zs ! ((i - length y) div length y) * y ! ((i - length y) mod length y)\n\ngoal (1 subgoal):\n 1. length y < i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "with 2 3 4"], ["proof (chain)\npicking this:\n  length y < i \\<longrightarrow>\n  zs ! ((i - length y) div length y) = (z # zs) ! (i div length y)\n  length y < i \\<longrightarrow>\n  y ! (i mod length y) = y ! ((i - length y) mod length y)\n  length y < i \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i = vec_vec_Tensor zs y ! (i - length y)\n  length y < i \\<longrightarrow>\n  i < length (z # zs) * length y \\<longrightarrow>\n  vec_vec_Tensor zs y ! (i - length y) =\n  zs ! ((i - length y) div length y) * y ! ((i - length y) mod length y)", "have  \n            \"(i > (length y))\n                \\<longrightarrow>((i<((length (z#zs))*(length y)))\n                \\<longrightarrow>((vec_vec_Tensor (z#zs) y)!i) \n                         =  f \n                               ((z#zs)!(i div (length y))) \n                               (y!(i mod (length y))))\""], ["proof (prove)\nusing this:\n  length y < i \\<longrightarrow>\n  zs ! ((i - length y) div length y) = (z # zs) ! (i div length y)\n  length y < i \\<longrightarrow>\n  y ! (i mod length y) = y ! ((i - length y) mod length y)\n  length y < i \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i = vec_vec_Tensor zs y ! (i - length y)\n  length y < i \\<longrightarrow>\n  i < length (z # zs) * length y \\<longrightarrow>\n  vec_vec_Tensor zs y ! (i - length y) =\n  zs ! ((i - length y) div length y) * y ! ((i - length y) mod length y)\n\ngoal (1 subgoal):\n 1. length y < i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "by auto"], ["proof (state)\nthis:\n  length y < i \\<longrightarrow>\n  i < length (z # zs) * length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i =\n  (z # zs) ! (i div length y) * y ! (i mod length y)\n\ngoal (1 subgoal):\n 1. length y < i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "then"], ["proof (chain)\npicking this:\n  length y < i \\<longrightarrow>\n  i < length (z # zs) * length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i =\n  (z # zs) ! (i div length y) * y ! (i mod length y)", "show ?thesis"], ["proof (prove)\nusing this:\n  length y < i \\<longrightarrow>\n  i < length (z # zs) * length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i =\n  (z # zs) ! (i div length y) * y ! (i mod length y)\n\ngoal (1 subgoal):\n 1. length y < i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "by auto"], ["proof (state)\nthis:\n  length y < i \\<longrightarrow>\n  i < length (z # zs) * length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i =\n  (z # zs) ! (i div length y) * y ! (i mod length y)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length y < i \\<longrightarrow>\n  i < length (z # zs) * length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i =\n  (z # zs) ! (i div length y) * y ! (i mod length y)\n\ngoal (1 subgoal):\n 1. \\<And>a x i.\n       (\\<And>i.\n           i < length x * length y \\<longrightarrow>\n           vec_vec_Tensor x y ! i =\n           x ! (i div length y) * y ! (i mod length y)) \\<Longrightarrow>\n       i < length (a # x) * length y \\<longrightarrow>\n       vec_vec_Tensor (a # x) y ! i =\n       (a # x) ! (i div length y) * y ! (i mod length y)", "have \"((length y) = i) \n                     \\<longrightarrow> ((i < (length (z#zs)*(length y)))\n                     \\<longrightarrow> ((vec_vec_Tensor (z#zs) y)!i) \n                                          = f \n                                              ((z#zs)!(i div (length y))) \n                                              (y!(i mod (length y))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length y = i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. length y = i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "have 1:\"(i = (length y)) \n                  \\<longrightarrow> ((vec_vec_Tensor (z#zs) y)!i) \n                                        = (vec_vec_Tensor zs y)!0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i = length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i = vec_vec_Tensor zs y ! 0", "using vec_vec_Tensor_simpl2"], ["proof (prove)\nusing this:\n  length ?y \\<le> ?i \\<longrightarrow>\n  vec_vec_Tensor (?z # ?zs) ?y ! ?i =\n  vec_vec_Tensor ?zs ?y ! (?i - length ?y)\n\ngoal (1 subgoal):\n 1. i = length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i = vec_vec_Tensor zs y ! 0", "by auto"], ["proof (state)\nthis:\n  i = length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i = vec_vec_Tensor zs y ! 0\n\ngoal (1 subgoal):\n 1. length y = i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "have 2:\"(i = length y) \\<longrightarrow> (i mod (length y)) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i = length y \\<longrightarrow> i mod length y = 0", "by auto"], ["proof (state)\nthis:\n  i = length y \\<longrightarrow> i mod length y = 0\n\ngoal (1 subgoal):\n 1. length y = i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "have 3:\"(i = length y) \\<longrightarrow> (i div (length y)) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i = length y \\<longrightarrow> i div length y = 1", "using 4 assms div_self less_numeral_extra(3)"], ["proof (prove)\nusing this:\n  y \\<noteq> [] \\<longrightarrow> 0 < length y\n  y \\<noteq> []\n  ?a \\<noteq> (0::?'a) \\<Longrightarrow> ?a div ?a = (1::?'a)\n  \\<not> (0::?'a) < (0::?'a)\n\ngoal (1 subgoal):\n 1. i = length y \\<longrightarrow> i div length y = 1", "by auto"], ["proof (state)\nthis:\n  i = length y \\<longrightarrow> i div length y = 1\n\ngoal (1 subgoal):\n 1. length y = i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "have 4: \"(i = length y) \n                  \\<longrightarrow> ((i < (length (z#zs))*(length y)) \n                               = (0 < (length zs)*(length y)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i = length y \\<longrightarrow>\n    (i < length (z # zs) * length y) = (0 < length zs * length y)", "by auto"], ["proof (state)\nthis:\n  i = length y \\<longrightarrow>\n  (i < length (z # zs) * length y) = (0 < length zs * length y)\n\ngoal (1 subgoal):\n 1. length y = i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "have \"(z#zs)!1 = (zs!0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (z # zs) ! 1 = zs ! 0", "by auto"], ["proof (state)\nthis:\n  (z # zs) ! 1 = zs ! 0\n\ngoal (1 subgoal):\n 1. length y = i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "with 3"], ["proof (chain)\npicking this:\n  i = length y \\<longrightarrow> i div length y = 1\n  (z # zs) ! 1 = zs ! 0", "have 5:\" (i = length y) \n                              \\<longrightarrow> ((z#zs)!(i div (length y))) = (zs!0)\""], ["proof (prove)\nusing this:\n  i = length y \\<longrightarrow> i div length y = 1\n  (z # zs) ! 1 = zs ! 0\n\ngoal (1 subgoal):\n 1. i = length y \\<longrightarrow> (z # zs) ! (i div length y) = zs ! 0", "by auto"], ["proof (state)\nthis:\n  i = length y \\<longrightarrow> (z # zs) ! (i div length y) = zs ! 0\n\ngoal (1 subgoal):\n 1. length y = i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "have \" \\<forall>i.((i < (length zs)*(length y))\n                               \\<longrightarrow>((vec_vec_Tensor (zs) y)!i) \n                                             = f \n                                                 ((zs)!(i div (length y))) \n                                                 (y!(i mod (length y))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<length zs * length y.\n       vec_vec_Tensor zs y ! i =\n       zs ! (i div length y) * y ! (i mod length y)", "using Cons.hyps"], ["proof (prove)\nusing this:\n  ?i < length zs * length y \\<longrightarrow>\n  vec_vec_Tensor zs y ! ?i = zs ! (?i div length y) * y ! (?i mod length y)\n\ngoal (1 subgoal):\n 1. \\<forall>i<length zs * length y.\n       vec_vec_Tensor zs y ! i =\n       zs ! (i div length y) * y ! (i mod length y)", "by auto"], ["proof (state)\nthis:\n  \\<forall>i<length zs * length y.\n     vec_vec_Tensor zs y ! i = zs ! (i div length y) * y ! (i mod length y)\n\ngoal (1 subgoal):\n 1. length y = i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "with 4"], ["proof (chain)\npicking this:\n  i = length y \\<longrightarrow>\n  (i < length (z # zs) * length y) = (0 < length zs * length y)\n  \\<forall>i<length zs * length y.\n     vec_vec_Tensor zs y ! i = zs ! (i div length y) * y ! (i mod length y)", "have 6:\"(i = length y) \n                           \\<longrightarrow> ((0 < ((length zs)*(length y)))\n                              \\<longrightarrow> (((vec_vec_Tensor (zs) y)!0) \n                                       = f ((zs)!0) (y!0))) \n                                         = ((i < ((length zs)*(length y)))\n                                               \\<longrightarrow>(((vec_vec_Tensor zs y)!i) \n                                                = f \n                                                    ((zs)!(i div (length y)))\n                                                    (y!(i mod (length y)))))\""], ["proof (prove)\nusing this:\n  i = length y \\<longrightarrow>\n  (i < length (z # zs) * length y) = (0 < length zs * length y)\n  \\<forall>i<length zs * length y.\n     vec_vec_Tensor zs y ! i = zs ! (i div length y) * y ! (i mod length y)\n\ngoal (1 subgoal):\n 1. i = length y \\<longrightarrow>\n    (0 < length zs * length y \\<longrightarrow>\n     vec_vec_Tensor zs y ! 0 = zs ! 0 * y ! 0) =\n    (i < length zs * length y \\<longrightarrow>\n     vec_vec_Tensor zs y ! i = zs ! (i div length y) * y ! (i mod length y))", "by auto"], ["proof (state)\nthis:\n  i = length y \\<longrightarrow>\n  (0 < length zs * length y \\<longrightarrow>\n   vec_vec_Tensor zs y ! 0 = zs ! 0 * y ! 0) =\n  (i < length zs * length y \\<longrightarrow>\n   vec_vec_Tensor zs y ! i = zs ! (i div length y) * y ! (i mod length y))\n\ngoal (1 subgoal):\n 1. length y = i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "have 7: \"(0 div (length y)) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 div length y = 0", "by auto"], ["proof (state)\nthis:\n  0 div length y = 0\n\ngoal (1 subgoal):\n 1. length y = i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "have 8: \" (0 mod (length y)) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 mod length y = 0", "by auto"], ["proof (state)\nthis:\n  0 mod length y = 0\n\ngoal (1 subgoal):\n 1. length y = i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "have 9: \"(0 < ((length zs)*(length y))) \n                       \\<longrightarrow> ((vec_vec_Tensor zs y)!0) \n                                           = f (zs!0) (y!0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < length zs * length y \\<longrightarrow>\n    vec_vec_Tensor zs y ! 0 = zs ! 0 * y ! 0", "using 7 8 Cons.hyps"], ["proof (prove)\nusing this:\n  0 div length y = 0\n  0 mod length y = 0\n  ?i < length zs * length y \\<longrightarrow>\n  vec_vec_Tensor zs y ! ?i = zs ! (?i div length y) * y ! (?i mod length y)\n\ngoal (1 subgoal):\n 1. 0 < length zs * length y \\<longrightarrow>\n    vec_vec_Tensor zs y ! 0 = zs ! 0 * y ! 0", "by auto"], ["proof (state)\nthis:\n  0 < length zs * length y \\<longrightarrow>\n  vec_vec_Tensor zs y ! 0 = zs ! 0 * y ! 0\n\ngoal (1 subgoal):\n 1. length y = i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "with  4 5 8"], ["proof (chain)\npicking this:\n  i = length y \\<longrightarrow>\n  (i < length (z # zs) * length y) = (0 < length zs * length y)\n  i = length y \\<longrightarrow> (z # zs) ! (i div length y) = zs ! 0\n  0 mod length y = 0\n  0 < length zs * length y \\<longrightarrow>\n  vec_vec_Tensor zs y ! 0 = zs ! 0 * y ! 0", "have \"(i = length y) \n                            \\<longrightarrow> ((i < (length (z#zs))*(length y)) \n                                     \\<longrightarrow> (((vec_vec_Tensor (zs) y)!0) \n                                             = f ((zs)!0) (y!0)))\""], ["proof (prove)\nusing this:\n  i = length y \\<longrightarrow>\n  (i < length (z # zs) * length y) = (0 < length zs * length y)\n  i = length y \\<longrightarrow> (z # zs) ! (i div length y) = zs ! 0\n  0 mod length y = 0\n  0 < length zs * length y \\<longrightarrow>\n  vec_vec_Tensor zs y ! 0 = zs ! 0 * y ! 0\n\ngoal (1 subgoal):\n 1. i = length y \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor zs y ! 0 = zs ! 0 * y ! 0", "by auto"], ["proof (state)\nthis:\n  i = length y \\<longrightarrow>\n  i < length (z # zs) * length y \\<longrightarrow>\n  vec_vec_Tensor zs y ! 0 = zs ! 0 * y ! 0\n\ngoal (1 subgoal):\n 1. length y = i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "with 1 2 5"], ["proof (chain)\npicking this:\n  i = length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i = vec_vec_Tensor zs y ! 0\n  i = length y \\<longrightarrow> i mod length y = 0\n  i = length y \\<longrightarrow> (z # zs) ! (i div length y) = zs ! 0\n  i = length y \\<longrightarrow>\n  i < length (z # zs) * length y \\<longrightarrow>\n  vec_vec_Tensor zs y ! 0 = zs ! 0 * y ! 0", "have \"(i = length y) \n                             \\<longrightarrow> ((i < (length (z#zs))*(length y)) \n                                 \\<longrightarrow> (((vec_vec_Tensor ((z#zs)) y)!i) \n                                            = f \n                                                 ((z#zs)!(i div (length y))) \n                                                 (y!(i mod (length y)))))\""], ["proof (prove)\nusing this:\n  i = length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i = vec_vec_Tensor zs y ! 0\n  i = length y \\<longrightarrow> i mod length y = 0\n  i = length y \\<longrightarrow> (z # zs) ! (i div length y) = zs ! 0\n  i = length y \\<longrightarrow>\n  i < length (z # zs) * length y \\<longrightarrow>\n  vec_vec_Tensor zs y ! 0 = zs ! 0 * y ! 0\n\ngoal (1 subgoal):\n 1. i = length y \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "by auto"], ["proof (state)\nthis:\n  i = length y \\<longrightarrow>\n  i < length (z # zs) * length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i =\n  (z # zs) ! (i div length y) * y ! (i mod length y)\n\ngoal (1 subgoal):\n 1. length y = i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "then"], ["proof (chain)\npicking this:\n  i = length y \\<longrightarrow>\n  i < length (z # zs) * length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i =\n  (z # zs) ! (i div length y) * y ! (i mod length y)", "show ?thesis"], ["proof (prove)\nusing this:\n  i = length y \\<longrightarrow>\n  i < length (z # zs) * length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i =\n  (z # zs) ! (i div length y) * y ! (i mod length y)\n\ngoal (1 subgoal):\n 1. length y = i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "by auto"], ["proof (state)\nthis:\n  length y = i \\<longrightarrow>\n  i < length (z # zs) * length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i =\n  (z # zs) ! (i div length y) * y ! (i mod length y)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length y = i \\<longrightarrow>\n  i < length (z # zs) * length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i =\n  (z # zs) ! (i div length y) * y ! (i mod length y)\n\ngoal (1 subgoal):\n 1. \\<And>a x i.\n       (\\<And>i.\n           i < length x * length y \\<longrightarrow>\n           vec_vec_Tensor x y ! i =\n           x ! (i div length y) * y ! (i mod length y)) \\<Longrightarrow>\n       i < length (a # x) * length y \\<longrightarrow>\n       vec_vec_Tensor (a # x) y ! i =\n       (a # x) ! (i div length y) * y ! (i mod length y)", "with step2"], ["proof (chain)\npicking this:\n  length y < i \\<longrightarrow>\n  i < length (z # zs) * length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i =\n  (z # zs) ! (i div length y) * y ! (i mod length y)\n  length y = i \\<longrightarrow>\n  i < length (z # zs) * length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i =\n  (z # zs) ! (i div length y) * y ! (i mod length y)", "have step4: \n            \"(i \\<ge> (length y)) \n                      \\<longrightarrow>  ((i < (length (z#zs))*(length y)) \n                       \\<longrightarrow> (((vec_vec_Tensor ((z#zs)) y)!i) \n                                    = f \n                                         ((z#zs)!(i div (length y))) \n                                         (y!(i mod (length y)))))\""], ["proof (prove)\nusing this:\n  length y < i \\<longrightarrow>\n  i < length (z # zs) * length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i =\n  (z # zs) ! (i div length y) * y ! (i mod length y)\n  length y = i \\<longrightarrow>\n  i < length (z # zs) * length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i =\n  (z # zs) ! (i div length y) * y ! (i mod length y)\n\ngoal (1 subgoal):\n 1. length y \\<le> i \\<longrightarrow>\n    i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "by auto"], ["proof (state)\nthis:\n  length y \\<le> i \\<longrightarrow>\n  i < length (z # zs) * length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i =\n  (z # zs) ! (i div length y) * y ! (i mod length y)\n\ngoal (1 subgoal):\n 1. \\<And>a x i.\n       (\\<And>i.\n           i < length x * length y \\<longrightarrow>\n           vec_vec_Tensor x y ! i =\n           x ! (i div length y) * y ! (i mod length y)) \\<Longrightarrow>\n       i < length (a # x) * length y \\<longrightarrow>\n       vec_vec_Tensor (a # x) y ! i =\n       (a # x) ! (i div length y) * y ! (i mod length y)", "have \"(i < (length y)) \\<or> (i \\<ge> (length y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length y \\<or> length y \\<le> i", "by auto"], ["proof (state)\nthis:\n  i < length y \\<or> length y \\<le> i\n\ngoal (1 subgoal):\n 1. \\<And>a x i.\n       (\\<And>i.\n           i < length x * length y \\<longrightarrow>\n           vec_vec_Tensor x y ! i =\n           x ! (i div length y) * y ! (i mod length y)) \\<Longrightarrow>\n       i < length (a # x) * length y \\<longrightarrow>\n       vec_vec_Tensor (a # x) y ! i =\n       (a # x) ! (i div length y) * y ! (i mod length y)", "with step1 step4"], ["proof (chain)\npicking this:\n  i < length y \\<longrightarrow>\n  i < length x * length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i =\n  (z # zs) ! (i div length y) * y ! (i mod length y)\n  length y \\<le> i \\<longrightarrow>\n  i < length (z # zs) * length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i =\n  (z # zs) ! (i div length y) * y ! (i mod length y)\n  i < length y \\<or> length y \\<le> i", "have \n            \"((i < (length (z#zs))*(length y)) \n                       \\<longrightarrow> (((vec_vec_Tensor ((z#zs)) y)!i) \n                                = f \n                                    ((z#zs)!(i div (length y))) \n                                     (y!(i mod (length y)))))\""], ["proof (prove)\nusing this:\n  i < length y \\<longrightarrow>\n  i < length x * length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i =\n  (z # zs) ! (i div length y) * y ! (i mod length y)\n  length y \\<le> i \\<longrightarrow>\n  i < length (z # zs) * length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i =\n  (z # zs) ! (i div length y) * y ! (i mod length y)\n  i < length y \\<or> length y \\<le> i\n\ngoal (1 subgoal):\n 1. i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "using logic"], ["proof (prove)\nusing this:\n  i < length y \\<longrightarrow>\n  i < length x * length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i =\n  (z # zs) ! (i div length y) * y ! (i mod length y)\n  length y \\<le> i \\<longrightarrow>\n  i < length (z # zs) * length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i =\n  (z # zs) ! (i div length y) * y ! (i mod length y)\n  i < length y \\<or> length y \\<le> i\n  \\<lbrakk>?A \\<longrightarrow> ?B; \\<not> ?A \\<longrightarrow> ?B\\<rbrakk>\n  \\<Longrightarrow> ?B\n\ngoal (1 subgoal):\n 1. i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "by (metis \"6\" \"7\" 35)"], ["proof (state)\nthis:\n  i < length (z # zs) * length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i =\n  (z # zs) ! (i div length y) * y ! (i mod length y)\n\ngoal (1 subgoal):\n 1. \\<And>a x i.\n       (\\<And>i.\n           i < length x * length y \\<longrightarrow>\n           vec_vec_Tensor x y ! i =\n           x ! (i div length y) * y ! (i mod length y)) \\<Longrightarrow>\n       i < length (a # x) * length y \\<longrightarrow>\n       vec_vec_Tensor (a # x) y ! i =\n       (a # x) ! (i div length y) * y ! (i mod length y)", "then"], ["proof (chain)\npicking this:\n  i < length (z # zs) * length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i =\n  (z # zs) ! (i div length y) * y ! (i mod length y)", "show ?case"], ["proof (prove)\nusing this:\n  i < length (z # zs) * length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i =\n  (z # zs) ! (i div length y) * y ! (i mod length y)\n\ngoal (1 subgoal):\n 1. i < length (z # zs) * length y \\<longrightarrow>\n    vec_vec_Tensor (z # zs) y ! i =\n    (z # zs) ! (i div length y) * y ! (i mod length y)", "by auto"], ["proof (state)\nthis:\n  i < length (z # zs) * length y \\<longrightarrow>\n  vec_vec_Tensor (z # zs) y ! i =\n  (z # zs) ! (i div length y) * y ! (i mod length y)\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>a few more results that will be used later on\\<close>"], ["", "lemma nat_int:  \"nat (int x + int y) = x + y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat (int x + int y) = x + y", "using nat_int of_nat_add"], ["proof (prove)\nusing this:\n  nat (int ?n) = ?n\n  of_nat (?m + ?n) = of_nat ?m + of_nat ?n\n\ngoal (1 subgoal):\n 1. nat (int x + int y) = x + y", "by auto"], ["", "lemma int_nat_equiv: \"(x > 0) \\<longrightarrow> (nat ((int x) + -1)+1) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < x \\<longrightarrow> nat (int x + - 1) + 1 = x", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < x \\<longrightarrow> nat (int x + - 1) + 1 = x", "have \"1 = nat (int 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 = nat (int 1)", "by auto"], ["proof (state)\nthis:\n  1 = nat (int 1)\n\ngoal (1 subgoal):\n 1. 0 < x \\<longrightarrow> nat (int x + - 1) + 1 = x", "have \"-1 = -int 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - 1 = - int 1", "by auto"], ["proof (state)\nthis:\n  - 1 = - int 1\n\ngoal (1 subgoal):\n 1. 0 < x \\<longrightarrow> nat (int x + - 1) + 1 = x", "then"], ["proof (chain)\npicking this:\n  - 1 = - int 1", "have 1:\"(nat ((int x) + -1)+1) \n                      = (nat ((int x) + -1) + (nat (int 1)))\""], ["proof (prove)\nusing this:\n  - 1 = - int 1\n\ngoal (1 subgoal):\n 1. nat (int x + - 1) + 1 = nat (int x + - 1) + nat (int 1)", "by auto"], ["proof (state)\nthis:\n  nat (int x + - 1) + 1 = nat (int x + - 1) + nat (int 1)\n\ngoal (1 subgoal):\n 1. 0 < x \\<longrightarrow> nat (int x + - 1) + 1 = x", "then"], ["proof (chain)\npicking this:\n  nat (int x + - 1) + 1 = nat (int x + - 1) + nat (int 1)", "have 2:\"(x > 0) \n                 \\<longrightarrow> nat ((int x) + -1 ) + (nat (int 1)) \n                                 =  (nat (((int x)  + -1) + (int 1)))\""], ["proof (prove)\nusing this:\n  nat (int x + - 1) + 1 = nat (int x + - 1) + nat (int 1)\n\ngoal (1 subgoal):\n 1. 0 < x \\<longrightarrow>\n    nat (int x + - 1) + nat (int 1) = nat (int x + - 1 + int 1)", "using of_nat_add nat_int"], ["proof (prove)\nusing this:\n  nat (int x + - 1) + 1 = nat (int x + - 1) + nat (int 1)\n  of_nat (?m + ?n) = of_nat ?m + of_nat ?n\n  nat (int ?x + int ?y) = ?x + ?y\n\ngoal (1 subgoal):\n 1. 0 < x \\<longrightarrow>\n    nat (int x + - 1) + nat (int 1) = nat (int x + - 1 + int 1)", "by auto"], ["proof (state)\nthis:\n  0 < x \\<longrightarrow>\n  nat (int x + - 1) + nat (int 1) = nat (int x + - 1 + int 1)\n\ngoal (1 subgoal):\n 1. 0 < x \\<longrightarrow> nat (int x + - 1) + 1 = x", "have \"(nat (((int x)  + -1) + (int 1))) = (nat ((int x) + -1 + (int 1)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat (int x + - 1 + int 1) = nat (int x + - 1 + int 1)", "by auto"], ["proof (state)\nthis:\n  nat (int x + - 1 + int 1) = nat (int x + - 1 + int 1)\n\ngoal (1 subgoal):\n 1. 0 < x \\<longrightarrow> nat (int x + - 1) + 1 = x", "then"], ["proof (chain)\npicking this:\n  nat (int x + - 1 + int 1) = nat (int x + - 1 + int 1)", "have \"(nat (((int x)  + -1) + (int 1))) = (nat ((int x)))\""], ["proof (prove)\nusing this:\n  nat (int x + - 1 + int 1) = nat (int x + - 1 + int 1)\n\ngoal (1 subgoal):\n 1. nat (int x + - 1 + int 1) = nat (int x)", "by auto"], ["proof (state)\nthis:\n  nat (int x + - 1 + int 1) = nat (int x)\n\ngoal (1 subgoal):\n 1. 0 < x \\<longrightarrow> nat (int x + - 1) + 1 = x", "then"], ["proof (chain)\npicking this:\n  nat (int x + - 1 + int 1) = nat (int x)", "have \"(nat (((int x)  + -1) + (int 1))) = x\""], ["proof (prove)\nusing this:\n  nat (int x + - 1 + int 1) = nat (int x)\n\ngoal (1 subgoal):\n 1. nat (int x + - 1 + int 1) = x", "by auto"], ["proof (state)\nthis:\n  nat (int x + - 1 + int 1) = x\n\ngoal (1 subgoal):\n 1. 0 < x \\<longrightarrow> nat (int x + - 1) + 1 = x", "with 1 2"], ["proof (chain)\npicking this:\n  nat (int x + - 1) + 1 = nat (int x + - 1) + nat (int 1)\n  0 < x \\<longrightarrow>\n  nat (int x + - 1) + nat (int 1) = nat (int x + - 1 + int 1)\n  nat (int x + - 1 + int 1) = x", "have \" (x > 0) \\<longrightarrow> nat ((int x) + -1 ) + 1 = x\""], ["proof (prove)\nusing this:\n  nat (int x + - 1) + 1 = nat (int x + - 1) + nat (int 1)\n  0 < x \\<longrightarrow>\n  nat (int x + - 1) + nat (int 1) = nat (int x + - 1 + int 1)\n  nat (int x + - 1 + int 1) = x\n\ngoal (1 subgoal):\n 1. 0 < x \\<longrightarrow> nat (int x + - 1) + 1 = x", "by auto"], ["proof (state)\nthis:\n  0 < x \\<longrightarrow> nat (int x + - 1) + 1 = x\n\ngoal (1 subgoal):\n 1. 0 < x \\<longrightarrow> nat (int x + - 1) + 1 = x", "then"], ["proof (chain)\npicking this:\n  0 < x \\<longrightarrow> nat (int x + - 1) + 1 = x", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < x \\<longrightarrow> nat (int x + - 1) + 1 = x\n\ngoal (1 subgoal):\n 1. 0 < x \\<longrightarrow> nat (int x + - 1) + 1 = x", "by auto"], ["proof (state)\nthis:\n  0 < x \\<longrightarrow> nat (int x + - 1) + 1 = x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma list_int_nat: \"(k>0) \\<longrightarrow> ((x#xs)!k = xs!(nat ((int k)+-1)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<longrightarrow> (x # xs) ! k = xs ! nat (int k + - 1)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < k \\<longrightarrow> (x # xs) ! k = xs ! nat (int k + - 1)", "fix  j"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < k \\<longrightarrow> (x # xs) ! k = xs ! nat (int k + - 1)", "have \" ((x#xs)!(k+1) = xs!k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x # xs) ! (k + 1) = xs ! k", "by auto"], ["proof (state)\nthis:\n  (x # xs) ! (k + 1) = xs ! k\n\ngoal (1 subgoal):\n 1. 0 < k \\<longrightarrow> (x # xs) ! k = xs ! nat (int k + - 1)", "have \"j = (k+1) \\<longrightarrow> (nat ((int j)+-1)) = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j = k + 1 \\<longrightarrow> nat (int j + - 1) = k", "by auto"], ["proof (state)\nthis:\n  j = k + 1 \\<longrightarrow> nat (int j + - 1) = k\n\ngoal (1 subgoal):\n 1. 0 < k \\<longrightarrow> (x # xs) ! k = xs ! nat (int k + - 1)", "moreover"], ["proof (state)\nthis:\n  j = k + 1 \\<longrightarrow> nat (int j + - 1) = k\n\ngoal (1 subgoal):\n 1. 0 < k \\<longrightarrow> (x # xs) ! k = xs ! nat (int k + - 1)", "have \"(nat ((int j)+-1)) = k \n                  \\<longrightarrow> ((nat ((int j)+-1)) + 1) = (k +1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat (int j + - 1) = k \\<longrightarrow> nat (int j + - 1) + 1 = k + 1", "by auto"], ["proof (state)\nthis:\n  nat (int j + - 1) = k \\<longrightarrow> nat (int j + - 1) + 1 = k + 1\n\ngoal (1 subgoal):\n 1. 0 < k \\<longrightarrow> (x # xs) ! k = xs ! nat (int k + - 1)", "moreover"], ["proof (state)\nthis:\n  nat (int j + - 1) = k \\<longrightarrow> nat (int j + - 1) + 1 = k + 1\n\ngoal (1 subgoal):\n 1. 0 < k \\<longrightarrow> (x # xs) ! k = xs ! nat (int k + - 1)", "have \"(j>0)\\<longrightarrow>(((nat ((int j)+-1)) + 1) = j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < j \\<longrightarrow> nat (int j + - 1) + 1 = j", "using  int_nat_equiv"], ["proof (prove)\nusing this:\n  0 < ?x \\<longrightarrow> nat (int ?x + - 1) + 1 = ?x\n\ngoal (1 subgoal):\n 1. 0 < j \\<longrightarrow> nat (int j + - 1) + 1 = j", "by (auto)"], ["proof (state)\nthis:\n  0 < j \\<longrightarrow> nat (int j + - 1) + 1 = j\n\ngoal (1 subgoal):\n 1. 0 < k \\<longrightarrow> (x # xs) ! k = xs ! nat (int k + - 1)", "moreover"], ["proof (state)\nthis:\n  0 < j \\<longrightarrow> nat (int j + - 1) + 1 = j\n\ngoal (1 subgoal):\n 1. 0 < k \\<longrightarrow> (x # xs) ! k = xs ! nat (int k + - 1)", "have \"(k>0) \\<longrightarrow> ((x#xs)!k = xs!(nat ((int k)+-1)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<longrightarrow> (x # xs) ! k = xs ! nat (int k + - 1)", "using Suc_eq_plus1 int_nat_equiv nth_Cons_Suc"], ["proof (prove)\nusing this:\n  Suc ?n = ?n + 1\n  0 < ?x \\<longrightarrow> nat (int ?x + - 1) + 1 = ?x\n  (?x # ?xs) ! Suc ?n = ?xs ! ?n\n\ngoal (1 subgoal):\n 1. 0 < k \\<longrightarrow> (x # xs) ! k = xs ! nat (int k + - 1)", "by (metis)"], ["proof (state)\nthis:\n  0 < k \\<longrightarrow> (x # xs) ! k = xs ! nat (int k + - 1)\n\ngoal (1 subgoal):\n 1. 0 < k \\<longrightarrow> (x # xs) ! k = xs ! nat (int k + - 1)", "from this"], ["proof (chain)\npicking this:\n  0 < k \\<longrightarrow> (x # xs) ! k = xs ! nat (int k + - 1)", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < k \\<longrightarrow> (x # xs) ! k = xs ! nat (int k + - 1)\n\ngoal (1 subgoal):\n 1. 0 < k \\<longrightarrow> (x # xs) ! k = xs ! nat (int k + - 1)", "by auto"], ["proof (state)\nthis:\n  0 < k \\<longrightarrow> (x # xs) ! k = xs ! nat (int k + - 1)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma row_length_eq:\n \"(mat  (row_length (a#b#N))  (length (a#b#N)) (a#b#N)) \n   \\<longrightarrow> \n    (row_length (a#b#N) = (row_length (b#N)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length (a # b # N)) (length (a # b # N))\n     (a # b # N) \\<longrightarrow>\n    row_length (a # b # N) = row_length (b # N)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. mat (row_length (a # b # N)) (length (a # b # N))\n     (a # b # N) \\<longrightarrow>\n    row_length (a # b # N) = row_length (b # N)", "have \"(mat  (row_length (a#b#N))  (length (a#b#N)) (a#b#N)) \n                        \\<longrightarrow> (b \\<in> set (a#b#M))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length (a # b # N)) (length (a # b # N))\n     (a # b # N) \\<longrightarrow>\n    b \\<in> set (a # b # M)", "by auto"], ["proof (state)\nthis:\n  mat (row_length (a # b # N)) (length (a # b # N))\n   (a # b # N) \\<longrightarrow>\n  b \\<in> set (a # b # M)\n\ngoal (1 subgoal):\n 1. mat (row_length (a # b # N)) (length (a # b # N))\n     (a # b # N) \\<longrightarrow>\n    row_length (a # b # N) = row_length (b # N)", "moreover"], ["proof (state)\nthis:\n  mat (row_length (a # b # N)) (length (a # b # N))\n   (a # b # N) \\<longrightarrow>\n  b \\<in> set (a # b # M)\n\ngoal (1 subgoal):\n 1. mat (row_length (a # b # N)) (length (a # b # N))\n     (a # b # N) \\<longrightarrow>\n    row_length (a # b # N) = row_length (b # N)", "have \n         \"(mat  (row_length (a#b#N))  (length (a#b#N)) (a#b#N)) \n                 \\<longrightarrow> (Ball (set (a#b#N)) (vec (row_length (a#b#N))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length (a # b # N)) (length (a # b # N))\n     (a # b # N) \\<longrightarrow>\n    Ball (set (a # b # N)) (vec (row_length (a # b # N)))", "using mat_def"], ["proof (prove)\nusing this:\n  mat ?nr ?nc ?m = (length ?m = ?nc \\<and> Ball (set ?m) (vec ?nr))\n\ngoal (1 subgoal):\n 1. mat (row_length (a # b # N)) (length (a # b # N))\n     (a # b # N) \\<longrightarrow>\n    Ball (set (a # b # N)) (vec (row_length (a # b # N)))", "by metis"], ["proof (state)\nthis:\n  mat (row_length (a # b # N)) (length (a # b # N))\n   (a # b # N) \\<longrightarrow>\n  Ball (set (a # b # N)) (vec (row_length (a # b # N)))\n\ngoal (1 subgoal):\n 1. mat (row_length (a # b # N)) (length (a # b # N))\n     (a # b # N) \\<longrightarrow>\n    row_length (a # b # N) = row_length (b # N)", "moreover"], ["proof (state)\nthis:\n  mat (row_length (a # b # N)) (length (a # b # N))\n   (a # b # N) \\<longrightarrow>\n  Ball (set (a # b # N)) (vec (row_length (a # b # N)))\n\ngoal (1 subgoal):\n 1. mat (row_length (a # b # N)) (length (a # b # N))\n     (a # b # N) \\<longrightarrow>\n    row_length (a # b # N) = row_length (b # N)", "have \"(mat  (row_length (a#b#N))  (length (a#b#N)) (a#b#N)) \n                  \\<longrightarrow> (b \\<in> (set (a#b#N)))\n                    \\<longrightarrow> (vec (row_length (a#b#N)) b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length (a # b # N)) (length (a # b # N))\n     (a # b # N) \\<longrightarrow>\n    b \\<in> set (a # b # N) \\<longrightarrow> vec (row_length (a # b # N)) b", "by (metis calculation(2))"], ["proof (state)\nthis:\n  mat (row_length (a # b # N)) (length (a # b # N))\n   (a # b # N) \\<longrightarrow>\n  b \\<in> set (a # b # N) \\<longrightarrow> vec (row_length (a # b # N)) b\n\ngoal (1 subgoal):\n 1. mat (row_length (a # b # N)) (length (a # b # N))\n     (a # b # N) \\<longrightarrow>\n    row_length (a # b # N) = row_length (b # N)", "then"], ["proof (chain)\npicking this:\n  mat (row_length (a # b # N)) (length (a # b # N))\n   (a # b # N) \\<longrightarrow>\n  b \\<in> set (a # b # N) \\<longrightarrow> vec (row_length (a # b # N)) b", "have \"(mat  (row_length (a#b#N))  (length (a#b#N)) (a#b#N)) \n                         \\<longrightarrow> (length b) = (row_length (a#b#N))\""], ["proof (prove)\nusing this:\n  mat (row_length (a # b # N)) (length (a # b # N))\n   (a # b # N) \\<longrightarrow>\n  b \\<in> set (a # b # N) \\<longrightarrow> vec (row_length (a # b # N)) b\n\ngoal (1 subgoal):\n 1. mat (row_length (a # b # N)) (length (a # b # N))\n     (a # b # N) \\<longrightarrow>\n    length b = row_length (a # b # N)", "using vec_def"], ["proof (prove)\nusing this:\n  mat (row_length (a # b # N)) (length (a # b # N))\n   (a # b # N) \\<longrightarrow>\n  b \\<in> set (a # b # N) \\<longrightarrow> vec (row_length (a # b # N)) b\n  vec ?n ?x = (length ?x = ?n)\n\ngoal (1 subgoal):\n 1. mat (row_length (a # b # N)) (length (a # b # N))\n     (a # b # N) \\<longrightarrow>\n    length b = row_length (a # b # N)", "by auto"], ["proof (state)\nthis:\n  mat (row_length (a # b # N)) (length (a # b # N))\n   (a # b # N) \\<longrightarrow>\n  length b = row_length (a # b # N)\n\ngoal (1 subgoal):\n 1. mat (row_length (a # b # N)) (length (a # b # N))\n     (a # b # N) \\<longrightarrow>\n    row_length (a # b # N) = row_length (b # N)", "then"], ["proof (chain)\npicking this:\n  mat (row_length (a # b # N)) (length (a # b # N))\n   (a # b # N) \\<longrightarrow>\n  length b = row_length (a # b # N)", "have \"(mat  (row_length (a#b#N))  (length (a#b#N)) (a#b#N)) \n                          \\<longrightarrow> (row_length (b#N)) \n                                       = (row_length (a#b#N))\""], ["proof (prove)\nusing this:\n  mat (row_length (a # b # N)) (length (a # b # N))\n   (a # b # N) \\<longrightarrow>\n  length b = row_length (a # b # N)\n\ngoal (1 subgoal):\n 1. mat (row_length (a # b # N)) (length (a # b # N))\n     (a # b # N) \\<longrightarrow>\n    row_length (b # N) = row_length (a # b # N)", "using row_length_def"], ["proof (prove)\nusing this:\n  mat (row_length (a # b # N)) (length (a # b # N))\n   (a # b # N) \\<longrightarrow>\n  length b = row_length (a # b # N)\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n\ngoal (1 subgoal):\n 1. mat (row_length (a # b # N)) (length (a # b # N))\n     (a # b # N) \\<longrightarrow>\n    row_length (b # N) = row_length (a # b # N)", "by auto"], ["proof (state)\nthis:\n  mat (row_length (a # b # N)) (length (a # b # N))\n   (a # b # N) \\<longrightarrow>\n  row_length (b # N) = row_length (a # b # N)\n\ngoal (1 subgoal):\n 1. mat (row_length (a # b # N)) (length (a # b # N))\n     (a # b # N) \\<longrightarrow>\n    row_length (a # b # N) = row_length (b # N)", "then"], ["proof (chain)\npicking this:\n  mat (row_length (a # b # N)) (length (a # b # N))\n   (a # b # N) \\<longrightarrow>\n  row_length (b # N) = row_length (a # b # N)", "show ?thesis"], ["proof (prove)\nusing this:\n  mat (row_length (a # b # N)) (length (a # b # N))\n   (a # b # N) \\<longrightarrow>\n  row_length (b # N) = row_length (a # b # N)\n\ngoal (1 subgoal):\n 1. mat (row_length (a # b # N)) (length (a # b # N))\n     (a # b # N) \\<longrightarrow>\n    row_length (a # b # N) = row_length (b # N)", "by auto"], ["proof (state)\nthis:\n  mat (row_length (a # b # N)) (length (a # b # N))\n   (a # b # N) \\<longrightarrow>\n  row_length (a # b # N) = row_length (b # N)\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>The following theorem tells us the relationship between entries of \nvec\\_mat\\_Tensor v M and entries of v and M respectivety\\<close>"], ["", "theorem vec_mat_Tensor_elements: \n \"\\<forall>i.\\<forall>j.\n  (((i<((length v)*(row_length M)))\n  \\<and>(j < (length M)))\n  \\<and>(mat (row_length M) (length M) M)\n   \\<longrightarrow> ((vec_mat_Tensor v M)!j!i) \n               = f (v!(i div (row_length M))) (M!j!(i mod (row_length M))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       (i < length v * row_length M \\<and> j < length M) \\<and>\n       mat (row_length M) (length M) M \\<longrightarrow>\n       vec_mat_Tensor v M ! j ! i =\n       v ! (i div row_length M) * M ! j ! (i mod row_length M)", "apply(rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<forall>j.\n          (i < length v * row_length M \\<and> j < length M) \\<and>\n          mat (row_length M) (length M) M \\<longrightarrow>\n          vec_mat_Tensor v M ! j ! i =\n          v ! (i div row_length M) * M ! j ! (i mod row_length M)", "apply(rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       (i < length v * row_length M \\<and> j < length M) \\<and>\n       mat (row_length M) (length M) M \\<longrightarrow>\n       vec_mat_Tensor v M ! j ! i =\n       v ! (i div row_length M) * M ! j ! (i mod row_length M)", "proof(induct M)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i j.\n       (i < length v * row_length [] \\<and> j < length []) \\<and>\n       mat (row_length []) (length []) [] \\<longrightarrow>\n       vec_mat_Tensor v [] ! j ! i =\n       v ! (i div row_length []) * [] ! j ! (i mod row_length [])\n 2. \\<And>a M i j.\n       (\\<And>i j.\n           (i < length v * row_length M \\<and> j < length M) \\<and>\n           mat (row_length M) (length M) M \\<longrightarrow>\n           vec_mat_Tensor v M ! j ! i =\n           v ! (i div row_length M) *\n           M ! j ! (i mod row_length M)) \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       (i < length v * row_length [] \\<and> j < length []) \\<and>\n       mat (row_length []) (length []) [] \\<longrightarrow>\n       vec_mat_Tensor v [] ! j ! i =\n       v ! (i div row_length []) * [] ! j ! (i mod row_length [])\n 2. \\<And>a M i j.\n       (\\<And>i j.\n           (i < length v * row_length M \\<and> j < length M) \\<and>\n           mat (row_length M) (length M) M \\<longrightarrow>\n           vec_mat_Tensor v M ! j ! i =\n           v ! (i div row_length M) *\n           M ! j ! (i mod row_length M)) \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "have \"row_length [] = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_length [] = 0", "using row_length_def"], ["proof (prove)\nusing this:\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n\ngoal (1 subgoal):\n 1. row_length [] = 0", "by auto"], ["proof (state)\nthis:\n  row_length [] = 0\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       (i < length v * row_length [] \\<and> j < length []) \\<and>\n       mat (row_length []) (length []) [] \\<longrightarrow>\n       vec_mat_Tensor v [] ! j ! i =\n       v ! (i div row_length []) * [] ! j ! (i mod row_length [])\n 2. \\<And>a M i j.\n       (\\<And>i j.\n           (i < length v * row_length M \\<and> j < length M) \\<and>\n           mat (row_length M) (length M) M \\<longrightarrow>\n           vec_mat_Tensor v M ! j ! i =\n           v ! (i div row_length M) *\n           M ! j ! (i mod row_length M)) \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "from this"], ["proof (chain)\npicking this:\n  row_length [] = 0", "have \"(length v)*(row_length []) = 0\""], ["proof (prove)\nusing this:\n  row_length [] = 0\n\ngoal (1 subgoal):\n 1. length v * row_length [] = 0", "by auto"], ["proof (state)\nthis:\n  length v * row_length [] = 0\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       (i < length v * row_length [] \\<and> j < length []) \\<and>\n       mat (row_length []) (length []) [] \\<longrightarrow>\n       vec_mat_Tensor v [] ! j ! i =\n       v ! (i div row_length []) * [] ! j ! (i mod row_length [])\n 2. \\<And>a M i j.\n       (\\<And>i j.\n           (i < length v * row_length M \\<and> j < length M) \\<and>\n           mat (row_length M) (length M) M \\<longrightarrow>\n           vec_mat_Tensor v M ! j ! i =\n           v ! (i div row_length M) *\n           M ! j ! (i mod row_length M)) \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "from this"], ["proof (chain)\npicking this:\n  length v * row_length [] = 0", "have \"((i<((length v)*(row_length [])))\\<and>(j < (length []))) \\<longrightarrow> False\""], ["proof (prove)\nusing this:\n  length v * row_length [] = 0\n\ngoal (1 subgoal):\n 1. i < length v * row_length [] \\<and> j < length [] \\<longrightarrow>\n    False", "by auto"], ["proof (state)\nthis:\n  i < length v * row_length [] \\<and> j < length [] \\<longrightarrow> False\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       (i < length v * row_length [] \\<and> j < length []) \\<and>\n       mat (row_length []) (length []) [] \\<longrightarrow>\n       vec_mat_Tensor v [] ! j ! i =\n       v ! (i div row_length []) * [] ! j ! (i mod row_length [])\n 2. \\<And>a M i j.\n       (\\<And>i j.\n           (i < length v * row_length M \\<and> j < length M) \\<and>\n           mat (row_length M) (length M) M \\<longrightarrow>\n           vec_mat_Tensor v M ! j ! i =\n           v ! (i div row_length M) *\n           M ! j ! (i mod row_length M)) \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "moreover"], ["proof (state)\nthis:\n  i < length v * row_length [] \\<and> j < length [] \\<longrightarrow> False\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       (i < length v * row_length [] \\<and> j < length []) \\<and>\n       mat (row_length []) (length []) [] \\<longrightarrow>\n       vec_mat_Tensor v [] ! j ! i =\n       v ! (i div row_length []) * [] ! j ! (i mod row_length [])\n 2. \\<And>a M i j.\n       (\\<And>i j.\n           (i < length v * row_length M \\<and> j < length M) \\<and>\n           mat (row_length M) (length M) M \\<longrightarrow>\n           vec_mat_Tensor v M ! j ! i =\n           v ! (i div row_length M) *\n           M ! j ! (i mod row_length M)) \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "have \"vec_mat_Tensor v [] = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_mat_Tensor v [] = []", "by auto"], ["proof (state)\nthis:\n  vec_mat_Tensor v [] = []\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       (i < length v * row_length [] \\<and> j < length []) \\<and>\n       mat (row_length []) (length []) [] \\<longrightarrow>\n       vec_mat_Tensor v [] ! j ! i =\n       v ! (i div row_length []) * [] ! j ! (i mod row_length [])\n 2. \\<And>a M i j.\n       (\\<And>i j.\n           (i < length v * row_length M \\<and> j < length M) \\<and>\n           mat (row_length M) (length M) M \\<longrightarrow>\n           vec_mat_Tensor v M ! j ! i =\n           v ! (i div row_length M) *\n           M ! j ! (i mod row_length M)) \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "moreover"], ["proof (state)\nthis:\n  vec_mat_Tensor v [] = []\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       (i < length v * row_length [] \\<and> j < length []) \\<and>\n       mat (row_length []) (length []) [] \\<longrightarrow>\n       vec_mat_Tensor v [] ! j ! i =\n       v ! (i div row_length []) * [] ! j ! (i mod row_length [])\n 2. \\<And>a M i j.\n       (\\<And>i j.\n           (i < length v * row_length M \\<and> j < length M) \\<and>\n           mat (row_length M) (length M) M \\<longrightarrow>\n           vec_mat_Tensor v M ! j ! i =\n           v ! (i div row_length M) *\n           M ! j ! (i mod row_length M)) \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "have \"(((i<((length v)*(row_length [])))\\<and>(j < (length [])))\n                  \\<longrightarrow> ((vec_mat_Tensor v [])!j!i) \n                                = f (v!(i div (row_length []))) ([]!j!(i mod (row_length []))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length v * row_length [] \\<and> j < length [] \\<longrightarrow>\n    vec_mat_Tensor v [] ! j ! i =\n    v ! (i div row_length []) * [] ! j ! (i mod row_length [])", "by auto"], ["proof (state)\nthis:\n  i < length v * row_length [] \\<and> j < length [] \\<longrightarrow>\n  vec_mat_Tensor v [] ! j ! i =\n  v ! (i div row_length []) * [] ! j ! (i mod row_length [])\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       (i < length v * row_length [] \\<and> j < length []) \\<and>\n       mat (row_length []) (length []) [] \\<longrightarrow>\n       vec_mat_Tensor v [] ! j ! i =\n       v ! (i div row_length []) * [] ! j ! (i mod row_length [])\n 2. \\<And>a M i j.\n       (\\<And>i j.\n           (i < length v * row_length M \\<and> j < length M) \\<and>\n           mat (row_length M) (length M) M \\<longrightarrow>\n           vec_mat_Tensor v M ! j ! i =\n           v ! (i div row_length M) *\n           M ! j ! (i mod row_length M)) \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "from this"], ["proof (chain)\npicking this:\n  i < length v * row_length [] \\<and> j < length [] \\<longrightarrow>\n  vec_mat_Tensor v [] ! j ! i =\n  v ! (i div row_length []) * [] ! j ! (i mod row_length [])", "show ?case"], ["proof (prove)\nusing this:\n  i < length v * row_length [] \\<and> j < length [] \\<longrightarrow>\n  vec_mat_Tensor v [] ! j ! i =\n  v ! (i div row_length []) * [] ! j ! (i mod row_length [])\n\ngoal (1 subgoal):\n 1. (i < length v * row_length [] \\<and> j < length []) \\<and>\n    mat (row_length []) (length []) [] \\<longrightarrow>\n    vec_mat_Tensor v [] ! j ! i =\n    v ! (i div row_length []) * [] ! j ! (i mod row_length [])", "by auto"], ["proof (state)\nthis:\n  (i < length v * row_length [] \\<and> j < length []) \\<and>\n  mat (row_length []) (length []) [] \\<longrightarrow>\n  vec_mat_Tensor v [] ! j ! i =\n  v ! (i div row_length []) * [] ! j ! (i mod row_length [])\n\ngoal (1 subgoal):\n 1. \\<And>a M i j.\n       (\\<And>i j.\n           (i < length v * row_length M \\<and> j < length M) \\<and>\n           mat (row_length M) (length M) M \\<longrightarrow>\n           vec_mat_Tensor v M ! j ! i =\n           v ! (i div row_length M) *\n           M ! j ! (i mod row_length M)) \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a M i j.\n       (\\<And>i j.\n           (i < length v * row_length M \\<and> j < length M) \\<and>\n           mat (row_length M) (length M) M \\<longrightarrow>\n           vec_mat_Tensor v M ! j ! i =\n           v ! (i div row_length M) *\n           M ! j ! (i mod row_length M)) \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "case (Cons a M)"], ["proof (state)\nthis:\n  (?i < length v * row_length M \\<and> ?j < length M) \\<and>\n  mat (row_length M) (length M) M \\<longrightarrow>\n  vec_mat_Tensor v M ! ?j ! ?i =\n  v ! (?i div row_length M) * M ! ?j ! (?i mod row_length M)\n\ngoal (1 subgoal):\n 1. \\<And>a M i j.\n       (\\<And>i j.\n           (i < length v * row_length M \\<and> j < length M) \\<and>\n           mat (row_length M) (length M) M \\<longrightarrow>\n           vec_mat_Tensor v M ! j ! i =\n           v ! (i div row_length M) *\n           M ! j ! (i mod row_length M)) \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "have \"(((i<((length v)*(row_length (a#M))))\n       \\<and>(j < (length (a#M))))\n       \\<and>(mat (row_length (a#M)) (length (a#M)) (a#M))\n           \\<longrightarrow> ((vec_mat_Tensor v (a#M))!j!i) \n                  = f \n                      (v!(i div (row_length (a#M)))) \n                      ((a#M)!j!(i mod (row_length (a#M)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n    mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n    vec_mat_Tensor v (a # M) ! j ! i =\n    v ! (i div row_length (a # M)) *\n    (a # M) ! j ! (i mod row_length (a # M))", "proof(cases a)"], ["proof (state)\ngoal (2 subgoals):\n 1. a = [] \\<Longrightarrow>\n    (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n    mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n    vec_mat_Tensor v (a # M) ! j ! i =\n    v ! (i div row_length (a # M)) *\n    (a # M) ! j ! (i mod row_length (a # M))\n 2. \\<And>aa list.\n       a = aa # list \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "case Nil"], ["proof (state)\nthis:\n  a = []\n\ngoal (2 subgoals):\n 1. a = [] \\<Longrightarrow>\n    (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n    mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n    vec_mat_Tensor v (a # M) ! j ! i =\n    v ! (i div row_length (a # M)) *\n    (a # M) ! j ! (i mod row_length (a # M))\n 2. \\<And>aa list.\n       a = aa # list \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "have \"row_length ([]#M) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_length ([] # M) = 0", "using row_length_def"], ["proof (prove)\nusing this:\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n\ngoal (1 subgoal):\n 1. row_length ([] # M) = 0", "by auto"], ["proof (state)\nthis:\n  row_length ([] # M) = 0\n\ngoal (2 subgoals):\n 1. a = [] \\<Longrightarrow>\n    (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n    mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n    vec_mat_Tensor v (a # M) ! j ! i =\n    v ! (i div row_length (a # M)) *\n    (a # M) ! j ! (i mod row_length (a # M))\n 2. \\<And>aa list.\n       a = aa # list \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "then"], ["proof (chain)\npicking this:\n  row_length ([] # M) = 0", "have 1:\"(length v)*(row_length ([]#M)) = 0\""], ["proof (prove)\nusing this:\n  row_length ([] # M) = 0\n\ngoal (1 subgoal):\n 1. length v * row_length ([] # M) = 0", "by auto"], ["proof (state)\nthis:\n  length v * row_length ([] # M) = 0\n\ngoal (2 subgoals):\n 1. a = [] \\<Longrightarrow>\n    (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n    mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n    vec_mat_Tensor v (a # M) ! j ! i =\n    v ! (i div row_length (a # M)) *\n    (a # M) ! j ! (i mod row_length (a # M))\n 2. \\<And>aa list.\n       a = aa # list \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "then"], ["proof (chain)\npicking this:\n  length v * row_length ([] # M) = 0", "have \"((i<((length v)*(row_length ([]#M))))\n                \\<and>(j < (length ([]#M)))) \\<longrightarrow> False\""], ["proof (prove)\nusing this:\n  length v * row_length ([] # M) = 0\n\ngoal (1 subgoal):\n 1. i < length v * row_length ([] # M) \\<and>\n    j < length ([] # M) \\<longrightarrow>\n    False", "by auto"], ["proof (state)\nthis:\n  i < length v * row_length ([] # M) \\<and>\n  j < length ([] # M) \\<longrightarrow>\n  False\n\ngoal (2 subgoals):\n 1. a = [] \\<Longrightarrow>\n    (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n    mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n    vec_mat_Tensor v (a # M) ! j ! i =\n    v ! (i div row_length (a # M)) *\n    (a # M) ! j ! (i mod row_length (a # M))\n 2. \\<And>aa list.\n       a = aa # list \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "moreover"], ["proof (state)\nthis:\n  i < length v * row_length ([] # M) \\<and>\n  j < length ([] # M) \\<longrightarrow>\n  False\n\ngoal (2 subgoals):\n 1. a = [] \\<Longrightarrow>\n    (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n    mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n    vec_mat_Tensor v (a # M) ! j ! i =\n    v ! (i div row_length (a # M)) *\n    (a # M) ! j ! (i mod row_length (a # M))\n 2. \\<And>aa list.\n       a = aa # list \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "have \n                 \"(((i<((length v)*(row_length ([]#M))))\n                  \\<and>(j < (length ([]#M))))\n                     \\<longrightarrow> ((vec_mat_Tensor v ([]#M))!j!i) = \n                                   f \n                                        (v!(i div (row_length ([]#M)))) \n                                        ([]!j!(i mod (row_length ([]#M)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length v * row_length ([] # M) \\<and>\n    j < length ([] # M) \\<longrightarrow>\n    vec_mat_Tensor v ([] # M) ! j ! i =\n    v ! (i div row_length ([] # M)) * [] ! j ! (i mod row_length ([] # M))", "using calculation"], ["proof (prove)\nusing this:\n  i < length v * row_length ([] # M) \\<and>\n  j < length ([] # M) \\<longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. i < length v * row_length ([] # M) \\<and>\n    j < length ([] # M) \\<longrightarrow>\n    vec_mat_Tensor v ([] # M) ! j ! i =\n    v ! (i div row_length ([] # M)) * [] ! j ! (i mod row_length ([] # M))", "by auto"], ["proof (state)\nthis:\n  i < length v * row_length ([] # M) \\<and>\n  j < length ([] # M) \\<longrightarrow>\n  vec_mat_Tensor v ([] # M) ! j ! i =\n  v ! (i div row_length ([] # M)) * [] ! j ! (i mod row_length ([] # M))\n\ngoal (2 subgoals):\n 1. a = [] \\<Longrightarrow>\n    (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n    mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n    vec_mat_Tensor v (a # M) ! j ! i =\n    v ! (i div row_length (a # M)) *\n    (a # M) ! j ! (i mod row_length (a # M))\n 2. \\<And>aa list.\n       a = aa # list \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "then"], ["proof (chain)\npicking this:\n  i < length v * row_length ([] # M) \\<and>\n  j < length ([] # M) \\<longrightarrow>\n  vec_mat_Tensor v ([] # M) ! j ! i =\n  v ! (i div row_length ([] # M)) * [] ! j ! (i mod row_length ([] # M))", "show ?thesis"], ["proof (prove)\nusing this:\n  i < length v * row_length ([] # M) \\<and>\n  j < length ([] # M) \\<longrightarrow>\n  vec_mat_Tensor v ([] # M) ! j ! i =\n  v ! (i div row_length ([] # M)) * [] ! j ! (i mod row_length ([] # M))\n\ngoal (1 subgoal):\n 1. (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n    mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n    vec_mat_Tensor v (a # M) ! j ! i =\n    v ! (i div row_length (a # M)) *\n    (a # M) ! j ! (i mod row_length (a # M))", "using Nil 1 less_nat_zero_code"], ["proof (prove)\nusing this:\n  i < length v * row_length ([] # M) \\<and>\n  j < length ([] # M) \\<longrightarrow>\n  vec_mat_Tensor v ([] # M) ! j ! i =\n  v ! (i div row_length ([] # M)) * [] ! j ! (i mod row_length ([] # M))\n  a = []\n  length v * row_length ([] # M) = 0\n  (?n < 0) = False\n\ngoal (1 subgoal):\n 1. (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n    mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n    vec_mat_Tensor v (a # M) ! j ! i =\n    v ! (i div row_length (a # M)) *\n    (a # M) ! j ! (i mod row_length (a # M))", "by (metis )"], ["proof (state)\nthis:\n  (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n  mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n  vec_mat_Tensor v (a # M) ! j ! i =\n  v ! (i div row_length (a # M)) * (a # M) ! j ! (i mod row_length (a # M))\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       a = aa # list \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       a = aa # list \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "case (Cons x xs)"], ["proof (state)\nthis:\n  a = x # xs\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       a = aa # list \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "have 1:\"(a#M)!(j+1) = M!j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a # M) ! (j + 1) = M ! j", "by auto"], ["proof (state)\nthis:\n  (a # M) ! (j + 1) = M ! j\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       a = aa # list \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "have \"(((i<((length v)*(row_length M)))\n           \\<and>(j < (length M)))\n           \\<and>(mat (row_length M) (length M) M)\n             \\<longrightarrow> ((vec_mat_Tensor v M)!j!i) = f \n                                               (v!(i div (row_length M))) \n                                               (M!j!(i mod (row_length M))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < length v * row_length M \\<and> j < length M) \\<and>\n    mat (row_length M) (length M) M \\<longrightarrow>\n    vec_mat_Tensor v M ! j ! i =\n    v ! (i div row_length M) * M ! j ! (i mod row_length M)", "using Cons.hyps"], ["proof (prove)\nusing this:\n  (?i < length v * row_length M \\<and> ?j < length M) \\<and>\n  mat (row_length M) (length M) M \\<longrightarrow>\n  vec_mat_Tensor v M ! ?j ! ?i =\n  v ! (?i div row_length M) * M ! ?j ! (?i mod row_length M)\n\ngoal (1 subgoal):\n 1. (i < length v * row_length M \\<and> j < length M) \\<and>\n    mat (row_length M) (length M) M \\<longrightarrow>\n    vec_mat_Tensor v M ! j ! i =\n    v ! (i div row_length M) * M ! j ! (i mod row_length M)", "by auto"], ["proof (state)\nthis:\n  (i < length v * row_length M \\<and> j < length M) \\<and>\n  mat (row_length M) (length M) M \\<longrightarrow>\n  vec_mat_Tensor v M ! j ! i =\n  v ! (i div row_length M) * M ! j ! (i mod row_length M)\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       a = aa # list \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "have 2: \"(row_length (a#M)) = (length a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_length (a # M) = length a", "using row_length_def"], ["proof (prove)\nusing this:\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n\ngoal (1 subgoal):\n 1. row_length (a # M) = length a", "by auto"], ["proof (state)\nthis:\n  row_length (a # M) = length a\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       a = aa # list \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "then"], ["proof (chain)\npicking this:\n  row_length (a # M) = length a", "have 3:\"(i< (row_length (a#M))*(length v)) \n                              = (i < (length a)*(length v))\""], ["proof (prove)\nusing this:\n  row_length (a # M) = length a\n\ngoal (1 subgoal):\n 1. (i < row_length (a # M) * length v) = (i < length a * length v)", "by auto"], ["proof (state)\nthis:\n  (i < row_length (a # M) * length v) = (i < length a * length v)\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       a = aa # list \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "have \"a \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> []", "using Cons"], ["proof (prove)\nusing this:\n  a = x # xs\n\ngoal (1 subgoal):\n 1. a \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  a \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       a = aa # list \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "then"], ["proof (chain)\npicking this:\n  a \\<noteq> []", "have 4:\n         \"\\<forall>i.((i < (length a)*(length v)) \n              \\<longrightarrow>  ((vec_vec_Tensor v a)!i) = f \n                                               (v!(i div (length a))) \n                                               (a!(i mod (length a))))\""], ["proof (prove)\nusing this:\n  a \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<forall>i<length a * length v.\n       vec_vec_Tensor v a ! i = v ! (i div length a) * a ! (i mod length a)", "using vec_vec_Tensor_elements Cons.hyps mult.commute"], ["proof (prove)\nusing this:\n  a \\<noteq> []\n  ?y \\<noteq> [] \\<Longrightarrow>\n  \\<forall>i<length ?x * length ?y.\n     vec_vec_Tensor ?x ?y ! i =\n     ?x ! (i div length ?y) * ?y ! (i mod length ?y)\n  (?i < length v * row_length M \\<and> ?j < length M) \\<and>\n  mat (row_length M) (length M) M \\<longrightarrow>\n  vec_mat_Tensor v M ! ?j ! ?i =\n  v ! (?i div row_length M) * M ! ?j ! (?i mod row_length M)\n  ?a * ?b = ?b * ?a\n\ngoal (1 subgoal):\n 1. \\<forall>i<length a * length v.\n       vec_vec_Tensor v a ! i = v ! (i div length a) * a ! (i mod length a)", "by (simp add: mult.commute vec_vec_Tensor_elements)"], ["proof (state)\nthis:\n  \\<forall>i<length a * length v.\n     vec_vec_Tensor v a ! i = v ! (i div length a) * a ! (i mod length a)\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       a = aa # list \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "have \"(vec_mat_Tensor v (a#M))!0 = (vec_vec_Tensor v a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_mat_Tensor v (a # M) ! 0 = vec_vec_Tensor v a", "using vec_mat_Tensor.simps(2)"], ["proof (prove)\nusing this:\n  vec_mat_Tensor ?xs (?ys # ?yss) =\n  vec_vec_Tensor ?xs ?ys # vec_mat_Tensor ?xs ?yss\n\ngoal (1 subgoal):\n 1. vec_mat_Tensor v (a # M) ! 0 = vec_vec_Tensor v a", "by auto"], ["proof (state)\nthis:\n  vec_mat_Tensor v (a # M) ! 0 = vec_vec_Tensor v a\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       a = aa # list \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "with 2 4"], ["proof (chain)\npicking this:\n  row_length (a # M) = length a\n  \\<forall>i<length a * length v.\n     vec_vec_Tensor v a ! i = v ! (i div length a) * a ! (i mod length a)\n  vec_mat_Tensor v (a # M) ! 0 = vec_vec_Tensor v a", "have 5: \n       \"\\<forall>i.((i < (row_length (a#M))*(length v)) \n          \\<longrightarrow>  ((vec_mat_Tensor v (a#M))!0!i) \n                                   = f \n                                       (v!(i div (row_length (a#M)))) \n                                       ((a#M)!0!(i mod (row_length (a#M)))))\""], ["proof (prove)\nusing this:\n  row_length (a # M) = length a\n  \\<forall>i<length a * length v.\n     vec_vec_Tensor v a ! i = v ! (i div length a) * a ! (i mod length a)\n  vec_mat_Tensor v (a # M) ! 0 = vec_vec_Tensor v a\n\ngoal (1 subgoal):\n 1. \\<forall>i<row_length (a # M) * length v.\n       vec_mat_Tensor v (a # M) ! 0 ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! 0 ! (i mod row_length (a # M))", "by auto"], ["proof (state)\nthis:\n  \\<forall>i<row_length (a # M) * length v.\n     vec_mat_Tensor v (a # M) ! 0 ! i =\n     v ! (i div row_length (a # M)) *\n     (a # M) ! 0 ! (i mod row_length (a # M))\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       a = aa # list \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "have \"length (a#M)>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < length (a # M)", "by auto"], ["proof (state)\nthis:\n  0 < length (a # M)\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       a = aa # list \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "with 5"], ["proof (chain)\npicking this:\n  \\<forall>i<row_length (a # M) * length v.\n     vec_mat_Tensor v (a # M) ! 0 ! i =\n     v ! (i div row_length (a # M)) *\n     (a # M) ! 0 ! (i mod row_length (a # M))\n  0 < length (a # M)", "have 6: \n       \"(j = 0)\\<longrightarrow>\n                    ((((i < (row_length (a#M))*(length v)) \n                    \\<and>(j < (length (a#M))))\n                    \\<and>(mat (row_length (a#M)) (length (a#M)) (a#M))  \n                         \\<longrightarrow>  ((vec_mat_Tensor v (a#M))!j!i) \n                               = f \n                                    (v!(i div (row_length (a#M)))) \n                                    ((a#M)!j!(i mod (row_length (a#M))))))\""], ["proof (prove)\nusing this:\n  \\<forall>i<row_length (a # M) * length v.\n     vec_mat_Tensor v (a # M) ! 0 ! i =\n     v ! (i div row_length (a # M)) *\n     (a # M) ! 0 ! (i mod row_length (a # M))\n  0 < length (a # M)\n\ngoal (1 subgoal):\n 1. j = 0 \\<longrightarrow>\n    (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n    mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n    vec_mat_Tensor v (a # M) ! j ! i =\n    v ! (i div row_length (a # M)) *\n    (a # M) ! j ! (i mod row_length (a # M))", "by auto"], ["proof (state)\nthis:\n  j = 0 \\<longrightarrow>\n  (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n  mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n  vec_mat_Tensor v (a # M) ! j ! i =\n  v ! (i div row_length (a # M)) * (a # M) ! j ! (i mod row_length (a # M))\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       a = aa # list \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "have \"(((i < (row_length (a#M))*(length v))\n         \\<and>(j < (length (a#M))))\n         \\<and>(mat (row_length (a#M)) (length (a#M)) (a#M)) \n          \\<longrightarrow>  \n           ((vec_mat_Tensor v (a#M))!j!i) = \n                                f \n                                         (v!(i div (row_length (a#M)))) \n                                         ((a#M)!j!(i mod (row_length (a#M)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n    mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n    vec_mat_Tensor v (a # M) ! j ! i =\n    v ! (i div row_length (a # M)) *\n    (a # M) ! j ! (i mod row_length (a # M))", "proof(cases M)"], ["proof (state)\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow>\n    (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n    mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n    vec_mat_Tensor v (a # M) ! j ! i =\n    v ! (i div row_length (a # M)) *\n    (a # M) ! j ! (i mod row_length (a # M))\n 2. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "case Nil"], ["proof (state)\nthis:\n  M = []\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow>\n    (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n    mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n    vec_mat_Tensor v (a # M) ! j ! i =\n    v ! (i div row_length (a # M)) *\n    (a # M) ! j ! (i mod row_length (a # M))\n 2. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "have \"(length (a#[])) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length [a] = 1", "by auto"], ["proof (state)\nthis:\n  length [a] = 1\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow>\n    (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n    mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n    vec_mat_Tensor v (a # M) ! j ! i =\n    v ! (i div row_length (a # M)) *\n    (a # M) ! j ! (i mod row_length (a # M))\n 2. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "then"], ["proof (chain)\npicking this:\n  length [a] = 1", "have \"(j<(length (a#[]))) = (j = 0)\""], ["proof (prove)\nusing this:\n  length [a] = 1\n\ngoal (1 subgoal):\n 1. (j < length [a]) = (j = 0)", "by auto"], ["proof (state)\nthis:\n  (j < length [a]) = (j = 0)\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow>\n    (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n    mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n    vec_mat_Tensor v (a # M) ! j ! i =\n    v ! (i div row_length (a # M)) *\n    (a # M) ! j ! (i mod row_length (a # M))\n 2. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "then"], ["proof (chain)\npicking this:\n  (j < length [a]) = (j = 0)", "have \"((((i < (row_length (a#[]))*(length v)) \n               \\<and>(j < (length (a#[]))))\n               \\<and> (mat (row_length (a#[])) (length (a#[])) (a#[]))   \n                  \\<longrightarrow>  ((vec_mat_Tensor v (a#[]))!j!i) \n                                 = f \n                                    (v!(i div (row_length (a#[])))) \n                                     ((a#[])!j!(i mod (row_length (a#[]))))))\""], ["proof (prove)\nusing this:\n  (j < length [a]) = (j = 0)\n\ngoal (1 subgoal):\n 1. (i < row_length [a] * length v \\<and> j < length [a]) \\<and>\n    mat (row_length [a]) (length [a]) [a] \\<longrightarrow>\n    vec_mat_Tensor v [a] ! j ! i =\n    v ! (i div row_length [a]) * [a] ! j ! (i mod row_length [a])", "using 6 Nil"], ["proof (prove)\nusing this:\n  (j < length [a]) = (j = 0)\n  j = 0 \\<longrightarrow>\n  (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n  mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n  vec_mat_Tensor v (a # M) ! j ! i =\n  v ! (i div row_length (a # M)) * (a # M) ! j ! (i mod row_length (a # M))\n  M = []\n\ngoal (1 subgoal):\n 1. (i < row_length [a] * length v \\<and> j < length [a]) \\<and>\n    mat (row_length [a]) (length [a]) [a] \\<longrightarrow>\n    vec_mat_Tensor v [a] ! j ! i =\n    v ! (i div row_length [a]) * [a] ! j ! (i mod row_length [a])", "by auto"], ["proof (state)\nthis:\n  (i < row_length [a] * length v \\<and> j < length [a]) \\<and>\n  mat (row_length [a]) (length [a]) [a] \\<longrightarrow>\n  vec_mat_Tensor v [a] ! j ! i =\n  v ! (i div row_length [a]) * [a] ! j ! (i mod row_length [a])\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow>\n    (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n    mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n    vec_mat_Tensor v (a # M) ! j ! i =\n    v ! (i div row_length (a # M)) *\n    (a # M) ! j ! (i mod row_length (a # M))\n 2. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "then"], ["proof (chain)\npicking this:\n  (i < row_length [a] * length v \\<and> j < length [a]) \\<and>\n  mat (row_length [a]) (length [a]) [a] \\<longrightarrow>\n  vec_mat_Tensor v [a] ! j ! i =\n  v ! (i div row_length [a]) * [a] ! j ! (i mod row_length [a])", "show ?thesis"], ["proof (prove)\nusing this:\n  (i < row_length [a] * length v \\<and> j < length [a]) \\<and>\n  mat (row_length [a]) (length [a]) [a] \\<longrightarrow>\n  vec_mat_Tensor v [a] ! j ! i =\n  v ! (i div row_length [a]) * [a] ! j ! (i mod row_length [a])\n\ngoal (1 subgoal):\n 1. (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n    mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n    vec_mat_Tensor v (a # M) ! j ! i =\n    v ! (i div row_length (a # M)) *\n    (a # M) ! j ! (i mod row_length (a # M))", "using Nil"], ["proof (prove)\nusing this:\n  (i < row_length [a] * length v \\<and> j < length [a]) \\<and>\n  mat (row_length [a]) (length [a]) [a] \\<longrightarrow>\n  vec_mat_Tensor v [a] ! j ! i =\n  v ! (i div row_length [a]) * [a] ! j ! (i mod row_length [a])\n  M = []\n\ngoal (1 subgoal):\n 1. (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n    mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n    vec_mat_Tensor v (a # M) ! j ! i =\n    v ! (i div row_length (a # M)) *\n    (a # M) ! j ! (i mod row_length (a # M))", "by auto"], ["proof (state)\nthis:\n  (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n  mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n  vec_mat_Tensor v (a # M) ! j ! i =\n  v ! (i div row_length (a # M)) * (a # M) ! j ! (i mod row_length (a # M))\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "case (Cons b N)"], ["proof (state)\nthis:\n  M = b # N\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "have 7:\"(mat  (row_length (a#b#N))  (length (a#b#N)) (a#b#N)) \n               \\<longrightarrow> row_length (a#b#N) = (row_length (b#N))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length (a # b # N)) (length (a # b # N))\n     (a # b # N) \\<longrightarrow>\n    row_length (a # b # N) = row_length (b # N)", "using row_length_eq"], ["proof (prove)\nusing this:\n  mat (row_length (?a # ?b # ?N)) (length (?a # ?b # ?N))\n   (?a # ?b # ?N) \\<longrightarrow>\n  row_length (?a # ?b # ?N) = row_length (?b # ?N)\n\ngoal (1 subgoal):\n 1. mat (row_length (a # b # N)) (length (a # b # N))\n     (a # b # N) \\<longrightarrow>\n    row_length (a # b # N) = row_length (b # N)", "by metis"], ["proof (state)\nthis:\n  mat (row_length (a # b # N)) (length (a # b # N))\n   (a # b # N) \\<longrightarrow>\n  row_length (a # b # N) = row_length (b # N)\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "have 8: \"(j>0) \n            \\<longrightarrow> ((vec_mat_Tensor v (b#N))!(nat ((int j)+-1))) \n                                  = (vec_mat_Tensor v (a#b#N))!j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < j \\<longrightarrow>\n    vec_mat_Tensor v (b # N) ! nat (int j + - 1) =\n    vec_mat_Tensor v (a # b # N) ! j", "using vec_mat_Tensor.simps(2)"], ["proof (prove)\nusing this:\n  vec_mat_Tensor ?xs (?ys # ?yss) =\n  vec_vec_Tensor ?xs ?ys # vec_mat_Tensor ?xs ?yss\n\ngoal (1 subgoal):\n 1. 0 < j \\<longrightarrow>\n    vec_mat_Tensor v (b # N) ! nat (int j + - 1) =\n    vec_mat_Tensor v (a # b # N) ! j", "using list_int_nat"], ["proof (prove)\nusing this:\n  vec_mat_Tensor ?xs (?ys # ?yss) =\n  vec_vec_Tensor ?xs ?ys # vec_mat_Tensor ?xs ?yss\n  0 < ?k \\<longrightarrow> (?x # ?xs) ! ?k = ?xs ! nat (int ?k + - 1)\n\ngoal (1 subgoal):\n 1. 0 < j \\<longrightarrow>\n    vec_mat_Tensor v (b # N) ! nat (int j + - 1) =\n    vec_mat_Tensor v (a # b # N) ! j", "by metis"], ["proof (state)\nthis:\n  0 < j \\<longrightarrow>\n  vec_mat_Tensor v (b # N) ! nat (int j + - 1) =\n  vec_mat_Tensor v (a # b # N) ! j\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "have 9: \"(j>0) \n                 \\<longrightarrow> (((i < (row_length (b#N))*(length v))\n                    \\<and>((nat ((int j)+-1)) < (length (b#N))))\n                    \\<and>(mat (row_length (b#N)) (length (b#N)) (b#N)) \n                      \\<longrightarrow>  \n             ((vec_mat_Tensor v (b#N))!(nat ((int j)+-1))!i) \n                    = f \n                      (v!(i div (row_length (b#N)))) \n                      ((b#N)!(nat ((int j)+-1))!(i mod (row_length (b#N)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < j \\<longrightarrow>\n    (i < row_length (b # N) * length v \\<and>\n     nat (int j + - 1) < length (b # N)) \\<and>\n    mat (row_length (b # N)) (length (b # N)) (b # N) \\<longrightarrow>\n    vec_mat_Tensor v (b # N) ! nat (int j + - 1) ! i =\n    v ! (i div row_length (b # N)) *\n    (b # N) ! nat (int j + - 1) ! (i mod row_length (b # N))", "using Cons.hyps Cons mult.commute"], ["proof (prove)\nusing this:\n  (?i < length v * row_length M \\<and> ?j < length M) \\<and>\n  mat (row_length M) (length M) M \\<longrightarrow>\n  vec_mat_Tensor v M ! ?j ! ?i =\n  v ! (?i div row_length M) * M ! ?j ! (?i mod row_length M)\n  M = b # N\n  ?a * ?b = ?b * ?a\n\ngoal (1 subgoal):\n 1. 0 < j \\<longrightarrow>\n    (i < row_length (b # N) * length v \\<and>\n     nat (int j + - 1) < length (b # N)) \\<and>\n    mat (row_length (b # N)) (length (b # N)) (b # N) \\<longrightarrow>\n    vec_mat_Tensor v (b # N) ! nat (int j + - 1) ! i =\n    v ! (i div row_length (b # N)) *\n    (b # N) ! nat (int j + - 1) ! (i mod row_length (b # N))", "by metis"], ["proof (state)\nthis:\n  0 < j \\<longrightarrow>\n  (i < row_length (b # N) * length v \\<and>\n   nat (int j + - 1) < length (b # N)) \\<and>\n  mat (row_length (b # N)) (length (b # N)) (b # N) \\<longrightarrow>\n  vec_mat_Tensor v (b # N) ! nat (int j + - 1) ! i =\n  v ! (i div row_length (b # N)) *\n  (b # N) ! nat (int j + - 1) ! (i mod row_length (b # N))\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "have \"(j>0) \\<longrightarrow> ((nat ((int j) + -1)) < (length (b#N))) \n                           \\<longrightarrow> ((nat ((int j) + -1) + 1) < length (a#b#N))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < j \\<longrightarrow>\n    nat (int j + - 1) < length (b # N) \\<longrightarrow>\n    nat (int j + - 1) + 1 < length (a # b # N)", "by auto"], ["proof (state)\nthis:\n  0 < j \\<longrightarrow>\n  nat (int j + - 1) < length (b # N) \\<longrightarrow>\n  nat (int j + - 1) + 1 < length (a # b # N)\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "then"], ["proof (chain)\npicking this:\n  0 < j \\<longrightarrow>\n  nat (int j + - 1) < length (b # N) \\<longrightarrow>\n  nat (int j + - 1) + 1 < length (a # b # N)", "have \n           \"(j>0) \n                 \\<longrightarrow> ((nat ((int j) + -1)) < (length (b#N))) = (j < length (a#b#N))\""], ["proof (prove)\nusing this:\n  0 < j \\<longrightarrow>\n  nat (int j + - 1) < length (b # N) \\<longrightarrow>\n  nat (int j + - 1) + 1 < length (a # b # N)\n\ngoal (1 subgoal):\n 1. 0 < j \\<longrightarrow>\n    (nat (int j + - 1) < length (b # N)) = (j < length (a # b # N))", "by auto"], ["proof (state)\nthis:\n  0 < j \\<longrightarrow>\n  (nat (int j + - 1) < length (b # N)) = (j < length (a # b # N))\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "then"], ["proof (chain)\npicking this:\n  0 < j \\<longrightarrow>\n  (nat (int j + - 1) < length (b # N)) = (j < length (a # b # N))", "have  \n         \"(j>0) \n          \\<longrightarrow> (((i < (row_length (b#N))*(length v)) \\<and> (j < length (a#b#N)))\n              \\<and>(mat (row_length (b#N)) (length (b#N)) (b#N))   \\<longrightarrow>  \n                    ((vec_mat_Tensor v (b#N))!(nat ((int j)+-1))!i) \n            = f \n                (v!(i div (row_length (b#N)))) \n                ((b#N)!(nat ((int j)+-1))!(i mod (row_length (b#N)))))\""], ["proof (prove)\nusing this:\n  0 < j \\<longrightarrow>\n  (nat (int j + - 1) < length (b # N)) = (j < length (a # b # N))\n\ngoal (1 subgoal):\n 1. 0 < j \\<longrightarrow>\n    (i < row_length (b # N) * length v \\<and> j < length (a # b # N)) \\<and>\n    mat (row_length (b # N)) (length (b # N)) (b # N) \\<longrightarrow>\n    vec_mat_Tensor v (b # N) ! nat (int j + - 1) ! i =\n    v ! (i div row_length (b # N)) *\n    (b # N) ! nat (int j + - 1) ! (i mod row_length (b # N))", "using Cons.hyps Cons mult.commute"], ["proof (prove)\nusing this:\n  0 < j \\<longrightarrow>\n  (nat (int j + - 1) < length (b # N)) = (j < length (a # b # N))\n  (?i < length v * row_length M \\<and> ?j < length M) \\<and>\n  mat (row_length M) (length M) M \\<longrightarrow>\n  vec_mat_Tensor v M ! ?j ! ?i =\n  v ! (?i div row_length M) * M ! ?j ! (?i mod row_length M)\n  M = b # N\n  ?a * ?b = ?b * ?a\n\ngoal (1 subgoal):\n 1. 0 < j \\<longrightarrow>\n    (i < row_length (b # N) * length v \\<and> j < length (a # b # N)) \\<and>\n    mat (row_length (b # N)) (length (b # N)) (b # N) \\<longrightarrow>\n    vec_mat_Tensor v (b # N) ! nat (int j + - 1) ! i =\n    v ! (i div row_length (b # N)) *\n    (b # N) ! nat (int j + - 1) ! (i mod row_length (b # N))", "by metis"], ["proof (state)\nthis:\n  0 < j \\<longrightarrow>\n  (i < row_length (b # N) * length v \\<and> j < length (a # b # N)) \\<and>\n  mat (row_length (b # N)) (length (b # N)) (b # N) \\<longrightarrow>\n  vec_mat_Tensor v (b # N) ! nat (int j + - 1) ! i =\n  v ! (i div row_length (b # N)) *\n  (b # N) ! nat (int j + - 1) ! (i mod row_length (b # N))\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "with 8"], ["proof (chain)\npicking this:\n  0 < j \\<longrightarrow>\n  vec_mat_Tensor v (b # N) ! nat (int j + - 1) =\n  vec_mat_Tensor v (a # b # N) ! j\n  0 < j \\<longrightarrow>\n  (i < row_length (b # N) * length v \\<and> j < length (a # b # N)) \\<and>\n  mat (row_length (b # N)) (length (b # N)) (b # N) \\<longrightarrow>\n  vec_mat_Tensor v (b # N) ! nat (int j + - 1) ! i =\n  v ! (i div row_length (b # N)) *\n  (b # N) ! nat (int j + - 1) ! (i mod row_length (b # N))", "have \"(j>0) \n                 \\<longrightarrow> (((i < (row_length (b#N))*(length v)) \n                     \\<and> (j < length (a#b#N)))\n                     \\<and> (mat (row_length (b#N)) (length (b#N)) (b#N))   \n                      \\<longrightarrow>  \n         ((vec_mat_Tensor v (a#b#N))!j!i) \n                = f \n                    (v!(i div (row_length (b#N)))) \n                    ((b#N)!(nat ((int j)+-1))!(i mod (row_length (b#N)))))\""], ["proof (prove)\nusing this:\n  0 < j \\<longrightarrow>\n  vec_mat_Tensor v (b # N) ! nat (int j + - 1) =\n  vec_mat_Tensor v (a # b # N) ! j\n  0 < j \\<longrightarrow>\n  (i < row_length (b # N) * length v \\<and> j < length (a # b # N)) \\<and>\n  mat (row_length (b # N)) (length (b # N)) (b # N) \\<longrightarrow>\n  vec_mat_Tensor v (b # N) ! nat (int j + - 1) ! i =\n  v ! (i div row_length (b # N)) *\n  (b # N) ! nat (int j + - 1) ! (i mod row_length (b # N))\n\ngoal (1 subgoal):\n 1. 0 < j \\<longrightarrow>\n    (i < row_length (b # N) * length v \\<and> j < length (a # b # N)) \\<and>\n    mat (row_length (b # N)) (length (b # N)) (b # N) \\<longrightarrow>\n    vec_mat_Tensor v (a # b # N) ! j ! i =\n    v ! (i div row_length (b # N)) *\n    (b # N) ! nat (int j + - 1) ! (i mod row_length (b # N))", "by auto"], ["proof (state)\nthis:\n  0 < j \\<longrightarrow>\n  (i < row_length (b # N) * length v \\<and> j < length (a # b # N)) \\<and>\n  mat (row_length (b # N)) (length (b # N)) (b # N) \\<longrightarrow>\n  vec_mat_Tensor v (a # b # N) ! j ! i =\n  v ! (i div row_length (b # N)) *\n  (b # N) ! nat (int j + - 1) ! (i mod row_length (b # N))\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "also"], ["proof (state)\nthis:\n  0 < j \\<longrightarrow>\n  (i < row_length (b # N) * length v \\<and> j < length (a # b # N)) \\<and>\n  mat (row_length (b # N)) (length (b # N)) (b # N) \\<longrightarrow>\n  vec_mat_Tensor v (a # b # N) ! j ! i =\n  v ! (i div row_length (b # N)) *\n  (b # N) ! nat (int j + - 1) ! (i mod row_length (b # N))\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "have \"(j>0) \\<longrightarrow> (b#N)!(nat ((int j)+-1)) = (a#b#N)!j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < j \\<longrightarrow> (b # N) ! nat (int j + - 1) = (a # b # N) ! j", "using list_int_nat"], ["proof (prove)\nusing this:\n  0 < ?k \\<longrightarrow> (?x # ?xs) ! ?k = ?xs ! nat (int ?k + - 1)\n\ngoal (1 subgoal):\n 1. 0 < j \\<longrightarrow> (b # N) ! nat (int j + - 1) = (a # b # N) ! j", "by metis"], ["proof (state)\nthis:\n  0 < j \\<longrightarrow> (b # N) ! nat (int j + - 1) = (a # b # N) ! j\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "moreover"], ["proof (state)\nthis:\n  0 < j \\<longrightarrow> (b # N) ! nat (int j + - 1) = (a # b # N) ! j\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "have \" (j>0) \\<longrightarrow> \n                    (((i < (row_length (b#N))*(length v)) \n                   \\<and> (j < length (a#b#N)))\n                   \\<and> (mat (row_length (b#N)) (length (b#N)) (b#N))   \n                     \\<longrightarrow>  \n                         ((vec_mat_Tensor v (a#b#N))!j!i) \n                                  = f \n                                      (v!(i div (row_length (b#N)))) \n                                      ((a#b#N)!j!(i mod (row_length (b#N)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < j \\<longrightarrow>\n    (i < row_length (b # N) * length v \\<and> j < length (a # b # N)) \\<and>\n    mat (row_length (b # N)) (length (b # N)) (b # N) \\<longrightarrow>\n    vec_mat_Tensor v (a # b # N) ! j ! i =\n    v ! (i div row_length (b # N)) *\n    (a # b # N) ! j ! (i mod row_length (b # N))", "by (metis calculation(1) calculation(2))"], ["proof (state)\nthis:\n  0 < j \\<longrightarrow>\n  (i < row_length (b # N) * length v \\<and> j < length (a # b # N)) \\<and>\n  mat (row_length (b # N)) (length (b # N)) (b # N) \\<longrightarrow>\n  vec_mat_Tensor v (a # b # N) ! j ! i =\n  v ! (i div row_length (b # N)) *\n  (a # b # N) ! j ! (i mod row_length (b # N))\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "then"], ["proof (chain)\npicking this:\n  0 < j \\<longrightarrow>\n  (i < row_length (b # N) * length v \\<and> j < length (a # b # N)) \\<and>\n  mat (row_length (b # N)) (length (b # N)) (b # N) \\<longrightarrow>\n  vec_mat_Tensor v (a # b # N) ! j ! i =\n  v ! (i div row_length (b # N)) *\n  (a # b # N) ! j ! (i mod row_length (b # N))", "have  \n           \"(j>0) \n             \\<longrightarrow> (((i < (row_length (b#N))*(length v)) \n                 \\<and> (j < length (a#b#N)))\n                 \\<and> (mat (row_length (a#b#N)) (length (a#b#N)) (a#b#N))   \n                 \\<longrightarrow>  \n                        ((vec_mat_Tensor v (a#b#N))!j!i) \n                              = f \n                                    (v!(i div (row_length (b#N)))) \n                                    ((a#b#N)!j!(i mod (row_length (b#N)))))\""], ["proof (prove)\nusing this:\n  0 < j \\<longrightarrow>\n  (i < row_length (b # N) * length v \\<and> j < length (a # b # N)) \\<and>\n  mat (row_length (b # N)) (length (b # N)) (b # N) \\<longrightarrow>\n  vec_mat_Tensor v (a # b # N) ! j ! i =\n  v ! (i div row_length (b # N)) *\n  (a # b # N) ! j ! (i mod row_length (b # N))\n\ngoal (1 subgoal):\n 1. 0 < j \\<longrightarrow>\n    (i < row_length (b # N) * length v \\<and> j < length (a # b # N)) \\<and>\n    mat (row_length (a # b # N)) (length (a # b # N))\n     (a # b # N) \\<longrightarrow>\n    vec_mat_Tensor v (a # b # N) ! j ! i =\n    v ! (i div row_length (b # N)) *\n    (a # b # N) ! j ! (i mod row_length (b # N))", "using reduct_matrix"], ["proof (prove)\nusing this:\n  0 < j \\<longrightarrow>\n  (i < row_length (b # N) * length v \\<and> j < length (a # b # N)) \\<and>\n  mat (row_length (b # N)) (length (b # N)) (b # N) \\<longrightarrow>\n  vec_mat_Tensor v (a # b # N) ! j ! i =\n  v ! (i div row_length (b # N)) *\n  (a # b # N) ! j ! (i mod row_length (b # N))\n  mat (row_length (?a # ?M)) (length (?a # ?M)) (?a # ?M) \\<Longrightarrow>\n  mat (row_length ?M) (length ?M) ?M\n\ngoal (1 subgoal):\n 1. 0 < j \\<longrightarrow>\n    (i < row_length (b # N) * length v \\<and> j < length (a # b # N)) \\<and>\n    mat (row_length (a # b # N)) (length (a # b # N))\n     (a # b # N) \\<longrightarrow>\n    vec_mat_Tensor v (a # b # N) ! j ! i =\n    v ! (i div row_length (b # N)) *\n    (a # b # N) ! j ! (i mod row_length (b # N))", "by (metis)"], ["proof (state)\nthis:\n  0 < j \\<longrightarrow>\n  (i < row_length (b # N) * length v \\<and> j < length (a # b # N)) \\<and>\n  mat (row_length (a # b # N)) (length (a # b # N))\n   (a # b # N) \\<longrightarrow>\n  vec_mat_Tensor v (a # b # N) ! j ! i =\n  v ! (i div row_length (b # N)) *\n  (a # b # N) ! j ! (i mod row_length (b # N))\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "moreover"], ["proof (state)\nthis:\n  0 < j \\<longrightarrow>\n  (i < row_length (b # N) * length v \\<and> j < length (a # b # N)) \\<and>\n  mat (row_length (a # b # N)) (length (a # b # N))\n   (a # b # N) \\<longrightarrow>\n  vec_mat_Tensor v (a # b # N) ! j ! i =\n  v ! (i div row_length (b # N)) *\n  (a # b # N) ! j ! (i mod row_length (b # N))\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "have \"(mat (row_length (a#b#N)) (length (a#b#N)) (a#b#N))\n                   \\<longrightarrow>(row_length (b#N)) = (row_length (a#b#N))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length (a # b # N)) (length (a # b # N))\n     (a # b # N) \\<longrightarrow>\n    row_length (b # N) = row_length (a # b # N)", "by (metis \"7\" Cons)"], ["proof (state)\nthis:\n  mat (row_length (a # b # N)) (length (a # b # N))\n   (a # b # N) \\<longrightarrow>\n  row_length (b # N) = row_length (a # b # N)\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "moreover"], ["proof (state)\nthis:\n  mat (row_length (a # b # N)) (length (a # b # N))\n   (a # b # N) \\<longrightarrow>\n  row_length (b # N) = row_length (a # b # N)\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "have 10:\"(j>0) \n                     \\<longrightarrow> (((i < (row_length (a#b#N))*(length v)) \n                        \\<and>(j < length (a#b#N)))\n                        \\<and>(mat (row_length (a#b#N)) (length (a#b#N)) (a#b#N))   \\<longrightarrow>  \n                         ((vec_mat_Tensor v (a#b#N))!j!i) \n                                = f (v!(i div (row_length (a#b#N)))) \n                                    ((a#b#N)!j!(i mod (row_length (a#b#N)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < j \\<longrightarrow>\n    (i < row_length (a # b # N) * length v \\<and>\n     j < length (a # b # N)) \\<and>\n    mat (row_length (a # b # N)) (length (a # b # N))\n     (a # b # N) \\<longrightarrow>\n    vec_mat_Tensor v (a # b # N) ! j ! i =\n    v ! (i div row_length (a # b # N)) *\n    (a # b # N) ! j ! (i mod row_length (a # b # N))", "by (metis calculation(3) calculation(4))"], ["proof (state)\nthis:\n  0 < j \\<longrightarrow>\n  (i < row_length (a # b # N) * length v \\<and>\n   j < length (a # b # N)) \\<and>\n  mat (row_length (a # b # N)) (length (a # b # N))\n   (a # b # N) \\<longrightarrow>\n  vec_mat_Tensor v (a # b # N) ! j ! i =\n  v ! (i div row_length (a # b # N)) *\n  (a # b # N) ! j ! (i mod row_length (a # b # N))\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "have \"(j = 0) \\<or> (j > 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j = 0 \\<or> 0 < j", "by auto"], ["proof (state)\nthis:\n  j = 0 \\<or> 0 < j\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "with 6 10 logic"], ["proof (chain)\npicking this:\n  j = 0 \\<longrightarrow>\n  (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n  mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n  vec_mat_Tensor v (a # M) ! j ! i =\n  v ! (i div row_length (a # M)) * (a # M) ! j ! (i mod row_length (a # M))\n  0 < j \\<longrightarrow>\n  (i < row_length (a # b # N) * length v \\<and>\n   j < length (a # b # N)) \\<and>\n  mat (row_length (a # b # N)) (length (a # b # N))\n   (a # b # N) \\<longrightarrow>\n  vec_mat_Tensor v (a # b # N) ! j ! i =\n  v ! (i div row_length (a # b # N)) *\n  (a # b # N) ! j ! (i mod row_length (a # b # N))\n  \\<lbrakk>?A \\<longrightarrow> ?B; \\<not> ?A \\<longrightarrow> ?B\\<rbrakk>\n  \\<Longrightarrow> ?B\n  j = 0 \\<or> 0 < j", "have \n            \"(((i < (row_length (a#b#N))*(length v)) \n            \\<and> (j < length (a#b#N)))\n            \\<and> (mat (row_length (a#b#N)) (length (a#b#N)) (a#b#N))   \n            \\<longrightarrow>  \n                ((vec_mat_Tensor v (a#b#N))!j!i) \n                      = f \n                          (v!(i div (row_length (a#b#N)))) \n                          ((a#b#N)!j!(i mod (row_length (a#b#N)))))\""], ["proof (prove)\nusing this:\n  j = 0 \\<longrightarrow>\n  (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n  mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n  vec_mat_Tensor v (a # M) ! j ! i =\n  v ! (i div row_length (a # M)) * (a # M) ! j ! (i mod row_length (a # M))\n  0 < j \\<longrightarrow>\n  (i < row_length (a # b # N) * length v \\<and>\n   j < length (a # b # N)) \\<and>\n  mat (row_length (a # b # N)) (length (a # b # N))\n   (a # b # N) \\<longrightarrow>\n  vec_mat_Tensor v (a # b # N) ! j ! i =\n  v ! (i div row_length (a # b # N)) *\n  (a # b # N) ! j ! (i mod row_length (a # b # N))\n  \\<lbrakk>?A \\<longrightarrow> ?B; \\<not> ?A \\<longrightarrow> ?B\\<rbrakk>\n  \\<Longrightarrow> ?B\n  j = 0 \\<or> 0 < j\n\ngoal (1 subgoal):\n 1. (i < row_length (a # b # N) * length v \\<and>\n     j < length (a # b # N)) \\<and>\n    mat (row_length (a # b # N)) (length (a # b # N))\n     (a # b # N) \\<longrightarrow>\n    vec_mat_Tensor v (a # b # N) ! j ! i =\n    v ! (i div row_length (a # b # N)) *\n    (a # b # N) ! j ! (i mod row_length (a # b # N))", "using  Cons"], ["proof (prove)\nusing this:\n  j = 0 \\<longrightarrow>\n  (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n  mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n  vec_mat_Tensor v (a # M) ! j ! i =\n  v ! (i div row_length (a # M)) * (a # M) ! j ! (i mod row_length (a # M))\n  0 < j \\<longrightarrow>\n  (i < row_length (a # b # N) * length v \\<and>\n   j < length (a # b # N)) \\<and>\n  mat (row_length (a # b # N)) (length (a # b # N))\n   (a # b # N) \\<longrightarrow>\n  vec_mat_Tensor v (a # b # N) ! j ! i =\n  v ! (i div row_length (a # b # N)) *\n  (a # b # N) ! j ! (i mod row_length (a # b # N))\n  \\<lbrakk>?A \\<longrightarrow> ?B; \\<not> ?A \\<longrightarrow> ?B\\<rbrakk>\n  \\<Longrightarrow> ?B\n  j = 0 \\<or> 0 < j\n  M = b # N\n\ngoal (1 subgoal):\n 1. (i < row_length (a # b # N) * length v \\<and>\n     j < length (a # b # N)) \\<and>\n    mat (row_length (a # b # N)) (length (a # b # N))\n     (a # b # N) \\<longrightarrow>\n    vec_mat_Tensor v (a # b # N) ! j ! i =\n    v ! (i div row_length (a # b # N)) *\n    (a # b # N) ! j ! (i mod row_length (a # b # N))", "by metis"], ["proof (state)\nthis:\n  (i < row_length (a # b # N) * length v \\<and>\n   j < length (a # b # N)) \\<and>\n  mat (row_length (a # b # N)) (length (a # b # N))\n   (a # b # N) \\<longrightarrow>\n  vec_mat_Tensor v (a # b # N) ! j ! i =\n  v ! (i div row_length (a # b # N)) *\n  (a # b # N) ! j ! (i mod row_length (a # b # N))\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       M = aa # list \\<Longrightarrow>\n       (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "from this"], ["proof (chain)\npicking this:\n  (i < row_length (a # b # N) * length v \\<and>\n   j < length (a # b # N)) \\<and>\n  mat (row_length (a # b # N)) (length (a # b # N))\n   (a # b # N) \\<longrightarrow>\n  vec_mat_Tensor v (a # b # N) ! j ! i =\n  v ! (i div row_length (a # b # N)) *\n  (a # b # N) ! j ! (i mod row_length (a # b # N))", "show ?thesis"], ["proof (prove)\nusing this:\n  (i < row_length (a # b # N) * length v \\<and>\n   j < length (a # b # N)) \\<and>\n  mat (row_length (a # b # N)) (length (a # b # N))\n   (a # b # N) \\<longrightarrow>\n  vec_mat_Tensor v (a # b # N) ! j ! i =\n  v ! (i div row_length (a # b # N)) *\n  (a # b # N) ! j ! (i mod row_length (a # b # N))\n\ngoal (1 subgoal):\n 1. (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n    mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n    vec_mat_Tensor v (a # M) ! j ! i =\n    v ! (i div row_length (a # M)) *\n    (a # M) ! j ! (i mod row_length (a # M))", "by (metis Cons)"], ["proof (state)\nthis:\n  (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n  mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n  vec_mat_Tensor v (a # M) ! j ! i =\n  v ! (i div row_length (a # M)) * (a # M) ! j ! (i mod row_length (a # M))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n  mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n  vec_mat_Tensor v (a # M) ! j ! i =\n  v ! (i div row_length (a # M)) * (a # M) ! j ! (i mod row_length (a # M))\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       a = aa # list \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "from this"], ["proof (chain)\npicking this:\n  (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n  mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n  vec_mat_Tensor v (a # M) ! j ! i =\n  v ! (i div row_length (a # M)) * (a # M) ! j ! (i mod row_length (a # M))", "show ?thesis"], ["proof (prove)\nusing this:\n  (i < row_length (a # M) * length v \\<and> j < length (a # M)) \\<and>\n  mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n  vec_mat_Tensor v (a # M) ! j ! i =\n  v ! (i div row_length (a # M)) * (a # M) ! j ! (i mod row_length (a # M))\n\ngoal (1 subgoal):\n 1. (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n    mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n    vec_mat_Tensor v (a # M) ! j ! i =\n    v ! (i div row_length (a # M)) *\n    (a # M) ! j ! (i mod row_length (a # M))", "by (metis mult.commute)"], ["proof (state)\nthis:\n  (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n  mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n  vec_mat_Tensor v (a # M) ! j ! i =\n  v ! (i div row_length (a # M)) * (a # M) ! j ! (i mod row_length (a # M))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n  mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n  vec_mat_Tensor v (a # M) ! j ! i =\n  v ! (i div row_length (a # M)) * (a # M) ! j ! (i mod row_length (a # M))\n\ngoal (1 subgoal):\n 1. \\<And>a M i j.\n       (\\<And>i j.\n           (i < length v * row_length M \\<and> j < length M) \\<and>\n           mat (row_length M) (length M) M \\<longrightarrow>\n           vec_mat_Tensor v M ! j ! i =\n           v ! (i div row_length M) *\n           M ! j ! (i mod row_length M)) \\<Longrightarrow>\n       (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n       mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j ! i =\n       v ! (i div row_length (a # M)) *\n       (a # M) ! j ! (i mod row_length (a # M))", "from this"], ["proof (chain)\npicking this:\n  (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n  mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n  vec_mat_Tensor v (a # M) ! j ! i =\n  v ! (i div row_length (a # M)) * (a # M) ! j ! (i mod row_length (a # M))", "show ?case"], ["proof (prove)\nusing this:\n  (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n  mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n  vec_mat_Tensor v (a # M) ! j ! i =\n  v ! (i div row_length (a # M)) * (a # M) ! j ! (i mod row_length (a # M))\n\ngoal (1 subgoal):\n 1. (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n    mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n    vec_mat_Tensor v (a # M) ! j ! i =\n    v ! (i div row_length (a # M)) *\n    (a # M) ! j ! (i mod row_length (a # M))", "by auto"], ["proof (state)\nthis:\n  (i < length v * row_length (a # M) \\<and> j < length (a # M)) \\<and>\n  mat (row_length (a # M)) (length (a # M)) (a # M) \\<longrightarrow>\n  vec_mat_Tensor v (a # M) ! j ! i =\n  v ! (i div row_length (a # M)) * (a # M) ! j ! (i mod row_length (a # M))\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>The following theorem tells us about the relationship between\nentries of tensor products of two matrices and the entries of matrices\\<close>"], ["", "theorem matrix_Tensor_elements: \n fixes M1 M2\nshows\n \"\\<forall>i.\\<forall>j.(((i<((row_length M1)*(row_length M2)))\n       \\<and>(j < (length M1)*(length M2)))\n       \\<and>(mat (row_length M1) (length M1) M1)\n       \\<and>(mat (row_length M2) (length M2) M2)\n            \\<longrightarrow> ((M1 \\<otimes> M2)!j!i) = \n                     f  \n                        (M1!(j div (length M2))!(i div (row_length M2))) \n                        (M2!(j mod length M2)!(i mod (row_length M2))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       (i < row_length M1 * row_length M2 \\<and>\n        j < length M1 * length M2) \\<and>\n       mat (row_length M1) (length M1) M1 \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (M1 \\<otimes> M2) ! j ! i =\n       M1 ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "apply(rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<forall>j.\n          (i < row_length M1 * row_length M2 \\<and>\n           j < length M1 * length M2) \\<and>\n          mat (row_length M1) (length M1) M1 \\<and>\n          mat (row_length M2) (length M2) M2 \\<longrightarrow>\n          (M1 \\<otimes> M2) ! j ! i =\n          M1 ! (j div length M2) ! (i div row_length M2) *\n          M2 ! (j mod length M2) ! (i mod row_length M2)", "apply(rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       (i < row_length M1 * row_length M2 \\<and>\n        j < length M1 * length M2) \\<and>\n       mat (row_length M1) (length M1) M1 \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (M1 \\<otimes> M2) ! j ! i =\n       M1 ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "proof(induct M1)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i j.\n       (i < row_length [] * row_length M2 \\<and>\n        j < length [] * length M2) \\<and>\n       mat (row_length []) (length []) [] \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       ([] \\<otimes> M2) ! j ! i =\n       [] ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)\n 2. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       (i < row_length [] * row_length M2 \\<and>\n        j < length [] * length M2) \\<and>\n       mat (row_length []) (length []) [] \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       ([] \\<otimes> M2) ! j ! i =\n       [] ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)\n 2. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "have \"(row_length []) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_length [] = 0", "using row_length_def"], ["proof (prove)\nusing this:\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n\ngoal (1 subgoal):\n 1. row_length [] = 0", "by auto"], ["proof (state)\nthis:\n  row_length [] = 0\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       (i < row_length [] * row_length M2 \\<and>\n        j < length [] * length M2) \\<and>\n       mat (row_length []) (length []) [] \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       ([] \\<otimes> M2) ! j ! i =\n       [] ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)\n 2. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "then"], ["proof (chain)\npicking this:\n  row_length [] = 0", "have \"(i< ((row_length [])*(row_length M2))) \\<longrightarrow> False\""], ["proof (prove)\nusing this:\n  row_length [] = 0\n\ngoal (1 subgoal):\n 1. i < row_length [] * row_length M2 \\<longrightarrow> False", "by auto"], ["proof (state)\nthis:\n  i < row_length [] * row_length M2 \\<longrightarrow> False\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       (i < row_length [] * row_length M2 \\<and>\n        j < length [] * length M2) \\<and>\n       mat (row_length []) (length []) [] \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       ([] \\<otimes> M2) ! j ! i =\n       [] ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)\n 2. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "from this"], ["proof (chain)\npicking this:\n  i < row_length [] * row_length M2 \\<longrightarrow> False", "have \"((i<((row_length [])*(row_length M2)))\n                 \\<and>(j < (length [])*(length M2)))\n                 \\<and>(mat (row_length []) (length []) [])\n                 \\<and>(mat (row_length M2) (length M2) M2) \n                                                 \\<longrightarrow> False\""], ["proof (prove)\nusing this:\n  i < row_length [] * row_length M2 \\<longrightarrow> False\n\ngoal (1 subgoal):\n 1. (i < row_length [] * row_length M2 \\<and>\n     j < length [] * length M2) \\<and>\n    mat (row_length []) (length []) [] \\<and>\n    mat (row_length M2) (length M2) M2 \\<longrightarrow>\n    False", "by auto"], ["proof (state)\nthis:\n  (i < row_length [] * row_length M2 \\<and>\n   j < length [] * length M2) \\<and>\n  mat (row_length []) (length []) [] \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  False\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       (i < row_length [] * row_length M2 \\<and>\n        j < length [] * length M2) \\<and>\n       mat (row_length []) (length []) [] \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       ([] \\<otimes> M2) ! j ! i =\n       [] ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)\n 2. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "moreover"], ["proof (state)\nthis:\n  (i < row_length [] * row_length M2 \\<and>\n   j < length [] * length M2) \\<and>\n  mat (row_length []) (length []) [] \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  False\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       (i < row_length [] * row_length M2 \\<and>\n        j < length [] * length M2) \\<and>\n       mat (row_length []) (length []) [] \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       ([] \\<otimes> M2) ! j ! i =\n       [] ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)\n 2. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "have \"([] \\<otimes> M2) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<otimes> M2 = []", "by auto"], ["proof (state)\nthis:\n  [] \\<otimes> M2 = []\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       (i < row_length [] * row_length M2 \\<and>\n        j < length [] * length M2) \\<and>\n       mat (row_length []) (length []) [] \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       ([] \\<otimes> M2) ! j ! i =\n       [] ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)\n 2. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "moreover"], ["proof (state)\nthis:\n  [] \\<otimes> M2 = []\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       (i < row_length [] * row_length M2 \\<and>\n        j < length [] * length M2) \\<and>\n       mat (row_length []) (length []) [] \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       ([] \\<otimes> M2) ! j ! i =\n       [] ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)\n 2. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "have \n          \"((i<((row_length [])*(row_length M2)))\n           \\<and>(j < (length [])*(length M2)))\n           \\<and>(mat (row_length []) (length []) [])\n           \\<and>(mat (row_length M2) (length M2) M2) \n               \\<longrightarrow> (([] \\<otimes> M2)!j!i) = \n                           f  \n                             ([]!(j div (length []))!(i div (row_length M2))) \n                              (M2!(j mod length [])!(i mod (row_length M2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < row_length [] * row_length M2 \\<and>\n     j < length [] * length M2) \\<and>\n    mat (row_length []) (length []) [] \\<and>\n    mat (row_length M2) (length M2) M2 \\<longrightarrow>\n    ([] \\<otimes> M2) ! j ! i =\n    [] ! (j div length []) ! (i div row_length M2) *\n    M2 ! (j mod length []) ! (i mod row_length M2)", "by auto"], ["proof (state)\nthis:\n  (i < row_length [] * row_length M2 \\<and>\n   j < length [] * length M2) \\<and>\n  mat (row_length []) (length []) [] \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  ([] \\<otimes> M2) ! j ! i =\n  [] ! (j div length []) ! (i div row_length M2) *\n  M2 ! (j mod length []) ! (i mod row_length M2)\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       (i < row_length [] * row_length M2 \\<and>\n        j < length [] * length M2) \\<and>\n       mat (row_length []) (length []) [] \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       ([] \\<otimes> M2) ! j ! i =\n       [] ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)\n 2. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "then"], ["proof (chain)\npicking this:\n  (i < row_length [] * row_length M2 \\<and>\n   j < length [] * length M2) \\<and>\n  mat (row_length []) (length []) [] \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  ([] \\<otimes> M2) ! j ! i =\n  [] ! (j div length []) ! (i div row_length M2) *\n  M2 ! (j mod length []) ! (i mod row_length M2)", "show ?case"], ["proof (prove)\nusing this:\n  (i < row_length [] * row_length M2 \\<and>\n   j < length [] * length M2) \\<and>\n  mat (row_length []) (length []) [] \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  ([] \\<otimes> M2) ! j ! i =\n  [] ! (j div length []) ! (i div row_length M2) *\n  M2 ! (j mod length []) ! (i mod row_length M2)\n\ngoal (1 subgoal):\n 1. (i < row_length [] * row_length M2 \\<and>\n     j < length [] * length M2) \\<and>\n    mat (row_length []) (length []) [] \\<and>\n    mat (row_length M2) (length M2) M2 \\<longrightarrow>\n    ([] \\<otimes> M2) ! j ! i =\n    [] ! (j div length M2) ! (i div row_length M2) *\n    M2 ! (j mod length M2) ! (i mod row_length M2)", "by auto"], ["proof (state)\nthis:\n  (i < row_length [] * row_length M2 \\<and>\n   j < length [] * length M2) \\<and>\n  mat (row_length []) (length []) [] \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  ([] \\<otimes> M2) ! j ! i =\n  [] ! (j div length M2) ! (i div row_length M2) *\n  M2 ! (j mod length M2) ! (i mod row_length M2)\n\ngoal (1 subgoal):\n 1. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "case (Cons v M)"], ["proof (state)\nthis:\n  (?i < row_length M * row_length M2 \\<and>\n   ?j < length M * length M2) \\<and>\n  mat (row_length M) (length M) M \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  (M \\<otimes> M2) ! ?j ! ?i =\n  M ! (?j div length M2) ! (?i div row_length M2) *\n  M2 ! (?j mod length M2) ! (?i mod row_length M2)\n\ngoal (1 subgoal):\n 1. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "have 0:\"(v#M) \\<otimes> M2 = (vec_mat_Tensor v M2)@(Tensor M M2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v # M \\<otimes> M2 = vec_mat_Tensor v M2 @ (M \\<otimes> M2)", "by auto"], ["proof (state)\nthis:\n  v # M \\<otimes> M2 = vec_mat_Tensor v M2 @ (M \\<otimes> M2)\n\ngoal (1 subgoal):\n 1. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "then"], ["proof (chain)\npicking this:\n  v # M \\<otimes> M2 = vec_mat_Tensor v M2 @ (M \\<otimes> M2)", "have 1:\n        \"(j<(length M2)) \\<longrightarrow> ( ((v#M) \\<otimes> M2)!j = (vec_mat_Tensor v M2)!j)\""], ["proof (prove)\nusing this:\n  v # M \\<otimes> M2 = vec_mat_Tensor v M2 @ (M \\<otimes> M2)\n\ngoal (1 subgoal):\n 1. j < length M2 \\<longrightarrow>\n    (v # M \\<otimes> M2) ! j = vec_mat_Tensor v M2 ! j", "using append_simpl vec_mat_Tensor_length"], ["proof (prove)\nusing this:\n  v # M \\<otimes> M2 = vec_mat_Tensor v M2 @ (M \\<otimes> M2)\n  ?i < length ?xs \\<longrightarrow> (?xs @ ?ys) ! ?i = ?xs ! ?i\n  length (vec_mat_Tensor ?xs ?ys) = length ?ys\n\ngoal (1 subgoal):\n 1. j < length M2 \\<longrightarrow>\n    (v # M \\<otimes> M2) ! j = vec_mat_Tensor v M2 ! j", "by metis"], ["proof (state)\nthis:\n  j < length M2 \\<longrightarrow>\n  (v # M \\<otimes> M2) ! j = vec_mat_Tensor v M2 ! j\n\ngoal (1 subgoal):\n 1. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "have \" (((i<((length a)*(row_length M2)))\n      \\<and>(j < (length M2)))\\<and>(mat (row_length M2) (length M2) M2)\n  \\<longrightarrow> ((vec_mat_Tensor a M2)!j!i) = f (a!(i div (row_length M2))) (M2!j!(i mod (row_length M2))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < length a * row_length M2 \\<and> j < length M2) \\<and>\n    mat (row_length M2) (length M2) M2 \\<longrightarrow>\n    vec_mat_Tensor a M2 ! j ! i =\n    a ! (i div row_length M2) * M2 ! j ! (i mod row_length M2)", "using vec_mat_Tensor_elements"], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     (i < length ?v * row_length ?M \\<and> j < length ?M) \\<and>\n     mat (row_length ?M) (length ?M) ?M \\<longrightarrow>\n     vec_mat_Tensor ?v ?M ! j ! i =\n     ?v ! (i div row_length ?M) * ?M ! j ! (i mod row_length ?M)\n\ngoal (1 subgoal):\n 1. (i < length a * row_length M2 \\<and> j < length M2) \\<and>\n    mat (row_length M2) (length M2) M2 \\<longrightarrow>\n    vec_mat_Tensor a M2 ! j ! i =\n    a ! (i div row_length M2) * M2 ! j ! (i mod row_length M2)", "by auto"], ["proof (state)\nthis:\n  (i < length a * row_length M2 \\<and> j < length M2) \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  vec_mat_Tensor a M2 ! j ! i =\n  a ! (i div row_length M2) * M2 ! j ! (i mod row_length M2)\n\ngoal (1 subgoal):\n 1. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "have \"(j < (length M2)) \\<longrightarrow> (j div (length M2)) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < length M2 \\<longrightarrow> j div length M2 = 0", "by auto"], ["proof (state)\nthis:\n  j < length M2 \\<longrightarrow> j div length M2 = 0\n\ngoal (1 subgoal):\n 1. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "then"], ["proof (chain)\npicking this:\n  j < length M2 \\<longrightarrow> j div length M2 = 0", "have 2:\"(j < (length M2)) \\<longrightarrow> (v#M)!(j div (length M2)) = v\""], ["proof (prove)\nusing this:\n  j < length M2 \\<longrightarrow> j div length M2 = 0\n\ngoal (1 subgoal):\n 1. j < length M2 \\<longrightarrow> (v # M) ! (j div length M2) = v", "by auto"], ["proof (state)\nthis:\n  j < length M2 \\<longrightarrow> (v # M) ! (j div length M2) = v\n\ngoal (1 subgoal):\n 1. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "have \"(j < (length M2)) \\<longrightarrow> (j mod (length M2)) = j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < length M2 \\<longrightarrow> j mod length M2 = j", "by auto"], ["proof (state)\nthis:\n  j < length M2 \\<longrightarrow> j mod length M2 = j\n\ngoal (1 subgoal):\n 1. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "moreover"], ["proof (state)\nthis:\n  j < length M2 \\<longrightarrow> j mod length M2 = j\n\ngoal (1 subgoal):\n 1. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "have \"(j < (length M2)) \\<longrightarrow> (v#M)!(j mod (length M2)) = (v#M)!j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < length M2 \\<longrightarrow>\n    (v # M) ! (j mod length M2) = (v # M) ! j", "by auto"], ["proof (state)\nthis:\n  j < length M2 \\<longrightarrow> (v # M) ! (j mod length M2) = (v # M) ! j\n\ngoal (1 subgoal):\n 1. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "have step0:\n    \"(j < (length M2)) \\<longrightarrow> \n               (((i<((length v)*(row_length M2)))\n              \\<and>(j < (length M2) * (length (v#M))))\n              \\<and>(mat (row_length M2) (length M2) M2)\n                  \\<longrightarrow> ((Tensor (v#M) M2)!j!i)  \n                     = f \n                         ((v#M)!(j div (length M2))!(i div (row_length M2))) \n                         (M2!(j mod (length M2))!(i mod (row_length M2))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < length M2 \\<longrightarrow>\n    (i < length v * row_length M2 \\<and>\n     j < length M2 * length (v # M)) \\<and>\n    mat (row_length M2) (length M2) M2 \\<longrightarrow>\n    (v # M \\<otimes> M2) ! j ! i =\n    (v # M) ! (j div length M2) ! (i div row_length M2) *\n    M2 ! (j mod length M2) ! (i mod row_length M2)", "using 2 1  calculation(1) vec_mat_Tensor_elements"], ["proof (prove)\nusing this:\n  j < length M2 \\<longrightarrow> (v # M) ! (j div length M2) = v\n  j < length M2 \\<longrightarrow>\n  (v # M \\<otimes> M2) ! j = vec_mat_Tensor v M2 ! j\n  j < length M2 \\<longrightarrow> j mod length M2 = j\n  \\<forall>i j.\n     (i < length ?v * row_length ?M \\<and> j < length ?M) \\<and>\n     mat (row_length ?M) (length ?M) ?M \\<longrightarrow>\n     vec_mat_Tensor ?v ?M ! j ! i =\n     ?v ! (i div row_length ?M) * ?M ! j ! (i mod row_length ?M)\n\ngoal (1 subgoal):\n 1. j < length M2 \\<longrightarrow>\n    (i < length v * row_length M2 \\<and>\n     j < length M2 * length (v # M)) \\<and>\n    mat (row_length M2) (length M2) M2 \\<longrightarrow>\n    (v # M \\<otimes> M2) ! j ! i =\n    (v # M) ! (j div length M2) ! (i div row_length M2) *\n    M2 ! (j mod length M2) ! (i mod row_length M2)", "by auto"], ["proof (state)\nthis:\n  j < length M2 \\<longrightarrow>\n  (i < length v * row_length M2 \\<and>\n   j < length M2 * length (v # M)) \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  (v # M \\<otimes> M2) ! j ! i =\n  (v # M) ! (j div length M2) ! (i div row_length M2) *\n  M2 ! (j mod length M2) ! (i mod row_length M2)\n\ngoal (1 subgoal):\n 1. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "have step1: \n     \"(j < (length M2)) \n        \\<longrightarrow> (((i<((row_length (v#M))*(row_length M2)))\n            \\<and>(j <  (length (v#M))*(length M2)))\n            \\<and>(mat (row_length (v#M)) (length (v#M)) (v#M))\n            \\<and>(mat (row_length M2) (length M2) M2)\n                 \\<longrightarrow> ((Tensor (v#M) M2)!j!i) =\n                   f \n                     ((v#M)!(j div (length M2))!(i div (row_length M2))) \n                     (M2!(j mod (length M2))!(i mod (row_length M2))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < length M2 \\<longrightarrow>\n    (i < row_length (v # M) * row_length M2 \\<and>\n     j < length (v # M) * length M2) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<longrightarrow>\n    (v # M \\<otimes> M2) ! j ! i =\n    (v # M) ! (j div length M2) ! (i div row_length M2) *\n    M2 ! (j mod length M2) ! (i mod row_length M2)", "using row_length_def  step0"], ["proof (prove)\nusing this:\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n  j < length M2 \\<longrightarrow>\n  (i < length v * row_length M2 \\<and>\n   j < length M2 * length (v # M)) \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  (v # M \\<otimes> M2) ! j ! i =\n  (v # M) ! (j div length M2) ! (i div row_length M2) *\n  M2 ! (j mod length M2) ! (i mod row_length M2)\n\ngoal (1 subgoal):\n 1. j < length M2 \\<longrightarrow>\n    (i < row_length (v # M) * row_length M2 \\<and>\n     j < length (v # M) * length M2) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<longrightarrow>\n    (v # M \\<otimes> M2) ! j ! i =\n    (v # M) ! (j div length M2) ! (i div row_length M2) *\n    M2 ! (j mod length M2) ! (i mod row_length M2)", "by auto"], ["proof (state)\nthis:\n  j < length M2 \\<longrightarrow>\n  (i < row_length (v # M) * row_length M2 \\<and>\n   j < length (v # M) * length M2) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  (v # M \\<otimes> M2) ! j ! i =\n  (v # M) ! (j div length M2) ! (i div row_length M2) *\n  M2 ! (j mod length M2) ! (i mod row_length M2)\n\ngoal (1 subgoal):\n 1. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "from 0"], ["proof (chain)\npicking this:\n  v # M \\<otimes> M2 = vec_mat_Tensor v M2 @ (M \\<otimes> M2)", "have 3: \n        \"(j \\<ge> (length M2)) \\<longrightarrow> ((v#M) \\<otimes> M2)!j = (M \\<otimes> M2)!(j - (length M2))\""], ["proof (prove)\nusing this:\n  v # M \\<otimes> M2 = vec_mat_Tensor v M2 @ (M \\<otimes> M2)\n\ngoal (1 subgoal):\n 1. length M2 \\<le> j \\<longrightarrow>\n    (v # M \\<otimes> M2) ! j = (M \\<otimes> M2) ! (j - length M2)", "using vec_mat_Tensor_length add.commute append_simpl2"], ["proof (prove)\nusing this:\n  v # M \\<otimes> M2 = vec_mat_Tensor v M2 @ (M \\<otimes> M2)\n  length (vec_mat_Tensor ?xs ?ys) = length ?ys\n  ?a + ?b = ?b + ?a\n  length ?xs \\<le> ?i \\<longrightarrow>\n  (?xs @ ?ys) ! ?i = ?ys ! (?i - length ?xs)\n\ngoal (1 subgoal):\n 1. length M2 \\<le> j \\<longrightarrow>\n    (v # M \\<otimes> M2) ! j = (M \\<otimes> M2) ! (j - length M2)", "by metis"], ["proof (state)\nthis:\n  length M2 \\<le> j \\<longrightarrow>\n  (v # M \\<otimes> M2) ! j = (M \\<otimes> M2) ! (j - length M2)\n\ngoal (1 subgoal):\n 1. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "have 4:\n      \"(j \\<ge> (length M2)) \\<longrightarrow>\n                 (((i<((row_length M)*(row_length M2)))\n                 \\<and>((j-(length M2)) < (length M)*(length M2)))\n                 \\<and>(mat (row_length M) (length M) M)\n                 \\<and>(mat (row_length M2) (length M2) M2)\n               \\<longrightarrow> ((M \\<otimes> M2)!(j-(length M2))!i) \n              = f \n                 (M!((j-(length M2)) div (length M2))!(i div (row_length M2))) \n                 (M2!((j-(length M2)) mod length M2)!(i mod (row_length M2))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length M2 \\<le> j \\<longrightarrow>\n    (i < row_length M * row_length M2 \\<and>\n     j - length M2 < length M * length M2) \\<and>\n    mat (row_length M) (length M) M \\<and>\n    mat (row_length M2) (length M2) M2 \\<longrightarrow>\n    (M \\<otimes> M2) ! (j - length M2) ! i =\n    M ! ((j - length M2) div length M2) ! (i div row_length M2) *\n    M2 ! ((j - length M2) mod length M2) ! (i mod row_length M2)", "using Cons.hyps"], ["proof (prove)\nusing this:\n  (?i < row_length M * row_length M2 \\<and>\n   ?j < length M * length M2) \\<and>\n  mat (row_length M) (length M) M \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  (M \\<otimes> M2) ! ?j ! ?i =\n  M ! (?j div length M2) ! (?i div row_length M2) *\n  M2 ! (?j mod length M2) ! (?i mod row_length M2)\n\ngoal (1 subgoal):\n 1. length M2 \\<le> j \\<longrightarrow>\n    (i < row_length M * row_length M2 \\<and>\n     j - length M2 < length M * length M2) \\<and>\n    mat (row_length M) (length M) M \\<and>\n    mat (row_length M2) (length M2) M2 \\<longrightarrow>\n    (M \\<otimes> M2) ! (j - length M2) ! i =\n    M ! ((j - length M2) div length M2) ! (i div row_length M2) *\n    M2 ! ((j - length M2) mod length M2) ! (i mod row_length M2)", "by auto"], ["proof (state)\nthis:\n  length M2 \\<le> j \\<longrightarrow>\n  (i < row_length M * row_length M2 \\<and>\n   j - length M2 < length M * length M2) \\<and>\n  mat (row_length M) (length M) M \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  (M \\<otimes> M2) ! (j - length M2) ! i =\n  M ! ((j - length M2) div length M2) ! (i div row_length M2) *\n  M2 ! ((j - length M2) mod length M2) ! (i mod row_length M2)\n\ngoal (1 subgoal):\n 1. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "moreover"], ["proof (state)\nthis:\n  length M2 \\<le> j \\<longrightarrow>\n  (i < row_length M * row_length M2 \\<and>\n   j - length M2 < length M * length M2) \\<and>\n  mat (row_length M) (length M) M \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  (M \\<otimes> M2) ! (j - length M2) ! i =\n  M ! ((j - length M2) div length M2) ! (i div row_length M2) *\n  M2 ! ((j - length M2) mod length M2) ! (i mod row_length M2)\n\ngoal (1 subgoal):\n 1. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "have \"(mat (row_length (v#M)) (length (v#M)) (v#M))\n                              \\<longrightarrow>(mat (row_length M) (length M) M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length (v # M)) (length (v # M)) (v # M) \\<longrightarrow>\n    mat (row_length M) (length M) M", "using reduct_matrix"], ["proof (prove)\nusing this:\n  mat (row_length (?a # ?M)) (length (?a # ?M)) (?a # ?M) \\<Longrightarrow>\n  mat (row_length ?M) (length ?M) ?M\n\ngoal (1 subgoal):\n 1. mat (row_length (v # M)) (length (v # M)) (v # M) \\<longrightarrow>\n    mat (row_length M) (length M) M", "by auto"], ["proof (state)\nthis:\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<longrightarrow>\n  mat (row_length M) (length M) M\n\ngoal (1 subgoal):\n 1. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "moreover"], ["proof (state)\nthis:\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<longrightarrow>\n  mat (row_length M) (length M) M\n\ngoal (1 subgoal):\n 1. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "have 5:\n      \"(j \\<ge> (length M2)) \n        \\<longrightarrow> (((i<((row_length M)*(row_length M2)))\n         \\<and>((j-(length M2)) < (length M)*(length M2)))\n         \\<and>(mat (row_length (v#M)) (length (v#M)) (v#M))\n         \\<and>(mat (row_length M2) (length M2) M2)\n         \\<longrightarrow> ((M \\<otimes> M2)!(j-(length M2))!i) \n              = f \n                (M!((j-(length M2)) div (length M2))!(i div (row_length M2))) \n                (M2!((j-(length M2)) mod length M2)!(i mod (row_length M2))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length M2 \\<le> j \\<longrightarrow>\n    (i < row_length M * row_length M2 \\<and>\n     j - length M2 < length M * length M2) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<longrightarrow>\n    (M \\<otimes> M2) ! (j - length M2) ! i =\n    M ! ((j - length M2) div length M2) ! (i div row_length M2) *\n    M2 ! ((j - length M2) mod length M2) ! (i mod row_length M2)", "using 4 calculation(3)"], ["proof (prove)\nusing this:\n  length M2 \\<le> j \\<longrightarrow>\n  (i < row_length M * row_length M2 \\<and>\n   j - length M2 < length M * length M2) \\<and>\n  mat (row_length M) (length M) M \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  (M \\<otimes> M2) ! (j - length M2) ! i =\n  M ! ((j - length M2) div length M2) ! (i div row_length M2) *\n  M2 ! ((j - length M2) mod length M2) ! (i mod row_length M2)\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<longrightarrow>\n  mat (row_length M) (length M) M\n\ngoal (1 subgoal):\n 1. length M2 \\<le> j \\<longrightarrow>\n    (i < row_length M * row_length M2 \\<and>\n     j - length M2 < length M * length M2) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<longrightarrow>\n    (M \\<otimes> M2) ! (j - length M2) ! i =\n    M ! ((j - length M2) div length M2) ! (i div row_length M2) *\n    M2 ! ((j - length M2) mod length M2) ! (i mod row_length M2)", "by metis"], ["proof (state)\nthis:\n  length M2 \\<le> j \\<longrightarrow>\n  (i < row_length M * row_length M2 \\<and>\n   j - length M2 < length M * length M2) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  (M \\<otimes> M2) ! (j - length M2) ! i =\n  M ! ((j - length M2) div length M2) ! (i div row_length M2) *\n  M2 ! ((j - length M2) mod length M2) ! (i mod row_length M2)\n\ngoal (1 subgoal):\n 1. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "have \"(((j-(length M2)) < (length M)*(length M2))) \n                        \\<longrightarrow> (j < ((length M)+1)*(length M2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j - length M2 < length M * length M2 \\<longrightarrow>\n    j < (length M + 1) * length M2", "by auto"], ["proof (state)\nthis:\n  j - length M2 < length M * length M2 \\<longrightarrow>\n  j < (length M + 1) * length M2\n\ngoal (1 subgoal):\n 1. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "then"], ["proof (chain)\npicking this:\n  j - length M2 < length M * length M2 \\<longrightarrow>\n  j < (length M + 1) * length M2", "have 6:\n        \"(((j-(length M2)) < (length M)*(length M2))) \n              \\<longrightarrow> \n               (j < ((length (v#M))*(length M2)))\""], ["proof (prove)\nusing this:\n  j - length M2 < length M * length M2 \\<longrightarrow>\n  j < (length M + 1) * length M2\n\ngoal (1 subgoal):\n 1. j - length M2 < length M * length M2 \\<longrightarrow>\n    j < length (v # M) * length M2", "by auto"], ["proof (state)\nthis:\n  j - length M2 < length M * length M2 \\<longrightarrow>\n  j < length (v # M) * length M2\n\ngoal (1 subgoal):\n 1. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "have 7: \n      \"(j \\<ge> (length M2)) \n        \\<longrightarrow> \n          ((j-(length M2)) div (length M2)) = ((j div (length M2)) - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length M2 \\<le> j \\<longrightarrow>\n    (j - length M2) div length M2 = j div length M2 - 1", "using  add_diff_cancel_left' div_add_self1 div_by_0 \n                 le_imp_diff_is_add add.commute zero_diff"], ["proof (prove)\nusing this:\n  ?a + ?b - ?a = ?b\n  ?b \\<noteq> (0::?'a) \\<Longrightarrow>\n  (?b + ?a) div ?b = ?a div ?b + (1::?'a)\n  ?a div (0::?'a) = (0::?'a)\n  ?i \\<le> ?j \\<Longrightarrow> (?j - ?i = ?k) = (?j = ?k + ?i)\n  ?a + ?b = ?b + ?a\n  (0::?'a) - ?a = (0::?'a)\n\ngoal (1 subgoal):\n 1. length M2 \\<le> j \\<longrightarrow>\n    (j - length M2) div length M2 = j div length M2 - 1", "by metis"], ["proof (state)\nthis:\n  length M2 \\<le> j \\<longrightarrow>\n  (j - length M2) div length M2 = j div length M2 - 1\n\ngoal (1 subgoal):\n 1. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "then"], ["proof (chain)\npicking this:\n  length M2 \\<le> j \\<longrightarrow>\n  (j - length M2) div length M2 = j div length M2 - 1", "have 8:\n      \"(j \\<ge> (length M2)) \n         \\<longrightarrow> \n          M!((j-(length M2)) div (length M2)) \n                      = M!((j div (length M2)) - 1)\""], ["proof (prove)\nusing this:\n  length M2 \\<le> j \\<longrightarrow>\n  (j - length M2) div length M2 = j div length M2 - 1\n\ngoal (1 subgoal):\n 1. length M2 \\<le> j \\<longrightarrow>\n    M ! ((j - length M2) div length M2) = M ! (j div length M2 - 1)", "by auto"], ["proof (state)\nthis:\n  length M2 \\<le> j \\<longrightarrow>\n  M ! ((j - length M2) div length M2) = M ! (j div length M2 - 1)\n\ngoal (1 subgoal):\n 1. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "have step2:\n   \"(j \\<ge> (length M2)) \n      \\<longrightarrow>\n       (((i<((row_length (v#M))*(row_length M2)))\n       \\<and>(j < (length (v#M))*(length M2)))\n       \\<and>(mat (row_length (v#M)) (length (v#M)) (v#M))\n       \\<and>(mat (row_length M2) (length M2) M2))\n      \\<longrightarrow>(((v#M) \\<otimes> M2)!j!i) = \n                          f \n                         ((v#M)!(j div (length M2))!(i div (row_length M2))) \n                         (M2!(j mod length M2)!(i mod (row_length M2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length M2 \\<le> j \\<longrightarrow>\n    (i < row_length (v # M) * row_length M2 \\<and>\n     j < length (v # M) * length M2) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<longrightarrow>\n    (v # M \\<otimes> M2) ! j ! i =\n    (v # M) ! (j div length M2) ! (i div row_length M2) *\n    M2 ! (j mod length M2) ! (i mod row_length M2)", "proof(cases M2)"], ["proof (state)\ngoal (2 subgoals):\n 1. M2 = [] \\<Longrightarrow>\n    length M2 \\<le> j \\<longrightarrow>\n    (i < row_length (v # M) * row_length M2 \\<and>\n     j < length (v # M) * length M2) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<longrightarrow>\n    (v # M \\<otimes> M2) ! j ! i =\n    (v # M) ! (j div length M2) ! (i div row_length M2) *\n    M2 ! (j mod length M2) ! (i mod row_length M2)\n 2. \\<And>a list.\n       M2 = a # list \\<Longrightarrow>\n       length M2 \\<le> j \\<longrightarrow>\n       (i < row_length (v # M) * row_length M2 \\<and>\n        j < length (v # M) * length M2) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (v # M \\<otimes> M2) ! j ! i =\n       (v # M) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "case Nil"], ["proof (state)\nthis:\n  M2 = []\n\ngoal (2 subgoals):\n 1. M2 = [] \\<Longrightarrow>\n    length M2 \\<le> j \\<longrightarrow>\n    (i < row_length (v # M) * row_length M2 \\<and>\n     j < length (v # M) * length M2) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<longrightarrow>\n    (v # M \\<otimes> M2) ! j ! i =\n    (v # M) ! (j div length M2) ! (i div row_length M2) *\n    M2 ! (j mod length M2) ! (i mod row_length M2)\n 2. \\<And>a list.\n       M2 = a # list \\<Longrightarrow>\n       length M2 \\<le> j \\<longrightarrow>\n       (i < row_length (v # M) * row_length M2 \\<and>\n        j < length (v # M) * length M2) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (v # M \\<otimes> M2) ! j ! i =\n       (v # M) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "have \"(0 = ((row_length (v#M))*(row_length M2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 = row_length (v # M) * row_length M2", "using row_length_def Nil mult_0_right"], ["proof (prove)\nusing this:\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n  M2 = []\n  ?m * 0 = 0\n\ngoal (1 subgoal):\n 1. 0 = row_length (v # M) * row_length M2", "by auto"], ["proof (state)\nthis:\n  0 = row_length (v # M) * row_length M2\n\ngoal (2 subgoals):\n 1. M2 = [] \\<Longrightarrow>\n    length M2 \\<le> j \\<longrightarrow>\n    (i < row_length (v # M) * row_length M2 \\<and>\n     j < length (v # M) * length M2) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<longrightarrow>\n    (v # M \\<otimes> M2) ! j ! i =\n    (v # M) ! (j div length M2) ! (i div row_length M2) *\n    M2 ! (j mod length M2) ! (i mod row_length M2)\n 2. \\<And>a list.\n       M2 = a # list \\<Longrightarrow>\n       length M2 \\<le> j \\<longrightarrow>\n       (i < row_length (v # M) * row_length M2 \\<and>\n        j < length (v # M) * length M2) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (v # M \\<otimes> M2) ! j ! i =\n       (v # M) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "then"], ["proof (chain)\npicking this:\n  0 = row_length (v # M) * row_length M2", "have \"(i < ((row_length (v#M))*(row_length M2))) \\<longrightarrow> False\""], ["proof (prove)\nusing this:\n  0 = row_length (v # M) * row_length M2\n\ngoal (1 subgoal):\n 1. i < row_length (v # M) * row_length M2 \\<longrightarrow> False", "by auto"], ["proof (state)\nthis:\n  i < row_length (v # M) * row_length M2 \\<longrightarrow> False\n\ngoal (2 subgoals):\n 1. M2 = [] \\<Longrightarrow>\n    length M2 \\<le> j \\<longrightarrow>\n    (i < row_length (v # M) * row_length M2 \\<and>\n     j < length (v # M) * length M2) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<longrightarrow>\n    (v # M \\<otimes> M2) ! j ! i =\n    (v # M) ! (j div length M2) ! (i div row_length M2) *\n    M2 ! (j mod length M2) ! (i mod row_length M2)\n 2. \\<And>a list.\n       M2 = a # list \\<Longrightarrow>\n       length M2 \\<le> j \\<longrightarrow>\n       (i < row_length (v # M) * row_length M2 \\<and>\n        j < length (v # M) * length M2) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (v # M \\<otimes> M2) ! j ! i =\n       (v # M) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "then"], ["proof (chain)\npicking this:\n  i < row_length (v # M) * row_length M2 \\<longrightarrow> False", "have \" (j \\<ge> (length M2)) \n                 \\<longrightarrow>(((i<((row_length (v#M))*(row_length M2)))\n                    \\<and>(j < (length (v#M))*(length M2)))\n                    \\<and>(mat (row_length (v#M)) (length (v#M)) (v#M))\n                    \\<and>(mat (row_length M2) (length M2) M2)) \n                            \\<longrightarrow> False\""], ["proof (prove)\nusing this:\n  i < row_length (v # M) * row_length M2 \\<longrightarrow> False\n\ngoal (1 subgoal):\n 1. length M2 \\<le> j \\<longrightarrow>\n    (i < row_length (v # M) * row_length M2 \\<and>\n     j < length (v # M) * length M2) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<longrightarrow>\n    False", "by auto"], ["proof (state)\nthis:\n  length M2 \\<le> j \\<longrightarrow>\n  (i < row_length (v # M) * row_length M2 \\<and>\n   j < length (v # M) * length M2) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  False\n\ngoal (2 subgoals):\n 1. M2 = [] \\<Longrightarrow>\n    length M2 \\<le> j \\<longrightarrow>\n    (i < row_length (v # M) * row_length M2 \\<and>\n     j < length (v # M) * length M2) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<longrightarrow>\n    (v # M \\<otimes> M2) ! j ! i =\n    (v # M) ! (j div length M2) ! (i div row_length M2) *\n    M2 ! (j mod length M2) ! (i mod row_length M2)\n 2. \\<And>a list.\n       M2 = a # list \\<Longrightarrow>\n       length M2 \\<le> j \\<longrightarrow>\n       (i < row_length (v # M) * row_length M2 \\<and>\n        j < length (v # M) * length M2) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (v # M \\<otimes> M2) ! j ! i =\n       (v # M) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "then"], ["proof (chain)\npicking this:\n  length M2 \\<le> j \\<longrightarrow>\n  (i < row_length (v # M) * row_length M2 \\<and>\n   j < length (v # M) * length M2) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  False", "show ?thesis"], ["proof (prove)\nusing this:\n  length M2 \\<le> j \\<longrightarrow>\n  (i < row_length (v # M) * row_length M2 \\<and>\n   j < length (v # M) * length M2) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. length M2 \\<le> j \\<longrightarrow>\n    (i < row_length (v # M) * row_length M2 \\<and>\n     j < length (v # M) * length M2) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<longrightarrow>\n    (v # M \\<otimes> M2) ! j ! i =\n    (v # M) ! (j div length M2) ! (i div row_length M2) *\n    M2 ! (j mod length M2) ! (i mod row_length M2)", "by auto"], ["proof (state)\nthis:\n  length M2 \\<le> j \\<longrightarrow>\n  (i < row_length (v # M) * row_length M2 \\<and>\n   j < length (v # M) * length M2) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  (v # M \\<otimes> M2) ! j ! i =\n  (v # M) ! (j div length M2) ! (i div row_length M2) *\n  M2 ! (j mod length M2) ! (i mod row_length M2)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M2 = a # list \\<Longrightarrow>\n       length M2 \\<le> j \\<longrightarrow>\n       (i < row_length (v # M) * row_length M2 \\<and>\n        j < length (v # M) * length M2) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (v # M \\<otimes> M2) ! j ! i =\n       (v # M) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M2 = a # list \\<Longrightarrow>\n       length M2 \\<le> j \\<longrightarrow>\n       (i < row_length (v # M) * row_length M2 \\<and>\n        j < length (v # M) * length M2) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (v # M \\<otimes> M2) ! j ! i =\n       (v # M) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "case (Cons w N)"], ["proof (state)\nthis:\n  M2 = w # N\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M2 = a # list \\<Longrightarrow>\n       length M2 \\<le> j \\<longrightarrow>\n       (i < row_length (v # M) * row_length M2 \\<and>\n        j < length (v # M) * length M2) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (v # M \\<otimes> M2) ! j ! i =\n       (v # M) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M2 = a # list \\<Longrightarrow>\n       length M2 \\<le> j \\<longrightarrow>\n       (i < row_length (v # M) * row_length M2 \\<and>\n        j < length (v # M) * length M2) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (v # M \\<otimes> M2) ! j ! i =\n       (v # M) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "have \"(k < (length M))\\<and> (k \\<ge> 1) \\<longrightarrow> M!(k - 1)  = (v#M)!k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k < length M \\<and> 1 \\<le> k \\<longrightarrow>\n    M ! (k - 1) = (v # M) ! k", "using   not_one_le_zero nth_Cons'"], ["proof (prove)\nusing this:\n  \\<not> (1::?'a) \\<le> (0::?'a)\n  (?x # ?xs) ! ?n = (if ?n = 0 then ?x else ?xs ! (?n - 1))\n\ngoal (1 subgoal):\n 1. k < length M \\<and> 1 \\<le> k \\<longrightarrow>\n    M ! (k - 1) = (v # M) ! k", "by auto"], ["proof (state)\nthis:\n  k < length M \\<and> 1 \\<le> k \\<longrightarrow> M ! (k - 1) = (v # M) ! k\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M2 = a # list \\<Longrightarrow>\n       length M2 \\<le> j \\<longrightarrow>\n       (i < row_length (v # M) * row_length M2 \\<and>\n        j < length (v # M) * length M2) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (v # M \\<otimes> M2) ! j ! i =\n       (v # M) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "have \"(j \\<ge> (length (w#N))) \\<longrightarrow> (j div (length (w#N))) \\<ge> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (w # N) \\<le> j \\<longrightarrow> 1 \\<le> j div length (w # N)", "using  div_le_mono div_self length_0_conv neq_Nil_conv"], ["proof (prove)\nusing this:\n  ?m \\<le> ?n \\<Longrightarrow> ?m div ?k \\<le> ?n div ?k\n  ?a \\<noteq> (0::?'a) \\<Longrightarrow> ?a div ?a = (1::?'a)\n  (length ?xs = 0) = (?xs = [])\n  (?xs \\<noteq> []) = (\\<exists>y ys. ?xs = y # ys)\n\ngoal (1 subgoal):\n 1. length (w # N) \\<le> j \\<longrightarrow> 1 \\<le> j div length (w # N)", "by metis"], ["proof (state)\nthis:\n  length (w # N) \\<le> j \\<longrightarrow> 1 \\<le> j div length (w # N)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M2 = a # list \\<Longrightarrow>\n       length M2 \\<le> j \\<longrightarrow>\n       (i < row_length (v # M) * row_length M2 \\<and>\n        j < length (v # M) * length M2) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (v # M \\<otimes> M2) ! j ! i =\n       (v # M) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "moreover"], ["proof (state)\nthis:\n  length (w # N) \\<le> j \\<longrightarrow> 1 \\<le> j div length (w # N)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M2 = a # list \\<Longrightarrow>\n       length M2 \\<le> j \\<longrightarrow>\n       (i < row_length (v # M) * row_length M2 \\<and>\n        j < length (v # M) * length M2) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (v # M \\<otimes> M2) ! j ! i =\n       (v # M) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "have \"(j \\<ge> (length (w#N))) \\<longrightarrow> (j div (length (w#N)))- 1  \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (w # N) \\<le> j \\<longrightarrow>\n    0 \\<le> j div length (w # N) - 1", "by auto"], ["proof (state)\nthis:\n  length (w # N) \\<le> j \\<longrightarrow> 0 \\<le> j div length (w # N) - 1\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M2 = a # list \\<Longrightarrow>\n       length M2 \\<le> j \\<longrightarrow>\n       (i < row_length (v # M) * row_length M2 \\<and>\n        j < length (v # M) * length M2) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (v # M \\<otimes> M2) ! j ! i =\n       (v # M) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "moreover"], ["proof (state)\nthis:\n  length (w # N) \\<le> j \\<longrightarrow> 0 \\<le> j div length (w # N) - 1\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M2 = a # list \\<Longrightarrow>\n       length M2 \\<le> j \\<longrightarrow>\n       (i < row_length (v # M) * row_length M2 \\<and>\n        j < length (v # M) * length M2) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (v # M \\<otimes> M2) ! j ! i =\n       (v # M) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "have \"(j \\<ge> (length (w#N))) \n                          \\<longrightarrow> M!((j div (length (w#N)))- 1 ) \n                                 = (v#M)!(j div (length (w#N)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (w # N) \\<le> j \\<longrightarrow>\n    M ! (j div length (w # N) - 1) = (v # M) ! (j div length (w # N))", "using calculation(1) not_one_le_zero nth_Cons'"], ["proof (prove)\nusing this:\n  length (w # N) \\<le> j \\<longrightarrow> 1 \\<le> j div length (w # N)\n  \\<not> (1::?'a) \\<le> (0::?'a)\n  (?x # ?xs) ! ?n = (if ?n = 0 then ?x else ?xs ! (?n - 1))\n\ngoal (1 subgoal):\n 1. length (w # N) \\<le> j \\<longrightarrow>\n    M ! (j div length (w # N) - 1) = (v # M) ! (j div length (w # N))", "by auto"], ["proof (state)\nthis:\n  length (w # N) \\<le> j \\<longrightarrow>\n  M ! (j div length (w # N) - 1) = (v # M) ! (j div length (w # N))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M2 = a # list \\<Longrightarrow>\n       length M2 \\<le> j \\<longrightarrow>\n       (i < row_length (v # M) * row_length M2 \\<and>\n        j < length (v # M) * length M2) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (v # M \\<otimes> M2) ! j ! i =\n       (v # M) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "from this 7"], ["proof (chain)\npicking this:\n  length (w # N) \\<le> j \\<longrightarrow>\n  M ! (j div length (w # N) - 1) = (v # M) ! (j div length (w # N))\n  length M2 \\<le> j \\<longrightarrow>\n  (j - length M2) div length M2 = j div length M2 - 1", "have 9:\" (j \\<ge> (length (w#N))) \n                         \\<longrightarrow>  M!((j-(length (w#N))) div (length (w#N))) \n                                   = (v#M)!(j div (length (w#N)))\""], ["proof (prove)\nusing this:\n  length (w # N) \\<le> j \\<longrightarrow>\n  M ! (j div length (w # N) - 1) = (v # M) ! (j div length (w # N))\n  length M2 \\<le> j \\<longrightarrow>\n  (j - length M2) div length M2 = j div length M2 - 1\n\ngoal (1 subgoal):\n 1. length (w # N) \\<le> j \\<longrightarrow>\n    M ! ((j - length (w # N)) div length (w # N)) =\n    (v # M) ! (j div length (w # N))", "using Cons"], ["proof (prove)\nusing this:\n  length (w # N) \\<le> j \\<longrightarrow>\n  M ! (j div length (w # N) - 1) = (v # M) ! (j div length (w # N))\n  length M2 \\<le> j \\<longrightarrow>\n  (j - length M2) div length M2 = j div length M2 - 1\n  M2 = w # N\n\ngoal (1 subgoal):\n 1. length (w # N) \\<le> j \\<longrightarrow>\n    M ! ((j - length (w # N)) div length (w # N)) =\n    (v # M) ! (j div length (w # N))", "by auto"], ["proof (state)\nthis:\n  length (w # N) \\<le> j \\<longrightarrow>\n  M ! ((j - length (w # N)) div length (w # N)) =\n  (v # M) ! (j div length (w # N))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M2 = a # list \\<Longrightarrow>\n       length M2 \\<le> j \\<longrightarrow>\n       (i < row_length (v # M) * row_length M2 \\<and>\n        j < length (v # M) * length M2) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (v # M \\<otimes> M2) ! j ! i =\n       (v # M) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "have 10: \"(j \\<ge> (length (w#N))) \n                     \\<longrightarrow>  ((j-(length (w#N))) mod (length (w#N))) \n                                   = (j mod(length (w#N)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (w # N) \\<le> j \\<longrightarrow>\n    (j - length (w # N)) mod length (w # N) = j mod length (w # N)", "using mod_if not_less"], ["proof (prove)\nusing this:\n  ?m mod ?n = (if ?m < ?n then ?m else (?m - ?n) mod ?n)\n  (\\<not> ?x < ?y) = (?y \\<le> ?x)\n\ngoal (1 subgoal):\n 1. length (w # N) \\<le> j \\<longrightarrow>\n    (j - length (w # N)) mod length (w # N) = j mod length (w # N)", "by auto"], ["proof (state)\nthis:\n  length (w # N) \\<le> j \\<longrightarrow>\n  (j - length (w # N)) mod length (w # N) = j mod length (w # N)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M2 = a # list \\<Longrightarrow>\n       length M2 \\<le> j \\<longrightarrow>\n       (i < row_length (v # M) * row_length M2 \\<and>\n        j < length (v # M) * length M2) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (v # M \\<otimes> M2) ! j ! i =\n       (v # M) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "with 5 9"], ["proof (chain)\npicking this:\n  length M2 \\<le> j \\<longrightarrow>\n  (i < row_length M * row_length M2 \\<and>\n   j - length M2 < length M * length M2) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  (M \\<otimes> M2) ! (j - length M2) ! i =\n  M ! ((j - length M2) div length M2) ! (i div row_length M2) *\n  M2 ! ((j - length M2) mod length M2) ! (i mod row_length M2)\n  length (w # N) \\<le> j \\<longrightarrow>\n  M ! ((j - length (w # N)) div length (w # N)) =\n  (v # M) ! (j div length (w # N))\n  length (w # N) \\<le> j \\<longrightarrow>\n  (j - length (w # N)) mod length (w # N) = j mod length (w # N)", "have \n     \"(j \\<ge> (length (w#N))) \\<longrightarrow>\n     ((i<((row_length M)*(row_length (w#N))))\n     \\<and>((j-(length (w#N))) < (length M)*(length (w#N)))\n     \\<and>(mat (row_length (v#M)) (length (v#M)) (v#M)) \n     \\<and>(mat (row_length (w#N)) (length (w#N)) (w#N)))\n     \\<longrightarrow> (((M \\<otimes> (w#N))!(j-(length (w#N)))!i) \n          = f \n              ((v#M)!(j div (length (w#N)))!(i div (row_length (w#N))))\n              ((w#N)!(j mod length (w#N))!(i mod (row_length (w#N)))))\""], ["proof (prove)\nusing this:\n  length M2 \\<le> j \\<longrightarrow>\n  (i < row_length M * row_length M2 \\<and>\n   j - length M2 < length M * length M2) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  (M \\<otimes> M2) ! (j - length M2) ! i =\n  M ! ((j - length M2) div length M2) ! (i div row_length M2) *\n  M2 ! ((j - length M2) mod length M2) ! (i mod row_length M2)\n  length (w # N) \\<le> j \\<longrightarrow>\n  M ! ((j - length (w # N)) div length (w # N)) =\n  (v # M) ! (j div length (w # N))\n  length (w # N) \\<le> j \\<longrightarrow>\n  (j - length (w # N)) mod length (w # N) = j mod length (w # N)\n\ngoal (1 subgoal):\n 1. length (w # N) \\<le> j \\<longrightarrow>\n    i < row_length M * row_length (w # N) \\<and>\n    j - length (w # N) < length M * length (w # N) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n    (M \\<otimes> w # N) ! (j - length (w # N)) ! i =\n    (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n    (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "using Cons"], ["proof (prove)\nusing this:\n  length M2 \\<le> j \\<longrightarrow>\n  (i < row_length M * row_length M2 \\<and>\n   j - length M2 < length M * length M2) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  (M \\<otimes> M2) ! (j - length M2) ! i =\n  M ! ((j - length M2) div length M2) ! (i div row_length M2) *\n  M2 ! ((j - length M2) mod length M2) ! (i mod row_length M2)\n  length (w # N) \\<le> j \\<longrightarrow>\n  M ! ((j - length (w # N)) div length (w # N)) =\n  (v # M) ! (j div length (w # N))\n  length (w # N) \\<le> j \\<longrightarrow>\n  (j - length (w # N)) mod length (w # N) = j mod length (w # N)\n  M2 = w # N\n\ngoal (1 subgoal):\n 1. length (w # N) \\<le> j \\<longrightarrow>\n    i < row_length M * row_length (w # N) \\<and>\n    j - length (w # N) < length M * length (w # N) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n    (M \\<otimes> w # N) ! (j - length (w # N)) ! i =\n    (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n    (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "by auto"], ["proof (state)\nthis:\n  length (w # N) \\<le> j \\<longrightarrow>\n  i < row_length M * row_length (w # N) \\<and>\n  j - length (w # N) < length M * length (w # N) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n  (M \\<otimes> w # N) ! (j - length (w # N)) ! i =\n  (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n  (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M2 = a # list \\<Longrightarrow>\n       length M2 \\<le> j \\<longrightarrow>\n       (i < row_length (v # M) * row_length M2 \\<and>\n        j < length (v # M) * length M2) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (v # M \\<otimes> M2) ! j ! i =\n       (v # M) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "then"], ["proof (chain)\npicking this:\n  length (w # N) \\<le> j \\<longrightarrow>\n  i < row_length M * row_length (w # N) \\<and>\n  j - length (w # N) < length M * length (w # N) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n  (M \\<otimes> w # N) ! (j - length (w # N)) ! i =\n  (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n  (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "have \n      \"(j \\<ge> (length (w#N))) \\<longrightarrow>\n                ((i<((row_length M)*(row_length (w#N))))\n                \\<and>(j <(length (v#M))*(length (w#N)))\n                \\<and>(mat (row_length (v#M)) (length (v#M)) (v#M)) \n                \\<and>(mat (row_length (w#N)) (length (w#N)) (w#N)))\n                \\<longrightarrow> (((M \\<otimes> (w#N))!(j-(length (w#N)))!i) \n                 = f \n                    ((v#M)!(j div (length (w#N)))!(i div (row_length (w#N))))\n                    ((w#N)!(j mod length (w#N))!(i mod (row_length (w#N)))))\""], ["proof (prove)\nusing this:\n  length (w # N) \\<le> j \\<longrightarrow>\n  i < row_length M * row_length (w # N) \\<and>\n  j - length (w # N) < length M * length (w # N) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n  (M \\<otimes> w # N) ! (j - length (w # N)) ! i =\n  (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n  (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))\n\ngoal (1 subgoal):\n 1. length (w # N) \\<le> j \\<longrightarrow>\n    i < row_length M * row_length (w # N) \\<and>\n    j < length (v # M) * length (w # N) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n    (M \\<otimes> w # N) ! (j - length (w # N)) ! i =\n    (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n    (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "using 6"], ["proof (prove)\nusing this:\n  length (w # N) \\<le> j \\<longrightarrow>\n  i < row_length M * row_length (w # N) \\<and>\n  j - length (w # N) < length M * length (w # N) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n  (M \\<otimes> w # N) ! (j - length (w # N)) ! i =\n  (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n  (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))\n  j - length M2 < length M * length M2 \\<longrightarrow>\n  j < length (v # M) * length M2\n\ngoal (1 subgoal):\n 1. length (w # N) \\<le> j \\<longrightarrow>\n    i < row_length M * row_length (w # N) \\<and>\n    j < length (v # M) * length (w # N) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n    (M \\<otimes> w # N) ! (j - length (w # N)) ! i =\n    (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n    (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "by auto"], ["proof (state)\nthis:\n  length (w # N) \\<le> j \\<longrightarrow>\n  i < row_length M * row_length (w # N) \\<and>\n  j < length (v # M) * length (w # N) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n  (M \\<otimes> w # N) ! (j - length (w # N)) ! i =\n  (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n  (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M2 = a # list \\<Longrightarrow>\n       length M2 \\<le> j \\<longrightarrow>\n       (i < row_length (v # M) * row_length M2 \\<and>\n        j < length (v # M) * length M2) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (v # M \\<otimes> M2) ! j ! i =\n       (v # M) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "then"], ["proof (chain)\npicking this:\n  length (w # N) \\<le> j \\<longrightarrow>\n  i < row_length M * row_length (w # N) \\<and>\n  j < length (v # M) * length (w # N) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n  (M \\<otimes> w # N) ! (j - length (w # N)) ! i =\n  (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n  (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "have 11: \n     \"(j \\<ge> (length (w#N))) \\<longrightarrow>\n            ((i<((row_length M)*(row_length (w#N))))\n            \\<and>(j <(length (v#M))*(length (w#N)))\n            \\<and>(mat (row_length (v#M)) (length (v#M)) (v#M))\n            \\<and>(mat (row_length (w#N)) (length (w#N)) (w#N)))\n            \\<longrightarrow> (((v#M) \\<otimes> (w#N))!j!i) = \n                    f \n                    ((v#M)!(j div (length (w#N)))!(i div (row_length (w#N))))\n                    ((w#N)!(j mod length (w#N))!(i mod (row_length (w#N))))\""], ["proof (prove)\nusing this:\n  length (w # N) \\<le> j \\<longrightarrow>\n  i < row_length M * row_length (w # N) \\<and>\n  j < length (v # M) * length (w # N) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n  (M \\<otimes> w # N) ! (j - length (w # N)) ! i =\n  (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n  (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))\n\ngoal (1 subgoal):\n 1. length (w # N) \\<le> j \\<longrightarrow>\n    i < row_length M * row_length (w # N) \\<and>\n    j < length (v # M) * length (w # N) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n    (v # M \\<otimes> w # N) ! j ! i =\n    (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n    (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "using 3 Cons"], ["proof (prove)\nusing this:\n  length (w # N) \\<le> j \\<longrightarrow>\n  i < row_length M * row_length (w # N) \\<and>\n  j < length (v # M) * length (w # N) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n  (M \\<otimes> w # N) ! (j - length (w # N)) ! i =\n  (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n  (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))\n  length M2 \\<le> j \\<longrightarrow>\n  (v # M \\<otimes> M2) ! j = (M \\<otimes> M2) ! (j - length M2)\n  M2 = w # N\n\ngoal (1 subgoal):\n 1. length (w # N) \\<le> j \\<longrightarrow>\n    i < row_length M * row_length (w # N) \\<and>\n    j < length (v # M) * length (w # N) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n    (v # M \\<otimes> w # N) ! j ! i =\n    (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n    (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "by auto"], ["proof (state)\nthis:\n  length (w # N) \\<le> j \\<longrightarrow>\n  i < row_length M * row_length (w # N) \\<and>\n  j < length (v # M) * length (w # N) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n  (v # M \\<otimes> w # N) ! j ! i =\n  (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n  (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M2 = a # list \\<Longrightarrow>\n       length M2 \\<le> j \\<longrightarrow>\n       (i < row_length (v # M) * row_length M2 \\<and>\n        j < length (v # M) * length M2) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (v # M \\<otimes> M2) ! j ! i =\n       (v # M) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "have \n      \"(j \\<ge> (length (w#N))) \\<longrightarrow>\n              ((i<((row_length (v#M))*(row_length (w#N))))\n              \\<and>(j <(length (v#M))*(length (w#N)))\n              \\<and>(mat (row_length (v#M)) (length (v#M)) (v#M))\n              \\<and>(mat (row_length (w#N)) (length (w#N)) (w#N)))\n                     \\<longrightarrow> (((v#M) \\<otimes> (w#N))!j!i) \n                = f \n                    ((v#M)!(j div (length (w#N)))!(i div (row_length (w#N))))\n                    ((w#N)!(j mod length (w#N))!(i mod (row_length (w#N))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (w # N) \\<le> j \\<longrightarrow>\n    i < row_length (v # M) * row_length (w # N) \\<and>\n    j < length (v # M) * length (w # N) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n    (v # M \\<otimes> w # N) ! j ! i =\n    (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n    (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "proof(cases M)"], ["proof (state)\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow>\n    length (w # N) \\<le> j \\<longrightarrow>\n    i < row_length (v # M) * row_length (w # N) \\<and>\n    j < length (v # M) * length (w # N) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n    (v # M \\<otimes> w # N) ! j ! i =\n    (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n    (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))\n 2. \\<And>a list.\n       M = a # list \\<Longrightarrow>\n       length (w # N) \\<le> j \\<longrightarrow>\n       i < row_length (v # M) * row_length (w # N) \\<and>\n       j < length (v # M) * length (w # N) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n       (v # M \\<otimes> w # N) ! j ! i =\n       (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n       (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "case Nil"], ["proof (state)\nthis:\n  M = []\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow>\n    length (w # N) \\<le> j \\<longrightarrow>\n    i < row_length (v # M) * row_length (w # N) \\<and>\n    j < length (v # M) * length (w # N) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n    (v # M \\<otimes> w # N) ! j ! i =\n    (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n    (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))\n 2. \\<And>a list.\n       M = a # list \\<Longrightarrow>\n       length (w # N) \\<le> j \\<longrightarrow>\n       i < row_length (v # M) * row_length (w # N) \\<and>\n       j < length (v # M) * length (w # N) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n       (v # M \\<otimes> w # N) ! j ! i =\n       (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n       (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "have Nil0:\"(length (v#[])) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length [v] = 1", "by auto"], ["proof (state)\nthis:\n  length [v] = 1\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow>\n    length (w # N) \\<le> j \\<longrightarrow>\n    i < row_length (v # M) * row_length (w # N) \\<and>\n    j < length (v # M) * length (w # N) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n    (v # M \\<otimes> w # N) ! j ! i =\n    (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n    (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))\n 2. \\<And>a list.\n       M = a # list \\<Longrightarrow>\n       length (w # N) \\<le> j \\<longrightarrow>\n       i < row_length (v # M) * row_length (w # N) \\<and>\n       j < length (v # M) * length (w # N) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n       (v # M \\<otimes> w # N) ! j ! i =\n       (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n       (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "then"], ["proof (chain)\npicking this:\n  length [v] = 1", "have Nil1:\n             \"(j <(length (v#[]))*(length (w#N))) = (j< (length (w#N)))\""], ["proof (prove)\nusing this:\n  length [v] = 1\n\ngoal (1 subgoal):\n 1. (j < length [v] * length (w # N)) = (j < length (w # N))", "by (metis Nil nat_mult_1)"], ["proof (state)\nthis:\n  (j < length [v] * length (w # N)) = (j < length (w # N))\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow>\n    length (w # N) \\<le> j \\<longrightarrow>\n    i < row_length (v # M) * row_length (w # N) \\<and>\n    j < length (v # M) * length (w # N) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n    (v # M \\<otimes> w # N) ! j ! i =\n    (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n    (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))\n 2. \\<And>a list.\n       M = a # list \\<Longrightarrow>\n       length (w # N) \\<le> j \\<longrightarrow>\n       i < row_length (v # M) * row_length (w # N) \\<and>\n       j < length (v # M) * length (w # N) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n       (v # M \\<otimes> w # N) ! j ! i =\n       (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n       (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "have \n              \"row_length (v#[]) = (length v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_length [v] = length v", "using row_length_def"], ["proof (prove)\nusing this:\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n\ngoal (1 subgoal):\n 1. row_length [v] = length v", "by auto"], ["proof (state)\nthis:\n  row_length [v] = length v\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow>\n    length (w # N) \\<le> j \\<longrightarrow>\n    i < row_length (v # M) * row_length (w # N) \\<and>\n    j < length (v # M) * length (w # N) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n    (v # M \\<otimes> w # N) ! j ! i =\n    (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n    (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))\n 2. \\<And>a list.\n       M = a # list \\<Longrightarrow>\n       length (w # N) \\<le> j \\<longrightarrow>\n       i < row_length (v # M) * row_length (w # N) \\<and>\n       j < length (v # M) * length (w # N) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n       (v # M \\<otimes> w # N) ! j ! i =\n       (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n       (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "then"], ["proof (chain)\npicking this:\n  row_length [v] = length v", "have Nil2:\n              \"(i<((row_length (v#M))*(row_length (w#N)))) \n                                 = (i<((length v)*(row_length (w#N))))\""], ["proof (prove)\nusing this:\n  row_length [v] = length v\n\ngoal (1 subgoal):\n 1. (i < row_length (v # M) * row_length (w # N)) =\n    (i < length v * row_length (w # N))", "using Nil"], ["proof (prove)\nusing this:\n  row_length [v] = length v\n  M = []\n\ngoal (1 subgoal):\n 1. (i < row_length (v # M) * row_length (w # N)) =\n    (i < length v * row_length (w # N))", "by auto"], ["proof (state)\nthis:\n  (i < row_length (v # M) * row_length (w # N)) =\n  (i < length v * row_length (w # N))\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow>\n    length (w # N) \\<le> j \\<longrightarrow>\n    i < row_length (v # M) * row_length (w # N) \\<and>\n    j < length (v # M) * length (w # N) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n    (v # M \\<otimes> w # N) ! j ! i =\n    (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n    (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))\n 2. \\<And>a list.\n       M = a # list \\<Longrightarrow>\n       length (w # N) \\<le> j \\<longrightarrow>\n       i < row_length (v # M) * row_length (w # N) \\<and>\n       j < length (v # M) * length (w # N) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n       (v # M \\<otimes> w # N) ! j ! i =\n       (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n       (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "then"], ["proof (chain)\npicking this:\n  (i < row_length (v # M) * row_length (w # N)) =\n  (i < length v * row_length (w # N))", "have \"(j< (length (w#N))) \\<longrightarrow> (j div (length (w#N))) = 0\""], ["proof (prove)\nusing this:\n  (i < row_length (v # M) * row_length (w # N)) =\n  (i < length v * row_length (w # N))\n\ngoal (1 subgoal):\n 1. j < length (w # N) \\<longrightarrow> j div length (w # N) = 0", "by auto"], ["proof (state)\nthis:\n  j < length (w # N) \\<longrightarrow> j div length (w # N) = 0\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow>\n    length (w # N) \\<le> j \\<longrightarrow>\n    i < row_length (v # M) * row_length (w # N) \\<and>\n    j < length (v # M) * length (w # N) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n    (v # M \\<otimes> w # N) ! j ! i =\n    (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n    (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))\n 2. \\<And>a list.\n       M = a # list \\<Longrightarrow>\n       length (w # N) \\<le> j \\<longrightarrow>\n       i < row_length (v # M) * row_length (w # N) \\<and>\n       j < length (v # M) * length (w # N) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n       (v # M \\<otimes> w # N) ! j ! i =\n       (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n       (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "from this"], ["proof (chain)\npicking this:\n  j < length (w # N) \\<longrightarrow> j div length (w # N) = 0", "have Nil3:\n                 \"(j< (length (w#N))) \\<longrightarrow> (v#M)!(j div (length (w#N))) = v\""], ["proof (prove)\nusing this:\n  j < length (w # N) \\<longrightarrow> j div length (w # N) = 0\n\ngoal (1 subgoal):\n 1. j < length (w # N) \\<longrightarrow>\n    (v # M) ! (j div length (w # N)) = v", "using Nil"], ["proof (prove)\nusing this:\n  j < length (w # N) \\<longrightarrow> j div length (w # N) = 0\n  M = []\n\ngoal (1 subgoal):\n 1. j < length (w # N) \\<longrightarrow>\n    (v # M) ! (j div length (w # N)) = v", "by auto"], ["proof (state)\nthis:\n  j < length (w # N) \\<longrightarrow> (v # M) ! (j div length (w # N)) = v\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow>\n    length (w # N) \\<le> j \\<longrightarrow>\n    i < row_length (v # M) * row_length (w # N) \\<and>\n    j < length (v # M) * length (w # N) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n    (v # M \\<otimes> w # N) ! j ! i =\n    (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n    (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))\n 2. \\<And>a list.\n       M = a # list \\<Longrightarrow>\n       length (w # N) \\<le> j \\<longrightarrow>\n       i < row_length (v # M) * row_length (w # N) \\<and>\n       j < length (v # M) * length (w # N) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n       (v # M \\<otimes> w # N) ! j ! i =\n       (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n       (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "then"], ["proof (chain)\npicking this:\n  j < length (w # N) \\<longrightarrow> (v # M) ! (j div length (w # N)) = v", "have Nil4:\n                 \"(j< (length (w#N))) \\<longrightarrow> (j mod (length (w#N))) = j\""], ["proof (prove)\nusing this:\n  j < length (w # N) \\<longrightarrow> (v # M) ! (j div length (w # N)) = v\n\ngoal (1 subgoal):\n 1. j < length (w # N) \\<longrightarrow> j mod length (w # N) = j", "by auto"], ["proof (state)\nthis:\n  j < length (w # N) \\<longrightarrow> j mod length (w # N) = j\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow>\n    length (w # N) \\<le> j \\<longrightarrow>\n    i < row_length (v # M) * row_length (w # N) \\<and>\n    j < length (v # M) * length (w # N) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n    (v # M \\<otimes> w # N) ! j ! i =\n    (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n    (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))\n 2. \\<And>a list.\n       M = a # list \\<Longrightarrow>\n       length (w # N) \\<le> j \\<longrightarrow>\n       i < row_length (v # M) * row_length (w # N) \\<and>\n       j < length (v # M) * length (w # N) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n       (v # M \\<otimes> w # N) ! j ! i =\n       (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n       (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "then"], ["proof (chain)\npicking this:\n  j < length (w # N) \\<longrightarrow> j mod length (w # N) = j", "have Nil5:\"(v#M) \\<otimes> (w#N) = vec_mat_Tensor v (w#N)\""], ["proof (prove)\nusing this:\n  j < length (w # N) \\<longrightarrow> j mod length (w # N) = j\n\ngoal (1 subgoal):\n 1. v # M \\<otimes> w # N = vec_mat_Tensor v (w # N)", "using Nil Tensor.simps(2) Tensor.simps(1)"], ["proof (prove)\nusing this:\n  j < length (w # N) \\<longrightarrow> j mod length (w # N) = j\n  M = []\n  ?x # ?xs \\<otimes> ?ys = vec_mat_Tensor ?x ?ys @ (?xs \\<otimes> ?ys)\n  [] \\<otimes> ?xs = []\n\ngoal (1 subgoal):\n 1. v # M \\<otimes> w # N = vec_mat_Tensor v (w # N)", "by auto"], ["proof (state)\nthis:\n  v # M \\<otimes> w # N = vec_mat_Tensor v (w # N)\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow>\n    length (w # N) \\<le> j \\<longrightarrow>\n    i < row_length (v # M) * row_length (w # N) \\<and>\n    j < length (v # M) * length (w # N) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n    (v # M \\<otimes> w # N) ! j ! i =\n    (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n    (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))\n 2. \\<And>a list.\n       M = a # list \\<Longrightarrow>\n       length (w # N) \\<le> j \\<longrightarrow>\n       i < row_length (v # M) * row_length (w # N) \\<and>\n       j < length (v # M) * length (w # N) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n       (v # M \\<otimes> w # N) ! j ! i =\n       (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n       (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "from vec_mat_Tensor_elements"], ["proof (chain)\npicking this:\n  \\<forall>i j.\n     (i < length ?v * row_length ?M \\<and> j < length ?M) \\<and>\n     mat (row_length ?M) (length ?M) ?M \\<longrightarrow>\n     vec_mat_Tensor ?v ?M ! j ! i =\n     ?v ! (i div row_length ?M) * ?M ! j ! (i mod row_length ?M)", "have \n                      \"(((i<((length v)*(row_length (w#N))))\n                       \\<and>(j < (length (w#N))))\n                       \\<and>(mat (row_length (w#N)) (length (w#N)) (w#N))\n                          \\<longrightarrow> ((vec_mat_Tensor v (w#N))!j!i) \n                                    = f \n                                       (v!(i div (row_length (w#N)))) \n                                       ((w#N)!j!(i mod (row_length (w#N)))))\""], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     (i < length ?v * row_length ?M \\<and> j < length ?M) \\<and>\n     mat (row_length ?M) (length ?M) ?M \\<longrightarrow>\n     vec_mat_Tensor ?v ?M ! j ! i =\n     ?v ! (i div row_length ?M) * ?M ! j ! (i mod row_length ?M)\n\ngoal (1 subgoal):\n 1. (i < length v * row_length (w # N) \\<and> j < length (w # N)) \\<and>\n    mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n    vec_mat_Tensor v (w # N) ! j ! i =\n    v ! (i div row_length (w # N)) *\n    (w # N) ! j ! (i mod row_length (w # N))", "by metis"], ["proof (state)\nthis:\n  (i < length v * row_length (w # N) \\<and> j < length (w # N)) \\<and>\n  mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n  vec_mat_Tensor v (w # N) ! j ! i =\n  v ! (i div row_length (w # N)) * (w # N) ! j ! (i mod row_length (w # N))\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow>\n    length (w # N) \\<le> j \\<longrightarrow>\n    i < row_length (v # M) * row_length (w # N) \\<and>\n    j < length (v # M) * length (w # N) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n    (v # M \\<otimes> w # N) ! j ! i =\n    (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n    (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))\n 2. \\<And>a list.\n       M = a # list \\<Longrightarrow>\n       length (w # N) \\<le> j \\<longrightarrow>\n       i < row_length (v # M) * row_length (w # N) \\<and>\n       j < length (v # M) * length (w # N) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n       (v # M \\<otimes> w # N) ! j ! i =\n       (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n       (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "then"], ["proof (chain)\npicking this:\n  (i < length v * row_length (w # N) \\<and> j < length (w # N)) \\<and>\n  mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n  vec_mat_Tensor v (w # N) ! j ! i =\n  v ! (i div row_length (w # N)) * (w # N) ! j ! (i mod row_length (w # N))", "have \n            \"((i<((row_length (v#M))*(row_length (w#N))))\n             \\<and>(j < ((length (v#M))*(length (w#N))))\n             \\<and>(mat (row_length (w#N)) (length (w#N)) (w#N))\n         \\<longrightarrow> ((vec_mat_Tensor v (w#N))!j!i) \n                    = f (v!(i div (row_length (w#N)))) \n                        ((w#N)!j!(i mod (row_length (w#N)))))\""], ["proof (prove)\nusing this:\n  (i < length v * row_length (w # N) \\<and> j < length (w # N)) \\<and>\n  mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n  vec_mat_Tensor v (w # N) ! j ! i =\n  v ! (i div row_length (w # N)) * (w # N) ! j ! (i mod row_length (w # N))\n\ngoal (1 subgoal):\n 1. i < row_length (v # M) * row_length (w # N) \\<and>\n    j < length (v # M) * length (w # N) \\<and>\n    mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n    vec_mat_Tensor v (w # N) ! j ! i =\n    v ! (i div row_length (w # N)) *\n    (w # N) ! j ! (i mod row_length (w # N))", "using Nil1 Nil2 Nil"], ["proof (prove)\nusing this:\n  (i < length v * row_length (w # N) \\<and> j < length (w # N)) \\<and>\n  mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n  vec_mat_Tensor v (w # N) ! j ! i =\n  v ! (i div row_length (w # N)) * (w # N) ! j ! (i mod row_length (w # N))\n  (j < length [v] * length (w # N)) = (j < length (w # N))\n  (i < row_length (v # M) * row_length (w # N)) =\n  (i < length v * row_length (w # N))\n  M = []\n\ngoal (1 subgoal):\n 1. i < row_length (v # M) * row_length (w # N) \\<and>\n    j < length (v # M) * length (w # N) \\<and>\n    mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n    vec_mat_Tensor v (w # N) ! j ! i =\n    v ! (i div row_length (w # N)) *\n    (w # N) ! j ! (i mod row_length (w # N))", "by auto"], ["proof (state)\nthis:\n  i < row_length (v # M) * row_length (w # N) \\<and>\n  j < length (v # M) * length (w # N) \\<and>\n  mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n  vec_mat_Tensor v (w # N) ! j ! i =\n  v ! (i div row_length (w # N)) * (w # N) ! j ! (i mod row_length (w # N))\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow>\n    length (w # N) \\<le> j \\<longrightarrow>\n    i < row_length (v # M) * row_length (w # N) \\<and>\n    j < length (v # M) * length (w # N) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n    (v # M \\<otimes> w # N) ! j ! i =\n    (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n    (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))\n 2. \\<And>a list.\n       M = a # list \\<Longrightarrow>\n       length (w # N) \\<le> j \\<longrightarrow>\n       i < row_length (v # M) * row_length (w # N) \\<and>\n       j < length (v # M) * length (w # N) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n       (v # M \\<otimes> w # N) ! j ! i =\n       (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n       (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "then"], ["proof (chain)\npicking this:\n  i < row_length (v # M) * row_length (w # N) \\<and>\n  j < length (v # M) * length (w # N) \\<and>\n  mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n  vec_mat_Tensor v (w # N) ! j ! i =\n  v ! (i div row_length (w # N)) * (w # N) ! j ! (i mod row_length (w # N))", "have  \n            \"((i<((row_length (v#M))*(row_length (w#N))))\n             \\<and>(j < ((length (v#M))*(length (w#N))))\n             \\<and>(mat (row_length (w#N)) (length (w#N)) (w#N))\n          \\<longrightarrow> (((v#M)\\<otimes>(w#N))!j!i) \n                     = f \n                        ((v#M)!(j div (length (w#N)))!(i div (row_length (w#N)))) \n                        ((w#N)!(j mod (length (w#N)))!(i mod (row_length (w#N)))))\""], ["proof (prove)\nusing this:\n  i < row_length (v # M) * row_length (w # N) \\<and>\n  j < length (v # M) * length (w # N) \\<and>\n  mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n  vec_mat_Tensor v (w # N) ! j ! i =\n  v ! (i div row_length (w # N)) * (w # N) ! j ! (i mod row_length (w # N))\n\ngoal (1 subgoal):\n 1. i < row_length (v # M) * row_length (w # N) \\<and>\n    j < length (v # M) * length (w # N) \\<and>\n    mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n    (v # M \\<otimes> w # N) ! j ! i =\n    (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n    (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "using Nil3 Nil4  Nil5 Nil"], ["proof (prove)\nusing this:\n  i < row_length (v # M) * row_length (w # N) \\<and>\n  j < length (v # M) * length (w # N) \\<and>\n  mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n  vec_mat_Tensor v (w # N) ! j ! i =\n  v ! (i div row_length (w # N)) * (w # N) ! j ! (i mod row_length (w # N))\n  j < length (w # N) \\<longrightarrow> (v # M) ! (j div length (w # N)) = v\n  j < length (w # N) \\<longrightarrow> j mod length (w # N) = j\n  v # M \\<otimes> w # N = vec_mat_Tensor v (w # N)\n  M = []\n\ngoal (1 subgoal):\n 1. i < row_length (v # M) * row_length (w # N) \\<and>\n    j < length (v # M) * length (w # N) \\<and>\n    mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n    (v # M \\<otimes> w # N) ! j ! i =\n    (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n    (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "by auto"], ["proof (state)\nthis:\n  i < row_length (v # M) * row_length (w # N) \\<and>\n  j < length (v # M) * length (w # N) \\<and>\n  mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n  (v # M \\<otimes> w # N) ! j ! i =\n  (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n  (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow>\n    length (w # N) \\<le> j \\<longrightarrow>\n    i < row_length (v # M) * row_length (w # N) \\<and>\n    j < length (v # M) * length (w # N) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n    (v # M \\<otimes> w # N) ! j ! i =\n    (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n    (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))\n 2. \\<And>a list.\n       M = a # list \\<Longrightarrow>\n       length (w # N) \\<le> j \\<longrightarrow>\n       i < row_length (v # M) * row_length (w # N) \\<and>\n       j < length (v # M) * length (w # N) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n       (v # M \\<otimes> w # N) ! j ! i =\n       (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n       (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "then"], ["proof (chain)\npicking this:\n  i < row_length (v # M) * row_length (w # N) \\<and>\n  j < length (v # M) * length (w # N) \\<and>\n  mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n  (v # M \\<otimes> w # N) ! j ! i =\n  (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n  (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "have \n             \"((i<((row_length (v#M))*(row_length (w#N))))\n             \\<and>(j < ((length (v#M))*(length (w#N))))\n             \\<and>(mat (row_length (v#M)) (length (v#M)) (v#M))\n             \\<and>(mat (row_length (w#N)) (length (w#N)) (w#N))\n                  \\<longrightarrow> (((v#M)\\<otimes>(w#N))!j!i) \n                       = f \n                         ((v#M)!(j div (length (w#N)))!(i div (row_length (w#N)))) \n                         ((w#N)!(j mod (length (w#N)))!(i mod (row_length (w#N)))))\""], ["proof (prove)\nusing this:\n  i < row_length (v # M) * row_length (w # N) \\<and>\n  j < length (v # M) * length (w # N) \\<and>\n  mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n  (v # M \\<otimes> w # N) ! j ! i =\n  (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n  (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))\n\ngoal (1 subgoal):\n 1. i < row_length (v # M) * row_length (w # N) \\<and>\n    j < length (v # M) * length (w # N) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n    (v # M \\<otimes> w # N) ! j ! i =\n    (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n    (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "by auto"], ["proof (state)\nthis:\n  i < row_length (v # M) * row_length (w # N) \\<and>\n  j < length (v # M) * length (w # N) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n  (v # M \\<otimes> w # N) ! j ! i =\n  (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n  (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))\n\ngoal (2 subgoals):\n 1. M = [] \\<Longrightarrow>\n    length (w # N) \\<le> j \\<longrightarrow>\n    i < row_length (v # M) * row_length (w # N) \\<and>\n    j < length (v # M) * length (w # N) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n    (v # M \\<otimes> w # N) ! j ! i =\n    (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n    (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))\n 2. \\<And>a list.\n       M = a # list \\<Longrightarrow>\n       length (w # N) \\<le> j \\<longrightarrow>\n       i < row_length (v # M) * row_length (w # N) \\<and>\n       j < length (v # M) * length (w # N) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n       (v # M \\<otimes> w # N) ! j ! i =\n       (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n       (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "from this"], ["proof (chain)\npicking this:\n  i < row_length (v # M) * row_length (w # N) \\<and>\n  j < length (v # M) * length (w # N) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n  (v # M \\<otimes> w # N) ! j ! i =\n  (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n  (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "show ?thesis"], ["proof (prove)\nusing this:\n  i < row_length (v # M) * row_length (w # N) \\<and>\n  j < length (v # M) * length (w # N) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n  (v # M \\<otimes> w # N) ! j ! i =\n  (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n  (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))\n\ngoal (1 subgoal):\n 1. length (w # N) \\<le> j \\<longrightarrow>\n    i < row_length (v # M) * row_length (w # N) \\<and>\n    j < length (v # M) * length (w # N) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n    (v # M \\<otimes> w # N) ! j ! i =\n    (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n    (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "by auto"], ["proof (state)\nthis:\n  length (w # N) \\<le> j \\<longrightarrow>\n  i < row_length (v # M) * row_length (w # N) \\<and>\n  j < length (v # M) * length (w # N) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n  (v # M \\<otimes> w # N) ! j ! i =\n  (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n  (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow>\n       length (w # N) \\<le> j \\<longrightarrow>\n       i < row_length (v # M) * row_length (w # N) \\<and>\n       j < length (v # M) * length (w # N) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n       (v # M \\<otimes> w # N) ! j ! i =\n       (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n       (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow>\n       length (w # N) \\<le> j \\<longrightarrow>\n       i < row_length (v # M) * row_length (w # N) \\<and>\n       j < length (v # M) * length (w # N) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n       (v # M \\<otimes> w # N) ! j ! i =\n       (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n       (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "case (Cons u P)"], ["proof (state)\nthis:\n  M = u # P\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow>\n       length (w # N) \\<le> j \\<longrightarrow>\n       i < row_length (v # M) * row_length (w # N) \\<and>\n       j < length (v # M) * length (w # N) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n       (v # M \\<otimes> w # N) ! j ! i =\n       (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n       (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "have \"(mat (row_length (v#M)) (length (v#M)) (v#M)) \\<longrightarrow> (row_length (v#M)) = (row_length M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length (v # M)) (length (v # M)) (v # M) \\<longrightarrow>\n    row_length (v # M) = row_length M", "using Cons row_length_eq"], ["proof (prove)\nusing this:\n  M = u # P\n  mat (row_length (?a # ?b # ?N)) (length (?a # ?b # ?N))\n   (?a # ?b # ?N) \\<longrightarrow>\n  row_length (?a # ?b # ?N) = row_length (?b # ?N)\n\ngoal (1 subgoal):\n 1. mat (row_length (v # M)) (length (v # M)) (v # M) \\<longrightarrow>\n    row_length (v # M) = row_length M", "by metis"], ["proof (state)\nthis:\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<longrightarrow>\n  row_length (v # M) = row_length M\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M = a # list \\<Longrightarrow>\n       length (w # N) \\<le> j \\<longrightarrow>\n       i < row_length (v # M) * row_length (w # N) \\<and>\n       j < length (v # M) * length (w # N) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n       (v # M \\<otimes> w # N) ! j ! i =\n       (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n       (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "from this 11"], ["proof (chain)\npicking this:\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<longrightarrow>\n  row_length (v # M) = row_length M\n  length (w # N) \\<le> j \\<longrightarrow>\n  i < row_length M * row_length (w # N) \\<and>\n  j < length (v # M) * length (w # N) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n  (v # M \\<otimes> w # N) ! j ! i =\n  (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n  (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "show ?thesis"], ["proof (prove)\nusing this:\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<longrightarrow>\n  row_length (v # M) = row_length M\n  length (w # N) \\<le> j \\<longrightarrow>\n  i < row_length M * row_length (w # N) \\<and>\n  j < length (v # M) * length (w # N) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n  (v # M \\<otimes> w # N) ! j ! i =\n  (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n  (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))\n\ngoal (1 subgoal):\n 1. length (w # N) \\<le> j \\<longrightarrow>\n    i < row_length (v # M) * row_length (w # N) \\<and>\n    j < length (v # M) * length (w # N) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n    (v # M \\<otimes> w # N) ! j ! i =\n    (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n    (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "by auto"], ["proof (state)\nthis:\n  length (w # N) \\<le> j \\<longrightarrow>\n  i < row_length (v # M) * row_length (w # N) \\<and>\n  j < length (v # M) * length (w # N) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n  (v # M \\<otimes> w # N) ! j ! i =\n  (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n  (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length (w # N) \\<le> j \\<longrightarrow>\n  i < row_length (v # M) * row_length (w # N) \\<and>\n  j < length (v # M) * length (w # N) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n  (v # M \\<otimes> w # N) ! j ! i =\n  (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n  (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       M2 = a # list \\<Longrightarrow>\n       length M2 \\<le> j \\<longrightarrow>\n       (i < row_length (v # M) * row_length M2 \\<and>\n        j < length (v # M) * length M2) \\<and>\n       mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (v # M \\<otimes> M2) ! j ! i =\n       (v # M) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "from this"], ["proof (chain)\npicking this:\n  length (w # N) \\<le> j \\<longrightarrow>\n  i < row_length (v # M) * row_length (w # N) \\<and>\n  j < length (v # M) * length (w # N) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n  (v # M \\<otimes> w # N) ! j ! i =\n  (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n  (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))", "show ?thesis"], ["proof (prove)\nusing this:\n  length (w # N) \\<le> j \\<longrightarrow>\n  i < row_length (v # M) * row_length (w # N) \\<and>\n  j < length (v # M) * length (w # N) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n  (v # M \\<otimes> w # N) ! j ! i =\n  (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n  (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))\n\ngoal (1 subgoal):\n 1. length M2 \\<le> j \\<longrightarrow>\n    (i < row_length (v # M) * row_length M2 \\<and>\n     j < length (v # M) * length M2) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<longrightarrow>\n    (v # M \\<otimes> M2) ! j ! i =\n    (v # M) ! (j div length M2) ! (i div row_length M2) *\n    M2 ! (j mod length M2) ! (i mod row_length M2)", "using Cons"], ["proof (prove)\nusing this:\n  length (w # N) \\<le> j \\<longrightarrow>\n  i < row_length (v # M) * row_length (w # N) \\<and>\n  j < length (v # M) * length (w # N) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length (w # N)) (length (w # N)) (w # N) \\<longrightarrow>\n  (v # M \\<otimes> w # N) ! j ! i =\n  (v # M) ! (j div length (w # N)) ! (i div row_length (w # N)) *\n  (w # N) ! (j mod length (w # N)) ! (i mod row_length (w # N))\n  M2 = w # N\n\ngoal (1 subgoal):\n 1. length M2 \\<le> j \\<longrightarrow>\n    (i < row_length (v # M) * row_length M2 \\<and>\n     j < length (v # M) * length M2) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<longrightarrow>\n    (v # M \\<otimes> M2) ! j ! i =\n    (v # M) ! (j div length M2) ! (i div row_length M2) *\n    M2 ! (j mod length M2) ! (i mod row_length M2)", "by auto"], ["proof (state)\nthis:\n  length M2 \\<le> j \\<longrightarrow>\n  (i < row_length (v # M) * row_length M2 \\<and>\n   j < length (v # M) * length M2) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  (v # M \\<otimes> M2) ! j ! i =\n  (v # M) ! (j div length M2) ! (i div row_length M2) *\n  M2 ! (j mod length M2) ! (i mod row_length M2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length M2 \\<le> j \\<longrightarrow>\n  (i < row_length (v # M) * row_length M2 \\<and>\n   j < length (v # M) * length M2) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  (v # M \\<otimes> M2) ! j ! i =\n  (v # M) ! (j div length M2) ! (i div row_length M2) *\n  M2 ! (j mod length M2) ! (i mod row_length M2)\n\ngoal (1 subgoal):\n 1. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "have \"(j<(length M2)) \\<or> (j \\<ge> (length M2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < length M2 \\<or> length M2 \\<le> j", "by auto"], ["proof (state)\nthis:\n  j < length M2 \\<or> length M2 \\<le> j\n\ngoal (1 subgoal):\n 1. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "from this step1 step2 logic"], ["proof (chain)\npicking this:\n  j < length M2 \\<or> length M2 \\<le> j\n  j < length M2 \\<longrightarrow>\n  (i < row_length (v # M) * row_length M2 \\<and>\n   j < length (v # M) * length M2) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  (v # M \\<otimes> M2) ! j ! i =\n  (v # M) ! (j div length M2) ! (i div row_length M2) *\n  M2 ! (j mod length M2) ! (i mod row_length M2)\n  length M2 \\<le> j \\<longrightarrow>\n  (i < row_length (v # M) * row_length M2 \\<and>\n   j < length (v # M) * length M2) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  (v # M \\<otimes> M2) ! j ! i =\n  (v # M) ! (j div length M2) ! (i div row_length M2) *\n  M2 ! (j mod length M2) ! (i mod row_length M2)\n  \\<lbrakk>?A \\<longrightarrow> ?B; \\<not> ?A \\<longrightarrow> ?B\\<rbrakk>\n  \\<Longrightarrow> ?B", "have  \n     \"(((i<((row_length (v#M))*(row_length M2)))\n      \\<and>(j < (length M2) * (length (v#M))))\n      \\<and>(mat (row_length (v#M)) (length (v#M)) (v#M))\n      \\<and>(mat (row_length M2) (length M2) M2)        \n      \\<longrightarrow> ( ((v#M) \\<otimes> M2)!j!i) \n                 = f \n                     ((v#M)!(j div (length M2))!(i div (row_length M2))) \n                     (M2!(j mod (length M2))!(i mod (row_length M2))))\""], ["proof (prove)\nusing this:\n  j < length M2 \\<or> length M2 \\<le> j\n  j < length M2 \\<longrightarrow>\n  (i < row_length (v # M) * row_length M2 \\<and>\n   j < length (v # M) * length M2) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  (v # M \\<otimes> M2) ! j ! i =\n  (v # M) ! (j div length M2) ! (i div row_length M2) *\n  M2 ! (j mod length M2) ! (i mod row_length M2)\n  length M2 \\<le> j \\<longrightarrow>\n  (i < row_length (v # M) * row_length M2 \\<and>\n   j < length (v # M) * length M2) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  (v # M \\<otimes> M2) ! j ! i =\n  (v # M) ! (j div length M2) ! (i div row_length M2) *\n  M2 ! (j mod length M2) ! (i mod row_length M2)\n  \\<lbrakk>?A \\<longrightarrow> ?B; \\<not> ?A \\<longrightarrow> ?B\\<rbrakk>\n  \\<Longrightarrow> ?B\n\ngoal (1 subgoal):\n 1. (i < row_length (v # M) * row_length M2 \\<and>\n     j < length M2 * length (v # M)) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<longrightarrow>\n    (v # M \\<otimes> M2) ! j ! i =\n    (v # M) ! (j div length M2) ! (i div row_length M2) *\n    M2 ! (j mod length M2) ! (i mod row_length M2)", "using  mult.commute"], ["proof (prove)\nusing this:\n  j < length M2 \\<or> length M2 \\<le> j\n  j < length M2 \\<longrightarrow>\n  (i < row_length (v # M) * row_length M2 \\<and>\n   j < length (v # M) * length M2) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  (v # M \\<otimes> M2) ! j ! i =\n  (v # M) ! (j div length M2) ! (i div row_length M2) *\n  M2 ! (j mod length M2) ! (i mod row_length M2)\n  length M2 \\<le> j \\<longrightarrow>\n  (i < row_length (v # M) * row_length M2 \\<and>\n   j < length (v # M) * length M2) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  (v # M \\<otimes> M2) ! j ! i =\n  (v # M) ! (j div length M2) ! (i div row_length M2) *\n  M2 ! (j mod length M2) ! (i mod row_length M2)\n  \\<lbrakk>?A \\<longrightarrow> ?B; \\<not> ?A \\<longrightarrow> ?B\\<rbrakk>\n  \\<Longrightarrow> ?B\n  ?a * ?b = ?b * ?a\n\ngoal (1 subgoal):\n 1. (i < row_length (v # M) * row_length M2 \\<and>\n     j < length M2 * length (v # M)) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<longrightarrow>\n    (v # M \\<otimes> M2) ! j ! i =\n    (v # M) ! (j div length M2) ! (i div row_length M2) *\n    M2 ! (j mod length M2) ! (i mod row_length M2)", "by metis"], ["proof (state)\nthis:\n  (i < row_length (v # M) * row_length M2 \\<and>\n   j < length M2 * length (v # M)) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  (v # M \\<otimes> M2) ! j ! i =\n  (v # M) ! (j div length M2) ! (i div row_length M2) *\n  M2 ! (j mod length M2) ! (i mod row_length M2)\n\ngoal (1 subgoal):\n 1. \\<And>a M1 i j.\n       (\\<And>i j.\n           (i < row_length M1 * row_length M2 \\<and>\n            j < length M1 * length M2) \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           (M1 \\<otimes> M2) ! j ! i =\n           M1 ! (j div length M2) ! (i div row_length M2) *\n           M2 ! (j mod length M2) ! (i mod row_length M2)) \\<Longrightarrow>\n       (i < row_length (a # M1) * row_length M2 \\<and>\n        j < length (a # M1) * length M2) \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       (a # M1 \\<otimes> M2) ! j ! i =\n       (a # M1) ! (j div length M2) ! (i div row_length M2) *\n       M2 ! (j mod length M2) ! (i mod row_length M2)", "from this"], ["proof (chain)\npicking this:\n  (i < row_length (v # M) * row_length M2 \\<and>\n   j < length M2 * length (v # M)) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  (v # M \\<otimes> M2) ! j ! i =\n  (v # M) ! (j div length M2) ! (i div row_length M2) *\n  M2 ! (j mod length M2) ! (i mod row_length M2)", "show ?case"], ["proof (prove)\nusing this:\n  (i < row_length (v # M) * row_length M2 \\<and>\n   j < length M2 * length (v # M)) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  (v # M \\<otimes> M2) ! j ! i =\n  (v # M) ! (j div length M2) ! (i div row_length M2) *\n  M2 ! (j mod length M2) ! (i mod row_length M2)\n\ngoal (1 subgoal):\n 1. (i < row_length (v # M) * row_length M2 \\<and>\n     j < length (v # M) * length M2) \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<longrightarrow>\n    (v # M \\<otimes> M2) ! j ! i =\n    (v # M) ! (j div length M2) ! (i div row_length M2) *\n    M2 ! (j mod length M2) ! (i mod row_length M2)", "by (metis mult.commute)"], ["proof (state)\nthis:\n  (i < row_length (v # M) * row_length M2 \\<and>\n   j < length (v # M) * length M2) \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  (v # M \\<otimes> M2) ! j ! i =\n  (v # M) ! (j div length M2) ! (i div row_length M2) *\n  M2 ! (j mod length M2) ! (i mod row_length M2)\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>we restate the theorem in two different forms for convenience \nof reuse\\<close>"], ["", "theorem effective_matrix_tensor_elements:\n  \" (((i<((row_length M1)*(row_length M2))) \n  \\<and>(j < (length M1)*(length M2)))\n  \\<and>(mat (row_length M1) (length M1) M1)\n  \\<and>(mat (row_length M2) (length M2) M2)\n \\<Longrightarrow> ((M1 \\<otimes> M2)!j!i) \n   = f (M1!(j div (length M2))!(i div (row_length M2))) \n       (M2!(j mod length M2)!(i mod (row_length M2))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < row_length M1 * row_length M2 \\<and>\n     j < length M1 * length M2) \\<and>\n    mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    (M1 \\<otimes> M2) ! j ! i =\n    M1 ! (j div length M2) ! (i div row_length M2) *\n    M2 ! (j mod length M2) ! (i mod row_length M2)", "using matrix_Tensor_elements"], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     (i < row_length ?M1.0 * row_length ?M2.0 \\<and>\n      j < length ?M1.0 * length ?M2.0) \\<and>\n     mat (row_length ?M1.0) (length ?M1.0) ?M1.0 \\<and>\n     mat (row_length ?M2.0) (length ?M2.0) ?M2.0 \\<longrightarrow>\n     (?M1.0 \\<otimes> ?M2.0) ! j ! i =\n     ?M1.0 ! (j div length ?M2.0) ! (i div row_length ?M2.0) *\n     ?M2.0 ! (j mod length ?M2.0) ! (i mod row_length ?M2.0)\n\ngoal (1 subgoal):\n 1. (i < row_length M1 * row_length M2 \\<and>\n     j < length M1 * length M2) \\<and>\n    mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    (M1 \\<otimes> M2) ! j ! i =\n    M1 ! (j div length M2) ! (i div row_length M2) *\n    M2 ! (j mod length M2) ! (i mod row_length M2)", "by auto"], ["", "theorem effective_matrix_tensor_elements2:\n assumes  \" i<(row_length M1)*(row_length M2)\"\n and \"j < (length M1)*(length M2)\"\n and \"mat (row_length M1) (length M1) M1\"\n and \"mat (row_length M2) (length M2) M2\"\n shows \"(M1 \\<otimes> M2)!j!i = \n             (M1!(j div (length M2))!(i div (row_length M2)))\n              * (M2!(j mod length M2)!(i mod (row_length M2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M1 \\<otimes> M2) ! j ! i =\n    M1 ! (j div length M2) ! (i div row_length M2) *\n    M2 ! (j mod length M2) ! (i mod row_length M2)", "using assms matrix_Tensor_elements"], ["proof (prove)\nusing this:\n  i < row_length M1 * row_length M2\n  j < length M1 * length M2\n  mat (row_length M1) (length M1) M1\n  mat (row_length M2) (length M2) M2\n  \\<forall>i j.\n     (i < row_length ?M1.0 * row_length ?M2.0 \\<and>\n      j < length ?M1.0 * length ?M2.0) \\<and>\n     mat (row_length ?M1.0) (length ?M1.0) ?M1.0 \\<and>\n     mat (row_length ?M2.0) (length ?M2.0) ?M2.0 \\<longrightarrow>\n     (?M1.0 \\<otimes> ?M2.0) ! j ! i =\n     ?M1.0 ! (j div length ?M2.0) ! (i div row_length ?M2.0) *\n     ?M2.0 ! (j mod length ?M2.0) ! (i mod row_length ?M2.0)\n\ngoal (1 subgoal):\n 1. (M1 \\<otimes> M2) ! j ! i =\n    M1 ! (j div length M2) ! (i div row_length M2) *\n    M2 ! (j mod length M2) ! (i mod row_length M2)", "by auto"], ["", "text\\<open>the following lemmas are useful in proving associativity of tensor\nproducts\\<close>"], ["", "lemma div_left_ineq:\n assumes \"(x::nat) < y*z\" \n shows \" (x div z) < y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x div z < y", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> x div z < y \\<Longrightarrow> False", "assume 0: \" \\<not>((x div z) < y)\""], ["proof (state)\nthis:\n  \\<not> x div z < y\n\ngoal (1 subgoal):\n 1. \\<not> x div z < y \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> x div z < y", "have 1:\" x div z \\<ge> y\""], ["proof (prove)\nusing this:\n  \\<not> x div z < y\n\ngoal (1 subgoal):\n 1. y \\<le> x div z", "by auto"], ["proof (state)\nthis:\n  y \\<le> x div z\n\ngoal (1 subgoal):\n 1. \\<not> x div z < y \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  y \\<le> x div z", "have 2:\"(x div z)*z \\<ge> y*z\""], ["proof (prove)\nusing this:\n  y \\<le> x div z\n\ngoal (1 subgoal):\n 1. y * z \\<le> x div z * z", "by auto"], ["proof (state)\nthis:\n  y * z \\<le> x div z * z\n\ngoal (1 subgoal):\n 1. \\<not> x div z < y \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  y * z \\<le> x div z * z", "have 3:\"(x div z)*z + (x mod z) = z\""], ["proof (prove)\nusing this:\n  y * z \\<le> x div z * z\n\ngoal (1 subgoal):\n 1. x div z * z + x mod z = z", "using div_mult_mod_eq \n          add_leD1 assms minus_mod_eq_div_mult [symmetric] le_diff_conv2 mod_less_eq_dividend not_less"], ["proof (prove)\nusing this:\n  y * z \\<le> x div z * z\n  ?a div ?b * ?b + ?a mod ?b = ?a\n  ?m + ?k \\<le> ?n \\<Longrightarrow> ?m \\<le> ?n\n  x < y * z\n  ?a div ?b * ?b = ?a - ?a mod ?b\n  ?k \\<le> ?j \\<Longrightarrow> (?i \\<le> ?j - ?k) = (?i + ?k \\<le> ?j)\n  ?m mod ?n \\<le> ?m\n  (\\<not> ?x < ?y) = (?y \\<le> ?x)\n\ngoal (1 subgoal):\n 1. x div z * z + x mod z = z", "by metis"], ["proof (state)\nthis:\n  x div z * z + x mod z = z\n\ngoal (1 subgoal):\n 1. \\<not> x div z < y \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  x div z * z + x mod z = z", "have 4:\"(x div z)*z \\<le> z\""], ["proof (prove)\nusing this:\n  x div z * z + x mod z = z\n\ngoal (1 subgoal):\n 1. x div z * z \\<le> z", "by auto"], ["proof (state)\nthis:\n  x div z * z \\<le> z\n\ngoal (1 subgoal):\n 1. \\<not> x div z < y \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  x div z * z \\<le> z", "have 5:\"z \\<ge> y*z\""], ["proof (prove)\nusing this:\n  x div z * z \\<le> z\n\ngoal (1 subgoal):\n 1. y * z \\<le> z", "using 2"], ["proof (prove)\nusing this:\n  x div z * z \\<le> z\n  y * z \\<le> x div z * z\n\ngoal (1 subgoal):\n 1. y * z \\<le> z", "by auto"], ["proof (state)\nthis:\n  y * z \\<le> z\n\ngoal (1 subgoal):\n 1. \\<not> x div z < y \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  y * z \\<le> z", "have 6:\"z div z \\<ge> (y*z) div z\""], ["proof (prove)\nusing this:\n  y * z \\<le> z\n\ngoal (1 subgoal):\n 1. y * z div z \\<le> z div z", "by auto"], ["proof (state)\nthis:\n  y * z div z \\<le> z div z\n\ngoal (1 subgoal):\n 1. \\<not> x div z < y \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  y * z div z \\<le> z div z", "have \"(y*z) div z \\<le> 1\""], ["proof (prove)\nusing this:\n  y * z div z \\<le> z div z\n\ngoal (1 subgoal):\n 1. y * z div z \\<le> 1", "by auto"], ["proof (state)\nthis:\n  y * z div z \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<not> x div z < y \\<Longrightarrow> False", "with 6"], ["proof (chain)\npicking this:\n  y * z div z \\<le> z div z\n  y * z div z \\<le> 1", "have \"1 \\<ge> y\""], ["proof (prove)\nusing this:\n  y * z div z \\<le> z div z\n  y * z div z \\<le> 1\n\ngoal (1 subgoal):\n 1. y \\<le> 1", "using 1 3 assms div_self less_nat_zero_code mult_zero_left \n          mult.commute mod_div_mult_eq"], ["proof (prove)\nusing this:\n  y * z div z \\<le> z div z\n  y * z div z \\<le> 1\n  y \\<le> x div z\n  x div z * z + x mod z = z\n  x < y * z\n  ?a \\<noteq> (0::?'a) \\<Longrightarrow> ?a div ?a = (1::?'a)\n  (?n < 0) = False\n  (0::?'a) * ?a = (0::?'a)\n  ?a * ?b = ?b * ?a\n  ?a mod ?b + ?a div ?b * ?b = ?a\n\ngoal (1 subgoal):\n 1. y \\<le> 1", "by auto"], ["proof (state)\nthis:\n  y \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<not> x div z < y \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  y \\<le> 1", "have 7:\"(y = 0) \\<or> (y = 1)\""], ["proof (prove)\nusing this:\n  y \\<le> 1\n\ngoal (1 subgoal):\n 1. y = 0 \\<or> y = 1", "by auto"], ["proof (state)\nthis:\n  y = 0 \\<or> y = 1\n\ngoal (1 subgoal):\n 1. \\<not> x div z < y \\<Longrightarrow> False", "have \"(y = 0 ) \\<Longrightarrow> x<0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y = 0 \\<Longrightarrow> x < 0", "using assms"], ["proof (prove)\nusing this:\n  x < y * z\n\ngoal (1 subgoal):\n 1. y = 0 \\<Longrightarrow> x < 0", "by auto"], ["proof (state)\nthis:\n  y = 0 \\<Longrightarrow> x < 0\n\ngoal (1 subgoal):\n 1. \\<not> x div z < y \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  y = 0 \\<Longrightarrow> x < 0\n\ngoal (1 subgoal):\n 1. \\<not> x div z < y \\<Longrightarrow> False", "have \"x \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> x", "by auto"], ["proof (state)\nthis:\n  0 \\<le> x\n\ngoal (1 subgoal):\n 1. \\<not> x div z < y \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  0 \\<le> x", "have 8:\"(y = 0) \\<Longrightarrow> False\""], ["proof (prove)\nusing this:\n  0 \\<le> x\n\ngoal (1 subgoal):\n 1. y = 0 \\<Longrightarrow> False", "using calculation  less_nat_zero_code"], ["proof (prove)\nusing this:\n  0 \\<le> x\n  y = 0 \\<Longrightarrow> x < 0\n  (?n < 0) = False\n\ngoal (1 subgoal):\n 1. y = 0 \\<Longrightarrow> False", "by auto"], ["proof (state)\nthis:\n  y = 0 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> x div z < y \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  y = 0 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> x div z < y \\<Longrightarrow> False", "have \"(y = 1) \\<Longrightarrow> ( x < z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y = 1 \\<Longrightarrow> x < z", "using assms"], ["proof (prove)\nusing this:\n  x < y * z\n\ngoal (1 subgoal):\n 1. y = 1 \\<Longrightarrow> x < z", "by auto"], ["proof (state)\nthis:\n  y = 1 \\<Longrightarrow> x < z\n\ngoal (1 subgoal):\n 1. \\<not> x div z < y \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  y = 1 \\<Longrightarrow> x < z", "have \"(y = 1) \\<Longrightarrow> (x div z) = 0\""], ["proof (prove)\nusing this:\n  y = 1 \\<Longrightarrow> x < z\n\ngoal (1 subgoal):\n 1. y = 1 \\<Longrightarrow> x div z = 0", "by (metis div_less)"], ["proof (state)\nthis:\n  y = 1 \\<Longrightarrow> x div z = 0\n\ngoal (1 subgoal):\n 1. \\<not> x div z < y \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  y = 1 \\<Longrightarrow> x div z = 0", "have \"(y = 1) \\<Longrightarrow>(x div z) < y\""], ["proof (prove)\nusing this:\n  y = 1 \\<Longrightarrow> x div z = 0\n\ngoal (1 subgoal):\n 1. y = 1 \\<Longrightarrow> x div z < y", "by auto"], ["proof (state)\nthis:\n  y = 1 \\<Longrightarrow> x div z < y\n\ngoal (1 subgoal):\n 1. \\<not> x div z < y \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  y = 1 \\<Longrightarrow> x div z < y", "have \"(y = 1) \\<Longrightarrow> False\""], ["proof (prove)\nusing this:\n  y = 1 \\<Longrightarrow> x div z < y\n\ngoal (1 subgoal):\n 1. y = 1 \\<Longrightarrow> False", "using 0"], ["proof (prove)\nusing this:\n  y = 1 \\<Longrightarrow> x div z < y\n  \\<not> x div z < y\n\ngoal (1 subgoal):\n 1. y = 1 \\<Longrightarrow> False", "by auto"], ["proof (state)\nthis:\n  y = 1 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> x div z < y \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  y = 1 \\<Longrightarrow> False", "show False"], ["proof (prove)\nusing this:\n  y = 1 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "using 7 8"], ["proof (prove)\nusing this:\n  y = 1 \\<Longrightarrow> False\n  y = 0 \\<or> y = 1\n  y = 0 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma div_right_ineq:\n assumes \"(x::nat) < y*z\" \n shows \" (x div y) < z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x div y < z", "using assms div_left_ineq mult.commute"], ["proof (prove)\nusing this:\n  x < y * z\n  ?x < ?y * ?z \\<Longrightarrow> ?x div ?z < ?y\n  ?a * ?b = ?b * ?a\n\ngoal (1 subgoal):\n 1. x div y < z", "by (metis)"], ["", "text\\<open>In the following theorem, we obtain columns of vec$\\_$mat$\\_$Tensor of \na vector v and a matrix M in terms of the vector v and columns of the \nmatrix M\\<close>"], ["", "lemma col_vec_mat_Tensor_prelim:\n \" \\<forall>j.(j < (length M) \n     \\<longrightarrow>\n      col (vec_mat_Tensor v M) j = vec_vec_Tensor v (col M j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j<length M.\n       col (vec_mat_Tensor v M) j = vec_vec_Tensor v (col M j)", "unfolding col_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j<length M. vec_mat_Tensor v M ! j = vec_vec_Tensor v (M ! j)", "apply(rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < length M \\<longrightarrow>\n       vec_mat_Tensor v M ! j = vec_vec_Tensor v (M ! j)", "proof(induct M)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>j.\n       j < length [] \\<longrightarrow>\n       vec_mat_Tensor v [] ! j = vec_vec_Tensor v ([] ! j)\n 2. \\<And>a M j.\n       (\\<And>j.\n           j < length M \\<longrightarrow>\n           vec_mat_Tensor v M ! j =\n           vec_vec_Tensor v (M ! j)) \\<Longrightarrow>\n       j < length (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j = vec_vec_Tensor v ((a # M) ! j)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>j.\n       j < length [] \\<longrightarrow>\n       vec_mat_Tensor v [] ! j = vec_vec_Tensor v ([] ! j)\n 2. \\<And>a M j.\n       (\\<And>j.\n           j < length M \\<longrightarrow>\n           vec_mat_Tensor v M ! j =\n           vec_vec_Tensor v (M ! j)) \\<Longrightarrow>\n       j < length (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j = vec_vec_Tensor v ((a # M) ! j)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. j < length [] \\<longrightarrow>\n    vec_mat_Tensor v [] ! j = vec_vec_Tensor v ([] ! j)", "using Nil"], ["proof (prove)\ngoal (1 subgoal):\n 1. j < length [] \\<longrightarrow>\n    vec_mat_Tensor v [] ! j = vec_vec_Tensor v ([] ! j)", "by auto"], ["proof (state)\nthis:\n  j < length [] \\<longrightarrow>\n  vec_mat_Tensor v [] ! j = vec_vec_Tensor v ([] ! j)\n\ngoal (1 subgoal):\n 1. \\<And>a M j.\n       (\\<And>j.\n           j < length M \\<longrightarrow>\n           vec_mat_Tensor v M ! j =\n           vec_vec_Tensor v (M ! j)) \\<Longrightarrow>\n       j < length (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j = vec_vec_Tensor v ((a # M) ! j)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a M j.\n       (\\<And>j.\n           j < length M \\<longrightarrow>\n           vec_mat_Tensor v M ! j =\n           vec_vec_Tensor v (M ! j)) \\<Longrightarrow>\n       j < length (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j = vec_vec_Tensor v ((a # M) ! j)", "case (Cons w N)"], ["proof (state)\nthis:\n  ?j < length N \\<longrightarrow>\n  vec_mat_Tensor v N ! ?j = vec_vec_Tensor v (N ! ?j)\n\ngoal (1 subgoal):\n 1. \\<And>a M j.\n       (\\<And>j.\n           j < length M \\<longrightarrow>\n           vec_mat_Tensor v M ! j =\n           vec_vec_Tensor v (M ! j)) \\<Longrightarrow>\n       j < length (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j = vec_vec_Tensor v ((a # M) ! j)", "have Cons_1:\"vec_mat_Tensor v (w#N) \n                        = (vec_vec_Tensor v w)#(vec_mat_Tensor v N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_mat_Tensor v (w # N) = vec_vec_Tensor v w # vec_mat_Tensor v N", "using vec_mat_Tensor.simps Cons"], ["proof (prove)\nusing this:\n  vec_mat_Tensor ?xs [] = []\n  vec_mat_Tensor ?xs (?ys # ?yss) =\n  vec_vec_Tensor ?xs ?ys # vec_mat_Tensor ?xs ?yss\n  ?j < length N \\<longrightarrow>\n  vec_mat_Tensor v N ! ?j = vec_vec_Tensor v (N ! ?j)\n\ngoal (1 subgoal):\n 1. vec_mat_Tensor v (w # N) = vec_vec_Tensor v w # vec_mat_Tensor v N", "by auto"], ["proof (state)\nthis:\n  vec_mat_Tensor v (w # N) = vec_vec_Tensor v w # vec_mat_Tensor v N\n\ngoal (1 subgoal):\n 1. \\<And>a M j.\n       (\\<And>j.\n           j < length M \\<longrightarrow>\n           vec_mat_Tensor v M ! j =\n           vec_vec_Tensor v (M ! j)) \\<Longrightarrow>\n       j < length (a # M) \\<longrightarrow>\n       vec_mat_Tensor v (a # M) ! j = vec_vec_Tensor v ((a # M) ! j)", "then"], ["proof (chain)\npicking this:\n  vec_mat_Tensor v (w # N) = vec_vec_Tensor v w # vec_mat_Tensor v N", "show ?case"], ["proof (prove)\nusing this:\n  vec_mat_Tensor v (w # N) = vec_vec_Tensor v w # vec_mat_Tensor v N\n\ngoal (1 subgoal):\n 1. j < length (w # N) \\<longrightarrow>\n    vec_mat_Tensor v (w # N) ! j = vec_vec_Tensor v ((w # N) ! j)", "proof(cases j)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>vec_mat_Tensor v (w # N) =\n             vec_vec_Tensor v w # vec_mat_Tensor v N;\n     j = 0\\<rbrakk>\n    \\<Longrightarrow> j < length (w # N) \\<longrightarrow>\n                      vec_mat_Tensor v (w # N) ! j =\n                      vec_vec_Tensor v ((w # N) ! j)\n 2. \\<And>nat.\n       \\<lbrakk>vec_mat_Tensor v (w # N) =\n                vec_vec_Tensor v w # vec_mat_Tensor v N;\n        j = Suc nat\\<rbrakk>\n       \\<Longrightarrow> j < length (w # N) \\<longrightarrow>\n                         vec_mat_Tensor v (w # N) ! j =\n                         vec_vec_Tensor v ((w # N) ! j)", "case 0"], ["proof (state)\nthis:\n  j = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>vec_mat_Tensor v (w # N) =\n             vec_vec_Tensor v w # vec_mat_Tensor v N;\n     j = 0\\<rbrakk>\n    \\<Longrightarrow> j < length (w # N) \\<longrightarrow>\n                      vec_mat_Tensor v (w # N) ! j =\n                      vec_vec_Tensor v ((w # N) ! j)\n 2. \\<And>nat.\n       \\<lbrakk>vec_mat_Tensor v (w # N) =\n                vec_vec_Tensor v w # vec_mat_Tensor v N;\n        j = Suc nat\\<rbrakk>\n       \\<Longrightarrow> j < length (w # N) \\<longrightarrow>\n                         vec_mat_Tensor v (w # N) ! j =\n                         vec_vec_Tensor v ((w # N) ! j)", "have \"vec_mat_Tensor v (w#N)!0 =  (vec_vec_Tensor v w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_mat_Tensor v (w # N) ! 0 = vec_vec_Tensor v w", "by auto"], ["proof (state)\nthis:\n  vec_mat_Tensor v (w # N) ! 0 = vec_vec_Tensor v w\n\ngoal (2 subgoals):\n 1. \\<lbrakk>vec_mat_Tensor v (w # N) =\n             vec_vec_Tensor v w # vec_mat_Tensor v N;\n     j = 0\\<rbrakk>\n    \\<Longrightarrow> j < length (w # N) \\<longrightarrow>\n                      vec_mat_Tensor v (w # N) ! j =\n                      vec_vec_Tensor v ((w # N) ! j)\n 2. \\<And>nat.\n       \\<lbrakk>vec_mat_Tensor v (w # N) =\n                vec_vec_Tensor v w # vec_mat_Tensor v N;\n        j = Suc nat\\<rbrakk>\n       \\<Longrightarrow> j < length (w # N) \\<longrightarrow>\n                         vec_mat_Tensor v (w # N) ! j =\n                         vec_vec_Tensor v ((w # N) ! j)", "then"], ["proof (chain)\npicking this:\n  vec_mat_Tensor v (w # N) ! 0 = vec_vec_Tensor v w", "show ?thesis"], ["proof (prove)\nusing this:\n  vec_mat_Tensor v (w # N) ! 0 = vec_vec_Tensor v w\n\ngoal (1 subgoal):\n 1. j < length (w # N) \\<longrightarrow>\n    vec_mat_Tensor v (w # N) ! j = vec_vec_Tensor v ((w # N) ! j)", "using 0"], ["proof (prove)\nusing this:\n  vec_mat_Tensor v (w # N) ! 0 = vec_vec_Tensor v w\n  j = 0\n\ngoal (1 subgoal):\n 1. j < length (w # N) \\<longrightarrow>\n    vec_mat_Tensor v (w # N) ! j = vec_vec_Tensor v ((w # N) ! j)", "by auto"], ["proof (state)\nthis:\n  j < length (w # N) \\<longrightarrow>\n  vec_mat_Tensor v (w # N) ! j = vec_vec_Tensor v ((w # N) ! j)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>vec_mat_Tensor v (w # N) =\n                vec_vec_Tensor v w # vec_mat_Tensor v N;\n        j = Suc nat\\<rbrakk>\n       \\<Longrightarrow> j < length (w # N) \\<longrightarrow>\n                         vec_mat_Tensor v (w # N) ! j =\n                         vec_vec_Tensor v ((w # N) ! j)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>vec_mat_Tensor v (w # N) =\n                vec_vec_Tensor v w # vec_mat_Tensor v N;\n        j = Suc nat\\<rbrakk>\n       \\<Longrightarrow> j < length (w # N) \\<longrightarrow>\n                         vec_mat_Tensor v (w # N) ! j =\n                         vec_vec_Tensor v ((w # N) ! j)", "case (Suc k)"], ["proof (state)\nthis:\n  j = Suc k\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>vec_mat_Tensor v (w # N) =\n                vec_vec_Tensor v w # vec_mat_Tensor v N;\n        j = Suc nat\\<rbrakk>\n       \\<Longrightarrow> j < length (w # N) \\<longrightarrow>\n                         vec_mat_Tensor v (w # N) ! j =\n                         vec_vec_Tensor v ((w # N) ! j)", "have \" vec_mat_Tensor v (w#N)!j = (vec_mat_Tensor v N)!(k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_mat_Tensor v (w # N) ! j = vec_mat_Tensor v N ! k", "using Cons_1 Suc"], ["proof (prove)\nusing this:\n  vec_mat_Tensor v (w # N) = vec_vec_Tensor v w # vec_mat_Tensor v N\n  j = Suc k\n\ngoal (1 subgoal):\n 1. vec_mat_Tensor v (w # N) ! j = vec_mat_Tensor v N ! k", "by auto"], ["proof (state)\nthis:\n  vec_mat_Tensor v (w # N) ! j = vec_mat_Tensor v N ! k\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>vec_mat_Tensor v (w # N) =\n                vec_vec_Tensor v w # vec_mat_Tensor v N;\n        j = Suc nat\\<rbrakk>\n       \\<Longrightarrow> j < length (w # N) \\<longrightarrow>\n                         vec_mat_Tensor v (w # N) ! j =\n                         vec_vec_Tensor v ((w # N) ! j)", "moreover"], ["proof (state)\nthis:\n  vec_mat_Tensor v (w # N) ! j = vec_mat_Tensor v N ! k\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>vec_mat_Tensor v (w # N) =\n                vec_vec_Tensor v w # vec_mat_Tensor v N;\n        j = Suc nat\\<rbrakk>\n       \\<Longrightarrow> j < length (w # N) \\<longrightarrow>\n                         vec_mat_Tensor v (w # N) ! j =\n                         vec_vec_Tensor v ((w # N) ! j)", "have \"j < length (w#N) \\<Longrightarrow> k < length N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < length (w # N) \\<Longrightarrow> k < length N", "using Suc"], ["proof (prove)\nusing this:\n  j = Suc k\n\ngoal (1 subgoal):\n 1. j < length (w # N) \\<Longrightarrow> k < length N", "by (metis length_Suc_conv not_less_eq)"], ["proof (state)\nthis:\n  j < length (w # N) \\<Longrightarrow> k < length N\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>vec_mat_Tensor v (w # N) =\n                vec_vec_Tensor v w # vec_mat_Tensor v N;\n        j = Suc nat\\<rbrakk>\n       \\<Longrightarrow> j < length (w # N) \\<longrightarrow>\n                         vec_mat_Tensor v (w # N) ! j =\n                         vec_vec_Tensor v ((w # N) ! j)", "moreover"], ["proof (state)\nthis:\n  j < length (w # N) \\<Longrightarrow> k < length N\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>vec_mat_Tensor v (w # N) =\n                vec_vec_Tensor v w # vec_mat_Tensor v N;\n        j = Suc nat\\<rbrakk>\n       \\<Longrightarrow> j < length (w # N) \\<longrightarrow>\n                         vec_mat_Tensor v (w # N) ! j =\n                         vec_vec_Tensor v ((w # N) ! j)", "then"], ["proof (chain)\npicking this:\n  j < length (w # N) \\<Longrightarrow> k < length N", "have \"k < length (N) \n                  \\<Longrightarrow> (vec_mat_Tensor v N)!k =   vec_vec_Tensor v (N!k)\""], ["proof (prove)\nusing this:\n  j < length (w # N) \\<Longrightarrow> k < length N\n\ngoal (1 subgoal):\n 1. k < length N \\<Longrightarrow>\n    vec_mat_Tensor v N ! k = vec_vec_Tensor v (N ! k)", "using Cons.hyps"], ["proof (prove)\nusing this:\n  j < length (w # N) \\<Longrightarrow> k < length N\n  ?j < length N \\<longrightarrow>\n  vec_mat_Tensor v N ! ?j = vec_vec_Tensor v (N ! ?j)\n\ngoal (1 subgoal):\n 1. k < length N \\<Longrightarrow>\n    vec_mat_Tensor v N ! k = vec_vec_Tensor v (N ! k)", "by auto"], ["proof (state)\nthis:\n  k < length N \\<Longrightarrow>\n  vec_mat_Tensor v N ! k = vec_vec_Tensor v (N ! k)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>vec_mat_Tensor v (w # N) =\n                vec_vec_Tensor v w # vec_mat_Tensor v N;\n        j = Suc nat\\<rbrakk>\n       \\<Longrightarrow> j < length (w # N) \\<longrightarrow>\n                         vec_mat_Tensor v (w # N) ! j =\n                         vec_vec_Tensor v ((w # N) ! j)", "ultimately"], ["proof (chain)\npicking this:\n  vec_mat_Tensor v (w # N) ! j = vec_mat_Tensor v N ! k\n  j < length (w # N) \\<Longrightarrow> k < length N\n  k < length N \\<Longrightarrow>\n  vec_mat_Tensor v N ! k = vec_vec_Tensor v (N ! k)", "show ?thesis"], ["proof (prove)\nusing this:\n  vec_mat_Tensor v (w # N) ! j = vec_mat_Tensor v N ! k\n  j < length (w # N) \\<Longrightarrow> k < length N\n  k < length N \\<Longrightarrow>\n  vec_mat_Tensor v N ! k = vec_vec_Tensor v (N ! k)\n\ngoal (1 subgoal):\n 1. j < length (w # N) \\<longrightarrow>\n    vec_mat_Tensor v (w # N) ! j = vec_vec_Tensor v ((w # N) ! j)", "using Suc"], ["proof (prove)\nusing this:\n  vec_mat_Tensor v (w # N) ! j = vec_mat_Tensor v N ! k\n  j < length (w # N) \\<Longrightarrow> k < length N\n  k < length N \\<Longrightarrow>\n  vec_mat_Tensor v N ! k = vec_vec_Tensor v (N ! k)\n  j = Suc k\n\ngoal (1 subgoal):\n 1. j < length (w # N) \\<longrightarrow>\n    vec_mat_Tensor v (w # N) ! j = vec_vec_Tensor v ((w # N) ! j)", "by auto"], ["proof (state)\nthis:\n  j < length (w # N) \\<longrightarrow>\n  vec_mat_Tensor v (w # N) ! j = vec_vec_Tensor v ((w # N) ! j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  j < length (w # N) \\<longrightarrow>\n  vec_mat_Tensor v (w # N) ! j = vec_vec_Tensor v ((w # N) ! j)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma col_vec_mat_Tensor:fixes j M v\n assumes \"j < (length M)\" \n shows \"col (vec_mat_Tensor v M) j = vec_vec_Tensor v (col M j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. col (vec_mat_Tensor v M) j = vec_vec_Tensor v (col M j)", "using col_vec_mat_Tensor_prelim assms"], ["proof (prove)\nusing this:\n  \\<forall>j<length ?M.\n     col (vec_mat_Tensor ?v ?M) j = vec_vec_Tensor ?v (col ?M j)\n  j < length M\n\ngoal (1 subgoal):\n 1. col (vec_mat_Tensor v M) j = vec_vec_Tensor v (col M j)", "by auto"], ["", "lemma  col_formula:\n fixes M1 and M2\n shows \"\\<forall>j.((j < (length M1)*(length M2)) \n         \\<and> (mat (row_length M1) (length M1) M1)\n         \\<and> (mat (row_length M2) (length M2) M2)\n         \\<longrightarrow> col (M1 \\<otimes> M2) j \n                =  vec_vec_Tensor \n                        (col M1 (j div length M2)) \n                        (col M2 (j mod length M2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j < length M1 * length M2 \\<and>\n       mat (row_length M1) (length M1) M1 \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       col (M1 \\<otimes> M2) j =\n       vec_vec_Tensor (col M1 (j div length M2)) (col M2 (j mod length M2))", "apply (rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < length M1 * length M2 \\<and>\n       mat (row_length M1) (length M1) M1 \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       col (M1 \\<otimes> M2) j =\n       vec_vec_Tensor (col M1 (j div length M2)) (col M2 (j mod length M2))", "proof(induct M1)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>j.\n       j < length [] * length M2 \\<and>\n       mat (row_length []) (length []) [] \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       col ([] \\<otimes> M2) j =\n       vec_vec_Tensor (col [] (j div length M2)) (col M2 (j mod length M2))\n 2. \\<And>a M1 j.\n       (\\<And>j.\n           j < length M1 * length M2 \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           col (M1 \\<otimes> M2) j =\n           vec_vec_Tensor (col M1 (j div length M2))\n            (col M2 (j mod length M2))) \\<Longrightarrow>\n       j < length (a # M1) * length M2 \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       col (a # M1 \\<otimes> M2) j =\n       vec_vec_Tensor (col (a # M1) (j div length M2))\n        (col M2 (j mod length M2))", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>j.\n       j < length [] * length M2 \\<and>\n       mat (row_length []) (length []) [] \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       col ([] \\<otimes> M2) j =\n       vec_vec_Tensor (col [] (j div length M2)) (col M2 (j mod length M2))\n 2. \\<And>a M1 j.\n       (\\<And>j.\n           j < length M1 * length M2 \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           col (M1 \\<otimes> M2) j =\n           vec_vec_Tensor (col M1 (j div length M2))\n            (col M2 (j mod length M2))) \\<Longrightarrow>\n       j < length (a # M1) * length M2 \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       col (a # M1 \\<otimes> M2) j =\n       vec_vec_Tensor (col (a # M1) (j div length M2))\n        (col M2 (j mod length M2))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. j < length [] * length M2 \\<and>\n    mat (row_length []) (length []) [] \\<and>\n    mat (row_length M2) (length M2) M2 \\<longrightarrow>\n    col ([] \\<otimes> M2) j =\n    vec_vec_Tensor (col [] (j div length M2)) (col M2 (j mod length M2))", "using Nil"], ["proof (prove)\ngoal (1 subgoal):\n 1. j < length [] * length M2 \\<and>\n    mat (row_length []) (length []) [] \\<and>\n    mat (row_length M2) (length M2) M2 \\<longrightarrow>\n    col ([] \\<otimes> M2) j =\n    vec_vec_Tensor (col [] (j div length M2)) (col M2 (j mod length M2))", "by auto"], ["proof (state)\nthis:\n  j < length [] * length M2 \\<and>\n  mat (row_length []) (length []) [] \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  col ([] \\<otimes> M2) j =\n  vec_vec_Tensor (col [] (j div length M2)) (col M2 (j mod length M2))\n\ngoal (1 subgoal):\n 1. \\<And>a M1 j.\n       (\\<And>j.\n           j < length M1 * length M2 \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           col (M1 \\<otimes> M2) j =\n           vec_vec_Tensor (col M1 (j div length M2))\n            (col M2 (j mod length M2))) \\<Longrightarrow>\n       j < length (a # M1) * length M2 \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       col (a # M1 \\<otimes> M2) j =\n       vec_vec_Tensor (col (a # M1) (j div length M2))\n        (col M2 (j mod length M2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a M1 j.\n       (\\<And>j.\n           j < length M1 * length M2 \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           col (M1 \\<otimes> M2) j =\n           vec_vec_Tensor (col M1 (j div length M2))\n            (col M2 (j mod length M2))) \\<Longrightarrow>\n       j < length (a # M1) * length M2 \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       col (a # M1 \\<otimes> M2) j =\n       vec_vec_Tensor (col (a # M1) (j div length M2))\n        (col M2 (j mod length M2))", "case (Cons v M)"], ["proof (state)\nthis:\n  ?j < length M * length M2 \\<and>\n  mat (row_length M) (length M) M \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  col (M \\<otimes> M2) ?j =\n  vec_vec_Tensor (col M (?j div length M2)) (col M2 (?j mod length M2))\n\ngoal (1 subgoal):\n 1. \\<And>a M1 j.\n       (\\<And>j.\n           j < length M1 * length M2 \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           col (M1 \\<otimes> M2) j =\n           vec_vec_Tensor (col M1 (j div length M2))\n            (col M2 (j mod length M2))) \\<Longrightarrow>\n       j < length (a # M1) * length M2 \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       col (a # M1 \\<otimes> M2) j =\n       vec_vec_Tensor (col (a # M1) (j div length M2))\n        (col M2 (j mod length M2))", "have \"j < (length (v#M))*(length M2) \n       \\<and> mat (row_length (v # M)) (length (v # M)) (v # M) \n       \\<and> mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n       (col (v # M \\<otimes> M2) j \n                 = vec_vec_Tensor \n                            (col (v # M) (j div length M2)) \n                            (col M2 (j mod length M2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < length (v # M) * length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    col (v # M \\<otimes> M2) j =\n    vec_vec_Tensor (col (v # M) (j div length M2))\n     (col M2 (j mod length M2))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. j < length (v # M) * length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    col (v # M \\<otimes> M2) j =\n    vec_vec_Tensor (col (v # M) (j div length M2))\n     (col M2 (j mod length M2))", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. j < length (v # M) * length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    col (v # M \\<otimes> M2) j =\n    vec_vec_Tensor (col (v # M) (j div length M2))\n     (col M2 (j mod length M2))", "assume 0:\"j < (length (v#M))*(length M2) \n              \\<and> mat (row_length (v # M)) (length (v # M)) (v # M) \n              \\<and> mat (row_length M2) (length M2) M2\""], ["proof (state)\nthis:\n  j < length (v # M) * length M2 \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2\n\ngoal (1 subgoal):\n 1. j < length (v # M) * length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    col (v # M \\<otimes> M2) j =\n    vec_vec_Tensor (col (v # M) (j div length M2))\n     (col M2 (j mod length M2))", "then"], ["proof (chain)\npicking this:\n  j < length (v # M) * length M2 \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2", "have 1:\"mat (row_length M) (length M) M\""], ["proof (prove)\nusing this:\n  j < length (v # M) * length M2 \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2\n\ngoal (1 subgoal):\n 1. mat (row_length M) (length M) M", "by (metis reduct_matrix)"], ["proof (state)\nthis:\n  mat (row_length M) (length M) M\n\ngoal (1 subgoal):\n 1. j < length (v # M) * length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    col (v # M \\<otimes> M2) j =\n    vec_vec_Tensor (col (v # M) (j div length M2))\n     (col M2 (j mod length M2))", "have \"j < (1+ length M)*(length M2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < (1 + length M) * length M2", "using 0"], ["proof (prove)\nusing this:\n  j < length (v # M) * length M2 \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2\n\ngoal (1 subgoal):\n 1. j < (1 + length M) * length M2", "by auto"], ["proof (state)\nthis:\n  j < (1 + length M) * length M2\n\ngoal (1 subgoal):\n 1. j < length (v # M) * length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    col (v # M \\<otimes> M2) j =\n    vec_vec_Tensor (col (v # M) (j div length M2))\n     (col M2 (j mod length M2))", "then"], ["proof (chain)\npicking this:\n  j < (1 + length M) * length M2", "have \"j < (length M2)+  (length M)*(length M2)\""], ["proof (prove)\nusing this:\n  j < (1 + length M) * length M2\n\ngoal (1 subgoal):\n 1. j < length M2 + length M * length M2", "by auto"], ["proof (state)\nthis:\n  j < length M2 + length M * length M2\n\ngoal (1 subgoal):\n 1. j < length (v # M) * length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    col (v # M \\<otimes> M2) j =\n    vec_vec_Tensor (col (v # M) (j div length M2))\n     (col M2 (j mod length M2))", "then"], ["proof (chain)\npicking this:\n  j < length M2 + length M * length M2", "have 2:\"j \\<ge> (length M2) \n                          \\<Longrightarrow> j- (length M2) < (length M)*(length M2)\""], ["proof (prove)\nusing this:\n  j < length M2 + length M * length M2\n\ngoal (1 subgoal):\n 1. length M2 \\<le> j \\<Longrightarrow> j - length M2 < length M * length M2", "using add_0_iff add_diff_inverse diff_is_0_eq \n                   less_diff_conv less_imp_le linorder_cases add.commute \n                   neq0_conv"], ["proof (prove)\nusing this:\n  j < length M2 + length M * length M2\n  (?b = ?b + ?a) = (?a = (0::?'a))\n  \\<not> ?a < ?b \\<Longrightarrow> ?b + (?a - ?b) = ?a\n  (?m - ?n = 0) = (?m \\<le> ?n)\n  (?i < ?j - ?k) = (?i + ?k < ?j)\n  ?x < ?y \\<Longrightarrow> ?x \\<le> ?y\n  \\<lbrakk>?x < ?y \\<Longrightarrow> ?P; ?x = ?y \\<Longrightarrow> ?P;\n   ?y < ?x \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n  ?a + ?b = ?b + ?a\n  (?n \\<noteq> 0) = (0 < ?n)\n\ngoal (1 subgoal):\n 1. length M2 \\<le> j \\<Longrightarrow> j - length M2 < length M * length M2", "by (metis (hide_lams, no_types))"], ["proof (state)\nthis:\n  length M2 \\<le> j \\<Longrightarrow> j - length M2 < length M * length M2\n\ngoal (1 subgoal):\n 1. j < length (v # M) * length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    col (v # M \\<otimes> M2) j =\n    vec_vec_Tensor (col (v # M) (j div length M2))\n     (col M2 (j mod length M2))", "have 3:\"(v#M)\\<otimes>M2 = (vec_mat_Tensor v M2)@(M \\<otimes> M2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v # M \\<otimes> M2 = vec_mat_Tensor v M2 @ (M \\<otimes> M2)", "using Tensor.simps"], ["proof (prove)\nusing this:\n  [] \\<otimes> ?xs = []\n  ?x # ?xs \\<otimes> ?ys = vec_mat_Tensor ?x ?ys @ (?xs \\<otimes> ?ys)\n\ngoal (1 subgoal):\n 1. v # M \\<otimes> M2 = vec_mat_Tensor v M2 @ (M \\<otimes> M2)", "by auto"], ["proof (state)\nthis:\n  v # M \\<otimes> M2 = vec_mat_Tensor v M2 @ (M \\<otimes> M2)\n\ngoal (1 subgoal):\n 1. j < length (v # M) * length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    col (v # M \\<otimes> M2) j =\n    vec_vec_Tensor (col (v # M) (j div length M2))\n     (col M2 (j mod length M2))", "have \"(col ((v#M)\\<otimes>M2) j) = (col ((vec_mat_Tensor v M2)@(M \\<otimes> M2)) j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. col (v # M \\<otimes> M2) j =\n    col (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) j", "using col_def"], ["proof (prove)\nusing this:\n  col ?m ?i \\<equiv> ?m ! ?i\n\ngoal (1 subgoal):\n 1. col (v # M \\<otimes> M2) j =\n    col (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) j", "by auto"], ["proof (state)\nthis:\n  col (v # M \\<otimes> M2) j =\n  col (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) j\n\ngoal (1 subgoal):\n 1. j < length (v # M) * length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    col (v # M \\<otimes> M2) j =\n    vec_vec_Tensor (col (v # M) (j div length M2))\n     (col M2 (j mod length M2))", "then"], ["proof (chain)\npicking this:\n  col (v # M \\<otimes> M2) j =\n  col (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) j", "have \"j < length (vec_mat_Tensor v M2) \n                   \\<Longrightarrow> (col ((v#M)\\<otimes>M2) j) = (col (vec_mat_Tensor v M2) j)\""], ["proof (prove)\nusing this:\n  col (v # M \\<otimes> M2) j =\n  col (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) j\n\ngoal (1 subgoal):\n 1. j < length (vec_mat_Tensor v M2) \\<Longrightarrow>\n    col (v # M \\<otimes> M2) j = col (vec_mat_Tensor v M2) j", "unfolding col_def"], ["proof (prove)\nusing this:\n  (v # M \\<otimes> M2) ! j = (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) ! j\n\ngoal (1 subgoal):\n 1. j < length (vec_mat_Tensor v M2) \\<Longrightarrow>\n    (v # M \\<otimes> M2) ! j = vec_mat_Tensor v M2 ! j", "using append_simpl"], ["proof (prove)\nusing this:\n  (v # M \\<otimes> M2) ! j = (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) ! j\n  ?i < length ?xs \\<longrightarrow> (?xs @ ?ys) ! ?i = ?xs ! ?i\n\ngoal (1 subgoal):\n 1. j < length (vec_mat_Tensor v M2) \\<Longrightarrow>\n    (v # M \\<otimes> M2) ! j = vec_mat_Tensor v M2 ! j", "by auto"], ["proof (state)\nthis:\n  j < length (vec_mat_Tensor v M2) \\<Longrightarrow>\n  col (v # M \\<otimes> M2) j = col (vec_mat_Tensor v M2) j\n\ngoal (1 subgoal):\n 1. j < length (v # M) * length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    col (v # M \\<otimes> M2) j =\n    vec_vec_Tensor (col (v # M) (j div length M2))\n     (col M2 (j mod length M2))", "then"], ["proof (chain)\npicking this:\n  j < length (vec_mat_Tensor v M2) \\<Longrightarrow>\n  col (v # M \\<otimes> M2) j = col (vec_mat_Tensor v M2) j", "have 4:\"j < length M2 \\<Longrightarrow>\n                        (col ((v#M)\\<otimes>M2) j) = (col (vec_mat_Tensor v M2) j)\""], ["proof (prove)\nusing this:\n  j < length (vec_mat_Tensor v M2) \\<Longrightarrow>\n  col (v # M \\<otimes> M2) j = col (vec_mat_Tensor v M2) j\n\ngoal (1 subgoal):\n 1. j < length M2 \\<Longrightarrow>\n    col (v # M \\<otimes> M2) j = col (vec_mat_Tensor v M2) j", "using vec_mat_Tensor_length"], ["proof (prove)\nusing this:\n  j < length (vec_mat_Tensor v M2) \\<Longrightarrow>\n  col (v # M \\<otimes> M2) j = col (vec_mat_Tensor v M2) j\n  length (vec_mat_Tensor ?xs ?ys) = length ?ys\n\ngoal (1 subgoal):\n 1. j < length M2 \\<Longrightarrow>\n    col (v # M \\<otimes> M2) j = col (vec_mat_Tensor v M2) j", "by simp"], ["proof (state)\nthis:\n  j < length M2 \\<Longrightarrow>\n  col (v # M \\<otimes> M2) j = col (vec_mat_Tensor v M2) j\n\ngoal (1 subgoal):\n 1. j < length (v # M) * length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    col (v # M \\<otimes> M2) j =\n    vec_vec_Tensor (col (v # M) (j div length M2))\n     (col M2 (j mod length M2))", "then"], ["proof (chain)\npicking this:\n  j < length M2 \\<Longrightarrow>\n  col (v # M \\<otimes> M2) j = col (vec_mat_Tensor v M2) j", "have \"j < length M2 \\<Longrightarrow>  \n                  (col (vec_mat_Tensor v M2) j) \n                                      =  vec_vec_Tensor v (col M2 j)\""], ["proof (prove)\nusing this:\n  j < length M2 \\<Longrightarrow>\n  col (v # M \\<otimes> M2) j = col (vec_mat_Tensor v M2) j\n\ngoal (1 subgoal):\n 1. j < length M2 \\<Longrightarrow>\n    col (vec_mat_Tensor v M2) j = vec_vec_Tensor v (col M2 j)", "using col_vec_mat_Tensor"], ["proof (prove)\nusing this:\n  j < length M2 \\<Longrightarrow>\n  col (v # M \\<otimes> M2) j = col (vec_mat_Tensor v M2) j\n  ?j < length ?M \\<Longrightarrow>\n  col (vec_mat_Tensor ?v ?M) ?j = vec_vec_Tensor ?v (col ?M ?j)\n\ngoal (1 subgoal):\n 1. j < length M2 \\<Longrightarrow>\n    col (vec_mat_Tensor v M2) j = vec_vec_Tensor v (col M2 j)", "by auto"], ["proof (state)\nthis:\n  j < length M2 \\<Longrightarrow>\n  col (vec_mat_Tensor v M2) j = vec_vec_Tensor v (col M2 j)\n\ngoal (1 subgoal):\n 1. j < length (v # M) * length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    col (v # M \\<otimes> M2) j =\n    vec_vec_Tensor (col (v # M) (j div length M2))\n     (col M2 (j mod length M2))", "then"], ["proof (chain)\npicking this:\n  j < length M2 \\<Longrightarrow>\n  col (vec_mat_Tensor v M2) j = vec_vec_Tensor v (col M2 j)", "have \n           \"j< length M2 \\<Longrightarrow> \n                 (col (vec_mat_Tensor v M2) j) \n                            =  vec_vec_Tensor \n                                            ((v#M)!(j div length M2)) \n                                            (col M2 (j mod (length M2)))\""], ["proof (prove)\nusing this:\n  j < length M2 \\<Longrightarrow>\n  col (vec_mat_Tensor v M2) j = vec_vec_Tensor v (col M2 j)\n\ngoal (1 subgoal):\n 1. j < length M2 \\<Longrightarrow>\n    col (vec_mat_Tensor v M2) j =\n    vec_vec_Tensor ((v # M) ! (j div length M2)) (col M2 (j mod length M2))", "by auto"], ["proof (state)\nthis:\n  j < length M2 \\<Longrightarrow>\n  col (vec_mat_Tensor v M2) j =\n  vec_vec_Tensor ((v # M) ! (j div length M2)) (col M2 (j mod length M2))\n\ngoal (1 subgoal):\n 1. j < length (v # M) * length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    col (v # M \\<otimes> M2) j =\n    vec_vec_Tensor (col (v # M) (j div length M2))\n     (col M2 (j mod length M2))", "then"], ["proof (chain)\npicking this:\n  j < length M2 \\<Longrightarrow>\n  col (vec_mat_Tensor v M2) j =\n  vec_vec_Tensor ((v # M) ! (j div length M2)) (col M2 (j mod length M2))", "have step_1:\"j< length M2 \\<Longrightarrow> \n                 (col ((v#M)\\<otimes> M2) j) \n                             =  vec_vec_Tensor \n                                             ((v#M)!(j div length M2)) \n                                             (col M2 (j mod (length M2)))\""], ["proof (prove)\nusing this:\n  j < length M2 \\<Longrightarrow>\n  col (vec_mat_Tensor v M2) j =\n  vec_vec_Tensor ((v # M) ! (j div length M2)) (col M2 (j mod length M2))\n\ngoal (1 subgoal):\n 1. j < length M2 \\<Longrightarrow>\n    col (v # M \\<otimes> M2) j =\n    vec_vec_Tensor ((v # M) ! (j div length M2)) (col M2 (j mod length M2))", "using 4"], ["proof (prove)\nusing this:\n  j < length M2 \\<Longrightarrow>\n  col (vec_mat_Tensor v M2) j =\n  vec_vec_Tensor ((v # M) ! (j div length M2)) (col M2 (j mod length M2))\n  j < length M2 \\<Longrightarrow>\n  col (v # M \\<otimes> M2) j = col (vec_mat_Tensor v M2) j\n\ngoal (1 subgoal):\n 1. j < length M2 \\<Longrightarrow>\n    col (v # M \\<otimes> M2) j =\n    vec_vec_Tensor ((v # M) ! (j div length M2)) (col M2 (j mod length M2))", "by auto"], ["proof (state)\nthis:\n  j < length M2 \\<Longrightarrow>\n  col (v # M \\<otimes> M2) j =\n  vec_vec_Tensor ((v # M) ! (j div length M2)) (col M2 (j mod length M2))\n\ngoal (1 subgoal):\n 1. j < length (v # M) * length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    col (v # M \\<otimes> M2) j =\n    vec_vec_Tensor (col (v # M) (j div length M2))\n     (col M2 (j mod length M2))", "have 4:\"j \\<ge> length M2 \n                  \\<Longrightarrow> (col ((v#M)\\<otimes>M2) j)= (M \\<otimes> M2)!(j- (length M2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length M2 \\<le> j \\<Longrightarrow>\n    col (v # M \\<otimes> M2) j = (M \\<otimes> M2) ! (j - length M2)", "unfolding col_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. length M2 \\<le> j \\<Longrightarrow>\n    (v # M \\<otimes> M2) ! j = (M \\<otimes> M2) ! (j - length M2)", "using 3 append_simpl2 vec_mat_Tensor_length"], ["proof (prove)\nusing this:\n  v # M \\<otimes> M2 = vec_mat_Tensor v M2 @ (M \\<otimes> M2)\n  length ?xs \\<le> ?i \\<longrightarrow>\n  (?xs @ ?ys) ! ?i = ?ys ! (?i - length ?xs)\n  length (vec_mat_Tensor ?xs ?ys) = length ?ys\n\ngoal (1 subgoal):\n 1. length M2 \\<le> j \\<Longrightarrow>\n    (v # M \\<otimes> M2) ! j = (M \\<otimes> M2) ! (j - length M2)", "by metis"], ["proof (state)\nthis:\n  length M2 \\<le> j \\<Longrightarrow>\n  col (v # M \\<otimes> M2) j = (M \\<otimes> M2) ! (j - length M2)\n\ngoal (1 subgoal):\n 1. j < length (v # M) * length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    col (v # M \\<otimes> M2) j =\n    vec_vec_Tensor (col (v # M) (j div length M2))\n     (col M2 (j mod length M2))", "then"], ["proof (chain)\npicking this:\n  length M2 \\<le> j \\<Longrightarrow>\n  col (v # M \\<otimes> M2) j = (M \\<otimes> M2) ! (j - length M2)", "have 5:\n         \"j \\<ge> length M2 \\<Longrightarrow> \n              col (M \\<otimes> M2) (j-length M2) \n                     = vec_vec_Tensor \n                                (col M ((j-length M2) div length M2)) \n                                (col M2 ((j- length M2) mod length M2))\""], ["proof (prove)\nusing this:\n  length M2 \\<le> j \\<Longrightarrow>\n  col (v # M \\<otimes> M2) j = (M \\<otimes> M2) ! (j - length M2)\n\ngoal (1 subgoal):\n 1. length M2 \\<le> j \\<Longrightarrow>\n    col (M \\<otimes> M2) (j - length M2) =\n    vec_vec_Tensor (col M ((j - length M2) div length M2))\n     (col M2 ((j - length M2) mod length M2))", "using 1 0 2 Cons"], ["proof (prove)\nusing this:\n  length M2 \\<le> j \\<Longrightarrow>\n  col (v # M \\<otimes> M2) j = (M \\<otimes> M2) ! (j - length M2)\n  mat (row_length M) (length M) M\n  j < length (v # M) * length M2 \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2\n  length M2 \\<le> j \\<Longrightarrow> j - length M2 < length M * length M2\n  ?j < length M * length M2 \\<and>\n  mat (row_length M) (length M) M \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  col (M \\<otimes> M2) ?j =\n  vec_vec_Tensor (col M (?j div length M2)) (col M2 (?j mod length M2))\n\ngoal (1 subgoal):\n 1. length M2 \\<le> j \\<Longrightarrow>\n    col (M \\<otimes> M2) (j - length M2) =\n    vec_vec_Tensor (col M ((j - length M2) div length M2))\n     (col M2 ((j - length M2) mod length M2))", "by auto"], ["proof (state)\nthis:\n  length M2 \\<le> j \\<Longrightarrow>\n  col (M \\<otimes> M2) (j - length M2) =\n  vec_vec_Tensor (col M ((j - length M2) div length M2))\n   (col M2 ((j - length M2) mod length M2))\n\ngoal (1 subgoal):\n 1. j < length (v # M) * length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    col (v # M \\<otimes> M2) j =\n    vec_vec_Tensor (col (v # M) (j div length M2))\n     (col M2 (j mod length M2))", "then"], ["proof (chain)\npicking this:\n  length M2 \\<le> j \\<Longrightarrow>\n  col (M \\<otimes> M2) (j - length M2) =\n  vec_vec_Tensor (col M ((j - length M2) div length M2))\n   (col M2 ((j - length M2) mod length M2))", "have 6:\n         \"j \\<ge> length M2 \\<Longrightarrow> \n                 (j - length M2) div (length M2) + 1 = j div (length M2)\""], ["proof (prove)\nusing this:\n  length M2 \\<le> j \\<Longrightarrow>\n  col (M \\<otimes> M2) (j - length M2) =\n  vec_vec_Tensor (col M ((j - length M2) div length M2))\n   (col M2 ((j - length M2) mod length M2))\n\ngoal (1 subgoal):\n 1. length M2 \\<le> j \\<Longrightarrow>\n    (j - length M2) div length M2 + 1 = j div length M2", "using 2  div_0 div_self \n                   le_neq_implies_less less_nat_zero_code \n                   monoid_add_class.add.right_neutral mult_0 mult_cancel2 \n                   add.commute nat_div neq0_conv div_add_self1 le_add_diff_inverse"], ["proof (prove)\nusing this:\n  length M2 \\<le> j \\<Longrightarrow>\n  col (M \\<otimes> M2) (j - length M2) =\n  vec_vec_Tensor (col M ((j - length M2) div length M2))\n   (col M2 ((j - length M2) mod length M2))\n  length M2 \\<le> j \\<Longrightarrow> j - length M2 < length M * length M2\n  (0::?'a) div ?a = (0::?'a)\n  ?a \\<noteq> (0::?'a) \\<Longrightarrow> ?a div ?a = (1::?'a)\n  \\<lbrakk>?m \\<le> ?n; ?m \\<noteq> ?n\\<rbrakk> \\<Longrightarrow> ?m < ?n\n  (?n < 0) = False\n  ?a + (0::?'a) = ?a\n  0 * ?n = 0\n  (?m * ?k = ?n * ?k) = (?m = ?n \\<or> ?k = 0)\n  ?a + ?b = ?b + ?a\n  \\<lbrakk>0 < ?b; ?b < ?a\\<rbrakk>\n  \\<Longrightarrow> ?a div ?b = (?a - ?b) div ?b + 1\n  (?n \\<noteq> 0) = (0 < ?n)\n  ?b \\<noteq> (0::?'a) \\<Longrightarrow>\n  (?b + ?a) div ?b = ?a div ?b + (1::?'a)\n  ?b \\<le> ?a \\<Longrightarrow> ?b + (?a - ?b) = ?a\n\ngoal (1 subgoal):\n 1. length M2 \\<le> j \\<Longrightarrow>\n    (j - length M2) div length M2 + 1 = j div length M2", "by metis"], ["proof (state)\nthis:\n  length M2 \\<le> j \\<Longrightarrow>\n  (j - length M2) div length M2 + 1 = j div length M2\n\ngoal (1 subgoal):\n 1. j < length (v # M) * length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    col (v # M \\<otimes> M2) j =\n    vec_vec_Tensor (col (v # M) (j div length M2))\n     (col M2 (j mod length M2))", "then"], ["proof (chain)\npicking this:\n  length M2 \\<le> j \\<Longrightarrow>\n  (j - length M2) div length M2 + 1 = j div length M2", "have \n           \"j \\<ge> length M2 \\<Longrightarrow> \n                    ((j- length M2) mod length M2) = j mod (length M2)\""], ["proof (prove)\nusing this:\n  length M2 \\<le> j \\<Longrightarrow>\n  (j - length M2) div length M2 + 1 = j div length M2\n\ngoal (1 subgoal):\n 1. length M2 \\<le> j \\<Longrightarrow>\n    (j - length M2) mod length M2 = j mod length M2", "using le_mod_geq"], ["proof (prove)\nusing this:\n  length M2 \\<le> j \\<Longrightarrow>\n  (j - length M2) div length M2 + 1 = j div length M2\n  ?n \\<le> ?m \\<Longrightarrow> ?m mod ?n = (?m - ?n) mod ?n\n\ngoal (1 subgoal):\n 1. length M2 \\<le> j \\<Longrightarrow>\n    (j - length M2) mod length M2 = j mod length M2", "by metis"], ["proof (state)\nthis:\n  length M2 \\<le> j \\<Longrightarrow>\n  (j - length M2) mod length M2 = j mod length M2\n\ngoal (1 subgoal):\n 1. j < length (v # M) * length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    col (v # M \\<otimes> M2) j =\n    vec_vec_Tensor (col (v # M) (j div length M2))\n     (col M2 (j mod length M2))", "with 6"], ["proof (chain)\npicking this:\n  length M2 \\<le> j \\<Longrightarrow>\n  (j - length M2) div length M2 + 1 = j div length M2\n  length M2 \\<le> j \\<Longrightarrow>\n  (j - length M2) mod length M2 = j mod length M2", "have 7:\n         \"j \\<ge> length M2 \\<Longrightarrow> \n              col (M \\<otimes> M2) (j-length M2) \n                     = vec_vec_Tensor (col M ((j-length M2) div length M2)) \n                                (col M2 (j mod length M2))\""], ["proof (prove)\nusing this:\n  length M2 \\<le> j \\<Longrightarrow>\n  (j - length M2) div length M2 + 1 = j div length M2\n  length M2 \\<le> j \\<Longrightarrow>\n  (j - length M2) mod length M2 = j mod length M2\n\ngoal (1 subgoal):\n 1. length M2 \\<le> j \\<Longrightarrow>\n    col (M \\<otimes> M2) (j - length M2) =\n    vec_vec_Tensor (col M ((j - length M2) div length M2))\n     (col M2 (j mod length M2))", "using 5"], ["proof (prove)\nusing this:\n  length M2 \\<le> j \\<Longrightarrow>\n  (j - length M2) div length M2 + 1 = j div length M2\n  length M2 \\<le> j \\<Longrightarrow>\n  (j - length M2) mod length M2 = j mod length M2\n  length M2 \\<le> j \\<Longrightarrow>\n  col (M \\<otimes> M2) (j - length M2) =\n  vec_vec_Tensor (col M ((j - length M2) div length M2))\n   (col M2 ((j - length M2) mod length M2))\n\ngoal (1 subgoal):\n 1. length M2 \\<le> j \\<Longrightarrow>\n    col (M \\<otimes> M2) (j - length M2) =\n    vec_vec_Tensor (col M ((j - length M2) div length M2))\n     (col M2 (j mod length M2))", "by auto"], ["proof (state)\nthis:\n  length M2 \\<le> j \\<Longrightarrow>\n  col (M \\<otimes> M2) (j - length M2) =\n  vec_vec_Tensor (col M ((j - length M2) div length M2))\n   (col M2 (j mod length M2))\n\ngoal (1 subgoal):\n 1. j < length (v # M) * length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    col (v # M \\<otimes> M2) j =\n    vec_vec_Tensor (col (v # M) (j div length M2))\n     (col M2 (j mod length M2))", "moreover"], ["proof (state)\nthis:\n  length M2 \\<le> j \\<Longrightarrow>\n  col (M \\<otimes> M2) (j - length M2) =\n  vec_vec_Tensor (col M ((j - length M2) div length M2))\n   (col M2 (j mod length M2))\n\ngoal (1 subgoal):\n 1. j < length (v # M) * length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    col (v # M \\<otimes> M2) j =\n    vec_vec_Tensor (col (v # M) (j div length M2))\n     (col M2 (j mod length M2))", "have \"k<(length M) \\<Longrightarrow> (col M k) = (col (v#M) (k+1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k < length M \\<Longrightarrow> col M k = col (v # M) (k + 1)", "unfolding col_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. k < length M \\<Longrightarrow> M ! k = (v # M) ! (k + 1)", "by auto"], ["proof (state)\nthis:\n  k < length M \\<Longrightarrow> col M k = col (v # M) (k + 1)\n\ngoal (1 subgoal):\n 1. j < length (v # M) * length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    col (v # M \\<otimes> M2) j =\n    vec_vec_Tensor (col (v # M) (j div length M2))\n     (col M2 (j mod length M2))", "ultimately"], ["proof (chain)\npicking this:\n  length M2 \\<le> j \\<Longrightarrow>\n  col (M \\<otimes> M2) (j - length M2) =\n  vec_vec_Tensor (col M ((j - length M2) div length M2))\n   (col M2 (j mod length M2))\n  k < length M \\<Longrightarrow> col M k = col (v # M) (k + 1)", "have \"j \\<ge> length M2 \\<Longrightarrow> \n              col (M \\<otimes> M2) (j-length M2) \n                     = vec_vec_Tensor (col (v#M) (j div length M2)) \n                                (col M2 (j mod length M2))\""], ["proof (prove)\nusing this:\n  length M2 \\<le> j \\<Longrightarrow>\n  col (M \\<otimes> M2) (j - length M2) =\n  vec_vec_Tensor (col M ((j - length M2) div length M2))\n   (col M2 (j mod length M2))\n  k < length M \\<Longrightarrow> col M k = col (v # M) (k + 1)\n\ngoal (1 subgoal):\n 1. length M2 \\<le> j \\<Longrightarrow>\n    col (M \\<otimes> M2) (j - length M2) =\n    vec_vec_Tensor (col (v # M) (j div length M2))\n     (col M2 (j mod length M2))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>length M2 \\<le> j;\n     length M2 \\<le> j \\<Longrightarrow>\n     col (M \\<otimes> M2) (j - length M2) =\n     vec_vec_Tensor (col M ((j - length M2) div length M2))\n      (col M2 (j mod length M2));\n     k < length M \\<Longrightarrow> col M k = col (v # M) (k + 1)\\<rbrakk>\n    \\<Longrightarrow> col (M \\<otimes> M2) (j - length M2) =\n                      vec_vec_Tensor (col (v # M) (j div length M2))\n                       (col M2 (j mod length M2))", "assume temp:\"j \\<ge> length M2 \""], ["proof (state)\nthis:\n  length M2 \\<le> j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>length M2 \\<le> j;\n     length M2 \\<le> j \\<Longrightarrow>\n     col (M \\<otimes> M2) (j - length M2) =\n     vec_vec_Tensor (col M ((j - length M2) div length M2))\n      (col M2 (j mod length M2));\n     k < length M \\<Longrightarrow> col M k = col (v # M) (k + 1)\\<rbrakk>\n    \\<Longrightarrow> col (M \\<otimes> M2) (j - length M2) =\n                      vec_vec_Tensor (col (v # M) (j div length M2))\n                       (col M2 (j mod length M2))", "have \" j- (length M2) < (length M)*(length M2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j - length M2 < length M * length M2", "using 2 temp"], ["proof (prove)\nusing this:\n  length M2 \\<le> j \\<Longrightarrow> j - length M2 < length M * length M2\n  length M2 \\<le> j\n\ngoal (1 subgoal):\n 1. j - length M2 < length M * length M2", "by auto"], ["proof (state)\nthis:\n  j - length M2 < length M * length M2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>length M2 \\<le> j;\n     length M2 \\<le> j \\<Longrightarrow>\n     col (M \\<otimes> M2) (j - length M2) =\n     vec_vec_Tensor (col M ((j - length M2) div length M2))\n      (col M2 (j mod length M2));\n     k < length M \\<Longrightarrow> col M k = col (v # M) (k + 1)\\<rbrakk>\n    \\<Longrightarrow> col (M \\<otimes> M2) (j - length M2) =\n                      vec_vec_Tensor (col (v # M) (j div length M2))\n                       (col M2 (j mod length M2))", "then"], ["proof (chain)\npicking this:\n  j - length M2 < length M * length M2", "have \"(j- (length M2)) div (length M2) < (length M)\""], ["proof (prove)\nusing this:\n  j - length M2 < length M * length M2\n\ngoal (1 subgoal):\n 1. (j - length M2) div length M2 < length M", "using div_right_ineq mult.commute"], ["proof (prove)\nusing this:\n  j - length M2 < length M * length M2\n  ?x < ?y * ?z \\<Longrightarrow> ?x div ?y < ?z\n  ?a * ?b = ?b * ?a\n\ngoal (1 subgoal):\n 1. (j - length M2) div length M2 < length M", "by metis"], ["proof (state)\nthis:\n  (j - length M2) div length M2 < length M\n\ngoal (1 subgoal):\n 1. \\<lbrakk>length M2 \\<le> j;\n     length M2 \\<le> j \\<Longrightarrow>\n     col (M \\<otimes> M2) (j - length M2) =\n     vec_vec_Tensor (col M ((j - length M2) div length M2))\n      (col M2 (j mod length M2));\n     k < length M \\<Longrightarrow> col M k = col (v # M) (k + 1)\\<rbrakk>\n    \\<Longrightarrow> col (M \\<otimes> M2) (j - length M2) =\n                      vec_vec_Tensor (col (v # M) (j div length M2))\n                       (col M2 (j mod length M2))", "moreover"], ["proof (state)\nthis:\n  (j - length M2) div length M2 < length M\n\ngoal (1 subgoal):\n 1. \\<lbrakk>length M2 \\<le> j;\n     length M2 \\<le> j \\<Longrightarrow>\n     col (M \\<otimes> M2) (j - length M2) =\n     vec_vec_Tensor (col M ((j - length M2) div length M2))\n      (col M2 (j mod length M2));\n     k < length M \\<Longrightarrow> col M k = col (v # M) (k + 1)\\<rbrakk>\n    \\<Longrightarrow> col (M \\<otimes> M2) (j - length M2) =\n                      vec_vec_Tensor (col (v # M) (j div length M2))\n                       (col M2 (j mod length M2))", "have \n                 \"((j- (length M2)) div (length M2)<(length M) \n                     \\<longrightarrow> (col M ((j- (length M2)) div (length M2))) \n                          = (col (v#M) ((j- (length M2)) div (length M2)+1)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (j - length M2) div length M2 < length M \\<longrightarrow>\n    col M ((j - length M2) div length M2) =\n    col (v # M) ((j - length M2) div length M2 + 1)", "unfolding col_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (j - length M2) div length M2 < length M \\<longrightarrow>\n    M ! ((j - length M2) div length M2) =\n    (v # M) ! ((j - length M2) div length M2 + 1)", "by auto"], ["proof (state)\nthis:\n  (j - length M2) div length M2 < length M \\<longrightarrow>\n  col M ((j - length M2) div length M2) =\n  col (v # M) ((j - length M2) div length M2 + 1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>length M2 \\<le> j;\n     length M2 \\<le> j \\<Longrightarrow>\n     col (M \\<otimes> M2) (j - length M2) =\n     vec_vec_Tensor (col M ((j - length M2) div length M2))\n      (col M2 (j mod length M2));\n     k < length M \\<Longrightarrow> col M k = col (v # M) (k + 1)\\<rbrakk>\n    \\<Longrightarrow> col (M \\<otimes> M2) (j - length M2) =\n                      vec_vec_Tensor (col (v # M) (j div length M2))\n                       (col M2 (j mod length M2))", "ultimately"], ["proof (chain)\npicking this:\n  (j - length M2) div length M2 < length M\n  (j - length M2) div length M2 < length M \\<longrightarrow>\n  col M ((j - length M2) div length M2) =\n  col (v # M) ((j - length M2) div length M2 + 1)", "have temp1:\n                      \"(col (v#M) (((j-length M2) div length M2)+1)) \n                                  = (col M (((j-length M2) div length M2)))\""], ["proof (prove)\nusing this:\n  (j - length M2) div length M2 < length M\n  (j - length M2) div length M2 < length M \\<longrightarrow>\n  col M ((j - length M2) div length M2) =\n  col (v # M) ((j - length M2) div length M2 + 1)\n\ngoal (1 subgoal):\n 1. col (v # M) ((j - length M2) div length M2 + 1) =\n    col M ((j - length M2) div length M2)", "by auto"], ["proof (state)\nthis:\n  col (v # M) ((j - length M2) div length M2 + 1) =\n  col M ((j - length M2) div length M2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>length M2 \\<le> j;\n     length M2 \\<le> j \\<Longrightarrow>\n     col (M \\<otimes> M2) (j - length M2) =\n     vec_vec_Tensor (col M ((j - length M2) div length M2))\n      (col M2 (j mod length M2));\n     k < length M \\<Longrightarrow> col M k = col (v # M) (k + 1)\\<rbrakk>\n    \\<Longrightarrow> col (M \\<otimes> M2) (j - length M2) =\n                      vec_vec_Tensor (col (v # M) (j div length M2))\n                       (col M2 (j mod length M2))", "then"], ["proof (chain)\npicking this:\n  col (v # M) ((j - length M2) div length M2 + 1) =\n  col M ((j - length M2) div length M2)", "have \"(col (v#M) (((j-length M2) div length M2)+1)) \n                                   = (col (v#M) (j div length M2))\""], ["proof (prove)\nusing this:\n  col (v # M) ((j - length M2) div length M2 + 1) =\n  col M ((j - length M2) div length M2)\n\ngoal (1 subgoal):\n 1. col (v # M) ((j - length M2) div length M2 + 1) =\n    col (v # M) (j div length M2)", "using 6 temp"], ["proof (prove)\nusing this:\n  col (v # M) ((j - length M2) div length M2 + 1) =\n  col M ((j - length M2) div length M2)\n  length M2 \\<le> j \\<Longrightarrow>\n  (j - length M2) div length M2 + 1 = j div length M2\n  length M2 \\<le> j\n\ngoal (1 subgoal):\n 1. col (v # M) ((j - length M2) div length M2 + 1) =\n    col (v # M) (j div length M2)", "by auto"], ["proof (state)\nthis:\n  col (v # M) ((j - length M2) div length M2 + 1) =\n  col (v # M) (j div length M2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>length M2 \\<le> j;\n     length M2 \\<le> j \\<Longrightarrow>\n     col (M \\<otimes> M2) (j - length M2) =\n     vec_vec_Tensor (col M ((j - length M2) div length M2))\n      (col M2 (j mod length M2));\n     k < length M \\<Longrightarrow> col M k = col (v # M) (k + 1)\\<rbrakk>\n    \\<Longrightarrow> col (M \\<otimes> M2) (j - length M2) =\n                      vec_vec_Tensor (col (v # M) (j div length M2))\n                       (col M2 (j mod length M2))", "then"], ["proof (chain)\npicking this:\n  col (v # M) ((j - length M2) div length M2 + 1) =\n  col (v # M) (j div length M2)", "show ?thesis"], ["proof (prove)\nusing this:\n  col (v # M) ((j - length M2) div length M2 + 1) =\n  col (v # M) (j div length M2)\n\ngoal (1 subgoal):\n 1. col (M \\<otimes> M2) (j - length M2) =\n    vec_vec_Tensor (col (v # M) (j div length M2))\n     (col M2 (j mod length M2))", "using temp1 7"], ["proof (prove)\nusing this:\n  col (v # M) ((j - length M2) div length M2 + 1) =\n  col (v # M) (j div length M2)\n  col (v # M) ((j - length M2) div length M2 + 1) =\n  col M ((j - length M2) div length M2)\n  length M2 \\<le> j \\<Longrightarrow>\n  col (M \\<otimes> M2) (j - length M2) =\n  vec_vec_Tensor (col M ((j - length M2) div length M2))\n   (col M2 (j mod length M2))\n\ngoal (1 subgoal):\n 1. col (M \\<otimes> M2) (j - length M2) =\n    vec_vec_Tensor (col (v # M) (j div length M2))\n     (col M2 (j mod length M2))", "by (metis temp)"], ["proof (state)\nthis:\n  col (M \\<otimes> M2) (j - length M2) =\n  vec_vec_Tensor (col (v # M) (j div length M2)) (col M2 (j mod length M2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length M2 \\<le> j \\<Longrightarrow>\n  col (M \\<otimes> M2) (j - length M2) =\n  vec_vec_Tensor (col (v # M) (j div length M2)) (col M2 (j mod length M2))\n\ngoal (1 subgoal):\n 1. j < length (v # M) * length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    col (v # M \\<otimes> M2) j =\n    vec_vec_Tensor (col (v # M) (j div length M2))\n     (col M2 (j mod length M2))", "then"], ["proof (chain)\npicking this:\n  length M2 \\<le> j \\<Longrightarrow>\n  col (M \\<otimes> M2) (j - length M2) =\n  vec_vec_Tensor (col (v # M) (j div length M2)) (col M2 (j mod length M2))", "have \"j \\<ge> length M2 \\<Longrightarrow> \n              col ((v#M) \\<otimes> M2) j \n                     = vec_vec_Tensor (col (v#M) (j div length M2)) \n                                (col M2 (j mod length M2))\""], ["proof (prove)\nusing this:\n  length M2 \\<le> j \\<Longrightarrow>\n  col (M \\<otimes> M2) (j - length M2) =\n  vec_vec_Tensor (col (v # M) (j div length M2)) (col M2 (j mod length M2))\n\ngoal (1 subgoal):\n 1. length M2 \\<le> j \\<Longrightarrow>\n    col (v # M \\<otimes> M2) j =\n    vec_vec_Tensor (col (v # M) (j div length M2))\n     (col M2 (j mod length M2))", "using col_def 4"], ["proof (prove)\nusing this:\n  length M2 \\<le> j \\<Longrightarrow>\n  col (M \\<otimes> M2) (j - length M2) =\n  vec_vec_Tensor (col (v # M) (j div length M2)) (col M2 (j mod length M2))\n  col ?m ?i \\<equiv> ?m ! ?i\n  length M2 \\<le> j \\<Longrightarrow>\n  col (v # M \\<otimes> M2) j = (M \\<otimes> M2) ! (j - length M2)\n\ngoal (1 subgoal):\n 1. length M2 \\<le> j \\<Longrightarrow>\n    col (v # M \\<otimes> M2) j =\n    vec_vec_Tensor (col (v # M) (j div length M2))\n     (col M2 (j mod length M2))", "by metis"], ["proof (state)\nthis:\n  length M2 \\<le> j \\<Longrightarrow>\n  col (v # M \\<otimes> M2) j =\n  vec_vec_Tensor (col (v # M) (j div length M2)) (col M2 (j mod length M2))\n\ngoal (1 subgoal):\n 1. j < length (v # M) * length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    col (v # M \\<otimes> M2) j =\n    vec_vec_Tensor (col (v # M) (j div length M2))\n     (col M2 (j mod length M2))", "then"], ["proof (chain)\npicking this:\n  length M2 \\<le> j \\<Longrightarrow>\n  col (v # M \\<otimes> M2) j =\n  vec_vec_Tensor (col (v # M) (j div length M2)) (col M2 (j mod length M2))", "show ?thesis"], ["proof (prove)\nusing this:\n  length M2 \\<le> j \\<Longrightarrow>\n  col (v # M \\<otimes> M2) j =\n  vec_vec_Tensor (col (v # M) (j div length M2)) (col M2 (j mod length M2))\n\ngoal (1 subgoal):\n 1. col (v # M \\<otimes> M2) j =\n    vec_vec_Tensor (col (v # M) (j div length M2))\n     (col M2 (j mod length M2))", "using step_1  col_def le_refl nat_less_le nat_neq_iff"], ["proof (prove)\nusing this:\n  length M2 \\<le> j \\<Longrightarrow>\n  col (v # M \\<otimes> M2) j =\n  vec_vec_Tensor (col (v # M) (j div length M2)) (col M2 (j mod length M2))\n  j < length M2 \\<Longrightarrow>\n  col (v # M \\<otimes> M2) j =\n  vec_vec_Tensor ((v # M) ! (j div length M2)) (col M2 (j mod length M2))\n  col ?m ?i \\<equiv> ?m ! ?i\n  ?n \\<le> ?n\n  (?m < ?n) = (?m \\<le> ?n \\<and> ?m \\<noteq> ?n)\n  (?m \\<noteq> ?n) = (?m < ?n \\<or> ?n < ?m)\n\ngoal (1 subgoal):\n 1. col (v # M \\<otimes> M2) j =\n    vec_vec_Tensor (col (v # M) (j div length M2))\n     (col M2 (j mod length M2))", "by (metis)"], ["proof (state)\nthis:\n  col (v # M \\<otimes> M2) j =\n  vec_vec_Tensor (col (v # M) (j div length M2)) (col M2 (j mod length M2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  j < length (v # M) * length M2 \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n  col (v # M \\<otimes> M2) j =\n  vec_vec_Tensor (col (v # M) (j div length M2)) (col M2 (j mod length M2))\n\ngoal (1 subgoal):\n 1. \\<And>a M1 j.\n       (\\<And>j.\n           j < length M1 * length M2 \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           col (M1 \\<otimes> M2) j =\n           vec_vec_Tensor (col M1 (j div length M2))\n            (col M2 (j mod length M2))) \\<Longrightarrow>\n       j < length (a # M1) * length M2 \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       col (a # M1 \\<otimes> M2) j =\n       vec_vec_Tensor (col (a # M1) (j div length M2))\n        (col M2 (j mod length M2))", "then"], ["proof (chain)\npicking this:\n  j < length (v # M) * length M2 \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n  col (v # M \\<otimes> M2) j =\n  vec_vec_Tensor (col (v # M) (j div length M2)) (col M2 (j mod length M2))", "show ?case"], ["proof (prove)\nusing this:\n  j < length (v # M) * length M2 \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n  col (v # M \\<otimes> M2) j =\n  vec_vec_Tensor (col (v # M) (j div length M2)) (col M2 (j mod length M2))\n\ngoal (1 subgoal):\n 1. j < length (v # M) * length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<longrightarrow>\n    col (v # M \\<otimes> M2) j =\n    vec_vec_Tensor (col (v # M) (j div length M2))\n     (col M2 (j mod length M2))", "by auto"], ["proof (state)\nthis:\n  j < length (v # M) * length M2 \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  col (v # M \\<otimes> M2) j =\n  vec_vec_Tensor (col (v # M) (j div length M2)) (col M2 (j mod length M2))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma row_Cons:\"row (v#M) i = (v!i)#(row M i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row (v # M) i = v ! i # row M i", "unfolding row_def map_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>w. w ! i) (v # M) = v ! i # map (\\<lambda>w. w ! i) M", "by auto"], ["", "lemma row_append:\"row (A@B)i = (row A i)@(row B i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row (A @ B) i = row A i @ row B i", "unfolding row_def map_append"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>w. w ! i) A @ map (\\<lambda>w. w ! i) B =\n    map (\\<lambda>w. w ! i) A @ map (\\<lambda>w. w ! i) B", "by auto"], ["", "lemma row_empty:\"row [] i = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row [] i = []", "unfolding row_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>w. w ! i) [] = []", "by auto"], ["", "lemma vec_vec_Tensor_right_empty:\"vec_vec_Tensor x [] = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_vec_Tensor x [] = []", "using vec_vec_Tensor.simps times.simps  length_0_conv mult_0_right vec_vec_Tensor_length"], ["proof (prove)\nusing this:\n  vec_vec_Tensor [] ?ys = []\n  vec_vec_Tensor (?x # ?xs) ?ys =\n  local.times ?x ?ys @ vec_vec_Tensor ?xs ?ys\n  local.times ?n [] = []\n  local.times ?n (?y # ?ys) = (?n * ?y) # local.times ?n ?ys\n  (length ?xs = 0) = (?xs = [])\n  ?m * 0 = 0\n  length (vec_vec_Tensor ?x ?y) = length ?x * length ?y\n\ngoal (1 subgoal):\n 1. vec_vec_Tensor x [] = []", "by (metis)"], ["", "lemma \"vec_mat_Tensor v ([]#[]) = [[]] \""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_mat_Tensor v null_matrix = null_matrix", "using vec_mat_Tensor.simps"], ["proof (prove)\nusing this:\n  vec_mat_Tensor ?xs [] = []\n  vec_mat_Tensor ?xs (?ys # ?yss) =\n  vec_vec_Tensor ?xs ?ys # vec_mat_Tensor ?xs ?yss\n\ngoal (1 subgoal):\n 1. vec_mat_Tensor v null_matrix = null_matrix", "by (metis vec_vec_Tensor_right_empty)"], ["", "lemma \"i<0 \\<longrightarrow> [[]!i] = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < 0 \\<longrightarrow> [[] ! i] = []", "by auto"], ["", "lemma row_vec_mat_Tensor_prelim:\n \"\\<forall>i.\n     ((i < (length v)*(row_length M))\\<and>(mat nr (length M) M) \n      \\<longrightarrow> row (vec_mat_Tensor v M) i \n            = times (v!(i div row_length M)) (row M (i mod row_length M)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i < length v * row_length M \\<and>\n       mat nr (length M) M \\<longrightarrow>\n       row (vec_mat_Tensor v M) i =\n       local.times (v ! (i div row_length M)) (row M (i mod row_length M))", "apply(rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length v * row_length M \\<and>\n       mat nr (length M) M \\<longrightarrow>\n       row (vec_mat_Tensor v M) i =\n       local.times (v ! (i div row_length M)) (row M (i mod row_length M))", "proof(induct M)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < length v * row_length [] \\<and>\n       mat nr (length []) [] \\<longrightarrow>\n       row (vec_mat_Tensor v []) i =\n       local.times (v ! (i div row_length []))\n        (row [] (i mod row_length []))\n 2. \\<And>a M i.\n       (\\<And>i.\n           i < length v * row_length M \\<and>\n           mat nr (length M) M \\<longrightarrow>\n           row (vec_mat_Tensor v M) i =\n           local.times (v ! (i div row_length M))\n            (row M (i mod row_length M))) \\<Longrightarrow>\n       i < length v * row_length (a # M) \\<and>\n       mat nr (length (a # M)) (a # M) \\<longrightarrow>\n       row (vec_mat_Tensor v (a # M)) i =\n       local.times (v ! (i div row_length (a # M)))\n        (row (a # M) (i mod row_length (a # M)))", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < length v * row_length [] \\<and>\n       mat nr (length []) [] \\<longrightarrow>\n       row (vec_mat_Tensor v []) i =\n       local.times (v ! (i div row_length []))\n        (row [] (i mod row_length []))\n 2. \\<And>a M i.\n       (\\<And>i.\n           i < length v * row_length M \\<and>\n           mat nr (length M) M \\<longrightarrow>\n           row (vec_mat_Tensor v M) i =\n           local.times (v ! (i div row_length M))\n            (row M (i mod row_length M))) \\<Longrightarrow>\n       i < length v * row_length (a # M) \\<and>\n       mat nr (length (a # M)) (a # M) \\<longrightarrow>\n       row (vec_mat_Tensor v (a # M)) i =\n       local.times (v ! (i div row_length (a # M)))\n        (row (a # M) (i mod row_length (a # M)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length v * row_length [] \\<and>\n    mat nr (length []) [] \\<longrightarrow>\n    row (vec_mat_Tensor v []) i =\n    local.times (v ! (i div row_length [])) (row [] (i mod row_length []))", "using Nil"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length v * row_length [] \\<and>\n    mat nr (length []) [] \\<longrightarrow>\n    row (vec_mat_Tensor v []) i =\n    local.times (v ! (i div row_length [])) (row [] (i mod row_length []))", "by (metis less_nat_zero_code mult_0_right row_length_Nil)"], ["proof (state)\nthis:\n  i < length v * row_length [] \\<and>\n  mat nr (length []) [] \\<longrightarrow>\n  row (vec_mat_Tensor v []) i =\n  local.times (v ! (i div row_length [])) (row [] (i mod row_length []))\n\ngoal (1 subgoal):\n 1. \\<And>a M i.\n       (\\<And>i.\n           i < length v * row_length M \\<and>\n           mat nr (length M) M \\<longrightarrow>\n           row (vec_mat_Tensor v M) i =\n           local.times (v ! (i div row_length M))\n            (row M (i mod row_length M))) \\<Longrightarrow>\n       i < length v * row_length (a # M) \\<and>\n       mat nr (length (a # M)) (a # M) \\<longrightarrow>\n       row (vec_mat_Tensor v (a # M)) i =\n       local.times (v ! (i div row_length (a # M)))\n        (row (a # M) (i mod row_length (a # M)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a M i.\n       (\\<And>i.\n           i < length v * row_length M \\<and>\n           mat nr (length M) M \\<longrightarrow>\n           row (vec_mat_Tensor v M) i =\n           local.times (v ! (i div row_length M))\n            (row M (i mod row_length M))) \\<Longrightarrow>\n       i < length v * row_length (a # M) \\<and>\n       mat nr (length (a # M)) (a # M) \\<longrightarrow>\n       row (vec_mat_Tensor v (a # M)) i =\n       local.times (v ! (i div row_length (a # M)))\n        (row (a # M) (i mod row_length (a # M)))", "case (Cons w N)"], ["proof (state)\nthis:\n  ?i < length v * row_length N \\<and> mat nr (length N) N \\<longrightarrow>\n  row (vec_mat_Tensor v N) ?i =\n  local.times (v ! (?i div row_length N)) (row N (?i mod row_length N))\n\ngoal (1 subgoal):\n 1. \\<And>a M i.\n       (\\<And>i.\n           i < length v * row_length M \\<and>\n           mat nr (length M) M \\<longrightarrow>\n           row (vec_mat_Tensor v M) i =\n           local.times (v ! (i div row_length M))\n            (row M (i mod row_length M))) \\<Longrightarrow>\n       i < length v * row_length (a # M) \\<and>\n       mat nr (length (a # M)) (a # M) \\<longrightarrow>\n       row (vec_mat_Tensor v (a # M)) i =\n       local.times (v ! (i div row_length (a # M)))\n        (row (a # M) (i mod row_length (a # M)))", "have \"row (vec_mat_Tensor v (w#N)) i \n                      =  row ((vec_vec_Tensor v w)#(vec_mat_Tensor v N)) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row (vec_mat_Tensor v (w # N)) i =\n    row (vec_vec_Tensor v w # vec_mat_Tensor v N) i", "using vec_mat_Tensor.simps"], ["proof (prove)\nusing this:\n  vec_mat_Tensor ?xs [] = []\n  vec_mat_Tensor ?xs (?ys # ?yss) =\n  vec_vec_Tensor ?xs ?ys # vec_mat_Tensor ?xs ?yss\n\ngoal (1 subgoal):\n 1. row (vec_mat_Tensor v (w # N)) i =\n    row (vec_vec_Tensor v w # vec_mat_Tensor v N) i", "by auto"], ["proof (state)\nthis:\n  row (vec_mat_Tensor v (w # N)) i =\n  row (vec_vec_Tensor v w # vec_mat_Tensor v N) i\n\ngoal (1 subgoal):\n 1. \\<And>a M i.\n       (\\<And>i.\n           i < length v * row_length M \\<and>\n           mat nr (length M) M \\<longrightarrow>\n           row (vec_mat_Tensor v M) i =\n           local.times (v ! (i div row_length M))\n            (row M (i mod row_length M))) \\<Longrightarrow>\n       i < length v * row_length (a # M) \\<and>\n       mat nr (length (a # M)) (a # M) \\<longrightarrow>\n       row (vec_mat_Tensor v (a # M)) i =\n       local.times (v ! (i div row_length (a # M)))\n        (row (a # M) (i mod row_length (a # M)))", "then"], ["proof (chain)\npicking this:\n  row (vec_mat_Tensor v (w # N)) i =\n  row (vec_vec_Tensor v w # vec_mat_Tensor v N) i", "have 1:\"...   = ((vec_vec_Tensor v w)!i)#(row (vec_mat_Tensor v N) i)\""], ["proof (prove)\nusing this:\n  row (vec_mat_Tensor v (w # N)) i =\n  row (vec_vec_Tensor v w # vec_mat_Tensor v N) i\n\ngoal (1 subgoal):\n 1. row (vec_vec_Tensor v w # vec_mat_Tensor v N) i =\n    vec_vec_Tensor v w ! i # row (vec_mat_Tensor v N) i", "using row_Cons"], ["proof (prove)\nusing this:\n  row (vec_mat_Tensor v (w # N)) i =\n  row (vec_vec_Tensor v w # vec_mat_Tensor v N) i\n  row (?v # ?M) ?i = ?v ! ?i # row ?M ?i\n\ngoal (1 subgoal):\n 1. row (vec_vec_Tensor v w # vec_mat_Tensor v N) i =\n    vec_vec_Tensor v w ! i # row (vec_mat_Tensor v N) i", "by auto"], ["proof (state)\nthis:\n  row (vec_vec_Tensor v w # vec_mat_Tensor v N) i =\n  vec_vec_Tensor v w ! i # row (vec_mat_Tensor v N) i\n\ngoal (1 subgoal):\n 1. \\<And>a M i.\n       (\\<And>i.\n           i < length v * row_length M \\<and>\n           mat nr (length M) M \\<longrightarrow>\n           row (vec_mat_Tensor v M) i =\n           local.times (v ! (i div row_length M))\n            (row M (i mod row_length M))) \\<Longrightarrow>\n       i < length v * row_length (a # M) \\<and>\n       mat nr (length (a # M)) (a # M) \\<longrightarrow>\n       row (vec_mat_Tensor v (a # M)) i =\n       local.times (v ! (i div row_length (a # M)))\n        (row (a # M) (i mod row_length (a # M)))", "have 2:\"row_length (w#N) = length w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_length (w # N) = length w", "using row_length_def"], ["proof (prove)\nusing this:\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n\ngoal (1 subgoal):\n 1. row_length (w # N) = length w", "by auto"], ["proof (state)\nthis:\n  row_length (w # N) = length w\n\ngoal (1 subgoal):\n 1. \\<And>a M i.\n       (\\<And>i.\n           i < length v * row_length M \\<and>\n           mat nr (length M) M \\<longrightarrow>\n           row (vec_mat_Tensor v M) i =\n           local.times (v ! (i div row_length M))\n            (row M (i mod row_length M))) \\<Longrightarrow>\n       i < length v * row_length (a # M) \\<and>\n       mat nr (length (a # M)) (a # M) \\<longrightarrow>\n       row (vec_mat_Tensor v (a # M)) i =\n       local.times (v ! (i div row_length (a # M)))\n        (row (a # M) (i mod row_length (a # M)))", "then"], ["proof (chain)\npicking this:\n  row_length (w # N) = length w", "have 3:\"(mat nr (length (w#N)) (w#N)) \\<Longrightarrow> nr = length w\""], ["proof (prove)\nusing this:\n  row_length (w # N) = length w\n\ngoal (1 subgoal):\n 1. mat nr (length (w # N)) (w # N) \\<Longrightarrow> nr = length w", "using hd_in_set list.distinct(1) mat_uniqueness matrix_row_length"], ["proof (prove)\nusing this:\n  row_length (w # N) = length w\n  ?xs \\<noteq> [] \\<Longrightarrow> hd ?xs \\<in> set ?xs\n  [] \\<noteq> ?x21.0 # ?x22.0\n  \\<lbrakk>mat ?nr1.0 ?nc ?M; mat ?nr2.0 ?nc ?M; ?z = hd ?M;\n   ?M \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x\\<in>set ?M. ?nr1.0 = ?nr2.0\n  mat ?nr ?nc ?M \\<Longrightarrow> mat (row_length ?M) (length ?M) ?M\n\ngoal (1 subgoal):\n 1. mat nr (length (w # N)) (w # N) \\<Longrightarrow> nr = length w", "by metis"], ["proof (state)\nthis:\n  mat nr (length (w # N)) (w # N) \\<Longrightarrow> nr = length w\n\ngoal (1 subgoal):\n 1. \\<And>a M i.\n       (\\<And>i.\n           i < length v * row_length M \\<and>\n           mat nr (length M) M \\<longrightarrow>\n           row (vec_mat_Tensor v M) i =\n           local.times (v ! (i div row_length M))\n            (row M (i mod row_length M))) \\<Longrightarrow>\n       i < length v * row_length (a # M) \\<and>\n       mat nr (length (a # M)) (a # M) \\<longrightarrow>\n       row (vec_mat_Tensor v (a # M)) i =\n       local.times (v ! (i div row_length (a # M)))\n        (row (a # M) (i mod row_length (a # M)))", "then"], ["proof (chain)\npicking this:\n  mat nr (length (w # N)) (w # N) \\<Longrightarrow> nr = length w", "have   \"((i < (length v)*(row_length (w#N))) \n               \\<and> (mat nr (length (w#N)) (w#N)) \n                 \\<Longrightarrow> row (vec_mat_Tensor v (w#N)) i \n                           = times \n                                 (v!(i div row_length (w#N))) \n                                 (row (w#N) (i mod row_length (w#N))))\""], ["proof (prove)\nusing this:\n  mat nr (length (w # N)) (w # N) \\<Longrightarrow> nr = length w\n\ngoal (1 subgoal):\n 1. i < length v * row_length (w # N) \\<and>\n    mat nr (length (w # N)) (w # N) \\<Longrightarrow>\n    row (vec_mat_Tensor v (w # N)) i =\n    local.times (v ! (i div row_length (w # N)))\n     (row (w # N) (i mod row_length (w # N)))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length v * row_length (w # N) \\<and>\n             mat nr (length (w # N)) (w # N);\n     mat nr (length (w # N)) (w # N) \\<Longrightarrow>\n     nr = length w\\<rbrakk>\n    \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                      local.times (v ! (i div row_length (w # N)))\n                       (row (w # N) (i mod row_length (w # N)))", "assume assms: \"i < (length v)*(row_length (w#N)) \n                     \\<and> (mat nr (length (w#N)) (w#N))\""], ["proof (state)\nthis:\n  i < length v * row_length (w # N) \\<and> mat nr (length (w # N)) (w # N)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length v * row_length (w # N) \\<and>\n             mat nr (length (w # N)) (w # N);\n     mat nr (length (w # N)) (w # N) \\<Longrightarrow>\n     nr = length w\\<rbrakk>\n    \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                      local.times (v ! (i div row_length (w # N)))\n                       (row (w # N) (i mod row_length (w # N)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. row (vec_mat_Tensor v (w # N)) i =\n    local.times (v ! (i div row_length (w # N)))\n     (row (w # N) (i mod row_length (w # N)))", "proof(cases N)"], ["proof (state)\ngoal (2 subgoals):\n 1. N = [] \\<Longrightarrow>\n    row (vec_mat_Tensor v (w # N)) i =\n    local.times (v ! (i div row_length (w # N)))\n     (row (w # N) (i mod row_length (w # N)))\n 2. \\<And>a list.\n       N = a # list \\<Longrightarrow>\n       row (vec_mat_Tensor v (w # N)) i =\n       local.times (v ! (i div row_length (w # N)))\n        (row (w # N) (i mod row_length (w # N)))", "case Nil"], ["proof (state)\nthis:\n  N = []\n\ngoal (2 subgoals):\n 1. N = [] \\<Longrightarrow>\n    row (vec_mat_Tensor v (w # N)) i =\n    local.times (v ! (i div row_length (w # N)))\n     (row (w # N) (i mod row_length (w # N)))\n 2. \\<And>a list.\n       N = a # list \\<Longrightarrow>\n       row (vec_mat_Tensor v (w # N)) i =\n       local.times (v ! (i div row_length (w # N)))\n        (row (w # N) (i mod row_length (w # N)))", "have \"row (vec_mat_Tensor v (w#N)) i = [(vec_vec_Tensor v w)!i]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row (vec_mat_Tensor v (w # N)) i = [vec_vec_Tensor v w ! i]", "using 1 vec_mat_Tensor.simps  Nil row_empty"], ["proof (prove)\nusing this:\n  row (vec_vec_Tensor v w # vec_mat_Tensor v N) i =\n  vec_vec_Tensor v w ! i # row (vec_mat_Tensor v N) i\n  vec_mat_Tensor ?xs [] = []\n  vec_mat_Tensor ?xs (?ys # ?yss) =\n  vec_vec_Tensor ?xs ?ys # vec_mat_Tensor ?xs ?yss\n  N = []\n  row [] ?i = []\n\ngoal (1 subgoal):\n 1. row (vec_mat_Tensor v (w # N)) i = [vec_vec_Tensor v w ! i]", "by auto"], ["proof (state)\nthis:\n  row (vec_mat_Tensor v (w # N)) i = [vec_vec_Tensor v w ! i]\n\ngoal (2 subgoals):\n 1. N = [] \\<Longrightarrow>\n    row (vec_mat_Tensor v (w # N)) i =\n    local.times (v ! (i div row_length (w # N)))\n     (row (w # N) (i mod row_length (w # N)))\n 2. \\<And>a list.\n       N = a # list \\<Longrightarrow>\n       row (vec_mat_Tensor v (w # N)) i =\n       local.times (v ! (i div row_length (w # N)))\n        (row (w # N) (i mod row_length (w # N)))", "then"], ["proof (chain)\npicking this:\n  row (vec_mat_Tensor v (w # N)) i = [vec_vec_Tensor v w ! i]", "show ?thesis"], ["proof (prove)\nusing this:\n  row (vec_mat_Tensor v (w # N)) i = [vec_vec_Tensor v w ! i]\n\ngoal (1 subgoal):\n 1. row (vec_mat_Tensor v (w # N)) i =\n    local.times (v ! (i div row_length (w # N)))\n     (row (w # N) (i mod row_length (w # N)))", "proof(cases w)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>row (vec_mat_Tensor v (w # N)) i = [vec_vec_Tensor v w ! i];\n     w = []\\<rbrakk>\n    \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                      local.times (v ! (i div row_length (w # N)))\n                       (row (w # N) (i mod row_length (w # N)))\n 2. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v (w # N)) i = [vec_vec_Tensor v w ! i];\n        w = a # list\\<rbrakk>\n       \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                         local.times (v ! (i div row_length (w # N)))\n                          (row (w # N) (i mod row_length (w # N)))", "case Nil"], ["proof (state)\nthis:\n  w = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>row (vec_mat_Tensor v (w # N)) i = [vec_vec_Tensor v w ! i];\n     w = []\\<rbrakk>\n    \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                      local.times (v ! (i div row_length (w # N)))\n                       (row (w # N) (i mod row_length (w # N)))\n 2. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v (w # N)) i = [vec_vec_Tensor v w ! i];\n        w = a # list\\<rbrakk>\n       \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                         local.times (v ! (i div row_length (w # N)))\n                          (row (w # N) (i mod row_length (w # N)))", "have \"(vec_vec_Tensor v w) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_vec_Tensor v w = []", "using Nil vec_vec_Tensor_right_empty"], ["proof (prove)\nusing this:\n  w = []\n  vec_vec_Tensor ?x [] = []\n\ngoal (1 subgoal):\n 1. vec_vec_Tensor v w = []", "by auto"], ["proof (state)\nthis:\n  vec_vec_Tensor v w = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>row (vec_mat_Tensor v (w # N)) i = [vec_vec_Tensor v w ! i];\n     w = []\\<rbrakk>\n    \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                      local.times (v ! (i div row_length (w # N)))\n                       (row (w # N) (i mod row_length (w # N)))\n 2. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v (w # N)) i = [vec_vec_Tensor v w ! i];\n        w = a # list\\<rbrakk>\n       \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                         local.times (v ! (i div row_length (w # N)))\n                          (row (w # N) (i mod row_length (w # N)))", "moreover"], ["proof (state)\nthis:\n  vec_vec_Tensor v w = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>row (vec_mat_Tensor v (w # N)) i = [vec_vec_Tensor v w ! i];\n     w = []\\<rbrakk>\n    \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                      local.times (v ! (i div row_length (w # N)))\n                       (row (w # N) (i mod row_length (w # N)))\n 2. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v (w # N)) i = [vec_vec_Tensor v w ! i];\n        w = a # list\\<rbrakk>\n       \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                         local.times (v ! (i div row_length (w # N)))\n                          (row (w # N) (i mod row_length (w # N)))", "have \" (length v)*(row_length (w#N)) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length v * row_length (w # N) = 0", "using Nil row_length_def"], ["proof (prove)\nusing this:\n  w = []\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n\ngoal (1 subgoal):\n 1. length v * row_length (w # N) = 0", "by auto"], ["proof (state)\nthis:\n  length v * row_length (w # N) = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>row (vec_mat_Tensor v (w # N)) i = [vec_vec_Tensor v w ! i];\n     w = []\\<rbrakk>\n    \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                      local.times (v ! (i div row_length (w # N)))\n                       (row (w # N) (i mod row_length (w # N)))\n 2. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v (w # N)) i = [vec_vec_Tensor v w ! i];\n        w = a # list\\<rbrakk>\n       \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                         local.times (v ! (i div row_length (w # N)))\n                          (row (w # N) (i mod row_length (w # N)))", "then"], ["proof (chain)\npicking this:\n  length v * row_length (w # N) = 0", "have \" [(vec_vec_Tensor v [])!i] = []\""], ["proof (prove)\nusing this:\n  length v * row_length (w # N) = 0\n\ngoal (1 subgoal):\n 1. [vec_vec_Tensor v [] ! i] = []", "using assms less_nat_zero_code"], ["proof (prove)\nusing this:\n  length v * row_length (w # N) = 0\n  i < length v * row_length (w # N) \\<and> mat nr (length (w # N)) (w # N)\n  (?n < 0) = False\n\ngoal (1 subgoal):\n 1. [vec_vec_Tensor v [] ! i] = []", "by metis"], ["proof (state)\nthis:\n  [vec_vec_Tensor v [] ! i] = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>row (vec_mat_Tensor v (w # N)) i = [vec_vec_Tensor v w ! i];\n     w = []\\<rbrakk>\n    \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                      local.times (v ! (i div row_length (w # N)))\n                       (row (w # N) (i mod row_length (w # N)))\n 2. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v (w # N)) i = [vec_vec_Tensor v w ! i];\n        w = a # list\\<rbrakk>\n       \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                         local.times (v ! (i div row_length (w # N)))\n                          (row (w # N) (i mod row_length (w # N)))", "ultimately"], ["proof (chain)\npicking this:\n  vec_vec_Tensor v w = []\n  [vec_vec_Tensor v [] ! i] = []", "show ?thesis"], ["proof (prove)\nusing this:\n  vec_vec_Tensor v w = []\n  [vec_vec_Tensor v [] ! i] = []\n\ngoal (1 subgoal):\n 1. row (vec_mat_Tensor v (w # N)) i =\n    local.times (v ! (i div row_length (w # N)))\n     (row (w # N) (i mod row_length (w # N)))", "using vec_vec_Tensor.simps row_empty Nil assms list.distinct(1)"], ["proof (prove)\nusing this:\n  vec_vec_Tensor v w = []\n  [vec_vec_Tensor v [] ! i] = []\n  vec_vec_Tensor [] ?ys = []\n  vec_vec_Tensor (?x # ?xs) ?ys =\n  local.times ?x ?ys @ vec_vec_Tensor ?xs ?ys\n  row [] ?i = []\n  w = []\n  i < length v * row_length (w # N) \\<and> mat nr (length (w # N)) (w # N)\n  [] \\<noteq> ?x21.0 # ?x22.0\n\ngoal (1 subgoal):\n 1. row (vec_mat_Tensor v (w # N)) i =\n    local.times (v ! (i div row_length (w # N)))\n     (row (w # N) (i mod row_length (w # N)))", "by (metis)"], ["proof (state)\nthis:\n  row (vec_mat_Tensor v (w # N)) i =\n  local.times (v ! (i div row_length (w # N)))\n   (row (w # N) (i mod row_length (w # N)))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v (w # N)) i = [vec_vec_Tensor v w ! i];\n        w = a # list\\<rbrakk>\n       \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                         local.times (v ! (i div row_length (w # N)))\n                          (row (w # N) (i mod row_length (w # N)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v (w # N)) i = [vec_vec_Tensor v w ! i];\n        w = a # list\\<rbrakk>\n       \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                         local.times (v ! (i div row_length (w # N)))\n                          (row (w # N) (i mod row_length (w # N)))", "case (Cons a w1)"], ["proof (state)\nthis:\n  w = a # w1\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v (w # N)) i = [vec_vec_Tensor v w ! i];\n        w = a # list\\<rbrakk>\n       \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                         local.times (v ! (i div row_length (w # N)))\n                          (row (w # N) (i mod row_length (w # N)))", "have 1:\"w \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<noteq> []", "using Cons"], ["proof (prove)\nusing this:\n  w = a # w1\n\ngoal (1 subgoal):\n 1. w \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v (w # N)) i = [vec_vec_Tensor v w ! i];\n        w = a # list\\<rbrakk>\n       \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                         local.times (v ! (i div row_length (w # N)))\n                          (row (w # N) (i mod row_length (w # N)))", "then"], ["proof (chain)\npicking this:\n  w \\<noteq> []", "have \"i < (length v)*(length w)\""], ["proof (prove)\nusing this:\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. i < length v * length w", "using assms row_length_def"], ["proof (prove)\nusing this:\n  w \\<noteq> []\n  i < length v * row_length (w # N) \\<and> mat nr (length (w # N)) (w # N)\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n\ngoal (1 subgoal):\n 1. i < length v * length w", "by auto"], ["proof (state)\nthis:\n  i < length v * length w\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v (w # N)) i = [vec_vec_Tensor v w ! i];\n        w = a # list\\<rbrakk>\n       \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                         local.times (v ! (i div row_length (w # N)))\n                          (row (w # N) (i mod row_length (w # N)))", "then"], ["proof (chain)\npicking this:\n  i < length v * length w", "have \"(vec_vec_Tensor v w)!i  \n                                       = f \n                                           (v!(i div (length w))) \n                                           (w!(i mod (length w)))\""], ["proof (prove)\nusing this:\n  i < length v * length w\n\ngoal (1 subgoal):\n 1. vec_vec_Tensor v w ! i = v ! (i div length w) * w ! (i mod length w)", "using vec_vec_Tensor_elements 1 allI"], ["proof (prove)\nusing this:\n  i < length v * length w\n  ?y \\<noteq> [] \\<Longrightarrow>\n  \\<forall>i<length ?x * length ?y.\n     vec_vec_Tensor ?x ?y ! i =\n     ?x ! (i div length ?y) * ?y ! (i mod length ?y)\n  w \\<noteq> []\n  (\\<And>x. ?P x) \\<Longrightarrow> \\<forall>x. ?P x\n\ngoal (1 subgoal):\n 1. vec_vec_Tensor v w ! i = v ! (i div length w) * w ! (i mod length w)", "by auto"], ["proof (state)\nthis:\n  vec_vec_Tensor v w ! i = v ! (i div length w) * w ! (i mod length w)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v (w # N)) i = [vec_vec_Tensor v w ! i];\n        w = a # list\\<rbrakk>\n       \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                         local.times (v ! (i div row_length (w # N)))\n                          (row (w # N) (i mod row_length (w # N)))", "then"], ["proof (chain)\npicking this:\n  vec_vec_Tensor v w ! i = v ! (i div length w) * w ! (i mod length w)", "have \"(row (vec_mat_Tensor v (w#N)) i)\n                                = times \n                                      (v!(i div row_length (w#N))) \n                                      (row (w#N) (i mod (length w)))\""], ["proof (prove)\nusing this:\n  vec_vec_Tensor v w ! i = v ! (i div length w) * w ! (i mod length w)\n\ngoal (1 subgoal):\n 1. row (vec_mat_Tensor v (w # N)) i =\n    local.times (v ! (i div row_length (w # N)))\n     (row (w # N) (i mod length w))", "using Cons vec_mat_Tensor.simps row_def  row_length_def 2 Nil row_Cons \n                   row_empty times.simps(1) times.simps(2)"], ["proof (prove)\nusing this:\n  vec_vec_Tensor v w ! i = v ! (i div length w) * w ! (i mod length w)\n  w = a # w1\n  vec_mat_Tensor ?xs [] = []\n  vec_mat_Tensor ?xs (?ys # ?yss) =\n  vec_vec_Tensor ?xs ?ys # vec_mat_Tensor ?xs ?yss\n  row ?m ?i \\<equiv> map (\\<lambda>w. w ! ?i) ?m\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n  row_length (w # N) = length w\n  N = []\n  row (?v # ?M) ?i = ?v ! ?i # row ?M ?i\n  row [] ?i = []\n  local.times ?n [] = []\n  local.times ?n (?y # ?ys) = (?n * ?y) # local.times ?n ?ys\n\ngoal (1 subgoal):\n 1. row (vec_mat_Tensor v (w # N)) i =\n    local.times (v ! (i div row_length (w # N)))\n     (row (w # N) (i mod length w))", "by metis"], ["proof (state)\nthis:\n  row (vec_mat_Tensor v (w # N)) i =\n  local.times (v ! (i div row_length (w # N)))\n   (row (w # N) (i mod length w))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v (w # N)) i = [vec_vec_Tensor v w ! i];\n        w = a # list\\<rbrakk>\n       \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                         local.times (v ! (i div row_length (w # N)))\n                          (row (w # N) (i mod row_length (w # N)))", "then"], ["proof (chain)\npicking this:\n  row (vec_mat_Tensor v (w # N)) i =\n  local.times (v ! (i div row_length (w # N)))\n   (row (w # N) (i mod length w))", "show ?thesis"], ["proof (prove)\nusing this:\n  row (vec_mat_Tensor v (w # N)) i =\n  local.times (v ! (i div row_length (w # N)))\n   (row (w # N) (i mod length w))\n\ngoal (1 subgoal):\n 1. row (vec_mat_Tensor v (w # N)) i =\n    local.times (v ! (i div row_length (w # N)))\n     (row (w # N) (i mod row_length (w # N)))", "using row_def 2"], ["proof (prove)\nusing this:\n  row (vec_mat_Tensor v (w # N)) i =\n  local.times (v ! (i div row_length (w # N)))\n   (row (w # N) (i mod length w))\n  row ?m ?i \\<equiv> map (\\<lambda>w. w ! ?i) ?m\n  row_length (w # N) = length w\n\ngoal (1 subgoal):\n 1. row (vec_mat_Tensor v (w # N)) i =\n    local.times (v ! (i div row_length (w # N)))\n     (row (w # N) (i mod row_length (w # N)))", "by metis"], ["proof (state)\nthis:\n  row (vec_mat_Tensor v (w # N)) i =\n  local.times (v ! (i div row_length (w # N)))\n   (row (w # N) (i mod row_length (w # N)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  row (vec_mat_Tensor v (w # N)) i =\n  local.times (v ! (i div row_length (w # N)))\n   (row (w # N) (i mod row_length (w # N)))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       N = a # list \\<Longrightarrow>\n       row (vec_mat_Tensor v (w # N)) i =\n       local.times (v ! (i div row_length (w # N)))\n        (row (w # N) (i mod row_length (w # N)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       N = a # list \\<Longrightarrow>\n       row (vec_mat_Tensor v (w # N)) i =\n       local.times (v ! (i div row_length (w # N)))\n        (row (w # N) (i mod row_length (w # N)))", "case (Cons w1 N1)"], ["proof (state)\nthis:\n  N = w1 # N1\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       N = a # list \\<Longrightarrow>\n       row (vec_mat_Tensor v (w # N)) i =\n       local.times (v ! (i div row_length (w # N)))\n        (row (w # N) (i mod row_length (w # N)))", "have Cons_0:\"row_length N = length w1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_length N = length w1", "using Cons row_length_def"], ["proof (prove)\nusing this:\n  N = w1 # N1\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n\ngoal (1 subgoal):\n 1. row_length N = length w1", "by auto"], ["proof (state)\nthis:\n  row_length N = length w1\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       N = a # list \\<Longrightarrow>\n       row (vec_mat_Tensor v (w # N)) i =\n       local.times (v ! (i div row_length (w # N)))\n        (row (w # N) (i mod row_length (w # N)))", "have \"mat nr (length (w#w1#N1)) (w#w1#N1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat nr (length (w # w1 # N1)) (w # w1 # N1)", "using assms Cons"], ["proof (prove)\nusing this:\n  i < length v * row_length (w # N) \\<and> mat nr (length (w # N)) (w # N)\n  N = w1 # N1\n\ngoal (1 subgoal):\n 1. mat nr (length (w # w1 # N1)) (w # w1 # N1)", "by auto"], ["proof (state)\nthis:\n  mat nr (length (w # w1 # N1)) (w # w1 # N1)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       N = a # list \\<Longrightarrow>\n       row (vec_mat_Tensor v (w # N)) i =\n       local.times (v ! (i div row_length (w # N)))\n        (row (w # N) (i mod row_length (w # N)))", "then"], ["proof (chain)\npicking this:\n  mat nr (length (w # w1 # N1)) (w # w1 # N1)", "have Cons_1:\n                     \"mat (row_length (w#w1#N1)) (length (w#w1#N1)) (w#w1#N1)\""], ["proof (prove)\nusing this:\n  mat nr (length (w # w1 # N1)) (w # w1 # N1)\n\ngoal (1 subgoal):\n 1. mat (row_length (w # w1 # N1)) (length (w # w1 # N1)) (w # w1 # N1)", "by (metis matrix_row_length)"], ["proof (state)\nthis:\n  mat (row_length (w # w1 # N1)) (length (w # w1 # N1)) (w # w1 # N1)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       N = a # list \\<Longrightarrow>\n       row (vec_mat_Tensor v (w # N)) i =\n       local.times (v ! (i div row_length (w # N)))\n        (row (w # N) (i mod row_length (w # N)))", "then"], ["proof (chain)\npicking this:\n  mat (row_length (w # w1 # N1)) (length (w # w1 # N1)) (w # w1 # N1)", "have Cons_2:\n                     \"mat (row_length (w1#N1)) (length (w1#N1)) (w1#N1)\""], ["proof (prove)\nusing this:\n  mat (row_length (w # w1 # N1)) (length (w # w1 # N1)) (w # w1 # N1)\n\ngoal (1 subgoal):\n 1. mat (row_length (w1 # N1)) (length (w1 # N1)) (w1 # N1)", "by (metis reduct_matrix)"], ["proof (state)\nthis:\n  mat (row_length (w1 # N1)) (length (w1 # N1)) (w1 # N1)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       N = a # list \\<Longrightarrow>\n       row (vec_mat_Tensor v (w # N)) i =\n       local.times (v ! (i div row_length (w # N)))\n        (row (w # N) (i mod row_length (w # N)))", "then"], ["proof (chain)\npicking this:\n  mat (row_length (w1 # N1)) (length (w1 # N1)) (w1 # N1)", "have Cons_3:\"(length w1 = length w)\""], ["proof (prove)\nusing this:\n  mat (row_length (w1 # N1)) (length (w1 # N1)) (w1 # N1)\n\ngoal (1 subgoal):\n 1. length w1 = length w", "using Cons_1"], ["proof (prove)\nusing this:\n  mat (row_length (w1 # N1)) (length (w1 # N1)) (w1 # N1)\n  mat (row_length (w # w1 # N1)) (length (w # w1 # N1)) (w # w1 # N1)\n\ngoal (1 subgoal):\n 1. length w1 = length w", "unfolding mat_def row_length_def Ball_def vec_def"], ["proof (prove)\nusing this:\n  length (w1 # N1) = length (w1 # N1) \\<and>\n  (\\<forall>x.\n      x \\<in> set (w1 # N1) \\<longrightarrow>\n      length x = (if w1 # N1 = [] then 0 else length (hd (w1 # N1))))\n  length (w # w1 # N1) = length (w # w1 # N1) \\<and>\n  (\\<forall>x.\n      x \\<in> set (w # w1 # N1) \\<longrightarrow>\n      length x =\n      (if w # w1 # N1 = [] then 0 else length (hd (w # w1 # N1))))\n\ngoal (1 subgoal):\n 1. length w1 = length w", "by (metis \"2\" Cons_0 Cons_1 local.Cons row_length_eq)"], ["proof (state)\nthis:\n  length w1 = length w\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       N = a # list \\<Longrightarrow>\n       row (vec_mat_Tensor v (w # N)) i =\n       local.times (v ! (i div row_length (w # N)))\n        (row (w # N) (i mod row_length (w # N)))", "then"], ["proof (chain)\npicking this:\n  length w1 = length w", "have Cons_4:\"mat nr (length (w1#N1)) (w1#N1)\""], ["proof (prove)\nusing this:\n  length w1 = length w\n\ngoal (1 subgoal):\n 1. mat nr (length (w1 # N1)) (w1 # N1)", "using 3 Cons_2 assms hd_conv_nth list.distinct(1) nth_Cons_0 row_length_def"], ["proof (prove)\nusing this:\n  length w1 = length w\n  mat nr (length (w # N)) (w # N) \\<Longrightarrow> nr = length w\n  mat (row_length (w1 # N1)) (length (w1 # N1)) (w1 # N1)\n  i < length v * row_length (w # N) \\<and> mat nr (length (w # N)) (w # N)\n  ?xs \\<noteq> [] \\<Longrightarrow> hd ?xs = ?xs ! 0\n  [] \\<noteq> ?x21.0 # ?x22.0\n  (?x # ?xs) ! 0 = ?x\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n\ngoal (1 subgoal):\n 1. mat nr (length (w1 # N1)) (w1 # N1)", "by metis"], ["proof (state)\nthis:\n  mat nr (length (w1 # N1)) (w1 # N1)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       N = a # list \\<Longrightarrow>\n       row (vec_mat_Tensor v (w # N)) i =\n       local.times (v ! (i div row_length (w # N)))\n        (row (w # N) (i mod row_length (w # N)))", "moreover"], ["proof (state)\nthis:\n  mat nr (length (w1 # N1)) (w1 # N1)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       N = a # list \\<Longrightarrow>\n       row (vec_mat_Tensor v (w # N)) i =\n       local.times (v ! (i div row_length (w # N)))\n        (row (w # N) (i mod row_length (w # N)))", "have \"i < (length v)*(row_length (w1#N1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length v * row_length (w1 # N1)", "using assms Cons_3 row_length_def"], ["proof (prove)\nusing this:\n  i < length v * row_length (w # N) \\<and> mat nr (length (w # N)) (w # N)\n  length w1 = length w\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n\ngoal (1 subgoal):\n 1. i < length v * row_length (w1 # N1)", "by auto"], ["proof (state)\nthis:\n  i < length v * row_length (w1 # N1)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       N = a # list \\<Longrightarrow>\n       row (vec_mat_Tensor v (w # N)) i =\n       local.times (v ! (i div row_length (w # N)))\n        (row (w # N) (i mod row_length (w # N)))", "ultimately"], ["proof (chain)\npicking this:\n  mat nr (length (w1 # N1)) (w1 # N1)\n  i < length v * row_length (w1 # N1)", "have Cons_5:\"row (vec_mat_Tensor v N) i \n                                  = times \n                                      (v ! (i div row_length N)) \n                                      (row N (i mod row_length N))\""], ["proof (prove)\nusing this:\n  mat nr (length (w1 # N1)) (w1 # N1)\n  i < length v * row_length (w1 # N1)\n\ngoal (1 subgoal):\n 1. row (vec_mat_Tensor v N) i =\n    local.times (v ! (i div row_length N)) (row N (i mod row_length N))", "using Cons  Cons.hyps"], ["proof (prove)\nusing this:\n  mat nr (length (w1 # N1)) (w1 # N1)\n  i < length v * row_length (w1 # N1)\n  N = w1 # N1\n  ?i < length v * row_length N \\<and> mat nr (length N) N \\<longrightarrow>\n  row (vec_mat_Tensor v N) ?i =\n  local.times (v ! (?i div row_length N)) (row N (?i mod row_length N))\n\ngoal (1 subgoal):\n 1. row (vec_mat_Tensor v N) i =\n    local.times (v ! (i div row_length N)) (row N (i mod row_length N))", "by auto"], ["proof (state)\nthis:\n  row (vec_mat_Tensor v N) i =\n  local.times (v ! (i div row_length N)) (row N (i mod row_length N))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       N = a # list \\<Longrightarrow>\n       row (vec_mat_Tensor v (w # N)) i =\n       local.times (v ! (i div row_length (w # N)))\n        (row (w # N) (i mod row_length (w # N)))", "then"], ["proof (chain)\npicking this:\n  row (vec_mat_Tensor v N) i =\n  local.times (v ! (i div row_length N)) (row N (i mod row_length N))", "show ?thesis"], ["proof (prove)\nusing this:\n  row (vec_mat_Tensor v N) i =\n  local.times (v ! (i div row_length N)) (row N (i mod row_length N))\n\ngoal (1 subgoal):\n 1. row (vec_mat_Tensor v (w # N)) i =\n    local.times (v ! (i div row_length (w # N)))\n     (row (w # N) (i mod row_length (w # N)))", "proof(cases w)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>row (vec_mat_Tensor v N) i =\n             local.times (v ! (i div row_length N))\n              (row N (i mod row_length N));\n     w = []\\<rbrakk>\n    \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                      local.times (v ! (i div row_length (w # N)))\n                       (row (w # N) (i mod row_length (w # N)))\n 2. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v N) i =\n                local.times (v ! (i div row_length N))\n                 (row N (i mod row_length N));\n        w = a # list\\<rbrakk>\n       \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                         local.times (v ! (i div row_length (w # N)))\n                          (row (w # N) (i mod row_length (w # N)))", "case Nil"], ["proof (state)\nthis:\n  w = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>row (vec_mat_Tensor v N) i =\n             local.times (v ! (i div row_length N))\n              (row N (i mod row_length N));\n     w = []\\<rbrakk>\n    \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                      local.times (v ! (i div row_length (w # N)))\n                       (row (w # N) (i mod row_length (w # N)))\n 2. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v N) i =\n                local.times (v ! (i div row_length N))\n                 (row N (i mod row_length N));\n        w = a # list\\<rbrakk>\n       \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                         local.times (v ! (i div row_length (w # N)))\n                          (row (w # N) (i mod row_length (w # N)))", "have \"(vec_vec_Tensor v w) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_vec_Tensor v w = []", "using Nil vec_vec_Tensor_right_empty"], ["proof (prove)\nusing this:\n  w = []\n  vec_vec_Tensor ?x [] = []\n\ngoal (1 subgoal):\n 1. vec_vec_Tensor v w = []", "by auto"], ["proof (state)\nthis:\n  vec_vec_Tensor v w = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>row (vec_mat_Tensor v N) i =\n             local.times (v ! (i div row_length N))\n              (row N (i mod row_length N));\n     w = []\\<rbrakk>\n    \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                      local.times (v ! (i div row_length (w # N)))\n                       (row (w # N) (i mod row_length (w # N)))\n 2. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v N) i =\n                local.times (v ! (i div row_length N))\n                 (row N (i mod row_length N));\n        w = a # list\\<rbrakk>\n       \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                         local.times (v ! (i div row_length (w # N)))\n                          (row (w # N) (i mod row_length (w # N)))", "moreover"], ["proof (state)\nthis:\n  vec_vec_Tensor v w = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>row (vec_mat_Tensor v N) i =\n             local.times (v ! (i div row_length N))\n              (row N (i mod row_length N));\n     w = []\\<rbrakk>\n    \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                      local.times (v ! (i div row_length (w # N)))\n                       (row (w # N) (i mod row_length (w # N)))\n 2. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v N) i =\n                local.times (v ! (i div row_length N))\n                 (row N (i mod row_length N));\n        w = a # list\\<rbrakk>\n       \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                         local.times (v ! (i div row_length (w # N)))\n                          (row (w # N) (i mod row_length (w # N)))", "have \" (length v)*(row_length (w#N)) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length v * row_length (w # N) = 0", "using Nil row_length_def"], ["proof (prove)\nusing this:\n  w = []\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n\ngoal (1 subgoal):\n 1. length v * row_length (w # N) = 0", "by auto"], ["proof (state)\nthis:\n  length v * row_length (w # N) = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>row (vec_mat_Tensor v N) i =\n             local.times (v ! (i div row_length N))\n              (row N (i mod row_length N));\n     w = []\\<rbrakk>\n    \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                      local.times (v ! (i div row_length (w # N)))\n                       (row (w # N) (i mod row_length (w # N)))\n 2. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v N) i =\n                local.times (v ! (i div row_length N))\n                 (row N (i mod row_length N));\n        w = a # list\\<rbrakk>\n       \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                         local.times (v ! (i div row_length (w # N)))\n                          (row (w # N) (i mod row_length (w # N)))", "then"], ["proof (chain)\npicking this:\n  length v * row_length (w # N) = 0", "have \" [(vec_vec_Tensor v [])!i] = []\""], ["proof (prove)\nusing this:\n  length v * row_length (w # N) = 0\n\ngoal (1 subgoal):\n 1. [vec_vec_Tensor v [] ! i] = []", "using assms"], ["proof (prove)\nusing this:\n  length v * row_length (w # N) = 0\n  i < length v * row_length (w # N) \\<and> mat nr (length (w # N)) (w # N)\n\ngoal (1 subgoal):\n 1. [vec_vec_Tensor v [] ! i] = []", "by (metis less_nat_zero_code)"], ["proof (state)\nthis:\n  [vec_vec_Tensor v [] ! i] = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>row (vec_mat_Tensor v N) i =\n             local.times (v ! (i div row_length N))\n              (row N (i mod row_length N));\n     w = []\\<rbrakk>\n    \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                      local.times (v ! (i div row_length (w # N)))\n                       (row (w # N) (i mod row_length (w # N)))\n 2. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v N) i =\n                local.times (v ! (i div row_length N))\n                 (row N (i mod row_length N));\n        w = a # list\\<rbrakk>\n       \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                         local.times (v ! (i div row_length (w # N)))\n                          (row (w # N) (i mod row_length (w # N)))", "ultimately"], ["proof (chain)\npicking this:\n  vec_vec_Tensor v w = []\n  [vec_vec_Tensor v [] ! i] = []", "show ?thesis"], ["proof (prove)\nusing this:\n  vec_vec_Tensor v w = []\n  [vec_vec_Tensor v [] ! i] = []\n\ngoal (1 subgoal):\n 1. row (vec_mat_Tensor v (w # N)) i =\n    local.times (v ! (i div row_length (w # N)))\n     (row (w # N) (i mod row_length (w # N)))", "using vec_vec_Tensor.simps row_empty Nil assms"], ["proof (prove)\nusing this:\n  vec_vec_Tensor v w = []\n  [vec_vec_Tensor v [] ! i] = []\n  vec_vec_Tensor [] ?ys = []\n  vec_vec_Tensor (?x # ?xs) ?ys =\n  local.times ?x ?ys @ vec_vec_Tensor ?xs ?ys\n  row [] ?i = []\n  w = []\n  i < length v * row_length (w # N) \\<and> mat nr (length (w # N)) (w # N)\n\ngoal (1 subgoal):\n 1. row (vec_mat_Tensor v (w # N)) i =\n    local.times (v ! (i div row_length (w # N)))\n     (row (w # N) (i mod row_length (w # N)))", "by (metis list.distinct(1))"], ["proof (state)\nthis:\n  row (vec_mat_Tensor v (w # N)) i =\n  local.times (v ! (i div row_length (w # N)))\n   (row (w # N) (i mod row_length (w # N)))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v N) i =\n                local.times (v ! (i div row_length N))\n                 (row N (i mod row_length N));\n        w = a # list\\<rbrakk>\n       \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                         local.times (v ! (i div row_length (w # N)))\n                          (row (w # N) (i mod row_length (w # N)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v N) i =\n                local.times (v ! (i div row_length N))\n                 (row N (i mod row_length N));\n        w = a # list\\<rbrakk>\n       \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                         local.times (v ! (i div row_length (w # N)))\n                          (row (w # N) (i mod row_length (w # N)))", "case (Cons a w2)"], ["proof (state)\nthis:\n  w = a # w2\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v N) i =\n                local.times (v ! (i div row_length N))\n                 (row N (i mod row_length N));\n        w = a # list\\<rbrakk>\n       \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                         local.times (v ! (i div row_length (w # N)))\n                          (row (w # N) (i mod row_length (w # N)))", "have 1:\"w \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<noteq> []", "using Cons"], ["proof (prove)\nusing this:\n  w = a # w2\n\ngoal (1 subgoal):\n 1. w \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v N) i =\n                local.times (v ! (i div row_length N))\n                 (row N (i mod row_length N));\n        w = a # list\\<rbrakk>\n       \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                         local.times (v ! (i div row_length (w # N)))\n                          (row (w # N) (i mod row_length (w # N)))", "then"], ["proof (chain)\npicking this:\n  w \\<noteq> []", "have \"i < (length v)*(length w)\""], ["proof (prove)\nusing this:\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. i < length v * length w", "using assms row_length_def"], ["proof (prove)\nusing this:\n  w \\<noteq> []\n  i < length v * row_length (w # N) \\<and> mat nr (length (w # N)) (w # N)\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n\ngoal (1 subgoal):\n 1. i < length v * length w", "by auto"], ["proof (state)\nthis:\n  i < length v * length w\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v N) i =\n                local.times (v ! (i div row_length N))\n                 (row N (i mod row_length N));\n        w = a # list\\<rbrakk>\n       \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                         local.times (v ! (i div row_length (w # N)))\n                          (row (w # N) (i mod row_length (w # N)))", "then"], ["proof (chain)\npicking this:\n  i < length v * length w", "have ConsCons_2:\n                     \"(vec_vec_Tensor v w)!i = f \n                                                 (v!(i div (length w))) \n                                                 (w!(i mod (length w)))\""], ["proof (prove)\nusing this:\n  i < length v * length w\n\ngoal (1 subgoal):\n 1. vec_vec_Tensor v w ! i = v ! (i div length w) * w ! (i mod length w)", "using vec_vec_Tensor_elements 1 allI"], ["proof (prove)\nusing this:\n  i < length v * length w\n  ?y \\<noteq> [] \\<Longrightarrow>\n  \\<forall>i<length ?x * length ?y.\n     vec_vec_Tensor ?x ?y ! i =\n     ?x ! (i div length ?y) * ?y ! (i mod length ?y)\n  w \\<noteq> []\n  (\\<And>x. ?P x) \\<Longrightarrow> \\<forall>x. ?P x\n\ngoal (1 subgoal):\n 1. vec_vec_Tensor v w ! i = v ! (i div length w) * w ! (i mod length w)", "by auto"], ["proof (state)\nthis:\n  vec_vec_Tensor v w ! i = v ! (i div length w) * w ! (i mod length w)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v N) i =\n                local.times (v ! (i div row_length N))\n                 (row N (i mod row_length N));\n        w = a # list\\<rbrakk>\n       \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                         local.times (v ! (i div row_length (w # N)))\n                          (row (w # N) (i mod row_length (w # N)))", "moreover"], ["proof (state)\nthis:\n  vec_vec_Tensor v w ! i = v ! (i div length w) * w ! (i mod length w)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v N) i =\n                local.times (v ! (i div row_length N))\n                 (row N (i mod row_length N));\n        w = a # list\\<rbrakk>\n       \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                         local.times (v ! (i div row_length (w # N)))\n                          (row (w # N) (i mod row_length (w # N)))", "have \n                      \"times \n                              (v!(i div row_length (w#N))) \n                              (row (w#N) (i mod row_length (w#N))) \n                             = (f \n                                 (v!(i div (length w))) \n                                 (w!(i mod (length w))))\n                                  #(times (v ! (i div row_length N)) \n                                          (row N (i mod row_length N)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.times (v ! (i div row_length (w # N)))\n     (row (w # N) (i mod row_length (w # N))) =\n    (v ! (i div length w) * w ! (i mod length w)) #\n    local.times (v ! (i div row_length N)) (row N (i mod row_length N))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. local.times (v ! (i div row_length (w # N)))\n     (row (w # N) (i mod row_length (w # N))) =\n    (v ! (i div length w) * w ! (i mod length w)) #\n    local.times (v ! (i div row_length N)) (row N (i mod row_length N))", "have temp:\"row_length (w#N) = (row_length N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_length (w # N) = row_length N", "using row_length_def 2 Cons_3 Cons_0"], ["proof (prove)\nusing this:\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n  row_length (w # N) = length w\n  length w1 = length w\n  row_length N = length w1\n\ngoal (1 subgoal):\n 1. row_length (w # N) = row_length N", "by auto"], ["proof (state)\nthis:\n  row_length (w # N) = row_length N\n\ngoal (1 subgoal):\n 1. local.times (v ! (i div row_length (w # N)))\n     (row (w # N) (i mod row_length (w # N))) =\n    (v ! (i div length w) * w ! (i mod length w)) #\n    local.times (v ! (i div row_length N)) (row N (i mod row_length N))", "have \"(row (w#N) (i mod row_length (w#N))) \n                              = (w!(i mod (row_length (w#N))))\n                                       #(row N (i mod row_length (w#N)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row (w # N) (i mod row_length (w # N)) =\n    w ! (i mod row_length (w # N)) # row N (i mod row_length (w # N))", "unfolding row_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>wa. wa ! (i mod row_length (w # N))) (w # N) =\n    w ! (i mod row_length (w # N)) #\n    map (\\<lambda>wa. wa ! (i mod row_length (w # N))) N", "by auto"], ["proof (state)\nthis:\n  row (w # N) (i mod row_length (w # N)) =\n  w ! (i mod row_length (w # N)) # row N (i mod row_length (w # N))\n\ngoal (1 subgoal):\n 1. local.times (v ! (i div row_length (w # N)))\n     (row (w # N) (i mod row_length (w # N))) =\n    (v ! (i div length w) * w ! (i mod length w)) #\n    local.times (v ! (i div row_length N)) (row N (i mod row_length N))", "then"], ["proof (chain)\npicking this:\n  row (w # N) (i mod row_length (w # N)) =\n  w ! (i mod row_length (w # N)) # row N (i mod row_length (w # N))", "have \"...\n                              = (w!(i mod (length w)))\n                                        #(row N (i mod row_length N))\""], ["proof (prove)\nusing this:\n  row (w # N) (i mod row_length (w # N)) =\n  w ! (i mod row_length (w # N)) # row N (i mod row_length (w # N))\n\ngoal (1 subgoal):\n 1. w ! (i mod row_length (w # N)) # row N (i mod row_length (w # N)) =\n    w ! (i mod length w) # row N (i mod row_length N)", "using Cons_3 3 assms 2 neq_Nil_conv row_Cons row_empty \n                           row_length_eq"], ["proof (prove)\nusing this:\n  row (w # N) (i mod row_length (w # N)) =\n  w ! (i mod row_length (w # N)) # row N (i mod row_length (w # N))\n  length w1 = length w\n  mat nr (length (w # N)) (w # N) \\<Longrightarrow> nr = length w\n  i < length v * row_length (w # N) \\<and> mat nr (length (w # N)) (w # N)\n  row_length (w # N) = length w\n  (?xs \\<noteq> []) = (\\<exists>y ys. ?xs = y # ys)\n  row (?v # ?M) ?i = ?v ! ?i # row ?M ?i\n  row [] ?i = []\n  mat (row_length (?a # ?b # ?N)) (length (?a # ?b # ?N))\n   (?a # ?b # ?N) \\<longrightarrow>\n  row_length (?a # ?b # ?N) = row_length (?b # ?N)\n\ngoal (1 subgoal):\n 1. w ! (i mod row_length (w # N)) # row N (i mod row_length (w # N)) =\n    w ! (i mod length w) # row N (i mod row_length N)", "by (metis (hide_lams, no_types))"], ["proof (state)\nthis:\n  w ! (i mod row_length (w # N)) # row N (i mod row_length (w # N)) =\n  w ! (i mod length w) # row N (i mod row_length N)\n\ngoal (1 subgoal):\n 1. local.times (v ! (i div row_length (w # N)))\n     (row (w # N) (i mod row_length (w # N))) =\n    (v ! (i div length w) * w ! (i mod length w)) #\n    local.times (v ! (i div row_length N)) (row N (i mod row_length N))", "then"], ["proof (chain)\npicking this:\n  w ! (i mod row_length (w # N)) # row N (i mod row_length (w # N)) =\n  w ! (i mod length w) # row N (i mod row_length N)", "have \"times \n                           (v!(i div row_length (w#N)))  \n                           ((w!(i mod (length w)))\n                             #(row N (i mod row_length N)))\n                               = (f  \n                                     (v!(i div row_length (w#N))) \n                                     (w!(i mod (length w))))\n                                         #(times  (v!(i div row_length (w#N)))\n                                                      (row N (i mod row_length N)))\""], ["proof (prove)\nusing this:\n  w ! (i mod row_length (w # N)) # row N (i mod row_length (w # N)) =\n  w ! (i mod length w) # row N (i mod row_length N)\n\ngoal (1 subgoal):\n 1. local.times (v ! (i div row_length (w # N)))\n     (w ! (i mod length w) # row N (i mod row_length N)) =\n    (v ! (i div row_length (w # N)) * w ! (i mod length w)) #\n    local.times (v ! (i div row_length (w # N)))\n     (row N (i mod row_length N))", "by auto"], ["proof (state)\nthis:\n  local.times (v ! (i div row_length (w # N)))\n   (w ! (i mod length w) # row N (i mod row_length N)) =\n  (v ! (i div row_length (w # N)) * w ! (i mod length w)) #\n  local.times (v ! (i div row_length (w # N))) (row N (i mod row_length N))\n\ngoal (1 subgoal):\n 1. local.times (v ! (i div row_length (w # N)))\n     (row (w # N) (i mod row_length (w # N))) =\n    (v ! (i div length w) * w ! (i mod length w)) #\n    local.times (v ! (i div row_length N)) (row N (i mod row_length N))", "then"], ["proof (chain)\npicking this:\n  local.times (v ! (i div row_length (w # N)))\n   (w ! (i mod length w) # row N (i mod row_length N)) =\n  (v ! (i div row_length (w # N)) * w ! (i mod length w)) #\n  local.times (v ! (i div row_length (w # N))) (row N (i mod row_length N))", "have \"... =  (f  \n                                       (v!(i div length w)) \n                                       (w!(i mod (length w))))\n                                         #(times  (v!(i div row_length N))\n                                                  (row N (i mod row_length N)))\""], ["proof (prove)\nusing this:\n  local.times (v ! (i div row_length (w # N)))\n   (w ! (i mod length w) # row N (i mod row_length N)) =\n  (v ! (i div row_length (w # N)) * w ! (i mod length w)) #\n  local.times (v ! (i div row_length (w # N))) (row N (i mod row_length N))\n\ngoal (1 subgoal):\n 1. (v ! (i div row_length (w # N)) * w ! (i mod length w)) #\n    local.times (v ! (i div row_length (w # N)))\n     (row N (i mod row_length N)) =\n    (v ! (i div length w) * w ! (i mod length w)) #\n    local.times (v ! (i div row_length N)) (row N (i mod row_length N))", "using 3 Cons_3 assms temp row_length_def"], ["proof (prove)\nusing this:\n  local.times (v ! (i div row_length (w # N)))\n   (w ! (i mod length w) # row N (i mod row_length N)) =\n  (v ! (i div row_length (w # N)) * w ! (i mod length w)) #\n  local.times (v ! (i div row_length (w # N))) (row N (i mod row_length N))\n  mat nr (length (w # N)) (w # N) \\<Longrightarrow> nr = length w\n  length w1 = length w\n  i < length v * row_length (w # N) \\<and> mat nr (length (w # N)) (w # N)\n  row_length (w # N) = row_length N\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n\ngoal (1 subgoal):\n 1. (v ! (i div row_length (w # N)) * w ! (i mod length w)) #\n    local.times (v ! (i div row_length (w # N)))\n     (row N (i mod row_length N)) =\n    (v ! (i div length w) * w ! (i mod length w)) #\n    local.times (v ! (i div row_length N)) (row N (i mod row_length N))", "by auto"], ["proof (state)\nthis:\n  (v ! (i div row_length (w # N)) * w ! (i mod length w)) #\n  local.times (v ! (i div row_length (w # N)))\n   (row N (i mod row_length N)) =\n  (v ! (i div length w) * w ! (i mod length w)) #\n  local.times (v ! (i div row_length N)) (row N (i mod row_length N))\n\ngoal (1 subgoal):\n 1. local.times (v ! (i div row_length (w # N)))\n     (row (w # N) (i mod row_length (w # N))) =\n    (v ! (i div length w) * w ! (i mod length w)) #\n    local.times (v ! (i div row_length N)) (row N (i mod row_length N))", "then"], ["proof (chain)\npicking this:\n  (v ! (i div row_length (w # N)) * w ! (i mod length w)) #\n  local.times (v ! (i div row_length (w # N)))\n   (row N (i mod row_length N)) =\n  (v ! (i div length w) * w ! (i mod length w)) #\n  local.times (v ! (i div row_length N)) (row N (i mod row_length N))", "show ?thesis"], ["proof (prove)\nusing this:\n  (v ! (i div row_length (w # N)) * w ! (i mod length w)) #\n  local.times (v ! (i div row_length (w # N)))\n   (row N (i mod row_length N)) =\n  (v ! (i div length w) * w ! (i mod length w)) #\n  local.times (v ! (i div row_length N)) (row N (i mod row_length N))\n\ngoal (1 subgoal):\n 1. local.times (v ! (i div row_length (w # N)))\n     (row (w # N) (i mod row_length (w # N))) =\n    (v ! (i div length w) * w ! (i mod length w)) #\n    local.times (v ! (i div row_length N)) (row N (i mod row_length N))", "using times.simps 2 row_Cons temp"], ["proof (prove)\nusing this:\n  (v ! (i div row_length (w # N)) * w ! (i mod length w)) #\n  local.times (v ! (i div row_length (w # N)))\n   (row N (i mod row_length N)) =\n  (v ! (i div length w) * w ! (i mod length w)) #\n  local.times (v ! (i div row_length N)) (row N (i mod row_length N))\n  local.times ?n [] = []\n  local.times ?n (?y # ?ys) = (?n * ?y) # local.times ?n ?ys\n  row_length (w # N) = length w\n  row (?v # ?M) ?i = ?v ! ?i # row ?M ?i\n  row_length (w # N) = row_length N\n\ngoal (1 subgoal):\n 1. local.times (v ! (i div row_length (w # N)))\n     (row (w # N) (i mod row_length (w # N))) =\n    (v ! (i div length w) * w ! (i mod length w)) #\n    local.times (v ! (i div row_length N)) (row N (i mod row_length N))", "by metis"], ["proof (state)\nthis:\n  local.times (v ! (i div row_length (w # N)))\n   (row (w # N) (i mod row_length (w # N))) =\n  (v ! (i div length w) * w ! (i mod length w)) #\n  local.times (v ! (i div row_length N)) (row N (i mod row_length N))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.times (v ! (i div row_length (w # N)))\n   (row (w # N) (i mod row_length (w # N))) =\n  (v ! (i div length w) * w ! (i mod length w)) #\n  local.times (v ! (i div row_length N)) (row N (i mod row_length N))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v N) i =\n                local.times (v ! (i div row_length N))\n                 (row N (i mod row_length N));\n        w = a # list\\<rbrakk>\n       \\<Longrightarrow> row (vec_mat_Tensor v (w # N)) i =\n                         local.times (v ! (i div row_length (w # N)))\n                          (row (w # N) (i mod row_length (w # N)))", "then"], ["proof (chain)\npicking this:\n  local.times (v ! (i div row_length (w # N)))\n   (row (w # N) (i mod row_length (w # N))) =\n  (v ! (i div length w) * w ! (i mod length w)) #\n  local.times (v ! (i div row_length N)) (row N (i mod row_length N))", "show ?thesis"], ["proof (prove)\nusing this:\n  local.times (v ! (i div row_length (w # N)))\n   (row (w # N) (i mod row_length (w # N))) =\n  (v ! (i div length w) * w ! (i mod length w)) #\n  local.times (v ! (i div row_length N)) (row N (i mod row_length N))\n\ngoal (1 subgoal):\n 1. row (vec_mat_Tensor v (w # N)) i =\n    local.times (v ! (i div row_length (w # N)))\n     (row (w # N) (i mod row_length (w # N)))", "using Cons_5 ConsCons_2 1 \n                                row_Cons vec_mat_Tensor.simps(2)"], ["proof (prove)\nusing this:\n  local.times (v ! (i div row_length (w # N)))\n   (row (w # N) (i mod row_length (w # N))) =\n  (v ! (i div length w) * w ! (i mod length w)) #\n  local.times (v ! (i div row_length N)) (row N (i mod row_length N))\n  row (vec_mat_Tensor v N) i =\n  local.times (v ! (i div row_length N)) (row N (i mod row_length N))\n  vec_vec_Tensor v w ! i = v ! (i div length w) * w ! (i mod length w)\n  w \\<noteq> []\n  row (?v # ?M) ?i = ?v ! ?i # row ?M ?i\n  vec_mat_Tensor ?xs (?ys # ?yss) =\n  vec_vec_Tensor ?xs ?ys # vec_mat_Tensor ?xs ?yss\n\ngoal (1 subgoal):\n 1. row (vec_mat_Tensor v (w # N)) i =\n    local.times (v ! (i div row_length (w # N)))\n     (row (w # N) (i mod row_length (w # N)))", "by (metis)"], ["proof (state)\nthis:\n  row (vec_mat_Tensor v (w # N)) i =\n  local.times (v ! (i div row_length (w # N)))\n   (row (w # N) (i mod row_length (w # N)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  row (vec_mat_Tensor v (w # N)) i =\n  local.times (v ! (i div row_length (w # N)))\n   (row (w # N) (i mod row_length (w # N)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  row (vec_mat_Tensor v (w # N)) i =\n  local.times (v ! (i div row_length (w # N)))\n   (row (w # N) (i mod row_length (w # N)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i < length v * row_length (w # N) \\<and>\n  mat nr (length (w # N)) (w # N) \\<Longrightarrow>\n  row (vec_mat_Tensor v (w # N)) i =\n  local.times (v ! (i div row_length (w # N)))\n   (row (w # N) (i mod row_length (w # N)))\n\ngoal (1 subgoal):\n 1. \\<And>a M i.\n       (\\<And>i.\n           i < length v * row_length M \\<and>\n           mat nr (length M) M \\<longrightarrow>\n           row (vec_mat_Tensor v M) i =\n           local.times (v ! (i div row_length M))\n            (row M (i mod row_length M))) \\<Longrightarrow>\n       i < length v * row_length (a # M) \\<and>\n       mat nr (length (a # M)) (a # M) \\<longrightarrow>\n       row (vec_mat_Tensor v (a # M)) i =\n       local.times (v ! (i div row_length (a # M)))\n        (row (a # M) (i mod row_length (a # M)))", "then"], ["proof (chain)\npicking this:\n  i < length v * row_length (w # N) \\<and>\n  mat nr (length (w # N)) (w # N) \\<Longrightarrow>\n  row (vec_mat_Tensor v (w # N)) i =\n  local.times (v ! (i div row_length (w # N)))\n   (row (w # N) (i mod row_length (w # N)))", "show ?case"], ["proof (prove)\nusing this:\n  i < length v * row_length (w # N) \\<and>\n  mat nr (length (w # N)) (w # N) \\<Longrightarrow>\n  row (vec_mat_Tensor v (w # N)) i =\n  local.times (v ! (i div row_length (w # N)))\n   (row (w # N) (i mod row_length (w # N)))\n\ngoal (1 subgoal):\n 1. i < length v * row_length (w # N) \\<and>\n    mat nr (length (w # N)) (w # N) \\<longrightarrow>\n    row (vec_mat_Tensor v (w # N)) i =\n    local.times (v ! (i div row_length (w # N)))\n     (row (w # N) (i mod row_length (w # N)))", "by auto"], ["proof (state)\nthis:\n  i < length v * row_length (w # N) \\<and>\n  mat nr (length (w # N)) (w # N) \\<longrightarrow>\n  row (vec_mat_Tensor v (w # N)) i =\n  local.times (v ! (i div row_length (w # N)))\n   (row (w # N) (i mod row_length (w # N)))\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>The following lemma gives us a formula for the row of a tensor of \ntwo matrices\\<close>"], ["", "lemma  row_formula:\n fixes M1 and M2\n shows \"\\<forall>i.((i < (row_length M1)*(row_length M2))\n          \\<and>(mat (row_length M1) (length M1) M1)\n          \\<and>(mat (row_length M2) (length M2) M2)\n             \\<longrightarrow> row (M1 \\<otimes> M2) i \n                        =  vec_vec_Tensor \n                                 (row M1 (i div row_length M2)) \n                                 (row M2 (i mod row_length M2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i < row_length M1 * row_length M2 \\<and>\n       mat (row_length M1) (length M1) M1 \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       row (M1 \\<otimes> M2) i =\n       vec_vec_Tensor (row M1 (i div row_length M2))\n        (row M2 (i mod row_length M2))", "apply(rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < row_length M1 * row_length M2 \\<and>\n       mat (row_length M1) (length M1) M1 \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       row (M1 \\<otimes> M2) i =\n       vec_vec_Tensor (row M1 (i div row_length M2))\n        (row M2 (i mod row_length M2))", "proof(induct M1)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < row_length [] * row_length M2 \\<and>\n       mat (row_length []) (length []) [] \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       row ([] \\<otimes> M2) i =\n       vec_vec_Tensor (row [] (i div row_length M2))\n        (row M2 (i mod row_length M2))\n 2. \\<And>a M1 i.\n       (\\<And>i.\n           i < row_length M1 * row_length M2 \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           row (M1 \\<otimes> M2) i =\n           vec_vec_Tensor (row M1 (i div row_length M2))\n            (row M2 (i mod row_length M2))) \\<Longrightarrow>\n       i < row_length (a # M1) * row_length M2 \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       row (a # M1 \\<otimes> M2) i =\n       vec_vec_Tensor (row (a # M1) (i div row_length M2))\n        (row M2 (i mod row_length M2))", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < row_length [] * row_length M2 \\<and>\n       mat (row_length []) (length []) [] \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       row ([] \\<otimes> M2) i =\n       vec_vec_Tensor (row [] (i div row_length M2))\n        (row M2 (i mod row_length M2))\n 2. \\<And>a M1 i.\n       (\\<And>i.\n           i < row_length M1 * row_length M2 \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           row (M1 \\<otimes> M2) i =\n           vec_vec_Tensor (row M1 (i div row_length M2))\n            (row M2 (i mod row_length M2))) \\<Longrightarrow>\n       i < row_length (a # M1) * row_length M2 \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       row (a # M1 \\<otimes> M2) i =\n       vec_vec_Tensor (row (a # M1) (i div row_length M2))\n        (row M2 (i mod row_length M2))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < row_length [] * row_length M2 \\<and>\n    mat (row_length []) (length []) [] \\<and>\n    mat (row_length M2) (length M2) M2 \\<longrightarrow>\n    row ([] \\<otimes> M2) i =\n    vec_vec_Tensor (row [] (i div row_length M2))\n     (row M2 (i mod row_length M2))", "using Nil"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < row_length [] * row_length M2 \\<and>\n    mat (row_length []) (length []) [] \\<and>\n    mat (row_length M2) (length M2) M2 \\<longrightarrow>\n    row ([] \\<otimes> M2) i =\n    vec_vec_Tensor (row [] (i div row_length M2))\n     (row M2 (i mod row_length M2))", "by (metis less_nat_zero_code mult_0 row_length_Nil)"], ["proof (state)\nthis:\n  i < row_length [] * row_length M2 \\<and>\n  mat (row_length []) (length []) [] \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  row ([] \\<otimes> M2) i =\n  vec_vec_Tensor (row [] (i div row_length M2))\n   (row M2 (i mod row_length M2))\n\ngoal (1 subgoal):\n 1. \\<And>a M1 i.\n       (\\<And>i.\n           i < row_length M1 * row_length M2 \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           row (M1 \\<otimes> M2) i =\n           vec_vec_Tensor (row M1 (i div row_length M2))\n            (row M2 (i mod row_length M2))) \\<Longrightarrow>\n       i < row_length (a # M1) * row_length M2 \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       row (a # M1 \\<otimes> M2) i =\n       vec_vec_Tensor (row (a # M1) (i div row_length M2))\n        (row M2 (i mod row_length M2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a M1 i.\n       (\\<And>i.\n           i < row_length M1 * row_length M2 \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           row (M1 \\<otimes> M2) i =\n           vec_vec_Tensor (row M1 (i div row_length M2))\n            (row M2 (i mod row_length M2))) \\<Longrightarrow>\n       i < row_length (a # M1) * row_length M2 \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       row (a # M1 \\<otimes> M2) i =\n       vec_vec_Tensor (row (a # M1) (i div row_length M2))\n        (row M2 (i mod row_length M2))", "case (Cons v M)"], ["proof (state)\nthis:\n  ?i < row_length M * row_length M2 \\<and>\n  mat (row_length M) (length M) M \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  row (M \\<otimes> M2) ?i =\n  vec_vec_Tensor (row M (?i div row_length M2))\n   (row M2 (?i mod row_length M2))\n\ngoal (1 subgoal):\n 1. \\<And>a M1 i.\n       (\\<And>i.\n           i < row_length M1 * row_length M2 \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           row (M1 \\<otimes> M2) i =\n           vec_vec_Tensor (row M1 (i div row_length M2))\n            (row M2 (i mod row_length M2))) \\<Longrightarrow>\n       i < row_length (a # M1) * row_length M2 \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       row (a # M1 \\<otimes> M2) i =\n       vec_vec_Tensor (row (a # M1) (i div row_length M2))\n        (row M2 (i mod row_length M2))", "have \n    \"((i < (row_length (v#M))*(row_length M2))  \n    \\<and> (mat (row_length (v#M)) (length (v#M)) (v#M))\n    \\<and> (mat (row_length M2) (length M2) M2)\n     \\<Longrightarrow> row ((v#M) \\<otimes> M2) i =  vec_vec_Tensor \n                                    (row (v#M) (i div row_length M2)) \n                                    (row M2 (i mod row_length M2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < row_length (v # M) * row_length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    row (v # M \\<otimes> M2) i =\n    vec_vec_Tensor (row (v # M) (i div row_length M2))\n     (row M2 (i mod row_length M2))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. i < row_length (v # M) * row_length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    row (v # M \\<otimes> M2) i =\n    vec_vec_Tensor (row (v # M) (i div row_length M2))\n     (row M2 (i mod row_length M2))", "assume assms:\n                 \"(i < (row_length (v#M))*(row_length M2)) \n                 \\<and>(mat (row_length (v#M)) (length (v#M)) (v#M))\n                 \\<and>(mat (row_length M2) (length M2) M2)\""], ["proof (state)\nthis:\n  i < row_length (v # M) * row_length M2 \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2\n\ngoal (1 subgoal):\n 1. i < row_length (v # M) * row_length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    row (v # M \\<otimes> M2) i =\n    vec_vec_Tensor (row (v # M) (i div row_length M2))\n     (row M2 (i mod row_length M2))", "have 0:\"i < (length v)*(row_length M2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length v * row_length M2", "using assms row_length_def"], ["proof (prove)\nusing this:\n  i < row_length (v # M) * row_length M2 \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n\ngoal (1 subgoal):\n 1. i < length v * row_length M2", "by auto"], ["proof (state)\nthis:\n  i < length v * row_length M2\n\ngoal (1 subgoal):\n 1. i < row_length (v # M) * row_length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    row (v # M \\<otimes> M2) i =\n    vec_vec_Tensor (row (v # M) (i div row_length M2))\n     (row M2 (i mod row_length M2))", "have 1:\"mat (row_length M) (length M) M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length M) (length M) M", "using assms  reduct_matrix"], ["proof (prove)\nusing this:\n  i < row_length (v # M) * row_length M2 \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2\n  mat (row_length (?a # ?M)) (length (?a # ?M)) (?a # ?M) \\<Longrightarrow>\n  mat (row_length ?M) (length ?M) ?M\n\ngoal (1 subgoal):\n 1. mat (row_length M) (length M) M", "by (metis)"], ["proof (state)\nthis:\n  mat (row_length M) (length M) M\n\ngoal (1 subgoal):\n 1. i < row_length (v # M) * row_length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    row (v # M \\<otimes> M2) i =\n    vec_vec_Tensor (row (v # M) (i div row_length M2))\n     (row M2 (i mod row_length M2))", "have \"row ((v#M)\\<otimes>M2) i = row ((vec_mat_Tensor v M2)@(M \\<otimes> M2)) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row (v # M \\<otimes> M2) i =\n    row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i", "by auto"], ["proof (state)\nthis:\n  row (v # M \\<otimes> M2) i =\n  row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i\n\ngoal (1 subgoal):\n 1. i < row_length (v # M) * row_length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    row (v # M \\<otimes> M2) i =\n    vec_vec_Tensor (row (v # M) (i div row_length M2))\n     (row M2 (i mod row_length M2))", "then"], ["proof (chain)\npicking this:\n  row (v # M \\<otimes> M2) i =\n  row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i", "have 2:\"... = (row (vec_mat_Tensor v M2) i)@(row (M \\<otimes> M2) i)\""], ["proof (prove)\nusing this:\n  row (v # M \\<otimes> M2) i =\n  row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i\n\ngoal (1 subgoal):\n 1. row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i =\n    row (vec_mat_Tensor v M2) i @ row (M \\<otimes> M2) i", "using row_append"], ["proof (prove)\nusing this:\n  row (v # M \\<otimes> M2) i =\n  row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i\n  row (?A @ ?B) ?i = row ?A ?i @ row ?B ?i\n\ngoal (1 subgoal):\n 1. row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i =\n    row (vec_mat_Tensor v M2) i @ row (M \\<otimes> M2) i", "by auto"], ["proof (state)\nthis:\n  row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i =\n  row (vec_mat_Tensor v M2) i @ row (M \\<otimes> M2) i\n\ngoal (1 subgoal):\n 1. i < row_length (v # M) * row_length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n    row (v # M \\<otimes> M2) i =\n    vec_vec_Tensor (row (v # M) (i div row_length M2))\n     (row M2 (i mod row_length M2))", "then"], ["proof (chain)\npicking this:\n  row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i =\n  row (vec_mat_Tensor v M2) i @ row (M \\<otimes> M2) i", "show ?thesis"], ["proof (prove)\nusing this:\n  row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i =\n  row (vec_mat_Tensor v M2) i @ row (M \\<otimes> M2) i\n\ngoal (1 subgoal):\n 1. row (v # M \\<otimes> M2) i =\n    vec_vec_Tensor (row (v # M) (i div row_length M2))\n     (row M2 (i mod row_length M2))", "proof(cases M)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i =\n             row (vec_mat_Tensor v M2) i @ row (M \\<otimes> M2) i;\n     M = []\\<rbrakk>\n    \\<Longrightarrow> row (v # M \\<otimes> M2) i =\n                      vec_vec_Tensor (row (v # M) (i div row_length M2))\n                       (row M2 (i mod row_length M2))\n 2. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i =\n                row (vec_mat_Tensor v M2) i @ row (M \\<otimes> M2) i;\n        M = a # list\\<rbrakk>\n       \\<Longrightarrow> row (v # M \\<otimes> M2) i =\n                         vec_vec_Tensor (row (v # M) (i div row_length M2))\n                          (row M2 (i mod row_length M2))", "case Nil"], ["proof (state)\nthis:\n  M = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i =\n             row (vec_mat_Tensor v M2) i @ row (M \\<otimes> M2) i;\n     M = []\\<rbrakk>\n    \\<Longrightarrow> row (v # M \\<otimes> M2) i =\n                      vec_vec_Tensor (row (v # M) (i div row_length M2))\n                       (row M2 (i mod row_length M2))\n 2. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i =\n                row (vec_mat_Tensor v M2) i @ row (M \\<otimes> M2) i;\n        M = a # list\\<rbrakk>\n       \\<Longrightarrow> row (v # M \\<otimes> M2) i =\n                         vec_vec_Tensor (row (v # M) (i div row_length M2))\n                          (row M2 (i mod row_length M2))", "have \"row ((v#M)\\<otimes>M2) i = (row (vec_mat_Tensor v M2) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row (v # M \\<otimes> M2) i = row (vec_mat_Tensor v M2) i", "using Nil 2"], ["proof (prove)\nusing this:\n  M = []\n  row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i =\n  row (vec_mat_Tensor v M2) i @ row (M \\<otimes> M2) i\n\ngoal (1 subgoal):\n 1. row (v # M \\<otimes> M2) i = row (vec_mat_Tensor v M2) i", "by auto"], ["proof (state)\nthis:\n  row (v # M \\<otimes> M2) i = row (vec_mat_Tensor v M2) i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i =\n             row (vec_mat_Tensor v M2) i @ row (M \\<otimes> M2) i;\n     M = []\\<rbrakk>\n    \\<Longrightarrow> row (v # M \\<otimes> M2) i =\n                      vec_vec_Tensor (row (v # M) (i div row_length M2))\n                       (row M2 (i mod row_length M2))\n 2. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i =\n                row (vec_mat_Tensor v M2) i @ row (M \\<otimes> M2) i;\n        M = a # list\\<rbrakk>\n       \\<Longrightarrow> row (v # M \\<otimes> M2) i =\n                         vec_vec_Tensor (row (v # M) (i div row_length M2))\n                          (row M2 (i mod row_length M2))", "moreover"], ["proof (state)\nthis:\n  row (v # M \\<otimes> M2) i = row (vec_mat_Tensor v M2) i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i =\n             row (vec_mat_Tensor v M2) i @ row (M \\<otimes> M2) i;\n     M = []\\<rbrakk>\n    \\<Longrightarrow> row (v # M \\<otimes> M2) i =\n                      vec_vec_Tensor (row (v # M) (i div row_length M2))\n                       (row M2 (i mod row_length M2))\n 2. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i =\n                row (vec_mat_Tensor v M2) i @ row (M \\<otimes> M2) i;\n        M = a # list\\<rbrakk>\n       \\<Longrightarrow> row (v # M \\<otimes> M2) i =\n                         vec_vec_Tensor (row (v # M) (i div row_length M2))\n                          (row M2 (i mod row_length M2))", "have \"row (vec_mat_Tensor v M2) i =  times \n                                                (v!(i div row_length M2)) \n                                                (row M2 (i mod row_length M2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row (vec_mat_Tensor v M2) i =\n    local.times (v ! (i div row_length M2)) (row M2 (i mod row_length M2))", "using row_vec_mat_Tensor_prelim assms 0"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     i < length ?v * row_length ?M \\<and>\n     mat ?nr (length ?M) ?M \\<longrightarrow>\n     row (vec_mat_Tensor ?v ?M) i =\n     local.times (?v ! (i div row_length ?M)) (row ?M (i mod row_length ?M))\n  i < row_length (v # M) * row_length M2 \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2\n  i < length v * row_length M2\n\ngoal (1 subgoal):\n 1. row (vec_mat_Tensor v M2) i =\n    local.times (v ! (i div row_length M2)) (row M2 (i mod row_length M2))", "by auto"], ["proof (state)\nthis:\n  row (vec_mat_Tensor v M2) i =\n  local.times (v ! (i div row_length M2)) (row M2 (i mod row_length M2))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i =\n             row (vec_mat_Tensor v M2) i @ row (M \\<otimes> M2) i;\n     M = []\\<rbrakk>\n    \\<Longrightarrow> row (v # M \\<otimes> M2) i =\n                      vec_vec_Tensor (row (v # M) (i div row_length M2))\n                       (row M2 (i mod row_length M2))\n 2. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i =\n                row (vec_mat_Tensor v M2) i @ row (M \\<otimes> M2) i;\n        M = a # list\\<rbrakk>\n       \\<Longrightarrow> row (v # M \\<otimes> M2) i =\n                         vec_vec_Tensor (row (v # M) (i div row_length M2))\n                          (row M2 (i mod row_length M2))", "ultimately"], ["proof (chain)\npicking this:\n  row (v # M \\<otimes> M2) i = row (vec_mat_Tensor v M2) i\n  row (vec_mat_Tensor v M2) i =\n  local.times (v ! (i div row_length M2)) (row M2 (i mod row_length M2))", "show ?thesis"], ["proof (prove)\nusing this:\n  row (v # M \\<otimes> M2) i = row (vec_mat_Tensor v M2) i\n  row (vec_mat_Tensor v M2) i =\n  local.times (v ! (i div row_length M2)) (row M2 (i mod row_length M2))\n\ngoal (1 subgoal):\n 1. row (v # M \\<otimes> M2) i =\n    vec_vec_Tensor (row (v # M) (i div row_length M2))\n     (row M2 (i mod row_length M2))", "using vec_vec_Tensor_def \n             Nil append_Nil2 vec_vec_Tensor.simps(1) \n             vec_vec_Tensor.simps(2) row_Cons row_empty"], ["proof (prove)\nusing this:\n  row (v # M \\<otimes> M2) i = row (vec_mat_Tensor v M2) i\n  row (vec_mat_Tensor v M2) i =\n  local.times (v ! (i div row_length M2)) (row M2 (i mod row_length M2))\n  vec_vec_Tensor \\<equiv>\n  rec_list (\\<lambda>ys. [])\n   (\\<lambda>x xs xsa ys. local.times x ys @ xsa ys)\n  M = []\n  ?xs @ [] = ?xs\n  vec_vec_Tensor [] ?ys = []\n  vec_vec_Tensor (?x # ?xs) ?ys =\n  local.times ?x ?ys @ vec_vec_Tensor ?xs ?ys\n  row (?v # ?M) ?i = ?v ! ?i # row ?M ?i\n  row [] ?i = []\n\ngoal (1 subgoal):\n 1. row (v # M \\<otimes> M2) i =\n    vec_vec_Tensor (row (v # M) (i div row_length M2))\n     (row M2 (i mod row_length M2))", "by (metis)"], ["proof (state)\nthis:\n  row (v # M \\<otimes> M2) i =\n  vec_vec_Tensor (row (v # M) (i div row_length M2))\n   (row M2 (i mod row_length M2))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i =\n                row (vec_mat_Tensor v M2) i @ row (M \\<otimes> M2) i;\n        M = a # list\\<rbrakk>\n       \\<Longrightarrow> row (v # M \\<otimes> M2) i =\n                         vec_vec_Tensor (row (v # M) (i div row_length M2))\n                          (row M2 (i mod row_length M2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i =\n                row (vec_mat_Tensor v M2) i @ row (M \\<otimes> M2) i;\n        M = a # list\\<rbrakk>\n       \\<Longrightarrow> row (v # M \\<otimes> M2) i =\n                         vec_vec_Tensor (row (v # M) (i div row_length M2))\n                          (row M2 (i mod row_length M2))", "case (Cons w N)"], ["proof (state)\nthis:\n  M = w # N\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i =\n                row (vec_mat_Tensor v M2) i @ row (M \\<otimes> M2) i;\n        M = a # list\\<rbrakk>\n       \\<Longrightarrow> row (v # M \\<otimes> M2) i =\n                         vec_vec_Tensor (row (v # M) (i div row_length M2))\n                          (row M2 (i mod row_length M2))", "have Cons_Cons_1:\"mat (row_length M) (length M) M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length M) (length M) M", "using assms reduct_matrix"], ["proof (prove)\nusing this:\n  i < row_length (v # M) * row_length M2 \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2\n  mat (row_length (?a # ?M)) (length (?a # ?M)) (?a # ?M) \\<Longrightarrow>\n  mat (row_length ?M) (length ?M) ?M\n\ngoal (1 subgoal):\n 1. mat (row_length M) (length M) M", "by auto"], ["proof (state)\nthis:\n  mat (row_length M) (length M) M\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i =\n                row (vec_mat_Tensor v M2) i @ row (M \\<otimes> M2) i;\n        M = a # list\\<rbrakk>\n       \\<Longrightarrow> row (v # M \\<otimes> M2) i =\n                         vec_vec_Tensor (row (v # M) (i div row_length M2))\n                          (row M2 (i mod row_length M2))", "then"], ["proof (chain)\npicking this:\n  mat (row_length M) (length M) M", "have \"row_length (w#N) = row_length (v#M)\""], ["proof (prove)\nusing this:\n  mat (row_length M) (length M) M\n\ngoal (1 subgoal):\n 1. row_length (w # N) = row_length (v # M)", "using assms Cons"], ["proof (prove)\nusing this:\n  mat (row_length M) (length M) M\n  i < row_length (v # M) * row_length M2 \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2\n  M = w # N\n\ngoal (1 subgoal):\n 1. row_length (w # N) = row_length (v # M)", "unfolding mat_def Ball_def vec_def"], ["proof (prove)\nusing this:\n  length M = length M \\<and>\n  (\\<forall>x. x \\<in> set M \\<longrightarrow> length x = row_length M)\n  i < row_length (v # M) * row_length M2 \\<and>\n  (length (v # M) = length (v # M) \\<and>\n   (\\<forall>x.\n       x \\<in> set (v # M) \\<longrightarrow>\n       length x = row_length (v # M))) \\<and>\n  length M2 = length M2 \\<and>\n  (\\<forall>x. x \\<in> set M2 \\<longrightarrow> length x = row_length M2)\n  M = w # N\n\ngoal (1 subgoal):\n 1. row_length (w # N) = row_length (v # M)", "using append_Cons  hd_in_set list.distinct(1) \n                        rotate1.simps(2) set_rotate1"], ["proof (prove)\nusing this:\n  length M = length M \\<and>\n  (\\<forall>x. x \\<in> set M \\<longrightarrow> length x = row_length M)\n  i < row_length (v # M) * row_length M2 \\<and>\n  (length (v # M) = length (v # M) \\<and>\n   (\\<forall>x.\n       x \\<in> set (v # M) \\<longrightarrow>\n       length x = row_length (v # M))) \\<and>\n  length M2 = length M2 \\<and>\n  (\\<forall>x. x \\<in> set M2 \\<longrightarrow> length x = row_length M2)\n  M = w # N\n  (?x # ?xs) @ ?ys = ?x # ?xs @ ?ys\n  ?xs \\<noteq> [] \\<Longrightarrow> hd ?xs \\<in> set ?xs\n  [] \\<noteq> ?x21.0 # ?x22.0\n  rotate1 (?x # ?xs) = ?xs @ [?x]\n  set (rotate1 ?xs) = set ?xs\n\ngoal (1 subgoal):\n 1. row_length (w # N) = row_length (v # M)", "by auto"], ["proof (state)\nthis:\n  row_length (w # N) = row_length (v # M)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i =\n                row (vec_mat_Tensor v M2) i @ row (M \\<otimes> M2) i;\n        M = a # list\\<rbrakk>\n       \\<Longrightarrow> row (v # M \\<otimes> M2) i =\n                         vec_vec_Tensor (row (v # M) (i div row_length M2))\n                          (row M2 (i mod row_length M2))", "then"], ["proof (chain)\npicking this:\n  row_length (w # N) = row_length (v # M)", "have Cons_Cons_2:\"i < (row_length M)*(row_length M2)\""], ["proof (prove)\nusing this:\n  row_length (w # N) = row_length (v # M)\n\ngoal (1 subgoal):\n 1. i < row_length M * row_length M2", "using assms Cons"], ["proof (prove)\nusing this:\n  row_length (w # N) = row_length (v # M)\n  i < row_length (v # M) * row_length M2 \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2\n  M = w # N\n\ngoal (1 subgoal):\n 1. i < row_length M * row_length M2", "by auto"], ["proof (state)\nthis:\n  i < row_length M * row_length M2\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i =\n                row (vec_mat_Tensor v M2) i @ row (M \\<otimes> M2) i;\n        M = a # list\\<rbrakk>\n       \\<Longrightarrow> row (v # M \\<otimes> M2) i =\n                         vec_vec_Tensor (row (v # M) (i div row_length M2))\n                          (row M2 (i mod row_length M2))", "then"], ["proof (chain)\npicking this:\n  i < row_length M * row_length M2", "have Cons_Cons_3:\"(row (M \\<otimes> M2) i) =  vec_vec_Tensor \n                                          (row M (i div row_length M2)) \n                                           (row M2 (i mod row_length M2))\""], ["proof (prove)\nusing this:\n  i < row_length M * row_length M2\n\ngoal (1 subgoal):\n 1. row (M \\<otimes> M2) i =\n    vec_vec_Tensor (row M (i div row_length M2))\n     (row M2 (i mod row_length M2))", "using Cons.hyps Cons_Cons_1 assms"], ["proof (prove)\nusing this:\n  i < row_length M * row_length M2\n  ?i < row_length M * row_length M2 \\<and>\n  mat (row_length M) (length M) M \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  row (M \\<otimes> M2) ?i =\n  vec_vec_Tensor (row M (?i div row_length M2))\n   (row M2 (?i mod row_length M2))\n  mat (row_length M) (length M) M\n  i < row_length (v # M) * row_length M2 \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2\n\ngoal (1 subgoal):\n 1. row (M \\<otimes> M2) i =\n    vec_vec_Tensor (row M (i div row_length M2))\n     (row M2 (i mod row_length M2))", "by auto"], ["proof (state)\nthis:\n  row (M \\<otimes> M2) i =\n  vec_vec_Tensor (row M (i div row_length M2))\n   (row M2 (i mod row_length M2))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i =\n                row (vec_mat_Tensor v M2) i @ row (M \\<otimes> M2) i;\n        M = a # list\\<rbrakk>\n       \\<Longrightarrow> row (v # M \\<otimes> M2) i =\n                         vec_vec_Tensor (row (v # M) (i div row_length M2))\n                          (row M2 (i mod row_length M2))", "moreover"], ["proof (state)\nthis:\n  row (M \\<otimes> M2) i =\n  vec_vec_Tensor (row M (i div row_length M2))\n   (row M2 (i mod row_length M2))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i =\n                row (vec_mat_Tensor v M2) i @ row (M \\<otimes> M2) i;\n        M = a # list\\<rbrakk>\n       \\<Longrightarrow> row (v # M \\<otimes> M2) i =\n                         vec_vec_Tensor (row (v # M) (i div row_length M2))\n                          (row M2 (i mod row_length M2))", "have \"row (vec_mat_Tensor v M2) i   \n                                            =  times \n                                               (v!(i div row_length M2)) \n                                               (row M2 (i mod row_length M2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row (vec_mat_Tensor v M2) i =\n    local.times (v ! (i div row_length M2)) (row M2 (i mod row_length M2))", "using row_vec_mat_Tensor_prelim assms 0"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     i < length ?v * row_length ?M \\<and>\n     mat ?nr (length ?M) ?M \\<longrightarrow>\n     row (vec_mat_Tensor ?v ?M) i =\n     local.times (?v ! (i div row_length ?M)) (row ?M (i mod row_length ?M))\n  i < row_length (v # M) * row_length M2 \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2\n  i < length v * row_length M2\n\ngoal (1 subgoal):\n 1. row (vec_mat_Tensor v M2) i =\n    local.times (v ! (i div row_length M2)) (row M2 (i mod row_length M2))", "by auto"], ["proof (state)\nthis:\n  row (vec_mat_Tensor v M2) i =\n  local.times (v ! (i div row_length M2)) (row M2 (i mod row_length M2))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i =\n                row (vec_mat_Tensor v M2) i @ row (M \\<otimes> M2) i;\n        M = a # list\\<rbrakk>\n       \\<Longrightarrow> row (v # M \\<otimes> M2) i =\n                         vec_vec_Tensor (row (v # M) (i div row_length M2))\n                          (row M2 (i mod row_length M2))", "then"], ["proof (chain)\npicking this:\n  row (vec_mat_Tensor v M2) i =\n  local.times (v ! (i div row_length M2)) (row M2 (i mod row_length M2))", "have \"row ((v#M)\\<otimes>M2) i = \n                           (times \n                                   (v!(i div row_length M2)) \n                                    (row M2 (i mod row_length M2)))\n                                      @(vec_vec_Tensor \n                                          (row M (i div row_length M2)) \n                                           (row M2 (i mod row_length M2)))\""], ["proof (prove)\nusing this:\n  row (vec_mat_Tensor v M2) i =\n  local.times (v ! (i div row_length M2)) (row M2 (i mod row_length M2))\n\ngoal (1 subgoal):\n 1. row (v # M \\<otimes> M2) i =\n    local.times (v ! (i div row_length M2)) (row M2 (i mod row_length M2)) @\n    vec_vec_Tensor (row M (i div row_length M2))\n     (row M2 (i mod row_length M2))", "using 2 Cons_Cons_3"], ["proof (prove)\nusing this:\n  row (vec_mat_Tensor v M2) i =\n  local.times (v ! (i div row_length M2)) (row M2 (i mod row_length M2))\n  row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i =\n  row (vec_mat_Tensor v M2) i @ row (M \\<otimes> M2) i\n  row (M \\<otimes> M2) i =\n  vec_vec_Tensor (row M (i div row_length M2))\n   (row M2 (i mod row_length M2))\n\ngoal (1 subgoal):\n 1. row (v # M \\<otimes> M2) i =\n    local.times (v ! (i div row_length M2)) (row M2 (i mod row_length M2)) @\n    vec_vec_Tensor (row M (i div row_length M2))\n     (row M2 (i mod row_length M2))", "by auto"], ["proof (state)\nthis:\n  row (v # M \\<otimes> M2) i =\n  local.times (v ! (i div row_length M2)) (row M2 (i mod row_length M2)) @\n  vec_vec_Tensor (row M (i div row_length M2))\n   (row M2 (i mod row_length M2))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i =\n                row (vec_mat_Tensor v M2) i @ row (M \\<otimes> M2) i;\n        M = a # list\\<rbrakk>\n       \\<Longrightarrow> row (v # M \\<otimes> M2) i =\n                         vec_vec_Tensor (row (v # M) (i div row_length M2))\n                          (row M2 (i mod row_length M2))", "moreover"], ["proof (state)\nthis:\n  row (v # M \\<otimes> M2) i =\n  local.times (v ! (i div row_length M2)) (row M2 (i mod row_length M2)) @\n  vec_vec_Tensor (row M (i div row_length M2))\n   (row M2 (i mod row_length M2))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i =\n                row (vec_mat_Tensor v M2) i @ row (M \\<otimes> M2) i;\n        M = a # list\\<rbrakk>\n       \\<Longrightarrow> row (v # M \\<otimes> M2) i =\n                         vec_vec_Tensor (row (v # M) (i div row_length M2))\n                          (row M2 (i mod row_length M2))", "have \"... = (vec_vec_Tensor \n                                        ((v!(i div row_length M2))\n                                             #(row M (i div row_length M2)))\n                                        (row M2 (i mod row_length M2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.times (v ! (i div row_length M2)) (row M2 (i mod row_length M2)) @\n    vec_vec_Tensor (row M (i div row_length M2))\n     (row M2 (i mod row_length M2)) =\n    vec_vec_Tensor (v ! (i div row_length M2) # row M (i div row_length M2))\n     (row M2 (i mod row_length M2))", "using vec_vec_Tensor.simps(2)"], ["proof (prove)\nusing this:\n  vec_vec_Tensor (?x # ?xs) ?ys =\n  local.times ?x ?ys @ vec_vec_Tensor ?xs ?ys\n\ngoal (1 subgoal):\n 1. local.times (v ! (i div row_length M2)) (row M2 (i mod row_length M2)) @\n    vec_vec_Tensor (row M (i div row_length M2))\n     (row M2 (i mod row_length M2)) =\n    vec_vec_Tensor (v ! (i div row_length M2) # row M (i div row_length M2))\n     (row M2 (i mod row_length M2))", "by auto"], ["proof (state)\nthis:\n  local.times (v ! (i div row_length M2)) (row M2 (i mod row_length M2)) @\n  vec_vec_Tensor (row M (i div row_length M2))\n   (row M2 (i mod row_length M2)) =\n  vec_vec_Tensor (v ! (i div row_length M2) # row M (i div row_length M2))\n   (row M2 (i mod row_length M2))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i =\n                row (vec_mat_Tensor v M2) i @ row (M \\<otimes> M2) i;\n        M = a # list\\<rbrakk>\n       \\<Longrightarrow> row (v # M \\<otimes> M2) i =\n                         vec_vec_Tensor (row (v # M) (i div row_length M2))\n                          (row M2 (i mod row_length M2))", "moreover"], ["proof (state)\nthis:\n  local.times (v ! (i div row_length M2)) (row M2 (i mod row_length M2)) @\n  vec_vec_Tensor (row M (i div row_length M2))\n   (row M2 (i mod row_length M2)) =\n  vec_vec_Tensor (v ! (i div row_length M2) # row M (i div row_length M2))\n   (row M2 (i mod row_length M2))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i =\n                row (vec_mat_Tensor v M2) i @ row (M \\<otimes> M2) i;\n        M = a # list\\<rbrakk>\n       \\<Longrightarrow> row (v # M \\<otimes> M2) i =\n                         vec_vec_Tensor (row (v # M) (i div row_length M2))\n                          (row M2 (i mod row_length M2))", "have \"... = (vec_vec_Tensor (row (v#M) (i div row_length M2))\n                                           (row M2 (i mod row_length M2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_vec_Tensor (v ! (i div row_length M2) # row M (i div row_length M2))\n     (row M2 (i mod row_length M2)) =\n    vec_vec_Tensor (row (v # M) (i div row_length M2))\n     (row M2 (i mod row_length M2))", "using row_Cons"], ["proof (prove)\nusing this:\n  row (?v # ?M) ?i = ?v ! ?i # row ?M ?i\n\ngoal (1 subgoal):\n 1. vec_vec_Tensor (v ! (i div row_length M2) # row M (i div row_length M2))\n     (row M2 (i mod row_length M2)) =\n    vec_vec_Tensor (row (v # M) (i div row_length M2))\n     (row M2 (i mod row_length M2))", "by metis"], ["proof (state)\nthis:\n  vec_vec_Tensor (v ! (i div row_length M2) # row M (i div row_length M2))\n   (row M2 (i mod row_length M2)) =\n  vec_vec_Tensor (row (v # M) (i div row_length M2))\n   (row M2 (i mod row_length M2))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>row (vec_mat_Tensor v M2 @ (M \\<otimes> M2)) i =\n                row (vec_mat_Tensor v M2) i @ row (M \\<otimes> M2) i;\n        M = a # list\\<rbrakk>\n       \\<Longrightarrow> row (v # M \\<otimes> M2) i =\n                         vec_vec_Tensor (row (v # M) (i div row_length M2))\n                          (row M2 (i mod row_length M2))", "ultimately"], ["proof (chain)\npicking this:\n  row (M \\<otimes> M2) i =\n  vec_vec_Tensor (row M (i div row_length M2))\n   (row M2 (i mod row_length M2))\n  row (v # M \\<otimes> M2) i =\n  local.times (v ! (i div row_length M2)) (row M2 (i mod row_length M2)) @\n  vec_vec_Tensor (row M (i div row_length M2))\n   (row M2 (i mod row_length M2))\n  local.times (v ! (i div row_length M2)) (row M2 (i mod row_length M2)) @\n  vec_vec_Tensor (row M (i div row_length M2))\n   (row M2 (i mod row_length M2)) =\n  vec_vec_Tensor (v ! (i div row_length M2) # row M (i div row_length M2))\n   (row M2 (i mod row_length M2))\n  vec_vec_Tensor (v ! (i div row_length M2) # row M (i div row_length M2))\n   (row M2 (i mod row_length M2)) =\n  vec_vec_Tensor (row (v # M) (i div row_length M2))\n   (row M2 (i mod row_length M2))", "show ?thesis"], ["proof (prove)\nusing this:\n  row (M \\<otimes> M2) i =\n  vec_vec_Tensor (row M (i div row_length M2))\n   (row M2 (i mod row_length M2))\n  row (v # M \\<otimes> M2) i =\n  local.times (v ! (i div row_length M2)) (row M2 (i mod row_length M2)) @\n  vec_vec_Tensor (row M (i div row_length M2))\n   (row M2 (i mod row_length M2))\n  local.times (v ! (i div row_length M2)) (row M2 (i mod row_length M2)) @\n  vec_vec_Tensor (row M (i div row_length M2))\n   (row M2 (i mod row_length M2)) =\n  vec_vec_Tensor (v ! (i div row_length M2) # row M (i div row_length M2))\n   (row M2 (i mod row_length M2))\n  vec_vec_Tensor (v ! (i div row_length M2) # row M (i div row_length M2))\n   (row M2 (i mod row_length M2)) =\n  vec_vec_Tensor (row (v # M) (i div row_length M2))\n   (row M2 (i mod row_length M2))\n\ngoal (1 subgoal):\n 1. row (v # M \\<otimes> M2) i =\n    vec_vec_Tensor (row (v # M) (i div row_length M2))\n     (row M2 (i mod row_length M2))", "by metis"], ["proof (state)\nthis:\n  row (v # M \\<otimes> M2) i =\n  vec_vec_Tensor (row (v # M) (i div row_length M2))\n   (row M2 (i mod row_length M2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  row (v # M \\<otimes> M2) i =\n  vec_vec_Tensor (row (v # M) (i div row_length M2))\n   (row M2 (i mod row_length M2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i < row_length (v # M) * row_length M2 \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n  row (v # M \\<otimes> M2) i =\n  vec_vec_Tensor (row (v # M) (i div row_length M2))\n   (row M2 (i mod row_length M2))\n\ngoal (1 subgoal):\n 1. \\<And>a M1 i.\n       (\\<And>i.\n           i < row_length M1 * row_length M2 \\<and>\n           mat (row_length M1) (length M1) M1 \\<and>\n           mat (row_length M2) (length M2) M2 \\<longrightarrow>\n           row (M1 \\<otimes> M2) i =\n           vec_vec_Tensor (row M1 (i div row_length M2))\n            (row M2 (i mod row_length M2))) \\<Longrightarrow>\n       i < row_length (a # M1) * row_length M2 \\<and>\n       mat (row_length (a # M1)) (length (a # M1)) (a # M1) \\<and>\n       mat (row_length M2) (length M2) M2 \\<longrightarrow>\n       row (a # M1 \\<otimes> M2) i =\n       vec_vec_Tensor (row (a # M1) (i div row_length M2))\n        (row M2 (i mod row_length M2))", "then"], ["proof (chain)\npicking this:\n  i < row_length (v # M) * row_length M2 \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n  row (v # M \\<otimes> M2) i =\n  vec_vec_Tensor (row (v # M) (i div row_length M2))\n   (row M2 (i mod row_length M2))", "show ?case"], ["proof (prove)\nusing this:\n  i < row_length (v # M) * row_length M2 \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2 \\<Longrightarrow>\n  row (v # M \\<otimes> M2) i =\n  vec_vec_Tensor (row (v # M) (i div row_length M2))\n   (row M2 (i mod row_length M2))\n\ngoal (1 subgoal):\n 1. i < row_length (v # M) * row_length M2 \\<and>\n    mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n    mat (row_length M2) (length M2) M2 \\<longrightarrow>\n    row (v # M \\<otimes> M2) i =\n    vec_vec_Tensor (row (v # M) (i div row_length M2))\n     (row M2 (i mod row_length M2))", "by auto"], ["proof (state)\nthis:\n  i < row_length (v # M) * row_length M2 \\<and>\n  mat (row_length (v # M)) (length (v # M)) (v # M) \\<and>\n  mat (row_length M2) (length M2) M2 \\<longrightarrow>\n  row (v # M \\<otimes> M2) i =\n  vec_vec_Tensor (row (v # M) (i div row_length M2))\n   (row M2 (i mod row_length M2))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma  effective_row_formula:\n fixes M1 and M2\n assumes \"i < (row_length M1)*(row_length M2)\" \n     and \"(mat (row_length M1) (length M1) M1)\"\n     and \"(mat (row_length M2) (length M2) M2)\"\n shows \"row (M1 \\<otimes> M2) i \n               =  vec_vec_Tensor \n                       (row M1 (i div row_length M2)) \n                       (row M2 (i mod row_length M2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row (M1 \\<otimes> M2) i =\n    vec_vec_Tensor (row M1 (i div row_length M2))\n     (row M2 (i mod row_length M2))", "using assms row_formula"], ["proof (prove)\nusing this:\n  i < row_length M1 * row_length M2\n  mat (row_length M1) (length M1) M1\n  mat (row_length M2) (length M2) M2\n  \\<forall>i.\n     i < row_length ?M1.0 * row_length ?M2.0 \\<and>\n     mat (row_length ?M1.0) (length ?M1.0) ?M1.0 \\<and>\n     mat (row_length ?M2.0) (length ?M2.0) ?M2.0 \\<longrightarrow>\n     row (?M1.0 \\<otimes> ?M2.0) i =\n     vec_vec_Tensor (row ?M1.0 (i div row_length ?M2.0))\n      (row ?M2.0 (i mod row_length ?M2.0))\n\ngoal (1 subgoal):\n 1. row (M1 \\<otimes> M2) i =\n    vec_vec_Tensor (row M1 (i div row_length M2))\n     (row M2 (i mod row_length M2))", "by auto"], ["", "lemma alt_effective_matrix_tensor_elements:\n \" (((i<((row_length M2)*(row_length M3)))\n \\<and>(j < (length M2)*(length M3)))\n \\<and>(mat (row_length M2) (length M2) M2)\n \\<and>(mat (row_length M3) (length M3) M3)\n \\<Longrightarrow> ((M2 \\<otimes> M3)!j!i) = f (M2!(j div (length M3))!(i div (row_length M3))) \n(M3!(j mod length M3)!(i mod (row_length M3))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < row_length M2 * row_length M3 \\<and>\n     j < length M2 * length M3) \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    (M2 \\<otimes> M3) ! j ! i =\n    M2 ! (j div length M3) ! (i div row_length M3) *\n    M3 ! (j mod length M3) ! (i mod row_length M3)", "using matrix_Tensor_elements"], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     (i < row_length ?M1.0 * row_length ?M2.0 \\<and>\n      j < length ?M1.0 * length ?M2.0) \\<and>\n     mat (row_length ?M1.0) (length ?M1.0) ?M1.0 \\<and>\n     mat (row_length ?M2.0) (length ?M2.0) ?M2.0 \\<longrightarrow>\n     (?M1.0 \\<otimes> ?M2.0) ! j ! i =\n     ?M1.0 ! (j div length ?M2.0) ! (i div row_length ?M2.0) *\n     ?M2.0 ! (j mod length ?M2.0) ! (i mod row_length ?M2.0)\n\ngoal (1 subgoal):\n 1. (i < row_length M2 * row_length M3 \\<and>\n     j < length M2 * length M3) \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    (M2 \\<otimes> M3) ! j ! i =\n    M2 ! (j div length M3) ! (i div row_length M3) *\n    M3 ! (j mod length M3) ! (i mod row_length M3)", "by auto"], ["", "lemma trans_impl:\"(\\<forall> i j.(P i j \\<longrightarrow> Q i j))\\<and>(\\<forall> i j. (Q i j \\<longrightarrow> R i j)) \n        \\<Longrightarrow> (\\<forall> i j. (P i j \\<longrightarrow> R i j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i j. P i j \\<longrightarrow> Q i j) \\<and>\n    (\\<forall>i j. Q i j \\<longrightarrow> R i j) \\<Longrightarrow>\n    \\<forall>i j. P i j \\<longrightarrow> R i j", "by auto"], ["", "lemma \"((x::nat) div y) div z = (x div (y*z))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x div y div z = x div (y * z)", "using div_mult2_eq"], ["proof (prove)\nusing this:\n  ?m div (?n * ?q) = ?m div ?n div ?q\n\ngoal (1 subgoal):\n 1. x div y div z = x div (y * z)", "by auto"], ["", "lemma \"(\\<not>((a::nat) < b)) \\<Longrightarrow> (a \\<ge> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> a < b \\<Longrightarrow> b \\<le> a", "by auto"], ["", "lemma not_null: \"xs \\<noteq> [] \\<Longrightarrow> \\<exists>y ys. xs = y#ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> \\<exists>y ys. xs = y # ys", "by (metis neq_Nil_conv)"], ["", "lemma \"(y::nat) \\<noteq> 0 \\<Longrightarrow> (x mod y) < y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<noteq> 0 \\<Longrightarrow> x mod y < y", "using mod_less_divisor"], ["proof (prove)\nusing this:\n  0 < ?n \\<Longrightarrow> ?m mod ?n < ?n\n\ngoal (1 subgoal):\n 1. y \\<noteq> 0 \\<Longrightarrow> x mod y < y", "by auto"], ["", "lemma mod_prop1:\"((a::nat) mod (b*c)) mod c = (a mod c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a mod (b * c) mod c = a mod c", "proof(cases \"c = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. c = 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c\n 2. c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c", "case True"], ["proof (state)\nthis:\n  c = 0\n\ngoal (2 subgoals):\n 1. c = 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c\n 2. c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c", "have \"b*c = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b * c = 0", "by (metis True mult_0_right)"], ["proof (state)\nthis:\n  b * c = 0\n\ngoal (2 subgoals):\n 1. c = 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c\n 2. c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c", "then"], ["proof (chain)\npicking this:\n  b * c = 0", "have \"(a::nat) mod (b*c) = a\""], ["proof (prove)\nusing this:\n  b * c = 0\n\ngoal (1 subgoal):\n 1. a mod (b * c) = a", "by auto"], ["proof (state)\nthis:\n  a mod (b * c) = a\n\ngoal (2 subgoals):\n 1. c = 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c\n 2. c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c", "then"], ["proof (chain)\npicking this:\n  a mod (b * c) = a", "have \"((a::nat) mod (b*c)) mod c = a mod c\""], ["proof (prove)\nusing this:\n  a mod (b * c) = a\n\ngoal (1 subgoal):\n 1. a mod (b * c) mod c = a mod c", "by auto"], ["proof (state)\nthis:\n  a mod (b * c) mod c = a mod c\n\ngoal (2 subgoals):\n 1. c = 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c\n 2. c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c", "then"], ["proof (chain)\npicking this:\n  a mod (b * c) mod c = a mod c", "show ?thesis"], ["proof (prove)\nusing this:\n  a mod (b * c) mod c = a mod c\n\ngoal (1 subgoal):\n 1. a mod (b * c) mod c = a mod c", "by auto"], ["proof (state)\nthis:\n  a mod (b * c) mod c = a mod c\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c", "case False"], ["proof (state)\nthis:\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c", "let ?x = \"(a::nat) mod (b*c)\""], ["proof (state)\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c", "let ?z = \"?x mod c\""], ["proof (state)\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c", "have \"\\<exists>m. a = m*(b*c) + ?x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m. a = m * (b * c) + a mod (b * c)", "by (metis div_mult_mod_eq)"], ["proof (state)\nthis:\n  \\<exists>m. a = m * (b * c) + a mod (b * c)\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c", "then"], ["proof (chain)\npicking this:\n  \\<exists>m. a = m * (b * c) + a mod (b * c)", "obtain m1 where \"a = m1*(b*c) + ?x\""], ["proof (prove)\nusing this:\n  \\<exists>m. a = m * (b * c) + a mod (b * c)\n\ngoal (1 subgoal):\n 1. (\\<And>m1.\n        a = m1 * (b * c) + a mod (b * c) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  a = m1 * (b * c) + a mod (b * c)\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c", "then"], ["proof (chain)\npicking this:\n  a = m1 * (b * c) + a mod (b * c)", "have \"?x = (a - m1*(b*c))\""], ["proof (prove)\nusing this:\n  a = m1 * (b * c) + a mod (b * c)\n\ngoal (1 subgoal):\n 1. a mod (b * c) = a - m1 * (b * c)", "by auto"], ["proof (state)\nthis:\n  a mod (b * c) = a - m1 * (b * c)\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c", "then"], ["proof (chain)\npicking this:\n  a mod (b * c) = a - m1 * (b * c)", "have \"\\<exists>m.( ?x = m*c + ?z)\""], ["proof (prove)\nusing this:\n  a mod (b * c) = a - m1 * (b * c)\n\ngoal (1 subgoal):\n 1. \\<exists>m. a mod (b * c) = m * c + a mod (b * c) mod c", "using mod_div_decomp"], ["proof (prove)\nusing this:\n  a mod (b * c) = a - m1 * (b * c)\n  (\\<And>q r.\n      \\<lbrakk>q = ?a div ?b; r = ?a mod ?b; ?a = q * ?b + r\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. \\<exists>m. a mod (b * c) = m * c + a mod (b * c) mod c", "by blast"], ["proof (state)\nthis:\n  \\<exists>m. a mod (b * c) = m * c + a mod (b * c) mod c\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c", "then"], ["proof (chain)\npicking this:\n  \\<exists>m. a mod (b * c) = m * c + a mod (b * c) mod c", "obtain m where \"( ?x = m*c + ?z)\""], ["proof (prove)\nusing this:\n  \\<exists>m. a mod (b * c) = m * c + a mod (b * c) mod c\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        a mod (b * c) = m * c + a mod (b * c) mod c \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  a mod (b * c) = m * c + a mod (b * c) mod c\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c", "then"], ["proof (chain)\npicking this:\n  a mod (b * c) = m * c + a mod (b * c) mod c", "have \"(a - m1*(b*c)) = m*c + ?z\""], ["proof (prove)\nusing this:\n  a mod (b * c) = m * c + a mod (b * c) mod c\n\ngoal (1 subgoal):\n 1. a - m1 * (b * c) = m * c + a mod (b * c) mod c", "using  \\<open>a mod (b * c) = a - m1 * (b * c)\\<close>"], ["proof (prove)\nusing this:\n  a mod (b * c) = m * c + a mod (b * c) mod c\n  a mod (b * c) = a - m1 * (b * c)\n\ngoal (1 subgoal):\n 1. a - m1 * (b * c) = m * c + a mod (b * c) mod c", "by (metis)"], ["proof (state)\nthis:\n  a - m1 * (b * c) = m * c + a mod (b * c) mod c\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c", "then"], ["proof (chain)\npicking this:\n  a - m1 * (b * c) = m * c + a mod (b * c) mod c", "have \"a = m1*b*c + m*c + ?z\""], ["proof (prove)\nusing this:\n  a - m1 * (b * c) = m * c + a mod (b * c) mod c\n\ngoal (1 subgoal):\n 1. a = m1 * b * c + m * c + a mod (b * c) mod c", "using \\<open>a = m1 * (b * c) + a mod (b * c)\\<close> \\<open>a mod (b * c) \n        = m * c + a mod (b * c) mod c\\<close>"], ["proof (prove)\nusing this:\n  a - m1 * (b * c) = m * c + a mod (b * c) mod c\n  a = m1 * (b * c) + a mod (b * c)\n  a mod (b * c) = m * c + a mod (b * c) mod c\n\ngoal (1 subgoal):\n 1. a = m1 * b * c + m * c + a mod (b * c) mod c", "by (metis  ab_semigroup_add_class.add_ac(1) \n        ab_semigroup_mult_class.mult_ac(1))"], ["proof (state)\nthis:\n  a = m1 * b * c + m * c + a mod (b * c) mod c\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c", "then"], ["proof (chain)\npicking this:\n  a = m1 * b * c + m * c + a mod (b * c) mod c", "have 1:\"a = (m1*b + m)*c + ?z\""], ["proof (prove)\nusing this:\n  a = m1 * b * c + m * c + a mod (b * c) mod c\n\ngoal (1 subgoal):\n 1. a = (m1 * b + m) * c + a mod (b * c) mod c", "by (metis add_mult_distrib2 mult.commute)"], ["proof (state)\nthis:\n  a = (m1 * b + m) * c + a mod (b * c) mod c\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c", "let ?y = \"(a mod c)\""], ["proof (state)\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c", "have \"\\<exists>n. a = n*(c) + ?y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n. a = n * c + a mod c", "by (metis \"1\" \\<open>a mod (b * c) = m * c + a mod (b * c) mod c\\<close> mod_mult_self3)"], ["proof (state)\nthis:\n  \\<exists>n. a = n * c + a mod c\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c", "then"], ["proof (chain)\npicking this:\n  \\<exists>n. a = n * c + a mod c", "obtain n where \"a = n*(c) + ?y\""], ["proof (prove)\nusing this:\n  \\<exists>n. a = n * c + a mod c\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        a = n * c + a mod c \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  a = n * c + a mod c\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c", "with 1"], ["proof (chain)\npicking this:\n  a = (m1 * b + m) * c + a mod (b * c) mod c\n  a = n * c + a mod c", "have \"(m1*b + m)*c + ?z = n*c + ?y\""], ["proof (prove)\nusing this:\n  a = (m1 * b + m) * c + a mod (b * c) mod c\n  a = n * c + a mod c\n\ngoal (1 subgoal):\n 1. (m1 * b + m) * c + a mod (b * c) mod c = n * c + a mod c", "by auto"], ["proof (state)\nthis:\n  (m1 * b + m) * c + a mod (b * c) mod c = n * c + a mod c\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c", "then"], ["proof (chain)\npicking this:\n  (m1 * b + m) * c + a mod (b * c) mod c = n * c + a mod c", "have \"(m1*b + m)*c - (n*c) = ?y - ?z\""], ["proof (prove)\nusing this:\n  (m1 * b + m) * c + a mod (b * c) mod c = n * c + a mod c\n\ngoal (1 subgoal):\n 1. (m1 * b + m) * c - n * c = a mod c - a mod (b * c) mod c", "by auto"], ["proof (state)\nthis:\n  (m1 * b + m) * c - n * c = a mod c - a mod (b * c) mod c\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c", "then"], ["proof (chain)\npicking this:\n  (m1 * b + m) * c - n * c = a mod c - a mod (b * c) mod c", "have \"(m1*b + m - n)*c = (?y - ?z)\""], ["proof (prove)\nusing this:\n  (m1 * b + m) * c - n * c = a mod c - a mod (b * c) mod c\n\ngoal (1 subgoal):\n 1. (m1 * b + m - n) * c = a mod c - a mod (b * c) mod c", "by (metis diff_mult_distrib2 mult.commute)"], ["proof (state)\nthis:\n  (m1 * b + m - n) * c = a mod c - a mod (b * c) mod c\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c", "then"], ["proof (chain)\npicking this:\n  (m1 * b + m - n) * c = a mod c - a mod (b * c) mod c", "have \"c dvd (?y - ?z)\""], ["proof (prove)\nusing this:\n  (m1 * b + m - n) * c = a mod c - a mod (b * c) mod c\n\ngoal (1 subgoal):\n 1. c dvd a mod c - a mod (b * c) mod c", "by (metis dvd_triv_right)"], ["proof (state)\nthis:\n  c dvd a mod c - a mod (b * c) mod c\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c", "moreover"], ["proof (state)\nthis:\n  c dvd a mod c - a mod (b * c) mod c\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c", "have \"?y < c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a mod c < c", "using mod_less_divisor False"], ["proof (prove)\nusing this:\n  0 < ?n \\<Longrightarrow> ?m mod ?n < ?n\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. a mod c < c", "by auto"], ["proof (state)\nthis:\n  a mod c < c\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c", "moreover"], ["proof (state)\nthis:\n  a mod c < c\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c", "have \"?z < c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a mod (b * c) mod c < c", "using mod_less_divisor False"], ["proof (prove)\nusing this:\n  0 < ?n \\<Longrightarrow> ?m mod ?n < ?n\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. a mod (b * c) mod c < c", "by auto"], ["proof (state)\nthis:\n  a mod (b * c) mod c < c\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c", "moreover"], ["proof (state)\nthis:\n  a mod (b * c) mod c < c\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c", "have \"?y - ?z < c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a mod c - a mod (b * c) mod c < c", "using calculation(2) less_imp_diff_less"], ["proof (prove)\nusing this:\n  a mod c < c\n  ?j < ?k \\<Longrightarrow> ?j - ?n < ?k\n\ngoal (1 subgoal):\n 1. a mod c - a mod (b * c) mod c < c", "by blast"], ["proof (state)\nthis:\n  a mod c - a mod (b * c) mod c < c\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c", "ultimately"], ["proof (chain)\npicking this:\n  c dvd a mod c - a mod (b * c) mod c\n  a mod c < c\n  a mod (b * c) mod c < c\n  a mod c - a mod (b * c) mod c < c", "have \"?y - ?z = 0\""], ["proof (prove)\nusing this:\n  c dvd a mod c - a mod (b * c) mod c\n  a mod c < c\n  a mod (b * c) mod c < c\n  a mod c - a mod (b * c) mod c < c\n\ngoal (1 subgoal):\n 1. a mod c - a mod (b * c) mod c = 0", "by (metis dvd_imp_mod_0 mod_less)"], ["proof (state)\nthis:\n  a mod c - a mod (b * c) mod c = 0\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) mod c = a mod c", "then"], ["proof (chain)\npicking this:\n  a mod c - a mod (b * c) mod c = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  a mod c - a mod (b * c) mod c = 0\n\ngoal (1 subgoal):\n 1. a mod (b * c) mod c = a mod c", "using False"], ["proof (prove)\nusing this:\n  a mod c - a mod (b * c) mod c = 0\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. a mod (b * c) mod c = a mod c", "by (metis \"1\" mod_add_right_eq mod_mult_self2 add.commute mult.commute)"], ["proof (state)\nthis:\n  a mod (b * c) mod c = a mod c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mod_div_relation:\"((a::nat) mod (b*c)) div c = (a div c) mod b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a mod (b * c) div c = a div c mod b", "proof(cases \"b*c = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. b * c = 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b\n 2. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "case True"], ["proof (state)\nthis:\n  b * c = 0\n\ngoal (2 subgoals):\n 1. b * c = 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b\n 2. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "have T_1:\"(b = 0)\\<or>(c = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b = 0 \\<or> c = 0", "using True"], ["proof (prove)\nusing this:\n  b * c = 0\n\ngoal (1 subgoal):\n 1. b = 0 \\<or> c = 0", "by auto"], ["proof (state)\nthis:\n  b = 0 \\<or> c = 0\n\ngoal (2 subgoals):\n 1. b * c = 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b\n 2. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. a mod (b * c) div c = a div c mod b", "proof(cases \"(b = 0)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. b = 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b\n 2. b \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "case True"], ["proof (state)\nthis:\n  b = 0\n\ngoal (2 subgoals):\n 1. b = 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b\n 2. b \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "have \"a mod (b*c) = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a mod (b * c) = a", "using True"], ["proof (prove)\nusing this:\n  b = 0\n\ngoal (1 subgoal):\n 1. a mod (b * c) = a", "by auto"], ["proof (state)\nthis:\n  a mod (b * c) = a\n\ngoal (2 subgoals):\n 1. b = 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b\n 2. b \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "then"], ["proof (chain)\npicking this:\n  a mod (b * c) = a", "show ?thesis"], ["proof (prove)\nusing this:\n  a mod (b * c) = a\n\ngoal (1 subgoal):\n 1. a mod (b * c) div c = a div c mod b", "using True"], ["proof (prove)\nusing this:\n  a mod (b * c) = a\n  b = 0\n\ngoal (1 subgoal):\n 1. a mod (b * c) div c = a div c mod b", "by auto"], ["proof (state)\nthis:\n  a mod (b * c) div c = a div c mod b\n\ngoal (1 subgoal):\n 1. b \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. b \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "case False"], ["proof (state)\nthis:\n  b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. b \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "have \"c = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c = 0", "using T_1 False"], ["proof (prove)\nusing this:\n  b = 0 \\<or> c = 0\n  b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. c = 0", "by auto"], ["proof (state)\nthis:\n  c = 0\n\ngoal (1 subgoal):\n 1. b \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "then"], ["proof (chain)\npicking this:\n  c = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  c = 0\n\ngoal (1 subgoal):\n 1. a mod (b * c) div c = a div c mod b", "by auto"], ["proof (state)\nthis:\n  a mod (b * c) div c = a div c mod b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a mod (b * c) div c = a div c mod b\n\ngoal (1 subgoal):\n 1. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "case False"], ["proof (state)\nthis:\n  b * c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "have F_1:\"(b > 0)\\<and> (c > 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < b \\<and> 0 < c", "using False"], ["proof (prove)\nusing this:\n  b * c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < b \\<and> 0 < c", "by auto"], ["proof (state)\nthis:\n  0 < b \\<and> 0 < c\n\ngoal (1 subgoal):\n 1. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "have \"\\<exists>x. a = x*(b*c) + (a mod (b*c))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. a = x * (b * c) + a mod (b * c)", "using mod_div_decomp"], ["proof (prove)\nusing this:\n  (\\<And>q r.\n      \\<lbrakk>q = ?a div ?b; r = ?a mod ?b; ?a = q * ?b + r\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. \\<exists>x. a = x * (b * c) + a mod (b * c)", "by blast"], ["proof (state)\nthis:\n  \\<exists>x. a = x * (b * c) + a mod (b * c)\n\ngoal (1 subgoal):\n 1. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "then"], ["proof (chain)\npicking this:\n  \\<exists>x. a = x * (b * c) + a mod (b * c)", "obtain x where \"a = x*(b*c) + (a mod (b*c))\""], ["proof (prove)\nusing this:\n  \\<exists>x. a = x * (b * c) + a mod (b * c)\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        a = x * (b * c) + a mod (b * c) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  a = x * (b * c) + a mod (b * c)\n\ngoal (1 subgoal):\n 1. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "then"], ["proof (chain)\npicking this:\n  a = x * (b * c) + a mod (b * c)", "have \"a div c = ((x*(b*c)) div c) + ((a mod (b*c)) div c)\""], ["proof (prove)\nusing this:\n  a = x * (b * c) + a mod (b * c)\n\ngoal (1 subgoal):\n 1. a div c = x * (b * c) div c + a mod (b * c) div c", "using  div_add1_eq mod_add_self1 mod_add_self2 \n       mod_by_0 mod_div_trivial mod_prop1 mod_self"], ["proof (prove)\nusing this:\n  a = x * (b * c) + a mod (b * c)\n  (?a + ?b) div ?c = ?a div ?c + ?b div ?c + (?a mod ?c + ?b mod ?c) div ?c\n  (?b + ?a) mod ?b = ?a mod ?b\n  (?a + ?b) mod ?b = ?a mod ?b\n  ?a mod (0::?'a) = ?a\n  ?a mod ?b div ?b = (0::?'a)\n  ?a mod (?b * ?c) mod ?c = ?a mod ?c\n  ?a mod ?a = (0::?'a)\n\ngoal (1 subgoal):\n 1. a div c = x * (b * c) div c + a mod (b * c) div c", "by (metis)"], ["proof (state)\nthis:\n  a div c = x * (b * c) div c + a mod (b * c) div c\n\ngoal (1 subgoal):\n 1. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "then"], ["proof (chain)\npicking this:\n  a div c = x * (b * c) div c + a mod (b * c) div c", "have \"a div c = (((x*b)*c) div c) + ((a mod (b*c)) div c)\""], ["proof (prove)\nusing this:\n  a div c = x * (b * c) div c + a mod (b * c) div c\n\ngoal (1 subgoal):\n 1. a div c = x * b * c div c + a mod (b * c) div c", "by auto"], ["proof (state)\nthis:\n  a div c = x * b * c div c + a mod (b * c) div c\n\ngoal (1 subgoal):\n 1. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "then"], ["proof (chain)\npicking this:\n  a div c = x * b * c div c + a mod (b * c) div c", "have F_2:\"a div c = (x*b) + ((a mod (b*c)) div c)\""], ["proof (prove)\nusing this:\n  a div c = x * b * c div c + a mod (b * c) div c\n\ngoal (1 subgoal):\n 1. a div c = x * b + a mod (b * c) div c", "by (metis F_1 nonzero_mult_div_cancel_left mult.commute neq0_conv)"], ["proof (state)\nthis:\n  a div c = x * b + a mod (b * c) div c\n\ngoal (1 subgoal):\n 1. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "have \"\\<exists>y. a div c = (y*b) + ((a div c) mod b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y. a div c = y * b + a div c mod b", "by (metis add.commute mod_div_mult_eq)"], ["proof (state)\nthis:\n  \\<exists>y. a div c = y * b + a div c mod b\n\ngoal (1 subgoal):\n 1. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "then"], ["proof (chain)\npicking this:\n  \\<exists>y. a div c = y * b + a div c mod b", "obtain y where \"a div c = (y*b) + ((a div c) mod b)\""], ["proof (prove)\nusing this:\n  \\<exists>y. a div c = y * b + a div c mod b\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        a div c = y * b + a div c mod b \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  a div c = y * b + a div c mod b\n\ngoal (1 subgoal):\n 1. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "with F_2"], ["proof (chain)\npicking this:\n  a div c = x * b + a mod (b * c) div c\n  a div c = y * b + a div c mod b", "have F_3:\" (x*b) + ((a mod (b*c)) div c) = (y*b) + ((a div c) mod b)\""], ["proof (prove)\nusing this:\n  a div c = x * b + a mod (b * c) div c\n  a div c = y * b + a div c mod b\n\ngoal (1 subgoal):\n 1. x * b + a mod (b * c) div c = y * b + a div c mod b", "by auto"], ["proof (state)\nthis:\n  x * b + a mod (b * c) div c = y * b + a div c mod b\n\ngoal (1 subgoal):\n 1. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "then"], ["proof (chain)\npicking this:\n  x * b + a mod (b * c) div c = y * b + a div c mod b", "have \"(x*b) - (y * b) = ((a div c) mod b) - ((a mod (b*c)) div c) \""], ["proof (prove)\nusing this:\n  x * b + a mod (b * c) div c = y * b + a div c mod b\n\ngoal (1 subgoal):\n 1. x * b - y * b = a div c mod b - a mod (b * c) div c", "by auto"], ["proof (state)\nthis:\n  x * b - y * b = a div c mod b - a mod (b * c) div c\n\ngoal (1 subgoal):\n 1. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "then"], ["proof (chain)\npicking this:\n  x * b - y * b = a div c mod b - a mod (b * c) div c", "have \"(x - y) * b = ((a div c) mod b) - ((a mod (b*c)) div c)\""], ["proof (prove)\nusing this:\n  x * b - y * b = a div c mod b - a mod (b * c) div c\n\ngoal (1 subgoal):\n 1. (x - y) * b = a div c mod b - a mod (b * c) div c", "by (metis diff_mult_distrib2 mult.commute)"], ["proof (state)\nthis:\n  (x - y) * b = a div c mod b - a mod (b * c) div c\n\ngoal (1 subgoal):\n 1. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "then"], ["proof (chain)\npicking this:\n  (x - y) * b = a div c mod b - a mod (b * c) div c", "have F_4:\"b dvd (((a div c) mod b) - ((a mod (b*c)) div c))\""], ["proof (prove)\nusing this:\n  (x - y) * b = a div c mod b - a mod (b * c) div c\n\ngoal (1 subgoal):\n 1. b dvd a div c mod b - a mod (b * c) div c", "by (metis dvd_eq_mod_eq_0 mod_mult_self1_is_0 mult.commute)"], ["proof (state)\nthis:\n  b dvd a div c mod b - a mod (b * c) div c\n\ngoal (1 subgoal):\n 1. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "have F_5:\"b >  ((a div c) mod b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a div c mod b < b", "by (metis F_1 mod_less_divisor)"], ["proof (state)\nthis:\n  a div c mod b < b\n\ngoal (1 subgoal):\n 1. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "have \"b*c > (a mod (b*c))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a mod (b * c) < b * c", "by (metis False mod_less_divisor neq0_conv)"], ["proof (state)\nthis:\n  a mod (b * c) < b * c\n\ngoal (1 subgoal):\n 1. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "moreover"], ["proof (state)\nthis:\n  a mod (b * c) < b * c\n\ngoal (1 subgoal):\n 1. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "then"], ["proof (chain)\npicking this:\n  a mod (b * c) < b * c", "have \"(b*c) div c > (a mod (b*c)) div c\""], ["proof (prove)\nusing this:\n  a mod (b * c) < b * c\n\ngoal (1 subgoal):\n 1. a mod (b * c) div c < b * c div c", "by (metis F_1 div_left_ineq nonzero_mult_div_cancel_right neq0_conv)"], ["proof (state)\nthis:\n  a mod (b * c) div c < b * c div c\n\ngoal (1 subgoal):\n 1. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "then"], ["proof (chain)\npicking this:\n  a mod (b * c) div c < b * c div c", "have \"b > (a mod (b*c)) div c\""], ["proof (prove)\nusing this:\n  a mod (b * c) div c < b * c div c\n\ngoal (1 subgoal):\n 1. a mod (b * c) div c < b", "by (metis calculation div_right_ineq mult.commute)"], ["proof (state)\nthis:\n  a mod (b * c) div c < b\n\ngoal (1 subgoal):\n 1. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "with F_4 F_5"], ["proof (chain)\npicking this:\n  b dvd a div c mod b - a mod (b * c) div c\n  a div c mod b < b\n  a mod (b * c) div c < b", "have F_6:\"((a div c) mod b)-((a mod (b*c)) div c) = 0\""], ["proof (prove)\nusing this:\n  b dvd a div c mod b - a mod (b * c) div c\n  a div c mod b < b\n  a mod (b * c) div c < b\n\ngoal (1 subgoal):\n 1. a div c mod b - a mod (b * c) div c = 0", "using less_imp_diff_less nat_dvd_not_less"], ["proof (prove)\nusing this:\n  b dvd a div c mod b - a mod (b * c) div c\n  a div c mod b < b\n  a mod (b * c) div c < b\n  ?j < ?k \\<Longrightarrow> ?j - ?n < ?k\n  \\<lbrakk>0 < ?m; ?m < ?n\\<rbrakk> \\<Longrightarrow> \\<not> ?n dvd ?m\n\ngoal (1 subgoal):\n 1. a div c mod b - a mod (b * c) div c = 0", "by blast"], ["proof (state)\nthis:\n  a div c mod b - a mod (b * c) div c = 0\n\ngoal (1 subgoal):\n 1. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "from F_3"], ["proof (chain)\npicking this:\n  x * b + a mod (b * c) div c = y * b + a div c mod b", "have \"(y * b) - (x*b) \n                      = ((a mod (b*c)) div c) - ((a div c) mod b) \""], ["proof (prove)\nusing this:\n  x * b + a mod (b * c) div c = y * b + a div c mod b\n\ngoal (1 subgoal):\n 1. y * b - x * b = a mod (b * c) div c - a div c mod b", "by auto"], ["proof (state)\nthis:\n  y * b - x * b = a mod (b * c) div c - a div c mod b\n\ngoal (1 subgoal):\n 1. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "then"], ["proof (chain)\npicking this:\n  y * b - x * b = a mod (b * c) div c - a div c mod b", "have \"(y - x) * b = ((a mod (b*c)) div c) - ((a div c) mod b)\""], ["proof (prove)\nusing this:\n  y * b - x * b = a mod (b * c) div c - a div c mod b\n\ngoal (1 subgoal):\n 1. (y - x) * b = a mod (b * c) div c - a div c mod b", "by (metis diff_mult_distrib2 mult.commute)"], ["proof (state)\nthis:\n  (y - x) * b = a mod (b * c) div c - a div c mod b\n\ngoal (1 subgoal):\n 1. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "then"], ["proof (chain)\npicking this:\n  (y - x) * b = a mod (b * c) div c - a div c mod b", "have F_7:\"b dvd (((a mod (b*c)) div c) - ((a div c) mod b))\""], ["proof (prove)\nusing this:\n  (y - x) * b = a mod (b * c) div c - a div c mod b\n\ngoal (1 subgoal):\n 1. b dvd a mod (b * c) div c - a div c mod b", "by (metis dvd_eq_mod_eq_0 mod_mult_self1_is_0  mult.commute)"], ["proof (state)\nthis:\n  b dvd a mod (b * c) div c - a div c mod b\n\ngoal (1 subgoal):\n 1. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "have F_8:\"b >  ((a div c) mod b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a div c mod b < b", "by (metis F_1 mod_less_divisor)"], ["proof (state)\nthis:\n  a div c mod b < b\n\ngoal (1 subgoal):\n 1. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "have \"b*c > (a mod (b*c))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a mod (b * c) < b * c", "by (metis False mod_less_divisor neq0_conv)"], ["proof (state)\nthis:\n  a mod (b * c) < b * c\n\ngoal (1 subgoal):\n 1. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "moreover"], ["proof (state)\nthis:\n  a mod (b * c) < b * c\n\ngoal (1 subgoal):\n 1. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "then"], ["proof (chain)\npicking this:\n  a mod (b * c) < b * c", "have \"(b*c) div c > (a mod (b*c)) div c\""], ["proof (prove)\nusing this:\n  a mod (b * c) < b * c\n\ngoal (1 subgoal):\n 1. a mod (b * c) div c < b * c div c", "by (metis F_1 div_left_ineq  nonzero_mult_div_cancel_right neq0_conv)"], ["proof (state)\nthis:\n  a mod (b * c) div c < b * c div c\n\ngoal (1 subgoal):\n 1. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "then"], ["proof (chain)\npicking this:\n  a mod (b * c) div c < b * c div c", "have \"b > (a mod (b*c)) div c\""], ["proof (prove)\nusing this:\n  a mod (b * c) div c < b * c div c\n\ngoal (1 subgoal):\n 1. a mod (b * c) div c < b", "by (metis calculation div_right_ineq  mult.commute)"], ["proof (state)\nthis:\n  a mod (b * c) div c < b\n\ngoal (1 subgoal):\n 1. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "with F_7 F_8"], ["proof (chain)\npicking this:\n  b dvd a mod (b * c) div c - a div c mod b\n  a div c mod b < b\n  a mod (b * c) div c < b", "have \"((a mod (b*c)) div c) - ((a div c) mod b) = 0\""], ["proof (prove)\nusing this:\n  b dvd a mod (b * c) div c - a div c mod b\n  a div c mod b < b\n  a mod (b * c) div c < b\n\ngoal (1 subgoal):\n 1. a mod (b * c) div c - a div c mod b = 0", "by (metis F_2 cancel_comm_monoid_add_class.diff_cancel mod_if mod_mult_self3)"], ["proof (state)\nthis:\n  a mod (b * c) div c - a div c mod b = 0\n\ngoal (1 subgoal):\n 1. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "with F_6"], ["proof (chain)\npicking this:\n  a div c mod b - a mod (b * c) div c = 0\n  a mod (b * c) div c - a div c mod b = 0", "have \"((a mod (b*c)) div c) = ((a div c) mod b)\""], ["proof (prove)\nusing this:\n  a div c mod b - a mod (b * c) div c = 0\n  a mod (b * c) div c - a div c mod b = 0\n\ngoal (1 subgoal):\n 1. a mod (b * c) div c = a div c mod b", "by auto"], ["proof (state)\nthis:\n  a mod (b * c) div c = a div c mod b\n\ngoal (1 subgoal):\n 1. b * c \\<noteq> 0 \\<Longrightarrow> a mod (b * c) div c = a div c mod b", "then"], ["proof (chain)\npicking this:\n  a mod (b * c) div c = a div c mod b", "show ?thesis"], ["proof (prove)\nusing this:\n  a mod (b * c) div c = a div c mod b\n\ngoal (1 subgoal):\n 1. a mod (b * c) div c = a div c mod b", "using False"], ["proof (prove)\nusing this:\n  a mod (b * c) div c = a div c mod b\n  b * c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. a mod (b * c) div c = a div c mod b", "by auto"], ["proof (state)\nthis:\n  a mod (b * c) div c = a div c mod b\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>The following lemma proves that the tensor product of matrices\nis associative\\<close>"], ["", "lemma associativity:\n fixes M1 M2 M3\n shows\n      \" (mat (row_length M1) (length M1) M1) \n      \\<and> (mat (row_length M2) (length M2) M2)\n      \\<and> (mat (row_length M3) (length M3) M3)\n        \\<Longrightarrow>\n           M1 \\<otimes> (M2 \\<otimes> M3) = (M1 \\<otimes> M2) \\<otimes> M3\" (is \"?x \\<Longrightarrow>?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "assume 0:\"  (mat (row_length M1) (length M1) M1) \n           \\<and> (mat (row_length M2) (length M2) M2)\n           \\<and> (mat (row_length M3) (length M3) M3)\""], ["proof (state)\nthis:\n  mat (row_length M1) (length M1) M1 \\<and>\n  mat (row_length M2) (length M2) M2 \\<and>\n  mat (row_length M3) (length M3) M3\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "have 1:\"length ((M1 \\<otimes> M2) \\<otimes> M3) \n                    = (length M1)*(length M2)* (length M3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (M1 \\<otimes> M2 \\<otimes> M3) =\n    length M1 * length M2 * length M3", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. length (M1 \\<otimes> M2 \\<otimes> M3) =\n    length M1 * length M2 * length M3", "have \"length (M2 \\<otimes> M3) = (length M2)* (length M3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (M2 \\<otimes> M3) = length M2 * length M3", "by (metis length_Tensor)"], ["proof (state)\nthis:\n  length (M2 \\<otimes> M3) = length M2 * length M3\n\ngoal (1 subgoal):\n 1. length (M1 \\<otimes> M2 \\<otimes> M3) =\n    length M1 * length M2 * length M3", "then"], ["proof (chain)\npicking this:\n  length (M2 \\<otimes> M3) = length M2 * length M3", "have \"length (M1 \\<otimes> (M2 \\<otimes> M3)) \n                  = (length M1)*(length M2)* (length M3)\""], ["proof (prove)\nusing this:\n  length (M2 \\<otimes> M3) = length M2 * length M3\n\ngoal (1 subgoal):\n 1. length (M1 \\<otimes> (M2 \\<otimes> M3)) =\n    length M1 * length M2 * length M3", "using mult.assoc length_Tensor"], ["proof (prove)\nusing this:\n  length (M2 \\<otimes> M3) = length M2 * length M3\n  Matrix_Tensor.mult ?id ?f \\<Longrightarrow>\n  ?f (?f ?a ?b) ?c = ?f ?a (?f ?b ?c)\n  length (?M1.0 \\<otimes> ?M2.0) = length ?M1.0 * length ?M2.0\n\ngoal (1 subgoal):\n 1. length (M1 \\<otimes> (M2 \\<otimes> M3)) =\n    length M1 * length M2 * length M3", "by auto"], ["proof (state)\nthis:\n  length (M1 \\<otimes> (M2 \\<otimes> M3)) =\n  length M1 * length M2 * length M3\n\ngoal (1 subgoal):\n 1. length (M1 \\<otimes> M2 \\<otimes> M3) =\n    length M1 * length M2 * length M3", "moreover"], ["proof (state)\nthis:\n  length (M1 \\<otimes> (M2 \\<otimes> M3)) =\n  length M1 * length M2 * length M3\n\ngoal (1 subgoal):\n 1. length (M1 \\<otimes> M2 \\<otimes> M3) =\n    length M1 * length M2 * length M3", "have \" length (M1 \\<otimes> M2) = (length M1)* (length M2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (M1 \\<otimes> M2) = length M1 * length M2", "by (metis length_Tensor)"], ["proof (state)\nthis:\n  length (M1 \\<otimes> M2) = length M1 * length M2\n\ngoal (1 subgoal):\n 1. length (M1 \\<otimes> M2 \\<otimes> M3) =\n    length M1 * length M2 * length M3", "ultimately"], ["proof (chain)\npicking this:\n  length (M1 \\<otimes> (M2 \\<otimes> M3)) =\n  length M1 * length M2 * length M3\n  length (M1 \\<otimes> M2) = length M1 * length M2", "show ?thesis"], ["proof (prove)\nusing this:\n  length (M1 \\<otimes> (M2 \\<otimes> M3)) =\n  length M1 * length M2 * length M3\n  length (M1 \\<otimes> M2) = length M1 * length M2\n\ngoal (1 subgoal):\n 1. length (M1 \\<otimes> M2 \\<otimes> M3) =\n    length M1 * length M2 * length M3", "using mult.assoc length_Tensor"], ["proof (prove)\nusing this:\n  length (M1 \\<otimes> (M2 \\<otimes> M3)) =\n  length M1 * length M2 * length M3\n  length (M1 \\<otimes> M2) = length M1 * length M2\n  Matrix_Tensor.mult ?id ?f \\<Longrightarrow>\n  ?f (?f ?a ?b) ?c = ?f ?a (?f ?b ?c)\n  length (?M1.0 \\<otimes> ?M2.0) = length ?M1.0 * length ?M2.0\n\ngoal (1 subgoal):\n 1. length (M1 \\<otimes> M2 \\<otimes> M3) =\n    length M1 * length M2 * length M3", "by auto"], ["proof (state)\nthis:\n  length (M1 \\<otimes> M2 \\<otimes> M3) = length M1 * length M2 * length M3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length (M1 \\<otimes> M2 \\<otimes> M3) = length M1 * length M2 * length M3\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "have 2:\"row_length ((M1 \\<otimes> M2) \\<otimes> M3) \n                    = (row_length M1)*(row_length M2)* (row_length M3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_length (M1 \\<otimes> M2 \\<otimes> M3) =\n    row_length M1 * row_length M2 * row_length M3", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. row_length (M1 \\<otimes> M2 \\<otimes> M3) =\n    row_length M1 * row_length M2 * row_length M3", "have \"row_length (M2 \\<otimes> M3) = (row_length M2)* (row_length M3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_length (M2 \\<otimes> M3) = row_length M2 * row_length M3", "using row_length_mat assoc"], ["proof (prove)\nusing this:\n  row_length (?m1.0 \\<otimes> ?m2.0) = row_length ?m1.0 * row_length ?m2.0\n  ?a * ?b * ?c = ?a * (?b * ?c)\n\ngoal (1 subgoal):\n 1. row_length (M2 \\<otimes> M3) = row_length M2 * row_length M3", "by auto"], ["proof (state)\nthis:\n  row_length (M2 \\<otimes> M3) = row_length M2 * row_length M3\n\ngoal (1 subgoal):\n 1. row_length (M1 \\<otimes> M2 \\<otimes> M3) =\n    row_length M1 * row_length M2 * row_length M3", "then"], ["proof (chain)\npicking this:\n  row_length (M2 \\<otimes> M3) = row_length M2 * row_length M3", "have \"row_length (M1 \\<otimes> (M2 \\<otimes> M3)) \n                   = (row_length M1)*(row_length M2)* (row_length M3)\""], ["proof (prove)\nusing this:\n  row_length (M2 \\<otimes> M3) = row_length M2 * row_length M3\n\ngoal (1 subgoal):\n 1. row_length (M1 \\<otimes> (M2 \\<otimes> M3)) =\n    row_length M1 * row_length M2 * row_length M3", "using row_length_mat assoc"], ["proof (prove)\nusing this:\n  row_length (M2 \\<otimes> M3) = row_length M2 * row_length M3\n  row_length (?m1.0 \\<otimes> ?m2.0) = row_length ?m1.0 * row_length ?m2.0\n  ?a * ?b * ?c = ?a * (?b * ?c)\n\ngoal (1 subgoal):\n 1. row_length (M1 \\<otimes> (M2 \\<otimes> M3)) =\n    row_length M1 * row_length M2 * row_length M3", "by auto"], ["proof (state)\nthis:\n  row_length (M1 \\<otimes> (M2 \\<otimes> M3)) =\n  row_length M1 * row_length M2 * row_length M3\n\ngoal (1 subgoal):\n 1. row_length (M1 \\<otimes> M2 \\<otimes> M3) =\n    row_length M1 * row_length M2 * row_length M3", "moreover"], ["proof (state)\nthis:\n  row_length (M1 \\<otimes> (M2 \\<otimes> M3)) =\n  row_length M1 * row_length M2 * row_length M3\n\ngoal (1 subgoal):\n 1. row_length (M1 \\<otimes> M2 \\<otimes> M3) =\n    row_length M1 * row_length M2 * row_length M3", "have \" row_length (M1 \\<otimes> M2) \n                                   = (row_length M1)* (row_length M2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_length (M1 \\<otimes> M2) = row_length M1 * row_length M2", "using row_length_mat"], ["proof (prove)\nusing this:\n  row_length (?m1.0 \\<otimes> ?m2.0) = row_length ?m1.0 * row_length ?m2.0\n\ngoal (1 subgoal):\n 1. row_length (M1 \\<otimes> M2) = row_length M1 * row_length M2", "by auto"], ["proof (state)\nthis:\n  row_length (M1 \\<otimes> M2) = row_length M1 * row_length M2\n\ngoal (1 subgoal):\n 1. row_length (M1 \\<otimes> M2 \\<otimes> M3) =\n    row_length M1 * row_length M2 * row_length M3", "ultimately"], ["proof (chain)\npicking this:\n  row_length (M1 \\<otimes> (M2 \\<otimes> M3)) =\n  row_length M1 * row_length M2 * row_length M3\n  row_length (M1 \\<otimes> M2) = row_length M1 * row_length M2", "show ?thesis"], ["proof (prove)\nusing this:\n  row_length (M1 \\<otimes> (M2 \\<otimes> M3)) =\n  row_length M1 * row_length M2 * row_length M3\n  row_length (M1 \\<otimes> M2) = row_length M1 * row_length M2\n\ngoal (1 subgoal):\n 1. row_length (M1 \\<otimes> M2 \\<otimes> M3) =\n    row_length M1 * row_length M2 * row_length M3", "using row_length_mat assoc"], ["proof (prove)\nusing this:\n  row_length (M1 \\<otimes> (M2 \\<otimes> M3)) =\n  row_length M1 * row_length M2 * row_length M3\n  row_length (M1 \\<otimes> M2) = row_length M1 * row_length M2\n  row_length (?m1.0 \\<otimes> ?m2.0) = row_length ?m1.0 * row_length ?m2.0\n  ?a * ?b * ?c = ?a * (?b * ?c)\n\ngoal (1 subgoal):\n 1. row_length (M1 \\<otimes> M2 \\<otimes> M3) =\n    row_length M1 * row_length M2 * row_length M3", "by auto"], ["proof (state)\nthis:\n  row_length (M1 \\<otimes> M2 \\<otimes> M3) =\n  row_length M1 * row_length M2 * row_length M3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  row_length (M1 \\<otimes> M2 \\<otimes> M3) =\n  row_length M1 * row_length M2 * row_length M3\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "have 3:\n      \"\\<forall>i.\\<forall>j.(((i<((row_length M1)*(row_length M2)*(row_length M3)))\n       \\<and>(j < (length M1)*(length M2)*(length M3)))\n                \\<longrightarrow> \n            (((M1 \\<otimes> M2) \\<otimes> M3)!j!i) \n                = f \n                   ((M1 \\<otimes> M2)!(j div (length M3))!(i div (row_length M3))) \n                   (M3!(j mod length M3)!(i mod (row_length M3))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length M1 * row_length M2 * row_length M3 \\<and>\n       j < length M1 * length M2 * length M3 \\<longrightarrow>\n       (M1 \\<otimes> M2 \\<otimes> M3) ! j ! i =\n       (M1 \\<otimes> M2) ! (j div length M3) ! (i div row_length M3) *\n       M3 ! (j mod length M3) ! (i mod row_length M3)", "using 0 matrix_Tensor_elements 1 2 effective_well_defined_Tensor \n             length_Tensor row_length_mat"], ["proof (prove)\nusing this:\n  mat (row_length M1) (length M1) M1 \\<and>\n  mat (row_length M2) (length M2) M2 \\<and>\n  mat (row_length M3) (length M3) M3\n  \\<forall>i j.\n     (i < row_length ?M1.0 * row_length ?M2.0 \\<and>\n      j < length ?M1.0 * length ?M2.0) \\<and>\n     mat (row_length ?M1.0) (length ?M1.0) ?M1.0 \\<and>\n     mat (row_length ?M2.0) (length ?M2.0) ?M2.0 \\<longrightarrow>\n     (?M1.0 \\<otimes> ?M2.0) ! j ! i =\n     ?M1.0 ! (j div length ?M2.0) ! (i div row_length ?M2.0) *\n     ?M2.0 ! (j mod length ?M2.0) ! (i mod row_length ?M2.0)\n  length (M1 \\<otimes> M2 \\<otimes> M3) = length M1 * length M2 * length M3\n  row_length (M1 \\<otimes> M2 \\<otimes> M3) =\n  row_length M1 * row_length M2 * row_length M3\n  \\<lbrakk>mat (row_length ?M1.0) (length ?M1.0) ?M1.0;\n   mat (row_length ?M2.0) (length ?M2.0) ?M2.0\\<rbrakk>\n  \\<Longrightarrow> mat (row_length ?M1.0 * row_length ?M2.0)\n                     (length ?M1.0 * length ?M2.0) (?M1.0 \\<otimes> ?M2.0)\n  length (?M1.0 \\<otimes> ?M2.0) = length ?M1.0 * length ?M2.0\n  row_length (?m1.0 \\<otimes> ?m2.0) = row_length ?m1.0 * row_length ?m2.0\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length M1 * row_length M2 * row_length M3 \\<and>\n       j < length M1 * length M2 * length M3 \\<longrightarrow>\n       (M1 \\<otimes> M2 \\<otimes> M3) ! j ! i =\n       (M1 \\<otimes> M2) ! (j div length M3) ! (i div row_length M3) *\n       M3 ! (j mod length M3) ! (i mod row_length M3)", "by auto"], ["proof (state)\nthis:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> M2 \\<otimes> M3) ! j ! i =\n     (M1 \\<otimes> M2) ! (j div length M3) ! (i div row_length M3) *\n     M3 ! (j mod length M3) ! (i mod row_length M3)\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "moreover"], ["proof (state)\nthis:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> M2 \\<otimes> M3) ! j ! i =\n     (M1 \\<otimes> M2) ! (j div length M3) ! (i div row_length M3) *\n     M3 ! (j mod length M3) ! (i mod row_length M3)\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "have \n       \"\\<forall>j.(j < (length M1)*(length M2)*(length M3))  \n                          \\<longrightarrow> (j div (length M3)) < (length M1)*(length M2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j<length M1 * length M2 * length M3.\n       j div length M3 < length M1 * length M2", "apply(rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < length M1 * length M2 * length M3 \\<longrightarrow>\n       j div length M3 < length M1 * length M2", "apply(simp add:div_left_ineq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>j<length M1 * length M2 * length M3.\n     j div length M3 < length M1 * length M2\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "moreover"], ["proof (state)\nthis:\n  \\<forall>j<length M1 * length M2 * length M3.\n     j div length M3 < length M1 * length M2\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "have \"\\<forall>i.(i < (row_length M1)*(row_length M2)*(row_length M3)) \n                       \\<longrightarrow> (i div (row_length M3)) \n                                         < (row_length M1)*(row_length M2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<row_length M1 * row_length M2 * row_length M3.\n       i div row_length M3 < row_length M1 * row_length M2", "apply(rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < row_length M1 * row_length M2 * row_length M3 \\<longrightarrow>\n       i div row_length M3 < row_length M1 * row_length M2", "apply(simp add:div_left_ineq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>i<row_length M1 * row_length M2 * row_length M3.\n     i div row_length M3 < row_length M1 * row_length M2\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> M2 \\<otimes> M3) ! j ! i =\n     (M1 \\<otimes> M2) ! (j div length M3) ! (i div row_length M3) *\n     M3 ! (j mod length M3) ! (i mod row_length M3)\n  \\<forall>j<length M1 * length M2 * length M3.\n     j div length M3 < length M1 * length M2\n  \\<forall>i<row_length M1 * row_length M2 * row_length M3.\n     i div row_length M3 < row_length M1 * row_length M2", "have 4:\"\\<forall>i.\\<forall>j.(((i<((row_length M1)*(row_length M2)*(row_length M3)))\n       \\<and>(j < (length M1)*(length M2)*(length M3)))\n          \\<longrightarrow> \n                ((i div (row_length M3)) < (row_length M1)*(row_length M2))\n                \\<and> ((j div (length M3)) < (length M1)*(length M2)))\""], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> M2 \\<otimes> M3) ! j ! i =\n     (M1 \\<otimes> M2) ! (j div length M3) ! (i div row_length M3) *\n     M3 ! (j mod length M3) ! (i mod row_length M3)\n  \\<forall>j<length M1 * length M2 * length M3.\n     j div length M3 < length M1 * length M2\n  \\<forall>i<row_length M1 * row_length M2 * row_length M3.\n     i div row_length M3 < row_length M1 * row_length M2\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length M1 * row_length M2 * row_length M3 \\<and>\n       j < length M1 * length M2 * length M3 \\<longrightarrow>\n       i div row_length M3 < row_length M1 * row_length M2 \\<and>\n       j div length M3 < length M1 * length M2", "using allI 0"], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> M2 \\<otimes> M3) ! j ! i =\n     (M1 \\<otimes> M2) ! (j div length M3) ! (i div row_length M3) *\n     M3 ! (j mod length M3) ! (i mod row_length M3)\n  \\<forall>j<length M1 * length M2 * length M3.\n     j div length M3 < length M1 * length M2\n  \\<forall>i<row_length M1 * row_length M2 * row_length M3.\n     i div row_length M3 < row_length M1 * row_length M2\n  (\\<And>x. ?P x) \\<Longrightarrow> \\<forall>x. ?P x\n  mat (row_length M1) (length M1) M1 \\<and>\n  mat (row_length M2) (length M2) M2 \\<and>\n  mat (row_length M3) (length M3) M3\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length M1 * row_length M2 * row_length M3 \\<and>\n       j < length M1 * length M2 * length M3 \\<longrightarrow>\n       i div row_length M3 < row_length M1 * row_length M2 \\<and>\n       j div length M3 < length M1 * length M2", "by auto"], ["proof (state)\nthis:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     i div row_length M3 < row_length M1 * row_length M2 \\<and>\n     j div length M3 < length M1 * length M2\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "have \" (mat (row_length M1) (length M1) M1) \n           \\<and> (mat (row_length M2) (length M2) M2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2", "using 0"], ["proof (prove)\nusing this:\n  mat (row_length M1) (length M1) M1 \\<and>\n  mat (row_length M2) (length M2) M2 \\<and>\n  mat (row_length M3) (length M3) M3\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2", "by auto"], ["proof (state)\nthis:\n  mat (row_length M1) (length M1) M1 \\<and>\n  mat (row_length M2) (length M2) M2\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "then"], ["proof (chain)\npicking this:\n  mat (row_length M1) (length M1) M1 \\<and>\n  mat (row_length M2) (length M2) M2", "have \"\\<forall>i.\\<forall>j.(((i div (row_length M3)) < (row_length M1)*(row_length M2))\n         \\<and> ((j div (length M3)) < (length M1)*(length M2))\n          \\<longrightarrow>\n       (((M1 \\<otimes> M2))!(j div (length M3))!(i div row_length M3)) \n                = f \n          ((M1)!((j div (length M3)) div (length M2))\n               !((i div (row_length M3)) div (row_length M2))) \n          (M2!((j div (length M3)) mod (length M2))\n             !((i div (row_length M3)) mod (row_length M2))))\""], ["proof (prove)\nusing this:\n  mat (row_length M1) (length M1) M1 \\<and>\n  mat (row_length M2) (length M2) M2\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i div row_length M3 < row_length M1 * row_length M2 \\<and>\n       j div length M3 < length M1 * length M2 \\<longrightarrow>\n       (M1 \\<otimes> M2) ! (j div length M3) ! (i div row_length M3) =\n       M1 ! (j div length M3 div length M2) !\n       (i div row_length M3 div row_length M2) *\n       M2 ! (j div length M3 mod length M2) !\n       (i div row_length M3 mod row_length M2)", "using  effective_matrix_tensor_elements"], ["proof (prove)\nusing this:\n  mat (row_length M1) (length M1) M1 \\<and>\n  mat (row_length M2) (length M2) M2\n  (?i < row_length ?M1.0 * row_length ?M2.0 \\<and>\n   ?j < length ?M1.0 * length ?M2.0) \\<and>\n  mat (row_length ?M1.0) (length ?M1.0) ?M1.0 \\<and>\n  mat (row_length ?M2.0) (length ?M2.0) ?M2.0 \\<Longrightarrow>\n  (?M1.0 \\<otimes> ?M2.0) ! ?j ! ?i =\n  ?M1.0 ! (?j div length ?M2.0) ! (?i div row_length ?M2.0) *\n  ?M2.0 ! (?j mod length ?M2.0) ! (?i mod row_length ?M2.0)\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i div row_length M3 < row_length M1 * row_length M2 \\<and>\n       j div length M3 < length M1 * length M2 \\<longrightarrow>\n       (M1 \\<otimes> M2) ! (j div length M3) ! (i div row_length M3) =\n       M1 ! (j div length M3 div length M2) !\n       (i div row_length M3 div row_length M2) *\n       M2 ! (j div length M3 mod length M2) !\n       (i div row_length M3 mod row_length M2)", "by auto"], ["proof (state)\nthis:\n  \\<forall>i j.\n     i div row_length M3 < row_length M1 * row_length M2 \\<and>\n     j div length M3 < length M1 * length M2 \\<longrightarrow>\n     (M1 \\<otimes> M2) ! (j div length M3) ! (i div row_length M3) =\n     M1 ! (j div length M3 div length M2) !\n     (i div row_length M3 div row_length M2) *\n     M2 ! (j div length M3 mod length M2) !\n     (i div row_length M3 mod row_length M2)\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "with 4"], ["proof (chain)\npicking this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     i div row_length M3 < row_length M1 * row_length M2 \\<and>\n     j div length M3 < length M1 * length M2\n  \\<forall>i j.\n     i div row_length M3 < row_length M1 * row_length M2 \\<and>\n     j div length M3 < length M1 * length M2 \\<longrightarrow>\n     (M1 \\<otimes> M2) ! (j div length M3) ! (i div row_length M3) =\n     M1 ! (j div length M3 div length M2) !\n     (i div row_length M3 div row_length M2) *\n     M2 ! (j div length M3 mod length M2) !\n     (i div row_length M3 mod row_length M2)", "have 5:\"\\<forall>i j.(((i<((row_length M1)*(row_length M2)*(row_length M3)))\n       \\<and>(j < (length M1)*(length M2)*(length M3)))\n          \\<longrightarrow>  (((M1 \\<otimes> M2))!(j div (length M3))!(i div row_length M3)) \n                = f \n       ((M1)!((j div (length M3)) div (length M2))\n            !((i div (row_length M3)) div (row_length M2))) \n        (M2!((j div (length M3)) mod (length M2))\n            !((i div (row_length M3)) mod (row_length M2))))\""], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     i div row_length M3 < row_length M1 * row_length M2 \\<and>\n     j div length M3 < length M1 * length M2\n  \\<forall>i j.\n     i div row_length M3 < row_length M1 * row_length M2 \\<and>\n     j div length M3 < length M1 * length M2 \\<longrightarrow>\n     (M1 \\<otimes> M2) ! (j div length M3) ! (i div row_length M3) =\n     M1 ! (j div length M3 div length M2) !\n     (i div row_length M3 div row_length M2) *\n     M2 ! (j div length M3 mod length M2) !\n     (i div row_length M3 mod row_length M2)\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length M1 * row_length M2 * row_length M3 \\<and>\n       j < length M1 * length M2 * length M3 \\<longrightarrow>\n       (M1 \\<otimes> M2) ! (j div length M3) ! (i div row_length M3) =\n       M1 ! (j div length M3 div length M2) !\n       (i div row_length M3 div row_length M2) *\n       M2 ! (j div length M3 mod length M2) !\n       (i div row_length M3 mod row_length M2)", "by auto"], ["proof (state)\nthis:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> M2) ! (j div length M3) ! (i div row_length M3) =\n     M1 ! (j div length M3 div length M2) !\n     (i div row_length M3 div row_length M2) *\n     M2 ! (j div length M3 mod length M2) !\n     (i div row_length M3 mod row_length M2)\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "with 3"], ["proof (chain)\npicking this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> M2 \\<otimes> M3) ! j ! i =\n     (M1 \\<otimes> M2) ! (j div length M3) ! (i div row_length M3) *\n     M3 ! (j mod length M3) ! (i mod row_length M3)\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> M2) ! (j div length M3) ! (i div row_length M3) =\n     M1 ! (j div length M3 div length M2) !\n     (i div row_length M3 div row_length M2) *\n     M2 ! (j div length M3 mod length M2) !\n     (i div row_length M3 mod row_length M2)", "have 6:\n      \"\\<forall>i.\\<forall>j.(((i<((row_length M1)*(row_length M2)*(row_length M3)))\n       \\<and>(j < (length M1)*(length M2)*(length M3)))\n                \\<longrightarrow> \n            (((M1 \\<otimes> M2) \\<otimes> M3)!j!i) \n                = f \n                   (f \n                     ((M1)!((j div (length M3)) div (length M2))\n                             !((i div (row_length M3)) div (row_length M2))) \n                     (M2!((j div (length M3)) mod (length M2))\n                           !((i div (row_length M3)) mod (row_length M2)))) \n                   (M3!(j mod length M3)!(i mod (row_length M3))))\""], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> M2 \\<otimes> M3) ! j ! i =\n     (M1 \\<otimes> M2) ! (j div length M3) ! (i div row_length M3) *\n     M3 ! (j mod length M3) ! (i mod row_length M3)\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> M2) ! (j div length M3) ! (i div row_length M3) =\n     M1 ! (j div length M3 div length M2) !\n     (i div row_length M3 div row_length M2) *\n     M2 ! (j div length M3 mod length M2) !\n     (i div row_length M3 mod row_length M2)\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length M1 * row_length M2 * row_length M3 \\<and>\n       j < length M1 * length M2 * length M3 \\<longrightarrow>\n       (M1 \\<otimes> M2 \\<otimes> M3) ! j ! i =\n       M1 ! (j div length M3 div length M2) !\n       (i div row_length M3 div row_length M2) *\n       M2 ! (j div length M3 mod length M2) !\n       (i div row_length M3 mod row_length M2) *\n       M3 ! (j mod length M3) ! (i mod row_length M3)", "by auto"], ["proof (state)\nthis:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> M2 \\<otimes> M3) ! j ! i =\n     M1 ! (j div length M3 div length M2) !\n     (i div row_length M3 div row_length M2) *\n     M2 ! (j div length M3 mod length M2) !\n     (i div row_length M3 mod row_length M2) *\n     M3 ! (j mod length M3) ! (i mod row_length M3)\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "have \"(j div (length M3))div (length M2) = (j div ((length M3)*(length M2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j div length M3 div length M2 = j div (length M3 * length M2)", "using div_mult2_eq"], ["proof (prove)\nusing this:\n  ?m div (?n * ?q) = ?m div ?n div ?q\n\ngoal (1 subgoal):\n 1. j div length M3 div length M2 = j div (length M3 * length M2)", "by auto"], ["proof (state)\nthis:\n  j div length M3 div length M2 = j div (length M3 * length M2)\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "moreover"], ["proof (state)\nthis:\n  j div length M3 div length M2 = j div (length M3 * length M2)\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "have \"((i div (row_length M3)) div (row_length M2)) = (i div ((row_length M3)*(row_length M2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i div row_length M3 div row_length M2 =\n    i div (row_length M3 * row_length M2)", "using div_mult2_eq"], ["proof (prove)\nusing this:\n  ?m div (?n * ?q) = ?m div ?n div ?q\n\ngoal (1 subgoal):\n 1. i div row_length M3 div row_length M2 =\n    i div (row_length M3 * row_length M2)", "by auto"], ["proof (state)\nthis:\n  i div row_length M3 div row_length M2 =\n  i div (row_length M3 * row_length M2)\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "ultimately"], ["proof (chain)\npicking this:\n  j div length M3 div length M2 = j div (length M3 * length M2)\n  i div row_length M3 div row_length M2 =\n  i div (row_length M3 * row_length M2)", "have step1:\"\\<forall>i.\\<forall>j.(((i<((row_length M1)*(row_length M2)*(row_length M3)))\n       \\<and>(j < (length M1)*(length M2)*(length M3)))\n                \\<longrightarrow> \n            (((M1 \\<otimes> M2) \\<otimes> M3)!j!i) \n                = f \n                   (f \n       ((M1)!(j div ((length M3)*(length M2)))! (i div ((row_length M3)*(row_length M2)))) \n          (M2!((j div (length M3)) mod (length M2))!((i div (row_length M3)) mod (row_length M2)))) \n                   (M3!(j mod length M3)!(i mod (row_length M3))))\""], ["proof (prove)\nusing this:\n  j div length M3 div length M2 = j div (length M3 * length M2)\n  i div row_length M3 div row_length M2 =\n  i div (row_length M3 * row_length M2)\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length M1 * row_length M2 * row_length M3 \\<and>\n       j < length M1 * length M2 * length M3 \\<longrightarrow>\n       (M1 \\<otimes> M2 \\<otimes> M3) ! j ! i =\n       M1 ! (j div (length M3 * length M2)) !\n       (i div (row_length M3 * row_length M2)) *\n       M2 ! (j div length M3 mod length M2) !\n       (i div row_length M3 mod row_length M2) *\n       M3 ! (j mod length M3) ! (i mod row_length M3)", "using 6"], ["proof (prove)\nusing this:\n  j div length M3 div length M2 = j div (length M3 * length M2)\n  i div row_length M3 div row_length M2 =\n  i div (row_length M3 * row_length M2)\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> M2 \\<otimes> M3) ! j ! i =\n     M1 ! (j div length M3 div length M2) !\n     (i div row_length M3 div row_length M2) *\n     M2 ! (j div length M3 mod length M2) !\n     (i div row_length M3 mod row_length M2) *\n     M3 ! (j mod length M3) ! (i mod row_length M3)\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length M1 * row_length M2 * row_length M3 \\<and>\n       j < length M1 * length M2 * length M3 \\<longrightarrow>\n       (M1 \\<otimes> M2 \\<otimes> M3) ! j ! i =\n       M1 ! (j div (length M3 * length M2)) !\n       (i div (row_length M3 * row_length M2)) *\n       M2 ! (j div length M3 mod length M2) !\n       (i div row_length M3 mod row_length M2) *\n       M3 ! (j mod length M3) ! (i mod row_length M3)", "by (metis \"3\" \"5\" div_mult2_eq)"], ["proof (state)\nthis:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> M2 \\<otimes> M3) ! j ! i =\n     M1 ! (j div (length M3 * length M2)) !\n     (i div (row_length M3 * row_length M2)) *\n     M2 ! (j div length M3 mod length M2) !\n     (i div row_length M3 mod row_length M2) *\n     M3 ! (j mod length M3) ! (i mod row_length M3)\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "then"], ["proof (chain)\npicking this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> M2 \\<otimes> M3) ! j ! i =\n     M1 ! (j div (length M3 * length M2)) !\n     (i div (row_length M3 * row_length M2)) *\n     M2 ! (j div length M3 mod length M2) !\n     (i div row_length M3 mod row_length M2) *\n     M3 ! (j mod length M3) ! (i mod row_length M3)", "have step1:\"\\<forall>i j.(((i<((row_length M1)*(row_length M2)*(row_length M3)))\n       \\<and>(j < (length M1)*(length M2)*(length M3)))\n                \\<longrightarrow> \n            (((M1 \\<otimes> M2) \\<otimes> M3)!j!i) \n                = f \n                   (f \n       ((M1)!(j div ((length M2)*(length M3)))! (i div ((row_length M2)*(row_length M3)))) \n          (M2!((j div (length M3)) mod (length M2))!((i div (row_length M3)) mod (row_length M2)))) \n                   (M3!(j mod length M3)!(i mod (row_length M3))))\""], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> M2 \\<otimes> M3) ! j ! i =\n     M1 ! (j div (length M3 * length M2)) !\n     (i div (row_length M3 * row_length M2)) *\n     M2 ! (j div length M3 mod length M2) !\n     (i div row_length M3 mod row_length M2) *\n     M3 ! (j mod length M3) ! (i mod row_length M3)\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length M1 * row_length M2 * row_length M3 \\<and>\n       j < length M1 * length M2 * length M3 \\<longrightarrow>\n       (M1 \\<otimes> M2 \\<otimes> M3) ! j ! i =\n       M1 ! (j div (length M2 * length M3)) !\n       (i div (row_length M2 * row_length M3)) *\n       M2 ! (j div length M3 mod length M2) !\n       (i div row_length M3 mod row_length M2) *\n       M3 ! (j mod length M3) ! (i mod row_length M3)", "by (metis mult.commute)"], ["proof (state)\nthis:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> M2 \\<otimes> M3) ! j ! i =\n     M1 ! (j div (length M2 * length M3)) !\n     (i div (row_length M2 * row_length M3)) *\n     M2 ! (j div length M3 mod length M2) !\n     (i div row_length M3 mod row_length M2) *\n     M3 ! (j mod length M3) ! (i mod row_length M3)\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "have 7:\n      \"\\<forall>i.\\<forall>j.(((i<((row_length M1)*(row_length M2)*(row_length M3)))\n       \\<and>(j < (length M1)*(length M2)*(length M3)))\n                \\<longrightarrow> \n            ((M1 \\<otimes> (M2 \\<otimes> M3))!j!i) \n                = f \n                   ((M1)!(j div (length (M2 \\<otimes>  M3)))!(i div (row_length (M2 \\<otimes> M3)))) \n                   ((M2 \\<otimes> M3)!(j mod length (M2 \\<otimes>M3))!(i mod (row_length (M2 \\<otimes> M3)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length M1 * row_length M2 * row_length M3 \\<and>\n       j < length M1 * length M2 * length M3 \\<longrightarrow>\n       (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n       M1 ! (j div length (M2 \\<otimes> M3)) !\n       (i div row_length (M2 \\<otimes> M3)) *\n       (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n       (i mod row_length (M2 \\<otimes> M3))", "using 0 matrix_Tensor_elements 1 2 effective_well_defined_Tensor \n             length_Tensor row_length_mat"], ["proof (prove)\nusing this:\n  mat (row_length M1) (length M1) M1 \\<and>\n  mat (row_length M2) (length M2) M2 \\<and>\n  mat (row_length M3) (length M3) M3\n  \\<forall>i j.\n     (i < row_length ?M1.0 * row_length ?M2.0 \\<and>\n      j < length ?M1.0 * length ?M2.0) \\<and>\n     mat (row_length ?M1.0) (length ?M1.0) ?M1.0 \\<and>\n     mat (row_length ?M2.0) (length ?M2.0) ?M2.0 \\<longrightarrow>\n     (?M1.0 \\<otimes> ?M2.0) ! j ! i =\n     ?M1.0 ! (j div length ?M2.0) ! (i div row_length ?M2.0) *\n     ?M2.0 ! (j mod length ?M2.0) ! (i mod row_length ?M2.0)\n  length (M1 \\<otimes> M2 \\<otimes> M3) = length M1 * length M2 * length M3\n  row_length (M1 \\<otimes> M2 \\<otimes> M3) =\n  row_length M1 * row_length M2 * row_length M3\n  \\<lbrakk>mat (row_length ?M1.0) (length ?M1.0) ?M1.0;\n   mat (row_length ?M2.0) (length ?M2.0) ?M2.0\\<rbrakk>\n  \\<Longrightarrow> mat (row_length ?M1.0 * row_length ?M2.0)\n                     (length ?M1.0 * length ?M2.0) (?M1.0 \\<otimes> ?M2.0)\n  length (?M1.0 \\<otimes> ?M2.0) = length ?M1.0 * length ?M2.0\n  row_length (?m1.0 \\<otimes> ?m2.0) = row_length ?m1.0 * row_length ?m2.0\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length M1 * row_length M2 * row_length M3 \\<and>\n       j < length M1 * length M2 * length M3 \\<longrightarrow>\n       (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n       M1 ! (j div length (M2 \\<otimes> M3)) !\n       (i div row_length (M2 \\<otimes> M3)) *\n       (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n       (i mod row_length (M2 \\<otimes> M3))", "by auto"], ["proof (state)\nthis:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n     M1 ! (j div length (M2 \\<otimes> M3)) !\n     (i div row_length (M2 \\<otimes> M3)) *\n     (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n     (i mod row_length (M2 \\<otimes> M3))\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "then"], ["proof (chain)\npicking this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n     M1 ! (j div length (M2 \\<otimes> M3)) !\n     (i div row_length (M2 \\<otimes> M3)) *\n     (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n     (i mod row_length (M2 \\<otimes> M3))", "have \n      \"\\<forall>i.\\<forall>j.(((i<((row_length M1)*(row_length M2)*(row_length M3)))\n       \\<and>(j < (length M1)*(length M2)*(length M3)))\n                \\<longrightarrow> \n            ((M1 \\<otimes> (M2 \\<otimes> M3))!j!i) \n                = f \n                   ((M1)!(j div ((length M2)*(length M3)))!(i div ((row_length M2)*(row_length M3)))) \n                   ((M2 \\<otimes> M3)!(j mod length (M2 \\<otimes>M3))!(i mod (row_length (M2 \\<otimes> M3)))))\""], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n     M1 ! (j div length (M2 \\<otimes> M3)) !\n     (i div row_length (M2 \\<otimes> M3)) *\n     (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n     (i mod row_length (M2 \\<otimes> M3))\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length M1 * row_length M2 * row_length M3 \\<and>\n       j < length M1 * length M2 * length M3 \\<longrightarrow>\n       (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n       M1 ! (j div (length M2 * length M3)) !\n       (i div (row_length M2 * row_length M3)) *\n       (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n       (i mod row_length (M2 \\<otimes> M3))", "using length_Tensor row_length_mat"], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n     M1 ! (j div length (M2 \\<otimes> M3)) !\n     (i div row_length (M2 \\<otimes> M3)) *\n     (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n     (i mod row_length (M2 \\<otimes> M3))\n  length (?M1.0 \\<otimes> ?M2.0) = length ?M1.0 * length ?M2.0\n  row_length (?m1.0 \\<otimes> ?m2.0) = row_length ?m1.0 * row_length ?m2.0\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length M1 * row_length M2 * row_length M3 \\<and>\n       j < length M1 * length M2 * length M3 \\<longrightarrow>\n       (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n       M1 ! (j div (length M2 * length M3)) !\n       (i div (row_length M2 * row_length M3)) *\n       (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n       (i mod row_length (M2 \\<otimes> M3))", "by auto"], ["proof (state)\nthis:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n     M1 ! (j div (length M2 * length M3)) !\n     (i div (row_length M2 * row_length M3)) *\n     (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n     (i mod row_length (M2 \\<otimes> M3))\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "then"], ["proof (chain)\npicking this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n     M1 ! (j div (length M2 * length M3)) !\n     (i div (row_length M2 * row_length M3)) *\n     (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n     (i mod row_length (M2 \\<otimes> M3))", "have \n      \"\\<forall>i.\\<forall>j.(((i<((row_length M1)*(row_length M2)*(row_length M3)))\n       \\<and>(j < (length M1)*(length M2)*(length M3)))\n                \\<longrightarrow> \n            ((M1 \\<otimes> (M2 \\<otimes> M3))!j!i) \n                = f \n                   ((M1)!(j div ((length M3)*(length M2)))\n                        !(i div ((row_length M3)*(row_length M2)))) \n                   ((M2 \\<otimes> M3)!(j mod length (M2 \\<otimes>M3))\n                             !(i mod (row_length (M2 \\<otimes> M3)))))\""], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n     M1 ! (j div (length M2 * length M3)) !\n     (i div (row_length M2 * row_length M3)) *\n     (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n     (i mod row_length (M2 \\<otimes> M3))\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length M1 * row_length M2 * row_length M3 \\<and>\n       j < length M1 * length M2 * length M3 \\<longrightarrow>\n       (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n       M1 ! (j div (length M3 * length M2)) !\n       (i div (row_length M3 * row_length M2)) *\n       (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n       (i mod row_length (M2 \\<otimes> M3))", "using mult.commute"], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n     M1 ! (j div (length M2 * length M3)) !\n     (i div (row_length M2 * row_length M3)) *\n     (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n     (i mod row_length (M2 \\<otimes> M3))\n  ?a * ?b = ?b * ?a\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length M1 * row_length M2 * row_length M3 \\<and>\n       j < length M1 * length M2 * length M3 \\<longrightarrow>\n       (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n       M1 ! (j div (length M3 * length M2)) !\n       (i div (row_length M3 * row_length M2)) *\n       (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n       (i mod row_length (M2 \\<otimes> M3))", "by (metis)"], ["proof (state)\nthis:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n     M1 ! (j div (length M3 * length M2)) !\n     (i div (row_length M3 * row_length M2)) *\n     (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n     (i mod row_length (M2 \\<otimes> M3))\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "have 8:\n       \"\\<forall>j.((j < (length M1)*(length M2)*(length M3)))\n                \\<longrightarrow> (j mod (length (M2 \\<otimes> M3))) < (length (M2 \\<otimes> M3))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j<length M1 * length M2 * length M3.\n       j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3)", "proof(cases \"length (M2 \\<otimes> M3) = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. length (M2 \\<otimes> M3) = 0 \\<Longrightarrow>\n    \\<forall>j<length M1 * length M2 * length M3.\n       j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3)\n 2. length (M2 \\<otimes> M3) \\<noteq> 0 \\<Longrightarrow>\n    \\<forall>j<length M1 * length M2 * length M3.\n       j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3)", "case True"], ["proof (state)\nthis:\n  length (M2 \\<otimes> M3) = 0\n\ngoal (2 subgoals):\n 1. length (M2 \\<otimes> M3) = 0 \\<Longrightarrow>\n    \\<forall>j<length M1 * length M2 * length M3.\n       j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3)\n 2. length (M2 \\<otimes> M3) \\<noteq> 0 \\<Longrightarrow>\n    \\<forall>j<length M1 * length M2 * length M3.\n       j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3)", "have \"(length M2)*(length M3) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length M2 * length M3 = 0", "using length_Tensor True"], ["proof (prove)\nusing this:\n  length (?M1.0 \\<otimes> ?M2.0) = length ?M1.0 * length ?M2.0\n  length (M2 \\<otimes> M3) = 0\n\ngoal (1 subgoal):\n 1. length M2 * length M3 = 0", "by auto"], ["proof (state)\nthis:\n  length M2 * length M3 = 0\n\ngoal (2 subgoals):\n 1. length (M2 \\<otimes> M3) = 0 \\<Longrightarrow>\n    \\<forall>j<length M1 * length M2 * length M3.\n       j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3)\n 2. length (M2 \\<otimes> M3) \\<noteq> 0 \\<Longrightarrow>\n    \\<forall>j<length M1 * length M2 * length M3.\n       j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3)", "then"], ["proof (chain)\npicking this:\n  length M2 * length M3 = 0", "have \"(length M1)*(length M2)*(length M3) = 0\""], ["proof (prove)\nusing this:\n  length M2 * length M3 = 0\n\ngoal (1 subgoal):\n 1. length M1 * length M2 * length M3 = 0", "by auto"], ["proof (state)\nthis:\n  length M1 * length M2 * length M3 = 0\n\ngoal (2 subgoals):\n 1. length (M2 \\<otimes> M3) = 0 \\<Longrightarrow>\n    \\<forall>j<length M1 * length M2 * length M3.\n       j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3)\n 2. length (M2 \\<otimes> M3) \\<noteq> 0 \\<Longrightarrow>\n    \\<forall>j<length M1 * length M2 * length M3.\n       j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3)", "then"], ["proof (chain)\npicking this:\n  length M1 * length M2 * length M3 = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  length M1 * length M2 * length M3 = 0\n\ngoal (1 subgoal):\n 1. \\<forall>j<length M1 * length M2 * length M3.\n       j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3)", "by (metis  less_nat_zero_code)"], ["proof (state)\nthis:\n  \\<forall>j<length M1 * length M2 * length M3.\n     j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3)\n\ngoal (1 subgoal):\n 1. length (M2 \\<otimes> M3) \\<noteq> 0 \\<Longrightarrow>\n    \\<forall>j<length M1 * length M2 * length M3.\n       j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. length (M2 \\<otimes> M3) \\<noteq> 0 \\<Longrightarrow>\n    \\<forall>j<length M1 * length M2 * length M3.\n       j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3)", "case False"], ["proof (state)\nthis:\n  length (M2 \\<otimes> M3) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. length (M2 \\<otimes> M3) \\<noteq> 0 \\<Longrightarrow>\n    \\<forall>j<length M1 * length M2 * length M3.\n       j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3)", "have \"length (M2 \\<otimes> M3)  > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < length (M2 \\<otimes> M3)", "using False"], ["proof (prove)\nusing this:\n  length (M2 \\<otimes> M3) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < length (M2 \\<otimes> M3)", "by auto"], ["proof (state)\nthis:\n  0 < length (M2 \\<otimes> M3)\n\ngoal (1 subgoal):\n 1. length (M2 \\<otimes> M3) \\<noteq> 0 \\<Longrightarrow>\n    \\<forall>j<length M1 * length M2 * length M3.\n       j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3)", "then"], ["proof (chain)\npicking this:\n  0 < length (M2 \\<otimes> M3)", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < length (M2 \\<otimes> M3)\n\ngoal (1 subgoal):\n 1. \\<forall>j<length M1 * length M2 * length M3.\n       j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3)", "using mod_less_divisor"], ["proof (prove)\nusing this:\n  0 < length (M2 \\<otimes> M3)\n  0 < ?n \\<Longrightarrow> ?m mod ?n < ?n\n\ngoal (1 subgoal):\n 1. \\<forall>j<length M1 * length M2 * length M3.\n       j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3)", "by auto"], ["proof (state)\nthis:\n  \\<forall>j<length M1 * length M2 * length M3.\n     j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j<length M1 * length M2 * length M3.\n     j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3)\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "then"], ["proof (chain)\npicking this:\n  \\<forall>j<length M1 * length M2 * length M3.\n     j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3)", "have 9:\n        \"\\<forall>i.((i < (row_length M1)*(row_length M2)*(row_length M3)))\n                \\<longrightarrow> (i mod (row_length (M2 \\<otimes> M3))) < (row_length (M2 \\<otimes> M3))\""], ["proof (prove)\nusing this:\n  \\<forall>j<length M1 * length M2 * length M3.\n     j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3)\n\ngoal (1 subgoal):\n 1. \\<forall>i<row_length M1 * row_length M2 * row_length M3.\n       i mod row_length (M2 \\<otimes> M3) < row_length (M2 \\<otimes> M3)", "proof(cases \"row_length (M2 \\<otimes> M3) = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>j<length M1 * length M2 * length M3.\n                j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3);\n     row_length (M2 \\<otimes> M3) = 0\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<row_length M1 * row_length M2 *\n                                 row_length M3.\n                         i mod row_length (M2 \\<otimes> M3)\n                         < row_length (M2 \\<otimes> M3)\n 2. \\<lbrakk>\\<forall>j<length M1 * length M2 * length M3.\n                j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3);\n     row_length (M2 \\<otimes> M3) \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<row_length M1 * row_length M2 *\n                                 row_length M3.\n                         i mod row_length (M2 \\<otimes> M3)\n                         < row_length (M2 \\<otimes> M3)", "case True"], ["proof (state)\nthis:\n  row_length (M2 \\<otimes> M3) = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>j<length M1 * length M2 * length M3.\n                j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3);\n     row_length (M2 \\<otimes> M3) = 0\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<row_length M1 * row_length M2 *\n                                 row_length M3.\n                         i mod row_length (M2 \\<otimes> M3)\n                         < row_length (M2 \\<otimes> M3)\n 2. \\<lbrakk>\\<forall>j<length M1 * length M2 * length M3.\n                j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3);\n     row_length (M2 \\<otimes> M3) \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<row_length M1 * row_length M2 *\n                                 row_length M3.\n                         i mod row_length (M2 \\<otimes> M3)\n                         < row_length (M2 \\<otimes> M3)", "have \"(row_length M2)*(row_length M3) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_length M2 * row_length M3 = 0", "using  True"], ["proof (prove)\nusing this:\n  row_length (M2 \\<otimes> M3) = 0\n\ngoal (1 subgoal):\n 1. row_length M2 * row_length M3 = 0", "by (metis row_length_mat)"], ["proof (state)\nthis:\n  row_length M2 * row_length M3 = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>j<length M1 * length M2 * length M3.\n                j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3);\n     row_length (M2 \\<otimes> M3) = 0\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<row_length M1 * row_length M2 *\n                                 row_length M3.\n                         i mod row_length (M2 \\<otimes> M3)\n                         < row_length (M2 \\<otimes> M3)\n 2. \\<lbrakk>\\<forall>j<length M1 * length M2 * length M3.\n                j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3);\n     row_length (M2 \\<otimes> M3) \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<row_length M1 * row_length M2 *\n                                 row_length M3.\n                         i mod row_length (M2 \\<otimes> M3)\n                         < row_length (M2 \\<otimes> M3)", "then"], ["proof (chain)\npicking this:\n  row_length M2 * row_length M3 = 0", "have \"(row_length M1)*(row_length M2)*(row_length M3) = 0\""], ["proof (prove)\nusing this:\n  row_length M2 * row_length M3 = 0\n\ngoal (1 subgoal):\n 1. row_length M1 * row_length M2 * row_length M3 = 0", "by auto"], ["proof (state)\nthis:\n  row_length M1 * row_length M2 * row_length M3 = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>j<length M1 * length M2 * length M3.\n                j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3);\n     row_length (M2 \\<otimes> M3) = 0\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<row_length M1 * row_length M2 *\n                                 row_length M3.\n                         i mod row_length (M2 \\<otimes> M3)\n                         < row_length (M2 \\<otimes> M3)\n 2. \\<lbrakk>\\<forall>j<length M1 * length M2 * length M3.\n                j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3);\n     row_length (M2 \\<otimes> M3) \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<row_length M1 * row_length M2 *\n                                 row_length M3.\n                         i mod row_length (M2 \\<otimes> M3)\n                         < row_length (M2 \\<otimes> M3)", "then"], ["proof (chain)\npicking this:\n  row_length M1 * row_length M2 * row_length M3 = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  row_length M1 * row_length M2 * row_length M3 = 0\n\ngoal (1 subgoal):\n 1. \\<forall>i<row_length M1 * row_length M2 * row_length M3.\n       i mod row_length (M2 \\<otimes> M3) < row_length (M2 \\<otimes> M3)", "by (metis less_nat_zero_code)"], ["proof (state)\nthis:\n  \\<forall>i<row_length M1 * row_length M2 * row_length M3.\n     i mod row_length (M2 \\<otimes> M3) < row_length (M2 \\<otimes> M3)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>j<length M1 * length M2 * length M3.\n                j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3);\n     row_length (M2 \\<otimes> M3) \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<row_length M1 * row_length M2 *\n                                 row_length M3.\n                         i mod row_length (M2 \\<otimes> M3)\n                         < row_length (M2 \\<otimes> M3)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>j<length M1 * length M2 * length M3.\n                j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3);\n     row_length (M2 \\<otimes> M3) \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<row_length M1 * row_length M2 *\n                                 row_length M3.\n                         i mod row_length (M2 \\<otimes> M3)\n                         < row_length (M2 \\<otimes> M3)", "case False"], ["proof (state)\nthis:\n  row_length (M2 \\<otimes> M3) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>j<length M1 * length M2 * length M3.\n                j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3);\n     row_length (M2 \\<otimes> M3) \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<row_length M1 * row_length M2 *\n                                 row_length M3.\n                         i mod row_length (M2 \\<otimes> M3)\n                         < row_length (M2 \\<otimes> M3)", "have \"row_length (M2 \\<otimes> M3)  > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < row_length (M2 \\<otimes> M3)", "using False"], ["proof (prove)\nusing this:\n  row_length (M2 \\<otimes> M3) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < row_length (M2 \\<otimes> M3)", "by auto"], ["proof (state)\nthis:\n  0 < row_length (M2 \\<otimes> M3)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>j<length M1 * length M2 * length M3.\n                j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3);\n     row_length (M2 \\<otimes> M3) \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<row_length M1 * row_length M2 *\n                                 row_length M3.\n                         i mod row_length (M2 \\<otimes> M3)\n                         < row_length (M2 \\<otimes> M3)", "then"], ["proof (chain)\npicking this:\n  0 < row_length (M2 \\<otimes> M3)", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < row_length (M2 \\<otimes> M3)\n\ngoal (1 subgoal):\n 1. \\<forall>i<row_length M1 * row_length M2 * row_length M3.\n       i mod row_length (M2 \\<otimes> M3) < row_length (M2 \\<otimes> M3)", "using mod_less_divisor"], ["proof (prove)\nusing this:\n  0 < row_length (M2 \\<otimes> M3)\n  0 < ?n \\<Longrightarrow> ?m mod ?n < ?n\n\ngoal (1 subgoal):\n 1. \\<forall>i<row_length M1 * row_length M2 * row_length M3.\n       i mod row_length (M2 \\<otimes> M3) < row_length (M2 \\<otimes> M3)", "by auto"], ["proof (state)\nthis:\n  \\<forall>i<row_length M1 * row_length M2 * row_length M3.\n     i mod row_length (M2 \\<otimes> M3) < row_length (M2 \\<otimes> M3)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i<row_length M1 * row_length M2 * row_length M3.\n     i mod row_length (M2 \\<otimes> M3) < row_length (M2 \\<otimes> M3)\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "with 8"], ["proof (chain)\npicking this:\n  \\<forall>j<length M1 * length M2 * length M3.\n     j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3)\n  \\<forall>i<row_length M1 * row_length M2 * row_length M3.\n     i mod row_length (M2 \\<otimes> M3) < row_length (M2 \\<otimes> M3)", "have 10:\"\\<forall>i.\\<forall>j.(((i<((row_length M1)*(row_length M2)*(row_length M3)))\n       \\<and>(j < (length M1)*(length M2)*(length M3)))\n             \\<longrightarrow> \n                (i mod (row_length (M2 \\<otimes> M3))) < (row_length (M2 \\<otimes> M3))\n              \\<and> (j mod (length (M2 \\<otimes> M3))) < (length (M2 \\<otimes> M3)))\""], ["proof (prove)\nusing this:\n  \\<forall>j<length M1 * length M2 * length M3.\n     j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3)\n  \\<forall>i<row_length M1 * row_length M2 * row_length M3.\n     i mod row_length (M2 \\<otimes> M3) < row_length (M2 \\<otimes> M3)\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length M1 * row_length M2 * row_length M3 \\<and>\n       j < length M1 * length M2 * length M3 \\<longrightarrow>\n       i mod row_length (M2 \\<otimes> M3)\n       < row_length (M2 \\<otimes> M3) \\<and>\n       j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3)", "by auto"], ["proof (state)\nthis:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     i mod row_length (M2 \\<otimes> M3)\n     < row_length (M2 \\<otimes> M3) \\<and>\n     j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3)\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "then"], ["proof (chain)\npicking this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     i mod row_length (M2 \\<otimes> M3)\n     < row_length (M2 \\<otimes> M3) \\<and>\n     j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3)", "have 11:\"\\<forall> i j.(((i<((row_length M1)*(row_length M2)*(row_length M3)))\n       \\<and>(j < (length M1)*(length M2)*(length M3)))\n             \\<longrightarrow> \n                (i mod (row_length (M2 \\<otimes> M3))) \n                              < (row_length M2)*(row_length M3)\n                \\<and>(j mod (length (M2 \\<otimes> M3))) < (length M2)*(length  M3))\""], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     i mod row_length (M2 \\<otimes> M3)\n     < row_length (M2 \\<otimes> M3) \\<and>\n     j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3)\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length M1 * row_length M2 * row_length M3 \\<and>\n       j < length M1 * length M2 * length M3 \\<longrightarrow>\n       i mod row_length (M2 \\<otimes> M3)\n       < row_length M2 * row_length M3 \\<and>\n       j mod length (M2 \\<otimes> M3) < length M2 * length M3", "using length_Tensor row_length_mat"], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     i mod row_length (M2 \\<otimes> M3)\n     < row_length (M2 \\<otimes> M3) \\<and>\n     j mod length (M2 \\<otimes> M3) < length (M2 \\<otimes> M3)\n  length (?M1.0 \\<otimes> ?M2.0) = length ?M1.0 * length ?M2.0\n  row_length (?m1.0 \\<otimes> ?m2.0) = row_length ?m1.0 * row_length ?m2.0\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length M1 * row_length M2 * row_length M3 \\<and>\n       j < length M1 * length M2 * length M3 \\<longrightarrow>\n       i mod row_length (M2 \\<otimes> M3)\n       < row_length M2 * row_length M3 \\<and>\n       j mod length (M2 \\<otimes> M3) < length M2 * length M3", "by auto"], ["proof (state)\nthis:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     i mod row_length (M2 \\<otimes> M3)\n     < row_length M2 * row_length M3 \\<and>\n     j mod length (M2 \\<otimes> M3) < length M2 * length M3\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "have \"(mat (row_length M2) (length M2) M2) \n           \\<and> (mat (row_length M3) (length M3) M3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3", "using 0"], ["proof (prove)\nusing this:\n  mat (row_length M1) (length M1) M1 \\<and>\n  mat (row_length M2) (length M2) M2 \\<and>\n  mat (row_length M3) (length M3) M3\n\ngoal (1 subgoal):\n 1. mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3", "by auto"], ["proof (state)\nthis:\n  mat (row_length M2) (length M2) M2 \\<and>\n  mat (row_length M3) (length M3) M3\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "then"], ["proof (chain)\npicking this:\n  mat (row_length M2) (length M2) M2 \\<and>\n  mat (row_length M3) (length M3) M3", "have \"\\<forall> i j.(((i mod (row_length (M2 \\<otimes> M3))) \n                                 < (row_length M2)*(row_length M3))\n                  \\<and>((j mod (length (M2\\<otimes>M3))) < (length M2)*(length M3))\n       \\<longrightarrow>\n       (((M2 \\<otimes> M3))!(j mod (length (M2 \\<otimes> M3)))!(i mod row_length (M2 \\<otimes> M3))) \n                = f \n                  ((M2)!((j mod (length (M2 \\<otimes> M3))) div (length M3))\n                        !((i mod (row_length (M2 \\<otimes> M3))) div (row_length M3))) \n                  (M3!((j mod (length (M2 \\<otimes> M3))) mod (length M3))\n                     !((i mod (row_length (M2 \\<otimes> M3))) mod (row_length M3))))\""], ["proof (prove)\nusing this:\n  mat (row_length M2) (length M2) M2 \\<and>\n  mat (row_length M3) (length M3) M3\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i mod row_length (M2 \\<otimes> M3)\n       < row_length M2 * row_length M3 \\<and>\n       j mod length (M2 \\<otimes> M3)\n       < length M2 * length M3 \\<longrightarrow>\n       (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n       (i mod row_length (M2 \\<otimes> M3)) =\n       M2 ! (j mod length (M2 \\<otimes> M3) div length M3) !\n       (i mod row_length (M2 \\<otimes> M3) div row_length M3) *\n       M3 ! (j mod length (M2 \\<otimes> M3) mod length M3) !\n       (i mod row_length (M2 \\<otimes> M3) mod row_length M3)", "using matrix_Tensor_elements"], ["proof (prove)\nusing this:\n  mat (row_length M2) (length M2) M2 \\<and>\n  mat (row_length M3) (length M3) M3\n  \\<forall>i j.\n     (i < row_length ?M1.0 * row_length ?M2.0 \\<and>\n      j < length ?M1.0 * length ?M2.0) \\<and>\n     mat (row_length ?M1.0) (length ?M1.0) ?M1.0 \\<and>\n     mat (row_length ?M2.0) (length ?M2.0) ?M2.0 \\<longrightarrow>\n     (?M1.0 \\<otimes> ?M2.0) ! j ! i =\n     ?M1.0 ! (j div length ?M2.0) ! (i div row_length ?M2.0) *\n     ?M2.0 ! (j mod length ?M2.0) ! (i mod row_length ?M2.0)\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i mod row_length (M2 \\<otimes> M3)\n       < row_length M2 * row_length M3 \\<and>\n       j mod length (M2 \\<otimes> M3)\n       < length M2 * length M3 \\<longrightarrow>\n       (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n       (i mod row_length (M2 \\<otimes> M3)) =\n       M2 ! (j mod length (M2 \\<otimes> M3) div length M3) !\n       (i mod row_length (M2 \\<otimes> M3) div row_length M3) *\n       M3 ! (j mod length (M2 \\<otimes> M3) mod length M3) !\n       (i mod row_length (M2 \\<otimes> M3) mod row_length M3)", "by auto"], ["proof (state)\nthis:\n  \\<forall>i j.\n     i mod row_length (M2 \\<otimes> M3)\n     < row_length M2 * row_length M3 \\<and>\n     j mod length (M2 \\<otimes> M3)\n     < length M2 * length M3 \\<longrightarrow>\n     (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n     (i mod row_length (M2 \\<otimes> M3)) =\n     M2 ! (j mod length (M2 \\<otimes> M3) div length M3) !\n     (i mod row_length (M2 \\<otimes> M3) div row_length M3) *\n     M3 ! (j mod length (M2 \\<otimes> M3) mod length M3) !\n     (i mod row_length (M2 \\<otimes> M3) mod row_length M3)\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "then"], ["proof (chain)\npicking this:\n  \\<forall>i j.\n     i mod row_length (M2 \\<otimes> M3)\n     < row_length M2 * row_length M3 \\<and>\n     j mod length (M2 \\<otimes> M3)\n     < length M2 * length M3 \\<longrightarrow>\n     (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n     (i mod row_length (M2 \\<otimes> M3)) =\n     M2 ! (j mod length (M2 \\<otimes> M3) div length M3) !\n     (i mod row_length (M2 \\<otimes> M3) div row_length M3) *\n     M3 ! (j mod length (M2 \\<otimes> M3) mod length M3) !\n     (i mod row_length (M2 \\<otimes> M3) mod row_length M3)", "have \"\\<forall> i j.\n         ((i < (row_length M1)*(row_length M2)*(row_length M3))\n       \\<and>(j < (length M1)*(length M2)*(length M3) )\n             \\<longrightarrow> \n           (((M2 \\<otimes> M3))!(j mod (length (M2 \\<otimes> M3)))\n                       !(i mod row_length (M2 \\<otimes> M3))) \n                = \n       f \n       ((M2)!((j mod (length (M2 \\<otimes> M3))) div (length M3))\n            !((i mod (row_length (M2 \\<otimes> M3))) div (row_length M3))) \n        (M3!((j mod (length (M2 \\<otimes> M3))) mod (length M3))\n           !((i mod (row_length (M2 \\<otimes> M3))) mod (row_length M3))))\""], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i mod row_length (M2 \\<otimes> M3)\n     < row_length M2 * row_length M3 \\<and>\n     j mod length (M2 \\<otimes> M3)\n     < length M2 * length M3 \\<longrightarrow>\n     (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n     (i mod row_length (M2 \\<otimes> M3)) =\n     M2 ! (j mod length (M2 \\<otimes> M3) div length M3) !\n     (i mod row_length (M2 \\<otimes> M3) div row_length M3) *\n     M3 ! (j mod length (M2 \\<otimes> M3) mod length M3) !\n     (i mod row_length (M2 \\<otimes> M3) mod row_length M3)\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length M1 * row_length M2 * row_length M3 \\<and>\n       j < length M1 * length M2 * length M3 \\<longrightarrow>\n       (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n       (i mod row_length (M2 \\<otimes> M3)) =\n       M2 ! (j mod length (M2 \\<otimes> M3) div length M3) !\n       (i mod row_length (M2 \\<otimes> M3) div row_length M3) *\n       M3 ! (j mod length (M2 \\<otimes> M3) mod length M3) !\n       (i mod row_length (M2 \\<otimes> M3) mod row_length M3)", "using 11"], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i mod row_length (M2 \\<otimes> M3)\n     < row_length M2 * row_length M3 \\<and>\n     j mod length (M2 \\<otimes> M3)\n     < length M2 * length M3 \\<longrightarrow>\n     (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n     (i mod row_length (M2 \\<otimes> M3)) =\n     M2 ! (j mod length (M2 \\<otimes> M3) div length M3) !\n     (i mod row_length (M2 \\<otimes> M3) div row_length M3) *\n     M3 ! (j mod length (M2 \\<otimes> M3) mod length M3) !\n     (i mod row_length (M2 \\<otimes> M3) mod row_length M3)\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     i mod row_length (M2 \\<otimes> M3)\n     < row_length M2 * row_length M3 \\<and>\n     j mod length (M2 \\<otimes> M3) < length M2 * length M3\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length M1 * row_length M2 * row_length M3 \\<and>\n       j < length M1 * length M2 * length M3 \\<longrightarrow>\n       (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n       (i mod row_length (M2 \\<otimes> M3)) =\n       M2 ! (j mod length (M2 \\<otimes> M3) div length M3) !\n       (i mod row_length (M2 \\<otimes> M3) div row_length M3) *\n       M3 ! (j mod length (M2 \\<otimes> M3) mod length M3) !\n       (i mod row_length (M2 \\<otimes> M3) mod row_length M3)", "by auto"], ["proof (state)\nthis:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n     (i mod row_length (M2 \\<otimes> M3)) =\n     M2 ! (j mod length (M2 \\<otimes> M3) div length M3) !\n     (i mod row_length (M2 \\<otimes> M3) div row_length M3) *\n     M3 ! (j mod length (M2 \\<otimes> M3) mod length M3) !\n     (i mod row_length (M2 \\<otimes> M3) mod row_length M3)\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "moreover"], ["proof (state)\nthis:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n     (i mod row_length (M2 \\<otimes> M3)) =\n     M2 ! (j mod length (M2 \\<otimes> M3) div length M3) !\n     (i mod row_length (M2 \\<otimes> M3) div row_length M3) *\n     M3 ! (j mod length (M2 \\<otimes> M3) mod length M3) !\n     (i mod row_length (M2 \\<otimes> M3) mod row_length M3)\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "then"], ["proof (chain)\npicking this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n     (i mod row_length (M2 \\<otimes> M3)) =\n     M2 ! (j mod length (M2 \\<otimes> M3) div length M3) !\n     (i mod row_length (M2 \\<otimes> M3) div row_length M3) *\n     M3 ! (j mod length (M2 \\<otimes> M3) mod length M3) !\n     (i mod row_length (M2 \\<otimes> M3) mod row_length M3)", "have \"\\<forall>j.(j mod (length (M2 \\<otimes> M3))) mod (length M3)\n                         = j mod (length M3)\""], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n     (i mod row_length (M2 \\<otimes> M3)) =\n     M2 ! (j mod length (M2 \\<otimes> M3) div length M3) !\n     (i mod row_length (M2 \\<otimes> M3) div row_length M3) *\n     M3 ! (j mod length (M2 \\<otimes> M3) mod length M3) !\n     (i mod row_length (M2 \\<otimes> M3) mod row_length M3)\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j mod length (M2 \\<otimes> M3) mod length M3 = j mod length M3", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>j.\n       ?x < row_length M1 * row_length M2 * row_length M3 \\<and>\n       j < length M1 * length M2 * length M3 \\<longrightarrow>\n       (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n       (?x mod row_length (M2 \\<otimes> M3)) =\n       M2 ! (j mod length (M2 \\<otimes> M3) div length M3) !\n       (?x mod row_length (M2 \\<otimes> M3) div row_length M3) *\n       M3 ! (j mod length (M2 \\<otimes> M3) mod length M3) !\n       (?x mod row_length (M2 \\<otimes> M3) mod\n        row_length M3) \\<Longrightarrow>\n    \\<forall>j.\n       j mod length (M2 \\<otimes> M3) mod length M3 = j mod length M3", "have \"\\<forall>j.((j mod (length (M2 \\<otimes> M3))) \n                         = (j mod ((length M2) *(length M3))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j mod length (M2 \\<otimes> M3) = j mod (length M2 * length M3)", "using length_Tensor"], ["proof (prove)\nusing this:\n  length (?M1.0 \\<otimes> ?M2.0) = length ?M1.0 * length ?M2.0\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j mod length (M2 \\<otimes> M3) = j mod (length M2 * length M3)", "by auto"], ["proof (state)\nthis:\n  \\<forall>j. j mod length (M2 \\<otimes> M3) = j mod (length M2 * length M3)\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       ?x < row_length M1 * row_length M2 * row_length M3 \\<and>\n       j < length M1 * length M2 * length M3 \\<longrightarrow>\n       (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n       (?x mod row_length (M2 \\<otimes> M3)) =\n       M2 ! (j mod length (M2 \\<otimes> M3) div length M3) !\n       (?x mod row_length (M2 \\<otimes> M3) div row_length M3) *\n       M3 ! (j mod length (M2 \\<otimes> M3) mod length M3) !\n       (?x mod row_length (M2 \\<otimes> M3) mod\n        row_length M3) \\<Longrightarrow>\n    \\<forall>j.\n       j mod length (M2 \\<otimes> M3) mod length M3 = j mod length M3", "moreover"], ["proof (state)\nthis:\n  \\<forall>j. j mod length (M2 \\<otimes> M3) = j mod (length M2 * length M3)\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       ?x < row_length M1 * row_length M2 * row_length M3 \\<and>\n       j < length M1 * length M2 * length M3 \\<longrightarrow>\n       (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n       (?x mod row_length (M2 \\<otimes> M3)) =\n       M2 ! (j mod length (M2 \\<otimes> M3) div length M3) !\n       (?x mod row_length (M2 \\<otimes> M3) div row_length M3) *\n       M3 ! (j mod length (M2 \\<otimes> M3) mod length M3) !\n       (?x mod row_length (M2 \\<otimes> M3) mod\n        row_length M3) \\<Longrightarrow>\n    \\<forall>j.\n       j mod length (M2 \\<otimes> M3) mod length M3 = j mod length M3", "have \n         \"\\<forall>j.((j mod ((length M2) *(length M3))) mod (length M3)\n                                 = (j mod (length M3)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j mod (length M2 * length M3) mod length M3 = j mod length M3", "using mod_prop1"], ["proof (prove)\nusing this:\n  ?a mod (?b * ?c) mod ?c = ?a mod ?c\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j mod (length M2 * length M3) mod length M3 = j mod length M3", "by auto"], ["proof (state)\nthis:\n  \\<forall>j. j mod (length M2 * length M3) mod length M3 = j mod length M3\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       ?x < row_length M1 * row_length M2 * row_length M3 \\<and>\n       j < length M1 * length M2 * length M3 \\<longrightarrow>\n       (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n       (?x mod row_length (M2 \\<otimes> M3)) =\n       M2 ! (j mod length (M2 \\<otimes> M3) div length M3) !\n       (?x mod row_length (M2 \\<otimes> M3) div row_length M3) *\n       M3 ! (j mod length (M2 \\<otimes> M3) mod length M3) !\n       (?x mod row_length (M2 \\<otimes> M3) mod\n        row_length M3) \\<Longrightarrow>\n    \\<forall>j.\n       j mod length (M2 \\<otimes> M3) mod length M3 = j mod length M3", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>j. j mod length (M2 \\<otimes> M3) = j mod (length M2 * length M3)\n  \\<forall>j. j mod (length M2 * length M3) mod length M3 = j mod length M3", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>j. j mod length (M2 \\<otimes> M3) = j mod (length M2 * length M3)\n  \\<forall>j. j mod (length M2 * length M3) mod length M3 = j mod length M3\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j mod length (M2 \\<otimes> M3) mod length M3 = j mod length M3", "by auto"], ["proof (state)\nthis:\n  \\<forall>j. j mod length (M2 \\<otimes> M3) mod length M3 = j mod length M3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j. j mod length (M2 \\<otimes> M3) mod length M3 = j mod length M3\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "moreover"], ["proof (state)\nthis:\n  \\<forall>j. j mod length (M2 \\<otimes> M3) mod length M3 = j mod length M3\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "then"], ["proof (chain)\npicking this:\n  \\<forall>j. j mod length (M2 \\<otimes> M3) mod length M3 = j mod length M3", "have \"\\<forall>i.(i mod (row_length (M2 \\<otimes> M3))) mod (row_length M3)\n                         = i mod (row_length M3)\""], ["proof (prove)\nusing this:\n  \\<forall>j. j mod length (M2 \\<otimes> M3) mod length M3 = j mod length M3\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i mod row_length (M2 \\<otimes> M3) mod row_length M3 =\n       i mod row_length M3", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. ?x mod length (M2 \\<otimes> M3) mod length M3 =\n    ?x mod length M3 \\<Longrightarrow>\n    \\<forall>i.\n       i mod row_length (M2 \\<otimes> M3) mod row_length M3 =\n       i mod row_length M3", "have \"\\<forall>i.((i mod (row_length (M2 \\<otimes> M3))) \n                         = (i mod ((row_length M2) *(row_length M3))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i mod row_length (M2 \\<otimes> M3) =\n       i mod (row_length M2 * row_length M3)", "using row_length_mat"], ["proof (prove)\nusing this:\n  row_length (?m1.0 \\<otimes> ?m2.0) = row_length ?m1.0 * row_length ?m2.0\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i mod row_length (M2 \\<otimes> M3) =\n       i mod (row_length M2 * row_length M3)", "by auto"], ["proof (state)\nthis:\n  \\<forall>i.\n     i mod row_length (M2 \\<otimes> M3) =\n     i mod (row_length M2 * row_length M3)\n\ngoal (1 subgoal):\n 1. ?x mod length (M2 \\<otimes> M3) mod length M3 =\n    ?x mod length M3 \\<Longrightarrow>\n    \\<forall>i.\n       i mod row_length (M2 \\<otimes> M3) mod row_length M3 =\n       i mod row_length M3", "moreover"], ["proof (state)\nthis:\n  \\<forall>i.\n     i mod row_length (M2 \\<otimes> M3) =\n     i mod (row_length M2 * row_length M3)\n\ngoal (1 subgoal):\n 1. ?x mod length (M2 \\<otimes> M3) mod length M3 =\n    ?x mod length M3 \\<Longrightarrow>\n    \\<forall>i.\n       i mod row_length (M2 \\<otimes> M3) mod row_length M3 =\n       i mod row_length M3", "have \"\\<forall>i.((i mod ((row_length M2)*(row_length M3))) \n                                       mod (row_length M3)\n                                 = (i mod (row_length M3)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i mod (row_length M2 * row_length M3) mod row_length M3 =\n       i mod row_length M3", "using mod_prop1"], ["proof (prove)\nusing this:\n  ?a mod (?b * ?c) mod ?c = ?a mod ?c\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i mod (row_length M2 * row_length M3) mod row_length M3 =\n       i mod row_length M3", "by auto"], ["proof (state)\nthis:\n  \\<forall>i.\n     i mod (row_length M2 * row_length M3) mod row_length M3 =\n     i mod row_length M3\n\ngoal (1 subgoal):\n 1. ?x mod length (M2 \\<otimes> M3) mod length M3 =\n    ?x mod length M3 \\<Longrightarrow>\n    \\<forall>i.\n       i mod row_length (M2 \\<otimes> M3) mod row_length M3 =\n       i mod row_length M3", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>i.\n     i mod row_length (M2 \\<otimes> M3) =\n     i mod (row_length M2 * row_length M3)\n  \\<forall>i.\n     i mod (row_length M2 * row_length M3) mod row_length M3 =\n     i mod row_length M3", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     i mod row_length (M2 \\<otimes> M3) =\n     i mod (row_length M2 * row_length M3)\n  \\<forall>i.\n     i mod (row_length M2 * row_length M3) mod row_length M3 =\n     i mod row_length M3\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i mod row_length (M2 \\<otimes> M3) mod row_length M3 =\n       i mod row_length M3", "by auto"], ["proof (state)\nthis:\n  \\<forall>i.\n     i mod row_length (M2 \\<otimes> M3) mod row_length M3 =\n     i mod row_length M3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i.\n     i mod row_length (M2 \\<otimes> M3) mod row_length M3 =\n     i mod row_length M3\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n     (i mod row_length (M2 \\<otimes> M3)) =\n     M2 ! (j mod length (M2 \\<otimes> M3) div length M3) !\n     (i mod row_length (M2 \\<otimes> M3) div row_length M3) *\n     M3 ! (j mod length (M2 \\<otimes> M3) mod length M3) !\n     (i mod row_length (M2 \\<otimes> M3) mod row_length M3)\n  \\<forall>j. j mod length (M2 \\<otimes> M3) mod length M3 = j mod length M3\n  \\<forall>i.\n     i mod row_length (M2 \\<otimes> M3) mod row_length M3 =\n     i mod row_length M3", "have 12:\"\\<forall> i j.((i < (row_length M1)\n                            *(row_length M2)\n                            *(row_length M3))\n                            \\<and>(j < (length M1)*(length M2)*(length M3) )\n                       \\<longrightarrow> \n                          (((M2 \\<otimes> M3))!(j mod (length (M2 \\<otimes> M3)))\n                                       !(i mod row_length (M2 \\<otimes> M3))) \n                = f \n                   ((M2)!((j mod (length (M2 \\<otimes> M3))) div (length M3))\n                        !((i mod (row_length (M2 \\<otimes> M3))) div (row_length M3))) \n                   (M3!(j mod  (length M3))!(i mod (row_length M3))))\""], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n     (i mod row_length (M2 \\<otimes> M3)) =\n     M2 ! (j mod length (M2 \\<otimes> M3) div length M3) !\n     (i mod row_length (M2 \\<otimes> M3) div row_length M3) *\n     M3 ! (j mod length (M2 \\<otimes> M3) mod length M3) !\n     (i mod row_length (M2 \\<otimes> M3) mod row_length M3)\n  \\<forall>j. j mod length (M2 \\<otimes> M3) mod length M3 = j mod length M3\n  \\<forall>i.\n     i mod row_length (M2 \\<otimes> M3) mod row_length M3 =\n     i mod row_length M3\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length M1 * row_length M2 * row_length M3 \\<and>\n       j < length M1 * length M2 * length M3 \\<longrightarrow>\n       (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n       (i mod row_length (M2 \\<otimes> M3)) =\n       M2 ! (j mod length (M2 \\<otimes> M3) div length M3) !\n       (i mod row_length (M2 \\<otimes> M3) div row_length M3) *\n       M3 ! (j mod length M3) ! (i mod row_length M3)", "by auto"], ["proof (state)\nthis:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n     (i mod row_length (M2 \\<otimes> M3)) =\n     M2 ! (j mod length (M2 \\<otimes> M3) div length M3) !\n     (i mod row_length (M2 \\<otimes> M3) div row_length M3) *\n     M3 ! (j mod length M3) ! (i mod row_length M3)\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "moreover"], ["proof (state)\nthis:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n     (i mod row_length (M2 \\<otimes> M3)) =\n     M2 ! (j mod length (M2 \\<otimes> M3) div length M3) !\n     (i mod row_length (M2 \\<otimes> M3) div row_length M3) *\n     M3 ! (j mod length M3) ! (i mod row_length M3)\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "have \"\\<forall>j.(j mod (length (M2 \\<otimes> M3))) div (length M3)\n                    = (j div (length M3)) mod (length M2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j mod length (M2 \\<otimes> M3) div length M3 =\n       j div length M3 mod length M2", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j mod length (M2 \\<otimes> M3) div length M3 =\n       j div length M3 mod length M2", "have \"\\<forall>j.((j mod (length (M2 \\<otimes> M3))) \n                    = (j mod ((length M2)*(length M3))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j mod length (M2 \\<otimes> M3) = j mod (length M2 * length M3)", "using length_Tensor"], ["proof (prove)\nusing this:\n  length (?M1.0 \\<otimes> ?M2.0) = length ?M1.0 * length ?M2.0\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j mod length (M2 \\<otimes> M3) = j mod (length M2 * length M3)", "by auto"], ["proof (state)\nthis:\n  \\<forall>j. j mod length (M2 \\<otimes> M3) = j mod (length M2 * length M3)\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j mod length (M2 \\<otimes> M3) div length M3 =\n       j div length M3 mod length M2", "then"], ["proof (chain)\npicking this:\n  \\<forall>j. j mod length (M2 \\<otimes> M3) = j mod (length M2 * length M3)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>j. j mod length (M2 \\<otimes> M3) = j mod (length M2 * length M3)\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j mod length (M2 \\<otimes> M3) div length M3 =\n       j div length M3 mod length M2", "using mod_div_relation"], ["proof (prove)\nusing this:\n  \\<forall>j. j mod length (M2 \\<otimes> M3) = j mod (length M2 * length M3)\n  ?a mod (?b * ?c) div ?c = ?a div ?c mod ?b\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j mod length (M2 \\<otimes> M3) div length M3 =\n       j div length M3 mod length M2", "by auto"], ["proof (state)\nthis:\n  \\<forall>j.\n     j mod length (M2 \\<otimes> M3) div length M3 =\n     j div length M3 mod length M2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j.\n     j mod length (M2 \\<otimes> M3) div length M3 =\n     j div length M3 mod length M2\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "moreover"], ["proof (state)\nthis:\n  \\<forall>j.\n     j mod length (M2 \\<otimes> M3) div length M3 =\n     j div length M3 mod length M2\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "have \"\\<forall>i.(i mod (row_length (M2 \\<otimes> M3))) div (row_length M3)\n                    = (i div (row_length M3)) mod (row_length M2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i mod row_length (M2 \\<otimes> M3) div row_length M3 =\n       i div row_length M3 mod row_length M2", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i mod row_length (M2 \\<otimes> M3) div row_length M3 =\n       i div row_length M3 mod row_length M2", "have \"\\<forall>i.((i mod (row_length (M2 \\<otimes> M3))) \n                    = (i mod ((row_length M2)*(row_length M3))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i mod row_length (M2 \\<otimes> M3) =\n       i mod (row_length M2 * row_length M3)", "using row_length_mat"], ["proof (prove)\nusing this:\n  row_length (?m1.0 \\<otimes> ?m2.0) = row_length ?m1.0 * row_length ?m2.0\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i mod row_length (M2 \\<otimes> M3) =\n       i mod (row_length M2 * row_length M3)", "by auto"], ["proof (state)\nthis:\n  \\<forall>i.\n     i mod row_length (M2 \\<otimes> M3) =\n     i mod (row_length M2 * row_length M3)\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i mod row_length (M2 \\<otimes> M3) div row_length M3 =\n       i div row_length M3 mod row_length M2", "then"], ["proof (chain)\npicking this:\n  \\<forall>i.\n     i mod row_length (M2 \\<otimes> M3) =\n     i mod (row_length M2 * row_length M3)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     i mod row_length (M2 \\<otimes> M3) =\n     i mod (row_length M2 * row_length M3)\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i mod row_length (M2 \\<otimes> M3) div row_length M3 =\n       i div row_length M3 mod row_length M2", "using mod_div_relation"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     i mod row_length (M2 \\<otimes> M3) =\n     i mod (row_length M2 * row_length M3)\n  ?a mod (?b * ?c) div ?c = ?a div ?c mod ?b\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i mod row_length (M2 \\<otimes> M3) div row_length M3 =\n       i div row_length M3 mod row_length M2", "by auto"], ["proof (state)\nthis:\n  \\<forall>i.\n     i mod row_length (M2 \\<otimes> M3) div row_length M3 =\n     i div row_length M3 mod row_length M2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i.\n     i mod row_length (M2 \\<otimes> M3) div row_length M3 =\n     i div row_length M3 mod row_length M2\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n     (i mod row_length (M2 \\<otimes> M3)) =\n     M2 ! (j mod length (M2 \\<otimes> M3) div length M3) !\n     (i mod row_length (M2 \\<otimes> M3) div row_length M3) *\n     M3 ! (j mod length M3) ! (i mod row_length M3)\n  \\<forall>j.\n     j mod length (M2 \\<otimes> M3) div length M3 =\n     j div length M3 mod length M2\n  \\<forall>i.\n     i mod row_length (M2 \\<otimes> M3) div row_length M3 =\n     i div row_length M3 mod row_length M2", "have \"\\<forall> i j.\n                      ((i < (row_length M1)*(row_length M2)*(row_length M3))\n                      \\<and>(j < (length M1)*(length M2)*(length M3) )\n             \\<longrightarrow> \n                 (((M2 \\<otimes> M3))!(j mod (length (M2 \\<otimes> M3)))\n                             !(i mod row_length (M2 \\<otimes> M3))) \n                       = f \n                          ((M2)!((j div (length M3)) mod (length M2))\n                               !((i div (row_length M3)) mod (row_length M2)))\n                           (M3!(j mod  (length M3))!(i mod (row_length M3))))\""], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n     (i mod row_length (M2 \\<otimes> M3)) =\n     M2 ! (j mod length (M2 \\<otimes> M3) div length M3) !\n     (i mod row_length (M2 \\<otimes> M3) div row_length M3) *\n     M3 ! (j mod length M3) ! (i mod row_length M3)\n  \\<forall>j.\n     j mod length (M2 \\<otimes> M3) div length M3 =\n     j div length M3 mod length M2\n  \\<forall>i.\n     i mod row_length (M2 \\<otimes> M3) div row_length M3 =\n     i div row_length M3 mod row_length M2\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length M1 * row_length M2 * row_length M3 \\<and>\n       j < length M1 * length M2 * length M3 \\<longrightarrow>\n       (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n       (i mod row_length (M2 \\<otimes> M3)) =\n       M2 ! (j div length M3 mod length M2) !\n       (i div row_length M3 mod row_length M2) *\n       M3 ! (j mod length M3) ! (i mod row_length M3)", "by auto"], ["proof (state)\nthis:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n     (i mod row_length (M2 \\<otimes> M3)) =\n     M2 ! (j div length M3 mod length M2) !\n     (i div row_length M3 mod row_length M2) *\n     M3 ! (j mod length M3) ! (i mod row_length M3)\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "with 7"], ["proof (chain)\npicking this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n     M1 ! (j div length (M2 \\<otimes> M3)) !\n     (i div row_length (M2 \\<otimes> M3)) *\n     (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n     (i mod row_length (M2 \\<otimes> M3))\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n     (i mod row_length (M2 \\<otimes> M3)) =\n     M2 ! (j div length M3 mod length M2) !\n     (i div row_length M3 mod row_length M2) *\n     M3 ! (j mod length M3) ! (i mod row_length M3)", "have 13:\"\\<forall>i j.(((i<((row_length M1)*(row_length M2)*(row_length M3)))\n       \\<and>(j < (length M1)*(length M2)*(length M3)))\n                \\<longrightarrow> \n            ((M1 \\<otimes> (M2 \\<otimes> M3))!j!i) \n                = f \n                   ((M1)!(j div ((length M2)*(length  M3)))\n                        !(i div ((row_length M2)*(row_length M3)))) \n                  (f \n       ((M2)!((j div (length M3)) mod (length M2))!((i div (row_length M3)) mod (row_length M2)))\n       (M3!(j mod  (length M3))\n           !(i mod (row_length M3)))))\""], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n     M1 ! (j div length (M2 \\<otimes> M3)) !\n     (i div row_length (M2 \\<otimes> M3)) *\n     (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n     (i mod row_length (M2 \\<otimes> M3))\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n     (i mod row_length (M2 \\<otimes> M3)) =\n     M2 ! (j div length M3 mod length M2) !\n     (i div row_length M3 mod row_length M2) *\n     M3 ! (j mod length M3) ! (i mod row_length M3)\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length M1 * row_length M2 * row_length M3 \\<and>\n       j < length M1 * length M2 * length M3 \\<longrightarrow>\n       (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n       M1 ! (j div (length M2 * length M3)) !\n       (i div (row_length M2 * row_length M3)) *\n       (M2 ! (j div length M3 mod length M2) !\n        (i div row_length M3 mod row_length M2) *\n        M3 ! (j mod length M3) ! (i mod row_length M3))", "using length_Tensor row_length_mat"], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n     M1 ! (j div length (M2 \\<otimes> M3)) !\n     (i div row_length (M2 \\<otimes> M3)) *\n     (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n     (i mod row_length (M2 \\<otimes> M3))\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M2 \\<otimes> M3) ! (j mod length (M2 \\<otimes> M3)) !\n     (i mod row_length (M2 \\<otimes> M3)) =\n     M2 ! (j div length M3 mod length M2) !\n     (i div row_length M3 mod row_length M2) *\n     M3 ! (j mod length M3) ! (i mod row_length M3)\n  length (?M1.0 \\<otimes> ?M2.0) = length ?M1.0 * length ?M2.0\n  row_length (?m1.0 \\<otimes> ?m2.0) = row_length ?m1.0 * row_length ?m2.0\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length M1 * row_length M2 * row_length M3 \\<and>\n       j < length M1 * length M2 * length M3 \\<longrightarrow>\n       (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n       M1 ! (j div (length M2 * length M3)) !\n       (i div (row_length M2 * row_length M3)) *\n       (M2 ! (j div length M3 mod length M2) !\n        (i div row_length M3 mod row_length M2) *\n        M3 ! (j mod length M3) ! (i mod row_length M3))", "by auto"], ["proof (state)\nthis:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n     M1 ! (j div (length M2 * length M3)) !\n     (i div (row_length M2 * row_length M3)) *\n     (M2 ! (j div length M3 mod length M2) !\n      (i div row_length M3 mod row_length M2) *\n      M3 ! (j mod length M3) ! (i mod row_length M3))\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "moreover"], ["proof (state)\nthis:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n     M1 ! (j div (length M2 * length M3)) !\n     (i div (row_length M2 * row_length M3)) *\n     (M2 ! (j div length M3 mod length M2) !\n      (i div row_length M3 mod row_length M2) *\n      M3 ! (j mod length M3) ! (i mod row_length M3))\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "have \"\\<forall> i j.( f \n                    ((M1)!(j div ((length M2)*(length  M3)))\n                        !(i div ((row_length M2)*(row_length M3)))) \n                  (f \n                   ((M2)!((j div (length M3)) mod (length M2))!((i div (row_length M3)) mod (row_length M2)))\n       (M3!(j mod  (length M3))\n           !(i mod (row_length M3)))))\n           = f (f \n                    ((M1)!(j div ((length M2)*(length  M3)))\n                        !(i div ((row_length M2)*(row_length M3))))                  \n                    ((M2)!((j div (length M3)) mod (length M2))\n                         !((i div (row_length M3)) mod (row_length M2))))\n                (M3!(j mod  (length M3))\n                   !(i mod (row_length M3)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       M1 ! (j div (length M2 * length M3)) !\n       (i div (row_length M2 * row_length M3)) *\n       (M2 ! (j div length M3 mod length M2) !\n        (i div row_length M3 mod row_length M2) *\n        M3 ! (j mod length M3) ! (i mod row_length M3)) =\n       M1 ! (j div (length M2 * length M3)) !\n       (i div (row_length M2 * row_length M3)) *\n       M2 ! (j div length M3 mod length M2) !\n       (i div row_length M3 mod row_length M2) *\n       M3 ! (j mod length M3) ! (i mod row_length M3)", "using assoc"], ["proof (prove)\nusing this:\n  ?a * ?b * ?c = ?a * (?b * ?c)\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       M1 ! (j div (length M2 * length M3)) !\n       (i div (row_length M2 * row_length M3)) *\n       (M2 ! (j div length M3 mod length M2) !\n        (i div row_length M3 mod row_length M2) *\n        M3 ! (j mod length M3) ! (i mod row_length M3)) =\n       M1 ! (j div (length M2 * length M3)) !\n       (i div (row_length M2 * row_length M3)) *\n       M2 ! (j div length M3 mod length M2) !\n       (i div row_length M3 mod row_length M2) *\n       M3 ! (j mod length M3) ! (i mod row_length M3)", "by auto"], ["proof (state)\nthis:\n  \\<forall>i j.\n     M1 ! (j div (length M2 * length M3)) !\n     (i div (row_length M2 * row_length M3)) *\n     (M2 ! (j div length M3 mod length M2) !\n      (i div row_length M3 mod row_length M2) *\n      M3 ! (j mod length M3) ! (i mod row_length M3)) =\n     M1 ! (j div (length M2 * length M3)) !\n     (i div (row_length M2 * row_length M3)) *\n     M2 ! (j div length M3 mod length M2) !\n     (i div row_length M3 mod row_length M2) *\n     M3 ! (j mod length M3) ! (i mod row_length M3)\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "with 13"], ["proof (chain)\npicking this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n     M1 ! (j div (length M2 * length M3)) !\n     (i div (row_length M2 * row_length M3)) *\n     (M2 ! (j div length M3 mod length M2) !\n      (i div row_length M3 mod row_length M2) *\n      M3 ! (j mod length M3) ! (i mod row_length M3))\n  \\<forall>i j.\n     M1 ! (j div (length M2 * length M3)) !\n     (i div (row_length M2 * row_length M3)) *\n     (M2 ! (j div length M3 mod length M2) !\n      (i div row_length M3 mod row_length M2) *\n      M3 ! (j mod length M3) ! (i mod row_length M3)) =\n     M1 ! (j div (length M2 * length M3)) !\n     (i div (row_length M2 * row_length M3)) *\n     M2 ! (j div length M3 mod length M2) !\n     (i div row_length M3 mod row_length M2) *\n     M3 ! (j mod length M3) ! (i mod row_length M3)", "have \"\\<forall>i j.(((i<((row_length M1)*(row_length M2)*(row_length M3)))\n       \\<and>(j < (length M1)*(length M2)*(length M3)))\n                \\<longrightarrow> \n            ((M1 \\<otimes> (M2 \\<otimes> M3))!j!i) \n                = f (f \n                    ((M1)!(j div ((length M2)*(length  M3)))\n                        !(i div ((row_length M2)*(row_length M3))))                  \n                    ((M2)!((j div (length M3)) mod (length M2))\n                         !((i div (row_length M3)) mod (row_length M2))))\n                (M3!(j mod  (length M3))\n                   !(i mod (row_length M3))))\""], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n     M1 ! (j div (length M2 * length M3)) !\n     (i div (row_length M2 * row_length M3)) *\n     (M2 ! (j div length M3 mod length M2) !\n      (i div row_length M3 mod row_length M2) *\n      M3 ! (j mod length M3) ! (i mod row_length M3))\n  \\<forall>i j.\n     M1 ! (j div (length M2 * length M3)) !\n     (i div (row_length M2 * row_length M3)) *\n     (M2 ! (j div length M3 mod length M2) !\n      (i div row_length M3 mod row_length M2) *\n      M3 ! (j mod length M3) ! (i mod row_length M3)) =\n     M1 ! (j div (length M2 * length M3)) !\n     (i div (row_length M2 * row_length M3)) *\n     M2 ! (j div length M3 mod length M2) !\n     (i div row_length M3 mod row_length M2) *\n     M3 ! (j mod length M3) ! (i mod row_length M3)\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length M1 * row_length M2 * row_length M3 \\<and>\n       j < length M1 * length M2 * length M3 \\<longrightarrow>\n       (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n       M1 ! (j div (length M2 * length M3)) !\n       (i div (row_length M2 * row_length M3)) *\n       M2 ! (j div length M3 mod length M2) !\n       (i div row_length M3 mod row_length M2) *\n       M3 ! (j mod length M3) ! (i mod row_length M3)", "by auto"], ["proof (state)\nthis:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n     M1 ! (j div (length M2 * length M3)) !\n     (i div (row_length M2 * row_length M3)) *\n     M2 ! (j div length M3 mod length M2) !\n     (i div row_length M3 mod row_length M2) *\n     M3 ! (j mod length M3) ! (i mod row_length M3)\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "with step1"], ["proof (chain)\npicking this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> M2 \\<otimes> M3) ! j ! i =\n     M1 ! (j div (length M2 * length M3)) !\n     (i div (row_length M2 * row_length M3)) *\n     M2 ! (j div length M3 mod length M2) !\n     (i div row_length M3 mod row_length M2) *\n     M3 ! (j mod length M3) ! (i mod row_length M3)\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n     M1 ! (j div (length M2 * length M3)) !\n     (i div (row_length M2 * row_length M3)) *\n     M2 ! (j div length M3 mod length M2) !\n     (i div row_length M3 mod row_length M2) *\n     M3 ! (j mod length M3) ! (i mod row_length M3)", "have step2: \n       \"\\<forall>i j.(((i<((row_length M1)*(row_length M2)*(row_length M3)))\n       \\<and>(j < (length M1)*(length M2)*(length M3)))\n                \\<longrightarrow> \n            ((M1 \\<otimes> (M2 \\<otimes> M3))!j!i) = (((M1 \\<otimes> M2) \\<otimes> M3)!j!i))\""], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> M2 \\<otimes> M3) ! j ! i =\n     M1 ! (j div (length M2 * length M3)) !\n     (i div (row_length M2 * row_length M3)) *\n     M2 ! (j div length M3 mod length M2) !\n     (i div row_length M3 mod row_length M2) *\n     M3 ! (j mod length M3) ! (i mod row_length M3)\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n     M1 ! (j div (length M2 * length M3)) !\n     (i div (row_length M2 * row_length M3)) *\n     M2 ! (j div length M3 mod length M2) !\n     (i div row_length M3 mod row_length M2) *\n     M3 ! (j mod length M3) ! (i mod row_length M3)\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length M1 * row_length M2 * row_length M3 \\<and>\n       j < length M1 * length M2 * length M3 \\<longrightarrow>\n       (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n       (M1 \\<otimes> M2 \\<otimes> M3) ! j ! i", "by auto"], ["proof (state)\nthis:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n     (M1 \\<otimes> M2 \\<otimes> M3) ! j ! i\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "moreover"], ["proof (state)\nthis:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n     (M1 \\<otimes> M2 \\<otimes> M3) ! j ! i\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "have \"mat ((row_length M1)*(row_length M2)*(row_length M3))\n           ((length M1)*(length M2)*(length M3))\n               (M1 \\<otimes> (M2 \\<otimes> M3))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length M1 * row_length M2 * row_length M3)\n     (length M1 * length M2 * length M3) (M1 \\<otimes> (M2 \\<otimes> M3))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. mat (row_length M1 * row_length M2 * row_length M3)\n     (length M1 * length M2 * length M3) (M1 \\<otimes> (M2 \\<otimes> M3))", "have \"mat ((row_length M2)*(row_length M3)) ((length M2)*(length M3)) (M2 \\<otimes> M3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length M2 * row_length M3) (length M2 * length M3)\n     (M2 \\<otimes> M3)", "using 0 effective_well_defined_Tensor  row_length_mat length_Tensor"], ["proof (prove)\nusing this:\n  mat (row_length M1) (length M1) M1 \\<and>\n  mat (row_length M2) (length M2) M2 \\<and>\n  mat (row_length M3) (length M3) M3\n  \\<lbrakk>mat (row_length ?M1.0) (length ?M1.0) ?M1.0;\n   mat (row_length ?M2.0) (length ?M2.0) ?M2.0\\<rbrakk>\n  \\<Longrightarrow> mat (row_length ?M1.0 * row_length ?M2.0)\n                     (length ?M1.0 * length ?M2.0) (?M1.0 \\<otimes> ?M2.0)\n  row_length (?m1.0 \\<otimes> ?m2.0) = row_length ?m1.0 * row_length ?m2.0\n  length (?M1.0 \\<otimes> ?M2.0) = length ?M1.0 * length ?M2.0\n\ngoal (1 subgoal):\n 1. mat (row_length M2 * row_length M3) (length M2 * length M3)\n     (M2 \\<otimes> M3)", "by auto"], ["proof (state)\nthis:\n  mat (row_length M2 * row_length M3) (length M2 * length M3)\n   (M2 \\<otimes> M3)\n\ngoal (1 subgoal):\n 1. mat (row_length M1 * row_length M2 * row_length M3)\n     (length M1 * length M2 * length M3) (M1 \\<otimes> (M2 \\<otimes> M3))", "moreover"], ["proof (state)\nthis:\n  mat (row_length M2 * row_length M3) (length M2 * length M3)\n   (M2 \\<otimes> M3)\n\ngoal (1 subgoal):\n 1. mat (row_length M1 * row_length M2 * row_length M3)\n     (length M1 * length M2 * length M3) (M1 \\<otimes> (M2 \\<otimes> M3))", "have  \"mat ((row_length M1)*((row_length (M2 \\<otimes> M3))))\n           ((length M1)*((length (M2 \\<otimes> M3))))\n               (M1 \\<otimes> (M2 \\<otimes> M3))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length M1 * row_length (M2 \\<otimes> M3))\n     (length M1 * length (M2 \\<otimes> M3)) (M1 \\<otimes> (M2 \\<otimes> M3))", "using  0 effective_well_defined_Tensor row_length_mat length_Tensor"], ["proof (prove)\nusing this:\n  mat (row_length M1) (length M1) M1 \\<and>\n  mat (row_length M2) (length M2) M2 \\<and>\n  mat (row_length M3) (length M3) M3\n  \\<lbrakk>mat (row_length ?M1.0) (length ?M1.0) ?M1.0;\n   mat (row_length ?M2.0) (length ?M2.0) ?M2.0\\<rbrakk>\n  \\<Longrightarrow> mat (row_length ?M1.0 * row_length ?M2.0)\n                     (length ?M1.0 * length ?M2.0) (?M1.0 \\<otimes> ?M2.0)\n  row_length (?m1.0 \\<otimes> ?m2.0) = row_length ?m1.0 * row_length ?m2.0\n  length (?M1.0 \\<otimes> ?M2.0) = length ?M1.0 * length ?M2.0\n\ngoal (1 subgoal):\n 1. mat (row_length M1 * row_length (M2 \\<otimes> M3))\n     (length M1 * length (M2 \\<otimes> M3)) (M1 \\<otimes> (M2 \\<otimes> M3))", "by metis"], ["proof (state)\nthis:\n  mat (row_length M1 * row_length (M2 \\<otimes> M3))\n   (length M1 * length (M2 \\<otimes> M3)) (M1 \\<otimes> (M2 \\<otimes> M3))\n\ngoal (1 subgoal):\n 1. mat (row_length M1 * row_length M2 * row_length M3)\n     (length M1 * length M2 * length M3) (M1 \\<otimes> (M2 \\<otimes> M3))", "ultimately"], ["proof (chain)\npicking this:\n  mat (row_length M2 * row_length M3) (length M2 * length M3)\n   (M2 \\<otimes> M3)\n  mat (row_length M1 * row_length (M2 \\<otimes> M3))\n   (length M1 * length (M2 \\<otimes> M3)) (M1 \\<otimes> (M2 \\<otimes> M3))", "show ?thesis"], ["proof (prove)\nusing this:\n  mat (row_length M2 * row_length M3) (length M2 * length M3)\n   (M2 \\<otimes> M3)\n  mat (row_length M1 * row_length (M2 \\<otimes> M3))\n   (length M1 * length (M2 \\<otimes> M3)) (M1 \\<otimes> (M2 \\<otimes> M3))\n\ngoal (1 subgoal):\n 1. mat (row_length M1 * row_length M2 * row_length M3)\n     (length M1 * length M2 * length M3) (M1 \\<otimes> (M2 \\<otimes> M3))", "using row_length_mat length_Tensor mult.assoc"], ["proof (prove)\nusing this:\n  mat (row_length M2 * row_length M3) (length M2 * length M3)\n   (M2 \\<otimes> M3)\n  mat (row_length M1 * row_length (M2 \\<otimes> M3))\n   (length M1 * length (M2 \\<otimes> M3)) (M1 \\<otimes> (M2 \\<otimes> M3))\n  row_length (?m1.0 \\<otimes> ?m2.0) = row_length ?m1.0 * row_length ?m2.0\n  length (?M1.0 \\<otimes> ?M2.0) = length ?M1.0 * length ?M2.0\n  Matrix_Tensor.mult ?id ?f \\<Longrightarrow>\n  ?f (?f ?a ?b) ?c = ?f ?a (?f ?b ?c)\n\ngoal (1 subgoal):\n 1. mat (row_length M1 * row_length M2 * row_length M3)\n     (length M1 * length M2 * length M3) (M1 \\<otimes> (M2 \\<otimes> M3))", "by (simp add: length_Tensor row_length_mat  semigroup_mult_class.mult.assoc)"], ["proof (state)\nthis:\n  mat (row_length M1 * row_length M2 * row_length M3)\n   (length M1 * length M2 * length M3) (M1 \\<otimes> (M2 \\<otimes> M3))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mat (row_length M1 * row_length M2 * row_length M3)\n   (length M1 * length M2 * length M3) (M1 \\<otimes> (M2 \\<otimes> M3))\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "moreover"], ["proof (state)\nthis:\n  mat (row_length M1 * row_length M2 * row_length M3)\n   (length M1 * length M2 * length M3) (M1 \\<otimes> (M2 \\<otimes> M3))\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "have \"mat ((row_length M1)*(row_length M2)*(row_length M3))\n           ((length M1)*(length M2)*(length M3))\n               ((M1 \\<otimes> M2) \\<otimes> M3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length M1 * row_length M2 * row_length M3)\n     (length M1 * length M2 * length M3) (M1 \\<otimes> M2 \\<otimes> M3)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. mat (row_length M1 * row_length M2 * row_length M3)\n     (length M1 * length M2 * length M3) (M1 \\<otimes> M2 \\<otimes> M3)", "have \"mat ((row_length M1)*(row_length M2)) ((length M1)*(length M2)) (M1 \\<otimes> M2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length M1 * row_length M2) (length M1 * length M2)\n     (M1 \\<otimes> M2)", "using 0 effective_well_defined_Tensor row_length_mat length_Tensor"], ["proof (prove)\nusing this:\n  mat (row_length M1) (length M1) M1 \\<and>\n  mat (row_length M2) (length M2) M2 \\<and>\n  mat (row_length M3) (length M3) M3\n  \\<lbrakk>mat (row_length ?M1.0) (length ?M1.0) ?M1.0;\n   mat (row_length ?M2.0) (length ?M2.0) ?M2.0\\<rbrakk>\n  \\<Longrightarrow> mat (row_length ?M1.0 * row_length ?M2.0)\n                     (length ?M1.0 * length ?M2.0) (?M1.0 \\<otimes> ?M2.0)\n  row_length (?m1.0 \\<otimes> ?m2.0) = row_length ?m1.0 * row_length ?m2.0\n  length (?M1.0 \\<otimes> ?M2.0) = length ?M1.0 * length ?M2.0\n\ngoal (1 subgoal):\n 1. mat (row_length M1 * row_length M2) (length M1 * length M2)\n     (M1 \\<otimes> M2)", "by auto"], ["proof (state)\nthis:\n  mat (row_length M1 * row_length M2) (length M1 * length M2)\n   (M1 \\<otimes> M2)\n\ngoal (1 subgoal):\n 1. mat (row_length M1 * row_length M2 * row_length M3)\n     (length M1 * length M2 * length M3) (M1 \\<otimes> M2 \\<otimes> M3)", "moreover"], ["proof (state)\nthis:\n  mat (row_length M1 * row_length M2) (length M1 * length M2)\n   (M1 \\<otimes> M2)\n\ngoal (1 subgoal):\n 1. mat (row_length M1 * row_length M2 * row_length M3)\n     (length M1 * length M2 * length M3) (M1 \\<otimes> M2 \\<otimes> M3)", "have  \"mat ((row_length (M1 \\<otimes> M2))*(row_length M3))\n           ((length (M1 \\<otimes> M2))*(length M3))\n               ((M1 \\<otimes> M2 )\\<otimes> M3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length (M1 \\<otimes> M2) * row_length M3)\n     (length (M1 \\<otimes> M2) * length M3) (M1 \\<otimes> M2 \\<otimes> M3)", "using  0 effective_well_defined_Tensor  row_length_mat length_Tensor"], ["proof (prove)\nusing this:\n  mat (row_length M1) (length M1) M1 \\<and>\n  mat (row_length M2) (length M2) M2 \\<and>\n  mat (row_length M3) (length M3) M3\n  \\<lbrakk>mat (row_length ?M1.0) (length ?M1.0) ?M1.0;\n   mat (row_length ?M2.0) (length ?M2.0) ?M2.0\\<rbrakk>\n  \\<Longrightarrow> mat (row_length ?M1.0 * row_length ?M2.0)\n                     (length ?M1.0 * length ?M2.0) (?M1.0 \\<otimes> ?M2.0)\n  row_length (?m1.0 \\<otimes> ?m2.0) = row_length ?m1.0 * row_length ?m2.0\n  length (?M1.0 \\<otimes> ?M2.0) = length ?M1.0 * length ?M2.0\n\ngoal (1 subgoal):\n 1. mat (row_length (M1 \\<otimes> M2) * row_length M3)\n     (length (M1 \\<otimes> M2) * length M3) (M1 \\<otimes> M2 \\<otimes> M3)", "by metis"], ["proof (state)\nthis:\n  mat (row_length (M1 \\<otimes> M2) * row_length M3)\n   (length (M1 \\<otimes> M2) * length M3) (M1 \\<otimes> M2 \\<otimes> M3)\n\ngoal (1 subgoal):\n 1. mat (row_length M1 * row_length M2 * row_length M3)\n     (length M1 * length M2 * length M3) (M1 \\<otimes> M2 \\<otimes> M3)", "ultimately"], ["proof (chain)\npicking this:\n  mat (row_length M1 * row_length M2) (length M1 * length M2)\n   (M1 \\<otimes> M2)\n  mat (row_length (M1 \\<otimes> M2) * row_length M3)\n   (length (M1 \\<otimes> M2) * length M3) (M1 \\<otimes> M2 \\<otimes> M3)", "show ?thesis"], ["proof (prove)\nusing this:\n  mat (row_length M1 * row_length M2) (length M1 * length M2)\n   (M1 \\<otimes> M2)\n  mat (row_length (M1 \\<otimes> M2) * row_length M3)\n   (length (M1 \\<otimes> M2) * length M3) (M1 \\<otimes> M2 \\<otimes> M3)\n\ngoal (1 subgoal):\n 1. mat (row_length M1 * row_length M2 * row_length M3)\n     (length M1 * length M2 * length M3) (M1 \\<otimes> M2 \\<otimes> M3)", "using row_length_mat length_Tensor"], ["proof (prove)\nusing this:\n  mat (row_length M1 * row_length M2) (length M1 * length M2)\n   (M1 \\<otimes> M2)\n  mat (row_length (M1 \\<otimes> M2) * row_length M3)\n   (length (M1 \\<otimes> M2) * length M3) (M1 \\<otimes> M2 \\<otimes> M3)\n  row_length (?m1.0 \\<otimes> ?m2.0) = row_length ?m1.0 * row_length ?m2.0\n  length (?M1.0 \\<otimes> ?M2.0) = length ?M1.0 * length ?M2.0\n\ngoal (1 subgoal):\n 1. mat (row_length M1 * row_length M2 * row_length M3)\n     (length M1 * length M2 * length M3) (M1 \\<otimes> M2 \\<otimes> M3)", "by (metis mult.assoc)"], ["proof (state)\nthis:\n  mat (row_length M1 * row_length M2 * row_length M3)\n   (length M1 * length M2 * length M3) (M1 \\<otimes> M2 \\<otimes> M3)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mat (row_length M1 * row_length M2 * row_length M3)\n   (length M1 * length M2 * length M3) (M1 \\<otimes> M2 \\<otimes> M3)\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n     M1 ! (j div (length M2 * length M3)) !\n     (i div (row_length M2 * row_length M3)) *\n     (M2 ! (j div length M3 mod length M2) !\n      (i div row_length M3 mod row_length M2) *\n      M3 ! (j mod length M3) ! (i mod row_length M3))\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n     (M1 \\<otimes> M2 \\<otimes> M3) ! j ! i\n  mat (row_length M1 * row_length M2 * row_length M3)\n   (length M1 * length M2 * length M3) (M1 \\<otimes> (M2 \\<otimes> M3))\n  mat (row_length M1 * row_length M2 * row_length M3)\n   (length M1 * length M2 * length M3) (M1 \\<otimes> M2 \\<otimes> M3)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n     M1 ! (j div (length M2 * length M3)) !\n     (i div (row_length M2 * row_length M3)) *\n     (M2 ! (j div length M3 mod length M2) !\n      (i div row_length M3 mod row_length M2) *\n      M3 ! (j mod length M3) ! (i mod row_length M3))\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n     (M1 \\<otimes> M2 \\<otimes> M3) ! j ! i\n  mat (row_length M1 * row_length M2 * row_length M3)\n   (length M1 * length M2 * length M3) (M1 \\<otimes> (M2 \\<otimes> M3))\n  mat (row_length M1 * row_length M2 * row_length M3)\n   (length M1 * length M2 * length M3) (M1 \\<otimes> M2 \\<otimes> M3)\n\ngoal (1 subgoal):\n 1. M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "using mat_eqI"], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n     M1 ! (j div (length M2 * length M3)) !\n     (i div (row_length M2 * row_length M3)) *\n     (M2 ! (j div length M3 mod length M2) !\n      (i div row_length M3 mod row_length M2) *\n      M3 ! (j mod length M3) ! (i mod row_length M3))\n  \\<forall>i j.\n     i < row_length M1 * row_length M2 * row_length M3 \\<and>\n     j < length M1 * length M2 * length M3 \\<longrightarrow>\n     (M1 \\<otimes> (M2 \\<otimes> M3)) ! j ! i =\n     (M1 \\<otimes> M2 \\<otimes> M3) ! j ! i\n  mat (row_length M1 * row_length M2 * row_length M3)\n   (length M1 * length M2 * length M3) (M1 \\<otimes> (M2 \\<otimes> M3))\n  mat (row_length M1 * row_length M2 * row_length M3)\n   (length M1 * length M2 * length M3) (M1 \\<otimes> M2 \\<otimes> M3)\n  \\<lbrakk>mat ?nr ?nc ?m1.0; mat ?nr ?nc ?m2.0;\n   \\<And>i j.\n      \\<lbrakk>i < ?nc; j < ?nr\\<rbrakk>\n      \\<Longrightarrow> ?m1.0 ! i ! j = ?m2.0 ! i ! j\\<rbrakk>\n  \\<Longrightarrow> ?m1.0 = ?m2.0\n\ngoal (1 subgoal):\n 1. M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "by blast"], ["proof (state)\nthis:\n  M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma \" \\<And>(a::nat) b.(times  a  b) =(times  b  a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b. a * b = b * a", "by auto"], ["", "subsection\\<open>Associativity and Distributive properties\\<close>"], ["", "locale plus_mult = \n mult + \n fixes zer::\"'a\"\n fixes g::\" 'a \\<Rightarrow> 'a \\<Rightarrow> 'a \" (infixl \"+\" 60)\n fixes inver::\"'a \\<Rightarrow>  'a\"\n assumes plus_comm:\" g a  b = g b a \"\n assumes plus_assoc:\" (g (g a b) c) = (g a (g b c))\"\n assumes plus_left_id:\" g zer x = x\"\n assumes plus_right_id:\"g x zer = x\"\n assumes plus_left_distributivity: \"f a (g b c) = g (f a b) (f a c)\"\n assumes plus_right_distributivity: \"f (g a b) c = g (f a c) (f b c)\"\n  assumes plus_left_inverse: \"(g x (inver x)) = zer\"\n assumes plus_right_inverse: \"(g (inver x) x) = zer\""], ["", "context plus_mult\nbegin"], ["", "lemma fixes M1 M2 M3\n      shows \"(mat (row_length M1) (length M1) M1) \n            \\<and>(mat (row_length M2) (length M2) M2)\n            \\<and>(mat (row_length M3) (length M3) M3)\n             \\<Longrightarrow> (M1 \\<otimes> (M2 \\<otimes> M3)) = ((M1 \\<otimes> M2) \\<otimes> M3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "using associativity"], ["proof (prove)\nusing this:\n  mat (row_length ?M1.0) (length ?M1.0) ?M1.0 \\<and>\n  mat (row_length ?M2.0) (length ?M2.0) ?M2.0 \\<and>\n  mat (row_length ?M3.0) (length ?M3.0) ?M3.0 \\<Longrightarrow>\n  ?M1.0 \\<otimes> (?M2.0 \\<otimes> ?M3.0) =\n  ?M1.0 \\<otimes> ?M2.0 \\<otimes> ?M3.0\n\ngoal (1 subgoal):\n 1. mat (row_length M1) (length M1) M1 \\<and>\n    mat (row_length M2) (length M2) M2 \\<and>\n    mat (row_length M3) (length M3) M3 \\<Longrightarrow>\n    M1 \\<otimes> (M2 \\<otimes> M3) = M1 \\<otimes> M2 \\<otimes> M3", "by auto"], ["", "text\\<open>matrix$\\_$mult refers to multiplication of matrices in the locale \nplus\\_mult\\<close>"], ["", "abbreviation matrix_mult::\"'a mat \\<Rightarrow> 'a mat \\<Rightarrow> 'a mat\" (infixl \"\\<circ>\" 65)\n where\n\"matrix_mult M1 M2 \\<equiv> (mat_multI zer g f (row_length M1) M1 M2)\""], ["", "definition scalar_product :: \"'a vec \\<Rightarrow> 'a vec \\<Rightarrow> 'a\" where\n \"scalar_product v w = scalar_prodI zer g f v w\""], ["", "lemma ma :\n assumes wf1: \"mat nr n m1\"\n     and wf2: \"mat n nc m2\"\n        and i: \"i < nr\"\n        and j: \"j < nc\"\n shows \"mat_multI zer g f nr m1 m2 ! j ! i \n                  = scalar_prodI zer g f (row m1 i) (col m2 j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_multI zer (+) (*) nr m1 m2 ! j ! i =\n    scalar_prodI zer (+) (*) (row m1 i) (col m2 j)", "using mat_mult_index i j wf1 wf2"], ["proof (prove)\nusing this:\n  \\<lbrakk>mat ?nr ?n ?m1.0; mat ?n ?nc ?m2.0; ?i < ?nr; ?j < ?nc\\<rbrakk>\n  \\<Longrightarrow> mat_multI ?ze ?pl ?ti ?nr ?m1.0 ?m2.0 ! ?j ! ?i =\n                    scalar_prodI ?ze ?pl ?ti (row ?m1.0 ?i) (col ?m2.0 ?j)\n  i < nr\n  j < nc\n  mat nr n m1\n  mat n nc m2\n\ngoal (1 subgoal):\n 1. mat_multI zer (+) (*) nr m1 m2 ! j ! i =\n    scalar_prodI zer (+) (*) (row m1 i) (col m2 j)", "by metis"], ["", "lemma matrix_index:\n  assumes wf1: \"mat (row_length m1) n m1\"\n      and wf2: \"mat n nc m2\"\n        and i: \"i < (row_length m1)\"\n        and j: \"j < nc\"\n shows  \"matrix_mult  m1 m2 ! j ! i \n                 = scalar_product  (row m1 i) (col m2 j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (m1 \\<circ> m2) ! j ! i = scalar_product (row m1 i) (col m2 j)", "using wf1 wf2 i j ma scalar_product_def"], ["proof (prove)\nusing this:\n  mat (row_length m1) n m1\n  mat n nc m2\n  i < row_length m1\n  j < nc\n  \\<lbrakk>mat ?nr ?n ?m1.0; mat ?n ?nc ?m2.0; ?i < ?nr; ?j < ?nc\\<rbrakk>\n  \\<Longrightarrow> mat_multI zer (+) (*) ?nr ?m1.0 ?m2.0 ! ?j ! ?i =\n                    scalar_prodI zer (+) (*) (row ?m1.0 ?i) (col ?m2.0 ?j)\n  scalar_product ?v ?w = scalar_prodI zer (+) (*) ?v ?w\n\ngoal (1 subgoal):\n 1. (m1 \\<circ> m2) ! j ! i = scalar_product (row m1 i) (col m2 j)", "by auto"], ["", "lemma unique_row_col:\n assumes \"mat nr1 nc1 M\" and \"mat nr2 nc2 M\" and \"M \\<noteq> []\"\n shows \"nr1 = nr2\" and \"nc1 = nc2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nr1 = nr2 &&& nc1 = nc2", "proof(cases M)"], ["proof (state)\ngoal (3 subgoals):\n 1. M = [] \\<Longrightarrow> nr1 = nr2\n 2. \\<And>a list. M = a # list \\<Longrightarrow> nr1 = nr2\n 3. nc1 = nc2", "case Nil"], ["proof (state)\nthis:\n  M = []\n\ngoal (3 subgoals):\n 1. M = [] \\<Longrightarrow> nr1 = nr2\n 2. \\<And>a list. M = a # list \\<Longrightarrow> nr1 = nr2\n 3. nc1 = nc2", "show \"nr1 = nr2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nr1 = nr2", "using assms(3) Nil"], ["proof (prove)\nusing this:\n  M \\<noteq> []\n  M = []\n\ngoal (1 subgoal):\n 1. nr1 = nr2", "by auto"], ["proof (state)\nthis:\n  nr1 = nr2\n\ngoal (2 subgoals):\n 1. \\<And>a list. M = a # list \\<Longrightarrow> nr1 = nr2\n 2. nc1 = nc2", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a list. M = a # list \\<Longrightarrow> nr1 = nr2\n 2. nc1 = nc2", "case (Cons v M)"], ["proof (state)\nthis:\n  M = v # M\n\ngoal (2 subgoals):\n 1. \\<And>a list. M = a # list \\<Longrightarrow> nr1 = nr2\n 2. nc1 = nc2", "have 1:\"v \\<in> set (v#M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> set (v # M)", "using Cons"], ["proof (prove)\nusing this:\n  M = v # M\n\ngoal (1 subgoal):\n 1. v \\<in> set (v # M)", "by auto"], ["proof (state)\nthis:\n  v \\<in> set (v # M)\n\ngoal (2 subgoals):\n 1. \\<And>a list. M = a # list \\<Longrightarrow> nr1 = nr2\n 2. nc1 = nc2", "then"], ["proof (chain)\npicking this:\n  v \\<in> set (v # M)", "have \"length v = nr1\""], ["proof (prove)\nusing this:\n  v \\<in> set (v # M)\n\ngoal (1 subgoal):\n 1. length v = nr1", "using assms(1) mat_def Ball_def vec_def  Cons"], ["proof (prove)\nusing this:\n  v \\<in> set (v # M)\n  mat nr1 nc1 M\n  mat ?nr ?nc ?m = (length ?m = ?nc \\<and> Ball (set ?m) (vec ?nr))\n  Ball ?A ?P = (\\<forall>x. x \\<in> ?A \\<longrightarrow> ?P x)\n  vec ?n ?x = (length ?x = ?n)\n  M = v # M\n\ngoal (1 subgoal):\n 1. length v = nr1", "by metis"], ["proof (state)\nthis:\n  length v = nr1\n\ngoal (2 subgoals):\n 1. \\<And>a list. M = a # list \\<Longrightarrow> nr1 = nr2\n 2. nc1 = nc2", "moreover"], ["proof (state)\nthis:\n  length v = nr1\n\ngoal (2 subgoals):\n 1. \\<And>a list. M = a # list \\<Longrightarrow> nr1 = nr2\n 2. nc1 = nc2", "then"], ["proof (chain)\npicking this:\n  length v = nr1", "have \"length v = nr2\""], ["proof (prove)\nusing this:\n  length v = nr1\n\ngoal (1 subgoal):\n 1. length v = nr2", "using 1 assms(2) mat_def Ball_def vec_def  Cons"], ["proof (prove)\nusing this:\n  length v = nr1\n  v \\<in> set (v # M)\n  mat nr2 nc2 M\n  mat ?nr ?nc ?m = (length ?m = ?nc \\<and> Ball (set ?m) (vec ?nr))\n  Ball ?A ?P = (\\<forall>x. x \\<in> ?A \\<longrightarrow> ?P x)\n  vec ?n ?x = (length ?x = ?n)\n  M = v # M\n\ngoal (1 subgoal):\n 1. length v = nr2", "by metis"], ["proof (state)\nthis:\n  length v = nr2\n\ngoal (2 subgoals):\n 1. \\<And>a list. M = a # list \\<Longrightarrow> nr1 = nr2\n 2. nc1 = nc2", "ultimately"], ["proof (chain)\npicking this:\n  length v = nr1\n  length v = nr2", "show \"nr1 = nr2\""], ["proof (prove)\nusing this:\n  length v = nr1\n  length v = nr2\n\ngoal (1 subgoal):\n 1. nr1 = nr2", "by auto"], ["proof (state)\nthis:\n  nr1 = nr2\n\ngoal (1 subgoal):\n 1. nc1 = nc2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. nc1 = nc2", "have \"length M = nc1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length M = nc1", "using mat_def assms(1)"], ["proof (prove)\nusing this:\n  mat ?nr ?nc ?m = (length ?m = ?nc \\<and> Ball (set ?m) (vec ?nr))\n  mat nr1 nc1 M\n\ngoal (1 subgoal):\n 1. length M = nc1", "by auto"], ["proof (state)\nthis:\n  length M = nc1\n\ngoal (1 subgoal):\n 1. nc1 = nc2", "moreover"], ["proof (state)\nthis:\n  length M = nc1\n\ngoal (1 subgoal):\n 1. nc1 = nc2", "have \"length M = nc2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length M = nc2", "using mat_def assms(2)"], ["proof (prove)\nusing this:\n  mat ?nr ?nc ?m = (length ?m = ?nc \\<and> Ball (set ?m) (vec ?nr))\n  mat nr2 nc2 M\n\ngoal (1 subgoal):\n 1. length M = nc2", "by auto"], ["proof (state)\nthis:\n  length M = nc2\n\ngoal (1 subgoal):\n 1. nc1 = nc2", "ultimately"], ["proof (chain)\npicking this:\n  length M = nc1\n  length M = nc2", "show \"nc1 = nc2\""], ["proof (prove)\nusing this:\n  length M = nc1\n  length M = nc2\n\ngoal (1 subgoal):\n 1. nc1 = nc2", "by auto"], ["proof (state)\nthis:\n  nc1 = nc2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma matrix_mult_index: \n assumes \"m1 \\<noteq> []\"\n  and  wf1: \"mat nr n m1\"\n  and wf2: \"mat n nc m2\"\n    and i: \"i < nr\"\n    and j: \"j < nc\"\n shows  \"matrix_mult  m1 m2 ! j ! i = scalar_product  (row m1 i) (col m2 j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (m1 \\<circ> m2) ! j ! i = scalar_product (row m1 i) (col m2 j)", "using matrix_index unique_row_col assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>mat (row_length ?m1.0) ?n ?m1.0; mat ?n ?nc ?m2.0;\n   ?i < row_length ?m1.0; ?j < ?nc\\<rbrakk>\n  \\<Longrightarrow> (?m1.0 \\<circ> ?m2.0) ! ?j ! ?i =\n                    scalar_product (row ?m1.0 ?i) (col ?m2.0 ?j)\n  \\<lbrakk>mat ?nr1.0 ?nc1.0 ?M; mat ?nr2.0 ?nc2.0 ?M;\n   ?M \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> ?nr1.0 = ?nr2.0\n  \\<lbrakk>mat ?nr1.0 ?nc1.0 ?M; mat ?nr2.0 ?nc2.0 ?M;\n   ?M \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> ?nc1.0 = ?nc2.0\n  m1 \\<noteq> []\n  mat nr n m1\n  mat n nc m2\n  i < nr\n  j < nc\n\ngoal (1 subgoal):\n 1. (m1 \\<circ> m2) ! j ! i = scalar_product (row m1 i) (col m2 j)", "by (metis matrix_row_length)"], ["", "text\\<open>the following definition checks if the given four matrices\n are such that the compositions in the mixed-product property which\n will be proved, hold true. It further checks that the matrices are \n non empty and valid\\<close>"], ["", "definition matrix_match::\"'a mat \\<Rightarrow> 'a mat \\<Rightarrow>'a mat \\<Rightarrow> 'a mat  \\<Rightarrow> bool\"\nwhere \n\"matrix_match A1 A2 B1 B2 \\<equiv> \n    (mat (row_length A1) (length A1) A1)\n   \\<and>(mat (row_length A2) (length A2) A2)\n   \\<and>(mat (row_length B1) (length B1) B1)\n   \\<and>(mat (row_length B2) (length B2) B2)\n   \\<and> (length A1 = row_length A2)\n   \\<and> (length B1 = row_length B2)\n   \\<and>(A1 \\<noteq> [])\\<and>(A2 \\<noteq> [])\\<and>(B1 \\<noteq> [])\\<and>(B2 \\<noteq> [])\""], ["", "lemma non_empty_mat_mult:\n assumes wf1:\"mat nr n A\"\n     and wf2:\"mat n nc B\"\n         and \"A \\<noteq> []\" and \" B \\<noteq> []\"\n shows  \"A \\<circ> B \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<circ> B \\<noteq> []", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. A \\<circ> B \\<noteq> []", "have \"mat nr nc (A \\<circ> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat nr nc (A \\<circ> B)", "using assms(1) assms(2) mat_mult  assms(3) matrix_row_length unique_row_col(1)"], ["proof (prove)\nusing this:\n  mat nr n A\n  mat n nc B\n  \\<lbrakk>mat ?nr ?n ?m1.0; mat ?n ?nc ?m2.0\\<rbrakk>\n  \\<Longrightarrow> mat ?nr ?nc (mat_multI ?ze ?pl ?ti ?nr ?m1.0 ?m2.0)\n  A \\<noteq> []\n  mat ?nr ?nc ?M \\<Longrightarrow> mat (row_length ?M) (length ?M) ?M\n  \\<lbrakk>mat ?nr1.0 ?nc1.0 ?M; mat ?nr2.0 ?nc2.0 ?M;\n   ?M \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> ?nr1.0 = ?nr2.0\n\ngoal (1 subgoal):\n 1. mat nr nc (A \\<circ> B)", "by (metis)"], ["proof (state)\nthis:\n  mat nr nc (A \\<circ> B)\n\ngoal (1 subgoal):\n 1. A \\<circ> B \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  mat nr nc (A \\<circ> B)", "have \"length (A \\<circ> B) = nc\""], ["proof (prove)\nusing this:\n  mat nr nc (A \\<circ> B)\n\ngoal (1 subgoal):\n 1. length (A \\<circ> B) = nc", "using mat_def"], ["proof (prove)\nusing this:\n  mat nr nc (A \\<circ> B)\n  mat ?nr ?nc ?m = (length ?m = ?nc \\<and> Ball (set ?m) (vec ?nr))\n\ngoal (1 subgoal):\n 1. length (A \\<circ> B) = nc", "by auto"], ["proof (state)\nthis:\n  length (A \\<circ> B) = nc\n\ngoal (1 subgoal):\n 1. A \\<circ> B \\<noteq> []", "moreover"], ["proof (state)\nthis:\n  length (A \\<circ> B) = nc\n\ngoal (1 subgoal):\n 1. A \\<circ> B \\<noteq> []", "have \"nc > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < nc", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < nc", "have \"length B = nc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length B = nc", "using assms(2) mat_def"], ["proof (prove)\nusing this:\n  mat n nc B\n  mat ?nr ?nc ?m = (length ?m = ?nc \\<and> Ball (set ?m) (vec ?nr))\n\ngoal (1 subgoal):\n 1. length B = nc", "by auto"], ["proof (state)\nthis:\n  length B = nc\n\ngoal (1 subgoal):\n 1. 0 < nc", "then"], ["proof (chain)\npicking this:\n  length B = nc", "show ?thesis"], ["proof (prove)\nusing this:\n  length B = nc\n\ngoal (1 subgoal):\n 1. 0 < nc", "using assms(4)"], ["proof (prove)\nusing this:\n  length B = nc\n  B \\<noteq> []\n\ngoal (1 subgoal):\n 1. 0 < nc", "by auto"], ["proof (state)\nthis:\n  0 < nc\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < nc\n\ngoal (1 subgoal):\n 1. A \\<circ> B \\<noteq> []", "moreover"], ["proof (state)\nthis:\n  0 < nc\n\ngoal (1 subgoal):\n 1. A \\<circ> B \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  0 < nc", "have \"length (A \\<circ> B) > 0\""], ["proof (prove)\nusing this:\n  0 < nc\n\ngoal (1 subgoal):\n 1. 0 < length (A \\<circ> B)", "by (metis calculation(1))"], ["proof (state)\nthis:\n  0 < length (A \\<circ> B)\n\ngoal (1 subgoal):\n 1. A \\<circ> B \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  0 < length (A \\<circ> B)", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < length (A \\<circ> B)\n\ngoal (1 subgoal):\n 1. A \\<circ> B \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  A \\<circ> B \\<noteq> []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tensor_compose_distribution1:\nassumes wf1:\"mat (row_length A1) (length A1) A1\"\n    and wf2:\"mat (row_length A2) (length A2) A2\"\n    and wf3:\"mat (row_length B1) (length B1) B1\"\n    and wf4:\"mat (row_length B2) (length B2) B2\"\n    and matchAA:\"length A1 = row_length A2\" \n    and matchBB:\"length B1 = row_length B2\"\n    and non_Nil:\"(A1 \\<noteq> [])\\<and>(A2 \\<noteq> [])\\<and>(B1 \\<noteq> [])\\<and>(B2 \\<noteq> [])\" \n shows \"mat ((row_length A1)*(row_length B1)) \n            ((length A2)*(length B2)) \n                    ((A1\\<circ>A2)\\<otimes>(B1\\<circ>B2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length A1 * row_length B1) (length A2 * length B2)\n     (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. mat (row_length A1 * row_length B1) (length A2 * length B2)\n     (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)", "have 0:\"mat (row_length A1) (length A2) (matrix_mult A1 A2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length A1) (length A2) (A1 \\<circ> A2)", "using wf1 wf2  mat_mult matchAA"], ["proof (prove)\nusing this:\n  mat (row_length A1) (length A1) A1\n  mat (row_length A2) (length A2) A2\n  \\<lbrakk>mat ?nr ?n ?m1.0; mat ?n ?nc ?m2.0\\<rbrakk>\n  \\<Longrightarrow> mat ?nr ?nc (mat_multI ?ze ?pl ?ti ?nr ?m1.0 ?m2.0)\n  length A1 = row_length A2\n\ngoal (1 subgoal):\n 1. mat (row_length A1) (length A2) (A1 \\<circ> A2)", "by auto"], ["proof (state)\nthis:\n  mat (row_length A1) (length A2) (A1 \\<circ> A2)\n\ngoal (1 subgoal):\n 1. mat (row_length A1 * row_length B1) (length A2 * length B2)\n     (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)", "then"], ["proof (chain)\npicking this:\n  mat (row_length A1) (length A2) (A1 \\<circ> A2)", "have 1:\"mat (row_length (A1 \\<circ> A2)) (length (A1 \\<circ> A2)) (matrix_mult A1 A2)\""], ["proof (prove)\nusing this:\n  mat (row_length A1) (length A2) (A1 \\<circ> A2)\n\ngoal (1 subgoal):\n 1. mat (row_length (A1 \\<circ> A2)) (length (A1 \\<circ> A2))\n     (A1 \\<circ> A2)", "by (metis matrix_row_length)"], ["proof (state)\nthis:\n  mat (row_length (A1 \\<circ> A2)) (length (A1 \\<circ> A2)) (A1 \\<circ> A2)\n\ngoal (1 subgoal):\n 1. mat (row_length A1 * row_length B1) (length A2 * length B2)\n     (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)", "then"], ["proof (chain)\npicking this:\n  mat (row_length (A1 \\<circ> A2)) (length (A1 \\<circ> A2)) (A1 \\<circ> A2)", "have 2: \"(row_length (A1 \\<circ> A2)) = (row_length A1)\" and \"length (A1 \\<circ> A2) = length A2\""], ["proof (prove)\nusing this:\n  mat (row_length (A1 \\<circ> A2)) (length (A1 \\<circ> A2)) (A1 \\<circ> A2)\n\ngoal (1 subgoal):\n 1. row_length (A1 \\<circ> A2) = row_length A1 &&&\n    length (A1 \\<circ> A2) = length A2", "using non_empty_mat_mult unique_row_col 0"], ["proof (prove)\nusing this:\n  mat (row_length (A1 \\<circ> A2)) (length (A1 \\<circ> A2)) (A1 \\<circ> A2)\n  \\<lbrakk>mat ?nr ?n ?A; mat ?n ?nc ?B; ?A \\<noteq> [];\n   ?B \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> ?A \\<circ> ?B \\<noteq> []\n  \\<lbrakk>mat ?nr1.0 ?nc1.0 ?M; mat ?nr2.0 ?nc2.0 ?M;\n   ?M \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> ?nr1.0 = ?nr2.0\n  \\<lbrakk>mat ?nr1.0 ?nc1.0 ?M; mat ?nr2.0 ?nc2.0 ?M;\n   ?M \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> ?nc1.0 = ?nc2.0\n  mat (row_length A1) (length A2) (A1 \\<circ> A2)\n\ngoal (1 subgoal):\n 1. row_length (A1 \\<circ> A2) = row_length A1 &&&\n    length (A1 \\<circ> A2) = length A2", "apply (metis length_0_conv mat_empty_column_length non_Nil)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (A1 \\<circ> A2) = length A2", "by (metis \"0\" \"1\" mat_empty_column_length unique_row_col(2))"], ["proof (state)\nthis:\n  row_length (A1 \\<circ> A2) = row_length A1\n  length (A1 \\<circ> A2) = length A2\n\ngoal (1 subgoal):\n 1. mat (row_length A1 * row_length B1) (length A2 * length B2)\n     (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)", "moreover"], ["proof (state)\nthis:\n  row_length (A1 \\<circ> A2) = row_length A1\n  length (A1 \\<circ> A2) = length A2\n\ngoal (1 subgoal):\n 1. mat (row_length A1 * row_length B1) (length A2 * length B2)\n     (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)", "have 3:\"mat (row_length B1) (length B2) (matrix_mult B1 B2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length B1) (length B2) (B1 \\<circ> B2)", "using wf3 wf4 matchBB mat_mult"], ["proof (prove)\nusing this:\n  mat (row_length B1) (length B1) B1\n  mat (row_length B2) (length B2) B2\n  length B1 = row_length B2\n  \\<lbrakk>mat ?nr ?n ?m1.0; mat ?n ?nc ?m2.0\\<rbrakk>\n  \\<Longrightarrow> mat ?nr ?nc (mat_multI ?ze ?pl ?ti ?nr ?m1.0 ?m2.0)\n\ngoal (1 subgoal):\n 1. mat (row_length B1) (length B2) (B1 \\<circ> B2)", "by auto"], ["proof (state)\nthis:\n  mat (row_length B1) (length B2) (B1 \\<circ> B2)\n\ngoal (1 subgoal):\n 1. mat (row_length A1 * row_length B1) (length A2 * length B2)\n     (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)", "then"], ["proof (chain)\npicking this:\n  mat (row_length B1) (length B2) (B1 \\<circ> B2)", "have 4:\"mat (row_length (B1 \\<circ> B2)) (length (B1 \\<circ> B2)) (matrix_mult B1 B2)\""], ["proof (prove)\nusing this:\n  mat (row_length B1) (length B2) (B1 \\<circ> B2)\n\ngoal (1 subgoal):\n 1. mat (row_length (B1 \\<circ> B2)) (length (B1 \\<circ> B2))\n     (B1 \\<circ> B2)", "by (metis matrix_row_length)"], ["proof (state)\nthis:\n  mat (row_length (B1 \\<circ> B2)) (length (B1 \\<circ> B2)) (B1 \\<circ> B2)\n\ngoal (1 subgoal):\n 1. mat (row_length A1 * row_length B1) (length A2 * length B2)\n     (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)", "then"], ["proof (chain)\npicking this:\n  mat (row_length (B1 \\<circ> B2)) (length (B1 \\<circ> B2)) (B1 \\<circ> B2)", "have 5: \"(row_length (B1 \\<circ> B2)) = (row_length B1)\" and \"length (B1 \\<circ> B2) = length B2\""], ["proof (prove)\nusing this:\n  mat (row_length (B1 \\<circ> B2)) (length (B1 \\<circ> B2)) (B1 \\<circ> B2)\n\ngoal (1 subgoal):\n 1. row_length (B1 \\<circ> B2) = row_length B1 &&&\n    length (B1 \\<circ> B2) = length B2", "using non_empty_mat_mult unique_row_col 3"], ["proof (prove)\nusing this:\n  mat (row_length (B1 \\<circ> B2)) (length (B1 \\<circ> B2)) (B1 \\<circ> B2)\n  \\<lbrakk>mat ?nr ?n ?A; mat ?n ?nc ?B; ?A \\<noteq> [];\n   ?B \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> ?A \\<circ> ?B \\<noteq> []\n  \\<lbrakk>mat ?nr1.0 ?nc1.0 ?M; mat ?nr2.0 ?nc2.0 ?M;\n   ?M \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> ?nr1.0 = ?nr2.0\n  \\<lbrakk>mat ?nr1.0 ?nc1.0 ?M; mat ?nr2.0 ?nc2.0 ?M;\n   ?M \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> ?nc1.0 = ?nc2.0\n  mat (row_length B1) (length B2) (B1 \\<circ> B2)\n\ngoal (1 subgoal):\n 1. row_length (B1 \\<circ> B2) = row_length B1 &&&\n    length (B1 \\<circ> B2) = length B2", "apply (metis length_0_conv mat_empty_column_length non_Nil)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (B1 \\<circ> B2) = length B2", "by (metis \"3\" \"4\" mat_empty_column_length unique_row_col(2))"], ["proof (state)\nthis:\n  row_length (B1 \\<circ> B2) = row_length B1\n  length (B1 \\<circ> B2) = length B2\n\ngoal (1 subgoal):\n 1. mat (row_length A1 * row_length B1) (length A2 * length B2)\n     (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)", "then"], ["proof (chain)\npicking this:\n  row_length (B1 \\<circ> B2) = row_length B1\n  length (B1 \\<circ> B2) = length B2", "show ?thesis"], ["proof (prove)\nusing this:\n  row_length (B1 \\<circ> B2) = row_length B1\n  length (B1 \\<circ> B2) = length B2\n\ngoal (1 subgoal):\n 1. mat (row_length A1 * row_length B1) (length A2 * length B2)\n     (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)", "using 1 4 5 well_defined_Tensor"], ["proof (prove)\nusing this:\n  row_length (B1 \\<circ> B2) = row_length B1\n  length (B1 \\<circ> B2) = length B2\n  mat (row_length (A1 \\<circ> A2)) (length (A1 \\<circ> A2)) (A1 \\<circ> A2)\n  mat (row_length (B1 \\<circ> B2)) (length (B1 \\<circ> B2)) (B1 \\<circ> B2)\n  row_length (B1 \\<circ> B2) = row_length B1\n  mat (row_length ?M1.0) (length ?M1.0) ?M1.0 \\<and>\n  mat (row_length ?M2.0) (length ?M2.0) ?M2.0 \\<Longrightarrow>\n  mat (row_length ?M1.0 * row_length ?M2.0) (length ?M1.0 * length ?M2.0)\n   (?M1.0 \\<otimes> ?M2.0)\n\ngoal (1 subgoal):\n 1. mat (row_length A1 * row_length B1) (length A2 * length B2)\n     (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)", "by (metis \"2\" calculation(2))"], ["proof (state)\nthis:\n  mat (row_length A1 * row_length B1) (length A2 * length B2)\n   (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma effective_tensor_compose_distribution1:\n \"matrix_match A1 A2 B1 B2 \\<Longrightarrow> mat ((row_length A1)*(row_length B1)) \n            ((length A2)*(length B2)) \n                    ((A1\\<circ>A2)\\<otimes>(B1\\<circ>B2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_match A1 A2 B1 B2 \\<Longrightarrow>\n    mat (row_length A1 * row_length B1) (length A2 * length B2)\n     (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)", "using tensor_compose_distribution1"], ["proof (prove)\nusing this:\n  \\<lbrakk>mat (row_length ?A1.0) (length ?A1.0) ?A1.0;\n   mat (row_length ?A2.0) (length ?A2.0) ?A2.0;\n   mat (row_length ?B1.0) (length ?B1.0) ?B1.0;\n   mat (row_length ?B2.0) (length ?B2.0) ?B2.0;\n   length ?A1.0 = row_length ?A2.0; length ?B1.0 = row_length ?B2.0;\n   ?A1.0 \\<noteq> [] \\<and>\n   ?A2.0 \\<noteq> [] \\<and>\n   ?B1.0 \\<noteq> [] \\<and> ?B2.0 \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> mat (row_length ?A1.0 * row_length ?B1.0)\n                     (length ?A2.0 * length ?B2.0)\n                     (?A1.0 \\<circ> ?A2.0 \\<otimes> ?B1.0 \\<circ> ?B2.0)\n\ngoal (1 subgoal):\n 1. matrix_match A1 A2 B1 B2 \\<Longrightarrow>\n    mat (row_length A1 * row_length B1) (length A2 * length B2)\n     (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)", "unfolding matrix_match_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>mat (row_length ?A1.0) (length ?A1.0) ?A1.0;\n   mat (row_length ?A2.0) (length ?A2.0) ?A2.0;\n   mat (row_length ?B1.0) (length ?B1.0) ?B1.0;\n   mat (row_length ?B2.0) (length ?B2.0) ?B2.0;\n   length ?A1.0 = row_length ?A2.0; length ?B1.0 = row_length ?B2.0;\n   ?A1.0 \\<noteq> [] \\<and>\n   ?A2.0 \\<noteq> [] \\<and>\n   ?B1.0 \\<noteq> [] \\<and> ?B2.0 \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> mat (row_length ?A1.0 * row_length ?B1.0)\n                     (length ?A2.0 * length ?B2.0)\n                     (?A1.0 \\<circ> ?A2.0 \\<otimes> ?B1.0 \\<circ> ?B2.0)\n\ngoal (1 subgoal):\n 1. mat (row_length A1) (length A1) A1 \\<and>\n    mat (row_length A2) (length A2) A2 \\<and>\n    mat (row_length B1) (length B1) B1 \\<and>\n    mat (row_length B2) (length B2) B2 \\<and>\n    length A1 = row_length A2 \\<and>\n    length B1 = row_length B2 \\<and>\n    A1 \\<noteq> [] \\<and>\n    A2 \\<noteq> [] \\<and>\n    B1 \\<noteq> [] \\<and> B2 \\<noteq> [] \\<Longrightarrow>\n    mat (row_length A1 * row_length B1) (length A2 * length B2)\n     (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)", "by auto"], ["", "lemma tensor_compose_distribution2:\n assumes wf1:\"mat (row_length A1) (length A1) A1\"\n    and wf2:\"mat (row_length A2) (length A2) A2\"\n    and wf3:\"mat (row_length B1) (length B1) B1\"\n    and wf4:\"mat (row_length B2) (length B2) B2\"\n    and matchAA:\"length A1 = row_length A2\"\n    and matchBB:\"length B1 = row_length B2\"\n    and non_Nil:\"(A1 \\<noteq> [])\\<and>(A2 \\<noteq> [])\\<and>(B1 \\<noteq> [])\\<and>(B2 \\<noteq> [])\" \n shows \"mat ((row_length A1)*(row_length B1)) \n            ((length A2)*(length B2)) \n                    ((A1 \\<otimes> B1) \\<circ>(A2 \\<otimes>B2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length A1 * row_length B1) (length A2 * length B2)\n     ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. mat (row_length A1 * row_length B1) (length A2 * length B2)\n     ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2))", "have \"mat \n           ((row_length A1)*(row_length B1))  \n           ((length A1)*(length B1)) \n             (A1 \\<otimes> B1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length A1 * row_length B1) (length A1 * length B1)\n     (A1 \\<otimes> B1)", "using wf1 wf3 well_defined_Tensor"], ["proof (prove)\nusing this:\n  mat (row_length A1) (length A1) A1\n  mat (row_length B1) (length B1) B1\n  mat (row_length ?M1.0) (length ?M1.0) ?M1.0 \\<and>\n  mat (row_length ?M2.0) (length ?M2.0) ?M2.0 \\<Longrightarrow>\n  mat (row_length ?M1.0 * row_length ?M2.0) (length ?M1.0 * length ?M2.0)\n   (?M1.0 \\<otimes> ?M2.0)\n\ngoal (1 subgoal):\n 1. mat (row_length A1 * row_length B1) (length A1 * length B1)\n     (A1 \\<otimes> B1)", "by auto"], ["proof (state)\nthis:\n  mat (row_length A1 * row_length B1) (length A1 * length B1)\n   (A1 \\<otimes> B1)\n\ngoal (1 subgoal):\n 1. mat (row_length A1 * row_length B1) (length A2 * length B2)\n     ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2))", "moreover"], ["proof (state)\nthis:\n  mat (row_length A1 * row_length B1) (length A1 * length B1)\n   (A1 \\<otimes> B1)\n\ngoal (1 subgoal):\n 1. mat (row_length A1 * row_length B1) (length A2 * length B2)\n     ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2))", "have \"mat \n                   ((row_length A2)*(row_length B2))  \n                   ((length A2)*(length B2)) \n                      (A2\\<otimes> B2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length A2 * row_length B2) (length A2 * length B2)\n     (A2 \\<otimes> B2)", "using wf2 wf4 well_defined_Tensor"], ["proof (prove)\nusing this:\n  mat (row_length A2) (length A2) A2\n  mat (row_length B2) (length B2) B2\n  mat (row_length ?M1.0) (length ?M1.0) ?M1.0 \\<and>\n  mat (row_length ?M2.0) (length ?M2.0) ?M2.0 \\<Longrightarrow>\n  mat (row_length ?M1.0 * row_length ?M2.0) (length ?M1.0 * length ?M2.0)\n   (?M1.0 \\<otimes> ?M2.0)\n\ngoal (1 subgoal):\n 1. mat (row_length A2 * row_length B2) (length A2 * length B2)\n     (A2 \\<otimes> B2)", "by auto"], ["proof (state)\nthis:\n  mat (row_length A2 * row_length B2) (length A2 * length B2)\n   (A2 \\<otimes> B2)\n\ngoal (1 subgoal):\n 1. mat (row_length A1 * row_length B1) (length A2 * length B2)\n     ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2))", "moreover"], ["proof (state)\nthis:\n  mat (row_length A2 * row_length B2) (length A2 * length B2)\n   (A2 \\<otimes> B2)\n\ngoal (1 subgoal):\n 1. mat (row_length A1 * row_length B1) (length A2 * length B2)\n     ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2))", "have \"((length A1)*(length B1)) \n                        = ((row_length A2)*(row_length B2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length A1 * length B1 = row_length A2 * row_length B2", "using matchAA matchBB"], ["proof (prove)\nusing this:\n  length A1 = row_length A2\n  length B1 = row_length B2\n\ngoal (1 subgoal):\n 1. length A1 * length B1 = row_length A2 * row_length B2", "by auto"], ["proof (state)\nthis:\n  length A1 * length B1 = row_length A2 * row_length B2\n\ngoal (1 subgoal):\n 1. mat (row_length A1 * row_length B1) (length A2 * length B2)\n     ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2))", "ultimately"], ["proof (chain)\npicking this:\n  mat (row_length A1 * row_length B1) (length A1 * length B1)\n   (A1 \\<otimes> B1)\n  mat (row_length A2 * row_length B2) (length A2 * length B2)\n   (A2 \\<otimes> B2)\n  length A1 * length B1 = row_length A2 * row_length B2", "show ?thesis"], ["proof (prove)\nusing this:\n  mat (row_length A1 * row_length B1) (length A1 * length B1)\n   (A1 \\<otimes> B1)\n  mat (row_length A2 * row_length B2) (length A2 * length B2)\n   (A2 \\<otimes> B2)\n  length A1 * length B1 = row_length A2 * row_length B2\n\ngoal (1 subgoal):\n 1. mat (row_length A1 * row_length B1) (length A2 * length B2)\n     ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2))", "using mat_mult row_length_mat"], ["proof (prove)\nusing this:\n  mat (row_length A1 * row_length B1) (length A1 * length B1)\n   (A1 \\<otimes> B1)\n  mat (row_length A2 * row_length B2) (length A2 * length B2)\n   (A2 \\<otimes> B2)\n  length A1 * length B1 = row_length A2 * row_length B2\n  \\<lbrakk>mat ?nr ?n ?m1.0; mat ?n ?nc ?m2.0\\<rbrakk>\n  \\<Longrightarrow> mat ?nr ?nc (mat_multI ?ze ?pl ?ti ?nr ?m1.0 ?m2.0)\n  row_length (?m1.0 \\<otimes> ?m2.0) = row_length ?m1.0 * row_length ?m2.0\n\ngoal (1 subgoal):\n 1. mat (row_length A1 * row_length B1) (length A2 * length B2)\n     ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2))", "by simp"], ["proof (state)\nthis:\n  mat (row_length A1 * row_length B1) (length A2 * length B2)\n   ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2))\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem tensor_non_empty: assumes \"A \\<noteq> []\" and \"B \\<noteq> []\"\n shows \"A \\<otimes> B \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<otimes> B \\<noteq> []", "using  assms(1) assms(2) length_0_conv length_Tensor mult_is_0"], ["proof (prove)\nusing this:\n  A \\<noteq> []\n  B \\<noteq> []\n  (length ?xs = 0) = (?xs = [])\n  length (?M1.0 \\<otimes> ?M2.0) = length ?M1.0 * length ?M2.0\n  (?m * ?n = 0) = (?m = 0 \\<or> ?n = 0)\n\ngoal (1 subgoal):\n 1. A \\<otimes> B \\<noteq> []", "by metis"], ["", "theorem non_empty_distribution:\n assumes \"mat nr1 n1 A1\" \n     and \"mat n1 nc1 A2\" \n     and \"mat nr2 n2 B1\" \n     and \"mat n2 nc2 B2\" \n     and \"A1 \\<noteq> []\" and \"B1 \\<noteq> []\" and \"A2 \\<noteq> []\" and \"B2 \\<noteq> []\" \n shows \"((A1\\<circ>A2)\\<otimes>(B1\\<circ>B2)) \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2 \\<noteq> []", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2 \\<noteq> []", "have \"A1 \\<circ> A2 \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A1 \\<circ> A2 \\<noteq> []", "using assms  non_empty_mat_mult"], ["proof (prove)\nusing this:\n  mat nr1 n1 A1\n  mat n1 nc1 A2\n  mat nr2 n2 B1\n  mat n2 nc2 B2\n  A1 \\<noteq> []\n  B1 \\<noteq> []\n  A2 \\<noteq> []\n  B2 \\<noteq> []\n  \\<lbrakk>mat ?nr ?n ?A; mat ?n ?nc ?B; ?A \\<noteq> [];\n   ?B \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> ?A \\<circ> ?B \\<noteq> []\n\ngoal (1 subgoal):\n 1. A1 \\<circ> A2 \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  A1 \\<circ> A2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2 \\<noteq> []", "moreover"], ["proof (state)\nthis:\n  A1 \\<circ> A2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2 \\<noteq> []", "have \"B1 \\<circ> B2 \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B1 \\<circ> B2 \\<noteq> []", "using assms  non_empty_mat_mult"], ["proof (prove)\nusing this:\n  mat nr1 n1 A1\n  mat n1 nc1 A2\n  mat nr2 n2 B1\n  mat n2 nc2 B2\n  A1 \\<noteq> []\n  B1 \\<noteq> []\n  A2 \\<noteq> []\n  B2 \\<noteq> []\n  \\<lbrakk>mat ?nr ?n ?A; mat ?n ?nc ?B; ?A \\<noteq> [];\n   ?B \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> ?A \\<circ> ?B \\<noteq> []\n\ngoal (1 subgoal):\n 1. B1 \\<circ> B2 \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  B1 \\<circ> B2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2 \\<noteq> []", "ultimately"], ["proof (chain)\npicking this:\n  A1 \\<circ> A2 \\<noteq> []\n  B1 \\<circ> B2 \\<noteq> []", "show ?thesis"], ["proof (prove)\nusing this:\n  A1 \\<circ> A2 \\<noteq> []\n  B1 \\<circ> B2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2 \\<noteq> []", "using tensor_non_empty"], ["proof (prove)\nusing this:\n  A1 \\<circ> A2 \\<noteq> []\n  B1 \\<circ> B2 \\<noteq> []\n  \\<lbrakk>?A \\<noteq> []; ?B \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> ?A \\<otimes> ?B \\<noteq> []\n\ngoal (1 subgoal):\n 1. A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2 \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2 \\<noteq> []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma effective_tensor_compose_distribution2:\"matrix_match A1 A2 B1 B2 \\<Longrightarrow> \n   mat ((row_length A1)*(row_length B1)) \n            ((length A2)*(length B2)) \n                    ((A1 \\<otimes> B1) \\<circ>(A2 \\<otimes>B2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_match A1 A2 B1 B2 \\<Longrightarrow>\n    mat (row_length A1 * row_length B1) (length A2 * length B2)\n     ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2))", "using tensor_compose_distribution2"], ["proof (prove)\nusing this:\n  \\<lbrakk>mat (row_length ?A1.0) (length ?A1.0) ?A1.0;\n   mat (row_length ?A2.0) (length ?A2.0) ?A2.0;\n   mat (row_length ?B1.0) (length ?B1.0) ?B1.0;\n   mat (row_length ?B2.0) (length ?B2.0) ?B2.0;\n   length ?A1.0 = row_length ?A2.0; length ?B1.0 = row_length ?B2.0;\n   ?A1.0 \\<noteq> [] \\<and>\n   ?A2.0 \\<noteq> [] \\<and>\n   ?B1.0 \\<noteq> [] \\<and> ?B2.0 \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> mat (row_length ?A1.0 * row_length ?B1.0)\n                     (length ?A2.0 * length ?B2.0)\n                     ((?A1.0 \\<otimes> ?B1.0) \\<circ>\n                      (?A2.0 \\<otimes> ?B2.0))\n\ngoal (1 subgoal):\n 1. matrix_match A1 A2 B1 B2 \\<Longrightarrow>\n    mat (row_length A1 * row_length B1) (length A2 * length B2)\n     ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2))", "unfolding matrix_match_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>mat (row_length ?A1.0) (length ?A1.0) ?A1.0;\n   mat (row_length ?A2.0) (length ?A2.0) ?A2.0;\n   mat (row_length ?B1.0) (length ?B1.0) ?B1.0;\n   mat (row_length ?B2.0) (length ?B2.0) ?B2.0;\n   length ?A1.0 = row_length ?A2.0; length ?B1.0 = row_length ?B2.0;\n   ?A1.0 \\<noteq> [] \\<and>\n   ?A2.0 \\<noteq> [] \\<and>\n   ?B1.0 \\<noteq> [] \\<and> ?B2.0 \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> mat (row_length ?A1.0 * row_length ?B1.0)\n                     (length ?A2.0 * length ?B2.0)\n                     ((?A1.0 \\<otimes> ?B1.0) \\<circ>\n                      (?A2.0 \\<otimes> ?B2.0))\n\ngoal (1 subgoal):\n 1. mat (row_length A1) (length A1) A1 \\<and>\n    mat (row_length A2) (length A2) A2 \\<and>\n    mat (row_length B1) (length B1) B1 \\<and>\n    mat (row_length B2) (length B2) B2 \\<and>\n    length A1 = row_length A2 \\<and>\n    length B1 = row_length B2 \\<and>\n    A1 \\<noteq> [] \\<and>\n    A2 \\<noteq> [] \\<and>\n    B1 \\<noteq> [] \\<and> B2 \\<noteq> [] \\<Longrightarrow>\n    mat (row_length A1 * row_length B1) (length A2 * length B2)\n     ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2))", "by auto"], ["", "theorem effective_matrix_Tensor_elements: \n fixes M1 M2 i j \n assumes \"i<((row_length M1)*(row_length M2))\"\n     and \"j < (length M1)*(length M2)\"\n     and \"mat (row_length M1) (length M1) M1\"\n     and \"mat (row_length M2) (length M2) M2\"\n shows\n \"((M1 \\<otimes> M2)!j!i) = f (M1!(j div (length M2))!(i div (row_length M2))) \n(M2!(j mod length M2)!(i mod (row_length M2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M1 \\<otimes> M2) ! j ! i =\n    M1 ! (j div length M2) ! (i div row_length M2) *\n    M2 ! (j mod length M2) ! (i mod row_length M2)", "using matrix_Tensor_elements assms"], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     (i < row_length ?M1.0 * row_length ?M2.0 \\<and>\n      j < length ?M1.0 * length ?M2.0) \\<and>\n     mat (row_length ?M1.0) (length ?M1.0) ?M1.0 \\<and>\n     mat (row_length ?M2.0) (length ?M2.0) ?M2.0 \\<longrightarrow>\n     (?M1.0 \\<otimes> ?M2.0) ! j ! i =\n     ?M1.0 ! (j div length ?M2.0) ! (i div row_length ?M2.0) *\n     ?M2.0 ! (j mod length ?M2.0) ! (i mod row_length ?M2.0)\n  i < row_length M1 * row_length M2\n  j < length M1 * length M2\n  mat (row_length M1) (length M1) M1\n  mat (row_length M2) (length M2) M2\n\ngoal (1 subgoal):\n 1. (M1 \\<otimes> M2) ! j ! i =\n    M1 ! (j div length M2) ! (i div row_length M2) *\n    M2 ! (j mod length M2) ! (i mod row_length M2)", "by auto"], ["", "theorem effective_matrix_Tensor_elements2: \n fixes M1 M2 \n assumes \"mat (row_length M1) (length M1) M1\"\n     and \"mat (row_length M2) (length M2) M2\"\n shows\n  \"(\\<forall>i <((row_length M1)*(row_length M2)).\n    \\<forall>j < ((length M1)*(length M2))\n       .((M1 \\<otimes> M2)!j!i) = f (M1!(j div (length M2))!(i div (row_length M2))) \n                             (M2!(j mod length M2)!(i mod (row_length M2))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<row_length M1 * row_length M2.\n       \\<forall>j<length M1 * length M2.\n          (M1 \\<otimes> M2) ! j ! i =\n          M1 ! (j div length M2) ! (i div row_length M2) *\n          M2 ! (j mod length M2) ! (i mod row_length M2)", "using matrix_Tensor_elements assms"], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     (i < row_length ?M1.0 * row_length ?M2.0 \\<and>\n      j < length ?M1.0 * length ?M2.0) \\<and>\n     mat (row_length ?M1.0) (length ?M1.0) ?M1.0 \\<and>\n     mat (row_length ?M2.0) (length ?M2.0) ?M2.0 \\<longrightarrow>\n     (?M1.0 \\<otimes> ?M2.0) ! j ! i =\n     ?M1.0 ! (j div length ?M2.0) ! (i div row_length ?M2.0) *\n     ?M2.0 ! (j mod length ?M2.0) ! (i mod row_length ?M2.0)\n  mat (row_length M1) (length M1) M1\n  mat (row_length M2) (length M2) M2\n\ngoal (1 subgoal):\n 1. \\<forall>i<row_length M1 * row_length M2.\n       \\<forall>j<length M1 * length M2.\n          (M1 \\<otimes> M2) ! j ! i =\n          M1 ! (j div length M2) ! (i div row_length M2) *\n          M2 ! (j mod length M2) ! (i mod row_length M2)", "by auto"], ["", "definition matrix_compose_cond::\"'a mat \\<Rightarrow> 'a mat \\<Rightarrow>'a mat \\<Rightarrow> 'a mat \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> bool\"\nwhere \n\"matrix_compose_cond A1 A2 B1 B2 i j \\<equiv> \n     (mat (row_length A1) (length A1) A1)\n      \\<and>(mat (row_length A2) (length A2) A2)\n   \\<and>(mat (row_length B1) (length B1) B1)\n    \\<and>(mat (row_length B2) (length B2) B2)\n\n   \\<and> (length A1 = row_length A2)\n   \\<and> (length B1 = row_length B2)\n   \\<and>(A1 \\<noteq> [])\\<and>(A2 \\<noteq> [])\\<and>(B1 \\<noteq> [])\\<and>(B2 \\<noteq> []) \n\\<and>(i<(row_length A1)*(row_length B1))\\<and>(j< (length A2)*(length B2))\""], ["", "theorem elements_matrix_distribution_1:\nassumes wf1:\"mat (row_length A1) (length A1) A1\"\n   and wf2:\"mat (row_length A2) (length A2) A2\"\n   and wf3:\"mat (row_length B1) (length B1) B1\"\n   and wf4:\"mat (row_length B2) (length B2) B2\"\n   and matchAA:\"length A1 = row_length A2\"\n   and matchBB:\"length B1 = row_length B2\"\n   and non_Nil:\"(A1 \\<noteq> [])\\<and>(A2 \\<noteq> [])\\<and>(B1 \\<noteq> [])\\<and>(B2 \\<noteq> [])\" \n   and \"i<(row_length A1)*(row_length B1)\" and \"j< (length A2)*(length B2)\"\nshows\n\"((matrix_mult A1  A2)\\<otimes>(matrix_mult B1  B2))!j!i\n  =  f (scalar_product (row A1 (i div (row_length B1))) \n                        (col A2  (j div (length B2))))\n       (scalar_product (row B1 (i mod (row_length B1))) \n                       (col B2 (j mod (length B2))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "have 0:\"((matrix_mult A1  A2)\\<otimes>(matrix_mult B1  B2)) \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2 \\<noteq> []", "using non_empty_distribution assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>mat ?nr1.0 ?n1.0 ?A1.0; mat ?n1.0 ?nc1.0 ?A2.0;\n   mat ?nr2.0 ?n2.0 ?B1.0; mat ?n2.0 ?nc2.0 ?B2.0; ?A1.0 \\<noteq> [];\n   ?B1.0 \\<noteq> []; ?A2.0 \\<noteq> []; ?B2.0 \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> ?A1.0 \\<circ> ?A2.0 \\<otimes>\n                    ?B1.0 \\<circ> ?B2.0 \\<noteq>\n                    []\n  mat (row_length A1) (length A1) A1\n  mat (row_length A2) (length A2) A2\n  mat (row_length B1) (length B1) B1\n  mat (row_length B2) (length B2) B2\n  length A1 = row_length A2\n  length B1 = row_length B2\n  A1 \\<noteq> [] \\<and>\n  A2 \\<noteq> [] \\<and> B1 \\<noteq> [] \\<and> B2 \\<noteq> []\n  i < row_length A1 * row_length B1\n  j < length A2 * length B2\n\ngoal (1 subgoal):\n 1. A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2 \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "then"], ["proof (chain)\npicking this:\n  A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2 \\<noteq> []", "have 1:\"mat ((row_length A1)*(row_length B1)) \n            ((length A2)*(length B2)) \n                    ((A1\\<circ>A2)\\<otimes>(B1\\<circ>B2))\""], ["proof (prove)\nusing this:\n  A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. mat (row_length A1 * row_length B1) (length A2 * length B2)\n     (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)", "using tensor_compose_distribution1 assms"], ["proof (prove)\nusing this:\n  A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2 \\<noteq> []\n  \\<lbrakk>mat (row_length ?A1.0) (length ?A1.0) ?A1.0;\n   mat (row_length ?A2.0) (length ?A2.0) ?A2.0;\n   mat (row_length ?B1.0) (length ?B1.0) ?B1.0;\n   mat (row_length ?B2.0) (length ?B2.0) ?B2.0;\n   length ?A1.0 = row_length ?A2.0; length ?B1.0 = row_length ?B2.0;\n   ?A1.0 \\<noteq> [] \\<and>\n   ?A2.0 \\<noteq> [] \\<and>\n   ?B1.0 \\<noteq> [] \\<and> ?B2.0 \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> mat (row_length ?A1.0 * row_length ?B1.0)\n                     (length ?A2.0 * length ?B2.0)\n                     (?A1.0 \\<circ> ?A2.0 \\<otimes> ?B1.0 \\<circ> ?B2.0)\n  mat (row_length A1) (length A1) A1\n  mat (row_length A2) (length A2) A2\n  mat (row_length B1) (length B1) B1\n  mat (row_length B2) (length B2) B2\n  length A1 = row_length A2\n  length B1 = row_length B2\n  A1 \\<noteq> [] \\<and>\n  A2 \\<noteq> [] \\<and> B1 \\<noteq> [] \\<and> B2 \\<noteq> []\n  i < row_length A1 * row_length B1\n  j < length A2 * length B2\n\ngoal (1 subgoal):\n 1. mat (row_length A1 * row_length B1) (length A2 * length B2)\n     (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)", "by auto"], ["proof (state)\nthis:\n  mat (row_length A1 * row_length B1) (length A2 * length B2)\n   (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "then"], ["proof (chain)\npicking this:\n  mat (row_length A1 * row_length B1) (length A2 * length B2)\n   (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)", "have 2:\"mat (row_length  ((A1\\<circ>A2)\\<otimes>(B1\\<circ>B2))) \n            (length  ((A1\\<circ>A2)\\<otimes>(B1\\<circ>B2))) \n                    ((A1\\<circ>A2)\\<otimes>(B1\\<circ>B2))\""], ["proof (prove)\nusing this:\n  mat (row_length A1 * row_length B1) (length A2 * length B2)\n   (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)\n\ngoal (1 subgoal):\n 1. mat (row_length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2))\n     (length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2))\n     (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)", "by (metis matrix_row_length)"], ["proof (state)\nthis:\n  mat (row_length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2))\n   (length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2))\n   (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "then"], ["proof (chain)\npicking this:\n  mat (row_length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2))\n   (length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2))\n   (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)", "have 3:\"((row_length A1)*(row_length B1)) \n                         = (row_length  ((A1\\<circ>A2)\\<otimes>(B1\\<circ>B2))) \"\n        and \"((length A2)*(length B2)) = (length  ((A1\\<circ>A2)\\<otimes>(B1\\<circ>B2)))\""], ["proof (prove)\nusing this:\n  mat (row_length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2))\n   (length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2))\n   (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)\n\ngoal (1 subgoal):\n 1. row_length A1 * row_length B1 =\n    row_length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) &&&\n    length A2 * length B2 = length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)", "using 0 1 unique_row_col"], ["proof (prove)\nusing this:\n  mat (row_length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2))\n   (length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2))\n   (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)\n  A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2 \\<noteq> []\n  mat (row_length A1 * row_length B1) (length A2 * length B2)\n   (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)\n  \\<lbrakk>mat ?nr1.0 ?nc1.0 ?M; mat ?nr2.0 ?nc2.0 ?M;\n   ?M \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> ?nr1.0 = ?nr2.0\n  \\<lbrakk>mat ?nr1.0 ?nc1.0 ?M; mat ?nr2.0 ?nc2.0 ?M;\n   ?M \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> ?nc1.0 = ?nc2.0\n\ngoal (1 subgoal):\n 1. row_length A1 * row_length B1 =\n    row_length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) &&&\n    length A2 * length B2 = length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)", "apply metis"], ["proof (prove)\ngoal (1 subgoal):\n 1. length A2 * length B2 = length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)", "using 0 1 2 unique_row_col"], ["proof (prove)\nusing this:\n  A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2 \\<noteq> []\n  mat (row_length A1 * row_length B1) (length A2 * length B2)\n   (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)\n  mat (row_length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2))\n   (length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2))\n   (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)\n  \\<lbrakk>mat ?nr1.0 ?nc1.0 ?M; mat ?nr2.0 ?nc2.0 ?M;\n   ?M \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> ?nr1.0 = ?nr2.0\n  \\<lbrakk>mat ?nr1.0 ?nc1.0 ?M; mat ?nr2.0 ?nc2.0 ?M;\n   ?M \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> ?nc1.0 = ?nc2.0\n\ngoal (1 subgoal):\n 1. length A2 * length B2 = length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)", "by metis"], ["proof (state)\nthis:\n  row_length A1 * row_length B1 =\n  row_length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)\n  length A2 * length B2 = length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "then"], ["proof (chain)\npicking this:\n  row_length A1 * row_length B1 =\n  row_length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)\n  length A2 * length B2 = length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)", "have i:\"(i < ((row_length A1)*(row_length B1))) \n                             = (i < (row_length  ((A1\\<circ>A2)\\<otimes>(B1\\<circ>B2))))\""], ["proof (prove)\nusing this:\n  row_length A1 * row_length B1 =\n  row_length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)\n  length A2 * length B2 = length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)\n\ngoal (1 subgoal):\n 1. (i < row_length A1 * row_length B1) =\n    (i < row_length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2))", "by auto"], ["proof (state)\nthis:\n  (i < row_length A1 * row_length B1) =\n  (i < row_length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2))\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "moreover"], ["proof (state)\nthis:\n  (i < row_length A1 * row_length B1) =\n  (i < row_length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2))\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "have j:\"(j < ((length A2)*(length B2))) \n                         = (j < (length  ((A1\\<circ>A2)\\<otimes>(B1\\<circ>B2))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (j < length A2 * length B2) =\n    (j < length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2))", "using 3 \\<open>length A2 * length B2 = length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)\\<close>"], ["proof (prove)\nusing this:\n  row_length A1 * row_length B1 =\n  row_length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)\n  length A2 * length B2 = length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)\n\ngoal (1 subgoal):\n 1. (j < length A2 * length B2) =\n    (j < length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2))", "by (metis)"], ["proof (state)\nthis:\n  (j < length A2 * length B2) =\n  (j < length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2))\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "have 4:\"mat (row_length A1) (length A2) (A1 \\<circ> A2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length A1) (length A2) (A1 \\<circ> A2)", "using assms mat_mult"], ["proof (prove)\nusing this:\n  mat (row_length A1) (length A1) A1\n  mat (row_length A2) (length A2) A2\n  mat (row_length B1) (length B1) B1\n  mat (row_length B2) (length B2) B2\n  length A1 = row_length A2\n  length B1 = row_length B2\n  A1 \\<noteq> [] \\<and>\n  A2 \\<noteq> [] \\<and> B1 \\<noteq> [] \\<and> B2 \\<noteq> []\n  i < row_length A1 * row_length B1\n  j < length A2 * length B2\n  \\<lbrakk>mat ?nr ?n ?m1.0; mat ?n ?nc ?m2.0\\<rbrakk>\n  \\<Longrightarrow> mat ?nr ?nc (mat_multI ?ze ?pl ?ti ?nr ?m1.0 ?m2.0)\n\ngoal (1 subgoal):\n 1. mat (row_length A1) (length A2) (A1 \\<circ> A2)", "by auto"], ["proof (state)\nthis:\n  mat (row_length A1) (length A2) (A1 \\<circ> A2)\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "then"], ["proof (chain)\npicking this:\n  mat (row_length A1) (length A2) (A1 \\<circ> A2)", "have 5:\"mat (row_length (A1 \\<circ> A2)) (length (A1 \\<circ> A2)) (A1 \\<circ> A2)\""], ["proof (prove)\nusing this:\n  mat (row_length A1) (length A2) (A1 \\<circ> A2)\n\ngoal (1 subgoal):\n 1. mat (row_length (A1 \\<circ> A2)) (length (A1 \\<circ> A2))\n     (A1 \\<circ> A2)", "using  matrix_row_length"], ["proof (prove)\nusing this:\n  mat (row_length A1) (length A2) (A1 \\<circ> A2)\n  mat ?nr ?nc ?M \\<Longrightarrow> mat (row_length ?M) (length ?M) ?M\n\ngoal (1 subgoal):\n 1. mat (row_length (A1 \\<circ> A2)) (length (A1 \\<circ> A2))\n     (A1 \\<circ> A2)", "by (metis)"], ["proof (state)\nthis:\n  mat (row_length (A1 \\<circ> A2)) (length (A1 \\<circ> A2)) (A1 \\<circ> A2)\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "with 4"], ["proof (chain)\npicking this:\n  mat (row_length A1) (length A2) (A1 \\<circ> A2)\n  mat (row_length (A1 \\<circ> A2)) (length (A1 \\<circ> A2)) (A1 \\<circ> A2)", "have 6:\"row_length A1 = row_length (A1 \\<circ> A2)\""], ["proof (prove)\nusing this:\n  mat (row_length A1) (length A2) (A1 \\<circ> A2)\n  mat (row_length (A1 \\<circ> A2)) (length (A1 \\<circ> A2)) (A1 \\<circ> A2)\n\ngoal (1 subgoal):\n 1. row_length A1 = row_length (A1 \\<circ> A2)", "by (metis \"0\" Tensor.simps(1) unique_row_col(1))"], ["proof (state)\nthis:\n  row_length A1 = row_length (A1 \\<circ> A2)\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "with 4 5"], ["proof (chain)\npicking this:\n  mat (row_length A1) (length A2) (A1 \\<circ> A2)\n  mat (row_length (A1 \\<circ> A2)) (length (A1 \\<circ> A2)) (A1 \\<circ> A2)\n  row_length A1 = row_length (A1 \\<circ> A2)", "have 7:\"length A2 = length (A1 \\<circ> A2)\""], ["proof (prove)\nusing this:\n  mat (row_length A1) (length A2) (A1 \\<circ> A2)\n  mat (row_length (A1 \\<circ> A2)) (length (A1 \\<circ> A2)) (A1 \\<circ> A2)\n  row_length A1 = row_length (A1 \\<circ> A2)\n\ngoal (1 subgoal):\n 1. length A2 = length (A1 \\<circ> A2)", "by (metis  mat_empty_column_length unique_row_col(2))"], ["proof (state)\nthis:\n  length A2 = length (A1 \\<circ> A2)\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "then"], ["proof (chain)\npicking this:\n  length A2 = length (A1 \\<circ> A2)", "have 8:\"mat (row_length B1) (length B2) (B1 \\<circ> B2)\""], ["proof (prove)\nusing this:\n  length A2 = length (A1 \\<circ> A2)\n\ngoal (1 subgoal):\n 1. mat (row_length B1) (length B2) (B1 \\<circ> B2)", "using assms mat_mult"], ["proof (prove)\nusing this:\n  length A2 = length (A1 \\<circ> A2)\n  mat (row_length A1) (length A1) A1\n  mat (row_length A2) (length A2) A2\n  mat (row_length B1) (length B1) B1\n  mat (row_length B2) (length B2) B2\n  length A1 = row_length A2\n  length B1 = row_length B2\n  A1 \\<noteq> [] \\<and>\n  A2 \\<noteq> [] \\<and> B1 \\<noteq> [] \\<and> B2 \\<noteq> []\n  i < row_length A1 * row_length B1\n  j < length A2 * length B2\n  \\<lbrakk>mat ?nr ?n ?m1.0; mat ?n ?nc ?m2.0\\<rbrakk>\n  \\<Longrightarrow> mat ?nr ?nc (mat_multI ?ze ?pl ?ti ?nr ?m1.0 ?m2.0)\n\ngoal (1 subgoal):\n 1. mat (row_length B1) (length B2) (B1 \\<circ> B2)", "by auto"], ["proof (state)\nthis:\n  mat (row_length B1) (length B2) (B1 \\<circ> B2)\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "then"], ["proof (chain)\npicking this:\n  mat (row_length B1) (length B2) (B1 \\<circ> B2)", "have 9:\"mat (row_length (B1 \\<circ> B2)) (length (B1 \\<circ> B2)) (B1 \\<circ> B2)\""], ["proof (prove)\nusing this:\n  mat (row_length B1) (length B2) (B1 \\<circ> B2)\n\ngoal (1 subgoal):\n 1. mat (row_length (B1 \\<circ> B2)) (length (B1 \\<circ> B2))\n     (B1 \\<circ> B2)", "using  matrix_row_length"], ["proof (prove)\nusing this:\n  mat (row_length B1) (length B2) (B1 \\<circ> B2)\n  mat ?nr ?nc ?M \\<Longrightarrow> mat (row_length ?M) (length ?M) ?M\n\ngoal (1 subgoal):\n 1. mat (row_length (B1 \\<circ> B2)) (length (B1 \\<circ> B2))\n     (B1 \\<circ> B2)", "by (metis)"], ["proof (state)\nthis:\n  mat (row_length (B1 \\<circ> B2)) (length (B1 \\<circ> B2)) (B1 \\<circ> B2)\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "with 7 8"], ["proof (chain)\npicking this:\n  length A2 = length (A1 \\<circ> A2)\n  mat (row_length B1) (length B2) (B1 \\<circ> B2)\n  mat (row_length (B1 \\<circ> B2)) (length (B1 \\<circ> B2)) (B1 \\<circ> B2)", "have 10:\"row_length B1 = row_length (B1 \\<circ> B2)\""], ["proof (prove)\nusing this:\n  length A2 = length (A1 \\<circ> A2)\n  mat (row_length B1) (length B2) (B1 \\<circ> B2)\n  mat (row_length (B1 \\<circ> B2)) (length (B1 \\<circ> B2)) (B1 \\<circ> B2)\n\ngoal (1 subgoal):\n 1. row_length B1 = row_length (B1 \\<circ> B2)", "by (metis \"3\" \"6\" assms(8) less_nat_zero_code mult_cancel2 mult_is_0 mult.commute row_length_mat)"], ["proof (state)\nthis:\n  row_length B1 = row_length (B1 \\<circ> B2)\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "with 7 8 9"], ["proof (chain)\npicking this:\n  length A2 = length (A1 \\<circ> A2)\n  mat (row_length B1) (length B2) (B1 \\<circ> B2)\n  mat (row_length (B1 \\<circ> B2)) (length (B1 \\<circ> B2)) (B1 \\<circ> B2)\n  row_length B1 = row_length (B1 \\<circ> B2)", "have 11:\"length B2 = length (B1 \\<circ> B2)\""], ["proof (prove)\nusing this:\n  length A2 = length (A1 \\<circ> A2)\n  mat (row_length B1) (length B2) (B1 \\<circ> B2)\n  mat (row_length (B1 \\<circ> B2)) (length (B1 \\<circ> B2)) (B1 \\<circ> B2)\n  row_length B1 = row_length (B1 \\<circ> B2)\n\ngoal (1 subgoal):\n 1. length B2 = length (B1 \\<circ> B2)", "by (metis  mat_empty_column_length unique_row_col(2))"], ["proof (state)\nthis:\n  length B2 = length (B1 \\<circ> B2)\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "from 6 10"], ["proof (chain)\npicking this:\n  row_length A1 = row_length (A1 \\<circ> A2)\n  row_length B1 = row_length (B1 \\<circ> B2)", "have 12:\n               \"(i < ((row_length A1)*(row_length B1))) \n                         = (i < (row_length  (A1\\<circ>A2))*(row_length (B1\\<circ>B2)))\""], ["proof (prove)\nusing this:\n  row_length A1 = row_length (A1 \\<circ> A2)\n  row_length B1 = row_length (B1 \\<circ> B2)\n\ngoal (1 subgoal):\n 1. (i < row_length A1 * row_length B1) =\n    (i < row_length (A1 \\<circ> A2) * row_length (B1 \\<circ> B2))", "by auto"], ["proof (state)\nthis:\n  (i < row_length A1 * row_length B1) =\n  (i < row_length (A1 \\<circ> A2) * row_length (B1 \\<circ> B2))\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "then"], ["proof (chain)\npicking this:\n  (i < row_length A1 * row_length B1) =\n  (i < row_length (A1 \\<circ> A2) * row_length (B1 \\<circ> B2))", "have 13:\" (i < (row_length  (A1\\<circ>A2))*(row_length (B1\\<circ>B2)))\""], ["proof (prove)\nusing this:\n  (i < row_length A1 * row_length B1) =\n  (i < row_length (A1 \\<circ> A2) * row_length (B1 \\<circ> B2))\n\ngoal (1 subgoal):\n 1. i < row_length (A1 \\<circ> A2) * row_length (B1 \\<circ> B2)", "using assms"], ["proof (prove)\nusing this:\n  (i < row_length A1 * row_length B1) =\n  (i < row_length (A1 \\<circ> A2) * row_length (B1 \\<circ> B2))\n  mat (row_length A1) (length A1) A1\n  mat (row_length A2) (length A2) A2\n  mat (row_length B1) (length B1) B1\n  mat (row_length B2) (length B2) B2\n  length A1 = row_length A2\n  length B1 = row_length B2\n  A1 \\<noteq> [] \\<and>\n  A2 \\<noteq> [] \\<and> B1 \\<noteq> [] \\<and> B2 \\<noteq> []\n  i < row_length A1 * row_length B1\n  j < length A2 * length B2\n\ngoal (1 subgoal):\n 1. i < row_length (A1 \\<circ> A2) * row_length (B1 \\<circ> B2)", "by auto"], ["proof (state)\nthis:\n  i < row_length (A1 \\<circ> A2) * row_length (B1 \\<circ> B2)\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "from 7 11"], ["proof (chain)\npicking this:\n  length A2 = length (A1 \\<circ> A2)\n  length B2 = length (B1 \\<circ> B2)", "have 14:   \n            \"(j < ((length A2)*(length B2))) \n                         = (j < (length  (A1\\<circ>A2))*(length (B1\\<circ>B2)))\""], ["proof (prove)\nusing this:\n  length A2 = length (A1 \\<circ> A2)\n  length B2 = length (B1 \\<circ> B2)\n\ngoal (1 subgoal):\n 1. (j < length A2 * length B2) =\n    (j < length (A1 \\<circ> A2) * length (B1 \\<circ> B2))", "by auto"], ["proof (state)\nthis:\n  (j < length A2 * length B2) =\n  (j < length (A1 \\<circ> A2) * length (B1 \\<circ> B2))\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "then"], ["proof (chain)\npicking this:\n  (j < length A2 * length B2) =\n  (j < length (A1 \\<circ> A2) * length (B1 \\<circ> B2))", "have 15:\"(j < (length  (A1\\<circ>A2))*(length (B1\\<circ>B2)))\""], ["proof (prove)\nusing this:\n  (j < length A2 * length B2) =\n  (j < length (A1 \\<circ> A2) * length (B1 \\<circ> B2))\n\ngoal (1 subgoal):\n 1. j < length (A1 \\<circ> A2) * length (B1 \\<circ> B2)", "using assms"], ["proof (prove)\nusing this:\n  (j < length A2 * length B2) =\n  (j < length (A1 \\<circ> A2) * length (B1 \\<circ> B2))\n  mat (row_length A1) (length A1) A1\n  mat (row_length A2) (length A2) A2\n  mat (row_length B1) (length B1) B1\n  mat (row_length B2) (length B2) B2\n  length A1 = row_length A2\n  length B1 = row_length B2\n  A1 \\<noteq> [] \\<and>\n  A2 \\<noteq> [] \\<and> B1 \\<noteq> [] \\<and> B2 \\<noteq> []\n  i < row_length A1 * row_length B1\n  j < length A2 * length B2\n\ngoal (1 subgoal):\n 1. j < length (A1 \\<circ> A2) * length (B1 \\<circ> B2)", "by auto"], ["proof (state)\nthis:\n  j < length (A1 \\<circ> A2) * length (B1 \\<circ> B2)\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "then"], ["proof (chain)\npicking this:\n  j < length (A1 \\<circ> A2) * length (B1 \\<circ> B2)", "have step_1:\"((A1\\<circ>A2)\\<otimes>(B1\\<circ>B2))!j!i\n            =  f ((A1\\<circ>A2)!(j div (length (B1\\<circ>B2)))\n                         !(i div (row_length (B1\\<circ>B2)))) \n                 ((B1\\<circ>B2)!(j mod length (B1\\<circ>B2))\n                         !(i mod (row_length (B1\\<circ>B2))))\""], ["proof (prove)\nusing this:\n  j < length (A1 \\<circ> A2) * length (B1 \\<circ> B2)\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    (A1 \\<circ> A2) ! (j div length (B1 \\<circ> B2)) !\n    (i div row_length (B1 \\<circ> B2)) *\n    (B1 \\<circ> B2) ! (j mod length (B1 \\<circ> B2)) !\n    (i mod row_length (B1 \\<circ> B2))", "using 5 9 13 15 effective_matrix_Tensor_elements"], ["proof (prove)\nusing this:\n  j < length (A1 \\<circ> A2) * length (B1 \\<circ> B2)\n  mat (row_length (A1 \\<circ> A2)) (length (A1 \\<circ> A2)) (A1 \\<circ> A2)\n  mat (row_length (B1 \\<circ> B2)) (length (B1 \\<circ> B2)) (B1 \\<circ> B2)\n  i < row_length (A1 \\<circ> A2) * row_length (B1 \\<circ> B2)\n  j < length (A1 \\<circ> A2) * length (B1 \\<circ> B2)\n  \\<lbrakk>?i < row_length ?M1.0 * row_length ?M2.0;\n   ?j < length ?M1.0 * length ?M2.0;\n   mat (row_length ?M1.0) (length ?M1.0) ?M1.0;\n   mat (row_length ?M2.0) (length ?M2.0) ?M2.0\\<rbrakk>\n  \\<Longrightarrow> (?M1.0 \\<otimes> ?M2.0) ! ?j ! ?i =\n                    ?M1.0 ! (?j div length ?M2.0) !\n                    (?i div row_length ?M2.0) *\n                    ?M2.0 ! (?j mod length ?M2.0) !\n                    (?i mod row_length ?M2.0)\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    (A1 \\<circ> A2) ! (j div length (B1 \\<circ> B2)) !\n    (i div row_length (B1 \\<circ> B2)) *\n    (B1 \\<circ> B2) ! (j mod length (B1 \\<circ> B2)) !\n    (i mod row_length (B1 \\<circ> B2))", "by auto"], ["proof (state)\nthis:\n  (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n  (A1 \\<circ> A2) ! (j div length (B1 \\<circ> B2)) !\n  (i div row_length (B1 \\<circ> B2)) *\n  (B1 \\<circ> B2) ! (j mod length (B1 \\<circ> B2)) !\n  (i mod row_length (B1 \\<circ> B2))\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "then"], ["proof (chain)\npicking this:\n  (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n  (A1 \\<circ> A2) ! (j div length (B1 \\<circ> B2)) !\n  (i div row_length (B1 \\<circ> B2)) *\n  (B1 \\<circ> B2) ! (j mod length (B1 \\<circ> B2)) !\n  (i mod row_length (B1 \\<circ> B2))", "have \"((A1\\<circ>A2)\\<otimes>(B1\\<circ>B2))!j!i\n            =  f ((A1\\<circ>A2)!(j div (length B2))!(i div (row_length B1))) \n                 ((B1\\<circ>B2)!(j mod length B2)!(i mod (row_length B1)))\""], ["proof (prove)\nusing this:\n  (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n  (A1 \\<circ> A2) ! (j div length (B1 \\<circ> B2)) !\n  (i div row_length (B1 \\<circ> B2)) *\n  (B1 \\<circ> B2) ! (j mod length (B1 \\<circ> B2)) !\n  (i mod row_length (B1 \\<circ> B2))\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    (A1 \\<circ> A2) ! (j div length B2) ! (i div row_length B1) *\n    (B1 \\<circ> B2) ! (j mod length B2) ! (i mod row_length B1)", "using 10 11"], ["proof (prove)\nusing this:\n  (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n  (A1 \\<circ> A2) ! (j div length (B1 \\<circ> B2)) !\n  (i div row_length (B1 \\<circ> B2)) *\n  (B1 \\<circ> B2) ! (j mod length (B1 \\<circ> B2)) !\n  (i mod row_length (B1 \\<circ> B2))\n  row_length B1 = row_length (B1 \\<circ> B2)\n  length B2 = length (B1 \\<circ> B2)\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    (A1 \\<circ> A2) ! (j div length B2) ! (i div row_length B1) *\n    (B1 \\<circ> B2) ! (j mod length B2) ! (i mod row_length B1)", "by auto"], ["proof (state)\nthis:\n  (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n  (A1 \\<circ> A2) ! (j div length B2) ! (i div row_length B1) *\n  (B1 \\<circ> B2) ! (j mod length B2) ! (i mod row_length B1)\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "moreover"], ["proof (state)\nthis:\n  (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n  (A1 \\<circ> A2) ! (j div length B2) ! (i div row_length B1) *\n  (B1 \\<circ> B2) ! (j mod length B2) ! (i mod row_length B1)\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "have \" ((A1\\<circ>A2)!(j div (length B2))!(i div (row_length B1))) \n               = (scalar_product (row A1 (i div (row_length B1)) ) (col A2 (j div (length B2)) ))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2) ! (j div length B2) ! (i div row_length B1) =\n    scalar_product (row A1 (i div row_length B1)) (col A2 (j div length B2))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2) ! (j div length B2) ! (i div row_length B1) =\n    scalar_product (row A1 (i div row_length B1)) (col A2 (j div length B2))", "have \"j div (length B2) < (length A2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j div length B2 < length A2", "using div_left_ineq assms"], ["proof (prove)\nusing this:\n  ?x < ?y * ?z \\<Longrightarrow> ?x div ?z < ?y\n  mat (row_length A1) (length A1) A1\n  mat (row_length A2) (length A2) A2\n  mat (row_length B1) (length B1) B1\n  mat (row_length B2) (length B2) B2\n  length A1 = row_length A2\n  length B1 = row_length B2\n  A1 \\<noteq> [] \\<and>\n  A2 \\<noteq> [] \\<and> B1 \\<noteq> [] \\<and> B2 \\<noteq> []\n  i < row_length A1 * row_length B1\n  j < length A2 * length B2\n\ngoal (1 subgoal):\n 1. j div length B2 < length A2", "by auto"], ["proof (state)\nthis:\n  j div length B2 < length A2\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2) ! (j div length B2) ! (i div row_length B1) =\n    scalar_product (row A1 (i div row_length B1)) (col A2 (j div length B2))", "moreover"], ["proof (state)\nthis:\n  j div length B2 < length A2\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2) ! (j div length B2) ! (i div row_length B1) =\n    scalar_product (row A1 (i div row_length B1)) (col A2 (j div length B2))", "have \"i div (row_length B1) < (row_length A1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i div row_length B1 < row_length A1", "using assms div_left_ineq"], ["proof (prove)\nusing this:\n  mat (row_length A1) (length A1) A1\n  mat (row_length A2) (length A2) A2\n  mat (row_length B1) (length B1) B1\n  mat (row_length B2) (length B2) B2\n  length A1 = row_length A2\n  length B1 = row_length B2\n  A1 \\<noteq> [] \\<and>\n  A2 \\<noteq> [] \\<and> B1 \\<noteq> [] \\<and> B2 \\<noteq> []\n  i < row_length A1 * row_length B1\n  j < length A2 * length B2\n  ?x < ?y * ?z \\<Longrightarrow> ?x div ?z < ?y\n\ngoal (1 subgoal):\n 1. i div row_length B1 < row_length A1", "by auto"], ["proof (state)\nthis:\n  i div row_length B1 < row_length A1\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2) ! (j div length B2) ! (i div row_length B1) =\n    scalar_product (row A1 (i div row_length B1)) (col A2 (j div length B2))", "moreover"], ["proof (state)\nthis:\n  i div row_length B1 < row_length A1\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2) ! (j div length B2) ! (i div row_length B1) =\n    scalar_product (row A1 (i div row_length B1)) (col A2 (j div length B2))", "have \"mat (length A1) (length A2) A2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (length A1) (length A2) A2", "using wf2 matchAA"], ["proof (prove)\nusing this:\n  mat (row_length A2) (length A2) A2\n  length A1 = row_length A2\n\ngoal (1 subgoal):\n 1. mat (length A1) (length A2) A2", "by auto"], ["proof (state)\nthis:\n  mat (length A1) (length A2) A2\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2) ! (j div length B2) ! (i div row_length B1) =\n    scalar_product (row A1 (i div row_length B1)) (col A2 (j div length B2))", "ultimately"], ["proof (chain)\npicking this:\n  j div length B2 < length A2\n  i div row_length B1 < row_length A1\n  mat (length A1) (length A2) A2", "show ?thesis"], ["proof (prove)\nusing this:\n  j div length B2 < length A2\n  i div row_length B1 < row_length A1\n  mat (length A1) (length A2) A2\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2) ! (j div length B2) ! (i div row_length B1) =\n    scalar_product (row A1 (i div row_length B1)) (col A2 (j div length B2))", "using wf1  non_Nil matrix_mult_index"], ["proof (prove)\nusing this:\n  j div length B2 < length A2\n  i div row_length B1 < row_length A1\n  mat (length A1) (length A2) A2\n  mat (row_length A1) (length A1) A1\n  A1 \\<noteq> [] \\<and>\n  A2 \\<noteq> [] \\<and> B1 \\<noteq> [] \\<and> B2 \\<noteq> []\n  \\<lbrakk>?m1.0 \\<noteq> []; mat ?nr ?n ?m1.0; mat ?n ?nc ?m2.0; ?i < ?nr;\n   ?j < ?nc\\<rbrakk>\n  \\<Longrightarrow> (?m1.0 \\<circ> ?m2.0) ! ?j ! ?i =\n                    scalar_product (row ?m1.0 ?i) (col ?m2.0 ?j)\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2) ! (j div length B2) ! (i div row_length B1) =\n    scalar_product (row A1 (i div row_length B1)) (col A2 (j div length B2))", "by blast"], ["proof (state)\nthis:\n  (A1 \\<circ> A2) ! (j div length B2) ! (i div row_length B1) =\n  scalar_product (row A1 (i div row_length B1)) (col A2 (j div length B2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (A1 \\<circ> A2) ! (j div length B2) ! (i div row_length B1) =\n  scalar_product (row A1 (i div row_length B1)) (col A2 (j div length B2))\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "moreover"], ["proof (state)\nthis:\n  (A1 \\<circ> A2) ! (j div length B2) ! (i div row_length B1) =\n  scalar_product (row A1 (i div row_length B1)) (col A2 (j div length B2))\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "have \" ((B1\\<circ>B2)!(j mod (length B2))!(i mod (row_length B1))) \n               = (scalar_product \n                                 (row B1 (i mod (row_length B1)) ) \n                                 (col B2 (j mod (length B2))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (B1 \\<circ> B2) ! (j mod length B2) ! (i mod row_length B1) =\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (B1 \\<circ> B2) ! (j mod length B2) ! (i mod row_length B1) =\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "have \"j <(length A2)*(length B2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < length A2 * length B2", "using assms"], ["proof (prove)\nusing this:\n  mat (row_length A1) (length A1) A1\n  mat (row_length A2) (length A2) A2\n  mat (row_length B1) (length B1) B1\n  mat (row_length B2) (length B2) B2\n  length A1 = row_length A2\n  length B1 = row_length B2\n  A1 \\<noteq> [] \\<and>\n  A2 \\<noteq> [] \\<and> B1 \\<noteq> [] \\<and> B2 \\<noteq> []\n  i < row_length A1 * row_length B1\n  j < length A2 * length B2\n\ngoal (1 subgoal):\n 1. j < length A2 * length B2", "by auto"], ["proof (state)\nthis:\n  j < length A2 * length B2\n\ngoal (1 subgoal):\n 1. (B1 \\<circ> B2) ! (j mod length B2) ! (i mod row_length B1) =\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "then"], ["proof (chain)\npicking this:\n  j < length A2 * length B2", "have \"j mod (length B2) < (length B2)\""], ["proof (prove)\nusing this:\n  j < length A2 * length B2\n\ngoal (1 subgoal):\n 1. j mod length B2 < length B2", "by (metis calculation less_nat_zero_code mod_less_divisor mult_is_0 neq0_conv)"], ["proof (state)\nthis:\n  j mod length B2 < length B2\n\ngoal (1 subgoal):\n 1. (B1 \\<circ> B2) ! (j mod length B2) ! (i mod row_length B1) =\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "moreover"], ["proof (state)\nthis:\n  j mod length B2 < length B2\n\ngoal (1 subgoal):\n 1. (B1 \\<circ> B2) ! (j mod length B2) ! (i mod row_length B1) =\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "have \"i mod (row_length B1) < (row_length B1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i mod row_length B1 < row_length B1", "by (metis assms(8) less_nat_zero_code mod_less_divisor mult_is_0 neq0_conv)"], ["proof (state)\nthis:\n  i mod row_length B1 < row_length B1\n\ngoal (1 subgoal):\n 1. (B1 \\<circ> B2) ! (j mod length B2) ! (i mod row_length B1) =\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "moreover"], ["proof (state)\nthis:\n  i mod row_length B1 < row_length B1\n\ngoal (1 subgoal):\n 1. (B1 \\<circ> B2) ! (j mod length B2) ! (i mod row_length B1) =\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "have \"mat (length B1) (length B2) B2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (length B1) (length B2) B2", "using wf4 matchBB"], ["proof (prove)\nusing this:\n  mat (row_length B2) (length B2) B2\n  length B1 = row_length B2\n\ngoal (1 subgoal):\n 1. mat (length B1) (length B2) B2", "by auto"], ["proof (state)\nthis:\n  mat (length B1) (length B2) B2\n\ngoal (1 subgoal):\n 1. (B1 \\<circ> B2) ! (j mod length B2) ! (i mod row_length B1) =\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "ultimately"], ["proof (chain)\npicking this:\n  j mod length B2 < length B2\n  i mod row_length B1 < row_length B1\n  mat (length B1) (length B2) B2", "show ?thesis"], ["proof (prove)\nusing this:\n  j mod length B2 < length B2\n  i mod row_length B1 < row_length B1\n  mat (length B1) (length B2) B2\n\ngoal (1 subgoal):\n 1. (B1 \\<circ> B2) ! (j mod length B2) ! (i mod row_length B1) =\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "using wf3 non_Nil matrix_mult_index"], ["proof (prove)\nusing this:\n  j mod length B2 < length B2\n  i mod row_length B1 < row_length B1\n  mat (length B1) (length B2) B2\n  mat (row_length B1) (length B1) B1\n  A1 \\<noteq> [] \\<and>\n  A2 \\<noteq> [] \\<and> B1 \\<noteq> [] \\<and> B2 \\<noteq> []\n  \\<lbrakk>?m1.0 \\<noteq> []; mat ?nr ?n ?m1.0; mat ?n ?nc ?m2.0; ?i < ?nr;\n   ?j < ?nc\\<rbrakk>\n  \\<Longrightarrow> (?m1.0 \\<circ> ?m2.0) ! ?j ! ?i =\n                    scalar_product (row ?m1.0 ?i) (col ?m2.0 ?j)\n\ngoal (1 subgoal):\n 1. (B1 \\<circ> B2) ! (j mod length B2) ! (i mod row_length B1) =\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "by blast"], ["proof (state)\nthis:\n  (B1 \\<circ> B2) ! (j mod length B2) ! (i mod row_length B1) =\n  scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (B1 \\<circ> B2) ! (j mod length B2) ! (i mod row_length B1) =\n  scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "ultimately"], ["proof (chain)\npicking this:\n  (i < row_length A1 * row_length B1) =\n  (i < row_length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2))\n  (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n  (A1 \\<circ> A2) ! (j div length B2) ! (i div row_length B1) *\n  (B1 \\<circ> B2) ! (j mod length B2) ! (i mod row_length B1)\n  (A1 \\<circ> A2) ! (j div length B2) ! (i div row_length B1) =\n  scalar_product (row A1 (i div row_length B1)) (col A2 (j div length B2))\n  (B1 \\<circ> B2) ! (j mod length B2) ! (i mod row_length B1) =\n  scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "show ?thesis"], ["proof (prove)\nusing this:\n  (i < row_length A1 * row_length B1) =\n  (i < row_length (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2))\n  (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n  (A1 \\<circ> A2) ! (j div length B2) ! (i div row_length B1) *\n  (B1 \\<circ> B2) ! (j mod length B2) ! (i mod row_length B1)\n  (A1 \\<circ> A2) ! (j div length B2) ! (i div row_length B1) =\n  scalar_product (row A1 (i div row_length B1)) (col A2 (j div length B2))\n  (B1 \\<circ> B2) ! (j mod length B2) ! (i mod row_length B1) =\n  scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))\n\ngoal (1 subgoal):\n 1. (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "by auto"], ["proof (state)\nthis:\n  (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n  scalar_product (row A1 (i div row_length B1)) (col A2 (j div length B2)) *\n  scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma effective_elements_matrix_distribution1:\n \"matrix_compose_cond A1 A2 B1 B2 i j \\<Longrightarrow>\n ((matrix_mult A1  A2)\\<otimes>(matrix_mult B1  B2))!j!i\n  =  f (scalar_product (row A1 (i div (row_length B1))) (col A2  (j div (length B2))))\n       (scalar_product (row B1 (i mod (row_length B1))) (col B2 (j mod (length B2))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_compose_cond A1 A2 B1 B2 i j \\<Longrightarrow>\n    (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "using  elements_matrix_distribution_1 matrix_compose_cond_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>mat (row_length ?A1.0) (length ?A1.0) ?A1.0;\n   mat (row_length ?A2.0) (length ?A2.0) ?A2.0;\n   mat (row_length ?B1.0) (length ?B1.0) ?B1.0;\n   mat (row_length ?B2.0) (length ?B2.0) ?B2.0;\n   length ?A1.0 = row_length ?A2.0; length ?B1.0 = row_length ?B2.0;\n   ?A1.0 \\<noteq> [] \\<and>\n   ?A2.0 \\<noteq> [] \\<and> ?B1.0 \\<noteq> [] \\<and> ?B2.0 \\<noteq> [];\n   ?i < row_length ?A1.0 * row_length ?B1.0;\n   ?j < length ?A2.0 * length ?B2.0\\<rbrakk>\n  \\<Longrightarrow> (?A1.0 \\<circ> ?A2.0 \\<otimes> ?B1.0 \\<circ> ?B2.0) !\n                    ?j !\n                    ?i =\n                    scalar_product (row ?A1.0 (?i div row_length ?B1.0))\n                     (col ?A2.0 (?j div length ?B2.0)) *\n                    scalar_product (row ?B1.0 (?i mod row_length ?B1.0))\n                     (col ?B2.0 (?j mod length ?B2.0))\n  matrix_compose_cond ?A1.0 ?A2.0 ?B1.0 ?B2.0 ?i ?j \\<equiv>\n  mat (row_length ?A1.0) (length ?A1.0) ?A1.0 \\<and>\n  mat (row_length ?A2.0) (length ?A2.0) ?A2.0 \\<and>\n  mat (row_length ?B1.0) (length ?B1.0) ?B1.0 \\<and>\n  mat (row_length ?B2.0) (length ?B2.0) ?B2.0 \\<and>\n  length ?A1.0 = row_length ?A2.0 \\<and>\n  length ?B1.0 = row_length ?B2.0 \\<and>\n  ?A1.0 \\<noteq> [] \\<and>\n  ?A2.0 \\<noteq> [] \\<and>\n  ?B1.0 \\<noteq> [] \\<and>\n  ?B2.0 \\<noteq> [] \\<and>\n  ?i < row_length ?A1.0 * row_length ?B1.0 \\<and>\n  ?j < length ?A2.0 * length ?B2.0\n\ngoal (1 subgoal):\n 1. matrix_compose_cond A1 A2 B1 B2 i j \\<Longrightarrow>\n    (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "by auto"], ["", "lemma matrix_match_condn_1:\n\"matrix_match A1 A2 B1 B2 \n      \\<and>((i<(row_length A1)*(row_length B1))\n      \\<and>(j<(length A2)*(length B2)))\n       \\<Longrightarrow>  ((matrix_mult A1  A2)\\<otimes>(matrix_mult B1  B2))!j!i\n  =  f\n       (scalar_product \n                 (row A1 (i div (row_length B1))) \n                 (col A2  (j div (length B2))))\n       (scalar_product \n                 (row B1 (i mod (row_length B1))) \n                 (col B2 (j mod (length B2))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_match A1 A2 B1 B2 \\<and>\n    i < row_length A1 * row_length B1 \\<and>\n    j < length A2 * length B2 \\<Longrightarrow>\n    (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "using elements_matrix_distribution_1"], ["proof (prove)\nusing this:\n  \\<lbrakk>mat (row_length ?A1.0) (length ?A1.0) ?A1.0;\n   mat (row_length ?A2.0) (length ?A2.0) ?A2.0;\n   mat (row_length ?B1.0) (length ?B1.0) ?B1.0;\n   mat (row_length ?B2.0) (length ?B2.0) ?B2.0;\n   length ?A1.0 = row_length ?A2.0; length ?B1.0 = row_length ?B2.0;\n   ?A1.0 \\<noteq> [] \\<and>\n   ?A2.0 \\<noteq> [] \\<and> ?B1.0 \\<noteq> [] \\<and> ?B2.0 \\<noteq> [];\n   ?i < row_length ?A1.0 * row_length ?B1.0;\n   ?j < length ?A2.0 * length ?B2.0\\<rbrakk>\n  \\<Longrightarrow> (?A1.0 \\<circ> ?A2.0 \\<otimes> ?B1.0 \\<circ> ?B2.0) !\n                    ?j !\n                    ?i =\n                    scalar_product (row ?A1.0 (?i div row_length ?B1.0))\n                     (col ?A2.0 (?j div length ?B2.0)) *\n                    scalar_product (row ?B1.0 (?i mod row_length ?B1.0))\n                     (col ?B2.0 (?j mod length ?B2.0))\n\ngoal (1 subgoal):\n 1. matrix_match A1 A2 B1 B2 \\<and>\n    i < row_length A1 * row_length B1 \\<and>\n    j < length A2 * length B2 \\<Longrightarrow>\n    (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "unfolding matrix_match_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>mat (row_length ?A1.0) (length ?A1.0) ?A1.0;\n   mat (row_length ?A2.0) (length ?A2.0) ?A2.0;\n   mat (row_length ?B1.0) (length ?B1.0) ?B1.0;\n   mat (row_length ?B2.0) (length ?B2.0) ?B2.0;\n   length ?A1.0 = row_length ?A2.0; length ?B1.0 = row_length ?B2.0;\n   ?A1.0 \\<noteq> [] \\<and>\n   ?A2.0 \\<noteq> [] \\<and> ?B1.0 \\<noteq> [] \\<and> ?B2.0 \\<noteq> [];\n   ?i < row_length ?A1.0 * row_length ?B1.0;\n   ?j < length ?A2.0 * length ?B2.0\\<rbrakk>\n  \\<Longrightarrow> (?A1.0 \\<circ> ?A2.0 \\<otimes> ?B1.0 \\<circ> ?B2.0) !\n                    ?j !\n                    ?i =\n                    scalar_product (row ?A1.0 (?i div row_length ?B1.0))\n                     (col ?A2.0 (?j div length ?B2.0)) *\n                    scalar_product (row ?B1.0 (?i mod row_length ?B1.0))\n                     (col ?B2.0 (?j mod length ?B2.0))\n\ngoal (1 subgoal):\n 1. (mat (row_length A1) (length A1) A1 \\<and>\n     mat (row_length A2) (length A2) A2 \\<and>\n     mat (row_length B1) (length B1) B1 \\<and>\n     mat (row_length B2) (length B2) B2 \\<and>\n     length A1 = row_length A2 \\<and>\n     length B1 = row_length B2 \\<and>\n     A1 \\<noteq> [] \\<and>\n     A2 \\<noteq> [] \\<and> B1 \\<noteq> [] \\<and> B2 \\<noteq> []) \\<and>\n    i < row_length A1 * row_length B1 \\<and>\n    j < length A2 * length B2 \\<Longrightarrow>\n    (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n    scalar_product (row A1 (i div row_length B1))\n     (col A2 (j div length B2)) *\n    scalar_product (row B1 (i mod row_length B1)) (col B2 (j mod length B2))", "by auto"], ["", "lemma effective_matrix_match_condn_1: \n assumes \"(matrix_match A1 A2 B1 B2) \"\n shows \"\\<forall>i j.((i<(row_length A1)*(row_length B1))\n             \\<and>(j<(length A2)*(length B2))\n              \\<longrightarrow>   ((A1 \\<circ>  A2)\\<otimes>(B1 \\<circ> B2))!j!i\n                        =  f \n                            (scalar_product \n                                  (row A1 (i div (row_length B1))) \n                                  (col A2  (j div (length B2))))\n                            (scalar_product \n                                  (row B1 (i mod (row_length B1))) \n                                  (col B2 (j mod (length B2)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n       scalar_product (row A1 (i div row_length B1))\n        (col A2 (j div length B2)) *\n       scalar_product (row B1 (i mod row_length B1))\n        (col B2 (j mod length B2))", "using assms matrix_match_condn_1"], ["proof (prove)\nusing this:\n  matrix_match A1 A2 B1 B2\n  matrix_match ?A1.0 ?A2.0 ?B1.0 ?B2.0 \\<and>\n  ?i < row_length ?A1.0 * row_length ?B1.0 \\<and>\n  ?j < length ?A2.0 * length ?B2.0 \\<Longrightarrow>\n  (?A1.0 \\<circ> ?A2.0 \\<otimes> ?B1.0 \\<circ> ?B2.0) ! ?j ! ?i =\n  scalar_product (row ?A1.0 (?i div row_length ?B1.0))\n   (col ?A2.0 (?j div length ?B2.0)) *\n  scalar_product (row ?B1.0 (?i mod row_length ?B1.0))\n   (col ?B2.0 (?j mod length ?B2.0))\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n       scalar_product (row A1 (i div row_length B1))\n        (col A2 (j div length B2)) *\n       scalar_product (row B1 (i mod row_length B1))\n        (col B2 (j mod length B2))", "unfolding matrix_match_def"], ["proof (prove)\nusing this:\n  mat (row_length A1) (length A1) A1 \\<and>\n  mat (row_length A2) (length A2) A2 \\<and>\n  mat (row_length B1) (length B1) B1 \\<and>\n  mat (row_length B2) (length B2) B2 \\<and>\n  length A1 = row_length A2 \\<and>\n  length B1 = row_length B2 \\<and>\n  A1 \\<noteq> [] \\<and>\n  A2 \\<noteq> [] \\<and> B1 \\<noteq> [] \\<and> B2 \\<noteq> []\n  (mat (row_length ?A1.0) (length ?A1.0) ?A1.0 \\<and>\n   mat (row_length ?A2.0) (length ?A2.0) ?A2.0 \\<and>\n   mat (row_length ?B1.0) (length ?B1.0) ?B1.0 \\<and>\n   mat (row_length ?B2.0) (length ?B2.0) ?B2.0 \\<and>\n   length ?A1.0 = row_length ?A2.0 \\<and>\n   length ?B1.0 = row_length ?B2.0 \\<and>\n   ?A1.0 \\<noteq> [] \\<and>\n   ?A2.0 \\<noteq> [] \\<and>\n   ?B1.0 \\<noteq> [] \\<and> ?B2.0 \\<noteq> []) \\<and>\n  ?i < row_length ?A1.0 * row_length ?B1.0 \\<and>\n  ?j < length ?A2.0 * length ?B2.0 \\<Longrightarrow>\n  (?A1.0 \\<circ> ?A2.0 \\<otimes> ?B1.0 \\<circ> ?B2.0) ! ?j ! ?i =\n  scalar_product (row ?A1.0 (?i div row_length ?B1.0))\n   (col ?A2.0 (?j div length ?B2.0)) *\n  scalar_product (row ?B1.0 (?i mod row_length ?B1.0))\n   (col ?B2.0 (?j mod length ?B2.0))\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n       scalar_product (row A1 (i div row_length B1))\n        (col A2 (j div length B2)) *\n       scalar_product (row B1 (i mod row_length B1))\n        (col B2 (j mod length B2))", "by auto"], ["", "theorem elements_matrix_distribution2:\nfixes A1 A2 B1 B2 i j\nassumes wf1:\"mat (row_length A1) (length A1) A1\"\n   and wf2:\"mat (row_length A2) (length A2) A2\"\n   and wf3:\"mat (row_length B1) (length B1) B1\"\n   and wf4:\"mat (row_length B2) (length B2) B2\"\n   and matchAA:\"length A1 = row_length A2\"\n   and matchBB:\"length B1 = row_length B2\"\n   and non_Nil:\"(A1 \\<noteq> [])\\<and>(A2 \\<noteq> [])\\<and>(B1 \\<noteq> [])\\<and>(B2 \\<noteq> [])\"    \n         and i:\"i<(row_length A1)*(row_length B1)\" and j:\"j< (length A2)*(length B2)\" \nshows\n\"((A1 \\<otimes> B1)\\<circ>(A2 \\<otimes> B2))!j!i\n  =  scalar_product \n          (vec_vec_Tensor \n                    (row A1 (i div row_length B1)) \n                    (row B1 (i mod row_length B1))) \n          (vec_vec_Tensor \n                    (col A2 (j div length B2)) \n                    (col B2 (j mod length B2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i =\n    scalar_product\n     (vec_vec_Tensor (row A1 (i div row_length B1))\n       (row B1 (i mod row_length B1)))\n     (vec_vec_Tensor (col A2 (j div length B2)) (col B2 (j mod length B2)))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i =\n    scalar_product\n     (vec_vec_Tensor (row A1 (i div row_length B1))\n       (row B1 (i mod row_length B1)))\n     (vec_vec_Tensor (col A2 (j div length B2)) (col B2 (j mod length B2)))", "have 1:\"mat \n              ((row_length A1)*(row_length B1)) \n              ((length A1)*(length B1)) \n                                   (A1 \\<otimes> B1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length A1 * row_length B1) (length A1 * length B1)\n     (A1 \\<otimes> B1)", "using wf1 wf3 well_defined_Tensor"], ["proof (prove)\nusing this:\n  mat (row_length A1) (length A1) A1\n  mat (row_length B1) (length B1) B1\n  mat (row_length ?M1.0) (length ?M1.0) ?M1.0 \\<and>\n  mat (row_length ?M2.0) (length ?M2.0) ?M2.0 \\<Longrightarrow>\n  mat (row_length ?M1.0 * row_length ?M2.0) (length ?M1.0 * length ?M2.0)\n   (?M1.0 \\<otimes> ?M2.0)\n\ngoal (1 subgoal):\n 1. mat (row_length A1 * row_length B1) (length A1 * length B1)\n     (A1 \\<otimes> B1)", "by auto"], ["proof (state)\nthis:\n  mat (row_length A1 * row_length B1) (length A1 * length B1)\n   (A1 \\<otimes> B1)\n\ngoal (1 subgoal):\n 1. ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i =\n    scalar_product\n     (vec_vec_Tensor (row A1 (i div row_length B1))\n       (row B1 (i mod row_length B1)))\n     (vec_vec_Tensor (col A2 (j div length B2)) (col B2 (j mod length B2)))", "moreover"], ["proof (state)\nthis:\n  mat (row_length A1 * row_length B1) (length A1 * length B1)\n   (A1 \\<otimes> B1)\n\ngoal (1 subgoal):\n 1. ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i =\n    scalar_product\n     (vec_vec_Tensor (row A1 (i div row_length B1))\n       (row B1 (i mod row_length B1)))\n     (vec_vec_Tensor (col A2 (j div length B2)) (col B2 (j mod length B2)))", "have 2:\"mat \n                   ((row_length A2)*(row_length B2)) \n                   ((length A2)*(length B2)) \n                                   (A2 \\<otimes> B2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length A2 * row_length B2) (length A2 * length B2)\n     (A2 \\<otimes> B2)", "using wf2 wf4 well_defined_Tensor"], ["proof (prove)\nusing this:\n  mat (row_length A2) (length A2) A2\n  mat (row_length B2) (length B2) B2\n  mat (row_length ?M1.0) (length ?M1.0) ?M1.0 \\<and>\n  mat (row_length ?M2.0) (length ?M2.0) ?M2.0 \\<Longrightarrow>\n  mat (row_length ?M1.0 * row_length ?M2.0) (length ?M1.0 * length ?M2.0)\n   (?M1.0 \\<otimes> ?M2.0)\n\ngoal (1 subgoal):\n 1. mat (row_length A2 * row_length B2) (length A2 * length B2)\n     (A2 \\<otimes> B2)", "by auto"], ["proof (state)\nthis:\n  mat (row_length A2 * row_length B2) (length A2 * length B2)\n   (A2 \\<otimes> B2)\n\ngoal (1 subgoal):\n 1. ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i =\n    scalar_product\n     (vec_vec_Tensor (row A1 (i div row_length B1))\n       (row B1 (i mod row_length B1)))\n     (vec_vec_Tensor (col A2 (j div length B2)) (col B2 (j mod length B2)))", "moreover"], ["proof (state)\nthis:\n  mat (row_length A2 * row_length B2) (length A2 * length B2)\n   (A2 \\<otimes> B2)\n\ngoal (1 subgoal):\n 1. ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i =\n    scalar_product\n     (vec_vec_Tensor (row A1 (i div row_length B1))\n       (row B1 (i mod row_length B1)))\n     (vec_vec_Tensor (col A2 (j div length B2)) (col B2 (j mod length B2)))", "have 3:\"((length A1)*(length B1)) \n                           = ((row_length A2)*(row_length B2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length A1 * length B1 = row_length A2 * row_length B2", "using matchAA matchBB"], ["proof (prove)\nusing this:\n  length A1 = row_length A2\n  length B1 = row_length B2\n\ngoal (1 subgoal):\n 1. length A1 * length B1 = row_length A2 * row_length B2", "by auto"], ["proof (state)\nthis:\n  length A1 * length B1 = row_length A2 * row_length B2\n\ngoal (1 subgoal):\n 1. ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i =\n    scalar_product\n     (vec_vec_Tensor (row A1 (i div row_length B1))\n       (row B1 (i mod row_length B1)))\n     (vec_vec_Tensor (col A2 (j div length B2)) (col B2 (j mod length B2)))", "ultimately"], ["proof (chain)\npicking this:\n  mat (row_length A1 * row_length B1) (length A1 * length B1)\n   (A1 \\<otimes> B1)\n  mat (row_length A2 * row_length B2) (length A2 * length B2)\n   (A2 \\<otimes> B2)\n  length A1 * length B1 = row_length A2 * row_length B2", "have 4:\"((A1\\<otimes>B1)\\<circ>(A2\\<otimes>B2))!j!i \n                        = scalar_product (row (A1 \\<otimes> B1) i) (col (A2 \\<otimes> B2) j)\""], ["proof (prove)\nusing this:\n  mat (row_length A1 * row_length B1) (length A1 * length B1)\n   (A1 \\<otimes> B1)\n  mat (row_length A2 * row_length B2) (length A2 * length B2)\n   (A2 \\<otimes> B2)\n  length A1 * length B1 = row_length A2 * row_length B2\n\ngoal (1 subgoal):\n 1. ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i =\n    scalar_product (row (A1 \\<otimes> B1) i) (col (A2 \\<otimes> B2) j)", "using i j matrix_mult_index non_Nil mat_mult_index \n                    row_length_mat scalar_product_def"], ["proof (prove)\nusing this:\n  mat (row_length A1 * row_length B1) (length A1 * length B1)\n   (A1 \\<otimes> B1)\n  mat (row_length A2 * row_length B2) (length A2 * length B2)\n   (A2 \\<otimes> B2)\n  length A1 * length B1 = row_length A2 * row_length B2\n  i < row_length A1 * row_length B1\n  j < length A2 * length B2\n  \\<lbrakk>?m1.0 \\<noteq> []; mat ?nr ?n ?m1.0; mat ?n ?nc ?m2.0; ?i < ?nr;\n   ?j < ?nc\\<rbrakk>\n  \\<Longrightarrow> (?m1.0 \\<circ> ?m2.0) ! ?j ! ?i =\n                    scalar_product (row ?m1.0 ?i) (col ?m2.0 ?j)\n  A1 \\<noteq> [] \\<and>\n  A2 \\<noteq> [] \\<and> B1 \\<noteq> [] \\<and> B2 \\<noteq> []\n  \\<lbrakk>mat ?nr ?n ?m1.0; mat ?n ?nc ?m2.0; ?i < ?nr; ?j < ?nc\\<rbrakk>\n  \\<Longrightarrow> mat_multI ?ze ?pl ?ti ?nr ?m1.0 ?m2.0 ! ?j ! ?i =\n                    scalar_prodI ?ze ?pl ?ti (row ?m1.0 ?i) (col ?m2.0 ?j)\n  row_length (?m1.0 \\<otimes> ?m2.0) = row_length ?m1.0 * row_length ?m2.0\n  scalar_product ?v ?w = scalar_prodI zer (+) (*) ?v ?w\n\ngoal (1 subgoal):\n 1. ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i =\n    scalar_product (row (A1 \\<otimes> B1) i) (col (A2 \\<otimes> B2) j)", "by auto"], ["proof (state)\nthis:\n  ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i =\n  scalar_product (row (A1 \\<otimes> B1) i) (col (A2 \\<otimes> B2) j)\n\ngoal (1 subgoal):\n 1. ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i =\n    scalar_product\n     (vec_vec_Tensor (row A1 (i div row_length B1))\n       (row B1 (i mod row_length B1)))\n     (vec_vec_Tensor (col A2 (j div length B2)) (col B2 (j mod length B2)))", "moreover"], ["proof (state)\nthis:\n  ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i =\n  scalar_product (row (A1 \\<otimes> B1) i) (col (A2 \\<otimes> B2) j)\n\ngoal (1 subgoal):\n 1. ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i =\n    scalar_product\n     (vec_vec_Tensor (row A1 (i div row_length B1))\n       (row B1 (i mod row_length B1)))\n     (vec_vec_Tensor (col A2 (j div length B2)) (col B2 (j mod length B2)))", "have \"(row (A1 \\<otimes> B1) i)\n                  =  vec_vec_Tensor \n                           (row A1 (i div row_length B1)) \n                           (row B1 (i mod row_length B1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row (A1 \\<otimes> B1) i =\n    vec_vec_Tensor (row A1 (i div row_length B1))\n     (row B1 (i mod row_length B1))", "using  wf1 wf3 i effective_row_formula"], ["proof (prove)\nusing this:\n  mat (row_length A1) (length A1) A1\n  mat (row_length B1) (length B1) B1\n  i < row_length A1 * row_length B1\n  \\<lbrakk>?i < row_length ?M1.0 * row_length ?M2.0;\n   mat (row_length ?M1.0) (length ?M1.0) ?M1.0;\n   mat (row_length ?M2.0) (length ?M2.0) ?M2.0\\<rbrakk>\n  \\<Longrightarrow> row (?M1.0 \\<otimes> ?M2.0) ?i =\n                    vec_vec_Tensor (row ?M1.0 (?i div row_length ?M2.0))\n                     (row ?M2.0 (?i mod row_length ?M2.0))\n\ngoal (1 subgoal):\n 1. row (A1 \\<otimes> B1) i =\n    vec_vec_Tensor (row A1 (i div row_length B1))\n     (row B1 (i mod row_length B1))", "by auto"], ["proof (state)\nthis:\n  row (A1 \\<otimes> B1) i =\n  vec_vec_Tensor (row A1 (i div row_length B1))\n   (row B1 (i mod row_length B1))\n\ngoal (1 subgoal):\n 1. ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i =\n    scalar_product\n     (vec_vec_Tensor (row A1 (i div row_length B1))\n       (row B1 (i mod row_length B1)))\n     (vec_vec_Tensor (col A2 (j div length B2)) (col B2 (j mod length B2)))", "moreover"], ["proof (state)\nthis:\n  row (A1 \\<otimes> B1) i =\n  vec_vec_Tensor (row A1 (i div row_length B1))\n   (row B1 (i mod row_length B1))\n\ngoal (1 subgoal):\n 1. ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i =\n    scalar_product\n     (vec_vec_Tensor (row A1 (i div row_length B1))\n       (row B1 (i mod row_length B1)))\n     (vec_vec_Tensor (col A2 (j div length B2)) (col B2 (j mod length B2)))", "have \" col (A2 \\<otimes> B2) j =  vec_vec_Tensor (col A2 (j div length B2)) (col B2 (j mod length B2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. col (A2 \\<otimes> B2) j =\n    vec_vec_Tensor (col A2 (j div length B2)) (col B2 (j mod length B2))", "using wf2 wf4 j col_formula"], ["proof (prove)\nusing this:\n  mat (row_length A2) (length A2) A2\n  mat (row_length B2) (length B2) B2\n  j < length A2 * length B2\n  \\<forall>j.\n     j < length ?M1.0 * length ?M2.0 \\<and>\n     mat (row_length ?M1.0) (length ?M1.0) ?M1.0 \\<and>\n     mat (row_length ?M2.0) (length ?M2.0) ?M2.0 \\<longrightarrow>\n     col (?M1.0 \\<otimes> ?M2.0) j =\n     vec_vec_Tensor (col ?M1.0 (j div length ?M2.0))\n      (col ?M2.0 (j mod length ?M2.0))\n\ngoal (1 subgoal):\n 1. col (A2 \\<otimes> B2) j =\n    vec_vec_Tensor (col A2 (j div length B2)) (col B2 (j mod length B2))", "by auto"], ["proof (state)\nthis:\n  col (A2 \\<otimes> B2) j =\n  vec_vec_Tensor (col A2 (j div length B2)) (col B2 (j mod length B2))\n\ngoal (1 subgoal):\n 1. ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i =\n    scalar_product\n     (vec_vec_Tensor (row A1 (i div row_length B1))\n       (row B1 (i mod row_length B1)))\n     (vec_vec_Tensor (col A2 (j div length B2)) (col B2 (j mod length B2)))", "ultimately"], ["proof (chain)\npicking this:\n  ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i =\n  scalar_product (row (A1 \\<otimes> B1) i) (col (A2 \\<otimes> B2) j)\n  row (A1 \\<otimes> B1) i =\n  vec_vec_Tensor (row A1 (i div row_length B1))\n   (row B1 (i mod row_length B1))\n  col (A2 \\<otimes> B2) j =\n  vec_vec_Tensor (col A2 (j div length B2)) (col B2 (j mod length B2))", "show ?thesis"], ["proof (prove)\nusing this:\n  ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i =\n  scalar_product (row (A1 \\<otimes> B1) i) (col (A2 \\<otimes> B2) j)\n  row (A1 \\<otimes> B1) i =\n  vec_vec_Tensor (row A1 (i div row_length B1))\n   (row B1 (i mod row_length B1))\n  col (A2 \\<otimes> B2) j =\n  vec_vec_Tensor (col A2 (j div length B2)) (col B2 (j mod length B2))\n\ngoal (1 subgoal):\n 1. ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i =\n    scalar_product\n     (vec_vec_Tensor (row A1 (i div row_length B1))\n       (row B1 (i mod row_length B1)))\n     (vec_vec_Tensor (col A2 (j div length B2)) (col B2 (j mod length B2)))", "by auto"], ["proof (state)\nthis:\n  ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i =\n  scalar_product\n   (vec_vec_Tensor (row A1 (i div row_length B1))\n     (row B1 (i mod row_length B1)))\n   (vec_vec_Tensor (col A2 (j div length B2)) (col B2 (j mod length B2)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma matrix_match_condn_2:\n\"matrix_match A1 A2 B1 B2 \n \\<and>((i<(row_length A1)*(row_length B1))\n \\<and>(j<(length A2)*(length B2)))\n  \\<Longrightarrow> ((A1 \\<otimes> B1)\\<circ>(A2 \\<otimes> B2))!j!i\n          =  scalar_product \n                (vec_vec_Tensor \n                        (row A1 (i div row_length B1)) \n                        (row B1 (i mod row_length B1))) \n                (vec_vec_Tensor \n                        (col A2 (j div length B2)) \n                        (col B2 (j mod length B2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_match A1 A2 B1 B2 \\<and>\n    i < row_length A1 * row_length B1 \\<and>\n    j < length A2 * length B2 \\<Longrightarrow>\n    ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i =\n    scalar_product\n     (vec_vec_Tensor (row A1 (i div row_length B1))\n       (row B1 (i mod row_length B1)))\n     (vec_vec_Tensor (col A2 (j div length B2)) (col B2 (j mod length B2)))", "using elements_matrix_distribution2"], ["proof (prove)\nusing this:\n  \\<lbrakk>mat (row_length ?A1.0) (length ?A1.0) ?A1.0;\n   mat (row_length ?A2.0) (length ?A2.0) ?A2.0;\n   mat (row_length ?B1.0) (length ?B1.0) ?B1.0;\n   mat (row_length ?B2.0) (length ?B2.0) ?B2.0;\n   length ?A1.0 = row_length ?A2.0; length ?B1.0 = row_length ?B2.0;\n   ?A1.0 \\<noteq> [] \\<and>\n   ?A2.0 \\<noteq> [] \\<and> ?B1.0 \\<noteq> [] \\<and> ?B2.0 \\<noteq> [];\n   ?i < row_length ?A1.0 * row_length ?B1.0;\n   ?j < length ?A2.0 * length ?B2.0\\<rbrakk>\n  \\<Longrightarrow> ((?A1.0 \\<otimes> ?B1.0) \\<circ>\n                     (?A2.0 \\<otimes> ?B2.0)) !\n                    ?j !\n                    ?i =\n                    scalar_product\n                     (vec_vec_Tensor (row ?A1.0 (?i div row_length ?B1.0))\n                       (row ?B1.0 (?i mod row_length ?B1.0)))\n                     (vec_vec_Tensor (col ?A2.0 (?j div length ?B2.0))\n                       (col ?B2.0 (?j mod length ?B2.0)))\n\ngoal (1 subgoal):\n 1. matrix_match A1 A2 B1 B2 \\<and>\n    i < row_length A1 * row_length B1 \\<and>\n    j < length A2 * length B2 \\<Longrightarrow>\n    ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i =\n    scalar_product\n     (vec_vec_Tensor (row A1 (i div row_length B1))\n       (row B1 (i mod row_length B1)))\n     (vec_vec_Tensor (col A2 (j div length B2)) (col B2 (j mod length B2)))", "unfolding matrix_match_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>mat (row_length ?A1.0) (length ?A1.0) ?A1.0;\n   mat (row_length ?A2.0) (length ?A2.0) ?A2.0;\n   mat (row_length ?B1.0) (length ?B1.0) ?B1.0;\n   mat (row_length ?B2.0) (length ?B2.0) ?B2.0;\n   length ?A1.0 = row_length ?A2.0; length ?B1.0 = row_length ?B2.0;\n   ?A1.0 \\<noteq> [] \\<and>\n   ?A2.0 \\<noteq> [] \\<and> ?B1.0 \\<noteq> [] \\<and> ?B2.0 \\<noteq> [];\n   ?i < row_length ?A1.0 * row_length ?B1.0;\n   ?j < length ?A2.0 * length ?B2.0\\<rbrakk>\n  \\<Longrightarrow> ((?A1.0 \\<otimes> ?B1.0) \\<circ>\n                     (?A2.0 \\<otimes> ?B2.0)) !\n                    ?j !\n                    ?i =\n                    scalar_product\n                     (vec_vec_Tensor (row ?A1.0 (?i div row_length ?B1.0))\n                       (row ?B1.0 (?i mod row_length ?B1.0)))\n                     (vec_vec_Tensor (col ?A2.0 (?j div length ?B2.0))\n                       (col ?B2.0 (?j mod length ?B2.0)))\n\ngoal (1 subgoal):\n 1. (mat (row_length A1) (length A1) A1 \\<and>\n     mat (row_length A2) (length A2) A2 \\<and>\n     mat (row_length B1) (length B1) B1 \\<and>\n     mat (row_length B2) (length B2) B2 \\<and>\n     length A1 = row_length A2 \\<and>\n     length B1 = row_length B2 \\<and>\n     A1 \\<noteq> [] \\<and>\n     A2 \\<noteq> [] \\<and> B1 \\<noteq> [] \\<and> B2 \\<noteq> []) \\<and>\n    i < row_length A1 * row_length B1 \\<and>\n    j < length A2 * length B2 \\<Longrightarrow>\n    ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i =\n    scalar_product\n     (vec_vec_Tensor (row A1 (i div row_length B1))\n       (row B1 (i mod row_length B1)))\n     (vec_vec_Tensor (col A2 (j div length B2)) (col B2 (j mod length B2)))", "by auto"], ["", "lemma effective_matrix_match_condn_2: \n assumes \"(matrix_match A1 A2 B1 B2) \"\n shows \"\\<forall>i j.((i<(row_length A1)*(row_length B1))\n         \\<and>(j<(length A2)*(length B2))\n            \\<longrightarrow> ((A1 \\<otimes> B1)\\<circ>(A2 \\<otimes> B2))!j!i\n           =  scalar_product \n                  (vec_vec_Tensor \n                           (row A1 (i div row_length B1)) \n                           (row B1 (i mod row_length B1))) \n                  (vec_vec_Tensor \n                           (col A2 (j div length B2)) \n                           (col B2 (j mod length B2))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i =\n       scalar_product\n        (vec_vec_Tensor (row A1 (i div row_length B1))\n          (row B1 (i mod row_length B1)))\n        (vec_vec_Tensor (col A2 (j div length B2))\n          (col B2 (j mod length B2)))", "using assms matrix_match_condn_2"], ["proof (prove)\nusing this:\n  matrix_match A1 A2 B1 B2\n  matrix_match ?A1.0 ?A2.0 ?B1.0 ?B2.0 \\<and>\n  ?i < row_length ?A1.0 * row_length ?B1.0 \\<and>\n  ?j < length ?A2.0 * length ?B2.0 \\<Longrightarrow>\n  ((?A1.0 \\<otimes> ?B1.0) \\<circ> (?A2.0 \\<otimes> ?B2.0)) ! ?j ! ?i =\n  scalar_product\n   (vec_vec_Tensor (row ?A1.0 (?i div row_length ?B1.0))\n     (row ?B1.0 (?i mod row_length ?B1.0)))\n   (vec_vec_Tensor (col ?A2.0 (?j div length ?B2.0))\n     (col ?B2.0 (?j mod length ?B2.0)))\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i =\n       scalar_product\n        (vec_vec_Tensor (row A1 (i div row_length B1))\n          (row B1 (i mod row_length B1)))\n        (vec_vec_Tensor (col A2 (j div length B2))\n          (col B2 (j mod length B2)))", "unfolding matrix_match_def"], ["proof (prove)\nusing this:\n  mat (row_length A1) (length A1) A1 \\<and>\n  mat (row_length A2) (length A2) A2 \\<and>\n  mat (row_length B1) (length B1) B1 \\<and>\n  mat (row_length B2) (length B2) B2 \\<and>\n  length A1 = row_length A2 \\<and>\n  length B1 = row_length B2 \\<and>\n  A1 \\<noteq> [] \\<and>\n  A2 \\<noteq> [] \\<and> B1 \\<noteq> [] \\<and> B2 \\<noteq> []\n  (mat (row_length ?A1.0) (length ?A1.0) ?A1.0 \\<and>\n   mat (row_length ?A2.0) (length ?A2.0) ?A2.0 \\<and>\n   mat (row_length ?B1.0) (length ?B1.0) ?B1.0 \\<and>\n   mat (row_length ?B2.0) (length ?B2.0) ?B2.0 \\<and>\n   length ?A1.0 = row_length ?A2.0 \\<and>\n   length ?B1.0 = row_length ?B2.0 \\<and>\n   ?A1.0 \\<noteq> [] \\<and>\n   ?A2.0 \\<noteq> [] \\<and>\n   ?B1.0 \\<noteq> [] \\<and> ?B2.0 \\<noteq> []) \\<and>\n  ?i < row_length ?A1.0 * row_length ?B1.0 \\<and>\n  ?j < length ?A2.0 * length ?B2.0 \\<Longrightarrow>\n  ((?A1.0 \\<otimes> ?B1.0) \\<circ> (?A2.0 \\<otimes> ?B2.0)) ! ?j ! ?i =\n  scalar_product\n   (vec_vec_Tensor (row ?A1.0 (?i div row_length ?B1.0))\n     (row ?B1.0 (?i mod row_length ?B1.0)))\n   (vec_vec_Tensor (col ?A2.0 (?j div length ?B2.0))\n     (col ?B2.0 (?j mod length ?B2.0)))\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i =\n       scalar_product\n        (vec_vec_Tensor (row A1 (i div row_length B1))\n          (row B1 (i mod row_length B1)))\n        (vec_vec_Tensor (col A2 (j div length B2))\n          (col B2 (j mod length B2)))", "by auto"], ["", "lemma zip_Nil:\"zip [] [] = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. zip [] [] = []", "using zip_def"], ["proof (prove)\nusing this:\n  zip \\<equiv>\n  \\<lambda>uu uua.\n     rec_list (\\<lambda>xs. [])\n      (\\<lambda>y ys ysa xs.\n          case xs of [] \\<Rightarrow> []\n          | z # zs \\<Rightarrow> (z, y) # ysa zs)\n      uua uu\n\ngoal (1 subgoal):\n 1. zip [] [] = []", "by auto"], ["", "lemma zer_left_mult:\"f zer x = zer\""], ["proof (prove)\ngoal (1 subgoal):\n 1. zer * x = zer", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. zer * x = zer", "have \"g zer zer = zer\""], ["proof (prove)\ngoal (1 subgoal):\n 1. zer + zer = zer", "using plus_left_id"], ["proof (prove)\nusing this:\n  zer + ?x = ?x\n\ngoal (1 subgoal):\n 1. zer + zer = zer", "by auto"], ["proof (state)\nthis:\n  zer + zer = zer\n\ngoal (1 subgoal):\n 1. zer * x = zer", "then"], ["proof (chain)\npicking this:\n  zer + zer = zer", "have \"f zer x = f (g zer zer) x\""], ["proof (prove)\nusing this:\n  zer + zer = zer\n\ngoal (1 subgoal):\n 1. zer * x = zer + zer * x", "by auto"], ["proof (state)\nthis:\n  zer * x = zer + zer * x\n\ngoal (1 subgoal):\n 1. zer * x = zer", "then"], ["proof (chain)\npicking this:\n  zer * x = zer + zer * x", "have \"f zer x = (f zer x) + (f zer x)\""], ["proof (prove)\nusing this:\n  zer * x = zer + zer * x\n\ngoal (1 subgoal):\n 1. zer * x = zer * x + (zer * x)", "using  plus_right_distributivity"], ["proof (prove)\nusing this:\n  zer * x = zer + zer * x\n  ?a + ?b * ?c = ?a * ?c + (?b * ?c)\n\ngoal (1 subgoal):\n 1. zer * x = zer * x + (zer * x)", "by auto"], ["proof (state)\nthis:\n  zer * x = zer * x + (zer * x)\n\ngoal (1 subgoal):\n 1. zer * x = zer", "then"], ["proof (chain)\npicking this:\n  zer * x = zer * x + (zer * x)", "have \"(f zer x) + (inver (f zer x)) = (f zer x) + (f zer x) + (inver (f zer x))\""], ["proof (prove)\nusing this:\n  zer * x = zer * x + (zer * x)\n\ngoal (1 subgoal):\n 1. zer * x + inver (zer * x) = zer * x + (zer * x) + inver (zer * x)", "by auto"], ["proof (state)\nthis:\n  zer * x + inver (zer * x) = zer * x + (zer * x) + inver (zer * x)\n\ngoal (1 subgoal):\n 1. zer * x = zer", "then"], ["proof (chain)\npicking this:\n  zer * x + inver (zer * x) = zer * x + (zer * x) + inver (zer * x)", "have \"zer = (f zer x) + zer\""], ["proof (prove)\nusing this:\n  zer * x + inver (zer * x) = zer * x + (zer * x) + inver (zer * x)\n\ngoal (1 subgoal):\n 1. zer = zer * x + zer", "using plus_left_inverse  plus_assoc"], ["proof (prove)\nusing this:\n  zer * x + inver (zer * x) = zer * x + (zer * x) + inver (zer * x)\n  ?x + inver ?x = zer\n  ?a + ?b + ?c = ?a + (?b + ?c)\n\ngoal (1 subgoal):\n 1. zer = zer * x + zer", "by (metis)"], ["proof (state)\nthis:\n  zer = zer * x + zer\n\ngoal (1 subgoal):\n 1. zer * x = zer", "then"], ["proof (chain)\npicking this:\n  zer = zer * x + zer", "show ?thesis"], ["proof (prove)\nusing this:\n  zer = zer * x + zer\n\ngoal (1 subgoal):\n 1. zer * x = zer", "using plus_right_id"], ["proof (prove)\nusing this:\n  zer = zer * x + zer\n  ?x + zer = ?x\n\ngoal (1 subgoal):\n 1. zer * x = zer", "by simp"], ["proof (state)\nthis:\n  zer * x = zer\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma zip_Cons:\"(length v = length w) \\<Longrightarrow> zip (a#v) (b#w) = (a,b)#(zip v w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length v = length w \\<Longrightarrow>\n    zip (a # v) (b # w) = (a, b) # zip v w", "unfolding zip_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. length v = length w \\<Longrightarrow>\n    rec_list (\\<lambda>xs. [])\n     (\\<lambda>y ys ysa. case_list [] (\\<lambda>z zs. (z, y) # ysa zs))\n     (b # w) (a # v) =\n    (a, b) #\n    rec_list (\\<lambda>xs. [])\n     (\\<lambda>y ys ysa. case_list [] (\\<lambda>z zs. (z, y) # ysa zs)) w v", "by auto"], ["", "lemma scalar_product_times:\n \"\\<forall>w1 w2.(length w1 = length w2) \\<and>(length w1 = n) \\<longrightarrow> \n           (f (x*y) (scalar_product w1 w2)) \n                      = (scalar_product \n                               (times x w1) \n                               (times y w2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w1 w2.\n       length w1 = length w2 \\<and> length w1 = n \\<longrightarrow>\n       x * y * scalar_product w1 w2 =\n       scalar_product (local.times x w1) (local.times y w2)", "apply(rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>w1.\n       \\<forall>w2.\n          length w1 = length w2 \\<and> length w1 = n \\<longrightarrow>\n          x * y * scalar_product w1 w2 =\n          scalar_product (local.times x w1) (local.times y w2)", "apply (rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>w1 w2.\n       length w1 = length w2 \\<and> length w1 = n \\<longrightarrow>\n       x * y * scalar_product w1 w2 =\n       scalar_product (local.times x w1) (local.times y w2)", "proof(induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>w1 w2.\n       length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n       x * y * scalar_product w1 w2 =\n       scalar_product (local.times x w1) (local.times y w2)\n 2. \\<And>n w1 w2.\n       (\\<And>w1 w2.\n           length w1 = length w2 \\<and> length w1 = n \\<longrightarrow>\n           x * y * scalar_product w1 w2 =\n           scalar_product (local.times x w1)\n            (local.times y w2)) \\<Longrightarrow>\n       length w1 = length w2 \\<and> length w1 = Suc n \\<longrightarrow>\n       x * y * scalar_product w1 w2 =\n       scalar_product (local.times x w1) (local.times y w2)", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>w1 w2.\n       length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n       x * y * scalar_product w1 w2 =\n       scalar_product (local.times x w1) (local.times y w2)\n 2. \\<And>n w1 w2.\n       (\\<And>w1 w2.\n           length w1 = length w2 \\<and> length w1 = n \\<longrightarrow>\n           x * y * scalar_product w1 w2 =\n           scalar_product (local.times x w1)\n            (local.times y w2)) \\<Longrightarrow>\n       length w1 = length w2 \\<and> length w1 = Suc n \\<longrightarrow>\n       x * y * scalar_product w1 w2 =\n       scalar_product (local.times x w1) (local.times y w2)", "have \"(length w1 = length w2) \\<and>(length w1 = 0)  \\<Longrightarrow> ?case\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = 0 \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = 0 \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "assume assms:\"(length w1 = length w2) \\<and>(length w1 = 0)\""], ["proof (state)\nthis:\n  length w1 = length w2 \\<and> length w1 = 0\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = 0 \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "have 1:\" w1 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w1 = []", "using assms"], ["proof (prove)\nusing this:\n  length w1 = length w2 \\<and> length w1 = 0\n\ngoal (1 subgoal):\n 1. w1 = []", "by auto"], ["proof (state)\nthis:\n  w1 = []\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = 0 \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "moreover"], ["proof (state)\nthis:\n  w1 = []\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = 0 \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "have 2:\"(length w1 = length w2) \\<and>(length w1 = 0) \\<longrightarrow> w2 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow> w2 = []", "by auto"], ["proof (state)\nthis:\n  length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow> w2 = []\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = 0 \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "ultimately"], ["proof (chain)\npicking this:\n  w1 = []\n  length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow> w2 = []", "have \"(length w1 = length w2) \\<and>(length w1 = 0) \n                                   \\<longrightarrow> scalar_product w1 w2 = zer\""], ["proof (prove)\nusing this:\n  w1 = []\n  length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow> w2 = []\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n    scalar_product w1 w2 = zer", "unfolding scalar_product_def scalar_prodI_def"], ["proof (prove)\nusing this:\n  w1 = []\n  length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow> w2 = []\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n    foldr (\\<lambda>(x, y). (+) (x * y)) (zip w1 w2) zer = zer", "by auto"], ["proof (state)\nthis:\n  length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n  scalar_product w1 w2 = zer\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = 0 \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "then"], ["proof (chain)\npicking this:\n  length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n  scalar_product w1 w2 = zer", "have 3:\"(length w1 = length w2) \\<and>(length w1 = 0) \n                                   \\<longrightarrow> (f (x*y) (scalar_product w1 w2)) = zer\""], ["proof (prove)\nusing this:\n  length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n  scalar_product w1 w2 = zer\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n    x * y * scalar_product w1 w2 = zer", "using comm zer_left_mult"], ["proof (prove)\nusing this:\n  length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n  scalar_product w1 w2 = zer\n  ?a * ?b = ?b * ?a\n  zer * ?x = zer\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n    x * y * scalar_product w1 w2 = zer", "by metis"], ["proof (state)\nthis:\n  length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n  x * y * scalar_product w1 w2 = zer\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = 0 \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "then"], ["proof (chain)\npicking this:\n  length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n  x * y * scalar_product w1 w2 = zer", "have \"times x w1 = []\""], ["proof (prove)\nusing this:\n  length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n  x * y * scalar_product w1 w2 = zer\n\ngoal (1 subgoal):\n 1. local.times x w1 = []", "using 1"], ["proof (prove)\nusing this:\n  length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n  x * y * scalar_product w1 w2 = zer\n  w1 = []\n\ngoal (1 subgoal):\n 1. local.times x w1 = []", "by auto"], ["proof (state)\nthis:\n  local.times x w1 = []\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = 0 \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "moreover"], ["proof (state)\nthis:\n  local.times x w1 = []\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = 0 \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "have \"times y w2 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.times y w2 = []", "using 2 assms"], ["proof (prove)\nusing this:\n  length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow> w2 = []\n  length w1 = length w2 \\<and> length w1 = 0\n\ngoal (1 subgoal):\n 1. local.times y w2 = []", "by auto"], ["proof (state)\nthis:\n  local.times y w2 = []\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = 0 \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "ultimately"], ["proof (chain)\npicking this:\n  local.times x w1 = []\n  local.times y w2 = []", "have \"(scalar_product (times x w1) ( times y w2)) = zer\""], ["proof (prove)\nusing this:\n  local.times x w1 = []\n  local.times y w2 = []\n\ngoal (1 subgoal):\n 1. scalar_product (local.times x w1) (local.times y w2) = zer", "unfolding scalar_product_def scalar_prodI_def"], ["proof (prove)\nusing this:\n  local.times x w1 = []\n  local.times y w2 = []\n\ngoal (1 subgoal):\n 1. foldr (\\<lambda>(x, y). (+) (x * y))\n     (zip (local.times x w1) (local.times y w2)) zer =\n    zer", "by auto"], ["proof (state)\nthis:\n  scalar_product (local.times x w1) (local.times y w2) = zer\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = 0 \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "with 3"], ["proof (chain)\npicking this:\n  length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n  x * y * scalar_product w1 w2 = zer\n  scalar_product (local.times x w1) (local.times y w2) = zer", "show ?thesis"], ["proof (prove)\nusing this:\n  length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n  x * y * scalar_product w1 w2 = zer\n  scalar_product (local.times x w1) (local.times y w2) = zer\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "by auto"], ["proof (state)\nthis:\n  length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n  x * y * scalar_product w1 w2 =\n  scalar_product (local.times x w1) (local.times y w2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length w1 = length w2 \\<and> length w1 = 0 \\<Longrightarrow>\n  length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n  x * y * scalar_product w1 w2 =\n  scalar_product (local.times x w1) (local.times y w2)\n\ngoal (2 subgoals):\n 1. \\<And>w1 w2.\n       length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n       x * y * scalar_product w1 w2 =\n       scalar_product (local.times x w1) (local.times y w2)\n 2. \\<And>n w1 w2.\n       (\\<And>w1 w2.\n           length w1 = length w2 \\<and> length w1 = n \\<longrightarrow>\n           x * y * scalar_product w1 w2 =\n           scalar_product (local.times x w1)\n            (local.times y w2)) \\<Longrightarrow>\n       length w1 = length w2 \\<and> length w1 = Suc n \\<longrightarrow>\n       x * y * scalar_product w1 w2 =\n       scalar_product (local.times x w1) (local.times y w2)", "then"], ["proof (chain)\npicking this:\n  length w1 = length w2 \\<and> length w1 = 0 \\<Longrightarrow>\n  length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n  x * y * scalar_product w1 w2 =\n  scalar_product (local.times x w1) (local.times y w2)", "show ?case"], ["proof (prove)\nusing this:\n  length w1 = length w2 \\<and> length w1 = 0 \\<Longrightarrow>\n  length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n  x * y * scalar_product w1 w2 =\n  scalar_product (local.times x w1) (local.times y w2)\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "by auto"], ["proof (state)\nthis:\n  length w1 = length w2 \\<and> length w1 = 0 \\<longrightarrow>\n  x * y * scalar_product w1 w2 =\n  scalar_product (local.times x w1) (local.times y w2)\n\ngoal (1 subgoal):\n 1. \\<And>n w1 w2.\n       (\\<And>w1 w2.\n           length w1 = length w2 \\<and> length w1 = n \\<longrightarrow>\n           x * y * scalar_product w1 w2 =\n           scalar_product (local.times x w1)\n            (local.times y w2)) \\<Longrightarrow>\n       length w1 = length w2 \\<and> length w1 = Suc n \\<longrightarrow>\n       x * y * scalar_product w1 w2 =\n       scalar_product (local.times x w1) (local.times y w2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w1 w2.\n       (\\<And>w1 w2.\n           length w1 = length w2 \\<and> length w1 = n \\<longrightarrow>\n           x * y * scalar_product w1 w2 =\n           scalar_product (local.times x w1)\n            (local.times y w2)) \\<Longrightarrow>\n       length w1 = length w2 \\<and> length w1 = Suc n \\<longrightarrow>\n       x * y * scalar_product w1 w2 =\n       scalar_product (local.times x w1) (local.times y w2)", "case (Suc k)"], ["proof (state)\nthis:\n  length ?w1.0 = length ?w2.0 \\<and> length ?w1.0 = k \\<longrightarrow>\n  x * y * scalar_product ?w1.0 ?w2.0 =\n  scalar_product (local.times x ?w1.0) (local.times y ?w2.0)\n\ngoal (1 subgoal):\n 1. \\<And>n w1 w2.\n       (\\<And>w1 w2.\n           length w1 = length w2 \\<and> length w1 = n \\<longrightarrow>\n           x * y * scalar_product w1 w2 =\n           scalar_product (local.times x w1)\n            (local.times y w2)) \\<Longrightarrow>\n       length w1 = length w2 \\<and> length w1 = Suc n \\<longrightarrow>\n       x * y * scalar_product w1 w2 =\n       scalar_product (local.times x w1) (local.times y w2)", "have \"(length w1 = length w2) \\<and>(length w1 = (Suc k))  \\<Longrightarrow> ?case\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = Suc k \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = Suc k \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = Suc k \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = Suc k \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "assume assms:\"(length w1 = length w2) \\<and>(length w1 = (Suc k))\""], ["proof (state)\nthis:\n  length w1 = length w2 \\<and> length w1 = Suc k\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = Suc k \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = Suc k \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "have \"\\<exists>a1 u1.(w1 = a1#u1)\\<and>(length u1 = k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a1 u1. w1 = a1 # u1 \\<and> length u1 = k", "using assms"], ["proof (prove)\nusing this:\n  length w1 = length w2 \\<and> length w1 = Suc k\n\ngoal (1 subgoal):\n 1. \\<exists>a1 u1. w1 = a1 # u1 \\<and> length u1 = k", "by (metis length_Suc_conv)"], ["proof (state)\nthis:\n  \\<exists>a1 u1. w1 = a1 # u1 \\<and> length u1 = k\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = Suc k \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = Suc k \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "then"], ["proof (chain)\npicking this:\n  \\<exists>a1 u1. w1 = a1 # u1 \\<and> length u1 = k", "obtain a1 u1 where \"(w1 = a1#u1)\\<and>(length u1 = k)\""], ["proof (prove)\nusing this:\n  \\<exists>a1 u1. w1 = a1 # u1 \\<and> length u1 = k\n\ngoal (1 subgoal):\n 1. (\\<And>a1 u1.\n        w1 = a1 # u1 \\<and> length u1 = k \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  w1 = a1 # u1 \\<and> length u1 = k\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = Suc k \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = Suc k \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "then"], ["proof (chain)\npicking this:\n  w1 = a1 # u1 \\<and> length u1 = k", "have Cons_1:\"(w1 = a1#u1)\\<and>(length u1 = k)\""], ["proof (prove)\nusing this:\n  w1 = a1 # u1 \\<and> length u1 = k\n\ngoal (1 subgoal):\n 1. w1 = a1 # u1 \\<and> length u1 = k", "by auto"], ["proof (state)\nthis:\n  w1 = a1 # u1 \\<and> length u1 = k\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = Suc k \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = Suc k \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "have \"length w2 = (Suc k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length w2 = Suc k", "using assms"], ["proof (prove)\nusing this:\n  length w1 = length w2 \\<and> length w1 = Suc k\n\ngoal (1 subgoal):\n 1. length w2 = Suc k", "by auto"], ["proof (state)\nthis:\n  length w2 = Suc k\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = Suc k \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = Suc k \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "then"], ["proof (chain)\npicking this:\n  length w2 = Suc k", "have \"\\<exists>a2 u2.(w2 = a2#u2)\\<and>(length u2 = k)\""], ["proof (prove)\nusing this:\n  length w2 = Suc k\n\ngoal (1 subgoal):\n 1. \\<exists>a2 u2. w2 = a2 # u2 \\<and> length u2 = k", "using assms"], ["proof (prove)\nusing this:\n  length w2 = Suc k\n  length w1 = length w2 \\<and> length w1 = Suc k\n\ngoal (1 subgoal):\n 1. \\<exists>a2 u2. w2 = a2 # u2 \\<and> length u2 = k", "by (metis length_Suc_conv)"], ["proof (state)\nthis:\n  \\<exists>a2 u2. w2 = a2 # u2 \\<and> length u2 = k\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = Suc k \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = Suc k \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "then"], ["proof (chain)\npicking this:\n  \\<exists>a2 u2. w2 = a2 # u2 \\<and> length u2 = k", "obtain a2 u2 where \"(w2 = a2#u2)\\<and>(length u2 = k)\""], ["proof (prove)\nusing this:\n  \\<exists>a2 u2. w2 = a2 # u2 \\<and> length u2 = k\n\ngoal (1 subgoal):\n 1. (\\<And>a2 u2.\n        w2 = a2 # u2 \\<and> length u2 = k \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  w2 = a2 # u2 \\<and> length u2 = k\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = Suc k \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = Suc k \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "then"], ["proof (chain)\npicking this:\n  w2 = a2 # u2 \\<and> length u2 = k", "have Cons_2:\"(w2 = a2#u2)\\<and>(length u2 = k)\""], ["proof (prove)\nusing this:\n  w2 = a2 # u2 \\<and> length u2 = k\n\ngoal (1 subgoal):\n 1. w2 = a2 # u2 \\<and> length u2 = k", "by auto"], ["proof (state)\nthis:\n  w2 = a2 # u2 \\<and> length u2 = k\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = Suc k \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = Suc k \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "then"], ["proof (chain)\npicking this:\n  w2 = a2 # u2 \\<and> length u2 = k", "have \"(length u1 = length u2)\\<and>(length u1 = k)\""], ["proof (prove)\nusing this:\n  w2 = a2 # u2 \\<and> length u2 = k\n\ngoal (1 subgoal):\n 1. length u1 = length u2 \\<and> length u1 = k", "using Cons_1"], ["proof (prove)\nusing this:\n  w2 = a2 # u2 \\<and> length u2 = k\n  w1 = a1 # u1 \\<and> length u1 = k\n\ngoal (1 subgoal):\n 1. length u1 = length u2 \\<and> length u1 = k", "by auto"], ["proof (state)\nthis:\n  length u1 = length u2 \\<and> length u1 = k\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = Suc k \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = Suc k \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "then"], ["proof (chain)\npicking this:\n  length u1 = length u2 \\<and> length u1 = k", "have Cons_3:\"x * y * scalar_product u1 u2 \n                        = scalar_product (times x u1) (times y u2)\""], ["proof (prove)\nusing this:\n  length u1 = length u2 \\<and> length u1 = k\n\ngoal (1 subgoal):\n 1. x * y * scalar_product u1 u2 =\n    scalar_product (local.times x u1) (local.times y u2)", "using Suc assms"], ["proof (prove)\nusing this:\n  length u1 = length u2 \\<and> length u1 = k\n  length ?w1.0 = length ?w2.0 \\<and> length ?w1.0 = k \\<longrightarrow>\n  x * y * scalar_product ?w1.0 ?w2.0 =\n  scalar_product (local.times x ?w1.0) (local.times y ?w2.0)\n  length w1 = length w2 \\<and> length w1 = Suc k\n\ngoal (1 subgoal):\n 1. x * y * scalar_product u1 u2 =\n    scalar_product (local.times x u1) (local.times y u2)", "by auto"], ["proof (state)\nthis:\n  x * y * scalar_product u1 u2 =\n  scalar_product (local.times x u1) (local.times y u2)\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = Suc k \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = Suc k \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "have \"scalar_product (a1#u1) (a2#u2) = (a1*a2) + (scalar_product u1 u2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. scalar_product (a1 # u1) (a2 # u2) = a1 * a2 + scalar_product u1 u2", "unfolding scalar_product_def scalar_prodI_def zip_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. foldr (\\<lambda>(x, y). (+) (x * y))\n     (rec_list (\\<lambda>xs. [])\n       (\\<lambda>y ys ysa. case_list [] (\\<lambda>z zs. (z, y) # ysa zs))\n       (a2 # u2) (a1 # u1))\n     zer =\n    a1 * a2 +\n    foldr (\\<lambda>(x, y). (+) (x * y))\n     (rec_list (\\<lambda>xs. [])\n       (\\<lambda>y ys ysa. case_list [] (\\<lambda>z zs. (z, y) # ysa zs)) u2\n       u1)\n     zer", "by auto"], ["proof (state)\nthis:\n  scalar_product (a1 # u1) (a2 # u2) = a1 * a2 + scalar_product u1 u2\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = Suc k \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = Suc k \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "then"], ["proof (chain)\npicking this:\n  scalar_product (a1 # u1) (a2 # u2) = a1 * a2 + scalar_product u1 u2", "have \"scalar_product w1 w2 = (a1*a2) + (scalar_product u1 u2)\""], ["proof (prove)\nusing this:\n  scalar_product (a1 # u1) (a2 # u2) = a1 * a2 + scalar_product u1 u2\n\ngoal (1 subgoal):\n 1. scalar_product w1 w2 = a1 * a2 + scalar_product u1 u2", "using Cons_1 Cons_2"], ["proof (prove)\nusing this:\n  scalar_product (a1 # u1) (a2 # u2) = a1 * a2 + scalar_product u1 u2\n  w1 = a1 # u1 \\<and> length u1 = k\n  w2 = a2 # u2 \\<and> length u2 = k\n\ngoal (1 subgoal):\n 1. scalar_product w1 w2 = a1 * a2 + scalar_product u1 u2", "by auto"], ["proof (state)\nthis:\n  scalar_product w1 w2 = a1 * a2 + scalar_product u1 u2\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = Suc k \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = Suc k \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "then"], ["proof (chain)\npicking this:\n  scalar_product w1 w2 = a1 * a2 + scalar_product u1 u2", "have \"(x*y)*(scalar_product w1 w2) \n                       = ((x*y)*(a1*a2)) + ((x*y)*(scalar_product u1 u2))\""], ["proof (prove)\nusing this:\n  scalar_product w1 w2 = a1 * a2 + scalar_product u1 u2\n\ngoal (1 subgoal):\n 1. x * y * scalar_product w1 w2 =\n    x * y * (a1 * a2) + (x * y * scalar_product u1 u2)", "using plus_right_distributivity"], ["proof (prove)\nusing this:\n  scalar_product w1 w2 = a1 * a2 + scalar_product u1 u2\n  ?a + ?b * ?c = ?a * ?c + (?b * ?c)\n\ngoal (1 subgoal):\n 1. x * y * scalar_product w1 w2 =\n    x * y * (a1 * a2) + (x * y * scalar_product u1 u2)", "by (metis plus_left_distributivity)"], ["proof (state)\nthis:\n  x * y * scalar_product w1 w2 =\n  x * y * (a1 * a2) + (x * y * scalar_product u1 u2)\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = Suc k \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = Suc k \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "then"], ["proof (chain)\npicking this:\n  x * y * scalar_product w1 w2 =\n  x * y * (a1 * a2) + (x * y * scalar_product u1 u2)", "have Cons_4:\"(x*y)*(scalar_product w1 w2) \n                       = (x*a1*y*a2)+ ((x*y)*(scalar_product u1 u2))\""], ["proof (prove)\nusing this:\n  x * y * scalar_product w1 w2 =\n  x * y * (a1 * a2) + (x * y * scalar_product u1 u2)\n\ngoal (1 subgoal):\n 1. x * y * scalar_product w1 w2 =\n    x * a1 * y * a2 + (x * y * scalar_product u1 u2)", "using comm assoc"], ["proof (prove)\nusing this:\n  x * y * scalar_product w1 w2 =\n  x * y * (a1 * a2) + (x * y * scalar_product u1 u2)\n  ?a * ?b = ?b * ?a\n  ?a * ?b * ?c = ?a * (?b * ?c)\n\ngoal (1 subgoal):\n 1. x * y * scalar_product w1 w2 =\n    x * a1 * y * a2 + (x * y * scalar_product u1 u2)", "by metis"], ["proof (state)\nthis:\n  x * y * scalar_product w1 w2 =\n  x * a1 * y * a2 + (x * y * scalar_product u1 u2)\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = Suc k \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = Suc k \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "have \"(times x w1) = (x*a1)#(times x u1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.times x w1 = (x * a1) # local.times x u1", "using times.simps Cons_1"], ["proof (prove)\nusing this:\n  local.times ?n [] = []\n  local.times ?n (?y # ?ys) = (?n * ?y) # local.times ?n ?ys\n  w1 = a1 # u1 \\<and> length u1 = k\n\ngoal (1 subgoal):\n 1. local.times x w1 = (x * a1) # local.times x u1", "by auto"], ["proof (state)\nthis:\n  local.times x w1 = (x * a1) # local.times x u1\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = Suc k \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = Suc k \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "moreover"], ["proof (state)\nthis:\n  local.times x w1 = (x * a1) # local.times x u1\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = Suc k \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = Suc k \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "have \"(times y w2) = (y*a2)#(times y u2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.times y w2 = (y * a2) # local.times y u2", "using times.simps Cons_2"], ["proof (prove)\nusing this:\n  local.times ?n [] = []\n  local.times ?n (?y # ?ys) = (?n * ?y) # local.times ?n ?ys\n  w2 = a2 # u2 \\<and> length u2 = k\n\ngoal (1 subgoal):\n 1. local.times y w2 = (y * a2) # local.times y u2", "by auto"], ["proof (state)\nthis:\n  local.times y w2 = (y * a2) # local.times y u2\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = Suc k \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = Suc k \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "ultimately"], ["proof (chain)\npicking this:\n  local.times x w1 = (x * a1) # local.times x u1\n  local.times y w2 = (y * a2) # local.times y u2", "have Cons_5:\"scalar_product (times x w1) (times y w2) \n                            = scalar_product \n                                  ((x*a1)#(times x u1)) \n                                  ((y*a2)#(times y u2))\""], ["proof (prove)\nusing this:\n  local.times x w1 = (x * a1) # local.times x u1\n  local.times y w2 = (y * a2) # local.times y u2\n\ngoal (1 subgoal):\n 1. scalar_product (local.times x w1) (local.times y w2) =\n    scalar_product ((x * a1) # local.times x u1)\n     ((y * a2) # local.times y u2)", "by auto"], ["proof (state)\nthis:\n  scalar_product (local.times x w1) (local.times y w2) =\n  scalar_product ((x * a1) # local.times x u1) ((y * a2) # local.times y u2)\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = Suc k \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = Suc k \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "then"], ["proof (chain)\npicking this:\n  scalar_product (local.times x w1) (local.times y w2) =\n  scalar_product ((x * a1) # local.times x u1) ((y * a2) # local.times y u2)", "have \"... = ((x*a1)*(y*a2)) \n                             + scalar_product (times x u1) (times y u2)\""], ["proof (prove)\nusing this:\n  scalar_product (local.times x w1) (local.times y w2) =\n  scalar_product ((x * a1) # local.times x u1) ((y * a2) # local.times y u2)\n\ngoal (1 subgoal):\n 1. scalar_product ((x * a1) # local.times x u1)\n     ((y * a2) # local.times y u2) =\n    x * a1 * (y * a2) + scalar_product (local.times x u1) (local.times y u2)", "unfolding scalar_product_def scalar_prodI_def zip_def"], ["proof (prove)\nusing this:\n  foldr (\\<lambda>(x, y). (+) (x * y))\n   (rec_list (\\<lambda>xs. [])\n     (\\<lambda>y ys ysa. case_list [] (\\<lambda>z zs. (z, y) # ysa zs))\n     (local.times y w2) (local.times x w1))\n   zer =\n  foldr (\\<lambda>(x, y). (+) (x * y))\n   (rec_list (\\<lambda>xs. [])\n     (\\<lambda>y ys ysa. case_list [] (\\<lambda>z zs. (z, y) # ysa zs))\n     ((y * a2) # local.times y u2) ((x * a1) # local.times x u1))\n   zer\n\ngoal (1 subgoal):\n 1. foldr (\\<lambda>(x, y). (+) (x * y))\n     (rec_list (\\<lambda>xs. [])\n       (\\<lambda>y ys ysa. case_list [] (\\<lambda>z zs. (z, y) # ysa zs))\n       ((y * a2) # local.times y u2) ((x * a1) # local.times x u1))\n     zer =\n    x * a1 * (y * a2) +\n    foldr (\\<lambda>(x, y). (+) (x * y))\n     (rec_list (\\<lambda>xs. [])\n       (\\<lambda>y ys ysa. case_list [] (\\<lambda>z zs. (z, y) # ysa zs))\n       (local.times y u2) (local.times x u1))\n     zer", "by auto"], ["proof (state)\nthis:\n  scalar_product ((x * a1) # local.times x u1)\n   ((y * a2) # local.times y u2) =\n  x * a1 * (y * a2) + scalar_product (local.times x u1) (local.times y u2)\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = Suc k \\<Longrightarrow>\n    length w1 = length w2 \\<and> length w1 = Suc k \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "with Cons_3 Cons_4 Cons_5"], ["proof (chain)\npicking this:\n  x * y * scalar_product u1 u2 =\n  scalar_product (local.times x u1) (local.times y u2)\n  x * y * scalar_product w1 w2 =\n  x * a1 * y * a2 + (x * y * scalar_product u1 u2)\n  scalar_product (local.times x w1) (local.times y w2) =\n  scalar_product ((x * a1) # local.times x u1) ((y * a2) # local.times y u2)\n  scalar_product ((x * a1) # local.times x u1)\n   ((y * a2) # local.times y u2) =\n  x * a1 * (y * a2) + scalar_product (local.times x u1) (local.times y u2)", "show ?thesis"], ["proof (prove)\nusing this:\n  x * y * scalar_product u1 u2 =\n  scalar_product (local.times x u1) (local.times y u2)\n  x * y * scalar_product w1 w2 =\n  x * a1 * y * a2 + (x * y * scalar_product u1 u2)\n  scalar_product (local.times x w1) (local.times y w2) =\n  scalar_product ((x * a1) # local.times x u1) ((y * a2) # local.times y u2)\n  scalar_product ((x * a1) # local.times x u1)\n   ((y * a2) # local.times y u2) =\n  x * a1 * (y * a2) + scalar_product (local.times x u1) (local.times y u2)\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = Suc k \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "using assoc"], ["proof (prove)\nusing this:\n  x * y * scalar_product u1 u2 =\n  scalar_product (local.times x u1) (local.times y u2)\n  x * y * scalar_product w1 w2 =\n  x * a1 * y * a2 + (x * y * scalar_product u1 u2)\n  scalar_product (local.times x w1) (local.times y w2) =\n  scalar_product ((x * a1) # local.times x u1) ((y * a2) # local.times y u2)\n  scalar_product ((x * a1) # local.times x u1)\n   ((y * a2) # local.times y u2) =\n  x * a1 * (y * a2) + scalar_product (local.times x u1) (local.times y u2)\n  ?a * ?b * ?c = ?a * (?b * ?c)\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = Suc k \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "by auto"], ["proof (state)\nthis:\n  length w1 = length w2 \\<and> length w1 = Suc k \\<longrightarrow>\n  x * y * scalar_product w1 w2 =\n  scalar_product (local.times x w1) (local.times y w2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length w1 = length w2 \\<and> length w1 = Suc k \\<Longrightarrow>\n  length w1 = length w2 \\<and> length w1 = Suc k \\<longrightarrow>\n  x * y * scalar_product w1 w2 =\n  scalar_product (local.times x w1) (local.times y w2)\n\ngoal (1 subgoal):\n 1. \\<And>n w1 w2.\n       (\\<And>w1 w2.\n           length w1 = length w2 \\<and> length w1 = n \\<longrightarrow>\n           x * y * scalar_product w1 w2 =\n           scalar_product (local.times x w1)\n            (local.times y w2)) \\<Longrightarrow>\n       length w1 = length w2 \\<and> length w1 = Suc n \\<longrightarrow>\n       x * y * scalar_product w1 w2 =\n       scalar_product (local.times x w1) (local.times y w2)", "then"], ["proof (chain)\npicking this:\n  length w1 = length w2 \\<and> length w1 = Suc k \\<Longrightarrow>\n  length w1 = length w2 \\<and> length w1 = Suc k \\<longrightarrow>\n  x * y * scalar_product w1 w2 =\n  scalar_product (local.times x w1) (local.times y w2)", "show ?case"], ["proof (prove)\nusing this:\n  length w1 = length w2 \\<and> length w1 = Suc k \\<Longrightarrow>\n  length w1 = length w2 \\<and> length w1 = Suc k \\<longrightarrow>\n  x * y * scalar_product w1 w2 =\n  scalar_product (local.times x w1) (local.times y w2)\n\ngoal (1 subgoal):\n 1. length w1 = length w2 \\<and> length w1 = Suc k \\<longrightarrow>\n    x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "by auto"], ["proof (state)\nthis:\n  length w1 = length w2 \\<and> length w1 = Suc k \\<longrightarrow>\n  x * y * scalar_product w1 w2 =\n  scalar_product (local.times x w1) (local.times y w2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma effective_scalar_product_times:\n assumes \"(length w1 = length w2)\"  \n shows \"(f (x*y) (scalar_product w1 w2)) \n                       = (scalar_product (times x w1) ( times y w2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "using scalar_product_times assms"], ["proof (prove)\nusing this:\n  \\<forall>w1 w2.\n     length w1 = length w2 \\<and> length w1 = ?n \\<longrightarrow>\n     ?x * ?y * scalar_product w1 w2 =\n     scalar_product (local.times ?x w1) (local.times ?y w2)\n  length w1 = length w2\n\ngoal (1 subgoal):\n 1. x * y * scalar_product w1 w2 =\n    scalar_product (local.times x w1) (local.times y w2)", "by auto"], ["", "lemma zip_append:\"(length zs = length ws)\\<and>(length xs = length ys) \n                       \\<Longrightarrow> (zip (xs@zs) (ys@ws)) = (zip xs ys)@(zip zs ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length zs = length ws \\<and> length xs = length ys \\<Longrightarrow>\n    zip (xs @ zs) (ys @ ws) = zip xs ys @ zip zs ws", "using zip_append1 zip_append2"], ["proof (prove)\nusing this:\n  zip (?xs @ ?ys) ?zs =\n  zip ?xs (take (length ?xs) ?zs) @ zip ?ys (drop (length ?xs) ?zs)\n  zip ?xs (?ys @ ?zs) =\n  zip (take (length ?ys) ?xs) ?ys @ zip (drop (length ?ys) ?xs) ?zs\n\ngoal (1 subgoal):\n 1. length zs = length ws \\<and> length xs = length ys \\<Longrightarrow>\n    zip (xs @ zs) (ys @ ws) = zip xs ys @ zip zs ws", "by auto"], ["", "lemma scalar_product_append:\n \"\\<forall>xs ys zs ws.(length zs = length ws)\n               \\<and>(length xs = length ys) \n               \\<and>(length xs = n)  \\<longrightarrow> \n                     (scalar_product (xs@zs) (ys@ws))\n                                   = (scalar_product xs ys)\n                                         +(scalar_product zs ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs ys zs ws.\n       length zs = length ws \\<and>\n       length xs = length ys \\<and> length xs = n \\<longrightarrow>\n       scalar_product (xs @ zs) (ys @ ws) =\n       scalar_product xs ys + scalar_product zs ws", "apply(rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<forall>ys zs ws.\n          length zs = length ws \\<and>\n          length xs = length ys \\<and> length xs = n \\<longrightarrow>\n          scalar_product (xs @ zs) (ys @ ws) =\n          scalar_product xs ys + scalar_product zs ws", "apply(rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs ys.\n       \\<forall>zs ws.\n          length zs = length ws \\<and>\n          length xs = length ys \\<and> length xs = n \\<longrightarrow>\n          scalar_product (xs @ zs) (ys @ ws) =\n          scalar_product xs ys + scalar_product zs ws", "apply(rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs ys zs.\n       \\<forall>ws.\n          length zs = length ws \\<and>\n          length xs = length ys \\<and> length xs = n \\<longrightarrow>\n          scalar_product (xs @ zs) (ys @ ws) =\n          scalar_product xs ys + scalar_product zs ws", "apply(rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs ys zs ws.\n       length zs = length ws \\<and>\n       length xs = length ys \\<and> length xs = n \\<longrightarrow>\n       scalar_product (xs @ zs) (ys @ ws) =\n       scalar_product xs ys + scalar_product zs ws", "proof(induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs ys zs ws.\n       length zs = length ws \\<and>\n       length xs = length ys \\<and> length xs = 0 \\<longrightarrow>\n       scalar_product (xs @ zs) (ys @ ws) =\n       scalar_product xs ys + scalar_product zs ws\n 2. \\<And>n xs ys zs ws.\n       (\\<And>xs ys zs ws.\n           length zs = length ws \\<and>\n           length xs = length ys \\<and> length xs = n \\<longrightarrow>\n           scalar_product (xs @ zs) (ys @ ws) =\n           scalar_product xs ys + scalar_product zs ws) \\<Longrightarrow>\n       length zs = length ws \\<and>\n       length xs = length ys \\<and> length xs = Suc n \\<longrightarrow>\n       scalar_product (xs @ zs) (ys @ ws) =\n       scalar_product xs ys + scalar_product zs ws", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>xs ys zs ws.\n       length zs = length ws \\<and>\n       length xs = length ys \\<and> length xs = 0 \\<longrightarrow>\n       scalar_product (xs @ zs) (ys @ ws) =\n       scalar_product xs ys + scalar_product zs ws\n 2. \\<And>n xs ys zs ws.\n       (\\<And>xs ys zs ws.\n           length zs = length ws \\<and>\n           length xs = length ys \\<and> length xs = n \\<longrightarrow>\n           scalar_product (xs @ zs) (ys @ ws) =\n           scalar_product xs ys + scalar_product zs ws) \\<Longrightarrow>\n       length zs = length ws \\<and>\n       length xs = length ys \\<and> length xs = Suc n \\<longrightarrow>\n       scalar_product (xs @ zs) (ys @ ws) =\n       scalar_product xs ys + scalar_product zs ws", "have \"(length zs = length ws) \\<and>(length xs = length ys) \\<and>(length xs = 0)\n          \\<Longrightarrow>\n           (scalar_product (xs@zs) (ys@ws))\n                                   = (scalar_product xs ys)\n                                          +(scalar_product zs ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length zs = length ws \\<and>\n    length xs = length ys \\<and> length xs = 0 \\<Longrightarrow>\n    scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. length zs = length ws \\<and>\n    length xs = length ys \\<and> length xs = 0 \\<Longrightarrow>\n    scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "assume assms:\"(length zs = length ws)\\<and>(length xs = length ys)\n                                        \\<and>(length xs = 0)\""], ["proof (state)\nthis:\n  length zs = length ws \\<and> length xs = length ys \\<and> length xs = 0\n\ngoal (1 subgoal):\n 1. length zs = length ws \\<and>\n    length xs = length ys \\<and> length xs = 0 \\<Longrightarrow>\n    scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "have 1:\"xs = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = []", "using assms"], ["proof (prove)\nusing this:\n  length zs = length ws \\<and> length xs = length ys \\<and> length xs = 0\n\ngoal (1 subgoal):\n 1. xs = []", "by auto"], ["proof (state)\nthis:\n  xs = []\n\ngoal (1 subgoal):\n 1. length zs = length ws \\<and>\n    length xs = length ys \\<and> length xs = 0 \\<Longrightarrow>\n    scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "moreover"], ["proof (state)\nthis:\n  xs = []\n\ngoal (1 subgoal):\n 1. length zs = length ws \\<and>\n    length xs = length ys \\<and> length xs = 0 \\<Longrightarrow>\n    scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "have 2:\"ys = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ys = []", "using assms"], ["proof (prove)\nusing this:\n  length zs = length ws \\<and> length xs = length ys \\<and> length xs = 0\n\ngoal (1 subgoal):\n 1. ys = []", "by auto"], ["proof (state)\nthis:\n  ys = []\n\ngoal (1 subgoal):\n 1. length zs = length ws \\<and>\n    length xs = length ys \\<and> length xs = 0 \\<Longrightarrow>\n    scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "ultimately"], ["proof (chain)\npicking this:\n  xs = []\n  ys = []", "have \"scalar_product xs ys = zer\""], ["proof (prove)\nusing this:\n  xs = []\n  ys = []\n\ngoal (1 subgoal):\n 1. scalar_product xs ys = zer", "unfolding scalar_product_def scalar_prodI_def zip_def"], ["proof (prove)\nusing this:\n  xs = []\n  ys = []\n\ngoal (1 subgoal):\n 1. foldr (\\<lambda>(x, y). (+) (x * y))\n     (rec_list (\\<lambda>xs. [])\n       (\\<lambda>y ys ysa. case_list [] (\\<lambda>z zs. (z, y) # ysa zs)) ys\n       xs)\n     zer =\n    zer", "by auto"], ["proof (state)\nthis:\n  scalar_product xs ys = zer\n\ngoal (1 subgoal):\n 1. length zs = length ws \\<and>\n    length xs = length ys \\<and> length xs = 0 \\<Longrightarrow>\n    scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "then"], ["proof (chain)\npicking this:\n  scalar_product xs ys = zer", "have \"(scalar_product xs ys)+(scalar_product zs ws) \n                                       = (scalar_product zs ws)\""], ["proof (prove)\nusing this:\n  scalar_product xs ys = zer\n\ngoal (1 subgoal):\n 1. scalar_product xs ys + scalar_product zs ws = scalar_product zs ws", "using plus_left_id"], ["proof (prove)\nusing this:\n  scalar_product xs ys = zer\n  zer + ?x = ?x\n\ngoal (1 subgoal):\n 1. scalar_product xs ys + scalar_product zs ws = scalar_product zs ws", "by auto"], ["proof (state)\nthis:\n  scalar_product xs ys + scalar_product zs ws = scalar_product zs ws\n\ngoal (1 subgoal):\n 1. length zs = length ws \\<and>\n    length xs = length ys \\<and> length xs = 0 \\<Longrightarrow>\n    scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "moreover"], ["proof (state)\nthis:\n  scalar_product xs ys + scalar_product zs ws = scalar_product zs ws\n\ngoal (1 subgoal):\n 1. length zs = length ws \\<and>\n    length xs = length ys \\<and> length xs = 0 \\<Longrightarrow>\n    scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "have \"(scalar_product (xs@zs) (ys@ws)) = (scalar_product zs ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. scalar_product (xs @ zs) (ys @ ws) = scalar_product zs ws", "using 1 2"], ["proof (prove)\nusing this:\n  xs = []\n  ys = []\n\ngoal (1 subgoal):\n 1. scalar_product (xs @ zs) (ys @ ws) = scalar_product zs ws", "by auto"], ["proof (state)\nthis:\n  scalar_product (xs @ zs) (ys @ ws) = scalar_product zs ws\n\ngoal (1 subgoal):\n 1. length zs = length ws \\<and>\n    length xs = length ys \\<and> length xs = 0 \\<Longrightarrow>\n    scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "ultimately"], ["proof (chain)\npicking this:\n  scalar_product xs ys + scalar_product zs ws = scalar_product zs ws\n  scalar_product (xs @ zs) (ys @ ws) = scalar_product zs ws", "show ?thesis"], ["proof (prove)\nusing this:\n  scalar_product xs ys + scalar_product zs ws = scalar_product zs ws\n  scalar_product (xs @ zs) (ys @ ws) = scalar_product zs ws\n\ngoal (1 subgoal):\n 1. scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "by auto"], ["proof (state)\nthis:\n  scalar_product (xs @ zs) (ys @ ws) =\n  scalar_product xs ys + scalar_product zs ws\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length zs = length ws \\<and>\n  length xs = length ys \\<and> length xs = 0 \\<Longrightarrow>\n  scalar_product (xs @ zs) (ys @ ws) =\n  scalar_product xs ys + scalar_product zs ws\n\ngoal (2 subgoals):\n 1. \\<And>xs ys zs ws.\n       length zs = length ws \\<and>\n       length xs = length ys \\<and> length xs = 0 \\<longrightarrow>\n       scalar_product (xs @ zs) (ys @ ws) =\n       scalar_product xs ys + scalar_product zs ws\n 2. \\<And>n xs ys zs ws.\n       (\\<And>xs ys zs ws.\n           length zs = length ws \\<and>\n           length xs = length ys \\<and> length xs = n \\<longrightarrow>\n           scalar_product (xs @ zs) (ys @ ws) =\n           scalar_product xs ys + scalar_product zs ws) \\<Longrightarrow>\n       length zs = length ws \\<and>\n       length xs = length ys \\<and> length xs = Suc n \\<longrightarrow>\n       scalar_product (xs @ zs) (ys @ ws) =\n       scalar_product xs ys + scalar_product zs ws", "then"], ["proof (chain)\npicking this:\n  length zs = length ws \\<and>\n  length xs = length ys \\<and> length xs = 0 \\<Longrightarrow>\n  scalar_product (xs @ zs) (ys @ ws) =\n  scalar_product xs ys + scalar_product zs ws", "show ?case"], ["proof (prove)\nusing this:\n  length zs = length ws \\<and>\n  length xs = length ys \\<and> length xs = 0 \\<Longrightarrow>\n  scalar_product (xs @ zs) (ys @ ws) =\n  scalar_product xs ys + scalar_product zs ws\n\ngoal (1 subgoal):\n 1. length zs = length ws \\<and>\n    length xs = length ys \\<and> length xs = 0 \\<longrightarrow>\n    scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "by auto"], ["proof (state)\nthis:\n  length zs = length ws \\<and>\n  length xs = length ys \\<and> length xs = 0 \\<longrightarrow>\n  scalar_product (xs @ zs) (ys @ ws) =\n  scalar_product xs ys + scalar_product zs ws\n\ngoal (1 subgoal):\n 1. \\<And>n xs ys zs ws.\n       (\\<And>xs ys zs ws.\n           length zs = length ws \\<and>\n           length xs = length ys \\<and> length xs = n \\<longrightarrow>\n           scalar_product (xs @ zs) (ys @ ws) =\n           scalar_product xs ys + scalar_product zs ws) \\<Longrightarrow>\n       length zs = length ws \\<and>\n       length xs = length ys \\<and> length xs = Suc n \\<longrightarrow>\n       scalar_product (xs @ zs) (ys @ ws) =\n       scalar_product xs ys + scalar_product zs ws", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n xs ys zs ws.\n       (\\<And>xs ys zs ws.\n           length zs = length ws \\<and>\n           length xs = length ys \\<and> length xs = n \\<longrightarrow>\n           scalar_product (xs @ zs) (ys @ ws) =\n           scalar_product xs ys + scalar_product zs ws) \\<Longrightarrow>\n       length zs = length ws \\<and>\n       length xs = length ys \\<and> length xs = Suc n \\<longrightarrow>\n       scalar_product (xs @ zs) (ys @ ws) =\n       scalar_product xs ys + scalar_product zs ws", "case (Suc k)"], ["proof (state)\nthis:\n  length ?zs = length ?ws \\<and>\n  length ?xs = length ?ys \\<and> length ?xs = k \\<longrightarrow>\n  scalar_product (?xs @ ?zs) (?ys @ ?ws) =\n  scalar_product ?xs ?ys + scalar_product ?zs ?ws\n\ngoal (1 subgoal):\n 1. \\<And>n xs ys zs ws.\n       (\\<And>xs ys zs ws.\n           length zs = length ws \\<and>\n           length xs = length ys \\<and> length xs = n \\<longrightarrow>\n           scalar_product (xs @ zs) (ys @ ws) =\n           scalar_product xs ys + scalar_product zs ws) \\<Longrightarrow>\n       length zs = length ws \\<and>\n       length xs = length ys \\<and> length xs = Suc n \\<longrightarrow>\n       scalar_product (xs @ zs) (ys @ ws) =\n       scalar_product xs ys + scalar_product zs ws", "have \"(length zs = length ws)\\<and>(length xs = length ys)\\<and>(length xs = (Suc k))  \\<Longrightarrow>\n        (scalar_product (xs@zs) (ys@ws))\n                                   = (scalar_product xs ys)\n                                      +(scalar_product zs ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length zs = length ws \\<and>\n    length xs = length ys \\<and> length xs = Suc k \\<Longrightarrow>\n    scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. length zs = length ws \\<and>\n    length xs = length ys \\<and> length xs = Suc k \\<Longrightarrow>\n    scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "assume assms:\"(length zs = length ws)\n                   \\<and>(length xs = length ys)\n                   \\<and>(length xs = (Suc k))\""], ["proof (state)\nthis:\n  length zs = length ws \\<and>\n  length xs = length ys \\<and> length xs = Suc k\n\ngoal (1 subgoal):\n 1. length zs = length ws \\<and>\n    length xs = length ys \\<and> length xs = Suc k \\<Longrightarrow>\n    scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "have \"\\<exists>x xss.(xs = x#xss)\\<and>(length xss = k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x xss. xs = x # xss \\<and> length xss = k", "using assms"], ["proof (prove)\nusing this:\n  length zs = length ws \\<and>\n  length xs = length ys \\<and> length xs = Suc k\n\ngoal (1 subgoal):\n 1. \\<exists>x xss. xs = x # xss \\<and> length xss = k", "by (metis Suc_length_conv)"], ["proof (state)\nthis:\n  \\<exists>x xss. xs = x # xss \\<and> length xss = k\n\ngoal (1 subgoal):\n 1. length zs = length ws \\<and>\n    length xs = length ys \\<and> length xs = Suc k \\<Longrightarrow>\n    scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "then"], ["proof (chain)\npicking this:\n  \\<exists>x xss. xs = x # xss \\<and> length xss = k", "obtain x xss where \"(xs = x#xss)\\<and>(length xss = k)\""], ["proof (prove)\nusing this:\n  \\<exists>x xss. xs = x # xss \\<and> length xss = k\n\ngoal (1 subgoal):\n 1. (\\<And>x xss.\n        xs = x # xss \\<and> length xss = k \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  xs = x # xss \\<and> length xss = k\n\ngoal (1 subgoal):\n 1. length zs = length ws \\<and>\n    length xs = length ys \\<and> length xs = Suc k \\<Longrightarrow>\n    scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "then"], ["proof (chain)\npicking this:\n  xs = x # xss \\<and> length xss = k", "have 1:\"(xs = x#xss)\\<and>(length xss = k)\""], ["proof (prove)\nusing this:\n  xs = x # xss \\<and> length xss = k\n\ngoal (1 subgoal):\n 1. xs = x # xss \\<and> length xss = k", "by auto"], ["proof (state)\nthis:\n  xs = x # xss \\<and> length xss = k\n\ngoal (1 subgoal):\n 1. length zs = length ws \\<and>\n    length xs = length ys \\<and> length xs = Suc k \\<Longrightarrow>\n    scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "have \"\\<exists>y yss.(ys = y#yss)\\<and>(length yss = k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y yss. ys = y # yss \\<and> length yss = k", "using assms"], ["proof (prove)\nusing this:\n  length zs = length ws \\<and>\n  length xs = length ys \\<and> length xs = Suc k\n\ngoal (1 subgoal):\n 1. \\<exists>y yss. ys = y # yss \\<and> length yss = k", "by (metis Suc_length_conv)"], ["proof (state)\nthis:\n  \\<exists>y yss. ys = y # yss \\<and> length yss = k\n\ngoal (1 subgoal):\n 1. length zs = length ws \\<and>\n    length xs = length ys \\<and> length xs = Suc k \\<Longrightarrow>\n    scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "then"], ["proof (chain)\npicking this:\n  \\<exists>y yss. ys = y # yss \\<and> length yss = k", "obtain y yss where \"(ys = y#yss)\\<and>(length yss = k)\""], ["proof (prove)\nusing this:\n  \\<exists>y yss. ys = y # yss \\<and> length yss = k\n\ngoal (1 subgoal):\n 1. (\\<And>y yss.\n        ys = y # yss \\<and> length yss = k \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  ys = y # yss \\<and> length yss = k\n\ngoal (1 subgoal):\n 1. length zs = length ws \\<and>\n    length xs = length ys \\<and> length xs = Suc k \\<Longrightarrow>\n    scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "then"], ["proof (chain)\npicking this:\n  ys = y # yss \\<and> length yss = k", "have 2:\"(ys = y#yss)\\<and>(length yss = k)\""], ["proof (prove)\nusing this:\n  ys = y # yss \\<and> length yss = k\n\ngoal (1 subgoal):\n 1. ys = y # yss \\<and> length yss = k", "by auto"], ["proof (state)\nthis:\n  ys = y # yss \\<and> length yss = k\n\ngoal (1 subgoal):\n 1. length zs = length ws \\<and>\n    length xs = length ys \\<and> length xs = Suc k \\<Longrightarrow>\n    scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "with 1"], ["proof (chain)\npicking this:\n  xs = x # xss \\<and> length xss = k\n  ys = y # yss \\<and> length yss = k", "have \"length xss = length yss \\<and> length xss = k\""], ["proof (prove)\nusing this:\n  xs = x # xss \\<and> length xss = k\n  ys = y # yss \\<and> length yss = k\n\ngoal (1 subgoal):\n 1. length xss = length yss \\<and> length xss = k", "by auto"], ["proof (state)\nthis:\n  length xss = length yss \\<and> length xss = k\n\ngoal (1 subgoal):\n 1. length zs = length ws \\<and>\n    length xs = length ys \\<and> length xs = Suc k \\<Longrightarrow>\n    scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "then"], ["proof (chain)\npicking this:\n  length xss = length yss \\<and> length xss = k", "have 3:\"(scalar_product (xss@zs) (yss@ws))\n                                   = (scalar_product xss yss)\n                                    +(scalar_product zs ws)\""], ["proof (prove)\nusing this:\n  length xss = length yss \\<and> length xss = k\n\ngoal (1 subgoal):\n 1. scalar_product (xss @ zs) (yss @ ws) =\n    scalar_product xss yss + scalar_product zs ws", "using 1 2 assms Suc"], ["proof (prove)\nusing this:\n  length xss = length yss \\<and> length xss = k\n  xs = x # xss \\<and> length xss = k\n  ys = y # yss \\<and> length yss = k\n  length zs = length ws \\<and>\n  length xs = length ys \\<and> length xs = Suc k\n  length ?zs = length ?ws \\<and>\n  length ?xs = length ?ys \\<and> length ?xs = k \\<longrightarrow>\n  scalar_product (?xs @ ?zs) (?ys @ ?ws) =\n  scalar_product ?xs ?ys + scalar_product ?zs ?ws\n\ngoal (1 subgoal):\n 1. scalar_product (xss @ zs) (yss @ ws) =\n    scalar_product xss yss + scalar_product zs ws", "by auto"], ["proof (state)\nthis:\n  scalar_product (xss @ zs) (yss @ ws) =\n  scalar_product xss yss + scalar_product zs ws\n\ngoal (1 subgoal):\n 1. length zs = length ws \\<and>\n    length xs = length ys \\<and> length xs = Suc k \\<Longrightarrow>\n    scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "then"], ["proof (chain)\npicking this:\n  scalar_product (xss @ zs) (yss @ ws) =\n  scalar_product xss yss + scalar_product zs ws", "have 4:\"(scalar_product ((x#xss)@zs) ((y#yss)@ws)) = \n                        (scalar_product (x#(xss@zs)) (y#(yss@ws)))\""], ["proof (prove)\nusing this:\n  scalar_product (xss @ zs) (yss @ ws) =\n  scalar_product xss yss + scalar_product zs ws\n\ngoal (1 subgoal):\n 1. scalar_product ((x # xss) @ zs) ((y # yss) @ ws) =\n    scalar_product (x # xss @ zs) (y # yss @ ws)", "by auto"], ["proof (state)\nthis:\n  scalar_product ((x # xss) @ zs) ((y # yss) @ ws) =\n  scalar_product (x # xss @ zs) (y # yss @ ws)\n\ngoal (1 subgoal):\n 1. length zs = length ws \\<and>\n    length xs = length ys \\<and> length xs = Suc k \\<Longrightarrow>\n    scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "then"], ["proof (chain)\npicking this:\n  scalar_product ((x # xss) @ zs) ((y # yss) @ ws) =\n  scalar_product (x # xss @ zs) (y # yss @ ws)", "have \"... =  (x*y) + (scalar_product (xss@zs) (yss@ws))\""], ["proof (prove)\nusing this:\n  scalar_product ((x # xss) @ zs) ((y # yss) @ ws) =\n  scalar_product (x # xss @ zs) (y # yss @ ws)\n\ngoal (1 subgoal):\n 1. scalar_product (x # xss @ zs) (y # yss @ ws) =\n    x * y + scalar_product (xss @ zs) (yss @ ws)", "unfolding scalar_product_def scalar_prodI_def"], ["proof (prove)\nusing this:\n  foldr (\\<lambda>(x, y). (+) (x * y))\n   (zip ((x # xss) @ zs) ((y # yss) @ ws)) zer =\n  foldr (\\<lambda>(x, y). (+) (x * y)) (zip (x # xss @ zs) (y # yss @ ws))\n   zer\n\ngoal (1 subgoal):\n 1. foldr (\\<lambda>(x, y). (+) (x * y)) (zip (x # xss @ zs) (y # yss @ ws))\n     zer =\n    x * y +\n    foldr (\\<lambda>(x, y). (+) (x * y)) (zip (xss @ zs) (yss @ ws)) zer", "using zip_Cons  scalar_prodI_def scalar_prod_cons"], ["proof (prove)\nusing this:\n  foldr (\\<lambda>(x, y). (+) (x * y))\n   (zip ((x # xss) @ zs) ((y # yss) @ ws)) zer =\n  foldr (\\<lambda>(x, y). (+) (x * y)) (zip (x # xss @ zs) (y # yss @ ws))\n   zer\n  length ?v = length ?w \\<Longrightarrow>\n  zip (?a # ?v) (?b # ?w) = (?a, ?b) # zip ?v ?w\n  scalar_prodI ?ze ?pl ?ti ?v ?w =\n  foldr (\\<lambda>(x, y). ?pl (?ti x y)) (zip ?v ?w) ?ze\n  scalar_prodI ?ze ?pl ?ti (?a # ?as) (?b # ?bs) =\n  ?pl (?ti ?a ?b) (scalar_prodI ?ze ?pl ?ti ?as ?bs)\n\ngoal (1 subgoal):\n 1. foldr (\\<lambda>(x, y). (+) (x * y)) (zip (x # xss @ zs) (y # yss @ ws))\n     zer =\n    x * y +\n    foldr (\\<lambda>(x, y). (+) (x * y)) (zip (xss @ zs) (yss @ ws)) zer", "by (metis)"], ["proof (state)\nthis:\n  scalar_product (x # xss @ zs) (y # yss @ ws) =\n  x * y + scalar_product (xss @ zs) (yss @ ws)\n\ngoal (1 subgoal):\n 1. length zs = length ws \\<and>\n    length xs = length ys \\<and> length xs = Suc k \\<Longrightarrow>\n    scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "with 4"], ["proof (chain)\npicking this:\n  scalar_product ((x # xss) @ zs) ((y # yss) @ ws) =\n  scalar_product (x # xss @ zs) (y # yss @ ws)\n  scalar_product (x # xss @ zs) (y # yss @ ws) =\n  x * y + scalar_product (xss @ zs) (yss @ ws)", "have 5:\"(scalar_product (xs@zs) ((ys)@ws))\n                       =  (x*y) + (scalar_product (xss@zs) (yss@ws))\""], ["proof (prove)\nusing this:\n  scalar_product ((x # xss) @ zs) ((y # yss) @ ws) =\n  scalar_product (x # xss @ zs) (y # yss @ ws)\n  scalar_product (x # xss @ zs) (y # yss @ ws) =\n  x * y + scalar_product (xss @ zs) (yss @ ws)\n\ngoal (1 subgoal):\n 1. scalar_product (xs @ zs) (ys @ ws) =\n    x * y + scalar_product (xss @ zs) (yss @ ws)", "using 1 2"], ["proof (prove)\nusing this:\n  scalar_product ((x # xss) @ zs) ((y # yss) @ ws) =\n  scalar_product (x # xss @ zs) (y # yss @ ws)\n  scalar_product (x # xss @ zs) (y # yss @ ws) =\n  x * y + scalar_product (xss @ zs) (yss @ ws)\n  xs = x # xss \\<and> length xss = k\n  ys = y # yss \\<and> length yss = k\n\ngoal (1 subgoal):\n 1. scalar_product (xs @ zs) (ys @ ws) =\n    x * y + scalar_product (xss @ zs) (yss @ ws)", "by auto"], ["proof (state)\nthis:\n  scalar_product (xs @ zs) (ys @ ws) =\n  x * y + scalar_product (xss @ zs) (yss @ ws)\n\ngoal (1 subgoal):\n 1. length zs = length ws \\<and>\n    length xs = length ys \\<and> length xs = Suc k \\<Longrightarrow>\n    scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "moreover"], ["proof (state)\nthis:\n  scalar_product (xs @ zs) (ys @ ws) =\n  x * y + scalar_product (xss @ zs) (yss @ ws)\n\ngoal (1 subgoal):\n 1. length zs = length ws \\<and>\n    length xs = length ys \\<and> length xs = Suc k \\<Longrightarrow>\n    scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "have \"(scalar_product xs ys) = (x*y) + (scalar_product xss yss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. scalar_product xs ys = x * y + scalar_product xss yss", "unfolding scalar_product_def scalar_prodI_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. foldr (\\<lambda>(x, y). (+) (x * y)) (zip xs ys) zer =\n    x * y + foldr (\\<lambda>(x, y). (+) (x * y)) (zip xss yss) zer", "using zip_Cons"], ["proof (prove)\nusing this:\n  length ?v = length ?w \\<Longrightarrow>\n  zip (?a # ?v) (?b # ?w) = (?a, ?b) # zip ?v ?w\n\ngoal (1 subgoal):\n 1. foldr (\\<lambda>(x, y). (+) (x * y)) (zip xs ys) zer =\n    x * y + foldr (\\<lambda>(x, y). (+) (x * y)) (zip xss yss) zer", "by (metis \"1\" \"2\" scalar_prodI_def scalar_prod_cons)"], ["proof (state)\nthis:\n  scalar_product xs ys = x * y + scalar_product xss yss\n\ngoal (1 subgoal):\n 1. length zs = length ws \\<and>\n    length xs = length ys \\<and> length xs = Suc k \\<Longrightarrow>\n    scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "moreover"], ["proof (state)\nthis:\n  scalar_product xs ys = x * y + scalar_product xss yss\n\ngoal (1 subgoal):\n 1. length zs = length ws \\<and>\n    length xs = length ys \\<and> length xs = Suc k \\<Longrightarrow>\n    scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "then"], ["proof (chain)\npicking this:\n  scalar_product xs ys = x * y + scalar_product xss yss", "have \"(scalar_product xs ys)+(scalar_product zs ws)\n                               =  (x*y) \n                                       + (scalar_product xss yss) \n                                       + (scalar_product zs ws)\""], ["proof (prove)\nusing this:\n  scalar_product xs ys = x * y + scalar_product xss yss\n\ngoal (1 subgoal):\n 1. scalar_product xs ys + scalar_product zs ws =\n    x * y + scalar_product xss yss + scalar_product zs ws", "by auto"], ["proof (state)\nthis:\n  scalar_product xs ys + scalar_product zs ws =\n  x * y + scalar_product xss yss + scalar_product zs ws\n\ngoal (1 subgoal):\n 1. length zs = length ws \\<and>\n    length xs = length ys \\<and> length xs = Suc k \\<Longrightarrow>\n    scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "ultimately"], ["proof (chain)\npicking this:\n  scalar_product (xs @ zs) (ys @ ws) =\n  x * y + scalar_product (xss @ zs) (yss @ ws)\n  scalar_product xs ys = x * y + scalar_product xss yss\n  scalar_product xs ys + scalar_product zs ws =\n  x * y + scalar_product xss yss + scalar_product zs ws", "show ?thesis"], ["proof (prove)\nusing this:\n  scalar_product (xs @ zs) (ys @ ws) =\n  x * y + scalar_product (xss @ zs) (yss @ ws)\n  scalar_product xs ys = x * y + scalar_product xss yss\n  scalar_product xs ys + scalar_product zs ws =\n  x * y + scalar_product xss yss + scalar_product zs ws\n\ngoal (1 subgoal):\n 1. scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "using 3 plus_assoc"], ["proof (prove)\nusing this:\n  scalar_product (xs @ zs) (ys @ ws) =\n  x * y + scalar_product (xss @ zs) (yss @ ws)\n  scalar_product xs ys = x * y + scalar_product xss yss\n  scalar_product xs ys + scalar_product zs ws =\n  x * y + scalar_product xss yss + scalar_product zs ws\n  scalar_product (xss @ zs) (yss @ ws) =\n  scalar_product xss yss + scalar_product zs ws\n  ?a + ?b + ?c = ?a + (?b + ?c)\n\ngoal (1 subgoal):\n 1. scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "by auto"], ["proof (state)\nthis:\n  scalar_product (xs @ zs) (ys @ ws) =\n  scalar_product xs ys + scalar_product zs ws\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length zs = length ws \\<and>\n  length xs = length ys \\<and> length xs = Suc k \\<Longrightarrow>\n  scalar_product (xs @ zs) (ys @ ws) =\n  scalar_product xs ys + scalar_product zs ws\n\ngoal (1 subgoal):\n 1. \\<And>n xs ys zs ws.\n       (\\<And>xs ys zs ws.\n           length zs = length ws \\<and>\n           length xs = length ys \\<and> length xs = n \\<longrightarrow>\n           scalar_product (xs @ zs) (ys @ ws) =\n           scalar_product xs ys + scalar_product zs ws) \\<Longrightarrow>\n       length zs = length ws \\<and>\n       length xs = length ys \\<and> length xs = Suc n \\<longrightarrow>\n       scalar_product (xs @ zs) (ys @ ws) =\n       scalar_product xs ys + scalar_product zs ws", "then"], ["proof (chain)\npicking this:\n  length zs = length ws \\<and>\n  length xs = length ys \\<and> length xs = Suc k \\<Longrightarrow>\n  scalar_product (xs @ zs) (ys @ ws) =\n  scalar_product xs ys + scalar_product zs ws", "show ?case"], ["proof (prove)\nusing this:\n  length zs = length ws \\<and>\n  length xs = length ys \\<and> length xs = Suc k \\<Longrightarrow>\n  scalar_product (xs @ zs) (ys @ ws) =\n  scalar_product xs ys + scalar_product zs ws\n\ngoal (1 subgoal):\n 1. length zs = length ws \\<and>\n    length xs = length ys \\<and> length xs = Suc k \\<longrightarrow>\n    scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "by auto"], ["proof (state)\nthis:\n  length zs = length ws \\<and>\n  length xs = length ys \\<and> length xs = Suc k \\<longrightarrow>\n  scalar_product (xs @ zs) (ys @ ws) =\n  scalar_product xs ys + scalar_product zs ws\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma effective_scalar_product_append:\nassumes \"length zs = length ws\" and  \"(length xs = length ys)\"   \n shows \"(scalar_product (xs@zs) (ys@ws)) = (scalar_product xs ys)+(scalar_product zs ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "using scalar_product_append assms"], ["proof (prove)\nusing this:\n  \\<forall>xs ys zs ws.\n     length zs = length ws \\<and>\n     length xs = length ys \\<and> length xs = ?n \\<longrightarrow>\n     scalar_product (xs @ zs) (ys @ ws) =\n     scalar_product xs ys + scalar_product zs ws\n  length zs = length ws\n  length xs = length ys\n\ngoal (1 subgoal):\n 1. scalar_product (xs @ zs) (ys @ ws) =\n    scalar_product xs ys + scalar_product zs ws", "by auto"], ["", "lemma scalar_product_distributivity:\n\"\\<forall>v1 v2 w1 w2.((length v1 = length v2)\\<and>(length v1 = n)\\<and> (length w1 = length w2)\n           \\<longrightarrow>  (scalar_product v1 v2)*(scalar_product w1 w2)\n      = scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v1 v2 w1 w2.\n       length v1 = length v2 \\<and>\n       length v1 = n \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "apply (rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v1.\n       \\<forall>v2 w1 w2.\n          length v1 = length v2 \\<and>\n          length v1 = n \\<and> length w1 = length w2 \\<longrightarrow>\n          scalar_product v1 v2 * scalar_product w1 w2 =\n          scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "apply (rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v1 v2.\n       \\<forall>w1 w2.\n          length v1 = length v2 \\<and>\n          length v1 = n \\<and> length w1 = length w2 \\<longrightarrow>\n          scalar_product v1 v2 * scalar_product w1 w2 =\n          scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "apply (rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v1 v2 w1.\n       \\<forall>w2.\n          length v1 = length v2 \\<and>\n          length v1 = n \\<and> length w1 = length w2 \\<longrightarrow>\n          scalar_product v1 v2 * scalar_product w1 w2 =\n          scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "apply (rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v1 v2 w1 w2.\n       length v1 = length v2 \\<and>\n       length v1 = n \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "proof(induct \"n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>v1 v2 w1 w2.\n       length v1 = length v2 \\<and>\n       length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)\n 2. \\<And>n v1 v2 w1 w2.\n       (\\<And>v1 v2 w1 w2.\n           length v1 = length v2 \\<and>\n           length v1 = n \\<and> length w1 = length w2 \\<longrightarrow>\n           scalar_product v1 v2 * scalar_product w1 w2 =\n           scalar_product (vec_vec_Tensor v1 w1)\n            (vec_vec_Tensor v2 w2)) \\<Longrightarrow>\n       length v1 = length v2 \\<and>\n       length v1 = Suc n \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>v1 v2 w1 w2.\n       length v1 = length v2 \\<and>\n       length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)\n 2. \\<And>n v1 v2 w1 w2.\n       (\\<And>v1 v2 w1 w2.\n           length v1 = length v2 \\<and>\n           length v1 = n \\<and> length w1 = length w2 \\<longrightarrow>\n           scalar_product v1 v2 * scalar_product w1 w2 =\n           scalar_product (vec_vec_Tensor v1 w1)\n            (vec_vec_Tensor v2 w2)) \\<Longrightarrow>\n       length v1 = length v2 \\<and>\n       length v1 = Suc n \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "have \"((length v1 = length v2)\\<and>(length v1 = 0)\\<and> (length w1 = length w2))\n           \\<longrightarrow>length v1 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n    length v1 = 0", "using 0"], ["proof (prove)\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n    length v1 = 0", "by auto"], ["proof (state)\nthis:\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  length v1 = 0\n\ngoal (2 subgoals):\n 1. \\<And>v1 v2 w1 w2.\n       length v1 = length v2 \\<and>\n       length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)\n 2. \\<And>n v1 v2 w1 w2.\n       (\\<And>v1 v2 w1 w2.\n           length v1 = length v2 \\<and>\n           length v1 = n \\<and> length w1 = length w2 \\<longrightarrow>\n           scalar_product v1 v2 * scalar_product w1 w2 =\n           scalar_product (vec_vec_Tensor v1 w1)\n            (vec_vec_Tensor v2 w2)) \\<Longrightarrow>\n       length v1 = length v2 \\<and>\n       length v1 = Suc n \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "then"], ["proof (chain)\npicking this:\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  length v1 = 0", "have 1:\"((length v1 = length v2)\n                 \\<and>(length v1 = 0)\n                 \\<and>(length w1 = length w2))\n                        \\<longrightarrow>v1 = []\""], ["proof (prove)\nusing this:\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  length v1 = 0\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n    v1 = []", "by auto"], ["proof (state)\nthis:\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  v1 = []\n\ngoal (2 subgoals):\n 1. \\<And>v1 v2 w1 w2.\n       length v1 = length v2 \\<and>\n       length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)\n 2. \\<And>n v1 v2 w1 w2.\n       (\\<And>v1 v2 w1 w2.\n           length v1 = length v2 \\<and>\n           length v1 = n \\<and> length w1 = length w2 \\<longrightarrow>\n           scalar_product v1 v2 * scalar_product w1 w2 =\n           scalar_product (vec_vec_Tensor v1 w1)\n            (vec_vec_Tensor v2 w2)) \\<Longrightarrow>\n       length v1 = length v2 \\<and>\n       length v1 = Suc n \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "moreover"], ["proof (state)\nthis:\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  v1 = []\n\ngoal (2 subgoals):\n 1. \\<And>v1 v2 w1 w2.\n       length v1 = length v2 \\<and>\n       length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)\n 2. \\<And>n v1 v2 w1 w2.\n       (\\<And>v1 v2 w1 w2.\n           length v1 = length v2 \\<and>\n           length v1 = n \\<and> length w1 = length w2 \\<longrightarrow>\n           scalar_product v1 v2 * scalar_product w1 w2 =\n           scalar_product (vec_vec_Tensor v1 w1)\n            (vec_vec_Tensor v2 w2)) \\<Longrightarrow>\n       length v1 = length v2 \\<and>\n       length v1 = Suc n \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "have \"((length v1 = length v2)\n                   \\<and>(length v1 = 0)\n                   \\<and>(length w1 = length w2))\n           \\<longrightarrow>length v2 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n    length v2 = 0", "using 0"], ["proof (prove)\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n    length v2 = 0", "by auto"], ["proof (state)\nthis:\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  length v2 = 0\n\ngoal (2 subgoals):\n 1. \\<And>v1 v2 w1 w2.\n       length v1 = length v2 \\<and>\n       length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)\n 2. \\<And>n v1 v2 w1 w2.\n       (\\<And>v1 v2 w1 w2.\n           length v1 = length v2 \\<and>\n           length v1 = n \\<and> length w1 = length w2 \\<longrightarrow>\n           scalar_product v1 v2 * scalar_product w1 w2 =\n           scalar_product (vec_vec_Tensor v1 w1)\n            (vec_vec_Tensor v2 w2)) \\<Longrightarrow>\n       length v1 = length v2 \\<and>\n       length v1 = Suc n \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "moreover"], ["proof (state)\nthis:\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  length v2 = 0\n\ngoal (2 subgoals):\n 1. \\<And>v1 v2 w1 w2.\n       length v1 = length v2 \\<and>\n       length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)\n 2. \\<And>n v1 v2 w1 w2.\n       (\\<And>v1 v2 w1 w2.\n           length v1 = length v2 \\<and>\n           length v1 = n \\<and> length w1 = length w2 \\<longrightarrow>\n           scalar_product v1 v2 * scalar_product w1 w2 =\n           scalar_product (vec_vec_Tensor v1 w1)\n            (vec_vec_Tensor v2 w2)) \\<Longrightarrow>\n       length v1 = length v2 \\<and>\n       length v1 = Suc n \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "then"], ["proof (chain)\npicking this:\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  length v2 = 0", "have 2:\"((length v1 = length v2)\n                          \\<and>(length v1 = 0)\n                          \\<and>(length w1 = length w2))\n                                    \\<longrightarrow>v2 = []\""], ["proof (prove)\nusing this:\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  length v2 = 0\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n    v2 = []", "by auto"], ["proof (state)\nthis:\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  v2 = []\n\ngoal (2 subgoals):\n 1. \\<And>v1 v2 w1 w2.\n       length v1 = length v2 \\<and>\n       length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)\n 2. \\<And>n v1 v2 w1 w2.\n       (\\<And>v1 v2 w1 w2.\n           length v1 = length v2 \\<and>\n           length v1 = n \\<and> length w1 = length w2 \\<longrightarrow>\n           scalar_product v1 v2 * scalar_product w1 w2 =\n           scalar_product (vec_vec_Tensor v1 w1)\n            (vec_vec_Tensor v2 w2)) \\<Longrightarrow>\n       length v1 = length v2 \\<and>\n       length v1 = Suc n \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "ultimately"], ["proof (chain)\npicking this:\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  v1 = []\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  length v2 = 0\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  v2 = []", "have 3:\n         \"((length v1 = length v2)\\<and>(length v1 = 0)\\<and> (length w1 = length w2))\n           \\<longrightarrow>scalar_product v1 v2 = zer\""], ["proof (prove)\nusing this:\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  v1 = []\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  length v2 = 0\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  v2 = []\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n    scalar_product v1 v2 = zer", "unfolding scalar_product_def scalar_prodI_def"], ["proof (prove)\nusing this:\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  v1 = []\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  length v2 = 0\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  v2 = []\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n    foldr (\\<lambda>(x, y). (+) (x * y)) (zip v1 v2) zer = zer", "using zip_Nil"], ["proof (prove)\nusing this:\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  v1 = []\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  length v2 = 0\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  v2 = []\n  zip [] [] = []\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n    foldr (\\<lambda>(x, y). (+) (x * y)) (zip v1 v2) zer = zer", "by auto"], ["proof (state)\nthis:\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  scalar_product v1 v2 = zer\n\ngoal (2 subgoals):\n 1. \\<And>v1 v2 w1 w2.\n       length v1 = length v2 \\<and>\n       length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)\n 2. \\<And>n v1 v2 w1 w2.\n       (\\<And>v1 v2 w1 w2.\n           length v1 = length v2 \\<and>\n           length v1 = n \\<and> length w1 = length w2 \\<longrightarrow>\n           scalar_product v1 v2 * scalar_product w1 w2 =\n           scalar_product (vec_vec_Tensor v1 w1)\n            (vec_vec_Tensor v2 w2)) \\<Longrightarrow>\n       length v1 = length v2 \\<and>\n       length v1 = Suc n \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "then"], ["proof (chain)\npicking this:\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  scalar_product v1 v2 = zer", "have 4:\"f zer (scalar_product w1 w2) = zer\""], ["proof (prove)\nusing this:\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  scalar_product v1 v2 = zer\n\ngoal (1 subgoal):\n 1. zer * scalar_product w1 w2 = zer", "using zer_left_mult"], ["proof (prove)\nusing this:\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  scalar_product v1 v2 = zer\n  zer * ?x = zer\n\ngoal (1 subgoal):\n 1. zer * scalar_product w1 w2 = zer", "by auto"], ["proof (state)\nthis:\n  zer * scalar_product w1 w2 = zer\n\ngoal (2 subgoals):\n 1. \\<And>v1 v2 w1 w2.\n       length v1 = length v2 \\<and>\n       length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)\n 2. \\<And>n v1 v2 w1 w2.\n       (\\<And>v1 v2 w1 w2.\n           length v1 = length v2 \\<and>\n           length v1 = n \\<and> length w1 = length w2 \\<longrightarrow>\n           scalar_product v1 v2 * scalar_product w1 w2 =\n           scalar_product (vec_vec_Tensor v1 w1)\n            (vec_vec_Tensor v2 w2)) \\<Longrightarrow>\n       length v1 = length v2 \\<and>\n       length v1 = Suc n \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "have \"((length v1 = length v2)\\<and>(length v1 = 0)\\<and> (length w1 = length w2))\n           \\<longrightarrow>vec_vec_Tensor v1 w1 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n    vec_vec_Tensor v1 w1 = []", "using 1"], ["proof (prove)\nusing this:\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  v1 = []\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n    vec_vec_Tensor v1 w1 = []", "by auto"], ["proof (state)\nthis:\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  vec_vec_Tensor v1 w1 = []\n\ngoal (2 subgoals):\n 1. \\<And>v1 v2 w1 w2.\n       length v1 = length v2 \\<and>\n       length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)\n 2. \\<And>n v1 v2 w1 w2.\n       (\\<And>v1 v2 w1 w2.\n           length v1 = length v2 \\<and>\n           length v1 = n \\<and> length w1 = length w2 \\<longrightarrow>\n           scalar_product v1 v2 * scalar_product w1 w2 =\n           scalar_product (vec_vec_Tensor v1 w1)\n            (vec_vec_Tensor v2 w2)) \\<Longrightarrow>\n       length v1 = length v2 \\<and>\n       length v1 = Suc n \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "moreover"], ["proof (state)\nthis:\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  vec_vec_Tensor v1 w1 = []\n\ngoal (2 subgoals):\n 1. \\<And>v1 v2 w1 w2.\n       length v1 = length v2 \\<and>\n       length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)\n 2. \\<And>n v1 v2 w1 w2.\n       (\\<And>v1 v2 w1 w2.\n           length v1 = length v2 \\<and>\n           length v1 = n \\<and> length w1 = length w2 \\<longrightarrow>\n           scalar_product v1 v2 * scalar_product w1 w2 =\n           scalar_product (vec_vec_Tensor v1 w1)\n            (vec_vec_Tensor v2 w2)) \\<Longrightarrow>\n       length v1 = length v2 \\<and>\n       length v1 = Suc n \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "have \"((length v1 = length v2)\n                   \\<and>(length v1 = 0)\n                   \\<and>(length w1 = length w2))\n                    \\<longrightarrow>vec_vec_Tensor v2 w2 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n    vec_vec_Tensor v2 w2 = []", "using 2"], ["proof (prove)\nusing this:\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  v2 = []\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n    vec_vec_Tensor v2 w2 = []", "by auto"], ["proof (state)\nthis:\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  vec_vec_Tensor v2 w2 = []\n\ngoal (2 subgoals):\n 1. \\<And>v1 v2 w1 w2.\n       length v1 = length v2 \\<and>\n       length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)\n 2. \\<And>n v1 v2 w1 w2.\n       (\\<And>v1 v2 w1 w2.\n           length v1 = length v2 \\<and>\n           length v1 = n \\<and> length w1 = length w2 \\<longrightarrow>\n           scalar_product v1 v2 * scalar_product w1 w2 =\n           scalar_product (vec_vec_Tensor v1 w1)\n            (vec_vec_Tensor v2 w2)) \\<Longrightarrow>\n       length v1 = length v2 \\<and>\n       length v1 = Suc n \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "ultimately"], ["proof (chain)\npicking this:\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  vec_vec_Tensor v1 w1 = []\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  vec_vec_Tensor v2 w2 = []", "have \"((length v1 = length v2)\n                      \\<and>(length v1 = 0)\n                      \\<and>(length w1 = length w2))\n                         \\<longrightarrow> scalar_product \n                                 (vec_vec_Tensor v1 w1) \n                                 (vec_vec_Tensor v2 w2)  = zer\""], ["proof (prove)\nusing this:\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  vec_vec_Tensor v1 w1 = []\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  vec_vec_Tensor v2 w2 = []\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2) = zer", "unfolding scalar_product_def scalar_prodI_def"], ["proof (prove)\nusing this:\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  vec_vec_Tensor v1 w1 = []\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  vec_vec_Tensor v2 w2 = []\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n    foldr (\\<lambda>(x, y). (+) (x * y))\n     (zip (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)) zer =\n    zer", "using zip_Nil"], ["proof (prove)\nusing this:\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  vec_vec_Tensor v1 w1 = []\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  vec_vec_Tensor v2 w2 = []\n  zip [] [] = []\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n    foldr (\\<lambda>(x, y). (+) (x * y))\n     (zip (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)) zer =\n    zer", "by auto"], ["proof (state)\nthis:\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2) = zer\n\ngoal (2 subgoals):\n 1. \\<And>v1 v2 w1 w2.\n       length v1 = length v2 \\<and>\n       length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)\n 2. \\<And>n v1 v2 w1 w2.\n       (\\<And>v1 v2 w1 w2.\n           length v1 = length v2 \\<and>\n           length v1 = n \\<and> length w1 = length w2 \\<longrightarrow>\n           scalar_product v1 v2 * scalar_product w1 w2 =\n           scalar_product (vec_vec_Tensor v1 w1)\n            (vec_vec_Tensor v2 w2)) \\<Longrightarrow>\n       length v1 = length v2 \\<and>\n       length v1 = Suc n \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "with 3 4"], ["proof (chain)\npicking this:\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  scalar_product v1 v2 = zer\n  zer * scalar_product w1 w2 = zer\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2) = zer", "show ?case"], ["proof (prove)\nusing this:\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  scalar_product v1 v2 = zer\n  zer * scalar_product w1 w2 = zer\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2) = zer\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "by auto"], ["proof (state)\nthis:\n  length v1 = length v2 \\<and>\n  length v1 = 0 \\<and> length w1 = length w2 \\<longrightarrow>\n  scalar_product v1 v2 * scalar_product w1 w2 =\n  scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)\n\ngoal (1 subgoal):\n 1. \\<And>n v1 v2 w1 w2.\n       (\\<And>v1 v2 w1 w2.\n           length v1 = length v2 \\<and>\n           length v1 = n \\<and> length w1 = length w2 \\<longrightarrow>\n           scalar_product v1 v2 * scalar_product w1 w2 =\n           scalar_product (vec_vec_Tensor v1 w1)\n            (vec_vec_Tensor v2 w2)) \\<Longrightarrow>\n       length v1 = length v2 \\<and>\n       length v1 = Suc n \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n v1 v2 w1 w2.\n       (\\<And>v1 v2 w1 w2.\n           length v1 = length v2 \\<and>\n           length v1 = n \\<and> length w1 = length w2 \\<longrightarrow>\n           scalar_product v1 v2 * scalar_product w1 w2 =\n           scalar_product (vec_vec_Tensor v1 w1)\n            (vec_vec_Tensor v2 w2)) \\<Longrightarrow>\n       length v1 = length v2 \\<and>\n       length v1 = Suc n \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "case (Suc k)"], ["proof (state)\nthis:\n  length ?v1.0 = length ?v2.0 \\<and>\n  length ?v1.0 = k \\<and> length ?w1.0 = length ?w2.0 \\<longrightarrow>\n  scalar_product ?v1.0 ?v2.0 * scalar_product ?w1.0 ?w2.0 =\n  scalar_product (vec_vec_Tensor ?v1.0 ?w1.0) (vec_vec_Tensor ?v2.0 ?w2.0)\n\ngoal (1 subgoal):\n 1. \\<And>n v1 v2 w1 w2.\n       (\\<And>v1 v2 w1 w2.\n           length v1 = length v2 \\<and>\n           length v1 = n \\<and> length w1 = length w2 \\<longrightarrow>\n           scalar_product v1 v2 * scalar_product w1 w2 =\n           scalar_product (vec_vec_Tensor v1 w1)\n            (vec_vec_Tensor v2 w2)) \\<Longrightarrow>\n       length v1 = length v2 \\<and>\n       length v1 = Suc n \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "have \"((length v1 = length v2)\\<and>(length v1 = Suc k)\n                    \\<and> (length w1 = length w2))\n           \\<Longrightarrow>  f (scalar_product v1 v2) (scalar_product w1 w2)\n      = scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "assume assms:\"((length v1 = length v2)\\<and>(length v1 = Suc k)\n                    \\<and> (length w1 = length w2))\""], ["proof (state)\nthis:\n  length v1 = length v2 \\<and>\n  length v1 = Suc k \\<and> length w1 = length w2\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "have \"length v1 = Suc k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length v1 = Suc k", "using Suc assms"], ["proof (prove)\nusing this:\n  length ?v1.0 = length ?v2.0 \\<and>\n  length ?v1.0 = k \\<and> length ?w1.0 = length ?w2.0 \\<longrightarrow>\n  scalar_product ?v1.0 ?v2.0 * scalar_product ?w1.0 ?w2.0 =\n  scalar_product (vec_vec_Tensor ?v1.0 ?w1.0) (vec_vec_Tensor ?v2.0 ?w2.0)\n  length v1 = length v2 \\<and>\n  length v1 = Suc k \\<and> length w1 = length w2\n\ngoal (1 subgoal):\n 1. length v1 = Suc k", "by auto"], ["proof (state)\nthis:\n  length v1 = Suc k\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "then"], ["proof (chain)\npicking this:\n  length v1 = Suc k", "have \"(\\<exists>a1 u1.(v1 = a1#u1)\\<and>(length u1 = k))\""], ["proof (prove)\nusing this:\n  length v1 = Suc k\n\ngoal (1 subgoal):\n 1. \\<exists>a1 u1. v1 = a1 # u1 \\<and> length u1 = k", "using assms Suc_length_conv"], ["proof (prove)\nusing this:\n  length v1 = Suc k\n  length v1 = length v2 \\<and>\n  length v1 = Suc k \\<and> length w1 = length w2\n  (Suc ?n = length ?xs) =\n  (\\<exists>y ys. ?xs = y # ys \\<and> length ys = ?n)\n\ngoal (1 subgoal):\n 1. \\<exists>a1 u1. v1 = a1 # u1 \\<and> length u1 = k", "by metis"], ["proof (state)\nthis:\n  \\<exists>a1 u1. v1 = a1 # u1 \\<and> length u1 = k\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "then"], ["proof (chain)\npicking this:\n  \\<exists>a1 u1. v1 = a1 # u1 \\<and> length u1 = k", "obtain a1 u1 where \"(v1 = a1#u1)\\<and>(length u1 = k)\""], ["proof (prove)\nusing this:\n  \\<exists>a1 u1. v1 = a1 # u1 \\<and> length u1 = k\n\ngoal (1 subgoal):\n 1. (\\<And>a1 u1.\n        v1 = a1 # u1 \\<and> length u1 = k \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  \\<exists>a1 u1. v1 = a1 # u1 \\<and> length u1 = k\n  length v1 = length v2 \\<and>\n  length v1 = Suc k \\<and> length w1 = length w2\n\ngoal (1 subgoal):\n 1. (\\<And>a1 u1.\n        v1 = a1 # u1 \\<and> length u1 = k \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  v1 = a1 # u1 \\<and> length u1 = k\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "then"], ["proof (chain)\npicking this:\n  v1 = a1 # u1 \\<and> length u1 = k", "have Cons_1:\"(v1 = a1#u1)\\<and>(length u1 = k)\""], ["proof (prove)\nusing this:\n  v1 = a1 # u1 \\<and> length u1 = k\n\ngoal (1 subgoal):\n 1. v1 = a1 # u1 \\<and> length u1 = k", "by auto"], ["proof (state)\nthis:\n  v1 = a1 # u1 \\<and> length u1 = k\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "moreover"], ["proof (state)\nthis:\n  v1 = a1 # u1 \\<and> length u1 = k\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "have \"length v2 = Suc k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length v2 = Suc k", "using assms Suc"], ["proof (prove)\nusing this:\n  length v1 = length v2 \\<and>\n  length v1 = Suc k \\<and> length w1 = length w2\n  length ?v1.0 = length ?v2.0 \\<and>\n  length ?v1.0 = k \\<and> length ?w1.0 = length ?w2.0 \\<longrightarrow>\n  scalar_product ?v1.0 ?v2.0 * scalar_product ?w1.0 ?w2.0 =\n  scalar_product (vec_vec_Tensor ?v1.0 ?w1.0) (vec_vec_Tensor ?v2.0 ?w2.0)\n\ngoal (1 subgoal):\n 1. length v2 = Suc k", "by auto"], ["proof (state)\nthis:\n  length v2 = Suc k\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "then"], ["proof (chain)\npicking this:\n  length v2 = Suc k", "have \"(\\<exists>a2 u2.(v2 = a2#u2)\\<and>(length u2 = k))\""], ["proof (prove)\nusing this:\n  length v2 = Suc k\n\ngoal (1 subgoal):\n 1. \\<exists>a2 u2. v2 = a2 # u2 \\<and> length u2 = k", "using  Suc_length_conv"], ["proof (prove)\nusing this:\n  length v2 = Suc k\n  (Suc ?n = length ?xs) =\n  (\\<exists>y ys. ?xs = y # ys \\<and> length ys = ?n)\n\ngoal (1 subgoal):\n 1. \\<exists>a2 u2. v2 = a2 # u2 \\<and> length u2 = k", "by metis"], ["proof (state)\nthis:\n  \\<exists>a2 u2. v2 = a2 # u2 \\<and> length u2 = k\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "then"], ["proof (chain)\npicking this:\n  \\<exists>a2 u2. v2 = a2 # u2 \\<and> length u2 = k", "obtain a2 u2 where \"(v2 = a2#u2)\\<and>(length u2 = k)\""], ["proof (prove)\nusing this:\n  \\<exists>a2 u2. v2 = a2 # u2 \\<and> length u2 = k\n\ngoal (1 subgoal):\n 1. (\\<And>a2 u2.\n        v2 = a2 # u2 \\<and> length u2 = k \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  v2 = a2 # u2 \\<and> length u2 = k\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "then"], ["proof (chain)\npicking this:\n  v2 = a2 # u2 \\<and> length u2 = k", "have Cons_2: \"(v2 = a2#u2)\\<and>(length u2 = k)\""], ["proof (prove)\nusing this:\n  v2 = a2 # u2 \\<and> length u2 = k\n\ngoal (1 subgoal):\n 1. v2 = a2 # u2 \\<and> length u2 = k", "by simp"], ["proof (state)\nthis:\n  v2 = a2 # u2 \\<and> length u2 = k\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "then"], ["proof (chain)\npicking this:\n  v2 = a2 # u2 \\<and> length u2 = k", "have \"length u1 = length u2\""], ["proof (prove)\nusing this:\n  v2 = a2 # u2 \\<and> length u2 = k\n\ngoal (1 subgoal):\n 1. length u1 = length u2", "using Cons_1"], ["proof (prove)\nusing this:\n  v2 = a2 # u2 \\<and> length u2 = k\n  v1 = a1 # u1 \\<and> length u1 = k\n\ngoal (1 subgoal):\n 1. length u1 = length u2", "by auto"], ["proof (state)\nthis:\n  length u1 = length u2\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "then"], ["proof (chain)\npicking this:\n  length u1 = length u2", "have Cons_3:\"(scalar_product u1 u2) * scalar_product w1 w2 =\n         scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2)\""], ["proof (prove)\nusing this:\n  length u1 = length u2\n\ngoal (1 subgoal):\n 1. scalar_product u1 u2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2)", "using Suc Cons_1 Cons_2 assms"], ["proof (prove)\nusing this:\n  length u1 = length u2\n  length ?v1.0 = length ?v2.0 \\<and>\n  length ?v1.0 = k \\<and> length ?w1.0 = length ?w2.0 \\<longrightarrow>\n  scalar_product ?v1.0 ?v2.0 * scalar_product ?w1.0 ?w2.0 =\n  scalar_product (vec_vec_Tensor ?v1.0 ?w1.0) (vec_vec_Tensor ?v2.0 ?w2.0)\n  v1 = a1 # u1 \\<and> length u1 = k\n  v2 = a2 # u2 \\<and> length u2 = k\n  length v1 = length v2 \\<and>\n  length v1 = Suc k \\<and> length w1 = length w2\n\ngoal (1 subgoal):\n 1. scalar_product u1 u2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2)", "by auto"], ["proof (state)\nthis:\n  scalar_product u1 u2 * scalar_product w1 w2 =\n  scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2)\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "then"], ["proof (chain)\npicking this:\n  scalar_product u1 u2 * scalar_product w1 w2 =\n  scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2)", "have \"zip v1 v2 = (a1,a2)#(zip u1 u2)\""], ["proof (prove)\nusing this:\n  scalar_product u1 u2 * scalar_product w1 w2 =\n  scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2)\n\ngoal (1 subgoal):\n 1. zip v1 v2 = (a1, a2) # zip u1 u2", "using  zip_Cons Cons_1 Cons_2"], ["proof (prove)\nusing this:\n  scalar_product u1 u2 * scalar_product w1 w2 =\n  scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2)\n  length ?v = length ?w \\<Longrightarrow>\n  zip (?a # ?v) (?b # ?w) = (?a, ?b) # zip ?v ?w\n  v1 = a1 # u1 \\<and> length u1 = k\n  v2 = a2 # u2 \\<and> length u2 = k\n\ngoal (1 subgoal):\n 1. zip v1 v2 = (a1, a2) # zip u1 u2", "by auto"], ["proof (state)\nthis:\n  zip v1 v2 = (a1, a2) # zip u1 u2\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "then"], ["proof (chain)\npicking this:\n  zip v1 v2 = (a1, a2) # zip u1 u2", "have Cons_4:\"scalar_product v1 v2 =  (a1*a2)+ (scalar_product u1 u2)\""], ["proof (prove)\nusing this:\n  zip v1 v2 = (a1, a2) # zip u1 u2\n\ngoal (1 subgoal):\n 1. scalar_product v1 v2 = a1 * a2 + scalar_product u1 u2", "unfolding scalar_product_def scalar_prodI_def"], ["proof (prove)\nusing this:\n  zip v1 v2 = (a1, a2) # zip u1 u2\n\ngoal (1 subgoal):\n 1. foldr (\\<lambda>(x, y). (+) (x * y)) (zip v1 v2) zer =\n    a1 * a2 + foldr (\\<lambda>(x, y). (+) (x * y)) (zip u1 u2) zer", "by auto"], ["proof (state)\nthis:\n  scalar_product v1 v2 = a1 * a2 + scalar_product u1 u2\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "then"], ["proof (chain)\npicking this:\n  scalar_product v1 v2 = a1 * a2 + scalar_product u1 u2", "have \"f (scalar_product v1 v2) (scalar_product w1 w2)\n                      = ((a1*a2)+ (scalar_product u1 u2))*(scalar_product w1 w2)\""], ["proof (prove)\nusing this:\n  scalar_product v1 v2 = a1 * a2 + scalar_product u1 u2\n\ngoal (1 subgoal):\n 1. scalar_product v1 v2 * scalar_product w1 w2 =\n    a1 * a2 + scalar_product u1 u2 * scalar_product w1 w2", "by auto"], ["proof (state)\nthis:\n  scalar_product v1 v2 * scalar_product w1 w2 =\n  a1 * a2 + scalar_product u1 u2 * scalar_product w1 w2\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "then"], ["proof (chain)\npicking this:\n  scalar_product v1 v2 * scalar_product w1 w2 =\n  a1 * a2 + scalar_product u1 u2 * scalar_product w1 w2", "have \"... = ((a1*a2)*(scalar_product w1 w2)) \n                                     + ((scalar_product u1 u2)*(scalar_product w1 w2))\""], ["proof (prove)\nusing this:\n  scalar_product v1 v2 * scalar_product w1 w2 =\n  a1 * a2 + scalar_product u1 u2 * scalar_product w1 w2\n\ngoal (1 subgoal):\n 1. a1 * a2 + scalar_product u1 u2 * scalar_product w1 w2 =\n    a1 * a2 * scalar_product w1 w2 +\n    (scalar_product u1 u2 * scalar_product w1 w2)", "using plus_right_distributivity"], ["proof (prove)\nusing this:\n  scalar_product v1 v2 * scalar_product w1 w2 =\n  a1 * a2 + scalar_product u1 u2 * scalar_product w1 w2\n  ?a + ?b * ?c = ?a * ?c + (?b * ?c)\n\ngoal (1 subgoal):\n 1. a1 * a2 + scalar_product u1 u2 * scalar_product w1 w2 =\n    a1 * a2 * scalar_product w1 w2 +\n    (scalar_product u1 u2 * scalar_product w1 w2)", "by auto"], ["proof (state)\nthis:\n  a1 * a2 + scalar_product u1 u2 * scalar_product w1 w2 =\n  a1 * a2 * scalar_product w1 w2 +\n  (scalar_product u1 u2 * scalar_product w1 w2)\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "then"], ["proof (chain)\npicking this:\n  a1 * a2 + scalar_product u1 u2 * scalar_product w1 w2 =\n  a1 * a2 * scalar_product w1 w2 +\n  (scalar_product u1 u2 * scalar_product w1 w2)", "have Cons_5:\"... = ((a1*a2)*(scalar_product w1 w2))\n                       + scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2)\""], ["proof (prove)\nusing this:\n  a1 * a2 + scalar_product u1 u2 * scalar_product w1 w2 =\n  a1 * a2 * scalar_product w1 w2 +\n  (scalar_product u1 u2 * scalar_product w1 w2)\n\ngoal (1 subgoal):\n 1. a1 * a2 * scalar_product w1 w2 +\n    (scalar_product u1 u2 * scalar_product w1 w2) =\n    a1 * a2 * scalar_product w1 w2 +\n    scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2)", "using Cons_3"], ["proof (prove)\nusing this:\n  a1 * a2 + scalar_product u1 u2 * scalar_product w1 w2 =\n  a1 * a2 * scalar_product w1 w2 +\n  (scalar_product u1 u2 * scalar_product w1 w2)\n  scalar_product u1 u2 * scalar_product w1 w2 =\n  scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2)\n\ngoal (1 subgoal):\n 1. a1 * a2 * scalar_product w1 w2 +\n    (scalar_product u1 u2 * scalar_product w1 w2) =\n    a1 * a2 * scalar_product w1 w2 +\n    scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2)", "by auto"], ["proof (state)\nthis:\n  a1 * a2 * scalar_product w1 w2 +\n  (scalar_product u1 u2 * scalar_product w1 w2) =\n  a1 * a2 * scalar_product w1 w2 +\n  scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2)\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "then"], ["proof (chain)\npicking this:\n  a1 * a2 * scalar_product w1 w2 +\n  (scalar_product u1 u2 * scalar_product w1 w2) =\n  a1 * a2 * scalar_product w1 w2 +\n  scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2)", "have Cons_6:\"... = (scalar_product (times a1 w1) (times a2 w2))\n                    +  scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2)\""], ["proof (prove)\nusing this:\n  a1 * a2 * scalar_product w1 w2 +\n  (scalar_product u1 u2 * scalar_product w1 w2) =\n  a1 * a2 * scalar_product w1 w2 +\n  scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2)\n\ngoal (1 subgoal):\n 1. a1 * a2 * scalar_product w1 w2 +\n    scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2) =\n    scalar_product (local.times a1 w1) (local.times a2 w2) +\n    scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2)", "using assms effective_scalar_product_times"], ["proof (prove)\nusing this:\n  a1 * a2 * scalar_product w1 w2 +\n  (scalar_product u1 u2 * scalar_product w1 w2) =\n  a1 * a2 * scalar_product w1 w2 +\n  scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2)\n  length v1 = length v2 \\<and>\n  length v1 = Suc k \\<and> length w1 = length w2\n  length ?w1.0 = length ?w2.0 \\<Longrightarrow>\n  ?x * ?y * scalar_product ?w1.0 ?w2.0 =\n  scalar_product (local.times ?x ?w1.0) (local.times ?y ?w2.0)\n\ngoal (1 subgoal):\n 1. a1 * a2 * scalar_product w1 w2 +\n    scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2) =\n    scalar_product (local.times a1 w1) (local.times a2 w2) +\n    scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2)", "by auto"], ["proof (state)\nthis:\n  a1 * a2 * scalar_product w1 w2 +\n  scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2) =\n  scalar_product (local.times a1 w1) (local.times a2 w2) +\n  scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2)\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "then"], ["proof (chain)\npicking this:\n  a1 * a2 * scalar_product w1 w2 +\n  scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2) =\n  scalar_product (local.times a1 w1) (local.times a2 w2) +\n  scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2)", "have \"scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)\n                        = scalar_product (vec_vec_Tensor (a1#u1) w1) (vec_vec_Tensor (a2#u2) w2)\""], ["proof (prove)\nusing this:\n  a1 * a2 * scalar_product w1 w2 +\n  scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2) =\n  scalar_product (local.times a1 w1) (local.times a2 w2) +\n  scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2)\n\ngoal (1 subgoal):\n 1. scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2) =\n    scalar_product (vec_vec_Tensor (a1 # u1) w1)\n     (vec_vec_Tensor (a2 # u2) w2)", "using Cons_1 Cons_2"], ["proof (prove)\nusing this:\n  a1 * a2 * scalar_product w1 w2 +\n  scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2) =\n  scalar_product (local.times a1 w1) (local.times a2 w2) +\n  scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2)\n  v1 = a1 # u1 \\<and> length u1 = k\n  v2 = a2 # u2 \\<and> length u2 = k\n\ngoal (1 subgoal):\n 1. scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2) =\n    scalar_product (vec_vec_Tensor (a1 # u1) w1)\n     (vec_vec_Tensor (a2 # u2) w2)", "by auto"], ["proof (state)\nthis:\n  scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2) =\n  scalar_product (vec_vec_Tensor (a1 # u1) w1) (vec_vec_Tensor (a2 # u2) w2)\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "moreover"], ["proof (state)\nthis:\n  scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2) =\n  scalar_product (vec_vec_Tensor (a1 # u1) w1) (vec_vec_Tensor (a2 # u2) w2)\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "have \"(vec_vec_Tensor (a1#u1) w1) = (times a1 w1)@(vec_vec_Tensor u1 w1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_vec_Tensor (a1 # u1) w1 = local.times a1 w1 @ vec_vec_Tensor u1 w1", "using vec_vec_Tensor.simps"], ["proof (prove)\nusing this:\n  vec_vec_Tensor [] ?ys = []\n  vec_vec_Tensor (?x # ?xs) ?ys =\n  local.times ?x ?ys @ vec_vec_Tensor ?xs ?ys\n\ngoal (1 subgoal):\n 1. vec_vec_Tensor (a1 # u1) w1 = local.times a1 w1 @ vec_vec_Tensor u1 w1", "by auto"], ["proof (state)\nthis:\n  vec_vec_Tensor (a1 # u1) w1 = local.times a1 w1 @ vec_vec_Tensor u1 w1\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "moreover"], ["proof (state)\nthis:\n  vec_vec_Tensor (a1 # u1) w1 = local.times a1 w1 @ vec_vec_Tensor u1 w1\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "have \"(vec_vec_Tensor (a2#u2) w2) = (times a2 w2)@(vec_vec_Tensor u2 w2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_vec_Tensor (a2 # u2) w2 = local.times a2 w2 @ vec_vec_Tensor u2 w2", "using vec_vec_Tensor.simps"], ["proof (prove)\nusing this:\n  vec_vec_Tensor [] ?ys = []\n  vec_vec_Tensor (?x # ?xs) ?ys =\n  local.times ?x ?ys @ vec_vec_Tensor ?xs ?ys\n\ngoal (1 subgoal):\n 1. vec_vec_Tensor (a2 # u2) w2 = local.times a2 w2 @ vec_vec_Tensor u2 w2", "by auto"], ["proof (state)\nthis:\n  vec_vec_Tensor (a2 # u2) w2 = local.times a2 w2 @ vec_vec_Tensor u2 w2\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "ultimately"], ["proof (chain)\npicking this:\n  v1 = a1 # u1 \\<and> length u1 = k\n  scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2) =\n  scalar_product (vec_vec_Tensor (a1 # u1) w1) (vec_vec_Tensor (a2 # u2) w2)\n  vec_vec_Tensor (a1 # u1) w1 = local.times a1 w1 @ vec_vec_Tensor u1 w1\n  vec_vec_Tensor (a2 # u2) w2 = local.times a2 w2 @ vec_vec_Tensor u2 w2", "have Cons_7:\"scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)\n                      = scalar_product ((times a1 w1)@(vec_vec_Tensor u1 w1)) \n                                ((times a2 w2)@(vec_vec_Tensor u2 w2))\""], ["proof (prove)\nusing this:\n  v1 = a1 # u1 \\<and> length u1 = k\n  scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2) =\n  scalar_product (vec_vec_Tensor (a1 # u1) w1) (vec_vec_Tensor (a2 # u2) w2)\n  vec_vec_Tensor (a1 # u1) w1 = local.times a1 w1 @ vec_vec_Tensor u1 w1\n  vec_vec_Tensor (a2 # u2) w2 = local.times a2 w2 @ vec_vec_Tensor u2 w2\n\ngoal (1 subgoal):\n 1. scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2) =\n    scalar_product (local.times a1 w1 @ vec_vec_Tensor u1 w1)\n     (local.times a2 w2 @ vec_vec_Tensor u2 w2)", "by auto"], ["proof (state)\nthis:\n  scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2) =\n  scalar_product (local.times a1 w1 @ vec_vec_Tensor u1 w1)\n   (local.times a2 w2 @ vec_vec_Tensor u2 w2)\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "moreover"], ["proof (state)\nthis:\n  scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2) =\n  scalar_product (local.times a1 w1 @ vec_vec_Tensor u1 w1)\n   (local.times a2 w2 @ vec_vec_Tensor u2 w2)\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "have \"length (vec_vec_Tensor u2 w2) = length (vec_vec_Tensor u1 w1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (vec_vec_Tensor u2 w2) = length (vec_vec_Tensor u1 w1)", "using assms"], ["proof (prove)\nusing this:\n  length v1 = length v2 \\<and>\n  length v1 = Suc k \\<and> length w1 = length w2\n\ngoal (1 subgoal):\n 1. length (vec_vec_Tensor u2 w2) = length (vec_vec_Tensor u1 w1)", "by (metis Cons_1 Cons_2 vec_vec_Tensor_length)"], ["proof (state)\nthis:\n  length (vec_vec_Tensor u2 w2) = length (vec_vec_Tensor u1 w1)\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "moreover"], ["proof (state)\nthis:\n  length (vec_vec_Tensor u2 w2) = length (vec_vec_Tensor u1 w1)\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "have \"length (times a1 w1) = (length (times a2 w2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (local.times a1 w1) = length (local.times a2 w2)", "using assms"], ["proof (prove)\nusing this:\n  length v1 = length v2 \\<and>\n  length v1 = Suc k \\<and> length w1 = length w2\n\ngoal (1 subgoal):\n 1. length (local.times a1 w1) = length (local.times a2 w2)", "by (metis preserving_length)"], ["proof (state)\nthis:\n  length (local.times a1 w1) = length (local.times a2 w2)\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "ultimately"], ["proof (chain)\npicking this:\n  scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2) =\n  scalar_product (local.times a1 w1 @ vec_vec_Tensor u1 w1)\n   (local.times a2 w2 @ vec_vec_Tensor u2 w2)\n  length (vec_vec_Tensor u2 w2) = length (vec_vec_Tensor u1 w1)\n  length (local.times a1 w1) = length (local.times a2 w2)", "have \"scalar_product ((times a1 w1)@(vec_vec_Tensor u1 w1)) \n                                ((times a2 w2)@(vec_vec_Tensor u2 w2)) = \n                    (scalar_product (times a1 w1) (times a2 w2))\n                    +  scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2)\""], ["proof (prove)\nusing this:\n  scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2) =\n  scalar_product (local.times a1 w1 @ vec_vec_Tensor u1 w1)\n   (local.times a2 w2 @ vec_vec_Tensor u2 w2)\n  length (vec_vec_Tensor u2 w2) = length (vec_vec_Tensor u1 w1)\n  length (local.times a1 w1) = length (local.times a2 w2)\n\ngoal (1 subgoal):\n 1. scalar_product (local.times a1 w1 @ vec_vec_Tensor u1 w1)\n     (local.times a2 w2 @ vec_vec_Tensor u2 w2) =\n    scalar_product (local.times a1 w1) (local.times a2 w2) +\n    scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2)", "using effective_scalar_product_append"], ["proof (prove)\nusing this:\n  scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2) =\n  scalar_product (local.times a1 w1 @ vec_vec_Tensor u1 w1)\n   (local.times a2 w2 @ vec_vec_Tensor u2 w2)\n  length (vec_vec_Tensor u2 w2) = length (vec_vec_Tensor u1 w1)\n  length (local.times a1 w1) = length (local.times a2 w2)\n  \\<lbrakk>length ?zs = length ?ws; length ?xs = length ?ys\\<rbrakk>\n  \\<Longrightarrow> scalar_product (?xs @ ?zs) (?ys @ ?ws) =\n                    scalar_product ?xs ?ys + scalar_product ?zs ?ws\n\ngoal (1 subgoal):\n 1. scalar_product (local.times a1 w1 @ vec_vec_Tensor u1 w1)\n     (local.times a2 w2 @ vec_vec_Tensor u2 w2) =\n    scalar_product (local.times a1 w1) (local.times a2 w2) +\n    scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2)", "by auto"], ["proof (state)\nthis:\n  scalar_product (local.times a1 w1 @ vec_vec_Tensor u1 w1)\n   (local.times a2 w2 @ vec_vec_Tensor u2 w2) =\n  scalar_product (local.times a1 w1) (local.times a2 w2) +\n  scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2)\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "then"], ["proof (chain)\npicking this:\n  scalar_product (local.times a1 w1 @ vec_vec_Tensor u1 w1)\n   (local.times a2 w2 @ vec_vec_Tensor u2 w2) =\n  scalar_product (local.times a1 w1) (local.times a2 w2) +\n  scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2)", "show ?thesis"], ["proof (prove)\nusing this:\n  scalar_product (local.times a1 w1 @ vec_vec_Tensor u1 w1)\n   (local.times a2 w2 @ vec_vec_Tensor u2 w2) =\n  scalar_product (local.times a1 w1) (local.times a2 w2) +\n  scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2)\n\ngoal (1 subgoal):\n 1. scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "using Cons_6 Cons_7 \\<open>a1 * a2 + scalar_product u1 u2 * scalar_product w1 w2 \n                 = a1 * a2 * scalar_product w1 w2 \n                  + (scalar_product u1 u2 * scalar_product w1 w2)\\<close>"], ["proof (prove)\nusing this:\n  scalar_product (local.times a1 w1 @ vec_vec_Tensor u1 w1)\n   (local.times a2 w2 @ vec_vec_Tensor u2 w2) =\n  scalar_product (local.times a1 w1) (local.times a2 w2) +\n  scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2)\n  a1 * a2 * scalar_product w1 w2 +\n  scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2) =\n  scalar_product (local.times a1 w1) (local.times a2 w2) +\n  scalar_product (vec_vec_Tensor u1 w1) (vec_vec_Tensor u2 w2)\n  scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2) =\n  scalar_product (local.times a1 w1 @ vec_vec_Tensor u1 w1)\n   (local.times a2 w2 @ vec_vec_Tensor u2 w2)\n  a1 * a2 + scalar_product u1 u2 * scalar_product w1 w2 =\n  a1 * a2 * scalar_product w1 w2 +\n  (scalar_product u1 u2 * scalar_product w1 w2)\n\ngoal (1 subgoal):\n 1. scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "by (metis Cons_3 Cons_4 )"], ["proof (state)\nthis:\n  scalar_product v1 v2 * scalar_product w1 w2 =\n  scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length v1 = length v2 \\<and>\n  length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n  scalar_product v1 v2 * scalar_product w1 w2 =\n  scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)\n\ngoal (1 subgoal):\n 1. \\<And>n v1 v2 w1 w2.\n       (\\<And>v1 v2 w1 w2.\n           length v1 = length v2 \\<and>\n           length v1 = n \\<and> length w1 = length w2 \\<longrightarrow>\n           scalar_product v1 v2 * scalar_product w1 w2 =\n           scalar_product (vec_vec_Tensor v1 w1)\n            (vec_vec_Tensor v2 w2)) \\<Longrightarrow>\n       length v1 = length v2 \\<and>\n       length v1 = Suc n \\<and> length w1 = length w2 \\<longrightarrow>\n       scalar_product v1 v2 * scalar_product w1 w2 =\n       scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "then"], ["proof (chain)\npicking this:\n  length v1 = length v2 \\<and>\n  length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n  scalar_product v1 v2 * scalar_product w1 w2 =\n  scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "show ?case"], ["proof (prove)\nusing this:\n  length v1 = length v2 \\<and>\n  length v1 = Suc k \\<and> length w1 = length w2 \\<Longrightarrow>\n  scalar_product v1 v2 * scalar_product w1 w2 =\n  scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)\n\ngoal (1 subgoal):\n 1. length v1 = length v2 \\<and>\n    length v1 = Suc k \\<and> length w1 = length w2 \\<longrightarrow>\n    scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "by auto"], ["proof (state)\nthis:\n  length v1 = length v2 \\<and>\n  length v1 = Suc k \\<and> length w1 = length w2 \\<longrightarrow>\n  scalar_product v1 v2 * scalar_product w1 w2 =\n  scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma effective_scalar_product_distributivity:\n assumes \"length v1 = length v2\" and \"length w1 = length w2\"\n shows \"(scalar_product v1 v2)*(scalar_product w1 w2)\n      = scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "using assms scalar_product_distributivity"], ["proof (prove)\nusing this:\n  length v1 = length v2\n  length w1 = length w2\n  \\<forall>v1 v2 w1 w2.\n     length v1 = length v2 \\<and>\n     length v1 = ?n \\<and> length w1 = length w2 \\<longrightarrow>\n     scalar_product v1 v2 * scalar_product w1 w2 =\n     scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)\n\ngoal (1 subgoal):\n 1. scalar_product v1 v2 * scalar_product w1 w2 =\n    scalar_product (vec_vec_Tensor v1 w1) (vec_vec_Tensor v2 w2)", "by auto"], ["", "lemma row_length_constant:assumes \"mat nr nc A\" and \"j < length A\" \n         shows \"length (A!j) = (row_length A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (A ! j) = row_length A", "proof(cases A)"], ["proof (state)\ngoal (2 subgoals):\n 1. A = [] \\<Longrightarrow> length (A ! j) = row_length A\n 2. \\<And>a list.\n       A = a # list \\<Longrightarrow> length (A ! j) = row_length A", "case Nil"], ["proof (state)\nthis:\n  A = []\n\ngoal (2 subgoals):\n 1. A = [] \\<Longrightarrow> length (A ! j) = row_length A\n 2. \\<And>a list.\n       A = a # list \\<Longrightarrow> length (A ! j) = row_length A", "have \"length (A!j) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (A ! j) = 0", "using assms(2) Nil"], ["proof (prove)\nusing this:\n  j < length A\n  A = []\n\ngoal (1 subgoal):\n 1. length (A ! j) = 0", "by auto"], ["proof (state)\nthis:\n  length (A ! j) = 0\n\ngoal (2 subgoals):\n 1. A = [] \\<Longrightarrow> length (A ! j) = row_length A\n 2. \\<And>a list.\n       A = a # list \\<Longrightarrow> length (A ! j) = row_length A", "then"], ["proof (chain)\npicking this:\n  length (A ! j) = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  length (A ! j) = 0\n\ngoal (1 subgoal):\n 1. length (A ! j) = row_length A", "using assms(2) Nil row_length_Nil"], ["proof (prove)\nusing this:\n  length (A ! j) = 0\n  j < length A\n  A = []\n  row_length [] = 0\n\ngoal (1 subgoal):\n 1. length (A ! j) = row_length A", "by (metis)"], ["proof (state)\nthis:\n  length (A ! j) = row_length A\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       A = a # list \\<Longrightarrow> length (A ! j) = row_length A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       A = a # list \\<Longrightarrow> length (A ! j) = row_length A", "case (Cons v B)"], ["proof (state)\nthis:\n  A = v # B\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       A = a # list \\<Longrightarrow> length (A ! j) = row_length A", "have 1:\"\\<forall>x. ((x \\<in> set A) \\<longrightarrow> length x = nr)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. x \\<in> set A \\<longrightarrow> length x = nr", "using assms"], ["proof (prove)\nusing this:\n  mat nr nc A\n  j < length A\n\ngoal (1 subgoal):\n 1. \\<forall>x. x \\<in> set A \\<longrightarrow> length x = nr", "unfolding mat_def Ball_def vec_def"], ["proof (prove)\nusing this:\n  length A = nc \\<and>\n  (\\<forall>x. x \\<in> set A \\<longrightarrow> length x = nr)\n  j < length A\n\ngoal (1 subgoal):\n 1. \\<forall>x. x \\<in> set A \\<longrightarrow> length x = nr", "by auto"], ["proof (state)\nthis:\n  \\<forall>x. x \\<in> set A \\<longrightarrow> length x = nr\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       A = a # list \\<Longrightarrow> length (A ! j) = row_length A", "moreover"], ["proof (state)\nthis:\n  \\<forall>x. x \\<in> set A \\<longrightarrow> length x = nr\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       A = a # list \\<Longrightarrow> length (A ! j) = row_length A", "have \"(A!j) \\<in> set A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A ! j \\<in> set A", "using assms(2)"], ["proof (prove)\nusing this:\n  j < length A\n\ngoal (1 subgoal):\n 1. A ! j \\<in> set A", "by auto"], ["proof (state)\nthis:\n  A ! j \\<in> set A\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       A = a # list \\<Longrightarrow> length (A ! j) = row_length A", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>x. x \\<in> set A \\<longrightarrow> length x = nr\n  A ! j \\<in> set A", "have 2:\"length (A!j) = nr\""], ["proof (prove)\nusing this:\n  \\<forall>x. x \\<in> set A \\<longrightarrow> length x = nr\n  A ! j \\<in> set A\n\ngoal (1 subgoal):\n 1. length (A ! j) = nr", "by auto"], ["proof (state)\nthis:\n  length (A ! j) = nr\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       A = a # list \\<Longrightarrow> length (A ! j) = row_length A", "have \"hd A \\<in> set A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd A \\<in> set A", "using hd_def Cons"], ["proof (prove)\nusing this:\n  hd ?list = (case ?list of x21 # x22 \\<Rightarrow> x21)\n  A = v # B\n\ngoal (1 subgoal):\n 1. hd A \\<in> set A", "by auto"], ["proof (state)\nthis:\n  hd A \\<in> set A\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       A = a # list \\<Longrightarrow> length (A ! j) = row_length A", "then"], ["proof (chain)\npicking this:\n  hd A \\<in> set A", "have \"row_length A = nr\""], ["proof (prove)\nusing this:\n  hd A \\<in> set A\n\ngoal (1 subgoal):\n 1. row_length A = nr", "using row_length_def 1"], ["proof (prove)\nusing this:\n  hd A \\<in> set A\n  row_length ?xs \\<equiv> if ?xs = [] then 0 else length (hd ?xs)\n  \\<forall>x. x \\<in> set A \\<longrightarrow> length x = nr\n\ngoal (1 subgoal):\n 1. row_length A = nr", "by auto"], ["proof (state)\nthis:\n  row_length A = nr\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       A = a # list \\<Longrightarrow> length (A ! j) = row_length A", "then"], ["proof (chain)\npicking this:\n  row_length A = nr", "show ?thesis"], ["proof (prove)\nusing this:\n  row_length A = nr\n\ngoal (1 subgoal):\n 1. length (A ! j) = row_length A", "using 2"], ["proof (prove)\nusing this:\n  row_length A = nr\n  length (A ! j) = nr\n\ngoal (1 subgoal):\n 1. length (A ! j) = row_length A", "by auto"], ["proof (state)\nthis:\n  length (A ! j) = row_length A\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem row_col_match:\n fixes A1 A2 B1 B2 i j\n assumes wf1:\"mat (row_length A1) (length A1) A1\"\n    and wf2:\"mat (row_length A2) (length A2) A2\"\n    and wf3:\"mat (row_length B1) (length B1) B1\"\n    and wf4:\"mat (row_length B2) (length B2) B2\"\n    and matchAA:\"length A1 = row_length A2\"\n    and matchBB:\"length B1 = row_length B2\"\n    and non_Nil:\"(A1 \\<noteq> [])\\<and>(A2 \\<noteq> [])\\<and>(B1 \\<noteq> [])\\<and>(B2 \\<noteq> [])\"\n    and i:\"i<(row_length A1)*(row_length B1)\" and j:\"j< (length A2)*(length B2)\"\n shows \"length (row A1 (i div (row_length B1))) \n                 = length (col A2  (j div (length B2)))\"\n and \"length (row B1 (i mod (row_length B1))) \n                 = length (col B2 (j mod (length B2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (row A1 (i div row_length B1)) =\n    length (col A2 (j div length B2)) &&&\n    length (row B1 (i mod row_length B1)) =\n    length (col B2 (j mod length B2))", "proof-"], ["proof (state)\ngoal (2 subgoals):\n 1. length (row A1 (i div row_length B1)) =\n    length (col A2 (j div length B2))\n 2. length (row B1 (i mod row_length B1)) =\n    length (col B2 (j mod length B2))", "have \"i div (row_length B1) < row_length  A1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i div row_length B1 < row_length A1", "using i"], ["proof (prove)\nusing this:\n  i < row_length A1 * row_length B1\n\ngoal (1 subgoal):\n 1. i div row_length B1 < row_length A1", "by (metis div_left_ineq)"], ["proof (state)\nthis:\n  i div row_length B1 < row_length A1\n\ngoal (2 subgoals):\n 1. length (row A1 (i div row_length B1)) =\n    length (col A2 (j div length B2))\n 2. length (row B1 (i mod row_length B1)) =\n    length (col B2 (j mod length B2))", "then"], ["proof (chain)\npicking this:\n  i div row_length B1 < row_length A1", "have 1:\"length (row A1 (i div (row_length B1))) = length A1\""], ["proof (prove)\nusing this:\n  i div row_length B1 < row_length A1\n\ngoal (1 subgoal):\n 1. length (row A1 (i div row_length B1)) = length A1", "unfolding row_def"], ["proof (prove)\nusing this:\n  i div row_length B1 < row_length A1\n\ngoal (1 subgoal):\n 1. length (map (\\<lambda>w. w ! (i div row_length B1)) A1) = length A1", "by auto"], ["proof (state)\nthis:\n  length (row A1 (i div row_length B1)) = length A1\n\ngoal (2 subgoals):\n 1. length (row A1 (i div row_length B1)) =\n    length (col A2 (j div length B2))\n 2. length (row B1 (i mod row_length B1)) =\n    length (col B2 (j mod length B2))", "have \"j div (length B2)< length A2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j div length B2 < length A2", "using j"], ["proof (prove)\nusing this:\n  j < length A2 * length B2\n\ngoal (1 subgoal):\n 1. j div length B2 < length A2", "by (metis div_left_ineq)"], ["proof (state)\nthis:\n  j div length B2 < length A2\n\ngoal (2 subgoals):\n 1. length (row A1 (i div row_length B1)) =\n    length (col A2 (j div length B2))\n 2. length (row B1 (i mod row_length B1)) =\n    length (col B2 (j mod length B2))", "then"], ["proof (chain)\npicking this:\n  j div length B2 < length A2", "have 2:\"length (col A2  (j div (length B2))) = row_length A2\""], ["proof (prove)\nusing this:\n  j div length B2 < length A2\n\ngoal (1 subgoal):\n 1. length (col A2 (j div length B2)) = row_length A2", "using row_length_constant wf2"], ["proof (prove)\nusing this:\n  j div length B2 < length A2\n  \\<lbrakk>mat ?nr ?nc ?A; ?j < length ?A\\<rbrakk>\n  \\<Longrightarrow> length (?A ! ?j) = row_length ?A\n  mat (row_length A2) (length A2) A2\n\ngoal (1 subgoal):\n 1. length (col A2 (j div length B2)) = row_length A2", "unfolding col_def"], ["proof (prove)\nusing this:\n  j div length B2 < length A2\n  \\<lbrakk>mat ?nr ?nc ?A; ?j < length ?A\\<rbrakk>\n  \\<Longrightarrow> length (?A ! ?j) = row_length ?A\n  mat (row_length A2) (length A2) A2\n\ngoal (1 subgoal):\n 1. length (A2 ! (j div length B2)) = row_length A2", "by auto"], ["proof (state)\nthis:\n  length (col A2 (j div length B2)) = row_length A2\n\ngoal (2 subgoals):\n 1. length (row A1 (i div row_length B1)) =\n    length (col A2 (j div length B2))\n 2. length (row B1 (i mod row_length B1)) =\n    length (col B2 (j mod length B2))", "with 1 matchAA"], ["proof (chain)\npicking this:\n  length (row A1 (i div row_length B1)) = length A1\n  length A1 = row_length A2\n  length (col A2 (j div length B2)) = row_length A2", "show \"length (row A1 (i div (row_length B1)))=length (col A2  (j div (length B2)))\""], ["proof (prove)\nusing this:\n  length (row A1 (i div row_length B1)) = length A1\n  length A1 = row_length A2\n  length (col A2 (j div length B2)) = row_length A2\n\ngoal (1 subgoal):\n 1. length (row A1 (i div row_length B1)) =\n    length (col A2 (j div length B2))", "by auto"], ["proof (state)\nthis:\n  length (row A1 (i div row_length B1)) = length (col A2 (j div length B2))\n\ngoal (1 subgoal):\n 1. length (row B1 (i mod row_length B1)) =\n    length (col B2 (j mod length B2))", "have \"i mod (row_length B1) < row_length B1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i mod row_length B1 < row_length B1", "using i"], ["proof (prove)\nusing this:\n  i < row_length A1 * row_length B1\n\ngoal (1 subgoal):\n 1. i mod row_length B1 < row_length B1", "by (metis less_nat_zero_code mod_less_divisor mult_is_0 neq0_conv)"], ["proof (state)\nthis:\n  i mod row_length B1 < row_length B1\n\ngoal (1 subgoal):\n 1. length (row B1 (i mod row_length B1)) =\n    length (col B2 (j mod length B2))", "then"], ["proof (chain)\npicking this:\n  i mod row_length B1 < row_length B1", "have 2:\"length (row B1 (i mod (row_length B1))) = length B1\""], ["proof (prove)\nusing this:\n  i mod row_length B1 < row_length B1\n\ngoal (1 subgoal):\n 1. length (row B1 (i mod row_length B1)) = length B1", "unfolding row_def"], ["proof (prove)\nusing this:\n  i mod row_length B1 < row_length B1\n\ngoal (1 subgoal):\n 1. length (map (\\<lambda>w. w ! (i mod row_length B1)) B1) = length B1", "by auto"], ["proof (state)\nthis:\n  length (row B1 (i mod row_length B1)) = length B1\n\ngoal (1 subgoal):\n 1. length (row B1 (i mod row_length B1)) =\n    length (col B2 (j mod length B2))", "have \"j mod (length B2) < length B2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j mod length B2 < length B2", "using j"], ["proof (prove)\nusing this:\n  j < length A2 * length B2\n\ngoal (1 subgoal):\n 1. j mod length B2 < length B2", "by (metis less_nat_zero_code mod_less_divisor mult_is_0 neq0_conv)"], ["proof (state)\nthis:\n  j mod length B2 < length B2\n\ngoal (1 subgoal):\n 1. length (row B1 (i mod row_length B1)) =\n    length (col B2 (j mod length B2))", "then"], ["proof (chain)\npicking this:\n  j mod length B2 < length B2", "have \"length (col B2 (j mod (length B2))) = row_length B2\""], ["proof (prove)\nusing this:\n  j mod length B2 < length B2\n\ngoal (1 subgoal):\n 1. length (col B2 (j mod length B2)) = row_length B2", "using row_length_constant wf4"], ["proof (prove)\nusing this:\n  j mod length B2 < length B2\n  \\<lbrakk>mat ?nr ?nc ?A; ?j < length ?A\\<rbrakk>\n  \\<Longrightarrow> length (?A ! ?j) = row_length ?A\n  mat (row_length B2) (length B2) B2\n\ngoal (1 subgoal):\n 1. length (col B2 (j mod length B2)) = row_length B2", "unfolding col_def"], ["proof (prove)\nusing this:\n  j mod length B2 < length B2\n  \\<lbrakk>mat ?nr ?nc ?A; ?j < length ?A\\<rbrakk>\n  \\<Longrightarrow> length (?A ! ?j) = row_length ?A\n  mat (row_length B2) (length B2) B2\n\ngoal (1 subgoal):\n 1. length (B2 ! (j mod length B2)) = row_length B2", "by auto"], ["proof (state)\nthis:\n  length (col B2 (j mod length B2)) = row_length B2\n\ngoal (1 subgoal):\n 1. length (row B1 (i mod row_length B1)) =\n    length (col B2 (j mod length B2))", "with 2 matchBB"], ["proof (chain)\npicking this:\n  length (row B1 (i mod row_length B1)) = length B1\n  length B1 = row_length B2\n  length (col B2 (j mod length B2)) = row_length B2", "show \"length (row B1 (i mod (row_length B1))) = length (col B2 (j mod (length B2)))\""], ["proof (prove)\nusing this:\n  length (row B1 (i mod row_length B1)) = length B1\n  length B1 = row_length B2\n  length (col B2 (j mod length B2)) = row_length B2\n\ngoal (1 subgoal):\n 1. length (row B1 (i mod row_length B1)) =\n    length (col B2 (j mod length B2))", "by auto"], ["proof (state)\nthis:\n  length (row B1 (i mod row_length B1)) = length (col B2 (j mod length B2))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma effective_row_col_match: assumes \"matrix_match A1 A2 B1 B2\"\n shows \"\\<forall>i j. ((i<(row_length A1)*(row_length B1))\\<and>(j<(length A2)*(length B2))) \n       \\<longrightarrow>length (row A1 (i div (row_length B1))) = length (col A2  (j div (length B2)))\"\n  \"\\<forall>i j. ((i<(row_length A1)*(row_length B1))\\<and>(j<(length A2)*(length B2))) \n           \\<longrightarrow>length (row B1 (i mod (row_length B1))) = length (col B2 (j mod (length B2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       length (row A1 (i div row_length B1)) =\n       length (col A2 (j div length B2)) &&&\n    \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       length (row B1 (i mod row_length B1)) =\n       length (col B2 (j mod length B2))", "using assms row_col_match"], ["proof (prove)\nusing this:\n  matrix_match A1 A2 B1 B2\n  \\<lbrakk>mat (row_length ?A1.0) (length ?A1.0) ?A1.0;\n   mat (row_length ?A2.0) (length ?A2.0) ?A2.0;\n   mat (row_length ?B1.0) (length ?B1.0) ?B1.0;\n   mat (row_length ?B2.0) (length ?B2.0) ?B2.0;\n   length ?A1.0 = row_length ?A2.0; length ?B1.0 = row_length ?B2.0;\n   ?A1.0 \\<noteq> [] \\<and>\n   ?A2.0 \\<noteq> [] \\<and> ?B1.0 \\<noteq> [] \\<and> ?B2.0 \\<noteq> [];\n   ?i < row_length ?A1.0 * row_length ?B1.0;\n   ?j < length ?A2.0 * length ?B2.0\\<rbrakk>\n  \\<Longrightarrow> length (row ?A1.0 (?i div row_length ?B1.0)) =\n                    length (col ?A2.0 (?j div length ?B2.0))\n  \\<lbrakk>mat (row_length ?A1.0) (length ?A1.0) ?A1.0;\n   mat (row_length ?A2.0) (length ?A2.0) ?A2.0;\n   mat (row_length ?B1.0) (length ?B1.0) ?B1.0;\n   mat (row_length ?B2.0) (length ?B2.0) ?B2.0;\n   length ?A1.0 = row_length ?A2.0; length ?B1.0 = row_length ?B2.0;\n   ?A1.0 \\<noteq> [] \\<and>\n   ?A2.0 \\<noteq> [] \\<and> ?B1.0 \\<noteq> [] \\<and> ?B2.0 \\<noteq> [];\n   ?i < row_length ?A1.0 * row_length ?B1.0;\n   ?j < length ?A2.0 * length ?B2.0\\<rbrakk>\n  \\<Longrightarrow> length (row ?B1.0 (?i mod row_length ?B1.0)) =\n                    length (col ?B2.0 (?j mod length ?B2.0))\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       length (row A1 (i div row_length B1)) =\n       length (col A2 (j div length B2)) &&&\n    \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       length (row B1 (i mod row_length B1)) =\n       length (col B2 (j mod length B2))", "unfolding matrix_match_def"], ["proof (prove)\nusing this:\n  mat (row_length A1) (length A1) A1 \\<and>\n  mat (row_length A2) (length A2) A2 \\<and>\n  mat (row_length B1) (length B1) B1 \\<and>\n  mat (row_length B2) (length B2) B2 \\<and>\n  length A1 = row_length A2 \\<and>\n  length B1 = row_length B2 \\<and>\n  A1 \\<noteq> [] \\<and>\n  A2 \\<noteq> [] \\<and> B1 \\<noteq> [] \\<and> B2 \\<noteq> []\n  \\<lbrakk>mat (row_length ?A1.0) (length ?A1.0) ?A1.0;\n   mat (row_length ?A2.0) (length ?A2.0) ?A2.0;\n   mat (row_length ?B1.0) (length ?B1.0) ?B1.0;\n   mat (row_length ?B2.0) (length ?B2.0) ?B2.0;\n   length ?A1.0 = row_length ?A2.0; length ?B1.0 = row_length ?B2.0;\n   ?A1.0 \\<noteq> [] \\<and>\n   ?A2.0 \\<noteq> [] \\<and> ?B1.0 \\<noteq> [] \\<and> ?B2.0 \\<noteq> [];\n   ?i < row_length ?A1.0 * row_length ?B1.0;\n   ?j < length ?A2.0 * length ?B2.0\\<rbrakk>\n  \\<Longrightarrow> length (row ?A1.0 (?i div row_length ?B1.0)) =\n                    length (col ?A2.0 (?j div length ?B2.0))\n  \\<lbrakk>mat (row_length ?A1.0) (length ?A1.0) ?A1.0;\n   mat (row_length ?A2.0) (length ?A2.0) ?A2.0;\n   mat (row_length ?B1.0) (length ?B1.0) ?B1.0;\n   mat (row_length ?B2.0) (length ?B2.0) ?B2.0;\n   length ?A1.0 = row_length ?A2.0; length ?B1.0 = row_length ?B2.0;\n   ?A1.0 \\<noteq> [] \\<and>\n   ?A2.0 \\<noteq> [] \\<and> ?B1.0 \\<noteq> [] \\<and> ?B2.0 \\<noteq> [];\n   ?i < row_length ?A1.0 * row_length ?B1.0;\n   ?j < length ?A2.0 * length ?B2.0\\<rbrakk>\n  \\<Longrightarrow> length (row ?B1.0 (?i mod row_length ?B1.0)) =\n                    length (col ?B2.0 (?j mod length ?B2.0))\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       length (row A1 (i div row_length B1)) =\n       length (col A2 (j div length B2)) &&&\n    \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       length (row B1 (i mod row_length B1)) =\n       length (col B2 (j mod length B2))", "by auto"], ["", "theorem prelim_element_match:\n \"matrix_match A1 A2 B1 B2 \\<Longrightarrow> (\\<forall>i j.((i<(row_length A1)*(row_length B1))\n                              \\<and>(j<(length A2)*(length B2))) \n         \\<longrightarrow>\n  (((A1 \\<circ> A2)\\<otimes>(B1 \\<circ>  B2))!j!i\n                  = ((A1 \\<otimes> B1)\\<circ>(A2 \\<otimes> B2))!j!i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_match A1 A2 B1 B2 \\<Longrightarrow>\n    \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n       ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. matrix_match A1 A2 B1 B2 \\<Longrightarrow>\n    \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n       ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i", "assume assms:\"matrix_match A1 A2 B1 B2 \""], ["proof (state)\nthis:\n  matrix_match A1 A2 B1 B2\n\ngoal (1 subgoal):\n 1. matrix_match A1 A2 B1 B2 \\<Longrightarrow>\n    \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n       ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i", "have 1:\"matrix_match A1 A2 B1 B2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_match A1 A2 B1 B2", "using assms matrix_compose_cond_def"], ["proof (prove)\nusing this:\n  matrix_match A1 A2 B1 B2\n  matrix_compose_cond ?A1.0 ?A2.0 ?B1.0 ?B2.0 ?i ?j \\<equiv>\n  mat (row_length ?A1.0) (length ?A1.0) ?A1.0 \\<and>\n  mat (row_length ?A2.0) (length ?A2.0) ?A2.0 \\<and>\n  mat (row_length ?B1.0) (length ?B1.0) ?B1.0 \\<and>\n  mat (row_length ?B2.0) (length ?B2.0) ?B2.0 \\<and>\n  length ?A1.0 = row_length ?A2.0 \\<and>\n  length ?B1.0 = row_length ?B2.0 \\<and>\n  ?A1.0 \\<noteq> [] \\<and>\n  ?A2.0 \\<noteq> [] \\<and>\n  ?B1.0 \\<noteq> [] \\<and>\n  ?B2.0 \\<noteq> [] \\<and>\n  ?i < row_length ?A1.0 * row_length ?B1.0 \\<and>\n  ?j < length ?A2.0 * length ?B2.0\n\ngoal (1 subgoal):\n 1. matrix_match A1 A2 B1 B2", "by auto"], ["proof (state)\nthis:\n  matrix_match A1 A2 B1 B2\n\ngoal (1 subgoal):\n 1. matrix_match A1 A2 B1 B2 \\<Longrightarrow>\n    \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n       ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i", "then"], ["proof (chain)\npicking this:\n  matrix_match A1 A2 B1 B2", "have 2:\n    \"\\<forall>i j. ((i<(row_length A1)*(row_length B1))\\<and>(j<(length A2)*(length B2))) \n     \\<longrightarrow>\n      (((A1 \\<circ> A2)\\<otimes>(B1 \\<circ>  B2))!j!i \n                = (scalar_product \n                    (row A1 (i div (row_length B1))) (col A2  (j div (length B2))))\n                   *(scalar_product \n                      (row B1 (i mod (row_length B1))) (col B2 (j mod (length B2)))))\""], ["proof (prove)\nusing this:\n  matrix_match A1 A2 B1 B2\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n       scalar_product (row A1 (i div row_length B1))\n        (col A2 (j div length B2)) *\n       scalar_product (row B1 (i mod row_length B1))\n        (col B2 (j mod length B2))", "using effective_matrix_match_condn_1 assms"], ["proof (prove)\nusing this:\n  matrix_match A1 A2 B1 B2\n  matrix_match ?A1.0 ?A2.0 ?B1.0 ?B2.0 \\<Longrightarrow>\n  \\<forall>i j.\n     i < row_length ?A1.0 * row_length ?B1.0 \\<and>\n     j < length ?A2.0 * length ?B2.0 \\<longrightarrow>\n     (?A1.0 \\<circ> ?A2.0 \\<otimes> ?B1.0 \\<circ> ?B2.0) ! j ! i =\n     scalar_product (row ?A1.0 (i div row_length ?B1.0))\n      (col ?A2.0 (j div length ?B2.0)) *\n     scalar_product (row ?B1.0 (i mod row_length ?B1.0))\n      (col ?B2.0 (j mod length ?B2.0))\n  matrix_match A1 A2 B1 B2\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n       scalar_product (row A1 (i div row_length B1))\n        (col A2 (j div length B2)) *\n       scalar_product (row B1 (i mod row_length B1))\n        (col B2 (j mod length B2))", "by metis"], ["proof (state)\nthis:\n  \\<forall>i j.\n     i < row_length A1 * row_length B1 \\<and>\n     j < length A2 * length B2 \\<longrightarrow>\n     (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n     scalar_product (row A1 (i div row_length B1))\n      (col A2 (j div length B2)) *\n     scalar_product (row B1 (i mod row_length B1))\n      (col B2 (j mod length B2))\n\ngoal (1 subgoal):\n 1. matrix_match A1 A2 B1 B2 \\<Longrightarrow>\n    \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n       ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i", "moreover"], ["proof (state)\nthis:\n  \\<forall>i j.\n     i < row_length A1 * row_length B1 \\<and>\n     j < length A2 * length B2 \\<longrightarrow>\n     (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n     scalar_product (row A1 (i div row_length B1))\n      (col A2 (j div length B2)) *\n     scalar_product (row B1 (i mod row_length B1))\n      (col B2 (j mod length B2))\n\ngoal (1 subgoal):\n 1. matrix_match A1 A2 B1 B2 \\<Longrightarrow>\n    \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n       ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i", "from 1"], ["proof (chain)\npicking this:\n  matrix_match A1 A2 B1 B2", "have 3:\"\\<forall>i j. ((i<(row_length A1)*(row_length B1))\\<and>(j<(length A2)*(length B2))) \\<longrightarrow>\n           ((A1 \\<otimes> B1)\\<circ>(A2 \\<otimes> B2))!j!i = \n                 scalar_product \n          (vec_vec_Tensor (row A1 (i div row_length B1)) (row B1 (i mod row_length B1))) \n          (vec_vec_Tensor (col A2 (j div length B2)) (col B2 (j mod length B2)))\""], ["proof (prove)\nusing this:\n  matrix_match A1 A2 B1 B2\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i =\n       scalar_product\n        (vec_vec_Tensor (row A1 (i div row_length B1))\n          (row B1 (i mod row_length B1)))\n        (vec_vec_Tensor (col A2 (j div length B2))\n          (col B2 (j mod length B2)))", "using effective_matrix_match_condn_2"], ["proof (prove)\nusing this:\n  matrix_match A1 A2 B1 B2\n  matrix_match ?A1.0 ?A2.0 ?B1.0 ?B2.0 \\<Longrightarrow>\n  \\<forall>i j.\n     i < row_length ?A1.0 * row_length ?B1.0 \\<and>\n     j < length ?A2.0 * length ?B2.0 \\<longrightarrow>\n     ((?A1.0 \\<otimes> ?B1.0) \\<circ> (?A2.0 \\<otimes> ?B2.0)) ! j ! i =\n     scalar_product\n      (vec_vec_Tensor (row ?A1.0 (i div row_length ?B1.0))\n        (row ?B1.0 (i mod row_length ?B1.0)))\n      (vec_vec_Tensor (col ?A2.0 (j div length ?B2.0))\n        (col ?B2.0 (j mod length ?B2.0)))\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i =\n       scalar_product\n        (vec_vec_Tensor (row A1 (i div row_length B1))\n          (row B1 (i mod row_length B1)))\n        (vec_vec_Tensor (col A2 (j div length B2))\n          (col B2 (j mod length B2)))", "by auto"], ["proof (state)\nthis:\n  \\<forall>i j.\n     i < row_length A1 * row_length B1 \\<and>\n     j < length A2 * length B2 \\<longrightarrow>\n     ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i =\n     scalar_product\n      (vec_vec_Tensor (row A1 (i div row_length B1))\n        (row B1 (i mod row_length B1)))\n      (vec_vec_Tensor (col A2 (j div length B2)) (col B2 (j mod length B2)))\n\ngoal (1 subgoal):\n 1. matrix_match A1 A2 B1 B2 \\<Longrightarrow>\n    \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n       ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i", "have  \"\\<forall>i j. ((i<(row_length A1)*(row_length B1))\\<and>(j<(length A2)*(length B2))) \n         \\<longrightarrow>length (row A1 (i div (row_length B1))) \n                           = length (col A2  (j div (length B2)))\"\n and \"\\<forall>i j. ((i<(row_length A1)*(row_length B1))\\<and>(j<(length A2)*(length B2))) \n           \\<longrightarrow> length (row B1 (i mod (row_length B1))) \n                             = length (col B2 (j mod (length B2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       length (row A1 (i div row_length B1)) =\n       length (col A2 (j div length B2)) &&&\n    \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       length (row B1 (i mod row_length B1)) =\n       length (col B2 (j mod length B2))", "using assms effective_row_col_match"], ["proof (prove)\nusing this:\n  matrix_match A1 A2 B1 B2\n  matrix_match ?A1.0 ?A2.0 ?B1.0 ?B2.0 \\<Longrightarrow>\n  \\<forall>i j.\n     i < row_length ?A1.0 * row_length ?B1.0 \\<and>\n     j < length ?A2.0 * length ?B2.0 \\<longrightarrow>\n     length (row ?A1.0 (i div row_length ?B1.0)) =\n     length (col ?A2.0 (j div length ?B2.0))\n  matrix_match ?A1.0 ?A2.0 ?B1.0 ?B2.0 \\<Longrightarrow>\n  \\<forall>i j.\n     i < row_length ?A1.0 * row_length ?B1.0 \\<and>\n     j < length ?A2.0 * length ?B2.0 \\<longrightarrow>\n     length (row ?B1.0 (i mod row_length ?B1.0)) =\n     length (col ?B2.0 (j mod length ?B2.0))\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       length (row A1 (i div row_length B1)) =\n       length (col A2 (j div length B2)) &&&\n    \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       length (row B1 (i mod row_length B1)) =\n       length (col B2 (j mod length B2))", "by auto"], ["proof (state)\nthis:\n  \\<forall>i j.\n     i < row_length A1 * row_length B1 \\<and>\n     j < length A2 * length B2 \\<longrightarrow>\n     length (row A1 (i div row_length B1)) =\n     length (col A2 (j div length B2))\n  \\<forall>i j.\n     i < row_length A1 * row_length B1 \\<and>\n     j < length A2 * length B2 \\<longrightarrow>\n     length (row B1 (i mod row_length B1)) =\n     length (col B2 (j mod length B2))\n\ngoal (1 subgoal):\n 1. matrix_match A1 A2 B1 B2 \\<Longrightarrow>\n    \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n       ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i", "then"], ["proof (chain)\npicking this:\n  \\<forall>i j.\n     i < row_length A1 * row_length B1 \\<and>\n     j < length A2 * length B2 \\<longrightarrow>\n     length (row A1 (i div row_length B1)) =\n     length (col A2 (j div length B2))\n  \\<forall>i j.\n     i < row_length A1 * row_length B1 \\<and>\n     j < length A2 * length B2 \\<longrightarrow>\n     length (row B1 (i mod row_length B1)) =\n     length (col B2 (j mod length B2))", "have \" \\<forall>i j. ((i<(row_length A1)*(row_length B1))\\<and>(j<(length A2)*(length B2))) \n           \\<longrightarrow>\n           (scalar_product (row A1 (i div (row_length B1))) (col A2  (j div (length B2))))\n                   *(scalar_product (row B1 (i mod (row_length B1))) (col B2 (j mod (length B2))))\n             =  scalar_product \n          (vec_vec_Tensor (row A1 (i div row_length B1)) (row B1 (i mod row_length B1))) \n          (vec_vec_Tensor (col A2 (j div length B2)) (col B2 (j mod length B2)))\""], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i < row_length A1 * row_length B1 \\<and>\n     j < length A2 * length B2 \\<longrightarrow>\n     length (row A1 (i div row_length B1)) =\n     length (col A2 (j div length B2))\n  \\<forall>i j.\n     i < row_length A1 * row_length B1 \\<and>\n     j < length A2 * length B2 \\<longrightarrow>\n     length (row B1 (i mod row_length B1)) =\n     length (col B2 (j mod length B2))\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       scalar_product (row A1 (i div row_length B1))\n        (col A2 (j div length B2)) *\n       scalar_product (row B1 (i mod row_length B1))\n        (col B2 (j mod length B2)) =\n       scalar_product\n        (vec_vec_Tensor (row A1 (i div row_length B1))\n          (row B1 (i mod row_length B1)))\n        (vec_vec_Tensor (col A2 (j div length B2))\n          (col B2 (j mod length B2)))", "using effective_scalar_product_distributivity"], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i < row_length A1 * row_length B1 \\<and>\n     j < length A2 * length B2 \\<longrightarrow>\n     length (row A1 (i div row_length B1)) =\n     length (col A2 (j div length B2))\n  \\<forall>i j.\n     i < row_length A1 * row_length B1 \\<and>\n     j < length A2 * length B2 \\<longrightarrow>\n     length (row B1 (i mod row_length B1)) =\n     length (col B2 (j mod length B2))\n  \\<lbrakk>length ?v1.0 = length ?v2.0; length ?w1.0 = length ?w2.0\\<rbrakk>\n  \\<Longrightarrow> scalar_product ?v1.0 ?v2.0 *\n                    scalar_product ?w1.0 ?w2.0 =\n                    scalar_product (vec_vec_Tensor ?v1.0 ?w1.0)\n                     (vec_vec_Tensor ?v2.0 ?w2.0)\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       scalar_product (row A1 (i div row_length B1))\n        (col A2 (j div length B2)) *\n       scalar_product (row B1 (i mod row_length B1))\n        (col B2 (j mod length B2)) =\n       scalar_product\n        (vec_vec_Tensor (row A1 (i div row_length B1))\n          (row B1 (i mod row_length B1)))\n        (vec_vec_Tensor (col A2 (j div length B2))\n          (col B2 (j mod length B2)))", "by auto"], ["proof (state)\nthis:\n  \\<forall>i j.\n     i < row_length A1 * row_length B1 \\<and>\n     j < length A2 * length B2 \\<longrightarrow>\n     scalar_product (row A1 (i div row_length B1))\n      (col A2 (j div length B2)) *\n     scalar_product (row B1 (i mod row_length B1))\n      (col B2 (j mod length B2)) =\n     scalar_product\n      (vec_vec_Tensor (row A1 (i div row_length B1))\n        (row B1 (i mod row_length B1)))\n      (vec_vec_Tensor (col A2 (j div length B2)) (col B2 (j mod length B2)))\n\ngoal (1 subgoal):\n 1. matrix_match A1 A2 B1 B2 \\<Longrightarrow>\n    \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n       ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i", "then"], ["proof (chain)\npicking this:\n  \\<forall>i j.\n     i < row_length A1 * row_length B1 \\<and>\n     j < length A2 * length B2 \\<longrightarrow>\n     scalar_product (row A1 (i div row_length B1))\n      (col A2 (j div length B2)) *\n     scalar_product (row B1 (i mod row_length B1))\n      (col B2 (j mod length B2)) =\n     scalar_product\n      (vec_vec_Tensor (row A1 (i div row_length B1))\n        (row B1 (i mod row_length B1)))\n      (vec_vec_Tensor (col A2 (j div length B2)) (col B2 (j mod length B2)))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i < row_length A1 * row_length B1 \\<and>\n     j < length A2 * length B2 \\<longrightarrow>\n     scalar_product (row A1 (i div row_length B1))\n      (col A2 (j div length B2)) *\n     scalar_product (row B1 (i mod row_length B1))\n      (col B2 (j mod length B2)) =\n     scalar_product\n      (vec_vec_Tensor (row A1 (i div row_length B1))\n        (row B1 (i mod row_length B1)))\n      (vec_vec_Tensor (col A2 (j div length B2)) (col B2 (j mod length B2)))\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n       ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i", "using 2 3"], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i < row_length A1 * row_length B1 \\<and>\n     j < length A2 * length B2 \\<longrightarrow>\n     scalar_product (row A1 (i div row_length B1))\n      (col A2 (j div length B2)) *\n     scalar_product (row B1 (i mod row_length B1))\n      (col B2 (j mod length B2)) =\n     scalar_product\n      (vec_vec_Tensor (row A1 (i div row_length B1))\n        (row B1 (i mod row_length B1)))\n      (vec_vec_Tensor (col A2 (j div length B2)) (col B2 (j mod length B2)))\n  \\<forall>i j.\n     i < row_length A1 * row_length B1 \\<and>\n     j < length A2 * length B2 \\<longrightarrow>\n     (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n     scalar_product (row A1 (i div row_length B1))\n      (col A2 (j div length B2)) *\n     scalar_product (row B1 (i mod row_length B1))\n      (col B2 (j mod length B2))\n  \\<forall>i j.\n     i < row_length A1 * row_length B1 \\<and>\n     j < length A2 * length B2 \\<longrightarrow>\n     ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i =\n     scalar_product\n      (vec_vec_Tensor (row A1 (i div row_length B1))\n        (row B1 (i mod row_length B1)))\n      (vec_vec_Tensor (col A2 (j div length B2)) (col B2 (j mod length B2)))\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < row_length A1 * row_length B1 \\<and>\n       j < length A2 * length B2 \\<longrightarrow>\n       (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n       ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i", "by auto"], ["proof (state)\nthis:\n  \\<forall>i j.\n     i < row_length A1 * row_length B1 \\<and>\n     j < length A2 * length B2 \\<longrightarrow>\n     (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n     ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem element_match:\n \"matrix_match A1 A2 B1 B2 \\<Longrightarrow>(\\<forall>i<((row_length A1)*(row_length B1)).\n                              \\<forall>j<((length A2)*(length B2)). \n(((A1 \\<circ> A2)\\<otimes>(B1 \\<circ>  B2))!j!i\n                  = ((A1 \\<otimes> B1)\\<circ>(A2 \\<otimes> B2))!j!i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_match A1 A2 B1 B2 \\<Longrightarrow>\n    \\<forall>i<row_length A1 * row_length B1.\n       \\<forall>j<length A2 * length B2.\n          (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n          ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i", "using prelim_element_match"], ["proof (prove)\nusing this:\n  matrix_match ?A1.0 ?A2.0 ?B1.0 ?B2.0 \\<Longrightarrow>\n  \\<forall>i j.\n     i < row_length ?A1.0 * row_length ?B1.0 \\<and>\n     j < length ?A2.0 * length ?B2.0 \\<longrightarrow>\n     (?A1.0 \\<circ> ?A2.0 \\<otimes> ?B1.0 \\<circ> ?B2.0) ! j ! i =\n     ((?A1.0 \\<otimes> ?B1.0) \\<circ> (?A2.0 \\<otimes> ?B2.0)) ! j ! i\n\ngoal (1 subgoal):\n 1. matrix_match A1 A2 B1 B2 \\<Longrightarrow>\n    \\<forall>i<row_length A1 * row_length B1.\n       \\<forall>j<length A2 * length B2.\n          (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n          ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i", "by auto"], ["", "lemma application: fixes m1 m2 \nshows \"\\<forall>m1 m2.(mat nr nc m1)\n              \\<and>(mat nr nc m2)\n              \\<and>(\\<forall> j < nc. \\<forall> i < nr. m1 ! j ! i = m2 ! j ! i)\n                  \\<longrightarrow> (m1 = m2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m1 m2.\n       mat nr nc m1 \\<and>\n       mat nr nc m2 \\<and>\n       (\\<forall>j<nc.\n           \\<forall>i<nr. m1 ! j ! i = m2 ! j ! i) \\<longrightarrow>\n       m1 = m2", "using mat_eqI"], ["proof (prove)\nusing this:\n  \\<lbrakk>mat ?nr ?nc ?m1.0; mat ?nr ?nc ?m2.0;\n   \\<And>i j.\n      \\<lbrakk>i < ?nc; j < ?nr\\<rbrakk>\n      \\<Longrightarrow> ?m1.0 ! i ! j = ?m2.0 ! i ! j\\<rbrakk>\n  \\<Longrightarrow> ?m1.0 = ?m2.0\n\ngoal (1 subgoal):\n 1. \\<forall>m1 m2.\n       mat nr nc m1 \\<and>\n       mat nr nc m2 \\<and>\n       (\\<forall>j<nc.\n           \\<forall>i<nr. m1 ! j ! i = m2 ! j ! i) \\<longrightarrow>\n       m1 = m2", "by blast"], ["", "theorem tensor_compose_condn: \nassumes wf1:\"mat nr nc ((A1\\<circ>A2)\\<otimes>(B1\\<circ>B2))\"\n   and wf2:\"mat nr nc ((A1 \\<otimes> B1)\\<circ>(A2 \\<otimes> B2))\"\n   and wf3:\"\\<forall>j<nc.\\<forall>i<nr.(((A1 \\<circ> A2)\\<otimes>(B1 \\<circ>B2))!j!i  \n                              = ((A1 \\<otimes> B1)\\<circ>(A2 \\<otimes> B2))!j!i)\" \n shows \"((A1 \\<circ> A2) \\<otimes> (B1 \\<circ> B2))  \n                              = ((A1 \\<otimes> B1)\\<circ>(A2 \\<otimes> B2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2 =\n    (A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)", "using application wf1 wf2 wf3"], ["proof (prove)\nusing this:\n  \\<forall>m1 m2.\n     mat ?nr ?nc m1 \\<and>\n     mat ?nr ?nc m2 \\<and>\n     (\\<forall>j<?nc.\n         \\<forall>i<?nr. m1 ! j ! i = m2 ! j ! i) \\<longrightarrow>\n     m1 = m2\n  mat nr nc (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)\n  mat nr nc ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2))\n  \\<forall>j<nc.\n     \\<forall>i<nr.\n        (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n        ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i\n\ngoal (1 subgoal):\n 1. A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2 =\n    (A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)", "by blast"], ["", "text\\<open>The following theorem gives us the distributivity relation of tensor\nproduct with matrix multiplication\\<close>"], ["", "theorem distributivity: \n assumes  \"matrix_match A1 A2 B1 B2\"\n shows \"((A1 \\<circ> A2)\\<otimes>(B1\\<circ>B2)) = ((A1 \\<otimes> B1)\\<circ>(A2 \\<otimes> B2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2 =\n    (A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2 =\n    (A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)", "let ?nr = \" ((row_length A1)*(row_length B1))\""], ["proof (state)\ngoal (1 subgoal):\n 1. A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2 =\n    (A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)", "let ?nc = \"((length A2)*(length B2))\""], ["proof (state)\ngoal (1 subgoal):\n 1. A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2 =\n    (A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)", "have \"mat ?nr ?nc ((A1\\<circ>A2)\\<otimes>(B1\\<circ>B2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length A1 * row_length B1) (length A2 * length B2)\n     (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)", "by (metis assms effective_tensor_compose_distribution1)"], ["proof (state)\nthis:\n  mat (row_length A1 * row_length B1) (length A2 * length B2)\n   (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)\n\ngoal (1 subgoal):\n 1. A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2 =\n    (A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)", "moreover"], ["proof (state)\nthis:\n  mat (row_length A1 * row_length B1) (length A2 * length B2)\n   (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)\n\ngoal (1 subgoal):\n 1. A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2 =\n    (A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)", "have \"mat ?nr ?nc ((A1 \\<otimes> B1)\\<circ>(A2 \\<otimes> B2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (row_length A1 * row_length B1) (length A2 * length B2)\n     ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2))", "using assms"], ["proof (prove)\nusing this:\n  matrix_match A1 A2 B1 B2\n\ngoal (1 subgoal):\n 1. mat (row_length A1 * row_length B1) (length A2 * length B2)\n     ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2))", "by (metis effective_tensor_compose_distribution2)"], ["proof (state)\nthis:\n  mat (row_length A1 * row_length B1) (length A2 * length B2)\n   ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2))\n\ngoal (1 subgoal):\n 1. A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2 =\n    (A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)", "moreover"], ["proof (state)\nthis:\n  mat (row_length A1 * row_length B1) (length A2 * length B2)\n   ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2))\n\ngoal (1 subgoal):\n 1. A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2 =\n    (A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)", "have \"\\<forall>j<?nc.\\<forall>i<?nr.\n                   (((A1 \\<circ> A2)\\<otimes>(B1 \\<circ>B2))!j!i \n                                = ((A1 \\<otimes> B1)\\<circ>(A2 \\<otimes> B2))!j!i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j<length A2 * length B2.\n       \\<forall>i<row_length A1 * row_length B1.\n          (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n          ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i", "using element_match assms"], ["proof (prove)\nusing this:\n  matrix_match ?A1.0 ?A2.0 ?B1.0 ?B2.0 \\<Longrightarrow>\n  \\<forall>i<row_length ?A1.0 * row_length ?B1.0.\n     \\<forall>j<length ?A2.0 * length ?B2.0.\n        (?A1.0 \\<circ> ?A2.0 \\<otimes> ?B1.0 \\<circ> ?B2.0) ! j ! i =\n        ((?A1.0 \\<otimes> ?B1.0) \\<circ> (?A2.0 \\<otimes> ?B2.0)) ! j ! i\n  matrix_match A1 A2 B1 B2\n\ngoal (1 subgoal):\n 1. \\<forall>j<length A2 * length B2.\n       \\<forall>i<row_length A1 * row_length B1.\n          (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n          ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i", "by auto"], ["proof (state)\nthis:\n  \\<forall>j<length A2 * length B2.\n     \\<forall>i<row_length A1 * row_length B1.\n        (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n        ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i\n\ngoal (1 subgoal):\n 1. A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2 =\n    (A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)", "ultimately"], ["proof (chain)\npicking this:\n  mat (row_length A1 * row_length B1) (length A2 * length B2)\n   (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)\n  mat (row_length A1 * row_length B1) (length A2 * length B2)\n   ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2))\n  \\<forall>j<length A2 * length B2.\n     \\<forall>i<row_length A1 * row_length B1.\n        (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n        ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i", "show ?thesis"], ["proof (prove)\nusing this:\n  mat (row_length A1 * row_length B1) (length A2 * length B2)\n   (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)\n  mat (row_length A1 * row_length B1) (length A2 * length B2)\n   ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2))\n  \\<forall>j<length A2 * length B2.\n     \\<forall>i<row_length A1 * row_length B1.\n        (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n        ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i\n\ngoal (1 subgoal):\n 1. A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2 =\n    (A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)", "using application"], ["proof (prove)\nusing this:\n  mat (row_length A1 * row_length B1) (length A2 * length B2)\n   (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2)\n  mat (row_length A1 * row_length B1) (length A2 * length B2)\n   ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2))\n  \\<forall>j<length A2 * length B2.\n     \\<forall>i<row_length A1 * row_length B1.\n        (A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2) ! j ! i =\n        ((A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)) ! j ! i\n  \\<forall>m1 m2.\n     mat ?nr ?nc m1 \\<and>\n     mat ?nr ?nc m2 \\<and>\n     (\\<forall>j<?nc.\n         \\<forall>i<?nr. m1 ! j ! i = m2 ! j ! i) \\<longrightarrow>\n     m1 = m2\n\ngoal (1 subgoal):\n 1. A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2 =\n    (A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)", "by blast"], ["proof (state)\nthis:\n  A1 \\<circ> A2 \\<otimes> B1 \\<circ> B2 =\n  (A1 \\<otimes> B1) \\<circ> (A2 \\<otimes> B2)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}