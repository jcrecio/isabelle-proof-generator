{"file_name": "/home/qj213/afp-2021-10-22/thys/Optics/Scenes.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Optics", "problem_names": ["lemma ovr_assoc: \"x \\<triangleright> (y \\<triangleright> z) = x \\<triangleright> y \\<triangleright> z\"", "lemma equiv_region: \"equiv UNIV (region X)\"", "lemma equiv_coregion: \"equiv UNIV (coregion X)\"", "lemma region_coregion_Id:\n  \"idem_scene X \\<Longrightarrow> region X \\<inter> coregion X = Id\"", "lemma state_eq_iff: \"idem_scene S \\<Longrightarrow> x = y \\<longleftrightarrow> (x, y) \\<in> region S \\<and> (x, y) \\<in> coregion S\"", "lemma scene_override_idem [simp]: \"idem_scene X \\<Longrightarrow> s \\<oplus>\\<^sub>S s on X = s\"", "lemma scene_override_overshadow_left [simp]:\n  \"S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>2 on X \\<oplus>\\<^sub>S S\\<^sub>3 on X = S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>3 on X\"", "lemma scene_override_overshadow_right [simp]:\n  \"S\\<^sub>1 \\<oplus>\\<^sub>S (S\\<^sub>2 \\<oplus>\\<^sub>S S\\<^sub>3 on X) on X = S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>3 on X\"", "lemma scene_equiv_region: \"idem_scene X \\<Longrightarrow> region X = {(S\\<^sub>1, S\\<^sub>2). S\\<^sub>1 \\<approx>\\<^sub>S S\\<^sub>2 on X}\"", "lemma scene_indep_override:\n  \"X \\<bowtie>\\<^sub>S Y = (\\<forall> s\\<^sub>1 s\\<^sub>2 s\\<^sub>3. s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 on X \\<oplus>\\<^sub>S s\\<^sub>3 on Y = s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>3 on Y \\<oplus>\\<^sub>S s\\<^sub>2 on X)\"", "lemma scene_indep_copy:\n  \"X \\<bowtie>\\<^sub>S Y = (\\<forall> s\\<^sub>1  s\\<^sub>2. cp\\<^bsub>X\\<^esub> s\\<^sub>1 \\<circ> cp\\<^bsub>Y\\<^esub> s\\<^sub>2 = cp\\<^bsub>Y\\<^esub> s\\<^sub>2 \\<circ> cp\\<^bsub>X\\<^esub> s\\<^sub>1)\"", "lemma scene_indep_sym:\n  \"X \\<bowtie>\\<^sub>S Y \\<Longrightarrow> Y \\<bowtie>\\<^sub>S X\"", "lemma scene_compat_copy:\n  \"X ##\\<^sub>S Y = (\\<forall> s. cp\\<^bsub>X\\<^esub> s \\<circ> cp\\<^bsub>Y\\<^esub> s = cp\\<^bsub>Y\\<^esub> s \\<circ> cp\\<^bsub>X\\<^esub> s)\"", "lemma scene_indep_compat [simp]: \"X \\<bowtie>\\<^sub>S Y \\<Longrightarrow> X ##\\<^sub>S Y\"", "lemma scene_compat_refl: \"X ##\\<^sub>S X\"", "lemma scene_compat_sym: \"X ##\\<^sub>S Y \\<Longrightarrow> Y ##\\<^sub>S X\"", "lemma scene_override_commute_indep:\n  assumes \"X \\<bowtie>\\<^sub>S Y\"\n  shows \"S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>2 on X \\<oplus>\\<^sub>S S\\<^sub>3 on Y = S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>3 on Y \\<oplus>\\<^sub>S S\\<^sub>2 on X\"", "lemma uminus_scene_twice: \"- (- (X :: 's scene)) = X\"", "lemma scene_override_id [simp]: \"S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>2 on \\<top>\\<^sub>S = S\\<^sub>2\"", "lemma scene_override_unit [simp]: \"S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>2 on \\<bottom>\\<^sub>S = S\\<^sub>1\"", "lemma scene_override_commute: \"S\\<^sub>2 \\<oplus>\\<^sub>S S\\<^sub>1 on (- X) = S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>2 on X\"", "lemma scene_union_incompat: \"\\<not> X ##\\<^sub>S Y \\<Longrightarrow> X \\<squnion>\\<^sub>S Y = \\<bottom>\\<^sub>S\"", "lemma scene_override_union: \"X ##\\<^sub>S Y \\<Longrightarrow> S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>2 on (X \\<squnion>\\<^sub>S Y) = (S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>2 on X) \\<oplus>\\<^sub>S S\\<^sub>2 on Y\"", "lemma scene_union_unit: \"X \\<squnion>\\<^sub>S \\<bottom>\\<^sub>S = X\"", "lemma idem_scene_union [simp]: \"\\<lbrakk> idem_scene A; idem_scene B \\<rbrakk> \\<Longrightarrow> idem_scene (A \\<squnion>\\<^sub>S B)\"", "lemma scene_union_annhil: \"idem_scene X \\<Longrightarrow> X \\<squnion>\\<^sub>S \\<top>\\<^sub>S = \\<top>\\<^sub>S\"", "lemma scene_union_pres_compat: \"\\<lbrakk> A ##\\<^sub>S B; A ##\\<^sub>S C \\<rbrakk> \\<Longrightarrow> A ##\\<^sub>S (B \\<squnion>\\<^sub>S C)\"", "lemma scene_indep_self_compl: \"A \\<bowtie>\\<^sub>S -A\"", "lemma scene_compat_self_compl: \"A ##\\<^sub>S -A\"", "lemma scene_union_assoc: \n  assumes \"X ##\\<^sub>S Y\" \"X ##\\<^sub>S Z\" \"Y ##\\<^sub>S Z\"\n  shows \"X \\<squnion>\\<^sub>S (Y \\<squnion>\\<^sub>S Z) = (X \\<squnion>\\<^sub>S Y) \\<squnion>\\<^sub>S Z\"", "lemma scene_inter_indep:\n  assumes \"idem_scene X\" \"idem_scene Y\" \"X \\<bowtie>\\<^sub>S Y\"\n  shows \"X \\<sqinter>\\<^sub>S Y = \\<bottom>\\<^sub>S\"", "lemma scene_union_idem: \"X \\<squnion>\\<^sub>S X = X\"", "lemma scene_union_compl: \"idem_scene X \\<Longrightarrow> X \\<squnion>\\<^sub>S - X = \\<top>\\<^sub>S\"", "lemma scene_inter_idem: \"X \\<sqinter>\\<^sub>S X = X\"", "lemma scene_union_commute: \"X \\<squnion>\\<^sub>S Y = Y \\<squnion>\\<^sub>S X\"", "lemma scene_inter_compl: \"idem_scene X \\<Longrightarrow> X \\<sqinter>\\<^sub>S - X = \\<bottom>\\<^sub>S\"", "lemma scene_demorgan1: \"-(X \\<squnion>\\<^sub>S Y) = -X \\<sqinter>\\<^sub>S -Y\"", "lemma scene_demorgan2: \"-(X \\<sqinter>\\<^sub>S Y) = -X \\<squnion>\\<^sub>S -Y\"", "lemma scene_compat_top: \"idem_scene X \\<Longrightarrow> X ##\\<^sub>S \\<top>\\<^sub>S\"", "lemma subscene_refl: \"X \\<subseteq>\\<^sub>S X\"", "lemma subscene_trans: \"\\<lbrakk> idem_scene Y; X \\<subseteq>\\<^sub>S Y; Y \\<subseteq>\\<^sub>S Z \\<rbrakk> \\<Longrightarrow> X \\<subseteq>\\<^sub>S Z\"", "lemma subscene_antisym: \"\\<lbrakk> idem_scene Y; X \\<subseteq>\\<^sub>S Y; Y \\<subseteq>\\<^sub>S X \\<rbrakk> \\<Longrightarrow> X = Y\"", "lemma subscene_copy_def:\n  assumes \"idem_scene X\" \"idem_scene Y\"\n  shows \"X \\<subseteq>\\<^sub>S Y = (\\<forall> s\\<^sub>1 s\\<^sub>2. cp\\<^bsub>X\\<^esub> s\\<^sub>1 \\<circ> cp\\<^bsub>Y\\<^esub> s\\<^sub>2 = cp\\<^bsub>Y\\<^esub> (cp\\<^bsub>X\\<^esub> s\\<^sub>1 s\\<^sub>2))\"", "lemma subscene_eliminate:\n  \"\\<lbrakk> idem_scene Y; X \\<le> Y \\<rbrakk> \\<Longrightarrow> s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 on X \\<oplus>\\<^sub>S s\\<^sub>3 on Y = s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>3 on Y\"", "lemma scene_bot_least: \"\\<bottom>\\<^sub>S \\<le> X\"", "lemma scene_top_greatest: \"X \\<le> \\<top>\\<^sub>S\"", "lemma scene_union_ub: \"\\<lbrakk> idem_scene Y; X \\<bowtie>\\<^sub>S Y \\<rbrakk> \\<Longrightarrow> X \\<le> (X \\<squnion>\\<^sub>S Y)\"", "lemma scene_le_then_compat: \"\\<lbrakk> idem_scene X; idem_scene Y; X \\<le> Y \\<rbrakk> \\<Longrightarrow> X ##\\<^sub>S Y\"", "lemma indep_then_compl_in: \"A \\<bowtie>\\<^sub>S B \\<Longrightarrow> A \\<le> -B\"", "lemma scene_comp_idem [simp]: \"idem_scene S \\<Longrightarrow> idem_scene (S ;\\<^sub>S X)\"", "lemma scene_comp_lens_indep [simp]: \"X \\<bowtie> Y \\<Longrightarrow> (A ;\\<^sub>S X) \\<bowtie>\\<^sub>S (A ;\\<^sub>S Y)\"", "lemma scene_comp_indep [simp]: \"A \\<bowtie>\\<^sub>S B \\<Longrightarrow> (A ;\\<^sub>S X) \\<bowtie>\\<^sub>S (B ;\\<^sub>S X)\"", "lemma vwb_impl_idem_scene [simp]:\n  \"vwb_lens X \\<Longrightarrow> idem_scene \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim>\"", "lemma idem_scene_impl_vwb:\n  \"\\<lbrakk> mwb_lens X; idem_scene \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> \\<rbrakk> \\<Longrightarrow> vwb_lens X\"", "lemma lens_compat_scene: \"\\<lbrakk> mwb_lens X; mwb_lens Y \\<rbrakk> \\<Longrightarrow> X ##\\<^sub>L Y \\<longleftrightarrow> \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> ##\\<^sub>S \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim>\"", "lemma zero_lens_scene: \"\\<lbrakk>0\\<^sub>L\\<rbrakk>\\<^sub>\\<sim> = \\<bottom>\\<^sub>S\"", "lemma one_lens_scene: \"\\<lbrakk>1\\<^sub>L\\<rbrakk>\\<^sub>\\<sim> = \\<top>\\<^sub>S\"", "lemma lens_scene_override: \n  \"mwb_lens X \\<Longrightarrow> s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 on \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> = s\\<^sub>1 \\<oplus>\\<^sub>L s\\<^sub>2 on X\"", "lemma lens_indep_scene:\n  assumes \"vwb_lens X\" \"vwb_lens Y\"\n  shows \"(X \\<bowtie> Y) \\<longleftrightarrow> \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> \\<bowtie>\\<^sub>S \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim>\"", "lemma lens_indep_impl_scene_indep [simp]:\n  \"(X \\<bowtie> Y) \\<Longrightarrow> \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> \\<bowtie>\\<^sub>S \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim>\"", "lemma lens_plus_scene:\n  \"\\<lbrakk> vwb_lens X; vwb_lens Y; X \\<bowtie> Y \\<rbrakk> \\<Longrightarrow> \\<lbrakk>X +\\<^sub>L Y\\<rbrakk>\\<^sub>\\<sim> = \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> \\<squnion>\\<^sub>S \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim>\"", "lemma subscene_implies_sublens': \"\\<lbrakk> vwb_lens X; vwb_lens Y \\<rbrakk> \\<Longrightarrow> \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> \\<le> \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim> \\<longleftrightarrow> X \\<subseteq>\\<^sub>L' Y\"", "lemma sublens'_implies_subscene: \"\\<lbrakk> vwb_lens X; vwb_lens Y; X \\<subseteq>\\<^sub>L' Y \\<rbrakk> \\<Longrightarrow> \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> \\<le> \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim>\"", "lemma sublens_iff_subscene:\n  assumes \"vwb_lens X\" \"vwb_lens Y\"\n  shows \"X \\<subseteq>\\<^sub>L Y \\<longleftrightarrow> \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> \\<le> \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim>\"", "lemma lens_equiv_scene:\n  assumes \"vwb_lens X\" \"vwb_lens Y\"\n  shows \"X \\<approx>\\<^sub>L Y \\<longleftrightarrow> \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> = \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim>\"", "lemma lens_insert_idem: \"insert\\<^sub>S x (insert\\<^sub>S x A) = insert\\<^sub>S x A\"", "lemma lens_member_override: \"x \\<in>\\<^sub>S A \\<Longrightarrow> s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 on A \\<oplus>\\<^sub>L s\\<^sub>3 on x = s\\<^sub>1 \\<oplus>\\<^sub>S (s\\<^sub>2 \\<oplus>\\<^sub>L s\\<^sub>3 on x) on A\"", "lemma lens_member_put:\n  assumes \"vwb_lens x\" \"idem_scene a\" \"x \\<in>\\<^sub>S a\"\n  shows \"put\\<^bsub>x\\<^esub> s v \\<oplus>\\<^sub>S s on a = s\"", "lemma lens_member_top: \"x \\<in>\\<^sub>S \\<top>\\<^sub>S\"", "lemma lens_member_get_override [simp]: \"x \\<in>\\<^sub>S a \\<Longrightarrow> get\\<^bsub>x\\<^esub> (b \\<oplus>\\<^sub>S b' on a) = get\\<^bsub>x\\<^esub> b'\"", "lemma lens_not_member_get_override [simp]: \"x \\<notin>\\<^sub>S a \\<Longrightarrow> get\\<^bsub>x\\<^esub> (b \\<oplus>\\<^sub>S b' on a) = get\\<^bsub>x\\<^esub> b\"", "lemma fun_dom_scene_empty: \"fds({}) = \\<bottom>\\<^sub>S\"", "lemma fun_dom_scene_union: \"fds(A \\<union> B) = fds(A) \\<squnion>\\<^sub>S fds(B)\"", "lemma fun_dom_scene_compl: \"fds(- A) = - fds(A)\"", "lemma fun_dom_scene_inter: \"fds(A \\<inter> B) = fds(A) \\<sqinter>\\<^sub>S fds(B)\"", "lemma fun_dom_scene_UNIV: \"fds(UNIV) = \\<top>\\<^sub>S\"", "lemma fun_dom_scene_indep [simp]:   \n  \"fds(A) \\<bowtie>\\<^sub>S fds(B) \\<longleftrightarrow> A \\<inter> B = {}\"", "lemma fun_dom_scene_always_compat [simp]: \"fds(A) ##\\<^sub>S fds(B)\"", "lemma fun_dom_scene_le [simp]: \"fds(A) \\<subseteq>\\<^sub>S fds(B) \\<longleftrightarrow> A \\<subseteq> B\""], "translations": [["", "lemma ovr_assoc: \"x \\<triangleright> (y \\<triangleright> z) = x \\<triangleright> y \\<triangleright> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<triangleright> (y \\<triangleright> z) =\n    x \\<triangleright> y \\<triangleright> z", "by (simp add: ovr_overshadow_left ovr_overshadow_right)"], ["", "end"], ["", "locale idem_overrider = overrider +\n  assumes ovr_idem: \"x \\<triangleright> x = x\""], ["", "declare overrider.ovr_overshadow_left [simp]"], ["", "declare overrider.ovr_overshadow_right [simp]"], ["", "declare idem_overrider.ovr_idem [simp]"], ["", "subsection \\<open> Scene Type \\<close>"], ["", "typedef 's scene = \"{F :: 's \\<Rightarrow> 's \\<Rightarrow> 's. overrider F}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {F. overrider F}", "by (rule_tac x=\"\\<lambda> x y. x\" in exI, simp, unfold_locales, simp_all)"], ["", "setup_lifting type_definition_scene"], ["", "lift_definition idem_scene :: \"'s scene \\<Rightarrow> bool\" is idem_overrider"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lift_definition region :: \"'s scene \\<Rightarrow> 's rel\" \nis \"\\<lambda> F. {(s\\<^sub>1, s\\<^sub>2). (\\<forall> s. F s s\\<^sub>1 = F s s\\<^sub>2)}\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lift_definition coregion :: \"'s scene \\<Rightarrow> 's rel\" \nis \"\\<lambda> F. {(s\\<^sub>1, s\\<^sub>2). (\\<forall> s. F s\\<^sub>1 s = F s\\<^sub>2 s)}\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma equiv_region: \"equiv UNIV (region X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equiv UNIV (region X)", "apply (transfer)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       overrider X \\<Longrightarrow>\n       equiv UNIV\n        {(s\\<^sub>1, s\\<^sub>2). \\<forall>s. X s s\\<^sub>1 = X s s\\<^sub>2}", "apply (rule equivI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>X.\n       overrider X \\<Longrightarrow>\n       refl\n        {(s\\<^sub>1, s\\<^sub>2). \\<forall>s. X s s\\<^sub>1 = X s s\\<^sub>2}\n 2. \\<And>X.\n       overrider X \\<Longrightarrow>\n       sym {(s\\<^sub>1, s\\<^sub>2).\n            \\<forall>s. X s s\\<^sub>1 = X s s\\<^sub>2}\n 3. \\<And>X.\n       overrider X \\<Longrightarrow>\n       trans\n        {(s\\<^sub>1, s\\<^sub>2). \\<forall>s. X s s\\<^sub>1 = X s s\\<^sub>2}", "apply (rule refl_onI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X.\n       overrider X \\<Longrightarrow>\n       {(s\\<^sub>1, s\\<^sub>2). \\<forall>s. X s s\\<^sub>1 = X s s\\<^sub>2}\n       \\<subseteq> UNIV \\<times> UNIV\n 2. \\<And>X x.\n       \\<lbrakk>overrider X; x \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> (x, x)\n                         \\<in> {(s\\<^sub>1, s\\<^sub>2).\n                                \\<forall>s. X s s\\<^sub>1 = X s s\\<^sub>2}\n 3. \\<And>X.\n       overrider X \\<Longrightarrow>\n       sym {(s\\<^sub>1, s\\<^sub>2).\n            \\<forall>s. X s s\\<^sub>1 = X s s\\<^sub>2}\n 4. \\<And>X.\n       overrider X \\<Longrightarrow>\n       trans\n        {(s\\<^sub>1, s\\<^sub>2). \\<forall>s. X s s\\<^sub>1 = X s s\\<^sub>2}", "apply (auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X.\n       overrider X \\<Longrightarrow>\n       sym {(s\\<^sub>1, s\\<^sub>2).\n            \\<forall>s. X s s\\<^sub>1 = X s s\\<^sub>2}\n 2. \\<And>X.\n       overrider X \\<Longrightarrow>\n       trans\n        {(s\\<^sub>1, s\\<^sub>2). \\<forall>s. X s s\\<^sub>1 = X s s\\<^sub>2}", "apply (rule symI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X a b.\n       \\<lbrakk>overrider X;\n        (a, b)\n        \\<in> {(s\\<^sub>1, s\\<^sub>2).\n               \\<forall>s. X s s\\<^sub>1 = X s s\\<^sub>2}\\<rbrakk>\n       \\<Longrightarrow> (b, a)\n                         \\<in> {(s\\<^sub>1, s\\<^sub>2).\n                                \\<forall>s. X s s\\<^sub>1 = X s s\\<^sub>2}\n 2. \\<And>X.\n       overrider X \\<Longrightarrow>\n       trans\n        {(s\\<^sub>1, s\\<^sub>2). \\<forall>s. X s s\\<^sub>1 = X s s\\<^sub>2}", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       overrider X \\<Longrightarrow>\n       trans\n        {(s\\<^sub>1, s\\<^sub>2). \\<forall>s. X s s\\<^sub>1 = X s s\\<^sub>2}", "apply (rule transI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X x y z.\n       \\<lbrakk>overrider X;\n        (x, y)\n        \\<in> {(s\\<^sub>1, s\\<^sub>2).\n               \\<forall>s. X s s\\<^sub>1 = X s s\\<^sub>2};\n        (y, z)\n        \\<in> {(s\\<^sub>1, s\\<^sub>2).\n               \\<forall>s. X s s\\<^sub>1 = X s s\\<^sub>2}\\<rbrakk>\n       \\<Longrightarrow> (x, z)\n                         \\<in> {(s\\<^sub>1, s\\<^sub>2).\n                                \\<forall>s. X s s\\<^sub>1 = X s s\\<^sub>2}", "apply (auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma equiv_coregion: \"equiv UNIV (coregion X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equiv UNIV (coregion X)", "apply (transfer)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       overrider X \\<Longrightarrow>\n       equiv UNIV\n        {(s\\<^sub>1, s\\<^sub>2). \\<forall>s. X s\\<^sub>1 s = X s\\<^sub>2 s}", "apply (rule equivI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>X.\n       overrider X \\<Longrightarrow>\n       refl\n        {(s\\<^sub>1, s\\<^sub>2). \\<forall>s. X s\\<^sub>1 s = X s\\<^sub>2 s}\n 2. \\<And>X.\n       overrider X \\<Longrightarrow>\n       sym {(s\\<^sub>1, s\\<^sub>2).\n            \\<forall>s. X s\\<^sub>1 s = X s\\<^sub>2 s}\n 3. \\<And>X.\n       overrider X \\<Longrightarrow>\n       trans\n        {(s\\<^sub>1, s\\<^sub>2). \\<forall>s. X s\\<^sub>1 s = X s\\<^sub>2 s}", "apply (rule refl_onI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X.\n       overrider X \\<Longrightarrow>\n       {(s\\<^sub>1, s\\<^sub>2). \\<forall>s. X s\\<^sub>1 s = X s\\<^sub>2 s}\n       \\<subseteq> UNIV \\<times> UNIV\n 2. \\<And>X x.\n       \\<lbrakk>overrider X; x \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> (x, x)\n                         \\<in> {(s\\<^sub>1, s\\<^sub>2).\n                                \\<forall>s. X s\\<^sub>1 s = X s\\<^sub>2 s}\n 3. \\<And>X.\n       overrider X \\<Longrightarrow>\n       sym {(s\\<^sub>1, s\\<^sub>2).\n            \\<forall>s. X s\\<^sub>1 s = X s\\<^sub>2 s}\n 4. \\<And>X.\n       overrider X \\<Longrightarrow>\n       trans\n        {(s\\<^sub>1, s\\<^sub>2). \\<forall>s. X s\\<^sub>1 s = X s\\<^sub>2 s}", "apply (auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X.\n       overrider X \\<Longrightarrow>\n       sym {(s\\<^sub>1, s\\<^sub>2).\n            \\<forall>s. X s\\<^sub>1 s = X s\\<^sub>2 s}\n 2. \\<And>X.\n       overrider X \\<Longrightarrow>\n       trans\n        {(s\\<^sub>1, s\\<^sub>2). \\<forall>s. X s\\<^sub>1 s = X s\\<^sub>2 s}", "apply (rule symI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X a b.\n       \\<lbrakk>overrider X;\n        (a, b)\n        \\<in> {(s\\<^sub>1, s\\<^sub>2).\n               \\<forall>s. X s\\<^sub>1 s = X s\\<^sub>2 s}\\<rbrakk>\n       \\<Longrightarrow> (b, a)\n                         \\<in> {(s\\<^sub>1, s\\<^sub>2).\n                                \\<forall>s. X s\\<^sub>1 s = X s\\<^sub>2 s}\n 2. \\<And>X.\n       overrider X \\<Longrightarrow>\n       trans\n        {(s\\<^sub>1, s\\<^sub>2). \\<forall>s. X s\\<^sub>1 s = X s\\<^sub>2 s}", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       overrider X \\<Longrightarrow>\n       trans\n        {(s\\<^sub>1, s\\<^sub>2). \\<forall>s. X s\\<^sub>1 s = X s\\<^sub>2 s}", "apply (rule transI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X x y z.\n       \\<lbrakk>overrider X;\n        (x, y)\n        \\<in> {(s\\<^sub>1, s\\<^sub>2).\n               \\<forall>s. X s\\<^sub>1 s = X s\\<^sub>2 s};\n        (y, z)\n        \\<in> {(s\\<^sub>1, s\\<^sub>2).\n               \\<forall>s. X s\\<^sub>1 s = X s\\<^sub>2 s}\\<rbrakk>\n       \\<Longrightarrow> (x, z)\n                         \\<in> {(s\\<^sub>1, s\\<^sub>2).\n                                \\<forall>s. X s\\<^sub>1 s = X s\\<^sub>2 s}", "apply (auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma region_coregion_Id:\n  \"idem_scene X \\<Longrightarrow> region X \\<inter> coregion X = Id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. idem_scene X \\<Longrightarrow> region X \\<inter> coregion X = Id", "by (transfer, auto, metis idem_overrider.ovr_idem)"], ["", "lemma state_eq_iff: \"idem_scene S \\<Longrightarrow> x = y \\<longleftrightarrow> (x, y) \\<in> region S \\<and> (x, y) \\<in> coregion S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. idem_scene S \\<Longrightarrow>\n    (x = y) = ((x, y) \\<in> region S \\<and> (x, y) \\<in> coregion S)", "by (metis IntE IntI pair_in_Id_conv region_coregion_Id)"], ["", "lift_definition scene_override :: \"'a \\<Rightarrow> 'a \\<Rightarrow> ('a scene) \\<Rightarrow> 'a\" (\"_ \\<oplus>\\<^sub>S _ on _\" [95,0,96] 95)\nis \"\\<lambda> s\\<^sub>1 s\\<^sub>2 F. F s\\<^sub>1 s\\<^sub>2\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "abbreviation (input) scene_copy :: \"'a scene \\<Rightarrow> 'a \\<Rightarrow> ('a \\<Rightarrow> 'a)\" (\"cp\\<^bsub>_\\<^esub>\") where\n\"cp\\<^bsub>A\\<^esub> s \\<equiv> (\\<lambda> s'. s' \\<oplus>\\<^sub>S s on A)\""], ["", "lemma scene_override_idem [simp]: \"idem_scene X \\<Longrightarrow> s \\<oplus>\\<^sub>S s on X = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. idem_scene X \\<Longrightarrow> s \\<oplus>\\<^sub>S s on X = s", "by (transfer, simp)"], ["", "lemma scene_override_overshadow_left [simp]:\n  \"S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>2 on X \\<oplus>\\<^sub>S S\\<^sub>3 on X = S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>3 on X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>2 on X \\<oplus>\\<^sub>S S\\<^sub>3 on X =\n    S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>3 on X", "by (transfer, simp)"], ["", "lemma scene_override_overshadow_right [simp]:\n  \"S\\<^sub>1 \\<oplus>\\<^sub>S (S\\<^sub>2 \\<oplus>\\<^sub>S S\\<^sub>3 on X) on X = S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>3 on X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>2 \\<oplus>\\<^sub>S S\\<^sub>3 on X on X =\n    S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>3 on X", "by (transfer, simp)"], ["", "definition scene_equiv :: \"'a \\<Rightarrow> 'a \\<Rightarrow> ('a scene) \\<Rightarrow> bool\" (\"_ \\<approx>\\<^sub>S _ on _\" [65,0,66] 65) where\n[lens_defs]: \"S\\<^sub>1 \\<approx>\\<^sub>S S\\<^sub>2 on X = (S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>2 on X = S\\<^sub>1)\""], ["", "lemma scene_equiv_region: \"idem_scene X \\<Longrightarrow> region X = {(S\\<^sub>1, S\\<^sub>2). S\\<^sub>1 \\<approx>\\<^sub>S S\\<^sub>2 on X}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. idem_scene X \\<Longrightarrow>\n    region X =\n    {(S\\<^sub>1, S\\<^sub>2). S\\<^sub>1 \\<approx>\\<^sub>S S\\<^sub>2 on X}", "by (simp add: lens_defs, transfer, auto)\n     (metis idem_overrider.ovr_idem, metis overrider.ovr_overshadow_right)"], ["", "lift_definition scene_indep :: \"'a scene \\<Rightarrow> 'a scene \\<Rightarrow> bool\" (infix \"\\<bowtie>\\<^sub>S\" 50)\nis \"\\<lambda> F G. (\\<forall> s\\<^sub>1 s\\<^sub>2 s\\<^sub>3. G (F s\\<^sub>1 s\\<^sub>2) s\\<^sub>3 = F (G s\\<^sub>1 s\\<^sub>3) s\\<^sub>2)\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma scene_indep_override:\n  \"X \\<bowtie>\\<^sub>S Y = (\\<forall> s\\<^sub>1 s\\<^sub>2 s\\<^sub>3. s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 on X \\<oplus>\\<^sub>S s\\<^sub>3 on Y = s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>3 on Y \\<oplus>\\<^sub>S s\\<^sub>2 on X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X \\<bowtie>\\<^sub>S Y) =\n    (\\<forall>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n        s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 on X \\<oplus>\\<^sub>S s\\<^sub>3 on Y =\n        s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>3 on Y \\<oplus>\\<^sub>S s\\<^sub>2 on X)", "by (transfer, auto)"], ["", "lemma scene_indep_copy:\n  \"X \\<bowtie>\\<^sub>S Y = (\\<forall> s\\<^sub>1  s\\<^sub>2. cp\\<^bsub>X\\<^esub> s\\<^sub>1 \\<circ> cp\\<^bsub>Y\\<^esub> s\\<^sub>2 = cp\\<^bsub>Y\\<^esub> s\\<^sub>2 \\<circ> cp\\<^bsub>X\\<^esub> s\\<^sub>1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X \\<bowtie>\\<^sub>S Y) =\n    (\\<forall>s\\<^sub>1 s\\<^sub>2.\n        (\\<lambda>s'. s' \\<oplus>\\<^sub>S s\\<^sub>1 on X) \\<circ>\n        (\\<lambda>s'. s' \\<oplus>\\<^sub>S s\\<^sub>2 on Y) =\n        (\\<lambda>s'. s' \\<oplus>\\<^sub>S s\\<^sub>2 on Y) \\<circ>\n        (\\<lambda>s'. s' \\<oplus>\\<^sub>S s\\<^sub>1 on X))", "by (auto simp add: scene_indep_override comp_def fun_eq_iff)"], ["", "lemma scene_indep_sym:\n  \"X \\<bowtie>\\<^sub>S Y \\<Longrightarrow> Y \\<bowtie>\\<^sub>S X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<bowtie>\\<^sub>S Y \\<Longrightarrow> Y \\<bowtie>\\<^sub>S X", "by (transfer, auto)"], ["", "text \\<open> Compatibility is a weaker notion than independence; the scenes can overlap but they must\n  agree when they do. \\<close>"], ["", "lift_definition scene_compat :: \"'a scene \\<Rightarrow> 'a scene \\<Rightarrow> bool\" (infix \"##\\<^sub>S\" 50)\nis \"\\<lambda> F G. (\\<forall> s\\<^sub>1 s\\<^sub>2. G (F s\\<^sub>1 s\\<^sub>2) s\\<^sub>2 = F (G s\\<^sub>1 s\\<^sub>2) s\\<^sub>2)\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma scene_compat_copy:\n  \"X ##\\<^sub>S Y = (\\<forall> s. cp\\<^bsub>X\\<^esub> s \\<circ> cp\\<^bsub>Y\\<^esub> s = cp\\<^bsub>Y\\<^esub> s \\<circ> cp\\<^bsub>X\\<^esub> s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X ##\\<^sub>S Y) =\n    (\\<forall>s.\n        (\\<lambda>s'. s' \\<oplus>\\<^sub>S s on X) \\<circ>\n        (\\<lambda>s'. s' \\<oplus>\\<^sub>S s on Y) =\n        (\\<lambda>s'. s' \\<oplus>\\<^sub>S s on Y) \\<circ>\n        (\\<lambda>s'. s' \\<oplus>\\<^sub>S s on X))", "by (transfer, auto simp add: fun_eq_iff)"], ["", "lemma scene_indep_compat [simp]: \"X \\<bowtie>\\<^sub>S Y \\<Longrightarrow> X ##\\<^sub>S Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<bowtie>\\<^sub>S Y \\<Longrightarrow> X ##\\<^sub>S Y", "by (transfer, auto)"], ["", "lemma scene_compat_refl: \"X ##\\<^sub>S X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X ##\\<^sub>S X", "by (transfer, simp)"], ["", "lemma scene_compat_sym: \"X ##\\<^sub>S Y \\<Longrightarrow> Y ##\\<^sub>S X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X ##\\<^sub>S Y \\<Longrightarrow> Y ##\\<^sub>S X", "by (transfer, simp)"], ["", "lemma scene_override_commute_indep:\n  assumes \"X \\<bowtie>\\<^sub>S Y\"\n  shows \"S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>2 on X \\<oplus>\\<^sub>S S\\<^sub>3 on Y = S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>3 on Y \\<oplus>\\<^sub>S S\\<^sub>2 on X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>2 on X \\<oplus>\\<^sub>S S\\<^sub>3 on Y =\n    S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>3 on Y \\<oplus>\\<^sub>S S\\<^sub>2 on X", "using assms"], ["proof (prove)\nusing this:\n  X \\<bowtie>\\<^sub>S Y\n\ngoal (1 subgoal):\n 1. S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>2 on X \\<oplus>\\<^sub>S S\\<^sub>3 on Y =\n    S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>3 on Y \\<oplus>\\<^sub>S S\\<^sub>2 on X", "by (transfer, auto)"], ["", "instantiation scene :: (type) \"{bot, top, uminus, sup, inf}\"\nbegin"], ["", "lift_definition bot_scene    :: \"'s scene\" is \"\\<lambda> x y. x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. overrider (\\<lambda>x y. x)", "by (unfold_locales, simp_all)"], ["", "lift_definition top_scene    :: \"'s scene\" is \"\\<lambda> x y. y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. overrider (\\<lambda>x y. y)", "by (unfold_locales, simp_all)"], ["", "lift_definition uminus_scene :: \"'s scene \\<Rightarrow> 's scene\" is \"\\<lambda> F x y. F y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fun.\n       overrider fun \\<Longrightarrow> overrider (\\<lambda>x y. fun y x)", "by (unfold_locales, simp_all)"], ["", "text \\<open> Scene union requires that the two scenes are at least compatible. If they are not, the\n        result is the bottom scene. \\<close>"], ["", "lift_definition sup_scene :: \"'s scene \\<Rightarrow> 's scene \\<Rightarrow> 's scene\" \n    is \"\\<lambda> F G. if (\\<forall> s\\<^sub>1 s\\<^sub>2. G (F s\\<^sub>1 s\\<^sub>2) s\\<^sub>2 = F (G s\\<^sub>1 s\\<^sub>2) s\\<^sub>2) then (\\<lambda> s\\<^sub>1 s\\<^sub>2. G (F s\\<^sub>1 s\\<^sub>2) s\\<^sub>2) else (\\<lambda> s\\<^sub>1 s\\<^sub>2. s\\<^sub>1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fun1 fun2.\n       \\<lbrakk>overrider fun1; overrider fun2\\<rbrakk>\n       \\<Longrightarrow> overrider\n                          (if \\<forall>s\\<^sub>1 s\\<^sub>2.\n                                 fun2 (fun1 s\\<^sub>1 s\\<^sub>2) s\\<^sub>2 =\n                                 fun1 (fun2 s\\<^sub>1 s\\<^sub>2) s\\<^sub>2\n                           then \\<lambda>s\\<^sub>1 s\\<^sub>2.\n                                   fun2 (fun1 s\\<^sub>1 s\\<^sub>2) s\\<^sub>2\n                           else (\\<lambda>s\\<^sub>1 s\\<^sub>2. s\\<^sub>1))", "by (unfold_locales, auto, metis overrider.ovr_overshadow_right)"], ["", "definition inf_scene :: \"'s scene \\<Rightarrow> 's scene \\<Rightarrow> 's scene\" where\n    [lens_defs]: \"inf_scene X Y = - (sup (- X) (- Y))\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. (OFCLASS('a scene, uminus_class) &&& OFCLASS('a scene, inf_class)) &&&\n    OFCLASS('a scene, sup_class) &&&\n    OFCLASS('a scene, bot_class) &&& OFCLASS('a scene, top_class)", ".."], ["", "end"], ["", "abbreviation union_scene :: \"'s scene \\<Rightarrow> 's scene \\<Rightarrow> 's scene\" (infixl \"\\<squnion>\\<^sub>S\" 65)\nwhere \"union_scene \\<equiv> sup\""], ["", "abbreviation inter_scene :: \"'s scene \\<Rightarrow> 's scene \\<Rightarrow> 's scene\" (infixl \"\\<sqinter>\\<^sub>S\" 70)\nwhere \"inter_scene \\<equiv> inf\""], ["", "abbreviation top_scene :: \"'s scene\" (\"\\<top>\\<^sub>S\")\nwhere \"top_scene \\<equiv> top\""], ["", "abbreviation bot_scene :: \"'s scene\" (\"\\<bottom>\\<^sub>S\")\nwhere \"bot_scene \\<equiv> bot\""], ["", "lemma uminus_scene_twice: \"- (- (X :: 's scene)) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - (- X) = X", "by (transfer, simp)"], ["", "lemma scene_override_id [simp]: \"S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>2 on \\<top>\\<^sub>S = S\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>2 on \\<top>\\<^sub>S = S\\<^sub>2", "by (transfer, simp)"], ["", "lemma scene_override_unit [simp]: \"S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>2 on \\<bottom>\\<^sub>S = S\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>2 on \\<bottom>\\<^sub>S = S\\<^sub>1", "by (transfer, simp)"], ["", "lemma scene_override_commute: \"S\\<^sub>2 \\<oplus>\\<^sub>S S\\<^sub>1 on (- X) = S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>2 on X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S\\<^sub>2 \\<oplus>\\<^sub>S S\\<^sub>1 on (- X) =\n    S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>2 on X", "by (transfer, simp)"], ["", "lemma scene_union_incompat: \"\\<not> X ##\\<^sub>S Y \\<Longrightarrow> X \\<squnion>\\<^sub>S Y = \\<bottom>\\<^sub>S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> X ##\\<^sub>S Y \\<Longrightarrow>\n    X \\<squnion>\\<^sub>S Y = \\<bottom>\\<^sub>S", "by (transfer, auto)"], ["", "lemma scene_override_union: \"X ##\\<^sub>S Y \\<Longrightarrow> S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>2 on (X \\<squnion>\\<^sub>S Y) = (S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>2 on X) \\<oplus>\\<^sub>S S\\<^sub>2 on Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X ##\\<^sub>S Y \\<Longrightarrow>\n    S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>2 on (X \\<squnion>\\<^sub>S Y) =\n    S\\<^sub>1 \\<oplus>\\<^sub>S S\\<^sub>2 on X \\<oplus>\\<^sub>S S\\<^sub>2 on Y", "by (transfer, auto)"], ["", "lemma scene_union_unit: \"X \\<squnion>\\<^sub>S \\<bottom>\\<^sub>S = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<squnion>\\<^sub>S \\<bottom>\\<^sub>S = X", "by (transfer, simp)"], ["", "lemma idem_scene_union [simp]: \"\\<lbrakk> idem_scene A; idem_scene B \\<rbrakk> \\<Longrightarrow> idem_scene (A \\<squnion>\\<^sub>S B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>idem_scene A; idem_scene B\\<rbrakk>\n    \\<Longrightarrow> idem_scene (A \\<squnion>\\<^sub>S B)", "apply (transfer, auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A B.\n       \\<lbrakk>overrider A; idem_overrider A; overrider B;\n        idem_overrider B;\n        \\<forall>s\\<^sub>1 s\\<^sub>2.\n           B (A s\\<^sub>1 s\\<^sub>2) s\\<^sub>2 =\n           A (B s\\<^sub>1 s\\<^sub>2) s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> idem_overrider\n                          (\\<lambda>s\\<^sub>1 s\\<^sub>2.\n                              A (B s\\<^sub>1 s\\<^sub>2) s\\<^sub>2)\n 2. \\<And>A B s\\<^sub>1 s\\<^sub>2.\n       \\<lbrakk>overrider A; idem_overrider A; overrider B;\n        idem_overrider B;\n        B (A s\\<^sub>1 s\\<^sub>2) s\\<^sub>2 \\<noteq>\n        A (B s\\<^sub>1 s\\<^sub>2) s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> idem_overrider\n                          (\\<lambda>s\\<^sub>1 s\\<^sub>2. s\\<^sub>1)", "apply (unfold_locales, auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A B x y z.\n       \\<lbrakk>overrider A; idem_overrider A; overrider B;\n        idem_overrider B;\n        \\<forall>s\\<^sub>1 s\\<^sub>2.\n           B (A s\\<^sub>1 s\\<^sub>2) s\\<^sub>2 =\n           A (B s\\<^sub>1 s\\<^sub>2) s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> A (B (A (B x y) y) z) z = A (B x z) z\n 2. \\<And>A B x y z.\n       \\<lbrakk>overrider A; idem_overrider A; overrider B;\n        idem_overrider B;\n        \\<forall>s\\<^sub>1 s\\<^sub>2.\n           B (A s\\<^sub>1 s\\<^sub>2) s\\<^sub>2 =\n           A (B s\\<^sub>1 s\\<^sub>2) s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> A (B x (A (B y z) z)) z = A (B x z) z", "apply (metis overrider.ovr_overshadow_left)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B x y z.\n       \\<lbrakk>overrider A; idem_overrider A; overrider B;\n        idem_overrider B;\n        \\<forall>s\\<^sub>1 s\\<^sub>2.\n           B (A s\\<^sub>1 s\\<^sub>2) s\\<^sub>2 =\n           A (B s\\<^sub>1 s\\<^sub>2) s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> A (B x (A (B y z) z)) z = A (B x z) z", "apply (metis overrider.ovr_overshadow_right)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma scene_union_annhil: \"idem_scene X \\<Longrightarrow> X \\<squnion>\\<^sub>S \\<top>\\<^sub>S = \\<top>\\<^sub>S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. idem_scene X \\<Longrightarrow>\n    X \\<squnion>\\<^sub>S \\<top>\\<^sub>S = \\<top>\\<^sub>S", "by (transfer, simp)"], ["", "lemma scene_union_pres_compat: \"\\<lbrakk> A ##\\<^sub>S B; A ##\\<^sub>S C \\<rbrakk> \\<Longrightarrow> A ##\\<^sub>S (B \\<squnion>\\<^sub>S C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A ##\\<^sub>S B; A ##\\<^sub>S C\\<rbrakk>\n    \\<Longrightarrow> A ##\\<^sub>S B \\<squnion>\\<^sub>S C", "by (transfer, auto)"], ["", "lemma scene_indep_self_compl: \"A \\<bowtie>\\<^sub>S -A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<bowtie>\\<^sub>S - A", "by (transfer, simp)"], ["", "lemma scene_compat_self_compl: \"A ##\\<^sub>S -A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A ##\\<^sub>S - A", "by (transfer, simp)"], ["", "lemma scene_union_assoc: \n  assumes \"X ##\\<^sub>S Y\" \"X ##\\<^sub>S Z\" \"Y ##\\<^sub>S Z\"\n  shows \"X \\<squnion>\\<^sub>S (Y \\<squnion>\\<^sub>S Z) = (X \\<squnion>\\<^sub>S Y) \\<squnion>\\<^sub>S Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<squnion>\\<^sub>S (Y \\<squnion>\\<^sub>S Z) =\n    X \\<squnion>\\<^sub>S Y \\<squnion>\\<^sub>S Z", "using assms"], ["proof (prove)\nusing this:\n  X ##\\<^sub>S Y\n  X ##\\<^sub>S Z\n  Y ##\\<^sub>S Z\n\ngoal (1 subgoal):\n 1. X \\<squnion>\\<^sub>S (Y \\<squnion>\\<^sub>S Z) =\n    X \\<squnion>\\<^sub>S Y \\<squnion>\\<^sub>S Z", "by (transfer, auto)"], ["", "lemma scene_inter_indep:\n  assumes \"idem_scene X\" \"idem_scene Y\" \"X \\<bowtie>\\<^sub>S Y\"\n  shows \"X \\<sqinter>\\<^sub>S Y = \\<bottom>\\<^sub>S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<sqinter>\\<^sub>S Y = \\<bottom>\\<^sub>S", "using assms"], ["proof (prove)\nusing this:\n  idem_scene X\n  idem_scene Y\n  X \\<bowtie>\\<^sub>S Y\n\ngoal (1 subgoal):\n 1. X \\<sqinter>\\<^sub>S Y = \\<bottom>\\<^sub>S", "unfolding lens_defs"], ["proof (prove)\nusing this:\n  idem_scene X\n  idem_scene Y\n  X \\<bowtie>\\<^sub>S Y\n\ngoal (1 subgoal):\n 1. - (- X \\<squnion>\\<^sub>S - Y) = \\<bottom>\\<^sub>S", "apply (transfer, auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Xa Ya.\n       \\<lbrakk>overrider Xa; idem_overrider Xa; overrider Ya;\n        idem_overrider Ya;\n        \\<forall>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n           Ya (Xa s\\<^sub>1 s\\<^sub>2) s\\<^sub>3 =\n           Xa (Ya s\\<^sub>1 s\\<^sub>3) s\\<^sub>2;\n        idem_scene X; idem_scene Y; X \\<bowtie>\\<^sub>S Y;\n        \\<forall>s\\<^sub>1 s\\<^sub>2.\n           Ya s\\<^sub>2 (Xa s\\<^sub>2 s\\<^sub>1) =\n           Xa s\\<^sub>2 (Ya s\\<^sub>2 s\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>x y. Xa x (Ya x y)) = (\\<lambda>x y. x)\n 2. \\<And>Xa Ya s\\<^sub>1 s\\<^sub>2.\n       \\<lbrakk>overrider Xa; idem_overrider Xa; overrider Ya;\n        idem_overrider Ya;\n        \\<forall>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n           Ya (Xa s\\<^sub>1 s\\<^sub>2) s\\<^sub>3 =\n           Xa (Ya s\\<^sub>1 s\\<^sub>3) s\\<^sub>2;\n        idem_scene X; idem_scene Y; X \\<bowtie>\\<^sub>S Y;\n        Ya s\\<^sub>2 (Xa s\\<^sub>2 s\\<^sub>1) \\<noteq>\n        Xa s\\<^sub>2 (Ya s\\<^sub>2 s\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>x y. y) = (\\<lambda>x y. x)", "apply (metis (no_types, hide_lams) idem_overrider.ovr_idem overrider.ovr_assoc overrider.ovr_overshadow_right)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Xa Ya s\\<^sub>1 s\\<^sub>2.\n       \\<lbrakk>overrider Xa; idem_overrider Xa; overrider Ya;\n        idem_overrider Ya;\n        \\<forall>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n           Ya (Xa s\\<^sub>1 s\\<^sub>2) s\\<^sub>3 =\n           Xa (Ya s\\<^sub>1 s\\<^sub>3) s\\<^sub>2;\n        idem_scene X; idem_scene Y; X \\<bowtie>\\<^sub>S Y;\n        Ya s\\<^sub>2 (Xa s\\<^sub>2 s\\<^sub>1) \\<noteq>\n        Xa s\\<^sub>2 (Ya s\\<^sub>2 s\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>x y. y) = (\\<lambda>x y. x)", "apply (metis (no_types, hide_lams) idem_overrider.ovr_idem overrider.ovr_overshadow_right)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma scene_union_idem: \"X \\<squnion>\\<^sub>S X = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<squnion>\\<^sub>S X = X", "by (transfer, simp)"], ["", "lemma scene_union_compl: \"idem_scene X \\<Longrightarrow> X \\<squnion>\\<^sub>S - X = \\<top>\\<^sub>S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. idem_scene X \\<Longrightarrow> X \\<squnion>\\<^sub>S - X = \\<top>\\<^sub>S", "by (transfer, auto)"], ["", "lemma scene_inter_idem: \"X \\<sqinter>\\<^sub>S X = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<sqinter>\\<^sub>S X = X", "by (simp add: inf_scene_def, transfer, auto)"], ["", "lemma scene_union_commute: \"X \\<squnion>\\<^sub>S Y = Y \\<squnion>\\<^sub>S X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<squnion>\\<^sub>S Y = Y \\<squnion>\\<^sub>S X", "by (transfer, auto)"], ["", "lemma scene_inter_compl: \"idem_scene X \\<Longrightarrow> X \\<sqinter>\\<^sub>S - X = \\<bottom>\\<^sub>S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. idem_scene X \\<Longrightarrow>\n    X \\<sqinter>\\<^sub>S - X = \\<bottom>\\<^sub>S", "by (simp add: inf_scene_def, transfer, auto)"], ["", "lemma scene_demorgan1: \"-(X \\<squnion>\\<^sub>S Y) = -X \\<sqinter>\\<^sub>S -Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - (X \\<squnion>\\<^sub>S Y) = - X \\<sqinter>\\<^sub>S - Y", "by (simp add: inf_scene_def, transfer, auto)"], ["", "lemma scene_demorgan2: \"-(X \\<sqinter>\\<^sub>S Y) = -X \\<squnion>\\<^sub>S -Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - (X \\<sqinter>\\<^sub>S Y) = - X \\<squnion>\\<^sub>S - Y", "by (simp add: inf_scene_def, transfer, auto)"], ["", "lemma scene_compat_top: \"idem_scene X \\<Longrightarrow> X ##\\<^sub>S \\<top>\\<^sub>S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. idem_scene X \\<Longrightarrow> X ##\\<^sub>S \\<top>\\<^sub>S", "by (transfer, simp)"], ["", "instantiation scene :: (type) ord\nbegin"], ["", "text \\<open> $X$ is a subscene of $Y$ provided that overriding with first $Y$ and then $X$ can\n         be rewritten using the complement of $X$. \\<close>"], ["", "definition less_eq_scene :: \"'a scene \\<Rightarrow> 'a scene \\<Rightarrow> bool\" where\n  [lens_defs]: \"less_eq_scene X Y = (\\<forall> s\\<^sub>1 s\\<^sub>2 s\\<^sub>3. s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 on Y \\<oplus>\\<^sub>S s\\<^sub>3 on X = s\\<^sub>1 \\<oplus>\\<^sub>S (s\\<^sub>2 \\<oplus>\\<^sub>S s\\<^sub>3 on X) on Y)\""], ["", "definition less_scene :: \"'a scene \\<Rightarrow> 'a scene \\<Rightarrow> bool\" where\n  [lens_defs]: \"less_scene x y = (x \\<le> y \\<and> \\<not> y \\<le> x)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a scene, ord_class)", ".."], ["", "end"], ["", "abbreviation subscene :: \"'a scene \\<Rightarrow> 'a scene \\<Rightarrow> bool\" (infix \"\\<subseteq>\\<^sub>S\" 55)\nwhere \"subscene X Y \\<equiv> X \\<le> Y\""], ["", "lemma subscene_refl: \"X \\<subseteq>\\<^sub>S X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<subseteq>\\<^sub>S X", "by (simp add: less_eq_scene_def)"], ["", "lemma subscene_trans: \"\\<lbrakk> idem_scene Y; X \\<subseteq>\\<^sub>S Y; Y \\<subseteq>\\<^sub>S Z \\<rbrakk> \\<Longrightarrow> X \\<subseteq>\\<^sub>S Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>idem_scene Y; X \\<subseteq>\\<^sub>S Y;\n     Y \\<subseteq>\\<^sub>S Z\\<rbrakk>\n    \\<Longrightarrow> X \\<subseteq>\\<^sub>S Z", "by (simp add: less_eq_scene_def, transfer, auto, metis (no_types, hide_lams) idem_overrider.ovr_idem)"], ["", "lemma subscene_antisym: \"\\<lbrakk> idem_scene Y; X \\<subseteq>\\<^sub>S Y; Y \\<subseteq>\\<^sub>S X \\<rbrakk> \\<Longrightarrow> X = Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>idem_scene Y; X \\<subseteq>\\<^sub>S Y;\n     Y \\<subseteq>\\<^sub>S X\\<rbrakk>\n    \\<Longrightarrow> X = Y", "apply (simp add: less_eq_scene_def, transfer, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Y X.\n       \\<lbrakk>overrider Y; idem_overrider Y; overrider X;\n        \\<forall>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n           X (Y s\\<^sub>1 s\\<^sub>2) s\\<^sub>3 =\n           Y s\\<^sub>1 (X s\\<^sub>2 s\\<^sub>3);\n        \\<forall>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n           Y (X s\\<^sub>1 s\\<^sub>2) s\\<^sub>3 =\n           X s\\<^sub>1 (Y s\\<^sub>2 s\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> X = Y", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Y X x.\n       \\<lbrakk>overrider Y; idem_overrider Y; overrider X;\n        \\<forall>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n           X (Y s\\<^sub>1 s\\<^sub>2) s\\<^sub>3 =\n           Y s\\<^sub>1 (X s\\<^sub>2 s\\<^sub>3);\n        \\<forall>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n           Y (X s\\<^sub>1 s\\<^sub>2) s\\<^sub>3 =\n           X s\\<^sub>1 (Y s\\<^sub>2 s\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> X x = Y x", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Y X x xa.\n       \\<lbrakk>overrider Y; idem_overrider Y; overrider X;\n        \\<forall>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n           X (Y s\\<^sub>1 s\\<^sub>2) s\\<^sub>3 =\n           Y s\\<^sub>1 (X s\\<^sub>2 s\\<^sub>3);\n        \\<forall>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n           Y (X s\\<^sub>1 s\\<^sub>2) s\\<^sub>3 =\n           X s\\<^sub>1 (Y s\\<^sub>2 s\\<^sub>3)\\<rbrakk>\n       \\<Longrightarrow> X x xa = Y x xa", "apply (metis (full_types) idem_overrider.ovr_idem overrider.ovr_overshadow_left)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma subscene_copy_def:\n  assumes \"idem_scene X\" \"idem_scene Y\"\n  shows \"X \\<subseteq>\\<^sub>S Y = (\\<forall> s\\<^sub>1 s\\<^sub>2. cp\\<^bsub>X\\<^esub> s\\<^sub>1 \\<circ> cp\\<^bsub>Y\\<^esub> s\\<^sub>2 = cp\\<^bsub>Y\\<^esub> (cp\\<^bsub>X\\<^esub> s\\<^sub>1 s\\<^sub>2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<subseteq>\\<^sub>S Y =\n    (\\<forall>s\\<^sub>1 s\\<^sub>2.\n        (\\<lambda>s'. s' \\<oplus>\\<^sub>S s\\<^sub>1 on X) \\<circ>\n        (\\<lambda>s'. s' \\<oplus>\\<^sub>S s\\<^sub>2 on Y) =\n        (\\<lambda>s'.\n            s' \\<oplus>\\<^sub>S s\\<^sub>2 \\<oplus>\\<^sub>S s\\<^sub>1 on X on Y))", "using assms"], ["proof (prove)\nusing this:\n  idem_scene X\n  idem_scene Y\n\ngoal (1 subgoal):\n 1. X \\<subseteq>\\<^sub>S Y =\n    (\\<forall>s\\<^sub>1 s\\<^sub>2.\n        (\\<lambda>s'. s' \\<oplus>\\<^sub>S s\\<^sub>1 on X) \\<circ>\n        (\\<lambda>s'. s' \\<oplus>\\<^sub>S s\\<^sub>2 on Y) =\n        (\\<lambda>s'.\n            s' \\<oplus>\\<^sub>S s\\<^sub>2 \\<oplus>\\<^sub>S s\\<^sub>1 on X on Y))", "by (simp add: less_eq_scene_def fun_eq_iff, transfer, auto)"], ["", "lemma subscene_eliminate:\n  \"\\<lbrakk> idem_scene Y; X \\<le> Y \\<rbrakk> \\<Longrightarrow> s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 on X \\<oplus>\\<^sub>S s\\<^sub>3 on Y = s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>3 on Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>idem_scene Y; X \\<subseteq>\\<^sub>S Y\\<rbrakk>\n    \\<Longrightarrow> s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 on X \\<oplus>\\<^sub>S s\\<^sub>3 on Y =\n                      s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>3 on Y", "by (metis less_eq_scene_def scene_override_overshadow_left scene_override_idem)"], ["", "lemma scene_bot_least: \"\\<bottom>\\<^sub>S \\<le> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bottom>\\<^sub>S \\<subseteq>\\<^sub>S X", "unfolding less_eq_scene_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n       s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 on X \\<oplus>\\<^sub>S s\\<^sub>3 on \\<bottom>\\<^sub>S =\n       s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 \\<oplus>\\<^sub>S s\\<^sub>3 on \\<bottom>\\<^sub>S on X", "by (transfer, auto)"], ["", "lemma scene_top_greatest: \"X \\<le> \\<top>\\<^sub>S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<subseteq>\\<^sub>S \\<top>\\<^sub>S", "unfolding less_eq_scene_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n       s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 on \\<top>\\<^sub>S \\<oplus>\\<^sub>S s\\<^sub>3 on X =\n       s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 \\<oplus>\\<^sub>S s\\<^sub>3 on X on \\<top>\\<^sub>S", "by (transfer, auto)"], ["", "lemma scene_union_ub: \"\\<lbrakk> idem_scene Y; X \\<bowtie>\\<^sub>S Y \\<rbrakk> \\<Longrightarrow> X \\<le> (X \\<squnion>\\<^sub>S Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>idem_scene Y; X \\<bowtie>\\<^sub>S Y\\<rbrakk>\n    \\<Longrightarrow> X \\<subseteq>\\<^sub>S X \\<squnion>\\<^sub>S Y", "by (simp add: less_eq_scene_def, transfer, auto)\n     (metis (no_types, hide_lams) idem_overrider.ovr_idem overrider.ovr_overshadow_right)"], ["", "lemma scene_le_then_compat: \"\\<lbrakk> idem_scene X; idem_scene Y; X \\<le> Y \\<rbrakk> \\<Longrightarrow> X ##\\<^sub>S Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>idem_scene X; idem_scene Y; X \\<subseteq>\\<^sub>S Y\\<rbrakk>\n    \\<Longrightarrow> X ##\\<^sub>S Y", "unfolding less_eq_scene_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>idem_scene X; idem_scene Y;\n     \\<forall>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n        s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 on Y \\<oplus>\\<^sub>S s\\<^sub>3 on X =\n        s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 \\<oplus>\\<^sub>S s\\<^sub>3 on X on Y\\<rbrakk>\n    \\<Longrightarrow> X ##\\<^sub>S Y", "by (transfer, auto, metis (no_types, lifting) idem_overrider.ovr_idem overrider_def)"], ["", "lemma indep_then_compl_in: \"A \\<bowtie>\\<^sub>S B \\<Longrightarrow> A \\<le> -B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<bowtie>\\<^sub>S B \\<Longrightarrow> A \\<subseteq>\\<^sub>S - B", "unfolding less_eq_scene_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<bowtie>\\<^sub>S B \\<Longrightarrow>\n    \\<forall>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n       s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 on (- B) \\<oplus>\\<^sub>S s\\<^sub>3 on A =\n       s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 \\<oplus>\\<^sub>S s\\<^sub>3 on A on (- B)", "by (transfer, simp)"], ["", "lift_definition scene_comp :: \"'a scene \\<Rightarrow> ('a \\<Longrightarrow> 'b) \\<Rightarrow> 'b scene\" (infixl \";\\<^sub>S\" 80)\nis \"\\<lambda> S X a b. if (vwb_lens X) then put\\<^bsub>X\\<^esub> a (S (get\\<^bsub>X\\<^esub> a) (get\\<^bsub>X\\<^esub> b)) else a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fun lens_ext.\n       overrider fun \\<Longrightarrow>\n       overrider\n        (\\<lambda>a b.\n            if vwb_lens lens_ext\n            then put\\<^bsub>lens_ext\\<^esub> a\n                  (fun (get\\<^bsub>lens_ext\\<^esub> a)\n                    (get\\<^bsub>lens_ext\\<^esub> b))\n            else a)", "by (unfold_locales, auto)"], ["", "lemma scene_comp_idem [simp]: \"idem_scene S \\<Longrightarrow> idem_scene (S ;\\<^sub>S X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. idem_scene S \\<Longrightarrow> idem_scene (S ;\\<^sub>S X)", "by (transfer, unfold_locales, simp_all)"], ["", "lemma scene_comp_lens_indep [simp]: \"X \\<bowtie> Y \\<Longrightarrow> (A ;\\<^sub>S X) \\<bowtie>\\<^sub>S (A ;\\<^sub>S Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<bowtie> Y \\<Longrightarrow>\n    A ;\\<^sub>S X \\<bowtie>\\<^sub>S A ;\\<^sub>S Y", "by (transfer, auto simp add: lens_indep.lens_put_comm lens_indep.lens_put_irr2)"], ["", "lemma scene_comp_indep [simp]: \"A \\<bowtie>\\<^sub>S B \\<Longrightarrow> (A ;\\<^sub>S X) \\<bowtie>\\<^sub>S (B ;\\<^sub>S X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<bowtie>\\<^sub>S B \\<Longrightarrow>\n    A ;\\<^sub>S X \\<bowtie>\\<^sub>S B ;\\<^sub>S X", "by (transfer, auto)"], ["", "subsection \\<open> Linking Scenes and Lenses \\<close>"], ["", "text \\<open> The following function extracts a scene from a very well behaved lens \\<close>"], ["", "lift_definition lens_scene :: \"('v \\<Longrightarrow> 's) \\<Rightarrow> 's scene\" (\"\\<lbrakk>_\\<rbrakk>\\<^sub>\\<sim>\") is\n\"\\<lambda> X s\\<^sub>1 s\\<^sub>2. if (mwb_lens X) then s\\<^sub>1 \\<oplus>\\<^sub>L s\\<^sub>2 on X else s\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>lens_ext.\n       overrider\n        (\\<lambda>s\\<^sub>1 s\\<^sub>2.\n            if mwb_lens lens_ext\n            then s\\<^sub>1 \\<triangleleft>\\<^bsub>lens_ext\\<^esub> s\\<^sub>2\n            else s\\<^sub>1)", "by (unfold_locales, auto simp add: lens_override_def)"], ["", "lemma vwb_impl_idem_scene [simp]:\n  \"vwb_lens X \\<Longrightarrow> idem_scene \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwb_lens X \\<Longrightarrow> idem_scene \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim>", "by (transfer, unfold_locales, auto simp add: lens_override_overshadow_left lens_override_overshadow_right)"], ["", "lemma idem_scene_impl_vwb:\n  \"\\<lbrakk> mwb_lens X; idem_scene \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> \\<rbrakk> \\<Longrightarrow> vwb_lens X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mwb_lens X;\n     idem_scene \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim>\\<rbrakk>\n    \\<Longrightarrow> vwb_lens X", "apply (cases \"mwb_lens X\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>mwb_lens X; idem_scene \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim>;\n     mwb_lens X\\<rbrakk>\n    \\<Longrightarrow> vwb_lens X\n 2. \\<lbrakk>mwb_lens X; idem_scene \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim>;\n     \\<not> mwb_lens X\\<rbrakk>\n    \\<Longrightarrow> vwb_lens X", "apply (transfer, unfold idem_overrider_def overrider_def, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>mwb_lens X;\n        \\<forall>x y z.\n           x \\<triangleleft>\\<^bsub>X\\<^esub>\n           y \\<triangleleft>\\<^bsub>X\\<^esub>\n           z =\n           x \\<triangleleft>\\<^bsub>X\\<^esub> z;\n        \\<forall>x y z.\n           x \\<triangleleft>\\<^bsub>X\\<^esub>\n           (y \\<triangleleft>\\<^bsub>X\\<^esub> z) =\n           x \\<triangleleft>\\<^bsub>X\\<^esub> z;\n        idem_overrider_axioms (\\<triangleleft>\\<^bsub>X\\<^esub>)\\<rbrakk>\n       \\<Longrightarrow> vwb_lens X", "apply (simp add: idem_overrider_axioms_def override_idem_implies_vwb)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lens_compat_scene: \"\\<lbrakk> mwb_lens X; mwb_lens Y \\<rbrakk> \\<Longrightarrow> X ##\\<^sub>L Y \\<longleftrightarrow> \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> ##\\<^sub>S \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mwb_lens X; mwb_lens Y\\<rbrakk>\n    \\<Longrightarrow> (X ##\\<^sub>L Y) =\n                      (\\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> ##\\<^sub>S\n                       \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim>)", "by (auto simp add: lens_scene.rep_eq scene_compat.rep_eq lens_defs)"], ["", "text \\<open> Next we show some important congruence properties \\<close>"], ["", "lemma zero_lens_scene: \"\\<lbrakk>0\\<^sub>L\\<rbrakk>\\<^sub>\\<sim> = \\<bottom>\\<^sub>S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0\\<^sub>L\\<rbrakk>\\<^sub>\\<sim> = \\<bottom>\\<^sub>S", "by (transfer, simp)"], ["", "lemma one_lens_scene: \"\\<lbrakk>1\\<^sub>L\\<rbrakk>\\<^sub>\\<sim> = \\<top>\\<^sub>S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>1\\<^sub>L\\<rbrakk>\\<^sub>\\<sim> = \\<top>\\<^sub>S", "by (transfer, simp)"], ["", "lemma lens_scene_override: \n  \"mwb_lens X \\<Longrightarrow> s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 on \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> = s\\<^sub>1 \\<oplus>\\<^sub>L s\\<^sub>2 on X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mwb_lens X \\<Longrightarrow>\n    s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 on \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> =\n    s\\<^sub>1 \\<triangleleft>\\<^bsub>X\\<^esub> s\\<^sub>2", "by (transfer, simp)"], ["", "lemma lens_indep_scene:\n  assumes \"vwb_lens X\" \"vwb_lens Y\"\n  shows \"(X \\<bowtie> Y) \\<longleftrightarrow> \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> \\<bowtie>\\<^sub>S \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X \\<bowtie> Y) =\n    (\\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> \\<bowtie>\\<^sub>S\n     \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim>)", "using assms"], ["proof (prove)\nusing this:\n  vwb_lens X\n  vwb_lens Y\n\ngoal (1 subgoal):\n 1. (X \\<bowtie> Y) =\n    (\\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> \\<bowtie>\\<^sub>S\n     \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim>)", "by (auto, (simp add: scene_indep_override, transfer, simp add: lens_indep_override_def)+)"], ["", "lemma lens_indep_impl_scene_indep [simp]:\n  \"(X \\<bowtie> Y) \\<Longrightarrow> \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> \\<bowtie>\\<^sub>S \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<bowtie> Y \\<Longrightarrow>\n    \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> \\<bowtie>\\<^sub>S\n    \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim>", "by (transfer, auto simp add: lens_indep_comm lens_override_def)"], ["", "lemma lens_plus_scene:\n  \"\\<lbrakk> vwb_lens X; vwb_lens Y; X \\<bowtie> Y \\<rbrakk> \\<Longrightarrow> \\<lbrakk>X +\\<^sub>L Y\\<rbrakk>\\<^sub>\\<sim> = \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> \\<squnion>\\<^sub>S \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>vwb_lens X; vwb_lens Y; X \\<bowtie> Y\\<rbrakk>\n    \\<Longrightarrow> \\<lbrakk>X +\\<^sub>L Y\\<rbrakk>\\<^sub>\\<sim> =\n                      \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> \\<squnion>\\<^sub>S\n                      \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim>", "by (transfer, auto simp add: lens_override_plus lens_indep_override_def lens_indep_overrideI plus_vwb_lens)"], ["", "lemma subscene_implies_sublens': \"\\<lbrakk> vwb_lens X; vwb_lens Y \\<rbrakk> \\<Longrightarrow> \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> \\<le> \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim> \\<longleftrightarrow> X \\<subseteq>\\<^sub>L' Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>vwb_lens X; vwb_lens Y\\<rbrakk>\n    \\<Longrightarrow> \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> \\<subseteq>\\<^sub>S\n                      \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim> =\n                      X \\<subseteq>\\<^sub>L' Y", "by (simp add: lens_defs less_eq_scene_def, transfer, simp add: lens_override_def)"], ["", "lemma sublens'_implies_subscene: \"\\<lbrakk> vwb_lens X; vwb_lens Y; X \\<subseteq>\\<^sub>L' Y \\<rbrakk> \\<Longrightarrow> \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> \\<le> \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>vwb_lens X; vwb_lens Y; X \\<subseteq>\\<^sub>L' Y\\<rbrakk>\n    \\<Longrightarrow> \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> \\<subseteq>\\<^sub>S\n                      \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim>", "by (simp add: lens_defs less_eq_scene_def, auto simp add: lens_override_def lens_scene_override)"], ["", "lemma sublens_iff_subscene:\n  assumes \"vwb_lens X\" \"vwb_lens Y\"\n  shows \"X \\<subseteq>\\<^sub>L Y \\<longleftrightarrow> \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> \\<le> \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<subseteq>\\<^sub>L Y =\n    \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> \\<subseteq>\\<^sub>S\n    \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim>", "by (simp add: assms sublens_iff_sublens' subscene_implies_sublens')"], ["", "text \\<open> Equality on scenes is sound and complete with respect to lens equivalence. \\<close>"], ["", "lemma lens_equiv_scene:\n  assumes \"vwb_lens X\" \"vwb_lens Y\"\n  shows \"X \\<approx>\\<^sub>L Y \\<longleftrightarrow> \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> = \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<approx>\\<^sub>L Y =\n    (\\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> = \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim>)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. X \\<approx>\\<^sub>L Y \\<Longrightarrow>\n    \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> = \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim>\n 2. \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> =\n    \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim> \\<Longrightarrow>\n    X \\<approx>\\<^sub>L Y", "assume a: \"X \\<approx>\\<^sub>L Y\""], ["proof (state)\nthis:\n  X \\<approx>\\<^sub>L Y\n\ngoal (2 subgoals):\n 1. X \\<approx>\\<^sub>L Y \\<Longrightarrow>\n    \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> = \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim>\n 2. \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> =\n    \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim> \\<Longrightarrow>\n    X \\<approx>\\<^sub>L Y", "show \"\\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> = \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> = \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim>", "by (meson a assms lens_equiv_def sublens_iff_subscene subscene_antisym vwb_impl_idem_scene)"], ["proof (state)\nthis:\n  \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> = \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> =\n    \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim> \\<Longrightarrow>\n    X \\<approx>\\<^sub>L Y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> =\n    \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim> \\<Longrightarrow>\n    X \\<approx>\\<^sub>L Y", "assume b: \"\\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> = \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim>\""], ["proof (state)\nthis:\n  \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> = \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>X\\<rbrakk>\\<^sub>\\<sim> =\n    \\<lbrakk>Y\\<rbrakk>\\<^sub>\\<sim> \\<Longrightarrow>\n    X \\<approx>\\<^sub>L Y", "show \"X \\<approx>\\<^sub>L Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<approx>\\<^sub>L Y", "by (simp add: assms b lens_equiv_def sublens_iff_subscene subscene_refl)"], ["proof (state)\nthis:\n  X \\<approx>\\<^sub>L Y\n\ngoal:\nNo subgoals!", "qed"], ["", "definition lens_insert :: \"('a \\<Longrightarrow> 'b) \\<Rightarrow> 'b scene \\<Rightarrow> 'b scene\" (\"insert\\<^sub>S\") where\n\"lens_insert x A = (if (\\<lbrakk>x\\<rbrakk>\\<^sub>\\<sim> \\<le> A) then \\<lbrakk>x\\<rbrakk>\\<^sub>\\<sim> \\<squnion>\\<^sub>S A else A)\""], ["", "lemma lens_insert_idem: \"insert\\<^sub>S x (insert\\<^sub>S x A) = insert\\<^sub>S x A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert\\<^sub>S x (insert\\<^sub>S x A) = insert\\<^sub>S x A", "apply (auto simp add: lens_insert_def less_eq_scene_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n                s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 on (\\<lbrakk>x\\<rbrakk>\\<^sub>\\<sim> \\<squnion>\\<^sub>S\n                   A) \\<oplus>\\<^sub>S s\\<^sub>3 on \\<lbrakk>x\\<rbrakk>\\<^sub>\\<sim> =\n                s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 \\<oplus>\\<^sub>S s\\<^sub>3 on \\<lbrakk>x\\<rbrakk>\\<^sub>\\<sim> on (\\<lbrakk>x\\<rbrakk>\\<^sub>\\<sim> \\<squnion>\\<^sub>S\n      A);\n     \\<forall>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n        s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 on A \\<oplus>\\<^sub>S s\\<^sub>3 on \\<lbrakk>x\\<rbrakk>\\<^sub>\\<sim> =\n        s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 \\<oplus>\\<^sub>S s\\<^sub>3 on \\<lbrakk>x\\<rbrakk>\\<^sub>\\<sim> on A\\<rbrakk>\n    \\<Longrightarrow> \\<lbrakk>x\\<rbrakk>\\<^sub>\\<sim> \\<squnion>\\<^sub>S\n                      (\\<lbrakk>x\\<rbrakk>\\<^sub>\\<sim> \\<squnion>\\<^sub>S\n                       A) =\n                      \\<lbrakk>x\\<rbrakk>\\<^sub>\\<sim> \\<squnion>\\<^sub>S A", "apply (transfer)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x A.\n       \\<lbrakk>overrider A;\n        \\<forall>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n           (if mwb_lens x\n            then (if \\<forall>s\\<^sub>1 s\\<^sub>2.\n                        A (if mwb_lens x\n                           then s\\<^sub>1 \\<triangleleft>\\<^bsub>x\\<^esub>\n                                s\\<^sub>2\n                           else s\\<^sub>1)\n                         s\\<^sub>2 =\n                        (if mwb_lens x\n                         then A s\\<^sub>1\n                               s\\<^sub>2 \\<triangleleft>\\<^bsub>x\\<^esub>\n                              s\\<^sub>2\n                         else A s\\<^sub>1 s\\<^sub>2)\n                  then \\<lambda>s\\<^sub>1 s\\<^sub>2.\n                          A (if mwb_lens x\n                             then s\\<^sub>1 \\<triangleleft>\\<^bsub>x\\<^esub>\n                                  s\\<^sub>2\n                             else s\\<^sub>1)\n                           s\\<^sub>2\n                  else (\\<lambda>s\\<^sub>1 s\\<^sub>2. s\\<^sub>1))\n                  s\\<^sub>1 s\\<^sub>2 \\<triangleleft>\\<^bsub>x\\<^esub>\n                 s\\<^sub>3\n            else (if \\<forall>s\\<^sub>1 s\\<^sub>2.\n                        A (if mwb_lens x\n                           then s\\<^sub>1 \\<triangleleft>\\<^bsub>x\\<^esub>\n                                s\\<^sub>2\n                           else s\\<^sub>1)\n                         s\\<^sub>2 =\n                        (if mwb_lens x\n                         then A s\\<^sub>1\n                               s\\<^sub>2 \\<triangleleft>\\<^bsub>x\\<^esub>\n                              s\\<^sub>2\n                         else A s\\<^sub>1 s\\<^sub>2)\n                  then \\<lambda>s\\<^sub>1 s\\<^sub>2.\n                          A (if mwb_lens x\n                             then s\\<^sub>1 \\<triangleleft>\\<^bsub>x\\<^esub>\n                                  s\\<^sub>2\n                             else s\\<^sub>1)\n                           s\\<^sub>2\n                  else (\\<lambda>s\\<^sub>1 s\\<^sub>2. s\\<^sub>1))\n                  s\\<^sub>1 s\\<^sub>2) =\n           (if \\<forall>s\\<^sub>1 s\\<^sub>2.\n                  A (if mwb_lens x\n                     then s\\<^sub>1 \\<triangleleft>\\<^bsub>x\\<^esub>\n                          s\\<^sub>2\n                     else s\\<^sub>1)\n                   s\\<^sub>2 =\n                  (if mwb_lens x\n                   then A s\\<^sub>1\n                         s\\<^sub>2 \\<triangleleft>\\<^bsub>x\\<^esub>\n                        s\\<^sub>2\n                   else A s\\<^sub>1 s\\<^sub>2)\n            then \\<lambda>s\\<^sub>1 s\\<^sub>2.\n                    A (if mwb_lens x\n                       then s\\<^sub>1 \\<triangleleft>\\<^bsub>x\\<^esub>\n                            s\\<^sub>2\n                       else s\\<^sub>1)\n                     s\\<^sub>2\n            else (\\<lambda>s\\<^sub>1 s\\<^sub>2. s\\<^sub>1))\n            s\\<^sub>1\n            (if mwb_lens x\n             then s\\<^sub>2 \\<triangleleft>\\<^bsub>x\\<^esub> s\\<^sub>3\n             else s\\<^sub>2);\n        \\<forall>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n           (if mwb_lens x\n            then A s\\<^sub>1 s\\<^sub>2 \\<triangleleft>\\<^bsub>x\\<^esub>\n                 s\\<^sub>3\n            else A s\\<^sub>1 s\\<^sub>2) =\n           A s\\<^sub>1\n            (if mwb_lens x\n             then s\\<^sub>2 \\<triangleleft>\\<^bsub>x\\<^esub> s\\<^sub>3\n             else s\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (if \\<forall>s\\<^sub>1 s\\<^sub>2.\n                                (if \\<forall>s\\<^sub>1 s\\<^sub>2.\n A (if mwb_lens x then s\\<^sub>1 \\<triangleleft>\\<^bsub>x\\<^esub> s\\<^sub>2\n    else s\\<^sub>1)\n  s\\<^sub>2 =\n (if mwb_lens x\n  then A s\\<^sub>1 s\\<^sub>2 \\<triangleleft>\\<^bsub>x\\<^esub> s\\<^sub>2\n  else A s\\<^sub>1 s\\<^sub>2)\n                                 then \\<lambda>s\\<^sub>1 s\\<^sub>2.\n   A (if mwb_lens x\n      then s\\<^sub>1 \\<triangleleft>\\<^bsub>x\\<^esub> s\\<^sub>2\n      else s\\<^sub>1)\n    s\\<^sub>2\n                                 else (\\<lambda>s\\<^sub>1 s\\<^sub>2.\n    s\\<^sub>1))\n                                 (if mwb_lens x\n                                  then s\\<^sub>1 \\<triangleleft>\\<^bsub>x\\<^esub>\n s\\<^sub>2\n                                  else s\\<^sub>1)\n                                 s\\<^sub>2 =\n                                (if mwb_lens x\n                                 then (if \\<forall>s\\<^sub>1 s\\<^sub>2.\n       A (if mwb_lens x\n          then s\\<^sub>1 \\<triangleleft>\\<^bsub>x\\<^esub> s\\<^sub>2\n          else s\\<^sub>1)\n        s\\<^sub>2 =\n       (if mwb_lens x\n        then A s\\<^sub>1 s\\<^sub>2 \\<triangleleft>\\<^bsub>x\\<^esub>\n             s\\<^sub>2\n        else A s\\<^sub>1 s\\<^sub>2)\n then \\<lambda>s\\<^sub>1 s\\<^sub>2.\n         A (if mwb_lens x\n            then s\\<^sub>1 \\<triangleleft>\\<^bsub>x\\<^esub> s\\<^sub>2\n            else s\\<^sub>1)\n          s\\<^sub>2\n else (\\<lambda>s\\<^sub>1 s\\<^sub>2. s\\<^sub>1))\n s\\<^sub>1 s\\<^sub>2 \\<triangleleft>\\<^bsub>x\\<^esub>\ns\\<^sub>2\n                                 else (if \\<forall>s\\<^sub>1 s\\<^sub>2.\n       A (if mwb_lens x\n          then s\\<^sub>1 \\<triangleleft>\\<^bsub>x\\<^esub> s\\<^sub>2\n          else s\\<^sub>1)\n        s\\<^sub>2 =\n       (if mwb_lens x\n        then A s\\<^sub>1 s\\<^sub>2 \\<triangleleft>\\<^bsub>x\\<^esub>\n             s\\<^sub>2\n        else A s\\<^sub>1 s\\<^sub>2)\n then \\<lambda>s\\<^sub>1 s\\<^sub>2.\n         A (if mwb_lens x\n            then s\\<^sub>1 \\<triangleleft>\\<^bsub>x\\<^esub> s\\<^sub>2\n            else s\\<^sub>1)\n          s\\<^sub>2\n else (\\<lambda>s\\<^sub>1 s\\<^sub>2. s\\<^sub>1))\n s\\<^sub>1 s\\<^sub>2)\n                          then \\<lambda>s\\<^sub>1 s\\<^sub>2.\n                                  (if \\<forall>s\\<^sub>1 s\\<^sub>2.\n   A (if mwb_lens x\n      then s\\<^sub>1 \\<triangleleft>\\<^bsub>x\\<^esub> s\\<^sub>2\n      else s\\<^sub>1)\n    s\\<^sub>2 =\n   (if mwb_lens x\n    then A s\\<^sub>1 s\\<^sub>2 \\<triangleleft>\\<^bsub>x\\<^esub> s\\<^sub>2\n    else A s\\<^sub>1 s\\<^sub>2)\n                                   then \\<lambda>s\\<^sub>1 s\\<^sub>2.\n     A (if mwb_lens x\n        then s\\<^sub>1 \\<triangleleft>\\<^bsub>x\\<^esub> s\\<^sub>2\n        else s\\<^sub>1)\n      s\\<^sub>2\n                                   else (\\<lambda>s\\<^sub>1 s\\<^sub>2.\n      s\\<^sub>1))\n                                   (if mwb_lens x\n                                    then s\\<^sub>1 \\<triangleleft>\\<^bsub>x\\<^esub>\n   s\\<^sub>2\n                                    else s\\<^sub>1)\n                                   s\\<^sub>2\n                          else (\\<lambda>s\\<^sub>1 s\\<^sub>2. s\\<^sub>1)) =\n                         (if \\<forall>s\\<^sub>1 s\\<^sub>2.\n                                A (if mwb_lens x\n                                   then s\\<^sub>1 \\<triangleleft>\\<^bsub>x\\<^esub>\n  s\\<^sub>2\n                                   else s\\<^sub>1)\n                                 s\\<^sub>2 =\n                                (if mwb_lens x\n                                 then A s\\<^sub>1\n s\\<^sub>2 \\<triangleleft>\\<^bsub>x\\<^esub>\ns\\<^sub>2\n                                 else A s\\<^sub>1 s\\<^sub>2)\n                          then \\<lambda>s\\<^sub>1 s\\<^sub>2.\n                                  A (if mwb_lens x\n                                     then s\\<^sub>1 \\<triangleleft>\\<^bsub>x\\<^esub>\n    s\\<^sub>2\n                                     else s\\<^sub>1)\n                                   s\\<^sub>2\n                          else (\\<lambda>s\\<^sub>1 s\\<^sub>2. s\\<^sub>1))", "apply (auto simp add: lens_override_overshadow_left)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x A s\\<^sub>1 s\\<^sub>2 s\\<^sub>1' s\\<^sub>2'.\n       \\<lbrakk>overrider A;\n        \\<forall>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n           A s\\<^sub>1\n            (s\\<^sub>2 \\<triangleleft>\\<^bsub>x\\<^esub> s\\<^sub>3) =\n           A s\\<^sub>1\n            (s\\<^sub>2 \\<triangleleft>\\<^bsub>x\\<^esub>\n             (s\\<^sub>2 \\<triangleleft>\\<^bsub>x\\<^esub> s\\<^sub>3));\n        \\<forall>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n           A s\\<^sub>1 s\\<^sub>2 \\<triangleleft>\\<^bsub>x\\<^esub>\n           s\\<^sub>3 =\n           A s\\<^sub>1\n            (s\\<^sub>2 \\<triangleleft>\\<^bsub>x\\<^esub> s\\<^sub>3);\n        mwb_lens x;\n        A (s\\<^sub>1 \\<triangleleft>\\<^bsub>x\\<^esub> s\\<^sub>2)\n         (s\\<^sub>2 \\<triangleleft>\\<^bsub>x\\<^esub> s\\<^sub>2) \\<noteq>\n        A s\\<^sub>1 (s\\<^sub>2 \\<triangleleft>\\<^bsub>x\\<^esub> s\\<^sub>2);\n        s\\<^sub>1' \\<triangleleft>\\<^bsub>x\\<^esub> s\\<^sub>2' \\<noteq>\n        s\\<^sub>1';\n        \\<forall>s\\<^sub>1 s\\<^sub>2.\n           A (s\\<^sub>1 \\<triangleleft>\\<^bsub>x\\<^esub> s\\<^sub>2)\n            s\\<^sub>2 =\n           A s\\<^sub>1\n            (s\\<^sub>2 \\<triangleleft>\\<^bsub>x\\<^esub> s\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>s\\<^sub>1 s\\<^sub>2. s\\<^sub>1) =\n                         (\\<lambda>s\\<^sub>1 s\\<^sub>2.\n                             A s\\<^sub>1\n                              (s\\<^sub>2 \\<triangleleft>\\<^bsub>x\\<^esub>\n                               s\\<^sub>2))", "apply (metis lens_override_overshadow_left)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open> Membership operations. These have slightly hacky definitions at the moment in order to\n  cater for @{term mwb_lens}. See if they can be generalised? \\<close>"], ["", "definition lens_member :: \"('a \\<Longrightarrow> 'b) \\<Rightarrow> 'b scene \\<Rightarrow> bool\" (infix \"\\<in>\\<^sub>S\" 50) where\n[lens_defs]:\n\"lens_member x A = ((\\<forall> s\\<^sub>1 s\\<^sub>2 s\\<^sub>3. s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 on A \\<oplus>\\<^sub>L s\\<^sub>3 on x = s\\<^sub>1 \\<oplus>\\<^sub>S (s\\<^sub>2 \\<oplus>\\<^sub>L s\\<^sub>3 on x) on A) \\<and>\n                      (\\<forall> b b'. get\\<^bsub>x\\<^esub> (b \\<oplus>\\<^sub>S b' on A) = get\\<^bsub>x\\<^esub> b'))\""], ["", "lemma lens_member_override: \"x \\<in>\\<^sub>S A \\<Longrightarrow> s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 on A \\<oplus>\\<^sub>L s\\<^sub>3 on x = s\\<^sub>1 \\<oplus>\\<^sub>S (s\\<^sub>2 \\<oplus>\\<^sub>L s\\<^sub>3 on x) on A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in>\\<^sub>S A \\<Longrightarrow>\n    s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 on A \\<triangleleft>\\<^bsub>x\\<^esub>\n    s\\<^sub>3 =\n    s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 \\<triangleleft>\\<^bsub>x\\<^esub>\n                               s\\<^sub>3 on A", "using lens_member_def"], ["proof (prove)\nusing this:\n  (?x \\<in>\\<^sub>S ?A) =\n  ((\\<forall>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n       s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 on ?A \\<triangleleft>\\<^bsub>?x\\<^esub>\n       s\\<^sub>3 =\n       s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 \\<triangleleft>\\<^bsub>?x\\<^esub>\n                                  s\\<^sub>3 on ?A) \\<and>\n   (\\<forall>b b'.\n       get\\<^bsub>?x\\<^esub> (b \\<oplus>\\<^sub>S b' on ?A) =\n       get\\<^bsub>?x\\<^esub> b'))\n\ngoal (1 subgoal):\n 1. x \\<in>\\<^sub>S A \\<Longrightarrow>\n    s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 on A \\<triangleleft>\\<^bsub>x\\<^esub>\n    s\\<^sub>3 =\n    s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 \\<triangleleft>\\<^bsub>x\\<^esub>\n                               s\\<^sub>3 on A", "by force"], ["", "lemma lens_member_put:\n  assumes \"vwb_lens x\" \"idem_scene a\" \"x \\<in>\\<^sub>S a\"\n  shows \"put\\<^bsub>x\\<^esub> s v \\<oplus>\\<^sub>S s on a = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. put\\<^bsub>x\\<^esub> s v \\<oplus>\\<^sub>S s on a = s", "by (metis (full_types) assms lens_member_override lens_override_def scene_override_idem vwb_lens.put_eq)"], ["", "lemma lens_member_top: \"x \\<in>\\<^sub>S \\<top>\\<^sub>S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in>\\<^sub>S \\<top>\\<^sub>S", "by (auto simp add: lens_member_def)"], ["", "abbreviation lens_not_member :: \"('a \\<Longrightarrow> 'b) \\<Rightarrow> 'b scene \\<Rightarrow> bool\" (infix \"\\<notin>\\<^sub>S\" 50) where\n\"x \\<notin>\\<^sub>S A \\<equiv> (x \\<in>\\<^sub>S - A)\""], ["", "lemma lens_member_get_override [simp]: \"x \\<in>\\<^sub>S a \\<Longrightarrow> get\\<^bsub>x\\<^esub> (b \\<oplus>\\<^sub>S b' on a) = get\\<^bsub>x\\<^esub> b'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in>\\<^sub>S a \\<Longrightarrow>\n    get\\<^bsub>x\\<^esub> (b \\<oplus>\\<^sub>S b' on a) =\n    get\\<^bsub>x\\<^esub> b'", "by (simp add: lens_member_def)"], ["", "lemma lens_not_member_get_override [simp]: \"x \\<notin>\\<^sub>S a \\<Longrightarrow> get\\<^bsub>x\\<^esub> (b \\<oplus>\\<^sub>S b' on a) = get\\<^bsub>x\\<^esub> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin>\\<^sub>S a \\<Longrightarrow>\n    get\\<^bsub>x\\<^esub> (b \\<oplus>\\<^sub>S b' on a) =\n    get\\<^bsub>x\\<^esub> b", "by (simp add: lens_member_def scene_override_commute)"], ["", "subsection \\<open> Function Domain Scene \\<close>"], ["", "lift_definition fun_dom_scene :: \"'a set \\<Rightarrow> ('a \\<Rightarrow> 'b::two) scene\" (\"fds\") is\n\"\\<lambda> A f g. override_on f g A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>set. overrider (\\<lambda>f g. override_on f g set)", "by (unfold_locales, simp_all add: override_on_def fun_eq_iff)"], ["", "lemma fun_dom_scene_empty: \"fds({}) = \\<bottom>\\<^sub>S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds {} = \\<bottom>\\<^sub>S", "by (transfer, simp)"], ["", "lemma fun_dom_scene_union: \"fds(A \\<union> B) = fds(A) \\<squnion>\\<^sub>S fds(B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds (A \\<union> B) = fds A \\<squnion>\\<^sub>S fds B", "by (transfer, auto simp add: fun_eq_iff override_on_def)"], ["", "lemma fun_dom_scene_compl: \"fds(- A) = - fds(A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds (- A) = - fds A", "by (transfer, auto simp add: fun_eq_iff override_on_def)"], ["", "lemma fun_dom_scene_inter: \"fds(A \\<inter> B) = fds(A) \\<sqinter>\\<^sub>S fds(B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds (A \\<inter> B) = fds A \\<sqinter>\\<^sub>S fds B", "by (simp add: inf_scene_def fun_dom_scene_union[THEN sym] fun_dom_scene_compl[THEN sym])"], ["", "lemma fun_dom_scene_UNIV: \"fds(UNIV) = \\<top>\\<^sub>S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds UNIV = \\<top>\\<^sub>S", "by (transfer, auto simp add: fun_eq_iff override_on_def)"], ["", "lemma fun_dom_scene_indep [simp]:   \n  \"fds(A) \\<bowtie>\\<^sub>S fds(B) \\<longleftrightarrow> A \\<inter> B = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fds A \\<bowtie>\\<^sub>S fds B) = (A \\<inter> B = {})", "by (transfer, auto simp add: override_on_def fun_eq_iff, meson two_diff)"], ["", "lemma fun_dom_scene_always_compat [simp]: \"fds(A) ##\\<^sub>S fds(B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds A ##\\<^sub>S fds B", "by (transfer, simp add: override_on_def fun_eq_iff)"], ["", "lemma fun_dom_scene_le [simp]: \"fds(A) \\<subseteq>\\<^sub>S fds(B) \\<longleftrightarrow> A \\<subseteq> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds A \\<subseteq>\\<^sub>S fds B = (A \\<subseteq> B)", "unfolding less_eq_scene_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n        s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 on fds\n           B \\<oplus>\\<^sub>S s\\<^sub>3 on fds A =\n        s\\<^sub>1 \\<oplus>\\<^sub>S s\\<^sub>2 \\<oplus>\\<^sub>S s\\<^sub>3 on fds\nA on fds B) =\n    (A \\<subseteq> B)", "by (transfer, auto simp add: override_on_def fun_eq_iff, meson two_diff)"], ["", "text \\<open> Hide implementation details for scenes \\<close>"], ["", "lifting_update scene.lifting"], ["", "lifting_forget scene.lifting"], ["", "end"]]}