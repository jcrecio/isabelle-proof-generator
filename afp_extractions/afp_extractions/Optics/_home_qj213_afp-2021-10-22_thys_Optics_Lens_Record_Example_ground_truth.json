{"file_name": "/home/qj213/afp-2021-10-22/thys/Optics/Lens_Record_Example.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Optics", "problem_names": ["lemma mylens_composition: \n  \"x +\\<^sub>L y +\\<^sub>L more\\<^sub>L \\<approx>\\<^sub>L 1\\<^sub>L\" (is \"?P \\<approx>\\<^sub>L ?Q\")", "lemma mylens_bij_lens:\n  \"bij_lens (x +\\<^sub>L y +\\<^sub>L more\\<^sub>L)\""], "translations": [["", "lemma mylens_composition: \n  \"x +\\<^sub>L y +\\<^sub>L more\\<^sub>L \\<approx>\\<^sub>L 1\\<^sub>L\" (is \"?P \\<approx>\\<^sub>L ?Q\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. x +\\<^sub>L y +\\<^sub>L more\\<^sub>L \\<approx>\\<^sub>L 1\\<^sub>L", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x +\\<^sub>L y +\\<^sub>L more\\<^sub>L \\<approx>\\<^sub>L 1\\<^sub>L", "have \"?Q \\<approx>\\<^sub>L base\\<^sub>L +\\<^sub>L more\\<^sub>L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1\\<^sub>L \\<approx>\\<^sub>L base\\<^sub>L +\\<^sub>L more\\<^sub>L", "by (simp add: lens_equiv_sym)"], ["proof (state)\nthis:\n  1\\<^sub>L \\<approx>\\<^sub>L base\\<^sub>L +\\<^sub>L more\\<^sub>L\n\ngoal (1 subgoal):\n 1. x +\\<^sub>L y +\\<^sub>L more\\<^sub>L \\<approx>\\<^sub>L 1\\<^sub>L", "also"], ["proof (state)\nthis:\n  1\\<^sub>L \\<approx>\\<^sub>L base\\<^sub>L +\\<^sub>L more\\<^sub>L\n\ngoal (1 subgoal):\n 1. x +\\<^sub>L y +\\<^sub>L more\\<^sub>L \\<approx>\\<^sub>L 1\\<^sub>L", "have \"... \\<approx>\\<^sub>L (x +\\<^sub>L y) +\\<^sub>L more\\<^sub>L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. base\\<^sub>L +\\<^sub>L more\\<^sub>L \\<approx>\\<^sub>L\n    (x +\\<^sub>L y) +\\<^sub>L more\\<^sub>L", "by (simp add: lens_plus_eq_left)"], ["proof (state)\nthis:\n  base\\<^sub>L +\\<^sub>L more\\<^sub>L \\<approx>\\<^sub>L\n  (x +\\<^sub>L y) +\\<^sub>L more\\<^sub>L\n\ngoal (1 subgoal):\n 1. x +\\<^sub>L y +\\<^sub>L more\\<^sub>L \\<approx>\\<^sub>L 1\\<^sub>L", "also"], ["proof (state)\nthis:\n  base\\<^sub>L +\\<^sub>L more\\<^sub>L \\<approx>\\<^sub>L\n  (x +\\<^sub>L y) +\\<^sub>L more\\<^sub>L\n\ngoal (1 subgoal):\n 1. x +\\<^sub>L y +\\<^sub>L more\\<^sub>L \\<approx>\\<^sub>L 1\\<^sub>L", "have \"... \\<approx>\\<^sub>L x +\\<^sub>L y +\\<^sub>L more\\<^sub>L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x +\\<^sub>L y) +\\<^sub>L more\\<^sub>L \\<approx>\\<^sub>L\n    x +\\<^sub>L y +\\<^sub>L more\\<^sub>L", "by (simp add: lens_plus_assoc)"], ["proof (state)\nthis:\n  (x +\\<^sub>L y) +\\<^sub>L more\\<^sub>L \\<approx>\\<^sub>L\n  x +\\<^sub>L y +\\<^sub>L more\\<^sub>L\n\ngoal (1 subgoal):\n 1. x +\\<^sub>L y +\\<^sub>L more\\<^sub>L \\<approx>\\<^sub>L 1\\<^sub>L", "finally"], ["proof (chain)\npicking this:\n  1\\<^sub>L \\<approx>\\<^sub>L x +\\<^sub>L y +\\<^sub>L more\\<^sub>L", "show ?thesis"], ["proof (prove)\nusing this:\n  1\\<^sub>L \\<approx>\\<^sub>L x +\\<^sub>L y +\\<^sub>L more\\<^sub>L\n\ngoal (1 subgoal):\n 1. x +\\<^sub>L y +\\<^sub>L more\\<^sub>L \\<approx>\\<^sub>L 1\\<^sub>L", "using lens_equiv_sym"], ["proof (prove)\nusing this:\n  1\\<^sub>L \\<approx>\\<^sub>L x +\\<^sub>L y +\\<^sub>L more\\<^sub>L\n  ?X \\<approx>\\<^sub>L ?Y \\<Longrightarrow> ?Y \\<approx>\\<^sub>L ?X\n\ngoal (1 subgoal):\n 1. x +\\<^sub>L y +\\<^sub>L more\\<^sub>L \\<approx>\\<^sub>L 1\\<^sub>L", "by auto"], ["proof (state)\nthis:\n  x +\\<^sub>L y +\\<^sub>L more\\<^sub>L \\<approx>\\<^sub>L 1\\<^sub>L\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mylens_bij_lens:\n  \"bij_lens (x +\\<^sub>L y +\\<^sub>L more\\<^sub>L)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_lens (x +\\<^sub>L y +\\<^sub>L more\\<^sub>L)", "using bij_lens_equiv_id mylens_composition"], ["proof (prove)\nusing this:\n  bij_lens ?X = ?X \\<approx>\\<^sub>L 1\\<^sub>L\n  x +\\<^sub>L y +\\<^sub>L more\\<^sub>L \\<approx>\\<^sub>L 1\\<^sub>L\n\ngoal (1 subgoal):\n 1. bij_lens (x +\\<^sub>L y +\\<^sub>L more\\<^sub>L)", "by auto"], ["", "alphabet mylens_2 = mylens +\n  z :: int\n  k :: \"string list\""], ["", "thm lens_defs"], ["", "thm base_more_bij_lens"], ["", "thm indeps"], ["", "thm equivs"], ["", "thm sublenses"], ["", "alphabet mylens_3 = mylens_2 +\n  n :: real\n  h :: nat"], ["", "thm base_more_bij_lens"], ["", "thm indeps"], ["", "thm equivs"], ["", "thm sublenses"], ["", "end"]]}