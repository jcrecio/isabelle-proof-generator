{"file_name": "/home/qj213/afp-2021-10-22/thys/Optics/Lens_State.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Optics", "problem_names": ["lemma zoom_comp1: \"l1 \\<rhd> l2 \\<rhd> s = (l2 ;\\<^sub>L l1) \\<rhd> s\"", "lemma zoom_zero[simp]: \"zero_lens \\<rhd> s = s\"", "lemma zoom_id[simp]: \"id_lens \\<rhd> s = s\"", "lemma (in mwb_lens) zoom_comp2[simp]: \"zoom x m \\<bind> (\\<lambda>a. zoom x (n a)) = zoom x (m \\<bind> n)\"", "lemma (in wb_lens) use_alt_def: \"use x = map_state (lens_get x) State_Monad.get\"", "lemma (in wb_lens) modify_alt_def: \"modify x f = State_Monad.update (update f)\"", "lemma (in wb_lens) modify_id[simp]: \"modify x (\\<lambda>x. x) = State_Monad.return ()\"", "lemma (in mwb_lens) modify_comp[simp]: \"bind (modify x f) (\\<lambda>_. modify x g) = modify x (g \\<circ> f)\""], "translations": [["", "lemma zoom_comp1: \"l1 \\<rhd> l2 \\<rhd> s = (l2 ;\\<^sub>L l1) \\<rhd> s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l1 \\<rhd> l2 \\<rhd> s = (l2 ;\\<^sub>L l1) \\<rhd> s", "unfolding zoom_def lens_comp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. State\n     (\\<lambda>b.\n         case run_state\n               (State\n                 (\\<lambda>b.\n                     case run_state s (get\\<^bsub>l2\\<^esub> b) of\n                     (c, a) \\<Rightarrow> (c, put\\<^bsub>l2\\<^esub> b a)))\n               (get\\<^bsub>l1\\<^esub> b) of\n         (c, a) \\<Rightarrow> (c, put\\<^bsub>l1\\<^esub> b a)) =\n    State\n     (\\<lambda>b.\n         case run_state s\n               (get\\<^bsub>\\<lparr>lens_get = get\\<^bsub>l2\\<^esub> \\<circ> get\\<^bsub>l1\\<^esub>, lens_put = \\<lambda>\\<sigma> v. put\\<^bsub>l1\\<^esub> \\<sigma> (put\\<^bsub>l2\\<^esub> (get\\<^bsub>l1\\<^esub> \\<sigma>) v)\\<rparr>\\<^esub>\n                 b) of\n         (c, a) \\<Rightarrow>\n           (c, put\\<^bsub>\\<lparr>lens_get = get\\<^bsub>l2\\<^esub> \\<circ> get\\<^bsub>l1\\<^esub>, lens_put = \\<lambda>\\<sigma> v. put\\<^bsub>l1\\<^esub> \\<sigma> (put\\<^bsub>l2\\<^esub> (get\\<^bsub>l1\\<^esub> \\<sigma>) v)\\<rparr>\\<^esub>\n                b a))", "by (auto split: prod.splits)"], ["", "lemma zoom_zero[simp]: \"zero_lens \\<rhd> s = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0\\<^sub>L \\<rhd> s = s", "unfolding zoom_def zero_lens_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. State\n     (\\<lambda>b.\n         case run_state s\n               (get\\<^bsub>\\<lparr>lens_get = \\<lambda>_. (), lens_put = \\<lambda>\\<sigma> x. \\<sigma>\\<rparr>\\<^esub>\n                 b) of\n         (c, a) \\<Rightarrow>\n           (c, put\\<^bsub>\\<lparr>lens_get = \\<lambda>_. (), lens_put = \\<lambda>\\<sigma> x. \\<sigma>\\<rparr>\\<^esub>\n                b a)) =\n    s", "by simp"], ["", "lemma zoom_id[simp]: \"id_lens \\<rhd> s = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1\\<^sub>L \\<rhd> s = s", "unfolding zoom_def id_lens_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. State\n     (\\<lambda>b.\n         case run_state s\n               (get\\<^bsub>\\<lparr>lens_get = id, lens_put = \\<lambda>_. id\\<rparr>\\<^esub>\n                 b) of\n         (c, a) \\<Rightarrow>\n           (c, put\\<^bsub>\\<lparr>lens_get = id, lens_put = \\<lambda>_. id\\<rparr>\\<^esub>\n                b a)) =\n    s", "by simp"], ["", "end"], ["", "lemma (in mwb_lens) zoom_comp2[simp]: \"zoom x m \\<bind> (\\<lambda>a. zoom x (n a)) = zoom x (m \\<bind> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. zoom x m \\<bind> (\\<lambda>a. zoom x (n a)) = zoom x (m \\<bind> n)", "unfolding zoom_def State_Monad.bind_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. State\n     (\\<lambda>s.\n         case run_state\n               (State\n                 (\\<lambda>b.\n                     case run_state m (get b) of\n                     (c, a) \\<Rightarrow> (c, put b a)))\n               s of\n         (a, xa) \\<Rightarrow>\n           run_state\n            (State\n              (\\<lambda>b.\n                  case run_state (n a) (get b) of\n                  (c, a) \\<Rightarrow> (c, put b a)))\n            xa) =\n    State\n     (\\<lambda>b.\n         case run_state\n               (State\n                 (\\<lambda>s.\n                     case run_state m s of\n                     (a, x) \\<Rightarrow> run_state (n a) x))\n               (get b) of\n         (c, a) \\<Rightarrow> (c, put b a))", "by (auto split: prod.splits simp: put_get put_put)"], ["", "lemma (in wb_lens) use_alt_def: \"use x = map_state (lens_get x) State_Monad.get\""], ["proof (prove)\ngoal (1 subgoal):\n 1. use x = map_state get State_Monad.get", "unfolding State_Monad.get_def use_def zoom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. State\n     (\\<lambda>b.\n         case run_state (State (\\<lambda>s. (s, s))) (get b) of\n         (c, a) \\<Rightarrow> (c, put b a)) =\n    map_state get (State (\\<lambda>s. (s, s)))", "by (simp add: comp_def get_put)"], ["", "lemma (in wb_lens) modify_alt_def: \"modify x f = State_Monad.update (update f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. modify x f = State_Monad.update (update f)", "unfolding modify_def zoom_def lens_update_def State_Monad.update_def State_Monad.get_def State_Monad.set_def State_Monad.bind_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. State\n     (\\<lambda>b.\n         case run_state\n               (State\n                 (\\<lambda>s.\n                     case run_state (State (\\<lambda>s. (s, s))) s of\n                     (a, x) \\<Rightarrow>\n                       run_state\n                        (((\\<lambda>s'.\n                              State (\\<lambda>_. ((), s'))) \\<circ>\n                          f)\n                          a)\n                        x))\n               (get b) of\n         (c, a) \\<Rightarrow> (c, put b a)) =\n    State\n     (\\<lambda>s.\n         case run_state (State (\\<lambda>s. (s, s))) s of\n         (a, xa) \\<Rightarrow>\n           run_state\n            (((\\<lambda>s'. State (\\<lambda>_. ((), s'))) \\<circ>\n              (\\<lambda>\\<sigma>. put \\<sigma> (f (get \\<sigma>))))\n              a)\n            xa)", "by (auto)"], ["", "lemma (in wb_lens) modify_id[simp]: \"modify x (\\<lambda>x. x) = State_Monad.return ()\""], ["proof (prove)\ngoal (1 subgoal):\n 1. modify x (\\<lambda>x. x) = State_Monad.return ()", "unfolding lens_update_def modify_alt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. State_Monad.update (\\<lambda>\\<sigma>. put \\<sigma> (get \\<sigma>)) =\n    State_Monad.return ()", "by (simp add: get_put)"], ["", "lemma (in mwb_lens) modify_comp[simp]: \"bind (modify x f) (\\<lambda>_. modify x g) = modify x (g \\<circ> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. modify x f \\<bind> (\\<lambda>_. modify x g) = modify x (g \\<circ> f)", "unfolding modify_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. zoom x (State_Monad.update f) \\<bind>\n    (\\<lambda>_. zoom x (State_Monad.update g)) =\n    zoom x (State_Monad.update (g \\<circ> f))", "by simp"], ["", "end"]]}