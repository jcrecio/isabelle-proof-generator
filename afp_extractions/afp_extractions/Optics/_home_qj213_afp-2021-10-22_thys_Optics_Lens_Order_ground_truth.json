{"file_name": "/home/qj213/afp-2021-10-22/thys/Optics/Lens_Order.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Optics", "problem_names": ["lemma sublens_pres_mwb:\n  \"\\<lbrakk> mwb_lens Y; X \\<subseteq>\\<^sub>L Y \\<rbrakk> \\<Longrightarrow> mwb_lens X\"", "lemma sublens_pres_wb:\n  \"\\<lbrakk> wb_lens Y; X \\<subseteq>\\<^sub>L Y \\<rbrakk> \\<Longrightarrow> wb_lens X\"", "lemma sublens_pres_vwb:\n  \"\\<lbrakk> vwb_lens Y; X \\<subseteq>\\<^sub>L Y \\<rbrakk> \\<Longrightarrow> vwb_lens X\"", "lemma sublens_refl [simp]:\n  \"X \\<subseteq>\\<^sub>L X\"", "lemma sublens_trans [trans]:\n  \"\\<lbrakk> X \\<subseteq>\\<^sub>L Y; Y \\<subseteq>\\<^sub>L Z \\<rbrakk> \\<Longrightarrow> X \\<subseteq>\\<^sub>L Z\"", "lemma sublens_least: \"wb_lens X \\<Longrightarrow> 0\\<^sub>L \\<subseteq>\\<^sub>L X\"", "lemma sublens_greatest: \"vwb_lens X \\<Longrightarrow> X \\<subseteq>\\<^sub>L 1\\<^sub>L\"", "lemma sublens_put_put:\n  \"\\<lbrakk> mwb_lens X; Y \\<subseteq>\\<^sub>L X \\<rbrakk> \\<Longrightarrow> put\\<^bsub>X\\<^esub> (put\\<^bsub>Y\\<^esub> \\<sigma> v) u = put\\<^bsub>X\\<^esub> \\<sigma> u\"", "lemma sublens_obs_get:\n  \"\\<lbrakk> mwb_lens X; Y \\<subseteq>\\<^sub>L X \\<rbrakk> \\<Longrightarrow>  get\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> \\<sigma> v) = get\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> \\<rho> v)\"", "lemma sublens_pres_indep:\n  \"\\<lbrakk> X \\<subseteq>\\<^sub>L Y; Y \\<bowtie> Z \\<rbrakk> \\<Longrightarrow> X \\<bowtie> Z\"", "lemma sublens_pres_indep':\n  \"\\<lbrakk> X \\<subseteq>\\<^sub>L Y; Z \\<bowtie> Y \\<rbrakk> \\<Longrightarrow> Z \\<bowtie> X\"", "lemma sublens_compat: \"\\<lbrakk> vwb_lens X; vwb_lens Y; X \\<subseteq>\\<^sub>L Y \\<rbrakk> \\<Longrightarrow> X ##\\<^sub>L Y\"", "lemma lens_quotient_mwb:\n  \"\\<lbrakk> mwb_lens Y; X \\<subseteq>\\<^sub>L Y \\<rbrakk> \\<Longrightarrow> mwb_lens (X /\\<^sub>L Y)\"", "lemma lens_equivI [intro]:\n  \"\\<lbrakk> X \\<subseteq>\\<^sub>L Y; Y \\<subseteq>\\<^sub>L X \\<rbrakk> \\<Longrightarrow> X \\<approx>\\<^sub>L Y\"", "lemma lens_equiv_refl:\n  \"X \\<approx>\\<^sub>L X\"", "lemma lens_equiv_sym:\n  \"X \\<approx>\\<^sub>L Y \\<Longrightarrow> Y \\<approx>\\<^sub>L X\"", "lemma lens_equiv_trans [trans]:\n  \"\\<lbrakk> X \\<approx>\\<^sub>L Y; Y \\<approx>\\<^sub>L Z \\<rbrakk> \\<Longrightarrow> X \\<approx>\\<^sub>L Z\"", "lemma lens_equiv_pres_indep:\n  \"\\<lbrakk> X \\<approx>\\<^sub>L Y; Y \\<bowtie> Z \\<rbrakk> \\<Longrightarrow> X \\<bowtie> Z\"", "lemma lens_equiv_pres_indep':\n  \"\\<lbrakk> X \\<approx>\\<^sub>L Y; Z \\<bowtie> Y \\<rbrakk> \\<Longrightarrow> Z \\<bowtie> X\"", "lemma lens_comp_cong_1: \"X \\<approx>\\<^sub>L Y \\<Longrightarrow> X ;\\<^sub>L Z \\<approx>\\<^sub>L Y ;\\<^sub>L Z\"", "lemma lens_quotient_comp:\n  \"\\<lbrakk> weak_lens Y; X \\<subseteq>\\<^sub>L Y \\<rbrakk> \\<Longrightarrow> (X /\\<^sub>L Y) ;\\<^sub>L Y = X\"", "lemma lens_quotient_plus:\n  \"\\<lbrakk> mwb_lens Z; X \\<subseteq>\\<^sub>L Z; Y \\<subseteq>\\<^sub>L Z \\<rbrakk> \\<Longrightarrow> (X +\\<^sub>L Y) /\\<^sub>L Z = (X /\\<^sub>L Z) +\\<^sub>L (Y /\\<^sub>L Z)\"", "lemma lens_quotient_plus_den1: \n  \"\\<lbrakk> weak_lens x; weak_lens y; x \\<bowtie> y \\<rbrakk> \\<Longrightarrow> x /\\<^sub>L (x +\\<^sub>L y) = fst\\<^sub>L\"", "lemma lens_quotient_plus_den2: \"\\<lbrakk> weak_lens x; weak_lens z; x \\<bowtie> z; y \\<subseteq>\\<^sub>L z \\<rbrakk> \\<Longrightarrow> y /\\<^sub>L (x +\\<^sub>L z) = (y /\\<^sub>L z) ;\\<^sub>L snd\\<^sub>L \"", "lemma plus_pred_sublens: \"\\<lbrakk> mwb_lens Z; X \\<subseteq>\\<^sub>L Z; Y \\<subseteq>\\<^sub>L Z; X \\<bowtie> Y \\<rbrakk> \\<Longrightarrow> (X +\\<^sub>L Y) \\<subseteq>\\<^sub>L Z\"", "lemma lens_plus_sub_assoc_1:\n  \"X +\\<^sub>L Y +\\<^sub>L Z \\<subseteq>\\<^sub>L (X +\\<^sub>L Y) +\\<^sub>L Z\"", "lemma lens_plus_sub_assoc_2:\n  \"(X +\\<^sub>L Y) +\\<^sub>L Z \\<subseteq>\\<^sub>L X +\\<^sub>L Y +\\<^sub>L Z\"", "lemma lens_plus_assoc:\n  \"(X +\\<^sub>L Y) +\\<^sub>L Z \\<approx>\\<^sub>L X +\\<^sub>L Y +\\<^sub>L Z\"", "lemma lens_plus_sub_comm: \"X \\<bowtie> Y \\<Longrightarrow> X +\\<^sub>L Y \\<subseteq>\\<^sub>L Y +\\<^sub>L X\"", "lemma lens_plus_comm: \"X \\<bowtie> Y \\<Longrightarrow> X +\\<^sub>L Y \\<approx>\\<^sub>L Y +\\<^sub>L X\"", "lemma lens_plus_ub [simp]: \"wb_lens Y \\<Longrightarrow> X \\<subseteq>\\<^sub>L X +\\<^sub>L Y\"", "lemma lens_plus_right_sublens:\n  \"\\<lbrakk> vwb_lens Y; Y \\<bowtie> Z; X \\<subseteq>\\<^sub>L Z \\<rbrakk> \\<Longrightarrow> X \\<subseteq>\\<^sub>L Y +\\<^sub>L Z\"", "lemma lens_plus_mono_left:\n  \"\\<lbrakk> Y \\<bowtie> Z; X \\<subseteq>\\<^sub>L Y \\<rbrakk> \\<Longrightarrow> X +\\<^sub>L Z \\<subseteq>\\<^sub>L Y +\\<^sub>L Z\"", "lemma lens_plus_mono_right:\n  \"\\<lbrakk> X \\<bowtie> Z; Y \\<subseteq>\\<^sub>L Z \\<rbrakk> \\<Longrightarrow> X +\\<^sub>L Y \\<subseteq>\\<^sub>L X +\\<^sub>L Z\"", "lemma lens_comp_lb [simp]: \"vwb_lens X \\<Longrightarrow> X ;\\<^sub>L Y \\<subseteq>\\<^sub>L Y\"", "lemma sublens_comp [simp]:\n  assumes \"vwb_lens b\" \"c \\<subseteq>\\<^sub>L a\"\n  shows \"(b ;\\<^sub>L c) \\<subseteq>\\<^sub>L a\"", "lemma lens_unit_plus_sublens_1: \"X \\<subseteq>\\<^sub>L 0\\<^sub>L +\\<^sub>L X\"", "lemma lens_unit_prod_sublens_2: \"0\\<^sub>L +\\<^sub>L X \\<subseteq>\\<^sub>L X\"", "lemma lens_plus_left_unit: \"0\\<^sub>L +\\<^sub>L X \\<approx>\\<^sub>L X\"", "lemma lens_plus_right_unit: \"X +\\<^sub>L 0\\<^sub>L \\<approx>\\<^sub>L X\"", "lemma lens_plus_subcong: \"\\<lbrakk> Y\\<^sub>1 \\<bowtie> Y\\<^sub>2; X\\<^sub>1 \\<subseteq>\\<^sub>L Y\\<^sub>1; X\\<^sub>2 \\<subseteq>\\<^sub>L Y\\<^sub>2 \\<rbrakk> \\<Longrightarrow> X\\<^sub>1 +\\<^sub>L X\\<^sub>2 \\<subseteq>\\<^sub>L Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2\"", "lemma lens_plus_eq_left: \"\\<lbrakk> X \\<bowtie> Z; X \\<approx>\\<^sub>L Y \\<rbrakk> \\<Longrightarrow> X +\\<^sub>L Z \\<approx>\\<^sub>L Y +\\<^sub>L Z\"", "lemma lens_plus_eq_right: \"\\<lbrakk> X \\<bowtie> Y; Y \\<approx>\\<^sub>L Z \\<rbrakk> \\<Longrightarrow> X +\\<^sub>L Y \\<approx>\\<^sub>L X +\\<^sub>L Z\"", "lemma lens_plus_cong:\n  assumes \"X\\<^sub>1 \\<bowtie> X\\<^sub>2\" \"X\\<^sub>1 \\<approx>\\<^sub>L Y\\<^sub>1\" \"X\\<^sub>2 \\<approx>\\<^sub>L Y\\<^sub>2\"\n  shows \"X\\<^sub>1 +\\<^sub>L X\\<^sub>2 \\<approx>\\<^sub>L Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2\"", "lemma prod_lens_sublens_cong:\n  \"\\<lbrakk> X\\<^sub>1 \\<subseteq>\\<^sub>L X\\<^sub>2; Y\\<^sub>1 \\<subseteq>\\<^sub>L Y\\<^sub>2 \\<rbrakk> \\<Longrightarrow> (X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1) \\<subseteq>\\<^sub>L (X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2)\"", "lemma prod_lens_equiv_cong:\n  \"\\<lbrakk> X\\<^sub>1 \\<approx>\\<^sub>L X\\<^sub>2; Y\\<^sub>1 \\<approx>\\<^sub>L Y\\<^sub>2 \\<rbrakk> \\<Longrightarrow> (X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1) \\<approx>\\<^sub>L (X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2)\"", "lemma lens_plus_prod_exchange:\n  \"(X\\<^sub>1 +\\<^sub>L X\\<^sub>2) \\<times>\\<^sub>L (Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2) \\<approx>\\<^sub>L (X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1) +\\<^sub>L (X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2)\"", "lemma lens_get_put_quasi_commute:\n  \"\\<lbrakk> vwb_lens Y; X \\<subseteq>\\<^sub>L Y \\<rbrakk> \\<Longrightarrow> get\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> s v) = put\\<^bsub>X /\\<^sub>L Y\\<^esub> (get\\<^bsub>Y\\<^esub> s) v\"", "lemma lens_put_of_quotient:\n  \"\\<lbrakk> vwb_lens Y; X \\<subseteq>\\<^sub>L Y \\<rbrakk> \\<Longrightarrow> put\\<^bsub>Y\\<^esub> s (put\\<^bsub>X /\\<^sub>L Y\\<^esub> v\\<^sub>2 v\\<^sub>1) = put\\<^bsub>X\\<^esub> (put\\<^bsub>Y\\<^esub> s v\\<^sub>2) v\\<^sub>1\"", "lemma bij_lens_inv_left:\n  \"bij_lens X \\<Longrightarrow> inv\\<^sub>L X ;\\<^sub>L X = 1\\<^sub>L\"", "lemma bij_lens_inv_right:\n  \"bij_lens X \\<Longrightarrow> X ;\\<^sub>L inv\\<^sub>L X = 1\\<^sub>L\"", "lemma bij_lens_equiv_id:\n  \"bij_lens X \\<longleftrightarrow> X \\<approx>\\<^sub>L 1\\<^sub>L\"", "lemma bij_lens_equiv:\n  \"\\<lbrakk> bij_lens X; X \\<approx>\\<^sub>L Y \\<rbrakk> \\<Longrightarrow> bij_lens Y\"", "lemma bij_lens_cong:\n  \"X \\<approx>\\<^sub>L Y \\<Longrightarrow> bij_lens X = bij_lens Y\"", "lemma lens_id_unique:\n  \"weak_lens Y \\<Longrightarrow> Y = X ;\\<^sub>L Y \\<Longrightarrow> X = 1\\<^sub>L\"", "lemma bij_lens_via_comp_id_left:\n  \"\\<lbrakk> wb_lens X; wb_lens Y; X ;\\<^sub>L Y = 1\\<^sub>L \\<rbrakk> \\<Longrightarrow> bij_lens X\"", "lemma bij_lens_via_comp_id_right:\n  \"\\<lbrakk> wb_lens X; wb_lens Y; X ;\\<^sub>L Y = 1\\<^sub>L \\<rbrakk> \\<Longrightarrow> bij_lens Y\"", "lemma lens_equiv_via_bij:\n  assumes \"bij_lens Z\" \"X = Z ;\\<^sub>L Y\"\n  shows \"X \\<approx>\\<^sub>L Y\"", "lemma lens_equiv_iff_bij:\n  assumes \"weak_lens Y\"\n  shows \"X \\<approx>\\<^sub>L Y \\<longleftrightarrow> (\\<exists> Z. bij_lens Z \\<and> X = Z ;\\<^sub>L Y)\"", "lemma pbij_plus_commute:\n  \"\\<lbrakk> a \\<bowtie> b; mwb_lens a; mwb_lens b; pbij_lens (b +\\<^sub>L a) \\<rbrakk> \\<Longrightarrow> pbij_lens (a +\\<^sub>L b)\"", "lemma lens_override_id [simp]:\n  \"S\\<^sub>1 \\<oplus>\\<^sub>L S\\<^sub>2 on 1\\<^sub>L = S\\<^sub>2\"", "lemma lens_override_unit [simp]:\n  \"S\\<^sub>1 \\<oplus>\\<^sub>L S\\<^sub>2 on 0\\<^sub>L = S\\<^sub>1\"", "lemma lens_override_overshadow:\n  assumes \"mwb_lens Y\"  \"X \\<subseteq>\\<^sub>L Y\"\n  shows \"(S\\<^sub>1 \\<oplus>\\<^sub>L S\\<^sub>2 on X) \\<oplus>\\<^sub>L S\\<^sub>3 on Y = S\\<^sub>1 \\<oplus>\\<^sub>L S\\<^sub>3 on Y\"", "lemma lens_override_irr:\n  assumes \"X \\<bowtie> Y\"\n  shows \"S\\<^sub>1 \\<oplus>\\<^sub>L (S\\<^sub>2 \\<oplus>\\<^sub>L S\\<^sub>3 on Y) on X = S\\<^sub>1 \\<oplus>\\<^sub>L S\\<^sub>2 on X\"", "lemma lens_override_overshadow_left:\n  assumes \"mwb_lens X\"\n  shows \"(S\\<^sub>1 \\<oplus>\\<^sub>L S\\<^sub>2 on X) \\<oplus>\\<^sub>L S\\<^sub>3 on X = S\\<^sub>1 \\<oplus>\\<^sub>L S\\<^sub>3 on X\"", "lemma lens_override_overshadow_right:\n  assumes \"mwb_lens X\"\n  shows \"S\\<^sub>1 \\<oplus>\\<^sub>L (S\\<^sub>2  \\<oplus>\\<^sub>L S\\<^sub>3 on X) on X = S\\<^sub>1 \\<oplus>\\<^sub>L S\\<^sub>3 on X\"", "lemma lens_override_plus:\n  \"X \\<bowtie> Y \\<Longrightarrow> S\\<^sub>1 \\<oplus>\\<^sub>L S\\<^sub>2 on (X +\\<^sub>L Y) = (S\\<^sub>1 \\<oplus>\\<^sub>L S\\<^sub>2 on X) \\<oplus>\\<^sub>L S\\<^sub>2 on Y\"", "lemma lens_override_idem [simp]:\n  \"vwb_lens X \\<Longrightarrow> S \\<oplus>\\<^sub>L S on X = S\"", "lemma lens_override_mwb_idem [simp]:\n  \"\\<lbrakk> mwb_lens X; S \\<in> \\<S>\\<^bsub>X\\<^esub> \\<rbrakk> \\<Longrightarrow> S \\<oplus>\\<^sub>L S on X = S\"", "lemma lens_override_put_right_in:\n  \"\\<lbrakk> vwb_lens A; X \\<subseteq>\\<^sub>L A \\<rbrakk> \\<Longrightarrow> S\\<^sub>1 \\<oplus>\\<^sub>L (put\\<^bsub>X\\<^esub> S\\<^sub>2 v) on A = put\\<^bsub>X\\<^esub> (S\\<^sub>1 \\<oplus>\\<^sub>L S\\<^sub>2 on A) v\"", "lemma lens_override_put_right_out:\n  \"\\<lbrakk> vwb_lens A; X \\<bowtie> A \\<rbrakk> \\<Longrightarrow> S\\<^sub>1 \\<oplus>\\<^sub>L (put\\<^bsub>X\\<^esub> S\\<^sub>2 v) on A = (S\\<^sub>1 \\<oplus>\\<^sub>L S\\<^sub>2 on A)\"", "lemma lens_indep_overrideI:\n  assumes \"vwb_lens X\" \"vwb_lens Y\" \"(\\<And> s\\<^sub>1 s\\<^sub>2 s\\<^sub>3. s\\<^sub>1 \\<oplus>\\<^sub>L s\\<^sub>2 on X \\<oplus>\\<^sub>L s\\<^sub>3 on Y = s\\<^sub>1 \\<oplus>\\<^sub>L s\\<^sub>3 on Y \\<oplus>\\<^sub>L s\\<^sub>2 on X)\"\n  shows \"X \\<bowtie> Y\"", "lemma lens_indep_override_def:\n  assumes \"vwb_lens X\" \"vwb_lens Y\"\n  shows \"X \\<bowtie> Y \\<longleftrightarrow> (\\<forall> s\\<^sub>1 s\\<^sub>2 s\\<^sub>3. s\\<^sub>1 \\<oplus>\\<^sub>L s\\<^sub>2 on X \\<oplus>\\<^sub>L s\\<^sub>3 on Y = s\\<^sub>1 \\<oplus>\\<^sub>L s\\<^sub>3 on Y \\<oplus>\\<^sub>L s\\<^sub>2 on X)\"", "lemma override_idem_implies_vwb:\n  \"\\<lbrakk> mwb_lens X; \\<And> s. s \\<oplus>\\<^sub>L s on X = s \\<rbrakk> \\<Longrightarrow> vwb_lens X\"", "lemma sublens'_prop1:\n  assumes \"vwb_lens X\" \"X \\<subseteq>\\<^sub>L' Y\"\n  shows \"put\\<^bsub>X\\<^esub> (put\\<^bsub>Y\\<^esub> s\\<^sub>1 (get\\<^bsub>Y\\<^esub> s\\<^sub>2)) s\\<^sub>3 = put\\<^bsub>Y\\<^esub> s\\<^sub>1 (get\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> s\\<^sub>2 s\\<^sub>3))\"", "lemma sublens'_prop2:\n  assumes \"vwb_lens X\" \"X \\<subseteq>\\<^sub>L' Y\"\n  shows \"get\\<^bsub>X\\<^esub> (put\\<^bsub>Y\\<^esub> s\\<^sub>1 (get\\<^bsub>Y\\<^esub> s\\<^sub>2)) = get\\<^bsub>X\\<^esub> s\\<^sub>2\"", "lemma sublens'_prop3:\n  assumes \"vwb_lens X\" \"vwb_lens Y\" \"X \\<subseteq>\\<^sub>L' Y\"\n  shows \"put\\<^bsub>Y\\<^esub> \\<sigma> (get\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> (put\\<^bsub>Y\\<^esub> \\<rho> (get\\<^bsub>Y\\<^esub> \\<sigma>)) v)) = put\\<^bsub>X\\<^esub> \\<sigma> v\"", "lemma sublens'_implies_sublens:\n  assumes \"vwb_lens X\" \"vwb_lens Y\" \"X \\<subseteq>\\<^sub>L' Y\"\n  shows \"X \\<subseteq>\\<^sub>L Y\"", "lemma sublens_implies_sublens':\n  assumes \"vwb_lens Y\" \"X \\<subseteq>\\<^sub>L Y\"\n  shows \"X \\<subseteq>\\<^sub>L' Y\"", "lemma sublens_iff_sublens':\n  assumes \"vwb_lens X\" \"vwb_lens Y\"\n  shows \"X \\<subseteq>\\<^sub>L Y \\<longleftrightarrow> X \\<subseteq>\\<^sub>L' Y\"", "lemma lens_equiv_iff_lens_equiv':\n  assumes \"vwb_lens X\" \"vwb_lens Y\"\n  shows \"X \\<approx>\\<^sub>L Y \\<longleftrightarrow> X \\<approx>\\<^sub>L' Y\""], "translations": [["", "lemma sublens_pres_mwb:\n  \"\\<lbrakk> mwb_lens Y; X \\<subseteq>\\<^sub>L Y \\<rbrakk> \\<Longrightarrow> mwb_lens X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mwb_lens Y; X \\<subseteq>\\<^sub>L Y\\<rbrakk>\n    \\<Longrightarrow> mwb_lens X", "by (unfold_locales, auto simp add: sublens_def lens_comp_def)"], ["", "lemma sublens_pres_wb:\n  \"\\<lbrakk> wb_lens Y; X \\<subseteq>\\<^sub>L Y \\<rbrakk> \\<Longrightarrow> wb_lens X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wb_lens Y; X \\<subseteq>\\<^sub>L Y\\<rbrakk>\n    \\<Longrightarrow> wb_lens X", "by (unfold_locales, auto simp add: sublens_def lens_comp_def)"], ["", "lemma sublens_pres_vwb:\n  \"\\<lbrakk> vwb_lens Y; X \\<subseteq>\\<^sub>L Y \\<rbrakk> \\<Longrightarrow> vwb_lens X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>vwb_lens Y; X \\<subseteq>\\<^sub>L Y\\<rbrakk>\n    \\<Longrightarrow> vwb_lens X", "by (unfold_locales, auto simp add: sublens_def lens_comp_def)"], ["", "text \\<open>Sublens is a preorder as the following two theorems show.\\<close>"], ["", "lemma sublens_refl [simp]:\n  \"X \\<subseteq>\\<^sub>L X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<subseteq>\\<^sub>L X", "using id_vwb_lens sublens_def"], ["proof (prove)\nusing this:\n  vwb_lens 1\\<^sub>L\n  ?X \\<subseteq>\\<^sub>L ?Y =\n  (\\<exists>Z. vwb_lens Z \\<and> ?X = Z ;\\<^sub>L ?Y)\n\ngoal (1 subgoal):\n 1. X \\<subseteq>\\<^sub>L X", "by fastforce"], ["", "lemma sublens_trans [trans]:\n  \"\\<lbrakk> X \\<subseteq>\\<^sub>L Y; Y \\<subseteq>\\<^sub>L Z \\<rbrakk> \\<Longrightarrow> X \\<subseteq>\\<^sub>L Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq>\\<^sub>L Y; Y \\<subseteq>\\<^sub>L Z\\<rbrakk>\n    \\<Longrightarrow> X \\<subseteq>\\<^sub>L Z", "apply (auto simp add: sublens_def lens_comp_assoc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Za Zaa.\n       \\<lbrakk>vwb_lens Za; X = Za ;\\<^sub>L Zaa ;\\<^sub>L Z; vwb_lens Zaa;\n        Y = Zaa ;\\<^sub>L Z\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Zb.\n                            vwb_lens Zb \\<and>\n                            Za ;\\<^sub>L Zaa ;\\<^sub>L Z = Zb ;\\<^sub>L Z", "apply (rename_tac Z\\<^sub>1 Z\\<^sub>2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Z\\<^sub>1 Z\\<^sub>2.\n       \\<lbrakk>vwb_lens Z\\<^sub>1;\n        X = Z\\<^sub>1 ;\\<^sub>L Z\\<^sub>2 ;\\<^sub>L Z; vwb_lens Z\\<^sub>2;\n        Y = Z\\<^sub>2 ;\\<^sub>L Z\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Za.\n                            vwb_lens Za \\<and>\n                            Z\\<^sub>1 ;\\<^sub>L Z\\<^sub>2 ;\\<^sub>L Z =\n                            Za ;\\<^sub>L Z", "apply (rule_tac x=\"Z\\<^sub>1 ;\\<^sub>L Z\\<^sub>2\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Z\\<^sub>1 Z\\<^sub>2.\n       \\<lbrakk>vwb_lens Z\\<^sub>1;\n        X = Z\\<^sub>1 ;\\<^sub>L Z\\<^sub>2 ;\\<^sub>L Z; vwb_lens Z\\<^sub>2;\n        Y = Z\\<^sub>2 ;\\<^sub>L Z\\<rbrakk>\n       \\<Longrightarrow> vwb_lens (Z\\<^sub>1 ;\\<^sub>L Z\\<^sub>2) \\<and>\n                         Z\\<^sub>1 ;\\<^sub>L Z\\<^sub>2 ;\\<^sub>L Z =\n                         Z\\<^sub>1 ;\\<^sub>L Z\\<^sub>2 ;\\<^sub>L Z", "apply (simp add: lens_comp_assoc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Z\\<^sub>1 Z\\<^sub>2.\n       \\<lbrakk>vwb_lens Z\\<^sub>1;\n        X = Z\\<^sub>1 ;\\<^sub>L Z\\<^sub>2 ;\\<^sub>L Z; vwb_lens Z\\<^sub>2;\n        Y = Z\\<^sub>2 ;\\<^sub>L Z\\<rbrakk>\n       \\<Longrightarrow> vwb_lens (Z\\<^sub>1 ;\\<^sub>L Z\\<^sub>2)", "using comp_vwb_lens"], ["proof (prove)\nusing this:\n  \\<lbrakk>vwb_lens ?x; vwb_lens ?y\\<rbrakk>\n  \\<Longrightarrow> vwb_lens (?x ;\\<^sub>L ?y)\n\ngoal (1 subgoal):\n 1. \\<And>Z\\<^sub>1 Z\\<^sub>2.\n       \\<lbrakk>vwb_lens Z\\<^sub>1;\n        X = Z\\<^sub>1 ;\\<^sub>L Z\\<^sub>2 ;\\<^sub>L Z; vwb_lens Z\\<^sub>2;\n        Y = Z\\<^sub>2 ;\\<^sub>L Z\\<rbrakk>\n       \\<Longrightarrow> vwb_lens (Z\\<^sub>1 ;\\<^sub>L Z\\<^sub>2)", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Sublens has a least element -- @{text \"0\\<^sub>L\"} -- and a greatest element -- @{text \"1\\<^sub>L\"}. \n  Intuitively, this shows that sublens orders how large a portion of the source type a particular\n  lens views, with @{text \"0\\<^sub>L\"} observing the least, and @{text \"1\\<^sub>L\"} observing the most.\\<close>"], ["", "lemma sublens_least: \"wb_lens X \\<Longrightarrow> 0\\<^sub>L \\<subseteq>\\<^sub>L X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wb_lens X \\<Longrightarrow> 0\\<^sub>L \\<subseteq>\\<^sub>L X", "using sublens_def unit_vwb_lens"], ["proof (prove)\nusing this:\n  ?X \\<subseteq>\\<^sub>L ?Y =\n  (\\<exists>Z. vwb_lens Z \\<and> ?X = Z ;\\<^sub>L ?Y)\n  vwb_lens 0\\<^sub>L\n\ngoal (1 subgoal):\n 1. wb_lens X \\<Longrightarrow> 0\\<^sub>L \\<subseteq>\\<^sub>L X", "by fastforce"], ["", "lemma sublens_greatest: \"vwb_lens X \\<Longrightarrow> X \\<subseteq>\\<^sub>L 1\\<^sub>L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwb_lens X \\<Longrightarrow> X \\<subseteq>\\<^sub>L 1\\<^sub>L", "by (simp add: sublens_def)"], ["", "text \\<open>If $Y$ is a sublens of $X$ then any put using $X$ will necessarily erase any put using $Y$.\n  Similarly, any two source types are observationally equivalent by $Y$ when performed\n  following a put using $X$.\\<close>"], ["", "lemma sublens_put_put:\n  \"\\<lbrakk> mwb_lens X; Y \\<subseteq>\\<^sub>L X \\<rbrakk> \\<Longrightarrow> put\\<^bsub>X\\<^esub> (put\\<^bsub>Y\\<^esub> \\<sigma> v) u = put\\<^bsub>X\\<^esub> \\<sigma> u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mwb_lens X; Y \\<subseteq>\\<^sub>L X\\<rbrakk>\n    \\<Longrightarrow> put\\<^bsub>X\\<^esub> (put\\<^bsub>Y\\<^esub> \\<sigma> v)\n                       u =\n                      put\\<^bsub>X\\<^esub> \\<sigma> u", "by (auto simp add: sublens_def lens_comp_def)"], ["", "lemma sublens_obs_get:\n  \"\\<lbrakk> mwb_lens X; Y \\<subseteq>\\<^sub>L X \\<rbrakk> \\<Longrightarrow>  get\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> \\<sigma> v) = get\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> \\<rho> v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mwb_lens X; Y \\<subseteq>\\<^sub>L X\\<rbrakk>\n    \\<Longrightarrow> get\\<^bsub>Y\\<^esub>\n                       (put\\<^bsub>X\\<^esub> \\<sigma> v) =\n                      get\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> \\<rho> v)", "by (auto simp add: sublens_def lens_comp_def)"], ["", "text \\<open>Sublens preserves independence; in other words if $Y$ is independent of $Z$, then also\n  any $X$ smaller than $Y$ is independent of $Z$.\\<close>"], ["", "lemma sublens_pres_indep:\n  \"\\<lbrakk> X \\<subseteq>\\<^sub>L Y; Y \\<bowtie> Z \\<rbrakk> \\<Longrightarrow> X \\<bowtie> Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq>\\<^sub>L Y; Y \\<bowtie> Z\\<rbrakk>\n    \\<Longrightarrow> X \\<bowtie> Z", "apply (auto intro!:lens_indepI simp add: sublens_def lens_comp_def lens_indep_comm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Za u \\<sigma>.\n       \\<lbrakk>Y \\<bowtie> Z; vwb_lens Za;\n        X =\n        \\<lparr>lens_get =\n                  get\\<^bsub>Za\\<^esub> \\<circ> get\\<^bsub>Y\\<^esub>,\n           lens_put =\n             \\<lambda>\\<sigma> v.\n                put\\<^bsub>Y\\<^esub> \\<sigma>\n                 (put\\<^bsub>Za\\<^esub> (get\\<^bsub>Y\\<^esub> \\<sigma>)\n                   v)\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> get\\<^bsub>Z\\<^esub>\n                          (put\\<^bsub>Y\\<^esub> \\<sigma>\n                            (put\\<^bsub>Za\\<^esub>\n                              (get\\<^bsub>Y\\<^esub> \\<sigma>) u)) =\n                         get\\<^bsub>Z\\<^esub> \\<sigma>", "apply (simp add: lens_indep_sym)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma sublens_pres_indep':\n  \"\\<lbrakk> X \\<subseteq>\\<^sub>L Y; Z \\<bowtie> Y \\<rbrakk> \\<Longrightarrow> Z \\<bowtie> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq>\\<^sub>L Y; Z \\<bowtie> Y\\<rbrakk>\n    \\<Longrightarrow> Z \\<bowtie> X", "by (meson lens_indep_sym sublens_pres_indep)"], ["", "lemma sublens_compat: \"\\<lbrakk> vwb_lens X; vwb_lens Y; X \\<subseteq>\\<^sub>L Y \\<rbrakk> \\<Longrightarrow> X ##\\<^sub>L Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>vwb_lens X; vwb_lens Y; X \\<subseteq>\\<^sub>L Y\\<rbrakk>\n    \\<Longrightarrow> X ##\\<^sub>L Y", "unfolding lens_compat_def lens_override_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>vwb_lens X; vwb_lens Y; X \\<subseteq>\\<^sub>L Y\\<rbrakk>\n    \\<Longrightarrow> \\<forall>s\\<^sub>1 s\\<^sub>2.\n                         put\\<^bsub>Y\\<^esub>\n                          (put\\<^bsub>X\\<^esub> s\\<^sub>1\n                            (get\\<^bsub>X\\<^esub> s\\<^sub>2))\n                          (get\\<^bsub>Y\\<^esub> s\\<^sub>2) =\n                         put\\<^bsub>X\\<^esub>\n                          (put\\<^bsub>Y\\<^esub> s\\<^sub>1\n                            (get\\<^bsub>Y\\<^esub> s\\<^sub>2))\n                          (get\\<^bsub>X\\<^esub> s\\<^sub>2)", "by (metis (no_types, hide_lams) sublens_obs_get sublens_put_put vwb_lens_mwb vwb_lens_wb wb_lens.get_put)"], ["", "text \\<open>Well-behavedness of lens quotient has sublens as a proviso. This is because we can only\n  remove $X$ from $Y$ if $X$ is smaller than $Y$. \\<close>"], ["", "lemma lens_quotient_mwb:\n  \"\\<lbrakk> mwb_lens Y; X \\<subseteq>\\<^sub>L Y \\<rbrakk> \\<Longrightarrow> mwb_lens (X /\\<^sub>L Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mwb_lens Y; X \\<subseteq>\\<^sub>L Y\\<rbrakk>\n    \\<Longrightarrow> mwb_lens (X /\\<^sub>L Y)", "by (unfold_locales, auto simp add: lens_quotient_def lens_create_def sublens_def lens_comp_def comp_def)"], ["", "subsection \\<open>Lens Equivalence\\<close>"], ["", "text \\<open>Using our preorder, we can also derive an equivalence on lenses as follows. It should be\n  noted that this equality, like sublens, is heterogeneously typed -- it can compare lenses whose\n  view types are different, so long as the source types are the same. We show that it is reflexive, \n  symmetric, and transitive. \\<close>"], ["", "definition lens_equiv :: \"('a \\<Longrightarrow> 'c) \\<Rightarrow> ('b \\<Longrightarrow> 'c) \\<Rightarrow> bool\" (infix \"\\<approx>\\<^sub>L\" 51) where\n[lens_defs]: \"lens_equiv X Y = (X \\<subseteq>\\<^sub>L Y \\<and> Y \\<subseteq>\\<^sub>L X)\""], ["", "lemma lens_equivI [intro]:\n  \"\\<lbrakk> X \\<subseteq>\\<^sub>L Y; Y \\<subseteq>\\<^sub>L X \\<rbrakk> \\<Longrightarrow> X \\<approx>\\<^sub>L Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq>\\<^sub>L Y; Y \\<subseteq>\\<^sub>L X\\<rbrakk>\n    \\<Longrightarrow> X \\<approx>\\<^sub>L Y", "by (simp add: lens_equiv_def)"], ["", "lemma lens_equiv_refl:\n  \"X \\<approx>\\<^sub>L X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<approx>\\<^sub>L X", "by (simp add: lens_equiv_def)"], ["", "lemma lens_equiv_sym:\n  \"X \\<approx>\\<^sub>L Y \\<Longrightarrow> Y \\<approx>\\<^sub>L X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<approx>\\<^sub>L Y \\<Longrightarrow> Y \\<approx>\\<^sub>L X", "by (simp add: lens_equiv_def)"], ["", "lemma lens_equiv_trans [trans]:\n  \"\\<lbrakk> X \\<approx>\\<^sub>L Y; Y \\<approx>\\<^sub>L Z \\<rbrakk> \\<Longrightarrow> X \\<approx>\\<^sub>L Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<approx>\\<^sub>L Y; Y \\<approx>\\<^sub>L Z\\<rbrakk>\n    \\<Longrightarrow> X \\<approx>\\<^sub>L Z", "by (auto intro: sublens_trans simp add: lens_equiv_def)"], ["", "lemma lens_equiv_pres_indep:\n  \"\\<lbrakk> X \\<approx>\\<^sub>L Y; Y \\<bowtie> Z \\<rbrakk> \\<Longrightarrow> X \\<bowtie> Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<approx>\\<^sub>L Y; Y \\<bowtie> Z\\<rbrakk>\n    \\<Longrightarrow> X \\<bowtie> Z", "using lens_equiv_def sublens_pres_indep"], ["proof (prove)\nusing this:\n  ?X \\<approx>\\<^sub>L ?Y =\n  (?X \\<subseteq>\\<^sub>L ?Y \\<and> ?Y \\<subseteq>\\<^sub>L ?X)\n  \\<lbrakk>?X \\<subseteq>\\<^sub>L ?Y; ?Y \\<bowtie> ?Z\\<rbrakk>\n  \\<Longrightarrow> ?X \\<bowtie> ?Z\n\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<approx>\\<^sub>L Y; Y \\<bowtie> Z\\<rbrakk>\n    \\<Longrightarrow> X \\<bowtie> Z", "by blast"], ["", "lemma lens_equiv_pres_indep':\n  \"\\<lbrakk> X \\<approx>\\<^sub>L Y; Z \\<bowtie> Y \\<rbrakk> \\<Longrightarrow> Z \\<bowtie> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<approx>\\<^sub>L Y; Z \\<bowtie> Y\\<rbrakk>\n    \\<Longrightarrow> Z \\<bowtie> X", "using lens_equiv_def sublens_pres_indep'"], ["proof (prove)\nusing this:\n  ?X \\<approx>\\<^sub>L ?Y =\n  (?X \\<subseteq>\\<^sub>L ?Y \\<and> ?Y \\<subseteq>\\<^sub>L ?X)\n  \\<lbrakk>?X \\<subseteq>\\<^sub>L ?Y; ?Z \\<bowtie> ?Y\\<rbrakk>\n  \\<Longrightarrow> ?Z \\<bowtie> ?X\n\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<approx>\\<^sub>L Y; Z \\<bowtie> Y\\<rbrakk>\n    \\<Longrightarrow> Z \\<bowtie> X", "by blast"], ["", "lemma lens_comp_cong_1: \"X \\<approx>\\<^sub>L Y \\<Longrightarrow> X ;\\<^sub>L Z \\<approx>\\<^sub>L Y ;\\<^sub>L Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<approx>\\<^sub>L Y \\<Longrightarrow>\n    X ;\\<^sub>L Z \\<approx>\\<^sub>L Y ;\\<^sub>L Z", "unfolding lens_equiv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<subseteq>\\<^sub>L Y \\<and> Y \\<subseteq>\\<^sub>L X \\<Longrightarrow>\n    X ;\\<^sub>L Z \\<subseteq>\\<^sub>L Y ;\\<^sub>L Z \\<and>\n    Y ;\\<^sub>L Z \\<subseteq>\\<^sub>L X ;\\<^sub>L Z", "by (metis (no_types, lifting) lens_comp_assoc sublens_def)"], ["", "subsection \\<open>Further Algebraic Laws\\<close>"], ["", "text \\<open>This law explains the behaviour of lens quotient.\\<close>"], ["", "lemma lens_quotient_comp:\n  \"\\<lbrakk> weak_lens Y; X \\<subseteq>\\<^sub>L Y \\<rbrakk> \\<Longrightarrow> (X /\\<^sub>L Y) ;\\<^sub>L Y = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>weak_lens Y; X \\<subseteq>\\<^sub>L Y\\<rbrakk>\n    \\<Longrightarrow> X /\\<^sub>L Y ;\\<^sub>L Y = X", "by (auto simp add: lens_quotient_def lens_comp_def comp_def sublens_def)"], ["", "text \\<open>Plus distributes through quotient.\\<close>"], ["", "lemma lens_quotient_plus:\n  \"\\<lbrakk> mwb_lens Z; X \\<subseteq>\\<^sub>L Z; Y \\<subseteq>\\<^sub>L Z \\<rbrakk> \\<Longrightarrow> (X +\\<^sub>L Y) /\\<^sub>L Z = (X /\\<^sub>L Z) +\\<^sub>L (Y /\\<^sub>L Z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mwb_lens Z; X \\<subseteq>\\<^sub>L Z;\n     Y \\<subseteq>\\<^sub>L Z\\<rbrakk>\n    \\<Longrightarrow> (X +\\<^sub>L Y) /\\<^sub>L Z =\n                      X /\\<^sub>L Z +\\<^sub>L Y /\\<^sub>L Z", "apply (auto simp add: lens_quotient_def lens_plus_def sublens_def lens_comp_def comp_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Za Zaa.\n       \\<lbrakk>mwb_lens Z; vwb_lens Za;\n        X =\n        \\<lparr>lens_get =\n                  \\<lambda>x.\n                     get\\<^bsub>Za\\<^esub> (get\\<^bsub>Z\\<^esub> x),\n           lens_put =\n             \\<lambda>\\<sigma> v.\n                put\\<^bsub>Z\\<^esub> \\<sigma>\n                 (put\\<^bsub>Za\\<^esub> (get\\<^bsub>Z\\<^esub> \\<sigma>)\n                   v)\\<rparr>;\n        vwb_lens Zaa;\n        Y =\n        \\<lparr>lens_get =\n                  \\<lambda>x.\n                     get\\<^bsub>Zaa\\<^esub> (get\\<^bsub>Z\\<^esub> x),\n           lens_put =\n             \\<lambda>\\<sigma> v.\n                put\\<^bsub>Z\\<^esub> \\<sigma>\n                 (put\\<^bsub>Zaa\\<^esub> (get\\<^bsub>Z\\<^esub> \\<sigma>)\n                   v)\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma> v.\n                             get\\<^bsub>Z\\<^esub>\n                              (case v of\n                               (u, v) \\<Rightarrow>\n                                 put\\<^bsub>Z\\<^esub>\n                                  (create\\<^bsub>Z\\<^esub> \\<sigma>)\n                                  (put\\<^bsub>Za\\<^esub>\n                                    (put\\<^bsub>Zaa\\<^esub> \\<sigma> v)\n                                    u))) =\n                         (\\<lambda>\\<sigma> (u, v).\n                             put\\<^bsub>Za\\<^esub>\n                              (put\\<^bsub>Zaa\\<^esub> \\<sigma> v) u)", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Za Zaa \\<sigma>.\n       \\<lbrakk>mwb_lens Z; vwb_lens Za;\n        X =\n        \\<lparr>lens_get =\n                  \\<lambda>x.\n                     get\\<^bsub>Za\\<^esub> (get\\<^bsub>Z\\<^esub> x),\n           lens_put =\n             \\<lambda>\\<sigma> v.\n                put\\<^bsub>Z\\<^esub> \\<sigma>\n                 (put\\<^bsub>Za\\<^esub> (get\\<^bsub>Z\\<^esub> \\<sigma>)\n                   v)\\<rparr>;\n        vwb_lens Zaa;\n        Y =\n        \\<lparr>lens_get =\n                  \\<lambda>x.\n                     get\\<^bsub>Zaa\\<^esub> (get\\<^bsub>Z\\<^esub> x),\n           lens_put =\n             \\<lambda>\\<sigma> v.\n                put\\<^bsub>Z\\<^esub> \\<sigma>\n                 (put\\<^bsub>Zaa\\<^esub> (get\\<^bsub>Z\\<^esub> \\<sigma>)\n                   v)\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>v.\n                             get\\<^bsub>Z\\<^esub>\n                              (case v of\n                               (u, v) \\<Rightarrow>\n                                 put\\<^bsub>Z\\<^esub>\n                                  (create\\<^bsub>Z\\<^esub> \\<sigma>)\n                                  (put\\<^bsub>Za\\<^esub>\n                                    (put\\<^bsub>Zaa\\<^esub> \\<sigma> v)\n                                    u))) =\n                         (\\<lambda>(u, v).\n                             put\\<^bsub>Za\\<^esub>\n                              (put\\<^bsub>Zaa\\<^esub> \\<sigma> v) u)", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Za Zaa \\<sigma> v.\n       \\<lbrakk>mwb_lens Z; vwb_lens Za;\n        X =\n        \\<lparr>lens_get =\n                  \\<lambda>x.\n                     get\\<^bsub>Za\\<^esub> (get\\<^bsub>Z\\<^esub> x),\n           lens_put =\n             \\<lambda>\\<sigma> v.\n                put\\<^bsub>Z\\<^esub> \\<sigma>\n                 (put\\<^bsub>Za\\<^esub> (get\\<^bsub>Z\\<^esub> \\<sigma>)\n                   v)\\<rparr>;\n        vwb_lens Zaa;\n        Y =\n        \\<lparr>lens_get =\n                  \\<lambda>x.\n                     get\\<^bsub>Zaa\\<^esub> (get\\<^bsub>Z\\<^esub> x),\n           lens_put =\n             \\<lambda>\\<sigma> v.\n                put\\<^bsub>Z\\<^esub> \\<sigma>\n                 (put\\<^bsub>Zaa\\<^esub> (get\\<^bsub>Z\\<^esub> \\<sigma>)\n                   v)\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> get\\<^bsub>Z\\<^esub>\n                          (case v of\n                           (u, v) \\<Rightarrow>\n                             put\\<^bsub>Z\\<^esub>\n                              (create\\<^bsub>Z\\<^esub> \\<sigma>)\n                              (put\\<^bsub>Za\\<^esub>\n                                (put\\<^bsub>Zaa\\<^esub> \\<sigma> v) u)) =\n                         (case v of\n                          (u, v) \\<Rightarrow>\n                            put\\<^bsub>Za\\<^esub>\n                             (put\\<^bsub>Zaa\\<^esub> \\<sigma> v) u)", "apply (simp add: prod.case_eq_if)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Laws for for lens plus on the denominator. These laws allow us to extract compositions\n  of @{term \"fst\\<^sub>L\"} and @{term \"snd\\<^sub>L\"} terms. \\<close>"], ["", "lemma lens_quotient_plus_den1: \n  \"\\<lbrakk> weak_lens x; weak_lens y; x \\<bowtie> y \\<rbrakk> \\<Longrightarrow> x /\\<^sub>L (x +\\<^sub>L y) = fst\\<^sub>L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>weak_lens x; weak_lens y; x \\<bowtie> y\\<rbrakk>\n    \\<Longrightarrow> x /\\<^sub>L (x +\\<^sub>L y) = fst\\<^sub>L", "by (auto simp add: lens_defs prod.case_eq_if fun_eq_iff, metis (lifting) lens_indep_def weak_lens.put_get)"], ["", "lemma lens_quotient_plus_den2: \"\\<lbrakk> weak_lens x; weak_lens z; x \\<bowtie> z; y \\<subseteq>\\<^sub>L z \\<rbrakk> \\<Longrightarrow> y /\\<^sub>L (x +\\<^sub>L z) = (y /\\<^sub>L z) ;\\<^sub>L snd\\<^sub>L \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>weak_lens x; weak_lens z; x \\<bowtie> z;\n     y \\<subseteq>\\<^sub>L z\\<rbrakk>\n    \\<Longrightarrow> y /\\<^sub>L (x +\\<^sub>L z) =\n                      y /\\<^sub>L z ;\\<^sub>L snd\\<^sub>L", "by (auto simp add: lens_defs prod.case_eq_if fun_eq_iff lens_indep.lens_put_irr2)"], ["", "text \\<open>There follows a number of laws relating sublens and summation. Firstly, sublens is preserved\n  by summation. \\<close>"], ["", "lemma plus_pred_sublens: \"\\<lbrakk> mwb_lens Z; X \\<subseteq>\\<^sub>L Z; Y \\<subseteq>\\<^sub>L Z; X \\<bowtie> Y \\<rbrakk> \\<Longrightarrow> (X +\\<^sub>L Y) \\<subseteq>\\<^sub>L Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mwb_lens Z; X \\<subseteq>\\<^sub>L Z; Y \\<subseteq>\\<^sub>L Z;\n     X \\<bowtie> Y\\<rbrakk>\n    \\<Longrightarrow> X +\\<^sub>L Y \\<subseteq>\\<^sub>L Z", "apply (auto simp add: sublens_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Za Zaa.\n       \\<lbrakk>mwb_lens Z; Za ;\\<^sub>L Z \\<bowtie> Zaa ;\\<^sub>L Z;\n        vwb_lens Za; X = Za ;\\<^sub>L Z; vwb_lens Zaa;\n        Y = Zaa ;\\<^sub>L Z\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Zb.\n                            vwb_lens Zb \\<and>\n                            Za ;\\<^sub>L Z +\\<^sub>L Zaa ;\\<^sub>L Z =\n                            Zb ;\\<^sub>L Z", "apply (rename_tac Z\\<^sub>1 Z\\<^sub>2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Z\\<^sub>1 Z\\<^sub>2.\n       \\<lbrakk>mwb_lens Z;\n        Z\\<^sub>1 ;\\<^sub>L Z \\<bowtie> Z\\<^sub>2 ;\\<^sub>L Z;\n        vwb_lens Z\\<^sub>1; X = Z\\<^sub>1 ;\\<^sub>L Z; vwb_lens Z\\<^sub>2;\n        Y = Z\\<^sub>2 ;\\<^sub>L Z\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Za.\n                            vwb_lens Za \\<and>\n                            Z\\<^sub>1 ;\\<^sub>L Z +\\<^sub>L\n                            Z\\<^sub>2 ;\\<^sub>L Z =\n                            Za ;\\<^sub>L Z", "apply (rule_tac x=\"Z\\<^sub>1 +\\<^sub>L Z\\<^sub>2\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Z\\<^sub>1 Z\\<^sub>2.\n       \\<lbrakk>mwb_lens Z;\n        Z\\<^sub>1 ;\\<^sub>L Z \\<bowtie> Z\\<^sub>2 ;\\<^sub>L Z;\n        vwb_lens Z\\<^sub>1; X = Z\\<^sub>1 ;\\<^sub>L Z; vwb_lens Z\\<^sub>2;\n        Y = Z\\<^sub>2 ;\\<^sub>L Z\\<rbrakk>\n       \\<Longrightarrow> vwb_lens (Z\\<^sub>1 +\\<^sub>L Z\\<^sub>2) \\<and>\n                         Z\\<^sub>1 ;\\<^sub>L Z +\\<^sub>L\n                         Z\\<^sub>2 ;\\<^sub>L Z =\n                         (Z\\<^sub>1 +\\<^sub>L Z\\<^sub>2) ;\\<^sub>L Z", "apply (auto intro!: plus_wb_lens)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Z\\<^sub>1 Z\\<^sub>2.\n       \\<lbrakk>mwb_lens Z;\n        Z\\<^sub>1 ;\\<^sub>L Z \\<bowtie> Z\\<^sub>2 ;\\<^sub>L Z;\n        vwb_lens Z\\<^sub>1; X = Z\\<^sub>1 ;\\<^sub>L Z; vwb_lens Z\\<^sub>2;\n        Y = Z\\<^sub>2 ;\\<^sub>L Z\\<rbrakk>\n       \\<Longrightarrow> vwb_lens (Z\\<^sub>1 +\\<^sub>L Z\\<^sub>2)\n 2. \\<And>Z\\<^sub>1 Z\\<^sub>2.\n       \\<lbrakk>mwb_lens Z;\n        Z\\<^sub>1 ;\\<^sub>L Z \\<bowtie> Z\\<^sub>2 ;\\<^sub>L Z;\n        vwb_lens Z\\<^sub>1; X = Z\\<^sub>1 ;\\<^sub>L Z; vwb_lens Z\\<^sub>2;\n        Y = Z\\<^sub>2 ;\\<^sub>L Z\\<rbrakk>\n       \\<Longrightarrow> Z\\<^sub>1 ;\\<^sub>L Z +\\<^sub>L\n                         Z\\<^sub>2 ;\\<^sub>L Z =\n                         (Z\\<^sub>1 +\\<^sub>L Z\\<^sub>2) ;\\<^sub>L Z", "apply (simp add: lens_comp_indep_cong_left plus_vwb_lens)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Z\\<^sub>1 Z\\<^sub>2.\n       \\<lbrakk>mwb_lens Z;\n        Z\\<^sub>1 ;\\<^sub>L Z \\<bowtie> Z\\<^sub>2 ;\\<^sub>L Z;\n        vwb_lens Z\\<^sub>1; X = Z\\<^sub>1 ;\\<^sub>L Z; vwb_lens Z\\<^sub>2;\n        Y = Z\\<^sub>2 ;\\<^sub>L Z\\<rbrakk>\n       \\<Longrightarrow> Z\\<^sub>1 ;\\<^sub>L Z +\\<^sub>L\n                         Z\\<^sub>2 ;\\<^sub>L Z =\n                         (Z\\<^sub>1 +\\<^sub>L Z\\<^sub>2) ;\\<^sub>L Z", "apply (simp add: plus_lens_distr)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Intuitively, lens plus is associative. However we cannot prove this using HOL equality due\n  to monomorphic typing of this operator. But since sublens and lens equivalence are both heterogeneous\n  we can now prove this in the following three lemmas.\\<close>"], ["", "lemma lens_plus_sub_assoc_1:\n  \"X +\\<^sub>L Y +\\<^sub>L Z \\<subseteq>\\<^sub>L (X +\\<^sub>L Y) +\\<^sub>L Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X +\\<^sub>L Y +\\<^sub>L Z \\<subseteq>\\<^sub>L\n    (X +\\<^sub>L Y) +\\<^sub>L Z", "apply (simp add: sublens_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Za.\n       vwb_lens Za \\<and>\n       X +\\<^sub>L Y +\\<^sub>L Z =\n       Za ;\\<^sub>L ((X +\\<^sub>L Y) +\\<^sub>L Z)", "apply (rule_tac x=\"(fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L) +\\<^sub>L (snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L) +\\<^sub>L snd\\<^sub>L\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. vwb_lens\n     (fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n      snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L snd\\<^sub>L) \\<and>\n    X +\\<^sub>L Y +\\<^sub>L Z =\n    (fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    ((X +\\<^sub>L Y) +\\<^sub>L Z)", "apply (auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. vwb_lens\n     (fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n      snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L snd\\<^sub>L)\n 2. X +\\<^sub>L Y +\\<^sub>L Z =\n    (fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    ((X +\\<^sub>L Y) +\\<^sub>L Z)", "apply (rule plus_vwb_lens)"], ["proof (prove)\ngoal (4 subgoals):\n 1. vwb_lens (fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L)\n 2. vwb_lens (snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L snd\\<^sub>L)\n 3. fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L \\<bowtie>\n    snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L snd\\<^sub>L\n 4. X +\\<^sub>L Y +\\<^sub>L Z =\n    (fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    ((X +\\<^sub>L Y) +\\<^sub>L Z)", "apply (simp add: comp_vwb_lens fst_vwb_lens)"], ["proof (prove)\ngoal (3 subgoals):\n 1. vwb_lens (snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L snd\\<^sub>L)\n 2. fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L \\<bowtie>\n    snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L snd\\<^sub>L\n 3. X +\\<^sub>L Y +\\<^sub>L Z =\n    (fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    ((X +\\<^sub>L Y) +\\<^sub>L Z)", "apply (rule plus_vwb_lens)"], ["proof (prove)\ngoal (5 subgoals):\n 1. vwb_lens (snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L)\n 2. vwb_lens snd\\<^sub>L\n 3. snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L \\<bowtie> snd\\<^sub>L\n 4. fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L \\<bowtie>\n    snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L snd\\<^sub>L\n 5. X +\\<^sub>L Y +\\<^sub>L Z =\n    (fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    ((X +\\<^sub>L Y) +\\<^sub>L Z)", "apply (simp add: comp_vwb_lens fst_vwb_lens snd_vwb_lens)"], ["proof (prove)\ngoal (4 subgoals):\n 1. vwb_lens snd\\<^sub>L\n 2. snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L \\<bowtie> snd\\<^sub>L\n 3. fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L \\<bowtie>\n    snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L snd\\<^sub>L\n 4. X +\\<^sub>L Y +\\<^sub>L Z =\n    (fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    ((X +\\<^sub>L Y) +\\<^sub>L Z)", "apply (simp add: snd_vwb_lens)"], ["proof (prove)\ngoal (3 subgoals):\n 1. snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L \\<bowtie> snd\\<^sub>L\n 2. fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L \\<bowtie>\n    snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L snd\\<^sub>L\n 3. X +\\<^sub>L Y +\\<^sub>L Z =\n    (fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    ((X +\\<^sub>L Y) +\\<^sub>L Z)", "apply (simp add: lens_indep_left_ext)"], ["proof (prove)\ngoal (2 subgoals):\n 1. fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L \\<bowtie>\n    snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L snd\\<^sub>L\n 2. X +\\<^sub>L Y +\\<^sub>L Z =\n    (fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    ((X +\\<^sub>L Y) +\\<^sub>L Z)", "apply (rule lens_indep_sym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L snd\\<^sub>L \\<bowtie>\n    fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L\n 2. X +\\<^sub>L Y +\\<^sub>L Z =\n    (fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    ((X +\\<^sub>L Y) +\\<^sub>L Z)", "apply (rule plus_pres_lens_indep)"], ["proof (prove)\ngoal (3 subgoals):\n 1. snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L \\<bowtie>\n    fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L\n 2. snd\\<^sub>L \\<bowtie> fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L\n 3. X +\\<^sub>L Y +\\<^sub>L Z =\n    (fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    ((X +\\<^sub>L Y) +\\<^sub>L Z)", "using fst_snd_lens_indep fst_vwb_lens lens_indep_left_comp lens_indep_sym vwb_lens_mwb"], ["proof (prove)\nusing this:\n  fst\\<^sub>L \\<bowtie> snd\\<^sub>L\n  vwb_lens fst\\<^sub>L\n  \\<lbrakk>mwb_lens ?z; ?x \\<bowtie> ?y\\<rbrakk>\n  \\<Longrightarrow> ?x ;\\<^sub>L ?z \\<bowtie> ?y ;\\<^sub>L ?z\n  ?x \\<bowtie> ?y \\<Longrightarrow> ?y \\<bowtie> ?x\n  vwb_lens ?x \\<Longrightarrow> mwb_lens ?x\n\ngoal (3 subgoals):\n 1. snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L \\<bowtie>\n    fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L\n 2. snd\\<^sub>L \\<bowtie> fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L\n 3. X +\\<^sub>L Y +\\<^sub>L Z =\n    (fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    ((X +\\<^sub>L Y) +\\<^sub>L Z)", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. snd\\<^sub>L \\<bowtie> fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L\n 2. X +\\<^sub>L Y +\\<^sub>L Z =\n    (fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    ((X +\\<^sub>L Y) +\\<^sub>L Z)", "using fst_snd_lens_indep lens_indep_left_ext lens_indep_sym"], ["proof (prove)\nusing this:\n  fst\\<^sub>L \\<bowtie> snd\\<^sub>L\n  ?y \\<bowtie> ?z \\<Longrightarrow> ?x ;\\<^sub>L ?y \\<bowtie> ?z\n  ?x \\<bowtie> ?y \\<Longrightarrow> ?y \\<bowtie> ?x\n\ngoal (2 subgoals):\n 1. snd\\<^sub>L \\<bowtie> fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L\n 2. X +\\<^sub>L Y +\\<^sub>L Z =\n    (fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    ((X +\\<^sub>L Y) +\\<^sub>L Z)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. X +\\<^sub>L Y +\\<^sub>L Z =\n    (fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    ((X +\\<^sub>L Y) +\\<^sub>L Z)", "apply (auto simp add: lens_plus_def lens_comp_def fst_lens_def snd_lens_def prod.case_eq_if split_beta')[1]"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lens_plus_sub_assoc_2:\n  \"(X +\\<^sub>L Y) +\\<^sub>L Z \\<subseteq>\\<^sub>L X +\\<^sub>L Y +\\<^sub>L Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X +\\<^sub>L Y) +\\<^sub>L Z \\<subseteq>\\<^sub>L\n    X +\\<^sub>L Y +\\<^sub>L Z", "apply (simp add: sublens_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Za.\n       vwb_lens Za \\<and>\n       (X +\\<^sub>L Y) +\\<^sub>L Z =\n       Za ;\\<^sub>L (X +\\<^sub>L Y +\\<^sub>L Z)", "apply (rule_tac x=\"(fst\\<^sub>L +\\<^sub>L (fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L)) +\\<^sub>L (snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. vwb_lens\n     ((fst\\<^sub>L +\\<^sub>L fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L) +\\<^sub>L\n      snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L) \\<and>\n    (X +\\<^sub>L Y) +\\<^sub>L Z =\n    ((fst\\<^sub>L +\\<^sub>L fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L) +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    (X +\\<^sub>L Y +\\<^sub>L Z)", "apply (auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. vwb_lens\n     ((fst\\<^sub>L +\\<^sub>L fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L) +\\<^sub>L\n      snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L)\n 2. (X +\\<^sub>L Y) +\\<^sub>L Z =\n    ((fst\\<^sub>L +\\<^sub>L fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L) +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    (X +\\<^sub>L Y +\\<^sub>L Z)", "apply (rule plus_vwb_lens)"], ["proof (prove)\ngoal (4 subgoals):\n 1. vwb_lens (fst\\<^sub>L +\\<^sub>L fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L)\n 2. vwb_lens (snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L)\n 3. fst\\<^sub>L +\\<^sub>L fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L \\<bowtie>\n    snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L\n 4. (X +\\<^sub>L Y) +\\<^sub>L Z =\n    ((fst\\<^sub>L +\\<^sub>L fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L) +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    (X +\\<^sub>L Y +\\<^sub>L Z)", "apply (rule plus_vwb_lens)"], ["proof (prove)\ngoal (6 subgoals):\n 1. vwb_lens fst\\<^sub>L\n 2. vwb_lens (fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L)\n 3. fst\\<^sub>L \\<bowtie> fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L\n 4. vwb_lens (snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L)\n 5. fst\\<^sub>L +\\<^sub>L fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L \\<bowtie>\n    snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L\n 6. (X +\\<^sub>L Y) +\\<^sub>L Z =\n    ((fst\\<^sub>L +\\<^sub>L fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L) +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    (X +\\<^sub>L Y +\\<^sub>L Z)", "apply (simp add: fst_vwb_lens)"], ["proof (prove)\ngoal (5 subgoals):\n 1. vwb_lens (fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L)\n 2. fst\\<^sub>L \\<bowtie> fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L\n 3. vwb_lens (snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L)\n 4. fst\\<^sub>L +\\<^sub>L fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L \\<bowtie>\n    snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L\n 5. (X +\\<^sub>L Y) +\\<^sub>L Z =\n    ((fst\\<^sub>L +\\<^sub>L fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L) +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    (X +\\<^sub>L Y +\\<^sub>L Z)", "apply (simp add: comp_vwb_lens fst_vwb_lens snd_vwb_lens)"], ["proof (prove)\ngoal (4 subgoals):\n 1. fst\\<^sub>L \\<bowtie> fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L\n 2. vwb_lens (snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L)\n 3. fst\\<^sub>L +\\<^sub>L fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L \\<bowtie>\n    snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L\n 4. (X +\\<^sub>L Y) +\\<^sub>L Z =\n    ((fst\\<^sub>L +\\<^sub>L fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L) +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    (X +\\<^sub>L Y +\\<^sub>L Z)", "apply (rule lens_indep_sym)"], ["proof (prove)\ngoal (4 subgoals):\n 1. fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L \\<bowtie> fst\\<^sub>L\n 2. vwb_lens (snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L)\n 3. fst\\<^sub>L +\\<^sub>L fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L \\<bowtie>\n    snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L\n 4. (X +\\<^sub>L Y) +\\<^sub>L Z =\n    ((fst\\<^sub>L +\\<^sub>L fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L) +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    (X +\\<^sub>L Y +\\<^sub>L Z)", "apply (rule lens_indep_left_ext)"], ["proof (prove)\ngoal (4 subgoals):\n 1. snd\\<^sub>L \\<bowtie> fst\\<^sub>L\n 2. vwb_lens (snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L)\n 3. fst\\<^sub>L +\\<^sub>L fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L \\<bowtie>\n    snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L\n 4. (X +\\<^sub>L Y) +\\<^sub>L Z =\n    ((fst\\<^sub>L +\\<^sub>L fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L) +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    (X +\\<^sub>L Y +\\<^sub>L Z)", "using fst_snd_lens_indep lens_indep_sym"], ["proof (prove)\nusing this:\n  fst\\<^sub>L \\<bowtie> snd\\<^sub>L\n  ?x \\<bowtie> ?y \\<Longrightarrow> ?y \\<bowtie> ?x\n\ngoal (4 subgoals):\n 1. snd\\<^sub>L \\<bowtie> fst\\<^sub>L\n 2. vwb_lens (snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L)\n 3. fst\\<^sub>L +\\<^sub>L fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L \\<bowtie>\n    snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L\n 4. (X +\\<^sub>L Y) +\\<^sub>L Z =\n    ((fst\\<^sub>L +\\<^sub>L fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L) +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    (X +\\<^sub>L Y +\\<^sub>L Z)", "apply blast"], ["proof (prove)\ngoal (3 subgoals):\n 1. vwb_lens (snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L)\n 2. fst\\<^sub>L +\\<^sub>L fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L \\<bowtie>\n    snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L\n 3. (X +\\<^sub>L Y) +\\<^sub>L Z =\n    ((fst\\<^sub>L +\\<^sub>L fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L) +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    (X +\\<^sub>L Y +\\<^sub>L Z)", "apply (auto intro: comp_vwb_lens simp add: snd_vwb_lens)"], ["proof (prove)\ngoal (2 subgoals):\n 1. fst\\<^sub>L +\\<^sub>L fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L \\<bowtie>\n    snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L\n 2. (X +\\<^sub>L Y) +\\<^sub>L Z =\n    ((fst\\<^sub>L +\\<^sub>L fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L) +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    (X +\\<^sub>L Y +\\<^sub>L Z)", "apply (rule plus_pres_lens_indep)"], ["proof (prove)\ngoal (3 subgoals):\n 1. fst\\<^sub>L \\<bowtie> snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L\n 2. fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L \\<bowtie>\n    snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L\n 3. (X +\\<^sub>L Y) +\\<^sub>L Z =\n    ((fst\\<^sub>L +\\<^sub>L fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L) +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    (X +\\<^sub>L Y +\\<^sub>L Z)", "apply (simp add: lens_indep_left_ext lens_indep_sym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L \\<bowtie>\n    snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L\n 2. (X +\\<^sub>L Y) +\\<^sub>L Z =\n    ((fst\\<^sub>L +\\<^sub>L fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L) +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    (X +\\<^sub>L Y +\\<^sub>L Z)", "apply (simp add: snd_vwb_lens)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (X +\\<^sub>L Y) +\\<^sub>L Z =\n    ((fst\\<^sub>L +\\<^sub>L fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L) +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    (X +\\<^sub>L Y +\\<^sub>L Z)", "apply (auto simp add: lens_plus_def lens_comp_def fst_lens_def snd_lens_def prod.case_eq_if split_beta')[1]"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lens_plus_assoc:\n  \"(X +\\<^sub>L Y) +\\<^sub>L Z \\<approx>\\<^sub>L X +\\<^sub>L Y +\\<^sub>L Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X +\\<^sub>L Y) +\\<^sub>L Z \\<approx>\\<^sub>L X +\\<^sub>L Y +\\<^sub>L Z", "by (simp add: lens_equivI lens_plus_sub_assoc_1 lens_plus_sub_assoc_2)"], ["", "text \\<open>We can similarly show that it is commutative.\\<close>"], ["", "lemma lens_plus_sub_comm: \"X \\<bowtie> Y \\<Longrightarrow> X +\\<^sub>L Y \\<subseteq>\\<^sub>L Y +\\<^sub>L X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<bowtie> Y \\<Longrightarrow>\n    X +\\<^sub>L Y \\<subseteq>\\<^sub>L Y +\\<^sub>L X", "apply (simp add: sublens_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<bowtie> Y \\<Longrightarrow>\n    \\<exists>Z.\n       vwb_lens Z \\<and> X +\\<^sub>L Y = Z ;\\<^sub>L (Y +\\<^sub>L X)", "apply (rule_tac x=\"snd\\<^sub>L +\\<^sub>L fst\\<^sub>L\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<bowtie> Y \\<Longrightarrow>\n    vwb_lens swap\\<^sub>L \\<and>\n    X +\\<^sub>L Y = swap\\<^sub>L ;\\<^sub>L (Y +\\<^sub>L X)", "apply (auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. X \\<bowtie> Y \\<Longrightarrow> vwb_lens swap\\<^sub>L\n 2. X \\<bowtie> Y \\<Longrightarrow>\n    X +\\<^sub>L Y = swap\\<^sub>L ;\\<^sub>L (Y +\\<^sub>L X)", "apply (simp add: fst_vwb_lens lens_indep_sym snd_vwb_lens)"], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<bowtie> Y \\<Longrightarrow>\n    X +\\<^sub>L Y = swap\\<^sub>L ;\\<^sub>L (Y +\\<^sub>L X)", "apply (simp add: lens_indep_sym lens_plus_swap)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lens_plus_comm: \"X \\<bowtie> Y \\<Longrightarrow> X +\\<^sub>L Y \\<approx>\\<^sub>L Y +\\<^sub>L X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<bowtie> Y \\<Longrightarrow>\n    X +\\<^sub>L Y \\<approx>\\<^sub>L Y +\\<^sub>L X", "by (simp add: lens_equivI lens_indep_sym lens_plus_sub_comm)"], ["", "text \\<open>Any composite lens is larger than an element of the lens, as demonstrated by the following\n  four laws.\\<close>"], ["", "lemma lens_plus_ub [simp]: \"wb_lens Y \\<Longrightarrow> X \\<subseteq>\\<^sub>L X +\\<^sub>L Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wb_lens Y \\<Longrightarrow> X \\<subseteq>\\<^sub>L X +\\<^sub>L Y", "by (metis fst_lens_plus fst_vwb_lens sublens_def)"], ["", "lemma lens_plus_right_sublens:\n  \"\\<lbrakk> vwb_lens Y; Y \\<bowtie> Z; X \\<subseteq>\\<^sub>L Z \\<rbrakk> \\<Longrightarrow> X \\<subseteq>\\<^sub>L Y +\\<^sub>L Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>vwb_lens Y; Y \\<bowtie> Z; X \\<subseteq>\\<^sub>L Z\\<rbrakk>\n    \\<Longrightarrow> X \\<subseteq>\\<^sub>L Y +\\<^sub>L Z", "apply (auto simp add: sublens_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Za.\n       \\<lbrakk>vwb_lens Y; Y \\<bowtie> Z; vwb_lens Za;\n        X = Za ;\\<^sub>L Z\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Zb.\n                            vwb_lens Zb \\<and>\n                            Za ;\\<^sub>L Z = Zb ;\\<^sub>L (Y +\\<^sub>L Z)", "apply (rename_tac Z')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Z'.\n       \\<lbrakk>vwb_lens Y; Y \\<bowtie> Z; vwb_lens Z';\n        X = Z' ;\\<^sub>L Z\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Za.\n                            vwb_lens Za \\<and>\n                            Z' ;\\<^sub>L Z = Za ;\\<^sub>L (Y +\\<^sub>L Z)", "apply (rule_tac x=\"Z' ;\\<^sub>L snd\\<^sub>L\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Z'.\n       \\<lbrakk>vwb_lens Y; Y \\<bowtie> Z; vwb_lens Z';\n        X = Z' ;\\<^sub>L Z\\<rbrakk>\n       \\<Longrightarrow> vwb_lens (Z' ;\\<^sub>L snd\\<^sub>L) \\<and>\n                         Z' ;\\<^sub>L Z =\n                         Z' ;\\<^sub>L snd\\<^sub>L ;\\<^sub>L (Y +\\<^sub>L Z)", "apply (auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Z'.\n       \\<lbrakk>vwb_lens Y; Y \\<bowtie> Z; vwb_lens Z';\n        X = Z' ;\\<^sub>L Z\\<rbrakk>\n       \\<Longrightarrow> vwb_lens (Z' ;\\<^sub>L snd\\<^sub>L)\n 2. \\<And>Z'.\n       \\<lbrakk>vwb_lens Y; Y \\<bowtie> Z; vwb_lens Z';\n        X = Z' ;\\<^sub>L Z\\<rbrakk>\n       \\<Longrightarrow> Z' ;\\<^sub>L Z =\n                         Z' ;\\<^sub>L snd\\<^sub>L ;\\<^sub>L (Y +\\<^sub>L Z)", "using comp_vwb_lens snd_vwb_lens"], ["proof (prove)\nusing this:\n  \\<lbrakk>vwb_lens ?x; vwb_lens ?y\\<rbrakk>\n  \\<Longrightarrow> vwb_lens (?x ;\\<^sub>L ?y)\n  vwb_lens snd\\<^sub>L\n\ngoal (2 subgoals):\n 1. \\<And>Z'.\n       \\<lbrakk>vwb_lens Y; Y \\<bowtie> Z; vwb_lens Z';\n        X = Z' ;\\<^sub>L Z\\<rbrakk>\n       \\<Longrightarrow> vwb_lens (Z' ;\\<^sub>L snd\\<^sub>L)\n 2. \\<And>Z'.\n       \\<lbrakk>vwb_lens Y; Y \\<bowtie> Z; vwb_lens Z';\n        X = Z' ;\\<^sub>L Z\\<rbrakk>\n       \\<Longrightarrow> Z' ;\\<^sub>L Z =\n                         Z' ;\\<^sub>L snd\\<^sub>L ;\\<^sub>L (Y +\\<^sub>L Z)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Z'.\n       \\<lbrakk>vwb_lens Y; Y \\<bowtie> Z; vwb_lens Z';\n        X = Z' ;\\<^sub>L Z\\<rbrakk>\n       \\<Longrightarrow> Z' ;\\<^sub>L Z =\n                         Z' ;\\<^sub>L snd\\<^sub>L ;\\<^sub>L (Y +\\<^sub>L Z)", "apply (metis lens_comp_assoc snd_lens_plus vwb_lens_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lens_plus_mono_left:\n  \"\\<lbrakk> Y \\<bowtie> Z; X \\<subseteq>\\<^sub>L Y \\<rbrakk> \\<Longrightarrow> X +\\<^sub>L Z \\<subseteq>\\<^sub>L Y +\\<^sub>L Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Y \\<bowtie> Z; X \\<subseteq>\\<^sub>L Y\\<rbrakk>\n    \\<Longrightarrow> X +\\<^sub>L Z \\<subseteq>\\<^sub>L Y +\\<^sub>L Z", "apply (auto simp add: sublens_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Za.\n       \\<lbrakk>Y \\<bowtie> Z; vwb_lens Za; X = Za ;\\<^sub>L Y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Zb.\n                            vwb_lens Zb \\<and>\n                            Za ;\\<^sub>L Y +\\<^sub>L Z =\n                            Zb ;\\<^sub>L (Y +\\<^sub>L Z)", "apply (rename_tac Z')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Z'.\n       \\<lbrakk>Y \\<bowtie> Z; vwb_lens Z'; X = Z' ;\\<^sub>L Y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Za.\n                            vwb_lens Za \\<and>\n                            Z' ;\\<^sub>L Y +\\<^sub>L Z =\n                            Za ;\\<^sub>L (Y +\\<^sub>L Z)", "apply (rule_tac x=\"Z' \\<times>\\<^sub>L 1\\<^sub>L\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Z'.\n       \\<lbrakk>Y \\<bowtie> Z; vwb_lens Z'; X = Z' ;\\<^sub>L Y\\<rbrakk>\n       \\<Longrightarrow> vwb_lens (Z' \\<times>\\<^sub>L 1\\<^sub>L) \\<and>\n                         Z' ;\\<^sub>L Y +\\<^sub>L Z =\n                         Z' \\<times>\\<^sub>L 1\\<^sub>L ;\\<^sub>L\n                         (Y +\\<^sub>L Z)", "apply (subst prod_lens_comp_plus)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Z'.\n       \\<lbrakk>Y \\<bowtie> Z; vwb_lens Z'; X = Z' ;\\<^sub>L Y\\<rbrakk>\n       \\<Longrightarrow> Y \\<bowtie> Z\n 2. \\<And>Z'.\n       \\<lbrakk>Y \\<bowtie> Z; vwb_lens Z'; X = Z' ;\\<^sub>L Y\\<rbrakk>\n       \\<Longrightarrow> vwb_lens (Z' \\<times>\\<^sub>L 1\\<^sub>L) \\<and>\n                         Z' ;\\<^sub>L Y +\\<^sub>L Z =\n                         Z' ;\\<^sub>L Y +\\<^sub>L 1\\<^sub>L ;\\<^sub>L Z", "apply (simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Z'.\n       \\<lbrakk>Y \\<bowtie> Z; vwb_lens Z'; X = Z' ;\\<^sub>L Y\\<rbrakk>\n       \\<Longrightarrow> vwb_lens (Z' \\<times>\\<^sub>L 1\\<^sub>L)", "using id_vwb_lens prod_vwb_lens"], ["proof (prove)\nusing this:\n  vwb_lens 1\\<^sub>L\n  \\<lbrakk>vwb_lens ?X; vwb_lens ?Y\\<rbrakk>\n  \\<Longrightarrow> vwb_lens (?X \\<times>\\<^sub>L ?Y)\n\ngoal (1 subgoal):\n 1. \\<And>Z'.\n       \\<lbrakk>Y \\<bowtie> Z; vwb_lens Z'; X = Z' ;\\<^sub>L Y\\<rbrakk>\n       \\<Longrightarrow> vwb_lens (Z' \\<times>\\<^sub>L 1\\<^sub>L)", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lens_plus_mono_right:\n  \"\\<lbrakk> X \\<bowtie> Z; Y \\<subseteq>\\<^sub>L Z \\<rbrakk> \\<Longrightarrow> X +\\<^sub>L Y \\<subseteq>\\<^sub>L X +\\<^sub>L Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<bowtie> Z; Y \\<subseteq>\\<^sub>L Z\\<rbrakk>\n    \\<Longrightarrow> X +\\<^sub>L Y \\<subseteq>\\<^sub>L X +\\<^sub>L Z", "by (metis prod_lens_comp_plus prod_vwb_lens sublens_def sublens_refl)"], ["", "text \\<open>If we compose a lens $X$ with lens $Y$ then naturally the resulting lens must be smaller\n  than $Y$, as $X$ views a part of $Y$. \\<close>"], ["", "lemma lens_comp_lb [simp]: \"vwb_lens X \\<Longrightarrow> X ;\\<^sub>L Y \\<subseteq>\\<^sub>L Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwb_lens X \\<Longrightarrow> X ;\\<^sub>L Y \\<subseteq>\\<^sub>L Y", "by (auto simp add: sublens_def)"], ["", "lemma sublens_comp [simp]:\n  assumes \"vwb_lens b\" \"c \\<subseteq>\\<^sub>L a\"\n  shows \"(b ;\\<^sub>L c) \\<subseteq>\\<^sub>L a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b ;\\<^sub>L c \\<subseteq>\\<^sub>L a", "by (metis assms sublens_def sublens_trans)"], ["", "text \\<open>We can now also show that @{text \"0\\<^sub>L\"} is the unit of lens plus\\<close>"], ["", "lemma lens_unit_plus_sublens_1: \"X \\<subseteq>\\<^sub>L 0\\<^sub>L +\\<^sub>L X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<subseteq>\\<^sub>L 0\\<^sub>L +\\<^sub>L X", "by (metis lens_comp_lb snd_lens_plus snd_vwb_lens zero_lens_indep unit_wb_lens)"], ["", "lemma lens_unit_prod_sublens_2: \"0\\<^sub>L +\\<^sub>L X \\<subseteq>\\<^sub>L X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0\\<^sub>L +\\<^sub>L X \\<subseteq>\\<^sub>L X", "apply (auto simp add: sublens_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Z. vwb_lens Z \\<and> 0\\<^sub>L +\\<^sub>L X = Z ;\\<^sub>L X", "apply (rule_tac x=\"0\\<^sub>L +\\<^sub>L 1\\<^sub>L\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. vwb_lens (0\\<^sub>L +\\<^sub>L 1\\<^sub>L) \\<and>\n    0\\<^sub>L +\\<^sub>L X = (0\\<^sub>L +\\<^sub>L 1\\<^sub>L) ;\\<^sub>L X", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0\\<^sub>L +\\<^sub>L X = (0\\<^sub>L +\\<^sub>L 1\\<^sub>L) ;\\<^sub>L X", "apply (auto simp add: lens_plus_def zero_lens_def lens_comp_def id_lens_def prod.case_eq_if comp_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma> (u, y). put\\<^bsub>X\\<^esub> \\<sigma> y) =\n    (\\<lambda>\\<sigma> v. put\\<^bsub>X\\<^esub> \\<sigma> (snd v))", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       (\\<lambda>(u, y). put\\<^bsub>X\\<^esub> \\<sigma> y) =\n       (\\<lambda>v. put\\<^bsub>X\\<^esub> \\<sigma> (snd v))", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> v.\n       (case v of (u, x) \\<Rightarrow> put\\<^bsub>X\\<^esub> \\<sigma> x) =\n       put\\<^bsub>X\\<^esub> \\<sigma> (snd v)", "apply (auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lens_plus_left_unit: \"0\\<^sub>L +\\<^sub>L X \\<approx>\\<^sub>L X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0\\<^sub>L +\\<^sub>L X \\<approx>\\<^sub>L X", "by (simp add: lens_equivI lens_unit_plus_sublens_1 lens_unit_prod_sublens_2)"], ["", "lemma lens_plus_right_unit: \"X +\\<^sub>L 0\\<^sub>L \\<approx>\\<^sub>L X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X +\\<^sub>L 0\\<^sub>L \\<approx>\\<^sub>L X", "using lens_equiv_trans lens_indep_sym lens_plus_comm lens_plus_left_unit zero_lens_indep"], ["proof (prove)\nusing this:\n  \\<lbrakk>?X \\<approx>\\<^sub>L ?Y; ?Y \\<approx>\\<^sub>L ?Z\\<rbrakk>\n  \\<Longrightarrow> ?X \\<approx>\\<^sub>L ?Z\n  ?x \\<bowtie> ?y \\<Longrightarrow> ?y \\<bowtie> ?x\n  ?X \\<bowtie> ?Y \\<Longrightarrow>\n  ?X +\\<^sub>L ?Y \\<approx>\\<^sub>L ?Y +\\<^sub>L ?X\n  0\\<^sub>L +\\<^sub>L ?X \\<approx>\\<^sub>L ?X\n  0\\<^sub>L \\<bowtie> ?X\n\ngoal (1 subgoal):\n 1. X +\\<^sub>L 0\\<^sub>L \\<approx>\\<^sub>L X", "by blast"], ["", "text \\<open>We can also show that both sublens and equivalence are congruences with respect to lens plus\n  and lens product.\\<close>"], ["", "lemma lens_plus_subcong: \"\\<lbrakk> Y\\<^sub>1 \\<bowtie> Y\\<^sub>2; X\\<^sub>1 \\<subseteq>\\<^sub>L Y\\<^sub>1; X\\<^sub>2 \\<subseteq>\\<^sub>L Y\\<^sub>2 \\<rbrakk> \\<Longrightarrow> X\\<^sub>1 +\\<^sub>L X\\<^sub>2 \\<subseteq>\\<^sub>L Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Y\\<^sub>1 \\<bowtie> Y\\<^sub>2;\n     X\\<^sub>1 \\<subseteq>\\<^sub>L Y\\<^sub>1;\n     X\\<^sub>2 \\<subseteq>\\<^sub>L Y\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> X\\<^sub>1 +\\<^sub>L X\\<^sub>2 \\<subseteq>\\<^sub>L\n                      Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2", "by (metis prod_lens_comp_plus prod_vwb_lens sublens_def)"], ["", "lemma lens_plus_eq_left: \"\\<lbrakk> X \\<bowtie> Z; X \\<approx>\\<^sub>L Y \\<rbrakk> \\<Longrightarrow> X +\\<^sub>L Z \\<approx>\\<^sub>L Y +\\<^sub>L Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<bowtie> Z; X \\<approx>\\<^sub>L Y\\<rbrakk>\n    \\<Longrightarrow> X +\\<^sub>L Z \\<approx>\\<^sub>L Y +\\<^sub>L Z", "by (meson lens_equiv_def lens_plus_mono_left sublens_pres_indep)"], ["", "lemma lens_plus_eq_right: \"\\<lbrakk> X \\<bowtie> Y; Y \\<approx>\\<^sub>L Z \\<rbrakk> \\<Longrightarrow> X +\\<^sub>L Y \\<approx>\\<^sub>L X +\\<^sub>L Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<bowtie> Y; Y \\<approx>\\<^sub>L Z\\<rbrakk>\n    \\<Longrightarrow> X +\\<^sub>L Y \\<approx>\\<^sub>L X +\\<^sub>L Z", "by (meson lens_equiv_def lens_indep_sym lens_plus_mono_right sublens_pres_indep)"], ["", "lemma lens_plus_cong:\n  assumes \"X\\<^sub>1 \\<bowtie> X\\<^sub>2\" \"X\\<^sub>1 \\<approx>\\<^sub>L Y\\<^sub>1\" \"X\\<^sub>2 \\<approx>\\<^sub>L Y\\<^sub>2\"\n  shows \"X\\<^sub>1 +\\<^sub>L X\\<^sub>2 \\<approx>\\<^sub>L Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X\\<^sub>1 +\\<^sub>L X\\<^sub>2 \\<approx>\\<^sub>L\n    Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. X\\<^sub>1 +\\<^sub>L X\\<^sub>2 \\<approx>\\<^sub>L\n    Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2", "have \"X\\<^sub>1 +\\<^sub>L X\\<^sub>2 \\<approx>\\<^sub>L Y\\<^sub>1 +\\<^sub>L X\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X\\<^sub>1 +\\<^sub>L X\\<^sub>2 \\<approx>\\<^sub>L\n    Y\\<^sub>1 +\\<^sub>L X\\<^sub>2", "by (simp add: assms(1) assms(2) lens_plus_eq_left)"], ["proof (state)\nthis:\n  X\\<^sub>1 +\\<^sub>L X\\<^sub>2 \\<approx>\\<^sub>L\n  Y\\<^sub>1 +\\<^sub>L X\\<^sub>2\n\ngoal (1 subgoal):\n 1. X\\<^sub>1 +\\<^sub>L X\\<^sub>2 \\<approx>\\<^sub>L\n    Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2", "moreover"], ["proof (state)\nthis:\n  X\\<^sub>1 +\\<^sub>L X\\<^sub>2 \\<approx>\\<^sub>L\n  Y\\<^sub>1 +\\<^sub>L X\\<^sub>2\n\ngoal (1 subgoal):\n 1. X\\<^sub>1 +\\<^sub>L X\\<^sub>2 \\<approx>\\<^sub>L\n    Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2", "have \"... \\<approx>\\<^sub>L Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Y\\<^sub>1 +\\<^sub>L X\\<^sub>2 \\<approx>\\<^sub>L\n    Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2", "using assms(1) assms(2) assms(3) lens_equiv_def lens_plus_eq_right sublens_pres_indep"], ["proof (prove)\nusing this:\n  X\\<^sub>1 \\<bowtie> X\\<^sub>2\n  X\\<^sub>1 \\<approx>\\<^sub>L Y\\<^sub>1\n  X\\<^sub>2 \\<approx>\\<^sub>L Y\\<^sub>2\n  ?X \\<approx>\\<^sub>L ?Y =\n  (?X \\<subseteq>\\<^sub>L ?Y \\<and> ?Y \\<subseteq>\\<^sub>L ?X)\n  \\<lbrakk>?X \\<bowtie> ?Y; ?Y \\<approx>\\<^sub>L ?Z\\<rbrakk>\n  \\<Longrightarrow> ?X +\\<^sub>L ?Y \\<approx>\\<^sub>L ?X +\\<^sub>L ?Z\n  \\<lbrakk>?X \\<subseteq>\\<^sub>L ?Y; ?Y \\<bowtie> ?Z\\<rbrakk>\n  \\<Longrightarrow> ?X \\<bowtie> ?Z\n\ngoal (1 subgoal):\n 1. Y\\<^sub>1 +\\<^sub>L X\\<^sub>2 \\<approx>\\<^sub>L\n    Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2", "by blast"], ["proof (state)\nthis:\n  Y\\<^sub>1 +\\<^sub>L X\\<^sub>2 \\<approx>\\<^sub>L\n  Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2\n\ngoal (1 subgoal):\n 1. X\\<^sub>1 +\\<^sub>L X\\<^sub>2 \\<approx>\\<^sub>L\n    Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2", "ultimately"], ["proof (chain)\npicking this:\n  X\\<^sub>1 +\\<^sub>L X\\<^sub>2 \\<approx>\\<^sub>L\n  Y\\<^sub>1 +\\<^sub>L X\\<^sub>2\n  Y\\<^sub>1 +\\<^sub>L X\\<^sub>2 \\<approx>\\<^sub>L\n  Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2", "show ?thesis"], ["proof (prove)\nusing this:\n  X\\<^sub>1 +\\<^sub>L X\\<^sub>2 \\<approx>\\<^sub>L\n  Y\\<^sub>1 +\\<^sub>L X\\<^sub>2\n  Y\\<^sub>1 +\\<^sub>L X\\<^sub>2 \\<approx>\\<^sub>L\n  Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2\n\ngoal (1 subgoal):\n 1. X\\<^sub>1 +\\<^sub>L X\\<^sub>2 \\<approx>\\<^sub>L\n    Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2", "using lens_equiv_trans"], ["proof (prove)\nusing this:\n  X\\<^sub>1 +\\<^sub>L X\\<^sub>2 \\<approx>\\<^sub>L\n  Y\\<^sub>1 +\\<^sub>L X\\<^sub>2\n  Y\\<^sub>1 +\\<^sub>L X\\<^sub>2 \\<approx>\\<^sub>L\n  Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2\n  \\<lbrakk>?X \\<approx>\\<^sub>L ?Y; ?Y \\<approx>\\<^sub>L ?Z\\<rbrakk>\n  \\<Longrightarrow> ?X \\<approx>\\<^sub>L ?Z\n\ngoal (1 subgoal):\n 1. X\\<^sub>1 +\\<^sub>L X\\<^sub>2 \\<approx>\\<^sub>L\n    Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2", "by blast"], ["proof (state)\nthis:\n  X\\<^sub>1 +\\<^sub>L X\\<^sub>2 \\<approx>\\<^sub>L\n  Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prod_lens_sublens_cong:\n  \"\\<lbrakk> X\\<^sub>1 \\<subseteq>\\<^sub>L X\\<^sub>2; Y\\<^sub>1 \\<subseteq>\\<^sub>L Y\\<^sub>2 \\<rbrakk> \\<Longrightarrow> (X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1) \\<subseteq>\\<^sub>L (X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X\\<^sub>1 \\<subseteq>\\<^sub>L X\\<^sub>2;\n     Y\\<^sub>1 \\<subseteq>\\<^sub>L Y\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> X\\<^sub>1 \\<times>\\<^sub>L\n                      Y\\<^sub>1 \\<subseteq>\\<^sub>L\n                      X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2", "apply (auto simp add: sublens_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Z Za.\n       \\<lbrakk>vwb_lens Z; X\\<^sub>1 = Z ;\\<^sub>L X\\<^sub>2; vwb_lens Za;\n        Y\\<^sub>1 = Za ;\\<^sub>L Y\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Zb.\n                            vwb_lens Zb \\<and>\n                            (Z ;\\<^sub>L X\\<^sub>2) \\<times>\\<^sub>L\n                            (Za ;\\<^sub>L Y\\<^sub>2) =\n                            Zb ;\\<^sub>L\n                            X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2", "apply (rename_tac Z\\<^sub>1 Z\\<^sub>2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Z\\<^sub>1 Z\\<^sub>2.\n       \\<lbrakk>vwb_lens Z\\<^sub>1;\n        X\\<^sub>1 = Z\\<^sub>1 ;\\<^sub>L X\\<^sub>2; vwb_lens Z\\<^sub>2;\n        Y\\<^sub>1 = Z\\<^sub>2 ;\\<^sub>L Y\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Z.\n                            vwb_lens Z \\<and>\n                            (Z\\<^sub>1 ;\\<^sub>L X\\<^sub>2) \\<times>\\<^sub>L\n                            (Z\\<^sub>2 ;\\<^sub>L Y\\<^sub>2) =\n                            Z ;\\<^sub>L X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2", "apply (rule_tac x=\"Z\\<^sub>1 \\<times>\\<^sub>L Z\\<^sub>2\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Z\\<^sub>1 Z\\<^sub>2.\n       \\<lbrakk>vwb_lens Z\\<^sub>1;\n        X\\<^sub>1 = Z\\<^sub>1 ;\\<^sub>L X\\<^sub>2; vwb_lens Z\\<^sub>2;\n        Y\\<^sub>1 = Z\\<^sub>2 ;\\<^sub>L Y\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> vwb_lens\n                          (Z\\<^sub>1 \\<times>\\<^sub>L Z\\<^sub>2) \\<and>\n                         (Z\\<^sub>1 ;\\<^sub>L X\\<^sub>2) \\<times>\\<^sub>L\n                         (Z\\<^sub>2 ;\\<^sub>L Y\\<^sub>2) =\n                         Z\\<^sub>1 \\<times>\\<^sub>L Z\\<^sub>2 ;\\<^sub>L\n                         X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2", "apply (auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Z\\<^sub>1 Z\\<^sub>2.\n       \\<lbrakk>vwb_lens Z\\<^sub>1;\n        X\\<^sub>1 = Z\\<^sub>1 ;\\<^sub>L X\\<^sub>2; vwb_lens Z\\<^sub>2;\n        Y\\<^sub>1 = Z\\<^sub>2 ;\\<^sub>L Y\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> vwb_lens (Z\\<^sub>1 \\<times>\\<^sub>L Z\\<^sub>2)\n 2. \\<And>Z\\<^sub>1 Z\\<^sub>2.\n       \\<lbrakk>vwb_lens Z\\<^sub>1;\n        X\\<^sub>1 = Z\\<^sub>1 ;\\<^sub>L X\\<^sub>2; vwb_lens Z\\<^sub>2;\n        Y\\<^sub>1 = Z\\<^sub>2 ;\\<^sub>L Y\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> (Z\\<^sub>1 ;\\<^sub>L X\\<^sub>2) \\<times>\\<^sub>L\n                         (Z\\<^sub>2 ;\\<^sub>L Y\\<^sub>2) =\n                         Z\\<^sub>1 \\<times>\\<^sub>L Z\\<^sub>2 ;\\<^sub>L\n                         X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2", "using prod_vwb_lens"], ["proof (prove)\nusing this:\n  \\<lbrakk>vwb_lens ?X; vwb_lens ?Y\\<rbrakk>\n  \\<Longrightarrow> vwb_lens (?X \\<times>\\<^sub>L ?Y)\n\ngoal (2 subgoals):\n 1. \\<And>Z\\<^sub>1 Z\\<^sub>2.\n       \\<lbrakk>vwb_lens Z\\<^sub>1;\n        X\\<^sub>1 = Z\\<^sub>1 ;\\<^sub>L X\\<^sub>2; vwb_lens Z\\<^sub>2;\n        Y\\<^sub>1 = Z\\<^sub>2 ;\\<^sub>L Y\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> vwb_lens (Z\\<^sub>1 \\<times>\\<^sub>L Z\\<^sub>2)\n 2. \\<And>Z\\<^sub>1 Z\\<^sub>2.\n       \\<lbrakk>vwb_lens Z\\<^sub>1;\n        X\\<^sub>1 = Z\\<^sub>1 ;\\<^sub>L X\\<^sub>2; vwb_lens Z\\<^sub>2;\n        Y\\<^sub>1 = Z\\<^sub>2 ;\\<^sub>L Y\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> (Z\\<^sub>1 ;\\<^sub>L X\\<^sub>2) \\<times>\\<^sub>L\n                         (Z\\<^sub>2 ;\\<^sub>L Y\\<^sub>2) =\n                         Z\\<^sub>1 \\<times>\\<^sub>L Z\\<^sub>2 ;\\<^sub>L\n                         X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Z\\<^sub>1 Z\\<^sub>2.\n       \\<lbrakk>vwb_lens Z\\<^sub>1;\n        X\\<^sub>1 = Z\\<^sub>1 ;\\<^sub>L X\\<^sub>2; vwb_lens Z\\<^sub>2;\n        Y\\<^sub>1 = Z\\<^sub>2 ;\\<^sub>L Y\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> (Z\\<^sub>1 ;\\<^sub>L X\\<^sub>2) \\<times>\\<^sub>L\n                         (Z\\<^sub>2 ;\\<^sub>L Y\\<^sub>2) =\n                         Z\\<^sub>1 \\<times>\\<^sub>L Z\\<^sub>2 ;\\<^sub>L\n                         X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2", "apply (auto simp add: lens_prod_def lens_comp_def prod.case_eq_if)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Z\\<^sub>1 Z\\<^sub>2.\n       \\<lbrakk>vwb_lens Z\\<^sub>1;\n        X\\<^sub>1 =\n        \\<lparr>lens_get =\n                  get\\<^bsub>Z\\<^sub>1\\<^esub> \\<circ>\n                  get\\<^bsub>X\\<^sub>2\\<^esub>,\n           lens_put =\n             \\<lambda>\\<sigma> v.\n                put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>\n                 (put\\<^bsub>Z\\<^sub>1\\<^esub>\n                   (get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>) v)\\<rparr>;\n        vwb_lens Z\\<^sub>2;\n        Y\\<^sub>1 =\n        \\<lparr>lens_get =\n                  get\\<^bsub>Z\\<^sub>2\\<^esub> \\<circ>\n                  get\\<^bsub>Y\\<^sub>2\\<^esub>,\n           lens_put =\n             \\<lambda>\\<sigma> v.\n                put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>\n                 (put\\<^bsub>Z\\<^sub>2\\<^esub>\n                   (get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>)\n                   v)\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>(u, v) (x, y).\n                             (put\\<^bsub>X\\<^sub>2\\<^esub> u\n                               (put\\<^bsub>Z\\<^sub>1\\<^esub>\n                                 (get\\<^bsub>X\\<^sub>2\\<^esub> u) x),\n                              put\\<^bsub>Y\\<^sub>2\\<^esub> v\n                               (put\\<^bsub>Z\\<^sub>2\\<^esub>\n                                 (get\\<^bsub>Y\\<^sub>2\\<^esub> v) y))) =\n                         (\\<lambda>\\<sigma> v.\n                             (put\\<^bsub>X\\<^sub>2\\<^esub> (fst \\<sigma>)\n                               (put\\<^bsub>Z\\<^sub>1\\<^esub>\n                                 (get\\<^bsub>X\\<^sub>2\\<^esub>\n                                   (fst \\<sigma>))\n                                 (fst v)),\n                              put\\<^bsub>Y\\<^sub>2\\<^esub> (snd \\<sigma>)\n                               (put\\<^bsub>Z\\<^sub>2\\<^esub>\n                                 (get\\<^bsub>Y\\<^sub>2\\<^esub>\n                                   (snd \\<sigma>))\n                                 (snd v))))", "apply (rule ext, rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Z\\<^sub>1 Z\\<^sub>2 \\<sigma> v.\n       \\<lbrakk>vwb_lens Z\\<^sub>1;\n        X\\<^sub>1 =\n        \\<lparr>lens_get =\n                  get\\<^bsub>Z\\<^sub>1\\<^esub> \\<circ>\n                  get\\<^bsub>X\\<^sub>2\\<^esub>,\n           lens_put =\n             \\<lambda>\\<sigma> v.\n                put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>\n                 (put\\<^bsub>Z\\<^sub>1\\<^esub>\n                   (get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>) v)\\<rparr>;\n        vwb_lens Z\\<^sub>2;\n        Y\\<^sub>1 =\n        \\<lparr>lens_get =\n                  get\\<^bsub>Z\\<^sub>2\\<^esub> \\<circ>\n                  get\\<^bsub>Y\\<^sub>2\\<^esub>,\n           lens_put =\n             \\<lambda>\\<sigma> v.\n                put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>\n                 (put\\<^bsub>Z\\<^sub>2\\<^esub>\n                   (get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>)\n                   v)\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> (case \\<sigma> of\n                          (u, v) \\<Rightarrow>\n                            \\<lambda>(x, y).\n                               (put\\<^bsub>X\\<^sub>2\\<^esub> u\n                                 (put\\<^bsub>Z\\<^sub>1\\<^esub>\n                                   (get\\<^bsub>X\\<^sub>2\\<^esub> u) x),\n                                put\\<^bsub>Y\\<^sub>2\\<^esub> v\n                                 (put\\<^bsub>Z\\<^sub>2\\<^esub>\n                                   (get\\<^bsub>Y\\<^sub>2\\<^esub> v) y)))\n                          v =\n                         (put\\<^bsub>X\\<^sub>2\\<^esub> (fst \\<sigma>)\n                           (put\\<^bsub>Z\\<^sub>1\\<^esub>\n                             (get\\<^bsub>X\\<^sub>2\\<^esub> (fst \\<sigma>))\n                             (fst v)),\n                          put\\<^bsub>Y\\<^sub>2\\<^esub> (snd \\<sigma>)\n                           (put\\<^bsub>Z\\<^sub>2\\<^esub>\n                             (get\\<^bsub>Y\\<^sub>2\\<^esub> (snd \\<sigma>))\n                             (snd v)))", "apply (auto simp add: lens_prod_def lens_comp_def prod.case_eq_if)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma prod_lens_equiv_cong:\n  \"\\<lbrakk> X\\<^sub>1 \\<approx>\\<^sub>L X\\<^sub>2; Y\\<^sub>1 \\<approx>\\<^sub>L Y\\<^sub>2 \\<rbrakk> \\<Longrightarrow> (X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1) \\<approx>\\<^sub>L (X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X\\<^sub>1 \\<approx>\\<^sub>L X\\<^sub>2;\n     Y\\<^sub>1 \\<approx>\\<^sub>L Y\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1 \\<approx>\\<^sub>L\n                      X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2", "by (simp add: lens_equiv_def prod_lens_sublens_cong)"], ["", "text \\<open>We also have the following \"exchange\" law that allows us to switch over a lens product and plus.\\<close>"], ["", "lemma lens_plus_prod_exchange:\n  \"(X\\<^sub>1 +\\<^sub>L X\\<^sub>2) \\<times>\\<^sub>L (Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2) \\<approx>\\<^sub>L (X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1) +\\<^sub>L (X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X\\<^sub>1 +\\<^sub>L X\\<^sub>2) \\<times>\\<^sub>L\n    (Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2) \\<approx>\\<^sub>L\n    X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1 +\\<^sub>L\n    X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2", "proof (rule lens_equivI)"], ["proof (state)\ngoal (2 subgoals):\n 1. (X\\<^sub>1 +\\<^sub>L X\\<^sub>2) \\<times>\\<^sub>L\n    (Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2) \\<subseteq>\\<^sub>L\n    X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1 +\\<^sub>L\n    X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2\n 2. X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1 +\\<^sub>L\n    X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2 \\<subseteq>\\<^sub>L\n    (X\\<^sub>1 +\\<^sub>L X\\<^sub>2) \\<times>\\<^sub>L\n    (Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2)", "show \"(X\\<^sub>1 +\\<^sub>L X\\<^sub>2) \\<times>\\<^sub>L (Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2) \\<subseteq>\\<^sub>L (X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1) +\\<^sub>L (X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X\\<^sub>1 +\\<^sub>L X\\<^sub>2) \\<times>\\<^sub>L\n    (Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2) \\<subseteq>\\<^sub>L\n    X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1 +\\<^sub>L\n    X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2", "apply (simp add: sublens_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Z.\n       vwb_lens Z \\<and>\n       (X\\<^sub>1 +\\<^sub>L X\\<^sub>2) \\<times>\\<^sub>L\n       (Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2) =\n       Z ;\\<^sub>L\n       (X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1 +\\<^sub>L\n        X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2)", "apply (rule_tac x=\"((fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L) +\\<^sub>L (fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L)) +\\<^sub>L ((snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L) +\\<^sub>L (snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L))\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. vwb_lens\n     ((fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n       fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L) +\\<^sub>L\n      snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n      snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L) \\<and>\n    (X\\<^sub>1 +\\<^sub>L X\\<^sub>2) \\<times>\\<^sub>L\n    (Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2) =\n    ((fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n      fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L) +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    (X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1 +\\<^sub>L\n     X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2)", "apply (auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. vwb_lens\n     ((fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n       fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L) +\\<^sub>L\n      snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n      snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L)\n 2. (X\\<^sub>1 +\\<^sub>L X\\<^sub>2) \\<times>\\<^sub>L\n    (Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2) =\n    ((fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n      fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L) +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    (X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1 +\\<^sub>L\n     X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2)", "apply (auto intro!: plus_vwb_lens comp_vwb_lens fst_vwb_lens snd_vwb_lens lens_indep_right_comp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L \\<bowtie>\n    fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L\n 2. snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L \\<bowtie>\n    snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L\n 3. fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n    fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L \\<bowtie>\n    snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n    snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L\n 4. (X\\<^sub>1 +\\<^sub>L X\\<^sub>2) \\<times>\\<^sub>L\n    (Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2) =\n    ((fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n      fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L) +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    (X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1 +\\<^sub>L\n     X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2)", "apply (auto intro!: lens_indepI simp add: lens_comp_def lens_plus_def fst_lens_def snd_lens_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>lens_get =\n              \\<lambda>\\<sigma>.\n                 (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>,\n                  get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>),\n       lens_put =\n         \\<lambda>\\<sigma> (u, v).\n            put\\<^bsub>X\\<^sub>1\\<^esub>\n             (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v)\n             u\\<rparr> \\<times>\\<^sub>L\n    \\<lparr>lens_get =\n              \\<lambda>\\<sigma>.\n                 (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>,\n                  get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>),\n       lens_put =\n         \\<lambda>\\<sigma> (u, v).\n            put\\<^bsub>Y\\<^sub>1\\<^esub>\n             (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> =\n    \\<lparr>lens_get =\n              (\\<lambda>\\<sigma>.\n                  ((fst (fst \\<sigma>), fst (snd \\<sigma>)),\n                   snd (fst \\<sigma>), snd (snd \\<sigma>))) \\<circ>\n              (\\<lambda>\\<sigma>.\n                  (get\\<^bsub>X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1\\<^esub>\n                    \\<sigma>,\n                   get\\<^bsub>X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2\\<^esub>\n                    \\<sigma>)),\n       lens_put =\n         \\<lambda>\\<sigma> v.\n            case case v of\n                 ((ua, va), v) \\<Rightarrow>\n                   (case (case case v of\n                               (u, v) \\<Rightarrow>\n                                 ((case get\\<^bsub>X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1\\<^esub>\n   \\<sigma> of\n                                   (\\<sigma>, \\<rho>) \\<Rightarrow>\n                                     Pair \\<sigma>)\n                                   u,\n                                  (case get\\<^bsub>X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2\\<^esub>\n   \\<sigma> of\n                                   (\\<sigma>, \\<rho>) \\<Rightarrow>\n                                     Pair \\<sigma>)\n                                   v) of\n                          (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n                          ((case snd (case v of\n(u, v) \\<Rightarrow>\n  ((case get\\<^bsub>X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1\\<^esub> \\<sigma> of\n    (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n    u,\n   (case get\\<^bsub>X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2\\<^esub> \\<sigma> of\n    (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n    v)) of\n                            (\\<sigma>, \\<rho>) \\<Rightarrow>\n                              \\<lambda>u. (u, \\<rho>))\n                            va) of\n                    (\\<sigma>, \\<rho>) \\<Rightarrow>\n                      \\<lambda>u. (u, \\<rho>))\n                    ((case fst ((case case v of\n(u, v) \\<Rightarrow>\n  ((case get\\<^bsub>X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1\\<^esub> \\<sigma> of\n    (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n    u,\n   (case get\\<^bsub>X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2\\<^esub> \\<sigma> of\n    (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n    v) of\n                                 (\\<sigma>, \\<rho>) \\<Rightarrow>\n                                   Pair \\<sigma>)\n                                 ((case snd\n   (case v of\n    (u, v) \\<Rightarrow>\n      ((case get\\<^bsub>X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1\\<^esub>\n              \\<sigma> of\n        (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n        u,\n       (case get\\<^bsub>X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2\\<^esub>\n              \\<sigma> of\n        (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n        v)) of\n                                   (\\<sigma>, \\<rho>) \\<Rightarrow>\n                                     \\<lambda>u. (u, \\<rho>))\n                                   va)) of\n                      (\\<sigma>, \\<rho>) \\<Rightarrow>\n                        \\<lambda>u. (u, \\<rho>))\n                      ua) of\n            (u, v) \\<Rightarrow>\n              put\\<^bsub>X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1\\<^esub>\n               (put\\<^bsub>X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2\\<^esub>\n                 \\<sigma> v)\n               u\\<rparr>", "apply (auto simp add: lens_prod_def lens_plus_def lens_comp_def fst_lens_def snd_lens_def prod.case_eq_if comp_def)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(u, v) (x, y).\n        (put\\<^bsub>X\\<^sub>1\\<^esub>\n          (put\\<^bsub>X\\<^sub>2\\<^esub> u (snd x)) (fst x),\n         put\\<^bsub>Y\\<^sub>1\\<^esub>\n          (put\\<^bsub>Y\\<^sub>2\\<^esub> v (snd y)) (fst y))) =\n    (\\<lambda>\\<sigma> v.\n        (put\\<^bsub>X\\<^sub>1\\<^esub>\n          (put\\<^bsub>X\\<^sub>2\\<^esub> (fst \\<sigma>) (snd (fst v)))\n          (fst (fst v)),\n         put\\<^bsub>Y\\<^sub>1\\<^esub>\n          (put\\<^bsub>Y\\<^sub>2\\<^esub> (snd \\<sigma>) (snd (snd v)))\n          (fst (snd v))))", "apply (rule ext, rule ext, auto simp add: prod.case_eq_if)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (X\\<^sub>1 +\\<^sub>L X\\<^sub>2) \\<times>\\<^sub>L\n  (Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2) \\<subseteq>\\<^sub>L\n  X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1 +\\<^sub>L\n  X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2\n\ngoal (1 subgoal):\n 1. X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1 +\\<^sub>L\n    X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2 \\<subseteq>\\<^sub>L\n    (X\\<^sub>1 +\\<^sub>L X\\<^sub>2) \\<times>\\<^sub>L\n    (Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2)", "show \"(X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1) +\\<^sub>L (X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2) \\<subseteq>\\<^sub>L (X\\<^sub>1 +\\<^sub>L X\\<^sub>2) \\<times>\\<^sub>L (Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1 +\\<^sub>L\n    X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2 \\<subseteq>\\<^sub>L\n    (X\\<^sub>1 +\\<^sub>L X\\<^sub>2) \\<times>\\<^sub>L\n    (Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2)", "apply (simp add: sublens_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Z.\n       vwb_lens Z \\<and>\n       X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1 +\\<^sub>L\n       X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2 =\n       Z ;\\<^sub>L\n       (X\\<^sub>1 +\\<^sub>L X\\<^sub>2) \\<times>\\<^sub>L\n       (Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2)", "apply (rule_tac x=\"((fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L) +\\<^sub>L (fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L)) +\\<^sub>L ((snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L) +\\<^sub>L (snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L))\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. vwb_lens\n     ((fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n       fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L) +\\<^sub>L\n      snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n      snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L) \\<and>\n    X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1 +\\<^sub>L\n    X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2 =\n    ((fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n      fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L) +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    (X\\<^sub>1 +\\<^sub>L X\\<^sub>2) \\<times>\\<^sub>L\n    (Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2)", "apply (auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. vwb_lens\n     ((fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n       fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L) +\\<^sub>L\n      snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n      snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L)\n 2. X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1 +\\<^sub>L\n    X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2 =\n    ((fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n      fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L) +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    (X\\<^sub>1 +\\<^sub>L X\\<^sub>2) \\<times>\\<^sub>L\n    (Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2)", "apply (auto intro!: plus_vwb_lens comp_vwb_lens fst_vwb_lens snd_vwb_lens lens_indep_right_comp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L \\<bowtie>\n    fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L\n 2. snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L \\<bowtie>\n    snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L\n 3. fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n    fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L \\<bowtie>\n    snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n    snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L\n 4. X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1 +\\<^sub>L\n    X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2 =\n    ((fst\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n      fst\\<^sub>L ;\\<^sub>L snd\\<^sub>L) +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L fst\\<^sub>L +\\<^sub>L\n     snd\\<^sub>L ;\\<^sub>L snd\\<^sub>L) ;\\<^sub>L\n    (X\\<^sub>1 +\\<^sub>L X\\<^sub>2) \\<times>\\<^sub>L\n    (Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2)", "apply (auto intro!: lens_indepI simp add: lens_comp_def lens_plus_def fst_lens_def snd_lens_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<lambda>\\<sigma>.\n        (get\\<^bsub>X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1\\<^esub> \\<sigma>,\n         get\\<^bsub>X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2\\<^esub>\n          \\<sigma>)) =\n    (\\<lambda>\\<sigma>.\n        ((fst (fst \\<sigma>), fst (snd \\<sigma>)), snd (fst \\<sigma>),\n         snd (snd \\<sigma>))) \\<circ>\n    get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n 2. (\\<lambda>\\<sigma> (u, v).\n        put\\<^bsub>X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1\\<^esub>\n         (put\\<^bsub>X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2\\<^esub> \\<sigma>\n           v)\n         u) =\n    (\\<lambda>\\<sigma> v.\n        put\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n         \\<sigma>\n         (case v of\n          ((ua, va), v) \\<Rightarrow>\n            (case (case case v of\n                        (u, v) \\<Rightarrow>\n                          (case (case get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n \\<sigma> of\n                                 (\\<sigma>, \\<rho>) \\<Rightarrow>\n                                   Pair \\<sigma>)\n                                 ((case snd\n   (get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n     \\<sigma>) of\n                                   (\\<sigma>, \\<rho>) \\<Rightarrow>\n                                     Pair \\<sigma>)\n                                   v) of\n                           (\\<sigma>, \\<rho>) \\<Rightarrow>\n                             \\<lambda>u. (u, \\<rho>))\n                           ((case fst ((case get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n        \\<sigma> of\n  (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n  ((case snd (get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n               \\<sigma>) of\n    (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n    v)) of\n                             (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n                             u) of\n                   (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n                   ((case snd (case v of\n                               (u, v) \\<Rightarrow>\n                                 (case (case get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n        \\<sigma> of\n  (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n  ((case snd (get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n               \\<sigma>) of\n    (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n    v) of\n                                  (\\<sigma>, \\<rho>) \\<Rightarrow>\n                                    \\<lambda>u. (u, \\<rho>))\n                                  ((case fst\n    ((case get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n            \\<sigma> of\n      (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n      ((case snd (get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n                   \\<sigma>) of\n        (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n        v)) of\n                                    (\\<sigma>, \\<rho>) \\<Rightarrow>\nPair \\<sigma>)\n                                    u)) of\n                     (\\<sigma>, \\<rho>) \\<Rightarrow>\n                       \\<lambda>u. (u, \\<rho>))\n                     va) of\n             (\\<sigma>, \\<rho>) \\<Rightarrow> \\<lambda>u. (u, \\<rho>))\n             ((case fst ((case case v of\n                               (u, v) \\<Rightarrow>\n                                 (case (case get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n        \\<sigma> of\n  (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n  ((case snd (get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n               \\<sigma>) of\n    (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n    v) of\n                                  (\\<sigma>, \\<rho>) \\<Rightarrow>\n                                    \\<lambda>u. (u, \\<rho>))\n                                  ((case fst\n    ((case get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n            \\<sigma> of\n      (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n      ((case snd (get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n                   \\<sigma>) of\n        (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n        v)) of\n                                    (\\<sigma>, \\<rho>) \\<Rightarrow>\nPair \\<sigma>)\n                                    u) of\n                          (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n                          ((case snd (case v of\n(u, v) \\<Rightarrow>\n  (case (case get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n               \\<sigma> of\n         (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n         ((case snd (get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n                      \\<sigma>) of\n           (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n           v) of\n   (\\<sigma>, \\<rho>) \\<Rightarrow> \\<lambda>u. (u, \\<rho>))\n   ((case fst ((case get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n                      \\<sigma> of\n                (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n                ((case snd (get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n                             \\<sigma>) of\n                  (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n                  v)) of\n     (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n     u)) of\n                            (\\<sigma>, \\<rho>) \\<Rightarrow>\n                              \\<lambda>u. (u, \\<rho>))\n                            va)) of\n               (\\<sigma>, \\<rho>) \\<Rightarrow> \\<lambda>u. (u, \\<rho>))\n               ua)))", "apply (auto simp add: lens_prod_def lens_plus_def lens_comp_def fst_lens_def snd_lens_def prod.case_eq_if comp_def)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma> (u, v).\n        put\\<^bsub>X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1\\<^esub>\n         (put\\<^bsub>X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2\\<^esub> \\<sigma>\n           v)\n         u) =\n    (\\<lambda>\\<sigma> v.\n        put\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n         \\<sigma>\n         (case v of\n          ((ua, va), v) \\<Rightarrow>\n            (case (case case v of\n                        (u, v) \\<Rightarrow>\n                          (case (case get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n \\<sigma> of\n                                 (\\<sigma>, \\<rho>) \\<Rightarrow>\n                                   Pair \\<sigma>)\n                                 ((case snd\n   (get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n     \\<sigma>) of\n                                   (\\<sigma>, \\<rho>) \\<Rightarrow>\n                                     Pair \\<sigma>)\n                                   v) of\n                           (\\<sigma>, \\<rho>) \\<Rightarrow>\n                             \\<lambda>u. (u, \\<rho>))\n                           ((case fst ((case get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n        \\<sigma> of\n  (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n  ((case snd (get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n               \\<sigma>) of\n    (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n    v)) of\n                             (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n                             u) of\n                   (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n                   ((case snd (case v of\n                               (u, v) \\<Rightarrow>\n                                 (case (case get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n        \\<sigma> of\n  (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n  ((case snd (get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n               \\<sigma>) of\n    (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n    v) of\n                                  (\\<sigma>, \\<rho>) \\<Rightarrow>\n                                    \\<lambda>u. (u, \\<rho>))\n                                  ((case fst\n    ((case get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n            \\<sigma> of\n      (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n      ((case snd (get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n                   \\<sigma>) of\n        (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n        v)) of\n                                    (\\<sigma>, \\<rho>) \\<Rightarrow>\nPair \\<sigma>)\n                                    u)) of\n                     (\\<sigma>, \\<rho>) \\<Rightarrow>\n                       \\<lambda>u. (u, \\<rho>))\n                     va) of\n             (\\<sigma>, \\<rho>) \\<Rightarrow> \\<lambda>u. (u, \\<rho>))\n             ((case fst ((case case v of\n                               (u, v) \\<Rightarrow>\n                                 (case (case get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n        \\<sigma> of\n  (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n  ((case snd (get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n               \\<sigma>) of\n    (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n    v) of\n                                  (\\<sigma>, \\<rho>) \\<Rightarrow>\n                                    \\<lambda>u. (u, \\<rho>))\n                                  ((case fst\n    ((case get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n            \\<sigma> of\n      (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n      ((case snd (get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n                   \\<sigma>) of\n        (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n        v)) of\n                                    (\\<sigma>, \\<rho>) \\<Rightarrow>\nPair \\<sigma>)\n                                    u) of\n                          (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n                          ((case snd (case v of\n(u, v) \\<Rightarrow>\n  (case (case get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n               \\<sigma> of\n         (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n         ((case snd (get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n                      \\<sigma>) of\n           (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n           v) of\n   (\\<sigma>, \\<rho>) \\<Rightarrow> \\<lambda>u. (u, \\<rho>))\n   ((case fst ((case get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n                      \\<sigma> of\n                (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n                ((case snd (get\\<^bsub>\\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>X\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>X\\<^sub>1\\<^esub> (put\\<^bsub>X\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr> \\<times>\\<^sub>L \\<lparr>lens_get = \\<lambda>\\<sigma>. (get\\<^bsub>Y\\<^sub>1\\<^esub> \\<sigma>, get\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma>), lens_put = \\<lambda>\\<sigma> (u, v). put\\<^bsub>Y\\<^sub>1\\<^esub> (put\\<^bsub>Y\\<^sub>2\\<^esub> \\<sigma> v) u\\<rparr>\\<^esub>\n                             \\<sigma>) of\n                  (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n                  v)) of\n     (\\<sigma>, \\<rho>) \\<Rightarrow> Pair \\<sigma>)\n     u)) of\n                            (\\<sigma>, \\<rho>) \\<Rightarrow>\n                              \\<lambda>u. (u, \\<rho>))\n                            va)) of\n               (\\<sigma>, \\<rho>) \\<Rightarrow> \\<lambda>u. (u, \\<rho>))\n               ua)))", "apply (rule ext, rule ext, auto simp add: lens_prod_def prod.case_eq_if)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  X\\<^sub>1 \\<times>\\<^sub>L Y\\<^sub>1 +\\<^sub>L\n  X\\<^sub>2 \\<times>\\<^sub>L Y\\<^sub>2 \\<subseteq>\\<^sub>L\n  (X\\<^sub>1 +\\<^sub>L X\\<^sub>2) \\<times>\\<^sub>L\n  (Y\\<^sub>1 +\\<^sub>L Y\\<^sub>2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lens_get_put_quasi_commute:\n  \"\\<lbrakk> vwb_lens Y; X \\<subseteq>\\<^sub>L Y \\<rbrakk> \\<Longrightarrow> get\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> s v) = put\\<^bsub>X /\\<^sub>L Y\\<^esub> (get\\<^bsub>Y\\<^esub> s) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>vwb_lens Y; X \\<subseteq>\\<^sub>L Y\\<rbrakk>\n    \\<Longrightarrow> get\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> s v) =\n                      put\\<^bsub>X /\\<^sub>L Y\\<^esub>\n                       (get\\<^bsub>Y\\<^esub> s) v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>vwb_lens Y; X \\<subseteq>\\<^sub>L Y\\<rbrakk>\n    \\<Longrightarrow> get\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> s v) =\n                      put\\<^bsub>X /\\<^sub>L Y\\<^esub>\n                       (get\\<^bsub>Y\\<^esub> s) v", "assume a1: \"vwb_lens Y\""], ["proof (state)\nthis:\n  vwb_lens Y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>vwb_lens Y; X \\<subseteq>\\<^sub>L Y\\<rbrakk>\n    \\<Longrightarrow> get\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> s v) =\n                      put\\<^bsub>X /\\<^sub>L Y\\<^esub>\n                       (get\\<^bsub>Y\\<^esub> s) v", "assume a2: \"X \\<subseteq>\\<^sub>L Y\""], ["proof (state)\nthis:\n  X \\<subseteq>\\<^sub>L Y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>vwb_lens Y; X \\<subseteq>\\<^sub>L Y\\<rbrakk>\n    \\<Longrightarrow> get\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> s v) =\n                      put\\<^bsub>X /\\<^sub>L Y\\<^esub>\n                       (get\\<^bsub>Y\\<^esub> s) v", "have \"\\<And>l la. put\\<^bsub>l ;\\<^sub>L la\\<^esub> = (\\<lambda>b c. put\\<^bsub>la\\<^esub> (b::'b) (put\\<^bsub>l\\<^esub> (get\\<^bsub>la\\<^esub> b::'a) (c::'c)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l la.\n       put\\<^bsub>l ;\\<^sub>L la\\<^esub> =\n       (\\<lambda>b c.\n           put\\<^bsub>la\\<^esub> b\n            (put\\<^bsub>l\\<^esub> (get\\<^bsub>la\\<^esub> b) c))", "by (simp add: lens_comp_def)"], ["proof (state)\nthis:\n  put\\<^bsub>?l ;\\<^sub>L ?la\\<^esub> =\n  (\\<lambda>b c.\n      put\\<^bsub>?la\\<^esub> b\n       (put\\<^bsub>?l\\<^esub> (get\\<^bsub>?la\\<^esub> b) c))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>vwb_lens Y; X \\<subseteq>\\<^sub>L Y\\<rbrakk>\n    \\<Longrightarrow> get\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> s v) =\n                      put\\<^bsub>X /\\<^sub>L Y\\<^esub>\n                       (get\\<^bsub>Y\\<^esub> s) v", "then"], ["proof (chain)\npicking this:\n  put\\<^bsub>?l ;\\<^sub>L ?la\\<^esub> =\n  (\\<lambda>b c.\n      put\\<^bsub>?la\\<^esub> b\n       (put\\<^bsub>?l\\<^esub> (get\\<^bsub>?la\\<^esub> b) c))", "have \"\\<And>l la b c. get\\<^bsub>l\\<^esub> (put\\<^bsub>la ;\\<^sub>L l\\<^esub> (b::'b) (c::'c)) = put\\<^bsub>la\\<^esub> (get\\<^bsub>l\\<^esub> b::'a) c \\<or> \\<not> weak_lens l\""], ["proof (prove)\nusing this:\n  put\\<^bsub>?l ;\\<^sub>L ?la\\<^esub> =\n  (\\<lambda>b c.\n      put\\<^bsub>?la\\<^esub> b\n       (put\\<^bsub>?l\\<^esub> (get\\<^bsub>?la\\<^esub> b) c))\n\ngoal (1 subgoal):\n 1. \\<And>l la b c.\n       get\\<^bsub>l\\<^esub> (put\\<^bsub>la ;\\<^sub>L l\\<^esub> b c) =\n       put\\<^bsub>la\\<^esub> (get\\<^bsub>l\\<^esub> b) c \\<or>\n       \\<not> weak_lens l", "by force"], ["proof (state)\nthis:\n  get\\<^bsub>?l\\<^esub> (put\\<^bsub>?la ;\\<^sub>L ?l\\<^esub> ?b ?c) =\n  put\\<^bsub>?la\\<^esub> (get\\<^bsub>?l\\<^esub> ?b) ?c \\<or>\n  \\<not> weak_lens ?l\n\ngoal (1 subgoal):\n 1. \\<lbrakk>vwb_lens Y; X \\<subseteq>\\<^sub>L Y\\<rbrakk>\n    \\<Longrightarrow> get\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> s v) =\n                      put\\<^bsub>X /\\<^sub>L Y\\<^esub>\n                       (get\\<^bsub>Y\\<^esub> s) v", "then"], ["proof (chain)\npicking this:\n  get\\<^bsub>?l\\<^esub> (put\\<^bsub>?la ;\\<^sub>L ?l\\<^esub> ?b ?c) =\n  put\\<^bsub>?la\\<^esub> (get\\<^bsub>?l\\<^esub> ?b) ?c \\<or>\n  \\<not> weak_lens ?l", "show ?thesis"], ["proof (prove)\nusing this:\n  get\\<^bsub>?l\\<^esub> (put\\<^bsub>?la ;\\<^sub>L ?l\\<^esub> ?b ?c) =\n  put\\<^bsub>?la\\<^esub> (get\\<^bsub>?l\\<^esub> ?b) ?c \\<or>\n  \\<not> weak_lens ?l\n\ngoal (1 subgoal):\n 1. get\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> s v) =\n    put\\<^bsub>X /\\<^sub>L Y\\<^esub> (get\\<^bsub>Y\\<^esub> s) v", "using a2 a1"], ["proof (prove)\nusing this:\n  get\\<^bsub>?l\\<^esub> (put\\<^bsub>?la ;\\<^sub>L ?l\\<^esub> ?b ?c) =\n  put\\<^bsub>?la\\<^esub> (get\\<^bsub>?l\\<^esub> ?b) ?c \\<or>\n  \\<not> weak_lens ?l\n  X \\<subseteq>\\<^sub>L Y\n  vwb_lens Y\n\ngoal (1 subgoal):\n 1. get\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> s v) =\n    put\\<^bsub>X /\\<^sub>L Y\\<^esub> (get\\<^bsub>Y\\<^esub> s) v", "by (metis lens_quotient_comp vwb_lens_wb wb_lens_def)"], ["proof (state)\nthis:\n  get\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> s v) =\n  put\\<^bsub>X /\\<^sub>L Y\\<^esub> (get\\<^bsub>Y\\<^esub> s) v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lens_put_of_quotient:\n  \"\\<lbrakk> vwb_lens Y; X \\<subseteq>\\<^sub>L Y \\<rbrakk> \\<Longrightarrow> put\\<^bsub>Y\\<^esub> s (put\\<^bsub>X /\\<^sub>L Y\\<^esub> v\\<^sub>2 v\\<^sub>1) = put\\<^bsub>X\\<^esub> (put\\<^bsub>Y\\<^esub> s v\\<^sub>2) v\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>vwb_lens Y; X \\<subseteq>\\<^sub>L Y\\<rbrakk>\n    \\<Longrightarrow> put\\<^bsub>Y\\<^esub> s\n                       (put\\<^bsub>X /\\<^sub>L Y\\<^esub> v\\<^sub>2\n                         v\\<^sub>1) =\n                      put\\<^bsub>X\\<^esub>\n                       (put\\<^bsub>Y\\<^esub> s v\\<^sub>2) v\\<^sub>1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>vwb_lens Y; X \\<subseteq>\\<^sub>L Y\\<rbrakk>\n    \\<Longrightarrow> put\\<^bsub>Y\\<^esub> s\n                       (put\\<^bsub>X /\\<^sub>L Y\\<^esub> v\\<^sub>2\n                         v\\<^sub>1) =\n                      put\\<^bsub>X\\<^esub>\n                       (put\\<^bsub>Y\\<^esub> s v\\<^sub>2) v\\<^sub>1", "assume a1: \"vwb_lens Y\""], ["proof (state)\nthis:\n  vwb_lens Y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>vwb_lens Y; X \\<subseteq>\\<^sub>L Y\\<rbrakk>\n    \\<Longrightarrow> put\\<^bsub>Y\\<^esub> s\n                       (put\\<^bsub>X /\\<^sub>L Y\\<^esub> v\\<^sub>2\n                         v\\<^sub>1) =\n                      put\\<^bsub>X\\<^esub>\n                       (put\\<^bsub>Y\\<^esub> s v\\<^sub>2) v\\<^sub>1", "assume a2: \"X \\<subseteq>\\<^sub>L Y\""], ["proof (state)\nthis:\n  X \\<subseteq>\\<^sub>L Y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>vwb_lens Y; X \\<subseteq>\\<^sub>L Y\\<rbrakk>\n    \\<Longrightarrow> put\\<^bsub>Y\\<^esub> s\n                       (put\\<^bsub>X /\\<^sub>L Y\\<^esub> v\\<^sub>2\n                         v\\<^sub>1) =\n                      put\\<^bsub>X\\<^esub>\n                       (put\\<^bsub>Y\\<^esub> s v\\<^sub>2) v\\<^sub>1", "have f3: \"\\<And>l b. put\\<^bsub>l\\<^esub> (b::'b) (get\\<^bsub>l\\<^esub> b::'a) = b \\<or> \\<not> vwb_lens l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l b.\n       put\\<^bsub>l\\<^esub> b (get\\<^bsub>l\\<^esub> b) = b \\<or>\n       \\<not> vwb_lens l", "by force"], ["proof (state)\nthis:\n  put\\<^bsub>?l\\<^esub> ?b (get\\<^bsub>?l\\<^esub> ?b) = ?b \\<or>\n  \\<not> vwb_lens ?l\n\ngoal (1 subgoal):\n 1. \\<lbrakk>vwb_lens Y; X \\<subseteq>\\<^sub>L Y\\<rbrakk>\n    \\<Longrightarrow> put\\<^bsub>Y\\<^esub> s\n                       (put\\<^bsub>X /\\<^sub>L Y\\<^esub> v\\<^sub>2\n                         v\\<^sub>1) =\n                      put\\<^bsub>X\\<^esub>\n                       (put\\<^bsub>Y\\<^esub> s v\\<^sub>2) v\\<^sub>1", "have f4: \"\\<And>b c. put\\<^bsub>X /\\<^sub>L Y\\<^esub> (get\\<^bsub>Y\\<^esub> b) c = get\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> b c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b c.\n       put\\<^bsub>X /\\<^sub>L Y\\<^esub> (get\\<^bsub>Y\\<^esub> b) c =\n       get\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> b c)", "using a2 a1"], ["proof (prove)\nusing this:\n  X \\<subseteq>\\<^sub>L Y\n  vwb_lens Y\n\ngoal (1 subgoal):\n 1. \\<And>b c.\n       put\\<^bsub>X /\\<^sub>L Y\\<^esub> (get\\<^bsub>Y\\<^esub> b) c =\n       get\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> b c)", "by (simp add: lens_get_put_quasi_commute)"], ["proof (state)\nthis:\n  put\\<^bsub>X /\\<^sub>L Y\\<^esub> (get\\<^bsub>Y\\<^esub> ?b) ?c =\n  get\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> ?b ?c)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>vwb_lens Y; X \\<subseteq>\\<^sub>L Y\\<rbrakk>\n    \\<Longrightarrow> put\\<^bsub>Y\\<^esub> s\n                       (put\\<^bsub>X /\\<^sub>L Y\\<^esub> v\\<^sub>2\n                         v\\<^sub>1) =\n                      put\\<^bsub>X\\<^esub>\n                       (put\\<^bsub>Y\\<^esub> s v\\<^sub>2) v\\<^sub>1", "have \"\\<And>b c a. put\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> b c) a = put\\<^bsub>Y\\<^esub> b a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b c a.\n       put\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> b c) a =\n       put\\<^bsub>Y\\<^esub> b a", "using a2 a1"], ["proof (prove)\nusing this:\n  X \\<subseteq>\\<^sub>L Y\n  vwb_lens Y\n\ngoal (1 subgoal):\n 1. \\<And>b c a.\n       put\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> b c) a =\n       put\\<^bsub>Y\\<^esub> b a", "by (simp add: sublens_put_put)"], ["proof (state)\nthis:\n  put\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> ?b ?c) ?a =\n  put\\<^bsub>Y\\<^esub> ?b ?a\n\ngoal (1 subgoal):\n 1. \\<lbrakk>vwb_lens Y; X \\<subseteq>\\<^sub>L Y\\<rbrakk>\n    \\<Longrightarrow> put\\<^bsub>Y\\<^esub> s\n                       (put\\<^bsub>X /\\<^sub>L Y\\<^esub> v\\<^sub>2\n                         v\\<^sub>1) =\n                      put\\<^bsub>X\\<^esub>\n                       (put\\<^bsub>Y\\<^esub> s v\\<^sub>2) v\\<^sub>1", "then"], ["proof (chain)\npicking this:\n  put\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> ?b ?c) ?a =\n  put\\<^bsub>Y\\<^esub> ?b ?a", "show ?thesis"], ["proof (prove)\nusing this:\n  put\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> ?b ?c) ?a =\n  put\\<^bsub>Y\\<^esub> ?b ?a\n\ngoal (1 subgoal):\n 1. put\\<^bsub>Y\\<^esub> s\n     (put\\<^bsub>X /\\<^sub>L Y\\<^esub> v\\<^sub>2 v\\<^sub>1) =\n    put\\<^bsub>X\\<^esub> (put\\<^bsub>Y\\<^esub> s v\\<^sub>2) v\\<^sub>1", "using f4 f3 a1"], ["proof (prove)\nusing this:\n  put\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> ?b ?c) ?a =\n  put\\<^bsub>Y\\<^esub> ?b ?a\n  put\\<^bsub>X /\\<^sub>L Y\\<^esub> (get\\<^bsub>Y\\<^esub> ?b) ?c =\n  get\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> ?b ?c)\n  put\\<^bsub>?l\\<^esub> ?b (get\\<^bsub>?l\\<^esub> ?b) = ?b \\<or>\n  \\<not> vwb_lens ?l\n  vwb_lens Y\n\ngoal (1 subgoal):\n 1. put\\<^bsub>Y\\<^esub> s\n     (put\\<^bsub>X /\\<^sub>L Y\\<^esub> v\\<^sub>2 v\\<^sub>1) =\n    put\\<^bsub>X\\<^esub> (put\\<^bsub>Y\\<^esub> s v\\<^sub>2) v\\<^sub>1", "by (metis mwb_lens.put_put mwb_lens_def vwb_lens_mwb weak_lens.put_get)"], ["proof (state)\nthis:\n  put\\<^bsub>Y\\<^esub> s\n   (put\\<^bsub>X /\\<^sub>L Y\\<^esub> v\\<^sub>2 v\\<^sub>1) =\n  put\\<^bsub>X\\<^esub> (put\\<^bsub>Y\\<^esub> s v\\<^sub>2) v\\<^sub>1\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Bijective Lens Equivalences\\<close>"], ["", "text \\<open>A bijective lens, like a bijective function, is its own inverse. Thus, if we compose its inverse\n  with itself we get @{term \"1\\<^sub>L\"}.\\<close>"], ["", "lemma bij_lens_inv_left:\n  \"bij_lens X \\<Longrightarrow> inv\\<^sub>L X ;\\<^sub>L X = 1\\<^sub>L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_lens X \\<Longrightarrow> inv\\<^sub>L X ;\\<^sub>L X = 1\\<^sub>L", "by (auto simp add: lens_inv_def lens_comp_def lens_create_def comp_def id_lens_def, rule ext, auto)"], ["", "lemma bij_lens_inv_right:\n  \"bij_lens X \\<Longrightarrow> X ;\\<^sub>L inv\\<^sub>L X = 1\\<^sub>L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_lens X \\<Longrightarrow> X ;\\<^sub>L inv\\<^sub>L X = 1\\<^sub>L", "by (auto simp add: lens_inv_def lens_comp_def comp_def id_lens_def, rule ext, auto)"], ["", "text \\<open>The following important results shows that bijective lenses are precisely those that are \n  equivalent to identity. In other words, a bijective lens views all of the source type.\\<close>"], ["", "lemma bij_lens_equiv_id:\n  \"bij_lens X \\<longleftrightarrow> X \\<approx>\\<^sub>L 1\\<^sub>L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_lens X = X \\<approx>\\<^sub>L 1\\<^sub>L", "apply (auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. bij_lens X \\<Longrightarrow> X \\<approx>\\<^sub>L 1\\<^sub>L\n 2. X \\<approx>\\<^sub>L 1\\<^sub>L \\<Longrightarrow> bij_lens X", "apply (rule lens_equivI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. bij_lens X \\<Longrightarrow> X \\<subseteq>\\<^sub>L 1\\<^sub>L\n 2. bij_lens X \\<Longrightarrow> 1\\<^sub>L \\<subseteq>\\<^sub>L X\n 3. X \\<approx>\\<^sub>L 1\\<^sub>L \\<Longrightarrow> bij_lens X", "apply (simp_all add: sublens_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. bij_lens X \\<Longrightarrow>\n    \\<exists>Z. vwb_lens Z \\<and> 1\\<^sub>L = Z ;\\<^sub>L X\n 2. X \\<approx>\\<^sub>L 1\\<^sub>L \\<Longrightarrow> bij_lens X", "apply (rule_tac x=\"lens_inv X\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. bij_lens X \\<Longrightarrow>\n    vwb_lens (inv\\<^sub>L X) \\<and> 1\\<^sub>L = inv\\<^sub>L X ;\\<^sub>L X\n 2. X \\<approx>\\<^sub>L 1\\<^sub>L \\<Longrightarrow> bij_lens X", "apply (simp add: bij_lens_inv_left lens_inv_bij)"], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<approx>\\<^sub>L 1\\<^sub>L \\<Longrightarrow> bij_lens X", "apply (auto simp add: lens_equiv_def sublens_def id_lens_def lens_comp_def comp_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Z Za.\n       \\<lbrakk>vwb_lens Z;\n        X =\n        \\<lparr>lens_get = get\\<^bsub>Z\\<^esub>,\n           lens_put = put\\<^bsub>Z\\<^esub>\\<rparr>;\n        vwb_lens Za;\n        id = (\\<lambda>x. get\\<^bsub>Za\\<^esub> (get\\<^bsub>Z\\<^esub> x));\n        (\\<lambda>_. id) =\n        (\\<lambda>\\<sigma> v.\n            put\\<^bsub>Z\\<^esub> \\<sigma>\n             (put\\<^bsub>Za\\<^esub> (get\\<^bsub>Z\\<^esub> \\<sigma>)\n               v))\\<rbrakk>\n       \\<Longrightarrow> bij_lens\n                          \\<lparr>lens_get = get\\<^bsub>Z\\<^esub>,\n                             lens_put = put\\<^bsub>Z\\<^esub>\\<rparr>", "apply (unfold_locales)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Z Za \\<sigma> v.\n       \\<lbrakk>vwb_lens Z;\n        X =\n        \\<lparr>lens_get = get\\<^bsub>Z\\<^esub>,\n           lens_put = put\\<^bsub>Z\\<^esub>\\<rparr>;\n        vwb_lens Za;\n        id = (\\<lambda>x. get\\<^bsub>Za\\<^esub> (get\\<^bsub>Z\\<^esub> x));\n        (\\<lambda>_. id) =\n        (\\<lambda>\\<sigma> v.\n            put\\<^bsub>Z\\<^esub> \\<sigma>\n             (put\\<^bsub>Za\\<^esub> (get\\<^bsub>Z\\<^esub> \\<sigma>)\n               v))\\<rbrakk>\n       \\<Longrightarrow> get\\<^bsub>\\<lparr>lens_get = get\\<^bsub>Z\\<^esub>, lens_put = put\\<^bsub>Z\\<^esub>\\<rparr>\\<^esub>\n                          (put\\<^bsub>\\<lparr>lens_get = get\\<^bsub>Z\\<^esub>, lens_put = put\\<^bsub>Z\\<^esub>\\<rparr>\\<^esub>\n                            \\<sigma> v) =\n                         v\n 2. \\<And>Z Za \\<sigma> \\<rho>.\n       \\<lbrakk>vwb_lens Z;\n        X =\n        \\<lparr>lens_get = get\\<^bsub>Z\\<^esub>,\n           lens_put = put\\<^bsub>Z\\<^esub>\\<rparr>;\n        vwb_lens Za;\n        id = (\\<lambda>x. get\\<^bsub>Za\\<^esub> (get\\<^bsub>Z\\<^esub> x));\n        (\\<lambda>_. id) =\n        (\\<lambda>\\<sigma> v.\n            put\\<^bsub>Z\\<^esub> \\<sigma>\n             (put\\<^bsub>Za\\<^esub> (get\\<^bsub>Z\\<^esub> \\<sigma>)\n               v))\\<rbrakk>\n       \\<Longrightarrow> put\\<^bsub>\\<lparr>lens_get = get\\<^bsub>Z\\<^esub>, lens_put = put\\<^bsub>Z\\<^esub>\\<rparr>\\<^esub>\n                          \\<sigma>\n                          (get\\<^bsub>\\<lparr>lens_get = get\\<^bsub>Z\\<^esub>, lens_put = put\\<^bsub>Z\\<^esub>\\<rparr>\\<^esub>\n                            \\<rho>) =\n                         \\<rho>", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Z Za \\<sigma> \\<rho>.\n       \\<lbrakk>vwb_lens Z;\n        X =\n        \\<lparr>lens_get = get\\<^bsub>Z\\<^esub>,\n           lens_put = put\\<^bsub>Z\\<^esub>\\<rparr>;\n        vwb_lens Za;\n        id = (\\<lambda>x. get\\<^bsub>Za\\<^esub> (get\\<^bsub>Z\\<^esub> x));\n        (\\<lambda>_. id) =\n        (\\<lambda>\\<sigma> v.\n            put\\<^bsub>Z\\<^esub> \\<sigma>\n             (put\\<^bsub>Za\\<^esub> (get\\<^bsub>Z\\<^esub> \\<sigma>)\n               v))\\<rbrakk>\n       \\<Longrightarrow> put\\<^bsub>\\<lparr>lens_get = get\\<^bsub>Z\\<^esub>, lens_put = put\\<^bsub>Z\\<^esub>\\<rparr>\\<^esub>\n                          \\<sigma>\n                          (get\\<^bsub>\\<lparr>lens_get = get\\<^bsub>Z\\<^esub>, lens_put = put\\<^bsub>Z\\<^esub>\\<rparr>\\<^esub>\n                            \\<rho>) =\n                         \\<rho>", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Z Za \\<sigma> \\<rho>.\n       \\<lbrakk>vwb_lens Z;\n        X =\n        \\<lparr>lens_get = get\\<^bsub>Z\\<^esub>,\n           lens_put = put\\<^bsub>Z\\<^esub>\\<rparr>;\n        vwb_lens Za;\n        id = (\\<lambda>x. get\\<^bsub>Za\\<^esub> (get\\<^bsub>Z\\<^esub> x));\n        (\\<lambda>_. id) =\n        (\\<lambda>\\<sigma> v.\n            put\\<^bsub>Z\\<^esub> \\<sigma>\n             (put\\<^bsub>Za\\<^esub> (get\\<^bsub>Z\\<^esub> \\<sigma>)\n               v))\\<rbrakk>\n       \\<Longrightarrow> put\\<^bsub>Z\\<^esub> \\<sigma>\n                          (get\\<^bsub>Z\\<^esub> \\<rho>) =\n                         \\<rho>", "apply (metis (no_types, lifting) vwb_lens_wb wb_lens_weak weak_lens.put_get)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>For this reason, by transitivity, any two bijective lenses with the same source type must be equivalent.\\<close>"], ["", "lemma bij_lens_equiv:\n  \"\\<lbrakk> bij_lens X; X \\<approx>\\<^sub>L Y \\<rbrakk> \\<Longrightarrow> bij_lens Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bij_lens X; X \\<approx>\\<^sub>L Y\\<rbrakk>\n    \\<Longrightarrow> bij_lens Y", "by (meson bij_lens_equiv_id lens_equiv_def sublens_trans)"], ["", "lemma bij_lens_cong:\n  \"X \\<approx>\\<^sub>L Y \\<Longrightarrow> bij_lens X = bij_lens Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<approx>\\<^sub>L Y \\<Longrightarrow> bij_lens X = bij_lens Y", "by (meson bij_lens_equiv lens_equiv_sym)"], ["", "text \\<open>We can also show that the identity lens @{term \"1\\<^sub>L\"} is unique. That is to say it is the only\n  lens which when compose with $Y$ will yield $Y$.\\<close>"], ["", "lemma lens_id_unique:\n  \"weak_lens Y \\<Longrightarrow> Y = X ;\\<^sub>L Y \\<Longrightarrow> X = 1\\<^sub>L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>weak_lens Y; Y = X ;\\<^sub>L Y\\<rbrakk>\n    \\<Longrightarrow> X = 1\\<^sub>L", "apply (cases Y)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>lens_get lens_put.\n       \\<lbrakk>weak_lens Y; Y = X ;\\<^sub>L Y;\n        Y =\n        \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> X = 1\\<^sub>L", "apply (cases X)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>lens_get lens_put lens_geta lens_puta.\n       \\<lbrakk>weak_lens Y; Y = X ;\\<^sub>L Y;\n        Y = \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        X =\n        \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> X = 1\\<^sub>L", "apply (auto simp add: lens_comp_def comp_def id_lens_def fun_eq_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>lens_get lens_put lens_geta lens_puta x.\n       \\<lbrakk>weak_lens\n                 \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        Y = \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        X = \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        \\<forall>x. lens_get x = lens_geta (lens_get x);\n        \\<forall>x xa.\n           lens_put x xa = lens_put x (lens_puta (lens_get x) xa)\\<rbrakk>\n       \\<Longrightarrow> lens_geta x = x\n 2. \\<And>lens_get lens_put lens_geta lens_puta x xa.\n       \\<lbrakk>weak_lens\n                 \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        Y = \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        X = \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        \\<forall>x. lens_get x = lens_geta (lens_get x);\n        \\<forall>x xa.\n           lens_put x xa = lens_put x (lens_puta (lens_get x) xa)\\<rbrakk>\n       \\<Longrightarrow> lens_puta x xa = xa", "apply (metis select_convs(1) weak_lens.create_get)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>lens_get lens_put lens_geta lens_puta x xa.\n       \\<lbrakk>weak_lens\n                 \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        Y = \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        X = \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        \\<forall>x. lens_get x = lens_geta (lens_get x);\n        \\<forall>x xa.\n           lens_put x xa = lens_put x (lens_puta (lens_get x) xa)\\<rbrakk>\n       \\<Longrightarrow> lens_puta x xa = xa", "apply (metis select_convs(1) select_convs(2) weak_lens.put_get)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Consequently, if composition of two lenses $X$ and $Y$ yields @{text \"1\\<^sub>L\"}, then both\n  of the composed lenses must be bijective.\\<close>"], ["", "lemma bij_lens_via_comp_id_left:\n  \"\\<lbrakk> wb_lens X; wb_lens Y; X ;\\<^sub>L Y = 1\\<^sub>L \\<rbrakk> \\<Longrightarrow> bij_lens X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wb_lens X; wb_lens Y; X ;\\<^sub>L Y = 1\\<^sub>L\\<rbrakk>\n    \\<Longrightarrow> bij_lens X", "apply (cases Y)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>lens_get lens_put.\n       \\<lbrakk>wb_lens X; wb_lens Y; X ;\\<^sub>L Y = 1\\<^sub>L;\n        Y =\n        \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> bij_lens X", "apply (cases X)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>lens_get lens_put lens_geta lens_puta.\n       \\<lbrakk>wb_lens X; wb_lens Y; X ;\\<^sub>L Y = 1\\<^sub>L;\n        Y = \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        X =\n        \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> bij_lens X", "apply (auto simp add: lens_comp_def comp_def id_lens_def fun_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>lens_get lens_put lens_geta lens_puta.\n       \\<lbrakk>wb_lens\n                 \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        wb_lens \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        Y = \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        X = \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        \\<forall>x. lens_geta (lens_get x) = x;\n        \\<forall>x xa. lens_put x (lens_puta (lens_get x) xa) = xa\\<rbrakk>\n       \\<Longrightarrow> bij_lens\n                          \\<lparr>lens_get = lens_geta,\n                             lens_put = lens_puta\\<rparr>", "apply (unfold_locales)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>lens_geta lens_puta lens_getaa lens_putaa \\<sigma> v.\n       \\<lbrakk>wb_lens\n                 \\<lparr>lens_get = lens_getaa,\n                    lens_put = lens_putaa\\<rparr>;\n        wb_lens \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        Y = \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        X = \\<lparr>lens_get = lens_getaa, lens_put = lens_putaa\\<rparr>;\n        \\<forall>x. lens_getaa (lens_geta x) = x;\n        \\<forall>x xa.\n           lens_puta x (lens_putaa (lens_geta x) xa) = xa\\<rbrakk>\n       \\<Longrightarrow> get\\<^bsub>\\<lparr>lens_get = lens_getaa, lens_put = lens_putaa\\<rparr>\\<^esub>\n                          (put\\<^bsub>\\<lparr>lens_get = lens_getaa, lens_put = lens_putaa\\<rparr>\\<^esub>\n                            \\<sigma> v) =\n                         v\n 2. \\<And>lens_geta lens_puta lens_getaa lens_putaa \\<sigma> \\<rho>.\n       \\<lbrakk>wb_lens\n                 \\<lparr>lens_get = lens_getaa,\n                    lens_put = lens_putaa\\<rparr>;\n        wb_lens \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        Y = \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        X = \\<lparr>lens_get = lens_getaa, lens_put = lens_putaa\\<rparr>;\n        \\<forall>x. lens_getaa (lens_geta x) = x;\n        \\<forall>x xa.\n           lens_puta x (lens_putaa (lens_geta x) xa) = xa\\<rbrakk>\n       \\<Longrightarrow> put\\<^bsub>\\<lparr>lens_get = lens_getaa, lens_put = lens_putaa\\<rparr>\\<^esub>\n                          \\<sigma>\n                          (get\\<^bsub>\\<lparr>lens_get = lens_getaa, lens_put = lens_putaa\\<rparr>\\<^esub>\n                            \\<rho>) =\n                         \\<rho>", "apply (simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>lens_get lens_put lens_geta lens_puta \\<sigma> v.\n       \\<lbrakk>wb_lens\n                 \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        wb_lens \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        Y = \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        X = \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        \\<forall>x. lens_geta (lens_get x) = x;\n        \\<forall>x xa. lens_put x (lens_puta (lens_get x) xa) = xa\\<rbrakk>\n       \\<Longrightarrow> lens_geta (lens_puta \\<sigma> v) = v\n 2. \\<And>lens_get lens_put lens_geta lens_puta \\<sigma> \\<rho>.\n       \\<lbrakk>wb_lens\n                 \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        wb_lens \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        Y = \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        X = \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        \\<forall>x. lens_geta (lens_get x) = x;\n        \\<forall>x xa. lens_put x (lens_puta (lens_get x) xa) = xa\\<rbrakk>\n       \\<Longrightarrow> lens_puta \\<sigma> (lens_geta \\<rho>) = \\<rho>", "using vwb_lens_wb wb_lens_weak weak_lens.put_get"], ["proof (prove)\nusing this:\n  vwb_lens ?x \\<Longrightarrow> wb_lens ?x\n  wb_lens ?x \\<Longrightarrow> weak_lens ?x\n  weak_lens ?x \\<Longrightarrow>\n  get\\<^bsub>?x\\<^esub> (put\\<^bsub>?x\\<^esub> ?\\<sigma> ?v) = ?v\n\ngoal (2 subgoals):\n 1. \\<And>lens_get lens_put lens_geta lens_puta \\<sigma> v.\n       \\<lbrakk>wb_lens\n                 \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        wb_lens \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        Y = \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        X = \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        \\<forall>x. lens_geta (lens_get x) = x;\n        \\<forall>x xa. lens_put x (lens_puta (lens_get x) xa) = xa\\<rbrakk>\n       \\<Longrightarrow> lens_geta (lens_puta \\<sigma> v) = v\n 2. \\<And>lens_get lens_put lens_geta lens_puta \\<sigma> \\<rho>.\n       \\<lbrakk>wb_lens\n                 \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        wb_lens \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        Y = \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        X = \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        \\<forall>x. lens_geta (lens_get x) = x;\n        \\<forall>x xa. lens_put x (lens_puta (lens_get x) xa) = xa\\<rbrakk>\n       \\<Longrightarrow> lens_puta \\<sigma> (lens_geta \\<rho>) = \\<rho>", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>lens_get lens_put lens_geta lens_puta \\<sigma> \\<rho>.\n       \\<lbrakk>wb_lens\n                 \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        wb_lens \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        Y = \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        X = \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        \\<forall>x. lens_geta (lens_get x) = x;\n        \\<forall>x xa. lens_put x (lens_puta (lens_get x) xa) = xa\\<rbrakk>\n       \\<Longrightarrow> lens_puta \\<sigma> (lens_geta \\<rho>) = \\<rho>", "apply (metis select_convs(1) select_convs(2) wb_lens_weak weak_lens.put_get)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma bij_lens_via_comp_id_right:\n  \"\\<lbrakk> wb_lens X; wb_lens Y; X ;\\<^sub>L Y = 1\\<^sub>L \\<rbrakk> \\<Longrightarrow> bij_lens Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wb_lens X; wb_lens Y; X ;\\<^sub>L Y = 1\\<^sub>L\\<rbrakk>\n    \\<Longrightarrow> bij_lens Y", "apply (cases Y)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>lens_get lens_put.\n       \\<lbrakk>wb_lens X; wb_lens Y; X ;\\<^sub>L Y = 1\\<^sub>L;\n        Y =\n        \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> bij_lens Y", "apply (cases X)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>lens_get lens_put lens_geta lens_puta.\n       \\<lbrakk>wb_lens X; wb_lens Y; X ;\\<^sub>L Y = 1\\<^sub>L;\n        Y = \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        X =\n        \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> bij_lens Y", "apply (auto simp add: lens_comp_def comp_def id_lens_def fun_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>lens_get lens_put lens_geta lens_puta.\n       \\<lbrakk>wb_lens\n                 \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        wb_lens \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        Y = \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        X = \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        \\<forall>x. lens_geta (lens_get x) = x;\n        \\<forall>x xa. lens_put x (lens_puta (lens_get x) xa) = xa\\<rbrakk>\n       \\<Longrightarrow> bij_lens\n                          \\<lparr>lens_get = lens_get,\n                             lens_put = lens_put\\<rparr>", "apply (unfold_locales)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>lens_geta lens_puta lens_getaa lens_putaa \\<sigma> v.\n       \\<lbrakk>wb_lens\n                 \\<lparr>lens_get = lens_getaa,\n                    lens_put = lens_putaa\\<rparr>;\n        wb_lens \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        Y = \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        X = \\<lparr>lens_get = lens_getaa, lens_put = lens_putaa\\<rparr>;\n        \\<forall>x. lens_getaa (lens_geta x) = x;\n        \\<forall>x xa.\n           lens_puta x (lens_putaa (lens_geta x) xa) = xa\\<rbrakk>\n       \\<Longrightarrow> get\\<^bsub>\\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>\\<^esub>\n                          (put\\<^bsub>\\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>\\<^esub>\n                            \\<sigma> v) =\n                         v\n 2. \\<And>lens_geta lens_puta lens_getaa lens_putaa \\<sigma> \\<rho>.\n       \\<lbrakk>wb_lens\n                 \\<lparr>lens_get = lens_getaa,\n                    lens_put = lens_putaa\\<rparr>;\n        wb_lens \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        Y = \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        X = \\<lparr>lens_get = lens_getaa, lens_put = lens_putaa\\<rparr>;\n        \\<forall>x. lens_getaa (lens_geta x) = x;\n        \\<forall>x xa.\n           lens_puta x (lens_putaa (lens_geta x) xa) = xa\\<rbrakk>\n       \\<Longrightarrow> put\\<^bsub>\\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>\\<^esub>\n                          \\<sigma>\n                          (get\\<^bsub>\\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>\\<^esub>\n                            \\<rho>) =\n                         \\<rho>", "apply (simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>lens_get lens_put lens_geta lens_puta \\<sigma> v.\n       \\<lbrakk>wb_lens\n                 \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        wb_lens \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        Y = \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        X = \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        \\<forall>x. lens_geta (lens_get x) = x;\n        \\<forall>x xa. lens_put x (lens_puta (lens_get x) xa) = xa\\<rbrakk>\n       \\<Longrightarrow> lens_get (lens_put \\<sigma> v) = v\n 2. \\<And>lens_get lens_put lens_geta lens_puta \\<sigma> \\<rho>.\n       \\<lbrakk>wb_lens\n                 \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        wb_lens \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        Y = \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        X = \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        \\<forall>x. lens_geta (lens_get x) = x;\n        \\<forall>x xa. lens_put x (lens_puta (lens_get x) xa) = xa\\<rbrakk>\n       \\<Longrightarrow> lens_put \\<sigma> (lens_get \\<rho>) = \\<rho>", "using vwb_lens_wb wb_lens_weak weak_lens.put_get"], ["proof (prove)\nusing this:\n  vwb_lens ?x \\<Longrightarrow> wb_lens ?x\n  wb_lens ?x \\<Longrightarrow> weak_lens ?x\n  weak_lens ?x \\<Longrightarrow>\n  get\\<^bsub>?x\\<^esub> (put\\<^bsub>?x\\<^esub> ?\\<sigma> ?v) = ?v\n\ngoal (2 subgoals):\n 1. \\<And>lens_get lens_put lens_geta lens_puta \\<sigma> v.\n       \\<lbrakk>wb_lens\n                 \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        wb_lens \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        Y = \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        X = \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        \\<forall>x. lens_geta (lens_get x) = x;\n        \\<forall>x xa. lens_put x (lens_puta (lens_get x) xa) = xa\\<rbrakk>\n       \\<Longrightarrow> lens_get (lens_put \\<sigma> v) = v\n 2. \\<And>lens_get lens_put lens_geta lens_puta \\<sigma> \\<rho>.\n       \\<lbrakk>wb_lens\n                 \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        wb_lens \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        Y = \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        X = \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        \\<forall>x. lens_geta (lens_get x) = x;\n        \\<forall>x xa. lens_put x (lens_puta (lens_get x) xa) = xa\\<rbrakk>\n       \\<Longrightarrow> lens_put \\<sigma> (lens_get \\<rho>) = \\<rho>", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>lens_get lens_put lens_geta lens_puta \\<sigma> \\<rho>.\n       \\<lbrakk>wb_lens\n                 \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        wb_lens \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        Y = \\<lparr>lens_get = lens_get, lens_put = lens_put\\<rparr>;\n        X = \\<lparr>lens_get = lens_geta, lens_put = lens_puta\\<rparr>;\n        \\<forall>x. lens_geta (lens_get x) = x;\n        \\<forall>x xa. lens_put x (lens_puta (lens_get x) xa) = xa\\<rbrakk>\n       \\<Longrightarrow> lens_put \\<sigma> (lens_get \\<rho>) = \\<rho>", "apply (metis select_convs(1) select_convs(2) wb_lens_weak weak_lens.put_get)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Importantly, an equivalence between two lenses can be demonstrated by showing that one lens\n  can be converted to the other by application of a suitable bijective lens $Z$. This $Z$ lens\n  converts the view type of one to the view type of the other.\\<close>"], ["", "lemma lens_equiv_via_bij:\n  assumes \"bij_lens Z\" \"X = Z ;\\<^sub>L Y\"\n  shows \"X \\<approx>\\<^sub>L Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<approx>\\<^sub>L Y", "using assms"], ["proof (prove)\nusing this:\n  bij_lens Z\n  X = Z ;\\<^sub>L Y\n\ngoal (1 subgoal):\n 1. X \\<approx>\\<^sub>L Y", "apply (auto simp add: lens_equiv_def sublens_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>bij_lens Z; X = Z ;\\<^sub>L Y\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Za.\n                         vwb_lens Za \\<and> Z ;\\<^sub>L Y = Za ;\\<^sub>L Y\n 2. \\<lbrakk>bij_lens Z; X = Z ;\\<^sub>L Y\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Za.\n                         vwb_lens Za \\<and> Y = Za ;\\<^sub>L (Z ;\\<^sub>L Y)", "using bij_lens_vwb"], ["proof (prove)\nusing this:\n  bij_lens ?x \\<Longrightarrow> vwb_lens ?x\n\ngoal (2 subgoals):\n 1. \\<lbrakk>bij_lens Z; X = Z ;\\<^sub>L Y\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Za.\n                         vwb_lens Za \\<and> Z ;\\<^sub>L Y = Za ;\\<^sub>L Y\n 2. \\<lbrakk>bij_lens Z; X = Z ;\\<^sub>L Y\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Za.\n                         vwb_lens Za \\<and> Y = Za ;\\<^sub>L (Z ;\\<^sub>L Y)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bij_lens Z; X = Z ;\\<^sub>L Y\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Za.\n                         vwb_lens Za \\<and> Y = Za ;\\<^sub>L (Z ;\\<^sub>L Y)", "apply (rule_tac x=\"lens_inv Z\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bij_lens Z; X = Z ;\\<^sub>L Y\\<rbrakk>\n    \\<Longrightarrow> vwb_lens (inv\\<^sub>L Z) \\<and>\n                      Y = inv\\<^sub>L Z ;\\<^sub>L (Z ;\\<^sub>L Y)", "apply (auto simp add: lens_comp_assoc bij_lens_inv_left)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bij_lens Z; X = Z ;\\<^sub>L Y\\<rbrakk>\n    \\<Longrightarrow> vwb_lens (inv\\<^sub>L Z)", "using bij_lens_vwb lens_inv_bij"], ["proof (prove)\nusing this:\n  bij_lens ?x \\<Longrightarrow> vwb_lens ?x\n  bij_lens ?X \\<Longrightarrow> bij_lens (inv\\<^sub>L ?X)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>bij_lens Z; X = Z ;\\<^sub>L Y\\<rbrakk>\n    \\<Longrightarrow> vwb_lens (inv\\<^sub>L Z)", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Indeed, we actually have a stronger result than this -- the equivalent lenses are precisely\n  those than can be converted to one another through a suitable bijective lens. Bijective lenses\n  can thus be seen as a special class of \"adapter\" lens.\\<close>"], ["", "lemma lens_equiv_iff_bij:\n  assumes \"weak_lens Y\"\n  shows \"X \\<approx>\\<^sub>L Y \\<longleftrightarrow> (\\<exists> Z. bij_lens Z \\<and> X = Z ;\\<^sub>L Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<approx>\\<^sub>L Y =\n    (\\<exists>Z. bij_lens Z \\<and> X = Z ;\\<^sub>L Y)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. X \\<approx>\\<^sub>L Y \\<Longrightarrow>\n    \\<exists>Z. bij_lens Z \\<and> X = Z ;\\<^sub>L Y\n 2. \\<exists>Z. bij_lens Z \\<and> X = Z ;\\<^sub>L Y \\<Longrightarrow>\n    X \\<approx>\\<^sub>L Y", "apply (auto simp add: lens_equiv_def sublens_def lens_id_unique)[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Z Za.\n       \\<lbrakk>vwb_lens Z; X = Z ;\\<^sub>L Y; vwb_lens Za;\n        Y = Za ;\\<^sub>L (Z ;\\<^sub>L Y)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Za.\n                            bij_lens Za \\<and>\n                            Z ;\\<^sub>L Y = Za ;\\<^sub>L Y\n 2. \\<exists>Z. bij_lens Z \\<and> X = Z ;\\<^sub>L Y \\<Longrightarrow>\n    X \\<approx>\\<^sub>L Y", "apply (rename_tac Z\\<^sub>1 Z\\<^sub>2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Z\\<^sub>1 Z\\<^sub>2.\n       \\<lbrakk>vwb_lens Z\\<^sub>1; X = Z\\<^sub>1 ;\\<^sub>L Y;\n        vwb_lens Z\\<^sub>2;\n        Y = Z\\<^sub>2 ;\\<^sub>L (Z\\<^sub>1 ;\\<^sub>L Y)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Z.\n                            bij_lens Z \\<and>\n                            Z\\<^sub>1 ;\\<^sub>L Y = Z ;\\<^sub>L Y\n 2. \\<exists>Z. bij_lens Z \\<and> X = Z ;\\<^sub>L Y \\<Longrightarrow>\n    X \\<approx>\\<^sub>L Y", "apply (rule_tac x=\"Z\\<^sub>1\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Z\\<^sub>1 Z\\<^sub>2.\n       \\<lbrakk>vwb_lens Z\\<^sub>1; X = Z\\<^sub>1 ;\\<^sub>L Y;\n        vwb_lens Z\\<^sub>2;\n        Y = Z\\<^sub>2 ;\\<^sub>L (Z\\<^sub>1 ;\\<^sub>L Y)\\<rbrakk>\n       \\<Longrightarrow> bij_lens Z\\<^sub>1 \\<and>\n                         Z\\<^sub>1 ;\\<^sub>L Y = Z\\<^sub>1 ;\\<^sub>L Y\n 2. \\<exists>Z. bij_lens Z \\<and> X = Z ;\\<^sub>L Y \\<Longrightarrow>\n    X \\<approx>\\<^sub>L Y", "apply (simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Z\\<^sub>1 Z\\<^sub>2.\n       \\<lbrakk>vwb_lens Z\\<^sub>1; X = Z\\<^sub>1 ;\\<^sub>L Y;\n        vwb_lens Z\\<^sub>2;\n        Y = Z\\<^sub>2 ;\\<^sub>L (Z\\<^sub>1 ;\\<^sub>L Y)\\<rbrakk>\n       \\<Longrightarrow> bij_lens Z\\<^sub>1\n 2. \\<exists>Z. bij_lens Z \\<and> X = Z ;\\<^sub>L Y \\<Longrightarrow>\n    X \\<approx>\\<^sub>L Y", "apply (subgoal_tac \"Z\\<^sub>2 ;\\<^sub>L Z\\<^sub>1 = 1\\<^sub>L\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>Z\\<^sub>1 Z\\<^sub>2.\n       \\<lbrakk>vwb_lens Z\\<^sub>1; X = Z\\<^sub>1 ;\\<^sub>L Y;\n        vwb_lens Z\\<^sub>2; Y = Z\\<^sub>2 ;\\<^sub>L (Z\\<^sub>1 ;\\<^sub>L Y);\n        Z\\<^sub>2 ;\\<^sub>L Z\\<^sub>1 = 1\\<^sub>L\\<rbrakk>\n       \\<Longrightarrow> bij_lens Z\\<^sub>1\n 2. \\<And>Z\\<^sub>1 Z\\<^sub>2.\n       \\<lbrakk>vwb_lens Z\\<^sub>1; X = Z\\<^sub>1 ;\\<^sub>L Y;\n        vwb_lens Z\\<^sub>2;\n        Y = Z\\<^sub>2 ;\\<^sub>L (Z\\<^sub>1 ;\\<^sub>L Y)\\<rbrakk>\n       \\<Longrightarrow> Z\\<^sub>2 ;\\<^sub>L Z\\<^sub>1 = 1\\<^sub>L\n 3. \\<exists>Z. bij_lens Z \\<and> X = Z ;\\<^sub>L Y \\<Longrightarrow>\n    X \\<approx>\\<^sub>L Y", "apply (meson bij_lens_via_comp_id_right vwb_lens_wb)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Z\\<^sub>1 Z\\<^sub>2.\n       \\<lbrakk>vwb_lens Z\\<^sub>1; X = Z\\<^sub>1 ;\\<^sub>L Y;\n        vwb_lens Z\\<^sub>2;\n        Y = Z\\<^sub>2 ;\\<^sub>L (Z\\<^sub>1 ;\\<^sub>L Y)\\<rbrakk>\n       \\<Longrightarrow> Z\\<^sub>2 ;\\<^sub>L Z\\<^sub>1 = 1\\<^sub>L\n 2. \\<exists>Z. bij_lens Z \\<and> X = Z ;\\<^sub>L Y \\<Longrightarrow>\n    X \\<approx>\\<^sub>L Y", "apply (metis assms lens_comp_assoc lens_id_unique)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Z. bij_lens Z \\<and> X = Z ;\\<^sub>L Y \\<Longrightarrow>\n    X \\<approx>\\<^sub>L Y", "using lens_equiv_via_bij"], ["proof (prove)\nusing this:\n  \\<lbrakk>bij_lens ?Z; ?X = ?Z ;\\<^sub>L ?Y\\<rbrakk>\n  \\<Longrightarrow> ?X \\<approx>\\<^sub>L ?Y\n\ngoal (1 subgoal):\n 1. \\<exists>Z. bij_lens Z \\<and> X = Z ;\\<^sub>L Y \\<Longrightarrow>\n    X \\<approx>\\<^sub>L Y", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma pbij_plus_commute:\n  \"\\<lbrakk> a \\<bowtie> b; mwb_lens a; mwb_lens b; pbij_lens (b +\\<^sub>L a) \\<rbrakk> \\<Longrightarrow> pbij_lens (a +\\<^sub>L b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<bowtie> b; mwb_lens a; mwb_lens b;\n     pbij_lens (b +\\<^sub>L a)\\<rbrakk>\n    \\<Longrightarrow> pbij_lens (a +\\<^sub>L b)", "apply (unfold_locales, simp_all add:lens_defs lens_indep_sym prod.case_eq_if)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> v \\<rho>.\n       \\<lbrakk>a \\<bowtie> b; mwb_lens a; mwb_lens b;\n        pbij_lens\n         \\<lparr>lens_get =\n                   \\<lambda>\\<sigma>.\n                      (get\\<^bsub>b\\<^esub> \\<sigma>,\n                       get\\<^bsub>a\\<^esub> \\<sigma>),\n            lens_put =\n              \\<lambda>\\<sigma> (u, v).\n                 put\\<^bsub>b\\<^esub> (put\\<^bsub>a\\<^esub> \\<sigma> v)\n                  u\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> put\\<^bsub>a\\<^esub>\n                          (put\\<^bsub>b\\<^esub> \\<sigma> (snd v)) (fst v) =\n                         put\\<^bsub>a\\<^esub>\n                          (put\\<^bsub>b\\<^esub> \\<rho> (snd v)) (fst v)", "using lens_indep.lens_put_comm pbij_lens.put_det"], ["proof (prove)\nusing this:\n  ?X \\<bowtie> ?Y \\<Longrightarrow>\n  put\\<^bsub>?X\\<^esub> (put\\<^bsub>?Y\\<^esub> ?\\<sigma> ?v) ?u =\n  put\\<^bsub>?Y\\<^esub> (put\\<^bsub>?X\\<^esub> ?\\<sigma> ?u) ?v\n  pbij_lens ?x \\<Longrightarrow>\n  put\\<^bsub>?x\\<^esub> ?\\<sigma> ?v = put\\<^bsub>?x\\<^esub> ?\\<rho> ?v\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> v \\<rho>.\n       \\<lbrakk>a \\<bowtie> b; mwb_lens a; mwb_lens b;\n        pbij_lens\n         \\<lparr>lens_get =\n                   \\<lambda>\\<sigma>.\n                      (get\\<^bsub>b\\<^esub> \\<sigma>,\n                       get\\<^bsub>a\\<^esub> \\<sigma>),\n            lens_put =\n              \\<lambda>\\<sigma> (u, v).\n                 put\\<^bsub>b\\<^esub> (put\\<^bsub>a\\<^esub> \\<sigma> v)\n                  u\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> put\\<^bsub>a\\<^esub>\n                          (put\\<^bsub>b\\<^esub> \\<sigma> (snd v)) (fst v) =\n                         put\\<^bsub>a\\<^esub>\n                          (put\\<^bsub>b\\<^esub> \\<rho> (snd v)) (fst v)", "apply fastforce"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Lens Override Laws\\<close>"], ["", "text \\<open>The following laws are analogus to the equivalent laws for functions.\\<close>"], ["", "lemma lens_override_id [simp]:\n  \"S\\<^sub>1 \\<oplus>\\<^sub>L S\\<^sub>2 on 1\\<^sub>L = S\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S\\<^sub>1 \\<triangleleft>\\<^bsub>1\\<^sub>L\\<^esub> S\\<^sub>2 = S\\<^sub>2", "by (simp add: lens_override_def id_lens_def)"], ["", "lemma lens_override_unit [simp]:\n  \"S\\<^sub>1 \\<oplus>\\<^sub>L S\\<^sub>2 on 0\\<^sub>L = S\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S\\<^sub>1 \\<triangleleft>\\<^bsub>0\\<^sub>L\\<^esub> S\\<^sub>2 = S\\<^sub>1", "by (simp add: lens_override_def zero_lens_def)"], ["", "lemma lens_override_overshadow:\n  assumes \"mwb_lens Y\"  \"X \\<subseteq>\\<^sub>L Y\"\n  shows \"(S\\<^sub>1 \\<oplus>\\<^sub>L S\\<^sub>2 on X) \\<oplus>\\<^sub>L S\\<^sub>3 on Y = S\\<^sub>1 \\<oplus>\\<^sub>L S\\<^sub>3 on Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S\\<^sub>1 \\<triangleleft>\\<^bsub>X\\<^esub>\n    S\\<^sub>2 \\<triangleleft>\\<^bsub>Y\\<^esub>\n    S\\<^sub>3 =\n    S\\<^sub>1 \\<triangleleft>\\<^bsub>Y\\<^esub> S\\<^sub>3", "using assms"], ["proof (prove)\nusing this:\n  mwb_lens Y\n  X \\<subseteq>\\<^sub>L Y\n\ngoal (1 subgoal):\n 1. S\\<^sub>1 \\<triangleleft>\\<^bsub>X\\<^esub>\n    S\\<^sub>2 \\<triangleleft>\\<^bsub>Y\\<^esub>\n    S\\<^sub>3 =\n    S\\<^sub>1 \\<triangleleft>\\<^bsub>Y\\<^esub> S\\<^sub>3", "by (simp add: lens_override_def sublens_put_put)"], ["", "lemma lens_override_irr:\n  assumes \"X \\<bowtie> Y\"\n  shows \"S\\<^sub>1 \\<oplus>\\<^sub>L (S\\<^sub>2 \\<oplus>\\<^sub>L S\\<^sub>3 on Y) on X = S\\<^sub>1 \\<oplus>\\<^sub>L S\\<^sub>2 on X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S\\<^sub>1 \\<triangleleft>\\<^bsub>X\\<^esub>\n    (S\\<^sub>2 \\<triangleleft>\\<^bsub>Y\\<^esub> S\\<^sub>3) =\n    S\\<^sub>1 \\<triangleleft>\\<^bsub>X\\<^esub> S\\<^sub>2", "using assms"], ["proof (prove)\nusing this:\n  X \\<bowtie> Y\n\ngoal (1 subgoal):\n 1. S\\<^sub>1 \\<triangleleft>\\<^bsub>X\\<^esub>\n    (S\\<^sub>2 \\<triangleleft>\\<^bsub>Y\\<^esub> S\\<^sub>3) =\n    S\\<^sub>1 \\<triangleleft>\\<^bsub>X\\<^esub> S\\<^sub>2", "by (simp add: lens_override_def)"], ["", "lemma lens_override_overshadow_left:\n  assumes \"mwb_lens X\"\n  shows \"(S\\<^sub>1 \\<oplus>\\<^sub>L S\\<^sub>2 on X) \\<oplus>\\<^sub>L S\\<^sub>3 on X = S\\<^sub>1 \\<oplus>\\<^sub>L S\\<^sub>3 on X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S\\<^sub>1 \\<triangleleft>\\<^bsub>X\\<^esub>\n    S\\<^sub>2 \\<triangleleft>\\<^bsub>X\\<^esub>\n    S\\<^sub>3 =\n    S\\<^sub>1 \\<triangleleft>\\<^bsub>X\\<^esub> S\\<^sub>3", "by (simp add: assms lens_override_def)"], ["", "lemma lens_override_overshadow_right:\n  assumes \"mwb_lens X\"\n  shows \"S\\<^sub>1 \\<oplus>\\<^sub>L (S\\<^sub>2  \\<oplus>\\<^sub>L S\\<^sub>3 on X) on X = S\\<^sub>1 \\<oplus>\\<^sub>L S\\<^sub>3 on X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S\\<^sub>1 \\<triangleleft>\\<^bsub>X\\<^esub>\n    (S\\<^sub>2 \\<triangleleft>\\<^bsub>X\\<^esub> S\\<^sub>3) =\n    S\\<^sub>1 \\<triangleleft>\\<^bsub>X\\<^esub> S\\<^sub>3", "by (simp add: assms lens_override_def)"], ["", "lemma lens_override_plus:\n  \"X \\<bowtie> Y \\<Longrightarrow> S\\<^sub>1 \\<oplus>\\<^sub>L S\\<^sub>2 on (X +\\<^sub>L Y) = (S\\<^sub>1 \\<oplus>\\<^sub>L S\\<^sub>2 on X) \\<oplus>\\<^sub>L S\\<^sub>2 on Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<bowtie> Y \\<Longrightarrow>\n    S\\<^sub>1 \\<triangleleft>\\<^bsub>X +\\<^sub>L Y\\<^esub> S\\<^sub>2 =\n    S\\<^sub>1 \\<triangleleft>\\<^bsub>X\\<^esub>\n    S\\<^sub>2 \\<triangleleft>\\<^bsub>Y\\<^esub>\n    S\\<^sub>2", "by (simp add: lens_indep_comm lens_override_def lens_plus_def)"], ["", "lemma lens_override_idem [simp]:\n  \"vwb_lens X \\<Longrightarrow> S \\<oplus>\\<^sub>L S on X = S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwb_lens X \\<Longrightarrow> S \\<triangleleft>\\<^bsub>X\\<^esub> S = S", "by (simp add: lens_override_def)"], ["", "lemma lens_override_mwb_idem [simp]:\n  \"\\<lbrakk> mwb_lens X; S \\<in> \\<S>\\<^bsub>X\\<^esub> \\<rbrakk> \\<Longrightarrow> S \\<oplus>\\<^sub>L S on X = S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mwb_lens X; S \\<in> \\<S>\\<^bsub>X\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> S \\<triangleleft>\\<^bsub>X\\<^esub> S = S", "by (simp add: lens_override_def)"], ["", "lemma lens_override_put_right_in:\n  \"\\<lbrakk> vwb_lens A; X \\<subseteq>\\<^sub>L A \\<rbrakk> \\<Longrightarrow> S\\<^sub>1 \\<oplus>\\<^sub>L (put\\<^bsub>X\\<^esub> S\\<^sub>2 v) on A = put\\<^bsub>X\\<^esub> (S\\<^sub>1 \\<oplus>\\<^sub>L S\\<^sub>2 on A) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>vwb_lens A; X \\<subseteq>\\<^sub>L A\\<rbrakk>\n    \\<Longrightarrow> S\\<^sub>1 \\<triangleleft>\\<^bsub>A\\<^esub>\n                      put\\<^bsub>X\\<^esub> S\\<^sub>2 v =\n                      put\\<^bsub>X\\<^esub>\n                       (S\\<^sub>1 \\<triangleleft>\\<^bsub>A\\<^esub>\n                        S\\<^sub>2)\n                       v", "by (simp add: lens_override_def lens_get_put_quasi_commute lens_put_of_quotient)"], ["", "lemma lens_override_put_right_out:\n  \"\\<lbrakk> vwb_lens A; X \\<bowtie> A \\<rbrakk> \\<Longrightarrow> S\\<^sub>1 \\<oplus>\\<^sub>L (put\\<^bsub>X\\<^esub> S\\<^sub>2 v) on A = (S\\<^sub>1 \\<oplus>\\<^sub>L S\\<^sub>2 on A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>vwb_lens A; X \\<bowtie> A\\<rbrakk>\n    \\<Longrightarrow> S\\<^sub>1 \\<triangleleft>\\<^bsub>A\\<^esub>\n                      put\\<^bsub>X\\<^esub> S\\<^sub>2 v =\n                      S\\<^sub>1 \\<triangleleft>\\<^bsub>A\\<^esub> S\\<^sub>2", "by (simp add: lens_override_def  lens_indep.lens_put_irr2)"], ["", "lemma lens_indep_overrideI:\n  assumes \"vwb_lens X\" \"vwb_lens Y\" \"(\\<And> s\\<^sub>1 s\\<^sub>2 s\\<^sub>3. s\\<^sub>1 \\<oplus>\\<^sub>L s\\<^sub>2 on X \\<oplus>\\<^sub>L s\\<^sub>3 on Y = s\\<^sub>1 \\<oplus>\\<^sub>L s\\<^sub>3 on Y \\<oplus>\\<^sub>L s\\<^sub>2 on X)\"\n  shows \"X \\<bowtie> Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<bowtie> Y", "using assms"], ["proof (prove)\nusing this:\n  vwb_lens X\n  vwb_lens Y\n  ?s\\<^sub>1 \\<triangleleft>\\<^bsub>X\\<^esub>\n  ?s\\<^sub>2 \\<triangleleft>\\<^bsub>Y\\<^esub>\n  ?s\\<^sub>3 =\n  ?s\\<^sub>1 \\<triangleleft>\\<^bsub>Y\\<^esub>\n  ?s\\<^sub>3 \\<triangleleft>\\<^bsub>X\\<^esub>\n  ?s\\<^sub>2\n\ngoal (1 subgoal):\n 1. X \\<bowtie> Y", "apply (unfold_locales)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> v u.\n       \\<lbrakk>vwb_lens X; vwb_lens Y;\n        \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n           s\\<^sub>1 \\<triangleleft>\\<^bsub>X\\<^esub>\n           s\\<^sub>2 \\<triangleleft>\\<^bsub>Y\\<^esub>\n           s\\<^sub>3 =\n           s\\<^sub>1 \\<triangleleft>\\<^bsub>Y\\<^esub>\n           s\\<^sub>3 \\<triangleleft>\\<^bsub>X\\<^esub>\n           s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> put\\<^bsub>X\\<^esub>\n                          (put\\<^bsub>Y\\<^esub> \\<sigma> v) u =\n                         put\\<^bsub>Y\\<^esub>\n                          (put\\<^bsub>X\\<^esub> \\<sigma> u) v\n 2. \\<And>\\<sigma> v.\n       \\<lbrakk>vwb_lens X; vwb_lens Y;\n        \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n           s\\<^sub>1 \\<triangleleft>\\<^bsub>X\\<^esub>\n           s\\<^sub>2 \\<triangleleft>\\<^bsub>Y\\<^esub>\n           s\\<^sub>3 =\n           s\\<^sub>1 \\<triangleleft>\\<^bsub>Y\\<^esub>\n           s\\<^sub>3 \\<triangleleft>\\<^bsub>X\\<^esub>\n           s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> get\\<^bsub>X\\<^esub>\n                          (put\\<^bsub>Y\\<^esub> \\<sigma> v) =\n                         get\\<^bsub>X\\<^esub> \\<sigma>\n 3. \\<And>\\<sigma> u.\n       \\<lbrakk>vwb_lens X; vwb_lens Y;\n        \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n           s\\<^sub>1 \\<triangleleft>\\<^bsub>X\\<^esub>\n           s\\<^sub>2 \\<triangleleft>\\<^bsub>Y\\<^esub>\n           s\\<^sub>3 =\n           s\\<^sub>1 \\<triangleleft>\\<^bsub>Y\\<^esub>\n           s\\<^sub>3 \\<triangleleft>\\<^bsub>X\\<^esub>\n           s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> get\\<^bsub>Y\\<^esub>\n                          (put\\<^bsub>X\\<^esub> \\<sigma> u) =\n                         get\\<^bsub>Y\\<^esub> \\<sigma>", "apply (simp_all add: lens_override_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> v u.\n       \\<lbrakk>vwb_lens X; vwb_lens Y;\n        \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n           put\\<^bsub>Y\\<^esub>\n            (put\\<^bsub>X\\<^esub> s\\<^sub>1\n              (get\\<^bsub>X\\<^esub> s\\<^sub>2))\n            (get\\<^bsub>Y\\<^esub> s\\<^sub>3) =\n           put\\<^bsub>X\\<^esub>\n            (put\\<^bsub>Y\\<^esub> s\\<^sub>1\n              (get\\<^bsub>Y\\<^esub> s\\<^sub>3))\n            (get\\<^bsub>X\\<^esub> s\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> put\\<^bsub>X\\<^esub>\n                          (put\\<^bsub>Y\\<^esub> \\<sigma> v) u =\n                         put\\<^bsub>Y\\<^esub>\n                          (put\\<^bsub>X\\<^esub> \\<sigma> u) v\n 2. \\<And>\\<sigma> v.\n       \\<lbrakk>vwb_lens X; vwb_lens Y;\n        \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n           put\\<^bsub>Y\\<^esub>\n            (put\\<^bsub>X\\<^esub> s\\<^sub>1\n              (get\\<^bsub>X\\<^esub> s\\<^sub>2))\n            (get\\<^bsub>Y\\<^esub> s\\<^sub>3) =\n           put\\<^bsub>X\\<^esub>\n            (put\\<^bsub>Y\\<^esub> s\\<^sub>1\n              (get\\<^bsub>Y\\<^esub> s\\<^sub>3))\n            (get\\<^bsub>X\\<^esub> s\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> get\\<^bsub>X\\<^esub>\n                          (put\\<^bsub>Y\\<^esub> \\<sigma> v) =\n                         get\\<^bsub>X\\<^esub> \\<sigma>\n 3. \\<And>\\<sigma> u.\n       \\<lbrakk>vwb_lens X; vwb_lens Y;\n        \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n           put\\<^bsub>Y\\<^esub>\n            (put\\<^bsub>X\\<^esub> s\\<^sub>1\n              (get\\<^bsub>X\\<^esub> s\\<^sub>2))\n            (get\\<^bsub>Y\\<^esub> s\\<^sub>3) =\n           put\\<^bsub>X\\<^esub>\n            (put\\<^bsub>Y\\<^esub> s\\<^sub>1\n              (get\\<^bsub>Y\\<^esub> s\\<^sub>3))\n            (get\\<^bsub>X\\<^esub> s\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> get\\<^bsub>Y\\<^esub>\n                          (put\\<^bsub>X\\<^esub> \\<sigma> u) =\n                         get\\<^bsub>Y\\<^esub> \\<sigma>", "apply (metis mwb_lens_def vwb_lens_mwb weak_lens.put_get)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> v.\n       \\<lbrakk>vwb_lens X; vwb_lens Y;\n        \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n           put\\<^bsub>Y\\<^esub>\n            (put\\<^bsub>X\\<^esub> s\\<^sub>1\n              (get\\<^bsub>X\\<^esub> s\\<^sub>2))\n            (get\\<^bsub>Y\\<^esub> s\\<^sub>3) =\n           put\\<^bsub>X\\<^esub>\n            (put\\<^bsub>Y\\<^esub> s\\<^sub>1\n              (get\\<^bsub>Y\\<^esub> s\\<^sub>3))\n            (get\\<^bsub>X\\<^esub> s\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> get\\<^bsub>X\\<^esub>\n                          (put\\<^bsub>Y\\<^esub> \\<sigma> v) =\n                         get\\<^bsub>X\\<^esub> \\<sigma>\n 2. \\<And>\\<sigma> u.\n       \\<lbrakk>vwb_lens X; vwb_lens Y;\n        \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n           put\\<^bsub>Y\\<^esub>\n            (put\\<^bsub>X\\<^esub> s\\<^sub>1\n              (get\\<^bsub>X\\<^esub> s\\<^sub>2))\n            (get\\<^bsub>Y\\<^esub> s\\<^sub>3) =\n           put\\<^bsub>X\\<^esub>\n            (put\\<^bsub>Y\\<^esub> s\\<^sub>1\n              (get\\<^bsub>Y\\<^esub> s\\<^sub>3))\n            (get\\<^bsub>X\\<^esub> s\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> get\\<^bsub>Y\\<^esub>\n                          (put\\<^bsub>X\\<^esub> \\<sigma> u) =\n                         get\\<^bsub>Y\\<^esub> \\<sigma>", "apply (metis lens_override_def lens_override_idem mwb_lens_def vwb_lens_mwb weak_lens.put_get)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> u.\n       \\<lbrakk>vwb_lens X; vwb_lens Y;\n        \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n           put\\<^bsub>Y\\<^esub>\n            (put\\<^bsub>X\\<^esub> s\\<^sub>1\n              (get\\<^bsub>X\\<^esub> s\\<^sub>2))\n            (get\\<^bsub>Y\\<^esub> s\\<^sub>3) =\n           put\\<^bsub>X\\<^esub>\n            (put\\<^bsub>Y\\<^esub> s\\<^sub>1\n              (get\\<^bsub>Y\\<^esub> s\\<^sub>3))\n            (get\\<^bsub>X\\<^esub> s\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> get\\<^bsub>Y\\<^esub>\n                          (put\\<^bsub>X\\<^esub> \\<sigma> u) =\n                         get\\<^bsub>Y\\<^esub> \\<sigma>", "apply (metis mwb_lens_weak vwb_lens_mwb vwb_lens_wb wb_lens.get_put weak_lens.put_get)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lens_indep_override_def:\n  assumes \"vwb_lens X\" \"vwb_lens Y\"\n  shows \"X \\<bowtie> Y \\<longleftrightarrow> (\\<forall> s\\<^sub>1 s\\<^sub>2 s\\<^sub>3. s\\<^sub>1 \\<oplus>\\<^sub>L s\\<^sub>2 on X \\<oplus>\\<^sub>L s\\<^sub>3 on Y = s\\<^sub>1 \\<oplus>\\<^sub>L s\\<^sub>3 on Y \\<oplus>\\<^sub>L s\\<^sub>2 on X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X \\<bowtie> Y) =\n    (\\<forall>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n        s\\<^sub>1 \\<triangleleft>\\<^bsub>X\\<^esub>\n        s\\<^sub>2 \\<triangleleft>\\<^bsub>Y\\<^esub>\n        s\\<^sub>3 =\n        s\\<^sub>1 \\<triangleleft>\\<^bsub>Y\\<^esub>\n        s\\<^sub>3 \\<triangleleft>\\<^bsub>X\\<^esub>\n        s\\<^sub>2)", "by (metis assms(1) assms(2) lens_indep_comm lens_indep_overrideI lens_override_def)"], ["", "text \\<open> Alternative characterisation of very-well behaved lenses: override is idempotent. \\<close>"], ["", "lemma override_idem_implies_vwb:\n  \"\\<lbrakk> mwb_lens X; \\<And> s. s \\<oplus>\\<^sub>L s on X = s \\<rbrakk> \\<Longrightarrow> vwb_lens X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mwb_lens X;\n     \\<And>s. s \\<triangleleft>\\<^bsub>X\\<^esub> s = s\\<rbrakk>\n    \\<Longrightarrow> vwb_lens X", "by (unfold_locales, simp_all add: lens_defs)"], ["", "subsection \\<open> Alternative Sublens Characterisation \\<close>"], ["", "text \\<open> The following definition is equivalent to the above when the two lenses are very well behaved. \\<close>"], ["", "definition sublens' :: \"('a \\<Longrightarrow> 'c) \\<Rightarrow> ('b \\<Longrightarrow> 'c) \\<Rightarrow> bool\" (infix \"\\<subseteq>\\<^sub>L''\" 55) where\n[lens_defs]: \"sublens' X Y = (\\<forall> s\\<^sub>1 s\\<^sub>2 s\\<^sub>3. s\\<^sub>1 \\<oplus>\\<^sub>L s\\<^sub>2 on Y \\<oplus>\\<^sub>L s\\<^sub>3 on X = s\\<^sub>1 \\<oplus>\\<^sub>L s\\<^sub>2 \\<oplus>\\<^sub>L s\\<^sub>3 on X on Y)\""], ["", "text \\<open> We next prove some characteristic properties of our alternative definition of sublens. \\<close>"], ["", "lemma sublens'_prop1:\n  assumes \"vwb_lens X\" \"X \\<subseteq>\\<^sub>L' Y\"\n  shows \"put\\<^bsub>X\\<^esub> (put\\<^bsub>Y\\<^esub> s\\<^sub>1 (get\\<^bsub>Y\\<^esub> s\\<^sub>2)) s\\<^sub>3 = put\\<^bsub>Y\\<^esub> s\\<^sub>1 (get\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> s\\<^sub>2 s\\<^sub>3))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. put\\<^bsub>X\\<^esub>\n     (put\\<^bsub>Y\\<^esub> s\\<^sub>1 (get\\<^bsub>Y\\<^esub> s\\<^sub>2))\n     s\\<^sub>3 =\n    put\\<^bsub>Y\\<^esub> s\\<^sub>1\n     (get\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> s\\<^sub>2 s\\<^sub>3))", "using assms"], ["proof (prove)\nusing this:\n  vwb_lens X\n  X \\<subseteq>\\<^sub>L' Y\n\ngoal (1 subgoal):\n 1. put\\<^bsub>X\\<^esub>\n     (put\\<^bsub>Y\\<^esub> s\\<^sub>1 (get\\<^bsub>Y\\<^esub> s\\<^sub>2))\n     s\\<^sub>3 =\n    put\\<^bsub>Y\\<^esub> s\\<^sub>1\n     (get\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> s\\<^sub>2 s\\<^sub>3))", "by (simp add: sublens'_def, metis lens_override_def mwb_lens_def vwb_lens_mwb weak_lens.put_get)"], ["", "lemma sublens'_prop2:\n  assumes \"vwb_lens X\" \"X \\<subseteq>\\<^sub>L' Y\"\n  shows \"get\\<^bsub>X\\<^esub> (put\\<^bsub>Y\\<^esub> s\\<^sub>1 (get\\<^bsub>Y\\<^esub> s\\<^sub>2)) = get\\<^bsub>X\\<^esub> s\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. get\\<^bsub>X\\<^esub>\n     (put\\<^bsub>Y\\<^esub> s\\<^sub>1 (get\\<^bsub>Y\\<^esub> s\\<^sub>2)) =\n    get\\<^bsub>X\\<^esub> s\\<^sub>2", "using assms"], ["proof (prove)\nusing this:\n  vwb_lens X\n  X \\<subseteq>\\<^sub>L' Y\n\ngoal (1 subgoal):\n 1. get\\<^bsub>X\\<^esub>\n     (put\\<^bsub>Y\\<^esub> s\\<^sub>1 (get\\<^bsub>Y\\<^esub> s\\<^sub>2)) =\n    get\\<^bsub>X\\<^esub> s\\<^sub>2", "unfolding sublens'_def"], ["proof (prove)\nusing this:\n  vwb_lens X\n  \\<forall>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n     s\\<^sub>1 \\<triangleleft>\\<^bsub>Y\\<^esub>\n     s\\<^sub>2 \\<triangleleft>\\<^bsub>X\\<^esub>\n     s\\<^sub>3 =\n     s\\<^sub>1 \\<triangleleft>\\<^bsub>Y\\<^esub>\n     (s\\<^sub>2 \\<triangleleft>\\<^bsub>X\\<^esub> s\\<^sub>3)\n\ngoal (1 subgoal):\n 1. get\\<^bsub>X\\<^esub>\n     (put\\<^bsub>Y\\<^esub> s\\<^sub>1 (get\\<^bsub>Y\\<^esub> s\\<^sub>2)) =\n    get\\<^bsub>X\\<^esub> s\\<^sub>2", "by (metis lens_override_def vwb_lens_wb wb_lens_axioms_def wb_lens_def weak_lens.put_get)"], ["", "lemma sublens'_prop3:\n  assumes \"vwb_lens X\" \"vwb_lens Y\" \"X \\<subseteq>\\<^sub>L' Y\"\n  shows \"put\\<^bsub>Y\\<^esub> \\<sigma> (get\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> (put\\<^bsub>Y\\<^esub> \\<rho> (get\\<^bsub>Y\\<^esub> \\<sigma>)) v)) = put\\<^bsub>X\\<^esub> \\<sigma> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. put\\<^bsub>Y\\<^esub> \\<sigma>\n     (get\\<^bsub>Y\\<^esub>\n       (put\\<^bsub>X\\<^esub>\n         (put\\<^bsub>Y\\<^esub> \\<rho> (get\\<^bsub>Y\\<^esub> \\<sigma>)) v)) =\n    put\\<^bsub>X\\<^esub> \\<sigma> v", "by (metis assms(1) assms(2) assms(3) mwb_lens_def sublens'_prop1 vwb_lens.put_eq vwb_lens_mwb weak_lens.put_get)"], ["", "text \\<open> Finally we show our two definitions of sublens are equivalent, assuming very well behaved lenses. \\<close>"], ["", "lemma sublens'_implies_sublens:\n  assumes \"vwb_lens X\" \"vwb_lens Y\" \"X \\<subseteq>\\<^sub>L' Y\"\n  shows \"X \\<subseteq>\\<^sub>L Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<subseteq>\\<^sub>L Y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. X \\<subseteq>\\<^sub>L Y", "have \"vwb_lens (X /\\<^sub>L Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwb_lens (X /\\<^sub>L Y)", "by (unfold_locales\n       ,auto simp add: assms lens_quotient_def lens_comp_def lens_create_def sublens'_prop1 sublens'_prop2)"], ["proof (state)\nthis:\n  vwb_lens (X /\\<^sub>L Y)\n\ngoal (1 subgoal):\n 1. X \\<subseteq>\\<^sub>L Y", "moreover"], ["proof (state)\nthis:\n  vwb_lens (X /\\<^sub>L Y)\n\ngoal (1 subgoal):\n 1. X \\<subseteq>\\<^sub>L Y", "have \"X = X /\\<^sub>L Y ;\\<^sub>L Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X = X /\\<^sub>L Y ;\\<^sub>L Y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. X = X /\\<^sub>L Y ;\\<^sub>L Y", "have \"get\\<^bsub>X\\<^esub> = (\\<lambda>\\<sigma>. get\\<^bsub>X\\<^esub> (create\\<^bsub>Y\\<^esub> \\<sigma>)) \\<circ> get\\<^bsub>Y\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. get\\<^bsub>X\\<^esub> =\n    (\\<lambda>\\<sigma>.\n        get\\<^bsub>X\\<^esub> (create\\<^bsub>Y\\<^esub> \\<sigma>)) \\<circ>\n    get\\<^bsub>Y\\<^esub>", "by (rule ext, simp add: assms(1) assms(3) lens_create_def sublens'_prop2)"], ["proof (state)\nthis:\n  get\\<^bsub>X\\<^esub> =\n  (\\<lambda>\\<sigma>.\n      get\\<^bsub>X\\<^esub> (create\\<^bsub>Y\\<^esub> \\<sigma>)) \\<circ>\n  get\\<^bsub>Y\\<^esub>\n\ngoal (1 subgoal):\n 1. X = X /\\<^sub>L Y ;\\<^sub>L Y", "moreover"], ["proof (state)\nthis:\n  get\\<^bsub>X\\<^esub> =\n  (\\<lambda>\\<sigma>.\n      get\\<^bsub>X\\<^esub> (create\\<^bsub>Y\\<^esub> \\<sigma>)) \\<circ>\n  get\\<^bsub>Y\\<^esub>\n\ngoal (1 subgoal):\n 1. X = X /\\<^sub>L Y ;\\<^sub>L Y", "have \"put\\<^bsub>X\\<^esub> = (\\<lambda>\\<sigma> v. put\\<^bsub>Y\\<^esub> \\<sigma> (get\\<^bsub>Y\\<^esub> (put\\<^bsub>X\\<^esub> (create\\<^bsub>Y\\<^esub> (get\\<^bsub>Y\\<^esub> \\<sigma>)) v)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. put\\<^bsub>X\\<^esub> =\n    (\\<lambda>\\<sigma> v.\n        put\\<^bsub>Y\\<^esub> \\<sigma>\n         (get\\<^bsub>Y\\<^esub>\n           (put\\<^bsub>X\\<^esub>\n             (create\\<^bsub>Y\\<^esub> (get\\<^bsub>Y\\<^esub> \\<sigma>)) v)))", "by (rule ext, rule ext, simp add: assms(1) assms(2) assms(3) lens_create_def sublens'_prop3)"], ["proof (state)\nthis:\n  put\\<^bsub>X\\<^esub> =\n  (\\<lambda>\\<sigma> v.\n      put\\<^bsub>Y\\<^esub> \\<sigma>\n       (get\\<^bsub>Y\\<^esub>\n         (put\\<^bsub>X\\<^esub>\n           (create\\<^bsub>Y\\<^esub> (get\\<^bsub>Y\\<^esub> \\<sigma>)) v)))\n\ngoal (1 subgoal):\n 1. X = X /\\<^sub>L Y ;\\<^sub>L Y", "ultimately"], ["proof (chain)\npicking this:\n  get\\<^bsub>X\\<^esub> =\n  (\\<lambda>\\<sigma>.\n      get\\<^bsub>X\\<^esub> (create\\<^bsub>Y\\<^esub> \\<sigma>)) \\<circ>\n  get\\<^bsub>Y\\<^esub>\n  put\\<^bsub>X\\<^esub> =\n  (\\<lambda>\\<sigma> v.\n      put\\<^bsub>Y\\<^esub> \\<sigma>\n       (get\\<^bsub>Y\\<^esub>\n         (put\\<^bsub>X\\<^esub>\n           (create\\<^bsub>Y\\<^esub> (get\\<^bsub>Y\\<^esub> \\<sigma>)) v)))", "show ?thesis"], ["proof (prove)\nusing this:\n  get\\<^bsub>X\\<^esub> =\n  (\\<lambda>\\<sigma>.\n      get\\<^bsub>X\\<^esub> (create\\<^bsub>Y\\<^esub> \\<sigma>)) \\<circ>\n  get\\<^bsub>Y\\<^esub>\n  put\\<^bsub>X\\<^esub> =\n  (\\<lambda>\\<sigma> v.\n      put\\<^bsub>Y\\<^esub> \\<sigma>\n       (get\\<^bsub>Y\\<^esub>\n         (put\\<^bsub>X\\<^esub>\n           (create\\<^bsub>Y\\<^esub> (get\\<^bsub>Y\\<^esub> \\<sigma>)) v)))\n\ngoal (1 subgoal):\n 1. X = X /\\<^sub>L Y ;\\<^sub>L Y", "by (simp add: lens_quotient_def lens_comp_def)"], ["proof (state)\nthis:\n  X = X /\\<^sub>L Y ;\\<^sub>L Y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  X = X /\\<^sub>L Y ;\\<^sub>L Y\n\ngoal (1 subgoal):\n 1. X \\<subseteq>\\<^sub>L Y", "ultimately"], ["proof (chain)\npicking this:\n  vwb_lens (X /\\<^sub>L Y)\n  X = X /\\<^sub>L Y ;\\<^sub>L Y", "show ?thesis"], ["proof (prove)\nusing this:\n  vwb_lens (X /\\<^sub>L Y)\n  X = X /\\<^sub>L Y ;\\<^sub>L Y\n\ngoal (1 subgoal):\n 1. X \\<subseteq>\\<^sub>L Y", "using sublens_def"], ["proof (prove)\nusing this:\n  vwb_lens (X /\\<^sub>L Y)\n  X = X /\\<^sub>L Y ;\\<^sub>L Y\n  ?X \\<subseteq>\\<^sub>L ?Y =\n  (\\<exists>Z. vwb_lens Z \\<and> ?X = Z ;\\<^sub>L ?Y)\n\ngoal (1 subgoal):\n 1. X \\<subseteq>\\<^sub>L Y", "by blast"], ["proof (state)\nthis:\n  X \\<subseteq>\\<^sub>L Y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sublens_implies_sublens':\n  assumes \"vwb_lens Y\" \"X \\<subseteq>\\<^sub>L Y\"\n  shows \"X \\<subseteq>\\<^sub>L' Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<subseteq>\\<^sub>L' Y", "by (metis assms lens_override_def lens_override_put_right_in sublens'_def)"], ["", "lemma sublens_iff_sublens':\n  assumes \"vwb_lens X\" \"vwb_lens Y\"\n  shows \"X \\<subseteq>\\<^sub>L Y \\<longleftrightarrow> X \\<subseteq>\\<^sub>L' Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<subseteq>\\<^sub>L Y = X \\<subseteq>\\<^sub>L' Y", "using assms sublens'_implies_sublens sublens_implies_sublens'"], ["proof (prove)\nusing this:\n  vwb_lens X\n  vwb_lens Y\n  \\<lbrakk>vwb_lens ?X; vwb_lens ?Y; ?X \\<subseteq>\\<^sub>L' ?Y\\<rbrakk>\n  \\<Longrightarrow> ?X \\<subseteq>\\<^sub>L ?Y\n  \\<lbrakk>vwb_lens ?Y; ?X \\<subseteq>\\<^sub>L ?Y\\<rbrakk>\n  \\<Longrightarrow> ?X \\<subseteq>\\<^sub>L' ?Y\n\ngoal (1 subgoal):\n 1. X \\<subseteq>\\<^sub>L Y = X \\<subseteq>\\<^sub>L' Y", "by blast"], ["", "subsection \\<open> Alternative Equivalence Characterisation \\<close>"], ["", "definition lens_equiv' :: \"('a \\<Longrightarrow> 'c) \\<Rightarrow> ('b \\<Longrightarrow> 'c) \\<Rightarrow> bool\" (infix \"\\<approx>\\<^sub>L''\" 51) where\n[lens_defs]: \"lens_equiv' X Y = (\\<forall> s\\<^sub>1 s\\<^sub>2. (s\\<^sub>1 \\<oplus>\\<^sub>L s\\<^sub>2 on X = s\\<^sub>1 \\<oplus>\\<^sub>L s\\<^sub>2 on Y))\""], ["", "lemma lens_equiv_iff_lens_equiv':\n  assumes \"vwb_lens X\" \"vwb_lens Y\"\n  shows \"X \\<approx>\\<^sub>L Y \\<longleftrightarrow> X \\<approx>\\<^sub>L' Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<approx>\\<^sub>L Y = X \\<approx>\\<^sub>L' Y", "apply (simp add: lens_equiv_def sublens_iff_sublens' assms)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (X \\<subseteq>\\<^sub>L' Y \\<and> Y \\<subseteq>\\<^sub>L' X) =\n    X \\<approx>\\<^sub>L' Y", "apply (auto simp add: lens_defs assms)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2.\n       \\<lbrakk>\\<forall>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n                   put\\<^bsub>X\\<^esub>\n                    (put\\<^bsub>Y\\<^esub> s\\<^sub>1\n                      (get\\<^bsub>Y\\<^esub> s\\<^sub>2))\n                    (get\\<^bsub>X\\<^esub> s\\<^sub>3) =\n                   put\\<^bsub>Y\\<^esub> s\\<^sub>1\n                    (get\\<^bsub>Y\\<^esub>\n                      (put\\<^bsub>X\\<^esub> s\\<^sub>2\n                        (get\\<^bsub>X\\<^esub> s\\<^sub>3)));\n        \\<forall>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n           put\\<^bsub>Y\\<^esub>\n            (put\\<^bsub>X\\<^esub> s\\<^sub>1\n              (get\\<^bsub>X\\<^esub> s\\<^sub>2))\n            (get\\<^bsub>Y\\<^esub> s\\<^sub>3) =\n           put\\<^bsub>X\\<^esub> s\\<^sub>1\n            (get\\<^bsub>X\\<^esub>\n              (put\\<^bsub>Y\\<^esub> s\\<^sub>2\n                (get\\<^bsub>Y\\<^esub> s\\<^sub>3)))\\<rbrakk>\n       \\<Longrightarrow> put\\<^bsub>X\\<^esub> s\\<^sub>1\n                          (get\\<^bsub>X\\<^esub> s\\<^sub>2) =\n                         put\\<^bsub>Y\\<^esub> s\\<^sub>1\n                          (get\\<^bsub>Y\\<^esub> s\\<^sub>2)", "apply (metis assms(2) mwb_lens.put_put vwb_lens_mwb vwb_lens_wb wb_lens.get_put)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}