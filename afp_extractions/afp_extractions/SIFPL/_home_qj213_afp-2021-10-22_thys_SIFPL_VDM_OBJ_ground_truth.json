{"file_name": "/home/qj213/afp-2021-10-22/thys/SIFPL/VDM_OBJ.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/SIFPL", "problem_names": ["lemma VDM_valid_validn: \"\\<Turnstile> c:A \\<Longrightarrow> \\<Turnstile>\\<^sub>n c:A\"", "lemma VDM_validn_valid: \"(\\<forall> n . \\<Turnstile>\\<^sub>n c:A) \\<Longrightarrow> \\<Turnstile> c:A\"", "lemma VDM_lowerm: \"\\<lbrakk> \\<Turnstile>\\<^sub>n c:A; m < n \\<rbrakk> \\<Longrightarrow> \\<Turnstile>\\<^sub>m c:A\"", "lemma Ctxt_valid_validn: \"\\<Turnstile> G \\<Longrightarrow> \\<Turnstile>\\<^sub>n G\"", "lemma Ctxt_validn_valid: \"(\\<forall> n . \\<Turnstile>\\<^sub>n G) \\<Longrightarrow> \\<Turnstile> G\"", "lemma Ctxt_lowerm: \"\\<lbrakk> \\<Turnstile>\\<^sub>n G; m < n \\<rbrakk> \\<Longrightarrow> \\<Turnstile>\\<^sub>m G\"", "lemma validn_valid: \"(\\<forall> n . G \\<Turnstile>\\<^sub>n c : A) \\<Longrightarrow> G \\<Turnstile> c : A\"", "lemma ctxt_consn: \"\\<lbrakk> \\<Turnstile>\\<^sub>n G;  \\<Turnstile>\\<^sub>n Call:A \\<rbrakk> \\<Longrightarrow> \\<Turnstile>\\<^sub>n {A} \\<union> G\"", "lemma Hoare_While: \n \"G \\<rhd> c : (\\<lambda> s t . \\<forall> r . evalB b (fst s) \\<longrightarrow> I s r \\<longrightarrow> I t r) \\<Longrightarrow>\n  G \\<rhd> While b c : (\\<lambda> s t. \\<forall> r . I s r \\<longrightarrow> (I t r \\<and> \\<not> evalB b (fst t)))\"", "lemma VDMWhile_derivable:\n  \"\\<lbrakk> G \\<rhd> c : B; \\<forall> s . (\\<not> evalB b (fst s)) \\<longrightarrow> A s s;\n     \\<forall> s r t. evalB b (fst s) \\<longrightarrow> B s r \\<longrightarrow> A r t \\<longrightarrow> A s t \\<rbrakk>\n  \\<Longrightarrow> G \\<rhd> (While b c) : (\\<lambda> s t . A s t \\<and> \\<not> (evalB b (fst t)))\"", "lemma MAX:\"Suc (max k m) \\<le> n \\<Longrightarrow> k \\<le> n \\<and> m \\<le> n\"", "lemma SoundWhile[rule_format]:\n \"(\\<forall>n. G \\<Turnstile>\\<^sub>n c : B) \n    \\<longrightarrow> (\\<forall>s. (\\<not> evalB b (fst s)) \\<longrightarrow> A s s)\n    \\<longrightarrow> (\\<forall>s. evalB b (fst s)\n              \\<longrightarrow> (\\<forall>r. B s r \\<longrightarrow> (\\<forall>t. A r t \\<longrightarrow> A s t)))\n    \\<longrightarrow> G \\<Turnstile>\\<^sub>n (While b c) : (\\<lambda>s t. A s t \\<and> \\<not> evalB b (fst t))\"", "lemma SoundCall[rule_format]:\n\"\\<lbrakk>\\<forall>n. \\<Turnstile>\\<^sub>n ({A} \\<union> G) \\<longrightarrow> \\<Turnstile>\\<^sub>n body : A\\<rbrakk> \\<Longrightarrow> \\<Turnstile>\\<^sub>n G \\<longrightarrow> \\<Turnstile>\\<^sub>n Call : A\"", "lemma VDM_Sound_n: \"G \\<rhd> c: A \\<Longrightarrow> (\\<forall> n. G \\<Turnstile>\\<^sub>n c:A)\"", "theorem VDM_Sound: \"G \\<rhd> c: A \\<Longrightarrow> G \\<Turnstile> c:A\"", "lemma VDM_Sound_emptyCtxt:\"{} \\<rhd> c : A \\<Longrightarrow>  \\<Turnstile> c : A\"", "lemma WEAK[rule_format]:\n  \"G \\<rhd> c : A \\<Longrightarrow> (\\<forall> H . G \\<subseteq> H \\<longrightarrow> H \\<rhd> c :A)\"", "lemma CutAux: \n \"(H \\<rhd> c : A) \\<Longrightarrow>\n  (\\<forall> G P D . (H = (insert P D) \\<longrightarrow> G \\<rhd> Call :P \\<longrightarrow> (G \\<subseteq> D) \n             \\<longrightarrow> D \\<rhd> c:A))\"", "lemma Cut:\"\\<lbrakk> G \\<rhd> Call : P ; (insert P G) \\<rhd> c : A \\<rbrakk> \\<Longrightarrow> G \\<rhd> c : A\"", "lemma verified_preserved: \"\\<lbrakk>verified G; A:G\\<rbrakk> \\<Longrightarrow> verified (G - {A})\"", "lemma SetNonSingleton:\n  \"\\<lbrakk>G \\<noteq> {A}; A \\<in> G\\<rbrakk> \\<Longrightarrow> \\<exists>B. B \\<noteq> A \\<and> B \\<in> G\"", "lemma MutrecAux[rule_format]: \n\"\\<forall> G . ((finite G \\<and> card G = n \\<and> verified G \\<and> A : G) \\<longrightarrow> {} \\<rhd> Call:A)\"", "theorem Mutrec:\n\"\\<lbrakk> finite G; card G = n; verified G; A : G \\<rbrakk> \\<Longrightarrow> {} \\<rhd> Call:A\"", "lemma SSpec_valid: \"\\<Turnstile> c : (SSpec c)\"", "lemma SSpec_strong: \"\\<Turnstile> c :A \\<Longrightarrow> \\<forall> s t . SSpec c s t \\<longrightarrow> A s t\"", "lemma SSpec_derivable:\"G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c : SSpec c\"", "lemma StrongG_Body: \"StrongG \\<rhd> body : SSpec Call\"", "lemma StrongG_verified: \"verified StrongG\"", "lemma SSpec_derivable_empty:\"{} \\<rhd> c : SSpec c\"", "theorem VDM_Complete: \"\\<Turnstile> c : A \\<Longrightarrow> {} \\<rhd> c : A\"", "lemma Ctxt_valid_verified: \"\\<Turnstile> G \\<Longrightarrow> verified G\"", "lemma Ctxt_verified_valid: \"\\<lbrakk>verified G; finite G\\<rbrakk> \\<Longrightarrow> \\<Turnstile> G\""], "translations": [["", "lemma VDM_valid_validn: \"\\<Turnstile> c:A \\<Longrightarrow> \\<Turnstile>\\<^sub>n c:A\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  \\<Turnstile> c : A  \\<Longrightarrow>  \\<Turnstile>\\<^sub>n c : A", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1.  \\<Turnstile> c : A  \\<Longrightarrow>  \\<Turnstile>\\<^sub>n c : A", "by (simp add: VDM_valid_def VDM_validn_def Sem_def, fastforce)"], ["", "(*>*)"], ["", "lemma VDM_validn_valid: \"(\\<forall> n . \\<Turnstile>\\<^sub>n c:A) \\<Longrightarrow> \\<Turnstile> c:A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.  \\<Turnstile>\\<^sub>n c : A  \\<Longrightarrow>\n     \\<Turnstile> c : A", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.  \\<Turnstile>\\<^sub>n c : A  \\<Longrightarrow>\n     \\<Turnstile> c : A", "by (simp add: VDM_valid_def VDM_validn_def Sem_def, fastforce)"], ["", "(*>*)"], ["", "lemma VDM_lowerm: \"\\<lbrakk> \\<Turnstile>\\<^sub>n c:A; m < n \\<rbrakk> \\<Longrightarrow> \\<Turnstile>\\<^sub>m c:A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk> \\<Turnstile>\\<^sub>n c : A ; m < n\\<rbrakk>\n    \\<Longrightarrow>  \\<Turnstile>\\<^sub>m c : A", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk> \\<Turnstile>\\<^sub>n c : A ; m < n\\<rbrakk>\n    \\<Longrightarrow>  \\<Turnstile>\\<^sub>m c : A", "apply (simp add: VDM_validn_def, clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ma a b aa ba.\n       \\<lbrakk>\\<forall>m\\<le>n.\n                   \\<forall>a b aa ba.\n                       (a, b) , c \\<rightarrow>\\<^sub>m  (aa,\n                    ba)  \\<longrightarrow>\n                      A (a, b) (aa, ba);\n        m < n; ma \\<le> m;\n         (a, b) , c \\<rightarrow>\\<^sub>ma  (aa, ba) \\<rbrakk>\n       \\<Longrightarrow> A (a, b) (aa, ba)", "apply (erule_tac x=\"ma\" in allE, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "definition Ctxt_validn :: \"nat \\<Rightarrow> (Assn set) \\<Rightarrow> bool\"\n                       (\" \\<Turnstile>\\<^sub>_ _  \" 50)\nwhere \"(\\<Turnstile>\\<^sub>n G) = (\\<forall> m . m \\<le> n \\<longrightarrow> (\\<forall> A. A \\<in> G \\<longrightarrow> \\<Turnstile>\\<^sub>n Call : A))\""], ["", "definition Ctxt_valid :: \"Assn set \\<Rightarrow> bool\" (\" \\<Turnstile> _ \" 50)\nwhere \"(\\<Turnstile> G) = (\\<forall> A . A \\<in> G \\<longrightarrow> \\<Turnstile> Call : A)\""], ["", "lemma Ctxt_valid_validn: \"\\<Turnstile> G \\<Longrightarrow> \\<Turnstile>\\<^sub>n G\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  \\<Turnstile> G  \\<Longrightarrow>  \\<Turnstile>\\<^sub>n G", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1.  \\<Turnstile> G  \\<Longrightarrow>  \\<Turnstile>\\<^sub>n G", "apply (simp add: Ctxt_valid_def Ctxt_validn_def, clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m A.\n       \\<lbrakk>\\<forall>A.\n                   A \\<in> G \\<longrightarrow>  \\<Turnstile> Call : A ;\n        m \\<le> n; A \\<in> G\\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile>\\<^sub>n Call : A", "apply (rule VDM_valid_validn)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m A.\n       \\<lbrakk>\\<forall>A.\n                   A \\<in> G \\<longrightarrow>  \\<Turnstile> Call : A ;\n        m \\<le> n; A \\<in> G\\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile> Call : A", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma Ctxt_validn_valid: \"(\\<forall> n . \\<Turnstile>\\<^sub>n G) \\<Longrightarrow> \\<Turnstile> G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.  \\<Turnstile>\\<^sub>n G   \\<Longrightarrow>  \\<Turnstile> G", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.  \\<Turnstile>\\<^sub>n G   \\<Longrightarrow>  \\<Turnstile> G", "apply (simp add: Ctxt_valid_def Ctxt_validn_def, clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<lbrakk>\\<forall>n.\n                   (\\<exists>m. m \\<le> n) \\<longrightarrow>\n                   (\\<forall>A.\n                       A \\<in> G \\<longrightarrow>\n                        \\<Turnstile>\\<^sub>n Call : A );\n        A \\<in> G\\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile> Call : A", "apply (rule VDM_validn_valid)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<lbrakk>\\<forall>n.\n                   (\\<exists>m. m \\<le> n) \\<longrightarrow>\n                   (\\<forall>A.\n                       A \\<in> G \\<longrightarrow>\n                        \\<Turnstile>\\<^sub>n Call : A );\n        A \\<in> G\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.  \\<Turnstile>\\<^sub>n Call : A", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma Ctxt_lowerm: \"\\<lbrakk> \\<Turnstile>\\<^sub>n G; m < n \\<rbrakk> \\<Longrightarrow> \\<Turnstile>\\<^sub>m G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk> \\<Turnstile>\\<^sub>n G  ; m < n\\<rbrakk>\n    \\<Longrightarrow>  \\<Turnstile>\\<^sub>m G", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk> \\<Turnstile>\\<^sub>n G  ; m < n\\<rbrakk>\n    \\<Longrightarrow>  \\<Turnstile>\\<^sub>m G", "apply (simp add: Ctxt_validn_def, clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ma A.\n       \\<lbrakk>(\\<exists>m. m \\<le> n) \\<longrightarrow>\n                (\\<forall>A.\n                    A \\<in> G \\<longrightarrow>\n                     \\<Turnstile>\\<^sub>n Call : A );\n        m < n; ma \\<le> m; A \\<in> G\\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile>\\<^sub>m Call : A", "apply (rule VDM_lowerm)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ma A.\n       \\<lbrakk>(\\<exists>m. m \\<le> n) \\<longrightarrow>\n                (\\<forall>A.\n                    A \\<in> G \\<longrightarrow>\n                     \\<Turnstile>\\<^sub>n Call : A );\n        m < n; ma \\<le> m; A \\<in> G\\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile>\\<^sub>?n7 ma A Call : A \n 2. \\<And>ma A.\n       \\<lbrakk>(\\<exists>m. m \\<le> n) \\<longrightarrow>\n                (\\<forall>A.\n                    A \\<in> G \\<longrightarrow>\n                     \\<Turnstile>\\<^sub>n Call : A );\n        m < n; ma \\<le> m; A \\<in> G\\<rbrakk>\n       \\<Longrightarrow> m < ?n7 ma A", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ma A.\n       \\<lbrakk>(\\<exists>m. m \\<le> n) \\<longrightarrow>\n                (\\<forall>A.\n                    A \\<in> G \\<longrightarrow>\n                     \\<Turnstile>\\<^sub>n Call : A );\n        m < n; ma \\<le> m; A \\<in> G\\<rbrakk>\n       \\<Longrightarrow> m < ?n7 ma A\n 2. \\<And>ma A.\n       \\<lbrakk>(\\<exists>m. m \\<le> n) \\<longrightarrow>\n                (\\<forall>A.\n                    A \\<in> G \\<longrightarrow>\n                     \\<Turnstile>\\<^sub>n Call : A );\n        m < n; ma \\<le> m; A \\<in> G\\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile>\\<^sub>?n7 ma A Call : A", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ma A.\n       \\<lbrakk>(\\<exists>m. m \\<le> n) \\<longrightarrow>\n                (\\<forall>A.\n                    A \\<in> G \\<longrightarrow>\n                     \\<Turnstile>\\<^sub>n Call : A );\n        m < n; ma \\<le> m; A \\<in> G\\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile>\\<^sub>n Call : A", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "definition valid :: \"(Assn set) \\<Rightarrow> OBJ \\<Rightarrow> Assn \\<Rightarrow> bool\"\n                      (\"_ \\<Turnstile> _ : _ \" 50)\nwhere \"(G \\<Turnstile> c : A) = (Ctxt_valid G \\<longrightarrow> VDM_valid c A)\""], ["", "definition validn :: \"(Assn set) \\<Rightarrow> nat \\<Rightarrow> OBJ \\<Rightarrow> Assn \\<Rightarrow> bool\"\n                     (\"_ \\<Turnstile>\\<^sub>_ _ : _\" 50)\nwhere \"(G \\<Turnstile>\\<^sub>n c : A) = (\\<Turnstile>\\<^sub>n G \\<longrightarrow> \\<Turnstile>\\<^sub>n c : A)\""], ["", "lemma validn_valid: \"(\\<forall> n . G \\<Turnstile>\\<^sub>n c : A) \\<Longrightarrow> G \\<Turnstile> c : A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. G \\<Turnstile>\\<^sub>n c : A \\<Longrightarrow>\n    G \\<Turnstile> c : A", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. G \\<Turnstile>\\<^sub>n c : A \\<Longrightarrow>\n    G \\<Turnstile> c : A", "apply (simp add: valid_def validn_def, clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>n.\n                 \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n                 \\<Turnstile>\\<^sub>n c : A ;\n      \\<Turnstile> G \\<rbrakk>\n    \\<Longrightarrow>  \\<Turnstile> c : A", "apply (rule VDM_validn_valid, clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>n.\n                    \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n                    \\<Turnstile>\\<^sub>n c : A ;\n         \\<Turnstile> G \\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile>\\<^sub>n c : A", "apply (erule_tac x=n in allE, erule mp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.  \\<Turnstile> G  \\<Longrightarrow>  \\<Turnstile>\\<^sub>n G", "apply (erule Ctxt_valid_validn)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma ctxt_consn: \"\\<lbrakk> \\<Turnstile>\\<^sub>n G;  \\<Turnstile>\\<^sub>n Call:A \\<rbrakk> \\<Longrightarrow> \\<Turnstile>\\<^sub>n {A} \\<union> G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk> \\<Turnstile>\\<^sub>n G  ;\n      \\<Turnstile>\\<^sub>n Call : A \\<rbrakk>\n    \\<Longrightarrow>  \\<Turnstile>\\<^sub>n {A} \\<union> G", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk> \\<Turnstile>\\<^sub>n G  ;\n      \\<Turnstile>\\<^sub>n Call : A \\<rbrakk>\n    \\<Longrightarrow>  \\<Turnstile>\\<^sub>n {A} \\<union> G", "by (simp add: Ctxt_validn_def)"], ["", "(*>*)"], ["", "subsubsection\\<open>Proof system\\<close>"], ["", "inductive_set VDM_proof :: \"(Assn set \\<times> OBJ \\<times> Assn) set\"\nwhere\nVDMSkip: \"(G, Skip, \\<lambda> s t . t=s):VDM_proof\"\n\n| VDMAssign:\n  \"(G, Assign x e,\n       \\<lambda> s t . t = (update (fst s) x (evalE e (fst s)), snd s)):VDM_proof\"\n\n| VDMNew:\n  \"(G, New x C,\n       \\<lambda> s t . \\<exists> l . l \\<notin> Dom (snd s) \\<and> \n                         t = (update (fst s) x (RVal (Loc l)),\n                              (l,(C,[])) # (snd s))):VDM_proof\"\n\n| VDMGet:\n  \"(G, Get x y F,\n       \\<lambda> s t . \\<exists> l C Flds v. (fst s) y = RVal(Loc l) \\<and> \n                         lookup (snd s) l = Some(C,Flds) \\<and> \n                         lookup Flds F = Some v \\<and> \n                         t = (update (fst s) x v, snd s)):VDM_proof\"\n\n| VDMPut:\n  \"(G, Put x F e,\n       \\<lambda> s t . \\<exists> l C Flds. (fst s) x = RVal(Loc l) \\<and>\n                         lookup (snd s) l = Some(C,Flds) \\<and> \n                         t = (fst s, \n                              (l,(C,(F,evalE e (fst s)) # Flds))\n                                           # (snd s))):VDM_proof\"\n\n| VDMComp:\n  \"\\<lbrakk> (G, c, A):VDM_proof; (G, d, B):VDM_proof\\<rbrakk> \\<Longrightarrow>\n  (G, Comp c d, \\<lambda> s t . \\<exists> r . A s r \\<and> B r t):VDM_proof\"\n\n| VDMIff:\n  \"\\<lbrakk> (G, c, A):VDM_proof; (G, d, B):VDM_proof\\<rbrakk> \\<Longrightarrow> \n  (G, Iff b c d,\n     \\<lambda> s t . (((evalB b (fst s)) \\<longrightarrow> A s t) \\<and> \n                      ((\\<not> (evalB b (fst s))) \\<longrightarrow> B s t))):VDM_proof\"\n(*VDMWhile:  \"\\<lbrakk>\\<rhd> c : (\\<lambda> s t . (evalB b s \\<longrightarrow> I s t)); Trans I; Refl I\\<rbrakk>\n            \\<Longrightarrow> \\<rhd> (While b c) : (\\<lambda> s t . I s t \\<and> \\<not> (evalB b t))\"*)\n\n| VDMWhile:\n  \"\\<lbrakk> (G,c,B):VDM_proof;\n        \\<forall> s . (\\<not> evalB b (fst s)) \\<longrightarrow> A s s;\n        \\<forall> s r t. evalB b (fst s) \\<longrightarrow> B s r \\<longrightarrow> A r t \\<longrightarrow> A s t \\<rbrakk>\n \\<Longrightarrow> (G, While b c, \\<lambda> s t . A s t \\<and> \\<not> (evalB b (fst t))):VDM_proof\"\n\n| VDMCall:\n  \"({A} \\<union> G, body, A):VDM_proof \\<Longrightarrow> (G, Call, A):VDM_proof\"\n\n| VDMAx: \"A \\<in> G \\<Longrightarrow>  (G, Call, A):VDM_proof\"\n\n| VDMConseq:\n  \"\\<lbrakk> (G, c,A):VDM_proof; \\<forall> s t. A s t \\<longrightarrow> B s t\\<rbrakk> \\<Longrightarrow>\n  (G, c, B):VDM_proof\""], ["", "abbreviation VDM_deriv :: \"[Assn set, OBJ, Assn] \\<Rightarrow> bool\" \n                   (\"_ \\<rhd> _ : _\" [100,100] 50)\nwhere \"G \\<rhd> c : A == (G,c,A) \\<in> VDM_proof\""], ["", "text\\<open>The while-rule is in fact inter-derivable with the following rule.\\<close>"], ["", "lemma Hoare_While: \n \"G \\<rhd> c : (\\<lambda> s t . \\<forall> r . evalB b (fst s) \\<longrightarrow> I s r \\<longrightarrow> I t r) \\<Longrightarrow>\n  G \\<rhd> While b c : (\\<lambda> s t. \\<forall> r . I s r \\<longrightarrow> (I t r \\<and> \\<not> evalB b (fst t)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<rhd> c : \\<lambda>s t.\n                    \\<forall>r.\n                       evalB b (fst s) \\<longrightarrow>\n                       I s r \\<longrightarrow> I t r \\<Longrightarrow>\n    G \\<rhd> While b\n              c : \\<lambda>s t.\n                     \\<forall>r.\n                        I s r \\<longrightarrow>\n                        I t r \\<and> \\<not> evalB b (fst t)", "apply (subgoal_tac \"G \\<rhd> (While b c) : \n           (\\<lambda> s t . (\\<lambda> s t . \\<forall>r. I s r \\<longrightarrow> I t r) s t \\<and> \\<not> (evalB b (fst t)))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>G \\<rhd> c : \\<lambda>s t.\n                             \\<forall>r.\n                                evalB b (fst s) \\<longrightarrow>\n                                I s r \\<longrightarrow> I t r;\n     G \\<rhd> While b\n               c : \\<lambda>s t.\n                      (\\<forall>r. I s r \\<longrightarrow> I t r) \\<and>\n                      \\<not> evalB b (fst t)\\<rbrakk>\n    \\<Longrightarrow> G \\<rhd> While b\n                                c : \\<lambda>s t.\n \\<forall>r. I s r \\<longrightarrow> I t r \\<and> \\<not> evalB b (fst t)\n 2. G \\<rhd> c : \\<lambda>s t.\n                    \\<forall>r.\n                       evalB b (fst s) \\<longrightarrow>\n                       I s r \\<longrightarrow> I t r \\<Longrightarrow>\n    G \\<rhd> While b\n              c : \\<lambda>s t.\n                     (\\<forall>r. I s r \\<longrightarrow> I t r) \\<and>\n                     \\<not> evalB b (fst t)", "apply (erule VDMConseq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. G \\<rhd> c : \\<lambda>s t.\n                    \\<forall>r.\n                       evalB b (fst s) \\<longrightarrow>\n                       I s r \\<longrightarrow> I t r \\<Longrightarrow>\n    \\<forall>s t.\n       (\\<forall>r. I s r \\<longrightarrow> I t r) \\<and>\n       \\<not> evalB b (fst t) \\<longrightarrow>\n       (\\<forall>r.\n           I s r \\<longrightarrow> I t r \\<and> \\<not> evalB b (fst t))\n 2. G \\<rhd> c : \\<lambda>s t.\n                    \\<forall>r.\n                       evalB b (fst s) \\<longrightarrow>\n                       I s r \\<longrightarrow> I t r \\<Longrightarrow>\n    G \\<rhd> While b\n              c : \\<lambda>s t.\n                     (\\<forall>r. I s r \\<longrightarrow> I t r) \\<and>\n                     \\<not> evalB b (fst t)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<rhd> c : \\<lambda>s t.\n                    \\<forall>r.\n                       evalB b (fst s) \\<longrightarrow>\n                       I s r \\<longrightarrow> I t r \\<Longrightarrow>\n    G \\<rhd> While b\n              c : \\<lambda>s t.\n                     (\\<forall>r. I s r \\<longrightarrow> I t r) \\<and>\n                     \\<not> evalB b (fst t)", "apply (rule VDMWhile)"], ["proof (prove)\ngoal (3 subgoals):\n 1. G \\<rhd> c : \\<lambda>s t.\n                    \\<forall>r.\n                       evalB b (fst s) \\<longrightarrow>\n                       I s r \\<longrightarrow> I t r \\<Longrightarrow>\n    G \\<rhd> c : ?B5\n 2. G \\<rhd> c : \\<lambda>s t.\n                    \\<forall>r.\n                       evalB b (fst s) \\<longrightarrow>\n                       I s r \\<longrightarrow> I t r \\<Longrightarrow>\n    \\<forall>s.\n       \\<not> evalB b (fst s) \\<longrightarrow>\n       (\\<forall>r. I s r \\<longrightarrow> I s r)\n 3. G \\<rhd> c : \\<lambda>s t.\n                    \\<forall>r.\n                       evalB b (fst s) \\<longrightarrow>\n                       I s r \\<longrightarrow> I t r \\<Longrightarrow>\n    \\<forall>s r t.\n       evalB b (fst s) \\<longrightarrow>\n       ?B5 s r \\<longrightarrow>\n       (\\<forall>ra. I r ra \\<longrightarrow> I t ra) \\<longrightarrow>\n       (\\<forall>r. I s r \\<longrightarrow> I t r)", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. G \\<rhd> c : \\<lambda>s t.\n                    \\<forall>r.\n                       evalB b (fst s) \\<longrightarrow>\n                       I s r \\<longrightarrow> I t r \\<Longrightarrow>\n    \\<forall>s.\n       \\<not> evalB b (fst s) \\<longrightarrow>\n       (\\<forall>r. I s r \\<longrightarrow> I s r)\n 2. G \\<rhd> c : \\<lambda>s t.\n                    \\<forall>r.\n                       evalB b (fst s) \\<longrightarrow>\n                       I s r \\<longrightarrow> I t r \\<Longrightarrow>\n    \\<forall>s r t.\n       evalB b (fst s) \\<longrightarrow>\n       (\\<forall>ra.\n           evalB b (fst s) \\<longrightarrow>\n           I s ra \\<longrightarrow> I r ra) \\<longrightarrow>\n       (\\<forall>ra. I r ra \\<longrightarrow> I t ra) \\<longrightarrow>\n       (\\<forall>r. I s r \\<longrightarrow> I t r)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<rhd> c : \\<lambda>s t.\n                    \\<forall>r.\n                       evalB b (fst s) \\<longrightarrow>\n                       I s r \\<longrightarrow> I t r \\<Longrightarrow>\n    \\<forall>s r t.\n       evalB b (fst s) \\<longrightarrow>\n       (\\<forall>ra.\n           evalB b (fst s) \\<longrightarrow>\n           I s ra \\<longrightarrow> I r ra) \\<longrightarrow>\n       (\\<forall>ra. I r ra \\<longrightarrow> I t ra) \\<longrightarrow>\n       (\\<forall>r. I s r \\<longrightarrow> I t r)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text\\<open>Here's the proof in the opposite direction.\\<close>"], ["", "lemma VDMWhile_derivable:\n  \"\\<lbrakk> G \\<rhd> c : B; \\<forall> s . (\\<not> evalB b (fst s)) \\<longrightarrow> A s s;\n     \\<forall> s r t. evalB b (fst s) \\<longrightarrow> B s r \\<longrightarrow> A r t \\<longrightarrow> A s t \\<rbrakk>\n  \\<Longrightarrow> G \\<rhd> (While b c) : (\\<lambda> s t . A s t \\<and> \\<not> (evalB b (fst t)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<rhd> c : B;\n     \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n     \\<forall>s r t.\n        evalB b (fst s) \\<longrightarrow>\n        B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n    \\<Longrightarrow> G \\<rhd> While b\n                                c : \\<lambda>s t.\n A s t \\<and> \\<not> evalB b (fst t)", "apply (rule VDMConseq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>G \\<rhd> c : B;\n     \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n     \\<forall>s r t.\n        evalB b (fst s) \\<longrightarrow>\n        B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n    \\<Longrightarrow> G \\<rhd> While b c : ?A\n 2. \\<lbrakk>G \\<rhd> c : B;\n     \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n     \\<forall>s r t.\n        evalB b (fst s) \\<longrightarrow>\n        B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n    \\<Longrightarrow> \\<forall>s t.\n                         ?A s t \\<longrightarrow>\n                         A s t \\<and> \\<not> evalB b (fst t)", "apply (rule Hoare_While [of G c b \"\\<lambda> s r . \\<forall> t . A s t \\<longrightarrow> A r t\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>G \\<rhd> c : B;\n     \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n     \\<forall>s r t.\n        evalB b (fst s) \\<longrightarrow>\n        B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n    \\<Longrightarrow> G \\<rhd> c : \\<lambda>s t.\n\\<forall>r.\n   evalB b (fst s) \\<longrightarrow>\n   (\\<forall>t. A s t \\<longrightarrow> A r t) \\<longrightarrow>\n   (\\<forall>ta. A t ta \\<longrightarrow> A r ta)\n 2. \\<lbrakk>G \\<rhd> c : B;\n     \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n     \\<forall>s r t.\n        evalB b (fst s) \\<longrightarrow>\n        B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n    \\<Longrightarrow> \\<forall>s t.\n                         (\\<forall>r.\n                             (\\<forall>t.\n                                 A s t \\<longrightarrow>\n                                 A r t) \\<longrightarrow>\n                             (\\<forall>ta.\n                                 A t ta \\<longrightarrow> A r ta) \\<and>\n                             \\<not> evalB b (fst t)) \\<longrightarrow>\n                         A s t \\<and> \\<not> evalB b (fst t)", "apply (erule VDMConseq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n     \\<forall>s r t.\n        evalB b (fst s) \\<longrightarrow>\n        B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n    \\<Longrightarrow> \\<forall>s t.\n                         B s t \\<longrightarrow>\n                         (\\<forall>r.\n                             evalB b (fst s) \\<longrightarrow>\n                             (\\<forall>t.\n                                 A s t \\<longrightarrow>\n                                 A r t) \\<longrightarrow>\n                             (\\<forall>ta. A t ta \\<longrightarrow> A r ta))\n 2. \\<lbrakk>G \\<rhd> c : B;\n     \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n     \\<forall>s r t.\n        evalB b (fst s) \\<longrightarrow>\n        B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n    \\<Longrightarrow> \\<forall>s t.\n                         (\\<forall>r.\n                             (\\<forall>t.\n                                 A s t \\<longrightarrow>\n                                 A r t) \\<longrightarrow>\n                             (\\<forall>ta.\n                                 A t ta \\<longrightarrow> A r ta) \\<and>\n                             \\<not> evalB b (fst t)) \\<longrightarrow>\n                         A s t \\<and> \\<not> evalB b (fst t)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<rhd> c : B;\n     \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n     \\<forall>s r t.\n        evalB b (fst s) \\<longrightarrow>\n        B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n    \\<Longrightarrow> \\<forall>s t.\n                         (\\<forall>r.\n                             (\\<forall>t.\n                                 A s t \\<longrightarrow>\n                                 A r t) \\<longrightarrow>\n                             (\\<forall>ta.\n                                 A t ta \\<longrightarrow> A r ta) \\<and>\n                             \\<not> evalB b (fst t)) \\<longrightarrow>\n                         A s t \\<and> \\<not> evalB b (fst t)", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection\\<open>Soundness\\<close>"], ["", "(*<*)"], ["", "lemma MAX:\"Suc (max k m) \\<le> n \\<Longrightarrow> k \\<le> n \\<and> m \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (max k m) \\<le> n \\<Longrightarrow> k \\<le> n \\<and> m \\<le> n", "by (simp add: max_def, case_tac \"k \\<le> m\", simp+)"], ["", "(*>*)"], ["", "text\\<open>The following auxiliary lemma for loops is proven by induction\non $n$.\\<close>"], ["", "lemma SoundWhile[rule_format]:\n \"(\\<forall>n. G \\<Turnstile>\\<^sub>n c : B) \n    \\<longrightarrow> (\\<forall>s. (\\<not> evalB b (fst s)) \\<longrightarrow> A s s)\n    \\<longrightarrow> (\\<forall>s. evalB b (fst s)\n              \\<longrightarrow> (\\<forall>r. B s r \\<longrightarrow> (\\<forall>t. A r t \\<longrightarrow> A s t)))\n    \\<longrightarrow> G \\<Turnstile>\\<^sub>n (While b c) : (\\<lambda>s t. A s t \\<and> \\<not> evalB b (fst t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>n. G \\<Turnstile>\\<^sub>n c : B) \\<longrightarrow>\n    (\\<forall>s.\n        \\<not> evalB b (fst s) \\<longrightarrow> A s s) \\<longrightarrow>\n    (\\<forall>s.\n        evalB b (fst s) \\<longrightarrow>\n        (\\<forall>r.\n            B s r \\<longrightarrow>\n            (\\<forall>t. A r t \\<longrightarrow> A s t))) \\<longrightarrow>\n    G \\<Turnstile>\\<^sub>n While b\n                            c : \\<lambda>s t.\n                                   A s t \\<and> \\<not> evalB b (fst t)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>n. G \\<Turnstile>\\<^sub>n c : B) \\<longrightarrow>\n    (\\<forall>s.\n        \\<not> evalB b (fst s) \\<longrightarrow> A s s) \\<longrightarrow>\n    (\\<forall>s.\n        evalB b (fst s) \\<longrightarrow>\n        (\\<forall>r.\n            B s r \\<longrightarrow>\n            (\\<forall>t. A r t \\<longrightarrow> A s t))) \\<longrightarrow>\n    G \\<Turnstile>\\<^sub>n While b\n                            c : \\<lambda>s t.\n                                   A s t \\<and> \\<not> evalB b (fst t)", "apply (induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<forall>n. G \\<Turnstile>\\<^sub>n c : B) \\<longrightarrow>\n    (\\<forall>s.\n        \\<not> evalB b (fst s) \\<longrightarrow> A s s) \\<longrightarrow>\n    (\\<forall>s.\n        evalB b (fst s) \\<longrightarrow>\n        (\\<forall>r.\n            B s r \\<longrightarrow>\n            (\\<forall>t. A r t \\<longrightarrow> A s t))) \\<longrightarrow>\n    G \\<Turnstile>\\<^sub>0 While b\n                            c : \\<lambda>s t.\n                                   A s t \\<and> \\<not> evalB b (fst t)\n 2. \\<And>n.\n       (\\<forall>n. G \\<Turnstile>\\<^sub>n c : B) \\<longrightarrow>\n       (\\<forall>s.\n           \\<not> evalB b (fst s) \\<longrightarrow> A s s) \\<longrightarrow>\n       (\\<forall>s.\n           evalB b (fst s) \\<longrightarrow>\n           (\\<forall>r.\n               B s r \\<longrightarrow>\n               (\\<forall>t.\n                   A r t \\<longrightarrow> A s t))) \\<longrightarrow>\n       G \\<Turnstile>\\<^sub>n While b\n                               c : \\<lambda>s t.\nA s t \\<and> \\<not> evalB b (fst t) \\<Longrightarrow>\n       (\\<forall>n. G \\<Turnstile>\\<^sub>n c : B) \\<longrightarrow>\n       (\\<forall>s.\n           \\<not> evalB b (fst s) \\<longrightarrow> A s s) \\<longrightarrow>\n       (\\<forall>s.\n           evalB b (fst s) \\<longrightarrow>\n           (\\<forall>r.\n               B s r \\<longrightarrow>\n               (\\<forall>t.\n                   A r t \\<longrightarrow> A s t))) \\<longrightarrow>\n       G \\<Turnstile>\\<^sub>Suc n While b\n                                   c : \\<lambda>s t.\n    A s t \\<and> \\<not> evalB b (fst t)", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>n. G \\<Turnstile>\\<^sub>n c : B;\n     \\<forall>a.\n        \\<not> evalB b a \\<longrightarrow> (\\<forall>b. A (a, b) (a, b));\n     \\<forall>a.\n        evalB b a \\<longrightarrow>\n        (\\<forall>b aa ba.\n            B (a, b) (aa, ba) \\<longrightarrow>\n            (\\<forall>ab bb.\n                A (aa, ba) (ab, bb) \\<longrightarrow>\n                A (a, b) (ab, bb)))\\<rbrakk>\n    \\<Longrightarrow> G \\<Turnstile>\\<^sub>0 While b\n        c : \\<lambda>s t. A s t \\<and> \\<not> evalB b (fst t)\n 2. \\<And>n.\n       (\\<forall>n. G \\<Turnstile>\\<^sub>n c : B) \\<longrightarrow>\n       (\\<forall>s.\n           \\<not> evalB b (fst s) \\<longrightarrow> A s s) \\<longrightarrow>\n       (\\<forall>s.\n           evalB b (fst s) \\<longrightarrow>\n           (\\<forall>r.\n               B s r \\<longrightarrow>\n               (\\<forall>t.\n                   A r t \\<longrightarrow> A s t))) \\<longrightarrow>\n       G \\<Turnstile>\\<^sub>n While b\n                               c : \\<lambda>s t.\nA s t \\<and> \\<not> evalB b (fst t) \\<Longrightarrow>\n       (\\<forall>n. G \\<Turnstile>\\<^sub>n c : B) \\<longrightarrow>\n       (\\<forall>s.\n           \\<not> evalB b (fst s) \\<longrightarrow> A s s) \\<longrightarrow>\n       (\\<forall>s.\n           evalB b (fst s) \\<longrightarrow>\n           (\\<forall>r.\n               B s r \\<longrightarrow>\n               (\\<forall>t.\n                   A r t \\<longrightarrow> A s t))) \\<longrightarrow>\n       G \\<Turnstile>\\<^sub>Suc n While b\n                                   c : \\<lambda>s t.\n    A s t \\<and> \\<not> evalB b (fst t)", "apply (simp add: validn_def VDM_validn_def, clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a ba aa baa.\n       \\<lbrakk>\\<forall>n.\n                    \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n                   (\\<forall>m\\<le>n.\n                       \\<forall>a b aa ba.\n                           (a, b) , c \\<rightarrow>\\<^sub>m  (aa,\n                        ba)  \\<longrightarrow>\n                          B (a, b) (aa, ba));\n        \\<forall>a.\n           \\<not> evalB b a \\<longrightarrow> (\\<forall>b. A (a, b) (a, b));\n        \\<forall>a.\n           evalB b a \\<longrightarrow>\n           (\\<forall>b aa ba.\n               B (a, b) (aa, ba) \\<longrightarrow>\n               (\\<forall>ab bb.\n                   A (aa, ba) (ab, bb) \\<longrightarrow>\n                   A (a, b) (ab, bb)));\n         \\<Turnstile>\\<^sub>0 G  ;\n         (a, ba) , While b c \\<rightarrow>\\<^sub>0  (aa, baa) \\<rbrakk>\n       \\<Longrightarrow> A (a, ba) (aa, baa) \\<and> \\<not> evalB b aa\n 2. \\<And>n.\n       (\\<forall>n. G \\<Turnstile>\\<^sub>n c : B) \\<longrightarrow>\n       (\\<forall>s.\n           \\<not> evalB b (fst s) \\<longrightarrow> A s s) \\<longrightarrow>\n       (\\<forall>s.\n           evalB b (fst s) \\<longrightarrow>\n           (\\<forall>r.\n               B s r \\<longrightarrow>\n               (\\<forall>t.\n                   A r t \\<longrightarrow> A s t))) \\<longrightarrow>\n       G \\<Turnstile>\\<^sub>n While b\n                               c : \\<lambda>s t.\nA s t \\<and> \\<not> evalB b (fst t) \\<Longrightarrow>\n       (\\<forall>n. G \\<Turnstile>\\<^sub>n c : B) \\<longrightarrow>\n       (\\<forall>s.\n           \\<not> evalB b (fst s) \\<longrightarrow> A s s) \\<longrightarrow>\n       (\\<forall>s.\n           evalB b (fst s) \\<longrightarrow>\n           (\\<forall>r.\n               B s r \\<longrightarrow>\n               (\\<forall>t.\n                   A r t \\<longrightarrow> A s t))) \\<longrightarrow>\n       G \\<Turnstile>\\<^sub>Suc n While b\n                                   c : \\<lambda>s t.\n    A s t \\<and> \\<not> evalB b (fst t)", "apply (drule Sem_no_zero_height_derivs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a ba aa baa.\n       \\<lbrakk>\\<forall>n.\n                    \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n                   (\\<forall>m\\<le>n.\n                       \\<forall>a b aa ba.\n                           (a, b) , c \\<rightarrow>\\<^sub>m  (aa,\n                        ba)  \\<longrightarrow>\n                          B (a, b) (aa, ba));\n        \\<forall>a.\n           \\<not> evalB b a \\<longrightarrow> (\\<forall>b. A (a, b) (a, b));\n        \\<forall>a.\n           evalB b a \\<longrightarrow>\n           (\\<forall>b aa ba.\n               B (a, b) (aa, ba) \\<longrightarrow>\n               (\\<forall>ab bb.\n                   A (aa, ba) (ab, bb) \\<longrightarrow>\n                   A (a, b) (ab, bb)));\n         \\<Turnstile>\\<^sub>0 G  ; False\\<rbrakk>\n       \\<Longrightarrow> A (a, ba) (aa, baa) \\<and> \\<not> evalB b aa\n 2. \\<And>n.\n       (\\<forall>n. G \\<Turnstile>\\<^sub>n c : B) \\<longrightarrow>\n       (\\<forall>s.\n           \\<not> evalB b (fst s) \\<longrightarrow> A s s) \\<longrightarrow>\n       (\\<forall>s.\n           evalB b (fst s) \\<longrightarrow>\n           (\\<forall>r.\n               B s r \\<longrightarrow>\n               (\\<forall>t.\n                   A r t \\<longrightarrow> A s t))) \\<longrightarrow>\n       G \\<Turnstile>\\<^sub>n While b\n                               c : \\<lambda>s t.\nA s t \\<and> \\<not> evalB b (fst t) \\<Longrightarrow>\n       (\\<forall>n. G \\<Turnstile>\\<^sub>n c : B) \\<longrightarrow>\n       (\\<forall>s.\n           \\<not> evalB b (fst s) \\<longrightarrow> A s s) \\<longrightarrow>\n       (\\<forall>s.\n           evalB b (fst s) \\<longrightarrow>\n           (\\<forall>r.\n               B s r \\<longrightarrow>\n               (\\<forall>t.\n                   A r t \\<longrightarrow> A s t))) \\<longrightarrow>\n       G \\<Turnstile>\\<^sub>Suc n While b\n                                   c : \\<lambda>s t.\n    A s t \\<and> \\<not> evalB b (fst t)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<forall>n. G \\<Turnstile>\\<^sub>n c : B) \\<longrightarrow>\n       (\\<forall>s.\n           \\<not> evalB b (fst s) \\<longrightarrow> A s s) \\<longrightarrow>\n       (\\<forall>s.\n           evalB b (fst s) \\<longrightarrow>\n           (\\<forall>r.\n               B s r \\<longrightarrow>\n               (\\<forall>t.\n                   A r t \\<longrightarrow> A s t))) \\<longrightarrow>\n       G \\<Turnstile>\\<^sub>n While b\n                               c : \\<lambda>s t.\nA s t \\<and> \\<not> evalB b (fst t) \\<Longrightarrow>\n       (\\<forall>n. G \\<Turnstile>\\<^sub>n c : B) \\<longrightarrow>\n       (\\<forall>s.\n           \\<not> evalB b (fst s) \\<longrightarrow> A s s) \\<longrightarrow>\n       (\\<forall>s.\n           evalB b (fst s) \\<longrightarrow>\n           (\\<forall>r.\n               B s r \\<longrightarrow>\n               (\\<forall>t.\n                   A r t \\<longrightarrow> A s t))) \\<longrightarrow>\n       G \\<Turnstile>\\<^sub>Suc n While b\n                                   c : \\<lambda>s t.\n    A s t \\<and> \\<not> evalB b (fst t)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>n. G \\<Turnstile>\\<^sub>n c : B;\n        \\<forall>a.\n           \\<not> evalB b a \\<longrightarrow> (\\<forall>b. A (a, b) (a, b));\n        \\<forall>a.\n           evalB b a \\<longrightarrow>\n           (\\<forall>b aa ba.\n               B (a, b) (aa, ba) \\<longrightarrow>\n               (\\<forall>ab bb.\n                   A (aa, ba) (ab, bb) \\<longrightarrow>\n                   A (a, b) (ab, bb)));\n        G \\<Turnstile>\\<^sub>n While b\n                                c : \\<lambda>s t.\n A s t \\<and> \\<not> evalB b (fst t)\\<rbrakk>\n       \\<Longrightarrow> G \\<Turnstile>\\<^sub>Suc\n         n While b c : \\<lambda>s t. A s t \\<and> \\<not> evalB b (fst t)", "apply (simp add: validn_def VDM_validn_def, clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n m a ba aa baa.\n       \\<lbrakk>\\<forall>n.\n                    \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n                   (\\<forall>m\\<le>n.\n                       \\<forall>a b aa ba.\n                           (a, b) , c \\<rightarrow>\\<^sub>m  (aa,\n                        ba)  \\<longrightarrow>\n                          B (a, b) (aa, ba));\n        \\<forall>a.\n           \\<not> evalB b a \\<longrightarrow> (\\<forall>b. A (a, b) (a, b));\n        \\<forall>a.\n           evalB b a \\<longrightarrow>\n           (\\<forall>b aa ba.\n               B (a, b) (aa, ba) \\<longrightarrow>\n               (\\<forall>ab bb.\n                   A (aa, ba) (ab, bb) \\<longrightarrow>\n                   A (a, b) (ab, bb)));\n         \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n        (\\<forall>m\\<le>n.\n            \\<forall>a ba aa bb.\n                (a, ba) , While b\n                           c \\<rightarrow>\\<^sub>m  (aa,\n               bb)  \\<longrightarrow>\n               A (a, ba) (aa, bb) \\<and> \\<not> evalB b aa);\n         \\<Turnstile>\\<^sub>Suc n G  ; m \\<le> Suc n;\n         (a, ba) , While b c \\<rightarrow>\\<^sub>m  (aa, baa) \\<rbrakk>\n       \\<Longrightarrow> A (a, ba) (aa, baa) \\<and> \\<not> evalB b aa", "apply (erule Sem_eval_cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n m a ba aa baa na r ma.\n       \\<lbrakk>\\<forall>n.\n                    \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n                   (\\<forall>m\\<le>n.\n                       \\<forall>a b aa ba.\n                           (a, b) , c \\<rightarrow>\\<^sub>m  (aa,\n                        ba)  \\<longrightarrow>\n                          B (a, b) (aa, ba));\n        \\<forall>a.\n           \\<not> evalB b a \\<longrightarrow> (\\<forall>b. A (a, b) (a, b));\n        \\<forall>a.\n           evalB b a \\<longrightarrow>\n           (\\<forall>b aa ba.\n               B (a, b) (aa, ba) \\<longrightarrow>\n               (\\<forall>ab bb.\n                   A (aa, ba) (ab, bb) \\<longrightarrow>\n                   A (a, b) (ab, bb)));\n         \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n        (\\<forall>m\\<le>n.\n            \\<forall>a ba aa bb.\n                (a, ba) , While b\n                           c \\<rightarrow>\\<^sub>m  (aa,\n               bb)  \\<longrightarrow>\n               A (a, ba) (aa, bb) \\<and> \\<not> evalB b aa);\n         \\<Turnstile>\\<^sub>Suc n G  ; m \\<le> Suc n; m = Suc (max na ma);\n        evalB b (fst (a, ba));  (a, ba) , c \\<rightarrow>\\<^sub>na  r ;\n         r , While b c \\<rightarrow>\\<^sub>ma  (aa, baa) \\<rbrakk>\n       \\<Longrightarrow> A (a, ba) (aa, baa) \\<and> \\<not> evalB b aa\n 2. \\<And>n m a ba aa baa.\n       \\<lbrakk>\\<forall>n.\n                    \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n                   (\\<forall>m\\<le>n.\n                       \\<forall>a b aa ba.\n                           (a, b) , c \\<rightarrow>\\<^sub>m  (aa,\n                        ba)  \\<longrightarrow>\n                          B (a, b) (aa, ba));\n        \\<forall>a.\n           \\<not> evalB b a \\<longrightarrow> (\\<forall>b. A (a, b) (a, b));\n        \\<forall>a.\n           evalB b a \\<longrightarrow>\n           (\\<forall>b aa ba.\n               B (a, b) (aa, ba) \\<longrightarrow>\n               (\\<forall>ab bb.\n                   A (aa, ba) (ab, bb) \\<longrightarrow>\n                   A (a, b) (ab, bb)));\n         \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n        (\\<forall>m\\<le>n.\n            \\<forall>a ba aa bb.\n                (a, ba) , While b\n                           c \\<rightarrow>\\<^sub>m  (aa,\n               bb)  \\<longrightarrow>\n               A (a, ba) (aa, bb) \\<and> \\<not> evalB b aa);\n         \\<Turnstile>\\<^sub>Suc n G  ; m \\<le> Suc n; m = Suc 0;\n        (aa, baa) = (a, ba); \\<not> evalB b (fst (a, ba))\\<rbrakk>\n       \\<Longrightarrow> A (a, ba) (aa, baa) \\<and> \\<not> evalB b aa", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n m a ba aa baa.\n       \\<lbrakk>\\<forall>n.\n                    \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n                   (\\<forall>m\\<le>n.\n                       \\<forall>a b aa ba.\n                           (a, b) , c \\<rightarrow>\\<^sub>m  (aa,\n                        ba)  \\<longrightarrow>\n                          B (a, b) (aa, ba));\n        \\<forall>a.\n           \\<not> evalB b a \\<longrightarrow> (\\<forall>b. A (a, b) (a, b));\n        \\<forall>a.\n           evalB b a \\<longrightarrow>\n           (\\<forall>b aa ba.\n               B (a, b) (aa, ba) \\<longrightarrow>\n               (\\<forall>ab bb.\n                   A (aa, ba) (ab, bb) \\<longrightarrow>\n                   A (a, b) (ab, bb)));\n         \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n        (\\<forall>m\\<le>n.\n            \\<forall>a ba aa bb.\n                (a, ba) , While b\n                           c \\<rightarrow>\\<^sub>m  (aa,\n               bb)  \\<longrightarrow>\n               A (a, ba) (aa, bb) \\<and> \\<not> evalB b aa);\n         \\<Turnstile>\\<^sub>Suc n G  ; m \\<le> Suc n; m = Suc 0;\n        (aa, baa) = (a, ba); \\<not> evalB b (fst (a, ba))\\<rbrakk>\n       \\<Longrightarrow> A (a, ba) (aa, baa) \\<and> \\<not> evalB b aa\n 2. \\<And>n m a ba aa baa na r ma.\n       \\<lbrakk>\\<forall>n.\n                    \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n                   (\\<forall>m\\<le>n.\n                       \\<forall>a b aa ba.\n                           (a, b) , c \\<rightarrow>\\<^sub>m  (aa,\n                        ba)  \\<longrightarrow>\n                          B (a, b) (aa, ba));\n        \\<forall>a.\n           \\<not> evalB b a \\<longrightarrow> (\\<forall>b. A (a, b) (a, b));\n        \\<forall>a.\n           evalB b a \\<longrightarrow>\n           (\\<forall>b aa ba.\n               B (a, b) (aa, ba) \\<longrightarrow>\n               (\\<forall>ab bb.\n                   A (aa, ba) (ab, bb) \\<longrightarrow>\n                   A (a, b) (ab, bb)));\n         \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n        (\\<forall>m\\<le>n.\n            \\<forall>a ba aa bb.\n                (a, ba) , While b\n                           c \\<rightarrow>\\<^sub>m  (aa,\n               bb)  \\<longrightarrow>\n               A (a, ba) (aa, bb) \\<and> \\<not> evalB b aa);\n         \\<Turnstile>\\<^sub>Suc n G  ; m \\<le> Suc n; m = Suc (max na ma);\n        evalB b (fst (a, ba));  (a, ba) , c \\<rightarrow>\\<^sub>na  r ;\n         r , While b c \\<rightarrow>\\<^sub>ma  (aa, baa) \\<rbrakk>\n       \\<Longrightarrow> A (a, ba) (aa, baa) \\<and> \\<not> evalB b aa", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n m a ba aa baa na r ma.\n       \\<lbrakk>\\<forall>n.\n                    \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n                   (\\<forall>m\\<le>n.\n                       \\<forall>a b aa ba.\n                           (a, b) , c \\<rightarrow>\\<^sub>m  (aa,\n                        ba)  \\<longrightarrow>\n                          B (a, b) (aa, ba));\n        \\<forall>a.\n           \\<not> evalB b a \\<longrightarrow> (\\<forall>b. A (a, b) (a, b));\n        \\<forall>a.\n           evalB b a \\<longrightarrow>\n           (\\<forall>b aa ba.\n               B (a, b) (aa, ba) \\<longrightarrow>\n               (\\<forall>ab bb.\n                   A (aa, ba) (ab, bb) \\<longrightarrow>\n                   A (a, b) (ab, bb)));\n         \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n        (\\<forall>m\\<le>n.\n            \\<forall>a ba aa bb.\n                (a, ba) , While b\n                           c \\<rightarrow>\\<^sub>m  (aa,\n               bb)  \\<longrightarrow>\n               A (a, ba) (aa, bb) \\<and> \\<not> evalB b aa);\n         \\<Turnstile>\\<^sub>Suc n G  ; m \\<le> Suc n; m = Suc (max na ma);\n        evalB b (fst (a, ba));  (a, ba) , c \\<rightarrow>\\<^sub>na  r ;\n         r , While b c \\<rightarrow>\\<^sub>ma  (aa, baa) \\<rbrakk>\n       \\<Longrightarrow> A (a, ba) (aa, baa) \\<and> \\<not> evalB b aa", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n a ba aa baa na ab bb ma.\n       \\<lbrakk>\\<forall>n.\n                    \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n                   (\\<forall>m\\<le>n.\n                       \\<forall>a b aa ba.\n                           (a, b) , c \\<rightarrow>\\<^sub>m  (aa,\n                        ba)  \\<longrightarrow>\n                          B (a, b) (aa, ba));\n        \\<forall>a.\n           \\<not> evalB b a \\<longrightarrow> (\\<forall>b. A (a, b) (a, b));\n        \\<forall>a.\n           evalB b a \\<longrightarrow>\n           (\\<forall>b aa ba.\n               B (a, b) (aa, ba) \\<longrightarrow>\n               (\\<forall>ab bb.\n                   A (aa, ba) (ab, bb) \\<longrightarrow>\n                   A (a, b) (ab, bb)));\n         \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n        (\\<forall>m\\<le>n.\n            \\<forall>a ba aa bb.\n                (a, ba) , While b\n                           c \\<rightarrow>\\<^sub>m  (aa,\n               bb)  \\<longrightarrow>\n               A (a, ba) (aa, bb) \\<and> \\<not> evalB b aa);\n         \\<Turnstile>\\<^sub>Suc n G  ; evalB b a;\n         (a, ba) , c \\<rightarrow>\\<^sub>na  (ab, bb) ;\n         (ab, bb) , While b c \\<rightarrow>\\<^sub>ma  (aa, baa) ;\n        na \\<le> n; ma \\<le> n\\<rbrakk>\n       \\<Longrightarrow> A (a, ba) (aa, baa) \\<and> \\<not> evalB b aa", "apply (erule_tac x=n in allE, erule impE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n a ba aa baa na ab bb ma.\n       \\<lbrakk>\\<forall>a.\n                   \\<not> evalB b a \\<longrightarrow>\n                   (\\<forall>b. A (a, b) (a, b));\n        \\<forall>a.\n           evalB b a \\<longrightarrow>\n           (\\<forall>b aa ba.\n               B (a, b) (aa, ba) \\<longrightarrow>\n               (\\<forall>ab bb.\n                   A (aa, ba) (ab, bb) \\<longrightarrow>\n                   A (a, b) (ab, bb)));\n         \\<Turnstile>\\<^sub>Suc n G  ; evalB b a;\n         (a, ba) , c \\<rightarrow>\\<^sub>na  (ab, bb) ;\n         (ab, bb) , While b c \\<rightarrow>\\<^sub>ma  (aa, baa) ;\n        na \\<le> n; ma \\<le> n;\n         \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n        (\\<forall>m\\<le>n.\n            \\<forall>a b aa ba.\n                (a, b) , c \\<rightarrow>\\<^sub>m  (aa,\n             ba)  \\<longrightarrow>\n               B (a, b) (aa, ba))\\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile>\\<^sub>n G  \n 2. \\<And>n a ba aa baa na ab bb ma.\n       \\<lbrakk>\\<forall>a.\n                   \\<not> evalB b a \\<longrightarrow>\n                   (\\<forall>b. A (a, b) (a, b));\n        \\<forall>a.\n           evalB b a \\<longrightarrow>\n           (\\<forall>b aa ba.\n               B (a, b) (aa, ba) \\<longrightarrow>\n               (\\<forall>ab bb.\n                   A (aa, ba) (ab, bb) \\<longrightarrow>\n                   A (a, b) (ab, bb)));\n         \\<Turnstile>\\<^sub>Suc n G  ; evalB b a;\n         (a, ba) , c \\<rightarrow>\\<^sub>na  (ab, bb) ;\n         (ab, bb) , While b c \\<rightarrow>\\<^sub>ma  (aa, baa) ;\n        na \\<le> n; ma \\<le> n;\n         \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n        (\\<forall>m\\<le>n.\n            \\<forall>a b aa ba.\n                (a, b) , c \\<rightarrow>\\<^sub>m  (aa,\n             ba)  \\<longrightarrow>\n               B (a, b) (aa, ba));\n        \\<forall>m\\<le>n.\n           \\<forall>a ba aa bb.\n               (a, ba) , While b\n                          c \\<rightarrow>\\<^sub>m  (aa,\n              bb)  \\<longrightarrow>\n              A (a, ba) (aa, bb) \\<and> \\<not> evalB b aa\\<rbrakk>\n       \\<Longrightarrow> A (a, ba) (aa, baa) \\<and> \\<not> evalB b aa", "apply (erule Ctxt_lowerm)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n a ba aa baa na ab bb ma.\n       \\<lbrakk>\\<forall>a.\n                   \\<not> evalB b a \\<longrightarrow>\n                   (\\<forall>b. A (a, b) (a, b));\n        \\<forall>a.\n           evalB b a \\<longrightarrow>\n           (\\<forall>b aa ba.\n               B (a, b) (aa, ba) \\<longrightarrow>\n               (\\<forall>ab bb.\n                   A (aa, ba) (ab, bb) \\<longrightarrow>\n                   A (a, b) (ab, bb)));\n        evalB b a;  (a, ba) , c \\<rightarrow>\\<^sub>na  (ab, bb) ;\n         (ab, bb) , While b c \\<rightarrow>\\<^sub>ma  (aa, baa) ;\n        na \\<le> n; ma \\<le> n;\n         \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n        (\\<forall>m\\<le>n.\n            \\<forall>a b aa ba.\n                (a, b) , c \\<rightarrow>\\<^sub>m  (aa,\n             ba)  \\<longrightarrow>\n               B (a, b) (aa, ba))\\<rbrakk>\n       \\<Longrightarrow> n < Suc n\n 2. \\<And>n a ba aa baa na ab bb ma.\n       \\<lbrakk>\\<forall>a.\n                   \\<not> evalB b a \\<longrightarrow>\n                   (\\<forall>b. A (a, b) (a, b));\n        \\<forall>a.\n           evalB b a \\<longrightarrow>\n           (\\<forall>b aa ba.\n               B (a, b) (aa, ba) \\<longrightarrow>\n               (\\<forall>ab bb.\n                   A (aa, ba) (ab, bb) \\<longrightarrow>\n                   A (a, b) (ab, bb)));\n         \\<Turnstile>\\<^sub>Suc n G  ; evalB b a;\n         (a, ba) , c \\<rightarrow>\\<^sub>na  (ab, bb) ;\n         (ab, bb) , While b c \\<rightarrow>\\<^sub>ma  (aa, baa) ;\n        na \\<le> n; ma \\<le> n;\n         \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n        (\\<forall>m\\<le>n.\n            \\<forall>a b aa ba.\n                (a, b) , c \\<rightarrow>\\<^sub>m  (aa,\n             ba)  \\<longrightarrow>\n               B (a, b) (aa, ba));\n        \\<forall>m\\<le>n.\n           \\<forall>a ba aa bb.\n               (a, ba) , While b\n                          c \\<rightarrow>\\<^sub>m  (aa,\n              bb)  \\<longrightarrow>\n              A (a, ba) (aa, bb) \\<and> \\<not> evalB b aa\\<rbrakk>\n       \\<Longrightarrow> A (a, ba) (aa, baa) \\<and> \\<not> evalB b aa", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n a ba aa baa na ab bb ma.\n       \\<lbrakk>\\<forall>a.\n                   \\<not> evalB b a \\<longrightarrow>\n                   (\\<forall>b. A (a, b) (a, b));\n        \\<forall>a.\n           evalB b a \\<longrightarrow>\n           (\\<forall>b aa ba.\n               B (a, b) (aa, ba) \\<longrightarrow>\n               (\\<forall>ab bb.\n                   A (aa, ba) (ab, bb) \\<longrightarrow>\n                   A (a, b) (ab, bb)));\n         \\<Turnstile>\\<^sub>Suc n G  ; evalB b a;\n         (a, ba) , c \\<rightarrow>\\<^sub>na  (ab, bb) ;\n         (ab, bb) , While b c \\<rightarrow>\\<^sub>ma  (aa, baa) ;\n        na \\<le> n; ma \\<le> n;\n         \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n        (\\<forall>m\\<le>n.\n            \\<forall>a b aa ba.\n                (a, b) , c \\<rightarrow>\\<^sub>m  (aa,\n             ba)  \\<longrightarrow>\n               B (a, b) (aa, ba));\n        \\<forall>m\\<le>n.\n           \\<forall>a ba aa bb.\n               (a, ba) , While b\n                          c \\<rightarrow>\\<^sub>m  (aa,\n              bb)  \\<longrightarrow>\n              A (a, ba) (aa, bb) \\<and> \\<not> evalB b aa\\<rbrakk>\n       \\<Longrightarrow> A (a, ba) (aa, baa) \\<and> \\<not> evalB b aa", "apply (rotate_tac -1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n a ba aa baa na ab bb ma.\n       \\<lbrakk>\\<forall>m\\<le>n.\n                   \\<forall>a ba aa bb.\n                       (a, ba) , While b\n                                  c \\<rightarrow>\\<^sub>m  (aa,\n                      bb)  \\<longrightarrow>\n                      A (a, ba) (aa, bb) \\<and> \\<not> evalB b aa;\n        \\<forall>a.\n           \\<not> evalB b a \\<longrightarrow> (\\<forall>b. A (a, b) (a, b));\n        \\<forall>a.\n           evalB b a \\<longrightarrow>\n           (\\<forall>b aa ba.\n               B (a, b) (aa, ba) \\<longrightarrow>\n               (\\<forall>ab bb.\n                   A (aa, ba) (ab, bb) \\<longrightarrow>\n                   A (a, b) (ab, bb)));\n         \\<Turnstile>\\<^sub>Suc n G  ; evalB b a;\n         (a, ba) , c \\<rightarrow>\\<^sub>na  (ab, bb) ;\n         (ab, bb) , While b c \\<rightarrow>\\<^sub>ma  (aa, baa) ;\n        na \\<le> n; ma \\<le> n;\n         \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n        (\\<forall>m\\<le>n.\n            \\<forall>a b aa ba.\n                (a, b) , c \\<rightarrow>\\<^sub>m  (aa,\n             ba)  \\<longrightarrow>\n               B (a, b) (aa, ba))\\<rbrakk>\n       \\<Longrightarrow> A (a, ba) (aa, baa) \\<and> \\<not> evalB b aa", "apply (erule_tac x=ma in allE, clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n a ba aa baa na ab bb ma.\n       \\<lbrakk>\\<forall>a.\n                   \\<not> evalB b a \\<longrightarrow>\n                   (\\<forall>b. A (a, b) (a, b));\n        \\<forall>a.\n           evalB b a \\<longrightarrow>\n           (\\<forall>b aa ba.\n               B (a, b) (aa, ba) \\<longrightarrow>\n               (\\<forall>ab bb.\n                   A (aa, ba) (ab, bb) \\<longrightarrow>\n                   A (a, b) (ab, bb)));\n         \\<Turnstile>\\<^sub>Suc n G  ; evalB b a;\n         (a, ba) , c \\<rightarrow>\\<^sub>na  (ab, bb) ;\n         (ab, bb) , While b c \\<rightarrow>\\<^sub>ma  (aa, baa) ;\n        na \\<le> n; ma \\<le> n;\n         \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n        (\\<forall>m\\<le>n.\n            \\<forall>a b aa ba.\n                (a, b) , c \\<rightarrow>\\<^sub>m  (aa,\n             ba)  \\<longrightarrow>\n               B (a, b) (aa, ba));\n        \\<forall>a ba aa bb.\n            (a, ba) , While b\n                       c \\<rightarrow>\\<^sub>ma  (aa, bb)  \\<longrightarrow>\n           A (a, ba) (aa, bb) \\<and> \\<not> evalB b aa\\<rbrakk>\n       \\<Longrightarrow> A (a, ba) (aa, baa)", "apply(erule impE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n a ba aa baa na ab bb ma.\n       \\<lbrakk>\\<forall>a.\n                   \\<not> evalB b a \\<longrightarrow>\n                   (\\<forall>b. A (a, b) (a, b));\n        \\<forall>a.\n           evalB b a \\<longrightarrow>\n           (\\<forall>b aa ba.\n               B (a, b) (aa, ba) \\<longrightarrow>\n               (\\<forall>ab bb.\n                   A (aa, ba) (ab, bb) \\<longrightarrow>\n                   A (a, b) (ab, bb)));\n         \\<Turnstile>\\<^sub>Suc n G  ; evalB b a;\n         (a, ba) , c \\<rightarrow>\\<^sub>na  (ab, bb) ;\n         (ab, bb) , While b c \\<rightarrow>\\<^sub>ma  (aa, baa) ;\n        na \\<le> n; ma \\<le> n;\n        \\<forall>a ba aa bb.\n            (a, ba) , While b\n                       c \\<rightarrow>\\<^sub>ma  (aa, bb)  \\<longrightarrow>\n           A (a, ba) (aa, bb) \\<and> \\<not> evalB b aa\\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile>\\<^sub>n G  \n 2. \\<And>n a ba aa baa na ab bb ma.\n       \\<lbrakk>\\<forall>a.\n                   \\<not> evalB b a \\<longrightarrow>\n                   (\\<forall>b. A (a, b) (a, b));\n        \\<forall>a.\n           evalB b a \\<longrightarrow>\n           (\\<forall>b aa ba.\n               B (a, b) (aa, ba) \\<longrightarrow>\n               (\\<forall>ab bb.\n                   A (aa, ba) (ab, bb) \\<longrightarrow>\n                   A (a, b) (ab, bb)));\n         \\<Turnstile>\\<^sub>Suc n G  ; evalB b a;\n         (a, ba) , c \\<rightarrow>\\<^sub>na  (ab, bb) ;\n         (ab, bb) , While b c \\<rightarrow>\\<^sub>ma  (aa, baa) ;\n        na \\<le> n; ma \\<le> n;\n        \\<forall>a ba aa bb.\n            (a, ba) , While b\n                       c \\<rightarrow>\\<^sub>ma  (aa, bb)  \\<longrightarrow>\n           A (a, ba) (aa, bb) \\<and> \\<not> evalB b aa;\n        \\<forall>m\\<le>n.\n           \\<forall>a b aa ba.\n               (a, b) , c \\<rightarrow>\\<^sub>m  (aa, ba)  \\<longrightarrow>\n              B (a, b) (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> A (a, ba) (aa, baa)", "apply (erule Ctxt_lowerm)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n a ba aa baa na ab bb ma.\n       \\<lbrakk>\\<forall>a.\n                   \\<not> evalB b a \\<longrightarrow>\n                   (\\<forall>b. A (a, b) (a, b));\n        \\<forall>a.\n           evalB b a \\<longrightarrow>\n           (\\<forall>b aa ba.\n               B (a, b) (aa, ba) \\<longrightarrow>\n               (\\<forall>ab bb.\n                   A (aa, ba) (ab, bb) \\<longrightarrow>\n                   A (a, b) (ab, bb)));\n        evalB b a;  (a, ba) , c \\<rightarrow>\\<^sub>na  (ab, bb) ;\n         (ab, bb) , While b c \\<rightarrow>\\<^sub>ma  (aa, baa) ;\n        na \\<le> n; ma \\<le> n;\n        \\<forall>a ba aa bb.\n            (a, ba) , While b\n                       c \\<rightarrow>\\<^sub>ma  (aa, bb)  \\<longrightarrow>\n           A (a, ba) (aa, bb) \\<and> \\<not> evalB b aa\\<rbrakk>\n       \\<Longrightarrow> n < Suc n\n 2. \\<And>n a ba aa baa na ab bb ma.\n       \\<lbrakk>\\<forall>a.\n                   \\<not> evalB b a \\<longrightarrow>\n                   (\\<forall>b. A (a, b) (a, b));\n        \\<forall>a.\n           evalB b a \\<longrightarrow>\n           (\\<forall>b aa ba.\n               B (a, b) (aa, ba) \\<longrightarrow>\n               (\\<forall>ab bb.\n                   A (aa, ba) (ab, bb) \\<longrightarrow>\n                   A (a, b) (ab, bb)));\n         \\<Turnstile>\\<^sub>Suc n G  ; evalB b a;\n         (a, ba) , c \\<rightarrow>\\<^sub>na  (ab, bb) ;\n         (ab, bb) , While b c \\<rightarrow>\\<^sub>ma  (aa, baa) ;\n        na \\<le> n; ma \\<le> n;\n        \\<forall>a ba aa bb.\n            (a, ba) , While b\n                       c \\<rightarrow>\\<^sub>ma  (aa, bb)  \\<longrightarrow>\n           A (a, ba) (aa, bb) \\<and> \\<not> evalB b aa;\n        \\<forall>m\\<le>n.\n           \\<forall>a b aa ba.\n               (a, b) , c \\<rightarrow>\\<^sub>m  (aa, ba)  \\<longrightarrow>\n              B (a, b) (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> A (a, ba) (aa, baa)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n a ba aa baa na ab bb ma.\n       \\<lbrakk>\\<forall>a.\n                   \\<not> evalB b a \\<longrightarrow>\n                   (\\<forall>b. A (a, b) (a, b));\n        \\<forall>a.\n           evalB b a \\<longrightarrow>\n           (\\<forall>b aa ba.\n               B (a, b) (aa, ba) \\<longrightarrow>\n               (\\<forall>ab bb.\n                   A (aa, ba) (ab, bb) \\<longrightarrow>\n                   A (a, b) (ab, bb)));\n         \\<Turnstile>\\<^sub>Suc n G  ; evalB b a;\n         (a, ba) , c \\<rightarrow>\\<^sub>na  (ab, bb) ;\n         (ab, bb) , While b c \\<rightarrow>\\<^sub>ma  (aa, baa) ;\n        na \\<le> n; ma \\<le> n;\n        \\<forall>a ba aa bb.\n            (a, ba) , While b\n                       c \\<rightarrow>\\<^sub>ma  (aa, bb)  \\<longrightarrow>\n           A (a, ba) (aa, bb) \\<and> \\<not> evalB b aa;\n        \\<forall>m\\<le>n.\n           \\<forall>a b aa ba.\n               (a, b) , c \\<rightarrow>\\<^sub>m  (aa, ba)  \\<longrightarrow>\n              B (a, b) (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> A (a, ba) (aa, baa)", "apply (erule_tac x=na in allE, clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n a ba aa baa na ab bb ma.\n       \\<lbrakk>\\<forall>a.\n                   \\<not> evalB b a \\<longrightarrow>\n                   (\\<forall>b. A (a, b) (a, b));\n        \\<forall>a.\n           evalB b a \\<longrightarrow>\n           (\\<forall>b aa ba.\n               B (a, b) (aa, ba) \\<longrightarrow>\n               (\\<forall>ab bb.\n                   A (aa, ba) (ab, bb) \\<longrightarrow>\n                   A (a, b) (ab, bb)));\n         \\<Turnstile>\\<^sub>Suc n G  ; evalB b a;\n         (a, ba) , c \\<rightarrow>\\<^sub>na  (ab, bb) ;\n         (ab, bb) , While b c \\<rightarrow>\\<^sub>ma  (aa, baa) ;\n        na \\<le> n; ma \\<le> n;\n        \\<forall>a ba aa bb.\n            (a, ba) , While b\n                       c \\<rightarrow>\\<^sub>ma  (aa, bb)  \\<longrightarrow>\n           A (a, ba) (aa, bb) \\<and> \\<not> evalB b aa;\n        \\<forall>a b aa ba.\n            (a, b) , c \\<rightarrow>\\<^sub>na  (aa, ba)  \\<longrightarrow>\n           B (a, b) (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> A (a, ba) (aa, baa)", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma SoundCall[rule_format]:\n\"\\<lbrakk>\\<forall>n. \\<Turnstile>\\<^sub>n ({A} \\<union> G) \\<longrightarrow> \\<Turnstile>\\<^sub>n body : A\\<rbrakk> \\<Longrightarrow> \\<Turnstile>\\<^sub>n G \\<longrightarrow> \\<Turnstile>\\<^sub>n Call : A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n        \\<Turnstile>\\<^sub>n {A} \\<union> G   \\<longrightarrow>\n        \\<Turnstile>\\<^sub>n body : A  \\<Longrightarrow>\n     \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n     \\<Turnstile>\\<^sub>n Call : A", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n        \\<Turnstile>\\<^sub>n {A} \\<union> G   \\<longrightarrow>\n        \\<Turnstile>\\<^sub>n body : A  \\<Longrightarrow>\n     \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n     \\<Turnstile>\\<^sub>n Call : A", "apply (induct_tac n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>n.\n        \\<Turnstile>\\<^sub>n {A} \\<union> G   \\<longrightarrow>\n        \\<Turnstile>\\<^sub>n body : A  \\<Longrightarrow>\n     \\<Turnstile>\\<^sub>0 G   \\<longrightarrow>\n     \\<Turnstile>\\<^sub>0 Call : A \n 2. \\<And>n.\n       \\<lbrakk>\\<forall>n.\n                    \\<Turnstile>\\<^sub>n {A} \\<union> G   \\<longrightarrow>\n                    \\<Turnstile>\\<^sub>n body : A ;\n         \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n         \\<Turnstile>\\<^sub>n Call : A \\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile>\\<^sub>Suc n G   \\<longrightarrow>\n                          \\<Turnstile>\\<^sub>Suc n Call : A", "apply (simp add: VDM_validn_def, clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<forall>n.\n                    \\<Turnstile>\\<^sub>n insert A G   \\<longrightarrow>\n                   (\\<forall>m\\<le>n.\n                       \\<forall>a b aa ba.\n                           (a, b) , body \\<rightarrow>\\<^sub>m  (aa,\n                           ba)  \\<longrightarrow>\n                          A (a, b) (aa, ba));\n         \\<Turnstile>\\<^sub>0 G  ;\n         (a, b) , Call \\<rightarrow>\\<^sub>0  (aa, ba) \\<rbrakk>\n       \\<Longrightarrow> A (a, b) (aa, ba)\n 2. \\<And>n.\n       \\<lbrakk>\\<forall>n.\n                    \\<Turnstile>\\<^sub>n {A} \\<union> G   \\<longrightarrow>\n                    \\<Turnstile>\\<^sub>n body : A ;\n         \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n         \\<Turnstile>\\<^sub>n Call : A \\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile>\\<^sub>Suc n G   \\<longrightarrow>\n                          \\<Turnstile>\\<^sub>Suc n Call : A", "apply (drule Sem_no_zero_height_derivs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<forall>n.\n                    \\<Turnstile>\\<^sub>n insert A G   \\<longrightarrow>\n                   (\\<forall>m\\<le>n.\n                       \\<forall>a b aa ba.\n                           (a, b) , body \\<rightarrow>\\<^sub>m  (aa,\n                           ba)  \\<longrightarrow>\n                          A (a, b) (aa, ba));\n         \\<Turnstile>\\<^sub>0 G  ; False\\<rbrakk>\n       \\<Longrightarrow> A (a, b) (aa, ba)\n 2. \\<And>n.\n       \\<lbrakk>\\<forall>n.\n                    \\<Turnstile>\\<^sub>n {A} \\<union> G   \\<longrightarrow>\n                    \\<Turnstile>\\<^sub>n body : A ;\n         \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n         \\<Turnstile>\\<^sub>n Call : A \\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile>\\<^sub>Suc n G   \\<longrightarrow>\n                          \\<Turnstile>\\<^sub>Suc n Call : A", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>n.\n                    \\<Turnstile>\\<^sub>n {A} \\<union> G   \\<longrightarrow>\n                    \\<Turnstile>\\<^sub>n body : A ;\n         \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n         \\<Turnstile>\\<^sub>n Call : A \\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile>\\<^sub>Suc n G   \\<longrightarrow>\n                          \\<Turnstile>\\<^sub>Suc n Call : A", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>n.\n                    \\<Turnstile>\\<^sub>n insert A G   \\<longrightarrow>\n                    \\<Turnstile>\\<^sub>n body : A ;\n         \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n         \\<Turnstile>\\<^sub>n Call : A ;\n         \\<Turnstile>\\<^sub>Suc n G  \\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile>\\<^sub>Suc n Call : A", "apply (drule Ctxt_lowerm)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>n.\n                    \\<Turnstile>\\<^sub>n insert A G   \\<longrightarrow>\n                    \\<Turnstile>\\<^sub>n body : A ;\n         \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n         \\<Turnstile>\\<^sub>n Call : A \\<rbrakk>\n       \\<Longrightarrow> ?m20 n < Suc n\n 2. \\<And>n.\n       \\<lbrakk>\\<forall>n.\n                    \\<Turnstile>\\<^sub>n insert A G   \\<longrightarrow>\n                    \\<Turnstile>\\<^sub>n body : A ;\n         \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n         \\<Turnstile>\\<^sub>n Call : A ;\n         \\<Turnstile>\\<^sub>?m20 n G  \\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile>\\<^sub>Suc n Call : A", "apply (subgoal_tac \"n < Suc n\", assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>n.\n                    \\<Turnstile>\\<^sub>n insert A G   \\<longrightarrow>\n                    \\<Turnstile>\\<^sub>n body : A ;\n         \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n         \\<Turnstile>\\<^sub>n Call : A \\<rbrakk>\n       \\<Longrightarrow> n < Suc n\n 2. \\<And>n.\n       \\<lbrakk>\\<forall>n.\n                    \\<Turnstile>\\<^sub>n insert A G   \\<longrightarrow>\n                    \\<Turnstile>\\<^sub>n body : A ;\n         \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n         \\<Turnstile>\\<^sub>n Call : A ;\n         \\<Turnstile>\\<^sub>n G  \\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile>\\<^sub>Suc n Call : A", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>n.\n                    \\<Turnstile>\\<^sub>n insert A G   \\<longrightarrow>\n                    \\<Turnstile>\\<^sub>n body : A ;\n         \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n         \\<Turnstile>\\<^sub>n Call : A ;\n         \\<Turnstile>\\<^sub>n G  \\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile>\\<^sub>Suc n Call : A", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>n.\n                    \\<Turnstile>\\<^sub>n insert A G   \\<longrightarrow>\n                    \\<Turnstile>\\<^sub>n body : A ;\n         \\<Turnstile>\\<^sub>n Call : A ;  \\<Turnstile>\\<^sub>n G  \\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile>\\<^sub>Suc n Call : A", "apply (drule ctxt_consn)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>n.\n                    \\<Turnstile>\\<^sub>n insert A G   \\<longrightarrow>\n                    \\<Turnstile>\\<^sub>n body : A ;\n         \\<Turnstile>\\<^sub>n Call : A \\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile>\\<^sub>n Call : ?A24 n \n 2. \\<And>n.\n       \\<lbrakk>\\<forall>n.\n                    \\<Turnstile>\\<^sub>n insert A G   \\<longrightarrow>\n                    \\<Turnstile>\\<^sub>n body : A ;\n         \\<Turnstile>\\<^sub>n Call : A ;\n         \\<Turnstile>\\<^sub>n {?A24 n} \\<union> G  \\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile>\\<^sub>Suc n Call : A", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>n.\n                    \\<Turnstile>\\<^sub>n insert A G   \\<longrightarrow>\n                    \\<Turnstile>\\<^sub>n body : A ;\n         \\<Turnstile>\\<^sub>n Call : A ;\n         \\<Turnstile>\\<^sub>n {A} \\<union> G  \\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile>\\<^sub>Suc n Call : A", "apply (simp add: VDM_validn_def, clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n m a b aa ba.\n       \\<lbrakk>\\<forall>n.\n                    \\<Turnstile>\\<^sub>n insert A G   \\<longrightarrow>\n                   (\\<forall>m\\<le>n.\n                       \\<forall>a b aa ba.\n                           (a, b) , body \\<rightarrow>\\<^sub>m  (aa,\n                           ba)  \\<longrightarrow>\n                          A (a, b) (aa, ba));\n        \\<forall>m\\<le>n.\n           \\<forall>a b aa ba.\n               (a, b) , Call \\<rightarrow>\\<^sub>m  (aa,\n               ba)  \\<longrightarrow>\n              A (a, b) (aa, ba);\n         \\<Turnstile>\\<^sub>n insert A G  ; m \\<le> Suc n;\n         (a, b) , Call \\<rightarrow>\\<^sub>m  (aa, ba) \\<rbrakk>\n       \\<Longrightarrow> A (a, b) (aa, ba)", "apply (erule Sem_eval_cases, clarsimp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma VDM_Sound_n: \"G \\<rhd> c: A \\<Longrightarrow> (\\<forall> n. G \\<Turnstile>\\<^sub>n c:A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<rhd> c : A \\<Longrightarrow>\n    \\<forall>n. G \\<Turnstile>\\<^sub>n c : A", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<rhd> c : A \\<Longrightarrow>\n    \\<forall>n. G \\<Turnstile>\\<^sub>n c : A", "apply (erule VDM_proof.induct)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>G. \\<forall>n. G \\<Turnstile>\\<^sub>n Skip : \\<lambda>a b. b = a\n 2. \\<And>G x e.\n       \\<forall>n.\n          G \\<Turnstile>\\<^sub>n Assign x\n                                  e : \\<lambda>a b.\n   b = (update (fst a) x (evalE e (fst a)), snd a)\n 3. \\<And>G x C.\n       \\<forall>n.\n          G \\<Turnstile>\\<^sub>n New x\n                                  C : \\<lambda>a b.\n   \\<exists>l.\n      l \\<notin> Dom (snd a) \\<and>\n      b = (update (fst a) x (RVal (Loc l)), (l, C, []) # snd a)\n 4. \\<And>G x y F.\n       \\<forall>n.\n          G \\<Turnstile>\\<^sub>n Get x y\n                                  F : \\<lambda>a b.\n   \\<exists>l C Flds v.\n      fst a y = RVal (Loc l) \\<and>\n      lookup (snd a) l = Some (C, Flds) \\<and>\n      lookup Flds F = Some v \\<and> b = (update (fst a) x v, snd a)\n 5. \\<And>G x F e.\n       \\<forall>n.\n          G \\<Turnstile>\\<^sub>n Put x F\n                                  e : \\<lambda>a b.\n   \\<exists>l C Flds.\n      fst a x = RVal (Loc l) \\<and>\n      lookup (snd a) l = Some (C, Flds) \\<and>\n      b = (fst a, (l, C, (F, evalE e (fst a)) # Flds) # snd a)\n 6. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        G \\<rhd> d : B; \\<forall>n. G \\<Turnstile>\\<^sub>n d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n Comp c\n              d : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 7. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        G \\<rhd> d : B; \\<forall>n. G \\<Turnstile>\\<^sub>n d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n Iff b c\n              d : \\<lambda>a c.\n                     (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n                     (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 8. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B; \\<forall>n. G \\<Turnstile>\\<^sub>n c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n While b\n              c : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 9. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>n. {A} \\<union> G \\<Turnstile>\\<^sub>n body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 10. \\<And>A G.\n        A \\<in> G \\<Longrightarrow>\n        \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\nA total of 11 subgoals...", "apply (simp add: validn_def VDM_validn_def)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>G.\n       \\<forall>n.\n           \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n          (\\<forall>m\\<le>n.\n              \\<forall>a b aa ba.\n                  (a, b) , Skip \\<rightarrow>\\<^sub>m  (aa,\n                  ba)  \\<longrightarrow>\n                 aa = a \\<and> ba = b)\n 2. \\<And>G x e.\n       \\<forall>n.\n          G \\<Turnstile>\\<^sub>n Assign x\n                                  e : \\<lambda>a b.\n   b = (update (fst a) x (evalE e (fst a)), snd a)\n 3. \\<And>G x C.\n       \\<forall>n.\n          G \\<Turnstile>\\<^sub>n New x\n                                  C : \\<lambda>a b.\n   \\<exists>l.\n      l \\<notin> Dom (snd a) \\<and>\n      b = (update (fst a) x (RVal (Loc l)), (l, C, []) # snd a)\n 4. \\<And>G x y F.\n       \\<forall>n.\n          G \\<Turnstile>\\<^sub>n Get x y\n                                  F : \\<lambda>a b.\n   \\<exists>l C Flds v.\n      fst a y = RVal (Loc l) \\<and>\n      lookup (snd a) l = Some (C, Flds) \\<and>\n      lookup Flds F = Some v \\<and> b = (update (fst a) x v, snd a)\n 5. \\<And>G x F e.\n       \\<forall>n.\n          G \\<Turnstile>\\<^sub>n Put x F\n                                  e : \\<lambda>a b.\n   \\<exists>l C Flds.\n      fst a x = RVal (Loc l) \\<and>\n      lookup (snd a) l = Some (C, Flds) \\<and>\n      b = (fst a, (l, C, (F, evalE e (fst a)) # Flds) # snd a)\n 6. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        G \\<rhd> d : B; \\<forall>n. G \\<Turnstile>\\<^sub>n d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n Comp c\n              d : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 7. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        G \\<rhd> d : B; \\<forall>n. G \\<Turnstile>\\<^sub>n d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n Iff b c\n              d : \\<lambda>a c.\n                     (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n                     (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 8. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B; \\<forall>n. G \\<Turnstile>\\<^sub>n c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n While b\n              c : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 9. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>n. {A} \\<union> G \\<Turnstile>\\<^sub>n body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 10. \\<And>A G.\n        A \\<in> G \\<Longrightarrow>\n        \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\nA total of 11 subgoals...", "apply(clarsimp, erule Sem_eval_cases, simp)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>G x e.\n       \\<forall>n.\n          G \\<Turnstile>\\<^sub>n Assign x\n                                  e : \\<lambda>a b.\n   b = (update (fst a) x (evalE e (fst a)), snd a)\n 2. \\<And>G x C.\n       \\<forall>n.\n          G \\<Turnstile>\\<^sub>n New x\n                                  C : \\<lambda>a b.\n   \\<exists>l.\n      l \\<notin> Dom (snd a) \\<and>\n      b = (update (fst a) x (RVal (Loc l)), (l, C, []) # snd a)\n 3. \\<And>G x y F.\n       \\<forall>n.\n          G \\<Turnstile>\\<^sub>n Get x y\n                                  F : \\<lambda>a b.\n   \\<exists>l C Flds v.\n      fst a y = RVal (Loc l) \\<and>\n      lookup (snd a) l = Some (C, Flds) \\<and>\n      lookup Flds F = Some v \\<and> b = (update (fst a) x v, snd a)\n 4. \\<And>G x F e.\n       \\<forall>n.\n          G \\<Turnstile>\\<^sub>n Put x F\n                                  e : \\<lambda>a b.\n   \\<exists>l C Flds.\n      fst a x = RVal (Loc l) \\<and>\n      lookup (snd a) l = Some (C, Flds) \\<and>\n      b = (fst a, (l, C, (F, evalE e (fst a)) # Flds) # snd a)\n 5. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        G \\<rhd> d : B; \\<forall>n. G \\<Turnstile>\\<^sub>n d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n Comp c\n              d : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 6. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        G \\<rhd> d : B; \\<forall>n. G \\<Turnstile>\\<^sub>n d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n Iff b c\n              d : \\<lambda>a c.\n                     (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n                     (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 7. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B; \\<forall>n. G \\<Turnstile>\\<^sub>n c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n While b\n              c : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 8. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>n. {A} \\<union> G \\<Turnstile>\\<^sub>n body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 9. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 10. \\<And>G c A B.\n        \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n         \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n        \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "apply (simp add: validn_def VDM_validn_def)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>G x e.\n       \\<forall>n.\n           \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n          (\\<forall>m\\<le>n.\n              \\<forall>a b aa ba.\n                  (a, b) , Assign x\n                            e \\<rightarrow>\\<^sub>m  (aa,\n                ba)  \\<longrightarrow>\n                 aa = update a x (evalE e a) \\<and> ba = b)\n 2. \\<And>G x C.\n       \\<forall>n.\n          G \\<Turnstile>\\<^sub>n New x\n                                  C : \\<lambda>a b.\n   \\<exists>l.\n      l \\<notin> Dom (snd a) \\<and>\n      b = (update (fst a) x (RVal (Loc l)), (l, C, []) # snd a)\n 3. \\<And>G x y F.\n       \\<forall>n.\n          G \\<Turnstile>\\<^sub>n Get x y\n                                  F : \\<lambda>a b.\n   \\<exists>l C Flds v.\n      fst a y = RVal (Loc l) \\<and>\n      lookup (snd a) l = Some (C, Flds) \\<and>\n      lookup Flds F = Some v \\<and> b = (update (fst a) x v, snd a)\n 4. \\<And>G x F e.\n       \\<forall>n.\n          G \\<Turnstile>\\<^sub>n Put x F\n                                  e : \\<lambda>a b.\n   \\<exists>l C Flds.\n      fst a x = RVal (Loc l) \\<and>\n      lookup (snd a) l = Some (C, Flds) \\<and>\n      b = (fst a, (l, C, (F, evalE e (fst a)) # Flds) # snd a)\n 5. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        G \\<rhd> d : B; \\<forall>n. G \\<Turnstile>\\<^sub>n d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n Comp c\n              d : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 6. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        G \\<rhd> d : B; \\<forall>n. G \\<Turnstile>\\<^sub>n d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n Iff b c\n              d : \\<lambda>a c.\n                     (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n                     (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 7. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B; \\<forall>n. G \\<Turnstile>\\<^sub>n c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n While b\n              c : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 8. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>n. {A} \\<union> G \\<Turnstile>\\<^sub>n body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 9. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 10. \\<And>G c A B.\n        \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n         \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n        \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "apply(clarsimp, erule Sem_eval_cases, simp)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>G x C.\n       \\<forall>n.\n          G \\<Turnstile>\\<^sub>n New x\n                                  C : \\<lambda>a b.\n   \\<exists>l.\n      l \\<notin> Dom (snd a) \\<and>\n      b = (update (fst a) x (RVal (Loc l)), (l, C, []) # snd a)\n 2. \\<And>G x y F.\n       \\<forall>n.\n          G \\<Turnstile>\\<^sub>n Get x y\n                                  F : \\<lambda>a b.\n   \\<exists>l C Flds v.\n      fst a y = RVal (Loc l) \\<and>\n      lookup (snd a) l = Some (C, Flds) \\<and>\n      lookup Flds F = Some v \\<and> b = (update (fst a) x v, snd a)\n 3. \\<And>G x F e.\n       \\<forall>n.\n          G \\<Turnstile>\\<^sub>n Put x F\n                                  e : \\<lambda>a b.\n   \\<exists>l C Flds.\n      fst a x = RVal (Loc l) \\<and>\n      lookup (snd a) l = Some (C, Flds) \\<and>\n      b = (fst a, (l, C, (F, evalE e (fst a)) # Flds) # snd a)\n 4. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        G \\<rhd> d : B; \\<forall>n. G \\<Turnstile>\\<^sub>n d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n Comp c\n              d : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 5. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        G \\<rhd> d : B; \\<forall>n. G \\<Turnstile>\\<^sub>n d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n Iff b c\n              d : \\<lambda>a c.\n                     (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n                     (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 6. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B; \\<forall>n. G \\<Turnstile>\\<^sub>n c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n While b\n              c : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 7. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>n. {A} \\<union> G \\<Turnstile>\\<^sub>n body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 8. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 9. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "apply (simp add: validn_def VDM_validn_def)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>G x C.\n       \\<forall>n.\n           \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n          (\\<forall>m\\<le>n.\n              \\<forall>a b aa ba.\n                  (a, b) , New x\n                            C \\<rightarrow>\\<^sub>m  (aa,\n                ba)  \\<longrightarrow>\n                 (\\<exists>l.\n                     l \\<notin> Dom b \\<and>\n                     aa = update a x (RVal (Loc l)) \\<and>\n                     ba = (l, C, []) # b))\n 2. \\<And>G x y F.\n       \\<forall>n.\n          G \\<Turnstile>\\<^sub>n Get x y\n                                  F : \\<lambda>a b.\n   \\<exists>l C Flds v.\n      fst a y = RVal (Loc l) \\<and>\n      lookup (snd a) l = Some (C, Flds) \\<and>\n      lookup Flds F = Some v \\<and> b = (update (fst a) x v, snd a)\n 3. \\<And>G x F e.\n       \\<forall>n.\n          G \\<Turnstile>\\<^sub>n Put x F\n                                  e : \\<lambda>a b.\n   \\<exists>l C Flds.\n      fst a x = RVal (Loc l) \\<and>\n      lookup (snd a) l = Some (C, Flds) \\<and>\n      b = (fst a, (l, C, (F, evalE e (fst a)) # Flds) # snd a)\n 4. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        G \\<rhd> d : B; \\<forall>n. G \\<Turnstile>\\<^sub>n d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n Comp c\n              d : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 5. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        G \\<rhd> d : B; \\<forall>n. G \\<Turnstile>\\<^sub>n d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n Iff b c\n              d : \\<lambda>a c.\n                     (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n                     (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 6. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B; \\<forall>n. G \\<Turnstile>\\<^sub>n c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n While b\n              c : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 7. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>n. {A} \\<union> G \\<Turnstile>\\<^sub>n body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 8. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 9. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "apply(clarsimp, erule Sem_eval_cases, simp)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>G x y F.\n       \\<forall>n.\n          G \\<Turnstile>\\<^sub>n Get x y\n                                  F : \\<lambda>a b.\n   \\<exists>l C Flds v.\n      fst a y = RVal (Loc l) \\<and>\n      lookup (snd a) l = Some (C, Flds) \\<and>\n      lookup Flds F = Some v \\<and> b = (update (fst a) x v, snd a)\n 2. \\<And>G x F e.\n       \\<forall>n.\n          G \\<Turnstile>\\<^sub>n Put x F\n                                  e : \\<lambda>a b.\n   \\<exists>l C Flds.\n      fst a x = RVal (Loc l) \\<and>\n      lookup (snd a) l = Some (C, Flds) \\<and>\n      b = (fst a, (l, C, (F, evalE e (fst a)) # Flds) # snd a)\n 3. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        G \\<rhd> d : B; \\<forall>n. G \\<Turnstile>\\<^sub>n d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n Comp c\n              d : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 4. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        G \\<rhd> d : B; \\<forall>n. G \\<Turnstile>\\<^sub>n d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n Iff b c\n              d : \\<lambda>a c.\n                     (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n                     (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 5. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B; \\<forall>n. G \\<Turnstile>\\<^sub>n c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n While b\n              c : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 6. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>n. {A} \\<union> G \\<Turnstile>\\<^sub>n body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 7. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 8. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "apply (simp add: validn_def VDM_validn_def)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>G x y F.\n       \\<forall>n.\n           \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n          (\\<forall>m\\<le>n.\n              \\<forall>a b aa ba.\n                  (a, b) , Get x y\n                            F \\<rightarrow>\\<^sub>m  (aa,\n                ba)  \\<longrightarrow>\n                 (\\<exists>l.\n                     a y = RVal (Loc l) \\<and>\n                     (\\<exists>C Flds.\n                         lookup b l = Some (C, Flds) \\<and>\n                         (\\<exists>v.\n                             lookup Flds F = Some v \\<and>\n                             aa = update a x v \\<and> ba = b))))\n 2. \\<And>G x F e.\n       \\<forall>n.\n          G \\<Turnstile>\\<^sub>n Put x F\n                                  e : \\<lambda>a b.\n   \\<exists>l C Flds.\n      fst a x = RVal (Loc l) \\<and>\n      lookup (snd a) l = Some (C, Flds) \\<and>\n      b = (fst a, (l, C, (F, evalE e (fst a)) # Flds) # snd a)\n 3. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        G \\<rhd> d : B; \\<forall>n. G \\<Turnstile>\\<^sub>n d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n Comp c\n              d : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 4. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        G \\<rhd> d : B; \\<forall>n. G \\<Turnstile>\\<^sub>n d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n Iff b c\n              d : \\<lambda>a c.\n                     (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n                     (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 5. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B; \\<forall>n. G \\<Turnstile>\\<^sub>n c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n While b\n              c : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 6. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>n. {A} \\<union> G \\<Turnstile>\\<^sub>n body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 7. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 8. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "apply(clarsimp, erule Sem_eval_cases, simp)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>G x F e.\n       \\<forall>n.\n          G \\<Turnstile>\\<^sub>n Put x F\n                                  e : \\<lambda>a b.\n   \\<exists>l C Flds.\n      fst a x = RVal (Loc l) \\<and>\n      lookup (snd a) l = Some (C, Flds) \\<and>\n      b = (fst a, (l, C, (F, evalE e (fst a)) # Flds) # snd a)\n 2. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        G \\<rhd> d : B; \\<forall>n. G \\<Turnstile>\\<^sub>n d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n Comp c\n              d : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 3. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        G \\<rhd> d : B; \\<forall>n. G \\<Turnstile>\\<^sub>n d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n Iff b c\n              d : \\<lambda>a c.\n                     (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n                     (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 4. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B; \\<forall>n. G \\<Turnstile>\\<^sub>n c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n While b\n              c : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 5. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>n. {A} \\<union> G \\<Turnstile>\\<^sub>n body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 6. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 7. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "apply (simp add: validn_def VDM_validn_def)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>G x F e.\n       \\<forall>n.\n           \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n          (\\<forall>m\\<le>n.\n              \\<forall>a b aa ba.\n                  (a, b) , Put x F\n                            e \\<rightarrow>\\<^sub>m  (aa,\n                ba)  \\<longrightarrow>\n                 (\\<exists>l.\n                     a x = RVal (Loc l) \\<and>\n                     (\\<exists>C Flds.\n                         lookup b l = Some (C, Flds) \\<and>\n                         aa = a \\<and>\n                         ba = (l, C, (F, evalE e a) # Flds) # b)))\n 2. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        G \\<rhd> d : B; \\<forall>n. G \\<Turnstile>\\<^sub>n d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n Comp c\n              d : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 3. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        G \\<rhd> d : B; \\<forall>n. G \\<Turnstile>\\<^sub>n d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n Iff b c\n              d : \\<lambda>a c.\n                     (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n                     (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 4. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B; \\<forall>n. G \\<Turnstile>\\<^sub>n c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n While b\n              c : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 5. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>n. {A} \\<union> G \\<Turnstile>\\<^sub>n body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 6. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 7. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "apply(clarsimp, erule Sem_eval_cases, simp)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        G \\<rhd> d : B; \\<forall>n. G \\<Turnstile>\\<^sub>n d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n Comp c\n              d : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 2. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        G \\<rhd> d : B; \\<forall>n. G \\<Turnstile>\\<^sub>n d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n Iff b c\n              d : \\<lambda>a c.\n                     (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n                     (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 3. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B; \\<forall>n. G \\<Turnstile>\\<^sub>n c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n While b\n              c : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 4. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>n. {A} \\<union> G \\<Turnstile>\\<^sub>n body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 5. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 6. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "apply (simp add: validn_def VDM_validn_def)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>n.\n            \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n           (\\<forall>m\\<le>n.\n               \\<forall>a b aa ba.\n                   (a, b) , c \\<rightarrow>\\<^sub>m  (aa,\n                ba)  \\<longrightarrow>\n                  A (a, b) (aa, ba));\n        G \\<rhd> d : B;\n        \\<forall>n.\n            \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n           (\\<forall>m\\<le>n.\n               \\<forall>a b aa ba.\n                   (a, b) , d \\<rightarrow>\\<^sub>m  (aa,\n                ba)  \\<longrightarrow>\n                  B (a, b) (aa, ba))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                             \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n                            (\\<forall>m\\<le>n.\n                                \\<forall>a b aa ba.\n                                    (a, b) , Comp c\n        d \\<rightarrow>\\<^sub>m  (aa, ba)  \\<longrightarrow>\n                                   (\\<exists>ab bb.\n A (a, b) (ab, bb) \\<and> B (ab, bb) (aa, ba)))\n 2. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        G \\<rhd> d : B; \\<forall>n. G \\<Turnstile>\\<^sub>n d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n Iff b c\n              d : \\<lambda>a c.\n                     (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n                     (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 3. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B; \\<forall>n. G \\<Turnstile>\\<^sub>n c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n While b\n              c : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 4. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>n. {A} \\<union> G \\<Turnstile>\\<^sub>n body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 5. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 6. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "apply(clarsimp, erule Sem_eval_cases, clarsimp)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G c A d B n a b aa ba na ab bb ma.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>n.\n            \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n           (\\<forall>m\\<le>n.\n               \\<forall>a b aa ba.\n                   (a, b) , c \\<rightarrow>\\<^sub>m  (aa,\n                ba)  \\<longrightarrow>\n                  A (a, b) (aa, ba));\n        G \\<rhd> d : B;\n        \\<forall>n.\n            \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n           (\\<forall>m\\<le>n.\n               \\<forall>a b aa ba.\n                   (a, b) , d \\<rightarrow>\\<^sub>m  (aa,\n                ba)  \\<longrightarrow>\n                  B (a, b) (aa, ba));\n         \\<Turnstile>\\<^sub>n G  ; Suc (max na ma) \\<le> n;\n         (a, b) , c \\<rightarrow>\\<^sub>na  (ab, bb) ;\n         (ab, bb) , d \\<rightarrow>\\<^sub>ma  (aa, ba) \\<rbrakk>\n       \\<Longrightarrow> \\<exists>ab bb.\n                            A (a, b) (ab, bb) \\<and> B (ab, bb) (aa, ba)\n 2. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        G \\<rhd> d : B; \\<forall>n. G \\<Turnstile>\\<^sub>n d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n Iff b c\n              d : \\<lambda>a c.\n                     (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n                     (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 3. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B; \\<forall>n. G \\<Turnstile>\\<^sub>n c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n While b\n              c : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 4. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>n. {A} \\<union> G \\<Turnstile>\\<^sub>n body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 5. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 6. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "apply (drule MAX, clarsimp)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G c A d B n a b aa ba na ab bb ma.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>n.\n            \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n           (\\<forall>m\\<le>n.\n               \\<forall>a b aa ba.\n                   (a, b) , c \\<rightarrow>\\<^sub>m  (aa,\n                ba)  \\<longrightarrow>\n                  A (a, b) (aa, ba));\n        G \\<rhd> d : B;\n        \\<forall>n.\n            \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n           (\\<forall>m\\<le>n.\n               \\<forall>a b aa ba.\n                   (a, b) , d \\<rightarrow>\\<^sub>m  (aa,\n                ba)  \\<longrightarrow>\n                  B (a, b) (aa, ba));\n         \\<Turnstile>\\<^sub>n G  ;\n         (a, b) , c \\<rightarrow>\\<^sub>na  (ab, bb) ;\n         (ab, bb) , d \\<rightarrow>\\<^sub>ma  (aa, ba) ; na \\<le> n;\n        ma \\<le> n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ab bb.\n                            A (a, b) (ab, bb) \\<and> B (ab, bb) (aa, ba)\n 2. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        G \\<rhd> d : B; \\<forall>n. G \\<Turnstile>\\<^sub>n d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n Iff b c\n              d : \\<lambda>a c.\n                     (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n                     (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 3. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B; \\<forall>n. G \\<Turnstile>\\<^sub>n c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n While b\n              c : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 4. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>n. {A} \\<union> G \\<Turnstile>\\<^sub>n body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 5. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 6. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "apply (erule_tac x=n in allE, clarsimp, rotate_tac -1, erule_tac x=na in allE, clarsimp)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G c A d B n a b aa ba na ab bb ma.\n       \\<lbrakk>G \\<rhd> c : A; G \\<rhd> d : B;\n        \\<forall>n.\n            \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n           (\\<forall>m\\<le>n.\n               \\<forall>a b aa ba.\n                   (a, b) , d \\<rightarrow>\\<^sub>m  (aa,\n                ba)  \\<longrightarrow>\n                  B (a, b) (aa, ba));\n         \\<Turnstile>\\<^sub>n G  ;\n         (a, b) , c \\<rightarrow>\\<^sub>na  (ab, bb) ;\n         (ab, bb) , d \\<rightarrow>\\<^sub>ma  (aa, ba) ; na \\<le> n;\n        ma \\<le> n;\n        \\<forall>a b aa ba.\n            (a, b) , c \\<rightarrow>\\<^sub>na  (aa, ba)  \\<longrightarrow>\n           A (a, b) (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ab bb.\n                            A (a, b) (ab, bb) \\<and> B (ab, bb) (aa, ba)\n 2. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        G \\<rhd> d : B; \\<forall>n. G \\<Turnstile>\\<^sub>n d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n Iff b c\n              d : \\<lambda>a c.\n                     (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n                     (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 3. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B; \\<forall>n. G \\<Turnstile>\\<^sub>n c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n While b\n              c : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 4. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>n. {A} \\<union> G \\<Turnstile>\\<^sub>n body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 5. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 6. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "apply (erule_tac x=n in allE, clarsimp, rotate_tac -1, erule_tac x=ma in allE, clarsimp)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G c A d B n a b aa ba na ab bb ma.\n       \\<lbrakk>G \\<rhd> c : A; G \\<rhd> d : B;  \\<Turnstile>\\<^sub>n G  ;\n         (a, b) , c \\<rightarrow>\\<^sub>na  (ab, bb) ;\n         (ab, bb) , d \\<rightarrow>\\<^sub>ma  (aa, ba) ; na \\<le> n;\n        ma \\<le> n;\n        \\<forall>a b aa ba.\n            (a, b) , c \\<rightarrow>\\<^sub>na  (aa, ba)  \\<longrightarrow>\n           A (a, b) (aa, ba);\n        \\<forall>a b aa ba.\n            (a, b) , d \\<rightarrow>\\<^sub>ma  (aa, ba)  \\<longrightarrow>\n           B (a, b) (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ab bb.\n                            A (a, b) (ab, bb) \\<and> B (ab, bb) (aa, ba)\n 2. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        G \\<rhd> d : B; \\<forall>n. G \\<Turnstile>\\<^sub>n d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n Iff b c\n              d : \\<lambda>a c.\n                     (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n                     (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 3. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B; \\<forall>n. G \\<Turnstile>\\<^sub>n c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n While b\n              c : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 4. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>n. {A} \\<union> G \\<Turnstile>\\<^sub>n body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 5. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 6. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "apply (rule_tac x=ab in exI, rule_tac x=bb in exI, fast)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        G \\<rhd> d : B; \\<forall>n. G \\<Turnstile>\\<^sub>n d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n Iff b c\n              d : \\<lambda>a c.\n                     (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n                     (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 2. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B; \\<forall>n. G \\<Turnstile>\\<^sub>n c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n While b\n              c : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 3. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>n. {A} \\<union> G \\<Turnstile>\\<^sub>n body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 4. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 5. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "apply (simp add: validn_def VDM_validn_def)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>n.\n            \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n           (\\<forall>m\\<le>n.\n               \\<forall>a b aa ba.\n                   (a, b) , c \\<rightarrow>\\<^sub>m  (aa,\n                ba)  \\<longrightarrow>\n                  A (a, b) (aa, ba));\n        G \\<rhd> d : B;\n        \\<forall>n.\n            \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n           (\\<forall>m\\<le>n.\n               \\<forall>a b aa ba.\n                   (a, b) , d \\<rightarrow>\\<^sub>m  (aa,\n                ba)  \\<longrightarrow>\n                  B (a, b) (aa, ba))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                             \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n                            (\\<forall>m\\<le>n.\n                                \\<forall>a ba aa bb.\n                                    (a, ba) , Iff b c\n         d \\<rightarrow>\\<^sub>m  (aa, bb)  \\<longrightarrow>\n                                   (evalB b a \\<longrightarrow>\n                                    A (a, ba) (aa, bb)) \\<and>\n                                   (\\<not> evalB b a \\<longrightarrow>\n                                    B (a, ba) (aa, bb)))\n 2. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B; \\<forall>n. G \\<Turnstile>\\<^sub>n c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n While b\n              c : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 3. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>n. {A} \\<union> G \\<Turnstile>\\<^sub>n body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 4. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 5. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "apply(clarsimp, erule Sem_eval_cases, clarsimp)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G c A d B b n a ba aa bb na.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>n.\n            \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n           (\\<forall>m\\<le>n.\n               \\<forall>a b aa ba.\n                   (a, b) , c \\<rightarrow>\\<^sub>m  (aa,\n                ba)  \\<longrightarrow>\n                  A (a, b) (aa, ba));\n        G \\<rhd> d : B;\n        \\<forall>n.\n            \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n           (\\<forall>m\\<le>n.\n               \\<forall>a b aa ba.\n                   (a, b) , d \\<rightarrow>\\<^sub>m  (aa,\n                ba)  \\<longrightarrow>\n                  B (a, b) (aa, ba));\n         \\<Turnstile>\\<^sub>n G  ; Suc na \\<le> n; evalB b a;\n         (a, ba) , c \\<rightarrow>\\<^sub>na  (aa, bb) \\<rbrakk>\n       \\<Longrightarrow> A (a, ba) (aa, bb)\n 2. \\<And>G c A d B b n m a ba aa bb na.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>n.\n            \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n           (\\<forall>m\\<le>n.\n               \\<forall>a b aa ba.\n                   (a, b) , c \\<rightarrow>\\<^sub>m  (aa,\n                ba)  \\<longrightarrow>\n                  A (a, b) (aa, ba));\n        G \\<rhd> d : B;\n        \\<forall>n.\n            \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n           (\\<forall>m\\<le>n.\n               \\<forall>a b aa ba.\n                   (a, b) , d \\<rightarrow>\\<^sub>m  (aa,\n                ba)  \\<longrightarrow>\n                  B (a, b) (aa, ba));\n         \\<Turnstile>\\<^sub>n G  ; m \\<le> n; m = Suc na;\n        \\<not> evalB b (fst (a, ba));\n         (a, ba) , d \\<rightarrow>\\<^sub>na  (aa, bb) \\<rbrakk>\n       \\<Longrightarrow> (evalB b a \\<longrightarrow>\n                          A (a, ba) (aa, bb)) \\<and>\n                         (\\<not> evalB b a \\<longrightarrow>\n                          B (a, ba) (aa, bb))\n 3. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B; \\<forall>n. G \\<Turnstile>\\<^sub>n c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n While b\n              c : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 4. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>n. {A} \\<union> G \\<Turnstile>\\<^sub>n body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 5. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 6. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "apply (erule thin_rl, rotate_tac 1, erule thin_rl, erule thin_rl)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G c A d B b n a ba aa bb na.\n       \\<lbrakk> \\<Turnstile>\\<^sub>n G  ; Suc na \\<le> n; evalB b a;\n         (a, ba) , c \\<rightarrow>\\<^sub>na  (aa, bb) ;\n        \\<forall>n.\n            \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n           (\\<forall>m\\<le>n.\n               \\<forall>a b aa ba.\n                   (a, b) , c \\<rightarrow>\\<^sub>m  (aa,\n                ba)  \\<longrightarrow>\n                  A (a, b) (aa, ba))\\<rbrakk>\n       \\<Longrightarrow> A (a, ba) (aa, bb)\n 2. \\<And>G c A d B b n m a ba aa bb na.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>n.\n            \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n           (\\<forall>m\\<le>n.\n               \\<forall>a b aa ba.\n                   (a, b) , c \\<rightarrow>\\<^sub>m  (aa,\n                ba)  \\<longrightarrow>\n                  A (a, b) (aa, ba));\n        G \\<rhd> d : B;\n        \\<forall>n.\n            \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n           (\\<forall>m\\<le>n.\n               \\<forall>a b aa ba.\n                   (a, b) , d \\<rightarrow>\\<^sub>m  (aa,\n                ba)  \\<longrightarrow>\n                  B (a, b) (aa, ba));\n         \\<Turnstile>\\<^sub>n G  ; m \\<le> n; m = Suc na;\n        \\<not> evalB b (fst (a, ba));\n         (a, ba) , d \\<rightarrow>\\<^sub>na  (aa, bb) \\<rbrakk>\n       \\<Longrightarrow> (evalB b a \\<longrightarrow>\n                          A (a, ba) (aa, bb)) \\<and>\n                         (\\<not> evalB b a \\<longrightarrow>\n                          B (a, ba) (aa, bb))\n 3. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B; \\<forall>n. G \\<Turnstile>\\<^sub>n c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n While b\n              c : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 4. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>n. {A} \\<union> G \\<Turnstile>\\<^sub>n body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 5. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 6. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "apply (erule_tac x=n in allE, clarsimp, erule_tac x=na in allE, clarsimp)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>G c A d B b n m a ba aa bb na.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>n.\n            \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n           (\\<forall>m\\<le>n.\n               \\<forall>a b aa ba.\n                   (a, b) , c \\<rightarrow>\\<^sub>m  (aa,\n                ba)  \\<longrightarrow>\n                  A (a, b) (aa, ba));\n        G \\<rhd> d : B;\n        \\<forall>n.\n            \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n           (\\<forall>m\\<le>n.\n               \\<forall>a b aa ba.\n                   (a, b) , d \\<rightarrow>\\<^sub>m  (aa,\n                ba)  \\<longrightarrow>\n                  B (a, b) (aa, ba));\n         \\<Turnstile>\\<^sub>n G  ; m \\<le> n; m = Suc na;\n        \\<not> evalB b (fst (a, ba));\n         (a, ba) , d \\<rightarrow>\\<^sub>na  (aa, bb) \\<rbrakk>\n       \\<Longrightarrow> (evalB b a \\<longrightarrow>\n                          A (a, ba) (aa, bb)) \\<and>\n                         (\\<not> evalB b a \\<longrightarrow>\n                          B (a, ba) (aa, bb))\n 2. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B; \\<forall>n. G \\<Turnstile>\\<^sub>n c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n While b\n              c : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 3. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>n. {A} \\<union> G \\<Turnstile>\\<^sub>n body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 4. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 5. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "apply (erule thin_rl, erule thin_rl)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>G c A d B b n m a ba aa bb na.\n       \\<lbrakk>G \\<rhd> d : B;\n        \\<forall>n.\n            \\<Turnstile>\\<^sub>n G   \\<longrightarrow>\n           (\\<forall>m\\<le>n.\n               \\<forall>a b aa ba.\n                   (a, b) , d \\<rightarrow>\\<^sub>m  (aa,\n                ba)  \\<longrightarrow>\n                  B (a, b) (aa, ba));\n         \\<Turnstile>\\<^sub>n G  ; m \\<le> n; m = Suc na;\n        \\<not> evalB b (fst (a, ba));\n         (a, ba) , d \\<rightarrow>\\<^sub>na  (aa, bb) \\<rbrakk>\n       \\<Longrightarrow> (evalB b a \\<longrightarrow>\n                          A (a, ba) (aa, bb)) \\<and>\n                         (\\<not> evalB b a \\<longrightarrow>\n                          B (a, ba) (aa, bb))\n 2. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B; \\<forall>n. G \\<Turnstile>\\<^sub>n c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n While b\n              c : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 3. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>n. {A} \\<union> G \\<Turnstile>\\<^sub>n body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 4. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 5. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "apply (erule_tac x=n in allE, clarsimp, erule_tac x=na in allE, clarsimp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B; \\<forall>n. G \\<Turnstile>\\<^sub>n c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            G \\<Turnstile>\\<^sub>n While b\n              c : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 2. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>n. {A} \\<union> G \\<Turnstile>\\<^sub>n body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 3. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 4. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "apply clarsimp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>G c B b A n.\n       \\<lbrakk>G \\<rhd> c : B; \\<forall>n. G \\<Turnstile>\\<^sub>n c : B;\n        \\<forall>a.\n           \\<not> evalB b a \\<longrightarrow> (\\<forall>b. A (a, b) (a, b));\n        \\<forall>a.\n           evalB b a \\<longrightarrow>\n           (\\<forall>b aa ba.\n               B (a, b) (aa, ba) \\<longrightarrow>\n               (\\<forall>ab bb.\n                   A (aa, ba) (ab, bb) \\<longrightarrow>\n                   A (a, b) (ab, bb)))\\<rbrakk>\n       \\<Longrightarrow> G \\<Turnstile>\\<^sub>n While b\n           c : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 2. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>n. {A} \\<union> G \\<Turnstile>\\<^sub>n body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 3. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 4. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "apply (rule SoundWhile)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G c B b A n na.\n       \\<lbrakk>G \\<rhd> c : B; \\<forall>n. G \\<Turnstile>\\<^sub>n c : B;\n        \\<forall>a.\n           \\<not> evalB b a \\<longrightarrow> (\\<forall>b. A (a, b) (a, b));\n        \\<forall>a.\n           evalB b a \\<longrightarrow>\n           (\\<forall>b aa ba.\n               B (a, b) (aa, ba) \\<longrightarrow>\n               (\\<forall>ab bb.\n                   A (aa, ba) (ab, bb) \\<longrightarrow>\n                   A (a, b) (ab, bb)))\\<rbrakk>\n       \\<Longrightarrow> G \\<Turnstile>\\<^sub>na c : ?B176 G c B b A n\n 2. \\<And>G c B b A n s.\n       \\<lbrakk>G \\<rhd> c : B; \\<forall>n. G \\<Turnstile>\\<^sub>n c : B;\n        \\<forall>a.\n           \\<not> evalB b a \\<longrightarrow> (\\<forall>b. A (a, b) (a, b));\n        \\<forall>a.\n           evalB b a \\<longrightarrow>\n           (\\<forall>b aa ba.\n               B (a, b) (aa, ba) \\<longrightarrow>\n               (\\<forall>ab bb.\n                   A (aa, ba) (ab, bb) \\<longrightarrow>\n                   A (a, b) (ab, bb)));\n        \\<not> evalB b (fst s)\\<rbrakk>\n       \\<Longrightarrow> A s s\n 3. \\<And>G c B b A n s r t.\n       \\<lbrakk>G \\<rhd> c : B; \\<forall>n. G \\<Turnstile>\\<^sub>n c : B;\n        \\<forall>a.\n           \\<not> evalB b a \\<longrightarrow> (\\<forall>b. A (a, b) (a, b));\n        \\<forall>a.\n           evalB b a \\<longrightarrow>\n           (\\<forall>b aa ba.\n               B (a, b) (aa, ba) \\<longrightarrow>\n               (\\<forall>ab bb.\n                   A (aa, ba) (ab, bb) \\<longrightarrow>\n                   A (a, b) (ab, bb)));\n        evalB b (fst s); ?B176 G c B b A n s r; A r t\\<rbrakk>\n       \\<Longrightarrow> A s t\n 4. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>n. {A} \\<union> G \\<Turnstile>\\<^sub>n body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 5. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 6. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "apply fast"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>G c B b A n s.\n       \\<lbrakk>G \\<rhd> c : B; \\<forall>n. G \\<Turnstile>\\<^sub>n c : B;\n        \\<forall>a.\n           \\<not> evalB b a \\<longrightarrow> (\\<forall>b. A (a, b) (a, b));\n        \\<forall>a.\n           evalB b a \\<longrightarrow>\n           (\\<forall>b aa ba.\n               B (a, b) (aa, ba) \\<longrightarrow>\n               (\\<forall>ab bb.\n                   A (aa, ba) (ab, bb) \\<longrightarrow>\n                   A (a, b) (ab, bb)));\n        \\<not> evalB b (fst s)\\<rbrakk>\n       \\<Longrightarrow> A s s\n 2. \\<And>G c B b A n s r t.\n       \\<lbrakk>G \\<rhd> c : B; \\<forall>n. G \\<Turnstile>\\<^sub>n c : B;\n        \\<forall>a.\n           \\<not> evalB b a \\<longrightarrow> (\\<forall>b. A (a, b) (a, b));\n        \\<forall>a.\n           evalB b a \\<longrightarrow>\n           (\\<forall>b aa ba.\n               B (a, b) (aa, ba) \\<longrightarrow>\n               (\\<forall>ab bb.\n                   A (aa, ba) (ab, bb) \\<longrightarrow>\n                   A (a, b) (ab, bb)));\n        evalB b (fst s); B s r; A r t\\<rbrakk>\n       \\<Longrightarrow> A s t\n 3. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>n. {A} \\<union> G \\<Turnstile>\\<^sub>n body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 4. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 5. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "apply (case_tac s, clarsimp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>G c B b A n s r t.\n       \\<lbrakk>G \\<rhd> c : B; \\<forall>n. G \\<Turnstile>\\<^sub>n c : B;\n        \\<forall>a.\n           \\<not> evalB b a \\<longrightarrow> (\\<forall>b. A (a, b) (a, b));\n        \\<forall>a.\n           evalB b a \\<longrightarrow>\n           (\\<forall>b aa ba.\n               B (a, b) (aa, ba) \\<longrightarrow>\n               (\\<forall>ab bb.\n                   A (aa, ba) (ab, bb) \\<longrightarrow>\n                   A (a, b) (ab, bb)));\n        evalB b (fst s); B s r; A r t\\<rbrakk>\n       \\<Longrightarrow> A s t\n 2. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>n. {A} \\<union> G \\<Turnstile>\\<^sub>n body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 3. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 4. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "apply (case_tac s, clarsimp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>n. {A} \\<union> G \\<Turnstile>\\<^sub>n body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 2. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 3. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "apply (simp add: validn_def, clarsimp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A G n.\n       \\<lbrakk>insert A G \\<rhd> body : A;\n        \\<forall>n.\n            \\<Turnstile>\\<^sub>n insert A G   \\<longrightarrow>\n            \\<Turnstile>\\<^sub>n body : A ;\n         \\<Turnstile>\\<^sub>n G  \\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile>\\<^sub>n Call : A \n 2. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 3. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "apply (rule SoundCall)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>A G n na.\n       \\<lbrakk>insert A G \\<rhd> body : A;\n        \\<forall>n.\n            \\<Turnstile>\\<^sub>n insert A G   \\<longrightarrow>\n            \\<Turnstile>\\<^sub>n body : A ;\n         \\<Turnstile>\\<^sub>n G  ;\n         \\<Turnstile>\\<^sub>na {A} \\<union> ?G195 A G n  \\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile>\\<^sub>na body : A \n 2. \\<And>A G n.\n       \\<lbrakk>insert A G \\<rhd> body : A;\n        \\<forall>n.\n            \\<Turnstile>\\<^sub>n insert A G   \\<longrightarrow>\n            \\<Turnstile>\\<^sub>n body : A ;\n         \\<Turnstile>\\<^sub>n G  \\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile>\\<^sub>n ?G195 A G n  \n 3. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 4. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>A G n.\n       \\<lbrakk>insert A G \\<rhd> body : A;\n        \\<forall>n.\n            \\<Turnstile>\\<^sub>n insert A G   \\<longrightarrow>\n            \\<Turnstile>\\<^sub>n body : A ;\n         \\<Turnstile>\\<^sub>n G  \\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile>\\<^sub>n ?G195 A G n  \n 2. \\<And>A G n na.\n       \\<lbrakk>insert A G \\<rhd> body : A;\n        \\<forall>n.\n            \\<Turnstile>\\<^sub>n insert A G   \\<longrightarrow>\n            \\<Turnstile>\\<^sub>n body : A ;\n         \\<Turnstile>\\<^sub>n G  ;\n         \\<Turnstile>\\<^sub>na {A} \\<union> ?G195 A G n  \\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile>\\<^sub>na body : A \n 3. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 4. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "apply assumption"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A G n na.\n       \\<lbrakk>insert A G \\<rhd> body : A;\n        \\<forall>n.\n            \\<Turnstile>\\<^sub>n insert A G   \\<longrightarrow>\n            \\<Turnstile>\\<^sub>n body : A ;\n         \\<Turnstile>\\<^sub>n G  ;\n         \\<Turnstile>\\<^sub>na {A} \\<union> G  \\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile>\\<^sub>na body : A \n 2. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 3. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "apply fastforce"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>n. G \\<Turnstile>\\<^sub>n Call : A\n 2. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "apply (simp add: Ctxt_validn_def validn_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>n.\n          ((\\<exists>m. m \\<le> n) \\<longrightarrow>\n           (\\<forall>A.\n               A \\<in> G \\<longrightarrow>\n                \\<Turnstile>\\<^sub>n Call : A )) \\<longrightarrow>\n           \\<Turnstile>\\<^sub>n Call : A \n 2. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A; \\<forall>n. G \\<Turnstile>\\<^sub>n c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n. G \\<Turnstile>\\<^sub>n c : B", "apply (simp add: validn_def VDM_validn_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "theorem VDM_Sound: \"G \\<rhd> c: A \\<Longrightarrow> G \\<Turnstile> c:A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<rhd> c : A \\<Longrightarrow> G \\<Turnstile> c : A", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<rhd> c : A \\<Longrightarrow> G \\<Turnstile> c : A", "by (drule VDM_Sound_n, erule validn_valid)"], ["", "(*>*)"], ["", "text\\<open>A simple corollary is soundness w.r.t.~an empty context.\\<close>"], ["", "lemma VDM_Sound_emptyCtxt:\"{} \\<rhd> c : A \\<Longrightarrow>  \\<Turnstile> c : A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<rhd> c : A \\<Longrightarrow>  \\<Turnstile> c : A", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<rhd> c : A \\<Longrightarrow>  \\<Turnstile> c : A", "apply (drule VDM_Sound)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<Turnstile> c : A  \\<Longrightarrow>  \\<Turnstile> c : A", "apply (simp add: valid_def, erule mp)"], ["proof (prove)\ngoal (1 subgoal):\n 1.  \\<Turnstile> {}", "apply (simp add: Ctxt_valid_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "subsubsection\\<open>Derived rules\\<close>"], ["", "lemma WEAK[rule_format]:\n  \"G \\<rhd> c : A \\<Longrightarrow> (\\<forall> H . G \\<subseteq> H \\<longrightarrow> H \\<rhd> c :A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<rhd> c : A \\<Longrightarrow>\n    \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<rhd> c : A \\<Longrightarrow>\n    \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A", "apply (erule VDM_proof.induct)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>G.\n       \\<forall>H.\n          G \\<subseteq> H \\<longrightarrow>\n          H \\<rhd> Skip : \\<lambda>a b. b = a\n 2. \\<And>G x e.\n       \\<forall>H.\n          G \\<subseteq> H \\<longrightarrow>\n          H \\<rhd> Assign x\n                    e : \\<lambda>a b.\n                           b = (update (fst a) x (evalE e (fst a)), snd a)\n 3. \\<And>G x C.\n       \\<forall>H.\n          G \\<subseteq> H \\<longrightarrow>\n          H \\<rhd> New x\n                    C : \\<lambda>a b.\n                           \\<exists>l.\n                              l \\<notin> Dom (snd a) \\<and>\n                              b =\n                              (update (fst a) x (RVal (Loc l)),\n                               (l, C, []) # snd a)\n 4. \\<And>G x y F.\n       \\<forall>H.\n          G \\<subseteq> H \\<longrightarrow>\n          H \\<rhd> Get x y\n                    F : \\<lambda>a b.\n                           \\<exists>l C Flds v.\n                              fst a y = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              lookup Flds F = Some v \\<and>\n                              b = (update (fst a) x v, snd a)\n 5. \\<And>G x F e.\n       \\<forall>H.\n          G \\<subseteq> H \\<longrightarrow>\n          H \\<rhd> Put x F\n                    e : \\<lambda>a b.\n                           \\<exists>l C Flds.\n                              fst a x = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              b =\n                              (fst a,\n                               (l, C, (F, evalE e (fst a)) # Flds) # snd a)\n 6. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H.\n           G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Comp c\nd : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 7. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H.\n           G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 8. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 9. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>H.\n           {A} \\<union> G \\<subseteq> H \\<longrightarrow>\n           H \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Call : A\n 10. \\<And>A G.\n        A \\<in> G \\<Longrightarrow>\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> Call : A\nA total of 11 subgoals...", "apply clarsimp"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>G H.\n       G \\<subseteq> H \\<Longrightarrow> H \\<rhd> Skip : \\<lambda>a b. b = a\n 2. \\<And>G x e.\n       \\<forall>H.\n          G \\<subseteq> H \\<longrightarrow>\n          H \\<rhd> Assign x\n                    e : \\<lambda>a b.\n                           b = (update (fst a) x (evalE e (fst a)), snd a)\n 3. \\<And>G x C.\n       \\<forall>H.\n          G \\<subseteq> H \\<longrightarrow>\n          H \\<rhd> New x\n                    C : \\<lambda>a b.\n                           \\<exists>l.\n                              l \\<notin> Dom (snd a) \\<and>\n                              b =\n                              (update (fst a) x (RVal (Loc l)),\n                               (l, C, []) # snd a)\n 4. \\<And>G x y F.\n       \\<forall>H.\n          G \\<subseteq> H \\<longrightarrow>\n          H \\<rhd> Get x y\n                    F : \\<lambda>a b.\n                           \\<exists>l C Flds v.\n                              fst a y = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              lookup Flds F = Some v \\<and>\n                              b = (update (fst a) x v, snd a)\n 5. \\<And>G x F e.\n       \\<forall>H.\n          G \\<subseteq> H \\<longrightarrow>\n          H \\<rhd> Put x F\n                    e : \\<lambda>a b.\n                           \\<exists>l C Flds.\n                              fst a x = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              b =\n                              (fst a,\n                               (l, C, (F, evalE e (fst a)) # Flds) # snd a)\n 6. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H.\n           G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Comp c\nd : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 7. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H.\n           G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 8. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 9. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>H.\n           {A} \\<union> G \\<subseteq> H \\<longrightarrow>\n           H \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Call : A\n 10. \\<And>A G.\n        A \\<in> G \\<Longrightarrow>\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> Call : A\nA total of 11 subgoals...", "apply (rule VDMSkip)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>G x e.\n       \\<forall>H.\n          G \\<subseteq> H \\<longrightarrow>\n          H \\<rhd> Assign x\n                    e : \\<lambda>a b.\n                           b = (update (fst a) x (evalE e (fst a)), snd a)\n 2. \\<And>G x C.\n       \\<forall>H.\n          G \\<subseteq> H \\<longrightarrow>\n          H \\<rhd> New x\n                    C : \\<lambda>a b.\n                           \\<exists>l.\n                              l \\<notin> Dom (snd a) \\<and>\n                              b =\n                              (update (fst a) x (RVal (Loc l)),\n                               (l, C, []) # snd a)\n 3. \\<And>G x y F.\n       \\<forall>H.\n          G \\<subseteq> H \\<longrightarrow>\n          H \\<rhd> Get x y\n                    F : \\<lambda>a b.\n                           \\<exists>l C Flds v.\n                              fst a y = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              lookup Flds F = Some v \\<and>\n                              b = (update (fst a) x v, snd a)\n 4. \\<And>G x F e.\n       \\<forall>H.\n          G \\<subseteq> H \\<longrightarrow>\n          H \\<rhd> Put x F\n                    e : \\<lambda>a b.\n                           \\<exists>l C Flds.\n                              fst a x = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              b =\n                              (fst a,\n                               (l, C, (F, evalE e (fst a)) # Flds) # snd a)\n 5. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H.\n           G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Comp c\nd : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 6. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H.\n           G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 7. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 8. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>H.\n           {A} \\<union> G \\<subseteq> H \\<longrightarrow>\n           H \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Call : A\n 9. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> Call : A\n 10. \\<And>G c A B.\n        \\<lbrakk>G \\<rhd> c : A;\n         \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n         \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n        \\<Longrightarrow> \\<forall>H.\n                             G \\<subseteq> H \\<longrightarrow>\n                             H \\<rhd> c : B", "apply clarsimp"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>G x e H.\n       G \\<subseteq> H \\<Longrightarrow>\n       H \\<rhd> Assign x\n                 e : \\<lambda>a b.\n                        b = (update (fst a) x (evalE e (fst a)), snd a)\n 2. \\<And>G x C.\n       \\<forall>H.\n          G \\<subseteq> H \\<longrightarrow>\n          H \\<rhd> New x\n                    C : \\<lambda>a b.\n                           \\<exists>l.\n                              l \\<notin> Dom (snd a) \\<and>\n                              b =\n                              (update (fst a) x (RVal (Loc l)),\n                               (l, C, []) # snd a)\n 3. \\<And>G x y F.\n       \\<forall>H.\n          G \\<subseteq> H \\<longrightarrow>\n          H \\<rhd> Get x y\n                    F : \\<lambda>a b.\n                           \\<exists>l C Flds v.\n                              fst a y = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              lookup Flds F = Some v \\<and>\n                              b = (update (fst a) x v, snd a)\n 4. \\<And>G x F e.\n       \\<forall>H.\n          G \\<subseteq> H \\<longrightarrow>\n          H \\<rhd> Put x F\n                    e : \\<lambda>a b.\n                           \\<exists>l C Flds.\n                              fst a x = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              b =\n                              (fst a,\n                               (l, C, (F, evalE e (fst a)) # Flds) # snd a)\n 5. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H.\n           G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Comp c\nd : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 6. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H.\n           G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 7. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 8. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>H.\n           {A} \\<union> G \\<subseteq> H \\<longrightarrow>\n           H \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Call : A\n 9. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> Call : A\n 10. \\<And>G c A B.\n        \\<lbrakk>G \\<rhd> c : A;\n         \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n         \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n        \\<Longrightarrow> \\<forall>H.\n                             G \\<subseteq> H \\<longrightarrow>\n                             H \\<rhd> c : B", "apply (rule VDMAssign)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>G x C.\n       \\<forall>H.\n          G \\<subseteq> H \\<longrightarrow>\n          H \\<rhd> New x\n                    C : \\<lambda>a b.\n                           \\<exists>l.\n                              l \\<notin> Dom (snd a) \\<and>\n                              b =\n                              (update (fst a) x (RVal (Loc l)),\n                               (l, C, []) # snd a)\n 2. \\<And>G x y F.\n       \\<forall>H.\n          G \\<subseteq> H \\<longrightarrow>\n          H \\<rhd> Get x y\n                    F : \\<lambda>a b.\n                           \\<exists>l C Flds v.\n                              fst a y = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              lookup Flds F = Some v \\<and>\n                              b = (update (fst a) x v, snd a)\n 3. \\<And>G x F e.\n       \\<forall>H.\n          G \\<subseteq> H \\<longrightarrow>\n          H \\<rhd> Put x F\n                    e : \\<lambda>a b.\n                           \\<exists>l C Flds.\n                              fst a x = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              b =\n                              (fst a,\n                               (l, C, (F, evalE e (fst a)) # Flds) # snd a)\n 4. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H.\n           G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Comp c\nd : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 5. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H.\n           G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 6. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 7. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>H.\n           {A} \\<union> G \\<subseteq> H \\<longrightarrow>\n           H \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Call : A\n 8. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> Call : A\n 9. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B", "apply clarsimp"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>G x C H.\n       G \\<subseteq> H \\<Longrightarrow>\n       H \\<rhd> New x\n                 C : \\<lambda>a b.\n                        \\<exists>l.\n                           l \\<notin> Dom (snd a) \\<and>\n                           b =\n                           (update (fst a) x (RVal (Loc l)),\n                            (l, C, []) # snd a)\n 2. \\<And>G x y F.\n       \\<forall>H.\n          G \\<subseteq> H \\<longrightarrow>\n          H \\<rhd> Get x y\n                    F : \\<lambda>a b.\n                           \\<exists>l C Flds v.\n                              fst a y = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              lookup Flds F = Some v \\<and>\n                              b = (update (fst a) x v, snd a)\n 3. \\<And>G x F e.\n       \\<forall>H.\n          G \\<subseteq> H \\<longrightarrow>\n          H \\<rhd> Put x F\n                    e : \\<lambda>a b.\n                           \\<exists>l C Flds.\n                              fst a x = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              b =\n                              (fst a,\n                               (l, C, (F, evalE e (fst a)) # Flds) # snd a)\n 4. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H.\n           G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Comp c\nd : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 5. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H.\n           G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 6. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 7. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>H.\n           {A} \\<union> G \\<subseteq> H \\<longrightarrow>\n           H \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Call : A\n 8. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> Call : A\n 9. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B", "apply (rule VDMNew)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>G x y F.\n       \\<forall>H.\n          G \\<subseteq> H \\<longrightarrow>\n          H \\<rhd> Get x y\n                    F : \\<lambda>a b.\n                           \\<exists>l C Flds v.\n                              fst a y = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              lookup Flds F = Some v \\<and>\n                              b = (update (fst a) x v, snd a)\n 2. \\<And>G x F e.\n       \\<forall>H.\n          G \\<subseteq> H \\<longrightarrow>\n          H \\<rhd> Put x F\n                    e : \\<lambda>a b.\n                           \\<exists>l C Flds.\n                              fst a x = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              b =\n                              (fst a,\n                               (l, C, (F, evalE e (fst a)) # Flds) # snd a)\n 3. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H.\n           G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Comp c\nd : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 4. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H.\n           G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 5. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 6. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>H.\n           {A} \\<union> G \\<subseteq> H \\<longrightarrow>\n           H \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Call : A\n 7. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> Call : A\n 8. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B", "apply (rule, rule)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>G x y F H.\n       G \\<subseteq> H \\<Longrightarrow>\n       H \\<rhd> Get x y\n                 F : \\<lambda>a b.\n                        \\<exists>l C Flds v.\n                           fst a y = RVal (Loc l) \\<and>\n                           lookup (snd a) l = Some (C, Flds) \\<and>\n                           lookup Flds F = Some v \\<and>\n                           b = (update (fst a) x v, snd a)\n 2. \\<And>G x F e.\n       \\<forall>H.\n          G \\<subseteq> H \\<longrightarrow>\n          H \\<rhd> Put x F\n                    e : \\<lambda>a b.\n                           \\<exists>l C Flds.\n                              fst a x = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              b =\n                              (fst a,\n                               (l, C, (F, evalE e (fst a)) # Flds) # snd a)\n 3. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H.\n           G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Comp c\nd : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 4. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H.\n           G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 5. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 6. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>H.\n           {A} \\<union> G \\<subseteq> H \\<longrightarrow>\n           H \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Call : A\n 7. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> Call : A\n 8. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B", "apply (rule VDMGet)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>G x F e.\n       \\<forall>H.\n          G \\<subseteq> H \\<longrightarrow>\n          H \\<rhd> Put x F\n                    e : \\<lambda>a b.\n                           \\<exists>l C Flds.\n                              fst a x = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              b =\n                              (fst a,\n                               (l, C, (F, evalE e (fst a)) # Flds) # snd a)\n 2. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H.\n           G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Comp c\nd : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 3. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H.\n           G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 4. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 5. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>H.\n           {A} \\<union> G \\<subseteq> H \\<longrightarrow>\n           H \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Call : A\n 6. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> Call : A\n 7. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B", "apply (rule, rule)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>G x F e H.\n       G \\<subseteq> H \\<Longrightarrow>\n       H \\<rhd> Put x F\n                 e : \\<lambda>a b.\n                        \\<exists>l C Flds.\n                           fst a x = RVal (Loc l) \\<and>\n                           lookup (snd a) l = Some (C, Flds) \\<and>\n                           b =\n                           (fst a,\n                            (l, C, (F, evalE e (fst a)) # Flds) # snd a)\n 2. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H.\n           G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Comp c\nd : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 3. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H.\n           G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 4. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 5. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>H.\n           {A} \\<union> G \\<subseteq> H \\<longrightarrow>\n           H \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Call : A\n 6. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> Call : A\n 7. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B", "apply (rule VDMPut)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H.\n           G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Comp c\nd : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 2. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H.\n           G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 3. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 4. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>H.\n           {A} \\<union> G \\<subseteq> H \\<longrightarrow>\n           H \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Call : A\n 5. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> Call : A\n 6. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B", "apply (rule, rule)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G c A d B H.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B;\n        G \\<subseteq> H\\<rbrakk>\n       \\<Longrightarrow> H \\<rhd> Comp c\n                                   d : \\<lambda>a b.\n    \\<exists>r. A a r \\<and> B r b\n 2. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H.\n           G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 3. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 4. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>H.\n           {A} \\<union> G \\<subseteq> H \\<longrightarrow>\n           H \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Call : A\n 5. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> Call : A\n 6. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B", "apply (rule VDMComp)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>G c A d B H.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B;\n        G \\<subseteq> H\\<rbrakk>\n       \\<Longrightarrow> H \\<rhd> c : A\n 2. \\<And>G c A d B H.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B;\n        G \\<subseteq> H\\<rbrakk>\n       \\<Longrightarrow> H \\<rhd> d : B\n 3. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H.\n           G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 4. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 5. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>H.\n           {A} \\<union> G \\<subseteq> H \\<longrightarrow>\n           H \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Call : A\n 6. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> Call : A\n 7. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B", "apply (erule_tac x=H in allE, simp)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G c A d B H.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B;\n        G \\<subseteq> H\\<rbrakk>\n       \\<Longrightarrow> H \\<rhd> d : B\n 2. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H.\n           G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 3. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 4. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>H.\n           {A} \\<union> G \\<subseteq> H \\<longrightarrow>\n           H \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Call : A\n 5. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> Call : A\n 6. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B", "apply (erule_tac x=H in allE, simp)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H.\n           G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 2. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 3. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>H.\n           {A} \\<union> G \\<subseteq> H \\<longrightarrow>\n           H \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Call : A\n 4. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> Call : A\n 5. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B", "apply (rule,rule)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>G c A d B b H.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B;\n        G \\<subseteq> H\\<rbrakk>\n       \\<Longrightarrow> H \\<rhd> Iff b c\n                                   d : \\<lambda>a c.\n    (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n    (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 2. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 3. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>H.\n           {A} \\<union> G \\<subseteq> H \\<longrightarrow>\n           H \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Call : A\n 4. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> Call : A\n 5. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B", "apply (rule VDMIff)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G c A d B b H.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B;\n        G \\<subseteq> H\\<rbrakk>\n       \\<Longrightarrow> H \\<rhd> c : A\n 2. \\<And>G c A d B b H.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B;\n        G \\<subseteq> H\\<rbrakk>\n       \\<Longrightarrow> H \\<rhd> d : B\n 3. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 4. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>H.\n           {A} \\<union> G \\<subseteq> H \\<longrightarrow>\n           H \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Call : A\n 5. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> Call : A\n 6. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B", "apply (erule_tac x=H in allE, simp)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>G c A d B b H.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> d : B;\n        G \\<subseteq> H\\<rbrakk>\n       \\<Longrightarrow> H \\<rhd> d : B\n 2. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 3. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>H.\n           {A} \\<union> G \\<subseteq> H \\<longrightarrow>\n           H \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Call : A\n 4. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> Call : A\n 5. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B", "apply (erule_tac x=H in allE, simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 2. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>H.\n           {A} \\<union> G \\<subseteq> H \\<longrightarrow>\n           H \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Call : A\n 3. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> Call : A\n 4. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B", "apply (rule,rule)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>G c B b A H.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t;\n        G \\<subseteq> H\\<rbrakk>\n       \\<Longrightarrow> H \\<rhd> While b\n                                   c : \\<lambda>a c.\n    A a c \\<and> \\<not> evalB b (fst c)\n 2. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>H.\n           {A} \\<union> G \\<subseteq> H \\<longrightarrow>\n           H \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Call : A\n 3. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> Call : A\n 4. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B", "apply (rule VDMWhile)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G c B b A H.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t;\n        G \\<subseteq> H\\<rbrakk>\n       \\<Longrightarrow> H \\<rhd> c : ?B60 G c B b A H\n 2. \\<And>G c B b A H.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t;\n        G \\<subseteq> H\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s.\n                            \\<not> evalB b (fst s) \\<longrightarrow> A s s\n 3. \\<And>G c B b A H.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t;\n        G \\<subseteq> H\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s r t.\n                            evalB b (fst s) \\<longrightarrow>\n                            ?B60 G c B b A H s r \\<longrightarrow>\n                            A r t \\<longrightarrow> A s t\n 4. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>H.\n           {A} \\<union> G \\<subseteq> H \\<longrightarrow>\n           H \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Call : A\n 5. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> Call : A\n 6. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B", "apply (erule_tac x=H in allE, simp)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>G c B b A H.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t;\n        G \\<subseteq> H\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s.\n                            \\<not> evalB b (fst s) \\<longrightarrow> A s s\n 2. \\<And>G c B b A H.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t;\n        G \\<subseteq> H\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s r t.\n                            evalB b (fst s) \\<longrightarrow>\n                            B s r \\<longrightarrow>\n                            A r t \\<longrightarrow> A s t\n 3. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>H.\n           {A} \\<union> G \\<subseteq> H \\<longrightarrow>\n           H \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Call : A\n 4. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> Call : A\n 5. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B", "apply (assumption)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>G c B b A H.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t;\n        G \\<subseteq> H\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s r t.\n                            evalB b (fst s) \\<longrightarrow>\n                            B s r \\<longrightarrow>\n                            A r t \\<longrightarrow> A s t\n 2. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>H.\n           {A} \\<union> G \\<subseteq> H \\<longrightarrow>\n           H \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Call : A\n 3. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> Call : A\n 4. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>H.\n           {A} \\<union> G \\<subseteq> H \\<longrightarrow>\n           H \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow>\n                            H \\<rhd> Call : A\n 2. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> Call : A\n 3. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B", "apply (rule,rule)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A G H.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>H.\n           {A} \\<union> G \\<subseteq> H \\<longrightarrow> H \\<rhd> body : A;\n        G \\<subseteq> H\\<rbrakk>\n       \\<Longrightarrow> H \\<rhd> Call : A\n 2. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> Call : A\n 3. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B", "apply (rule VDMCall)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A G H.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>H.\n           {A} \\<union> G \\<subseteq> H \\<longrightarrow> H \\<rhd> body : A;\n        G \\<subseteq> H\\<rbrakk>\n       \\<Longrightarrow> ({A} \\<union> H) \\<rhd> body : A\n 2. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> Call : A\n 3. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B", "apply (erule_tac x=\"({A} \\<union> H)\" in allE, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A G H.\n       \\<lbrakk>insert A G \\<rhd> body : A; G \\<subseteq> H;\n        G \\<subseteq> insert A H \\<longrightarrow>\n        insert A H \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> insert A H \\<rhd> body : A\n 2. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> Call : A\n 3. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B", "apply fast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> Call : A\n 2. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B", "apply (rule,rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A G H.\n       \\<lbrakk>A \\<in> G; G \\<subseteq> H\\<rbrakk>\n       \\<Longrightarrow> H \\<rhd> Call : A\n 2. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B", "apply (rule VDMAx)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A G H.\n       \\<lbrakk>A \\<in> G; G \\<subseteq> H\\<rbrakk>\n       \\<Longrightarrow> A \\<in> H\n 2. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H.\n                            G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : B", "apply (rule,rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G c A B H.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t;\n        G \\<subseteq> H\\<rbrakk>\n       \\<Longrightarrow> H \\<rhd> c : B", "apply (rule VDMConseq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G c A B H.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t;\n        G \\<subseteq> H\\<rbrakk>\n       \\<Longrightarrow> H \\<rhd> c : ?A107 G c A B H\n 2. \\<And>G c A B H.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t;\n        G \\<subseteq> H\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s t.\n                            ?A107 G c A B H s t \\<longrightarrow> B s t", "apply (erule_tac x=H in allE, clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G c A B H.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>a b aa ba.\n           A (a, b) (aa, ba) \\<longrightarrow> B (a, b) (aa, ba);\n        G \\<subseteq> H; H \\<rhd> c : A\\<rbrakk>\n       \\<Longrightarrow> H \\<rhd> c : ?A107 G c A B H\n 2. \\<And>G c A B H.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t;\n        G \\<subseteq> H\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s t.\n                            ?A107 G c A B H s t \\<longrightarrow> B s t", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G c A B H.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>H. G \\<subseteq> H \\<longrightarrow> H \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t;\n        G \\<subseteq> H\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s t. A s t \\<longrightarrow> B s t", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma CutAux: \n \"(H \\<rhd> c : A) \\<Longrightarrow>\n  (\\<forall> G P D . (H = (insert P D) \\<longrightarrow> G \\<rhd> Call :P \\<longrightarrow> (G \\<subseteq> D) \n             \\<longrightarrow> D \\<rhd> c:A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H \\<rhd> c : A \\<Longrightarrow>\n    \\<forall>G P D.\n       H = insert P D \\<longrightarrow>\n       G \\<rhd> Call : P \\<longrightarrow>\n       G \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. H \\<rhd> c : A \\<Longrightarrow>\n    \\<forall>G P D.\n       H = insert P D \\<longrightarrow>\n       G \\<rhd> Call : P \\<longrightarrow>\n       G \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A", "apply (erule VDM_proof.induct)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>G.\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow>\n          D \\<rhd> Skip : \\<lambda>a b. b = a\n 2. \\<And>G x e.\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow>\n          D \\<rhd> Assign x\n                    e : \\<lambda>a b.\n                           b = (update (fst a) x (evalE e (fst a)), snd a)\n 3. \\<And>G x C.\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow>\n          D \\<rhd> New x\n                    C : \\<lambda>a b.\n                           \\<exists>l.\n                              l \\<notin> Dom (snd a) \\<and>\n                              b =\n                              (update (fst a) x (RVal (Loc l)),\n                               (l, C, []) # snd a)\n 4. \\<And>G x y F.\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow>\n          D \\<rhd> Get x y\n                    F : \\<lambda>a b.\n                           \\<exists>l C Flds v.\n                              fst a y = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              lookup Flds F = Some v \\<and>\n                              b = (update (fst a) x v, snd a)\n 5. \\<And>G x F e.\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow>\n          D \\<rhd> Put x F\n                    e : \\<lambda>a b.\n                           \\<exists>l C Flds.\n                              fst a x = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              b =\n                              (fst a,\n                               (l, C, (F, evalE e (fst a)) # Flds) # snd a)\n 6. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Comp c\nd : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 7. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 8. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 9. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 10. \\<And>A G.\n        A \\<in> G \\<Longrightarrow>\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\nA total of 11 subgoals...", "apply clarify"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>G Ga P D.\n       \\<lbrakk>Ga \\<rhd> Call : P; Ga \\<subseteq> D\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> Skip : \\<lambda>a b. b = a\n 2. \\<And>G x e.\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow>\n          D \\<rhd> Assign x\n                    e : \\<lambda>a b.\n                           b = (update (fst a) x (evalE e (fst a)), snd a)\n 3. \\<And>G x C.\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow>\n          D \\<rhd> New x\n                    C : \\<lambda>a b.\n                           \\<exists>l.\n                              l \\<notin> Dom (snd a) \\<and>\n                              b =\n                              (update (fst a) x (RVal (Loc l)),\n                               (l, C, []) # snd a)\n 4. \\<And>G x y F.\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow>\n          D \\<rhd> Get x y\n                    F : \\<lambda>a b.\n                           \\<exists>l C Flds v.\n                              fst a y = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              lookup Flds F = Some v \\<and>\n                              b = (update (fst a) x v, snd a)\n 5. \\<And>G x F e.\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow>\n          D \\<rhd> Put x F\n                    e : \\<lambda>a b.\n                           \\<exists>l C Flds.\n                              fst a x = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              b =\n                              (fst a,\n                               (l, C, (F, evalE e (fst a)) # Flds) # snd a)\n 6. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Comp c\nd : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 7. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 8. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 9. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 10. \\<And>A G.\n        A \\<in> G \\<Longrightarrow>\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\nA total of 11 subgoals...", "apply (fast intro: VDMSkip)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>G x e.\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow>\n          D \\<rhd> Assign x\n                    e : \\<lambda>a b.\n                           b = (update (fst a) x (evalE e (fst a)), snd a)\n 2. \\<And>G x C.\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow>\n          D \\<rhd> New x\n                    C : \\<lambda>a b.\n                           \\<exists>l.\n                              l \\<notin> Dom (snd a) \\<and>\n                              b =\n                              (update (fst a) x (RVal (Loc l)),\n                               (l, C, []) # snd a)\n 3. \\<And>G x y F.\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow>\n          D \\<rhd> Get x y\n                    F : \\<lambda>a b.\n                           \\<exists>l C Flds v.\n                              fst a y = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              lookup Flds F = Some v \\<and>\n                              b = (update (fst a) x v, snd a)\n 4. \\<And>G x F e.\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow>\n          D \\<rhd> Put x F\n                    e : \\<lambda>a b.\n                           \\<exists>l C Flds.\n                              fst a x = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              b =\n                              (fst a,\n                               (l, C, (F, evalE e (fst a)) # Flds) # snd a)\n 5. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Comp c\nd : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 6. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 7. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 8. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 9. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 10. \\<And>G c A B.\n        \\<lbrakk>G \\<rhd> c : A;\n         \\<forall>Ga P D.\n            G = insert P D \\<longrightarrow>\n            Ga \\<rhd> Call : P \\<longrightarrow>\n            Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n         \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n        \\<Longrightarrow> \\<forall>Ga P D.\n                             G = insert P D \\<longrightarrow>\n                             Ga \\<rhd> Call : P \\<longrightarrow>\n                             Ga \\<subseteq> D \\<longrightarrow>\n                             D \\<rhd> c : B", "apply (fast intro: VDMAssign)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>G x C.\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow>\n          D \\<rhd> New x\n                    C : \\<lambda>a b.\n                           \\<exists>l.\n                              l \\<notin> Dom (snd a) \\<and>\n                              b =\n                              (update (fst a) x (RVal (Loc l)),\n                               (l, C, []) # snd a)\n 2. \\<And>G x y F.\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow>\n          D \\<rhd> Get x y\n                    F : \\<lambda>a b.\n                           \\<exists>l C Flds v.\n                              fst a y = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              lookup Flds F = Some v \\<and>\n                              b = (update (fst a) x v, snd a)\n 3. \\<And>G x F e.\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow>\n          D \\<rhd> Put x F\n                    e : \\<lambda>a b.\n                           \\<exists>l C Flds.\n                              fst a x = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              b =\n                              (fst a,\n                               (l, C, (F, evalE e (fst a)) # Flds) # snd a)\n 4. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Comp c\nd : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 5. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 6. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 7. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 8. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 9. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (rule, rule, rule)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>G x C Ga P D.\n       G = insert P D \\<longrightarrow>\n       Ga \\<rhd> Call : P \\<longrightarrow>\n       Ga \\<subseteq> D \\<longrightarrow>\n       D \\<rhd> New x\n                 C : \\<lambda>a b.\n                        \\<exists>l.\n                           l \\<notin> Dom (snd a) \\<and>\n                           b =\n                           (update (fst a) x (RVal (Loc l)),\n                            (l, C, []) # snd a)\n 2. \\<And>G x y F.\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow>\n          D \\<rhd> Get x y\n                    F : \\<lambda>a b.\n                           \\<exists>l C Flds v.\n                              fst a y = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              lookup Flds F = Some v \\<and>\n                              b = (update (fst a) x v, snd a)\n 3. \\<And>G x F e.\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow>\n          D \\<rhd> Put x F\n                    e : \\<lambda>a b.\n                           \\<exists>l C Flds.\n                              fst a x = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              b =\n                              (fst a,\n                               (l, C, (F, evalE e (fst a)) # Flds) # snd a)\n 4. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Comp c\nd : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 5. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 6. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 7. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 8. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 9. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (rule, rule, rule)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>G x C Ga P D.\n       \\<lbrakk>G = insert P D; Ga \\<rhd> Call : P;\n        Ga \\<subseteq> D\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> New x\n                                   C : \\<lambda>a b.\n    \\<exists>l.\n       l \\<notin> Dom (snd a) \\<and>\n       b = (update (fst a) x (RVal (Loc l)), (l, C, []) # snd a)\n 2. \\<And>G x y F.\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow>\n          D \\<rhd> Get x y\n                    F : \\<lambda>a b.\n                           \\<exists>l C Flds v.\n                              fst a y = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              lookup Flds F = Some v \\<and>\n                              b = (update (fst a) x v, snd a)\n 3. \\<And>G x F e.\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow>\n          D \\<rhd> Put x F\n                    e : \\<lambda>a b.\n                           \\<exists>l C Flds.\n                              fst a x = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              b =\n                              (fst a,\n                               (l, C, (F, evalE e (fst a)) # Flds) # snd a)\n 4. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Comp c\nd : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 5. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 6. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 7. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 8. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 9. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (rule VDMNew)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>G x y F.\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow>\n          D \\<rhd> Get x y\n                    F : \\<lambda>a b.\n                           \\<exists>l C Flds v.\n                              fst a y = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              lookup Flds F = Some v \\<and>\n                              b = (update (fst a) x v, snd a)\n 2. \\<And>G x F e.\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow>\n          D \\<rhd> Put x F\n                    e : \\<lambda>a b.\n                           \\<exists>l C Flds.\n                              fst a x = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              b =\n                              (fst a,\n                               (l, C, (F, evalE e (fst a)) # Flds) # snd a)\n 3. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Comp c\nd : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 4. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 5. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 6. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 7. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 8. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (rule, rule, rule)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>G x y F Ga P D.\n       G = insert P D \\<longrightarrow>\n       Ga \\<rhd> Call : P \\<longrightarrow>\n       Ga \\<subseteq> D \\<longrightarrow>\n       D \\<rhd> Get x y\n                 F : \\<lambda>a b.\n                        \\<exists>l C Flds v.\n                           fst a y = RVal (Loc l) \\<and>\n                           lookup (snd a) l = Some (C, Flds) \\<and>\n                           lookup Flds F = Some v \\<and>\n                           b = (update (fst a) x v, snd a)\n 2. \\<And>G x F e.\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow>\n          D \\<rhd> Put x F\n                    e : \\<lambda>a b.\n                           \\<exists>l C Flds.\n                              fst a x = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              b =\n                              (fst a,\n                               (l, C, (F, evalE e (fst a)) # Flds) # snd a)\n 3. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Comp c\nd : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 4. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 5. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 6. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 7. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 8. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (rule, rule, rule)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>G x y F Ga P D.\n       \\<lbrakk>G = insert P D; Ga \\<rhd> Call : P;\n        Ga \\<subseteq> D\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> Get x y\n                                   F : \\<lambda>a b.\n    \\<exists>l C Flds v.\n       fst a y = RVal (Loc l) \\<and>\n       lookup (snd a) l = Some (C, Flds) \\<and>\n       lookup Flds F = Some v \\<and> b = (update (fst a) x v, snd a)\n 2. \\<And>G x F e.\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow>\n          D \\<rhd> Put x F\n                    e : \\<lambda>a b.\n                           \\<exists>l C Flds.\n                              fst a x = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              b =\n                              (fst a,\n                               (l, C, (F, evalE e (fst a)) # Flds) # snd a)\n 3. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Comp c\nd : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 4. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 5. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 6. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 7. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 8. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (rule VDMGet)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>G x F e.\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow>\n          D \\<rhd> Put x F\n                    e : \\<lambda>a b.\n                           \\<exists>l C Flds.\n                              fst a x = RVal (Loc l) \\<and>\n                              lookup (snd a) l = Some (C, Flds) \\<and>\n                              b =\n                              (fst a,\n                               (l, C, (F, evalE e (fst a)) # Flds) # snd a)\n 2. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Comp c\nd : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 3. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 4. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 5. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 6. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 7. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (rule, rule, rule)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>G x F e Ga P D.\n       G = insert P D \\<longrightarrow>\n       Ga \\<rhd> Call : P \\<longrightarrow>\n       Ga \\<subseteq> D \\<longrightarrow>\n       D \\<rhd> Put x F\n                 e : \\<lambda>a b.\n                        \\<exists>l C Flds.\n                           fst a x = RVal (Loc l) \\<and>\n                           lookup (snd a) l = Some (C, Flds) \\<and>\n                           b =\n                           (fst a,\n                            (l, C, (F, evalE e (fst a)) # Flds) # snd a)\n 2. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Comp c\nd : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 3. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 4. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 5. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 6. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 7. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (rule, rule, rule)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>G x F e Ga P D.\n       \\<lbrakk>G = insert P D; Ga \\<rhd> Call : P;\n        Ga \\<subseteq> D\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> Put x F\n                                   e : \\<lambda>a b.\n    \\<exists>l C Flds.\n       fst a x = RVal (Loc l) \\<and>\n       lookup (snd a) l = Some (C, Flds) \\<and>\n       b = (fst a, (l, C, (F, evalE e (fst a)) # Flds) # snd a)\n 2. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Comp c\nd : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 3. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 4. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 5. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 6. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 7. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (rule VDMPut)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G c A d B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Comp c\nd : \\<lambda>a b. \\<exists>r. A a r \\<and> B r b\n 2. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 3. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 4. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 5. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 6. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (rule, rule, rule)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G c A d B Ga P D.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> G = insert P D \\<longrightarrow>\n                         Ga \\<rhd> Call : P \\<longrightarrow>\n                         Ga \\<subseteq> D \\<longrightarrow>\n                         D \\<rhd> Comp c\n                                   d : \\<lambda>a b.\n    \\<exists>r. A a r \\<and> B r b\n 2. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 3. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 4. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 5. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 6. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (rule, rule, rule)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G c A d B Ga P D.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B;\n        G = insert P D; Ga \\<rhd> Call : P; Ga \\<subseteq> D\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> Comp c\n                                   d : \\<lambda>a b.\n    \\<exists>r. A a r \\<and> B r b\n 2. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 3. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 4. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 5. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 6. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (erule_tac x=Ga in allE)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G c A d B Ga P D.\n       \\<lbrakk>G \\<rhd> c : A; G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B;\n        G = insert P D; Ga \\<rhd> Call : P; Ga \\<subseteq> D;\n        \\<forall>P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> Comp c\n                                   d : \\<lambda>a b.\n    \\<exists>r. A a r \\<and> B r b\n 2. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 3. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 4. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 5. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 6. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (erule_tac x=Ga in allE)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G c A d B Ga P D.\n       \\<lbrakk>G \\<rhd> c : A; G \\<rhd> d : B; G = insert P D;\n        Ga \\<rhd> Call : P; Ga \\<subseteq> D;\n        \\<forall>P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> Comp c\n                                   d : \\<lambda>a b.\n    \\<exists>r. A a r \\<and> B r b\n 2. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 3. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 4. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 5. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 6. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (erule_tac x=P in allE)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G c A d B Ga P D.\n       \\<lbrakk>G \\<rhd> c : A; G \\<rhd> d : B; G = insert P D;\n        Ga \\<rhd> Call : P; Ga \\<subseteq> D;\n        \\<forall>P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B;\n        \\<forall>D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> Comp c\n                                   d : \\<lambda>a b.\n    \\<exists>r. A a r \\<and> B r b\n 2. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 3. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 4. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 5. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 6. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (erule_tac x=P in allE)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G c A d B Ga P D.\n       \\<lbrakk>G \\<rhd> c : A; G \\<rhd> d : B; G = insert P D;\n        Ga \\<rhd> Call : P; Ga \\<subseteq> D;\n        \\<forall>D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> Comp c\n                                   d : \\<lambda>a b.\n    \\<exists>r. A a r \\<and> B r b\n 2. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 3. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 4. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 5. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 6. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (erule_tac x=D in allE, erule impE, assumption)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G c A d B Ga P D.\n       \\<lbrakk>G \\<rhd> c : A; G \\<rhd> d : B; G = insert P D;\n        Ga \\<rhd> Call : P; Ga \\<subseteq> D;\n        \\<forall>D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B;\n        Ga \\<rhd> Call : P \\<longrightarrow>\n        Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> Comp c\n                                   d : \\<lambda>a b.\n    \\<exists>r. A a r \\<and> B r b\n 2. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 3. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 4. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 5. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 6. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (erule_tac x=D in allE, erule impE, assumption)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G c A d B Ga P D.\n       \\<lbrakk>G \\<rhd> c : A; G \\<rhd> d : B; G = insert P D;\n        Ga \\<rhd> Call : P; Ga \\<subseteq> D;\n        G = insert P D \\<longrightarrow>\n        Ga \\<rhd> Call : P \\<longrightarrow>\n        Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B;\n        Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> Comp c\n                                   d : \\<lambda>a b.\n    \\<exists>r. A a r \\<and> B r b\n 2. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 3. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 4. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 5. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 6. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (rule VDMComp)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>G c A d B Ga P D.\n       \\<lbrakk>G \\<rhd> c : A; G \\<rhd> d : B; G = insert P D;\n        Ga \\<rhd> Call : P; Ga \\<subseteq> D;\n        G = insert P D \\<longrightarrow>\n        Ga \\<rhd> Call : P \\<longrightarrow>\n        Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B;\n        Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> c : A\n 2. \\<And>G c A d B Ga P D.\n       \\<lbrakk>G \\<rhd> c : A; G \\<rhd> d : B; G = insert P D;\n        Ga \\<rhd> Call : P; Ga \\<subseteq> D;\n        G = insert P D \\<longrightarrow>\n        Ga \\<rhd> Call : P \\<longrightarrow>\n        Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B;\n        Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> d : B\n 3. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 4. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 5. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 6. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 7. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply simp"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G c A d B Ga P D.\n       \\<lbrakk>G \\<rhd> c : A; G \\<rhd> d : B; G = insert P D;\n        Ga \\<rhd> Call : P; Ga \\<subseteq> D;\n        G = insert P D \\<longrightarrow>\n        Ga \\<rhd> Call : P \\<longrightarrow>\n        Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B;\n        Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> d : B\n 2. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 3. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 4. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 5. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 6. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply simp"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>G c A d B b.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Iff b c\nd : \\<lambda>a c.\n       (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n       (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 2. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 3. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 4. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 5. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (rule, rule, rule)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>G c A d B b Ga P D.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> G = insert P D \\<longrightarrow>\n                         Ga \\<rhd> Call : P \\<longrightarrow>\n                         Ga \\<subseteq> D \\<longrightarrow>\n                         D \\<rhd> Iff b c\n                                   d : \\<lambda>a c.\n    (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n    (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 2. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 3. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 4. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 5. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (rule, rule, rule)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>G c A d B b Ga P D.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B;\n        G = insert P D; Ga \\<rhd> Call : P; Ga \\<subseteq> D\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> Iff b c\n                                   d : \\<lambda>a c.\n    (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n    (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 2. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 3. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 4. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 5. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (erule_tac x=Ga in allE)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>G c A d B b Ga P D.\n       \\<lbrakk>G \\<rhd> c : A; G \\<rhd> d : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B;\n        G = insert P D; Ga \\<rhd> Call : P; Ga \\<subseteq> D;\n        \\<forall>P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> Iff b c\n                                   d : \\<lambda>a c.\n    (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n    (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 2. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 3. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 4. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 5. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (erule_tac x=Ga in allE)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>G c A d B b Ga P D.\n       \\<lbrakk>G \\<rhd> c : A; G \\<rhd> d : B; G = insert P D;\n        Ga \\<rhd> Call : P; Ga \\<subseteq> D;\n        \\<forall>P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> Iff b c\n                                   d : \\<lambda>a c.\n    (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n    (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 2. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 3. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 4. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 5. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (erule_tac x=P in allE)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>G c A d B b Ga P D.\n       \\<lbrakk>G \\<rhd> c : A; G \\<rhd> d : B; G = insert P D;\n        Ga \\<rhd> Call : P; Ga \\<subseteq> D;\n        \\<forall>P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B;\n        \\<forall>D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> Iff b c\n                                   d : \\<lambda>a c.\n    (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n    (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 2. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 3. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 4. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 5. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (erule_tac x=P in allE)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>G c A d B b Ga P D.\n       \\<lbrakk>G \\<rhd> c : A; G \\<rhd> d : B; G = insert P D;\n        Ga \\<rhd> Call : P; Ga \\<subseteq> D;\n        \\<forall>D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> Iff b c\n                                   d : \\<lambda>a c.\n    (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n    (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 2. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 3. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 4. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 5. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (erule_tac x=D in allE, erule impE, assumption)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>G c A d B b Ga P D.\n       \\<lbrakk>G \\<rhd> c : A; G \\<rhd> d : B; G = insert P D;\n        Ga \\<rhd> Call : P; Ga \\<subseteq> D;\n        \\<forall>D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B;\n        Ga \\<rhd> Call : P \\<longrightarrow>\n        Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> Iff b c\n                                   d : \\<lambda>a c.\n    (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n    (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 2. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 3. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 4. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 5. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (erule_tac x=D in allE, erule impE, assumption)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>G c A d B b Ga P D.\n       \\<lbrakk>G \\<rhd> c : A; G \\<rhd> d : B; G = insert P D;\n        Ga \\<rhd> Call : P; Ga \\<subseteq> D;\n        G = insert P D \\<longrightarrow>\n        Ga \\<rhd> Call : P \\<longrightarrow>\n        Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B;\n        Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> Iff b c\n                                   d : \\<lambda>a c.\n    (evalB b (fst a) \\<longrightarrow> A a c) \\<and>\n    (\\<not> evalB b (fst a) \\<longrightarrow> B a c)\n 2. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 3. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 4. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 5. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (rule VDMIff)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G c A d B b Ga P D.\n       \\<lbrakk>G \\<rhd> c : A; G \\<rhd> d : B; G = insert P D;\n        Ga \\<rhd> Call : P; Ga \\<subseteq> D;\n        G = insert P D \\<longrightarrow>\n        Ga \\<rhd> Call : P \\<longrightarrow>\n        Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B;\n        Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> c : A\n 2. \\<And>G c A d B b Ga P D.\n       \\<lbrakk>G \\<rhd> c : A; G \\<rhd> d : B; G = insert P D;\n        Ga \\<rhd> Call : P; Ga \\<subseteq> D;\n        G = insert P D \\<longrightarrow>\n        Ga \\<rhd> Call : P \\<longrightarrow>\n        Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B;\n        Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> d : B\n 3. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 4. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 5. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 6. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply simp"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>G c A d B b Ga P D.\n       \\<lbrakk>G \\<rhd> c : A; G \\<rhd> d : B; G = insert P D;\n        Ga \\<rhd> Call : P; Ga \\<subseteq> D;\n        G = insert P D \\<longrightarrow>\n        Ga \\<rhd> Call : P \\<longrightarrow>\n        Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> d : B;\n        Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> d : B\n 2. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 3. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 4. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 5. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>G c B b A.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> While b\nc : \\<lambda>a c. A a c \\<and> \\<not> evalB b (fst c)\n 2. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 3. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 4. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (rule, rule, rule)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>G c B b A Ga P D.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t\\<rbrakk>\n       \\<Longrightarrow> G = insert P D \\<longrightarrow>\n                         Ga \\<rhd> Call : P \\<longrightarrow>\n                         Ga \\<subseteq> D \\<longrightarrow>\n                         D \\<rhd> While b\n                                   c : \\<lambda>a c.\n    A a c \\<and> \\<not> evalB b (fst c)\n 2. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 3. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 4. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (rule, rule, rule)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>G c B b A Ga P D.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t;\n        G = insert P D; Ga \\<rhd> Call : P; Ga \\<subseteq> D\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> While b\n                                   c : \\<lambda>a c.\n    A a c \\<and> \\<not> evalB b (fst c)\n 2. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 3. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 4. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (erule_tac x=Ga in allE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>G c B b A Ga P D.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t;\n        G = insert P D; Ga \\<rhd> Call : P; Ga \\<subseteq> D;\n        \\<forall>P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> While b\n                                   c : \\<lambda>a c.\n    A a c \\<and> \\<not> evalB b (fst c)\n 2. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 3. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 4. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (erule_tac x=P in allE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>G c B b A Ga P D.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t;\n        G = insert P D; Ga \\<rhd> Call : P; Ga \\<subseteq> D;\n        \\<forall>D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> While b\n                                   c : \\<lambda>a c.\n    A a c \\<and> \\<not> evalB b (fst c)\n 2. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 3. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 4. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (erule_tac x=D in allE, erule impE, assumption)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>G c B b A Ga P D.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t;\n        G = insert P D; Ga \\<rhd> Call : P; Ga \\<subseteq> D;\n        Ga \\<rhd> Call : P \\<longrightarrow>\n        Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> While b\n                                   c : \\<lambda>a c.\n    A a c \\<and> \\<not> evalB b (fst c)\n 2. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 3. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 4. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (rule VDMWhile)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G c B b A Ga P D.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t;\n        G = insert P D; Ga \\<rhd> Call : P; Ga \\<subseteq> D;\n        Ga \\<rhd> Call : P \\<longrightarrow>\n        Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> c : ?B148 G c B b A Ga P D\n 2. \\<And>G c B b A Ga P D.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t;\n        G = insert P D; Ga \\<rhd> Call : P; Ga \\<subseteq> D;\n        Ga \\<rhd> Call : P \\<longrightarrow>\n        Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s.\n                            \\<not> evalB b (fst s) \\<longrightarrow> A s s\n 3. \\<And>G c B b A Ga P D.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t;\n        G = insert P D; Ga \\<rhd> Call : P; Ga \\<subseteq> D;\n        Ga \\<rhd> Call : P \\<longrightarrow>\n        Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s r t.\n                            evalB b (fst s) \\<longrightarrow>\n                            ?B148 G c B b A Ga P D s r \\<longrightarrow>\n                            A r t \\<longrightarrow> A s t\n 4. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 5. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 6. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply simp"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>G c B b A Ga P D.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t;\n        G = insert P D; Ga \\<rhd> Call : P; Ga \\<subseteq> D;\n        Ga \\<rhd> Call : P \\<longrightarrow>\n        Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s.\n                            \\<not> evalB b (fst s) \\<longrightarrow> A s s\n 2. \\<And>G c B b A Ga P D.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t;\n        G = insert P D; Ga \\<rhd> Call : P; Ga \\<subseteq> D;\n        Ga \\<rhd> Call : P \\<longrightarrow>\n        Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s r t.\n                            evalB b (fst s) \\<longrightarrow>\n                            B s r \\<longrightarrow>\n                            A r t \\<longrightarrow> A s t\n 3. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 4. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 5. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>G c B b A Ga P D.\n       \\<lbrakk>G \\<rhd> c : B;\n        \\<forall>s. \\<not> evalB b (fst s) \\<longrightarrow> A s s;\n        \\<forall>s r t.\n           evalB b (fst s) \\<longrightarrow>\n           B s r \\<longrightarrow> A r t \\<longrightarrow> A s t;\n        G = insert P D; Ga \\<rhd> Call : P; Ga \\<subseteq> D;\n        Ga \\<rhd> Call : P \\<longrightarrow>\n        Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s r t.\n                            evalB b (fst s) \\<longrightarrow>\n                            B s r \\<longrightarrow>\n                            A r t \\<longrightarrow> A s t\n 2. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 3. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 4. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A G.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> Call : A\n 2. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 3. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (rule, rule, rule)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A G Ga P D.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> G = insert P D \\<longrightarrow>\n                         Ga \\<rhd> Call : P \\<longrightarrow>\n                         Ga \\<subseteq> D \\<longrightarrow>\n                         D \\<rhd> Call : A\n 2. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 3. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (rule, rule, rule)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A G Ga P D.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A;\n        \\<forall>Ga P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A;\n        G = insert P D; Ga \\<rhd> Call : P; Ga \\<subseteq> D\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> Call : A\n 2. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 3. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (erule_tac x=Ga in allE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A G Ga P D.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A; G = insert P D;\n        Ga \\<rhd> Call : P; Ga \\<subseteq> D;\n        \\<forall>P D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> Call : A\n 2. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 3. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (erule_tac x=P in allE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A G Ga P D.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A; G = insert P D;\n        Ga \\<rhd> Call : P; Ga \\<subseteq> D;\n        \\<forall>D.\n           {A} \\<union> G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> Call : A\n 2. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 3. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (erule_tac x=\"insert A D\" in allE, erule impE, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A G Ga P D.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A; G = insert P D;\n        Ga \\<rhd> Call : P; Ga \\<subseteq> D;\n        Ga \\<rhd> Call : P \\<longrightarrow>\n        Ga \\<subseteq> insert A D \\<longrightarrow>\n        insert A D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> Call : A\n 2. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 3. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (rule VDMCall)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A G Ga P D.\n       \\<lbrakk>({A} \\<union> G) \\<rhd> body : A; G = insert P D;\n        Ga \\<rhd> Call : P; Ga \\<subseteq> D;\n        Ga \\<rhd> Call : P \\<longrightarrow>\n        Ga \\<subseteq> insert A D \\<longrightarrow>\n        insert A D \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> ({A} \\<union> D) \\<rhd> body : A\n 2. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 3. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply fastforce"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A G.\n       A \\<in> G \\<Longrightarrow>\n       \\<forall>Ga P D.\n          G = insert P D \\<longrightarrow>\n          Ga \\<rhd> Call : P \\<longrightarrow>\n          Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> Call : A\n 2. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A Ga P D.\n       \\<lbrakk>A = P \\<or> A \\<in> D; Ga \\<rhd> Call : P;\n        Ga \\<subseteq> D\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> Call : A\n 2. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A Ga P D.\n       \\<lbrakk>Ga \\<rhd> Call : P; Ga \\<subseteq> D; A = P\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> Call : A\n 2. \\<And>A Ga P D.\n       \\<lbrakk>Ga \\<rhd> Call : P; Ga \\<subseteq> D; A \\<in> D\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> Call : A\n 3. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>Ga P D.\n       \\<lbrakk>Ga \\<rhd> Call : P; Ga \\<subseteq> D\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> Call : P\n 2. \\<And>A Ga P D.\n       \\<lbrakk>Ga \\<rhd> Call : P; Ga \\<subseteq> D; A \\<in> D\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> Call : A\n 3. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (erule WEAK)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>Ga P D. Ga \\<subseteq> D \\<Longrightarrow> Ga \\<subseteq> D\n 2. \\<And>A Ga P D.\n       \\<lbrakk>Ga \\<rhd> Call : P; Ga \\<subseteq> D; A \\<in> D\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> Call : A\n 3. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A Ga P D.\n       \\<lbrakk>Ga \\<rhd> Call : P; Ga \\<subseteq> D; A \\<in> D\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> Call : A\n 2. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply (erule VDMAx)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G c A B.\n       \\<lbrakk>G \\<rhd> c : A;\n        \\<forall>Ga P D.\n           G = insert P D \\<longrightarrow>\n           Ga \\<rhd> Call : P \\<longrightarrow>\n           Ga \\<subseteq> D \\<longrightarrow> D \\<rhd> c : A;\n        \\<forall>s t. A s t \\<longrightarrow> B s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ga P D.\n                            G = insert P D \\<longrightarrow>\n                            Ga \\<rhd> Call : P \\<longrightarrow>\n                            Ga \\<subseteq> D \\<longrightarrow>\n                            D \\<rhd> c : B", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c A B Ga P D.\n       \\<lbrakk>insert P D \\<rhd> c : A;\n        \\<forall>G Pa Da.\n           insert P D = insert Pa Da \\<longrightarrow>\n           G \\<rhd> Call : Pa \\<longrightarrow>\n           G \\<subseteq> Da \\<longrightarrow> Da \\<rhd> c : A;\n        \\<forall>a b aa ba.\n           A (a, b) (aa, ba) \\<longrightarrow> B (a, b) (aa, ba);\n        Ga \\<rhd> Call : P; Ga \\<subseteq> D\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> c : B", "apply (subgoal_tac \"D \\<rhd>  c : A\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c A B Ga P D.\n       \\<lbrakk>insert P D \\<rhd> c : A;\n        \\<forall>G Pa Da.\n           insert P D = insert Pa Da \\<longrightarrow>\n           G \\<rhd> Call : Pa \\<longrightarrow>\n           G \\<subseteq> Da \\<longrightarrow> Da \\<rhd> c : A;\n        \\<forall>a b aa ba.\n           A (a, b) (aa, ba) \\<longrightarrow> B (a, b) (aa, ba);\n        Ga \\<rhd> Call : P; Ga \\<subseteq> D; D \\<rhd> c : A\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> c : B\n 2. \\<And>c A B Ga P D.\n       \\<lbrakk>insert P D \\<rhd> c : A;\n        \\<forall>G Pa Da.\n           insert P D = insert Pa Da \\<longrightarrow>\n           G \\<rhd> Call : Pa \\<longrightarrow>\n           G \\<subseteq> Da \\<longrightarrow> Da \\<rhd> c : A;\n        \\<forall>a b aa ba.\n           A (a, b) (aa, ba) \\<longrightarrow> B (a, b) (aa, ba);\n        Ga \\<rhd> Call : P; Ga \\<subseteq> D\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> c : A", "apply (erule VDMConseq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c A B Ga P D.\n       \\<lbrakk>insert P D \\<rhd> c : A;\n        \\<forall>G Pa Da.\n           insert P D = insert Pa Da \\<longrightarrow>\n           G \\<rhd> Call : Pa \\<longrightarrow>\n           G \\<subseteq> Da \\<longrightarrow> Da \\<rhd> c : A;\n        \\<forall>a b aa ba.\n           A (a, b) (aa, ba) \\<longrightarrow> B (a, b) (aa, ba);\n        Ga \\<rhd> Call : P; Ga \\<subseteq> D\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s t. A s t \\<longrightarrow> B s t\n 2. \\<And>c A B Ga P D.\n       \\<lbrakk>insert P D \\<rhd> c : A;\n        \\<forall>G Pa Da.\n           insert P D = insert Pa Da \\<longrightarrow>\n           G \\<rhd> Call : Pa \\<longrightarrow>\n           G \\<subseteq> Da \\<longrightarrow> Da \\<rhd> c : A;\n        \\<forall>a b aa ba.\n           A (a, b) (aa, ba) \\<longrightarrow> B (a, b) (aa, ba);\n        Ga \\<rhd> Call : P; Ga \\<subseteq> D\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> c : A", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c A B Ga P D.\n       \\<lbrakk>insert P D \\<rhd> c : A;\n        \\<forall>G Pa Da.\n           insert P D = insert Pa Da \\<longrightarrow>\n           G \\<rhd> Call : Pa \\<longrightarrow>\n           G \\<subseteq> Da \\<longrightarrow> Da \\<rhd> c : A;\n        \\<forall>a b aa ba.\n           A (a, b) (aa, ba) \\<longrightarrow> B (a, b) (aa, ba);\n        Ga \\<rhd> Call : P; Ga \\<subseteq> D\\<rbrakk>\n       \\<Longrightarrow> D \\<rhd> c : A", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma Cut:\"\\<lbrakk> G \\<rhd> Call : P ; (insert P G) \\<rhd> c : A \\<rbrakk> \\<Longrightarrow> G \\<rhd> c : A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<rhd> Call : P; insert P G \\<rhd> c : A\\<rbrakk>\n    \\<Longrightarrow> G \\<rhd> c : A", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<rhd> Call : P; insert P G \\<rhd> c : A\\<rbrakk>\n    \\<Longrightarrow> G \\<rhd> c : A", "by (drule CutAux , simp)"], ["", "(*>*)"], ["", "definition verified::\"Assn set \\<Rightarrow> bool\"\nwhere \"verified G = (\\<forall> A . A:G \\<longrightarrow> G \\<rhd> body : A)\""], ["", "lemma verified_preserved: \"\\<lbrakk>verified G; A:G\\<rbrakk> \\<Longrightarrow> verified (G - {A})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>verified G; A \\<in> G\\<rbrakk>\n    \\<Longrightarrow> verified (G - {A})", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>verified G; A \\<in> G\\<rbrakk>\n    \\<Longrightarrow> verified (G - {A})", "apply (simp add: verified_def, (rule allI)+, rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Aa.\n       \\<lbrakk>\\<forall>A. A \\<in> G \\<longrightarrow> G \\<rhd> body : A;\n        A \\<in> G; Aa \\<in> G \\<and> Aa \\<noteq> A\\<rbrakk>\n       \\<Longrightarrow> (G - {A}) \\<rhd> body : Aa", "apply (subgoal_tac \"(G - {A}) \\<rhd> Call:A\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Aa.\n       \\<lbrakk>\\<forall>A. A \\<in> G \\<longrightarrow> G \\<rhd> body : A;\n        A \\<in> G; Aa \\<in> G \\<and> Aa \\<noteq> A;\n        (G - {A}) \\<rhd> Call : A\\<rbrakk>\n       \\<Longrightarrow> (G - {A}) \\<rhd> body : Aa\n 2. \\<And>Aa.\n       \\<lbrakk>\\<forall>A. A \\<in> G \\<longrightarrow> G \\<rhd> body : A;\n        A \\<in> G; Aa \\<in> G \\<and> Aa \\<noteq> A\\<rbrakk>\n       \\<Longrightarrow> (G - {A}) \\<rhd> Call : A", "(*now use the subgoal (G - {A}) \\<rhd> Call:A to prove the goal*)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Aa.\n       \\<lbrakk>\\<forall>A. A \\<in> G \\<longrightarrow> G \\<rhd> body : A;\n        A \\<in> G; Aa \\<in> G \\<and> Aa \\<noteq> A;\n        (G - {A}) \\<rhd> Call : A\\<rbrakk>\n       \\<Longrightarrow> (G - {A}) \\<rhd> body : Aa\n 2. \\<And>Aa.\n       \\<lbrakk>\\<forall>A. A \\<in> G \\<longrightarrow> G \\<rhd> body : A;\n        A \\<in> G; Aa \\<in> G \\<and> Aa \\<noteq> A\\<rbrakk>\n       \\<Longrightarrow> (G - {A}) \\<rhd> Call : A", "apply (subgoal_tac \"G = insert A (G - {A})\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>Aa.\n       \\<lbrakk>\\<forall>A. A \\<in> G \\<longrightarrow> G \\<rhd> body : A;\n        A \\<in> G; Aa \\<in> G \\<and> Aa \\<noteq> A;\n        (G - {A}) \\<rhd> Call : A; G = insert A (G - {A})\\<rbrakk>\n       \\<Longrightarrow> (G - {A}) \\<rhd> body : Aa\n 2. \\<And>Aa.\n       \\<lbrakk>\\<forall>A. A \\<in> G \\<longrightarrow> G \\<rhd> body : A;\n        A \\<in> G; Aa \\<in> G \\<and> Aa \\<noteq> A;\n        (G - {A}) \\<rhd> Call : A\\<rbrakk>\n       \\<Longrightarrow> G = insert A (G - {A})\n 3. \\<And>Aa.\n       \\<lbrakk>\\<forall>A. A \\<in> G \\<longrightarrow> G \\<rhd> body : A;\n        A \\<in> G; Aa \\<in> G \\<and> Aa \\<noteq> A\\<rbrakk>\n       \\<Longrightarrow> (G - {A}) \\<rhd> Call : A", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>Aa.\n       \\<lbrakk>\\<forall>A. A \\<in> G \\<longrightarrow> G \\<rhd> body : A;\n        A \\<in> G; Aa \\<in> G \\<and> Aa \\<noteq> A;\n        (G - {A}) \\<rhd> Call : A\\<rbrakk>\n       \\<Longrightarrow> G = insert A (G - {A})\n 2. \\<And>Aa.\n       \\<lbrakk>\\<forall>A. A \\<in> G \\<longrightarrow> G \\<rhd> body : A;\n        A \\<in> G; Aa \\<in> G \\<and> Aa \\<noteq> A;\n        (G - {A}) \\<rhd> Call : A; G = insert A (G - {A})\\<rbrakk>\n       \\<Longrightarrow> (G - {A}) \\<rhd> body : Aa\n 3. \\<And>Aa.\n       \\<lbrakk>\\<forall>A. A \\<in> G \\<longrightarrow> G \\<rhd> body : A;\n        A \\<in> G; Aa \\<in> G \\<and> Aa \\<noteq> A\\<rbrakk>\n       \\<Longrightarrow> (G - {A}) \\<rhd> Call : A", "apply fast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Aa.\n       \\<lbrakk>\\<forall>A. A \\<in> G \\<longrightarrow> G \\<rhd> body : A;\n        A \\<in> G; Aa \\<in> G \\<and> Aa \\<noteq> A;\n        (G - {A}) \\<rhd> Call : A; G = insert A (G - {A})\\<rbrakk>\n       \\<Longrightarrow> (G - {A}) \\<rhd> body : Aa\n 2. \\<And>Aa.\n       \\<lbrakk>\\<forall>A. A \\<in> G \\<longrightarrow> G \\<rhd> body : A;\n        A \\<in> G; Aa \\<in> G \\<and> Aa \\<noteq> A\\<rbrakk>\n       \\<Longrightarrow> (G - {A}) \\<rhd> Call : A", "apply (erule_tac x=Aa in allE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Aa.\n       \\<lbrakk>A \\<in> G; Aa \\<in> G \\<and> Aa \\<noteq> A;\n        (G - {A}) \\<rhd> Call : A; G = insert A (G - {A});\n        Aa \\<in> G \\<longrightarrow> G \\<rhd> body : Aa\\<rbrakk>\n       \\<Longrightarrow> (G - {A}) \\<rhd> body : Aa\n 2. \\<And>Aa.\n       \\<lbrakk>\\<forall>A. A \\<in> G \\<longrightarrow> G \\<rhd> body : A;\n        A \\<in> G; Aa \\<in> G \\<and> Aa \\<noteq> A\\<rbrakk>\n       \\<Longrightarrow> (G - {A}) \\<rhd> Call : A", "apply (erule impE, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Aa.\n       \\<lbrakk>A \\<in> G; Aa \\<in> G \\<and> Aa \\<noteq> A;\n        (G - {A}) \\<rhd> Call : A; G = insert A (G - {A});\n        G \\<rhd> body : Aa\\<rbrakk>\n       \\<Longrightarrow> (G - {A}) \\<rhd> body : Aa\n 2. \\<And>Aa.\n       \\<lbrakk>\\<forall>A. A \\<in> G \\<longrightarrow> G \\<rhd> body : A;\n        A \\<in> G; Aa \\<in> G \\<and> Aa \\<noteq> A\\<rbrakk>\n       \\<Longrightarrow> (G - {A}) \\<rhd> Call : A", "apply (erule Cut)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Aa.\n       \\<lbrakk>A \\<in> G; Aa \\<in> G \\<and> Aa \\<noteq> A;\n        G = insert A (G - {A}); G \\<rhd> body : Aa\\<rbrakk>\n       \\<Longrightarrow> insert A (G - {A}) \\<rhd> body : Aa\n 2. \\<And>Aa.\n       \\<lbrakk>\\<forall>A. A \\<in> G \\<longrightarrow> G \\<rhd> body : A;\n        A \\<in> G; Aa \\<in> G \\<and> Aa \\<noteq> A\\<rbrakk>\n       \\<Longrightarrow> (G - {A}) \\<rhd> Call : A", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Aa.\n       \\<lbrakk>\\<forall>A. A \\<in> G \\<longrightarrow> G \\<rhd> body : A;\n        A \\<in> G; Aa \\<in> G \\<and> Aa \\<noteq> A\\<rbrakk>\n       \\<Longrightarrow> (G - {A}) \\<rhd> Call : A", "(* now prove the subgoal (G - {A}) \\<rhd>  Call : A *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Aa.\n       \\<lbrakk>\\<forall>A. A \\<in> G \\<longrightarrow> G \\<rhd> body : A;\n        A \\<in> G; Aa \\<in> G \\<and> Aa \\<noteq> A\\<rbrakk>\n       \\<Longrightarrow> (G - {A}) \\<rhd> Call : A", "apply (erule_tac x=A in allE, clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Aa.\n       \\<lbrakk>A \\<in> G; G \\<rhd> body : A; Aa \\<in> G;\n        Aa \\<noteq> A\\<rbrakk>\n       \\<Longrightarrow> (G - {A}) \\<rhd> Call : A", "apply (rule VDMCall)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Aa.\n       \\<lbrakk>A \\<in> G; G \\<rhd> body : A; Aa \\<in> G;\n        Aa \\<noteq> A\\<rbrakk>\n       \\<Longrightarrow> ({A} \\<union> (G - {A})) \\<rhd> body : A", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Aa.\n       \\<lbrakk>A \\<in> G; G \\<rhd> body : A; Aa \\<in> G;\n        Aa \\<noteq> A\\<rbrakk>\n       \\<Longrightarrow> insert A G \\<rhd> body : A", "apply (erule WEAK)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Aa.\n       \\<lbrakk>A \\<in> G; Aa \\<in> G; Aa \\<noteq> A\\<rbrakk>\n       \\<Longrightarrow> G \\<subseteq> insert A G", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)\n\n(*<*)"], ["", "lemma SetNonSingleton:\n  \"\\<lbrakk>G \\<noteq> {A}; A \\<in> G\\<rbrakk> \\<Longrightarrow> \\<exists>B. B \\<noteq> A \\<and> B \\<in> G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<noteq> {A}; A \\<in> G\\<rbrakk>\n    \\<Longrightarrow> \\<exists>B. B \\<noteq> A \\<and> B \\<in> G", "by auto"], ["", "lemma MutrecAux[rule_format]: \n\"\\<forall> G . ((finite G \\<and> card G = n \\<and> verified G \\<and> A : G) \\<longrightarrow> {} \\<rhd> Call:A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G.\n       finite G \\<and>\n       card G = n \\<and> verified G \\<and> A \\<in> G \\<longrightarrow>\n       {} \\<rhd> Call : A", "apply (induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>G.\n       finite G \\<and>\n       card G = 0 \\<and> verified G \\<and> A \\<in> G \\<longrightarrow>\n       {} \\<rhd> Call : A\n 2. \\<And>n.\n       \\<forall>G.\n          finite G \\<and>\n          card G = n \\<and> verified G \\<and> A \\<in> G \\<longrightarrow>\n          {} \\<rhd> Call : A \\<Longrightarrow>\n       \\<forall>G.\n          finite G \\<and>\n          card G = Suc n \\<and>\n          verified G \\<and> A \\<in> G \\<longrightarrow>\n          {} \\<rhd> Call : A", "(*case n=0*)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>G.\n       finite G \\<and>\n       card G = 0 \\<and> verified G \\<and> A \\<in> G \\<longrightarrow>\n       {} \\<rhd> Call : A\n 2. \\<And>n.\n       \\<forall>G.\n          finite G \\<and>\n          card G = n \\<and> verified G \\<and> A \\<in> G \\<longrightarrow>\n          {} \\<rhd> Call : A \\<Longrightarrow>\n       \\<forall>G.\n          finite G \\<and>\n          card G = Suc n \\<and>\n          verified G \\<and> A \\<in> G \\<longrightarrow>\n          {} \\<rhd> Call : A", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>G.\n          finite G \\<and>\n          card G = n \\<and> verified G \\<and> A \\<in> G \\<longrightarrow>\n          {} \\<rhd> Call : A \\<Longrightarrow>\n       \\<forall>G.\n          finite G \\<and>\n          card G = Suc n \\<and>\n          verified G \\<and> A \\<in> G \\<longrightarrow>\n          {} \\<rhd> Call : A", "(*Case n>0*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>G.\n          finite G \\<and>\n          card G = n \\<and> verified G \\<and> A \\<in> G \\<longrightarrow>\n          {} \\<rhd> Call : A \\<Longrightarrow>\n       \\<forall>G.\n          finite G \\<and>\n          card G = Suc n \\<and>\n          verified G \\<and> A \\<in> G \\<longrightarrow>\n          {} \\<rhd> Call : A", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n G.\n       \\<lbrakk>finite G; card G = Suc n; verified G; A \\<in> G;\n        \\<forall>G.\n           verified G \\<longrightarrow>\n           card G = n \\<longrightarrow>\n           finite G \\<longrightarrow> A \\<notin> G\\<rbrakk>\n       \\<Longrightarrow> {} \\<rhd> Call : A", "apply (case_tac \"G = {A}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n G.\n       \\<lbrakk>finite G; card G = Suc n; verified G; A \\<in> G;\n        \\<forall>G.\n           verified G \\<longrightarrow>\n           card G = n \\<longrightarrow>\n           finite G \\<longrightarrow> A \\<notin> G;\n        G = {A}\\<rbrakk>\n       \\<Longrightarrow> {} \\<rhd> Call : A\n 2. \\<And>n G.\n       \\<lbrakk>finite G; card G = Suc n; verified G; A \\<in> G;\n        \\<forall>G.\n           verified G \\<longrightarrow>\n           card G = n \\<longrightarrow>\n           finite G \\<longrightarrow> A \\<notin> G;\n        G \\<noteq> {A}\\<rbrakk>\n       \\<Longrightarrow> {} \\<rhd> Call : A", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>verified {A};\n     \\<forall>G.\n        verified G \\<longrightarrow>\n        card G = 0 \\<longrightarrow>\n        finite G \\<longrightarrow> A \\<notin> G\\<rbrakk>\n    \\<Longrightarrow> {} \\<rhd> Call : A\n 2. \\<And>n G.\n       \\<lbrakk>finite G; card G = Suc n; verified G; A \\<in> G;\n        \\<forall>G.\n           verified G \\<longrightarrow>\n           card G = n \\<longrightarrow>\n           finite G \\<longrightarrow> A \\<notin> G;\n        G \\<noteq> {A}\\<rbrakk>\n       \\<Longrightarrow> {} \\<rhd> Call : A", "apply (erule_tac x=\"{A}\" in allE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>verified {A};\n     verified {A} \\<longrightarrow>\n     card {A} = 0 \\<longrightarrow>\n     finite {A} \\<longrightarrow> A \\<notin> {A}\\<rbrakk>\n    \\<Longrightarrow> {} \\<rhd> Call : A\n 2. \\<And>n G.\n       \\<lbrakk>finite G; card G = Suc n; verified G; A \\<in> G;\n        \\<forall>G.\n           verified G \\<longrightarrow>\n           card G = n \\<longrightarrow>\n           finite G \\<longrightarrow> A \\<notin> G;\n        G \\<noteq> {A}\\<rbrakk>\n       \\<Longrightarrow> {} \\<rhd> Call : A", "apply (clarsimp, simp add:verified_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. {A} \\<rhd> body : A \\<Longrightarrow> {} \\<rhd> Call : A\n 2. \\<And>n G.\n       \\<lbrakk>finite G; card G = Suc n; verified G; A \\<in> G;\n        \\<forall>G.\n           verified G \\<longrightarrow>\n           card G = n \\<longrightarrow>\n           finite G \\<longrightarrow> A \\<notin> G;\n        G \\<noteq> {A}\\<rbrakk>\n       \\<Longrightarrow> {} \\<rhd> Call : A", "apply (rule VDMCall, clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n G.\n       \\<lbrakk>finite G; card G = Suc n; verified G; A \\<in> G;\n        \\<forall>G.\n           verified G \\<longrightarrow>\n           card G = n \\<longrightarrow>\n           finite G \\<longrightarrow> A \\<notin> G;\n        G \\<noteq> {A}\\<rbrakk>\n       \\<Longrightarrow> {} \\<rhd> Call : A", "(*Case G has more entries than A*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n G.\n       \\<lbrakk>finite G; card G = Suc n; verified G; A \\<in> G;\n        \\<forall>G.\n           verified G \\<longrightarrow>\n           card G = n \\<longrightarrow>\n           finite G \\<longrightarrow> A \\<notin> G;\n        G \\<noteq> {A}\\<rbrakk>\n       \\<Longrightarrow> {} \\<rhd> Call : A", "apply (drule SetNonSingleton, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n G.\n       \\<lbrakk>finite G; card G = Suc n; verified G; A \\<in> G;\n        \\<forall>G.\n           verified G \\<longrightarrow>\n           card G = n \\<longrightarrow>\n           finite G \\<longrightarrow> A \\<notin> G;\n        \\<exists>B. B \\<noteq> A \\<and> B \\<in> G\\<rbrakk>\n       \\<Longrightarrow> {} \\<rhd> Call : A", "(* use the fact that there is another entry B:G*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n G.\n       \\<lbrakk>finite G; card G = Suc n; verified G; A \\<in> G;\n        \\<forall>G.\n           verified G \\<longrightarrow>\n           card G = n \\<longrightarrow>\n           finite G \\<longrightarrow> A \\<notin> G;\n        \\<exists>B. B \\<noteq> A \\<and> B \\<in> G\\<rbrakk>\n       \\<Longrightarrow> {} \\<rhd> Call : A", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n G B.\n       \\<lbrakk>finite G; card G = Suc n; verified G; A \\<in> G;\n        \\<forall>G.\n           verified G \\<longrightarrow>\n           card G = n \\<longrightarrow>\n           finite G \\<longrightarrow> A \\<notin> G;\n        B \\<noteq> A; B \\<in> G\\<rbrakk>\n       \\<Longrightarrow> {} \\<rhd> Call : A", "apply (subgoal_tac \"(G - {B}) \\<rhd> Call : B\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n G B.\n       \\<lbrakk>finite G; card G = Suc n; verified G; A \\<in> G;\n        \\<forall>G.\n           verified G \\<longrightarrow>\n           card G = n \\<longrightarrow>\n           finite G \\<longrightarrow> A \\<notin> G;\n        B \\<noteq> A; B \\<in> G; (G - {B}) \\<rhd> Call : B\\<rbrakk>\n       \\<Longrightarrow> {} \\<rhd> Call : A\n 2. \\<And>n G B.\n       \\<lbrakk>finite G; card G = Suc n; verified G; A \\<in> G;\n        \\<forall>G.\n           verified G \\<longrightarrow>\n           card G = n \\<longrightarrow>\n           finite G \\<longrightarrow> A \\<notin> G;\n        B \\<noteq> A; B \\<in> G\\<rbrakk>\n       \\<Longrightarrow> (G - {B}) \\<rhd> Call : B", "apply (erule_tac x=\"G - {B}\" in allE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n G B.\n       \\<lbrakk>finite G; card G = Suc n; verified G; A \\<in> G;\n        B \\<noteq> A; B \\<in> G; (G - {B}) \\<rhd> Call : B;\n        verified (G - {B}) \\<longrightarrow>\n        card (G - {B}) = n \\<longrightarrow>\n        finite (G - {B}) \\<longrightarrow> A \\<notin> G - {B}\\<rbrakk>\n       \\<Longrightarrow> {} \\<rhd> Call : A\n 2. \\<And>n G B.\n       \\<lbrakk>finite G; card G = Suc n; verified G; A \\<in> G;\n        \\<forall>G.\n           verified G \\<longrightarrow>\n           card G = n \\<longrightarrow>\n           finite G \\<longrightarrow> A \\<notin> G;\n        B \\<noteq> A; B \\<in> G\\<rbrakk>\n       \\<Longrightarrow> (G - {B}) \\<rhd> Call : B", "apply (erule impE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n G B.\n       \\<lbrakk>finite G; card G = Suc n; verified G; A \\<in> G;\n        B \\<noteq> A; B \\<in> G; (G - {B}) \\<rhd> Call : B\\<rbrakk>\n       \\<Longrightarrow> verified (G - {B})\n 2. \\<And>n G B.\n       \\<lbrakk>finite G; card G = Suc n; verified G; A \\<in> G;\n        B \\<noteq> A; B \\<in> G; (G - {B}) \\<rhd> Call : B;\n        card (G - {B}) = n \\<longrightarrow>\n        finite (G - {B}) \\<longrightarrow> A \\<notin> G - {B}\\<rbrakk>\n       \\<Longrightarrow> {} \\<rhd> Call : A\n 3. \\<And>n G B.\n       \\<lbrakk>finite G; card G = Suc n; verified G; A \\<in> G;\n        \\<forall>G.\n           verified G \\<longrightarrow>\n           card G = n \\<longrightarrow>\n           finite G \\<longrightarrow> A \\<notin> G;\n        B \\<noteq> A; B \\<in> G\\<rbrakk>\n       \\<Longrightarrow> (G - {B}) \\<rhd> Call : B", "apply (simp add: verified_preserved)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n G B.\n       \\<lbrakk>finite G; card G = Suc n; verified G; A \\<in> G;\n        B \\<noteq> A; B \\<in> G; (G - {B}) \\<rhd> Call : B;\n        card (G - {B}) = n \\<longrightarrow>\n        finite (G - {B}) \\<longrightarrow> A \\<notin> G - {B}\\<rbrakk>\n       \\<Longrightarrow> {} \\<rhd> Call : A\n 2. \\<And>n G B.\n       \\<lbrakk>finite G; card G = Suc n; verified G; A \\<in> G;\n        \\<forall>G.\n           verified G \\<longrightarrow>\n           card G = n \\<longrightarrow>\n           finite G \\<longrightarrow> A \\<notin> G;\n        B \\<noteq> A; B \\<in> G\\<rbrakk>\n       \\<Longrightarrow> (G - {B}) \\<rhd> Call : B", "apply (erule impE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n G B.\n       \\<lbrakk>finite G; card G = Suc n; verified G; A \\<in> G;\n        B \\<noteq> A; B \\<in> G; (G - {B}) \\<rhd> Call : B\\<rbrakk>\n       \\<Longrightarrow> card (G - {B}) = n\n 2. \\<And>n G B.\n       \\<lbrakk>finite G; card G = Suc n; verified G; A \\<in> G;\n        B \\<noteq> A; B \\<in> G; (G - {B}) \\<rhd> Call : B;\n        finite (G - {B}) \\<longrightarrow> A \\<notin> G - {B}\\<rbrakk>\n       \\<Longrightarrow> {} \\<rhd> Call : A\n 3. \\<And>n G B.\n       \\<lbrakk>finite G; card G = Suc n; verified G; A \\<in> G;\n        \\<forall>G.\n           verified G \\<longrightarrow>\n           card G = n \\<longrightarrow>\n           finite G \\<longrightarrow> A \\<notin> G;\n        B \\<noteq> A; B \\<in> G\\<rbrakk>\n       \\<Longrightarrow> (G - {B}) \\<rhd> Call : B", "apply (simp add: card_Diff_singleton)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n G B.\n       \\<lbrakk>finite G; card G = Suc n; verified G; A \\<in> G;\n        B \\<noteq> A; B \\<in> G; (G - {B}) \\<rhd> Call : B;\n        finite (G - {B}) \\<longrightarrow> A \\<notin> G - {B}\\<rbrakk>\n       \\<Longrightarrow> {} \\<rhd> Call : A\n 2. \\<And>n G B.\n       \\<lbrakk>finite G; card G = Suc n; verified G; A \\<in> G;\n        \\<forall>G.\n           verified G \\<longrightarrow>\n           card G = n \\<longrightarrow>\n           finite G \\<longrightarrow> A \\<notin> G;\n        B \\<noteq> A; B \\<in> G\\<rbrakk>\n       \\<Longrightarrow> (G - {B}) \\<rhd> Call : B", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n G B.\n       \\<lbrakk>finite G; card G = Suc n; verified G; A \\<in> G;\n        \\<forall>G.\n           verified G \\<longrightarrow>\n           card G = n \\<longrightarrow>\n           finite G \\<longrightarrow> A \\<notin> G;\n        B \\<noteq> A; B \\<in> G\\<rbrakk>\n       \\<Longrightarrow> (G - {B}) \\<rhd> Call : B", "(*the proof for (G - {B}) \\<rhd>  Call : B *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n G B.\n       \\<lbrakk>finite G; card G = Suc n; verified G; A \\<in> G;\n        \\<forall>G.\n           verified G \\<longrightarrow>\n           card G = n \\<longrightarrow>\n           finite G \\<longrightarrow> A \\<notin> G;\n        B \\<noteq> A; B \\<in> G\\<rbrakk>\n       \\<Longrightarrow> (G - {B}) \\<rhd> Call : B", "apply (simp add: verified_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n G B.\n       \\<lbrakk>finite G; card G = Suc n;\n        \\<forall>A. A \\<in> G \\<longrightarrow> G \\<rhd> body : A;\n        A \\<in> G;\n        \\<forall>G.\n           (\\<forall>A.\n               A \\<in> G \\<longrightarrow>\n               G \\<rhd> body : A) \\<longrightarrow>\n           card G = n \\<longrightarrow>\n           finite G \\<longrightarrow> A \\<notin> G;\n        B \\<noteq> A; B \\<in> G\\<rbrakk>\n       \\<Longrightarrow> (G - {B}) \\<rhd> Call : B", "apply (rotate_tac 3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n G B.\n       \\<lbrakk>A \\<in> G;\n        \\<forall>G.\n           (\\<forall>A.\n               A \\<in> G \\<longrightarrow>\n               G \\<rhd> body : A) \\<longrightarrow>\n           card G = n \\<longrightarrow>\n           finite G \\<longrightarrow> A \\<notin> G;\n        B \\<noteq> A; B \\<in> G; finite G; card G = Suc n;\n        \\<forall>A. A \\<in> G \\<longrightarrow> G \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> (G - {B}) \\<rhd> Call : B", "apply (erule_tac x=B in allE, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n G B.\n       \\<lbrakk>A \\<in> G;\n        \\<forall>G.\n           (\\<forall>A.\n               A \\<in> G \\<longrightarrow>\n               G \\<rhd> body : A) \\<longrightarrow>\n           card G = n \\<longrightarrow>\n           finite G \\<longrightarrow> A \\<notin> G;\n        B \\<noteq> A; B \\<in> G; finite G; card G = Suc n;\n        G \\<rhd> body : B\\<rbrakk>\n       \\<Longrightarrow> (G - {B}) \\<rhd> Call : B", "apply (rule VDMCall)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n G B.\n       \\<lbrakk>A \\<in> G;\n        \\<forall>G.\n           (\\<forall>A.\n               A \\<in> G \\<longrightarrow>\n               G \\<rhd> body : A) \\<longrightarrow>\n           card G = n \\<longrightarrow>\n           finite G \\<longrightarrow> A \\<notin> G;\n        B \\<noteq> A; B \\<in> G; finite G; card G = Suc n;\n        G \\<rhd> body : B\\<rbrakk>\n       \\<Longrightarrow> ({B} \\<union> (G - {B})) \\<rhd> body : B", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n G B.\n       \\<lbrakk>A \\<in> G;\n        \\<forall>G.\n           (\\<forall>A.\n               A \\<in> G \\<longrightarrow>\n               G \\<rhd> body : A) \\<longrightarrow>\n           card G = n \\<longrightarrow>\n           finite G \\<longrightarrow> A \\<notin> G;\n        B \\<noteq> A; B \\<in> G; finite G; card G = Suc n;\n        G \\<rhd> body : B\\<rbrakk>\n       \\<Longrightarrow> insert B G \\<rhd> body : B", "apply (erule WEAK)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n G B.\n       \\<lbrakk>A \\<in> G;\n        \\<forall>G.\n           (\\<forall>A.\n               A \\<in> G \\<longrightarrow>\n               G \\<rhd> body : A) \\<longrightarrow>\n           card G = n \\<longrightarrow>\n           finite G \\<longrightarrow> A \\<notin> G;\n        B \\<noteq> A; B \\<in> G; finite G; card G = Suc n\\<rbrakk>\n       \\<Longrightarrow> G \\<subseteq> insert B G", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "theorem Mutrec:\n\"\\<lbrakk> finite G; card G = n; verified G; A : G \\<rbrakk> \\<Longrightarrow> {} \\<rhd> Call:A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite G; card G = n; verified G; A \\<in> G\\<rbrakk>\n    \\<Longrightarrow> {} \\<rhd> Call : A", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite G; card G = n; verified G; A \\<in> G\\<rbrakk>\n    \\<Longrightarrow> {} \\<rhd> Call : A", "by (rule MutrecAux, fast)"], ["", "(*>*)"], ["", "subsubsection\\<open>Completeness\\<close>"], ["", "definition SSpec::\"OBJ \\<Rightarrow> Assn\"\nwhere \"SSpec c s t = (s,c \\<Down> t)\""], ["", "lemma SSpec_valid: \"\\<Turnstile> c : (SSpec c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  \\<Turnstile> c : SSpec c", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1.  \\<Turnstile> c : SSpec c", "by (simp add: VDM_valid_def SSpec_def)"], ["", "(*>*)"], ["", "lemma SSpec_strong: \"\\<Turnstile> c :A \\<Longrightarrow> \\<forall> s t . SSpec c s t \\<longrightarrow> A s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  \\<Turnstile> c : A  \\<Longrightarrow>\n    \\<forall>s t. SSpec c s t \\<longrightarrow> A s t", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1.  \\<Turnstile> c : A  \\<Longrightarrow>\n    \\<forall>s t. SSpec c s t \\<longrightarrow> A s t", "by (simp add: VDM_valid_def SSpec_def)"], ["", "(*>*)"], ["", "lemma SSpec_derivable:\"G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c : SSpec c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c : SSpec c", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c : SSpec c", "apply (induct c)"], ["proof (prove)\ngoal (9 subgoals):\n 1. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Skip : SSpec Skip\n 2. \\<And>x1 x2.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Assign x1 x2 : SSpec (Assign x1 x2)\n 3. \\<And>x1 x2.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> New x1 x2 : SSpec (New x1 x2)\n 4. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Get x1 x2 x3 : SSpec (Get x1 x2 x3)\n 5. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Put x1 x2 x3 : SSpec (Put x1 x2 x3)\n 6. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 7. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 8. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 9. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (rule VDMConseq)"], ["proof (prove)\ngoal (10 subgoals):\n 1. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Skip : ?A9\n 2. G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n    \\<forall>s t. ?A9 s t \\<longrightarrow> SSpec Skip s t\n 3. \\<And>x1 x2.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Assign x1 x2 : SSpec (Assign x1 x2)\n 4. \\<And>x1 x2.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> New x1 x2 : SSpec (New x1 x2)\n 5. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Get x1 x2 x3 : SSpec (Get x1 x2 x3)\n 6. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Put x1 x2 x3 : SSpec (Put x1 x2 x3)\n 7. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 8. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 9. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 10. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (rule VDMSkip)"], ["proof (prove)\ngoal (9 subgoals):\n 1. G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n    \\<forall>s t. t = s \\<longrightarrow> SSpec Skip s t\n 2. \\<And>x1 x2.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Assign x1 x2 : SSpec (Assign x1 x2)\n 3. \\<And>x1 x2.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> New x1 x2 : SSpec (New x1 x2)\n 4. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Get x1 x2 x3 : SSpec (Get x1 x2 x3)\n 5. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Put x1 x2 x3 : SSpec (Put x1 x2 x3)\n 6. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 7. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 8. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 9. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (simp add: SSpec_def Sem_def, rule, rule, rule)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>a b.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n        (a, b) , Skip \\<rightarrow>\\<^sub>?n17 a b  (a, b) \n 2. \\<And>x1 x2.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Assign x1 x2 : SSpec (Assign x1 x2)\n 3. \\<And>x1 x2.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> New x1 x2 : SSpec (New x1 x2)\n 4. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Get x1 x2 x3 : SSpec (Get x1 x2 x3)\n 5. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Put x1 x2 x3 : SSpec (Put x1 x2 x3)\n 6. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 7. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 8. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 9. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (rule SemSkip)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>a b. G \\<rhd> Call : SSpec Call \\<Longrightarrow> (a, b) = (a, b)\n 2. \\<And>x1 x2.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Assign x1 x2 : SSpec (Assign x1 x2)\n 3. \\<And>x1 x2.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> New x1 x2 : SSpec (New x1 x2)\n 4. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Get x1 x2 x3 : SSpec (Get x1 x2 x3)\n 5. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Put x1 x2 x3 : SSpec (Put x1 x2 x3)\n 6. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 7. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 8. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 9. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply simp"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>x1 x2.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Assign x1 x2 : SSpec (Assign x1 x2)\n 2. \\<And>x1 x2.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> New x1 x2 : SSpec (New x1 x2)\n 3. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Get x1 x2 x3 : SSpec (Get x1 x2 x3)\n 4. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Put x1 x2 x3 : SSpec (Put x1 x2 x3)\n 5. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 6. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 7. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 8. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (rule VDMConseq)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>x1 x2.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Assign x1 x2 : ?A21 x1 x2\n 2. \\<And>x1 x2.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       \\<forall>s t.\n          ?A21 x1 x2 s t \\<longrightarrow> SSpec (Assign x1 x2) s t\n 3. \\<And>x1 x2.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> New x1 x2 : SSpec (New x1 x2)\n 4. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Get x1 x2 x3 : SSpec (Get x1 x2 x3)\n 5. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Put x1 x2 x3 : SSpec (Put x1 x2 x3)\n 6. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 7. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 8. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 9. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (rule VDMAssign)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>x1 x2.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       \\<forall>s t.\n          t =\n          (update (fst s) x1 (evalE x2 (fst s)), snd s) \\<longrightarrow>\n          SSpec (Assign x1 x2) s t\n 2. \\<And>x1 x2.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> New x1 x2 : SSpec (New x1 x2)\n 3. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Get x1 x2 x3 : SSpec (Get x1 x2 x3)\n 4. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Put x1 x2 x3 : SSpec (Put x1 x2 x3)\n 5. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 6. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 7. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 8. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (simp add: SSpec_def Sem_def, rule, rule, rule)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>x1 x2 a b.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n        (a, b) , Assign x1\n                  x2 \\<rightarrow>\\<^sub>?n29 x1 x2 a\n    b  (update a x1 (evalE x2 a), b) \n 2. \\<And>x1 x2.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> New x1 x2 : SSpec (New x1 x2)\n 3. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Get x1 x2 x3 : SSpec (Get x1 x2 x3)\n 4. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Put x1 x2 x3 : SSpec (Put x1 x2 x3)\n 5. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 6. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 7. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 8. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (rule SemAssign)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>x1 x2 a b.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       (update a x1 (evalE x2 a), b) =\n       (update (fst (a, b)) x1 (evalE x2 (fst (a, b))), snd (a, b))\n 2. \\<And>x1 x2.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> New x1 x2 : SSpec (New x1 x2)\n 3. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Get x1 x2 x3 : SSpec (Get x1 x2 x3)\n 4. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Put x1 x2 x3 : SSpec (Put x1 x2 x3)\n 5. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 6. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 7. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 8. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply simp"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x1 x2.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> New x1 x2 : SSpec (New x1 x2)\n 2. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Get x1 x2 x3 : SSpec (Get x1 x2 x3)\n 3. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Put x1 x2 x3 : SSpec (Put x1 x2 x3)\n 4. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 5. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 6. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 7. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (rule VDMConseq)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>x1 x2.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> New x1 x2 : ?A33 x1 x2\n 2. \\<And>x1 x2.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       \\<forall>s t. ?A33 x1 x2 s t \\<longrightarrow> SSpec (New x1 x2) s t\n 3. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Get x1 x2 x3 : SSpec (Get x1 x2 x3)\n 4. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Put x1 x2 x3 : SSpec (Put x1 x2 x3)\n 5. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 6. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 7. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 8. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (rule VDMNew)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x1 x2.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       \\<forall>s t.\n          (\\<exists>l.\n              l \\<notin> Dom (snd s) \\<and>\n              t =\n              (update (fst s) x1 (RVal (Loc l)),\n               (l, x2, []) # snd s)) \\<longrightarrow>\n          SSpec (New x1 x2) s t\n 2. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Get x1 x2 x3 : SSpec (Get x1 x2 x3)\n 3. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Put x1 x2 x3 : SSpec (Put x1 x2 x3)\n 4. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 5. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 6. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 7. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (simp only: SSpec_def Sem_def, rule, rule, rule, rule)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x1 x2 s t.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call;\n        \\<exists>l.\n           l \\<notin> Dom (snd s) \\<and>\n           t =\n           (update (fst s) x1 (RVal (Loc l)), (l, x2, []) # snd s)\\<rbrakk>\n       \\<Longrightarrow>  s , New x1\n                               x2 \\<rightarrow>\\<^sub>?n43 x1 x2 s t  t \n 2. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Get x1 x2 x3 : SSpec (Get x1 x2 x3)\n 3. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Put x1 x2 x3 : SSpec (Put x1 x2 x3)\n 4. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 5. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 6. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 7. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (erule exE, erule conjE)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x1 x2 s t l.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call; l \\<notin> Dom (snd s);\n        t = (update (fst s) x1 (RVal (Loc l)), (l, x2, []) # snd s)\\<rbrakk>\n       \\<Longrightarrow>  s , New x1\n                               x2 \\<rightarrow>\\<^sub>?n43 x1 x2 s t  t \n 2. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Get x1 x2 x3 : SSpec (Get x1 x2 x3)\n 3. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Put x1 x2 x3 : SSpec (Put x1 x2 x3)\n 4. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 5. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 6. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 7. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (rule SemNew)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>x1 x2 s t l.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call; l \\<notin> Dom (snd s);\n        t = (update (fst s) x1 (RVal (Loc l)), (l, x2, []) # snd s)\\<rbrakk>\n       \\<Longrightarrow> ?l49 x1 x2 s t l \\<notin> Dom (snd s)\n 2. \\<And>x1 x2 s t l.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call; l \\<notin> Dom (snd s);\n        t = (update (fst s) x1 (RVal (Loc l)), (l, x2, []) # snd s)\\<rbrakk>\n       \\<Longrightarrow> t =\n                         (update (fst s) x1 (RVal (Loc (?l49 x1 x2 s t l))),\n                          (?l49 x1 x2 s t l, x2, []) # snd s)\n 3. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Get x1 x2 x3 : SSpec (Get x1 x2 x3)\n 4. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Put x1 x2 x3 : SSpec (Put x1 x2 x3)\n 5. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 6. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 7. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 8. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply assumption"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x1 x2 s t l.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call; l \\<notin> Dom (snd s);\n        t = (update (fst s) x1 (RVal (Loc l)), (l, x2, []) # snd s)\\<rbrakk>\n       \\<Longrightarrow> t =\n                         (update (fst s) x1 (RVal (Loc l)),\n                          (l, x2, []) # snd s)\n 2. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Get x1 x2 x3 : SSpec (Get x1 x2 x3)\n 3. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Put x1 x2 x3 : SSpec (Put x1 x2 x3)\n 4. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 5. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 6. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 7. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply assumption"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Get x1 x2 x3 : SSpec (Get x1 x2 x3)\n 2. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Put x1 x2 x3 : SSpec (Put x1 x2 x3)\n 3. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 4. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 6. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (rule VDMConseq)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Get x1 x2 x3 : ?A52 x1 x2 x3\n 2. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       \\<forall>s t.\n          ?A52 x1 x2 x3 s t \\<longrightarrow> SSpec (Get x1 x2 x3) s t\n 3. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Put x1 x2 x3 : SSpec (Put x1 x2 x3)\n 4. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 5. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 6. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 7. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (rule VDMGet)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       \\<forall>s t.\n          (\\<exists>l C Flds v.\n              fst s x2 = RVal (Loc l) \\<and>\n              lookup (snd s) l = Some (C, Flds) \\<and>\n              lookup Flds x3 = Some v \\<and>\n              t = (update (fst s) x1 v, snd s)) \\<longrightarrow>\n          SSpec (Get x1 x2 x3) s t\n 2. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Put x1 x2 x3 : SSpec (Put x1 x2 x3)\n 3. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 4. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 6. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (simp only: SSpec_def Sem_def, rule, rule, rule, rule)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x1 x2 x3 s t.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call;\n        \\<exists>l C Flds v.\n           fst s x2 = RVal (Loc l) \\<and>\n           lookup (snd s) l = Some (C, Flds) \\<and>\n           lookup Flds x3 = Some v \\<and>\n           t = (update (fst s) x1 v, snd s)\\<rbrakk>\n       \\<Longrightarrow>  s , Get x1 x2\n                               x3 \\<rightarrow>\\<^sub>?n62 x1 x2 x3 s t  t \n 2. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Put x1 x2 x3 : SSpec (Put x1 x2 x3)\n 3. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 4. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 6. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (erule exE)+"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x1 x2 x3 s t l C Flds v.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call;\n        fst s x2 = RVal (Loc l) \\<and>\n        lookup (snd s) l = Some (C, Flds) \\<and>\n        lookup Flds x3 = Some v \\<and>\n        t = (update (fst s) x1 v, snd s)\\<rbrakk>\n       \\<Longrightarrow>  s , Get x1 x2\n                               x3 \\<rightarrow>\\<^sub>?n62 x1 x2 x3 s t  t \n 2. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Put x1 x2 x3 : SSpec (Put x1 x2 x3)\n 3. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 4. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 6. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (erule conjE)+"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x1 x2 x3 s t l C Flds v.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call; fst s x2 = RVal (Loc l);\n        lookup (snd s) l = Some (C, Flds); lookup Flds x3 = Some v;\n        t = (update (fst s) x1 v, snd s)\\<rbrakk>\n       \\<Longrightarrow>  s , Get x1 x2\n                               x3 \\<rightarrow>\\<^sub>?n62 x1 x2 x3 s t  t \n 2. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Put x1 x2 x3 : SSpec (Put x1 x2 x3)\n 3. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 4. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 6. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (rule SemGet)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>x1 x2 x3 s t l C Flds v.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call; fst s x2 = RVal (Loc l);\n        lookup (snd s) l = Some (C, Flds); lookup Flds x3 = Some v;\n        t = (update (fst s) x1 v, snd s)\\<rbrakk>\n       \\<Longrightarrow> fst s x2 =\n                         RVal (Loc (?l78 x1 x2 x3 s t l C Flds v))\n 2. \\<And>x1 x2 x3 s t l C Flds v.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call; fst s x2 = RVal (Loc l);\n        lookup (snd s) l = Some (C, Flds); lookup Flds x3 = Some v;\n        t = (update (fst s) x1 v, snd s)\\<rbrakk>\n       \\<Longrightarrow> lookup (snd s) (?l78 x1 x2 x3 s t l C Flds v) =\n                         Some\n                          (?C78 x1 x2 x3 s t l C Flds v,\n                           ?Flds78 x1 x2 x3 s t l C Flds v)\n 3. \\<And>x1 x2 x3 s t l C Flds v.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call; fst s x2 = RVal (Loc l);\n        lookup (snd s) l = Some (C, Flds); lookup Flds x3 = Some v;\n        t = (update (fst s) x1 v, snd s)\\<rbrakk>\n       \\<Longrightarrow> lookup (?Flds78 x1 x2 x3 s t l C Flds v) x3 =\n                         Some (?v78 x1 x2 x3 s t l C Flds v)\n 4. \\<And>x1 x2 x3 s t l C Flds v.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call; fst s x2 = RVal (Loc l);\n        lookup (snd s) l = Some (C, Flds); lookup Flds x3 = Some v;\n        t = (update (fst s) x1 v, snd s)\\<rbrakk>\n       \\<Longrightarrow> t =\n                         (update (fst s) x1 (?v78 x1 x2 x3 s t l C Flds v),\n                          snd s)\n 5. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Put x1 x2 x3 : SSpec (Put x1 x2 x3)\n 6. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 7. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 8. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 9. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply assumption"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>x1 x2 x3 s t l C Flds v.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call; fst s x2 = RVal (Loc l);\n        lookup (snd s) l = Some (C, Flds); lookup Flds x3 = Some v;\n        t = (update (fst s) x1 v, snd s)\\<rbrakk>\n       \\<Longrightarrow> lookup (snd s) l =\n                         Some\n                          (?C78 x1 x2 x3 s t l C Flds v,\n                           ?Flds78 x1 x2 x3 s t l C Flds v)\n 2. \\<And>x1 x2 x3 s t l C Flds v.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call; fst s x2 = RVal (Loc l);\n        lookup (snd s) l = Some (C, Flds); lookup Flds x3 = Some v;\n        t = (update (fst s) x1 v, snd s)\\<rbrakk>\n       \\<Longrightarrow> lookup (?Flds78 x1 x2 x3 s t l C Flds v) x3 =\n                         Some (?v78 x1 x2 x3 s t l C Flds v)\n 3. \\<And>x1 x2 x3 s t l C Flds v.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call; fst s x2 = RVal (Loc l);\n        lookup (snd s) l = Some (C, Flds); lookup Flds x3 = Some v;\n        t = (update (fst s) x1 v, snd s)\\<rbrakk>\n       \\<Longrightarrow> t =\n                         (update (fst s) x1 (?v78 x1 x2 x3 s t l C Flds v),\n                          snd s)\n 4. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Put x1 x2 x3 : SSpec (Put x1 x2 x3)\n 5. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 6. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 7. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 8. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply assumption"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x1 x2 x3 s t l C Flds v.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call; fst s x2 = RVal (Loc l);\n        lookup (snd s) l = Some (C, Flds); lookup Flds x3 = Some v;\n        t = (update (fst s) x1 v, snd s)\\<rbrakk>\n       \\<Longrightarrow> lookup Flds x3 =\n                         Some (?v78 x1 x2 x3 s t l C Flds v)\n 2. \\<And>x1 x2 x3 s t l C Flds v.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call; fst s x2 = RVal (Loc l);\n        lookup (snd s) l = Some (C, Flds); lookup Flds x3 = Some v;\n        t = (update (fst s) x1 v, snd s)\\<rbrakk>\n       \\<Longrightarrow> t =\n                         (update (fst s) x1 (?v78 x1 x2 x3 s t l C Flds v),\n                          snd s)\n 3. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Put x1 x2 x3 : SSpec (Put x1 x2 x3)\n 4. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 5. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 6. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 7. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply assumption"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x1 x2 x3 s t l C Flds v.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call; fst s x2 = RVal (Loc l);\n        lookup (snd s) l = Some (C, Flds); lookup Flds x3 = Some v;\n        t = (update (fst s) x1 v, snd s)\\<rbrakk>\n       \\<Longrightarrow> t = (update (fst s) x1 v, snd s)\n 2. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Put x1 x2 x3 : SSpec (Put x1 x2 x3)\n 3. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 4. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 6. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply assumption"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Put x1 x2 x3 : SSpec (Put x1 x2 x3)\n 2. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 3. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 5. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (rule VDMConseq)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       G \\<rhd> Put x1 x2 x3 : ?A83 x1 x2 x3\n 2. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       \\<forall>s t.\n          ?A83 x1 x2 x3 s t \\<longrightarrow> SSpec (Put x1 x2 x3) s t\n 3. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 4. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 6. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (rule VDMPut)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x1 x2 x3.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       \\<forall>s t.\n          (\\<exists>l C Flds.\n              fst s x1 = RVal (Loc l) \\<and>\n              lookup (snd s) l = Some (C, Flds) \\<and>\n              t =\n              (fst s,\n               (l, C, (x2, evalE x3 (fst s)) # Flds) #\n               snd s)) \\<longrightarrow>\n          SSpec (Put x1 x2 x3) s t\n 2. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 3. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 5. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (simp only: SSpec_def Sem_def, rule, rule, rule, rule)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x1 x2 x3 s t.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call;\n        \\<exists>l C Flds.\n           fst s x1 = RVal (Loc l) \\<and>\n           lookup (snd s) l = Some (C, Flds) \\<and>\n           t =\n           (fst s, (l, C, (x2, evalE x3 (fst s)) # Flds) # snd s)\\<rbrakk>\n       \\<Longrightarrow>  s , Put x1 x2\n                               x3 \\<rightarrow>\\<^sub>?n93 x1 x2 x3 s t  t \n 2. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 3. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 5. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (erule exE)+"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x1 x2 x3 s t l C Flds.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call;\n        fst s x1 = RVal (Loc l) \\<and>\n        lookup (snd s) l = Some (C, Flds) \\<and>\n        t = (fst s, (l, C, (x2, evalE x3 (fst s)) # Flds) # snd s)\\<rbrakk>\n       \\<Longrightarrow>  s , Put x1 x2\n                               x3 \\<rightarrow>\\<^sub>?n93 x1 x2 x3 s t  t \n 2. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 3. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 5. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (erule conjE)+"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x1 x2 x3 s t l C Flds.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call; fst s x1 = RVal (Loc l);\n        lookup (snd s) l = Some (C, Flds);\n        t = (fst s, (l, C, (x2, evalE x3 (fst s)) # Flds) # snd s)\\<rbrakk>\n       \\<Longrightarrow>  s , Put x1 x2\n                               x3 \\<rightarrow>\\<^sub>?n93 x1 x2 x3 s t  t \n 2. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 3. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 5. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (rule SemPut)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x1 x2 x3 s t l C Flds.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call; fst s x1 = RVal (Loc l);\n        lookup (snd s) l = Some (C, Flds);\n        t = (fst s, (l, C, (x2, evalE x3 (fst s)) # Flds) # snd s)\\<rbrakk>\n       \\<Longrightarrow> fst s x1 = RVal (Loc (?l105 x1 x2 x3 s t l C Flds))\n 2. \\<And>x1 x2 x3 s t l C Flds.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call; fst s x1 = RVal (Loc l);\n        lookup (snd s) l = Some (C, Flds);\n        t = (fst s, (l, C, (x2, evalE x3 (fst s)) # Flds) # snd s)\\<rbrakk>\n       \\<Longrightarrow> lookup (snd s) (?l105 x1 x2 x3 s t l C Flds) =\n                         Some\n                          (?C105 x1 x2 x3 s t l C Flds,\n                           ?Flds105 x1 x2 x3 s t l C Flds)\n 3. \\<And>x1 x2 x3 s t l C Flds.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call; fst s x1 = RVal (Loc l);\n        lookup (snd s) l = Some (C, Flds);\n        t = (fst s, (l, C, (x2, evalE x3 (fst s)) # Flds) # snd s)\\<rbrakk>\n       \\<Longrightarrow> t =\n                         (fst s,\n                          (?l105 x1 x2 x3 s t l C Flds,\n                           ?C105 x1 x2 x3 s t l C Flds,\n                           (x2, evalE x3 (fst s)) #\n                           ?Flds105 x1 x2 x3 s t l C Flds) #\n                          snd s)\n 4. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 5. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 6. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 7. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply assumption"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x1 x2 x3 s t l C Flds.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call; fst s x1 = RVal (Loc l);\n        lookup (snd s) l = Some (C, Flds);\n        t = (fst s, (l, C, (x2, evalE x3 (fst s)) # Flds) # snd s)\\<rbrakk>\n       \\<Longrightarrow> lookup (snd s) l =\n                         Some\n                          (?C105 x1 x2 x3 s t l C Flds,\n                           ?Flds105 x1 x2 x3 s t l C Flds)\n 2. \\<And>x1 x2 x3 s t l C Flds.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call; fst s x1 = RVal (Loc l);\n        lookup (snd s) l = Some (C, Flds);\n        t = (fst s, (l, C, (x2, evalE x3 (fst s)) # Flds) # snd s)\\<rbrakk>\n       \\<Longrightarrow> t =\n                         (fst s,\n                          (l, ?C105 x1 x2 x3 s t l C Flds,\n                           (x2, evalE x3 (fst s)) #\n                           ?Flds105 x1 x2 x3 s t l C Flds) #\n                          snd s)\n 3. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 4. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 6. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply assumption"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x1 x2 x3 s t l C Flds.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call; fst s x1 = RVal (Loc l);\n        lookup (snd s) l = Some (C, Flds);\n        t = (fst s, (l, C, (x2, evalE x3 (fst s)) # Flds) # snd s)\\<rbrakk>\n       \\<Longrightarrow> t =\n                         (fst s,\n                          (l, C, (x2, evalE x3 (fst s)) # Flds) # snd s)\n 2. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 3. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 5. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply assumption"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 2. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 3. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 4. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply clarsimp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> c1 : SSpec c1; G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : SSpec (Comp c1 c2)\n 2. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 3. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 4. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (rule VDMConseq)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> c1 : SSpec c1; G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Comp c1 c2 : ?A111 c1 c2\n 2. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> c1 : SSpec c1; G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s t.\n                            ?A111 c1 c2 s t \\<longrightarrow>\n                            SSpec (Comp c1 c2) s t\n 3. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 5. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (rule VDMComp)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> c1 : SSpec c1; G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> c1 : ?A114 c1 c2\n 2. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> c1 : SSpec c1; G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> c2 : ?B114 c1 c2\n 3. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> c1 : SSpec c1; G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s t.\n                            (\\<exists>r.\n                                ?A114 c1 c2 s r \\<and>\n                                ?B114 c1 c2 r t) \\<longrightarrow>\n                            SSpec (Comp c1 c2) s t\n 4. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 6. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply assumption+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>c1 c2.\n       \\<lbrakk>G \\<rhd> c1 : SSpec c1; G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s t.\n                            (\\<exists>r.\n                                SSpec c1 s r \\<and>\n                                SSpec c2 r t) \\<longrightarrow>\n                            SSpec (Comp c1 c2) s t\n 2. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 3. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 4. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (simp add: SSpec_def Sem_def, clarsimp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>c1 c2 a b aa ba ab bb n na.\n       \\<lbrakk>G \\<rhd> c1 : SSpec c1; G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call;\n         (a, b) , c1 \\<rightarrow>\\<^sub>n  (ab, bb) ;\n         (ab, bb) , c2 \\<rightarrow>\\<^sub>na  (aa, ba) \\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                             (a, b) , Comp c1\n c2 \\<rightarrow>\\<^sub>n  (aa, ba) \n 2. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 3. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 4. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply rule"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>c1 c2 a b aa ba ab bb n na.\n       \\<lbrakk>G \\<rhd> c1 : SSpec c1; G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call;\n         (a, b) , c1 \\<rightarrow>\\<^sub>n  (ab, bb) ;\n         (ab, bb) , c2 \\<rightarrow>\\<^sub>na  (aa, ba) \\<rbrakk>\n       \\<Longrightarrow>  (a, b) , Comp c1\n                                    c2 \\<rightarrow>\\<^sub>?n129 c1 c2 a b\n                      aa ba ab bb n na  (aa, ba) \n 2. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 3. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 4. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (rule SemComp)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>c1 c2 a b aa ba ab bb n na.\n       \\<lbrakk>G \\<rhd> c1 : SSpec c1; G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call;\n         (a, b) , c1 \\<rightarrow>\\<^sub>n  (ab, bb) ;\n         (ab, bb) , c2 \\<rightarrow>\\<^sub>na  (aa, ba) \\<rbrakk>\n       \\<Longrightarrow>  (a, b) , c1 \\<rightarrow>\\<^sub>?n131 c1 c2 a b aa\n                     ba ab bb n na  ?r131 c1 c2 a b aa ba ab bb n na \n 2. \\<And>c1 c2 a b aa ba ab bb n na.\n       \\<lbrakk>G \\<rhd> c1 : SSpec c1; G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call;\n         (a, b) , c1 \\<rightarrow>\\<^sub>n  (ab, bb) ;\n         (ab, bb) , c2 \\<rightarrow>\\<^sub>na  (aa, ba) \\<rbrakk>\n       \\<Longrightarrow>  ?r131 c1 c2 a b aa ba ab bb n\n                           na , c2 \\<rightarrow>\\<^sub>?m131 c1 c2 a b aa ba\n                  ab bb n na  (aa, ba) \n 3. \\<And>c1 c2 a b aa ba ab bb n na.\n       \\<lbrakk>G \\<rhd> c1 : SSpec c1; G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call;\n         (a, b) , c1 \\<rightarrow>\\<^sub>n  (ab, bb) ;\n         (ab, bb) , c2 \\<rightarrow>\\<^sub>na  (aa, ba) \\<rbrakk>\n       \\<Longrightarrow> ?n129 c1 c2 a b aa ba ab bb n na =\n                         max (?n131 c1 c2 a b aa ba ab bb n na)\n                          (?m131 c1 c2 a b aa ba ab bb n na) +\n                         1\n 4. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 6. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply assumption+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>c1 c2 a b aa ba ab bb n na.\n       \\<lbrakk>G \\<rhd> c1 : SSpec c1; G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call;\n         (a, b) , c1 \\<rightarrow>\\<^sub>n  (ab, bb) ;\n         (ab, bb) , c2 \\<rightarrow>\\<^sub>na  (aa, ba) \\<rbrakk>\n       \\<Longrightarrow> ?n129 c1 c2 a b aa ba ab bb n na = max n na + 1\n 2. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 3. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 4. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c : SSpec c;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 2. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 3. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> c : SSpec c; G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : SSpec (While x1 c)\n 2. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 3. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (rule VDMConseq)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> c : SSpec c; G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> While x1 c : ?A138 x1 c\n 2. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> c : SSpec c; G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s t.\n                            ?A138 x1 c s t \\<longrightarrow>\n                            SSpec (While x1 c) s t\n 3. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 4. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (erule VDMWhile)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x1 c.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       \\<forall>s. \\<not> evalB x1 (fst s) \\<longrightarrow> ?A141 x1 c s s\n 2. \\<And>x1 c.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       \\<forall>s r t.\n          evalB x1 (fst s) \\<longrightarrow>\n          SSpec c s r \\<longrightarrow>\n          ?A141 x1 c r t \\<longrightarrow> ?A141 x1 c s t\n 3. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> c : SSpec c; G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s t.\n                            ?A141 x1 c s t \\<and>\n                            \\<not> evalB x1 (fst t) \\<longrightarrow>\n                            SSpec (While x1 c) s t\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 5. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "prefer 3"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x1 c.\n       \\<lbrakk>G \\<rhd> c : SSpec c; G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s t.\n                            ?A141 x1 c s t \\<and>\n                            \\<not> evalB x1 (fst t) \\<longrightarrow>\n                            SSpec (While x1 c) s t\n 2. \\<And>x1 c.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       \\<forall>s. \\<not> evalB x1 (fst s) \\<longrightarrow> ?A141 x1 c s s\n 3. \\<And>x1 c.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       \\<forall>s r t.\n          evalB x1 (fst s) \\<longrightarrow>\n          SSpec c s r \\<longrightarrow>\n          ?A141 x1 c r t \\<longrightarrow> ?A141 x1 c s t\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 5. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (rename_tac BExpr c)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>BExpr c.\n       \\<lbrakk>G \\<rhd> c : SSpec c; G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s t.\n                            ?A141 BExpr c s t \\<and>\n                            \\<not> evalB BExpr (fst t) \\<longrightarrow>\n                            SSpec (While BExpr c) s t\n 2. \\<And>x1 c.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       \\<forall>s. \\<not> evalB x1 (fst s) \\<longrightarrow> ?A141 x1 c s s\n 3. \\<And>x1 c.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       \\<forall>s r t.\n          evalB x1 (fst s) \\<longrightarrow>\n          SSpec c s r \\<longrightarrow>\n          ?A141 x1 c r t \\<longrightarrow> ?A141 x1 c s t\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 5. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (subgoal_tac \"\\<forall>s t. SSpec (While BExpr c) s t \\<and> \\<not> evalB BExpr (fst t) \\<longrightarrow> SSpec (While BExpr c) s t\", assumption)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>BExpr c.\n       \\<lbrakk>G \\<rhd> c : SSpec c; G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s t.\n                            SSpec (While BExpr c) s t \\<and>\n                            \\<not> evalB BExpr (fst t) \\<longrightarrow>\n                            SSpec (While BExpr c) s t\n 2. \\<And>x1 c.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       \\<forall>s.\n          \\<not> evalB x1 (fst s) \\<longrightarrow> SSpec (While x1 c) s s\n 3. \\<And>x1 c.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       \\<forall>s r t.\n          evalB x1 (fst s) \\<longrightarrow>\n          SSpec c s r \\<longrightarrow>\n          SSpec (While x1 c) r t \\<longrightarrow> SSpec (While x1 c) s t\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 5. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1 c.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       \\<forall>s.\n          \\<not> evalB x1 (fst s) \\<longrightarrow> SSpec (While x1 c) s s\n 2. \\<And>x1 c.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       \\<forall>s r t.\n          evalB x1 (fst s) \\<longrightarrow>\n          SSpec c s r \\<longrightarrow>\n          SSpec (While x1 c) r t \\<longrightarrow> SSpec (While x1 c) s t\n 3. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 4. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (simp only: SSpec_def Sem_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1 c.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       \\<forall>s.\n          \\<not> evalB x1 (fst s) \\<longrightarrow>\n          (\\<exists>n.  s , While x1 c \\<rightarrow>\\<^sub>n  s )\n 2. \\<And>x1 c.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       \\<forall>s r t.\n          evalB x1 (fst s) \\<longrightarrow>\n          SSpec c s r \\<longrightarrow>\n          SSpec (While x1 c) r t \\<longrightarrow> SSpec (While x1 c) s t\n 3. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 4. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (rule, rule, rule)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1 c s.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call; \\<not> evalB x1 (fst s)\\<rbrakk>\n       \\<Longrightarrow>  s , While x1\n                               c \\<rightarrow>\\<^sub>?n149 x1 c s  s \n 2. \\<And>x1 c.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       \\<forall>s r t.\n          evalB x1 (fst s) \\<longrightarrow>\n          SSpec c s r \\<longrightarrow>\n          SSpec (While x1 c) r t \\<longrightarrow> SSpec (While x1 c) s t\n 3. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 4. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (erule SemWhileF)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1 c s. G \\<rhd> Call : SSpec Call \\<Longrightarrow> s = s\n 2. \\<And>x1 c.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       \\<forall>s r t.\n          evalB x1 (fst s) \\<longrightarrow>\n          SSpec c s r \\<longrightarrow>\n          SSpec (While x1 c) r t \\<longrightarrow> SSpec (While x1 c) s t\n 3. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 4. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1 c.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       \\<forall>s r t.\n          evalB x1 (fst s) \\<longrightarrow>\n          SSpec c s r \\<longrightarrow>\n          SSpec (While x1 c) r t \\<longrightarrow> SSpec (While x1 c) s t\n 2. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 3. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (simp only: SSpec_def Sem_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1 c.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       \\<forall>s r t.\n          evalB x1 (fst s) \\<longrightarrow>\n          (\\<exists>n.  s , c \\<rightarrow>\\<^sub>n  r ) \\<longrightarrow>\n          (\\<exists>n.\n               r , While x1 c \\<rightarrow>\\<^sub>n  t ) \\<longrightarrow>\n          (\\<exists>n.  s , While x1 c \\<rightarrow>\\<^sub>n  t )\n 2. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 3. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (rule, rule, rule)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1 c s r t.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       evalB x1 (fst s) \\<longrightarrow>\n       (\\<exists>n.  s , c \\<rightarrow>\\<^sub>n  r ) \\<longrightarrow>\n       (\\<exists>n.\n            r , While x1 c \\<rightarrow>\\<^sub>n  t ) \\<longrightarrow>\n       (\\<exists>n.  s , While x1 c \\<rightarrow>\\<^sub>n  t )\n 2. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 3. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (rule, rule, rule)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1 c s r t.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call; evalB x1 (fst s);\n        \\<exists>n.  s , c \\<rightarrow>\\<^sub>n  r ;\n        \\<exists>n.  r , While x1 c \\<rightarrow>\\<^sub>n  t \\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                             s , While x1 c \\<rightarrow>\\<^sub>n  t \n 2. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 3. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (erule exE)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1 c s r t n na.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call; evalB x1 (fst s);\n         s , c \\<rightarrow>\\<^sub>n  r ;\n         r , While x1 c \\<rightarrow>\\<^sub>na  t \\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                             s , While x1 c \\<rightarrow>\\<^sub>n  t \n 2. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 3. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (rule, erule SemWhileT)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x1 c s r t n na.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call;\n         s , c \\<rightarrow>\\<^sub>n  r ;\n         r , While x1 c \\<rightarrow>\\<^sub>na  t \\<rbrakk>\n       \\<Longrightarrow>  s , c \\<rightarrow>\\<^sub>?n171 x1 c s r t n\n               na  ?r171 x1 c s r t n na \n 2. \\<And>x1 c s r t n na.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call;\n         s , c \\<rightarrow>\\<^sub>n  r ;\n         r , While x1 c \\<rightarrow>\\<^sub>na  t \\<rbrakk>\n       \\<Longrightarrow>  ?r171 x1 c s r t n\n                           na , While x1\n                                 c \\<rightarrow>\\<^sub>?m171 x1 c s r t n\n                  na  t \n 3. \\<And>x1 c s r t n na.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call;\n         s , c \\<rightarrow>\\<^sub>n  r ;\n         r , While x1 c \\<rightarrow>\\<^sub>na  t \\<rbrakk>\n       \\<Longrightarrow> ?n169 x1 c s r t n na =\n                         max (?n171 x1 c s r t n na)\n                          (?m171 x1 c s r t n na) +\n                         1\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 5. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply assumption+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1 c s r t n na.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call;\n         s , c \\<rightarrow>\\<^sub>n  r ;\n         r , While x1 c \\<rightarrow>\\<^sub>na  t \\<rbrakk>\n       \\<Longrightarrow> ?n169 x1 c s r t n na = max n na + 1\n 2. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 3. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n                G \\<rhd> c1 : SSpec c1;\n        G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 2. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> c1 : SSpec c1; G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : SSpec (Iff x1 c1 c2)\n 2. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (rule VDMConseq)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> c1 : SSpec c1; G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> Iff x1 c1 c2 : ?A178 x1 c1 c2\n 2. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> c1 : SSpec c1; G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s t.\n                            ?A178 x1 c1 c2 s t \\<longrightarrow>\n                            SSpec (Iff x1 c1 c2) s t\n 3. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (rule VDMIff)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> c1 : SSpec c1; G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> c1 : ?A181 x1 c1 c2\n 2. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> c1 : SSpec c1; G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> c2 : ?B181 x1 c1 c2\n 3. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> c1 : SSpec c1; G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s t.\n                            (evalB x1 (fst s) \\<longrightarrow>\n                             ?A181 x1 c1 c2 s t) \\<and>\n                            (\\<not> evalB x1 (fst s) \\<longrightarrow>\n                             ?B181 x1 c1 c2 s t) \\<longrightarrow>\n                            SSpec (Iff x1 c1 c2) s t\n 4. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply assumption+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> c1 : SSpec c1; G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s t.\n                            (evalB x1 (fst s) \\<longrightarrow>\n                             SSpec c1 s t) \\<and>\n                            (\\<not> evalB x1 (fst s) \\<longrightarrow>\n                             SSpec c2 s t) \\<longrightarrow>\n                            SSpec (Iff x1 c1 c2) s t\n 2. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (simp only: SSpec_def Sem_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 c1 c2.\n       \\<lbrakk>G \\<rhd> c1 : SSpec c1; G \\<rhd> c2 : SSpec c2;\n        G \\<rhd> Call : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s t.\n                            (evalB x1 (fst s) \\<longrightarrow>\n                             (\\<exists>n.\n                                  s , c1 \\<rightarrow>\\<^sub>n  t )) \\<and>\n                            (\\<not> evalB x1 (fst s) \\<longrightarrow>\n                             (\\<exists>n.\n                                  s , c2 \\<rightarrow>\\<^sub>n  t )) \\<longrightarrow>\n                            (\\<exists>n.\n                                 s , Iff x1 c1 c2 \\<rightarrow>\\<^sub>n  t )\n 2. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (erule thin_rl, erule thin_rl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 c1 c2.\n       G \\<rhd> Call : SSpec Call \\<Longrightarrow>\n       \\<forall>s t.\n          (evalB x1 (fst s) \\<longrightarrow>\n           (\\<exists>n.  s , c1 \\<rightarrow>\\<^sub>n  t )) \\<and>\n          (\\<not> evalB x1 (fst s) \\<longrightarrow>\n           (\\<exists>n.\n                s , c2 \\<rightarrow>\\<^sub>n  t )) \\<longrightarrow>\n          (\\<exists>n.  s , Iff x1 c1 c2 \\<rightarrow>\\<^sub>n  t )\n 2. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (rule, rule, rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 c1 c2 s t.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call;\n        (evalB x1 (fst s) \\<longrightarrow>\n         (\\<exists>n.  s , c1 \\<rightarrow>\\<^sub>n  t )) \\<and>\n        (\\<not> evalB x1 (fst s) \\<longrightarrow>\n         (\\<exists>n.  s , c2 \\<rightarrow>\\<^sub>n  t ))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                             s , Iff x1 c1 c2 \\<rightarrow>\\<^sub>n  t \n 2. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (erule conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 c1 c2 s t.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call;\n        evalB x1 (fst s) \\<longrightarrow>\n        (\\<exists>n.  s , c1 \\<rightarrow>\\<^sub>n  t );\n        \\<not> evalB x1 (fst s) \\<longrightarrow>\n        (\\<exists>n.  s , c2 \\<rightarrow>\\<^sub>n  t )\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                             s , Iff x1 c1 c2 \\<rightarrow>\\<^sub>n  t \n 2. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (rename_tac BExpr c1 c2 s t)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>BExpr c1 c2 s t.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call;\n        evalB BExpr (fst s) \\<longrightarrow>\n        (\\<exists>n.  s , c1 \\<rightarrow>\\<^sub>n  t );\n        \\<not> evalB BExpr (fst s) \\<longrightarrow>\n        (\\<exists>n.  s , c2 \\<rightarrow>\\<^sub>n  t )\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                             s , Iff BExpr c1 c2 \\<rightarrow>\\<^sub>n  t \n 2. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (case_tac \"evalB BExpr (fst s)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>BExpr c1 c2 s t.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call;\n        evalB BExpr (fst s) \\<longrightarrow>\n        (\\<exists>n.  s , c1 \\<rightarrow>\\<^sub>n  t );\n        \\<not> evalB BExpr (fst s) \\<longrightarrow>\n        (\\<exists>n.  s , c2 \\<rightarrow>\\<^sub>n  t );\n        evalB BExpr (fst s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                             s , Iff BExpr c1 c2 \\<rightarrow>\\<^sub>n  t \n 2. \\<And>BExpr c1 c2 s t.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call;\n        evalB BExpr (fst s) \\<longrightarrow>\n        (\\<exists>n.  s , c1 \\<rightarrow>\\<^sub>n  t );\n        \\<not> evalB BExpr (fst s) \\<longrightarrow>\n        (\\<exists>n.  s , c2 \\<rightarrow>\\<^sub>n  t );\n        \\<not> evalB BExpr (fst s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                             s , Iff BExpr c1 c2 \\<rightarrow>\\<^sub>n  t \n 3. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (erule impE, assumption)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>BExpr c1 c2 s t.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call;\n        \\<not> evalB BExpr (fst s) \\<longrightarrow>\n        (\\<exists>n.  s , c2 \\<rightarrow>\\<^sub>n  t );\n        evalB BExpr (fst s);\n        \\<exists>n.  s , c1 \\<rightarrow>\\<^sub>n  t \\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                             s , Iff BExpr c1 c2 \\<rightarrow>\\<^sub>n  t \n 2. \\<And>BExpr c1 c2 s t.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call;\n        evalB BExpr (fst s) \\<longrightarrow>\n        (\\<exists>n.  s , c1 \\<rightarrow>\\<^sub>n  t );\n        \\<not> evalB BExpr (fst s) \\<longrightarrow>\n        (\\<exists>n.  s , c2 \\<rightarrow>\\<^sub>n  t );\n        \\<not> evalB BExpr (fst s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                             s , Iff BExpr c1 c2 \\<rightarrow>\\<^sub>n  t \n 3. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (erule exE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>BExpr c1 c2 s t n.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call;\n        \\<not> evalB BExpr (fst s) \\<longrightarrow>\n        (\\<exists>n.  s , c2 \\<rightarrow>\\<^sub>n  t );\n        evalB BExpr (fst s);  s , c1 \\<rightarrow>\\<^sub>n  t \\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                             s , Iff BExpr c1 c2 \\<rightarrow>\\<^sub>n  t \n 2. \\<And>BExpr c1 c2 s t.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call;\n        evalB BExpr (fst s) \\<longrightarrow>\n        (\\<exists>n.  s , c1 \\<rightarrow>\\<^sub>n  t );\n        \\<not> evalB BExpr (fst s) \\<longrightarrow>\n        (\\<exists>n.  s , c2 \\<rightarrow>\\<^sub>n  t );\n        \\<not> evalB BExpr (fst s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                             s , Iff BExpr c1 c2 \\<rightarrow>\\<^sub>n  t \n 3. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (rule, rule SemTrue)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>BExpr c1 c2 s t n.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call;\n        \\<not> evalB BExpr (fst s) \\<longrightarrow>\n        (\\<exists>n.  s , c2 \\<rightarrow>\\<^sub>n  t );\n        evalB BExpr (fst s);  s , c1 \\<rightarrow>\\<^sub>n  t \\<rbrakk>\n       \\<Longrightarrow> evalB BExpr (fst s)\n 2. \\<And>BExpr c1 c2 s t n.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call;\n        \\<not> evalB BExpr (fst s) \\<longrightarrow>\n        (\\<exists>n.  s , c2 \\<rightarrow>\\<^sub>n  t );\n        evalB BExpr (fst s);  s , c1 \\<rightarrow>\\<^sub>n  t \\<rbrakk>\n       \\<Longrightarrow>  s , c1 \\<rightarrow>\\<^sub>?n204 BExpr c1 c2 s t\n                n  t \n 3. \\<And>BExpr c1 c2 s t.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call;\n        evalB BExpr (fst s) \\<longrightarrow>\n        (\\<exists>n.  s , c1 \\<rightarrow>\\<^sub>n  t );\n        \\<not> evalB BExpr (fst s) \\<longrightarrow>\n        (\\<exists>n.  s , c2 \\<rightarrow>\\<^sub>n  t );\n        \\<not> evalB BExpr (fst s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                             s , Iff BExpr c1 c2 \\<rightarrow>\\<^sub>n  t \n 4. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply assumption+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>BExpr c1 c2 s t.\n       \\<lbrakk>G \\<rhd> Call : SSpec Call;\n        evalB BExpr (fst s) \\<longrightarrow>\n        (\\<exists>n.  s , c1 \\<rightarrow>\\<^sub>n  t );\n        \\<not> evalB BExpr (fst s) \\<longrightarrow>\n        (\\<exists>n.  s , c2 \\<rightarrow>\\<^sub>n  t );\n        \\<not> evalB BExpr (fst s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                             s , Iff BExpr c1 c2 \\<rightarrow>\\<^sub>n  t \n 2. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (rotate_tac 2, erule impE, assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>BExpr c1 c2 s t.\n       \\<lbrakk>\\<not> evalB BExpr (fst s); G \\<rhd> Call : SSpec Call;\n        evalB BExpr (fst s) \\<longrightarrow>\n        (\\<exists>n.  s , c1 \\<rightarrow>\\<^sub>n  t );\n        \\<exists>n.  s , c2 \\<rightarrow>\\<^sub>n  t \\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                             s , Iff BExpr c1 c2 \\<rightarrow>\\<^sub>n  t \n 2. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (erule exE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>BExpr c1 c2 s t n.\n       \\<lbrakk>\\<not> evalB BExpr (fst s); G \\<rhd> Call : SSpec Call;\n        evalB BExpr (fst s) \\<longrightarrow>\n        (\\<exists>n.  s , c1 \\<rightarrow>\\<^sub>n  t );\n         s , c2 \\<rightarrow>\\<^sub>n  t \\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                             s , Iff BExpr c1 c2 \\<rightarrow>\\<^sub>n  t \n 2. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply (rule, rule SemFalse)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>BExpr c1 c2 s t n.\n       \\<lbrakk>\\<not> evalB BExpr (fst s); G \\<rhd> Call : SSpec Call;\n        evalB BExpr (fst s) \\<longrightarrow>\n        (\\<exists>n.  s , c1 \\<rightarrow>\\<^sub>n  t );\n         s , c2 \\<rightarrow>\\<^sub>n  t \\<rbrakk>\n       \\<Longrightarrow> \\<not> evalB BExpr (fst s)\n 2. \\<And>BExpr c1 c2 s t n.\n       \\<lbrakk>\\<not> evalB BExpr (fst s); G \\<rhd> Call : SSpec Call;\n        evalB BExpr (fst s) \\<longrightarrow>\n        (\\<exists>n.  s , c1 \\<rightarrow>\\<^sub>n  t );\n         s , c2 \\<rightarrow>\\<^sub>n  t \\<rbrakk>\n       \\<Longrightarrow>  s , c2 \\<rightarrow>\\<^sub>?n214 BExpr c1 c2 s t\n                n  t \n 3. G \\<rhd> Call : SSpec Call \\<Longrightarrow> G \\<rhd> Call : SSpec Call", "apply assumption+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "definition StrongG :: \"Assn set\"\nwhere \"StrongG = {SSpec Call}\""], ["", "lemma StrongG_Body: \"StrongG \\<rhd> body : SSpec Call\""], ["proof (prove)\ngoal (1 subgoal):\n 1. StrongG \\<rhd> body : SSpec Call", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. StrongG \\<rhd> body : SSpec Call", "apply (subgoal_tac \"StrongG \\<rhd> body : SSpec body\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. StrongG \\<rhd> body : SSpec body \\<Longrightarrow>\n    StrongG \\<rhd> body : SSpec Call\n 2. StrongG \\<rhd> body : SSpec body", "apply (erule VDMConseq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>s t. SSpec body s t \\<longrightarrow> SSpec Call s t\n 2. StrongG \\<rhd> body : SSpec body", "apply (simp add: SSpec_def Sem_def, clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b aa ba n.\n        (a, b) , body \\<rightarrow>\\<^sub>n  (aa, ba)  \\<Longrightarrow>\n       \\<exists>n.  (a, b) , Call \\<rightarrow>\\<^sub>n  (aa, ba) \n 2. StrongG \\<rhd> body : SSpec body", "apply (rule, erule SemCall)"], ["proof (prove)\ngoal (1 subgoal):\n 1. StrongG \\<rhd> body : SSpec body", "apply (rule SSpec_derivable)"], ["proof (prove)\ngoal (1 subgoal):\n 1. StrongG \\<rhd> Call : SSpec Call", "apply (rule VDMAx)"], ["proof (prove)\ngoal (1 subgoal):\n 1. SSpec Call \\<in> StrongG", "apply (simp add: StrongG_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma StrongG_verified: \"verified StrongG\""], ["proof (prove)\ngoal (1 subgoal):\n 1. verified StrongG", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. verified StrongG", "apply (simp add: verified_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A. A \\<in> StrongG \\<longrightarrow> StrongG \\<rhd> body : A", "apply (rule allI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A. A \\<in> StrongG \\<longrightarrow> StrongG \\<rhd> body : A", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A. A \\<in> StrongG \\<Longrightarrow> StrongG \\<rhd> body : A", "apply (subgoal_tac \"StrongG \\<rhd> body : SSpec Call\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>A \\<in> StrongG; StrongG \\<rhd> body : SSpec Call\\<rbrakk>\n       \\<Longrightarrow> StrongG \\<rhd> body : A\n 2. \\<And>A.\n       A \\<in> StrongG \\<Longrightarrow> StrongG \\<rhd> body : SSpec Call", "apply (simp add: StrongG_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> StrongG \\<Longrightarrow> StrongG \\<rhd> body : SSpec Call", "apply (rule StrongG_Body)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma SSpec_derivable_empty:\"{} \\<rhd> c : SSpec c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<rhd> c : SSpec c", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<rhd> c : SSpec c", "apply (rule Cut)"], ["proof (prove)\ngoal (2 subgoals):\n 1. {} \\<rhd> Call : ?P\n 2. {?P} \\<rhd> c : SSpec c", "apply (rule Mutrec)"], ["proof (prove)\ngoal (5 subgoals):\n 1. finite ?G3\n 2. card ?G3 = ?n3\n 3. verified ?G3\n 4. ?P \\<in> ?G3\n 5. {?P} \\<rhd> c : SSpec c", "apply (subgoal_tac \"finite StrongG\", assumption)"], ["proof (prove)\ngoal (5 subgoals):\n 1. finite StrongG\n 2. card StrongG = ?n3\n 3. verified StrongG\n 4. ?P \\<in> StrongG\n 5. {?P} \\<rhd> c : SSpec c", "apply (simp add: StrongG_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. card StrongG = ?n3\n 2. verified StrongG\n 3. ?P \\<in> StrongG\n 4. {?P} \\<rhd> c : SSpec c", "apply (simp add: StrongG_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. verified StrongG\n 2. ?P \\<in> StrongG\n 3. {?P} \\<rhd> c : SSpec c", "apply (rule StrongG_verified)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ?P \\<in> StrongG\n 2. {?P} \\<rhd> c : SSpec c", "apply (simp add: StrongG_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {SSpec Call} \\<rhd> c : SSpec c", "apply (rule SSpec_derivable)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {SSpec Call} \\<rhd> Call : SSpec Call", "apply (rule VDMAx)"], ["proof (prove)\ngoal (1 subgoal):\n 1. SSpec Call \\<in> {SSpec Call}", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "theorem VDM_Complete: \"\\<Turnstile> c : A \\<Longrightarrow> {} \\<rhd> c : A\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  \\<Turnstile> c : A  \\<Longrightarrow> {} \\<rhd> c : A", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1.  \\<Turnstile> c : A  \\<Longrightarrow> {} \\<rhd> c : A", "apply (rule VDMConseq)"], ["proof (prove)\ngoal (2 subgoals):\n 1.  \\<Turnstile> c : A  \\<Longrightarrow> {} \\<rhd> c : ?A\n 2.  \\<Turnstile> c : A  \\<Longrightarrow>\n    \\<forall>s t. ?A s t \\<longrightarrow> A s t", "apply (rule SSpec_derivable_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1.  \\<Turnstile> c : A  \\<Longrightarrow>\n    \\<forall>s t. SSpec c s t \\<longrightarrow> A s t", "apply (erule SSpec_strong)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)\n\n(*<*)"], ["", "lemma Ctxt_valid_verified: \"\\<Turnstile> G \\<Longrightarrow> verified G\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  \\<Turnstile> G  \\<Longrightarrow> verified G", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1.  \\<Turnstile> G  \\<Longrightarrow> verified G", "apply (simp add: Ctxt_valid_def verified_def, clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<lbrakk>\\<forall>A.\n                   A \\<in> G \\<longrightarrow>  \\<Turnstile> Call : A ;\n        A \\<in> G\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> body : A", "apply (erule_tac x=A in allE, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<lbrakk>A \\<in> G;  \\<Turnstile> Call : A \\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> body : A", "apply (subgoal_tac \"\\<Turnstile> body : A\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>A \\<in> G;  \\<Turnstile> Call : A ;\n         \\<Turnstile> body : A \\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> body : A\n 2. \\<And>A.\n       \\<lbrakk>A \\<in> G;  \\<Turnstile> Call : A \\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile> body : A", "apply (rotate_tac 1, erule thin_rl, drule VDM_Complete)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>A \\<in> G; {} \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> G \\<rhd> body : A\n 2. \\<And>A.\n       \\<lbrakk>A \\<in> G;  \\<Turnstile> Call : A \\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile> body : A", "apply (erule WEAK)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A. A \\<in> G \\<Longrightarrow> {} \\<subseteq> G\n 2. \\<And>A.\n       \\<lbrakk>A \\<in> G;  \\<Turnstile> Call : A \\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile> body : A", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<lbrakk>A \\<in> G;  \\<Turnstile> Call : A \\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile> body : A", "apply (simp only: VDM_valid_def Sem_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<lbrakk>A \\<in> G;\n        \\<forall>s t.\n           (\\<exists>n.\n                s , Call \\<rightarrow>\\<^sub>n  t ) \\<longrightarrow>\n           A s t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s t.\n                            (\\<exists>n.\n                                 s , body \\<rightarrow>\\<^sub>n  t ) \\<longrightarrow>\n                            A s t", "apply (rule, rule, rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A s t.\n       \\<lbrakk>A \\<in> G;\n        \\<forall>s t.\n           (\\<exists>n.\n                s , Call \\<rightarrow>\\<^sub>n  t ) \\<longrightarrow>\n           A s t;\n        \\<exists>n.  s , body \\<rightarrow>\\<^sub>n  t \\<rbrakk>\n       \\<Longrightarrow> A s t", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A s t n.\n       \\<lbrakk>A \\<in> G;\n        \\<forall>s t.\n           (\\<exists>n.\n                s , Call \\<rightarrow>\\<^sub>n  t ) \\<longrightarrow>\n           A s t;\n         s , body \\<rightarrow>\\<^sub>n  t \\<rbrakk>\n       \\<Longrightarrow> A s t", "apply (erule_tac x=s in allE, erule_tac x=t in allE, erule mp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A s t n.\n       \\<lbrakk>A \\<in> G;  s , body \\<rightarrow>\\<^sub>n  t \\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.  s , Call \\<rightarrow>\\<^sub>n  t", "apply (rule, erule SemCall)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma Ctxt_verified_valid: \"\\<lbrakk>verified G; finite G\\<rbrakk> \\<Longrightarrow> \\<Turnstile> G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>verified G; finite G\\<rbrakk>\n    \\<Longrightarrow>  \\<Turnstile> G", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>verified G; finite G\\<rbrakk>\n    \\<Longrightarrow>  \\<Turnstile> G", "apply (subgoal_tac \"(\\<forall> A . A:G \\<longrightarrow> G \\<rhd> body : A)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>verified G; finite G;\n     \\<forall>A. A \\<in> G \\<longrightarrow> G \\<rhd> body : A\\<rbrakk>\n    \\<Longrightarrow>  \\<Turnstile> G \n 2. \\<lbrakk>verified G; finite G\\<rbrakk>\n    \\<Longrightarrow> \\<forall>A.\n                         A \\<in> G \\<longrightarrow> G \\<rhd> body : A", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>verified G; finite G\\<rbrakk>\n    \\<Longrightarrow> \\<forall>A.\n                         A \\<in> G \\<longrightarrow> G \\<rhd> body : A\n 2. \\<lbrakk>verified G; finite G;\n     \\<forall>A. A \\<in> G \\<longrightarrow> G \\<rhd> body : A\\<rbrakk>\n    \\<Longrightarrow>  \\<Turnstile> G", "apply (simp add: verified_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>verified G; finite G;\n     \\<forall>A. A \\<in> G \\<longrightarrow> G \\<rhd> body : A\\<rbrakk>\n    \\<Longrightarrow>  \\<Turnstile> G", "apply (simp add: Ctxt_valid_def, clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<lbrakk>verified G; finite G;\n        \\<forall>A. A \\<in> G \\<longrightarrow> G \\<rhd> body : A;\n        A \\<in> G\\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile> Call : A", "apply (erule_tac x=A in allE, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<lbrakk>verified G; finite G; A \\<in> G; G \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow>  \\<Turnstile> Call : A", "apply (rule VDM_Sound_emptyCtxt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<lbrakk>verified G; finite G; A \\<in> G; G \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> {} \\<rhd> Call : A", "apply (rule Mutrec, assumption)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>verified G; finite G; A \\<in> G; G \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> card G = ?n8 A\n 2. \\<And>A.\n       \\<lbrakk>verified G; finite G; A \\<in> G; G \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> verified G\n 3. \\<And>A.\n       \\<lbrakk>verified G; finite G; A \\<in> G; G \\<rhd> body : A\\<rbrakk>\n       \\<Longrightarrow> A \\<in> G", "apply (insert card_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>verified G; finite G; A \\<in> G; G \\<rhd> body : A;\n        card \\<equiv> folding.F (\\<lambda>_. Suc) 0\\<rbrakk>\n       \\<Longrightarrow> card G = ?n8 A\n 2. \\<And>A.\n       \\<lbrakk>verified G; finite G; A \\<in> G; G \\<rhd> body : A;\n        card \\<equiv> folding.F (\\<lambda>_. Suc) 0\\<rbrakk>\n       \\<Longrightarrow> verified G\n 3. \\<And>A.\n       \\<lbrakk>verified G; finite G; A \\<in> G; G \\<rhd> body : A;\n        card \\<equiv> folding.F (\\<lambda>_. Suc) 0\\<rbrakk>\n       \\<Longrightarrow> A \\<in> G", "apply fast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>verified G; finite G; A \\<in> G; G \\<rhd> body : A;\n        card \\<equiv> folding.F (\\<lambda>_. Suc) 0\\<rbrakk>\n       \\<Longrightarrow> verified G\n 2. \\<And>A.\n       \\<lbrakk>verified G; finite G; A \\<in> G; G \\<rhd> body : A;\n        card \\<equiv> folding.F (\\<lambda>_. Suc) 0\\<rbrakk>\n       \\<Longrightarrow> A \\<in> G", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<lbrakk>verified G; finite G; A \\<in> G; G \\<rhd> body : A;\n        card \\<equiv> folding.F (\\<lambda>_. Suc) 0\\<rbrakk>\n       \\<Longrightarrow> A \\<in> G", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "text\\<open>End of theory VDM_Obj\\<close>"], ["", "end"]]}