{"file_name": "/home/qj213/afp-2021-10-22/thys/SIFPL/PBIJ.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/SIFPL", "problem_names": ["lemma Pbij_inverseI:\"(l1,l2):\\<beta> \\<Longrightarrow> (l2,l1):Pbij_inverse \\<beta>\"", "lemma Pbij_inverseD:\"(l1,l2):Pbij_inverse \\<beta> \\<Longrightarrow> (l2,l1):\\<beta>\"", "lemma Pbij_composeI: \"\\<lbrakk>(l1, l2) \\<in> \\<beta>; (l2, l3) \\<in> \\<gamma>\\<rbrakk> \\<Longrightarrow> (l1, l3) \\<in> Pbij_compose \\<beta> \\<gamma>\"", "lemma Pbij_composeD: \"(l1, l3) \\<in> Pbij_compose \\<beta> \\<gamma> \\<Longrightarrow> \\<exists> l2 . (l1, l2) \\<in> \\<beta> \\<and> (l2, l3) \\<in> \\<gamma>\"", "lemma Pbij_insert:\n  \"\\<lbrakk>\\<beta> \\<in> Pbij;l \\<notin> Pbij_Rng \\<beta>; ll \\<notin> Pbij_Dom \\<beta>\\<rbrakk> \n  \\<Longrightarrow> insert (ll, l) \\<beta> \\<in> Pbij\"", "lemma Pbij_injective:\n  \"\\<beta>:Pbij \\<Longrightarrow> (\\<forall> l l1 l2 . (l1,l):\\<beta> \\<longrightarrow> (l2,l):\\<beta> \\<longrightarrow> l1=l2)\"", "lemma Pbij_inverse_DomRng[rule_format]:\n  \"\\<gamma> = Pbij_inverse \\<beta> \\<Longrightarrow> \n   (Pbij_Dom \\<beta> = Pbij_Rng \\<gamma> \\<and> Pbij_Dom \\<gamma> = Pbij_Rng \\<beta>)\"", "lemma Pbij_inverse_Dom: \"Pbij_Dom \\<beta> = Pbij_Rng (Pbij_inverse \\<beta>)\"", "lemma Pbij_inverse_Rng: \"Pbij_Dom (Pbij_inverse \\<beta>) = Pbij_Rng \\<beta>\"", "lemma Pbij_inverse_Pbij: \"\\<beta>:Pbij \\<Longrightarrow> (Pbij_inverse \\<beta>) : Pbij\"", "lemma Pbij_inverse_Inverse[rule_format]:\n  \"\\<gamma> = Pbij_inverse \\<beta> \\<Longrightarrow> (\\<forall> l ll . ((l,ll):\\<beta>) = ((ll,l):\\<gamma>))\"", "lemma Pbij_compose_Dom:\n  \"Pbij_Dom (Pbij_compose \\<beta> \\<gamma>) \\<subseteq> Pbij_Dom \\<beta>\"", "lemma Pbij_compose_Rng:\n  \"Pbij_Rng (Pbij_compose \\<beta> \\<gamma>) \\<subseteq> Pbij_Rng \\<gamma>\"", "lemma Pbij_compose_Pbij: \n  \"\\<lbrakk>\\<beta> : Pbij; \\<gamma> : Pbij\\<rbrakk> \\<Longrightarrow> Pbij_compose \\<beta> \\<gamma> : Pbij\"", "lemma Pbij_extends_inverse: \n \"Pbij_extends \\<gamma> (Pbij_inverse \\<beta>) = Pbij_extends (Pbij_inverse \\<gamma>) \\<beta>\"", "lemma Pbij_extends_reflexive:\"Pbij_extends \\<beta> \\<beta>\"", "lemma Pbij_extends_transitive:\n\"\\<lbrakk>Pbij_extends \\<beta> \\<gamma>; Pbij_extends \\<gamma> \\<delta>\\<rbrakk> \\<Longrightarrow> Pbij_extends \\<beta> \\<delta>\"", "lemma Pbij_inverse_extends_twice_Aux:\n\"\\<lbrakk> \\<delta> = Pbij_inverse \\<epsilon>; Pbij_extends \\<epsilon> \\<gamma>; \\<gamma> = Pbij_inverse  \\<beta>\\<rbrakk>\n \\<Longrightarrow> Pbij_extends \\<delta> \\<beta>\"", "lemma Pbij_inverse_extends_twice:\n\" Pbij_extends (Pbij_inverse (Pbij_inverse \\<beta>)) \\<beta>\"", "lemma mkId1: \"(mkId h):Pbij\"", "lemma mkId2: \"Pbij_Dom (mkId h) = Dom h\"", "lemma mkId2b: \"Pbij_Rng (mkId h) = Dom h\"", "lemma mkId4: \"l:Dom h \\<Longrightarrow> (l,l):(mkId h)\"", "lemma mkId4b: \"(l,ll):(mkId h) \\<Longrightarrow> l:Dom h \\<and> l = ll\""], "translations": [["", "lemma Pbij_inverseI:\"(l1,l2):\\<beta> \\<Longrightarrow> (l2,l1):Pbij_inverse \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (l1, l2) \\<in> \\<beta> \\<Longrightarrow>\n    (l2, l1) \\<in> Pbij_inverse \\<beta>", "by (simp add: Pbij_inverse_def)"], ["", "lemma Pbij_inverseD:\"(l1,l2):Pbij_inverse \\<beta> \\<Longrightarrow> (l2,l1):\\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (l1, l2) \\<in> Pbij_inverse \\<beta> \\<Longrightarrow>\n    (l2, l1) \\<in> \\<beta>", "by (simp add: Pbij_inverse_def)"], ["", "(*>*)"], ["", "definition Pbij_compose::\"PBij \\<Rightarrow> PBij \\<Rightarrow> PBij\"\nwhere \"Pbij_compose \\<beta> \\<gamma> = {(l,ll) . \\<exists> l1 . (l,l1):\\<beta> \\<and> (l1,ll):\\<gamma>}\""], ["", "(*<*)"], ["", "lemma Pbij_composeI: \"\\<lbrakk>(l1, l2) \\<in> \\<beta>; (l2, l3) \\<in> \\<gamma>\\<rbrakk> \\<Longrightarrow> (l1, l3) \\<in> Pbij_compose \\<beta> \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(l1, l2) \\<in> \\<beta>; (l2, l3) \\<in> \\<gamma>\\<rbrakk>\n    \\<Longrightarrow> (l1, l3) \\<in> Pbij_compose \\<beta> \\<gamma>", "by (simp add: Pbij_compose_def, rule_tac x=l2 in exI, simp)"], ["", "lemma Pbij_composeD: \"(l1, l3) \\<in> Pbij_compose \\<beta> \\<gamma> \\<Longrightarrow> \\<exists> l2 . (l1, l2) \\<in> \\<beta> \\<and> (l2, l3) \\<in> \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (l1, l3) \\<in> Pbij_compose \\<beta> \\<gamma> \\<Longrightarrow>\n    \\<exists>l2. (l1, l2) \\<in> \\<beta> \\<and> (l2, l3) \\<in> \\<gamma>", "by (simp add: Pbij_compose_def)"], ["", "(*>*)"], ["", "definition Pbij_extends ::\"PBij \\<Rightarrow> PBij \\<Rightarrow> bool\"\nwhere \"Pbij_extends \\<gamma> \\<beta> = (\\<beta> \\<subseteq> \\<gamma>)\""], ["", "text\\<open>These definitions satisfy the following properties.\\<close>"], ["", "lemma Pbij_insert:\n  \"\\<lbrakk>\\<beta> \\<in> Pbij;l \\<notin> Pbij_Rng \\<beta>; ll \\<notin> Pbij_Dom \\<beta>\\<rbrakk> \n  \\<Longrightarrow> insert (ll, l) \\<beta> \\<in> Pbij\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<beta> \\<in> Pbij; l \\<notin> Pbij_Rng \\<beta>;\n     ll \\<notin> Pbij_Dom \\<beta>\\<rbrakk>\n    \\<Longrightarrow> insert (ll, l) \\<beta> \\<in> Pbij", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<beta> \\<in> Pbij; l \\<notin> Pbij_Rng \\<beta>;\n     ll \\<notin> Pbij_Dom \\<beta>\\<rbrakk>\n    \\<Longrightarrow> insert (ll, l) \\<beta> \\<in> Pbij", "apply (simp add: Pbij_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>l1 l2.\n                (l1, l2) \\<in> \\<beta> \\<longrightarrow>\n                (\\<forall>l3 l4.\n                    (l3, l4) \\<in> \\<beta> \\<longrightarrow>\n                    (l1 = l3) = (l2 = l4));\n     l \\<notin> Pbij_Rng \\<beta>; ll \\<notin> Pbij_Dom \\<beta>\\<rbrakk>\n    \\<Longrightarrow> \\<forall>l1 l2.\n                         (l1 = ll \\<and> l2 = l \\<longrightarrow>\n                          (\\<forall>l3 l4.\n                              (l3, l4) \\<in> \\<beta> \\<longrightarrow>\n                              (ll = l3) = (l = l4))) \\<and>\n                         ((l1, l2) \\<in> \\<beta> \\<longrightarrow>\n                          (l1 = ll) = (l2 = l))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l1 l2.\n       \\<lbrakk>\\<forall>l1 l2.\n                   (l1, l2) \\<in> \\<beta> \\<longrightarrow>\n                   (\\<forall>l3 l4.\n                       (l3, l4) \\<in> \\<beta> \\<longrightarrow>\n                       (l1 = l3) = (l2 = l4));\n        l \\<notin> Pbij_Rng \\<beta>; ll \\<notin> Pbij_Dom \\<beta>\\<rbrakk>\n       \\<Longrightarrow> (l1 = ll \\<and> l2 = l \\<longrightarrow>\n                          (\\<forall>l3 l4.\n                              (l3, l4) \\<in> \\<beta> \\<longrightarrow>\n                              (ll = l3) = (l = l4))) \\<and>\n                         ((l1, l2) \\<in> \\<beta> \\<longrightarrow>\n                          (l1 = ll) = (l2 = l))", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l1 l2.\n       \\<lbrakk>\\<forall>l1 l2.\n                   (l1, l2) \\<in> \\<beta> \\<longrightarrow>\n                   (\\<forall>l3 l4.\n                       (l3, l4) \\<in> \\<beta> \\<longrightarrow>\n                       (l1 = l3) = (l2 = l4));\n        l \\<notin> Pbij_Rng \\<beta>; ll \\<notin> Pbij_Dom \\<beta>\\<rbrakk>\n       \\<Longrightarrow> l1 = ll \\<and> l2 = l \\<longrightarrow>\n                         (\\<forall>l3 l4.\n                             (l3, l4) \\<in> \\<beta> \\<longrightarrow>\n                             (ll = l3) = (l = l4))\n 2. \\<And>l1 l2.\n       \\<lbrakk>\\<forall>l1 l2.\n                   (l1, l2) \\<in> \\<beta> \\<longrightarrow>\n                   (\\<forall>l3 l4.\n                       (l3, l4) \\<in> \\<beta> \\<longrightarrow>\n                       (l1 = l3) = (l2 = l4));\n        l \\<notin> Pbij_Rng \\<beta>; ll \\<notin> Pbij_Dom \\<beta>\\<rbrakk>\n       \\<Longrightarrow> (l1, l2) \\<in> \\<beta> \\<longrightarrow>\n                         (l1 = ll) = (l2 = l)", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l3 l4.\n       \\<lbrakk>\\<forall>l1 l2.\n                   (l1, l2) \\<in> \\<beta> \\<longrightarrow>\n                   (\\<forall>l3 l4.\n                       (l3, l4) \\<in> \\<beta> \\<longrightarrow>\n                       (l1 = l3) = (l2 = l4));\n        l \\<notin> Pbij_Rng \\<beta>; ll \\<notin> Pbij_Dom \\<beta>;\n        (l3, l4) \\<in> \\<beta>\\<rbrakk>\n       \\<Longrightarrow> (ll = l3) = (l = l4)\n 2. \\<And>l1 l2.\n       \\<lbrakk>\\<forall>l1 l2.\n                   (l1, l2) \\<in> \\<beta> \\<longrightarrow>\n                   (\\<forall>l3 l4.\n                       (l3, l4) \\<in> \\<beta> \\<longrightarrow>\n                       (l1 = l3) = (l2 = l4));\n        l \\<notin> Pbij_Rng \\<beta>; ll \\<notin> Pbij_Dom \\<beta>\\<rbrakk>\n       \\<Longrightarrow> (l1, l2) \\<in> \\<beta> \\<longrightarrow>\n                         (l1 = ll) = (l2 = l)", "apply (simp add: Pbij_Dom_def Pbij_Rng_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l3 l4.\n       \\<lbrakk>\\<forall>l1 l2.\n                   (l1, l2) \\<in> \\<beta> \\<longrightarrow>\n                   (\\<forall>l3 l4.\n                       (l3, l4) \\<in> \\<beta> \\<longrightarrow>\n                       (l1 = l3) = (l2 = l4));\n        \\<forall>la. (la, l) \\<notin> \\<beta>;\n        \\<forall>lla. (ll, lla) \\<notin> \\<beta>;\n        (l3, l4) \\<in> \\<beta>\\<rbrakk>\n       \\<Longrightarrow> (ll = l3) = (l = l4)\n 2. \\<And>l1 l2.\n       \\<lbrakk>\\<forall>l1 l2.\n                   (l1, l2) \\<in> \\<beta> \\<longrightarrow>\n                   (\\<forall>l3 l4.\n                       (l3, l4) \\<in> \\<beta> \\<longrightarrow>\n                       (l1 = l3) = (l2 = l4));\n        l \\<notin> Pbij_Rng \\<beta>; ll \\<notin> Pbij_Dom \\<beta>\\<rbrakk>\n       \\<Longrightarrow> (l1, l2) \\<in> \\<beta> \\<longrightarrow>\n                         (l1 = ll) = (l2 = l)", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l1 l2.\n       \\<lbrakk>\\<forall>l1 l2.\n                   (l1, l2) \\<in> \\<beta> \\<longrightarrow>\n                   (\\<forall>l3 l4.\n                       (l3, l4) \\<in> \\<beta> \\<longrightarrow>\n                       (l1 = l3) = (l2 = l4));\n        l \\<notin> Pbij_Rng \\<beta>; ll \\<notin> Pbij_Dom \\<beta>\\<rbrakk>\n       \\<Longrightarrow> (l1, l2) \\<in> \\<beta> \\<longrightarrow>\n                         (l1 = ll) = (l2 = l)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l1 l2.\n       \\<lbrakk>\\<forall>l1 l2.\n                   (l1, l2) \\<in> \\<beta> \\<longrightarrow>\n                   (\\<forall>l3 l4.\n                       (l3, l4) \\<in> \\<beta> \\<longrightarrow>\n                       (l1 = l3) = (l2 = l4));\n        l \\<notin> Pbij_Rng \\<beta>; ll \\<notin> Pbij_Dom \\<beta>;\n        (l1, l2) \\<in> \\<beta>\\<rbrakk>\n       \\<Longrightarrow> (l1 = ll) = (l2 = l)", "apply (simp add: Pbij_Dom_def Pbij_Rng_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l1 l2.\n       \\<lbrakk>\\<forall>l1 l2.\n                   (l1, l2) \\<in> \\<beta> \\<longrightarrow>\n                   (\\<forall>l3 l4.\n                       (l3, l4) \\<in> \\<beta> \\<longrightarrow>\n                       (l1 = l3) = (l2 = l4));\n        \\<forall>la. (la, l) \\<notin> \\<beta>;\n        \\<forall>lla. (ll, lla) \\<notin> \\<beta>;\n        (l1, l2) \\<in> \\<beta>\\<rbrakk>\n       \\<Longrightarrow> (l1 = ll) = (l2 = l)", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma Pbij_injective:\n  \"\\<beta>:Pbij \\<Longrightarrow> (\\<forall> l l1 l2 . (l1,l):\\<beta> \\<longrightarrow> (l2,l):\\<beta> \\<longrightarrow> l1=l2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<beta> \\<in> Pbij \\<Longrightarrow>\n    \\<forall>l l1 l2.\n       (l1, l) \\<in> \\<beta> \\<longrightarrow>\n       (l2, l) \\<in> \\<beta> \\<longrightarrow> l1 = l2", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<beta> \\<in> Pbij \\<Longrightarrow>\n    \\<forall>l l1 l2.\n       (l1, l) \\<in> \\<beta> \\<longrightarrow>\n       (l2, l) \\<in> \\<beta> \\<longrightarrow> l1 = l2", "by (simp add: Pbij_def)"], ["", "(*>*)"], ["", "lemma Pbij_inverse_DomRng[rule_format]:\n  \"\\<gamma> = Pbij_inverse \\<beta> \\<Longrightarrow> \n   (Pbij_Dom \\<beta> = Pbij_Rng \\<gamma> \\<and> Pbij_Dom \\<gamma> = Pbij_Rng \\<beta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma> = Pbij_inverse \\<beta> \\<Longrightarrow>\n    Pbij_Dom \\<beta> = Pbij_Rng \\<gamma> \\<and>\n    Pbij_Dom \\<gamma> = Pbij_Rng \\<beta>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma> = Pbij_inverse \\<beta> \\<Longrightarrow>\n    Pbij_Dom \\<beta> = Pbij_Rng \\<gamma> \\<and>\n    Pbij_Dom \\<gamma> = Pbij_Rng \\<beta>", "by (simp add: Pbij_inverse_def Pbij_Dom_def Pbij_Rng_def)"], ["", "(*>*)"], ["", "lemma Pbij_inverse_Dom: \"Pbij_Dom \\<beta> = Pbij_Rng (Pbij_inverse \\<beta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pbij_Dom \\<beta> = Pbij_Rng (Pbij_inverse \\<beta>)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Pbij_Dom \\<beta> = Pbij_Rng (Pbij_inverse \\<beta>)", "by (simp add: Pbij_inverse_def Pbij_Dom_def Pbij_Rng_def)"], ["", "(*>*)"], ["", "lemma Pbij_inverse_Rng: \"Pbij_Dom (Pbij_inverse \\<beta>) = Pbij_Rng \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pbij_Dom (Pbij_inverse \\<beta>) = Pbij_Rng \\<beta>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Pbij_Dom (Pbij_inverse \\<beta>) = Pbij_Rng \\<beta>", "by (simp add: Pbij_inverse_def Pbij_Dom_def Pbij_Rng_def)"], ["", "(*>*)"], ["", "lemma Pbij_inverse_Pbij: \"\\<beta>:Pbij \\<Longrightarrow> (Pbij_inverse \\<beta>) : Pbij\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<beta> \\<in> Pbij \\<Longrightarrow> Pbij_inverse \\<beta> \\<in> Pbij", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<beta> \\<in> Pbij \\<Longrightarrow> Pbij_inverse \\<beta> \\<in> Pbij", "by (simp add: Pbij_def Pbij_inverse_def)"], ["", "(*>*)"], ["", "lemma Pbij_inverse_Inverse[rule_format]:\n  \"\\<gamma> = Pbij_inverse \\<beta> \\<Longrightarrow> (\\<forall> l ll . ((l,ll):\\<beta>) = ((ll,l):\\<gamma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma> = Pbij_inverse \\<beta> \\<Longrightarrow>\n    \\<forall>l ll. ((l, ll) \\<in> \\<beta>) = ((ll, l) \\<in> \\<gamma>)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma> = Pbij_inverse \\<beta> \\<Longrightarrow>\n    \\<forall>l ll. ((l, ll) \\<in> \\<beta>) = ((ll, l) \\<in> \\<gamma>)", "by (simp add: Pbij_inverse_def)"], ["", "(*>*)"], ["", "lemma Pbij_compose_Dom:\n  \"Pbij_Dom (Pbij_compose \\<beta> \\<gamma>) \\<subseteq> Pbij_Dom \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pbij_Dom (Pbij_compose \\<beta> \\<gamma>) \\<subseteq> Pbij_Dom \\<beta>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Pbij_Dom (Pbij_compose \\<beta> \\<gamma>) \\<subseteq> Pbij_Dom \\<beta>", "by (simp add: Pbij_compose_def Pbij_Dom_def, fast)"], ["", "(*>*)"], ["", "lemma Pbij_compose_Rng:\n  \"Pbij_Rng (Pbij_compose \\<beta> \\<gamma>) \\<subseteq> Pbij_Rng \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pbij_Rng (Pbij_compose \\<beta> \\<gamma>) \\<subseteq> Pbij_Rng \\<gamma>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Pbij_Rng (Pbij_compose \\<beta> \\<gamma>) \\<subseteq> Pbij_Rng \\<gamma>", "by (simp add: Pbij_compose_def Pbij_Rng_def, fast)"], ["", "(*>*)"], ["", "lemma Pbij_compose_Pbij: \n  \"\\<lbrakk>\\<beta> : Pbij; \\<gamma> : Pbij\\<rbrakk> \\<Longrightarrow> Pbij_compose \\<beta> \\<gamma> : Pbij\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<beta> \\<in> Pbij; \\<gamma> \\<in> Pbij\\<rbrakk>\n    \\<Longrightarrow> Pbij_compose \\<beta> \\<gamma> \\<in> Pbij", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<beta> \\<in> Pbij; \\<gamma> \\<in> Pbij\\<rbrakk>\n    \\<Longrightarrow> Pbij_compose \\<beta> \\<gamma> \\<in> Pbij", "by (simp add: Pbij_compose_def Pbij_def, clarsimp)"], ["", "(*>*)"], ["", "lemma Pbij_extends_inverse: \n \"Pbij_extends \\<gamma> (Pbij_inverse \\<beta>) = Pbij_extends (Pbij_inverse \\<gamma>) \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pbij_extends \\<gamma> (Pbij_inverse \\<beta>) =\n    Pbij_extends (Pbij_inverse \\<gamma>) \\<beta>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Pbij_extends \\<gamma> (Pbij_inverse \\<beta>) =\n    Pbij_extends (Pbij_inverse \\<gamma>) \\<beta>", "by (simp add: Pbij_extends_def Pbij_inverse_def, fast)"], ["", "(*>*)"], ["", "lemma Pbij_extends_reflexive:\"Pbij_extends \\<beta> \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pbij_extends \\<beta> \\<beta>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Pbij_extends \\<beta> \\<beta>", "by (simp add: Pbij_extends_def)"], ["", "(*>*)"], ["", "lemma Pbij_extends_transitive:\n\"\\<lbrakk>Pbij_extends \\<beta> \\<gamma>; Pbij_extends \\<gamma> \\<delta>\\<rbrakk> \\<Longrightarrow> Pbij_extends \\<beta> \\<delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Pbij_extends \\<beta> \\<gamma>;\n     Pbij_extends \\<gamma> \\<delta>\\<rbrakk>\n    \\<Longrightarrow> Pbij_extends \\<beta> \\<delta>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Pbij_extends \\<beta> \\<gamma>;\n     Pbij_extends \\<gamma> \\<delta>\\<rbrakk>\n    \\<Longrightarrow> Pbij_extends \\<beta> \\<delta>", "by (simp add: Pbij_extends_def)"], ["", "(*>*)\n\n(*<*)"], ["", "lemma Pbij_inverse_extends_twice_Aux:\n\"\\<lbrakk> \\<delta> = Pbij_inverse \\<epsilon>; Pbij_extends \\<epsilon> \\<gamma>; \\<gamma> = Pbij_inverse  \\<beta>\\<rbrakk>\n \\<Longrightarrow> Pbij_extends \\<delta> \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<delta> = Pbij_inverse \\<epsilon>;\n     Pbij_extends \\<epsilon> \\<gamma>;\n     \\<gamma> = Pbij_inverse \\<beta>\\<rbrakk>\n    \\<Longrightarrow> Pbij_extends \\<delta> \\<beta>", "by (simp add: Pbij_extends_def Pbij_inverse_def, fastforce)"], ["", "(*>*)"], ["", "lemma Pbij_inverse_extends_twice:\n\" Pbij_extends (Pbij_inverse (Pbij_inverse \\<beta>)) \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pbij_extends (Pbij_inverse (Pbij_inverse \\<beta>)) \\<beta>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Pbij_extends (Pbij_inverse (Pbij_inverse \\<beta>)) \\<beta>", "by (simp add: Pbij_extends_def Pbij_inverse_def)"], ["", "(*>*)"], ["", "text\\<open>The identity bijection on a heap associates each element of the\nheap's domain with itself.\\<close>"], ["", "definition mkId::\"Heap \\<Rightarrow> (Location \\<times> Location) set\"\nwhere \"mkId h = {(l1,l2) . l1 = l2 \\<and> l1 : Dom h}\""], ["", "lemma mkId1: \"(mkId h):Pbij\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mkId h \\<in> Pbij", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. mkId h \\<in> Pbij", "by (simp add: mkId_def Pbij_def)"], ["", "(*>*)"], ["", "lemma mkId2: \"Pbij_Dom (mkId h) = Dom h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pbij_Dom (mkId h) = Dom h", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Pbij_Dom (mkId h) = Dom h", "by (simp add: Dom_def Pbij_Dom_def mkId_def)"], ["", "(*>*)"], ["", "lemma mkId2b: \"Pbij_Rng (mkId h) = Dom h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pbij_Rng (mkId h) = Dom h", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Pbij_Rng (mkId h) = Dom h", "by (simp add: Dom_def Pbij_Rng_def mkId_def)"], ["", "(*>*)"], ["", "lemma mkId4: \"l:Dom h \\<Longrightarrow> (l,l):(mkId h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<in> Dom h \\<Longrightarrow> (l, l) \\<in> mkId h", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<in> Dom h \\<Longrightarrow> (l, l) \\<in> mkId h", "by (simp add: mkId_def)"], ["", "(*>*)"], ["", "lemma mkId4b: \"(l,ll):(mkId h) \\<Longrightarrow> l:Dom h \\<and> l = ll\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (l, ll) \\<in> mkId h \\<Longrightarrow> l \\<in> Dom h \\<and> l = ll", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (l, ll) \\<in> mkId h \\<Longrightarrow> l \\<in> Dom h \\<and> l = ll", "by (simp add: mkId_def, clarsimp)"], ["", "(*>*)"], ["", "text\\<open>End of theory PBIJ\\<close>"], ["", "end"]]}