{"file_name": "/home/qj213/afp-2021-10-22/thys/Green/Green.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Green", "problem_names": ["lemma frontier_Un_subset_Un_frontier:\n     \"frontier (s \\<union> t) \\<subseteq> (frontier s) \\<union> (frontier t)\"", "lemma partial_vector_derivative_works:\n  assumes \"partially_vector_differentiable F base_vec a\"\n  shows \"has_partial_vector_derivative F base_vec (partial_vector_derivative F base_vec a) a\"", "lemma fundamental_theorem_of_calculus_partial_vector:\n  fixes a b:: \"real\" and\n    F:: \"('a::euclidean_space \\<Rightarrow> 'b::euclidean_space)\" and\n    i:: \"'a\" and\n    j:: \"'b\" and\n    F_j_i:: \"('a::euclidean_space \\<Rightarrow> real)\"\n  assumes a_leq_b: \"a \\<le> b\" and\n    Base_vecs: \"i \\<in> Basis\" \"j \\<in> Basis\" and\n    no_i_component: \"c \\<bullet> i = 0 \" and\n    has_partial_deriv: \"\\<forall>p \\<in> D. has_partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> j) i (F_j_i p) p\" and\n    domain_subset_of_D: \"{x *\\<^sub>R i + c |x. a \\<le> x \\<and> x \\<le> b} \\<subseteq> D\"\n  shows \"((\\<lambda>x. F_j_i( x *\\<^sub>R i + c)) has_integral\n          F(b *\\<^sub>R i + c) \\<bullet> j - F(a *\\<^sub>R i + c) \\<bullet> j) (cbox a b)\"", "lemma fundamental_theorem_of_calculus_partial_vector_gen:\n  fixes k1 k2:: \"real\" and\n    F:: \"('a::euclidean_space \\<Rightarrow> 'b::euclidean_space)\" and\n    i:: \"'a\" and\n    F_i:: \"('a::euclidean_space \\<Rightarrow> 'b)\"\n  assumes a_leq_b: \"k1 \\<le> k2\" and\n    unit_len: \"i \\<bullet> i = 1\" and\n    no_i_component: \"c \\<bullet> i = 0 \" and\n    has_partial_deriv: \"\\<forall>p \\<in> D. has_partial_vector_derivative F i (F_i p) p\" and\n    domain_subset_of_D: \"{v. \\<exists>x. k1 \\<le> x \\<and> x \\<le> k2 \\<and> v = x *\\<^sub>R i + c} \\<subseteq> D\"\n  shows \"( (\\<lambda>x. F_i( x *\\<^sub>R i + c)) has_integral\n                                        F(k2 *\\<^sub>R i + c) - F(k1 *\\<^sub>R i + c)) (cbox k1 k2)\"", "lemma add_scale_img:\n  assumes \"a < b\" shows \"(\\<lambda>x::real. a + (b - a) * x) ` {0 .. 1} = {a .. b}\"", "lemma add_scale_img':\n  assumes \"a \\<le> b\"\n  shows \"(\\<lambda>x::real. a + (b - a) * x) ` {0 .. 1} = {a .. b}\"", "lemma analytically_valid_imp_part_deriv_integrable_on:\n  assumes \"analytically_valid (s::(real*real) set) (f::(real*real)\\<Rightarrow> real) i\"\n  shows \"(partial_vector_derivative f i) integrable_on s\"", "lemma typeII_twoCubeImg:\n  assumes \"typeII_twoCube twoC\"\n  shows \"\\<exists>a b g1 g2. a < b \\<and> (\\<forall>x \\<in> {a .. b}. g2 x \\<le> g1 x) \\<and>\n                      cubeImage twoC = {(y,x). x \\<in> {a..b} \\<and> y \\<in> {g2 x .. g1 x}}\n                      \\<and> twoC = (\\<lambda>(y, x). ((1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b), (1 - x) * a + x * b))\n                      \\<and> g1 piecewise_C1_differentiable_on {a .. b} \\<and> g2 piecewise_C1_differentiable_on {a .. b} \"", "lemma sum_zero_set:\n  assumes \"\\<forall>x \\<in> s. f x = 0\" \"finite s\" \"finite t\"\n  shows \"sum f (s \\<union> t) = sum f t\"", "lemma two_chain_vertical_boundary_is_boundary_chain:\n  shows \"boundary_chain (two_chain_vertical_boundary twoChain)\"", "lemma two_chain_horizontal_boundary_is_boundary_chain:\n  shows \"boundary_chain (two_chain_horizontal_boundary twoChain)\"", "lemma typeI_twoCubeImg:\n  assumes \"typeI_twoCube twoC\"\n  shows \"\\<exists>a b g1 g2. a < b \\<and> (\\<forall>x \\<in> {a .. b}. g2 x \\<le> g1 x) \\<and>\n                      cubeImage twoC = {(x,y). x \\<in> {a..b} \\<and> y \\<in> {g2 x .. g1 x}} \\<and>\n                      twoC = (\\<lambda>(x, y). ((1 - x) * a + x * b, (1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b))) \\<and>\n                      g1 piecewise_C1_differentiable_on {a .. b} \\<and> g2 piecewise_C1_differentiable_on {a .. b} \"", "lemma typeI_cube_explicit_spec:\n  assumes \"typeI_twoCube twoC\"\n  shows \"\\<exists>a b g1 g2. a < b \\<and> (\\<forall>x \\<in> {a .. b}. g2 x \\<le> g1 x) \\<and>\n                      cubeImage twoC = {(x,y). x \\<in> {a..b} \\<and> y \\<in> {g2 x .. g1 x}}\n                      \\<and> twoC = (\\<lambda>(x, y). ((1 - x) * a + x * b, (1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b)))\n                      \\<and> g1 piecewise_C1_differentiable_on {a .. b} \\<and> g2 piecewise_C1_differentiable_on {a .. b}\n                      \\<and> (\\<lambda>x. twoC(x, 0)) = (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x)))\n                      \\<and> (\\<lambda>y. twoC(1, y)) = (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b)))\n                      \\<and> (\\<lambda>x. twoC(x, 1)) = (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x)))\n                      \\<and> (\\<lambda>y. twoC(0, y)) = (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))\"", "lemma typeI_twoCube_smooth_edges:\n  assumes \"typeI_twoCube twoC\"\n    \"(k,\\<gamma>) \\<in> boundary twoC\"\n  shows \"\\<gamma> piecewise_C1_differentiable_on {0..1}\"", "lemma two_chain_integral_eq_integral_divisable:\n  assumes f_integrable: \"\\<forall>twoCube \\<in> twoChain. F integrable_on cubeImage twoCube\" and\n    gen_division: \"gen_division s (cubeImage ` twoChain)\" and\n    valid_two_chain: \"valid_two_chain twoChain\"\n  shows \"integral s F = two_chain_integral twoChain F\"", "lemma field_cont_on_typeI_region_cont_on_edges:\n  assumes typeI_twoC: \"typeI_twoCube twoC\" \n    and field_cont: \"continuous_on (cubeImage twoC) F\" \n    and member_of_boundary: \"(k,\\<gamma>) \\<in> boundary twoC\"\n  shows \"continuous_on (\\<gamma> ` {0 .. 1}) F\"", "lemma typeII_cube_explicit_spec:\n  assumes \"typeII_twoCube twoC\"\n  shows \"\\<exists>a b g1 g2. a < b \\<and> (\\<forall>x \\<in> {a .. b}. g2 x \\<le> g1 x) \\<and>\n                     cubeImage twoC = {(y, x). x \\<in> {a..b} \\<and> y \\<in> {g2 x .. g1 x}}\n                  \\<and> twoC = (\\<lambda>(y, x). ((1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b), (1 - x) * a + x * b))\n                  \\<and> g1 piecewise_C1_differentiable_on {a .. b} \\<and> g2 piecewise_C1_differentiable_on {a .. b}\n                  \\<and> (\\<lambda>x. twoC(0, x)) = (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x))\n                  \\<and> (\\<lambda>y. twoC(y, 1)) = (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b))\n                  \\<and> (\\<lambda>x. twoC(1, x)) = (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x))\n                  \\<and> (\\<lambda>y. twoC(y, 0)) = (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))\"", "lemma typeII_twoCube_smooth_edges:\n  assumes \"typeII_twoCube twoC\" \"(k,\\<gamma>) \\<in> boundary twoC\"\n  shows \"\\<gamma> piecewise_C1_differentiable_on {0..1}\"", "lemma field_cont_on_typeII_region_cont_on_edges:\n  assumes typeII_twoC:\n    \"typeII_twoCube twoC\" and\n    field_cont:\n    \"continuous_on (cubeImage twoC) F\" and\n    member_of_boundary:\n    \"(k,\\<gamma>) \\<in> boundary twoC\"\n  shows \"continuous_on (\\<gamma> ` {0 .. 1}) F\"", "lemma two_cube_boundary_is_boundary: \"boundary_chain (boundary C)\"", "lemma common_boundary_subdiv_exists_refl:\n  assumes \"\\<forall>(k,\\<gamma>)\\<in>boundary twoC. valid_path \\<gamma>\"\n  shows \"common_boundary_sudivision_exists (boundary twoC) (boundary twoC)\"", "lemma common_boundary_subdiv_exists_refl':\n  assumes \"\\<forall>(k,\\<gamma>)\\<in>C. valid_path \\<gamma>\"\n    \"boundary_chain (C::(int \\<times> (real \\<Rightarrow> real \\<times> real)) set)\"\n  shows \"common_boundary_sudivision_exists (C) (C)\"", "lemma gen_common_boundary_subdiv_exists_refl_twochain_boundary:\n  assumes \"\\<forall>(k,\\<gamma>)\\<in>C. valid_path \\<gamma>\"\n    \"boundary_chain (C::(int \\<times> (real \\<Rightarrow> real \\<times> real)) set)\"\n  shows \"common_sudiv_exists (C) (C)\"", "lemma two_chain_boundary_is_boundary_chain:\n  shows \"boundary_chain (two_chain_boundary twoChain)\"", "lemma typeI_edges_are_valid_paths:\n  assumes \"typeI_twoCube twoC\" \"(k,\\<gamma>) \\<in> boundary twoC\"\n  shows \"valid_path \\<gamma>\"", "lemma typeII_edges_are_valid_paths:\n  assumes \"typeII_twoCube twoC\" \"(k,\\<gamma>) \\<in> boundary twoC\"\n  shows \"valid_path \\<gamma>\"", "lemma finite_two_chain_vertical_boundary:\n  assumes \"finite two_chain\"\n  shows \"finite (two_chain_vertical_boundary two_chain)\"", "lemma finite_two_chain_horizontal_boundary:\n  assumes \"finite two_chain\"\n  shows \"finite (two_chain_horizontal_boundary two_chain)\"", "lemma analytically_valid_y:\n  assumes \"analytically_valid s F i\"\n  shows \"(\\<lambda>x. integral UNIV (\\<lambda>y. (partial_vector_derivative F i) (y, x) * (indicator s (y, x)))) \\<in> borel_measurable lborel\"", "lemma analytically_valid_x:\n  assumes \"analytically_valid s F j\"\n  shows \"(\\<lambda>x. integral UNIV (\\<lambda>y. ((partial_vector_derivative F j) (x, y)) * (indicator s (x, y)))) \\<in> borel_measurable lborel\"", "lemma Greens_thm_type_I:\n  fixes F:: \"((real*real) \\<Rightarrow> (real * real))\" and\n    gamma1 gamma2 gamma3 gamma4 :: \"(real \\<Rightarrow> (real * real))\" and\n    a:: \"real\" and b:: \"real\" and\n    g1:: \"(real \\<Rightarrow> real)\" and g2:: \"(real \\<Rightarrow> real)\"\n  assumes Dy_def: \"Dy_pair = {(x::real,y) . x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)}\" and\n    gamma1_def: \"gamma1 = (\\<lambda>x. (a + (b - a) * x, g2(a + (b - a) * x)))\" and\n    gamma1_smooth: \"gamma1 piecewise_C1_differentiable_on {0..1}\" and (*TODO: This should be piecewise smooth*)\n    gamma2_def: \"gamma2 = (\\<lambda>x. (b, g2(b) + x  *\\<^sub>R (g1(b) - g2(b))))\" and\n    gamma3_def: \"gamma3 = (\\<lambda>x. (a + (b - a) * x, g1(a + (b - a) * x)))\" and\n    gamma3_smooth: \"gamma3 piecewise_C1_differentiable_on {0..1}\" and\n    gamma4_def: \"gamma4 = (\\<lambda>x. (a,  g2(a) + x *\\<^sub>R (g1(a) - g2(a))))\" and\n    F_i_analytically_valid: \"analytically_valid Dy_pair (\\<lambda>p. F(p) \\<bullet> i) j\" and\n    g2_leq_g1: \"\\<forall>x \\<in> cbox a b. (g2 x) \\<le> (g1 x)\" and (*This is needed otherwise what would Dy be?*)\n    a_lt_b: \"a < b\"\n  shows \"(line_integral F {i} gamma1) +\n         (line_integral F {i} gamma2) -\n         (line_integral F {i} gamma3) -\n         (line_integral F {i} gamma4)\n                 = (integral Dy_pair (\\<lambda>a. - (partial_vector_derivative (\\<lambda>p. F(p) \\<bullet> i) j a)))\"\n    \"line_integral_exists F {i} gamma4\"\n    \"line_integral_exists F {i} gamma3\"\n    \"line_integral_exists F {i} gamma2\"\n    \"line_integral_exists F {i} gamma1\"", "theorem Greens_thm_type_II:\n  fixes F:: \"((real*real) \\<Rightarrow> (real * real))\" and\n    gamma4 gamma3 gamma2 gamma1 :: \"(real \\<Rightarrow> (real * real))\" and\n    a:: \"real\" and b:: \"real\" and\n    g1:: \"(real \\<Rightarrow> real)\" and g2:: \"(real \\<Rightarrow> real)\"\n  assumes Dx_def: \"Dx_pair = {(x::real,y) . y \\<in> cbox a b \\<and> x \\<in> cbox (g2 y) (g1 y)}\" and\n    gamma4_def: \"gamma4 = (\\<lambda>x. (g2(a + (b - a) * x), a + (b - a) * x))\" and\n    gamma4_smooth: \"gamma4 piecewise_C1_differentiable_on {0..1}\" and (*TODO: This should be piecewise smooth*)\n    gamma3_def: \"gamma3 = (\\<lambda>x. (g2(b) + x  *\\<^sub>R (g1(b) - g2(b)), b))\" and\n    gamma2_def: \"gamma2 = (\\<lambda>x. (g1(a + (b - a) * x), a + (b - a) * x))\" and\n    gamma2_smooth: \"gamma2 piecewise_C1_differentiable_on {0..1}\" and\n    gamma1_def: \"gamma1 = (\\<lambda>x. (g2(a) + x *\\<^sub>R (g1(a) - g2(a)), a))\" and\n    F_j_analytically_valid: \"analytically_valid Dx_pair (\\<lambda>p. F(p) \\<bullet> j) i\" and\n    g2_leq_g1: \"\\<forall>x \\<in> cbox a b. (g2 x) \\<le> (g1 x)\" and (*This is needed otherwise what would Dy be?*)\n    a_lt_b: \"a < b\"\n  shows \"-(line_integral F {j} gamma4) -\n         (line_integral F {j} gamma3) +\n         (line_integral F {j} gamma2) +\n         (line_integral F {j} gamma1)\n                 = (integral Dx_pair (\\<lambda>a. (partial_vector_derivative (\\<lambda>a. (F a) \\<bullet> j)  i a)))\"\n    \"line_integral_exists F {j} gamma4\"\n    \"line_integral_exists F {j} gamma3\"\n    \"line_integral_exists F {j} gamma2\"\n    \"line_integral_exists F {j} gamma1\"", "lemma GreenThm_typeII_twoCube:\n  shows \"integral (cubeImage twoC) (\\<lambda>a. partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> j) i  a) = one_chain_line_integral F {j} (boundary twoC)\"\n    \"\\<forall>(k,\\<gamma>) \\<in> boundary twoC. line_integral_exists F {j} \\<gamma>\"", "lemma line_integral_exists_on_typeII_Cube_boundaries':\n  assumes \"(k,\\<gamma>) \\<in> boundary twoC\"\n  shows \"line_integral_exists F {j} \\<gamma>\"", "lemma two_chain_valid_valid_cubes: \"\\<forall>two_cube \\<in> two_chain. valid_two_cube two_cube\"", "lemma typeII_chain_line_integral_exists_boundary':\n  shows \"\\<forall>(k,\\<gamma>) \\<in> two_chain_vertical_boundary two_chain. line_integral_exists F {j} \\<gamma>\"", "lemma typeII_chain_line_integral_exists_boundary'':\n     \"\\<forall>(k,\\<gamma>) \\<in> two_chain_horizontal_boundary two_chain. line_integral_exists F {j} \\<gamma>\"", "lemma typeII_cube_line_integral_exists_boundary:\n     \"\\<forall>(k,\\<gamma>) \\<in> two_chain_boundary two_chain. line_integral_exists F {j} \\<gamma>\"", "lemma type_II_chain_horiz_bound_valid:\n     \"\\<forall>(k,\\<gamma>) \\<in> two_chain_horizontal_boundary two_chain. valid_path \\<gamma>\"", "lemma type_II_chain_vert_bound_valid: (*This and the previous one need to be used in all proofs*)\n     \"\\<forall>(k,\\<gamma>) \\<in> two_chain_vertical_boundary two_chain. valid_path \\<gamma>\"", "lemma members_of_only_horiz_div_line_integrable':\n  assumes \"only_horizontal_division one_chain two_chain\"\n    \"(k::int, \\<gamma>)\\<in>one_chain\"\n    \"(k::int, \\<gamma>)\\<in>one_chain\"\n    \"finite two_chain\"\n    \"\\<forall>two_cube \\<in> two_chain. valid_two_cube two_cube\"\n  shows \"line_integral_exists F {j} \\<gamma>\"", "lemma GreenThm_typeII_twoChain:\n  shows \"two_chain_integral two_chain (partial_vector_derivative (\\<lambda>a. (F a) \\<bullet> j)  i) = one_chain_line_integral F {j} (two_chain_boundary two_chain)\"", "lemma GreenThm_typeII_divisible:\n  assumes \n    gen_division: \"gen_division s (cubeImage ` two_chain)\"    (*This should follow from the assumption that images are not negligible*)\n  shows \"integral s (partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> j) i) = one_chain_line_integral F {j} (two_chain_boundary two_chain)\"", "lemma GreenThm_typeII_divisible_region_boundary_gen:\n  assumes only_horizontal_division: \"only_horizontal_division \\<gamma> two_chain\"\n  shows \"integral s (partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> j) i) = one_chain_line_integral F {j} \\<gamma>\"", "lemma GreenThm_typeII_divisible_region_boundary:\n  assumes\n    two_cubes_trace_vertical_boundaries: \n    \"two_chain_vertical_boundary two_chain \\<subseteq> \\<gamma>\" and\n    boundary_of_region_is_subset_of_partition_boundary:\n    \"\\<gamma> \\<subseteq> two_chain_boundary two_chain\"\n  shows \"integral s (partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> j) i) = one_chain_line_integral F {j} \\<gamma>\"", "lemma GreenThm_typeI_twoCube:\n  shows \"integral (cubeImage twoC) (\\<lambda>a. - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j  a) = one_chain_line_integral F {i} (boundary twoC)\"\n    \"\\<forall>(k,\\<gamma>) \\<in> boundary twoC. line_integral_exists F {i} \\<gamma>\"", "lemma line_integral_exists_on_typeI_Cube_boundaries':\n  assumes \"(k,\\<gamma>) \\<in> boundary twoC\"\n  shows \"line_integral_exists F {i} \\<gamma>\"", "lemma two_chain_valid_valid_cubes: \"\\<forall>two_cube \\<in> two_chain. valid_two_cube two_cube\"", "lemma typeI_cube_line_integral_exists_boundary':\n  assumes \"\\<forall>two_cube \\<in> two_chain. typeI_twoCube two_cube\"\n  assumes \"\\<forall>twoC \\<in> two_chain. analytically_valid (cubeImage twoC) (\\<lambda>x. (F x) \\<bullet> i) j\"\n  assumes \"\\<forall>two_cube \\<in> two_chain. valid_two_cube two_cube\"\n  shows \"\\<forall>(k,\\<gamma>) \\<in> two_chain_vertical_boundary two_chain. line_integral_exists F {i} \\<gamma>\"", "lemma typeI_cube_line_integral_exists_boundary'':\n  \"\\<forall>(k,\\<gamma>) \\<in> two_chain_horizontal_boundary two_chain. line_integral_exists F {i} \\<gamma>\"", "lemma typeI_cube_line_integral_exists_boundary:\n  \"\\<forall>(k,\\<gamma>) \\<in> two_chain_boundary two_chain. line_integral_exists F {i} \\<gamma>\"", "lemma type_I_chain_horiz_bound_valid:\n  \"\\<forall>(k,\\<gamma>) \\<in> two_chain_horizontal_boundary two_chain. valid_path \\<gamma>\"", "lemma type_I_chain_vert_bound_valid: (*This and the previous one need to be used in all proofs*)\n  assumes \"\\<forall>two_cube \\<in> two_chain. typeI_twoCube two_cube\"\n  shows \"\\<forall>(k,\\<gamma>) \\<in> two_chain_vertical_boundary two_chain. valid_path \\<gamma>\"", "lemma members_of_only_vertical_div_line_integrable':\n  assumes \"only_vertical_division one_chain two_chain\"\n    \"(k::int, \\<gamma>)\\<in>one_chain\"\n    \"(k::int, \\<gamma>)\\<in>one_chain\"\n    \"finite two_chain\"\n  shows \"line_integral_exists F {i} \\<gamma>\"", "lemma GreenThm_typeI_two_chain:\n   \"two_chain_integral two_chain (\\<lambda>a. - partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> i) j a) = one_chain_line_integral F {i} (two_chain_boundary two_chain)\"", "lemma GreenThm_typeI_divisible:\n  assumes gen_division: \"gen_division s (cubeImage ` two_chain)\"\n  shows \"integral s (\\<lambda>x. - partial_vector_derivative (\\<lambda>a. F(a) \\<bullet> i) j x) = one_chain_line_integral F {i} (two_chain_boundary two_chain)\"", "lemma GreenThm_typeI_divisible_region_boundary:\n  assumes \n    gen_division: \"gen_division s (cubeImage ` two_chain)\" and\n    two_cubes_trace_horizontal_boundaries:\n    \"two_chain_horizontal_boundary two_chain \\<subseteq> \\<gamma>\" and\n    boundary_of_region_is_subset_of_partition_boundary:\n    \"\\<gamma> \\<subseteq> two_chain_boundary two_chain\"\n  shows \"integral s (\\<lambda>x. - partial_vector_derivative (\\<lambda>a. F(a) \\<bullet> i) j x) = one_chain_line_integral F {i} \\<gamma>\"", "lemma GreenThm_typeI_divisible_region_boundary_gen:\n  assumes valid_typeI_div: \"valid_typeI_division s two_chain\" and\n    f_analytically_valid: \"\\<forall>twoC \\<in> two_chain. analytically_valid (cubeImage twoC) (\\<lambda>a. F(a) \\<bullet> i) j\" and\n    only_vertical_division:\n    \"only_vertical_division \\<gamma> two_chain\"\n  shows \"integral s (\\<lambda>x. - partial_vector_derivative (\\<lambda>a. F(a) \\<bullet> i) j x) = one_chain_line_integral F {i} \\<gamma>\"", "lemma GreenThm_typeI_typeII_divisible_region_boundary:\n  assumes \n    gen_divisions: \"gen_division s (cubeImage ` two_chain_typeI)\"\n    \"gen_division s (cubeImage ` two_chain_typeII)\" and\n    typeI_two_cubes_trace_horizontal_boundaries:\n    \"two_chain_horizontal_boundary two_chain_typeI \\<subseteq> \\<gamma>\" and\n    typeII_two_cubes_trace_vertical_boundaries:\n    \"two_chain_vertical_boundary two_chain_typeII \\<subseteq> \\<gamma>\" and\n    boundary_of_region_is_subset_of_partition_boundaries:\n    \"\\<gamma> \\<subseteq> two_chain_boundary two_chain_typeI\"\n    \"\\<gamma> \\<subseteq> two_chain_boundary two_chain_typeII\"\n  shows \"integral s (\\<lambda>x. partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x)\n         = one_chain_line_integral F {i, j} \\<gamma>\"", "lemma GreenThm_typeI_typeII_divisible_region':\n  assumes \n    only_vertical_division:\n    \"only_vertical_division one_chain_typeI two_chain_typeI\"\n    \"boundary_chain one_chain_typeI\" and\n    only_horizontal_division:\n    \"only_horizontal_division one_chain_typeII two_chain_typeII\"\n    \"boundary_chain one_chain_typeII\" and\n    typeI_and_typII_one_chains_have_gen_common_subdiv:\n    \"common_sudiv_exists one_chain_typeI one_chain_typeII\"\n  shows \"integral s (\\<lambda>x. partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> j) i x - partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> i) j x) = one_chain_line_integral F {i, j} one_chain_typeI\"\n    \"integral s (\\<lambda>x. partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> j) i x - partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> i) j x) = one_chain_line_integral F {i, j} one_chain_typeII\"", "lemma GreenThm_typeI_typeII_divisible_region:\n  assumes only_vertical_division:\n    \"only_vertical_division one_chain_typeI two_chain_typeI\"\n    \"boundary_chain one_chain_typeI\" and\n    only_horizontal_division:\n    \"only_horizontal_division one_chain_typeII two_chain_typeII\"\n    \"boundary_chain one_chain_typeII\" and\n    typeI_and_typII_one_chains_have_common_subdiv:\n    \"common_boundary_sudivision_exists one_chain_typeI one_chain_typeII\"\n  shows \"integral s (\\<lambda>x. partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> j) i x - partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> i) j x) = one_chain_line_integral F {i, j} one_chain_typeI\"\n    \"integral s (\\<lambda>x. partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> j) i x - partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> i) j x) = one_chain_line_integral F {i, j} one_chain_typeII\"", "lemma GreenThm_typeI_typeII_divisible_region_finite_holes:\n  assumes valid_cube_boundary: \"\\<forall>(k,\\<gamma>)\\<in>boundary C. valid_path \\<gamma>\" and\n    only_vertical_division:\n    \"only_vertical_division (boundary C) two_chain_typeI\" and\n    only_horizontal_division:\n    \"only_horizontal_division (boundary C) two_chain_typeII\" and\n    s_is_oneCube: \"s = cubeImage C\"\n  shows \"integral (cubeImage C) (\\<lambda>x. partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n                     one_chain_line_integral F {i, j} (boundary C)\"", "lemma GreenThm_typeI_typeII_divisible_region_equivallent_boundary:\n  assumes \n    gen_divisions: \"gen_division s (cubeImage ` two_chain_typeI)\"\n    \"gen_division s (cubeImage ` two_chain_typeII)\" and\n    typeI_two_cubes_trace_horizontal_boundaries:\n    \"two_chain_horizontal_boundary two_chain_typeI \\<subseteq> one_chain_typeI\" and\n    typeII_two_cubes_trace_vertical_boundaries:\n    \"two_chain_vertical_boundary two_chain_typeII \\<subseteq> one_chain_typeII\" and\n    boundary_of_region_is_subset_of_partition_boundaries:\n    \"one_chain_typeI \\<subseteq> two_chain_boundary two_chain_typeI\"\n    \"one_chain_typeII \\<subseteq> two_chain_boundary two_chain_typeII\" and\n    typeI_and_typII_one_chains_have_common_subdiv:\n    \"common_boundary_sudivision_exists one_chain_typeI one_chain_typeII\"\n  shows \"integral s (\\<lambda>x. partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> j) i x - partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> i) j x) = one_chain_line_integral F {i, j} one_chain_typeI\"\n    \"integral s (\\<lambda>x. partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> j) i x - partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> i) j x) = one_chain_line_integral F {i, j} one_chain_typeII\""], "translations": [["", "lemma frontier_Un_subset_Un_frontier:\n     \"frontier (s \\<union> t) \\<subseteq> (frontier s) \\<union> (frontier t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. frontier (s \\<union> t) \\<subseteq> frontier s \\<union> frontier t", "by (simp add: frontier_def Un_Diff) (auto simp add: closure_def interior_def islimpt_def)"], ["", "definition has_partial_derivative:: \"(('a::euclidean_space) \\<Rightarrow> 'b::euclidean_space) \\<Rightarrow> 'a \\<Rightarrow> ('a \\<Rightarrow> 'b) \\<Rightarrow> ('a) \\<Rightarrow> bool\" where\n  \"has_partial_derivative F base_vec F' a\n        \\<equiv> ((\\<lambda>x::'a::euclidean_space. F( (a - ((a \\<bullet> base_vec) *\\<^sub>R base_vec)) + (x \\<bullet> base_vec) *\\<^sub>R base_vec ))\n                has_derivative F') (at a)\""], ["", "definition has_partial_vector_derivative:: \"(('a::euclidean_space) \\<Rightarrow> 'b::euclidean_space) \\<Rightarrow> 'a \\<Rightarrow> ( 'b) \\<Rightarrow> ('a) \\<Rightarrow> bool\" where\n  \"has_partial_vector_derivative F base_vec F' a\n        \\<equiv> ((\\<lambda>x. F( (a - ((a \\<bullet> base_vec) *\\<^sub>R base_vec)) + x *\\<^sub>R base_vec ))\n                has_vector_derivative F') (at (a \\<bullet> base_vec))\""], ["", "definition partially_vector_differentiable where\n  \"partially_vector_differentiable F base_vec p \\<equiv> (\\<exists>F'. has_partial_vector_derivative F base_vec F' p)\""], ["", "definition partial_vector_derivative:: \"(('a::euclidean_space) \\<Rightarrow> 'b::euclidean_space) \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> 'b\" where\n  \"partial_vector_derivative F base_vec a\n        \\<equiv> (vector_derivative (\\<lambda>x. F( (a - ((a \\<bullet> base_vec) *\\<^sub>R base_vec)) + x *\\<^sub>R base_vec)) (at (a \\<bullet> base_vec)))\""], ["", "lemma partial_vector_derivative_works:\n  assumes \"partially_vector_differentiable F base_vec a\"\n  shows \"has_partial_vector_derivative F base_vec (partial_vector_derivative F base_vec a) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. has_partial_vector_derivative F base_vec\n     (partial_vector_derivative F base_vec a) a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. has_partial_vector_derivative F base_vec\n     (partial_vector_derivative F base_vec a) a", "obtain F' where F'_prop: \"((\\<lambda>x. F( (a - ((a \\<bullet> base_vec) *\\<^sub>R base_vec)) + x *\\<^sub>R base_vec ))\n                            has_vector_derivative F') (at (a \\<bullet> base_vec))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>F'.\n        ((\\<lambda>x.\n             F (a - (a \\<bullet> base_vec) *\\<^sub>R base_vec +\n                x *\\<^sub>R base_vec)) has_vector_derivative\n         F')\n         (at (a \\<bullet> base_vec)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms partially_vector_differentiable_def has_partial_vector_derivative_def"], ["proof (prove)\nusing this:\n  partially_vector_differentiable F base_vec a\n  partially_vector_differentiable ?F ?base_vec ?p \\<equiv>\n  \\<exists>F'. has_partial_vector_derivative ?F ?base_vec F' ?p\n  has_partial_vector_derivative ?F ?base_vec ?F' ?a \\<equiv>\n  ((\\<lambda>x.\n       ?F (?a - (?a \\<bullet> ?base_vec) *\\<^sub>R ?base_vec +\n           x *\\<^sub>R ?base_vec)) has_vector_derivative\n   ?F')\n   (at (?a \\<bullet> ?base_vec))\n\ngoal (1 subgoal):\n 1. (\\<And>F'.\n        ((\\<lambda>x.\n             F (a - (a \\<bullet> base_vec) *\\<^sub>R base_vec +\n                x *\\<^sub>R base_vec)) has_vector_derivative\n         F')\n         (at (a \\<bullet> base_vec)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ((\\<lambda>x.\n       F (a - (a \\<bullet> base_vec) *\\<^sub>R base_vec +\n          x *\\<^sub>R base_vec)) has_vector_derivative\n   F')\n   (at (a \\<bullet> base_vec))\n\ngoal (1 subgoal):\n 1. has_partial_vector_derivative F base_vec\n     (partial_vector_derivative F base_vec a) a", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. has_partial_vector_derivative F base_vec\n     (partial_vector_derivative F base_vec a) a", "using Derivative.differentiableI_vector[OF F'_prop]"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      F (a - (a \\<bullet> base_vec) *\\<^sub>R base_vec +\n         x *\\<^sub>R base_vec)) differentiable\n  at (a \\<bullet> base_vec)\n\ngoal (1 subgoal):\n 1. has_partial_vector_derivative F base_vec\n     (partial_vector_derivative F base_vec a) a", "by(simp add: vector_derivative_works partial_vector_derivative_def[symmetric]\n        has_partial_vector_derivative_def[symmetric])"], ["proof (state)\nthis:\n  has_partial_vector_derivative F base_vec\n   (partial_vector_derivative F base_vec a) a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fundamental_theorem_of_calculus_partial_vector:\n  fixes a b:: \"real\" and\n    F:: \"('a::euclidean_space \\<Rightarrow> 'b::euclidean_space)\" and\n    i:: \"'a\" and\n    j:: \"'b\" and\n    F_j_i:: \"('a::euclidean_space \\<Rightarrow> real)\"\n  assumes a_leq_b: \"a \\<le> b\" and\n    Base_vecs: \"i \\<in> Basis\" \"j \\<in> Basis\" and\n    no_i_component: \"c \\<bullet> i = 0 \" and\n    has_partial_deriv: \"\\<forall>p \\<in> D. has_partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> j) i (F_j_i p) p\" and\n    domain_subset_of_D: \"{x *\\<^sub>R i + c |x. a \\<le> x \\<and> x \\<le> b} \\<subseteq> D\"\n  shows \"((\\<lambda>x. F_j_i( x *\\<^sub>R i + c)) has_integral\n          F(b *\\<^sub>R i + c) \\<bullet> j - F(a *\\<^sub>R i + c) \\<bullet> j) (cbox a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. F_j_i (x *\\<^sub>R i + c)) has_integral\n     F (b *\\<^sub>R i + c) \\<bullet> j - F (a *\\<^sub>R i + c) \\<bullet> j)\n     (cbox a b)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. F_j_i (x *\\<^sub>R i + c)) has_integral\n     F (b *\\<^sub>R i + c) \\<bullet> j - F (a *\\<^sub>R i + c) \\<bullet> j)\n     (cbox a b)", "let ?domain = \"{v. \\<exists>x. a \\<le> x \\<and> x \\<le> b \\<and> v = x *\\<^sub>R i + c}\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. F_j_i (x *\\<^sub>R i + c)) has_integral\n     F (b *\\<^sub>R i + c) \\<bullet> j - F (a *\\<^sub>R i + c) \\<bullet> j)\n     (cbox a b)", "have \"\\<forall>x\\<in> ?domain.  has_partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> j) i (F_j_i x) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>{v. \\<exists>x\\<ge>a.\n                          x \\<le> b \\<and> v = x *\\<^sub>R i + c}.\n       has_partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i\n        (F_j_i x) x", "using has_partial_deriv domain_subset_of_D"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>D.\n     has_partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i (F_j_i p)\n      p\n  {x *\\<^sub>R i + c |x. a \\<le> x \\<and> x \\<le> b} \\<subseteq> D\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>{v. \\<exists>x\\<ge>a.\n                          x \\<le> b \\<and> v = x *\\<^sub>R i + c}.\n       has_partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i\n        (F_j_i x) x", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>{v. \\<exists>x\\<ge>a.\n                        x \\<le> b \\<and> v = x *\\<^sub>R i + c}.\n     has_partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i (F_j_i x)\n      x\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. F_j_i (x *\\<^sub>R i + c)) has_integral\n     F (b *\\<^sub>R i + c) \\<bullet> j - F (a *\\<^sub>R i + c) \\<bullet> j)\n     (cbox a b)", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>{v. \\<exists>x\\<ge>a.\n                        x \\<le> b \\<and> v = x *\\<^sub>R i + c}.\n     has_partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i (F_j_i x)\n      x", "have \"\\<forall>x\\<in> (cbox a b).  ((\\<lambda>x. F(x *\\<^sub>R i + c) \\<bullet> j) has_vector_derivative (F_j_i( x *\\<^sub>R i + c))) (at x)\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>{v. \\<exists>x\\<ge>a.\n                        x \\<le> b \\<and> v = x *\\<^sub>R i + c}.\n     has_partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i (F_j_i x)\n      x\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>cbox a b.\n       ((\\<lambda>x.\n            F (x *\\<^sub>R i + c) \\<bullet> j) has_vector_derivative\n        F_j_i (x *\\<^sub>R i + c))\n        (at x)", "proof(clarsimp simp add: has_partial_vector_derivative_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   (\\<exists>xa\\<ge>a.\n                       xa \\<le> b \\<and>\n                       x = xa *\\<^sub>R i + c) \\<longrightarrow>\n                   ((\\<lambda>xa.\n                        F (x - (x \\<bullet> i) *\\<^sub>R i +\n                           xa *\\<^sub>R i) \\<bullet>\n                        j) has_vector_derivative\n                    F_j_i x)\n                    (at (x \\<bullet> i));\n        a \\<le> x; x \\<le> b\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              F (x *\\<^sub>R i + c) \\<bullet>\n                              j) has_vector_derivative\n                          F_j_i (x *\\<^sub>R i + c))\n                          (at x)", "fix x::real"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   (\\<exists>xa\\<ge>a.\n                       xa \\<le> b \\<and>\n                       x = xa *\\<^sub>R i + c) \\<longrightarrow>\n                   ((\\<lambda>xa.\n                        F (x - (x \\<bullet> i) *\\<^sub>R i +\n                           xa *\\<^sub>R i) \\<bullet>\n                        j) has_vector_derivative\n                    F_j_i x)\n                    (at (x \\<bullet> i));\n        a \\<le> x; x \\<le> b\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              F (x *\\<^sub>R i + c) \\<bullet>\n                              j) has_vector_derivative\n                          F_j_i (x *\\<^sub>R i + c))\n                          (at x)", "assume range_of_x: \"a \\<le> x\" \"x \\<le> b\""], ["proof (state)\nthis:\n  a \\<le> x\n  x \\<le> b\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   (\\<exists>xa\\<ge>a.\n                       xa \\<le> b \\<and>\n                       x = xa *\\<^sub>R i + c) \\<longrightarrow>\n                   ((\\<lambda>xa.\n                        F (x - (x \\<bullet> i) *\\<^sub>R i +\n                           xa *\\<^sub>R i) \\<bullet>\n                        j) has_vector_derivative\n                    F_j_i x)\n                    (at (x \\<bullet> i));\n        a \\<le> x; x \\<le> b\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              F (x *\\<^sub>R i + c) \\<bullet>\n                              j) has_vector_derivative\n                          F_j_i (x *\\<^sub>R i + c))\n                          (at x)", "assume ass2: \"\\<forall>x. (\\<exists>z\\<ge>a. z \\<le> b \\<and> x = z *\\<^sub>R i + c) \\<longrightarrow>\n                     ((\\<lambda>z. F(x - (x \\<bullet> i) *\\<^sub>R i + z *\\<^sub>R i) \\<bullet> j) has_vector_derivative F_j_i x) (at (x \\<bullet> i))\""], ["proof (state)\nthis:\n  \\<forall>x.\n     (\\<exists>z\\<ge>a.\n         z \\<le> b \\<and> x = z *\\<^sub>R i + c) \\<longrightarrow>\n     ((\\<lambda>z.\n          F (x - (x \\<bullet> i) *\\<^sub>R i + z *\\<^sub>R i) \\<bullet>\n          j) has_vector_derivative\n      F_j_i x)\n      (at (x \\<bullet> i))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   (\\<exists>xa\\<ge>a.\n                       xa \\<le> b \\<and>\n                       x = xa *\\<^sub>R i + c) \\<longrightarrow>\n                   ((\\<lambda>xa.\n                        F (x - (x \\<bullet> i) *\\<^sub>R i +\n                           xa *\\<^sub>R i) \\<bullet>\n                        j) has_vector_derivative\n                    F_j_i x)\n                    (at (x \\<bullet> i));\n        a \\<le> x; x \\<le> b\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              F (x *\\<^sub>R i + c) \\<bullet>\n                              j) has_vector_derivative\n                          F_j_i (x *\\<^sub>R i + c))\n                          (at x)", "have \"((\\<lambda>z. F((x *\\<^sub>R i + c) - ((x *\\<^sub>R i + c) \\<bullet> i) *\\<^sub>R i + z *\\<^sub>R i) \\<bullet> j) has_vector_derivative F_j_i (x *\\<^sub>R i + c)) (at ((x *\\<^sub>R i + c) \\<bullet> i)) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>z.\n         F (x *\\<^sub>R i + c -\n            ((x *\\<^sub>R i + c) \\<bullet> i) *\\<^sub>R i +\n            z *\\<^sub>R i) \\<bullet>\n         j) has_vector_derivative\n     F_j_i (x *\\<^sub>R i + c))\n     (at ((x *\\<^sub>R i + c) \\<bullet> i))", "using range_of_x ass2"], ["proof (prove)\nusing this:\n  a \\<le> x\n  x \\<le> b\n  \\<forall>x.\n     (\\<exists>z\\<ge>a.\n         z \\<le> b \\<and> x = z *\\<^sub>R i + c) \\<longrightarrow>\n     ((\\<lambda>z.\n          F (x - (x \\<bullet> i) *\\<^sub>R i + z *\\<^sub>R i) \\<bullet>\n          j) has_vector_derivative\n      F_j_i x)\n      (at (x \\<bullet> i))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>z.\n         F (x *\\<^sub>R i + c -\n            ((x *\\<^sub>R i + c) \\<bullet> i) *\\<^sub>R i +\n            z *\\<^sub>R i) \\<bullet>\n         j) has_vector_derivative\n     F_j_i (x *\\<^sub>R i + c))\n     (at ((x *\\<^sub>R i + c) \\<bullet> i))", "by auto"], ["proof (state)\nthis:\n  ((\\<lambda>z.\n       F (x *\\<^sub>R i + c -\n          ((x *\\<^sub>R i + c) \\<bullet> i) *\\<^sub>R i +\n          z *\\<^sub>R i) \\<bullet>\n       j) has_vector_derivative\n   F_j_i (x *\\<^sub>R i + c))\n   (at ((x *\\<^sub>R i + c) \\<bullet> i))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   (\\<exists>xa\\<ge>a.\n                       xa \\<le> b \\<and>\n                       x = xa *\\<^sub>R i + c) \\<longrightarrow>\n                   ((\\<lambda>xa.\n                        F (x - (x \\<bullet> i) *\\<^sub>R i +\n                           xa *\\<^sub>R i) \\<bullet>\n                        j) has_vector_derivative\n                    F_j_i x)\n                    (at (x \\<bullet> i));\n        a \\<le> x; x \\<le> b\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              F (x *\\<^sub>R i + c) \\<bullet>\n                              j) has_vector_derivative\n                          F_j_i (x *\\<^sub>R i + c))\n                          (at x)", "then"], ["proof (chain)\npicking this:\n  ((\\<lambda>z.\n       F (x *\\<^sub>R i + c -\n          ((x *\\<^sub>R i + c) \\<bullet> i) *\\<^sub>R i +\n          z *\\<^sub>R i) \\<bullet>\n       j) has_vector_derivative\n   F_j_i (x *\\<^sub>R i + c))\n   (at ((x *\\<^sub>R i + c) \\<bullet> i))", "have 0: \"((\\<lambda>x. F( c + x *\\<^sub>R i) \\<bullet> j) has_vector_derivative F_j_i (x *\\<^sub>R i + c)) (at x)\""], ["proof (prove)\nusing this:\n  ((\\<lambda>z.\n       F (x *\\<^sub>R i + c -\n          ((x *\\<^sub>R i + c) \\<bullet> i) *\\<^sub>R i +\n          z *\\<^sub>R i) \\<bullet>\n       j) has_vector_derivative\n   F_j_i (x *\\<^sub>R i + c))\n   (at ((x *\\<^sub>R i + c) \\<bullet> i))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. F (c + x *\\<^sub>R i) \\<bullet> j) has_vector_derivative\n     F_j_i (x *\\<^sub>R i + c))\n     (at x)", "by (simp add: assms(2) inner_left_distrib no_i_component)"], ["proof (state)\nthis:\n  ((\\<lambda>x. F (c + x *\\<^sub>R i) \\<bullet> j) has_vector_derivative\n   F_j_i (x *\\<^sub>R i + c))\n   (at x)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   (\\<exists>xa\\<ge>a.\n                       xa \\<le> b \\<and>\n                       x = xa *\\<^sub>R i + c) \\<longrightarrow>\n                   ((\\<lambda>xa.\n                        F (x - (x \\<bullet> i) *\\<^sub>R i +\n                           xa *\\<^sub>R i) \\<bullet>\n                        j) has_vector_derivative\n                    F_j_i x)\n                    (at (x \\<bullet> i));\n        a \\<le> x; x \\<le> b\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              F (x *\\<^sub>R i + c) \\<bullet>\n                              j) has_vector_derivative\n                          F_j_i (x *\\<^sub>R i + c))\n                          (at x)", "have 1: \"(\\<lambda>x. F(x *\\<^sub>R i + c) \\<bullet> j) = (\\<lambda>x. F(c + x *\\<^sub>R i) \\<bullet> j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. F (x *\\<^sub>R i + c) \\<bullet> j) =\n    (\\<lambda>x. F (c + x *\\<^sub>R i) \\<bullet> j)", "by (simp add: add.commute)"], ["proof (state)\nthis:\n  (\\<lambda>x. F (x *\\<^sub>R i + c) \\<bullet> j) =\n  (\\<lambda>x. F (c + x *\\<^sub>R i) \\<bullet> j)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   (\\<exists>xa\\<ge>a.\n                       xa \\<le> b \\<and>\n                       x = xa *\\<^sub>R i + c) \\<longrightarrow>\n                   ((\\<lambda>xa.\n                        F (x - (x \\<bullet> i) *\\<^sub>R i +\n                           xa *\\<^sub>R i) \\<bullet>\n                        j) has_vector_derivative\n                    F_j_i x)\n                    (at (x \\<bullet> i));\n        a \\<le> x; x \\<le> b\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              F (x *\\<^sub>R i + c) \\<bullet>\n                              j) has_vector_derivative\n                          F_j_i (x *\\<^sub>R i + c))\n                          (at x)", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x. F (x *\\<^sub>R i + c) \\<bullet> j) =\n  (\\<lambda>x. F (c + x *\\<^sub>R i) \\<bullet> j)", "show \"((\\<lambda>x. F(x *\\<^sub>R i + c) \\<bullet> j) has_vector_derivative F_j_i (x *\\<^sub>R i + c)) (at x)\""], ["proof (prove)\nusing this:\n  (\\<lambda>x. F (x *\\<^sub>R i + c) \\<bullet> j) =\n  (\\<lambda>x. F (c + x *\\<^sub>R i) \\<bullet> j)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. F (x *\\<^sub>R i + c) \\<bullet> j) has_vector_derivative\n     F_j_i (x *\\<^sub>R i + c))\n     (at x)", "using 0 and 1"], ["proof (prove)\nusing this:\n  (\\<lambda>x. F (x *\\<^sub>R i + c) \\<bullet> j) =\n  (\\<lambda>x. F (c + x *\\<^sub>R i) \\<bullet> j)\n  ((\\<lambda>x. F (c + x *\\<^sub>R i) \\<bullet> j) has_vector_derivative\n   F_j_i (x *\\<^sub>R i + c))\n   (at x)\n  (\\<lambda>x. F (x *\\<^sub>R i + c) \\<bullet> j) =\n  (\\<lambda>x. F (c + x *\\<^sub>R i) \\<bullet> j)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. F (x *\\<^sub>R i + c) \\<bullet> j) has_vector_derivative\n     F_j_i (x *\\<^sub>R i + c))\n     (at x)", "by auto"], ["proof (state)\nthis:\n  ((\\<lambda>x. F (x *\\<^sub>R i + c) \\<bullet> j) has_vector_derivative\n   F_j_i (x *\\<^sub>R i + c))\n   (at x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>cbox a b.\n     ((\\<lambda>x. F (x *\\<^sub>R i + c) \\<bullet> j) has_vector_derivative\n      F_j_i (x *\\<^sub>R i + c))\n      (at x)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. F_j_i (x *\\<^sub>R i + c)) has_integral\n     F (b *\\<^sub>R i + c) \\<bullet> j - F (a *\\<^sub>R i + c) \\<bullet> j)\n     (cbox a b)", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>cbox a b.\n     ((\\<lambda>x. F (x *\\<^sub>R i + c) \\<bullet> j) has_vector_derivative\n      F_j_i (x *\\<^sub>R i + c))\n      (at x)", "have \"\\<forall>x\\<in> (cbox a b).  ((\\<lambda>x. F(x *\\<^sub>R i + c) \\<bullet> j) has_vector_derivative (F_j_i( x *\\<^sub>R i + c))) (at_within x (cbox a b))\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>cbox a b.\n     ((\\<lambda>x. F (x *\\<^sub>R i + c) \\<bullet> j) has_vector_derivative\n      F_j_i (x *\\<^sub>R i + c))\n      (at x)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>cbox a b.\n       ((\\<lambda>x.\n            F (x *\\<^sub>R i + c) \\<bullet> j) has_vector_derivative\n        F_j_i (x *\\<^sub>R i + c))\n        (at x within cbox a b)", "using has_vector_derivative_at_within"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>cbox a b.\n     ((\\<lambda>x. F (x *\\<^sub>R i + c) \\<bullet> j) has_vector_derivative\n      F_j_i (x *\\<^sub>R i + c))\n      (at x)\n  (?f has_vector_derivative ?f') (at ?x) \\<Longrightarrow>\n  (?f has_vector_derivative ?f') (at ?x within ?S)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>cbox a b.\n       ((\\<lambda>x.\n            F (x *\\<^sub>R i + c) \\<bullet> j) has_vector_derivative\n        F_j_i (x *\\<^sub>R i + c))\n        (at x within cbox a b)", "by blast"], ["proof (state)\nthis:\n  \\<forall>x\\<in>cbox a b.\n     ((\\<lambda>x. F (x *\\<^sub>R i + c) \\<bullet> j) has_vector_derivative\n      F_j_i (x *\\<^sub>R i + c))\n      (at x within cbox a b)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. F_j_i (x *\\<^sub>R i + c)) has_integral\n     F (b *\\<^sub>R i + c) \\<bullet> j - F (a *\\<^sub>R i + c) \\<bullet> j)\n     (cbox a b)", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>cbox a b.\n     ((\\<lambda>x. F (x *\\<^sub>R i + c) \\<bullet> j) has_vector_derivative\n      F_j_i (x *\\<^sub>R i + c))\n      (at x within cbox a b)", "show \"( (\\<lambda>x. F_j_i( x *\\<^sub>R i + c)) has_integral\n             F(b *\\<^sub>R i + c) \\<bullet> j - F(a *\\<^sub>R i + c) \\<bullet> j) (cbox a b)\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>cbox a b.\n     ((\\<lambda>x. F (x *\\<^sub>R i + c) \\<bullet> j) has_vector_derivative\n      F_j_i (x *\\<^sub>R i + c))\n      (at x within cbox a b)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. F_j_i (x *\\<^sub>R i + c)) has_integral\n     F (b *\\<^sub>R i + c) \\<bullet> j - F (a *\\<^sub>R i + c) \\<bullet> j)\n     (cbox a b)", "using fundamental_theorem_of_calculus[of \"a\" \"b\" \"(\\<lambda>x::real.  F(x *\\<^sub>R i + c) \\<bullet> j)\" \"(\\<lambda>x::real. F_j_i( x *\\<^sub>R i + c))\"] and\n      a_leq_b"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>cbox a b.\n     ((\\<lambda>x. F (x *\\<^sub>R i + c) \\<bullet> j) has_vector_derivative\n      F_j_i (x *\\<^sub>R i + c))\n      (at x within cbox a b)\n  \\<lbrakk>a \\<le> b;\n   \\<And>x.\n      x \\<in> {a..b} \\<Longrightarrow>\n      ((\\<lambda>x. F (x *\\<^sub>R i + c) \\<bullet> j) has_vector_derivative\n       F_j_i (x *\\<^sub>R i + c))\n       (at x within {a..b})\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x. F_j_i (x *\\<^sub>R i + c)) has_integral\n                     F (b *\\<^sub>R i + c) \\<bullet> j -\n                     F (a *\\<^sub>R i + c) \\<bullet> j)\n                     {a..b}\n  a \\<le> b\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. F_j_i (x *\\<^sub>R i + c)) has_integral\n     F (b *\\<^sub>R i + c) \\<bullet> j - F (a *\\<^sub>R i + c) \\<bullet> j)\n     (cbox a b)", "by auto"], ["proof (state)\nthis:\n  ((\\<lambda>x. F_j_i (x *\\<^sub>R i + c)) has_integral\n   F (b *\\<^sub>R i + c) \\<bullet> j - F (a *\\<^sub>R i + c) \\<bullet> j)\n   (cbox a b)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fundamental_theorem_of_calculus_partial_vector_gen:\n  fixes k1 k2:: \"real\" and\n    F:: \"('a::euclidean_space \\<Rightarrow> 'b::euclidean_space)\" and\n    i:: \"'a\" and\n    F_i:: \"('a::euclidean_space \\<Rightarrow> 'b)\"\n  assumes a_leq_b: \"k1 \\<le> k2\" and\n    unit_len: \"i \\<bullet> i = 1\" and\n    no_i_component: \"c \\<bullet> i = 0 \" and\n    has_partial_deriv: \"\\<forall>p \\<in> D. has_partial_vector_derivative F i (F_i p) p\" and\n    domain_subset_of_D: \"{v. \\<exists>x. k1 \\<le> x \\<and> x \\<le> k2 \\<and> v = x *\\<^sub>R i + c} \\<subseteq> D\"\n  shows \"( (\\<lambda>x. F_i( x *\\<^sub>R i + c)) has_integral\n                                        F(k2 *\\<^sub>R i + c) - F(k1 *\\<^sub>R i + c)) (cbox k1 k2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. F_i (x *\\<^sub>R i + c)) has_integral\n     F (k2 *\\<^sub>R i + c) - F (k1 *\\<^sub>R i + c))\n     (cbox k1 k2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. F_i (x *\\<^sub>R i + c)) has_integral\n     F (k2 *\\<^sub>R i + c) - F (k1 *\\<^sub>R i + c))\n     (cbox k1 k2)", "let ?domain = \"{v. \\<exists>x. k1 \\<le> x \\<and> x \\<le> k2 \\<and> v = x *\\<^sub>R i + c}\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. F_i (x *\\<^sub>R i + c)) has_integral\n     F (k2 *\\<^sub>R i + c) - F (k1 *\\<^sub>R i + c))\n     (cbox k1 k2)", "have \"\\<forall>x\\<in> ?domain.  has_partial_vector_derivative F i (F_i x) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>{v. \\<exists>x\\<ge>k1.\n                          x \\<le> k2 \\<and> v = x *\\<^sub>R i + c}.\n       has_partial_vector_derivative F i (F_i x) x", "using has_partial_deriv domain_subset_of_D"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>D. has_partial_vector_derivative F i (F_i p) p\n  {v. \\<exists>x\\<ge>k1. x \\<le> k2 \\<and> v = x *\\<^sub>R i + c}\n  \\<subseteq> D\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>{v. \\<exists>x\\<ge>k1.\n                          x \\<le> k2 \\<and> v = x *\\<^sub>R i + c}.\n       has_partial_vector_derivative F i (F_i x) x", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>{v. \\<exists>x\\<ge>k1.\n                        x \\<le> k2 \\<and> v = x *\\<^sub>R i + c}.\n     has_partial_vector_derivative F i (F_i x) x\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. F_i (x *\\<^sub>R i + c)) has_integral\n     F (k2 *\\<^sub>R i + c) - F (k1 *\\<^sub>R i + c))\n     (cbox k1 k2)", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>{v. \\<exists>x\\<ge>k1.\n                        x \\<le> k2 \\<and> v = x *\\<^sub>R i + c}.\n     has_partial_vector_derivative F i (F_i x) x", "have \"\\<forall>x\\<in> (cbox k1 k2).  ((\\<lambda>x. F(x *\\<^sub>R i + c)) has_vector_derivative (F_i( x *\\<^sub>R i + c))) (at x)\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>{v. \\<exists>x\\<ge>k1.\n                        x \\<le> k2 \\<and> v = x *\\<^sub>R i + c}.\n     has_partial_vector_derivative F i (F_i x) x\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>cbox k1 k2.\n       ((\\<lambda>x. F (x *\\<^sub>R i + c)) has_vector_derivative\n        F_i (x *\\<^sub>R i + c))\n        (at x)", "proof (clarsimp simp add: has_partial_vector_derivative_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   (\\<exists>xa\\<ge>k1.\n                       xa \\<le> k2 \\<and>\n                       x = xa *\\<^sub>R i + c) \\<longrightarrow>\n                   ((\\<lambda>xa.\n                        F (x - (x \\<bullet> i) *\\<^sub>R i +\n                           xa *\\<^sub>R i)) has_vector_derivative\n                    F_i x)\n                    (at (x \\<bullet> i));\n        k1 \\<le> x; x \\<le> k2\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              F (x *\\<^sub>R i + c)) has_vector_derivative\n                          F_i (x *\\<^sub>R i + c))\n                          (at x)", "fix x::real"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   (\\<exists>xa\\<ge>k1.\n                       xa \\<le> k2 \\<and>\n                       x = xa *\\<^sub>R i + c) \\<longrightarrow>\n                   ((\\<lambda>xa.\n                        F (x - (x \\<bullet> i) *\\<^sub>R i +\n                           xa *\\<^sub>R i)) has_vector_derivative\n                    F_i x)\n                    (at (x \\<bullet> i));\n        k1 \\<le> x; x \\<le> k2\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              F (x *\\<^sub>R i + c)) has_vector_derivative\n                          F_i (x *\\<^sub>R i + c))\n                          (at x)", "assume range_of_x: \"k1 \\<le> x\" \"x \\<le> k2\""], ["proof (state)\nthis:\n  k1 \\<le> x\n  x \\<le> k2\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   (\\<exists>xa\\<ge>k1.\n                       xa \\<le> k2 \\<and>\n                       x = xa *\\<^sub>R i + c) \\<longrightarrow>\n                   ((\\<lambda>xa.\n                        F (x - (x \\<bullet> i) *\\<^sub>R i +\n                           xa *\\<^sub>R i)) has_vector_derivative\n                    F_i x)\n                    (at (x \\<bullet> i));\n        k1 \\<le> x; x \\<le> k2\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              F (x *\\<^sub>R i + c)) has_vector_derivative\n                          F_i (x *\\<^sub>R i + c))\n                          (at x)", "assume ass2: \"\\<forall>x. (\\<exists>z\\<ge>k1. z \\<le> k2 \\<and> x = z *\\<^sub>R i + c) \\<longrightarrow>\n                     ((\\<lambda>z. F(x - (x \\<bullet> i) *\\<^sub>R i + z *\\<^sub>R i)) has_vector_derivative F_i x) (at (x \\<bullet> i))\""], ["proof (state)\nthis:\n  \\<forall>x.\n     (\\<exists>z\\<ge>k1.\n         z \\<le> k2 \\<and> x = z *\\<^sub>R i + c) \\<longrightarrow>\n     ((\\<lambda>z.\n          F (x - (x \\<bullet> i) *\\<^sub>R i +\n             z *\\<^sub>R i)) has_vector_derivative\n      F_i x)\n      (at (x \\<bullet> i))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   (\\<exists>xa\\<ge>k1.\n                       xa \\<le> k2 \\<and>\n                       x = xa *\\<^sub>R i + c) \\<longrightarrow>\n                   ((\\<lambda>xa.\n                        F (x - (x \\<bullet> i) *\\<^sub>R i +\n                           xa *\\<^sub>R i)) has_vector_derivative\n                    F_i x)\n                    (at (x \\<bullet> i));\n        k1 \\<le> x; x \\<le> k2\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              F (x *\\<^sub>R i + c)) has_vector_derivative\n                          F_i (x *\\<^sub>R i + c))\n                          (at x)", "have \"((\\<lambda>z. F((x *\\<^sub>R i + c) - ((x *\\<^sub>R i + c) \\<bullet> i) *\\<^sub>R i + z *\\<^sub>R i)) has_vector_derivative F_i (x *\\<^sub>R i + c)) (at ((x *\\<^sub>R i + c) \\<bullet> i)) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>z.\n         F (x *\\<^sub>R i + c -\n            ((x *\\<^sub>R i + c) \\<bullet> i) *\\<^sub>R i +\n            z *\\<^sub>R i)) has_vector_derivative\n     F_i (x *\\<^sub>R i + c))\n     (at ((x *\\<^sub>R i + c) \\<bullet> i))", "using range_of_x ass2"], ["proof (prove)\nusing this:\n  k1 \\<le> x\n  x \\<le> k2\n  \\<forall>x.\n     (\\<exists>z\\<ge>k1.\n         z \\<le> k2 \\<and> x = z *\\<^sub>R i + c) \\<longrightarrow>\n     ((\\<lambda>z.\n          F (x - (x \\<bullet> i) *\\<^sub>R i +\n             z *\\<^sub>R i)) has_vector_derivative\n      F_i x)\n      (at (x \\<bullet> i))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>z.\n         F (x *\\<^sub>R i + c -\n            ((x *\\<^sub>R i + c) \\<bullet> i) *\\<^sub>R i +\n            z *\\<^sub>R i)) has_vector_derivative\n     F_i (x *\\<^sub>R i + c))\n     (at ((x *\\<^sub>R i + c) \\<bullet> i))", "by auto"], ["proof (state)\nthis:\n  ((\\<lambda>z.\n       F (x *\\<^sub>R i + c -\n          ((x *\\<^sub>R i + c) \\<bullet> i) *\\<^sub>R i +\n          z *\\<^sub>R i)) has_vector_derivative\n   F_i (x *\\<^sub>R i + c))\n   (at ((x *\\<^sub>R i + c) \\<bullet> i))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   (\\<exists>xa\\<ge>k1.\n                       xa \\<le> k2 \\<and>\n                       x = xa *\\<^sub>R i + c) \\<longrightarrow>\n                   ((\\<lambda>xa.\n                        F (x - (x \\<bullet> i) *\\<^sub>R i +\n                           xa *\\<^sub>R i)) has_vector_derivative\n                    F_i x)\n                    (at (x \\<bullet> i));\n        k1 \\<le> x; x \\<le> k2\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              F (x *\\<^sub>R i + c)) has_vector_derivative\n                          F_i (x *\\<^sub>R i + c))\n                          (at x)", "then"], ["proof (chain)\npicking this:\n  ((\\<lambda>z.\n       F (x *\\<^sub>R i + c -\n          ((x *\\<^sub>R i + c) \\<bullet> i) *\\<^sub>R i +\n          z *\\<^sub>R i)) has_vector_derivative\n   F_i (x *\\<^sub>R i + c))\n   (at ((x *\\<^sub>R i + c) \\<bullet> i))", "have 0: \"((\\<lambda>x. F( c + x *\\<^sub>R i)) has_vector_derivative F_i (x *\\<^sub>R i + c)) (at x)\""], ["proof (prove)\nusing this:\n  ((\\<lambda>z.\n       F (x *\\<^sub>R i + c -\n          ((x *\\<^sub>R i + c) \\<bullet> i) *\\<^sub>R i +\n          z *\\<^sub>R i)) has_vector_derivative\n   F_i (x *\\<^sub>R i + c))\n   (at ((x *\\<^sub>R i + c) \\<bullet> i))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. F (c + x *\\<^sub>R i)) has_vector_derivative\n     F_i (x *\\<^sub>R i + c))\n     (at x)", "by (simp add: inner_commute inner_right_distrib no_i_component unit_len)"], ["proof (state)\nthis:\n  ((\\<lambda>x. F (c + x *\\<^sub>R i)) has_vector_derivative\n   F_i (x *\\<^sub>R i + c))\n   (at x)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   (\\<exists>xa\\<ge>k1.\n                       xa \\<le> k2 \\<and>\n                       x = xa *\\<^sub>R i + c) \\<longrightarrow>\n                   ((\\<lambda>xa.\n                        F (x - (x \\<bullet> i) *\\<^sub>R i +\n                           xa *\\<^sub>R i)) has_vector_derivative\n                    F_i x)\n                    (at (x \\<bullet> i));\n        k1 \\<le> x; x \\<le> k2\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              F (x *\\<^sub>R i + c)) has_vector_derivative\n                          F_i (x *\\<^sub>R i + c))\n                          (at x)", "have 1: \"(\\<lambda>x. F(x *\\<^sub>R i + c)) = (\\<lambda>x. F(c + x *\\<^sub>R i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. F (x *\\<^sub>R i + c)) =\n    (\\<lambda>x. F (c + x *\\<^sub>R i))", "by (simp add: add.commute)"], ["proof (state)\nthis:\n  (\\<lambda>x. F (x *\\<^sub>R i + c)) = (\\<lambda>x. F (c + x *\\<^sub>R i))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   (\\<exists>xa\\<ge>k1.\n                       xa \\<le> k2 \\<and>\n                       x = xa *\\<^sub>R i + c) \\<longrightarrow>\n                   ((\\<lambda>xa.\n                        F (x - (x \\<bullet> i) *\\<^sub>R i +\n                           xa *\\<^sub>R i)) has_vector_derivative\n                    F_i x)\n                    (at (x \\<bullet> i));\n        k1 \\<le> x; x \\<le> k2\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              F (x *\\<^sub>R i + c)) has_vector_derivative\n                          F_i (x *\\<^sub>R i + c))\n                          (at x)", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x. F (x *\\<^sub>R i + c)) = (\\<lambda>x. F (c + x *\\<^sub>R i))", "show \"((\\<lambda>x. F(x *\\<^sub>R i + c)) has_vector_derivative F_i (x *\\<^sub>R i + c)) (at x)\""], ["proof (prove)\nusing this:\n  (\\<lambda>x. F (x *\\<^sub>R i + c)) = (\\<lambda>x. F (c + x *\\<^sub>R i))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. F (x *\\<^sub>R i + c)) has_vector_derivative\n     F_i (x *\\<^sub>R i + c))\n     (at x)", "using 0 and 1"], ["proof (prove)\nusing this:\n  (\\<lambda>x. F (x *\\<^sub>R i + c)) = (\\<lambda>x. F (c + x *\\<^sub>R i))\n  ((\\<lambda>x. F (c + x *\\<^sub>R i)) has_vector_derivative\n   F_i (x *\\<^sub>R i + c))\n   (at x)\n  (\\<lambda>x. F (x *\\<^sub>R i + c)) = (\\<lambda>x. F (c + x *\\<^sub>R i))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. F (x *\\<^sub>R i + c)) has_vector_derivative\n     F_i (x *\\<^sub>R i + c))\n     (at x)", "by auto"], ["proof (state)\nthis:\n  ((\\<lambda>x. F (x *\\<^sub>R i + c)) has_vector_derivative\n   F_i (x *\\<^sub>R i + c))\n   (at x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>cbox k1 k2.\n     ((\\<lambda>x. F (x *\\<^sub>R i + c)) has_vector_derivative\n      F_i (x *\\<^sub>R i + c))\n      (at x)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. F_i (x *\\<^sub>R i + c)) has_integral\n     F (k2 *\\<^sub>R i + c) - F (k1 *\\<^sub>R i + c))\n     (cbox k1 k2)", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>cbox k1 k2.\n     ((\\<lambda>x. F (x *\\<^sub>R i + c)) has_vector_derivative\n      F_i (x *\\<^sub>R i + c))\n      (at x)", "have \"\\<forall>x\\<in> (cbox k1 k2).  ((\\<lambda>x. F(x *\\<^sub>R i + c) ) has_vector_derivative (F_i( x *\\<^sub>R i + c))) (at_within x (cbox k1 k2))\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>cbox k1 k2.\n     ((\\<lambda>x. F (x *\\<^sub>R i + c)) has_vector_derivative\n      F_i (x *\\<^sub>R i + c))\n      (at x)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>cbox k1 k2.\n       ((\\<lambda>x. F (x *\\<^sub>R i + c)) has_vector_derivative\n        F_i (x *\\<^sub>R i + c))\n        (at x within cbox k1 k2)", "using has_vector_derivative_at_within"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>cbox k1 k2.\n     ((\\<lambda>x. F (x *\\<^sub>R i + c)) has_vector_derivative\n      F_i (x *\\<^sub>R i + c))\n      (at x)\n  (?f has_vector_derivative ?f') (at ?x) \\<Longrightarrow>\n  (?f has_vector_derivative ?f') (at ?x within ?S)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>cbox k1 k2.\n       ((\\<lambda>x. F (x *\\<^sub>R i + c)) has_vector_derivative\n        F_i (x *\\<^sub>R i + c))\n        (at x within cbox k1 k2)", "by blast"], ["proof (state)\nthis:\n  \\<forall>x\\<in>cbox k1 k2.\n     ((\\<lambda>x. F (x *\\<^sub>R i + c)) has_vector_derivative\n      F_i (x *\\<^sub>R i + c))\n      (at x within cbox k1 k2)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. F_i (x *\\<^sub>R i + c)) has_integral\n     F (k2 *\\<^sub>R i + c) - F (k1 *\\<^sub>R i + c))\n     (cbox k1 k2)", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>cbox k1 k2.\n     ((\\<lambda>x. F (x *\\<^sub>R i + c)) has_vector_derivative\n      F_i (x *\\<^sub>R i + c))\n      (at x within cbox k1 k2)", "show \"( (\\<lambda>x. F_i( x *\\<^sub>R i + c)) has_integral\n                                        F(k2 *\\<^sub>R i + c) - F(k1 *\\<^sub>R i + c)) (cbox k1 k2)\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>cbox k1 k2.\n     ((\\<lambda>x. F (x *\\<^sub>R i + c)) has_vector_derivative\n      F_i (x *\\<^sub>R i + c))\n      (at x within cbox k1 k2)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. F_i (x *\\<^sub>R i + c)) has_integral\n     F (k2 *\\<^sub>R i + c) - F (k1 *\\<^sub>R i + c))\n     (cbox k1 k2)", "using fundamental_theorem_of_calculus[of \"k1\" \"k2\" \"(\\<lambda>x::real.  F(x *\\<^sub>R i + c))\" \"(\\<lambda>x::real. F_i( x *\\<^sub>R i + c))\"] and\n      a_leq_b"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>cbox k1 k2.\n     ((\\<lambda>x. F (x *\\<^sub>R i + c)) has_vector_derivative\n      F_i (x *\\<^sub>R i + c))\n      (at x within cbox k1 k2)\n  \\<lbrakk>k1 \\<le> k2;\n   \\<And>x.\n      x \\<in> {k1..k2} \\<Longrightarrow>\n      ((\\<lambda>x. F (x *\\<^sub>R i + c)) has_vector_derivative\n       F_i (x *\\<^sub>R i + c))\n       (at x within {k1..k2})\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x. F_i (x *\\<^sub>R i + c)) has_integral\n                     F (k2 *\\<^sub>R i + c) - F (k1 *\\<^sub>R i + c))\n                     {k1..k2}\n  k1 \\<le> k2\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. F_i (x *\\<^sub>R i + c)) has_integral\n     F (k2 *\\<^sub>R i + c) - F (k1 *\\<^sub>R i + c))\n     (cbox k1 k2)", "by auto"], ["proof (state)\nthis:\n  ((\\<lambda>x. F_i (x *\\<^sub>R i + c)) has_integral\n   F (k2 *\\<^sub>R i + c) - F (k1 *\\<^sub>R i + c))\n   (cbox k1 k2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma add_scale_img:\n  assumes \"a < b\" shows \"(\\<lambda>x::real. a + (b - a) * x) ` {0 .. 1} = {a .. b}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}", "using assms"], ["proof (prove)\nusing this:\n  a < b\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}", "apply (auto simp: algebra_simps affine_ineq image_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>a < b; 0 \\<le> xa; xa \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> xa * a \\<le> xa * b\n 2. \\<And>x.\n       \\<lbrakk>a < b; a \\<le> x; x \\<le> b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>{0..1}. x + xa * a = a + xa * b", "using less_eq_real_def"], ["proof (prove)\nusing this:\n  (?x \\<le> ?y) = (?x < ?y \\<or> ?x = ?y)\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>a < b; 0 \\<le> xa; xa \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> xa * a \\<le> xa * b\n 2. \\<And>x.\n       \\<lbrakk>a < b; a \\<le> x; x \\<le> b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>{0..1}. x + xa * a = a + xa * b", "apply force"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>a < b; a \\<le> x; x \\<le> b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>{0..1}. x + xa * a = a + xa * b", "apply (rule_tac x=\"(x-a)/(b-a)\" in bexI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a < b; a \\<le> x; x \\<le> b\\<rbrakk>\n       \\<Longrightarrow> x + (x - a) / (b - a) * a =\n                         a + (x - a) / (b - a) * b\n 2. \\<And>x.\n       \\<lbrakk>a < b; a \\<le> x; x \\<le> b\\<rbrakk>\n       \\<Longrightarrow> (x - a) / (b - a) \\<in> {0..1}", "apply (auto simp: field_simps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma add_scale_img':\n  assumes \"a \\<le> b\"\n  shows \"(\\<lambda>x::real. a + (b - a) * x) ` {0 .. 1} = {a .. b}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}", "proof (cases \"a = b\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a = b \\<Longrightarrow> (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}\n 2. a \\<noteq> b \\<Longrightarrow>\n    (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}", "case True"], ["proof (state)\nthis:\n  a = b\n\ngoal (2 subgoals):\n 1. a = b \\<Longrightarrow> (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}\n 2. a \\<noteq> b \\<Longrightarrow>\n    (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}", "then"], ["proof (chain)\npicking this:\n  a = b", "show ?thesis"], ["proof (prove)\nusing this:\n  a = b\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}", "by force"], ["proof (state)\nthis:\n  (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}\n\ngoal (1 subgoal):\n 1. a \\<noteq> b \\<Longrightarrow>\n    (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<noteq> b \\<Longrightarrow>\n    (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}", "case False"], ["proof (state)\nthis:\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. a \\<noteq> b \\<Longrightarrow>\n    (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}", "then"], ["proof (chain)\npicking this:\n  a \\<noteq> b", "show ?thesis"], ["proof (prove)\nusing this:\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}", "using add_scale_img assms"], ["proof (prove)\nusing this:\n  a \\<noteq> b\n  ?a < ?b \\<Longrightarrow>\n  (\\<lambda>x. ?a + (?b - ?a) * x) ` {0..1} = {?a..?b}\n  a \\<le> b\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}\n\ngoal:\nNo subgoals!", "qed"], ["", "definition analytically_valid:: \"'a::euclidean_space set \\<Rightarrow> ('a \\<Rightarrow> 'b::{euclidean_space,times,one}) \\<Rightarrow> 'a \\<Rightarrow> bool\" where\n  \"analytically_valid s F i \\<equiv>\n       (\\<forall>a \\<in> s. partially_vector_differentiable F i a) \\<and>\n       continuous_on s F \\<and> \\<comment> \\<open>TODO: should we replace this with saying that \\<open>F\\<close> is partially diffrerentiable on \\<open>Dy\\<close>,\\<close>\n                           \\<comment> \\<open>i.e. there is a partial derivative on every dimension\\<close>\n       integrable lborel (\\<lambda>p. (partial_vector_derivative F i) p * indicator s p) \\<and>\n       (\\<lambda>x. integral UNIV (\\<lambda>y. (partial_vector_derivative F i (y *\\<^sub>R i + x *\\<^sub>R (\\<Sum> b \\<in>(Basis - {i}). b)))\n            * (indicator s (y *\\<^sub>R i + x *\\<^sub>R (\\<Sum>b \\<in> Basis - {i}. b)) ))) \\<in> borel_measurable lborel\""], ["", "(*(\\<lambda>x. integral UNIV (\\<lambda>y. ((partial_vector_derivative F i) (y, x)) * (indicator s (y, x)))) \\<in> borel_measurable lborel)\"*)"], ["", "lemma analytically_valid_imp_part_deriv_integrable_on:\n  assumes \"analytically_valid (s::(real*real) set) (f::(real*real)\\<Rightarrow> real) i\"\n  shows \"(partial_vector_derivative f i) integrable_on s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_vector_derivative f i integrable_on s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. partial_vector_derivative f i integrable_on s", "have \"integrable lborel (\\<lambda>p. partial_vector_derivative f i p * indicator s p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integrable lborel\n     (\\<lambda>p. partial_vector_derivative f i p * indicat_real s p)", "using assms"], ["proof (prove)\nusing this:\n  analytically_valid s f i\n\ngoal (1 subgoal):\n 1. integrable lborel\n     (\\<lambda>p. partial_vector_derivative f i p * indicat_real s p)", "by(simp add:  analytically_valid_def indic_ident)"], ["proof (state)\nthis:\n  integrable lborel\n   (\\<lambda>p. partial_vector_derivative f i p * indicat_real s p)\n\ngoal (1 subgoal):\n 1. partial_vector_derivative f i integrable_on s", "then"], ["proof (chain)\npicking this:\n  integrable lborel\n   (\\<lambda>p. partial_vector_derivative f i p * indicat_real s p)", "have \"integrable lborel (\\<lambda>p::(real*real). if p \\<in> s then partial_vector_derivative f i p else 0)\""], ["proof (prove)\nusing this:\n  integrable lborel\n   (\\<lambda>p. partial_vector_derivative f i p * indicat_real s p)\n\ngoal (1 subgoal):\n 1. integrable lborel\n     (\\<lambda>p. if p \\<in> s then partial_vector_derivative f i p else 0)", "using indic_ident[of \"partial_vector_derivative f i\"]"], ["proof (prove)\nusing this:\n  integrable lborel\n   (\\<lambda>p. partial_vector_derivative f i p * indicat_real s p)\n  (\\<lambda>x. partial_vector_derivative f i x * indicat_real ?s x) =\n  (\\<lambda>x. if x \\<in> ?s then partial_vector_derivative f i x else 0)\n\ngoal (1 subgoal):\n 1. integrable lborel\n     (\\<lambda>p. if p \\<in> s then partial_vector_derivative f i p else 0)", "by (simp add: indic_ident)"], ["proof (state)\nthis:\n  integrable lborel\n   (\\<lambda>p. if p \\<in> s then partial_vector_derivative f i p else 0)\n\ngoal (1 subgoal):\n 1. partial_vector_derivative f i integrable_on s", "then"], ["proof (chain)\npicking this:\n  integrable lborel\n   (\\<lambda>p. if p \\<in> s then partial_vector_derivative f i p else 0)", "have \"(\\<lambda>x. if x \\<in> s then partial_vector_derivative f i x else 0) integrable_on UNIV\""], ["proof (prove)\nusing this:\n  integrable lborel\n   (\\<lambda>p. if p \\<in> s then partial_vector_derivative f i p else 0)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        if x \\<in> s then partial_vector_derivative f i x\n        else 0) integrable_on\n    UNIV", "using Equivalence_Lebesgue_Henstock_Integration.integrable_on_lborel"], ["proof (prove)\nusing this:\n  integrable lborel\n   (\\<lambda>p. if p \\<in> s then partial_vector_derivative f i p else 0)\n  integrable lborel ?f \\<Longrightarrow> ?f integrable_on UNIV\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        if x \\<in> s then partial_vector_derivative f i x\n        else 0) integrable_on\n    UNIV", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      if x \\<in> s then partial_vector_derivative f i x\n      else 0) integrable_on\n  UNIV\n\ngoal (1 subgoal):\n 1. partial_vector_derivative f i integrable_on s", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x.\n      if x \\<in> s then partial_vector_derivative f i x\n      else 0) integrable_on\n  UNIV", "show \"(partial_vector_derivative f i) integrable_on s\""], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      if x \\<in> s then partial_vector_derivative f i x\n      else 0) integrable_on\n  UNIV\n\ngoal (1 subgoal):\n 1. partial_vector_derivative f i integrable_on s", "using integrable_restrict_UNIV"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      if x \\<in> s then partial_vector_derivative f i x\n      else 0) integrable_on\n  UNIV\n  ((\\<lambda>x. if x \\<in> ?s then ?f x else (0::?'a)) integrable_on UNIV) =\n  (?f integrable_on ?s)\n\ngoal (1 subgoal):\n 1. partial_vector_derivative f i integrable_on s", "by auto"], ["proof (state)\nthis:\n  partial_vector_derivative f i integrable_on s\n\ngoal:\nNo subgoals!", "qed"], ["", "(*******************************************************************************)"], ["", "definition typeII_twoCube :: \"((real * real) \\<Rightarrow> (real * real)) \\<Rightarrow> bool\" where\n  \"typeII_twoCube twoC\n         \\<equiv> \\<exists>a b g1 g2. a < b \\<and> (\\<forall>x \\<in> {a..b}. g2 x \\<le> g1 x) \\<and>\n                       twoC = (\\<lambda>(y, x). ((1 - y) * (g2 ((1-x)*a + x*b)) + y * (g1 ((1-x)*a + x*b)),\n                                        (1-x)*a + x*b)) \\<and>\n                       g1 piecewise_C1_differentiable_on {a .. b} \\<and>\n                       g2 piecewise_C1_differentiable_on {a .. b}\""], ["", "abbreviation unit_cube where \"unit_cube \\<equiv> cbox (0,0) (1::real,1::real)\""], ["", "definition cubeImage:: \"two_cube \\<Rightarrow> ((real*real) set)\" where\n  \"cubeImage twoC \\<equiv> (twoC ` unit_cube)\""], ["", "lemma typeII_twoCubeImg:\n  assumes \"typeII_twoCube twoC\"\n  shows \"\\<exists>a b g1 g2. a < b \\<and> (\\<forall>x \\<in> {a .. b}. g2 x \\<le> g1 x) \\<and>\n                      cubeImage twoC = {(y,x). x \\<in> {a..b} \\<and> y \\<in> {g2 x .. g1 x}}\n                      \\<and> twoC = (\\<lambda>(y, x). ((1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b), (1 - x) * a + x * b))\n                      \\<and> g1 piecewise_C1_differentiable_on {a .. b} \\<and> g2 piecewise_C1_differentiable_on {a .. b} \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(y, x). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(y, x).\n           ((1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b),\n            (1 - x) * a + x * b)) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b}", "using assms"], ["proof (prove)\nusing this:\n  typeII_twoCube twoC\n\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(y, x). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(y, x).\n           ((1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b),\n            (1 - x) * a + x * b)) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b}", "proof (simp add: typeII_twoCube_def cubeImage_def image_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       a < b \\<and>\n       (\\<exists>g1 g2.\n           (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n           twoC =\n           (\\<lambda>(y, x).\n               ((1 - y) * g2 ((1 - x) * a + x * b) +\n                y * g1 ((1 - x) * a + x * b),\n                (1 - x) * a + x * b)) \\<and>\n           g1 piecewise_C1_differentiable_on {a..b} \\<and>\n           g2 piecewise_C1_differentiable_on {a..b}) \\<Longrightarrow>\n    \\<exists>a b.\n       a < b \\<and>\n       (\\<exists>g1 g2.\n           (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n           {y. \\<exists>x\\<in>unit_cube. y = twoC x} =\n           {(y, x).\n            a \\<le> x \\<and>\n            x \\<le> b \\<and> g2 x \\<le> y \\<and> y \\<le> g1 x} \\<and>\n           twoC =\n           (\\<lambda>(y, x).\n               ((1 - y) * g2 ((1 - x) * a + x * b) +\n                y * g1 ((1 - x) * a + x * b),\n                (1 - x) * a + x * b)) \\<and>\n           g1 piecewise_C1_differentiable_on {a..b} \\<and>\n           g2 piecewise_C1_differentiable_on {a..b})", "assume \" \\<exists>a b. a < b \\<and> (\\<exists>g1 g2. (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n                            twoC = (\\<lambda>(y, x). ((1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b), (1 - x) * a + x * b)) \\<and>\n                            g1 piecewise_C1_differentiable_on {a..b} \\<and> g2 piecewise_C1_differentiable_on {a..b})\""], ["proof (state)\nthis:\n  \\<exists>a b.\n     a < b \\<and>\n     (\\<exists>g1 g2.\n         (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n         twoC =\n         (\\<lambda>(y, x).\n             ((1 - y) * g2 ((1 - x) * a + x * b) +\n              y * g1 ((1 - x) * a + x * b),\n              (1 - x) * a + x * b)) \\<and>\n         g1 piecewise_C1_differentiable_on {a..b} \\<and>\n         g2 piecewise_C1_differentiable_on {a..b})\n\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       a < b \\<and>\n       (\\<exists>g1 g2.\n           (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n           twoC =\n           (\\<lambda>(y, x).\n               ((1 - y) * g2 ((1 - x) * a + x * b) +\n                y * g1 ((1 - x) * a + x * b),\n                (1 - x) * a + x * b)) \\<and>\n           g1 piecewise_C1_differentiable_on {a..b} \\<and>\n           g2 piecewise_C1_differentiable_on {a..b}) \\<Longrightarrow>\n    \\<exists>a b.\n       a < b \\<and>\n       (\\<exists>g1 g2.\n           (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n           {y. \\<exists>x\\<in>unit_cube. y = twoC x} =\n           {(y, x).\n            a \\<le> x \\<and>\n            x \\<le> b \\<and> g2 x \\<le> y \\<and> y \\<le> g1 x} \\<and>\n           twoC =\n           (\\<lambda>(y, x).\n               ((1 - y) * g2 ((1 - x) * a + x * b) +\n                y * g1 ((1 - x) * a + x * b),\n                (1 - x) * a + x * b)) \\<and>\n           g1 piecewise_C1_differentiable_on {a..b} \\<and>\n           g2 piecewise_C1_differentiable_on {a..b})", "then"], ["proof (chain)\npicking this:\n  \\<exists>a b.\n     a < b \\<and>\n     (\\<exists>g1 g2.\n         (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n         twoC =\n         (\\<lambda>(y, x).\n             ((1 - y) * g2 ((1 - x) * a + x * b) +\n              y * g1 ((1 - x) * a + x * b),\n              (1 - x) * a + x * b)) \\<and>\n         g1 piecewise_C1_differentiable_on {a..b} \\<and>\n         g2 piecewise_C1_differentiable_on {a..b})", "obtain a b g1 g2 where\n    twoCisTypeII: \"a < b\"\n    \"(\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x)\"\n    \"twoC = (\\<lambda>(y, x). ((1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b), (1 - x) * a + x * b))\"\n    \"g1 piecewise_C1_differentiable_on {a .. b}\"\n    \"g2 piecewise_C1_differentiable_on {a .. b}\""], ["proof (prove)\nusing this:\n  \\<exists>a b.\n     a < b \\<and>\n     (\\<exists>g1 g2.\n         (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n         twoC =\n         (\\<lambda>(y, x).\n             ((1 - y) * g2 ((1 - x) * a + x * b) +\n              y * g1 ((1 - x) * a + x * b),\n              (1 - x) * a + x * b)) \\<and>\n         g1 piecewise_C1_differentiable_on {a..b} \\<and>\n         g2 piecewise_C1_differentiable_on {a..b})\n\ngoal (1 subgoal):\n 1. (\\<And>a b g2 g1.\n        \\<lbrakk>a < b; \\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x;\n         twoC =\n         (\\<lambda>(y, x).\n             ((1 - y) * g2 ((1 - x) * a + x * b) +\n              y * g1 ((1 - x) * a + x * b),\n              (1 - x) * a + x * b));\n         g1 piecewise_C1_differentiable_on {a..b};\n         g2 piecewise_C1_differentiable_on {a..b}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  a < b\n  \\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x\n  twoC =\n  (\\<lambda>(y, x).\n      ((1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b),\n       (1 - x) * a + x * b))\n  g1 piecewise_C1_differentiable_on {a..b}\n  g2 piecewise_C1_differentiable_on {a..b}\n\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       a < b \\<and>\n       (\\<exists>g1 g2.\n           (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n           twoC =\n           (\\<lambda>(y, x).\n               ((1 - y) * g2 ((1 - x) * a + x * b) +\n                y * g1 ((1 - x) * a + x * b),\n                (1 - x) * a + x * b)) \\<and>\n           g1 piecewise_C1_differentiable_on {a..b} \\<and>\n           g2 piecewise_C1_differentiable_on {a..b}) \\<Longrightarrow>\n    \\<exists>a b.\n       a < b \\<and>\n       (\\<exists>g1 g2.\n           (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n           {y. \\<exists>x\\<in>unit_cube. y = twoC x} =\n           {(y, x).\n            a \\<le> x \\<and>\n            x \\<le> b \\<and> g2 x \\<le> y \\<and> y \\<le> g1 x} \\<and>\n           twoC =\n           (\\<lambda>(y, x).\n               ((1 - y) * g2 ((1 - x) * a + x * b) +\n                y * g1 ((1 - x) * a + x * b),\n                (1 - x) * a + x * b)) \\<and>\n           g1 piecewise_C1_differentiable_on {a..b} \\<and>\n           g2 piecewise_C1_differentiable_on {a..b})", "have ab1: \"a - x * a + x * b \\<le> b\" if a1: \"0 \\<le> x\" \"x \\<le> 1\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. a - x * a + x * b \\<le> b", "using that"], ["proof (prove)\nusing this:\n  0 \\<le> x\n  x \\<le> 1\n\ngoal (1 subgoal):\n 1. a - x * a + x * b \\<le> b", "apply (simp add: algebra_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> x; x \\<le> 1\\<rbrakk>\n    \\<Longrightarrow> a + b * x \\<le> b + a * x", "by (metis affine_ineq less_eq_real_def mult.commute twoCisTypeII(1))"], ["proof (state)\nthis:\n  \\<lbrakk>0 \\<le> ?x; ?x \\<le> 1\\<rbrakk>\n  \\<Longrightarrow> a - ?x * a + ?x * b \\<le> b\n\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       a < b \\<and>\n       (\\<exists>g1 g2.\n           (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n           twoC =\n           (\\<lambda>(y, x).\n               ((1 - y) * g2 ((1 - x) * a + x * b) +\n                y * g1 ((1 - x) * a + x * b),\n                (1 - x) * a + x * b)) \\<and>\n           g1 piecewise_C1_differentiable_on {a..b} \\<and>\n           g2 piecewise_C1_differentiable_on {a..b}) \\<Longrightarrow>\n    \\<exists>a b.\n       a < b \\<and>\n       (\\<exists>g1 g2.\n           (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n           {y. \\<exists>x\\<in>unit_cube. y = twoC x} =\n           {(y, x).\n            a \\<le> x \\<and>\n            x \\<le> b \\<and> g2 x \\<le> y \\<and> y \\<le> g1 x} \\<and>\n           twoC =\n           (\\<lambda>(y, x).\n               ((1 - y) * g2 ((1 - x) * a + x * b) +\n                y * g1 ((1 - x) * a + x * b),\n                (1 - x) * a + x * b)) \\<and>\n           g1 piecewise_C1_differentiable_on {a..b} \\<and>\n           g2 piecewise_C1_differentiable_on {a..b})", "have ex: \"\\<exists>z\\<in>Green.unit_cube.\n               (d, c) =\n               (case z of\n                (y, x) \\<Rightarrow>\n                  (g2 (a - x * a + x * b) - y * g2 (a - x * a + x * b) + y * g1 (a - x * a + x * b),\n                   a - x * a + x * b))\" \n    if c_bounds: \"a \\<le> c\" \"c \\<le> b\" and d_bounds: \"g2 c \\<le> d\" \"d \\<le> g1 c\" for c d"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>unit_cube.\n       (d, c) =\n       (case z of\n        (y, x) \\<Rightarrow>\n          (g2 (a - x * a + x * b) - y * g2 (a - x * a + x * b) +\n           y * g1 (a - x * a + x * b),\n           a - x * a + x * b))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>unit_cube.\n       (d, c) =\n       (case z of\n        (y, x) \\<Rightarrow>\n          (g2 (a - x * a + x * b) - y * g2 (a - x * a + x * b) +\n           y * g1 (a - x * a + x * b),\n           a - x * a + x * b))", "have b_minus_a_nzero: \"b - a \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b - a \\<noteq> 0", "using twoCisTypeII(1)"], ["proof (prove)\nusing this:\n  a < b\n\ngoal (1 subgoal):\n 1. b - a \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  b - a \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>unit_cube.\n       (d, c) =\n       (case z of\n        (y, x) \\<Rightarrow>\n          (g2 (a - x * a + x * b) - y * g2 (a - x * a + x * b) +\n           y * g1 (a - x * a + x * b),\n           a - x * a + x * b))", "have x_witness: \"\\<exists>k1. c = (1 - k1)*a + k1 * b \\<and> 0 \\<le> k1 \\<and> k1 \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k1.\n       c = (1 - k1) * a + k1 * b \\<and> 0 \\<le> k1 \\<and> k1 \\<le> 1", "apply (rule_tac x=\"(c - a)/(b - a)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. c = (1 - (c - a) / (b - a)) * a + (c - a) / (b - a) * b \\<and>\n    0 \\<le> (c - a) / (b - a) \\<and> (c - a) / (b - a) \\<le> 1", "using c_bounds \\<open>a < b\\<close>"], ["proof (prove)\nusing this:\n  a \\<le> c\n  c \\<le> b\n  a < b\n\ngoal (1 subgoal):\n 1. c = (1 - (c - a) / (b - a)) * a + (c - a) / (b - a) * b \\<and>\n    0 \\<le> (c - a) / (b - a) \\<and> (c - a) / (b - a) \\<le> 1", "apply (simp add: divide_simps algebra_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> c; c \\<le> b; a < b\\<rbrakk>\n    \\<Longrightarrow> a * a + b * b = a * (b * 2) \\<longrightarrow> c = 0", "using sum_sqs_eq"], ["proof (prove)\nusing this:\n  ?x * ?x + ?y * ?y = ?x * (?y * (2::?'a)) \\<Longrightarrow> ?y = ?x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> c; c \\<le> b; a < b\\<rbrakk>\n    \\<Longrightarrow> a * a + b * b = a * (b * 2) \\<longrightarrow> c = 0", "by blast"], ["proof (state)\nthis:\n  \\<exists>k1. c = (1 - k1) * a + k1 * b \\<and> 0 \\<le> k1 \\<and> k1 \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>unit_cube.\n       (d, c) =\n       (case z of\n        (y, x) \\<Rightarrow>\n          (g2 (a - x * a + x * b) - y * g2 (a - x * a + x * b) +\n           y * g1 (a - x * a + x * b),\n           a - x * a + x * b))", "have y_witness: \"\\<exists>k2. d = (1 - k2)*(g2 c) + k2 * (g1 c) \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k2.\n       d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1", "proof (cases \"g1 c - g2 c = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. g1 c - g2 c = 0 \\<Longrightarrow>\n    \\<exists>k2.\n       d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1\n 2. g1 c - g2 c \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>k2.\n       d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1", "case True"], ["proof (state)\nthis:\n  g1 c - g2 c = 0\n\ngoal (2 subgoals):\n 1. g1 c - g2 c = 0 \\<Longrightarrow>\n    \\<exists>k2.\n       d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1\n 2. g1 c - g2 c \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>k2.\n       d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1", "with d_bounds"], ["proof (chain)\npicking this:\n  g2 c \\<le> d\n  d \\<le> g1 c\n  g1 c - g2 c = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  g2 c \\<le> d\n  d \\<le> g1 c\n  g1 c - g2 c = 0\n\ngoal (1 subgoal):\n 1. \\<exists>k2.\n       d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1", "by (fastforce simp add: algebra_simps)"], ["proof (state)\nthis:\n  \\<exists>k2.\n     d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1\n\ngoal (1 subgoal):\n 1. g1 c - g2 c \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>k2.\n       d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. g1 c - g2 c \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>k2.\n       d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1", "case False"], ["proof (state)\nthis:\n  g1 c - g2 c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. g1 c - g2 c \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>k2.\n       d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1", "let ?k2 = \"(d - g2 c)/(g1 c - g2 c)\""], ["proof (state)\ngoal (1 subgoal):\n 1. g1 c - g2 c \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>k2.\n       d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1", "have k2_in_bounds: \"0 \\<le> ?k2 \\<and> ?k2 \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> (d - g2 c) / (g1 c - g2 c) \\<and>\n    (d - g2 c) / (g1 c - g2 c) \\<le> 1", "using twoCisTypeII(2) c_bounds d_bounds False"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x\n  a \\<le> c\n  c \\<le> b\n  g2 c \\<le> d\n  d \\<le> g1 c\n  g1 c - g2 c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 \\<le> (d - g2 c) / (g1 c - g2 c) \\<and>\n    (d - g2 c) / (g1 c - g2 c) \\<le> 1", "by simp"], ["proof (state)\nthis:\n  0 \\<le> (d - g2 c) / (g1 c - g2 c) \\<and>\n  (d - g2 c) / (g1 c - g2 c) \\<le> 1\n\ngoal (1 subgoal):\n 1. g1 c - g2 c \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>k2.\n       d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1", "have \"d = (1 - ?k2) * g2 c + ?k2 * g1 c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d =\n    (1 - (d - g2 c) / (g1 c - g2 c)) * g2 c +\n    (d - g2 c) / (g1 c - g2 c) * g1 c", "using False sum_sqs_eq"], ["proof (prove)\nusing this:\n  g1 c - g2 c \\<noteq> 0\n  ?x * ?x + ?y * ?y = ?x * (?y * (2::?'a)) \\<Longrightarrow> ?y = ?x\n\ngoal (1 subgoal):\n 1. d =\n    (1 - (d - g2 c) / (g1 c - g2 c)) * g2 c +\n    (d - g2 c) / (g1 c - g2 c) * g1 c", "by (fastforce simp add: divide_simps algebra_simps)"], ["proof (state)\nthis:\n  d =\n  (1 - (d - g2 c) / (g1 c - g2 c)) * g2 c +\n  (d - g2 c) / (g1 c - g2 c) * g1 c\n\ngoal (1 subgoal):\n 1. g1 c - g2 c \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>k2.\n       d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1", "with k2_in_bounds"], ["proof (chain)\npicking this:\n  0 \\<le> (d - g2 c) / (g1 c - g2 c) \\<and>\n  (d - g2 c) / (g1 c - g2 c) \\<le> 1\n  d =\n  (1 - (d - g2 c) / (g1 c - g2 c)) * g2 c +\n  (d - g2 c) / (g1 c - g2 c) * g1 c", "show ?thesis"], ["proof (prove)\nusing this:\n  0 \\<le> (d - g2 c) / (g1 c - g2 c) \\<and>\n  (d - g2 c) / (g1 c - g2 c) \\<le> 1\n  d =\n  (1 - (d - g2 c) / (g1 c - g2 c)) * g2 c +\n  (d - g2 c) / (g1 c - g2 c) * g1 c\n\ngoal (1 subgoal):\n 1. \\<exists>k2.\n       d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>k2.\n     d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>k2.\n     d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>unit_cube.\n       (d, c) =\n       (case z of\n        (y, x) \\<Rightarrow>\n          (g2 (a - x * a + x * b) - y * g2 (a - x * a + x * b) +\n           y * g1 (a - x * a + x * b),\n           a - x * a + x * b))", "show \"\\<exists>x\\<in>unit_cube. (d, c) = (case x of (y, x) \\<Rightarrow> (g2 (a - x * a + x * b) - y * g2 (a - x * a + x * b) + y * g1 (a - x * a + x * b), a - x * a + x * b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>unit_cube.\n       (d, c) =\n       (case x of\n        (y, x) \\<Rightarrow>\n          (g2 (a - x * a + x * b) - y * g2 (a - x * a + x * b) +\n           y * g1 (a - x * a + x * b),\n           a - x * a + x * b))", "using x_witness y_witness"], ["proof (prove)\nusing this:\n  \\<exists>k1. c = (1 - k1) * a + k1 * b \\<and> 0 \\<le> k1 \\<and> k1 \\<le> 1\n  \\<exists>k2.\n     d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>unit_cube.\n       (d, c) =\n       (case x of\n        (y, x) \\<Rightarrow>\n          (g2 (a - x * a + x * b) - y * g2 (a - x * a + x * b) +\n           y * g1 (a - x * a + x * b),\n           a - x * a + x * b))", "by (force simp add: left_diff_distrib)"], ["proof (state)\nthis:\n  \\<exists>x\\<in>unit_cube.\n     (d, c) =\n     (case x of\n      (y, x) \\<Rightarrow>\n        (g2 (a - x * a + x * b) - y * g2 (a - x * a + x * b) +\n         y * g1 (a - x * a + x * b),\n         a - x * a + x * b))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>a \\<le> ?c; ?c \\<le> b; g2 ?c \\<le> ?d; ?d \\<le> g1 ?c\\<rbrakk>\n  \\<Longrightarrow> \\<exists>z\\<in>unit_cube.\n                       (?d, ?c) =\n                       (case z of\n                        (y, x) \\<Rightarrow>\n                          (g2 (a - x * a + x * b) -\n                           y * g2 (a - x * a + x * b) +\n                           y * g1 (a - x * a + x * b),\n                           a - x * a + x * b))\n\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       a < b \\<and>\n       (\\<exists>g1 g2.\n           (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n           twoC =\n           (\\<lambda>(y, x).\n               ((1 - y) * g2 ((1 - x) * a + x * b) +\n                y * g1 ((1 - x) * a + x * b),\n                (1 - x) * a + x * b)) \\<and>\n           g1 piecewise_C1_differentiable_on {a..b} \\<and>\n           g2 piecewise_C1_differentiable_on {a..b}) \\<Longrightarrow>\n    \\<exists>a b.\n       a < b \\<and>\n       (\\<exists>g1 g2.\n           (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n           {y. \\<exists>x\\<in>unit_cube. y = twoC x} =\n           {(y, x).\n            a \\<le> x \\<and>\n            x \\<le> b \\<and> g2 x \\<le> y \\<and> y \\<le> g1 x} \\<and>\n           twoC =\n           (\\<lambda>(y, x).\n               ((1 - y) * g2 ((1 - x) * a + x * b) +\n                y * g1 ((1 - x) * a + x * b),\n                (1 - x) * a + x * b)) \\<and>\n           g1 piecewise_C1_differentiable_on {a..b} \\<and>\n           g2 piecewise_C1_differentiable_on {a..b})", "have \"{y. \\<exists>x\\<in>unit_cube. y = twoC x} = {(y, x). a \\<le> x \\<and> x \\<le> b \\<and> g2 x \\<le> y \\<and> y \\<le> g1 x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>unit_cube. y = twoC x} =\n    {(y, x).\n     a \\<le> x \\<and> x \\<le> b \\<and> g2 x \\<le> y \\<and> y \\<le> g1 x}", "apply (auto simp add: twoCisTypeII ab1 left_diff_distrib ex)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba.\n       \\<lbrakk>0 \\<le> aa; aa \\<le> 1; 0 \\<le> ba; ba \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> ba * a \\<le> ba * b\n 2. \\<And>aa ba.\n       \\<lbrakk>0 \\<le> aa; aa \\<le> 1; 0 \\<le> ba; ba \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> aa * g2 (a - ba * a + ba * b)\n                         \\<le> aa * g1 (a - ba * a + ba * b)\n 3. \\<And>aa ba.\n       \\<lbrakk>0 \\<le> aa; aa \\<le> 1; 0 \\<le> ba; ba \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> g2 (a - ba * a + ba * b) -\n                         aa * g2 (a - ba * a + ba * b) +\n                         aa * g1 (a - ba * a + ba * b)\n                         \\<le> g1 (a - ba * a + ba * b)", "using order.order_iff_strict twoCisTypeII(1)"], ["proof (prove)\nusing this:\n  (?a \\<le> ?b) = (?a < ?b \\<or> ?a = ?b)\n  a < b\n\ngoal (3 subgoals):\n 1. \\<And>aa ba.\n       \\<lbrakk>0 \\<le> aa; aa \\<le> 1; 0 \\<le> ba; ba \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> ba * a \\<le> ba * b\n 2. \\<And>aa ba.\n       \\<lbrakk>0 \\<le> aa; aa \\<le> 1; 0 \\<le> ba; ba \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> aa * g2 (a - ba * a + ba * b)\n                         \\<le> aa * g1 (a - ba * a + ba * b)\n 3. \\<And>aa ba.\n       \\<lbrakk>0 \\<le> aa; aa \\<le> 1; 0 \\<le> ba; ba \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> g2 (a - ba * a + ba * b) -\n                         aa * g2 (a - ba * a + ba * b) +\n                         aa * g1 (a - ba * a + ba * b)\n                         \\<le> g1 (a - ba * a + ba * b)", "apply fastforce"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba.\n       \\<lbrakk>0 \\<le> aa; aa \\<le> 1; 0 \\<le> ba; ba \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> aa * g2 (a - ba * a + ba * b)\n                         \\<le> aa * g1 (a - ba * a + ba * b)\n 2. \\<And>aa ba.\n       \\<lbrakk>0 \\<le> aa; aa \\<le> 1; 0 \\<le> ba; ba \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> g2 (a - ba * a + ba * b) -\n                         aa * g2 (a - ba * a + ba * b) +\n                         aa * g1 (a - ba * a + ba * b)\n                         \\<le> g1 (a - ba * a + ba * b)", "apply (smt affine_ineq atLeastAtMost_iff mult_left_mono twoCisTypeII)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {y. \\<exists>x\\<in>unit_cube. y = twoC x} =\n  {(y, x).\n   a \\<le> x \\<and> x \\<le> b \\<and> g2 x \\<le> y \\<and> y \\<le> g1 x}\n\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       a < b \\<and>\n       (\\<exists>g1 g2.\n           (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n           twoC =\n           (\\<lambda>(y, x).\n               ((1 - y) * g2 ((1 - x) * a + x * b) +\n                y * g1 ((1 - x) * a + x * b),\n                (1 - x) * a + x * b)) \\<and>\n           g1 piecewise_C1_differentiable_on {a..b} \\<and>\n           g2 piecewise_C1_differentiable_on {a..b}) \\<Longrightarrow>\n    \\<exists>a b.\n       a < b \\<and>\n       (\\<exists>g1 g2.\n           (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n           {y. \\<exists>x\\<in>unit_cube. y = twoC x} =\n           {(y, x).\n            a \\<le> x \\<and>\n            x \\<le> b \\<and> g2 x \\<le> y \\<and> y \\<le> g1 x} \\<and>\n           twoC =\n           (\\<lambda>(y, x).\n               ((1 - y) * g2 ((1 - x) * a + x * b) +\n                y * g1 ((1 - x) * a + x * b),\n                (1 - x) * a + x * b)) \\<and>\n           g1 piecewise_C1_differentiable_on {a..b} \\<and>\n           g2 piecewise_C1_differentiable_on {a..b})", "then"], ["proof (chain)\npicking this:\n  {y. \\<exists>x\\<in>unit_cube. y = twoC x} =\n  {(y, x).\n   a \\<le> x \\<and> x \\<le> b \\<and> g2 x \\<le> y \\<and> y \\<le> g1 x}", "show \"\\<exists>a b. a < b \\<and> (\\<exists>g1 g2. (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n                            {y. \\<exists>x\\<in>unit_cube. y = twoC x} = {(y, x). a \\<le> x \\<and> x \\<le> b \\<and> g2 x \\<le> y \\<and> y \\<le> g1 x} \\<and>\n                            twoC = (\\<lambda>(y, x). ((1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b), (1 - x) * a + x * b)) \\<and>\n                            g1 piecewise_C1_differentiable_on {a..b} \\<and> g2 piecewise_C1_differentiable_on {a..b})\""], ["proof (prove)\nusing this:\n  {y. \\<exists>x\\<in>unit_cube. y = twoC x} =\n  {(y, x).\n   a \\<le> x \\<and> x \\<le> b \\<and> g2 x \\<le> y \\<and> y \\<le> g1 x}\n\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       a < b \\<and>\n       (\\<exists>g1 g2.\n           (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n           {y. \\<exists>x\\<in>unit_cube. y = twoC x} =\n           {(y, x).\n            a \\<le> x \\<and>\n            x \\<le> b \\<and> g2 x \\<le> y \\<and> y \\<le> g1 x} \\<and>\n           twoC =\n           (\\<lambda>(y, x).\n               ((1 - y) * g2 ((1 - x) * a + x * b) +\n                y * g1 ((1 - x) * a + x * b),\n                (1 - x) * a + x * b)) \\<and>\n           g1 piecewise_C1_differentiable_on {a..b} \\<and>\n           g2 piecewise_C1_differentiable_on {a..b})", "using twoCisTypeII"], ["proof (prove)\nusing this:\n  {y. \\<exists>x\\<in>unit_cube. y = twoC x} =\n  {(y, x).\n   a \\<le> x \\<and> x \\<le> b \\<and> g2 x \\<le> y \\<and> y \\<le> g1 x}\n  a < b\n  \\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x\n  twoC =\n  (\\<lambda>(y, x).\n      ((1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b),\n       (1 - x) * a + x * b))\n  g1 piecewise_C1_differentiable_on {a..b}\n  g2 piecewise_C1_differentiable_on {a..b}\n\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       a < b \\<and>\n       (\\<exists>g1 g2.\n           (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n           {y. \\<exists>x\\<in>unit_cube. y = twoC x} =\n           {(y, x).\n            a \\<le> x \\<and>\n            x \\<le> b \\<and> g2 x \\<le> y \\<and> y \\<le> g1 x} \\<and>\n           twoC =\n           (\\<lambda>(y, x).\n               ((1 - y) * g2 ((1 - x) * a + x * b) +\n                y * g1 ((1 - x) * a + x * b),\n                (1 - x) * a + x * b)) \\<and>\n           g1 piecewise_C1_differentiable_on {a..b} \\<and>\n           g2 piecewise_C1_differentiable_on {a..b})", "by blast"], ["proof (state)\nthis:\n  \\<exists>a b.\n     a < b \\<and>\n     (\\<exists>g1 g2.\n         (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n         {y. \\<exists>x\\<in>unit_cube. y = twoC x} =\n         {(y, x).\n          a \\<le> x \\<and>\n          x \\<le> b \\<and> g2 x \\<le> y \\<and> y \\<le> g1 x} \\<and>\n         twoC =\n         (\\<lambda>(y, x).\n             ((1 - y) * g2 ((1 - x) * a + x * b) +\n              y * g1 ((1 - x) * a + x * b),\n              (1 - x) * a + x * b)) \\<and>\n         g1 piecewise_C1_differentiable_on {a..b} \\<and>\n         g2 piecewise_C1_differentiable_on {a..b})\n\ngoal:\nNo subgoals!", "qed"], ["", "definition horizontal_boundary :: \"two_cube \\<Rightarrow> one_chain\" where\n  \"horizontal_boundary twoC \\<equiv> {(1, (\\<lambda>x. twoC(x,0))), (-1, (\\<lambda>x. twoC(x,1)))}\""], ["", "definition vertical_boundary :: \"two_cube \\<Rightarrow> one_chain\" where\n  \"vertical_boundary twoC \\<equiv> {(-1, (\\<lambda>y. twoC(0,y))), (1, (\\<lambda>y. twoC(1,y)))}\""], ["", "definition boundary :: \"two_cube \\<Rightarrow> one_chain\" where\n  \"boundary twoC \\<equiv> horizontal_boundary twoC \\<union> vertical_boundary twoC\""], ["", "definition valid_two_cube where\n  \"valid_two_cube twoC \\<equiv> card (boundary twoC) = 4\""], ["", "definition two_chain_integral:: \"two_chain \\<Rightarrow> ((real*real)\\<Rightarrow>(real)) \\<Rightarrow> real\" where\n  \"two_chain_integral twoChain F \\<equiv> \\<Sum>C\\<in>twoChain. (integral (cubeImage C) F)\""], ["", "definition valid_two_chain where\n  \"valid_two_chain twoChain \\<equiv> (\\<forall>twoCube \\<in> twoChain. valid_two_cube twoCube) \\<and> pairwise (\\<lambda>c1 c2. ((boundary c1) \\<inter> (boundary c2)) = {}) twoChain \\<and> inj_on cubeImage twoChain\""], ["", "definition two_chain_boundary:: \"two_chain \\<Rightarrow> one_chain\" where\n  \"two_chain_boundary twoChain == \\<Union>(boundary ` twoChain)\""], ["", "definition gen_division where\n  \"gen_division s S \\<equiv> (finite S \\<and> (\\<Union>S = s) \\<and> pairwise (\\<lambda>X Y. negligible (X \\<inter> Y)) S)\""], ["", "definition two_chain_horizontal_boundary:: \"two_chain \\<Rightarrow> one_chain\" where\n  \"two_chain_horizontal_boundary twoChain  \\<equiv> \\<Union>(horizontal_boundary ` twoChain)\""], ["", "definition two_chain_vertical_boundary:: \"two_chain \\<Rightarrow> one_chain\" where\n  \"two_chain_vertical_boundary twoChain  \\<equiv> \\<Union>(vertical_boundary ` twoChain)\""], ["", "definition only_horizontal_division where\n  \"only_horizontal_division one_chain two_chain \n      \\<equiv> \\<exists>\\<H> \\<V>. finite \\<H> \\<and> finite \\<V> \\<and>\n               (\\<forall>(k,\\<gamma>) \\<in> \\<H>.\n                 (\\<exists>(k', \\<gamma>') \\<in> two_chain_horizontal_boundary two_chain.\n                     (\\<exists>a \\<in> {0..1}. \\<exists>b \\<in> {0..1}. a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>))) \\<and>\n               (common_sudiv_exists (two_chain_vertical_boundary two_chain) \\<V>\n                \\<or> common_reparam_exists \\<V> (two_chain_vertical_boundary two_chain)) \\<and>\n               boundary_chain \\<V> \\<and>\n               one_chain = \\<H> \\<union> \\<V> \\<and> (\\<forall>(k,\\<gamma>)\\<in>\\<V>. valid_path \\<gamma>)\""], ["", "lemma sum_zero_set:\n  assumes \"\\<forall>x \\<in> s. f x = 0\" \"finite s\" \"finite t\"\n  shows \"sum f (s \\<union> t) = sum f t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f (s \\<union> t) = sum f t", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>s. f x = (0::'b)\n  finite s\n  finite t\n\ngoal (1 subgoal):\n 1. sum f (s \\<union> t) = sum f t", "by (simp add: IntE sum.union_inter_neutral sup_commute)"], ["", "abbreviation \"valid_typeII_division s twoChain \\<equiv> ((\\<forall>twoCube \\<in> twoChain. typeII_twoCube twoCube) \\<and>\n                                                (gen_division s (cubeImage ` twoChain)) \\<and>\n                                                (valid_two_chain twoChain))\""], ["", "lemma two_chain_vertical_boundary_is_boundary_chain:\n  shows \"boundary_chain (two_chain_vertical_boundary twoChain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. boundary_chain (two_chain_vertical_boundary twoChain)", "by(simp add: boundary_chain_def two_chain_vertical_boundary_def vertical_boundary_def)"], ["", "lemma two_chain_horizontal_boundary_is_boundary_chain:\n  shows \"boundary_chain (two_chain_horizontal_boundary twoChain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. boundary_chain (two_chain_horizontal_boundary twoChain)", "by(simp add: boundary_chain_def two_chain_horizontal_boundary_def horizontal_boundary_def)"], ["", "definition typeI_twoCube :: \"two_cube \\<Rightarrow> bool\" where\n  \"typeI_twoCube (twoC::two_cube)\n        \\<equiv> \\<exists>a b g1 g2. a < b \\<and> (\\<forall>x \\<in> {a..b}. g2 x \\<le> g1 x) \\<and>\n                       twoC = (\\<lambda>(x,y). ((1-x)*a + x*b,\n                                        (1 - y) * (g2 ((1-x)*a + x*b)) + y * (g1 ((1-x)*a + x*b)))) \\<and>\n                       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n                       g2 piecewise_C1_differentiable_on {a..b}\""], ["", "lemma typeI_twoCubeImg:\n  assumes \"typeI_twoCube twoC\"\n  shows \"\\<exists>a b g1 g2. a < b \\<and> (\\<forall>x \\<in> {a .. b}. g2 x \\<le> g1 x) \\<and>\n                      cubeImage twoC = {(x,y). x \\<in> {a..b} \\<and> y \\<in> {g2 x .. g1 x}} \\<and>\n                      twoC = (\\<lambda>(x, y). ((1 - x) * a + x * b, (1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b))) \\<and>\n                      g1 piecewise_C1_differentiable_on {a .. b} \\<and> g2 piecewise_C1_differentiable_on {a .. b} \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(x, y). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(x, y).\n           ((1 - x) * a + x * b,\n            (1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b))) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(x, y). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(x, y).\n           ((1 - x) * a + x * b,\n            (1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b))) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b}", "have \"\\<exists>a b. a < b \\<and>\n          (\\<exists>g1 g2. (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n                   twoC = (\\<lambda>(x, y). ((1 - x) * a + x * b, (1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b)))\\<and>\n                   g1 piecewise_C1_differentiable_on {a .. b} \\<and> g2 piecewise_C1_differentiable_on {a .. b})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       a < b \\<and>\n       (\\<exists>g1 g2.\n           (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n           twoC =\n           (\\<lambda>(x, y).\n               ((1 - x) * a + x * b,\n                (1 - y) * g2 ((1 - x) * a + x * b) +\n                y * g1 ((1 - x) * a + x * b))) \\<and>\n           g1 piecewise_C1_differentiable_on {a..b} \\<and>\n           g2 piecewise_C1_differentiable_on {a..b})", "using assms"], ["proof (prove)\nusing this:\n  typeI_twoCube twoC\n\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       a < b \\<and>\n       (\\<exists>g1 g2.\n           (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n           twoC =\n           (\\<lambda>(x, y).\n               ((1 - x) * a + x * b,\n                (1 - y) * g2 ((1 - x) * a + x * b) +\n                y * g1 ((1 - x) * a + x * b))) \\<and>\n           g1 piecewise_C1_differentiable_on {a..b} \\<and>\n           g2 piecewise_C1_differentiable_on {a..b})", "by (simp add: typeI_twoCube_def)"], ["proof (state)\nthis:\n  \\<exists>a b.\n     a < b \\<and>\n     (\\<exists>g1 g2.\n         (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n         twoC =\n         (\\<lambda>(x, y).\n             ((1 - x) * a + x * b,\n              (1 - y) * g2 ((1 - x) * a + x * b) +\n              y * g1 ((1 - x) * a + x * b))) \\<and>\n         g1 piecewise_C1_differentiable_on {a..b} \\<and>\n         g2 piecewise_C1_differentiable_on {a..b})\n\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(x, y). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(x, y).\n           ((1 - x) * a + x * b,\n            (1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b))) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b}", "then"], ["proof (chain)\npicking this:\n  \\<exists>a b.\n     a < b \\<and>\n     (\\<exists>g1 g2.\n         (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n         twoC =\n         (\\<lambda>(x, y).\n             ((1 - x) * a + x * b,\n              (1 - y) * g2 ((1 - x) * a + x * b) +\n              y * g1 ((1 - x) * a + x * b))) \\<and>\n         g1 piecewise_C1_differentiable_on {a..b} \\<and>\n         g2 piecewise_C1_differentiable_on {a..b})", "obtain a b g1 g2 where\n    twoCisTypeI: \"a < b\"\n        \"(\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x)\"\n        \"twoC = (\\<lambda>(x, y). ((1 - x) * a + x * b, (1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b)))\"\n        \"g1 piecewise_C1_differentiable_on {a .. b}\"\n        \"g2 piecewise_C1_differentiable_on {a .. b}\""], ["proof (prove)\nusing this:\n  \\<exists>a b.\n     a < b \\<and>\n     (\\<exists>g1 g2.\n         (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n         twoC =\n         (\\<lambda>(x, y).\n             ((1 - x) * a + x * b,\n              (1 - y) * g2 ((1 - x) * a + x * b) +\n              y * g1 ((1 - x) * a + x * b))) \\<and>\n         g1 piecewise_C1_differentiable_on {a..b} \\<and>\n         g2 piecewise_C1_differentiable_on {a..b})\n\ngoal (1 subgoal):\n 1. (\\<And>a b g2 g1.\n        \\<lbrakk>a < b; \\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x;\n         twoC =\n         (\\<lambda>(x, y).\n             ((1 - x) * a + x * b,\n              (1 - y) * g2 ((1 - x) * a + x * b) +\n              y * g1 ((1 - x) * a + x * b)));\n         g1 piecewise_C1_differentiable_on {a..b};\n         g2 piecewise_C1_differentiable_on {a..b}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  a < b\n  \\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x\n  twoC =\n  (\\<lambda>(x, y).\n      ((1 - x) * a + x * b,\n       (1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b)))\n  g1 piecewise_C1_differentiable_on {a..b}\n  g2 piecewise_C1_differentiable_on {a..b}\n\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(x, y). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(x, y).\n           ((1 - x) * a + x * b,\n            (1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b))) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b}", "have ex: \"\\<exists>z\\<in>Green.unit_cube.\n               (c, d) =\n               (case z of\n                (x, y) \\<Rightarrow>\n                  (a - x * a + x * b,\n                   g2 (a - x * a + x * b) - y * g2 (a - x * a + x * b) + y * g1 (a - x * a + x * b)))\"\n    if c_bounds: \"a \\<le> c\" \"c \\<le> b\" and  d_bounds: \"g2 c \\<le> d\" \"d \\<le> g1 c\" for c d"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>unit_cube.\n       (c, d) =\n       (case z of\n        (x, y) \\<Rightarrow>\n          (a - x * a + x * b,\n           g2 (a - x * a + x * b) - y * g2 (a - x * a + x * b) +\n           y * g1 (a - x * a + x * b)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>unit_cube.\n       (c, d) =\n       (case z of\n        (x, y) \\<Rightarrow>\n          (a - x * a + x * b,\n           g2 (a - x * a + x * b) - y * g2 (a - x * a + x * b) +\n           y * g1 (a - x * a + x * b)))", "have x_witness: \"\\<exists>k1. c = (1 - k1)*a + k1 * b \\<and> 0 \\<le> k1 \\<and> k1 \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k1.\n       c = (1 - k1) * a + k1 * b \\<and> 0 \\<le> k1 \\<and> k1 \\<le> 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k1.\n       c = (1 - k1) * a + k1 * b \\<and> 0 \\<le> k1 \\<and> k1 \\<le> 1", "let ?k1 = \"(c - a)/(b - a)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k1.\n       c = (1 - k1) * a + k1 * b \\<and> 0 \\<le> k1 \\<and> k1 \\<le> 1", "have k1_in_bounds: \"0 \\<le> (c - a)/(b - a) \\<and> (c - a)/(b - a) \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> (c - a) / (b - a) \\<and> (c - a) / (b - a) \\<le> 1", "using twoCisTypeI(1) c_bounds"], ["proof (prove)\nusing this:\n  a < b\n  a \\<le> c\n  c \\<le> b\n\ngoal (1 subgoal):\n 1. 0 \\<le> (c - a) / (b - a) \\<and> (c - a) / (b - a) \\<le> 1", "by simp"], ["proof (state)\nthis:\n  0 \\<le> (c - a) / (b - a) \\<and> (c - a) / (b - a) \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<exists>k1.\n       c = (1 - k1) * a + k1 * b \\<and> 0 \\<le> k1 \\<and> k1 \\<le> 1", "have \"c = (1 - ?k1)*a + ?k1 * b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c = (1 - (c - a) / (b - a)) * a + (c - a) / (b - a) * b", "using twoCisTypeI(1) sum_sqs_eq"], ["proof (prove)\nusing this:\n  a < b\n  ?x * ?x + ?y * ?y = ?x * (?y * (2::?'a)) \\<Longrightarrow> ?y = ?x\n\ngoal (1 subgoal):\n 1. c = (1 - (c - a) / (b - a)) * a + (c - a) / (b - a) * b", "by (auto simp add: divide_simps algebra_simps)"], ["proof (state)\nthis:\n  c = (1 - (c - a) / (b - a)) * a + (c - a) / (b - a) * b\n\ngoal (1 subgoal):\n 1. \\<exists>k1.\n       c = (1 - k1) * a + k1 * b \\<and> 0 \\<le> k1 \\<and> k1 \\<le> 1", "then"], ["proof (chain)\npicking this:\n  c = (1 - (c - a) / (b - a)) * a + (c - a) / (b - a) * b", "show ?thesis"], ["proof (prove)\nusing this:\n  c = (1 - (c - a) / (b - a)) * a + (c - a) / (b - a) * b\n\ngoal (1 subgoal):\n 1. \\<exists>k1.\n       c = (1 - k1) * a + k1 * b \\<and> 0 \\<le> k1 \\<and> k1 \\<le> 1", "using twoCisTypeI k1_in_bounds"], ["proof (prove)\nusing this:\n  c = (1 - (c - a) / (b - a)) * a + (c - a) / (b - a) * b\n  a < b\n  \\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x\n  twoC =\n  (\\<lambda>(x, y).\n      ((1 - x) * a + x * b,\n       (1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b)))\n  g1 piecewise_C1_differentiable_on {a..b}\n  g2 piecewise_C1_differentiable_on {a..b}\n  0 \\<le> (c - a) / (b - a) \\<and> (c - a) / (b - a) \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<exists>k1.\n       c = (1 - k1) * a + k1 * b \\<and> 0 \\<le> k1 \\<and> k1 \\<le> 1", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>k1. c = (1 - k1) * a + k1 * b \\<and> 0 \\<le> k1 \\<and> k1 \\<le> 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>k1. c = (1 - k1) * a + k1 * b \\<and> 0 \\<le> k1 \\<and> k1 \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>unit_cube.\n       (c, d) =\n       (case z of\n        (x, y) \\<Rightarrow>\n          (a - x * a + x * b,\n           g2 (a - x * a + x * b) - y * g2 (a - x * a + x * b) +\n           y * g1 (a - x * a + x * b)))", "have y_witness: \"\\<exists>k2. d = (1 - k2)*(g2 c) + k2 * (g1 c) \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k2.\n       d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1", "proof (cases \"g1 c - g2 c = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. g1 c - g2 c = 0 \\<Longrightarrow>\n    \\<exists>k2.\n       d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1\n 2. g1 c - g2 c \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>k2.\n       d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1", "case True"], ["proof (state)\nthis:\n  g1 c - g2 c = 0\n\ngoal (2 subgoals):\n 1. g1 c - g2 c = 0 \\<Longrightarrow>\n    \\<exists>k2.\n       d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1\n 2. g1 c - g2 c \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>k2.\n       d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1", "with d_bounds"], ["proof (chain)\npicking this:\n  g2 c \\<le> d\n  d \\<le> g1 c\n  g1 c - g2 c = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  g2 c \\<le> d\n  d \\<le> g1 c\n  g1 c - g2 c = 0\n\ngoal (1 subgoal):\n 1. \\<exists>k2.\n       d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1", "by force"], ["proof (state)\nthis:\n  \\<exists>k2.\n     d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1\n\ngoal (1 subgoal):\n 1. g1 c - g2 c \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>k2.\n       d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. g1 c - g2 c \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>k2.\n       d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1", "case False"], ["proof (state)\nthis:\n  g1 c - g2 c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. g1 c - g2 c \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>k2.\n       d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1", "let ?k2 = \"(d - g2 c)/(g1 c - g2 c)\""], ["proof (state)\ngoal (1 subgoal):\n 1. g1 c - g2 c \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>k2.\n       d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1", "have k2_in_bounds: \"0 \\<le> ?k2 \\<and> ?k2 \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> (d - g2 c) / (g1 c - g2 c) \\<and>\n    (d - g2 c) / (g1 c - g2 c) \\<le> 1", "using twoCisTypeI(2) c_bounds d_bounds False"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x\n  a \\<le> c\n  c \\<le> b\n  g2 c \\<le> d\n  d \\<le> g1 c\n  g1 c - g2 c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 \\<le> (d - g2 c) / (g1 c - g2 c) \\<and>\n    (d - g2 c) / (g1 c - g2 c) \\<le> 1", "by simp"], ["proof (state)\nthis:\n  0 \\<le> (d - g2 c) / (g1 c - g2 c) \\<and>\n  (d - g2 c) / (g1 c - g2 c) \\<le> 1\n\ngoal (1 subgoal):\n 1. g1 c - g2 c \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>k2.\n       d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1", "have \"d = (1 - ?k2) * g2 c + ?k2 * g1 c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d =\n    (1 - (d - g2 c) / (g1 c - g2 c)) * g2 c +\n    (d - g2 c) / (g1 c - g2 c) * g1 c", "using False"], ["proof (prove)\nusing this:\n  g1 c - g2 c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. d =\n    (1 - (d - g2 c) / (g1 c - g2 c)) * g2 c +\n    (d - g2 c) / (g1 c - g2 c) * g1 c", "apply (simp add: divide_simps algebra_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. g1 c \\<noteq> g2 c \\<Longrightarrow>\n    g1 c * g1 c + g2 c * g2 c = g1 c * (g2 c * 2) \\<longrightarrow> d = 0", "using sum_sqs_eq"], ["proof (prove)\nusing this:\n  ?x * ?x + ?y * ?y = ?x * (?y * (2::?'a)) \\<Longrightarrow> ?y = ?x\n\ngoal (1 subgoal):\n 1. g1 c \\<noteq> g2 c \\<Longrightarrow>\n    g1 c * g1 c + g2 c * g2 c = g1 c * (g2 c * 2) \\<longrightarrow> d = 0", "by fastforce"], ["proof (state)\nthis:\n  d =\n  (1 - (d - g2 c) / (g1 c - g2 c)) * g2 c +\n  (d - g2 c) / (g1 c - g2 c) * g1 c\n\ngoal (1 subgoal):\n 1. g1 c - g2 c \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>k2.\n       d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1", "then"], ["proof (chain)\npicking this:\n  d =\n  (1 - (d - g2 c) / (g1 c - g2 c)) * g2 c +\n  (d - g2 c) / (g1 c - g2 c) * g1 c", "show ?thesis"], ["proof (prove)\nusing this:\n  d =\n  (1 - (d - g2 c) / (g1 c - g2 c)) * g2 c +\n  (d - g2 c) / (g1 c - g2 c) * g1 c\n\ngoal (1 subgoal):\n 1. \\<exists>k2.\n       d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1", "using k2_in_bounds"], ["proof (prove)\nusing this:\n  d =\n  (1 - (d - g2 c) / (g1 c - g2 c)) * g2 c +\n  (d - g2 c) / (g1 c - g2 c) * g1 c\n  0 \\<le> (d - g2 c) / (g1 c - g2 c) \\<and>\n  (d - g2 c) / (g1 c - g2 c) \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<exists>k2.\n       d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>k2.\n     d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>k2.\n     d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>unit_cube.\n       (c, d) =\n       (case z of\n        (x, y) \\<Rightarrow>\n          (a - x * a + x * b,\n           g2 (a - x * a + x * b) - y * g2 (a - x * a + x * b) +\n           y * g1 (a - x * a + x * b)))", "show \"\\<exists>x\\<in>unit_cube. (c, d) =\n            (case x of (x, y) \\<Rightarrow> (a - x * a + x * b, g2 (a - x * a + x * b) - y * g2 (a - x * a + x * b) + y * g1 (a - x * a + x * b)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>unit_cube.\n       (c, d) =\n       (case x of\n        (x, y) \\<Rightarrow>\n          (a - x * a + x * b,\n           g2 (a - x * a + x * b) - y * g2 (a - x * a + x * b) +\n           y * g1 (a - x * a + x * b)))", "using x_witness y_witness"], ["proof (prove)\nusing this:\n  \\<exists>k1. c = (1 - k1) * a + k1 * b \\<and> 0 \\<le> k1 \\<and> k1 \\<le> 1\n  \\<exists>k2.\n     d = (1 - k2) * g2 c + k2 * g1 c \\<and> 0 \\<le> k2 \\<and> k2 \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>unit_cube.\n       (c, d) =\n       (case x of\n        (x, y) \\<Rightarrow>\n          (a - x * a + x * b,\n           g2 (a - x * a + x * b) - y * g2 (a - x * a + x * b) +\n           y * g1 (a - x * a + x * b)))", "by (force simp add: left_diff_distrib)"], ["proof (state)\nthis:\n  \\<exists>x\\<in>unit_cube.\n     (c, d) =\n     (case x of\n      (x, y) \\<Rightarrow>\n        (a - x * a + x * b,\n         g2 (a - x * a + x * b) - y * g2 (a - x * a + x * b) +\n         y * g1 (a - x * a + x * b)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>a \\<le> ?c; ?c \\<le> b; g2 ?c \\<le> ?d; ?d \\<le> g1 ?c\\<rbrakk>\n  \\<Longrightarrow> \\<exists>z\\<in>unit_cube.\n                       (?c, ?d) =\n                       (case z of\n                        (x, y) \\<Rightarrow>\n                          (a - x * a + x * b,\n                           g2 (a - x * a + x * b) -\n                           y * g2 (a - x * a + x * b) +\n                           y * g1 (a - x * a + x * b)))\n\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(x, y). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(x, y).\n           ((1 - x) * a + x * b,\n            (1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b))) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b}", "have \"{y. \\<exists>x\\<in>unit_cube. y = twoC x} = {(x, y). a \\<le> x \\<and> x \\<le> b \\<and> g2 x \\<le> y \\<and> y \\<le> g1 x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>unit_cube. y = twoC x} =\n    {(x, y).\n     a \\<le> x \\<and> x \\<le> b \\<and> g2 x \\<le> y \\<and> y \\<le> g1 x}", "apply (auto simp add: twoCisTypeI left_diff_distrib ex)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ba.\n       \\<lbrakk>0 \\<le> aa; aa \\<le> 1; 0 \\<le> ba; ba \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> aa * a \\<le> aa * b\n 2. \\<And>aa ba.\n       \\<lbrakk>0 \\<le> aa; aa \\<le> 1; 0 \\<le> ba; ba \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> a - aa * a + aa * b \\<le> b\n 3. \\<And>aa ba.\n       \\<lbrakk>0 \\<le> aa; aa \\<le> 1; 0 \\<le> ba; ba \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> ba * g2 (a - aa * a + aa * b)\n                         \\<le> ba * g1 (a - aa * a + aa * b)\n 4. \\<And>aa ba.\n       \\<lbrakk>0 \\<le> aa; aa \\<le> 1; 0 \\<le> ba; ba \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> g2 (a - aa * a + aa * b) -\n                         ba * g2 (a - aa * a + aa * b) +\n                         ba * g1 (a - aa * a + aa * b)\n                         \\<le> g1 (a - aa * a + aa * b)", "using less_eq_real_def twoCisTypeI(1)"], ["proof (prove)\nusing this:\n  (?x \\<le> ?y) = (?x < ?y \\<or> ?x = ?y)\n  a < b\n\ngoal (4 subgoals):\n 1. \\<And>aa ba.\n       \\<lbrakk>0 \\<le> aa; aa \\<le> 1; 0 \\<le> ba; ba \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> aa * a \\<le> aa * b\n 2. \\<And>aa ba.\n       \\<lbrakk>0 \\<le> aa; aa \\<le> 1; 0 \\<le> ba; ba \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> a - aa * a + aa * b \\<le> b\n 3. \\<And>aa ba.\n       \\<lbrakk>0 \\<le> aa; aa \\<le> 1; 0 \\<le> ba; ba \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> ba * g2 (a - aa * a + aa * b)\n                         \\<le> ba * g1 (a - aa * a + aa * b)\n 4. \\<And>aa ba.\n       \\<lbrakk>0 \\<le> aa; aa \\<le> 1; 0 \\<le> ba; ba \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> g2 (a - aa * a + aa * b) -\n                         ba * g2 (a - aa * a + aa * b) +\n                         ba * g1 (a - aa * a + aa * b)\n                         \\<le> g1 (a - aa * a + aa * b)", "apply auto[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba.\n       \\<lbrakk>0 \\<le> aa; aa \\<le> 1; 0 \\<le> ba; ba \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> a - aa * a + aa * b \\<le> b\n 2. \\<And>aa ba.\n       \\<lbrakk>0 \\<le> aa; aa \\<le> 1; 0 \\<le> ba; ba \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> ba * g2 (a - aa * a + aa * b)\n                         \\<le> ba * g1 (a - aa * a + aa * b)\n 3. \\<And>aa ba.\n       \\<lbrakk>0 \\<le> aa; aa \\<le> 1; 0 \\<le> ba; ba \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> g2 (a - aa * a + aa * b) -\n                         ba * g2 (a - aa * a + aa * b) +\n                         ba * g1 (a - aa * a + aa * b)\n                         \\<le> g1 (a - aa * a + aa * b)", "apply (smt affine_ineq twoCisTypeI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba.\n       \\<lbrakk>0 \\<le> aa; aa \\<le> 1; 0 \\<le> ba; ba \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> ba * g2 (a - aa * a + aa * b)\n                         \\<le> ba * g1 (a - aa * a + aa * b)\n 2. \\<And>aa ba.\n       \\<lbrakk>0 \\<le> aa; aa \\<le> 1; 0 \\<le> ba; ba \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> g2 (a - aa * a + aa * b) -\n                         ba * g2 (a - aa * a + aa * b) +\n                         ba * g1 (a - aa * a + aa * b)\n                         \\<le> g1 (a - aa * a + aa * b)", "apply (smt affine_ineq atLeastAtMost_iff mult_left_mono twoCisTypeI)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {y. \\<exists>x\\<in>unit_cube. y = twoC x} =\n  {(x, y).\n   a \\<le> x \\<and> x \\<le> b \\<and> g2 x \\<le> y \\<and> y \\<le> g1 x}\n\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(x, y). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(x, y).\n           ((1 - x) * a + x * b,\n            (1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b))) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b}", "then"], ["proof (chain)\npicking this:\n  {y. \\<exists>x\\<in>unit_cube. y = twoC x} =\n  {(x, y).\n   a \\<le> x \\<and> x \\<le> b \\<and> g2 x \\<le> y \\<and> y \\<le> g1 x}", "show ?thesis"], ["proof (prove)\nusing this:\n  {y. \\<exists>x\\<in>unit_cube. y = twoC x} =\n  {(x, y).\n   a \\<le> x \\<and> x \\<le> b \\<and> g2 x \\<le> y \\<and> y \\<le> g1 x}\n\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(x, y). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(x, y).\n           ((1 - x) * a + x * b,\n            (1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b))) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b}", "unfolding cubeImage_def image_def"], ["proof (prove)\nusing this:\n  {y. \\<exists>x\\<in>unit_cube. y = twoC x} =\n  {(x, y).\n   a \\<le> x \\<and> x \\<le> b \\<and> g2 x \\<le> y \\<and> y \\<le> g1 x}\n\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       {y. \\<exists>x\\<in>unit_cube. y = twoC x} =\n       {(x, y). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(x, y).\n           ((1 - x) * a + x * b,\n            (1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b))) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b}", "using twoCisTypeI"], ["proof (prove)\nusing this:\n  {y. \\<exists>x\\<in>unit_cube. y = twoC x} =\n  {(x, y).\n   a \\<le> x \\<and> x \\<le> b \\<and> g2 x \\<le> y \\<and> y \\<le> g1 x}\n  a < b\n  \\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x\n  twoC =\n  (\\<lambda>(x, y).\n      ((1 - x) * a + x * b,\n       (1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b)))\n  g1 piecewise_C1_differentiable_on {a..b}\n  g2 piecewise_C1_differentiable_on {a..b}\n\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       {y. \\<exists>x\\<in>unit_cube. y = twoC x} =\n       {(x, y). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(x, y).\n           ((1 - x) * a + x * b,\n            (1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b))) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b}", "by auto"], ["proof (state)\nthis:\n  \\<exists>a b g1 g2.\n     a < b \\<and>\n     (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n     cubeImage twoC =\n     {(x, y). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n     twoC =\n     (\\<lambda>(x, y).\n         ((1 - x) * a + x * b,\n          (1 - y) * g2 ((1 - x) * a + x * b) +\n          y * g1 ((1 - x) * a + x * b))) \\<and>\n     g1 piecewise_C1_differentiable_on {a..b} \\<and>\n     g2 piecewise_C1_differentiable_on {a..b}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma typeI_cube_explicit_spec:\n  assumes \"typeI_twoCube twoC\"\n  shows \"\\<exists>a b g1 g2. a < b \\<and> (\\<forall>x \\<in> {a .. b}. g2 x \\<le> g1 x) \\<and>\n                      cubeImage twoC = {(x,y). x \\<in> {a..b} \\<and> y \\<in> {g2 x .. g1 x}}\n                      \\<and> twoC = (\\<lambda>(x, y). ((1 - x) * a + x * b, (1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b)))\n                      \\<and> g1 piecewise_C1_differentiable_on {a .. b} \\<and> g2 piecewise_C1_differentiable_on {a .. b}\n                      \\<and> (\\<lambda>x. twoC(x, 0)) = (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x)))\n                      \\<and> (\\<lambda>y. twoC(1, y)) = (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b)))\n                      \\<and> (\\<lambda>x. twoC(x, 1)) = (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x)))\n                      \\<and> (\\<lambda>y. twoC(0, y)) = (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(x, y). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(x, y).\n           ((1 - x) * a + x * b,\n            (1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b))) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b} \\<and>\n       (\\<lambda>x. twoC (x, 0)) =\n       (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x))) \\<and>\n       (\\<lambda>y. twoC (1, y)) =\n       (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b))) \\<and>\n       (\\<lambda>x. twoC (x, 1)) =\n       (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x))) \\<and>\n       (\\<lambda>y. twoC (0, y)) =\n       (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(x, y). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(x, y).\n           ((1 - x) * a + x * b,\n            (1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b))) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b} \\<and>\n       (\\<lambda>x. twoC (x, 0)) =\n       (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x))) \\<and>\n       (\\<lambda>y. twoC (1, y)) =\n       (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b))) \\<and>\n       (\\<lambda>x. twoC (x, 1)) =\n       (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x))) \\<and>\n       (\\<lambda>y. twoC (0, y)) =\n       (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))", "let ?bottom_edge = \"(\\<lambda>x. twoC(x, 0))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(x, y). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(x, y).\n           ((1 - x) * a + x * b,\n            (1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b))) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b} \\<and>\n       (\\<lambda>x. twoC (x, 0)) =\n       (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x))) \\<and>\n       (\\<lambda>y. twoC (1, y)) =\n       (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b))) \\<and>\n       (\\<lambda>x. twoC (x, 1)) =\n       (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x))) \\<and>\n       (\\<lambda>y. twoC (0, y)) =\n       (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))", "let ?right_edge = \"(\\<lambda>y. twoC(1, y))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(x, y). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(x, y).\n           ((1 - x) * a + x * b,\n            (1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b))) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b} \\<and>\n       (\\<lambda>x. twoC (x, 0)) =\n       (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x))) \\<and>\n       (\\<lambda>y. twoC (1, y)) =\n       (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b))) \\<and>\n       (\\<lambda>x. twoC (x, 1)) =\n       (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x))) \\<and>\n       (\\<lambda>y. twoC (0, y)) =\n       (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))", "let ?top_edge = \"(\\<lambda>x. twoC(x, 1))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(x, y). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(x, y).\n           ((1 - x) * a + x * b,\n            (1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b))) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b} \\<and>\n       (\\<lambda>x. twoC (x, 0)) =\n       (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x))) \\<and>\n       (\\<lambda>y. twoC (1, y)) =\n       (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b))) \\<and>\n       (\\<lambda>x. twoC (x, 1)) =\n       (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x))) \\<and>\n       (\\<lambda>y. twoC (0, y)) =\n       (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))", "let ?left_edge = \"(\\<lambda>y. twoC(0, y))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(x, y). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(x, y).\n           ((1 - x) * a + x * b,\n            (1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b))) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b} \\<and>\n       (\\<lambda>x. twoC (x, 0)) =\n       (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x))) \\<and>\n       (\\<lambda>y. twoC (1, y)) =\n       (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b))) \\<and>\n       (\\<lambda>x. twoC (x, 1)) =\n       (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x))) \\<and>\n       (\\<lambda>y. twoC (0, y)) =\n       (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))", "obtain a b g1 g2 where\n    twoCisTypeI: \"a < b\"\n    \"(\\<forall>x \\<in> cbox a b. g2 x \\<le> g1 x)\"\n    \"cubeImage twoC = {(x,y). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)}\"\n    \"twoC = (\\<lambda>(x, y). ((1 - x) * a + x * b, (1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b)))\"\n    \"g1 piecewise_C1_differentiable_on {a .. b}\"\n    \"g2 piecewise_C1_differentiable_on {a .. b}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b g2 g1.\n        \\<lbrakk>a < b; \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x;\n         cubeImage twoC =\n         {(x, y). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)};\n         twoC =\n         (\\<lambda>(x, y).\n             ((1 - x) * a + x * b,\n              (1 - y) * g2 ((1 - x) * a + x * b) +\n              y * g1 ((1 - x) * a + x * b)));\n         g1 piecewise_C1_differentiable_on {a..b};\n         g2 piecewise_C1_differentiable_on {a..b}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms and typeI_twoCubeImg[of\"twoC\"]"], ["proof (prove)\nusing this:\n  typeI_twoCube twoC\n  typeI_twoCube twoC \\<Longrightarrow>\n  \\<exists>a b g1 g2.\n     a < b \\<and>\n     (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n     cubeImage twoC =\n     {(x, y). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n     twoC =\n     (\\<lambda>(x, y).\n         ((1 - x) * a + x * b,\n          (1 - y) * g2 ((1 - x) * a + x * b) +\n          y * g1 ((1 - x) * a + x * b))) \\<and>\n     g1 piecewise_C1_differentiable_on {a..b} \\<and>\n     g2 piecewise_C1_differentiable_on {a..b}\n\ngoal (1 subgoal):\n 1. (\\<And>a b g2 g1.\n        \\<lbrakk>a < b; \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x;\n         cubeImage twoC =\n         {(x, y). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)};\n         twoC =\n         (\\<lambda>(x, y).\n             ((1 - x) * a + x * b,\n              (1 - y) * g2 ((1 - x) * a + x * b) +\n              y * g1 ((1 - x) * a + x * b)));\n         g1 piecewise_C1_differentiable_on {a..b};\n         g2 piecewise_C1_differentiable_on {a..b}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  a < b\n  \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x\n  cubeImage twoC =\n  {(x, y). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)}\n  twoC =\n  (\\<lambda>(x, y).\n      ((1 - x) * a + x * b,\n       (1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b)))\n  g1 piecewise_C1_differentiable_on {a..b}\n  g2 piecewise_C1_differentiable_on {a..b}\n\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(x, y). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(x, y).\n           ((1 - x) * a + x * b,\n            (1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b))) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b} \\<and>\n       (\\<lambda>x. twoC (x, 0)) =\n       (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x))) \\<and>\n       (\\<lambda>y. twoC (1, y)) =\n       (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b))) \\<and>\n       (\\<lambda>x. twoC (x, 1)) =\n       (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x))) \\<and>\n       (\\<lambda>y. twoC (0, y)) =\n       (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))", "have bottom_edge_explicit: \"?bottom_edge = (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 0)) =\n    (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x)))", "by (simp add: twoCisTypeI(4) algebra_simps)"], ["proof (state)\nthis:\n  (\\<lambda>x. twoC (x, 0)) =\n  (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x)))\n\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(x, y). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(x, y).\n           ((1 - x) * a + x * b,\n            (1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b))) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b} \\<and>\n       (\\<lambda>x. twoC (x, 0)) =\n       (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x))) \\<and>\n       (\\<lambda>y. twoC (1, y)) =\n       (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b))) \\<and>\n       (\\<lambda>x. twoC (x, 1)) =\n       (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x))) \\<and>\n       (\\<lambda>y. twoC (0, y)) =\n       (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))", "have right_edge_explicit: \"?right_edge = (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (1, y)) =\n    (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b)))", "by (simp add: twoCisTypeI(4) algebra_simps)"], ["proof (state)\nthis:\n  (\\<lambda>y. twoC (1, y)) =\n  (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b)))\n\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(x, y). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(x, y).\n           ((1 - x) * a + x * b,\n            (1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b))) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b} \\<and>\n       (\\<lambda>x. twoC (x, 0)) =\n       (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x))) \\<and>\n       (\\<lambda>y. twoC (1, y)) =\n       (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b))) \\<and>\n       (\\<lambda>x. twoC (x, 1)) =\n       (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x))) \\<and>\n       (\\<lambda>y. twoC (0, y)) =\n       (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))", "have top_edge_explicit: \"?top_edge = (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 1)) =\n    (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x)))", "by (simp add: twoCisTypeI(4) algebra_simps)"], ["proof (state)\nthis:\n  (\\<lambda>x. twoC (x, 1)) =\n  (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x)))\n\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(x, y). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(x, y).\n           ((1 - x) * a + x * b,\n            (1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b))) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b} \\<and>\n       (\\<lambda>x. twoC (x, 0)) =\n       (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x))) \\<and>\n       (\\<lambda>y. twoC (1, y)) =\n       (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b))) \\<and>\n       (\\<lambda>x. twoC (x, 1)) =\n       (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x))) \\<and>\n       (\\<lambda>y. twoC (0, y)) =\n       (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))", "have left_edge_explicit: \"?left_edge = (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (0, y)) =\n    (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))", "by (simp add: twoCisTypeI(4) algebra_simps)"], ["proof (state)\nthis:\n  (\\<lambda>y. twoC (0, y)) =\n  (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))\n\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(x, y). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(x, y).\n           ((1 - x) * a + x * b,\n            (1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b))) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b} \\<and>\n       (\\<lambda>x. twoC (x, 0)) =\n       (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x))) \\<and>\n       (\\<lambda>y. twoC (1, y)) =\n       (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b))) \\<and>\n       (\\<lambda>x. twoC (x, 1)) =\n       (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x))) \\<and>\n       (\\<lambda>y. twoC (0, y)) =\n       (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(x, y). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(x, y).\n           ((1 - x) * a + x * b,\n            (1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b))) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b} \\<and>\n       (\\<lambda>x. twoC (x, 0)) =\n       (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x))) \\<and>\n       (\\<lambda>y. twoC (1, y)) =\n       (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b))) \\<and>\n       (\\<lambda>x. twoC (x, 1)) =\n       (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x))) \\<and>\n       (\\<lambda>y. twoC (0, y)) =\n       (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))", "using bottom_edge_explicit right_edge_explicit top_edge_explicit left_edge_explicit twoCisTypeI"], ["proof (prove)\nusing this:\n  (\\<lambda>x. twoC (x, 0)) =\n  (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x)))\n  (\\<lambda>y. twoC (1, y)) =\n  (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b)))\n  (\\<lambda>x. twoC (x, 1)) =\n  (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x)))\n  (\\<lambda>y. twoC (0, y)) =\n  (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))\n  a < b\n  \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x\n  cubeImage twoC =\n  {(x, y). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)}\n  twoC =\n  (\\<lambda>(x, y).\n      ((1 - x) * a + x * b,\n       (1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b)))\n  g1 piecewise_C1_differentiable_on {a..b}\n  g2 piecewise_C1_differentiable_on {a..b}\n\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(x, y). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(x, y).\n           ((1 - x) * a + x * b,\n            (1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b))) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b} \\<and>\n       (\\<lambda>x. twoC (x, 0)) =\n       (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x))) \\<and>\n       (\\<lambda>y. twoC (1, y)) =\n       (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b))) \\<and>\n       (\\<lambda>x. twoC (x, 1)) =\n       (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x))) \\<and>\n       (\\<lambda>y. twoC (0, y)) =\n       (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))", "by auto"], ["proof (state)\nthis:\n  \\<exists>a b g1 g2.\n     a < b \\<and>\n     (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n     cubeImage twoC =\n     {(x, y). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n     twoC =\n     (\\<lambda>(x, y).\n         ((1 - x) * a + x * b,\n          (1 - y) * g2 ((1 - x) * a + x * b) +\n          y * g1 ((1 - x) * a + x * b))) \\<and>\n     g1 piecewise_C1_differentiable_on {a..b} \\<and>\n     g2 piecewise_C1_differentiable_on {a..b} \\<and>\n     (\\<lambda>x. twoC (x, 0)) =\n     (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x))) \\<and>\n     (\\<lambda>y. twoC (1, y)) =\n     (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b))) \\<and>\n     (\\<lambda>x. twoC (x, 1)) =\n     (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x))) \\<and>\n     (\\<lambda>y. twoC (0, y)) =\n     (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma typeI_twoCube_smooth_edges:\n  assumes \"typeI_twoCube twoC\"\n    \"(k,\\<gamma>) \\<in> boundary twoC\"\n  shows \"\\<gamma> piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma> piecewise_C1_differentiable_on {0..1}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<gamma> piecewise_C1_differentiable_on {0..1}", "let ?bottom_edge = \"(\\<lambda>x. twoC(x, 0))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<gamma> piecewise_C1_differentiable_on {0..1}", "let ?right_edge = \"(\\<lambda>y. twoC(1, y))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<gamma> piecewise_C1_differentiable_on {0..1}", "let ?top_edge = \"(\\<lambda>x. twoC(x, 1))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<gamma> piecewise_C1_differentiable_on {0..1}", "let ?left_edge = \"(\\<lambda>y. twoC(0, y))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<gamma> piecewise_C1_differentiable_on {0..1}", "obtain a b g1 g2 where\n    twoCisTypeI: \"a < b\"\n    \"(\\<forall>x \\<in> cbox a b. g2 x \\<le> g1 x)\"\n    \"cubeImage twoC = {(x,y). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)}\"\n    \"twoC = (\\<lambda>(x, y). ((1 - x) * a + x * b, (1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b)))\"\n    \"g1 piecewise_C1_differentiable_on {a .. b}\"\n    \"g2 piecewise_C1_differentiable_on {a .. b}\"\n    \"(\\<lambda>x. twoC(x, 0)) = (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x)))\"\n    \"(\\<lambda>y. twoC(1, y)) = (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b)))\"\n    \"(\\<lambda>x. twoC(x, 1)) = (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x)))\"\n    \"(\\<lambda>y. twoC(0, y)) = (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b g2 g1.\n        \\<lbrakk>a < b; \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x;\n         cubeImage twoC =\n         {(x, y). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)};\n         twoC =\n         (\\<lambda>(x, y).\n             ((1 - x) * a + x * b,\n              (1 - y) * g2 ((1 - x) * a + x * b) +\n              y * g1 ((1 - x) * a + x * b)));\n         g1 piecewise_C1_differentiable_on {a..b};\n         g2 piecewise_C1_differentiable_on {a..b};\n         (\\<lambda>x. twoC (x, 0)) =\n         (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x)));\n         (\\<lambda>y. twoC (1, y)) =\n         (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b)));\n         (\\<lambda>x. twoC (x, 1)) =\n         (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x)));\n         (\\<lambda>y. twoC (0, y)) =\n         (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms and typeI_cube_explicit_spec[of\"twoC\"]"], ["proof (prove)\nusing this:\n  typeI_twoCube twoC\n  (k, \\<gamma>) \\<in> boundary twoC\n  typeI_twoCube twoC \\<Longrightarrow>\n  \\<exists>a b g1 g2.\n     a < b \\<and>\n     (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n     cubeImage twoC =\n     {(x, y). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n     twoC =\n     (\\<lambda>(x, y).\n         ((1 - x) * a + x * b,\n          (1 - y) * g2 ((1 - x) * a + x * b) +\n          y * g1 ((1 - x) * a + x * b))) \\<and>\n     g1 piecewise_C1_differentiable_on {a..b} \\<and>\n     g2 piecewise_C1_differentiable_on {a..b} \\<and>\n     (\\<lambda>x. twoC (x, 0)) =\n     (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x))) \\<and>\n     (\\<lambda>y. twoC (1, y)) =\n     (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b))) \\<and>\n     (\\<lambda>x. twoC (x, 1)) =\n     (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x))) \\<and>\n     (\\<lambda>y. twoC (0, y)) =\n     (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))\n\ngoal (1 subgoal):\n 1. (\\<And>a b g2 g1.\n        \\<lbrakk>a < b; \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x;\n         cubeImage twoC =\n         {(x, y). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)};\n         twoC =\n         (\\<lambda>(x, y).\n             ((1 - x) * a + x * b,\n              (1 - y) * g2 ((1 - x) * a + x * b) +\n              y * g1 ((1 - x) * a + x * b)));\n         g1 piecewise_C1_differentiable_on {a..b};\n         g2 piecewise_C1_differentiable_on {a..b};\n         (\\<lambda>x. twoC (x, 0)) =\n         (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x)));\n         (\\<lambda>y. twoC (1, y)) =\n         (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b)));\n         (\\<lambda>x. twoC (x, 1)) =\n         (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x)));\n         (\\<lambda>y. twoC (0, y)) =\n         (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  a < b\n  \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x\n  cubeImage twoC =\n  {(x, y). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)}\n  twoC =\n  (\\<lambda>(x, y).\n      ((1 - x) * a + x * b,\n       (1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b)))\n  g1 piecewise_C1_differentiable_on {a..b}\n  g2 piecewise_C1_differentiable_on {a..b}\n  (\\<lambda>x. twoC (x, 0)) =\n  (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x)))\n  (\\<lambda>y. twoC (1, y)) =\n  (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b)))\n  (\\<lambda>x. twoC (x, 1)) =\n  (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x)))\n  (\\<lambda>y. twoC (0, y)) =\n  (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))\n\ngoal (1 subgoal):\n 1. \\<gamma> piecewise_C1_differentiable_on {0..1}", "have bottom_edge_smooth: \"(\\<lambda>x. twoC (x, 0)) piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 0)) piecewise_C1_differentiable_on {0..1}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 0)) piecewise_C1_differentiable_on {0..1}", "have \"\\<forall>x. (\\<lambda>x. (a + (b - a) * x))-` {x} = {(x - a)/(b -a)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. (\\<lambda>x. a + (b - a) * x) -` {x} = {(x - a) / (b - a)}", "using twoCisTypeI(1)"], ["proof (prove)\nusing this:\n  a < b\n\ngoal (1 subgoal):\n 1. \\<forall>x. (\\<lambda>x. a + (b - a) * x) -` {x} = {(x - a) / (b - a)}", "by(auto simp add: Set.vimage_def)"], ["proof (state)\nthis:\n  \\<forall>x. (\\<lambda>x. a + (b - a) * x) -` {x} = {(x - a) / (b - a)}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 0)) piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  \\<forall>x. (\\<lambda>x. a + (b - a) * x) -` {x} = {(x - a) / (b - a)}", "have finite_vimg: \"\\<And>x. finite({0..1} \\<inter> (\\<lambda>x. (a + (b - a) * x))-` {x})\""], ["proof (prove)\nusing this:\n  \\<forall>x. (\\<lambda>x. a + (b - a) * x) -` {x} = {(x - a) / (b - a)}\n\ngoal (1 subgoal):\n 1. \\<And>x. finite ({0..1} \\<inter> (\\<lambda>x. a + (b - a) * x) -` {x})", "by auto"], ["proof (state)\nthis:\n  finite ({0..1} \\<inter> (\\<lambda>x. a + (b - a) * x) -` {?x})\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 0)) piecewise_C1_differentiable_on {0..1}", "have scale_shif_smth: \"(\\<lambda>x. (a + (b - a) * x)) C1_differentiable_on {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. a + (b - a) * x) C1_differentiable_on {0..1}", "using scale_shift_smooth"], ["proof (prove)\nusing this:\n  (\\<lambda>x. ?a + ?b * x) C1_differentiable_on ?s\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. a + (b - a) * x) C1_differentiable_on {0..1}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. a + (b - a) * x) C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 0)) piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x. a + (b - a) * x) C1_differentiable_on {0..1}", "have scale_shif_pw_smth: \"(\\<lambda>x. (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\nusing this:\n  (\\<lambda>x. a + (b - a) * x) C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. a + (b - a) * x) piecewise_C1_differentiable_on {0..1}", "using C1_differentiable_imp_piecewise"], ["proof (prove)\nusing this:\n  (\\<lambda>x. a + (b - a) * x) C1_differentiable_on {0..1}\n  ?f C1_differentiable_on ?S \\<Longrightarrow>\n  ?f piecewise_C1_differentiable_on ?S\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. a + (b - a) * x) piecewise_C1_differentiable_on {0..1}", "by blast"], ["proof (state)\nthis:\n  (\\<lambda>x. a + (b - a) * x) piecewise_C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 0)) piecewise_C1_differentiable_on {0..1}", "have g2_smooth: \"g2 piecewise_C1_differentiable_on (\\<lambda>x. a + (b - a) * x) ` {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g2 piecewise_C1_differentiable_on (\\<lambda>x. a + (b - a) * x) ` {0..1}", "using add_scale_img[OF twoCisTypeI(1)] twoCisTypeI(6)"], ["proof (prove)\nusing this:\n  (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}\n  g2 piecewise_C1_differentiable_on {a..b}\n\ngoal (1 subgoal):\n 1. g2 piecewise_C1_differentiable_on (\\<lambda>x. a + (b - a) * x) ` {0..1}", "by auto"], ["proof (state)\nthis:\n  g2 piecewise_C1_differentiable_on (\\<lambda>x. a + (b - a) * x) ` {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 0)) piecewise_C1_differentiable_on {0..1}", "have \"(\\<lambda>x. g2 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. g2 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}", "using piecewise_C1_differentiable_compose[OF scale_shif_pw_smth g2_smooth finite_vimg]"], ["proof (prove)\nusing this:\n  g2 \\<circ> (\\<lambda>x. a + (b - a) * x) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. g2 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}", "by (auto simp add: o_def)"], ["proof (state)\nthis:\n  (\\<lambda>x. g2 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 0)) piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x. g2 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}", "have \"(\\<lambda>x::real. (a + (b - a) * x, g2 (a + (b - a) * x))) piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\nusing this:\n  (\\<lambda>x. g2 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (a + (b - a) * x,\n         g2 (a + (b - a) * x))) piecewise_C1_differentiable_on\n    {0..1}", "using all_components_smooth_one_pw_smooth_is_pw_smooth[where f = \"(\\<lambda>x::real. (a + (b - a) * x, g2 (a + (b - a) * x)))\"]"], ["proof (prove)\nusing this:\n  (\\<lambda>x. g2 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\n  \\<lbrakk>\\<And>i.\n              i \\<in> Basis - {?j} \\<Longrightarrow>\n              (\\<lambda>x.\n                  (a + (b - a) * x, g2 (a + (b - a) * x)) \\<bullet>\n                  i) C1_differentiable_on\n              ?s;\n   (\\<lambda>x.\n       (a + (b - a) * x, g2 (a + (b - a) * x)) \\<bullet>\n       ?j) piecewise_C1_differentiable_on\n   ?s\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>x.\n                        (a + (b - a) * x,\n                         g2 (a +\n                             (b - a) * x))) piecewise_C1_differentiable_on\n                    ?s\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (a + (b - a) * x,\n         g2 (a + (b - a) * x))) piecewise_C1_differentiable_on\n    {0..1}", "apply (simp only: real_pair_basis)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<lambda>x.\n                 g2 (a + (b - a) * x)) piecewise_C1_differentiable_on\n             {0..1};\n     \\<And>j s.\n        \\<lbrakk>\\<And>i.\n                    i \\<in> {(1, 0), (0, 1)} - {j} \\<Longrightarrow>\n                    (\\<lambda>x.\n                        (a + (b - a) * x, g2 (a + (b - a) * x)) \\<bullet>\n                        i) C1_differentiable_on\n                    s;\n         (\\<lambda>x.\n             (a + (b - a) * x, g2 (a + (b - a) * x)) \\<bullet>\n             j) piecewise_C1_differentiable_on\n         s\\<rbrakk>\n        \\<Longrightarrow> (\\<lambda>x.\n                              (a + (b - a) * x,\n                               g2 (a +\n                                   (b - a) *\n                                   x))) piecewise_C1_differentiable_on\n                          s\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>x.\n                          (a + (b - a) * x,\n                           g2 (a +\n                               (b - a) * x))) piecewise_C1_differentiable_on\n                      {0..1}", "by fastforce"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      (a + (b - a) * x,\n       g2 (a + (b - a) * x))) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 0)) piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x.\n      (a + (b - a) * x,\n       g2 (a + (b - a) * x))) piecewise_C1_differentiable_on\n  {0..1}", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (a + (b - a) * x,\n       g2 (a + (b - a) * x))) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 0)) piecewise_C1_differentiable_on {0..1}", "using twoCisTypeI(7)"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (a + (b - a) * x,\n       g2 (a + (b - a) * x))) piecewise_C1_differentiable_on\n  {0..1}\n  (\\<lambda>x. twoC (x, 0)) =\n  (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x)))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 0)) piecewise_C1_differentiable_on {0..1}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. twoC (x, 0)) piecewise_C1_differentiable_on {0..1}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>x. twoC (x, 0)) piecewise_C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. \\<gamma> piecewise_C1_differentiable_on {0..1}", "have top_edge_smooth: \"?top_edge piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 1)) piecewise_C1_differentiable_on {0..1}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 1)) piecewise_C1_differentiable_on {0..1}", "have \"\\<forall>x. (\\<lambda>x. (a + (b - a) * x))-` {x} = {(x - a)/(b -a)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. (\\<lambda>x. a + (b - a) * x) -` {x} = {(x - a) / (b - a)}", "using twoCisTypeI(1)"], ["proof (prove)\nusing this:\n  a < b\n\ngoal (1 subgoal):\n 1. \\<forall>x. (\\<lambda>x. a + (b - a) * x) -` {x} = {(x - a) / (b - a)}", "by(auto simp add: Set.vimage_def)"], ["proof (state)\nthis:\n  \\<forall>x. (\\<lambda>x. a + (b - a) * x) -` {x} = {(x - a) / (b - a)}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 1)) piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  \\<forall>x. (\\<lambda>x. a + (b - a) * x) -` {x} = {(x - a) / (b - a)}", "have finite_vimg: \"\\<And>x. finite({0..1} \\<inter> (\\<lambda>x. (a + (b - a) * x))-` {x})\""], ["proof (prove)\nusing this:\n  \\<forall>x. (\\<lambda>x. a + (b - a) * x) -` {x} = {(x - a) / (b - a)}\n\ngoal (1 subgoal):\n 1. \\<And>x. finite ({0..1} \\<inter> (\\<lambda>x. a + (b - a) * x) -` {x})", "by auto"], ["proof (state)\nthis:\n  finite ({0..1} \\<inter> (\\<lambda>x. a + (b - a) * x) -` {?x})\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 1)) piecewise_C1_differentiable_on {0..1}", "have scale_shif_smth: \"(\\<lambda>x. (a + (b - a) * x)) C1_differentiable_on {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. a + (b - a) * x) C1_differentiable_on {0..1}", "using scale_shift_smooth"], ["proof (prove)\nusing this:\n  (\\<lambda>x. ?a + ?b * x) C1_differentiable_on ?s\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. a + (b - a) * x) C1_differentiable_on {0..1}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. a + (b - a) * x) C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 1)) piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x. a + (b - a) * x) C1_differentiable_on {0..1}", "have scale_shif_pw_smth: \"(\\<lambda>x. (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\nusing this:\n  (\\<lambda>x. a + (b - a) * x) C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. a + (b - a) * x) piecewise_C1_differentiable_on {0..1}", "using C1_differentiable_imp_piecewise"], ["proof (prove)\nusing this:\n  (\\<lambda>x. a + (b - a) * x) C1_differentiable_on {0..1}\n  ?f C1_differentiable_on ?S \\<Longrightarrow>\n  ?f piecewise_C1_differentiable_on ?S\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. a + (b - a) * x) piecewise_C1_differentiable_on {0..1}", "by blast"], ["proof (state)\nthis:\n  (\\<lambda>x. a + (b - a) * x) piecewise_C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 1)) piecewise_C1_differentiable_on {0..1}", "have g1_smooth: \"g1 piecewise_C1_differentiable_on (\\<lambda>x. a + (b - a) * x) ` {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g1 piecewise_C1_differentiable_on (\\<lambda>x. a + (b - a) * x) ` {0..1}", "using add_scale_img[OF twoCisTypeI(1)] twoCisTypeI(5)"], ["proof (prove)\nusing this:\n  (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}\n  g1 piecewise_C1_differentiable_on {a..b}\n\ngoal (1 subgoal):\n 1. g1 piecewise_C1_differentiable_on (\\<lambda>x. a + (b - a) * x) ` {0..1}", "by auto"], ["proof (state)\nthis:\n  g1 piecewise_C1_differentiable_on (\\<lambda>x. a + (b - a) * x) ` {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 1)) piecewise_C1_differentiable_on {0..1}", "have \"(\\<lambda>x. g1 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. g1 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}", "using piecewise_C1_differentiable_compose[OF scale_shif_pw_smth g1_smooth finite_vimg]"], ["proof (prove)\nusing this:\n  g1 \\<circ> (\\<lambda>x. a + (b - a) * x) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. g1 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}", "by (auto simp add: o_def)"], ["proof (state)\nthis:\n  (\\<lambda>x. g1 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 1)) piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x. g1 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}", "have \"(\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x))) piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\nusing this:\n  (\\<lambda>x. g1 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (a + (b - a) * x,\n         g1 (a + (b - a) * x))) piecewise_C1_differentiable_on\n    {0..1}", "using all_components_smooth_one_pw_smooth_is_pw_smooth[where f = \"(\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x)))\"]"], ["proof (prove)\nusing this:\n  (\\<lambda>x. g1 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\n  \\<lbrakk>\\<And>i.\n              i \\<in> Basis - {?j} \\<Longrightarrow>\n              (\\<lambda>x.\n                  (a + (b - a) * x, g1 (a + (b - a) * x)) \\<bullet>\n                  i) C1_differentiable_on\n              ?s;\n   (\\<lambda>x.\n       (a + (b - a) * x, g1 (a + (b - a) * x)) \\<bullet>\n       ?j) piecewise_C1_differentiable_on\n   ?s\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>x.\n                        (a + (b - a) * x,\n                         g1 (a +\n                             (b - a) * x))) piecewise_C1_differentiable_on\n                    ?s\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (a + (b - a) * x,\n         g1 (a + (b - a) * x))) piecewise_C1_differentiable_on\n    {0..1}", "apply (simp only: real_pair_basis)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<lambda>x.\n                 g1 (a + (b - a) * x)) piecewise_C1_differentiable_on\n             {0..1};\n     \\<And>j s.\n        \\<lbrakk>\\<And>i.\n                    i \\<in> {(1, 0), (0, 1)} - {j} \\<Longrightarrow>\n                    (\\<lambda>x.\n                        (a + (b - a) * x, g1 (a + (b - a) * x)) \\<bullet>\n                        i) C1_differentiable_on\n                    s;\n         (\\<lambda>x.\n             (a + (b - a) * x, g1 (a + (b - a) * x)) \\<bullet>\n             j) piecewise_C1_differentiable_on\n         s\\<rbrakk>\n        \\<Longrightarrow> (\\<lambda>x.\n                              (a + (b - a) * x,\n                               g1 (a +\n                                   (b - a) *\n                                   x))) piecewise_C1_differentiable_on\n                          s\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>x.\n                          (a + (b - a) * x,\n                           g1 (a +\n                               (b - a) * x))) piecewise_C1_differentiable_on\n                      {0..1}", "by fastforce"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      (a + (b - a) * x,\n       g1 (a + (b - a) * x))) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 1)) piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x.\n      (a + (b - a) * x,\n       g1 (a + (b - a) * x))) piecewise_C1_differentiable_on\n  {0..1}", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (a + (b - a) * x,\n       g1 (a + (b - a) * x))) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 1)) piecewise_C1_differentiable_on {0..1}", "using twoCisTypeI(9)"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (a + (b - a) * x,\n       g1 (a + (b - a) * x))) piecewise_C1_differentiable_on\n  {0..1}\n  (\\<lambda>x. twoC (x, 1)) =\n  (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x)))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 1)) piecewise_C1_differentiable_on {0..1}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. twoC (x, 1)) piecewise_C1_differentiable_on {0..1}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>x. twoC (x, 1)) piecewise_C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. \\<gamma> piecewise_C1_differentiable_on {0..1}", "have right_edge_smooth: \"?right_edge piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (1, y)) piecewise_C1_differentiable_on {0..1}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (1, y)) piecewise_C1_differentiable_on {0..1}", "have \"(\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b))) C1_differentiable_on {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. g2 b + x *\\<^sub>R (g1 b - g2 b)) C1_differentiable_on\n    {0..1}", "using scale_shift_smooth C1_differentiable_imp_piecewise"], ["proof (prove)\nusing this:\n  (\\<lambda>x. ?a + ?b * x) C1_differentiable_on ?s\n  ?f C1_differentiable_on ?S \\<Longrightarrow>\n  ?f piecewise_C1_differentiable_on ?S\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. g2 b + x *\\<^sub>R (g1 b - g2 b)) C1_differentiable_on\n    {0..1}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. g2 b + x *\\<^sub>R (g1 b - g2 b)) C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (1, y)) piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x. g2 b + x *\\<^sub>R (g1 b - g2 b)) C1_differentiable_on {0..1}", "have \"(\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b))) piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\nusing this:\n  (\\<lambda>x. g2 b + x *\\<^sub>R (g1 b - g2 b)) C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        g2 b + x *\\<^sub>R (g1 b - g2 b)) piecewise_C1_differentiable_on\n    {0..1}", "using C1_differentiable_imp_piecewise"], ["proof (prove)\nusing this:\n  (\\<lambda>x. g2 b + x *\\<^sub>R (g1 b - g2 b)) C1_differentiable_on {0..1}\n  ?f C1_differentiable_on ?S \\<Longrightarrow>\n  ?f piecewise_C1_differentiable_on ?S\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        g2 b + x *\\<^sub>R (g1 b - g2 b)) piecewise_C1_differentiable_on\n    {0..1}", "by fastforce"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      g2 b + x *\\<^sub>R (g1 b - g2 b)) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (1, y)) piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x.\n      g2 b + x *\\<^sub>R (g1 b - g2 b)) piecewise_C1_differentiable_on\n  {0..1}", "have \"(\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b))) piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      g2 b + x *\\<^sub>R (g1 b - g2 b)) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (b, g2 b +\n            x *\\<^sub>R (g1 b - g2 b))) piecewise_C1_differentiable_on\n    {0..1}", "using pair_prod_smooth_pw_smooth"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      g2 b + x *\\<^sub>R (g1 b - g2 b)) piecewise_C1_differentiable_on\n  {0..1}\n  \\<lbrakk>?f C1_differentiable_on ?s;\n   ?g piecewise_C1_differentiable_on ?s\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>x.\n                        (?f x, ?g x)) piecewise_C1_differentiable_on\n                    ?s\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (b, g2 b +\n            x *\\<^sub>R (g1 b - g2 b))) piecewise_C1_differentiable_on\n    {0..1}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      (b, g2 b + x *\\<^sub>R (g1 b - g2 b))) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (1, y)) piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x.\n      (b, g2 b + x *\\<^sub>R (g1 b - g2 b))) piecewise_C1_differentiable_on\n  {0..1}", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (b, g2 b + x *\\<^sub>R (g1 b - g2 b))) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (1, y)) piecewise_C1_differentiable_on {0..1}", "using twoCisTypeI(8)"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (b, g2 b + x *\\<^sub>R (g1 b - g2 b))) piecewise_C1_differentiable_on\n  {0..1}\n  (\\<lambda>y. twoC (1, y)) =\n  (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b)))\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (1, y)) piecewise_C1_differentiable_on {0..1}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>y. twoC (1, y)) piecewise_C1_differentiable_on {0..1}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>y. twoC (1, y)) piecewise_C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. \\<gamma> piecewise_C1_differentiable_on {0..1}", "have left_edge_smooth: \"?left_edge piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (0, y)) piecewise_C1_differentiable_on {0..1}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (0, y)) piecewise_C1_differentiable_on {0..1}", "have \"(\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a))) C1_differentiable_on {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. g2 a + x *\\<^sub>R (g1 a - g2 a)) C1_differentiable_on\n    {0..1}", "using scale_shift_smooth"], ["proof (prove)\nusing this:\n  (\\<lambda>x. ?a + ?b * x) C1_differentiable_on ?s\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. g2 a + x *\\<^sub>R (g1 a - g2 a)) C1_differentiable_on\n    {0..1}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. g2 a + x *\\<^sub>R (g1 a - g2 a)) C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (0, y)) piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x. g2 a + x *\\<^sub>R (g1 a - g2 a)) C1_differentiable_on {0..1}", "have \"(\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a))) piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\nusing this:\n  (\\<lambda>x. g2 a + x *\\<^sub>R (g1 a - g2 a)) C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        g2 a + x *\\<^sub>R (g1 a - g2 a)) piecewise_C1_differentiable_on\n    {0..1}", "using C1_differentiable_imp_piecewise"], ["proof (prove)\nusing this:\n  (\\<lambda>x. g2 a + x *\\<^sub>R (g1 a - g2 a)) C1_differentiable_on {0..1}\n  ?f C1_differentiable_on ?S \\<Longrightarrow>\n  ?f piecewise_C1_differentiable_on ?S\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        g2 a + x *\\<^sub>R (g1 a - g2 a)) piecewise_C1_differentiable_on\n    {0..1}", "by fastforce"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      g2 a + x *\\<^sub>R (g1 a - g2 a)) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (0, y)) piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x.\n      g2 a + x *\\<^sub>R (g1 a - g2 a)) piecewise_C1_differentiable_on\n  {0..1}", "have \"(\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a))) piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      g2 a + x *\\<^sub>R (g1 a - g2 a)) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (a, g2 a +\n            x *\\<^sub>R (g1 a - g2 a))) piecewise_C1_differentiable_on\n    {0..1}", "using pair_prod_smooth_pw_smooth"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      g2 a + x *\\<^sub>R (g1 a - g2 a)) piecewise_C1_differentiable_on\n  {0..1}\n  \\<lbrakk>?f C1_differentiable_on ?s;\n   ?g piecewise_C1_differentiable_on ?s\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>x.\n                        (?f x, ?g x)) piecewise_C1_differentiable_on\n                    ?s\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (a, g2 a +\n            x *\\<^sub>R (g1 a - g2 a))) piecewise_C1_differentiable_on\n    {0..1}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      (a, g2 a + x *\\<^sub>R (g1 a - g2 a))) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (0, y)) piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x.\n      (a, g2 a + x *\\<^sub>R (g1 a - g2 a))) piecewise_C1_differentiable_on\n  {0..1}", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (a, g2 a + x *\\<^sub>R (g1 a - g2 a))) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (0, y)) piecewise_C1_differentiable_on {0..1}", "using twoCisTypeI(10)"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (a, g2 a + x *\\<^sub>R (g1 a - g2 a))) piecewise_C1_differentiable_on\n  {0..1}\n  (\\<lambda>y. twoC (0, y)) =\n  (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (0, y)) piecewise_C1_differentiable_on {0..1}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>y. twoC (0, y)) piecewise_C1_differentiable_on {0..1}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>y. twoC (0, y)) piecewise_C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. \\<gamma> piecewise_C1_differentiable_on {0..1}", "have \"\\<gamma> = ?bottom_edge \\<or> \\<gamma> = ?right_edge \\<or> \\<gamma> = ?top_edge \\<or> \\<gamma> = ?left_edge\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma> = (\\<lambda>x. twoC (x, 0)) \\<or>\n    \\<gamma> = (\\<lambda>y. twoC (1, y)) \\<or>\n    \\<gamma> = (\\<lambda>x. twoC (x, 1)) \\<or>\n    \\<gamma> = (\\<lambda>y. twoC (0, y))", "using assms"], ["proof (prove)\nusing this:\n  typeI_twoCube twoC\n  (k, \\<gamma>) \\<in> boundary twoC\n\ngoal (1 subgoal):\n 1. \\<gamma> = (\\<lambda>x. twoC (x, 0)) \\<or>\n    \\<gamma> = (\\<lambda>y. twoC (1, y)) \\<or>\n    \\<gamma> = (\\<lambda>x. twoC (x, 1)) \\<or>\n    \\<gamma> = (\\<lambda>y. twoC (0, y))", "by (auto simp add: boundary_def horizontal_boundary_def vertical_boundary_def)"], ["proof (state)\nthis:\n  \\<gamma> = (\\<lambda>x. twoC (x, 0)) \\<or>\n  \\<gamma> = (\\<lambda>y. twoC (1, y)) \\<or>\n  \\<gamma> = (\\<lambda>x. twoC (x, 1)) \\<or>\n  \\<gamma> = (\\<lambda>y. twoC (0, y))\n\ngoal (1 subgoal):\n 1. \\<gamma> piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  \\<gamma> = (\\<lambda>x. twoC (x, 0)) \\<or>\n  \\<gamma> = (\\<lambda>y. twoC (1, y)) \\<or>\n  \\<gamma> = (\\<lambda>x. twoC (x, 1)) \\<or>\n  \\<gamma> = (\\<lambda>y. twoC (0, y))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<gamma> = (\\<lambda>x. twoC (x, 0)) \\<or>\n  \\<gamma> = (\\<lambda>y. twoC (1, y)) \\<or>\n  \\<gamma> = (\\<lambda>x. twoC (x, 1)) \\<or>\n  \\<gamma> = (\\<lambda>y. twoC (0, y))\n\ngoal (1 subgoal):\n 1. \\<gamma> piecewise_C1_differentiable_on {0..1}", "using left_edge_smooth right_edge_smooth top_edge_smooth bottom_edge_smooth"], ["proof (prove)\nusing this:\n  \\<gamma> = (\\<lambda>x. twoC (x, 0)) \\<or>\n  \\<gamma> = (\\<lambda>y. twoC (1, y)) \\<or>\n  \\<gamma> = (\\<lambda>x. twoC (x, 1)) \\<or>\n  \\<gamma> = (\\<lambda>y. twoC (0, y))\n  (\\<lambda>y. twoC (0, y)) piecewise_C1_differentiable_on {0..1}\n  (\\<lambda>y. twoC (1, y)) piecewise_C1_differentiable_on {0..1}\n  (\\<lambda>x. twoC (x, 1)) piecewise_C1_differentiable_on {0..1}\n  (\\<lambda>x. twoC (x, 0)) piecewise_C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. \\<gamma> piecewise_C1_differentiable_on {0..1}", "by auto"], ["proof (state)\nthis:\n  \\<gamma> piecewise_C1_differentiable_on {0..1}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma two_chain_integral_eq_integral_divisable:\n  assumes f_integrable: \"\\<forall>twoCube \\<in> twoChain. F integrable_on cubeImage twoCube\" and\n    gen_division: \"gen_division s (cubeImage ` twoChain)\" and\n    valid_two_chain: \"valid_two_chain twoChain\"\n  shows \"integral s F = two_chain_integral twoChain F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral s F = two_chain_integral twoChain F", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. integral s F = two_chain_integral twoChain F", "show \"integral s F = two_chain_integral twoChain F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral s F = two_chain_integral twoChain F", "proof (simp add: two_chain_integral_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. integral s F = (\\<Sum>C\\<in>twoChain. integral (cubeImage C) F)", "have partial_deriv_integrable:\n      \"\\<forall>twoCube \\<in> twoChain. ((F) has_integral (integral (cubeImage twoCube) (F))) (cubeImage twoCube)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>twoCube\\<in>twoChain.\n       (F has_integral integral (cubeImage twoCube) F) (cubeImage twoCube)", "using f_integrable"], ["proof (prove)\nusing this:\n  \\<forall>twoCube\\<in>twoChain. F integrable_on cubeImage twoCube\n\ngoal (1 subgoal):\n 1. \\<forall>twoCube\\<in>twoChain.\n       (F has_integral integral (cubeImage twoCube) F) (cubeImage twoCube)", "by auto"], ["proof (state)\nthis:\n  \\<forall>twoCube\\<in>twoChain.\n     (F has_integral integral (cubeImage twoCube) F) (cubeImage twoCube)\n\ngoal (1 subgoal):\n 1. integral s F = (\\<Sum>C\\<in>twoChain. integral (cubeImage C) F)", "then"], ["proof (chain)\npicking this:\n  \\<forall>twoCube\\<in>twoChain.\n     (F has_integral integral (cubeImage twoCube) F) (cubeImage twoCube)", "have partial_deriv_integrable:\n      \"\\<And>twoCubeImg. twoCubeImg \\<in> cubeImage ` twoChain \\<Longrightarrow> (F has_integral (integral (twoCubeImg) F)) (twoCubeImg)\""], ["proof (prove)\nusing this:\n  \\<forall>twoCube\\<in>twoChain.\n     (F has_integral integral (cubeImage twoCube) F) (cubeImage twoCube)\n\ngoal (1 subgoal):\n 1. \\<And>twoCubeImg.\n       twoCubeImg \\<in> cubeImage ` twoChain \\<Longrightarrow>\n       (F has_integral integral twoCubeImg F) twoCubeImg", "using Henstock_Kurzweil_Integration.integrable_neg"], ["proof (prove)\nusing this:\n  \\<forall>twoCube\\<in>twoChain.\n     (F has_integral integral (cubeImage twoCube) F) (cubeImage twoCube)\n  ?f integrable_on ?S \\<Longrightarrow>\n  (\\<lambda>x. - ?f x) integrable_on ?S\n\ngoal (1 subgoal):\n 1. \\<And>twoCubeImg.\n       twoCubeImg \\<in> cubeImage ` twoChain \\<Longrightarrow>\n       (F has_integral integral twoCubeImg F) twoCubeImg", "by force"], ["proof (state)\nthis:\n  ?twoCubeImg \\<in> cubeImage ` twoChain \\<Longrightarrow>\n  (F has_integral integral ?twoCubeImg F) ?twoCubeImg\n\ngoal (1 subgoal):\n 1. integral s F = (\\<Sum>C\\<in>twoChain. integral (cubeImage C) F)", "have finite_images: \"finite (cubeImage ` twoChain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (cubeImage ` twoChain)", "using gen_division gen_division_def"], ["proof (prove)\nusing this:\n  gen_division s (cubeImage ` twoChain)\n  gen_division ?s ?S \\<equiv>\n  finite ?S \\<and>\n  \\<Union> ?S = ?s \\<and>\n  pairwise (\\<lambda>X Y. negligible (X \\<inter> Y)) ?S\n\ngoal (1 subgoal):\n 1. finite (cubeImage ` twoChain)", "by auto"], ["proof (state)\nthis:\n  finite (cubeImage ` twoChain)\n\ngoal (1 subgoal):\n 1. integral s F = (\\<Sum>C\\<in>twoChain. integral (cubeImage C) F)", "have negligible_images: \"pairwise (\\<lambda>S S'. negligible (S \\<inter> S')) (cubeImage ` twoChain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pairwise (\\<lambda>S S'. negligible (S \\<inter> S'))\n     (cubeImage ` twoChain)", "using gen_division"], ["proof (prove)\nusing this:\n  gen_division s (cubeImage ` twoChain)\n\ngoal (1 subgoal):\n 1. pairwise (\\<lambda>S S'. negligible (S \\<inter> S'))\n     (cubeImage ` twoChain)", "by (auto simp add: gen_division_def pairwise_def)"], ["proof (state)\nthis:\n  pairwise (\\<lambda>S S'. negligible (S \\<inter> S'))\n   (cubeImage ` twoChain)\n\ngoal (1 subgoal):\n 1. integral s F = (\\<Sum>C\\<in>twoChain. integral (cubeImage C) F)", "have inj: \"inj_on cubeImage twoChain\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on cubeImage twoChain", "using valid_two_chain"], ["proof (prove)\nusing this:\n  valid_two_chain twoChain\n\ngoal (1 subgoal):\n 1. inj_on cubeImage twoChain", "by (simp add: inj_on_def valid_two_chain_def)"], ["proof (state)\nthis:\n  inj_on cubeImage twoChain\n\ngoal (1 subgoal):\n 1. integral s F = (\\<Sum>C\\<in>twoChain. integral (cubeImage C) F)", "have \"integral s F = (\\<Sum>twoCubeImg\\<in>cubeImage ` twoChain. integral twoCubeImg F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral s F =\n    (\\<Sum>twoCubeImg\\<in>cubeImage ` twoChain. integral twoCubeImg F)", "using has_integral_Union[OF finite_images partial_deriv_integrable negligible_images] gen_division"], ["proof (prove)\nusing this:\n  (\\<And>S.\n      S \\<in> cubeImage ` twoChain \\<Longrightarrow>\n      S \\<in> cubeImage ` twoChain) \\<Longrightarrow>\n  (F has_integral (\\<Sum>S\\<in>cubeImage ` twoChain. integral S F))\n   (\\<Union> (cubeImage ` twoChain))\n  gen_division s (cubeImage ` twoChain)\n\ngoal (1 subgoal):\n 1. integral s F =\n    (\\<Sum>twoCubeImg\\<in>cubeImage ` twoChain. integral twoCubeImg F)", "by (auto simp add: gen_division_def)"], ["proof (state)\nthis:\n  integral s F =\n  (\\<Sum>twoCubeImg\\<in>cubeImage ` twoChain. integral twoCubeImg F)\n\ngoal (1 subgoal):\n 1. integral s F = (\\<Sum>C\\<in>twoChain. integral (cubeImage C) F)", "also"], ["proof (state)\nthis:\n  integral s F =\n  (\\<Sum>twoCubeImg\\<in>cubeImage ` twoChain. integral twoCubeImg F)\n\ngoal (1 subgoal):\n 1. integral s F = (\\<Sum>C\\<in>twoChain. integral (cubeImage C) F)", "have \"\\<dots> = (\\<Sum>C\\<in>twoChain. integral (cubeImage C) F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>twoCubeImg\\<in>cubeImage ` twoChain. integral twoCubeImg F) =\n    (\\<Sum>C\\<in>twoChain. integral (cubeImage C) F)", "using sum.reindex inj"], ["proof (prove)\nusing this:\n  inj_on ?h ?A \\<Longrightarrow> sum ?g (?h ` ?A) = sum (?g \\<circ> ?h) ?A\n  inj_on cubeImage twoChain\n\ngoal (1 subgoal):\n 1. (\\<Sum>twoCubeImg\\<in>cubeImage ` twoChain. integral twoCubeImg F) =\n    (\\<Sum>C\\<in>twoChain. integral (cubeImage C) F)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>twoCubeImg\\<in>cubeImage ` twoChain. integral twoCubeImg F) =\n  (\\<Sum>C\\<in>twoChain. integral (cubeImage C) F)\n\ngoal (1 subgoal):\n 1. integral s F = (\\<Sum>C\\<in>twoChain. integral (cubeImage C) F)", "finally"], ["proof (chain)\npicking this:\n  integral s F = (\\<Sum>C\\<in>twoChain. integral (cubeImage C) F)", "show \"integral s F = (\\<Sum>C\\<in>twoChain. integral (cubeImage C) F)\""], ["proof (prove)\nusing this:\n  integral s F = (\\<Sum>C\\<in>twoChain. integral (cubeImage C) F)\n\ngoal (1 subgoal):\n 1. integral s F = (\\<Sum>C\\<in>twoChain. integral (cubeImage C) F)", "."], ["proof (state)\nthis:\n  integral s F = (\\<Sum>C\\<in>twoChain. integral (cubeImage C) F)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  integral s F = two_chain_integral twoChain F\n\ngoal:\nNo subgoals!", "qed"], ["", "definition only_vertical_division where\n  \"only_vertical_division one_chain two_chain \\<equiv>\n       \\<exists>\\<V> \\<H>. finite \\<H> \\<and> finite \\<V> \\<and>\n               (\\<forall>(k,\\<gamma>) \\<in> \\<V>.\n                 (\\<exists>(k',\\<gamma>') \\<in> two_chain_vertical_boundary two_chain.\n                     (\\<exists>a \\<in> {0..1}. \\<exists>b \\<in> {0..1}. a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>))) \\<and>\n               (common_sudiv_exists (two_chain_horizontal_boundary two_chain) \\<H>\n                \\<or> common_reparam_exists \\<H> (two_chain_horizontal_boundary two_chain)) \\<and>\n               boundary_chain \\<H> \\<and> one_chain = \\<V> \\<union> \\<H> \\<and>\n               (\\<forall>(k,\\<gamma>)\\<in>\\<H>. valid_path \\<gamma>)\""], ["", "abbreviation \"valid_typeI_division s twoChain \n   \\<equiv> (\\<forall>twoCube \\<in> twoChain. typeI_twoCube twoCube) \\<and>\n      gen_division s (cubeImage ` twoChain) \\<and> valid_two_chain twoChain\""], ["", "lemma field_cont_on_typeI_region_cont_on_edges:\n  assumes typeI_twoC: \"typeI_twoCube twoC\" \n    and field_cont: \"continuous_on (cubeImage twoC) F\" \n    and member_of_boundary: \"(k,\\<gamma>) \\<in> boundary twoC\"\n  shows \"continuous_on (\\<gamma> ` {0 .. 1}) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "obtain a b g1 g2 where\n    twoCisTypeI: \"a < b\"\n    \"(\\<forall>x \\<in> cbox a b. g2 x \\<le> g1 x)\"\n    \"cubeImage twoC = {(x,y). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)}\"\n    \"twoC = (\\<lambda>(x, y). ((1 - x) * a + x * b, (1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b)))\"\n    \"g1 piecewise_C1_differentiable_on {a .. b}\"\n    \"g2 piecewise_C1_differentiable_on {a .. b}\"\n    \"(\\<lambda>x. twoC(x, 0)) = (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x)))\"\n    \"(\\<lambda>y. twoC(1, y)) = (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b)))\"\n    \"(\\<lambda>x. twoC(x, 1)) = (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x)))\"\n    \"(\\<lambda>y. twoC(0, y)) = (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b g2 g1.\n        \\<lbrakk>a < b; \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x;\n         cubeImage twoC =\n         {(x, y). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)};\n         twoC =\n         (\\<lambda>(x, y).\n             ((1 - x) * a + x * b,\n              (1 - y) * g2 ((1 - x) * a + x * b) +\n              y * g1 ((1 - x) * a + x * b)));\n         g1 piecewise_C1_differentiable_on {a..b};\n         g2 piecewise_C1_differentiable_on {a..b};\n         (\\<lambda>x. twoC (x, 0)) =\n         (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x)));\n         (\\<lambda>y. twoC (1, y)) =\n         (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b)));\n         (\\<lambda>x. twoC (x, 1)) =\n         (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x)));\n         (\\<lambda>y. twoC (0, y)) =\n         (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using typeI_twoC and typeI_cube_explicit_spec[of\"twoC\"]"], ["proof (prove)\nusing this:\n  typeI_twoCube twoC\n  typeI_twoCube twoC \\<Longrightarrow>\n  \\<exists>a b g1 g2.\n     a < b \\<and>\n     (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n     cubeImage twoC =\n     {(x, y). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n     twoC =\n     (\\<lambda>(x, y).\n         ((1 - x) * a + x * b,\n          (1 - y) * g2 ((1 - x) * a + x * b) +\n          y * g1 ((1 - x) * a + x * b))) \\<and>\n     g1 piecewise_C1_differentiable_on {a..b} \\<and>\n     g2 piecewise_C1_differentiable_on {a..b} \\<and>\n     (\\<lambda>x. twoC (x, 0)) =\n     (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x))) \\<and>\n     (\\<lambda>y. twoC (1, y)) =\n     (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b))) \\<and>\n     (\\<lambda>x. twoC (x, 1)) =\n     (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x))) \\<and>\n     (\\<lambda>y. twoC (0, y)) =\n     (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))\n\ngoal (1 subgoal):\n 1. (\\<And>a b g2 g1.\n        \\<lbrakk>a < b; \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x;\n         cubeImage twoC =\n         {(x, y). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)};\n         twoC =\n         (\\<lambda>(x, y).\n             ((1 - x) * a + x * b,\n              (1 - y) * g2 ((1 - x) * a + x * b) +\n              y * g1 ((1 - x) * a + x * b)));\n         g1 piecewise_C1_differentiable_on {a..b};\n         g2 piecewise_C1_differentiable_on {a..b};\n         (\\<lambda>x. twoC (x, 0)) =\n         (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x)));\n         (\\<lambda>y. twoC (1, y)) =\n         (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b)));\n         (\\<lambda>x. twoC (x, 1)) =\n         (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x)));\n         (\\<lambda>y. twoC (0, y)) =\n         (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  a < b\n  \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x\n  cubeImage twoC =\n  {(x, y). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)}\n  twoC =\n  (\\<lambda>(x, y).\n      ((1 - x) * a + x * b,\n       (1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b)))\n  g1 piecewise_C1_differentiable_on {a..b}\n  g2 piecewise_C1_differentiable_on {a..b}\n  (\\<lambda>x. twoC (x, 0)) =\n  (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x)))\n  (\\<lambda>y. twoC (1, y)) =\n  (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b)))\n  (\\<lambda>x. twoC (x, 1)) =\n  (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x)))\n  (\\<lambda>y. twoC (0, y)) =\n  (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "let ?bottom_edge = \"(\\<lambda>x. twoC(x, 0))\""], ["proof (state)\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "let ?right_edge = \"(\\<lambda>y. twoC(1, y))\""], ["proof (state)\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "let ?top_edge = \"(\\<lambda>x. twoC(x, 1))\""], ["proof (state)\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "let ?left_edge = \"(\\<lambda>y. twoC(0, y))\""], ["proof (state)\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "let ?Dg1 =  \"{p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g1(x))}\""], ["proof (state)\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "have line_is_pair_img: \"?Dg1 = (\\<lambda>x. (x, g1(x))) ` (cbox a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g1 x)} =\n    (\\<lambda>x. (x, g1 x)) ` cbox a b", "using image_def"], ["proof (prove)\nusing this:\n  ?f ` ?A = {y. \\<exists>x\\<in>?A. y = ?f x}\n\ngoal (1 subgoal):\n 1. {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g1 x)} =\n    (\\<lambda>x. (x, g1 x)) ` cbox a b", "by auto"], ["proof (state)\nthis:\n  {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g1 x)} =\n  (\\<lambda>x. (x, g1 x)) ` cbox a b\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "have field_cont_on_top_edge_image: \"continuous_on ?Dg1  F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g1 x)} F", "by (rule continuous_on_subset [OF field_cont]) (auto simp: twoCisTypeI(2) twoCisTypeI(3))"], ["proof (state)\nthis:\n  continuous_on {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g1 x)} F\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "have top_edge_is_compos_of_scal_and_g1:\n    \"(\\<lambda>x. twoC(x, 1)) = (\\<lambda>x. (x, g1(x))) \\<circ> (\\<lambda>x. a + (b - a) * x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 1)) =\n    (\\<lambda>x. (x, g1 x)) \\<circ> (\\<lambda>x. a + (b - a) * x)", "using twoCisTypeI"], ["proof (prove)\nusing this:\n  a < b\n  \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x\n  cubeImage twoC =\n  {(x, y). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)}\n  twoC =\n  (\\<lambda>(x, y).\n      ((1 - x) * a + x * b,\n       (1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b)))\n  g1 piecewise_C1_differentiable_on {a..b}\n  g2 piecewise_C1_differentiable_on {a..b}\n  (\\<lambda>x. twoC (x, 0)) =\n  (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x)))\n  (\\<lambda>y. twoC (1, y)) =\n  (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b)))\n  (\\<lambda>x. twoC (x, 1)) =\n  (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x)))\n  (\\<lambda>y. twoC (0, y)) =\n  (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 1)) =\n    (\\<lambda>x. (x, g1 x)) \\<circ> (\\<lambda>x. a + (b - a) * x)", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. twoC (x, 1)) =\n  (\\<lambda>x. (x, g1 x)) \\<circ> (\\<lambda>x. a + (b - a) * x)\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "have Dg1_is_bot_edge_pathimg: \"path_image (\\<lambda>x. twoC(x, 1)) = ?Dg1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_image (\\<lambda>x. twoC (x, 1)) =\n    {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g1 x)}", "using line_is_pair_img and top_edge_is_compos_of_scal_and_g1 image_comp path_image_def add_scale_img and twoCisTypeI(1)"], ["proof (prove)\nusing this:\n  {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g1 x)} =\n  (\\<lambda>x. (x, g1 x)) ` cbox a b\n  (\\<lambda>x. twoC (x, 1)) =\n  (\\<lambda>x. (x, g1 x)) \\<circ> (\\<lambda>x. a + (b - a) * x)\n  ?f ` ?g ` ?r = (?f \\<circ> ?g) ` ?r\n  path_image ?g = ?g ` {0..1}\n  ?a < ?b \\<Longrightarrow>\n  (\\<lambda>x. ?a + (?b - ?a) * x) ` {0..1} = {?a..?b}\n  a < b\n\ngoal (1 subgoal):\n 1. path_image (\\<lambda>x. twoC (x, 1)) =\n    {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g1 x)}", "by (metis (no_types, lifting) cbox_interval)"], ["proof (state)\nthis:\n  path_image (\\<lambda>x. twoC (x, 1)) =\n  {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g1 x)}\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "then"], ["proof (chain)\npicking this:\n  path_image (\\<lambda>x. twoC (x, 1)) =\n  {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g1 x)}", "have cont_on_top: \"continuous_on (path_image ?top_edge) F\""], ["proof (prove)\nusing this:\n  path_image (\\<lambda>x. twoC (x, 1)) =\n  {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g1 x)}\n\ngoal (1 subgoal):\n 1. continuous_on (path_image (\\<lambda>x. twoC (x, 1))) F", "using field_cont_on_top_edge_image"], ["proof (prove)\nusing this:\n  path_image (\\<lambda>x. twoC (x, 1)) =\n  {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g1 x)}\n  continuous_on {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g1 x)} F\n\ngoal (1 subgoal):\n 1. continuous_on (path_image (\\<lambda>x. twoC (x, 1))) F", "by auto"], ["proof (state)\nthis:\n  continuous_on (path_image (\\<lambda>x. twoC (x, 1))) F\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "let ?Dg2 =  \"{p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g2(x))}\""], ["proof (state)\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "have line_is_pair_img: \"?Dg2 = (\\<lambda>x. (x, g2(x))) ` (cbox a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g2 x)} =\n    (\\<lambda>x. (x, g2 x)) ` cbox a b", "using image_def"], ["proof (prove)\nusing this:\n  ?f ` ?A = {y. \\<exists>x\\<in>?A. y = ?f x}\n\ngoal (1 subgoal):\n 1. {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g2 x)} =\n    (\\<lambda>x. (x, g2 x)) ` cbox a b", "by auto"], ["proof (state)\nthis:\n  {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g2 x)} =\n  (\\<lambda>x. (x, g2 x)) ` cbox a b\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "have field_cont_on_bot_edge_image: \"continuous_on ?Dg2 F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g2 x)} F", "apply (rule continuous_on_subset [OF field_cont])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g2 x)}\n    \\<subseteq> cubeImage twoC", "using twoCisTypeI(2) twoCisTypeI(3)"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x\n  cubeImage twoC =\n  {(x, y). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)}\n\ngoal (1 subgoal):\n 1. {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g2 x)}\n    \\<subseteq> cubeImage twoC", "by auto"], ["proof (state)\nthis:\n  continuous_on {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g2 x)} F\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "have bot_edge_is_compos_of_scal_and_g2: \"(\\<lambda>x. twoC(x, 0)) = (\\<lambda>x. (x, g2(x))) \\<circ> (\\<lambda>x. a + (b - a) * x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 0)) =\n    (\\<lambda>x. (x, g2 x)) \\<circ> (\\<lambda>x. a + (b - a) * x)", "using twoCisTypeI"], ["proof (prove)\nusing this:\n  a < b\n  \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x\n  cubeImage twoC =\n  {(x, y). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)}\n  twoC =\n  (\\<lambda>(x, y).\n      ((1 - x) * a + x * b,\n       (1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b)))\n  g1 piecewise_C1_differentiable_on {a..b}\n  g2 piecewise_C1_differentiable_on {a..b}\n  (\\<lambda>x. twoC (x, 0)) =\n  (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x)))\n  (\\<lambda>y. twoC (1, y)) =\n  (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b)))\n  (\\<lambda>x. twoC (x, 1)) =\n  (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x)))\n  (\\<lambda>y. twoC (0, y)) =\n  (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 0)) =\n    (\\<lambda>x. (x, g2 x)) \\<circ> (\\<lambda>x. a + (b - a) * x)", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. twoC (x, 0)) =\n  (\\<lambda>x. (x, g2 x)) \\<circ> (\\<lambda>x. a + (b - a) * x)\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "have Dg2_is_bot_edge_pathimg:\n    \"path_image (\\<lambda>x. twoC(x, 0)) = ?Dg2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_image (\\<lambda>x. twoC (x, 0)) =\n    {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g2 x)}", "using line_is_pair_img and bot_edge_is_compos_of_scal_and_g2 image_comp path_image_def add_scale_img and twoCisTypeI(1)"], ["proof (prove)\nusing this:\n  {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g2 x)} =\n  (\\<lambda>x. (x, g2 x)) ` cbox a b\n  (\\<lambda>x. twoC (x, 0)) =\n  (\\<lambda>x. (x, g2 x)) \\<circ> (\\<lambda>x. a + (b - a) * x)\n  ?f ` ?g ` ?r = (?f \\<circ> ?g) ` ?r\n  path_image ?g = ?g ` {0..1}\n  ?a < ?b \\<Longrightarrow>\n  (\\<lambda>x. ?a + (?b - ?a) * x) ` {0..1} = {?a..?b}\n  a < b\n\ngoal (1 subgoal):\n 1. path_image (\\<lambda>x. twoC (x, 0)) =\n    {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g2 x)}", "by (metis (no_types, lifting) cbox_interval)"], ["proof (state)\nthis:\n  path_image (\\<lambda>x. twoC (x, 0)) =\n  {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g2 x)}\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "then"], ["proof (chain)\npicking this:\n  path_image (\\<lambda>x. twoC (x, 0)) =\n  {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g2 x)}", "have cont_on_bot: \"continuous_on (path_image ?bottom_edge) F\""], ["proof (prove)\nusing this:\n  path_image (\\<lambda>x. twoC (x, 0)) =\n  {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g2 x)}\n\ngoal (1 subgoal):\n 1. continuous_on (path_image (\\<lambda>x. twoC (x, 0))) F", "using field_cont_on_bot_edge_image"], ["proof (prove)\nusing this:\n  path_image (\\<lambda>x. twoC (x, 0)) =\n  {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g2 x)}\n  continuous_on {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g2 x)} F\n\ngoal (1 subgoal):\n 1. continuous_on (path_image (\\<lambda>x. twoC (x, 0))) F", "by auto"], ["proof (state)\nthis:\n  continuous_on (path_image (\\<lambda>x. twoC (x, 0))) F\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "let ?D_left_edge = \"{p. \\<exists>y. y \\<in> cbox (g2 a) (g1 a) \\<and> p = (a, y)}\""], ["proof (state)\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "have field_cont_on_left_edge_image: \"continuous_on ?D_left_edge  F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on\n     {p. \\<exists>y. y \\<in> cbox (g2 a) (g1 a) \\<and> p = (a, y)} F", "apply (rule continuous_on_subset [OF field_cont])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. \\<exists>y. y \\<in> cbox (g2 a) (g1 a) \\<and> p = (a, y)}\n    \\<subseteq> cubeImage twoC", "using twoCisTypeI(1) twoCisTypeI(3)"], ["proof (prove)\nusing this:\n  a < b\n  cubeImage twoC =\n  {(x, y). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)}\n\ngoal (1 subgoal):\n 1. {p. \\<exists>y. y \\<in> cbox (g2 a) (g1 a) \\<and> p = (a, y)}\n    \\<subseteq> cubeImage twoC", "by auto"], ["proof (state)\nthis:\n  continuous_on\n   {p. \\<exists>y. y \\<in> cbox (g2 a) (g1 a) \\<and> p = (a, y)} F\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "have \"g2 a \\<le> g1 a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g2 a \\<le> g1 a", "using twoCisTypeI(1) twoCisTypeI(2)"], ["proof (prove)\nusing this:\n  a < b\n  \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x\n\ngoal (1 subgoal):\n 1. g2 a \\<le> g1 a", "by auto"], ["proof (state)\nthis:\n  g2 a \\<le> g1 a\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "then"], ["proof (chain)\npicking this:\n  g2 a \\<le> g1 a", "have \"(\\<lambda>x. g2 a + (g1 a - g2 a) * x) ` {(0::real)..1} = {g2 a .. g1 a}\""], ["proof (prove)\nusing this:\n  g2 a \\<le> g1 a\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. g2 a + (g1 a - g2 a) * x) ` {0..1} = {g2 a..g1 a}", "using add_scale_img'[of \"g2 a\" \"g1 a\"]"], ["proof (prove)\nusing this:\n  g2 a \\<le> g1 a\n  g2 a \\<le> g1 a \\<Longrightarrow>\n  (\\<lambda>x. g2 a + (g1 a - g2 a) * x) ` {0..1} = {g2 a..g1 a}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. g2 a + (g1 a - g2 a) * x) ` {0..1} = {g2 a..g1 a}", "by blast"], ["proof (state)\nthis:\n  (\\<lambda>x. g2 a + (g1 a - g2 a) * x) ` {0..1} = {g2 a..g1 a}\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x. g2 a + (g1 a - g2 a) * x) ` {0..1} = {g2 a..g1 a}", "have left_eq: \"?D_left_edge = ?left_edge ` {0..1}\""], ["proof (prove)\nusing this:\n  (\\<lambda>x. g2 a + (g1 a - g2 a) * x) ` {0..1} = {g2 a..g1 a}\n\ngoal (1 subgoal):\n 1. {p. \\<exists>y. y \\<in> cbox (g2 a) (g1 a) \\<and> p = (a, y)} =\n    (\\<lambda>y. twoC (0, y)) ` {0..1}", "unfolding twoCisTypeI(10)"], ["proof (prove)\nusing this:\n  (\\<lambda>x. g2 a + (g1 a - g2 a) * x) ` {0..1} = {g2 a..g1 a}\n\ngoal (1 subgoal):\n 1. {p. \\<exists>y. y \\<in> cbox (g2 a) (g1 a) \\<and> p = (a, y)} =\n    (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a))) ` {0..1}", "by(auto simp add: subset_iff image_def set_eq_iff Semiring_Normalization.comm_semiring_1_class.semiring_normalization_rules(7))"], ["proof (state)\nthis:\n  {p. \\<exists>y. y \\<in> cbox (g2 a) (g1 a) \\<and> p = (a, y)} =\n  (\\<lambda>y. twoC (0, y)) ` {0..1}\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "then"], ["proof (chain)\npicking this:\n  {p. \\<exists>y. y \\<in> cbox (g2 a) (g1 a) \\<and> p = (a, y)} =\n  (\\<lambda>y. twoC (0, y)) ` {0..1}", "have cont_on_left: \"continuous_on (path_image ?left_edge) F\""], ["proof (prove)\nusing this:\n  {p. \\<exists>y. y \\<in> cbox (g2 a) (g1 a) \\<and> p = (a, y)} =\n  (\\<lambda>y. twoC (0, y)) ` {0..1}\n\ngoal (1 subgoal):\n 1. continuous_on (path_image (\\<lambda>y. twoC (0, y))) F", "using field_cont_on_left_edge_image path_image_def"], ["proof (prove)\nusing this:\n  {p. \\<exists>y. y \\<in> cbox (g2 a) (g1 a) \\<and> p = (a, y)} =\n  (\\<lambda>y. twoC (0, y)) ` {0..1}\n  continuous_on\n   {p. \\<exists>y. y \\<in> cbox (g2 a) (g1 a) \\<and> p = (a, y)} F\n  path_image ?g = ?g ` {0..1}\n\ngoal (1 subgoal):\n 1. continuous_on (path_image (\\<lambda>y. twoC (0, y))) F", "by (metis left_eq field_cont_on_left_edge_image path_image_def)"], ["proof (state)\nthis:\n  continuous_on (path_image (\\<lambda>y. twoC (0, y))) F\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "let ?D_right_edge =  \"{p. \\<exists>y. y \\<in> cbox (g2 b) (g1 b) \\<and> p = (b, y)}\""], ["proof (state)\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "have field_cont_on_left_edge_image: \"continuous_on ?D_right_edge F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on\n     {p. \\<exists>y. y \\<in> cbox (g2 b) (g1 b) \\<and> p = (b, y)} F", "apply (rule continuous_on_subset [OF field_cont])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. \\<exists>y. y \\<in> cbox (g2 b) (g1 b) \\<and> p = (b, y)}\n    \\<subseteq> cubeImage twoC", "using twoCisTypeI(1) twoCisTypeI(3)"], ["proof (prove)\nusing this:\n  a < b\n  cubeImage twoC =\n  {(x, y). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)}\n\ngoal (1 subgoal):\n 1. {p. \\<exists>y. y \\<in> cbox (g2 b) (g1 b) \\<and> p = (b, y)}\n    \\<subseteq> cubeImage twoC", "by auto"], ["proof (state)\nthis:\n  continuous_on\n   {p. \\<exists>y. y \\<in> cbox (g2 b) (g1 b) \\<and> p = (b, y)} F\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "have \"g2 b \\<le> g1 b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g2 b \\<le> g1 b", "using twoCisTypeI(1)  twoCisTypeI(2)"], ["proof (prove)\nusing this:\n  a < b\n  \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x\n\ngoal (1 subgoal):\n 1. g2 b \\<le> g1 b", "by auto"], ["proof (state)\nthis:\n  g2 b \\<le> g1 b\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "then"], ["proof (chain)\npicking this:\n  g2 b \\<le> g1 b", "have \"(\\<lambda>x. g2 b + (g1 b - g2 b) * x) ` {(0::real)..1} = {g2 b .. g1 b}\""], ["proof (prove)\nusing this:\n  g2 b \\<le> g1 b\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. g2 b + (g1 b - g2 b) * x) ` {0..1} = {g2 b..g1 b}", "using add_scale_img'[of \"g2 b\" \"g1 b\"]"], ["proof (prove)\nusing this:\n  g2 b \\<le> g1 b\n  g2 b \\<le> g1 b \\<Longrightarrow>\n  (\\<lambda>x. g2 b + (g1 b - g2 b) * x) ` {0..1} = {g2 b..g1 b}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. g2 b + (g1 b - g2 b) * x) ` {0..1} = {g2 b..g1 b}", "by blast"], ["proof (state)\nthis:\n  (\\<lambda>x. g2 b + (g1 b - g2 b) * x) ` {0..1} = {g2 b..g1 b}\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x. g2 b + (g1 b - g2 b) * x) ` {0..1} = {g2 b..g1 b}", "have right_eq: \"?D_right_edge = ?right_edge ` {0..1}\""], ["proof (prove)\nusing this:\n  (\\<lambda>x. g2 b + (g1 b - g2 b) * x) ` {0..1} = {g2 b..g1 b}\n\ngoal (1 subgoal):\n 1. {p. \\<exists>y. y \\<in> cbox (g2 b) (g1 b) \\<and> p = (b, y)} =\n    (\\<lambda>y. twoC (1, y)) ` {0..1}", "unfolding twoCisTypeI(8)"], ["proof (prove)\nusing this:\n  (\\<lambda>x. g2 b + (g1 b - g2 b) * x) ` {0..1} = {g2 b..g1 b}\n\ngoal (1 subgoal):\n 1. {p. \\<exists>y. y \\<in> cbox (g2 b) (g1 b) \\<and> p = (b, y)} =\n    (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b))) ` {0..1}", "by(auto simp add: subset_iff image_def set_eq_iff Semiring_Normalization.comm_semiring_1_class.semiring_normalization_rules(7))"], ["proof (state)\nthis:\n  {p. \\<exists>y. y \\<in> cbox (g2 b) (g1 b) \\<and> p = (b, y)} =\n  (\\<lambda>y. twoC (1, y)) ` {0..1}\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "then"], ["proof (chain)\npicking this:\n  {p. \\<exists>y. y \\<in> cbox (g2 b) (g1 b) \\<and> p = (b, y)} =\n  (\\<lambda>y. twoC (1, y)) ` {0..1}", "have cont_on_right:\n    \"continuous_on (path_image ?right_edge) F\""], ["proof (prove)\nusing this:\n  {p. \\<exists>y. y \\<in> cbox (g2 b) (g1 b) \\<and> p = (b, y)} =\n  (\\<lambda>y. twoC (1, y)) ` {0..1}\n\ngoal (1 subgoal):\n 1. continuous_on (path_image (\\<lambda>y. twoC (1, y))) F", "using field_cont_on_left_edge_image path_image_def"], ["proof (prove)\nusing this:\n  {p. \\<exists>y. y \\<in> cbox (g2 b) (g1 b) \\<and> p = (b, y)} =\n  (\\<lambda>y. twoC (1, y)) ` {0..1}\n  continuous_on\n   {p. \\<exists>y. y \\<in> cbox (g2 b) (g1 b) \\<and> p = (b, y)} F\n  path_image ?g = ?g ` {0..1}\n\ngoal (1 subgoal):\n 1. continuous_on (path_image (\\<lambda>y. twoC (1, y))) F", "by (metis right_eq field_cont_on_left_edge_image path_image_def)"], ["proof (state)\nthis:\n  continuous_on (path_image (\\<lambda>y. twoC (1, y))) F\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "have all_edge_cases:\n    \"(\\<gamma> = ?bottom_edge \\<or> \\<gamma> = ?right_edge \\<or> \\<gamma> = ?top_edge \\<or> \\<gamma> = ?left_edge)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma> = (\\<lambda>x. twoC (x, 0)) \\<or>\n    \\<gamma> = (\\<lambda>y. twoC (1, y)) \\<or>\n    \\<gamma> = (\\<lambda>x. twoC (x, 1)) \\<or>\n    \\<gamma> = (\\<lambda>y. twoC (0, y))", "using assms"], ["proof (prove)\nusing this:\n  typeI_twoCube twoC\n  continuous_on (cubeImage twoC) F\n  (k, \\<gamma>) \\<in> boundary twoC\n\ngoal (1 subgoal):\n 1. \\<gamma> = (\\<lambda>x. twoC (x, 0)) \\<or>\n    \\<gamma> = (\\<lambda>y. twoC (1, y)) \\<or>\n    \\<gamma> = (\\<lambda>x. twoC (x, 1)) \\<or>\n    \\<gamma> = (\\<lambda>y. twoC (0, y))", "by (auto simp add: boundary_def horizontal_boundary_def vertical_boundary_def)"], ["proof (state)\nthis:\n  \\<gamma> = (\\<lambda>x. twoC (x, 0)) \\<or>\n  \\<gamma> = (\\<lambda>y. twoC (1, y)) \\<or>\n  \\<gamma> = (\\<lambda>x. twoC (x, 1)) \\<or>\n  \\<gamma> = (\\<lambda>y. twoC (0, y))\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "apply (simp add: path_image_def[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (path_image \\<gamma>) F", "using cont_on_top cont_on_bot cont_on_right cont_on_left all_edge_cases"], ["proof (prove)\nusing this:\n  continuous_on (path_image (\\<lambda>x. twoC (x, 1))) F\n  continuous_on (path_image (\\<lambda>x. twoC (x, 0))) F\n  continuous_on (path_image (\\<lambda>y. twoC (1, y))) F\n  continuous_on (path_image (\\<lambda>y. twoC (0, y))) F\n  \\<gamma> = (\\<lambda>x. twoC (x, 0)) \\<or>\n  \\<gamma> = (\\<lambda>y. twoC (1, y)) \\<or>\n  \\<gamma> = (\\<lambda>x. twoC (x, 1)) \\<or>\n  \\<gamma> = (\\<lambda>y. twoC (0, y))\n\ngoal (1 subgoal):\n 1. continuous_on (path_image \\<gamma>) F", "by blast"], ["proof (state)\nthis:\n  continuous_on (\\<gamma> ` {0..1}) F\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma typeII_cube_explicit_spec:\n  assumes \"typeII_twoCube twoC\"\n  shows \"\\<exists>a b g1 g2. a < b \\<and> (\\<forall>x \\<in> {a .. b}. g2 x \\<le> g1 x) \\<and>\n                     cubeImage twoC = {(y, x). x \\<in> {a..b} \\<and> y \\<in> {g2 x .. g1 x}}\n                  \\<and> twoC = (\\<lambda>(y, x). ((1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b), (1 - x) * a + x * b))\n                  \\<and> g1 piecewise_C1_differentiable_on {a .. b} \\<and> g2 piecewise_C1_differentiable_on {a .. b}\n                  \\<and> (\\<lambda>x. twoC(0, x)) = (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x))\n                  \\<and> (\\<lambda>y. twoC(y, 1)) = (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b))\n                  \\<and> (\\<lambda>x. twoC(1, x)) = (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x))\n                  \\<and> (\\<lambda>y. twoC(y, 0)) = (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(y, x). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(y, x).\n           ((1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b),\n            (1 - x) * a + x * b)) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b} \\<and>\n       (\\<lambda>x. twoC (0, x)) =\n       (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x)) \\<and>\n       (\\<lambda>y. twoC (y, 1)) =\n       (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b)) \\<and>\n       (\\<lambda>x. twoC (1, x)) =\n       (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x)) \\<and>\n       (\\<lambda>y. twoC (y, 0)) =\n       (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(y, x). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(y, x).\n           ((1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b),\n            (1 - x) * a + x * b)) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b} \\<and>\n       (\\<lambda>x. twoC (0, x)) =\n       (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x)) \\<and>\n       (\\<lambda>y. twoC (y, 1)) =\n       (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b)) \\<and>\n       (\\<lambda>x. twoC (1, x)) =\n       (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x)) \\<and>\n       (\\<lambda>y. twoC (y, 0)) =\n       (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))", "let ?bottom_edge = \"(\\<lambda>x. twoC(0, x))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(y, x). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(y, x).\n           ((1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b),\n            (1 - x) * a + x * b)) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b} \\<and>\n       (\\<lambda>x. twoC (0, x)) =\n       (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x)) \\<and>\n       (\\<lambda>y. twoC (y, 1)) =\n       (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b)) \\<and>\n       (\\<lambda>x. twoC (1, x)) =\n       (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x)) \\<and>\n       (\\<lambda>y. twoC (y, 0)) =\n       (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))", "let ?right_edge = \"(\\<lambda>y. twoC(y, 1))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(y, x). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(y, x).\n           ((1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b),\n            (1 - x) * a + x * b)) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b} \\<and>\n       (\\<lambda>x. twoC (0, x)) =\n       (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x)) \\<and>\n       (\\<lambda>y. twoC (y, 1)) =\n       (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b)) \\<and>\n       (\\<lambda>x. twoC (1, x)) =\n       (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x)) \\<and>\n       (\\<lambda>y. twoC (y, 0)) =\n       (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))", "let ?top_edge = \"(\\<lambda>x. twoC(1, x))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(y, x). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(y, x).\n           ((1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b),\n            (1 - x) * a + x * b)) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b} \\<and>\n       (\\<lambda>x. twoC (0, x)) =\n       (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x)) \\<and>\n       (\\<lambda>y. twoC (y, 1)) =\n       (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b)) \\<and>\n       (\\<lambda>x. twoC (1, x)) =\n       (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x)) \\<and>\n       (\\<lambda>y. twoC (y, 0)) =\n       (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))", "let ?left_edge = \"(\\<lambda>y. twoC(y, 0))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(y, x). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(y, x).\n           ((1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b),\n            (1 - x) * a + x * b)) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b} \\<and>\n       (\\<lambda>x. twoC (0, x)) =\n       (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x)) \\<and>\n       (\\<lambda>y. twoC (y, 1)) =\n       (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b)) \\<and>\n       (\\<lambda>x. twoC (1, x)) =\n       (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x)) \\<and>\n       (\\<lambda>y. twoC (y, 0)) =\n       (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))", "obtain a b g1 g2 where\n    twoCisTypeII: \"a < b\"\n    \"(\\<forall>x \\<in> cbox a b. g2 x \\<le> g1 x)\"\n    \"cubeImage twoC = {(y, x). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)}\"\n    \"twoC = (\\<lambda>(y, x). ((1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b), (1 - x) * a + x * b))\"\n    \"g1 piecewise_C1_differentiable_on {a .. b}\"\n    \"g2 piecewise_C1_differentiable_on {a .. b}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b g2 g1.\n        \\<lbrakk>a < b; \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x;\n         cubeImage twoC =\n         {(y, x). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)};\n         twoC =\n         (\\<lambda>(y, x).\n             ((1 - y) * g2 ((1 - x) * a + x * b) +\n              y * g1 ((1 - x) * a + x * b),\n              (1 - x) * a + x * b));\n         g1 piecewise_C1_differentiable_on {a..b};\n         g2 piecewise_C1_differentiable_on {a..b}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms and typeII_twoCubeImg[of\"twoC\"]"], ["proof (prove)\nusing this:\n  typeII_twoCube twoC\n  typeII_twoCube twoC \\<Longrightarrow>\n  \\<exists>a b g1 g2.\n     a < b \\<and>\n     (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n     cubeImage twoC =\n     {(y, x). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n     twoC =\n     (\\<lambda>(y, x).\n         ((1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b),\n          (1 - x) * a + x * b)) \\<and>\n     g1 piecewise_C1_differentiable_on {a..b} \\<and>\n     g2 piecewise_C1_differentiable_on {a..b}\n\ngoal (1 subgoal):\n 1. (\\<And>a b g2 g1.\n        \\<lbrakk>a < b; \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x;\n         cubeImage twoC =\n         {(y, x). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)};\n         twoC =\n         (\\<lambda>(y, x).\n             ((1 - y) * g2 ((1 - x) * a + x * b) +\n              y * g1 ((1 - x) * a + x * b),\n              (1 - x) * a + x * b));\n         g1 piecewise_C1_differentiable_on {a..b};\n         g2 piecewise_C1_differentiable_on {a..b}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  a < b\n  \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x\n  cubeImage twoC =\n  {(y, x). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)}\n  twoC =\n  (\\<lambda>(y, x).\n      ((1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b),\n       (1 - x) * a + x * b))\n  g1 piecewise_C1_differentiable_on {a..b}\n  g2 piecewise_C1_differentiable_on {a..b}\n\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(y, x). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(y, x).\n           ((1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b),\n            (1 - x) * a + x * b)) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b} \\<and>\n       (\\<lambda>x. twoC (0, x)) =\n       (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x)) \\<and>\n       (\\<lambda>y. twoC (y, 1)) =\n       (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b)) \\<and>\n       (\\<lambda>x. twoC (1, x)) =\n       (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x)) \\<and>\n       (\\<lambda>y. twoC (y, 0)) =\n       (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))", "have bottom_edge_explicit: \"?bottom_edge = (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (0, x)) =\n    (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x))", "by (simp add: twoCisTypeII(4) algebra_simps)"], ["proof (state)\nthis:\n  (\\<lambda>x. twoC (0, x)) =\n  (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x))\n\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(y, x). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(y, x).\n           ((1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b),\n            (1 - x) * a + x * b)) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b} \\<and>\n       (\\<lambda>x. twoC (0, x)) =\n       (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x)) \\<and>\n       (\\<lambda>y. twoC (y, 1)) =\n       (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b)) \\<and>\n       (\\<lambda>x. twoC (1, x)) =\n       (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x)) \\<and>\n       (\\<lambda>y. twoC (y, 0)) =\n       (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))", "have right_edge_explicit: \"?right_edge = (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (y, 1)) =\n    (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b))", "by (simp add: twoCisTypeII(4) algebra_simps)"], ["proof (state)\nthis:\n  (\\<lambda>y. twoC (y, 1)) =\n  (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b))\n\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(y, x). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(y, x).\n           ((1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b),\n            (1 - x) * a + x * b)) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b} \\<and>\n       (\\<lambda>x. twoC (0, x)) =\n       (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x)) \\<and>\n       (\\<lambda>y. twoC (y, 1)) =\n       (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b)) \\<and>\n       (\\<lambda>x. twoC (1, x)) =\n       (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x)) \\<and>\n       (\\<lambda>y. twoC (y, 0)) =\n       (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))", "have top_edge_explicit: \"?top_edge = (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (1, x)) =\n    (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x))", "by (simp add: twoCisTypeII(4) algebra_simps)"], ["proof (state)\nthis:\n  (\\<lambda>x. twoC (1, x)) =\n  (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x))\n\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(y, x). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(y, x).\n           ((1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b),\n            (1 - x) * a + x * b)) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b} \\<and>\n       (\\<lambda>x. twoC (0, x)) =\n       (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x)) \\<and>\n       (\\<lambda>y. twoC (y, 1)) =\n       (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b)) \\<and>\n       (\\<lambda>x. twoC (1, x)) =\n       (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x)) \\<and>\n       (\\<lambda>y. twoC (y, 0)) =\n       (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))", "have left_edge_explicit: \"?left_edge = (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (y, 0)) =\n    (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))", "by (simp add: twoCisTypeII(4) algebra_simps)"], ["proof (state)\nthis:\n  (\\<lambda>y. twoC (y, 0)) =\n  (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))\n\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(y, x). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(y, x).\n           ((1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b),\n            (1 - x) * a + x * b)) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b} \\<and>\n       (\\<lambda>x. twoC (0, x)) =\n       (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x)) \\<and>\n       (\\<lambda>y. twoC (y, 1)) =\n       (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b)) \\<and>\n       (\\<lambda>x. twoC (1, x)) =\n       (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x)) \\<and>\n       (\\<lambda>y. twoC (y, 0)) =\n       (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(y, x). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(y, x).\n           ((1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b),\n            (1 - x) * a + x * b)) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b} \\<and>\n       (\\<lambda>x. twoC (0, x)) =\n       (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x)) \\<and>\n       (\\<lambda>y. twoC (y, 1)) =\n       (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b)) \\<and>\n       (\\<lambda>x. twoC (1, x)) =\n       (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x)) \\<and>\n       (\\<lambda>y. twoC (y, 0)) =\n       (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))", "using bottom_edge_explicit right_edge_explicit top_edge_explicit left_edge_explicit twoCisTypeII"], ["proof (prove)\nusing this:\n  (\\<lambda>x. twoC (0, x)) =\n  (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x))\n  (\\<lambda>y. twoC (y, 1)) =\n  (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b))\n  (\\<lambda>x. twoC (1, x)) =\n  (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x))\n  (\\<lambda>y. twoC (y, 0)) =\n  (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))\n  a < b\n  \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x\n  cubeImage twoC =\n  {(y, x). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)}\n  twoC =\n  (\\<lambda>(y, x).\n      ((1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b),\n       (1 - x) * a + x * b))\n  g1 piecewise_C1_differentiable_on {a..b}\n  g2 piecewise_C1_differentiable_on {a..b}\n\ngoal (1 subgoal):\n 1. \\<exists>a b g1 g2.\n       a < b \\<and>\n       (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n       cubeImage twoC =\n       {(y, x). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n       twoC =\n       (\\<lambda>(y, x).\n           ((1 - y) * g2 ((1 - x) * a + x * b) +\n            y * g1 ((1 - x) * a + x * b),\n            (1 - x) * a + x * b)) \\<and>\n       g1 piecewise_C1_differentiable_on {a..b} \\<and>\n       g2 piecewise_C1_differentiable_on {a..b} \\<and>\n       (\\<lambda>x. twoC (0, x)) =\n       (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x)) \\<and>\n       (\\<lambda>y. twoC (y, 1)) =\n       (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b)) \\<and>\n       (\\<lambda>x. twoC (1, x)) =\n       (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x)) \\<and>\n       (\\<lambda>y. twoC (y, 0)) =\n       (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))", "by auto"], ["proof (state)\nthis:\n  \\<exists>a b g1 g2.\n     a < b \\<and>\n     (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n     cubeImage twoC =\n     {(y, x). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n     twoC =\n     (\\<lambda>(y, x).\n         ((1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b),\n          (1 - x) * a + x * b)) \\<and>\n     g1 piecewise_C1_differentiable_on {a..b} \\<and>\n     g2 piecewise_C1_differentiable_on {a..b} \\<and>\n     (\\<lambda>x. twoC (0, x)) =\n     (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x)) \\<and>\n     (\\<lambda>y. twoC (y, 1)) =\n     (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b)) \\<and>\n     (\\<lambda>x. twoC (1, x)) =\n     (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x)) \\<and>\n     (\\<lambda>y. twoC (y, 0)) =\n     (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma typeII_twoCube_smooth_edges:\n  assumes \"typeII_twoCube twoC\" \"(k,\\<gamma>) \\<in> boundary twoC\"\n  shows \"\\<gamma> piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma> piecewise_C1_differentiable_on {0..1}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<gamma> piecewise_C1_differentiable_on {0..1}", "let ?bottom_edge = \"(\\<lambda>x. twoC(0, x))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<gamma> piecewise_C1_differentiable_on {0..1}", "let ?right_edge = \"(\\<lambda>y. twoC(y, 1))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<gamma> piecewise_C1_differentiable_on {0..1}", "let ?top_edge = \"(\\<lambda>x. twoC(1, x))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<gamma> piecewise_C1_differentiable_on {0..1}", "let ?left_edge = \"(\\<lambda>y. twoC(y, 0))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<gamma> piecewise_C1_differentiable_on {0..1}", "obtain a b g1 g2 where\n    twoCisTypeII: \"a < b\"\n    \"(\\<forall>x \\<in> cbox a b. g2 x \\<le> g1 x)\"\n    \"cubeImage twoC = {(y, x). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)}\"\n    \"twoC = (\\<lambda>(y, x). ((1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b), (1 - x) * a + x * b))\"\n    \"g1 piecewise_C1_differentiable_on {a .. b}\"\n    \"g2 piecewise_C1_differentiable_on {a .. b}\"\n    \"(\\<lambda>x. twoC(0, x)) = (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x))\"\n    \"(\\<lambda>y. twoC(y, 1)) = (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b))\"\n    \"(\\<lambda>x. twoC(1, x)) = (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x))\"\n    \"(\\<lambda>y. twoC(y, 0)) = (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b g2 g1.\n        \\<lbrakk>a < b; \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x;\n         cubeImage twoC =\n         {(y, x). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)};\n         twoC =\n         (\\<lambda>(y, x).\n             ((1 - y) * g2 ((1 - x) * a + x * b) +\n              y * g1 ((1 - x) * a + x * b),\n              (1 - x) * a + x * b));\n         g1 piecewise_C1_differentiable_on {a..b};\n         g2 piecewise_C1_differentiable_on {a..b};\n         (\\<lambda>x. twoC (0, x)) =\n         (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x));\n         (\\<lambda>y. twoC (y, 1)) =\n         (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b));\n         (\\<lambda>x. twoC (1, x)) =\n         (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x));\n         (\\<lambda>y. twoC (y, 0)) =\n         (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms and typeII_cube_explicit_spec[of\"twoC\"]"], ["proof (prove)\nusing this:\n  typeII_twoCube twoC\n  (k, \\<gamma>) \\<in> boundary twoC\n  typeII_twoCube twoC \\<Longrightarrow>\n  \\<exists>a b g1 g2.\n     a < b \\<and>\n     (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n     cubeImage twoC =\n     {(y, x). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n     twoC =\n     (\\<lambda>(y, x).\n         ((1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b),\n          (1 - x) * a + x * b)) \\<and>\n     g1 piecewise_C1_differentiable_on {a..b} \\<and>\n     g2 piecewise_C1_differentiable_on {a..b} \\<and>\n     (\\<lambda>x. twoC (0, x)) =\n     (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x)) \\<and>\n     (\\<lambda>y. twoC (y, 1)) =\n     (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b)) \\<and>\n     (\\<lambda>x. twoC (1, x)) =\n     (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x)) \\<and>\n     (\\<lambda>y. twoC (y, 0)) =\n     (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))\n\ngoal (1 subgoal):\n 1. (\\<And>a b g2 g1.\n        \\<lbrakk>a < b; \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x;\n         cubeImage twoC =\n         {(y, x). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)};\n         twoC =\n         (\\<lambda>(y, x).\n             ((1 - y) * g2 ((1 - x) * a + x * b) +\n              y * g1 ((1 - x) * a + x * b),\n              (1 - x) * a + x * b));\n         g1 piecewise_C1_differentiable_on {a..b};\n         g2 piecewise_C1_differentiable_on {a..b};\n         (\\<lambda>x. twoC (0, x)) =\n         (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x));\n         (\\<lambda>y. twoC (y, 1)) =\n         (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b));\n         (\\<lambda>x. twoC (1, x)) =\n         (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x));\n         (\\<lambda>y. twoC (y, 0)) =\n         (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  a < b\n  \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x\n  cubeImage twoC =\n  {(y, x). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)}\n  twoC =\n  (\\<lambda>(y, x).\n      ((1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b),\n       (1 - x) * a + x * b))\n  g1 piecewise_C1_differentiable_on {a..b}\n  g2 piecewise_C1_differentiable_on {a..b}\n  (\\<lambda>x. twoC (0, x)) =\n  (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x))\n  (\\<lambda>y. twoC (y, 1)) =\n  (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b))\n  (\\<lambda>x. twoC (1, x)) =\n  (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x))\n  (\\<lambda>y. twoC (y, 0)) =\n  (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))\n\ngoal (1 subgoal):\n 1. \\<gamma> piecewise_C1_differentiable_on {0..1}", "have bottom_edge_smooth: \"?bottom_edge piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (0, x)) piecewise_C1_differentiable_on {0..1}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (0, x)) piecewise_C1_differentiable_on {0..1}", "have \"\\<forall>x. (\\<lambda>x. (a + (b - a) * x)) -` {x} = {(x - a)/(b -a)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. (\\<lambda>x. a + (b - a) * x) -` {x} = {(x - a) / (b - a)}", "using twoCisTypeII(1)"], ["proof (prove)\nusing this:\n  a < b\n\ngoal (1 subgoal):\n 1. \\<forall>x. (\\<lambda>x. a + (b - a) * x) -` {x} = {(x - a) / (b - a)}", "by auto"], ["proof (state)\nthis:\n  \\<forall>x. (\\<lambda>x. a + (b - a) * x) -` {x} = {(x - a) / (b - a)}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (0, x)) piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  \\<forall>x. (\\<lambda>x. a + (b - a) * x) -` {x} = {(x - a) / (b - a)}", "have finite_vimg: \"\\<And>x. finite({0..1} \\<inter> (\\<lambda>x. (a + (b - a) * x))-` {x})\""], ["proof (prove)\nusing this:\n  \\<forall>x. (\\<lambda>x. a + (b - a) * x) -` {x} = {(x - a) / (b - a)}\n\ngoal (1 subgoal):\n 1. \\<And>x. finite ({0..1} \\<inter> (\\<lambda>x. a + (b - a) * x) -` {x})", "by auto"], ["proof (state)\nthis:\n  finite ({0..1} \\<inter> (\\<lambda>x. a + (b - a) * x) -` {?x})\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (0, x)) piecewise_C1_differentiable_on {0..1}", "have scale_shif_pw_smth: \"(\\<lambda>x. (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. a + (b - a) * x) piecewise_C1_differentiable_on {0..1}", "using scale_shift_smooth C1_differentiable_imp_piecewise"], ["proof (prove)\nusing this:\n  (\\<lambda>x. ?a + ?b * x) C1_differentiable_on ?s\n  ?f C1_differentiable_on ?S \\<Longrightarrow>\n  ?f piecewise_C1_differentiable_on ?S\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. a + (b - a) * x) piecewise_C1_differentiable_on {0..1}", "by blast"], ["proof (state)\nthis:\n  (\\<lambda>x. a + (b - a) * x) piecewise_C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (0, x)) piecewise_C1_differentiable_on {0..1}", "have g2_smooth: \"g2 piecewise_C1_differentiable_on (\\<lambda>x. a + (b - a) * x) ` {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g2 piecewise_C1_differentiable_on (\\<lambda>x. a + (b - a) * x) ` {0..1}", "using add_scale_img[OF twoCisTypeII(1)] twoCisTypeII(6)"], ["proof (prove)\nusing this:\n  (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}\n  g2 piecewise_C1_differentiable_on {a..b}\n\ngoal (1 subgoal):\n 1. g2 piecewise_C1_differentiable_on (\\<lambda>x. a + (b - a) * x) ` {0..1}", "by auto"], ["proof (state)\nthis:\n  g2 piecewise_C1_differentiable_on (\\<lambda>x. a + (b - a) * x) ` {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (0, x)) piecewise_C1_differentiable_on {0..1}", "have \"(\\<lambda>x. g2 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. g2 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}", "using piecewise_C1_differentiable_compose[OF scale_shif_pw_smth g2_smooth finite_vimg]"], ["proof (prove)\nusing this:\n  g2 \\<circ> (\\<lambda>x. a + (b - a) * x) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. g2 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}", "by (auto simp add: o_def)"], ["proof (state)\nthis:\n  (\\<lambda>x. g2 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (0, x)) piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x. g2 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}", "have \"(\\<lambda>x::real. (g2 (a + (b - a) * x), a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\nusing this:\n  (\\<lambda>x. g2 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (g2 (a + (b - a) * x),\n         a + (b - a) * x)) piecewise_C1_differentiable_on\n    {0..1}", "using all_components_smooth_one_pw_smooth_is_pw_smooth[where f = \"(\\<lambda>x::real. (g2 (a + (b - a) * x), a + (b - a) * x))\"]"], ["proof (prove)\nusing this:\n  (\\<lambda>x. g2 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\n  \\<lbrakk>\\<And>i.\n              i \\<in> Basis - {?j} \\<Longrightarrow>\n              (\\<lambda>x.\n                  (g2 (a + (b - a) * x), a + (b - a) * x) \\<bullet>\n                  i) C1_differentiable_on\n              ?s;\n   (\\<lambda>x.\n       (g2 (a + (b - a) * x), a + (b - a) * x) \\<bullet>\n       ?j) piecewise_C1_differentiable_on\n   ?s\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>x.\n                        (g2 (a + (b - a) * x),\n                         a + (b - a) * x)) piecewise_C1_differentiable_on\n                    ?s\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (g2 (a + (b - a) * x),\n         a + (b - a) * x)) piecewise_C1_differentiable_on\n    {0..1}", "by (fastforce simp add: real_pair_basis)"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      (g2 (a + (b - a) * x),\n       a + (b - a) * x)) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (0, x)) piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x.\n      (g2 (a + (b - a) * x),\n       a + (b - a) * x)) piecewise_C1_differentiable_on\n  {0..1}", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (g2 (a + (b - a) * x),\n       a + (b - a) * x)) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (0, x)) piecewise_C1_differentiable_on {0..1}", "using twoCisTypeII(7)"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (g2 (a + (b - a) * x),\n       a + (b - a) * x)) piecewise_C1_differentiable_on\n  {0..1}\n  (\\<lambda>x. twoC (0, x)) =\n  (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (0, x)) piecewise_C1_differentiable_on {0..1}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. twoC (0, x)) piecewise_C1_differentiable_on {0..1}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>x. twoC (0, x)) piecewise_C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. \\<gamma> piecewise_C1_differentiable_on {0..1}", "have top_edge_smooth: \"?top_edge piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (1, x)) piecewise_C1_differentiable_on {0..1}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (1, x)) piecewise_C1_differentiable_on {0..1}", "have \"\\<forall>x. (\\<lambda>x. (a + (b - a) * x))-` {x} = {(x - a)/(b -a)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. (\\<lambda>x. a + (b - a) * x) -` {x} = {(x - a) / (b - a)}", "using twoCisTypeII(1)"], ["proof (prove)\nusing this:\n  a < b\n\ngoal (1 subgoal):\n 1. \\<forall>x. (\\<lambda>x. a + (b - a) * x) -` {x} = {(x - a) / (b - a)}", "by auto"], ["proof (state)\nthis:\n  \\<forall>x. (\\<lambda>x. a + (b - a) * x) -` {x} = {(x - a) / (b - a)}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (1, x)) piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  \\<forall>x. (\\<lambda>x. a + (b - a) * x) -` {x} = {(x - a) / (b - a)}", "have finite_vimg: \"\\<And>x. finite({0..1} \\<inter> (\\<lambda>x. (a + (b - a) * x))-` {x})\""], ["proof (prove)\nusing this:\n  \\<forall>x. (\\<lambda>x. a + (b - a) * x) -` {x} = {(x - a) / (b - a)}\n\ngoal (1 subgoal):\n 1. \\<And>x. finite ({0..1} \\<inter> (\\<lambda>x. a + (b - a) * x) -` {x})", "by auto"], ["proof (state)\nthis:\n  finite ({0..1} \\<inter> (\\<lambda>x. a + (b - a) * x) -` {?x})\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (1, x)) piecewise_C1_differentiable_on {0..1}", "have scale_shif_pw_smth: \"(\\<lambda>x. (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. a + (b - a) * x) piecewise_C1_differentiable_on {0..1}", "using scale_shift_smooth C1_differentiable_imp_piecewise"], ["proof (prove)\nusing this:\n  (\\<lambda>x. ?a + ?b * x) C1_differentiable_on ?s\n  ?f C1_differentiable_on ?S \\<Longrightarrow>\n  ?f piecewise_C1_differentiable_on ?S\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. a + (b - a) * x) piecewise_C1_differentiable_on {0..1}", "by blast"], ["proof (state)\nthis:\n  (\\<lambda>x. a + (b - a) * x) piecewise_C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (1, x)) piecewise_C1_differentiable_on {0..1}", "have g1_smooth: \"g1 piecewise_C1_differentiable_on (\\<lambda>x. a + (b - a) * x) ` {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g1 piecewise_C1_differentiable_on (\\<lambda>x. a + (b - a) * x) ` {0..1}", "using add_scale_img[OF twoCisTypeII(1)] twoCisTypeII(5)"], ["proof (prove)\nusing this:\n  (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}\n  g1 piecewise_C1_differentiable_on {a..b}\n\ngoal (1 subgoal):\n 1. g1 piecewise_C1_differentiable_on (\\<lambda>x. a + (b - a) * x) ` {0..1}", "by auto"], ["proof (state)\nthis:\n  g1 piecewise_C1_differentiable_on (\\<lambda>x. a + (b - a) * x) ` {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (1, x)) piecewise_C1_differentiable_on {0..1}", "have \"(\\<lambda>x. g1 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. g1 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}", "using piecewise_C1_differentiable_compose[OF scale_shif_pw_smth g1_smooth finite_vimg]"], ["proof (prove)\nusing this:\n  g1 \\<circ> (\\<lambda>x. a + (b - a) * x) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. g1 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}", "by (auto simp add: o_def)"], ["proof (state)\nthis:\n  (\\<lambda>x. g1 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (1, x)) piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x. g1 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}", "have \"(\\<lambda>x::real. (g1 (a + (b - a) * x), a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\nusing this:\n  (\\<lambda>x. g1 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (g1 (a + (b - a) * x),\n         a + (b - a) * x)) piecewise_C1_differentiable_on\n    {0..1}", "using all_components_smooth_one_pw_smooth_is_pw_smooth[where f = \"(\\<lambda>x::real. (g1 (a + (b - a) * x), a + (b - a) * x))\"]"], ["proof (prove)\nusing this:\n  (\\<lambda>x. g1 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\n  \\<lbrakk>\\<And>i.\n              i \\<in> Basis - {?j} \\<Longrightarrow>\n              (\\<lambda>x.\n                  (g1 (a + (b - a) * x), a + (b - a) * x) \\<bullet>\n                  i) C1_differentiable_on\n              ?s;\n   (\\<lambda>x.\n       (g1 (a + (b - a) * x), a + (b - a) * x) \\<bullet>\n       ?j) piecewise_C1_differentiable_on\n   ?s\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>x.\n                        (g1 (a + (b - a) * x),\n                         a + (b - a) * x)) piecewise_C1_differentiable_on\n                    ?s\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (g1 (a + (b - a) * x),\n         a + (b - a) * x)) piecewise_C1_differentiable_on\n    {0..1}", "by (fastforce simp add: real_pair_basis)"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      (g1 (a + (b - a) * x),\n       a + (b - a) * x)) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (1, x)) piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x.\n      (g1 (a + (b - a) * x),\n       a + (b - a) * x)) piecewise_C1_differentiable_on\n  {0..1}", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (g1 (a + (b - a) * x),\n       a + (b - a) * x)) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (1, x)) piecewise_C1_differentiable_on {0..1}", "using twoCisTypeII(9)"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (g1 (a + (b - a) * x),\n       a + (b - a) * x)) piecewise_C1_differentiable_on\n  {0..1}\n  (\\<lambda>x. twoC (1, x)) =\n  (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (1, x)) piecewise_C1_differentiable_on {0..1}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. twoC (1, x)) piecewise_C1_differentiable_on {0..1}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>x. twoC (1, x)) piecewise_C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. \\<gamma> piecewise_C1_differentiable_on {0..1}", "have right_edge_smooth: \"?right_edge piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (y, 1)) piecewise_C1_differentiable_on {0..1}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (y, 1)) piecewise_C1_differentiable_on {0..1}", "have \"(\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b))) piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        g2 b + x *\\<^sub>R (g1 b - g2 b)) piecewise_C1_differentiable_on\n    {0..1}", "by (simp add: C1_differentiable_imp_piecewise)"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      g2 b + x *\\<^sub>R (g1 b - g2 b)) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (y, 1)) piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x.\n      g2 b + x *\\<^sub>R (g1 b - g2 b)) piecewise_C1_differentiable_on\n  {0..1}", "have \"(\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b)) piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      g2 b + x *\\<^sub>R (g1 b - g2 b)) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (g2 b + x *\\<^sub>R (g1 b - g2 b),\n         b)) piecewise_C1_differentiable_on\n    {0..1}", "using all_components_smooth_one_pw_smooth_is_pw_smooth[of \"(1,0)\" \"(\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b))\"]"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      g2 b + x *\\<^sub>R (g1 b - g2 b)) piecewise_C1_differentiable_on\n  {0..1}\n  \\<lbrakk>\\<And>i.\n              i \\<in> Basis - {(1, 0)} \\<Longrightarrow>\n              (\\<lambda>x.\n                  (g2 b + x *\\<^sub>R (g1 b - g2 b), b) \\<bullet>\n                  i) C1_differentiable_on\n              ?s;\n   (\\<lambda>x.\n       (g2 b + x *\\<^sub>R (g1 b - g2 b), b) \\<bullet>\n       (1, 0)) piecewise_C1_differentiable_on\n   ?s\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>x.\n                        (g2 b + x *\\<^sub>R (g1 b - g2 b),\n                         b)) piecewise_C1_differentiable_on\n                    ?s\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (g2 b + x *\\<^sub>R (g1 b - g2 b),\n         b)) piecewise_C1_differentiable_on\n    {0..1}", "by (auto simp add: real_pair_basis)"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      (g2 b + x *\\<^sub>R (g1 b - g2 b), b)) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (y, 1)) piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x.\n      (g2 b + x *\\<^sub>R (g1 b - g2 b), b)) piecewise_C1_differentiable_on\n  {0..1}", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (g2 b + x *\\<^sub>R (g1 b - g2 b), b)) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (y, 1)) piecewise_C1_differentiable_on {0..1}", "using twoCisTypeII(8)"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (g2 b + x *\\<^sub>R (g1 b - g2 b), b)) piecewise_C1_differentiable_on\n  {0..1}\n  (\\<lambda>y. twoC (y, 1)) =\n  (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b))\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (y, 1)) piecewise_C1_differentiable_on {0..1}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>y. twoC (y, 1)) piecewise_C1_differentiable_on {0..1}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>y. twoC (y, 1)) piecewise_C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. \\<gamma> piecewise_C1_differentiable_on {0..1}", "have left_edge_smooth: \"?left_edge piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (y, 0)) piecewise_C1_differentiable_on {0..1}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (y, 0)) piecewise_C1_differentiable_on {0..1}", "have 0: \"(\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a))) C1_differentiable_on {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. g2 a + x *\\<^sub>R (g1 a - g2 a)) C1_differentiable_on\n    {0..1}", "using C1_differentiable_imp_piecewise"], ["proof (prove)\nusing this:\n  ?f C1_differentiable_on ?S \\<Longrightarrow>\n  ?f piecewise_C1_differentiable_on ?S\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. g2 a + x *\\<^sub>R (g1 a - g2 a)) C1_differentiable_on\n    {0..1}", "by fastforce"], ["proof (state)\nthis:\n  (\\<lambda>x. g2 a + x *\\<^sub>R (g1 a - g2 a)) C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (y, 0)) piecewise_C1_differentiable_on {0..1}", "have \"(\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a)) piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (g2 a + x *\\<^sub>R (g1 a - g2 a),\n         a)) piecewise_C1_differentiable_on\n    {0..1}", "using C1_differentiable_imp_piecewise[OF C1_differentiable_on_pair[OF 0 C1_differentiable_on_const[of \"a\" \"{0..1}\"]]]"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (g2 a + x *\\<^sub>R (g1 a - g2 a), a)) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (g2 a + x *\\<^sub>R (g1 a - g2 a),\n         a)) piecewise_C1_differentiable_on\n    {0..1}", "by force"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      (g2 a + x *\\<^sub>R (g1 a - g2 a), a)) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (y, 0)) piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x.\n      (g2 a + x *\\<^sub>R (g1 a - g2 a), a)) piecewise_C1_differentiable_on\n  {0..1}", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (g2 a + x *\\<^sub>R (g1 a - g2 a), a)) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (y, 0)) piecewise_C1_differentiable_on {0..1}", "using twoCisTypeII(10)"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (g2 a + x *\\<^sub>R (g1 a - g2 a), a)) piecewise_C1_differentiable_on\n  {0..1}\n  (\\<lambda>y. twoC (y, 0)) =\n  (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (y, 0)) piecewise_C1_differentiable_on {0..1}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>y. twoC (y, 0)) piecewise_C1_differentiable_on {0..1}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>y. twoC (y, 0)) piecewise_C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. \\<gamma> piecewise_C1_differentiable_on {0..1}", "have \"\\<gamma> = ?bottom_edge \\<or> \\<gamma> = ?right_edge \\<or> \\<gamma> = ?top_edge \\<or> \\<gamma> = ?left_edge\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma> = (\\<lambda>x. twoC (0, x)) \\<or>\n    \\<gamma> = (\\<lambda>y. twoC (y, 1)) \\<or>\n    \\<gamma> = (\\<lambda>x. twoC (1, x)) \\<or>\n    \\<gamma> = (\\<lambda>y. twoC (y, 0))", "using assms"], ["proof (prove)\nusing this:\n  typeII_twoCube twoC\n  (k, \\<gamma>) \\<in> boundary twoC\n\ngoal (1 subgoal):\n 1. \\<gamma> = (\\<lambda>x. twoC (0, x)) \\<or>\n    \\<gamma> = (\\<lambda>y. twoC (y, 1)) \\<or>\n    \\<gamma> = (\\<lambda>x. twoC (1, x)) \\<or>\n    \\<gamma> = (\\<lambda>y. twoC (y, 0))", "by (auto simp add: boundary_def horizontal_boundary_def vertical_boundary_def)"], ["proof (state)\nthis:\n  \\<gamma> = (\\<lambda>x. twoC (0, x)) \\<or>\n  \\<gamma> = (\\<lambda>y. twoC (y, 1)) \\<or>\n  \\<gamma> = (\\<lambda>x. twoC (1, x)) \\<or>\n  \\<gamma> = (\\<lambda>y. twoC (y, 0))\n\ngoal (1 subgoal):\n 1. \\<gamma> piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  \\<gamma> = (\\<lambda>x. twoC (0, x)) \\<or>\n  \\<gamma> = (\\<lambda>y. twoC (y, 1)) \\<or>\n  \\<gamma> = (\\<lambda>x. twoC (1, x)) \\<or>\n  \\<gamma> = (\\<lambda>y. twoC (y, 0))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<gamma> = (\\<lambda>x. twoC (0, x)) \\<or>\n  \\<gamma> = (\\<lambda>y. twoC (y, 1)) \\<or>\n  \\<gamma> = (\\<lambda>x. twoC (1, x)) \\<or>\n  \\<gamma> = (\\<lambda>y. twoC (y, 0))\n\ngoal (1 subgoal):\n 1. \\<gamma> piecewise_C1_differentiable_on {0..1}", "using left_edge_smooth right_edge_smooth top_edge_smooth bottom_edge_smooth"], ["proof (prove)\nusing this:\n  \\<gamma> = (\\<lambda>x. twoC (0, x)) \\<or>\n  \\<gamma> = (\\<lambda>y. twoC (y, 1)) \\<or>\n  \\<gamma> = (\\<lambda>x. twoC (1, x)) \\<or>\n  \\<gamma> = (\\<lambda>y. twoC (y, 0))\n  (\\<lambda>y. twoC (y, 0)) piecewise_C1_differentiable_on {0..1}\n  (\\<lambda>y. twoC (y, 1)) piecewise_C1_differentiable_on {0..1}\n  (\\<lambda>x. twoC (1, x)) piecewise_C1_differentiable_on {0..1}\n  (\\<lambda>x. twoC (0, x)) piecewise_C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. \\<gamma> piecewise_C1_differentiable_on {0..1}", "by auto"], ["proof (state)\nthis:\n  \\<gamma> piecewise_C1_differentiable_on {0..1}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma field_cont_on_typeII_region_cont_on_edges:\n  assumes typeII_twoC:\n    \"typeII_twoCube twoC\" and\n    field_cont:\n    \"continuous_on (cubeImage twoC) F\" and\n    member_of_boundary:\n    \"(k,\\<gamma>) \\<in> boundary twoC\"\n  shows \"continuous_on (\\<gamma> ` {0 .. 1}) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "obtain a b g1 g2 where\n    twoCisTypeII: \"a < b\"\n    \"(\\<forall>x \\<in> cbox a b. g2 x \\<le> g1 x)\"\n    \"cubeImage twoC = {(y, x). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)}\"\n    \"twoC = (\\<lambda>(y, x). ((1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b), (1 - x) * a + x * b))\"\n    \"g1 piecewise_C1_differentiable_on {a .. b}\"\n    \"g2 piecewise_C1_differentiable_on {a .. b}\"\n    \"(\\<lambda>x. twoC(0, x)) = (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x))\"\n    \"(\\<lambda>y. twoC(y, 1)) = (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b))\"\n    \"(\\<lambda>x. twoC(1, x)) = (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x))\"\n    \"(\\<lambda>y. twoC(y, 0)) = (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b g2 g1.\n        \\<lbrakk>a < b; \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x;\n         cubeImage twoC =\n         {(y, x). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)};\n         twoC =\n         (\\<lambda>(y, x).\n             ((1 - y) * g2 ((1 - x) * a + x * b) +\n              y * g1 ((1 - x) * a + x * b),\n              (1 - x) * a + x * b));\n         g1 piecewise_C1_differentiable_on {a..b};\n         g2 piecewise_C1_differentiable_on {a..b};\n         (\\<lambda>x. twoC (0, x)) =\n         (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x));\n         (\\<lambda>y. twoC (y, 1)) =\n         (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b));\n         (\\<lambda>x. twoC (1, x)) =\n         (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x));\n         (\\<lambda>y. twoC (y, 0)) =\n         (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using typeII_twoC and typeII_cube_explicit_spec[of\"twoC\"]"], ["proof (prove)\nusing this:\n  typeII_twoCube twoC\n  typeII_twoCube twoC \\<Longrightarrow>\n  \\<exists>a b g1 g2.\n     a < b \\<and>\n     (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n     cubeImage twoC =\n     {(y, x). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n     twoC =\n     (\\<lambda>(y, x).\n         ((1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b),\n          (1 - x) * a + x * b)) \\<and>\n     g1 piecewise_C1_differentiable_on {a..b} \\<and>\n     g2 piecewise_C1_differentiable_on {a..b} \\<and>\n     (\\<lambda>x. twoC (0, x)) =\n     (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x)) \\<and>\n     (\\<lambda>y. twoC (y, 1)) =\n     (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b)) \\<and>\n     (\\<lambda>x. twoC (1, x)) =\n     (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x)) \\<and>\n     (\\<lambda>y. twoC (y, 0)) =\n     (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))\n\ngoal (1 subgoal):\n 1. (\\<And>a b g2 g1.\n        \\<lbrakk>a < b; \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x;\n         cubeImage twoC =\n         {(y, x). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)};\n         twoC =\n         (\\<lambda>(y, x).\n             ((1 - y) * g2 ((1 - x) * a + x * b) +\n              y * g1 ((1 - x) * a + x * b),\n              (1 - x) * a + x * b));\n         g1 piecewise_C1_differentiable_on {a..b};\n         g2 piecewise_C1_differentiable_on {a..b};\n         (\\<lambda>x. twoC (0, x)) =\n         (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x));\n         (\\<lambda>y. twoC (y, 1)) =\n         (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b));\n         (\\<lambda>x. twoC (1, x)) =\n         (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x));\n         (\\<lambda>y. twoC (y, 0)) =\n         (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  a < b\n  \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x\n  cubeImage twoC =\n  {(y, x). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)}\n  twoC =\n  (\\<lambda>(y, x).\n      ((1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b),\n       (1 - x) * a + x * b))\n  g1 piecewise_C1_differentiable_on {a..b}\n  g2 piecewise_C1_differentiable_on {a..b}\n  (\\<lambda>x. twoC (0, x)) =\n  (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x))\n  (\\<lambda>y. twoC (y, 1)) =\n  (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b))\n  (\\<lambda>x. twoC (1, x)) =\n  (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x))\n  (\\<lambda>y. twoC (y, 0)) =\n  (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "let ?bottom_edge = \"(\\<lambda>x. twoC(0, x))\""], ["proof (state)\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "let ?right_edge = \"(\\<lambda>y. twoC(y, 1))\""], ["proof (state)\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "let ?top_edge = \"(\\<lambda>x. twoC(1, x))\""], ["proof (state)\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "let ?left_edge = \"(\\<lambda>y. twoC(y, 0))\""], ["proof (state)\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "let ?Dg1 =  \"{p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g1(x), x)}\""], ["proof (state)\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "have line_is_pair_img: \"?Dg1 = (\\<lambda>x. (g1(x), x)) ` (cbox a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g1 x, x)} =\n    (\\<lambda>x. (g1 x, x)) ` cbox a b", "using image_def"], ["proof (prove)\nusing this:\n  ?f ` ?A = {y. \\<exists>x\\<in>?A. y = ?f x}\n\ngoal (1 subgoal):\n 1. {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g1 x, x)} =\n    (\\<lambda>x. (g1 x, x)) ` cbox a b", "by auto"], ["proof (state)\nthis:\n  {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g1 x, x)} =\n  (\\<lambda>x. (g1 x, x)) ` cbox a b\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "have field_cont_on_top_edge_image: \"continuous_on ?Dg1 F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g1 x, x)} F", "by (rule continuous_on_subset [OF field_cont]) (auto simp: twoCisTypeII(2) twoCisTypeII(3))"], ["proof (state)\nthis:\n  continuous_on {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g1 x, x)} F\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "have top_edge_is_compos_of_scal_and_g1:\n    \"(\\<lambda>x. twoC(1, x)) = (\\<lambda>x. (g1(x), x)) \\<circ> (\\<lambda>x. a + (b - a) * x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (1, x)) =\n    (\\<lambda>x. (g1 x, x)) \\<circ> (\\<lambda>x. a + (b - a) * x)", "using twoCisTypeII"], ["proof (prove)\nusing this:\n  a < b\n  \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x\n  cubeImage twoC =\n  {(y, x). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)}\n  twoC =\n  (\\<lambda>(y, x).\n      ((1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b),\n       (1 - x) * a + x * b))\n  g1 piecewise_C1_differentiable_on {a..b}\n  g2 piecewise_C1_differentiable_on {a..b}\n  (\\<lambda>x. twoC (0, x)) =\n  (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x))\n  (\\<lambda>y. twoC (y, 1)) =\n  (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b))\n  (\\<lambda>x. twoC (1, x)) =\n  (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x))\n  (\\<lambda>y. twoC (y, 0)) =\n  (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (1, x)) =\n    (\\<lambda>x. (g1 x, x)) \\<circ> (\\<lambda>x. a + (b - a) * x)", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. twoC (1, x)) =\n  (\\<lambda>x. (g1 x, x)) \\<circ> (\\<lambda>x. a + (b - a) * x)\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "have Dg1_is_bot_edge_pathimg:\n    \"path_image (\\<lambda>x. twoC(1, x)) = ?Dg1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_image (\\<lambda>x. twoC (1, x)) =\n    {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g1 x, x)}", "using line_is_pair_img and top_edge_is_compos_of_scal_and_g1 image_comp path_image_def add_scale_img and twoCisTypeII(1)"], ["proof (prove)\nusing this:\n  {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g1 x, x)} =\n  (\\<lambda>x. (g1 x, x)) ` cbox a b\n  (\\<lambda>x. twoC (1, x)) =\n  (\\<lambda>x. (g1 x, x)) \\<circ> (\\<lambda>x. a + (b - a) * x)\n  ?f ` ?g ` ?r = (?f \\<circ> ?g) ` ?r\n  path_image ?g = ?g ` {0..1}\n  ?a < ?b \\<Longrightarrow>\n  (\\<lambda>x. ?a + (?b - ?a) * x) ` {0..1} = {?a..?b}\n  a < b\n\ngoal (1 subgoal):\n 1. path_image (\\<lambda>x. twoC (1, x)) =\n    {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g1 x, x)}", "by (metis (no_types, lifting) cbox_interval)"], ["proof (state)\nthis:\n  path_image (\\<lambda>x. twoC (1, x)) =\n  {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g1 x, x)}\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "then"], ["proof (chain)\npicking this:\n  path_image (\\<lambda>x. twoC (1, x)) =\n  {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g1 x, x)}", "have cont_on_top: \"continuous_on (path_image ?top_edge) F\""], ["proof (prove)\nusing this:\n  path_image (\\<lambda>x. twoC (1, x)) =\n  {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g1 x, x)}\n\ngoal (1 subgoal):\n 1. continuous_on (path_image (\\<lambda>x. twoC (1, x))) F", "using field_cont_on_top_edge_image"], ["proof (prove)\nusing this:\n  path_image (\\<lambda>x. twoC (1, x)) =\n  {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g1 x, x)}\n  continuous_on {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g1 x, x)} F\n\ngoal (1 subgoal):\n 1. continuous_on (path_image (\\<lambda>x. twoC (1, x))) F", "by auto"], ["proof (state)\nthis:\n  continuous_on (path_image (\\<lambda>x. twoC (1, x))) F\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "let ?Dg2 =  \"{p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g2(x), x)}\""], ["proof (state)\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "have line_is_pair_img: \"?Dg2 = (\\<lambda>x. (g2(x), x)) ` (cbox a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g2 x, x)} =\n    (\\<lambda>x. (g2 x, x)) ` cbox a b", "using image_def"], ["proof (prove)\nusing this:\n  ?f ` ?A = {y. \\<exists>x\\<in>?A. y = ?f x}\n\ngoal (1 subgoal):\n 1. {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g2 x, x)} =\n    (\\<lambda>x. (g2 x, x)) ` cbox a b", "by auto"], ["proof (state)\nthis:\n  {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g2 x, x)} =\n  (\\<lambda>x. (g2 x, x)) ` cbox a b\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "have field_cont_on_bot_edge_image: \"continuous_on ?Dg2 F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g2 x, x)} F", "by (rule continuous_on_subset [OF field_cont]) (auto simp add: twoCisTypeII(2) twoCisTypeII(3))"], ["proof (state)\nthis:\n  continuous_on {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g2 x, x)} F\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "have bot_edge_is_compos_of_scal_and_g2:\n    \"(\\<lambda>x. twoC(0, x)) = (\\<lambda>x. (g2(x), x)) \\<circ> (\\<lambda>x. a + (b - a) * x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (0, x)) =\n    (\\<lambda>x. (g2 x, x)) \\<circ> (\\<lambda>x. a + (b - a) * x)", "using twoCisTypeII"], ["proof (prove)\nusing this:\n  a < b\n  \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x\n  cubeImage twoC =\n  {(y, x). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)}\n  twoC =\n  (\\<lambda>(y, x).\n      ((1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b),\n       (1 - x) * a + x * b))\n  g1 piecewise_C1_differentiable_on {a..b}\n  g2 piecewise_C1_differentiable_on {a..b}\n  (\\<lambda>x. twoC (0, x)) =\n  (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x))\n  (\\<lambda>y. twoC (y, 1)) =\n  (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b))\n  (\\<lambda>x. twoC (1, x)) =\n  (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x))\n  (\\<lambda>y. twoC (y, 0)) =\n  (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (0, x)) =\n    (\\<lambda>x. (g2 x, x)) \\<circ> (\\<lambda>x. a + (b - a) * x)", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. twoC (0, x)) =\n  (\\<lambda>x. (g2 x, x)) \\<circ> (\\<lambda>x. a + (b - a) * x)\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "have Dg2_is_bot_edge_pathimg: \"path_image (\\<lambda>x. twoC(0, x)) = ?Dg2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_image (\\<lambda>x. twoC (0, x)) =\n    {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g2 x, x)}", "unfolding path_image_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (0, x)) ` {0..1} =\n    {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g2 x, x)}", "using line_is_pair_img and bot_edge_is_compos_of_scal_and_g2 image_comp  add_scale_img [OF \\<open>a < b\\<close>]"], ["proof (prove)\nusing this:\n  {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g2 x, x)} =\n  (\\<lambda>x. (g2 x, x)) ` cbox a b\n  (\\<lambda>x. twoC (0, x)) =\n  (\\<lambda>x. (g2 x, x)) \\<circ> (\\<lambda>x. a + (b - a) * x)\n  ?f ` ?g ` ?r = (?f \\<circ> ?g) ` ?r\n  (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (0, x)) ` {0..1} =\n    {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g2 x, x)}", "by (metis (no_types, lifting) box_real(2))"], ["proof (state)\nthis:\n  path_image (\\<lambda>x. twoC (0, x)) =\n  {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g2 x, x)}\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "then"], ["proof (chain)\npicking this:\n  path_image (\\<lambda>x. twoC (0, x)) =\n  {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g2 x, x)}", "have cont_on_bot: \"continuous_on (path_image ?bottom_edge) F\""], ["proof (prove)\nusing this:\n  path_image (\\<lambda>x. twoC (0, x)) =\n  {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g2 x, x)}\n\ngoal (1 subgoal):\n 1. continuous_on (path_image (\\<lambda>x. twoC (0, x))) F", "using field_cont_on_bot_edge_image"], ["proof (prove)\nusing this:\n  path_image (\\<lambda>x. twoC (0, x)) =\n  {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g2 x, x)}\n  continuous_on {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g2 x, x)} F\n\ngoal (1 subgoal):\n 1. continuous_on (path_image (\\<lambda>x. twoC (0, x))) F", "by auto"], ["proof (state)\nthis:\n  continuous_on (path_image (\\<lambda>x. twoC (0, x))) F\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "let ?D_left_edge =  \"{p. \\<exists>y. y \\<in> cbox (g2 a) (g1 a) \\<and> p = (y, a)}\""], ["proof (state)\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "have field_cont_on_left_edge_image: \"continuous_on ?D_left_edge F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on\n     {p. \\<exists>y. y \\<in> cbox (g2 a) (g1 a) \\<and> p = (y, a)} F", "apply (rule continuous_on_subset [OF field_cont])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. \\<exists>y. y \\<in> cbox (g2 a) (g1 a) \\<and> p = (y, a)}\n    \\<subseteq> cubeImage twoC", "using twoCisTypeII(1) twoCisTypeII(3)"], ["proof (prove)\nusing this:\n  a < b\n  cubeImage twoC =\n  {(y, x). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)}\n\ngoal (1 subgoal):\n 1. {p. \\<exists>y. y \\<in> cbox (g2 a) (g1 a) \\<and> p = (y, a)}\n    \\<subseteq> cubeImage twoC", "by auto"], ["proof (state)\nthis:\n  continuous_on\n   {p. \\<exists>y. y \\<in> cbox (g2 a) (g1 a) \\<and> p = (y, a)} F\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "have \"g2 a \\<le> g1 a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g2 a \\<le> g1 a", "using twoCisTypeII(1) twoCisTypeII(2)"], ["proof (prove)\nusing this:\n  a < b\n  \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x\n\ngoal (1 subgoal):\n 1. g2 a \\<le> g1 a", "by auto"], ["proof (state)\nthis:\n  g2 a \\<le> g1 a\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "then"], ["proof (chain)\npicking this:\n  g2 a \\<le> g1 a", "have \"(\\<lambda>x. g2 a + x * (g1 a - g2 a)) ` {(0::real)..1} = {g2 a .. g1 a}\""], ["proof (prove)\nusing this:\n  g2 a \\<le> g1 a\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. g2 a + x * (g1 a - g2 a)) ` {0..1} = {g2 a..g1 a}", "using add_scale_img'[of \"g2 a\" \"g1 a\"]"], ["proof (prove)\nusing this:\n  g2 a \\<le> g1 a\n  g2 a \\<le> g1 a \\<Longrightarrow>\n  (\\<lambda>x. g2 a + (g1 a - g2 a) * x) ` {0..1} = {g2 a..g1 a}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. g2 a + x * (g1 a - g2 a)) ` {0..1} = {g2 a..g1 a}", "by (auto simp add: ac_simps)"], ["proof (state)\nthis:\n  (\\<lambda>x. g2 a + x * (g1 a - g2 a)) ` {0..1} = {g2 a..g1 a}\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "with \\<open>g2 a \\<le> g1 a\\<close>"], ["proof (chain)\npicking this:\n  g2 a \\<le> g1 a\n  (\\<lambda>x. g2 a + x * (g1 a - g2 a)) ` {0..1} = {g2 a..g1 a}", "have left_eq: \"?D_left_edge = ?left_edge ` {0..1}\""], ["proof (prove)\nusing this:\n  g2 a \\<le> g1 a\n  (\\<lambda>x. g2 a + x * (g1 a - g2 a)) ` {0..1} = {g2 a..g1 a}\n\ngoal (1 subgoal):\n 1. {p. \\<exists>y. y \\<in> cbox (g2 a) (g1 a) \\<and> p = (y, a)} =\n    (\\<lambda>y. twoC (y, 0)) ` {0..1}", "by (simp only: twoCisTypeII(10)) auto"], ["proof (state)\nthis:\n  {p. \\<exists>y. y \\<in> cbox (g2 a) (g1 a) \\<and> p = (y, a)} =\n  (\\<lambda>y. twoC (y, 0)) ` {0..1}\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "then"], ["proof (chain)\npicking this:\n  {p. \\<exists>y. y \\<in> cbox (g2 a) (g1 a) \\<and> p = (y, a)} =\n  (\\<lambda>y. twoC (y, 0)) ` {0..1}", "have cont_on_left: \"continuous_on (path_image ?left_edge) F\""], ["proof (prove)\nusing this:\n  {p. \\<exists>y. y \\<in> cbox (g2 a) (g1 a) \\<and> p = (y, a)} =\n  (\\<lambda>y. twoC (y, 0)) ` {0..1}\n\ngoal (1 subgoal):\n 1. continuous_on (path_image (\\<lambda>y. twoC (y, 0))) F", "using field_cont_on_left_edge_image path_image_def"], ["proof (prove)\nusing this:\n  {p. \\<exists>y. y \\<in> cbox (g2 a) (g1 a) \\<and> p = (y, a)} =\n  (\\<lambda>y. twoC (y, 0)) ` {0..1}\n  continuous_on\n   {p. \\<exists>y. y \\<in> cbox (g2 a) (g1 a) \\<and> p = (y, a)} F\n  path_image ?g = ?g ` {0..1}\n\ngoal (1 subgoal):\n 1. continuous_on (path_image (\\<lambda>y. twoC (y, 0))) F", "by (metis left_eq field_cont_on_left_edge_image path_image_def)"], ["proof (state)\nthis:\n  continuous_on (path_image (\\<lambda>y. twoC (y, 0))) F\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "let ?D_right_edge = \"{p. \\<exists>y. y \\<in> cbox (g2 b) (g1 b) \\<and> p = (y, b)}\""], ["proof (state)\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "have field_cont_on_left_edge_image: \"continuous_on ?D_right_edge F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on\n     {p. \\<exists>y. y \\<in> cbox (g2 b) (g1 b) \\<and> p = (y, b)} F", "apply (rule continuous_on_subset [OF field_cont])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. \\<exists>y. y \\<in> cbox (g2 b) (g1 b) \\<and> p = (y, b)}\n    \\<subseteq> cubeImage twoC", "using twoCisTypeII(1) twoCisTypeII(3)"], ["proof (prove)\nusing this:\n  a < b\n  cubeImage twoC =\n  {(y, x). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)}\n\ngoal (1 subgoal):\n 1. {p. \\<exists>y. y \\<in> cbox (g2 b) (g1 b) \\<and> p = (y, b)}\n    \\<subseteq> cubeImage twoC", "by auto"], ["proof (state)\nthis:\n  continuous_on\n   {p. \\<exists>y. y \\<in> cbox (g2 b) (g1 b) \\<and> p = (y, b)} F\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "have \"g2 b \\<le> g1 b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g2 b \\<le> g1 b", "using twoCisTypeII(1) twoCisTypeII(2)"], ["proof (prove)\nusing this:\n  a < b\n  \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x\n\ngoal (1 subgoal):\n 1. g2 b \\<le> g1 b", "by auto"], ["proof (state)\nthis:\n  g2 b \\<le> g1 b\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "then"], ["proof (chain)\npicking this:\n  g2 b \\<le> g1 b", "have \"(\\<lambda>x. g2 b + x * (g1 b - g2 b)) ` {(0::real)..1} = {g2 b .. g1 b}\""], ["proof (prove)\nusing this:\n  g2 b \\<le> g1 b\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. g2 b + x * (g1 b - g2 b)) ` {0..1} = {g2 b..g1 b}", "using add_scale_img'[of \"g2 b\" \"g1 b\"]"], ["proof (prove)\nusing this:\n  g2 b \\<le> g1 b\n  g2 b \\<le> g1 b \\<Longrightarrow>\n  (\\<lambda>x. g2 b + (g1 b - g2 b) * x) ` {0..1} = {g2 b..g1 b}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. g2 b + x * (g1 b - g2 b)) ` {0..1} = {g2 b..g1 b}", "by (auto simp add: ac_simps)"], ["proof (state)\nthis:\n  (\\<lambda>x. g2 b + x * (g1 b - g2 b)) ` {0..1} = {g2 b..g1 b}\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "with \\<open>g2 b \\<le> g1 b\\<close>"], ["proof (chain)\npicking this:\n  g2 b \\<le> g1 b\n  (\\<lambda>x. g2 b + x * (g1 b - g2 b)) ` {0..1} = {g2 b..g1 b}", "have right_eq: \"?D_right_edge = ?right_edge ` {0..1}\""], ["proof (prove)\nusing this:\n  g2 b \\<le> g1 b\n  (\\<lambda>x. g2 b + x * (g1 b - g2 b)) ` {0..1} = {g2 b..g1 b}\n\ngoal (1 subgoal):\n 1. {p. \\<exists>y. y \\<in> cbox (g2 b) (g1 b) \\<and> p = (y, b)} =\n    (\\<lambda>y. twoC (y, 1)) ` {0..1}", "by (simp only: twoCisTypeII(8)) auto"], ["proof (state)\nthis:\n  {p. \\<exists>y. y \\<in> cbox (g2 b) (g1 b) \\<and> p = (y, b)} =\n  (\\<lambda>y. twoC (y, 1)) ` {0..1}\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "then"], ["proof (chain)\npicking this:\n  {p. \\<exists>y. y \\<in> cbox (g2 b) (g1 b) \\<and> p = (y, b)} =\n  (\\<lambda>y. twoC (y, 1)) ` {0..1}", "have cont_on_right:\n    \"continuous_on (path_image ?right_edge) F\""], ["proof (prove)\nusing this:\n  {p. \\<exists>y. y \\<in> cbox (g2 b) (g1 b) \\<and> p = (y, b)} =\n  (\\<lambda>y. twoC (y, 1)) ` {0..1}\n\ngoal (1 subgoal):\n 1. continuous_on (path_image (\\<lambda>y. twoC (y, 1))) F", "using field_cont_on_left_edge_image path_image_def"], ["proof (prove)\nusing this:\n  {p. \\<exists>y. y \\<in> cbox (g2 b) (g1 b) \\<and> p = (y, b)} =\n  (\\<lambda>y. twoC (y, 1)) ` {0..1}\n  continuous_on\n   {p. \\<exists>y. y \\<in> cbox (g2 b) (g1 b) \\<and> p = (y, b)} F\n  path_image ?g = ?g ` {0..1}\n\ngoal (1 subgoal):\n 1. continuous_on (path_image (\\<lambda>y. twoC (y, 1))) F", "by (metis right_eq field_cont_on_left_edge_image path_image_def)"], ["proof (state)\nthis:\n  continuous_on (path_image (\\<lambda>y. twoC (y, 1))) F\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "have all_edge_cases:\n    \"(\\<gamma> = ?bottom_edge \\<or> \\<gamma> = ?right_edge \\<or> \\<gamma> = ?top_edge \\<or> \\<gamma> = ?left_edge)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma> = (\\<lambda>x. twoC (0, x)) \\<or>\n    \\<gamma> = (\\<lambda>y. twoC (y, 1)) \\<or>\n    \\<gamma> = (\\<lambda>x. twoC (1, x)) \\<or>\n    \\<gamma> = (\\<lambda>y. twoC (y, 0))", "using assms"], ["proof (prove)\nusing this:\n  typeII_twoCube twoC\n  continuous_on (cubeImage twoC) F\n  (k, \\<gamma>) \\<in> boundary twoC\n\ngoal (1 subgoal):\n 1. \\<gamma> = (\\<lambda>x. twoC (0, x)) \\<or>\n    \\<gamma> = (\\<lambda>y. twoC (y, 1)) \\<or>\n    \\<gamma> = (\\<lambda>x. twoC (1, x)) \\<or>\n    \\<gamma> = (\\<lambda>y. twoC (y, 0))", "unfolding boundary_def horizontal_boundary_def vertical_boundary_def"], ["proof (prove)\nusing this:\n  typeII_twoCube twoC\n  continuous_on (cubeImage twoC) F\n  (k, \\<gamma>)\n  \\<in> {(1, \\<lambda>x. twoC (x, 0)),\n         (- 1, \\<lambda>x. twoC (x, 1))} \\<union>\n        {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y))}\n\ngoal (1 subgoal):\n 1. \\<gamma> = (\\<lambda>x. twoC (0, x)) \\<or>\n    \\<gamma> = (\\<lambda>y. twoC (y, 1)) \\<or>\n    \\<gamma> = (\\<lambda>x. twoC (1, x)) \\<or>\n    \\<gamma> = (\\<lambda>y. twoC (y, 0))", "by blast"], ["proof (state)\nthis:\n  \\<gamma> = (\\<lambda>x. twoC (0, x)) \\<or>\n  \\<gamma> = (\\<lambda>y. twoC (y, 1)) \\<or>\n  \\<gamma> = (\\<lambda>x. twoC (1, x)) \\<or>\n  \\<gamma> = (\\<lambda>y. twoC (y, 0))\n\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (\\<gamma> ` {0..1}) F", "apply (simp add: path_image_def[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (path_image \\<gamma>) F", "using cont_on_top cont_on_bot cont_on_right cont_on_left all_edge_cases"], ["proof (prove)\nusing this:\n  continuous_on (path_image (\\<lambda>x. twoC (1, x))) F\n  continuous_on (path_image (\\<lambda>x. twoC (0, x))) F\n  continuous_on (path_image (\\<lambda>y. twoC (y, 1))) F\n  continuous_on (path_image (\\<lambda>y. twoC (y, 0))) F\n  \\<gamma> = (\\<lambda>x. twoC (0, x)) \\<or>\n  \\<gamma> = (\\<lambda>y. twoC (y, 1)) \\<or>\n  \\<gamma> = (\\<lambda>x. twoC (1, x)) \\<or>\n  \\<gamma> = (\\<lambda>y. twoC (y, 0))\n\ngoal (1 subgoal):\n 1. continuous_on (path_image \\<gamma>) F", "by blast"], ["proof (state)\nthis:\n  continuous_on (\\<gamma> ` {0..1}) F\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma two_cube_boundary_is_boundary: \"boundary_chain (boundary C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. boundary_chain (boundary C)", "by (auto simp add: boundary_chain_def boundary_def horizontal_boundary_def vertical_boundary_def)"], ["", "lemma common_boundary_subdiv_exists_refl:\n  assumes \"\\<forall>(k,\\<gamma>)\\<in>boundary twoC. valid_path \\<gamma>\"\n  shows \"common_boundary_sudivision_exists (boundary twoC) (boundary twoC)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. common_boundary_sudivision_exists (boundary twoC) (boundary twoC)", "using assms chain_subdiv_chain_refl common_boundary_sudivision_exists_def two_cube_boundary_is_boundary"], ["proof (prove)\nusing this:\n  \\<forall>(k, \\<gamma>)\\<in>boundary twoC. valid_path \\<gamma>\n  boundary_chain ?C \\<Longrightarrow> chain_subdiv_chain ?C ?C\n  common_boundary_sudivision_exists ?one_chain1.0 ?one_chain2.0 \\<equiv>\n  \\<exists>subdiv.\n     chain_subdiv_chain ?one_chain1.0 subdiv \\<and>\n     chain_subdiv_chain ?one_chain2.0 subdiv \\<and>\n     (\\<forall>(k, \\<gamma>)\\<in>subdiv. valid_path \\<gamma>) \\<and>\n     boundary_chain subdiv\n  boundary_chain (boundary ?C)\n\ngoal (1 subgoal):\n 1. common_boundary_sudivision_exists (boundary twoC) (boundary twoC)", "by blast"], ["", "lemma common_boundary_subdiv_exists_refl':\n  assumes \"\\<forall>(k,\\<gamma>)\\<in>C. valid_path \\<gamma>\"\n    \"boundary_chain (C::(int \\<times> (real \\<Rightarrow> real \\<times> real)) set)\"\n  shows \"common_boundary_sudivision_exists (C) (C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. common_boundary_sudivision_exists C C", "using assms chain_subdiv_chain_refl common_boundary_sudivision_exists_def"], ["proof (prove)\nusing this:\n  \\<forall>(k, \\<gamma>)\\<in>C. valid_path \\<gamma>\n  boundary_chain C\n  boundary_chain ?C \\<Longrightarrow> chain_subdiv_chain ?C ?C\n  common_boundary_sudivision_exists ?one_chain1.0 ?one_chain2.0 \\<equiv>\n  \\<exists>subdiv.\n     chain_subdiv_chain ?one_chain1.0 subdiv \\<and>\n     chain_subdiv_chain ?one_chain2.0 subdiv \\<and>\n     (\\<forall>(k, \\<gamma>)\\<in>subdiv. valid_path \\<gamma>) \\<and>\n     boundary_chain subdiv\n\ngoal (1 subgoal):\n 1. common_boundary_sudivision_exists C C", "by blast"], ["", "lemma gen_common_boundary_subdiv_exists_refl_twochain_boundary:\n  assumes \"\\<forall>(k,\\<gamma>)\\<in>C. valid_path \\<gamma>\"\n    \"boundary_chain (C::(int \\<times> (real \\<Rightarrow> real \\<times> real)) set)\"\n  shows \"common_sudiv_exists (C) (C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. common_sudiv_exists C C", "using assms chain_subdiv_chain_refl common_boundary_sudivision_exists_def common_subdiv_imp_gen_common_subdiv"], ["proof (prove)\nusing this:\n  \\<forall>(k, \\<gamma>)\\<in>C. valid_path \\<gamma>\n  boundary_chain C\n  boundary_chain ?C \\<Longrightarrow> chain_subdiv_chain ?C ?C\n  common_boundary_sudivision_exists ?one_chain1.0 ?one_chain2.0 \\<equiv>\n  \\<exists>subdiv.\n     chain_subdiv_chain ?one_chain1.0 subdiv \\<and>\n     chain_subdiv_chain ?one_chain2.0 subdiv \\<and>\n     (\\<forall>(k, \\<gamma>)\\<in>subdiv. valid_path \\<gamma>) \\<and>\n     boundary_chain subdiv\n  common_boundary_sudivision_exists ?one_chain1.0\n   ?one_chain2.0 \\<Longrightarrow>\n  common_sudiv_exists ?one_chain1.0 ?one_chain2.0\n\ngoal (1 subgoal):\n 1. common_sudiv_exists C C", "by blast"], ["", "lemma two_chain_boundary_is_boundary_chain:\n  shows \"boundary_chain (two_chain_boundary twoChain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. boundary_chain (two_chain_boundary twoChain)", "by (simp add: boundary_chain_def two_chain_boundary_def boundary_def horizontal_boundary_def vertical_boundary_def)"], ["", "lemma typeI_edges_are_valid_paths:\n  assumes \"typeI_twoCube twoC\" \"(k,\\<gamma>) \\<in> boundary twoC\"\n  shows \"valid_path \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_path \\<gamma>", "using typeI_twoCube_smooth_edges[OF assms] C1_differentiable_imp_piecewise"], ["proof (prove)\nusing this:\n  \\<gamma> piecewise_C1_differentiable_on {0..1}\n  ?f C1_differentiable_on ?S \\<Longrightarrow>\n  ?f piecewise_C1_differentiable_on ?S\n\ngoal (1 subgoal):\n 1. valid_path \\<gamma>", "by (auto simp: valid_path_def)"], ["", "lemma typeII_edges_are_valid_paths:\n  assumes \"typeII_twoCube twoC\" \"(k,\\<gamma>) \\<in> boundary twoC\"\n  shows \"valid_path \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_path \\<gamma>", "using typeII_twoCube_smooth_edges[OF assms] C1_differentiable_imp_piecewise"], ["proof (prove)\nusing this:\n  \\<gamma> piecewise_C1_differentiable_on {0..1}\n  ?f C1_differentiable_on ?S \\<Longrightarrow>\n  ?f piecewise_C1_differentiable_on ?S\n\ngoal (1 subgoal):\n 1. valid_path \\<gamma>", "by (auto simp: valid_path_def)"], ["", "lemma finite_two_chain_vertical_boundary:\n  assumes \"finite two_chain\"\n  shows \"finite (two_chain_vertical_boundary two_chain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (two_chain_vertical_boundary two_chain)", "using assms"], ["proof (prove)\nusing this:\n  finite two_chain\n\ngoal (1 subgoal):\n 1. finite (two_chain_vertical_boundary two_chain)", "by (simp add: two_chain_vertical_boundary_def vertical_boundary_def)"], ["", "lemma finite_two_chain_horizontal_boundary:\n  assumes \"finite two_chain\"\n  shows \"finite (two_chain_horizontal_boundary two_chain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (two_chain_horizontal_boundary two_chain)", "using assms"], ["proof (prove)\nusing this:\n  finite two_chain\n\ngoal (1 subgoal):\n 1. finite (two_chain_horizontal_boundary two_chain)", "by (simp add: two_chain_horizontal_boundary_def horizontal_boundary_def)"], ["", "locale R2 =\n  fixes i j\n  assumes i_is_x_axis: \"i = (1::real,0::real)\" and\n    j_is_y_axis: \"j = (0::real, 1::real)\"\nbegin"], ["", "lemma analytically_valid_y:\n  assumes \"analytically_valid s F i\"\n  shows \"(\\<lambda>x. integral UNIV (\\<lambda>y. (partial_vector_derivative F i) (y, x) * (indicator s (y, x)))) \\<in> borel_measurable lborel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        integral UNIV\n         (\\<lambda>y.\n             partial_vector_derivative F i (y, x) * indicator s (y, x)))\n    \\<in> borel_measurable lborel", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        integral UNIV\n         (\\<lambda>y.\n             partial_vector_derivative F i (y, x) * indicator s (y, x)))\n    \\<in> borel_measurable lborel", "have \"{(1::real, 0::real), (0, 1)} - {(1, 0)} = {(0::real,1::real)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(1, 0), (0, 1)} - {(1, 0)} = {(0, 1)}", "by force"], ["proof (state)\nthis:\n  {(1, 0), (0, 1)} - {(1, 0)} = {(0, 1)}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        integral UNIV\n         (\\<lambda>y.\n             partial_vector_derivative F i (y, x) * indicator s (y, x)))\n    \\<in> borel_measurable lborel", "with assms"], ["proof (chain)\npicking this:\n  analytically_valid s F i\n  {(1, 0), (0, 1)} - {(1, 0)} = {(0, 1)}", "show ?thesis"], ["proof (prove)\nusing this:\n  analytically_valid s F i\n  {(1, 0), (0, 1)} - {(1, 0)} = {(0, 1)}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        integral UNIV\n         (\\<lambda>y.\n             partial_vector_derivative F i (y, x) * indicator s (y, x)))\n    \\<in> borel_measurable lborel", "using assms"], ["proof (prove)\nusing this:\n  analytically_valid s F i\n  {(1, 0), (0, 1)} - {(1, 0)} = {(0, 1)}\n  analytically_valid s F i\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        integral UNIV\n         (\\<lambda>y.\n             partial_vector_derivative F i (y, x) * indicator s (y, x)))\n    \\<in> borel_measurable lborel", "by(simp add: real_pair_basis analytically_valid_def i_is_x_axis j_is_y_axis)"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      integral UNIV\n       (\\<lambda>y.\n           partial_vector_derivative F i (y, x) * indicator s (y, x)))\n  \\<in> borel_measurable lborel\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma analytically_valid_x:\n  assumes \"analytically_valid s F j\"\n  shows \"(\\<lambda>x. integral UNIV (\\<lambda>y. ((partial_vector_derivative F j) (x, y)) * (indicator s (x, y)))) \\<in> borel_measurable lborel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        integral UNIV\n         (\\<lambda>y.\n             partial_vector_derivative F j (x, y) * indicator s (x, y)))\n    \\<in> borel_measurable lborel", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        integral UNIV\n         (\\<lambda>y.\n             partial_vector_derivative F j (x, y) * indicator s (x, y)))\n    \\<in> borel_measurable lborel", "have \"{(1::real, 0::real), (0, 1)} - {(0, 1)} = {(1::real, 0::real)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(1, 0), (0, 1)} - {(0, 1)} = {(1, 0)}", "by force"], ["proof (state)\nthis:\n  {(1, 0), (0, 1)} - {(0, 1)} = {(1, 0)}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        integral UNIV\n         (\\<lambda>y.\n             partial_vector_derivative F j (x, y) * indicator s (x, y)))\n    \\<in> borel_measurable lborel", "with assms"], ["proof (chain)\npicking this:\n  analytically_valid s F j\n  {(1, 0), (0, 1)} - {(0, 1)} = {(1, 0)}", "show ?thesis"], ["proof (prove)\nusing this:\n  analytically_valid s F j\n  {(1, 0), (0, 1)} - {(0, 1)} = {(1, 0)}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        integral UNIV\n         (\\<lambda>y.\n             partial_vector_derivative F j (x, y) * indicator s (x, y)))\n    \\<in> borel_measurable lborel", "by(simp add: real_pair_basis analytically_valid_def i_is_x_axis j_is_y_axis)"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      integral UNIV\n       (\\<lambda>y.\n           partial_vector_derivative F j (x, y) * indicator s (x, y)))\n  \\<in> borel_measurable lborel\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Greens_thm_type_I:\n  fixes F:: \"((real*real) \\<Rightarrow> (real * real))\" and\n    gamma1 gamma2 gamma3 gamma4 :: \"(real \\<Rightarrow> (real * real))\" and\n    a:: \"real\" and b:: \"real\" and\n    g1:: \"(real \\<Rightarrow> real)\" and g2:: \"(real \\<Rightarrow> real)\"\n  assumes Dy_def: \"Dy_pair = {(x::real,y) . x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)}\" and\n    gamma1_def: \"gamma1 = (\\<lambda>x. (a + (b - a) * x, g2(a + (b - a) * x)))\" and\n    gamma1_smooth: \"gamma1 piecewise_C1_differentiable_on {0..1}\" and (*TODO: This should be piecewise smooth*)\n    gamma2_def: \"gamma2 = (\\<lambda>x. (b, g2(b) + x  *\\<^sub>R (g1(b) - g2(b))))\" and\n    gamma3_def: \"gamma3 = (\\<lambda>x. (a + (b - a) * x, g1(a + (b - a) * x)))\" and\n    gamma3_smooth: \"gamma3 piecewise_C1_differentiable_on {0..1}\" and\n    gamma4_def: \"gamma4 = (\\<lambda>x. (a,  g2(a) + x *\\<^sub>R (g1(a) - g2(a))))\" and\n    F_i_analytically_valid: \"analytically_valid Dy_pair (\\<lambda>p. F(p) \\<bullet> i) j\" and\n    g2_leq_g1: \"\\<forall>x \\<in> cbox a b. (g2 x) \\<le> (g1 x)\" and (*This is needed otherwise what would Dy be?*)\n    a_lt_b: \"a < b\"\n  shows \"(line_integral F {i} gamma1) +\n         (line_integral F {i} gamma2) -\n         (line_integral F {i} gamma3) -\n         (line_integral F {i} gamma4)\n                 = (integral Dy_pair (\\<lambda>a. - (partial_vector_derivative (\\<lambda>p. F(p) \\<bullet> i) j a)))\"\n    \"line_integral_exists F {i} gamma4\"\n    \"line_integral_exists F {i} gamma3\"\n    \"line_integral_exists F {i} gamma2\"\n    \"line_integral_exists F {i} gamma1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n     line_integral F {i} gamma3 -\n     line_integral F {i} gamma4 =\n     integral Dy_pair\n      (\\<lambda>a.\n          - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a) &&&\n     line_integral_exists F {i} gamma4) &&&\n    line_integral_exists F {i} gamma3 &&&\n    line_integral_exists F {i} gamma2 &&& line_integral_exists F {i} gamma1", "proof -"], ["proof (state)\ngoal (5 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3\n 4. line_integral_exists F {i} gamma2\n 5. line_integral_exists F {i} gamma1", "let ?F_b' = \"partial_vector_derivative (\\<lambda>a. (F a) \\<bullet> i)  j\""], ["proof (state)\ngoal (5 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3\n 4. line_integral_exists F {i} gamma2\n 5. line_integral_exists F {i} gamma1", "have F_first_is_continuous: \"continuous_on Dy_pair (\\<lambda>a. F(a) \\<bullet> i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on Dy_pair (\\<lambda>a. F a \\<bullet> i)", "using F_i_analytically_valid"], ["proof (prove)\nusing this:\n  analytically_valid Dy_pair (\\<lambda>p. F p \\<bullet> i) j\n\ngoal (1 subgoal):\n 1. continuous_on Dy_pair (\\<lambda>a. F a \\<bullet> i)", "by (auto simp add: analytically_valid_def)"], ["proof (state)\nthis:\n  continuous_on Dy_pair (\\<lambda>a. F a \\<bullet> i)\n\ngoal (5 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3\n 4. line_integral_exists F {i} gamma2\n 5. line_integral_exists F {i} gamma1", "let ?f = \"(\\<lambda>x. if x \\<in> (Dy_pair) then (partial_vector_derivative (\\<lambda>a. (F a) \\<bullet> i)  j) x else 0)\""], ["proof (state)\ngoal (5 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3\n 4. line_integral_exists F {i} gamma2\n 5. line_integral_exists F {i} gamma1", "have f_lesbegue_integrable: \"integrable lborel ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integrable lborel\n     (\\<lambda>x.\n         if x \\<in> Dy_pair\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x\n         else 0)", "using F_i_analytically_valid"], ["proof (prove)\nusing this:\n  analytically_valid Dy_pair (\\<lambda>p. F p \\<bullet> i) j\n\ngoal (1 subgoal):\n 1. integrable lborel\n     (\\<lambda>x.\n         if x \\<in> Dy_pair\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x\n         else 0)", "by (auto simp add: analytically_valid_def indic_ident)"], ["proof (state)\nthis:\n  integrable lborel\n   (\\<lambda>x.\n       if x \\<in> Dy_pair\n       then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x\n       else 0)\n\ngoal (5 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3\n 4. line_integral_exists F {i} gamma2\n 5. line_integral_exists F {i} gamma1", "have partially_vec_diff: \"\\<forall>a \\<in> Dy_pair. partially_vector_differentiable (\\<lambda>a. (F a) \\<bullet> i) j a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>Dy_pair.\n       partially_vector_differentiable (\\<lambda>a. F a \\<bullet> i) j a", "using F_i_analytically_valid"], ["proof (prove)\nusing this:\n  analytically_valid Dy_pair (\\<lambda>p. F p \\<bullet> i) j\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>Dy_pair.\n       partially_vector_differentiable (\\<lambda>a. F a \\<bullet> i) j a", "by (auto simp add: analytically_valid_def indicator_def)"], ["proof (state)\nthis:\n  \\<forall>a\\<in>Dy_pair.\n     partially_vector_differentiable (\\<lambda>a. F a \\<bullet> i) j a\n\ngoal (5 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3\n 4. line_integral_exists F {i} gamma2\n 5. line_integral_exists F {i} gamma1", "have x_axis_integral_measurable: \"(\\<lambda>x. integral UNIV (\\<lambda>y. ?f(x, y))) \\<in> borel_measurable lborel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        integral UNIV\n         (\\<lambda>y.\n             if (x, y) \\<in> Dy_pair\n             then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n                   (x, y)\n             else 0))\n    \\<in> borel_measurable lborel", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        integral UNIV\n         (\\<lambda>y.\n             if (x, y) \\<in> Dy_pair\n             then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n                   (x, y)\n             else 0))\n    \\<in> borel_measurable lborel", "have \"(\\<lambda>p. (?F_b' p) * indicator (Dy_pair) p) = (\\<lambda>x. if x \\<in> (Dy_pair) then (?F_b') x else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>p.\n        partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j p *\n        indicat_real Dy_pair p) =\n    (\\<lambda>x.\n        if x \\<in> Dy_pair\n        then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x\n        else 0)", "using indic_ident[of \"?F_b'\"]"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x *\n      indicat_real ?s x) =\n  (\\<lambda>x.\n      if x \\<in> ?s\n      then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x\n      else 0)\n\ngoal (1 subgoal):\n 1. (\\<lambda>p.\n        partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j p *\n        indicat_real Dy_pair p) =\n    (\\<lambda>x.\n        if x \\<in> Dy_pair\n        then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x\n        else 0)", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>p.\n      partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j p *\n      indicat_real Dy_pair p) =\n  (\\<lambda>x.\n      if x \\<in> Dy_pair\n      then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x\n      else 0)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        integral UNIV\n         (\\<lambda>y.\n             if (x, y) \\<in> Dy_pair\n             then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n                   (x, y)\n             else 0))\n    \\<in> borel_measurable lborel", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>p.\n      partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j p *\n      indicat_real Dy_pair p) =\n  (\\<lambda>x.\n      if x \\<in> Dy_pair\n      then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x\n      else 0)", "have \"\\<And>x y. ?F_b' (x,y) * indicator (Dy_pair) (x,y) = (\\<lambda>x. if x \\<in> (Dy_pair) then (?F_b') x else 0) (x,y)\""], ["proof (prove)\nusing this:\n  (\\<lambda>p.\n      partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j p *\n      indicat_real Dy_pair p) =\n  (\\<lambda>x.\n      if x \\<in> Dy_pair\n      then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x\n      else 0)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j (x, y) *\n       indicat_real Dy_pair (x, y) =\n       (if (x, y) \\<in> Dy_pair\n        then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n              (x, y)\n        else 0)", "by auto"], ["proof (state)\nthis:\n  partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j (?x, ?y) *\n  indicat_real Dy_pair (?x, ?y) =\n  (if (?x, ?y) \\<in> Dy_pair\n   then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j (?x, ?y)\n   else 0)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        integral UNIV\n         (\\<lambda>y.\n             if (x, y) \\<in> Dy_pair\n             then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n                   (x, y)\n             else 0))\n    \\<in> borel_measurable lborel", "then"], ["proof (chain)\npicking this:\n  partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j (?x, ?y) *\n  indicat_real Dy_pair (?x, ?y) =\n  (if (?x, ?y) \\<in> Dy_pair\n   then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j (?x, ?y)\n   else 0)", "show ?thesis"], ["proof (prove)\nusing this:\n  partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j (?x, ?y) *\n  indicat_real Dy_pair (?x, ?y) =\n  (if (?x, ?y) \\<in> Dy_pair\n   then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j (?x, ?y)\n   else 0)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        integral UNIV\n         (\\<lambda>y.\n             if (x, y) \\<in> Dy_pair\n             then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n                   (x, y)\n             else 0))\n    \\<in> borel_measurable lborel", "using analytically_valid_x[OF F_i_analytically_valid]"], ["proof (prove)\nusing this:\n  partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j (?x, ?y) *\n  indicat_real Dy_pair (?x, ?y) =\n  (if (?x, ?y) \\<in> Dy_pair\n   then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j (?x, ?y)\n   else 0)\n  (\\<lambda>x.\n      integral UNIV\n       (\\<lambda>y.\n           partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j\n            (x, y) *\n           indicat_real Dy_pair (x, y)))\n  \\<in> borel_measurable lborel\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        integral UNIV\n         (\\<lambda>y.\n             if (x, y) \\<in> Dy_pair\n             then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n                   (x, y)\n             else 0))\n    \\<in> borel_measurable lborel", "by (auto simp add: indicator_def)"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      integral UNIV\n       (\\<lambda>y.\n           if (x, y) \\<in> Dy_pair\n           then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n                 (x, y)\n           else 0))\n  \\<in> borel_measurable lborel\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      integral UNIV\n       (\\<lambda>y.\n           if (x, y) \\<in> Dy_pair\n           then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n                 (x, y)\n           else 0))\n  \\<in> borel_measurable lborel\n\ngoal (5 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3\n 4. line_integral_exists F {i} gamma2\n 5. line_integral_exists F {i} gamma1", "have F_partially_differentiable: \"\\<forall>a\\<in>Dy_pair. has_partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> i) j (?F_b' a) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>Dy_pair.\n       has_partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j\n        (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j a) a", "using partial_vector_derivative_works partially_vec_diff"], ["proof (prove)\nusing this:\n  partially_vector_differentiable ?F ?base_vec ?a \\<Longrightarrow>\n  has_partial_vector_derivative ?F ?base_vec\n   (partial_vector_derivative ?F ?base_vec ?a) ?a\n  \\<forall>a\\<in>Dy_pair.\n     partially_vector_differentiable (\\<lambda>a. F a \\<bullet> i) j a\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>Dy_pair.\n       has_partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j\n        (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j a) a", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>a\\<in>Dy_pair.\n     has_partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j\n      (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j a) a\n\ngoal (5 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3\n 4. line_integral_exists F {i} gamma2\n 5. line_integral_exists F {i} gamma1", "have g1_g2_continuous: \"continuous_on (cbox a b) g1\"\n    \"continuous_on (cbox a b) g2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (cbox a b) g1 &&& continuous_on (cbox a b) g2", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. continuous_on (cbox a b) g1\n 2. continuous_on (cbox a b) g2", "have shift_scale_cont: \"continuous_on {a..b} (\\<lambda>x. (x - a)*(1/(b-a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on {a..b} (\\<lambda>x. (x - a) * (1 / (b - a)))", "by (intro continuous_intros)"], ["proof (state)\nthis:\n  continuous_on {a..b} (\\<lambda>x. (x - a) * (1 / (b - a)))\n\ngoal (2 subgoals):\n 1. continuous_on (cbox a b) g1\n 2. continuous_on (cbox a b) g2", "have shift_scale_inv: \"(\\<lambda>x. a + (b - a) * x) \\<circ> (\\<lambda>x. (x - a)*(1/(b-a))) = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. a + (b - a) * x) \\<circ>\n    (\\<lambda>x. (x - a) * (1 / (b - a))) =\n    id", "using a_lt_b"], ["proof (prove)\nusing this:\n  a < b\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. a + (b - a) * x) \\<circ>\n    (\\<lambda>x. (x - a) * (1 / (b - a))) =\n    id", "by (auto simp add: o_def)"], ["proof (state)\nthis:\n  (\\<lambda>x. a + (b - a) * x) \\<circ>\n  (\\<lambda>x. (x - a) * (1 / (b - a))) =\n  id\n\ngoal (2 subgoals):\n 1. continuous_on (cbox a b) g1\n 2. continuous_on (cbox a b) g2", "have img_shift_scale: \"(\\<lambda>x. (x - a)*(1/(b-a)))`{a..b} = {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. (x - a) * (1 / (b - a))) ` {a..b} = {0..1}", "using a_lt_b"], ["proof (prove)\nusing this:\n  a < b\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. (x - a) * (1 / (b - a))) ` {a..b} = {0..1}", "apply (auto simp: divide_simps image_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>a < b; 0 \\<le> x; x \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>{a..b}. x * (b - a) = xa - a", "apply (rule_tac x=\"x * (b - a) + a\" in bexI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a < b; 0 \\<le> x; x \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> x * (b - a) = x * (b - a) + a - a\n 2. \\<And>x.\n       \\<lbrakk>a < b; 0 \\<le> x; x \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> x * (b - a) + a \\<in> {a..b}", "using le_diff_eq"], ["proof (prove)\nusing this:\n  (?a \\<le> ?c - ?b) = (?a + ?b \\<le> ?c)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a < b; 0 \\<le> x; x \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> x * (b - a) = x * (b - a) + a - a\n 2. \\<And>x.\n       \\<lbrakk>a < b; 0 \\<le> x; x \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> x * (b - a) + a \\<in> {a..b}", "by fastforce+"], ["proof (state)\nthis:\n  (\\<lambda>x. (x - a) * (1 / (b - a))) ` {a..b} = {0..1}\n\ngoal (2 subgoals):\n 1. continuous_on (cbox a b) g1\n 2. continuous_on (cbox a b) g2", "have gamma1_y_component: \"(\\<lambda>x. g2(a + (b - a) * x)) = g2 \\<circ> (\\<lambda>x.(a + (b - a) * x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. g2 (a + (b - a) * x)) =\n    g2 \\<circ> (\\<lambda>x. a + (b - a) * x)", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. g2 (a + (b - a) * x)) =\n  g2 \\<circ> (\\<lambda>x. a + (b - a) * x)\n\ngoal (2 subgoals):\n 1. continuous_on (cbox a b) g1\n 2. continuous_on (cbox a b) g2", "have \"continuous_on {0..1} (\\<lambda>x. g2(a + (b - a) * x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on {0..1} (\\<lambda>x. g2 (a + (b - a) * x))", "using continuous_on_inner[OF piecewise_C1_differentiable_on_imp_continuous_on[OF gamma1_smooth], of \"(\\<lambda>x. j)\", OF continuous_on_const]"], ["proof (prove)\nusing this:\n  continuous_on {0..1} (\\<lambda>x. gamma1 x \\<bullet> j)\n\ngoal (1 subgoal):\n 1. continuous_on {0..1} (\\<lambda>x. g2 (a + (b - a) * x))", "by (simp add: gamma1_def j_is_y_axis)"], ["proof (state)\nthis:\n  continuous_on {0..1} (\\<lambda>x. g2 (a + (b - a) * x))\n\ngoal (2 subgoals):\n 1. continuous_on (cbox a b) g1\n 2. continuous_on (cbox a b) g2", "then"], ["proof (chain)\npicking this:\n  continuous_on {0..1} (\\<lambda>x. g2 (a + (b - a) * x))", "have \"continuous_on {a..b} ((\\<lambda>x. g2(a + (b - a) * x)) \\<circ> (\\<lambda>x. (x - a)*(1/(b-a))))\""], ["proof (prove)\nusing this:\n  continuous_on {0..1} (\\<lambda>x. g2 (a + (b - a) * x))\n\ngoal (1 subgoal):\n 1. continuous_on {a..b}\n     ((\\<lambda>x. g2 (a + (b - a) * x)) \\<circ>\n      (\\<lambda>x. (x - a) * (1 / (b - a))))", "using img_shift_scale continuous_on_compose shift_scale_cont"], ["proof (prove)\nusing this:\n  continuous_on {0..1} (\\<lambda>x. g2 (a + (b - a) * x))\n  (\\<lambda>x. (x - a) * (1 / (b - a))) ` {a..b} = {0..1}\n  \\<lbrakk>continuous_on ?s ?f; continuous_on (?f ` ?s) ?g\\<rbrakk>\n  \\<Longrightarrow> continuous_on ?s (?g \\<circ> ?f)\n  continuous_on {a..b} (\\<lambda>x. (x - a) * (1 / (b - a)))\n\ngoal (1 subgoal):\n 1. continuous_on {a..b}\n     ((\\<lambda>x. g2 (a + (b - a) * x)) \\<circ>\n      (\\<lambda>x. (x - a) * (1 / (b - a))))", "by force"], ["proof (state)\nthis:\n  continuous_on {a..b}\n   ((\\<lambda>x. g2 (a + (b - a) * x)) \\<circ>\n    (\\<lambda>x. (x - a) * (1 / (b - a))))\n\ngoal (2 subgoals):\n 1. continuous_on (cbox a b) g1\n 2. continuous_on (cbox a b) g2", "then"], ["proof (chain)\npicking this:\n  continuous_on {a..b}\n   ((\\<lambda>x. g2 (a + (b - a) * x)) \\<circ>\n    (\\<lambda>x. (x - a) * (1 / (b - a))))", "have \"continuous_on {a..b} (g2 \\<circ> (\\<lambda>x.(a + (b - a) * x)) \\<circ> (\\<lambda>x. (x - a)*(1/(b-a))))\""], ["proof (prove)\nusing this:\n  continuous_on {a..b}\n   ((\\<lambda>x. g2 (a + (b - a) * x)) \\<circ>\n    (\\<lambda>x. (x - a) * (1 / (b - a))))\n\ngoal (1 subgoal):\n 1. continuous_on {a..b}\n     (g2 \\<circ> (\\<lambda>x. a + (b - a) * x) \\<circ>\n      (\\<lambda>x. (x - a) * (1 / (b - a))))", "using gamma1_y_component"], ["proof (prove)\nusing this:\n  continuous_on {a..b}\n   ((\\<lambda>x. g2 (a + (b - a) * x)) \\<circ>\n    (\\<lambda>x. (x - a) * (1 / (b - a))))\n  (\\<lambda>x. g2 (a + (b - a) * x)) =\n  g2 \\<circ> (\\<lambda>x. a + (b - a) * x)\n\ngoal (1 subgoal):\n 1. continuous_on {a..b}\n     (g2 \\<circ> (\\<lambda>x. a + (b - a) * x) \\<circ>\n      (\\<lambda>x. (x - a) * (1 / (b - a))))", "by auto"], ["proof (state)\nthis:\n  continuous_on {a..b}\n   (g2 \\<circ> (\\<lambda>x. a + (b - a) * x) \\<circ>\n    (\\<lambda>x. (x - a) * (1 / (b - a))))\n\ngoal (2 subgoals):\n 1. continuous_on (cbox a b) g1\n 2. continuous_on (cbox a b) g2", "then"], ["proof (chain)\npicking this:\n  continuous_on {a..b}\n   (g2 \\<circ> (\\<lambda>x. a + (b - a) * x) \\<circ>\n    (\\<lambda>x. (x - a) * (1 / (b - a))))", "show \"continuous_on (cbox a b) g2\""], ["proof (prove)\nusing this:\n  continuous_on {a..b}\n   (g2 \\<circ> (\\<lambda>x. a + (b - a) * x) \\<circ>\n    (\\<lambda>x. (x - a) * (1 / (b - a))))\n\ngoal (1 subgoal):\n 1. continuous_on (cbox a b) g2", "using a_lt_b"], ["proof (prove)\nusing this:\n  continuous_on {a..b}\n   (g2 \\<circ> (\\<lambda>x. a + (b - a) * x) \\<circ>\n    (\\<lambda>x. (x - a) * (1 / (b - a))))\n  a < b\n\ngoal (1 subgoal):\n 1. continuous_on (cbox a b) g2", "by (simp add: shift_scale_inv)"], ["proof (state)\nthis:\n  continuous_on (cbox a b) g2\n\ngoal (1 subgoal):\n 1. continuous_on (cbox a b) g1", "have gamma3_y_component: \"(\\<lambda>x. g1(a + (b - a) * x)) = g1 \\<circ> (\\<lambda>x.(a + (b - a) * x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. g1 (a + (b - a) * x)) =\n    g1 \\<circ> (\\<lambda>x. a + (b - a) * x)", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. g1 (a + (b - a) * x)) =\n  g1 \\<circ> (\\<lambda>x. a + (b - a) * x)\n\ngoal (1 subgoal):\n 1. continuous_on (cbox a b) g1", "have \"continuous_on {0..1} (\\<lambda>x. g1(a + (b - a) * x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on {0..1} (\\<lambda>x. g1 (a + (b - a) * x))", "using continuous_on_inner[OF piecewise_C1_differentiable_on_imp_continuous_on[OF gamma3_smooth], of \"(\\<lambda>x. j)\", OF continuous_on_const]"], ["proof (prove)\nusing this:\n  continuous_on {0..1} (\\<lambda>x. gamma3 x \\<bullet> j)\n\ngoal (1 subgoal):\n 1. continuous_on {0..1} (\\<lambda>x. g1 (a + (b - a) * x))", "by (simp add: gamma3_def j_is_y_axis)"], ["proof (state)\nthis:\n  continuous_on {0..1} (\\<lambda>x. g1 (a + (b - a) * x))\n\ngoal (1 subgoal):\n 1. continuous_on (cbox a b) g1", "then"], ["proof (chain)\npicking this:\n  continuous_on {0..1} (\\<lambda>x. g1 (a + (b - a) * x))", "have \"continuous_on {a..b} ((\\<lambda>x. g1(a + (b - a) * x)) \\<circ> (\\<lambda>x. (x - a)*(1/(b-a))))\""], ["proof (prove)\nusing this:\n  continuous_on {0..1} (\\<lambda>x. g1 (a + (b - a) * x))\n\ngoal (1 subgoal):\n 1. continuous_on {a..b}\n     ((\\<lambda>x. g1 (a + (b - a) * x)) \\<circ>\n      (\\<lambda>x. (x - a) * (1 / (b - a))))", "using img_shift_scale continuous_on_compose shift_scale_cont"], ["proof (prove)\nusing this:\n  continuous_on {0..1} (\\<lambda>x. g1 (a + (b - a) * x))\n  (\\<lambda>x. (x - a) * (1 / (b - a))) ` {a..b} = {0..1}\n  \\<lbrakk>continuous_on ?s ?f; continuous_on (?f ` ?s) ?g\\<rbrakk>\n  \\<Longrightarrow> continuous_on ?s (?g \\<circ> ?f)\n  continuous_on {a..b} (\\<lambda>x. (x - a) * (1 / (b - a)))\n\ngoal (1 subgoal):\n 1. continuous_on {a..b}\n     ((\\<lambda>x. g1 (a + (b - a) * x)) \\<circ>\n      (\\<lambda>x. (x - a) * (1 / (b - a))))", "by force"], ["proof (state)\nthis:\n  continuous_on {a..b}\n   ((\\<lambda>x. g1 (a + (b - a) * x)) \\<circ>\n    (\\<lambda>x. (x - a) * (1 / (b - a))))\n\ngoal (1 subgoal):\n 1. continuous_on (cbox a b) g1", "then"], ["proof (chain)\npicking this:\n  continuous_on {a..b}\n   ((\\<lambda>x. g1 (a + (b - a) * x)) \\<circ>\n    (\\<lambda>x. (x - a) * (1 / (b - a))))", "have \"continuous_on {a..b} (g1 \\<circ> (\\<lambda>x.(a + (b - a) * x)) \\<circ> (\\<lambda>x. (x - a)*(1/(b-a))))\""], ["proof (prove)\nusing this:\n  continuous_on {a..b}\n   ((\\<lambda>x. g1 (a + (b - a) * x)) \\<circ>\n    (\\<lambda>x. (x - a) * (1 / (b - a))))\n\ngoal (1 subgoal):\n 1. continuous_on {a..b}\n     (g1 \\<circ> (\\<lambda>x. a + (b - a) * x) \\<circ>\n      (\\<lambda>x. (x - a) * (1 / (b - a))))", "using gamma3_y_component"], ["proof (prove)\nusing this:\n  continuous_on {a..b}\n   ((\\<lambda>x. g1 (a + (b - a) * x)) \\<circ>\n    (\\<lambda>x. (x - a) * (1 / (b - a))))\n  (\\<lambda>x. g1 (a + (b - a) * x)) =\n  g1 \\<circ> (\\<lambda>x. a + (b - a) * x)\n\ngoal (1 subgoal):\n 1. continuous_on {a..b}\n     (g1 \\<circ> (\\<lambda>x. a + (b - a) * x) \\<circ>\n      (\\<lambda>x. (x - a) * (1 / (b - a))))", "by auto"], ["proof (state)\nthis:\n  continuous_on {a..b}\n   (g1 \\<circ> (\\<lambda>x. a + (b - a) * x) \\<circ>\n    (\\<lambda>x. (x - a) * (1 / (b - a))))\n\ngoal (1 subgoal):\n 1. continuous_on (cbox a b) g1", "then"], ["proof (chain)\npicking this:\n  continuous_on {a..b}\n   (g1 \\<circ> (\\<lambda>x. a + (b - a) * x) \\<circ>\n    (\\<lambda>x. (x - a) * (1 / (b - a))))", "show \"continuous_on (cbox a b) g1\""], ["proof (prove)\nusing this:\n  continuous_on {a..b}\n   (g1 \\<circ> (\\<lambda>x. a + (b - a) * x) \\<circ>\n    (\\<lambda>x. (x - a) * (1 / (b - a))))\n\ngoal (1 subgoal):\n 1. continuous_on (cbox a b) g1", "using a_lt_b"], ["proof (prove)\nusing this:\n  continuous_on {a..b}\n   (g1 \\<circ> (\\<lambda>x. a + (b - a) * x) \\<circ>\n    (\\<lambda>x. (x - a) * (1 / (b - a))))\n  a < b\n\ngoal (1 subgoal):\n 1. continuous_on (cbox a b) g1", "by (simp add: shift_scale_inv)"], ["proof (state)\nthis:\n  continuous_on (cbox a b) g1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  continuous_on (cbox a b) g1\n  continuous_on (cbox a b) g2\n\ngoal (5 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3\n 4. line_integral_exists F {i} gamma2\n 5. line_integral_exists F {i} gamma1", "have g2_scale_j_contin: \"continuous_on (cbox a b) (\\<lambda>x. (0, g2 x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (cbox a b) (\\<lambda>x. (0::'a, g2 x))", "by (intro continuous_intros g1_g2_continuous)"], ["proof (state)\nthis:\n  continuous_on (cbox a b) (\\<lambda>x. (0::?'a1, g2 x))\n\ngoal (5 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3\n 4. line_integral_exists F {i} gamma2\n 5. line_integral_exists F {i} gamma1", "let ?Dg2 =  \"{p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g2(x))}\""], ["proof (state)\ngoal (5 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3\n 4. line_integral_exists F {i} gamma2\n 5. line_integral_exists F {i} gamma1", "have line_is_pair_img: \"?Dg2 = (\\<lambda>x. (x, g2(x))) ` (cbox a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g2 x)} =\n    (\\<lambda>x. (x, g2 x)) ` cbox a b", "using image_def"], ["proof (prove)\nusing this:\n  ?f ` ?A = {y. \\<exists>x\\<in>?A. y = ?f x}\n\ngoal (1 subgoal):\n 1. {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g2 x)} =\n    (\\<lambda>x. (x, g2 x)) ` cbox a b", "by auto"], ["proof (state)\nthis:\n  {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g2 x)} =\n  (\\<lambda>x. (x, g2 x)) ` cbox a b\n\ngoal (5 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3\n 4. line_integral_exists F {i} gamma2\n 5. line_integral_exists F {i} gamma1", "have g2_path_continuous: \"continuous_on (cbox a b) (\\<lambda>x. (x, g2(x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (cbox a b) (\\<lambda>x. (x, g2 x))", "by (intro continuous_intros g1_g2_continuous)"], ["proof (state)\nthis:\n  continuous_on (cbox a b) (\\<lambda>x. (x, g2 x))\n\ngoal (5 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3\n 4. line_integral_exists F {i} gamma2\n 5. line_integral_exists F {i} gamma1", "have field_cont_on_gamma1_image: \"continuous_on ?Dg2  (\\<lambda>a. F(a) \\<bullet> i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g2 x)}\n     (\\<lambda>a. F a \\<bullet> i)", "apply (rule continuous_on_subset [OF F_first_is_continuous])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g2 x)}\n    \\<subseteq> Dy_pair", "by (auto simp add: Dy_def g2_leq_g1)"], ["proof (state)\nthis:\n  continuous_on {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g2 x)}\n   (\\<lambda>a. F a \\<bullet> i)\n\ngoal (5 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3\n 4. line_integral_exists F {i} gamma2\n 5. line_integral_exists F {i} gamma1", "have gamma1_is_compos_of_scal_and_g2:\n    \"gamma1 = (\\<lambda>x. (x, g2(x))) \\<circ> (\\<lambda>x. a + (b - a) * x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gamma1 = (\\<lambda>x. (x, g2 x)) \\<circ> (\\<lambda>x. a + (b - a) * x)", "using gamma1_def"], ["proof (prove)\nusing this:\n  gamma1 = (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x)))\n\ngoal (1 subgoal):\n 1. gamma1 = (\\<lambda>x. (x, g2 x)) \\<circ> (\\<lambda>x. a + (b - a) * x)", "by auto"], ["proof (state)\nthis:\n  gamma1 = (\\<lambda>x. (x, g2 x)) \\<circ> (\\<lambda>x. a + (b - a) * x)\n\ngoal (5 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3\n 4. line_integral_exists F {i} gamma2\n 5. line_integral_exists F {i} gamma1", "have add_scale_img:\n    \"(\\<lambda>x. a + (b - a) * x) ` {0 .. 1} = {a .. b}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}", "using add_scale_img and a_lt_b"], ["proof (prove)\nusing this:\n  ?a < ?b \\<Longrightarrow>\n  (\\<lambda>x. ?a + (?b - ?a) * x) ` {0..1} = {?a..?b}\n  a < b\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}\n\ngoal (5 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3\n 4. line_integral_exists F {i} gamma2\n 5. line_integral_exists F {i} gamma1", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}", "have Dg2_is_gamma1_pathimg: \"path_image gamma1 = ?Dg2\""], ["proof (prove)\nusing this:\n  (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}\n\ngoal (1 subgoal):\n 1. path_image gamma1 =\n    {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g2 x)}", "by (metis (no_types, lifting) box_real(2) gamma1_is_compos_of_scal_and_g2 image_comp line_is_pair_img path_image_def)"], ["proof (state)\nthis:\n  path_image gamma1 = {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g2 x)}\n\ngoal (5 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3\n 4. line_integral_exists F {i} gamma2\n 5. line_integral_exists F {i} gamma1", "have Base_vecs: \"i \\<in> Basis\" \"j \\<in> Basis\" \"i \\<noteq> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> Basis &&& j \\<in> Basis &&& i \\<noteq> j", "using real_pair_basis and i_is_x_axis and j_is_y_axis"], ["proof (prove)\nusing this:\n  Basis = {(1, 0), (0, 1)}\n  i = (1, 0)\n  j = (0, 1)\n\ngoal (1 subgoal):\n 1. i \\<in> Basis &&& j \\<in> Basis &&& i \\<noteq> j", "by auto"], ["proof (state)\nthis:\n  i \\<in> Basis\n  j \\<in> Basis\n  i \\<noteq> j\n\ngoal (5 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3\n 4. line_integral_exists F {i} gamma2\n 5. line_integral_exists F {i} gamma1", "have gamma1_as_euclid_space_fun: \"gamma1 = (\\<lambda>x. (a + (b - a) * x) *\\<^sub>R i + (0, g2 (a + (b - a) * x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gamma1 =\n    (\\<lambda>x. (a + (b - a) * x) *\\<^sub>R i + (0, g2 (a + (b - a) * x)))", "using i_is_x_axis gamma1_def"], ["proof (prove)\nusing this:\n  i = (1, 0)\n  gamma1 = (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x)))\n\ngoal (1 subgoal):\n 1. gamma1 =\n    (\\<lambda>x. (a + (b - a) * x) *\\<^sub>R i + (0, g2 (a + (b - a) * x)))", "by auto"], ["proof (state)\nthis:\n  gamma1 =\n  (\\<lambda>x. (a + (b - a) * x) *\\<^sub>R i + (0, g2 (a + (b - a) * x)))\n\ngoal (5 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3\n 4. line_integral_exists F {i} gamma2\n 5. line_integral_exists F {i} gamma1", "have 0: \"line_integral F {i} gamma1 = integral (cbox a b) (\\<lambda>x. F(x, g2(x)) \\<bullet> i )\"\n          \"line_integral_exists F {i} gamma1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral F {i} gamma1 =\n    integral (cbox a b) (\\<lambda>x. F (x, g2 x) \\<bullet> i) &&&\n    line_integral_exists F {i} gamma1", "using line_integral_on_pair_path_strong [OF norm_Basis[OF Base_vecs(1)] _ gamma1_as_euclid_space_fun, of \"F\"] \n      gamma1_def gamma1_smooth g2_scale_j_contin a_lt_b add_scale_img\n      Dg2_is_gamma1_pathimg and field_cont_on_gamma1_image"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>x. (0, g2 x) \\<bullet> i = 0;\n   gamma1 piecewise_C1_differentiable_on {0..1};\n   continuous_on ((\\<lambda>x. a + (b - a) * x) ` {0..1})\n    (\\<lambda>a. (0, g2 a));\n   pathstart gamma1 \\<bullet> i \\<le> pathfinish gamma1 \\<bullet> i;\n   continuous_on (path_image gamma1) (\\<lambda>x. F x \\<bullet> i)\\<rbrakk>\n  \\<Longrightarrow> line_integral F {i} gamma1 =\n                    integral\n                     (cbox (pathstart gamma1 \\<bullet> i)\n                       (pathfinish gamma1 \\<bullet> i))\n                     (\\<lambda>f_var.\n                         F (f_var *\\<^sub>R i + (0, g2 f_var)) \\<bullet> i)\n  \\<lbrakk>\\<forall>x. (0, g2 x) \\<bullet> i = 0;\n   gamma1 piecewise_C1_differentiable_on {0..1};\n   continuous_on ((\\<lambda>x. a + (b - a) * x) ` {0..1})\n    (\\<lambda>a. (0, g2 a));\n   pathstart gamma1 \\<bullet> i \\<le> pathfinish gamma1 \\<bullet> i;\n   continuous_on (path_image gamma1) (\\<lambda>x. F x \\<bullet> i)\\<rbrakk>\n  \\<Longrightarrow> line_integral_exists F {i} gamma1\n  gamma1 = (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x)))\n  gamma1 piecewise_C1_differentiable_on {0..1}\n  continuous_on (cbox a b) (\\<lambda>x. (0::?'a1, g2 x))\n  a < b\n  (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}\n  path_image gamma1 = {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g2 x)}\n  continuous_on {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g2 x)}\n   (\\<lambda>a. F a \\<bullet> i)\n\ngoal (1 subgoal):\n 1. line_integral F {i} gamma1 =\n    integral (cbox a b) (\\<lambda>x. F (x, g2 x) \\<bullet> i) &&&\n    line_integral_exists F {i} gamma1", "by (auto simp: pathstart_def pathfinish_def i_is_x_axis)"], ["proof (state)\nthis:\n  line_integral F {i} gamma1 =\n  integral (cbox a b) (\\<lambda>x. F (x, g2 x) \\<bullet> i)\n  line_integral_exists F {i} gamma1\n\ngoal (5 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3\n 4. line_integral_exists F {i} gamma2\n 5. line_integral_exists F {i} gamma1", "then"], ["proof (chain)\npicking this:\n  line_integral F {i} gamma1 =\n  integral (cbox a b) (\\<lambda>x. F (x, g2 x) \\<bullet> i)\n  line_integral_exists F {i} gamma1", "show \"(line_integral_exists F {i} gamma1)\""], ["proof (prove)\nusing this:\n  line_integral F {i} gamma1 =\n  integral (cbox a b) (\\<lambda>x. F (x, g2 x) \\<bullet> i)\n  line_integral_exists F {i} gamma1\n\ngoal (1 subgoal):\n 1. line_integral_exists F {i} gamma1", "by metis"], ["proof (state)\nthis:\n  line_integral_exists F {i} gamma1\n\ngoal (4 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3\n 4. line_integral_exists F {i} gamma2", "have gamma2_x_const: \"\\<forall>x. gamma2 x \\<bullet> i = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. gamma2 x \\<bullet> i = b", "by (simp add: i_is_x_axis gamma2_def)"], ["proof (state)\nthis:\n  \\<forall>x. gamma2 x \\<bullet> i = b\n\ngoal (4 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3\n 4. line_integral_exists F {i} gamma2", "have 1: \"(line_integral F {i} gamma2) = 0\" \"(line_integral_exists F {i} gamma2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral F {i} gamma2 = 0 &&& line_integral_exists F {i} gamma2", "using line_integral_on_pair_straight_path[OF gamma2_x_const] straight_path_diffrentiable_x gamma2_def"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>{0..1}. gamma2 differentiable at x \\<Longrightarrow>\n  line_integral ?F {i} gamma2 = 0\n  \\<forall>x\\<in>{0..1}. gamma2 differentiable at x \\<Longrightarrow>\n  line_integral_exists ?F {i} gamma2\n  ?\\<gamma> = (\\<lambda>x. (?b, ?y2.0 + ?y1.0 * x)) \\<Longrightarrow>\n  \\<forall>x. ?\\<gamma> differentiable at x\n  gamma2 = (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b)))\n\ngoal (1 subgoal):\n 1. line_integral F {i} gamma2 = 0 &&& line_integral_exists F {i} gamma2", "by (auto simp add: mult.commute)"], ["proof (state)\nthis:\n  line_integral F {i} gamma2 = 0\n  line_integral_exists F {i} gamma2\n\ngoal (4 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3\n 4. line_integral_exists F {i} gamma2", "then"], ["proof (chain)\npicking this:\n  line_integral F {i} gamma2 = 0\n  line_integral_exists F {i} gamma2", "show \"(line_integral_exists F {i} gamma2)\""], ["proof (prove)\nusing this:\n  line_integral F {i} gamma2 = 0\n  line_integral_exists F {i} gamma2\n\ngoal (1 subgoal):\n 1. line_integral_exists F {i} gamma2", "by metis"], ["proof (state)\nthis:\n  line_integral_exists F {i} gamma2\n\ngoal (3 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3", "have \"continuous_on (cbox a b) (\\<lambda>x. F(x, g2(x))  \\<bullet> i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (cbox a b) (\\<lambda>x. F (x, g2 x) \\<bullet> i)", "using line_is_pair_img and g2_path_continuous and field_cont_on_gamma1_image\n      Topological_Spaces.continuous_on_compose i_is_x_axis j_is_y_axis"], ["proof (prove)\nusing this:\n  {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g2 x)} =\n  (\\<lambda>x. (x, g2 x)) ` cbox a b\n  continuous_on (cbox a b) (\\<lambda>x. (x, g2 x))\n  continuous_on {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g2 x)}\n   (\\<lambda>a. F a \\<bullet> i)\n  \\<lbrakk>continuous_on ?s ?f; continuous_on (?f ` ?s) ?g\\<rbrakk>\n  \\<Longrightarrow> continuous_on ?s (?g \\<circ> ?f)\n  i = (1, 0)\n  j = (0, 1)\n\ngoal (1 subgoal):\n 1. continuous_on (cbox a b) (\\<lambda>x. F (x, g2 x) \\<bullet> i)", "by auto"], ["proof (state)\nthis:\n  continuous_on (cbox a b) (\\<lambda>x. F (x, g2 x) \\<bullet> i)\n\ngoal (3 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3", "then"], ["proof (chain)\npicking this:\n  continuous_on (cbox a b) (\\<lambda>x. F (x, g2 x) \\<bullet> i)", "have 6: \"(\\<lambda>x. F(x, g2(x))  \\<bullet> i) integrable_on (cbox a b)\""], ["proof (prove)\nusing this:\n  continuous_on (cbox a b) (\\<lambda>x. F (x, g2 x) \\<bullet> i)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. F (x, g2 x) \\<bullet> i) integrable_on cbox a b", "using integrable_continuous [of \"a\" \"b\" \"(\\<lambda>x. F(x, g2(x))  \\<bullet> i)\"]"], ["proof (prove)\nusing this:\n  continuous_on (cbox a b) (\\<lambda>x. F (x, g2 x) \\<bullet> i)\n  continuous_on (cbox a b)\n   (\\<lambda>x. F (x, g2 x) \\<bullet> i) \\<Longrightarrow>\n  (\\<lambda>x. F (x, g2 x) \\<bullet> i) integrable_on cbox a b\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. F (x, g2 x) \\<bullet> i) integrable_on cbox a b", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. F (x, g2 x) \\<bullet> i) integrable_on cbox a b\n\ngoal (3 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3", "have g1_scale_j_contin: \"continuous_on (cbox a b) (\\<lambda>x. (0, g1 x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (cbox a b) (\\<lambda>x. (0::'a, g1 x))", "by (intro continuous_intros g1_g2_continuous)"], ["proof (state)\nthis:\n  continuous_on (cbox a b) (\\<lambda>x. (0::?'a2, g1 x))\n\ngoal (3 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3", "let ?Dg1 =  \"{p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g1(x))}\""], ["proof (state)\ngoal (3 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3", "have line_is_pair_img: \"?Dg1 = (\\<lambda>x. (x, g1(x)) ) ` (cbox a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g1 x)} =\n    (\\<lambda>x. (x, g1 x)) ` cbox a b", "using image_def"], ["proof (prove)\nusing this:\n  ?f ` ?A = {y. \\<exists>x\\<in>?A. y = ?f x}\n\ngoal (1 subgoal):\n 1. {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g1 x)} =\n    (\\<lambda>x. (x, g1 x)) ` cbox a b", "by auto"], ["proof (state)\nthis:\n  {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g1 x)} =\n  (\\<lambda>x. (x, g1 x)) ` cbox a b\n\ngoal (3 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3", "have g1_path_continuous: \"continuous_on (cbox a b) (\\<lambda>x. (x, g1(x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (cbox a b) (\\<lambda>x. (x, g1 x))", "by (intro continuous_intros g1_g2_continuous)"], ["proof (state)\nthis:\n  continuous_on (cbox a b) (\\<lambda>x. (x, g1 x))\n\ngoal (3 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3", "have field_cont_on_gamma3_image: \"continuous_on ?Dg1  (\\<lambda>a. F(a)  \\<bullet> i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g1 x)}\n     (\\<lambda>a. F a \\<bullet> i)", "apply (rule continuous_on_subset [OF F_first_is_continuous])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g1 x)}\n    \\<subseteq> Dy_pair", "by (auto simp add: Dy_def g2_leq_g1)"], ["proof (state)\nthis:\n  continuous_on {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g1 x)}\n   (\\<lambda>a. F a \\<bullet> i)\n\ngoal (3 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3", "have gamma3_is_compos_of_scal_and_g1:\n    \"gamma3 = (\\<lambda>x. (x, g1(x))) \\<circ> (\\<lambda>x. a + (b - a) * x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gamma3 = (\\<lambda>x. (x, g1 x)) \\<circ> (\\<lambda>x. a + (b - a) * x)", "using gamma3_def"], ["proof (prove)\nusing this:\n  gamma3 = (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x)))\n\ngoal (1 subgoal):\n 1. gamma3 = (\\<lambda>x. (x, g1 x)) \\<circ> (\\<lambda>x. a + (b - a) * x)", "by auto"], ["proof (state)\nthis:\n  gamma3 = (\\<lambda>x. (x, g1 x)) \\<circ> (\\<lambda>x. a + (b - a) * x)\n\ngoal (3 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3", "then"], ["proof (chain)\npicking this:\n  gamma3 = (\\<lambda>x. (x, g1 x)) \\<circ> (\\<lambda>x. a + (b - a) * x)", "have Dg1_is_gamma3_pathimg: \"path_image gamma3 = ?Dg1\""], ["proof (prove)\nusing this:\n  gamma3 = (\\<lambda>x. (x, g1 x)) \\<circ> (\\<lambda>x. a + (b - a) * x)\n\ngoal (1 subgoal):\n 1. path_image gamma3 =\n    {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g1 x)}", "by (metis (no_types, lifting) box_real(2) image_comp line_is_pair_img local.add_scale_img path_image_def)"], ["proof (state)\nthis:\n  path_image gamma3 = {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g1 x)}\n\ngoal (3 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3", "have Base_vecs: \"i \\<in> Basis\" \"j \\<in> Basis\" \"i \\<noteq> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> Basis &&& j \\<in> Basis &&& i \\<noteq> j", "using real_pair_basis and i_is_x_axis and j_is_y_axis"], ["proof (prove)\nusing this:\n  Basis = {(1, 0), (0, 1)}\n  i = (1, 0)\n  j = (0, 1)\n\ngoal (1 subgoal):\n 1. i \\<in> Basis &&& j \\<in> Basis &&& i \\<noteq> j", "by auto"], ["proof (state)\nthis:\n  i \\<in> Basis\n  j \\<in> Basis\n  i \\<noteq> j\n\ngoal (3 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3", "have gamma3_as_euclid_space_fun: \"gamma3 = (\\<lambda>x. (a + (b - a) * x) *\\<^sub>R i + (0, g1 (a + (b - a) * x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gamma3 =\n    (\\<lambda>x. (a + (b - a) * x) *\\<^sub>R i + (0, g1 (a + (b - a) * x)))", "using i_is_x_axis gamma3_def"], ["proof (prove)\nusing this:\n  i = (1, 0)\n  gamma3 = (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x)))\n\ngoal (1 subgoal):\n 1. gamma3 =\n    (\\<lambda>x. (a + (b - a) * x) *\\<^sub>R i + (0, g1 (a + (b - a) * x)))", "by auto"], ["proof (state)\nthis:\n  gamma3 =\n  (\\<lambda>x. (a + (b - a) * x) *\\<^sub>R i + (0, g1 (a + (b - a) * x)))\n\ngoal (3 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3", "have 2: \"line_integral F {i} gamma3 = integral (cbox a b) (\\<lambda>x. F(x, g1(x)) \\<bullet> i )\"\n         \"line_integral_exists F {i} gamma3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral F {i} gamma3 =\n    integral (cbox a b) (\\<lambda>x. F (x, g1 x) \\<bullet> i) &&&\n    line_integral_exists F {i} gamma3", "using line_integral_on_pair_path_strong [OF norm_Basis[OF Base_vecs(1)] _ gamma3_as_euclid_space_fun, of \"F\"]\n      gamma3_def and gamma3_smooth and g1_scale_j_contin and a_lt_b and add_scale_img\n      Dg1_is_gamma3_pathimg and field_cont_on_gamma3_image"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>x. (0, g1 x) \\<bullet> i = 0;\n   gamma3 piecewise_C1_differentiable_on {0..1};\n   continuous_on ((\\<lambda>x. a + (b - a) * x) ` {0..1})\n    (\\<lambda>a. (0, g1 a));\n   pathstart gamma3 \\<bullet> i \\<le> pathfinish gamma3 \\<bullet> i;\n   continuous_on (path_image gamma3) (\\<lambda>x. F x \\<bullet> i)\\<rbrakk>\n  \\<Longrightarrow> line_integral F {i} gamma3 =\n                    integral\n                     (cbox (pathstart gamma3 \\<bullet> i)\n                       (pathfinish gamma3 \\<bullet> i))\n                     (\\<lambda>f_var.\n                         F (f_var *\\<^sub>R i + (0, g1 f_var)) \\<bullet> i)\n  \\<lbrakk>\\<forall>x. (0, g1 x) \\<bullet> i = 0;\n   gamma3 piecewise_C1_differentiable_on {0..1};\n   continuous_on ((\\<lambda>x. a + (b - a) * x) ` {0..1})\n    (\\<lambda>a. (0, g1 a));\n   pathstart gamma3 \\<bullet> i \\<le> pathfinish gamma3 \\<bullet> i;\n   continuous_on (path_image gamma3) (\\<lambda>x. F x \\<bullet> i)\\<rbrakk>\n  \\<Longrightarrow> line_integral_exists F {i} gamma3\n  gamma3 = (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x)))\n  gamma3 piecewise_C1_differentiable_on {0..1}\n  continuous_on (cbox a b) (\\<lambda>x. (0::?'a2, g1 x))\n  a < b\n  (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}\n  path_image gamma3 = {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g1 x)}\n  continuous_on {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g1 x)}\n   (\\<lambda>a. F a \\<bullet> i)\n\ngoal (1 subgoal):\n 1. line_integral F {i} gamma3 =\n    integral (cbox a b) (\\<lambda>x. F (x, g1 x) \\<bullet> i) &&&\n    line_integral_exists F {i} gamma3", "by (auto simp: pathstart_def pathfinish_def i_is_x_axis)"], ["proof (state)\nthis:\n  line_integral F {i} gamma3 =\n  integral (cbox a b) (\\<lambda>x. F (x, g1 x) \\<bullet> i)\n  line_integral_exists F {i} gamma3\n\ngoal (3 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4\n 3. line_integral_exists F {i} gamma3", "then"], ["proof (chain)\npicking this:\n  line_integral F {i} gamma3 =\n  integral (cbox a b) (\\<lambda>x. F (x, g1 x) \\<bullet> i)\n  line_integral_exists F {i} gamma3", "show \"(line_integral_exists F {i} gamma3)\""], ["proof (prove)\nusing this:\n  line_integral F {i} gamma3 =\n  integral (cbox a b) (\\<lambda>x. F (x, g1 x) \\<bullet> i)\n  line_integral_exists F {i} gamma3\n\ngoal (1 subgoal):\n 1. line_integral_exists F {i} gamma3", "by metis"], ["proof (state)\nthis:\n  line_integral_exists F {i} gamma3\n\ngoal (2 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4", "have gamma4_x_const: \"\\<forall>x. gamma4 x \\<bullet> i = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. gamma4 x \\<bullet> i = a", "using gamma4_def"], ["proof (prove)\nusing this:\n  gamma4 = (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))\n\ngoal (1 subgoal):\n 1. \\<forall>x. gamma4 x \\<bullet> i = a", "by (auto simp add: real_inner_class.inner_add_left inner_not_same_Basis  i_is_x_axis)"], ["proof (state)\nthis:\n  \\<forall>x. gamma4 x \\<bullet> i = a\n\ngoal (2 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4", "have 3: \"(line_integral F {i} gamma4) = 0\" \"(line_integral_exists F {i} gamma4)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral F {i} gamma4 = 0 &&& line_integral_exists F {i} gamma4", "using line_integral_on_pair_straight_path[OF gamma4_x_const] straight_path_diffrentiable_x gamma4_def"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>{0..1}. gamma4 differentiable at x \\<Longrightarrow>\n  line_integral ?F {i} gamma4 = 0\n  \\<forall>x\\<in>{0..1}. gamma4 differentiable at x \\<Longrightarrow>\n  line_integral_exists ?F {i} gamma4\n  ?\\<gamma> = (\\<lambda>x. (?b, ?y2.0 + ?y1.0 * x)) \\<Longrightarrow>\n  \\<forall>x. ?\\<gamma> differentiable at x\n  gamma4 = (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))\n\ngoal (1 subgoal):\n 1. line_integral F {i} gamma4 = 0 &&& line_integral_exists F {i} gamma4", "by (auto simp add: mult.commute)"], ["proof (state)\nthis:\n  line_integral F {i} gamma4 = 0\n  line_integral_exists F {i} gamma4\n\ngoal (2 subgoals):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n 2. line_integral_exists F {i} gamma4", "then"], ["proof (chain)\npicking this:\n  line_integral F {i} gamma4 = 0\n  line_integral_exists F {i} gamma4", "show \"(line_integral_exists F {i} gamma4)\""], ["proof (prove)\nusing this:\n  line_integral F {i} gamma4 = 0\n  line_integral_exists F {i} gamma4\n\ngoal (1 subgoal):\n 1. line_integral_exists F {i} gamma4", "by metis"], ["proof (state)\nthis:\n  line_integral_exists F {i} gamma4\n\ngoal (1 subgoal):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)", "have \"continuous_on (cbox a b) (\\<lambda>x. F(x, g1(x)) \\<bullet> i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (cbox a b) (\\<lambda>x. F (x, g1 x) \\<bullet> i)", "using line_is_pair_img and g1_path_continuous and field_cont_on_gamma3_image\n      continuous_on_compose i_is_x_axis j_is_y_axis"], ["proof (prove)\nusing this:\n  {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g1 x)} =\n  (\\<lambda>x. (x, g1 x)) ` cbox a b\n  continuous_on (cbox a b) (\\<lambda>x. (x, g1 x))\n  continuous_on {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (x, g1 x)}\n   (\\<lambda>a. F a \\<bullet> i)\n  \\<lbrakk>continuous_on ?s ?f; continuous_on (?f ` ?s) ?g\\<rbrakk>\n  \\<Longrightarrow> continuous_on ?s (?g \\<circ> ?f)\n  i = (1, 0)\n  j = (0, 1)\n\ngoal (1 subgoal):\n 1. continuous_on (cbox a b) (\\<lambda>x. F (x, g1 x) \\<bullet> i)", "by auto"], ["proof (state)\nthis:\n  continuous_on (cbox a b) (\\<lambda>x. F (x, g1 x) \\<bullet> i)\n\ngoal (1 subgoal):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)", "then"], ["proof (chain)\npicking this:\n  continuous_on (cbox a b) (\\<lambda>x. F (x, g1 x) \\<bullet> i)", "have 7: \"(\\<lambda>x. F(x, g1(x))  \\<bullet> i) integrable_on (cbox a b)\""], ["proof (prove)\nusing this:\n  continuous_on (cbox a b) (\\<lambda>x. F (x, g1 x) \\<bullet> i)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. F (x, g1 x) \\<bullet> i) integrable_on cbox a b", "using integrable_continuous [of \"a\" \"b\" \"(\\<lambda>x. F(x, g1(x))  \\<bullet> i)\"]"], ["proof (prove)\nusing this:\n  continuous_on (cbox a b) (\\<lambda>x. F (x, g1 x) \\<bullet> i)\n  continuous_on (cbox a b)\n   (\\<lambda>x. F (x, g1 x) \\<bullet> i) \\<Longrightarrow>\n  (\\<lambda>x. F (x, g1 x) \\<bullet> i) integrable_on cbox a b\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. F (x, g1 x) \\<bullet> i) integrable_on cbox a b", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. F (x, g1 x) \\<bullet> i) integrable_on cbox a b\n\ngoal (1 subgoal):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)", "have partial_deriv_one_d_integrable:\n    \"((\\<lambda>y. ?F_b'(xc, y)) has_integral \n        F(xc,g1(xc)) \\<bullet> i - F(xc, g2(xc)) \\<bullet> i) (cbox (g2 xc) (g1 xc))\" \n     if \"xc \\<in> cbox a b\" for xc"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>y.\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n          (xc, y)) has_integral\n     F (xc, g1 xc) \\<bullet> i - F (xc, g2 xc) \\<bullet> i)\n     (cbox (g2 xc) (g1 xc))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>y.\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n          (xc, y)) has_integral\n     F (xc, g1 xc) \\<bullet> i - F (xc, g2 xc) \\<bullet> i)\n     (cbox (g2 xc) (g1 xc))", "have \"{(xc', y).  y \\<in> cbox (g2 xc) (g1 xc) \\<and> xc' = xc} \\<subseteq> Dy_pair\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(xc', y). y \\<in> cbox (g2 xc) (g1 xc) \\<and> xc' = xc}\n    \\<subseteq> Dy_pair", "using that"], ["proof (prove)\nusing this:\n  xc \\<in> cbox a b\n\ngoal (1 subgoal):\n 1. {(xc', y). y \\<in> cbox (g2 xc) (g1 xc) \\<and> xc' = xc}\n    \\<subseteq> Dy_pair", "by (auto simp add: Dy_def)"], ["proof (state)\nthis:\n  {(xc', y). y \\<in> cbox (g2 xc) (g1 xc) \\<and> xc' = xc}\n  \\<subseteq> Dy_pair\n\ngoal (1 subgoal):\n 1. ((\\<lambda>y.\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n          (xc, y)) has_integral\n     F (xc, g1 xc) \\<bullet> i - F (xc, g2 xc) \\<bullet> i)\n     (cbox (g2 xc) (g1 xc))", "then"], ["proof (chain)\npicking this:\n  {(xc', y). y \\<in> cbox (g2 xc) (g1 xc) \\<and> xc' = xc}\n  \\<subseteq> Dy_pair", "show \"((\\<lambda>y. ?F_b' (xc, y)) has_integral F(xc, g1 xc) \\<bullet> i - F(xc, g2 xc) \\<bullet> i) (cbox (g2 xc) (g1 xc))\""], ["proof (prove)\nusing this:\n  {(xc', y). y \\<in> cbox (g2 xc) (g1 xc) \\<and> xc' = xc}\n  \\<subseteq> Dy_pair\n\ngoal (1 subgoal):\n 1. ((\\<lambda>y.\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n          (xc, y)) has_integral\n     F (xc, g1 xc) \\<bullet> i - F (xc, g2 xc) \\<bullet> i)\n     (cbox (g2 xc) (g1 xc))", "using that and Base_vecs and F_partially_differentiable\n        and Dy_def [symmetric] and g2_leq_g1\n        and fundamental_theorem_of_calculus_partial_vector\n        [of \"g2 xc\" \"g1 xc\" \"j\" \"i\" \"xc *\\<^sub>R i\" \"Dy_pair\" \"F\" \"?F_b'\" ]"], ["proof (prove)\nusing this:\n  {(xc', y). y \\<in> cbox (g2 xc) (g1 xc) \\<and> xc' = xc}\n  \\<subseteq> Dy_pair\n  xc \\<in> cbox a b\n  i \\<in> Basis\n  j \\<in> Basis\n  i \\<noteq> j\n  \\<forall>a\\<in>Dy_pair.\n     has_partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j\n      (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j a) a\n  {(x, y). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)} = Dy_pair\n  \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x\n  \\<lbrakk>g2 xc \\<le> g1 xc; j \\<in> Basis; i \\<in> Basis;\n   xc *\\<^sub>R i \\<bullet> j = 0;\n   \\<forall>p\\<in>Dy_pair.\n      has_partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j\n       (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j p) p;\n   {x *\\<^sub>R j + xc *\\<^sub>R i |x. g2 xc \\<le> x \\<and> x \\<le> g1 xc}\n   \\<subseteq> Dy_pair\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         partial_vector_derivative\n                          (\\<lambda>a. F a \\<bullet> i) j\n                          (x *\\<^sub>R j + xc *\\<^sub>R i)) has_integral\n                     F (g1 xc *\\<^sub>R j + xc *\\<^sub>R i) \\<bullet> i -\n                     F (g2 xc *\\<^sub>R j + xc *\\<^sub>R i) \\<bullet> i)\n                     (cbox (g2 xc) (g1 xc))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>y.\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n          (xc, y)) has_integral\n     F (xc, g1 xc) \\<bullet> i - F (xc, g2 xc) \\<bullet> i)\n     (cbox (g2 xc) (g1 xc))", "by (auto simp add:  Groups.ab_semigroup_add_class.add.commute i_is_x_axis j_is_y_axis)"], ["proof (state)\nthis:\n  ((\\<lambda>y.\n       partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n        (xc, y)) has_integral\n   F (xc, g1 xc) \\<bullet> i - F (xc, g2 xc) \\<bullet> i)\n   (cbox (g2 xc) (g1 xc))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?xc2 \\<in> cbox a b \\<Longrightarrow>\n  ((\\<lambda>y.\n       partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n        (?xc2, y)) has_integral\n   F (?xc2, g1 ?xc2) \\<bullet> i - F (?xc2, g2 ?xc2) \\<bullet> i)\n   (cbox (g2 ?xc2) (g1 ?xc2))\n\ngoal (1 subgoal):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)", "have partial_deriv_integrable: \"(?F_b') integrable_on Dy_pair\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j integrable_on\n    Dy_pair", "by (simp add: F_i_analytically_valid analytically_valid_imp_part_deriv_integrable_on)"], ["proof (state)\nthis:\n  partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j integrable_on\n  Dy_pair\n\ngoal (1 subgoal):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)", "have 4: \"integral Dy_pair ?F_b'\n           = integral (cbox a b) (\\<lambda>x. integral (cbox (g2 x) (g1 x)) (\\<lambda>y. ?F_b' (x, y)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral Dy_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j) =\n    integral (cbox a b)\n     (\\<lambda>x.\n         integral (cbox (g2 x) (g1 x))\n          (\\<lambda>y.\n              partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n               (x, y)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. integral Dy_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j) =\n    integral (cbox a b)\n     (\\<lambda>x.\n         integral (cbox (g2 x) (g1 x))\n          (\\<lambda>y.\n              partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n               (x, y)))", "have x_axis_gauge_integrable:\n      \"\\<And>x. (\\<lambda>y. ?f(x,y)) integrable_on UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<lambda>y.\n           if (x, y) \\<in> Dy_pair\n           then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n                 (x, y)\n           else 0) integrable_on\n       UNIV", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<lambda>y.\n           if (x, y) \\<in> Dy_pair\n           then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n                 (x, y)\n           else 0) integrable_on\n       UNIV", "fix x::real"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<lambda>y.\n           if (x, y) \\<in> Dy_pair\n           then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n                 (x, y)\n           else 0) integrable_on\n       UNIV", "have \"\\<forall>x. x \\<notin> cbox a b \\<longrightarrow>  (\\<lambda>y. ?f (x, y)) = (\\<lambda>y. 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<notin> cbox a b \\<longrightarrow>\n       (\\<lambda>y.\n           if (x, y) \\<in> Dy_pair\n           then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n                 (x, y)\n           else 0) =\n       (\\<lambda>y. 0)", "by (auto simp add: Dy_def)"], ["proof (state)\nthis:\n  \\<forall>x.\n     x \\<notin> cbox a b \\<longrightarrow>\n     (\\<lambda>y.\n         if (x, y) \\<in> Dy_pair\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n               (x, y)\n         else 0) =\n     (\\<lambda>y. 0)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<lambda>y.\n           if (x, y) \\<in> Dy_pair\n           then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n                 (x, y)\n           else 0) integrable_on\n       UNIV", "then"], ["proof (chain)\npicking this:\n  \\<forall>x.\n     x \\<notin> cbox a b \\<longrightarrow>\n     (\\<lambda>y.\n         if (x, y) \\<in> Dy_pair\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n               (x, y)\n         else 0) =\n     (\\<lambda>y. 0)", "have f_integrable_x_not_in_range:\n        \"\\<forall>x. x \\<notin> cbox a b \\<longrightarrow>  (\\<lambda>y. ?f (x, y)) integrable_on UNIV\""], ["proof (prove)\nusing this:\n  \\<forall>x.\n     x \\<notin> cbox a b \\<longrightarrow>\n     (\\<lambda>y.\n         if (x, y) \\<in> Dy_pair\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n               (x, y)\n         else 0) =\n     (\\<lambda>y. 0)\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<notin> cbox a b \\<longrightarrow>\n       (\\<lambda>y.\n           if (x, y) \\<in> Dy_pair\n           then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n                 (x, y)\n           else 0) integrable_on\n       UNIV", "by (simp add: integrable_0)"], ["proof (state)\nthis:\n  \\<forall>x.\n     x \\<notin> cbox a b \\<longrightarrow>\n     (\\<lambda>y.\n         if (x, y) \\<in> Dy_pair\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n               (x, y)\n         else 0) integrable_on\n     UNIV\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<lambda>y.\n           if (x, y) \\<in> Dy_pair\n           then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n                 (x, y)\n           else 0) integrable_on\n       UNIV", "let ?F_b'_oneD = \"(\\<lambda>x. (\\<lambda>y. if y \\<in> (cbox (g2 x) ( g1 x)) then ?F_b' (x,y) else 0))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<lambda>y.\n           if (x, y) \\<in> Dy_pair\n           then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n                 (x, y)\n           else 0) integrable_on\n       UNIV", "have f_value_x_in_range: \"\\<forall>x \\<in> cbox a b. ?F_b'_oneD x = (\\<lambda>y. ?f(x,y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>cbox a b.\n       (\\<lambda>y.\n           if y \\<in> cbox (g2 x) (g1 x)\n           then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n                 (x, y)\n           else 0) =\n       (\\<lambda>y.\n           if (x, y) \\<in> Dy_pair\n           then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n                 (x, y)\n           else 0)", "by (auto simp add: Dy_def)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>cbox a b.\n     (\\<lambda>y.\n         if y \\<in> cbox (g2 x) (g1 x)\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n               (x, y)\n         else 0) =\n     (\\<lambda>y.\n         if (x, y) \\<in> Dy_pair\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n               (x, y)\n         else 0)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<lambda>y.\n           if (x, y) \\<in> Dy_pair\n           then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n                 (x, y)\n           else 0) integrable_on\n       UNIV", "have \"\\<forall>x \\<in> cbox a b. ?F_b'_oneD x integrable_on UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>cbox a b.\n       (\\<lambda>y.\n           if y \\<in> cbox (g2 x) (g1 x)\n           then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n                 (x, y)\n           else 0) integrable_on\n       UNIV", "using has_integral_integrable integrable_restrict_UNIV partial_deriv_one_d_integrable"], ["proof (prove)\nusing this:\n  (?f has_integral ?i) ?s \\<Longrightarrow> ?f integrable_on ?s\n  ((\\<lambda>x. if x \\<in> ?s then ?f x else (0::?'a)) integrable_on UNIV) =\n  (?f integrable_on ?s)\n  ?xc2 \\<in> cbox a b \\<Longrightarrow>\n  ((\\<lambda>y.\n       partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n        (?xc2, y)) has_integral\n   F (?xc2, g1 ?xc2) \\<bullet> i - F (?xc2, g2 ?xc2) \\<bullet> i)\n   (cbox (g2 ?xc2) (g1 ?xc2))\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>cbox a b.\n       (\\<lambda>y.\n           if y \\<in> cbox (g2 x) (g1 x)\n           then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n                 (x, y)\n           else 0) integrable_on\n       UNIV", "by blast"], ["proof (state)\nthis:\n  \\<forall>x\\<in>cbox a b.\n     (\\<lambda>y.\n         if y \\<in> cbox (g2 x) (g1 x)\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n               (x, y)\n         else 0) integrable_on\n     UNIV\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<lambda>y.\n           if (x, y) \\<in> Dy_pair\n           then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n                 (x, y)\n           else 0) integrable_on\n       UNIV", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>cbox a b.\n     (\\<lambda>y.\n         if y \\<in> cbox (g2 x) (g1 x)\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n               (x, y)\n         else 0) integrable_on\n     UNIV", "have f_integrable_x_in_range:\n        \"\\<forall>x. x \\<in> cbox a b \\<longrightarrow>  (\\<lambda>y. ?f (x, y)) integrable_on UNIV\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>cbox a b.\n     (\\<lambda>y.\n         if y \\<in> cbox (g2 x) (g1 x)\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n               (x, y)\n         else 0) integrable_on\n     UNIV\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in> cbox a b \\<longrightarrow>\n       (\\<lambda>y.\n           if (x, y) \\<in> Dy_pair\n           then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n                 (x, y)\n           else 0) integrable_on\n       UNIV", "using f_value_x_in_range"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>cbox a b.\n     (\\<lambda>y.\n         if y \\<in> cbox (g2 x) (g1 x)\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n               (x, y)\n         else 0) integrable_on\n     UNIV\n  \\<forall>x\\<in>cbox a b.\n     (\\<lambda>y.\n         if y \\<in> cbox (g2 x) (g1 x)\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n               (x, y)\n         else 0) =\n     (\\<lambda>y.\n         if (x, y) \\<in> Dy_pair\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n               (x, y)\n         else 0)\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in> cbox a b \\<longrightarrow>\n       (\\<lambda>y.\n           if (x, y) \\<in> Dy_pair\n           then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n                 (x, y)\n           else 0) integrable_on\n       UNIV", "by auto"], ["proof (state)\nthis:\n  \\<forall>x.\n     x \\<in> cbox a b \\<longrightarrow>\n     (\\<lambda>y.\n         if (x, y) \\<in> Dy_pair\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n               (x, y)\n         else 0) integrable_on\n     UNIV\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<lambda>y.\n           if (x, y) \\<in> Dy_pair\n           then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n                 (x, y)\n           else 0) integrable_on\n       UNIV", "show \"(\\<lambda>y. ?f (x, y)) integrable_on UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>y.\n        if (x, y) \\<in> Dy_pair\n        then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n              (x, y)\n        else 0) integrable_on\n    UNIV", "using f_integrable_x_not_in_range and f_integrable_x_in_range"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     x \\<notin> cbox a b \\<longrightarrow>\n     (\\<lambda>y.\n         if (x, y) \\<in> Dy_pair\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n               (x, y)\n         else 0) integrable_on\n     UNIV\n  \\<forall>x.\n     x \\<in> cbox a b \\<longrightarrow>\n     (\\<lambda>y.\n         if (x, y) \\<in> Dy_pair\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n               (x, y)\n         else 0) integrable_on\n     UNIV\n\ngoal (1 subgoal):\n 1. (\\<lambda>y.\n        if (x, y) \\<in> Dy_pair\n        then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n              (x, y)\n        else 0) integrable_on\n    UNIV", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>y.\n      if (x, y) \\<in> Dy_pair\n      then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j (x, y)\n      else 0) integrable_on\n  UNIV\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>y.\n      if (?x2, y) \\<in> Dy_pair\n      then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n            (?x2, y)\n      else 0) integrable_on\n  UNIV\n\ngoal (1 subgoal):\n 1. integral Dy_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j) =\n    integral (cbox a b)\n     (\\<lambda>x.\n         integral (cbox (g2 x) (g1 x))\n          (\\<lambda>y.\n              partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n               (x, y)))", "have arg: \"(\\<lambda>a. if a \\<in> Dy_pair then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j a else 0) =\n               (\\<lambda>x. if x \\<in> Dy_pair then if x \\<in> Dy_pair then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x else 0 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a.\n        if a \\<in> Dy_pair\n        then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j a\n        else 0) =\n    (\\<lambda>x.\n        if x \\<in> Dy_pair\n        then if x \\<in> Dy_pair\n             then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n                   x\n             else 0\n        else 0)", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>a.\n      if a \\<in> Dy_pair\n      then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j a\n      else 0) =\n  (\\<lambda>x.\n      if x \\<in> Dy_pair\n      then if x \\<in> Dy_pair\n           then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x\n           else 0\n      else 0)\n\ngoal (1 subgoal):\n 1. integral Dy_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j) =\n    integral (cbox a b)\n     (\\<lambda>x.\n         integral (cbox (g2 x) (g1 x))\n          (\\<lambda>y.\n              partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n               (x, y)))", "have arg2: \"Dy_pair = {(x, y). (\\<forall>i\\<in>Basis. a \\<bullet> i \\<le> x \\<bullet> i \\<and> x \\<bullet> i \\<le> b \\<bullet> i) \\<and> (\\<forall>i\\<in>Basis. g2 x \\<bullet> i \\<le> y \\<bullet> i \\<and> y \\<bullet> i \\<le> g1 x \\<bullet> i)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Dy_pair =\n    {(x, y).\n     (\\<forall>i\\<in>Basis.\n         a \\<bullet> i \\<le> x \\<bullet> i \\<and>\n         x \\<bullet> i \\<le> b \\<bullet> i) \\<and>\n     (\\<forall>i\\<in>Basis.\n         g2 x \\<bullet> i \\<le> y \\<bullet> i \\<and>\n         y \\<bullet> i \\<le> g1 x \\<bullet> i)}", "using Dy_def"], ["proof (prove)\nusing this:\n  Dy_pair = {(x, y). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)}\n\ngoal (1 subgoal):\n 1. Dy_pair =\n    {(x, y).\n     (\\<forall>i\\<in>Basis.\n         a \\<bullet> i \\<le> x \\<bullet> i \\<and>\n         x \\<bullet> i \\<le> b \\<bullet> i) \\<and>\n     (\\<forall>i\\<in>Basis.\n         g2 x \\<bullet> i \\<le> y \\<bullet> i \\<and>\n         y \\<bullet> i \\<le> g1 x \\<bullet> i)}", "by auto"], ["proof (state)\nthis:\n  Dy_pair =\n  {(x, y).\n   (\\<forall>i\\<in>Basis.\n       a \\<bullet> i \\<le> x \\<bullet> i \\<and>\n       x \\<bullet> i \\<le> b \\<bullet> i) \\<and>\n   (\\<forall>i\\<in>Basis.\n       g2 x \\<bullet> i \\<le> y \\<bullet> i \\<and>\n       y \\<bullet> i \\<le> g1 x \\<bullet> i)}\n\ngoal (1 subgoal):\n 1. integral Dy_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j) =\n    integral (cbox a b)\n     (\\<lambda>x.\n         integral (cbox (g2 x) (g1 x))\n          (\\<lambda>y.\n              partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n               (x, y)))", "have arg3: \"\\<And> x. x \\<in> Dy_pair \\<Longrightarrow> (\\<lambda>x. if x \\<in> Dy_pair then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x else 0) x\n                           = (\\<lambda>x. partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Dy_pair \\<Longrightarrow>\n       (if x \\<in> Dy_pair\n        then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x\n        else 0) =\n       partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x", "by auto"], ["proof (state)\nthis:\n  ?x2 \\<in> Dy_pair \\<Longrightarrow>\n  (if ?x2 \\<in> Dy_pair\n   then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j ?x2\n   else 0) =\n  partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j ?x2\n\ngoal (1 subgoal):\n 1. integral Dy_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j) =\n    integral (cbox a b)\n     (\\<lambda>x.\n         integral (cbox (g2 x) (g1 x))\n          (\\<lambda>y.\n              partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n               (x, y)))", "have arg4: \"\\<And>x. x \\<in> (cbox a b) \\<Longrightarrow>\n                            (\\<lambda>x. integral (cbox (g2 x) (g1 x)) (\\<lambda>y. if (x, y) \\<in> Dy_pair then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j (x, y) else 0)) x =\n                                      (\\<lambda>x. integral (cbox (g2 x) (g1 x)) (\\<lambda>y. partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j (x, y))) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> cbox a b \\<Longrightarrow>\n       integral (cbox (g2 x) (g1 x))\n        (\\<lambda>y.\n            if (x, y) \\<in> Dy_pair\n            then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n                  (x, y)\n            else 0) =\n       integral (cbox (g2 x) (g1 x))\n        (\\<lambda>y.\n            partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n             (x, y))", "apply (simp add: Dy_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       a \\<le> x \\<and> x \\<le> b \\<Longrightarrow>\n       integral {g2 x..g1 x}\n        (\\<lambda>y.\n            if g2 x \\<le> y \\<and> y \\<le> g1 x\n            then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n                  (x, y)\n            else 0) =\n       integral {g2 x..g1 x}\n        (\\<lambda>y.\n            partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n             (x, y))", "by (smt Henstock_Kurzweil_Integration.integral_cong atLeastAtMost_iff)"], ["proof (state)\nthis:\n  ?x2 \\<in> cbox a b \\<Longrightarrow>\n  integral (cbox (g2 ?x2) (g1 ?x2))\n   (\\<lambda>y.\n       if (?x2, y) \\<in> Dy_pair\n       then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n             (?x2, y)\n       else 0) =\n  integral (cbox (g2 ?x2) (g1 ?x2))\n   (\\<lambda>y.\n       partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j (?x2, y))\n\ngoal (1 subgoal):\n 1. integral Dy_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j) =\n    integral (cbox a b)\n     (\\<lambda>x.\n         integral (cbox (g2 x) (g1 x))\n          (\\<lambda>y.\n              partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n               (x, y)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. integral Dy_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j) =\n    integral (cbox a b)\n     (\\<lambda>x.\n         integral (cbox (g2 x) (g1 x))\n          (\\<lambda>y.\n              partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n               (x, y)))", "using gauge_integral_Fubini_curve_bounded_region_x\n        [OF f_lesbegue_integrable x_axis_gauge_integrable x_axis_integral_measurable arg arg2]\n        Henstock_Kurzweil_Integration.integral_cong[OF arg3, of \"Dy_pair\" \"(\\<lambda>x. x)\"]\n        Henstock_Kurzweil_Integration.integral_cong[OF arg4, of \"cbox a b\" \"(\\<lambda>x. x)\"]"], ["proof (prove)\nusing this:\n  integral Dy_pair\n   (\\<lambda>x.\n       if x \\<in> Dy_pair\n       then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x\n       else 0) =\n  integral (cbox a b)\n   (\\<lambda>x.\n       integral (cbox (g2 x) (g1 x))\n        (\\<lambda>y.\n            if (x, y) \\<in> Dy_pair\n            then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n                  (x, y)\n            else 0))\n  (\\<And>x.\n      x \\<in> Dy_pair \\<Longrightarrow> x \\<in> Dy_pair) \\<Longrightarrow>\n  integral Dy_pair\n   (\\<lambda>x.\n       if x \\<in> Dy_pair\n       then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x\n       else 0) =\n  integral Dy_pair\n   (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j)\n  (\\<And>x.\n      x \\<in> cbox a b \\<Longrightarrow> x \\<in> cbox a b) \\<Longrightarrow>\n  integral (cbox a b)\n   (\\<lambda>x.\n       integral (cbox (g2 x) (g1 x))\n        (\\<lambda>y.\n            if (x, y) \\<in> Dy_pair\n            then partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n                  (x, y)\n            else 0)) =\n  integral (cbox a b)\n   (\\<lambda>x.\n       integral (cbox (g2 x) (g1 x))\n        (\\<lambda>y.\n            partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n             (x, y)))\n\ngoal (1 subgoal):\n 1. integral Dy_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j) =\n    integral (cbox a b)\n     (\\<lambda>x.\n         integral (cbox (g2 x) (g1 x))\n          (\\<lambda>y.\n              partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n               (x, y)))", "by auto"], ["proof (state)\nthis:\n  integral Dy_pair\n   (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j) =\n  integral (cbox a b)\n   (\\<lambda>x.\n       integral (cbox (g2 x) (g1 x))\n        (\\<lambda>y.\n            partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n             (x, y)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  integral Dy_pair\n   (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j) =\n  integral (cbox a b)\n   (\\<lambda>x.\n       integral (cbox (g2 x) (g1 x))\n        (\\<lambda>y.\n            partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n             (x, y)))\n\ngoal (1 subgoal):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)", "have 5: \"(integral Dy_pair (\\<lambda>a. (?F_b' a))\n        = integral (cbox a b) (\\<lambda>x. F(x, g1(x))  \\<bullet> i - F(x, g2(x))  \\<bullet> i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral Dy_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j) =\n    integral (cbox a b)\n     (\\<lambda>x. F (x, g1 x) \\<bullet> i - F (x, g2 x) \\<bullet> i)", "using 4 Henstock_Kurzweil_Integration.integral_cong partial_deriv_one_d_integrable integrable_def"], ["proof (prove)\nusing this:\n  integral Dy_pair\n   (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j) =\n  integral (cbox a b)\n   (\\<lambda>x.\n       integral (cbox (g2 x) (g1 x))\n        (\\<lambda>y.\n            partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n             (x, y)))\n  (\\<And>x. x \\<in> ?s \\<Longrightarrow> ?f x = ?g x) \\<Longrightarrow>\n  integral ?s ?f = integral ?s ?g\n  ?xc2 \\<in> cbox a b \\<Longrightarrow>\n  ((\\<lambda>y.\n       partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\n        (?xc2, y)) has_integral\n   F (?xc2, g1 ?xc2) \\<bullet> i - F (?xc2, g2 ?xc2) \\<bullet> i)\n   (cbox (g2 ?xc2) (g1 ?xc2))\n  integrable \\<equiv>\n  \\<lambda>M f. lfp (\\<lambda>p. \\<exists>x. has_bochner_integral M f x)\n\ngoal (1 subgoal):\n 1. integral Dy_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j) =\n    integral (cbox a b)\n     (\\<lambda>x. F (x, g1 x) \\<bullet> i - F (x, g2 x) \\<bullet> i)", "by (smt integral_unique)"], ["proof (state)\nthis:\n  integral Dy_pair\n   (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j) =\n  integral (cbox a b)\n   (\\<lambda>x. F (x, g1 x) \\<bullet> i - F (x, g2 x) \\<bullet> i)\n\ngoal (1 subgoal):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)", "show \"(line_integral F {i} gamma1) + (line_integral F {i} gamma2) -\n          (line_integral F {i} gamma3) - (line_integral F {i} gamma4)\n        = (integral Dy_pair (\\<lambda>a. - (?F_b' a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j a)", "using \"0\"(1) \"1\"(1) \"2\"(1) \"3\"(1) 5 \"6\" \"7\""], ["proof (prove)\nusing this:\n  line_integral F {i} gamma1 =\n  integral (cbox a b) (\\<lambda>x. F (x, g2 x) \\<bullet> i)\n  line_integral F {i} gamma2 = 0\n  line_integral F {i} gamma3 =\n  integral (cbox a b) (\\<lambda>x. F (x, g1 x) \\<bullet> i)\n  line_integral F {i} gamma4 = 0\n  integral Dy_pair\n   (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j) =\n  integral (cbox a b)\n   (\\<lambda>x. F (x, g1 x) \\<bullet> i - F (x, g2 x) \\<bullet> i)\n  (\\<lambda>x. F (x, g2 x) \\<bullet> i) integrable_on cbox a b\n  (\\<lambda>x. F (x, g1 x) \\<bullet> i) integrable_on cbox a b\n\ngoal (1 subgoal):\n 1. line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n    line_integral F {i} gamma3 -\n    line_integral F {i} gamma4 =\n    integral Dy_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j a)", "by (simp add: Henstock_Kurzweil_Integration.integral_diff)"], ["proof (state)\nthis:\n  line_integral F {i} gamma1 + line_integral F {i} gamma2 -\n  line_integral F {i} gamma3 -\n  line_integral F {i} gamma4 =\n  integral Dy_pair\n   (\\<lambda>a.\n       - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j a)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem Greens_thm_type_II:\n  fixes F:: \"((real*real) \\<Rightarrow> (real * real))\" and\n    gamma4 gamma3 gamma2 gamma1 :: \"(real \\<Rightarrow> (real * real))\" and\n    a:: \"real\" and b:: \"real\" and\n    g1:: \"(real \\<Rightarrow> real)\" and g2:: \"(real \\<Rightarrow> real)\"\n  assumes Dx_def: \"Dx_pair = {(x::real,y) . y \\<in> cbox a b \\<and> x \\<in> cbox (g2 y) (g1 y)}\" and\n    gamma4_def: \"gamma4 = (\\<lambda>x. (g2(a + (b - a) * x), a + (b - a) * x))\" and\n    gamma4_smooth: \"gamma4 piecewise_C1_differentiable_on {0..1}\" and (*TODO: This should be piecewise smooth*)\n    gamma3_def: \"gamma3 = (\\<lambda>x. (g2(b) + x  *\\<^sub>R (g1(b) - g2(b)), b))\" and\n    gamma2_def: \"gamma2 = (\\<lambda>x. (g1(a + (b - a) * x), a + (b - a) * x))\" and\n    gamma2_smooth: \"gamma2 piecewise_C1_differentiable_on {0..1}\" and\n    gamma1_def: \"gamma1 = (\\<lambda>x. (g2(a) + x *\\<^sub>R (g1(a) - g2(a)), a))\" and\n    F_j_analytically_valid: \"analytically_valid Dx_pair (\\<lambda>p. F(p) \\<bullet> j) i\" and\n    g2_leq_g1: \"\\<forall>x \\<in> cbox a b. (g2 x) \\<le> (g1 x)\" and (*This is needed otherwise what would Dy be?*)\n    a_lt_b: \"a < b\"\n  shows \"-(line_integral F {j} gamma4) -\n         (line_integral F {j} gamma3) +\n         (line_integral F {j} gamma2) +\n         (line_integral F {j} gamma1)\n                 = (integral Dx_pair (\\<lambda>a. (partial_vector_derivative (\\<lambda>a. (F a) \\<bullet> j)  i a)))\"\n    \"line_integral_exists F {j} gamma4\"\n    \"line_integral_exists F {j} gamma3\"\n    \"line_integral_exists F {j} gamma2\"\n    \"line_integral_exists F {j} gamma1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (- line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n     line_integral F {j} gamma2 +\n     line_integral F {j} gamma1 =\n     integral Dx_pair\n      (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) &&&\n     line_integral_exists F {j} gamma4) &&&\n    line_integral_exists F {j} gamma3 &&&\n    line_integral_exists F {j} gamma2 &&& line_integral_exists F {j} gamma1", "proof -"], ["proof (state)\ngoal (5 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma4\n 3. line_integral_exists F {j} gamma3\n 4. line_integral_exists F {j} gamma2\n 5. line_integral_exists F {j} gamma1", "let ?F_a' = \"partial_vector_derivative (\\<lambda>a. (F a) \\<bullet> j)  i\""], ["proof (state)\ngoal (5 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma4\n 3. line_integral_exists F {j} gamma3\n 4. line_integral_exists F {j} gamma2\n 5. line_integral_exists F {j} gamma1", "have F_first_is_continuous: \"continuous_on Dx_pair (\\<lambda>a. F(a) \\<bullet> j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on Dx_pair (\\<lambda>a. F a \\<bullet> j)", "using F_j_analytically_valid"], ["proof (prove)\nusing this:\n  analytically_valid Dx_pair (\\<lambda>p. F p \\<bullet> j) i\n\ngoal (1 subgoal):\n 1. continuous_on Dx_pair (\\<lambda>a. F a \\<bullet> j)", "by (auto simp add: analytically_valid_def)"], ["proof (state)\nthis:\n  continuous_on Dx_pair (\\<lambda>a. F a \\<bullet> j)\n\ngoal (5 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma4\n 3. line_integral_exists F {j} gamma3\n 4. line_integral_exists F {j} gamma2\n 5. line_integral_exists F {j} gamma1", "let ?f = \"(\\<lambda>x. if x \\<in> (Dx_pair) then (partial_vector_derivative (\\<lambda>a. (F a) \\<bullet> j)  i) x else 0)\""], ["proof (state)\ngoal (5 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma4\n 3. line_integral_exists F {j} gamma3\n 4. line_integral_exists F {j} gamma2\n 5. line_integral_exists F {j} gamma1", "have f_lesbegue_integrable: \"integrable lborel ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integrable lborel\n     (\\<lambda>x.\n         if x \\<in> Dx_pair\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x\n         else 0)", "using F_j_analytically_valid"], ["proof (prove)\nusing this:\n  analytically_valid Dx_pair (\\<lambda>p. F p \\<bullet> j) i\n\ngoal (1 subgoal):\n 1. integrable lborel\n     (\\<lambda>x.\n         if x \\<in> Dx_pair\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x\n         else 0)", "by (auto simp add: analytically_valid_def indic_ident)"], ["proof (state)\nthis:\n  integrable lborel\n   (\\<lambda>x.\n       if x \\<in> Dx_pair\n       then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x\n       else 0)\n\ngoal (5 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma4\n 3. line_integral_exists F {j} gamma3\n 4. line_integral_exists F {j} gamma2\n 5. line_integral_exists F {j} gamma1", "have partially_vec_diff: \"\\<forall>a \\<in> Dx_pair. partially_vector_differentiable (\\<lambda>a. (F a) \\<bullet> j) i a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>Dx_pair.\n       partially_vector_differentiable (\\<lambda>a. F a \\<bullet> j) i a", "using F_j_analytically_valid"], ["proof (prove)\nusing this:\n  analytically_valid Dx_pair (\\<lambda>p. F p \\<bullet> j) i\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>Dx_pair.\n       partially_vector_differentiable (\\<lambda>a. F a \\<bullet> j) i a", "by (auto simp add: analytically_valid_def indicator_def)"], ["proof (state)\nthis:\n  \\<forall>a\\<in>Dx_pair.\n     partially_vector_differentiable (\\<lambda>a. F a \\<bullet> j) i a\n\ngoal (5 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma4\n 3. line_integral_exists F {j} gamma3\n 4. line_integral_exists F {j} gamma2\n 5. line_integral_exists F {j} gamma1", "have \"\\<And>x y. ?F_a' (x,y) * indicator (Dx_pair) (x,y) = (\\<lambda>x. if x \\<in> (Dx_pair) then ?F_a' x else 0) (x,y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i (x, y) *\n       indicat_real Dx_pair (x, y) =\n       (if (x, y) \\<in> Dx_pair\n        then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n              (x, y)\n        else 0)", "using indic_ident[of \"?F_a'\"]"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x *\n      indicat_real ?s x) =\n  (\\<lambda>x.\n      if x \\<in> ?s\n      then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x\n      else 0)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i (x, y) *\n       indicat_real Dx_pair (x, y) =\n       (if (x, y) \\<in> Dx_pair\n        then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n              (x, y)\n        else 0)", "by auto"], ["proof (state)\nthis:\n  partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i (?x, ?y) *\n  indicat_real Dx_pair (?x, ?y) =\n  (if (?x, ?y) \\<in> Dx_pair\n   then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i (?x, ?y)\n   else 0)\n\ngoal (5 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma4\n 3. line_integral_exists F {j} gamma3\n 4. line_integral_exists F {j} gamma2\n 5. line_integral_exists F {j} gamma1", "then"], ["proof (chain)\npicking this:\n  partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i (?x, ?y) *\n  indicat_real Dx_pair (?x, ?y) =\n  (if (?x, ?y) \\<in> Dx_pair\n   then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i (?x, ?y)\n   else 0)", "have y_axis_integral_measurable: \"(\\<lambda>x. integral UNIV (\\<lambda>y. ?f(y, x))) \\<in> borel_measurable lborel\""], ["proof (prove)\nusing this:\n  partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i (?x, ?y) *\n  indicat_real Dx_pair (?x, ?y) =\n  (if (?x, ?y) \\<in> Dx_pair\n   then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i (?x, ?y)\n   else 0)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        integral UNIV\n         (\\<lambda>y.\n             if (y, x) \\<in> Dx_pair\n             then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n                   (y, x)\n             else 0))\n    \\<in> borel_measurable lborel", "using analytically_valid_y[OF F_j_analytically_valid]"], ["proof (prove)\nusing this:\n  partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i (?x, ?y) *\n  indicat_real Dx_pair (?x, ?y) =\n  (if (?x, ?y) \\<in> Dx_pair\n   then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i (?x, ?y)\n   else 0)\n  (\\<lambda>x.\n      integral UNIV\n       (\\<lambda>y.\n           partial_vector_derivative (\\<lambda>p. F p \\<bullet> j) i\n            (y, x) *\n           indicat_real Dx_pair (y, x)))\n  \\<in> borel_measurable lborel\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        integral UNIV\n         (\\<lambda>y.\n             if (y, x) \\<in> Dx_pair\n             then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n                   (y, x)\n             else 0))\n    \\<in> borel_measurable lborel", "by (auto simp add: indicator_def)"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      integral UNIV\n       (\\<lambda>y.\n           if (y, x) \\<in> Dx_pair\n           then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n                 (y, x)\n           else 0))\n  \\<in> borel_measurable lborel\n\ngoal (5 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma4\n 3. line_integral_exists F {j} gamma3\n 4. line_integral_exists F {j} gamma2\n 5. line_integral_exists F {j} gamma1", "have F_partially_differentiable: \"\\<forall>a\\<in>Dx_pair. has_partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> j) i (?F_a' a) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>Dx_pair.\n       has_partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i\n        (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i a) a", "using partial_vector_derivative_works partially_vec_diff"], ["proof (prove)\nusing this:\n  partially_vector_differentiable ?F ?base_vec ?a \\<Longrightarrow>\n  has_partial_vector_derivative ?F ?base_vec\n   (partial_vector_derivative ?F ?base_vec ?a) ?a\n  \\<forall>a\\<in>Dx_pair.\n     partially_vector_differentiable (\\<lambda>a. F a \\<bullet> j) i a\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>Dx_pair.\n       has_partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i\n        (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i a) a", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>a\\<in>Dx_pair.\n     has_partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i\n      (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i a) a\n\ngoal (5 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma4\n 3. line_integral_exists F {j} gamma3\n 4. line_integral_exists F {j} gamma2\n 5. line_integral_exists F {j} gamma1", "have g1_g2_continuous: \"continuous_on (cbox a b) g1\" \"continuous_on (cbox a b) g2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (cbox a b) g1 &&& continuous_on (cbox a b) g2", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. continuous_on (cbox a b) g1\n 2. continuous_on (cbox a b) g2", "have shift_scale_cont: \"continuous_on {a..b} (\\<lambda>x. (x - a)*(1/(b-a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on {a..b} (\\<lambda>x. (x - a) * (1 / (b - a)))", "by (intro continuous_intros)"], ["proof (state)\nthis:\n  continuous_on {a..b} (\\<lambda>x. (x - a) * (1 / (b - a)))\n\ngoal (2 subgoals):\n 1. continuous_on (cbox a b) g1\n 2. continuous_on (cbox a b) g2", "have shift_scale_inv: \"(\\<lambda>x. a + (b - a) * x) \\<circ> (\\<lambda>x. (x - a)*(1/(b-a))) = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. a + (b - a) * x) \\<circ>\n    (\\<lambda>x. (x - a) * (1 / (b - a))) =\n    id", "using a_lt_b"], ["proof (prove)\nusing this:\n  a < b\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. a + (b - a) * x) \\<circ>\n    (\\<lambda>x. (x - a) * (1 / (b - a))) =\n    id", "by (auto simp add: o_def)"], ["proof (state)\nthis:\n  (\\<lambda>x. a + (b - a) * x) \\<circ>\n  (\\<lambda>x. (x - a) * (1 / (b - a))) =\n  id\n\ngoal (2 subgoals):\n 1. continuous_on (cbox a b) g1\n 2. continuous_on (cbox a b) g2", "have img_shift_scale:\n      \"(\\<lambda>x. (x - a)*(1/(b-a)))`{a..b} = {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. (x - a) * (1 / (b - a))) ` {a..b} = {0..1}", "apply (auto simp: divide_simps image_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>0 \\<le> x; x \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>{a..b}.\n                            b \\<noteq> a \\<longrightarrow>\n                            x * (b - a) = xa - a\n 2. \\<And>x.\n       \\<lbrakk>0 \\<le> x; x \\<le> 1; b = a\\<rbrakk> \\<Longrightarrow> x = 0", "apply (rule_tac x=\"x * (b - a) + a\" in bexI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>0 \\<le> x; x \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> b \\<noteq> a \\<longrightarrow>\n                         x * (b - a) = x * (b - a) + a - a\n 2. \\<And>x.\n       \\<lbrakk>0 \\<le> x; x \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> x * (b - a) + a \\<in> {a..b}\n 3. \\<And>x.\n       \\<lbrakk>0 \\<le> x; x \\<le> 1; b = a\\<rbrakk> \\<Longrightarrow> x = 0", "using a_lt_b"], ["proof (prove)\nusing this:\n  a < b\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>0 \\<le> x; x \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> b \\<noteq> a \\<longrightarrow>\n                         x * (b - a) = x * (b - a) + a - a\n 2. \\<And>x.\n       \\<lbrakk>0 \\<le> x; x \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> x * (b - a) + a \\<in> {a..b}\n 3. \\<And>x.\n       \\<lbrakk>0 \\<le> x; x \\<le> 1; b = a\\<rbrakk> \\<Longrightarrow> x = 0", "by (auto simp: algebra_simps mult_le_cancel_left affine_ineq)"], ["proof (state)\nthis:\n  (\\<lambda>x. (x - a) * (1 / (b - a))) ` {a..b} = {0..1}\n\ngoal (2 subgoals):\n 1. continuous_on (cbox a b) g1\n 2. continuous_on (cbox a b) g2", "have \"continuous_on {0..1} (\\<lambda>x. g2(a + (b - a) * x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on {0..1} (\\<lambda>x. g2 (a + (b - a) * x))", "using continuous_on_inner[OF piecewise_C1_differentiable_on_imp_continuous_on[OF gamma4_smooth], of \"(\\<lambda>x. i)\", OF continuous_on_const]"], ["proof (prove)\nusing this:\n  continuous_on {0..1} (\\<lambda>x. gamma4 x \\<bullet> i)\n\ngoal (1 subgoal):\n 1. continuous_on {0..1} (\\<lambda>x. g2 (a + (b - a) * x))", "by (simp add: gamma4_def i_is_x_axis)"], ["proof (state)\nthis:\n  continuous_on {0..1} (\\<lambda>x. g2 (a + (b - a) * x))\n\ngoal (2 subgoals):\n 1. continuous_on (cbox a b) g1\n 2. continuous_on (cbox a b) g2", "then"], ["proof (chain)\npicking this:\n  continuous_on {0..1} (\\<lambda>x. g2 (a + (b - a) * x))", "have \"continuous_on {a..b} ((\\<lambda>x. g2(a + (b - a) * x)) \\<circ> (\\<lambda>x. (x - a)*(1/(b-a))))\""], ["proof (prove)\nusing this:\n  continuous_on {0..1} (\\<lambda>x. g2 (a + (b - a) * x))\n\ngoal (1 subgoal):\n 1. continuous_on {a..b}\n     ((\\<lambda>x. g2 (a + (b - a) * x)) \\<circ>\n      (\\<lambda>x. (x - a) * (1 / (b - a))))", "using img_shift_scale continuous_on_compose shift_scale_cont"], ["proof (prove)\nusing this:\n  continuous_on {0..1} (\\<lambda>x. g2 (a + (b - a) * x))\n  (\\<lambda>x. (x - a) * (1 / (b - a))) ` {a..b} = {0..1}\n  \\<lbrakk>continuous_on ?s ?f; continuous_on (?f ` ?s) ?g\\<rbrakk>\n  \\<Longrightarrow> continuous_on ?s (?g \\<circ> ?f)\n  continuous_on {a..b} (\\<lambda>x. (x - a) * (1 / (b - a)))\n\ngoal (1 subgoal):\n 1. continuous_on {a..b}\n     ((\\<lambda>x. g2 (a + (b - a) * x)) \\<circ>\n      (\\<lambda>x. (x - a) * (1 / (b - a))))", "by force"], ["proof (state)\nthis:\n  continuous_on {a..b}\n   ((\\<lambda>x. g2 (a + (b - a) * x)) \\<circ>\n    (\\<lambda>x. (x - a) * (1 / (b - a))))\n\ngoal (2 subgoals):\n 1. continuous_on (cbox a b) g1\n 2. continuous_on (cbox a b) g2", "then"], ["proof (chain)\npicking this:\n  continuous_on {a..b}\n   ((\\<lambda>x. g2 (a + (b - a) * x)) \\<circ>\n    (\\<lambda>x. (x - a) * (1 / (b - a))))", "show \"continuous_on (cbox a b) g2\""], ["proof (prove)\nusing this:\n  continuous_on {a..b}\n   ((\\<lambda>x. g2 (a + (b - a) * x)) \\<circ>\n    (\\<lambda>x. (x - a) * (1 / (b - a))))\n\ngoal (1 subgoal):\n 1. continuous_on (cbox a b) g2", "using a_lt_b"], ["proof (prove)\nusing this:\n  continuous_on {a..b}\n   ((\\<lambda>x. g2 (a + (b - a) * x)) \\<circ>\n    (\\<lambda>x. (x - a) * (1 / (b - a))))\n  a < b\n\ngoal (1 subgoal):\n 1. continuous_on (cbox a b) g2", "by (simp add: shift_scale_inv)"], ["proof (state)\nthis:\n  continuous_on (cbox a b) g2\n\ngoal (1 subgoal):\n 1. continuous_on (cbox a b) g1", "have \"continuous_on {0..1} (\\<lambda>x. g1(a + (b - a) * x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on {0..1} (\\<lambda>x. g1 (a + (b - a) * x))", "using continuous_on_inner[OF piecewise_C1_differentiable_on_imp_continuous_on[OF gamma2_smooth], of \"(\\<lambda>x. i)\", OF continuous_on_const]"], ["proof (prove)\nusing this:\n  continuous_on {0..1} (\\<lambda>x. gamma2 x \\<bullet> i)\n\ngoal (1 subgoal):\n 1. continuous_on {0..1} (\\<lambda>x. g1 (a + (b - a) * x))", "by (simp add: gamma2_def i_is_x_axis)"], ["proof (state)\nthis:\n  continuous_on {0..1} (\\<lambda>x. g1 (a + (b - a) * x))\n\ngoal (1 subgoal):\n 1. continuous_on (cbox a b) g1", "then"], ["proof (chain)\npicking this:\n  continuous_on {0..1} (\\<lambda>x. g1 (a + (b - a) * x))", "have \"continuous_on {a..b} ((\\<lambda>x. g1(a + (b - a) * x)) \\<circ> (\\<lambda>x. (x - a)*(1/(b-a))))\""], ["proof (prove)\nusing this:\n  continuous_on {0..1} (\\<lambda>x. g1 (a + (b - a) * x))\n\ngoal (1 subgoal):\n 1. continuous_on {a..b}\n     ((\\<lambda>x. g1 (a + (b - a) * x)) \\<circ>\n      (\\<lambda>x. (x - a) * (1 / (b - a))))", "using img_shift_scale continuous_on_compose shift_scale_cont"], ["proof (prove)\nusing this:\n  continuous_on {0..1} (\\<lambda>x. g1 (a + (b - a) * x))\n  (\\<lambda>x. (x - a) * (1 / (b - a))) ` {a..b} = {0..1}\n  \\<lbrakk>continuous_on ?s ?f; continuous_on (?f ` ?s) ?g\\<rbrakk>\n  \\<Longrightarrow> continuous_on ?s (?g \\<circ> ?f)\n  continuous_on {a..b} (\\<lambda>x. (x - a) * (1 / (b - a)))\n\ngoal (1 subgoal):\n 1. continuous_on {a..b}\n     ((\\<lambda>x. g1 (a + (b - a) * x)) \\<circ>\n      (\\<lambda>x. (x - a) * (1 / (b - a))))", "by force"], ["proof (state)\nthis:\n  continuous_on {a..b}\n   ((\\<lambda>x. g1 (a + (b - a) * x)) \\<circ>\n    (\\<lambda>x. (x - a) * (1 / (b - a))))\n\ngoal (1 subgoal):\n 1. continuous_on (cbox a b) g1", "then"], ["proof (chain)\npicking this:\n  continuous_on {a..b}\n   ((\\<lambda>x. g1 (a + (b - a) * x)) \\<circ>\n    (\\<lambda>x. (x - a) * (1 / (b - a))))", "show \"continuous_on (cbox a b) g1\""], ["proof (prove)\nusing this:\n  continuous_on {a..b}\n   ((\\<lambda>x. g1 (a + (b - a) * x)) \\<circ>\n    (\\<lambda>x. (x - a) * (1 / (b - a))))\n\ngoal (1 subgoal):\n 1. continuous_on (cbox a b) g1", "using a_lt_b"], ["proof (prove)\nusing this:\n  continuous_on {a..b}\n   ((\\<lambda>x. g1 (a + (b - a) * x)) \\<circ>\n    (\\<lambda>x. (x - a) * (1 / (b - a))))\n  a < b\n\ngoal (1 subgoal):\n 1. continuous_on (cbox a b) g1", "by (simp add: shift_scale_inv)"], ["proof (state)\nthis:\n  continuous_on (cbox a b) g1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  continuous_on (cbox a b) g1\n  continuous_on (cbox a b) g2\n\ngoal (5 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma4\n 3. line_integral_exists F {j} gamma3\n 4. line_integral_exists F {j} gamma2\n 5. line_integral_exists F {j} gamma1", "have g2_scale_i_contin: \"continuous_on (cbox a b) (\\<lambda>x. (g2 x, 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (cbox a b) (\\<lambda>x. (g2 x, 0::'a))", "by (intro continuous_intros g1_g2_continuous)"], ["proof (state)\nthis:\n  continuous_on (cbox a b) (\\<lambda>x. (g2 x, 0::?'a1))\n\ngoal (5 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma4\n 3. line_integral_exists F {j} gamma3\n 4. line_integral_exists F {j} gamma2\n 5. line_integral_exists F {j} gamma1", "let ?Dg2 =  \"{p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g2(x), x)}\""], ["proof (state)\ngoal (5 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma4\n 3. line_integral_exists F {j} gamma3\n 4. line_integral_exists F {j} gamma2\n 5. line_integral_exists F {j} gamma1", "have line_is_pair_img: \"?Dg2 = (\\<lambda>x. (g2(x), x) ) ` (cbox a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g2 x, x)} =\n    (\\<lambda>x. (g2 x, x)) ` cbox a b", "using image_def"], ["proof (prove)\nusing this:\n  ?f ` ?A = {y. \\<exists>x\\<in>?A. y = ?f x}\n\ngoal (1 subgoal):\n 1. {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g2 x, x)} =\n    (\\<lambda>x. (g2 x, x)) ` cbox a b", "by auto"], ["proof (state)\nthis:\n  {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g2 x, x)} =\n  (\\<lambda>x. (g2 x, x)) ` cbox a b\n\ngoal (5 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma4\n 3. line_integral_exists F {j} gamma3\n 4. line_integral_exists F {j} gamma2\n 5. line_integral_exists F {j} gamma1", "have g2_path_continuous: \"continuous_on (cbox a b) (\\<lambda>x. (g2(x), x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (cbox a b) (\\<lambda>x. (g2 x, x))", "by (intro continuous_intros g1_g2_continuous)"], ["proof (state)\nthis:\n  continuous_on (cbox a b) (\\<lambda>x. (g2 x, x))\n\ngoal (5 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma4\n 3. line_integral_exists F {j} gamma3\n 4. line_integral_exists F {j} gamma2\n 5. line_integral_exists F {j} gamma1", "have field_cont_on_gamma4_image: \"continuous_on ?Dg2 (\\<lambda>a. F(a) \\<bullet> j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g2 x, x)}\n     (\\<lambda>a. F a \\<bullet> j)", "by (rule continuous_on_subset [OF F_first_is_continuous]) (auto simp: Dx_def g2_leq_g1)"], ["proof (state)\nthis:\n  continuous_on {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g2 x, x)}\n   (\\<lambda>a. F a \\<bullet> j)\n\ngoal (5 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma4\n 3. line_integral_exists F {j} gamma3\n 4. line_integral_exists F {j} gamma2\n 5. line_integral_exists F {j} gamma1", "have gamma4_is_compos_of_scal_and_g2: \"gamma4 = (\\<lambda>x. (g2(x), x)) \\<circ> (\\<lambda>x. a + (b - a) * x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gamma4 = (\\<lambda>x. (g2 x, x)) \\<circ> (\\<lambda>x. a + (b - a) * x)", "using gamma4_def"], ["proof (prove)\nusing this:\n  gamma4 = (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x))\n\ngoal (1 subgoal):\n 1. gamma4 = (\\<lambda>x. (g2 x, x)) \\<circ> (\\<lambda>x. a + (b - a) * x)", "by auto"], ["proof (state)\nthis:\n  gamma4 = (\\<lambda>x. (g2 x, x)) \\<circ> (\\<lambda>x. a + (b - a) * x)\n\ngoal (5 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma4\n 3. line_integral_exists F {j} gamma3\n 4. line_integral_exists F {j} gamma2\n 5. line_integral_exists F {j} gamma1", "have add_scale_img:\n    \"(\\<lambda>x. a + (b - a) * x) ` {0 .. 1} = {a .. b}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}", "using add_scale_img and a_lt_b"], ["proof (prove)\nusing this:\n  ?a < ?b \\<Longrightarrow>\n  (\\<lambda>x. ?a + (?b - ?a) * x) ` {0..1} = {?a..?b}\n  a < b\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}\n\ngoal (5 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma4\n 3. line_integral_exists F {j} gamma3\n 4. line_integral_exists F {j} gamma2\n 5. line_integral_exists F {j} gamma1", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}", "have Dg2_is_gamma4_pathimg: \"path_image gamma4 = ?Dg2\""], ["proof (prove)\nusing this:\n  (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}\n\ngoal (1 subgoal):\n 1. path_image gamma4 =\n    {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g2 x, x)}", "using line_is_pair_img and gamma4_is_compos_of_scal_and_g2 image_comp path_image_def"], ["proof (prove)\nusing this:\n  (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}\n  {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g2 x, x)} =\n  (\\<lambda>x. (g2 x, x)) ` cbox a b\n  gamma4 = (\\<lambda>x. (g2 x, x)) \\<circ> (\\<lambda>x. a + (b - a) * x)\n  ?f ` ?g ` ?r = (?f \\<circ> ?g) ` ?r\n  path_image ?g = ?g ` {0..1}\n\ngoal (1 subgoal):\n 1. path_image gamma4 =\n    {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g2 x, x)}", "by (metis (no_types, lifting) cbox_interval)"], ["proof (state)\nthis:\n  path_image gamma4 = {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g2 x, x)}\n\ngoal (5 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma4\n 3. line_integral_exists F {j} gamma3\n 4. line_integral_exists F {j} gamma2\n 5. line_integral_exists F {j} gamma1", "have Base_vecs: \"i \\<in> Basis\" \"j \\<in> Basis\" \"i \\<noteq> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> Basis &&& j \\<in> Basis &&& i \\<noteq> j", "using real_pair_basis and i_is_x_axis and j_is_y_axis"], ["proof (prove)\nusing this:\n  Basis = {(1, 0), (0, 1)}\n  i = (1, 0)\n  j = (0, 1)\n\ngoal (1 subgoal):\n 1. i \\<in> Basis &&& j \\<in> Basis &&& i \\<noteq> j", "by auto"], ["proof (state)\nthis:\n  i \\<in> Basis\n  j \\<in> Basis\n  i \\<noteq> j\n\ngoal (5 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma4\n 3. line_integral_exists F {j} gamma3\n 4. line_integral_exists F {j} gamma2\n 5. line_integral_exists F {j} gamma1", "have gamma4_as_euclid_space_fun: \"gamma4 = (\\<lambda>x. (a + (b - a) * x) *\\<^sub>R j + (g2 (a + (b - a) * x), 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gamma4 =\n    (\\<lambda>x. (a + (b - a) * x) *\\<^sub>R j + (g2 (a + (b - a) * x), 0))", "using j_is_y_axis gamma4_def"], ["proof (prove)\nusing this:\n  j = (0, 1)\n  gamma4 = (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x))\n\ngoal (1 subgoal):\n 1. gamma4 =\n    (\\<lambda>x. (a + (b - a) * x) *\\<^sub>R j + (g2 (a + (b - a) * x), 0))", "by auto"], ["proof (state)\nthis:\n  gamma4 =\n  (\\<lambda>x. (a + (b - a) * x) *\\<^sub>R j + (g2 (a + (b - a) * x), 0))\n\ngoal (5 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma4\n 3. line_integral_exists F {j} gamma3\n 4. line_integral_exists F {j} gamma2\n 5. line_integral_exists F {j} gamma1", "have 0: \"(line_integral F {j} gamma4) = integral (cbox a b) (\\<lambda>x. F(g2(x), x) \\<bullet> j)\"\n          \"line_integral_exists F {j} gamma4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral F {j} gamma4 =\n    integral (cbox a b) (\\<lambda>x. F (g2 x, x) \\<bullet> j) &&&\n    line_integral_exists F {j} gamma4", "using line_integral_on_pair_path_strong [OF norm_Basis[OF Base_vecs(2)] _ gamma4_as_euclid_space_fun]\n      gamma4_def gamma4_smooth g2_scale_i_contin a_lt_b add_scale_img\n      Dg2_is_gamma4_pathimg and field_cont_on_gamma4_image"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>x. (g2 x, 0) \\<bullet> j = 0;\n   gamma4 piecewise_C1_differentiable_on {0..1};\n   continuous_on ((\\<lambda>x. a + (b - a) * x) ` {0..1})\n    (\\<lambda>a. (g2 a, 0));\n   pathstart gamma4 \\<bullet> j \\<le> pathfinish gamma4 \\<bullet> j;\n   continuous_on (path_image gamma4) (\\<lambda>x. ?F x \\<bullet> j)\\<rbrakk>\n  \\<Longrightarrow> line_integral ?F {j} gamma4 =\n                    integral\n                     (cbox (pathstart gamma4 \\<bullet> j)\n                       (pathfinish gamma4 \\<bullet> j))\n                     (\\<lambda>f_var.\n                         ?F (f_var *\\<^sub>R j + (g2 f_var, 0)) \\<bullet> j)\n  \\<lbrakk>\\<forall>x. (g2 x, 0) \\<bullet> j = 0;\n   gamma4 piecewise_C1_differentiable_on {0..1};\n   continuous_on ((\\<lambda>x. a + (b - a) * x) ` {0..1})\n    (\\<lambda>a. (g2 a, 0));\n   pathstart gamma4 \\<bullet> j \\<le> pathfinish gamma4 \\<bullet> j;\n   continuous_on (path_image gamma4) (\\<lambda>x. ?F x \\<bullet> j)\\<rbrakk>\n  \\<Longrightarrow> line_integral_exists ?F {j} gamma4\n  gamma4 = (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x))\n  gamma4 piecewise_C1_differentiable_on {0..1}\n  continuous_on (cbox a b) (\\<lambda>x. (g2 x, 0::?'a1))\n  a < b\n  (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}\n  path_image gamma4 = {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g2 x, x)}\n  continuous_on {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g2 x, x)}\n   (\\<lambda>a. F a \\<bullet> j)\n\ngoal (1 subgoal):\n 1. line_integral F {j} gamma4 =\n    integral (cbox a b) (\\<lambda>x. F (g2 x, x) \\<bullet> j) &&&\n    line_integral_exists F {j} gamma4", "by (auto simp: pathstart_def pathfinish_def j_is_y_axis)"], ["proof (state)\nthis:\n  line_integral F {j} gamma4 =\n  integral (cbox a b) (\\<lambda>x. F (g2 x, x) \\<bullet> j)\n  line_integral_exists F {j} gamma4\n\ngoal (5 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma4\n 3. line_integral_exists F {j} gamma3\n 4. line_integral_exists F {j} gamma2\n 5. line_integral_exists F {j} gamma1", "then"], ["proof (chain)\npicking this:\n  line_integral F {j} gamma4 =\n  integral (cbox a b) (\\<lambda>x. F (g2 x, x) \\<bullet> j)\n  line_integral_exists F {j} gamma4", "show \"line_integral_exists F {j} gamma4\""], ["proof (prove)\nusing this:\n  line_integral F {j} gamma4 =\n  integral (cbox a b) (\\<lambda>x. F (g2 x, x) \\<bullet> j)\n  line_integral_exists F {j} gamma4\n\ngoal (1 subgoal):\n 1. line_integral_exists F {j} gamma4", "by metis"], ["proof (state)\nthis:\n  line_integral_exists F {j} gamma4\n\ngoal (4 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma3\n 3. line_integral_exists F {j} gamma2\n 4. line_integral_exists F {j} gamma1", "have gamma3_y_const: \"\\<forall>x. gamma3 x \\<bullet> j = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. gamma3 x \\<bullet> j = b", "by (simp add: gamma3_def j_is_y_axis)"], ["proof (state)\nthis:\n  \\<forall>x. gamma3 x \\<bullet> j = b\n\ngoal (4 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma3\n 3. line_integral_exists F {j} gamma2\n 4. line_integral_exists F {j} gamma1", "have 1: \"(line_integral F {j} gamma3) = 0\" \"(line_integral_exists F {j} gamma3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral F {j} gamma3 = 0 &&& line_integral_exists F {j} gamma3", "using line_integral_on_pair_straight_path[OF gamma3_y_const] straight_path_diffrentiable_y gamma3_def"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>{0..1}. gamma3 differentiable at x \\<Longrightarrow>\n  line_integral ?F {j} gamma3 = 0\n  \\<forall>x\\<in>{0..1}. gamma3 differentiable at x \\<Longrightarrow>\n  line_integral_exists ?F {j} gamma3\n  ?\\<gamma> = (\\<lambda>x. (?y2.0 + ?y1.0 * x, ?b)) \\<Longrightarrow>\n  \\<forall>x. ?\\<gamma> differentiable at x\n  gamma3 = (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b))\n\ngoal (1 subgoal):\n 1. line_integral F {j} gamma3 = 0 &&& line_integral_exists F {j} gamma3", "by (auto simp add: mult.commute)"], ["proof (state)\nthis:\n  line_integral F {j} gamma3 = 0\n  line_integral_exists F {j} gamma3\n\ngoal (4 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma3\n 3. line_integral_exists F {j} gamma2\n 4. line_integral_exists F {j} gamma1", "then"], ["proof (chain)\npicking this:\n  line_integral F {j} gamma3 = 0\n  line_integral_exists F {j} gamma3", "show \"line_integral_exists F {j} gamma3\""], ["proof (prove)\nusing this:\n  line_integral F {j} gamma3 = 0\n  line_integral_exists F {j} gamma3\n\ngoal (1 subgoal):\n 1. line_integral_exists F {j} gamma3", "by auto"], ["proof (state)\nthis:\n  line_integral_exists F {j} gamma3\n\ngoal (3 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma2\n 3. line_integral_exists F {j} gamma1", "have \"continuous_on (cbox a b) (\\<lambda>x. F(g2(x), x) \\<bullet> j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (cbox a b) (\\<lambda>x. F (g2 x, x) \\<bullet> j)", "by (smt Collect_mono_iff continuous_on_compose2 continuous_on_eq field_cont_on_gamma4_image g2_path_continuous line_is_pair_img)"], ["proof (state)\nthis:\n  continuous_on (cbox a b) (\\<lambda>x. F (g2 x, x) \\<bullet> j)\n\ngoal (3 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma2\n 3. line_integral_exists F {j} gamma1", "then"], ["proof (chain)\npicking this:\n  continuous_on (cbox a b) (\\<lambda>x. F (g2 x, x) \\<bullet> j)", "have 6: \"(\\<lambda>x. F(g2(x), x)  \\<bullet> j) integrable_on (cbox a b)\""], ["proof (prove)\nusing this:\n  continuous_on (cbox a b) (\\<lambda>x. F (g2 x, x) \\<bullet> j)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. F (g2 x, x) \\<bullet> j) integrable_on cbox a b", "using integrable_continuous"], ["proof (prove)\nusing this:\n  continuous_on (cbox a b) (\\<lambda>x. F (g2 x, x) \\<bullet> j)\n  continuous_on (cbox ?a ?b) ?f \\<Longrightarrow>\n  ?f integrable_on cbox ?a ?b\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. F (g2 x, x) \\<bullet> j) integrable_on cbox a b", "by blast"], ["proof (state)\nthis:\n  (\\<lambda>x. F (g2 x, x) \\<bullet> j) integrable_on cbox a b\n\ngoal (3 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma2\n 3. line_integral_exists F {j} gamma1", "have g1_scale_i_contin: \"continuous_on (cbox a b) (\\<lambda>x. (g1 x, 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (cbox a b) (\\<lambda>x. (g1 x, 0::'a))", "by (intro continuous_intros g1_g2_continuous)"], ["proof (state)\nthis:\n  continuous_on (cbox a b) (\\<lambda>x. (g1 x, 0::?'a2))\n\ngoal (3 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma2\n 3. line_integral_exists F {j} gamma1", "let ?Dg1 =  \"{p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g1(x), x)}\""], ["proof (state)\ngoal (3 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma2\n 3. line_integral_exists F {j} gamma1", "have line_is_pair_img: \"?Dg1 = (\\<lambda>x. (g1(x), x) ) ` (cbox a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g1 x, x)} =\n    (\\<lambda>x. (g1 x, x)) ` cbox a b", "using image_def"], ["proof (prove)\nusing this:\n  ?f ` ?A = {y. \\<exists>x\\<in>?A. y = ?f x}\n\ngoal (1 subgoal):\n 1. {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g1 x, x)} =\n    (\\<lambda>x. (g1 x, x)) ` cbox a b", "by auto"], ["proof (state)\nthis:\n  {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g1 x, x)} =\n  (\\<lambda>x. (g1 x, x)) ` cbox a b\n\ngoal (3 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma2\n 3. line_integral_exists F {j} gamma1", "have g1_path_continuous: \"continuous_on (cbox a b) (\\<lambda>x. (g1(x), x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (cbox a b) (\\<lambda>x. (g1 x, x))", "by (intro continuous_intros g1_g2_continuous)"], ["proof (state)\nthis:\n  continuous_on (cbox a b) (\\<lambda>x. (g1 x, x))\n\ngoal (3 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma2\n 3. line_integral_exists F {j} gamma1", "have field_cont_on_gamma2_image: \"continuous_on ?Dg1  (\\<lambda>a. F(a) \\<bullet> j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g1 x, x)}\n     (\\<lambda>a. F a \\<bullet> j)", "by (rule continuous_on_subset [OF F_first_is_continuous]) (auto simp: Dx_def g2_leq_g1)"], ["proof (state)\nthis:\n  continuous_on {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g1 x, x)}\n   (\\<lambda>a. F a \\<bullet> j)\n\ngoal (3 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma2\n 3. line_integral_exists F {j} gamma1", "have \"gamma2 = (\\<lambda>x. (g1(x), x)) \\<circ> (\\<lambda>x. a + (b - a) * x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gamma2 = (\\<lambda>x. (g1 x, x)) \\<circ> (\\<lambda>x. a + (b - a) * x)", "using gamma2_def"], ["proof (prove)\nusing this:\n  gamma2 = (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x))\n\ngoal (1 subgoal):\n 1. gamma2 = (\\<lambda>x. (g1 x, x)) \\<circ> (\\<lambda>x. a + (b - a) * x)", "by auto"], ["proof (state)\nthis:\n  gamma2 = (\\<lambda>x. (g1 x, x)) \\<circ> (\\<lambda>x. a + (b - a) * x)\n\ngoal (3 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma2\n 3. line_integral_exists F {j} gamma1", "then"], ["proof (chain)\npicking this:\n  gamma2 = (\\<lambda>x. (g1 x, x)) \\<circ> (\\<lambda>x. a + (b - a) * x)", "have Dg1_is_gamma2_pathimg: \"path_image gamma2 = ?Dg1\""], ["proof (prove)\nusing this:\n  gamma2 = (\\<lambda>x. (g1 x, x)) \\<circ> (\\<lambda>x. a + (b - a) * x)\n\ngoal (1 subgoal):\n 1. path_image gamma2 =\n    {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g1 x, x)}", "using line_is_pair_img image_comp path_image_def add_scale_img"], ["proof (prove)\nusing this:\n  gamma2 = (\\<lambda>x. (g1 x, x)) \\<circ> (\\<lambda>x. a + (b - a) * x)\n  {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g1 x, x)} =\n  (\\<lambda>x. (g1 x, x)) ` cbox a b\n  ?f ` ?g ` ?r = (?f \\<circ> ?g) ` ?r\n  path_image ?g = ?g ` {0..1}\n  (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}\n\ngoal (1 subgoal):\n 1. path_image gamma2 =\n    {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g1 x, x)}", "by (metis (no_types, lifting) cbox_interval)"], ["proof (state)\nthis:\n  path_image gamma2 = {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g1 x, x)}\n\ngoal (3 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma2\n 3. line_integral_exists F {j} gamma1", "have Base_vecs: \"i \\<in> Basis\" \"j \\<in> Basis\" \"i \\<noteq> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> Basis &&& j \\<in> Basis &&& i \\<noteq> j", "using real_pair_basis and i_is_x_axis and j_is_y_axis"], ["proof (prove)\nusing this:\n  Basis = {(1, 0), (0, 1)}\n  i = (1, 0)\n  j = (0, 1)\n\ngoal (1 subgoal):\n 1. i \\<in> Basis &&& j \\<in> Basis &&& i \\<noteq> j", "by auto"], ["proof (state)\nthis:\n  i \\<in> Basis\n  j \\<in> Basis\n  i \\<noteq> j\n\ngoal (3 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma2\n 3. line_integral_exists F {j} gamma1", "have gamma2_as_euclid_space_fun: \"gamma2 = (\\<lambda>x. (a + (b - a) * x) *\\<^sub>R j + (g1 (a + (b - a) * x), 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gamma2 =\n    (\\<lambda>x. (a + (b - a) * x) *\\<^sub>R j + (g1 (a + (b - a) * x), 0))", "using j_is_y_axis gamma2_def"], ["proof (prove)\nusing this:\n  j = (0, 1)\n  gamma2 = (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x))\n\ngoal (1 subgoal):\n 1. gamma2 =\n    (\\<lambda>x. (a + (b - a) * x) *\\<^sub>R j + (g1 (a + (b - a) * x), 0))", "by auto"], ["proof (state)\nthis:\n  gamma2 =\n  (\\<lambda>x. (a + (b - a) * x) *\\<^sub>R j + (g1 (a + (b - a) * x), 0))\n\ngoal (3 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma2\n 3. line_integral_exists F {j} gamma1", "have 2: \"(line_integral F {j} gamma2) = integral (cbox a b) (\\<lambda>x. F(g1(x), x) \\<bullet> j)\"\n    \"(line_integral_exists F {j} gamma2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral F {j} gamma2 =\n    integral (cbox a b) (\\<lambda>x. F (g1 x, x) \\<bullet> j) &&&\n    line_integral_exists F {j} gamma2", "using line_integral_on_pair_path_strong [OF norm_Basis[OF Base_vecs(2)] _ gamma2_as_euclid_space_fun]\n      gamma2_def and gamma2_smooth and g1_scale_i_contin and a_lt_b and add_scale_img\n      Dg1_is_gamma2_pathimg and field_cont_on_gamma2_image"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>x. (g1 x, 0) \\<bullet> j = 0;\n   gamma2 piecewise_C1_differentiable_on {0..1};\n   continuous_on ((\\<lambda>x. a + (b - a) * x) ` {0..1})\n    (\\<lambda>a. (g1 a, 0));\n   pathstart gamma2 \\<bullet> j \\<le> pathfinish gamma2 \\<bullet> j;\n   continuous_on (path_image gamma2) (\\<lambda>x. ?F x \\<bullet> j)\\<rbrakk>\n  \\<Longrightarrow> line_integral ?F {j} gamma2 =\n                    integral\n                     (cbox (pathstart gamma2 \\<bullet> j)\n                       (pathfinish gamma2 \\<bullet> j))\n                     (\\<lambda>f_var.\n                         ?F (f_var *\\<^sub>R j + (g1 f_var, 0)) \\<bullet> j)\n  \\<lbrakk>\\<forall>x. (g1 x, 0) \\<bullet> j = 0;\n   gamma2 piecewise_C1_differentiable_on {0..1};\n   continuous_on ((\\<lambda>x. a + (b - a) * x) ` {0..1})\n    (\\<lambda>a. (g1 a, 0));\n   pathstart gamma2 \\<bullet> j \\<le> pathfinish gamma2 \\<bullet> j;\n   continuous_on (path_image gamma2) (\\<lambda>x. ?F x \\<bullet> j)\\<rbrakk>\n  \\<Longrightarrow> line_integral_exists ?F {j} gamma2\n  gamma2 = (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x))\n  gamma2 piecewise_C1_differentiable_on {0..1}\n  continuous_on (cbox a b) (\\<lambda>x. (g1 x, 0::?'a2))\n  a < b\n  (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}\n  path_image gamma2 = {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g1 x, x)}\n  continuous_on {p. \\<exists>x. x \\<in> cbox a b \\<and> p = (g1 x, x)}\n   (\\<lambda>a. F a \\<bullet> j)\n\ngoal (1 subgoal):\n 1. line_integral F {j} gamma2 =\n    integral (cbox a b) (\\<lambda>x. F (g1 x, x) \\<bullet> j) &&&\n    line_integral_exists F {j} gamma2", "by (auto simp: pathstart_def pathfinish_def j_is_y_axis)"], ["proof (state)\nthis:\n  line_integral F {j} gamma2 =\n  integral (cbox a b) (\\<lambda>x. F (g1 x, x) \\<bullet> j)\n  line_integral_exists F {j} gamma2\n\ngoal (3 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma2\n 3. line_integral_exists F {j} gamma1", "then"], ["proof (chain)\npicking this:\n  line_integral F {j} gamma2 =\n  integral (cbox a b) (\\<lambda>x. F (g1 x, x) \\<bullet> j)\n  line_integral_exists F {j} gamma2", "show \"line_integral_exists F {j} gamma2\""], ["proof (prove)\nusing this:\n  line_integral F {j} gamma2 =\n  integral (cbox a b) (\\<lambda>x. F (g1 x, x) \\<bullet> j)\n  line_integral_exists F {j} gamma2\n\ngoal (1 subgoal):\n 1. line_integral_exists F {j} gamma2", "by metis"], ["proof (state)\nthis:\n  line_integral_exists F {j} gamma2\n\ngoal (2 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma1", "have gamma1_y_const: \"\\<forall>x. gamma1 x \\<bullet> j = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. gamma1 x \\<bullet> j = a", "using gamma1_def"], ["proof (prove)\nusing this:\n  gamma1 = (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))\n\ngoal (1 subgoal):\n 1. \\<forall>x. gamma1 x \\<bullet> j = a", "by (auto simp add: real_inner_class.inner_add_left\n        euclidean_space_class.inner_not_same_Basis j_is_y_axis)"], ["proof (state)\nthis:\n  \\<forall>x. gamma1 x \\<bullet> j = a\n\ngoal (2 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma1", "have 3: \"(line_integral F {j} gamma1) = 0\" \"(line_integral_exists F {j} gamma1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral F {j} gamma1 = 0 &&& line_integral_exists F {j} gamma1", "using line_integral_on_pair_straight_path[OF gamma1_y_const] straight_path_diffrentiable_y gamma1_def"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>{0..1}. gamma1 differentiable at x \\<Longrightarrow>\n  line_integral ?F {j} gamma1 = 0\n  \\<forall>x\\<in>{0..1}. gamma1 differentiable at x \\<Longrightarrow>\n  line_integral_exists ?F {j} gamma1\n  ?\\<gamma> = (\\<lambda>x. (?y2.0 + ?y1.0 * x, ?b)) \\<Longrightarrow>\n  \\<forall>x. ?\\<gamma> differentiable at x\n  gamma1 = (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))\n\ngoal (1 subgoal):\n 1. line_integral F {j} gamma1 = 0 &&& line_integral_exists F {j} gamma1", "by (auto simp add: mult.commute)"], ["proof (state)\nthis:\n  line_integral F {j} gamma1 = 0\n  line_integral_exists F {j} gamma1\n\ngoal (2 subgoals):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n 2. line_integral_exists F {j} gamma1", "then"], ["proof (chain)\npicking this:\n  line_integral F {j} gamma1 = 0\n  line_integral_exists F {j} gamma1", "show \"line_integral_exists F {j} gamma1\""], ["proof (prove)\nusing this:\n  line_integral F {j} gamma1 = 0\n  line_integral_exists F {j} gamma1\n\ngoal (1 subgoal):\n 1. line_integral_exists F {j} gamma1", "by auto"], ["proof (state)\nthis:\n  line_integral_exists F {j} gamma1\n\ngoal (1 subgoal):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)", "have \"continuous_on (cbox a b) (\\<lambda>x. F(g1(x), x) \\<bullet> j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (cbox a b) (\\<lambda>x. F (g1 x, x) \\<bullet> j)", "by (smt Collect_mono_iff continuous_on_compose2 continuous_on_eq field_cont_on_gamma2_image g1_path_continuous line_is_pair_img)"], ["proof (state)\nthis:\n  continuous_on (cbox a b) (\\<lambda>x. F (g1 x, x) \\<bullet> j)\n\ngoal (1 subgoal):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)", "then"], ["proof (chain)\npicking this:\n  continuous_on (cbox a b) (\\<lambda>x. F (g1 x, x) \\<bullet> j)", "have 7: \"(\\<lambda>x. F(g1(x), x) \\<bullet> j) integrable_on (cbox a b)\""], ["proof (prove)\nusing this:\n  continuous_on (cbox a b) (\\<lambda>x. F (g1 x, x) \\<bullet> j)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. F (g1 x, x) \\<bullet> j) integrable_on cbox a b", "using integrable_continuous [of \"a\" \"b\" \"(\\<lambda>x. F(g1(x), x) \\<bullet> j)\"]"], ["proof (prove)\nusing this:\n  continuous_on (cbox a b) (\\<lambda>x. F (g1 x, x) \\<bullet> j)\n  continuous_on (cbox a b)\n   (\\<lambda>x. F (g1 x, x) \\<bullet> j) \\<Longrightarrow>\n  (\\<lambda>x. F (g1 x, x) \\<bullet> j) integrable_on cbox a b\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. F (g1 x, x) \\<bullet> j) integrable_on cbox a b", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. F (g1 x, x) \\<bullet> j) integrable_on cbox a b\n\ngoal (1 subgoal):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)", "have partial_deriv_one_d_integrable:\n    \"((\\<lambda>y. ?F_a'(y, xc)) has_integral F(g1(xc), xc) \\<bullet> j - F(g2(xc), xc) \\<bullet> j) (cbox (g2 xc) (g1 xc))\"\n    if \"xc \\<in> cbox a b\" for xc::real"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>y.\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n          (y, xc)) has_integral\n     F (g1 xc, xc) \\<bullet> j - F (g2 xc, xc) \\<bullet> j)\n     (cbox (g2 xc) (g1 xc))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>y.\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n          (y, xc)) has_integral\n     F (g1 xc, xc) \\<bullet> j - F (g2 xc, xc) \\<bullet> j)\n     (cbox (g2 xc) (g1 xc))", "have \"{(y, xc').  y \\<in> cbox (g2 xc) (g1 xc) \\<and> xc' = xc} \\<subseteq> Dx_pair\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(y, xc'). y \\<in> cbox (g2 xc) (g1 xc) \\<and> xc' = xc}\n    \\<subseteq> Dx_pair", "using that"], ["proof (prove)\nusing this:\n  xc \\<in> cbox a b\n\ngoal (1 subgoal):\n 1. {(y, xc'). y \\<in> cbox (g2 xc) (g1 xc) \\<and> xc' = xc}\n    \\<subseteq> Dx_pair", "by (auto simp add: Dx_def)"], ["proof (state)\nthis:\n  {(y, xc'). y \\<in> cbox (g2 xc) (g1 xc) \\<and> xc' = xc}\n  \\<subseteq> Dx_pair\n\ngoal (1 subgoal):\n 1. ((\\<lambda>y.\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n          (y, xc)) has_integral\n     F (g1 xc, xc) \\<bullet> j - F (g2 xc, xc) \\<bullet> j)\n     (cbox (g2 xc) (g1 xc))", "then"], ["proof (chain)\npicking this:\n  {(y, xc'). y \\<in> cbox (g2 xc) (g1 xc) \\<and> xc' = xc}\n  \\<subseteq> Dx_pair", "show ?thesis"], ["proof (prove)\nusing this:\n  {(y, xc'). y \\<in> cbox (g2 xc) (g1 xc) \\<and> xc' = xc}\n  \\<subseteq> Dx_pair\n\ngoal (1 subgoal):\n 1. ((\\<lambda>y.\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n          (y, xc)) has_integral\n     F (g1 xc, xc) \\<bullet> j - F (g2 xc, xc) \\<bullet> j)\n     (cbox (g2 xc) (g1 xc))", "using that and Base_vecs and F_partially_differentiable\n        and Dx_def [symmetric] and g2_leq_g1\n        and fundamental_theorem_of_calculus_partial_vector\n        [of \"g2 xc\" \"g1 xc\" \"i\" \"j\" \"xc *\\<^sub>R j\" \"Dx_pair\" \"F\" \"?F_a'\" ]"], ["proof (prove)\nusing this:\n  {(y, xc'). y \\<in> cbox (g2 xc) (g1 xc) \\<and> xc' = xc}\n  \\<subseteq> Dx_pair\n  xc \\<in> cbox a b\n  i \\<in> Basis\n  j \\<in> Basis\n  i \\<noteq> j\n  \\<forall>a\\<in>Dx_pair.\n     has_partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i\n      (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i a) a\n  {(x, y). y \\<in> cbox a b \\<and> x \\<in> cbox (g2 y) (g1 y)} = Dx_pair\n  \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x\n  \\<lbrakk>g2 xc \\<le> g1 xc; i \\<in> Basis; j \\<in> Basis;\n   xc *\\<^sub>R j \\<bullet> i = 0;\n   \\<forall>p\\<in>Dx_pair.\n      has_partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i\n       (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i p) p;\n   {x *\\<^sub>R i + xc *\\<^sub>R j |x. g2 xc \\<le> x \\<and> x \\<le> g1 xc}\n   \\<subseteq> Dx_pair\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x.\n                         partial_vector_derivative\n                          (\\<lambda>a. F a \\<bullet> j) i\n                          (x *\\<^sub>R i + xc *\\<^sub>R j)) has_integral\n                     F (g1 xc *\\<^sub>R i + xc *\\<^sub>R j) \\<bullet> j -\n                     F (g2 xc *\\<^sub>R i + xc *\\<^sub>R j) \\<bullet> j)\n                     (cbox (g2 xc) (g1 xc))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>y.\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n          (y, xc)) has_integral\n     F (g1 xc, xc) \\<bullet> j - F (g2 xc, xc) \\<bullet> j)\n     (cbox (g2 xc) (g1 xc))", "by (auto simp add:  Groups.ab_semigroup_add_class.add.commute i_is_x_axis j_is_y_axis)"], ["proof (state)\nthis:\n  ((\\<lambda>y.\n       partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n        (y, xc)) has_integral\n   F (g1 xc, xc) \\<bullet> j - F (g2 xc, xc) \\<bullet> j)\n   (cbox (g2 xc) (g1 xc))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?xc2 \\<in> cbox a b \\<Longrightarrow>\n  ((\\<lambda>y.\n       partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n        (y, ?xc2)) has_integral\n   F (g1 ?xc2, ?xc2) \\<bullet> j - F (g2 ?xc2, ?xc2) \\<bullet> j)\n   (cbox (g2 ?xc2) (g1 ?xc2))\n\ngoal (1 subgoal):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)", "have \"?f integrable_on UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        if x \\<in> Dx_pair\n        then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x\n        else 0) integrable_on\n    UNIV", "by (simp add: f_lesbegue_integrable integrable_on_lborel)"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      if x \\<in> Dx_pair\n      then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x\n      else 0) integrable_on\n  UNIV\n\ngoal (1 subgoal):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x.\n      if x \\<in> Dx_pair\n      then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x\n      else 0) integrable_on\n  UNIV", "have partial_deriv_integrable: \"?F_a' integrable_on Dx_pair\""], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      if x \\<in> Dx_pair\n      then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x\n      else 0) integrable_on\n  UNIV\n\ngoal (1 subgoal):\n 1. partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i integrable_on\n    Dx_pair", "using integrable_restrict_UNIV"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      if x \\<in> Dx_pair\n      then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x\n      else 0) integrable_on\n  UNIV\n  ((\\<lambda>x. if x \\<in> ?s then ?f x else (0::?'a)) integrable_on UNIV) =\n  (?f integrable_on ?s)\n\ngoal (1 subgoal):\n 1. partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i integrable_on\n    Dx_pair", "by auto"], ["proof (state)\nthis:\n  partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i integrable_on\n  Dx_pair\n\ngoal (1 subgoal):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)", "have 4: \"integral Dx_pair ?F_a' = integral (cbox a b) (\\<lambda>x. integral (cbox (g2 x) (g1 x)) (\\<lambda>y. ?F_a' (y, x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) =\n    integral (cbox a b)\n     (\\<lambda>x.\n         integral (cbox (g2 x) (g1 x))\n          (\\<lambda>y.\n              partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n               (y, x)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) =\n    integral (cbox a b)\n     (\\<lambda>x.\n         integral (cbox (g2 x) (g1 x))\n          (\\<lambda>y.\n              partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n               (y, x)))", "have y_axis_gauge_integrable: \"(\\<lambda>y. ?f(y, x)) integrable_on UNIV\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>y.\n        if (y, x) \\<in> Dx_pair\n        then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n              (y, x)\n        else 0) integrable_on\n    UNIV", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>y.\n        if (y, x) \\<in> Dx_pair\n        then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n              (y, x)\n        else 0) integrable_on\n    UNIV", "let ?F_a'_oneD = \"(\\<lambda>x. (\\<lambda>y. if y \\<in> (cbox (g2 x) ( g1 x)) then ?F_a' (y, x) else 0))\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>y.\n        if (y, x) \\<in> Dx_pair\n        then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n              (y, x)\n        else 0) integrable_on\n    UNIV", "have \"\\<forall>x. x \\<notin> cbox a b \\<longrightarrow>  (\\<lambda>y. ?f (y, x)) = (\\<lambda>y. 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<notin> cbox a b \\<longrightarrow>\n       (\\<lambda>y.\n           if (y, x) \\<in> Dx_pair\n           then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n                 (y, x)\n           else 0) =\n       (\\<lambda>y. 0)", "by (auto simp add: Dx_def)"], ["proof (state)\nthis:\n  \\<forall>x.\n     x \\<notin> cbox a b \\<longrightarrow>\n     (\\<lambda>y.\n         if (y, x) \\<in> Dx_pair\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n               (y, x)\n         else 0) =\n     (\\<lambda>y. 0)\n\ngoal (1 subgoal):\n 1. (\\<lambda>y.\n        if (y, x) \\<in> Dx_pair\n        then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n              (y, x)\n        else 0) integrable_on\n    UNIV", "then"], ["proof (chain)\npicking this:\n  \\<forall>x.\n     x \\<notin> cbox a b \\<longrightarrow>\n     (\\<lambda>y.\n         if (y, x) \\<in> Dx_pair\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n               (y, x)\n         else 0) =\n     (\\<lambda>y. 0)", "have f_integrable_x_not_in_range:\n        \"\\<forall>x. x \\<notin> cbox a b \\<longrightarrow>  (\\<lambda>y. ?f (y, x)) integrable_on UNIV\""], ["proof (prove)\nusing this:\n  \\<forall>x.\n     x \\<notin> cbox a b \\<longrightarrow>\n     (\\<lambda>y.\n         if (y, x) \\<in> Dx_pair\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n               (y, x)\n         else 0) =\n     (\\<lambda>y. 0)\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<notin> cbox a b \\<longrightarrow>\n       (\\<lambda>y.\n           if (y, x) \\<in> Dx_pair\n           then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n                 (y, x)\n           else 0) integrable_on\n       UNIV", "by (simp add: integrable_0)"], ["proof (state)\nthis:\n  \\<forall>x.\n     x \\<notin> cbox a b \\<longrightarrow>\n     (\\<lambda>y.\n         if (y, x) \\<in> Dx_pair\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n               (y, x)\n         else 0) integrable_on\n     UNIV\n\ngoal (1 subgoal):\n 1. (\\<lambda>y.\n        if (y, x) \\<in> Dx_pair\n        then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n              (y, x)\n        else 0) integrable_on\n    UNIV", "have \"\\<forall>x \\<in> cbox a b. ?F_a'_oneD x = (\\<lambda>y. ?f(y, x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>cbox a b.\n       (\\<lambda>y.\n           if y \\<in> cbox (g2 x) (g1 x)\n           then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n                 (y, x)\n           else 0) =\n       (\\<lambda>y.\n           if (y, x) \\<in> Dx_pair\n           then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n                 (y, x)\n           else 0)", "using g2_leq_g1"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>cbox a b.\n       (\\<lambda>y.\n           if y \\<in> cbox (g2 x) (g1 x)\n           then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n                 (y, x)\n           else 0) =\n       (\\<lambda>y.\n           if (y, x) \\<in> Dx_pair\n           then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n                 (y, x)\n           else 0)", "by (auto simp add: Dx_def)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>cbox a b.\n     (\\<lambda>y.\n         if y \\<in> cbox (g2 x) (g1 x)\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n               (y, x)\n         else 0) =\n     (\\<lambda>y.\n         if (y, x) \\<in> Dx_pair\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n               (y, x)\n         else 0)\n\ngoal (1 subgoal):\n 1. (\\<lambda>y.\n        if (y, x) \\<in> Dx_pair\n        then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n              (y, x)\n        else 0) integrable_on\n    UNIV", "moreover"], ["proof (state)\nthis:\n  \\<forall>x\\<in>cbox a b.\n     (\\<lambda>y.\n         if y \\<in> cbox (g2 x) (g1 x)\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n               (y, x)\n         else 0) =\n     (\\<lambda>y.\n         if (y, x) \\<in> Dx_pair\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n               (y, x)\n         else 0)\n\ngoal (1 subgoal):\n 1. (\\<lambda>y.\n        if (y, x) \\<in> Dx_pair\n        then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n              (y, x)\n        else 0) integrable_on\n    UNIV", "have \"\\<forall>x \\<in> cbox a b. ?F_a'_oneD x integrable_on UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>cbox a b.\n       (\\<lambda>y.\n           if y \\<in> cbox (g2 x) (g1 x)\n           then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n                 (y, x)\n           else 0) integrable_on\n       UNIV", "using has_integral_integrable integrable_restrict_UNIV partial_deriv_one_d_integrable"], ["proof (prove)\nusing this:\n  (?f has_integral ?i) ?s \\<Longrightarrow> ?f integrable_on ?s\n  ((\\<lambda>x. if x \\<in> ?s then ?f x else (0::?'a)) integrable_on UNIV) =\n  (?f integrable_on ?s)\n  ?xc2 \\<in> cbox a b \\<Longrightarrow>\n  ((\\<lambda>y.\n       partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n        (y, ?xc2)) has_integral\n   F (g1 ?xc2, ?xc2) \\<bullet> j - F (g2 ?xc2, ?xc2) \\<bullet> j)\n   (cbox (g2 ?xc2) (g1 ?xc2))\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>cbox a b.\n       (\\<lambda>y.\n           if y \\<in> cbox (g2 x) (g1 x)\n           then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n                 (y, x)\n           else 0) integrable_on\n       UNIV", "by blast"], ["proof (state)\nthis:\n  \\<forall>x\\<in>cbox a b.\n     (\\<lambda>y.\n         if y \\<in> cbox (g2 x) (g1 x)\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n               (y, x)\n         else 0) integrable_on\n     UNIV\n\ngoal (1 subgoal):\n 1. (\\<lambda>y.\n        if (y, x) \\<in> Dx_pair\n        then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n              (y, x)\n        else 0) integrable_on\n    UNIV", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>cbox a b.\n     (\\<lambda>y.\n         if y \\<in> cbox (g2 x) (g1 x)\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n               (y, x)\n         else 0) =\n     (\\<lambda>y.\n         if (y, x) \\<in> Dx_pair\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n               (y, x)\n         else 0)\n  \\<forall>x\\<in>cbox a b.\n     (\\<lambda>y.\n         if y \\<in> cbox (g2 x) (g1 x)\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n               (y, x)\n         else 0) integrable_on\n     UNIV", "have \"\\<forall>x. x \\<in> cbox a b \\<longrightarrow>  (\\<lambda>y. ?f (y, x)) integrable_on UNIV\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>cbox a b.\n     (\\<lambda>y.\n         if y \\<in> cbox (g2 x) (g1 x)\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n               (y, x)\n         else 0) =\n     (\\<lambda>y.\n         if (y, x) \\<in> Dx_pair\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n               (y, x)\n         else 0)\n  \\<forall>x\\<in>cbox a b.\n     (\\<lambda>y.\n         if y \\<in> cbox (g2 x) (g1 x)\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n               (y, x)\n         else 0) integrable_on\n     UNIV\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in> cbox a b \\<longrightarrow>\n       (\\<lambda>y.\n           if (y, x) \\<in> Dx_pair\n           then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n                 (y, x)\n           else 0) integrable_on\n       UNIV", "by auto"], ["proof (state)\nthis:\n  \\<forall>x.\n     x \\<in> cbox a b \\<longrightarrow>\n     (\\<lambda>y.\n         if (y, x) \\<in> Dx_pair\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n               (y, x)\n         else 0) integrable_on\n     UNIV\n\ngoal (1 subgoal):\n 1. (\\<lambda>y.\n        if (y, x) \\<in> Dx_pair\n        then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n              (y, x)\n        else 0) integrable_on\n    UNIV", "then"], ["proof (chain)\npicking this:\n  \\<forall>x.\n     x \\<in> cbox a b \\<longrightarrow>\n     (\\<lambda>y.\n         if (y, x) \\<in> Dx_pair\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n               (y, x)\n         else 0) integrable_on\n     UNIV", "show \"(\\<lambda>y. ?f (y, x)) integrable_on UNIV\""], ["proof (prove)\nusing this:\n  \\<forall>x.\n     x \\<in> cbox a b \\<longrightarrow>\n     (\\<lambda>y.\n         if (y, x) \\<in> Dx_pair\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n               (y, x)\n         else 0) integrable_on\n     UNIV\n\ngoal (1 subgoal):\n 1. (\\<lambda>y.\n        if (y, x) \\<in> Dx_pair\n        then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n              (y, x)\n        else 0) integrable_on\n    UNIV", "using f_integrable_x_not_in_range"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     x \\<in> cbox a b \\<longrightarrow>\n     (\\<lambda>y.\n         if (y, x) \\<in> Dx_pair\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n               (y, x)\n         else 0) integrable_on\n     UNIV\n  \\<forall>x.\n     x \\<notin> cbox a b \\<longrightarrow>\n     (\\<lambda>y.\n         if (y, x) \\<in> Dx_pair\n         then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n               (y, x)\n         else 0) integrable_on\n     UNIV\n\ngoal (1 subgoal):\n 1. (\\<lambda>y.\n        if (y, x) \\<in> Dx_pair\n        then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n              (y, x)\n        else 0) integrable_on\n    UNIV", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>y.\n      if (y, x) \\<in> Dx_pair\n      then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i (y, x)\n      else 0) integrable_on\n  UNIV\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>y.\n      if (y, ?x2) \\<in> Dx_pair\n      then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n            (y, ?x2)\n      else 0) integrable_on\n  UNIV\n\ngoal (1 subgoal):\n 1. integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) =\n    integral (cbox a b)\n     (\\<lambda>x.\n         integral (cbox (g2 x) (g1 x))\n          (\\<lambda>y.\n              partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n               (y, x)))", "have arg: \"(\\<lambda>a. if a \\<in> Dx_pair then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i a else 0) =\n               (\\<lambda>x. if x \\<in> Dx_pair then if x \\<in> Dx_pair then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x else 0 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a.\n        if a \\<in> Dx_pair\n        then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i a\n        else 0) =\n    (\\<lambda>x.\n        if x \\<in> Dx_pair\n        then if x \\<in> Dx_pair\n             then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n                   x\n             else 0\n        else 0)", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>a.\n      if a \\<in> Dx_pair\n      then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i a\n      else 0) =\n  (\\<lambda>x.\n      if x \\<in> Dx_pair\n      then if x \\<in> Dx_pair\n           then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x\n           else 0\n      else 0)\n\ngoal (1 subgoal):\n 1. integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) =\n    integral (cbox a b)\n     (\\<lambda>x.\n         integral (cbox (g2 x) (g1 x))\n          (\\<lambda>y.\n              partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n               (y, x)))", "have arg2: \"Dx_pair = {(y, x). (\\<forall>i\\<in>Basis. a \\<bullet> i \\<le> x \\<bullet> i \\<and> x \\<bullet> i \\<le> b \\<bullet> i) \\<and> (\\<forall>i\\<in>Basis. g2 x \\<bullet> i \\<le> y \\<bullet> i \\<and> y \\<bullet> i \\<le> g1 x \\<bullet> i)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Dx_pair =\n    {(y, x).\n     (\\<forall>i\\<in>Basis.\n         a \\<bullet> i \\<le> x \\<bullet> i \\<and>\n         x \\<bullet> i \\<le> b \\<bullet> i) \\<and>\n     (\\<forall>i\\<in>Basis.\n         g2 x \\<bullet> i \\<le> y \\<bullet> i \\<and>\n         y \\<bullet> i \\<le> g1 x \\<bullet> i)}", "using Dx_def"], ["proof (prove)\nusing this:\n  Dx_pair = {(x, y). y \\<in> cbox a b \\<and> x \\<in> cbox (g2 y) (g1 y)}\n\ngoal (1 subgoal):\n 1. Dx_pair =\n    {(y, x).\n     (\\<forall>i\\<in>Basis.\n         a \\<bullet> i \\<le> x \\<bullet> i \\<and>\n         x \\<bullet> i \\<le> b \\<bullet> i) \\<and>\n     (\\<forall>i\\<in>Basis.\n         g2 x \\<bullet> i \\<le> y \\<bullet> i \\<and>\n         y \\<bullet> i \\<le> g1 x \\<bullet> i)}", "by auto"], ["proof (state)\nthis:\n  Dx_pair =\n  {(y, x).\n   (\\<forall>i\\<in>Basis.\n       a \\<bullet> i \\<le> x \\<bullet> i \\<and>\n       x \\<bullet> i \\<le> b \\<bullet> i) \\<and>\n   (\\<forall>i\\<in>Basis.\n       g2 x \\<bullet> i \\<le> y \\<bullet> i \\<and>\n       y \\<bullet> i \\<le> g1 x \\<bullet> i)}\n\ngoal (1 subgoal):\n 1. integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) =\n    integral (cbox a b)\n     (\\<lambda>x.\n         integral (cbox (g2 x) (g1 x))\n          (\\<lambda>y.\n              partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n               (y, x)))", "have arg3: \"\\<And> x. x \\<in> Dx_pair \\<Longrightarrow> (\\<lambda>x. if x \\<in> Dx_pair then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x else 0) x\n                           = (\\<lambda>x. partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Dx_pair \\<Longrightarrow>\n       (if x \\<in> Dx_pair\n        then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x\n        else 0) =\n       partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x", "by auto"], ["proof (state)\nthis:\n  ?x2 \\<in> Dx_pair \\<Longrightarrow>\n  (if ?x2 \\<in> Dx_pair\n   then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i ?x2\n   else 0) =\n  partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i ?x2\n\ngoal (1 subgoal):\n 1. integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) =\n    integral (cbox a b)\n     (\\<lambda>x.\n         integral (cbox (g2 x) (g1 x))\n          (\\<lambda>y.\n              partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n               (y, x)))", "have arg4: \"\\<And>x. x \\<in> (cbox a b) \\<Longrightarrow>\n                      (\\<lambda>x. integral (cbox (g2 x) (g1 x)) (\\<lambda>y. if (y, x) \\<in> Dx_pair then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i (y, x) else 0)) x =\n                      (\\<lambda>x. integral (cbox (g2 x) (g1 x)) (\\<lambda>y. partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i (y, x))) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> cbox a b \\<Longrightarrow>\n       integral (cbox (g2 x) (g1 x))\n        (\\<lambda>y.\n            if (y, x) \\<in> Dx_pair\n            then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n                  (y, x)\n            else 0) =\n       integral (cbox (g2 x) (g1 x))\n        (\\<lambda>y.\n            partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n             (y, x))", "apply (clarsimp simp: Dx_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>a \\<le> x; x \\<le> b\\<rbrakk>\n       \\<Longrightarrow> integral {g2 x..g1 x}\n                          (\\<lambda>y.\n                              if g2 x \\<le> y \\<and> y \\<le> g1 x\n                              then partial_vector_derivative\n                                    (\\<lambda>a. F a \\<bullet> j) i (y, x)\n                              else 0) =\n                         integral {g2 x..g1 x}\n                          (\\<lambda>y.\n                              partial_vector_derivative\n                               (\\<lambda>a. F a \\<bullet> j) i (y, x))", "by (smt Henstock_Kurzweil_Integration.integral_cong atLeastAtMost_iff)"], ["proof (state)\nthis:\n  ?x2 \\<in> cbox a b \\<Longrightarrow>\n  integral (cbox (g2 ?x2) (g1 ?x2))\n   (\\<lambda>y.\n       if (y, ?x2) \\<in> Dx_pair\n       then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n             (y, ?x2)\n       else 0) =\n  integral (cbox (g2 ?x2) (g1 ?x2))\n   (\\<lambda>y.\n       partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i (y, ?x2))\n\ngoal (1 subgoal):\n 1. integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) =\n    integral (cbox a b)\n     (\\<lambda>x.\n         integral (cbox (g2 x) (g1 x))\n          (\\<lambda>y.\n              partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n               (y, x)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) =\n    integral (cbox a b)\n     (\\<lambda>x.\n         integral (cbox (g2 x) (g1 x))\n          (\\<lambda>y.\n              partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n               (y, x)))", "using gauge_integral_Fubini_curve_bounded_region_y\n        [OF f_lesbegue_integrable y_axis_gauge_integrable y_axis_integral_measurable arg arg2]\n        Henstock_Kurzweil_Integration.integral_cong[OF arg3, of \"Dx_pair\" \"(\\<lambda>x. x)\"]\n        Henstock_Kurzweil_Integration.integral_cong[OF arg4, of \"cbox a b\" \"(\\<lambda>x. x)\"]"], ["proof (prove)\nusing this:\n  integral Dx_pair\n   (\\<lambda>x.\n       if x \\<in> Dx_pair\n       then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x\n       else 0) =\n  integral (cbox a b)\n   (\\<lambda>x.\n       integral (cbox (g2 x) (g1 x))\n        (\\<lambda>y.\n            if (y, x) \\<in> Dx_pair\n            then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n                  (y, x)\n            else 0))\n  (\\<And>x.\n      x \\<in> Dx_pair \\<Longrightarrow> x \\<in> Dx_pair) \\<Longrightarrow>\n  integral Dx_pair\n   (\\<lambda>x.\n       if x \\<in> Dx_pair\n       then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x\n       else 0) =\n  integral Dx_pair\n   (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n  (\\<And>x.\n      x \\<in> cbox a b \\<Longrightarrow> x \\<in> cbox a b) \\<Longrightarrow>\n  integral (cbox a b)\n   (\\<lambda>x.\n       integral (cbox (g2 x) (g1 x))\n        (\\<lambda>y.\n            if (y, x) \\<in> Dx_pair\n            then partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n                  (y, x)\n            else 0)) =\n  integral (cbox a b)\n   (\\<lambda>x.\n       integral (cbox (g2 x) (g1 x))\n        (\\<lambda>y.\n            partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n             (y, x)))\n\ngoal (1 subgoal):\n 1. integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) =\n    integral (cbox a b)\n     (\\<lambda>x.\n         integral (cbox (g2 x) (g1 x))\n          (\\<lambda>y.\n              partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n               (y, x)))", "by auto"], ["proof (state)\nthis:\n  integral Dx_pair\n   (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) =\n  integral (cbox a b)\n   (\\<lambda>x.\n       integral (cbox (g2 x) (g1 x))\n        (\\<lambda>y.\n            partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n             (y, x)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  integral Dx_pair\n   (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) =\n  integral (cbox a b)\n   (\\<lambda>x.\n       integral (cbox (g2 x) (g1 x))\n        (\\<lambda>y.\n            partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n             (y, x)))\n\ngoal (1 subgoal):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)", "have \"((integral Dx_pair (\\<lambda>a. (?F_a' a)))\n        = integral (cbox a b) (\\<lambda>x. F(g1(x), x) \\<bullet> j - F(g2(x), x) \\<bullet> j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) =\n    integral (cbox a b)\n     (\\<lambda>x. F (g1 x, x) \\<bullet> j - F (g2 x, x) \\<bullet> j)", "using 4 Henstock_Kurzweil_Integration.integral_cong partial_deriv_one_d_integrable integrable_def"], ["proof (prove)\nusing this:\n  integral Dx_pair\n   (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) =\n  integral (cbox a b)\n   (\\<lambda>x.\n       integral (cbox (g2 x) (g1 x))\n        (\\<lambda>y.\n            partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n             (y, x)))\n  (\\<And>x. x \\<in> ?s \\<Longrightarrow> ?f x = ?g x) \\<Longrightarrow>\n  integral ?s ?f = integral ?s ?g\n  ?xc2 \\<in> cbox a b \\<Longrightarrow>\n  ((\\<lambda>y.\n       partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\n        (y, ?xc2)) has_integral\n   F (g1 ?xc2, ?xc2) \\<bullet> j - F (g2 ?xc2, ?xc2) \\<bullet> j)\n   (cbox (g2 ?xc2) (g1 ?xc2))\n  integrable \\<equiv>\n  \\<lambda>M f. lfp (\\<lambda>p. \\<exists>x. has_bochner_integral M f x)\n\ngoal (1 subgoal):\n 1. integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) =\n    integral (cbox a b)\n     (\\<lambda>x. F (g1 x, x) \\<bullet> j - F (g2 x, x) \\<bullet> j)", "by (smt integral_unique)"], ["proof (state)\nthis:\n  integral Dx_pair\n   (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) =\n  integral (cbox a b)\n   (\\<lambda>x. F (g1 x, x) \\<bullet> j - F (g2 x, x) \\<bullet> j)\n\ngoal (1 subgoal):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)", "then"], ["proof (chain)\npicking this:\n  integral Dx_pair\n   (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) =\n  integral (cbox a b)\n   (\\<lambda>x. F (g1 x, x) \\<bullet> j - F (g2 x, x) \\<bullet> j)", "have \"integral Dx_pair (\\<lambda>a. - (?F_a' a))\n              = - integral (cbox a b) (\\<lambda>x. F(g1(x), x) \\<bullet> j - F(g2(x), x) \\<bullet> j)\""], ["proof (prove)\nusing this:\n  integral Dx_pair\n   (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) =\n  integral (cbox a b)\n   (\\<lambda>x. F (g1 x, x) \\<bullet> j - F (g2 x, x) \\<bullet> j)\n\ngoal (1 subgoal):\n 1. integral Dx_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i a) =\n    - integral (cbox a b)\n       (\\<lambda>x. F (g1 x, x) \\<bullet> j - F (g2 x, x) \\<bullet> j)", "using partial_deriv_integrable and integral_neg"], ["proof (prove)\nusing this:\n  integral Dx_pair\n   (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) =\n  integral (cbox a b)\n   (\\<lambda>x. F (g1 x, x) \\<bullet> j - F (g2 x, x) \\<bullet> j)\n  partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i integrable_on\n  Dx_pair\n  integral ?S (\\<lambda>x. - ?f x) = - integral ?S ?f\n\ngoal (1 subgoal):\n 1. integral Dx_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i a) =\n    - integral (cbox a b)\n       (\\<lambda>x. F (g1 x, x) \\<bullet> j - F (g2 x, x) \\<bullet> j)", "by auto"], ["proof (state)\nthis:\n  integral Dx_pair\n   (\\<lambda>a.\n       - partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i a) =\n  - integral (cbox a b)\n     (\\<lambda>x. F (g1 x, x) \\<bullet> j - F (g2 x, x) \\<bullet> j)\n\ngoal (1 subgoal):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)", "then"], ["proof (chain)\npicking this:\n  integral Dx_pair\n   (\\<lambda>a.\n       - partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i a) =\n  - integral (cbox a b)\n     (\\<lambda>x. F (g1 x, x) \\<bullet> j - F (g2 x, x) \\<bullet> j)", "have 5: \"integral Dx_pair (\\<lambda>a. - (?F_a' a))\n                = integral (cbox a b) (\\<lambda>x. ( F(g2(x), x) \\<bullet> j - F(g1(x), x) \\<bullet> j))\""], ["proof (prove)\nusing this:\n  integral Dx_pair\n   (\\<lambda>a.\n       - partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i a) =\n  - integral (cbox a b)\n     (\\<lambda>x. F (g1 x, x) \\<bullet> j - F (g2 x, x) \\<bullet> j)\n\ngoal (1 subgoal):\n 1. integral Dx_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i a) =\n    integral (cbox a b)\n     (\\<lambda>x. F (g2 x, x) \\<bullet> j - F (g1 x, x) \\<bullet> j)", "using 6 7  \n      and integral_neg [of _ \"(\\<lambda>x. F(g1 x, x) \\<bullet> j - F(g2 x, x) \\<bullet> j)\"]"], ["proof (prove)\nusing this:\n  integral Dx_pair\n   (\\<lambda>a.\n       - partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i a) =\n  - integral (cbox a b)\n     (\\<lambda>x. F (g1 x, x) \\<bullet> j - F (g2 x, x) \\<bullet> j)\n  (\\<lambda>x. F (g2 x, x) \\<bullet> j) integrable_on cbox a b\n  (\\<lambda>x. F (g1 x, x) \\<bullet> j) integrable_on cbox a b\n  integral ?S\n   (\\<lambda>x. - (F (g1 x, x) \\<bullet> j - F (g2 x, x) \\<bullet> j)) =\n  - integral ?S\n     (\\<lambda>x. F (g1 x, x) \\<bullet> j - F (g2 x, x) \\<bullet> j)\n\ngoal (1 subgoal):\n 1. integral Dx_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i a) =\n    integral (cbox a b)\n     (\\<lambda>x. F (g2 x, x) \\<bullet> j - F (g1 x, x) \\<bullet> j)", "by auto"], ["proof (state)\nthis:\n  integral Dx_pair\n   (\\<lambda>a.\n       - partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i a) =\n  integral (cbox a b)\n   (\\<lambda>x. F (g2 x, x) \\<bullet> j - F (g1 x, x) \\<bullet> j)\n\ngoal (1 subgoal):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)", "have \"(line_integral F {j} gamma4) + (line_integral F {j} gamma3) -\n        (line_integral F {j} gamma2) - (line_integral F {j} gamma1)\n        = (integral Dx_pair (\\<lambda>a. -(?F_a' a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral F {j} gamma4 + line_integral F {j} gamma3 -\n    line_integral F {j} gamma2 -\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i a)", "using 0 1 2 3 5 6 7\n      Henstock_Kurzweil_Integration.integral_diff[of \"(\\<lambda>x. F(g2(x), x)  \\<bullet> j)\"\n        \"cbox a b\" \"(\\<lambda>x. F(g1(x), x) \\<bullet> j)\"]"], ["proof (prove)\nusing this:\n  line_integral F {j} gamma4 =\n  integral (cbox a b) (\\<lambda>x. F (g2 x, x) \\<bullet> j)\n  line_integral_exists F {j} gamma4\n  line_integral F {j} gamma3 = 0\n  line_integral_exists F {j} gamma3\n  line_integral F {j} gamma2 =\n  integral (cbox a b) (\\<lambda>x. F (g1 x, x) \\<bullet> j)\n  line_integral_exists F {j} gamma2\n  line_integral F {j} gamma1 = 0\n  line_integral_exists F {j} gamma1\n  integral Dx_pair\n   (\\<lambda>a.\n       - partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i a) =\n  integral (cbox a b)\n   (\\<lambda>x. F (g2 x, x) \\<bullet> j - F (g1 x, x) \\<bullet> j)\n  (\\<lambda>x. F (g2 x, x) \\<bullet> j) integrable_on cbox a b\n  (\\<lambda>x. F (g1 x, x) \\<bullet> j) integrable_on cbox a b\n  \\<lbrakk>(\\<lambda>x. F (g2 x, x) \\<bullet> j) integrable_on cbox a b;\n   (\\<lambda>x. F (g1 x, x) \\<bullet> j) integrable_on cbox a b\\<rbrakk>\n  \\<Longrightarrow> integral (cbox a b)\n                     (\\<lambda>x.\n                         F (g2 x, x) \\<bullet> j -\n                         F (g1 x, x) \\<bullet> j) =\n                    integral (cbox a b)\n                     (\\<lambda>x. F (g2 x, x) \\<bullet> j) -\n                    integral (cbox a b)\n                     (\\<lambda>x. F (g1 x, x) \\<bullet> j)\n\ngoal (1 subgoal):\n 1. line_integral F {j} gamma4 + line_integral F {j} gamma3 -\n    line_integral F {j} gamma2 -\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i a)", "by (auto)"], ["proof (state)\nthis:\n  line_integral F {j} gamma4 + line_integral F {j} gamma3 -\n  line_integral F {j} gamma2 -\n  line_integral F {j} gamma1 =\n  integral Dx_pair\n   (\\<lambda>a.\n       - partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i a)\n\ngoal (1 subgoal):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)", "then"], ["proof (chain)\npicking this:\n  line_integral F {j} gamma4 + line_integral F {j} gamma3 -\n  line_integral F {j} gamma2 -\n  line_integral F {j} gamma1 =\n  integral Dx_pair\n   (\\<lambda>a.\n       - partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i a)", "show \"-(line_integral F {j} gamma4) -\n         (line_integral F {j} gamma3) +\n         (line_integral F {j} gamma2) +\n         (line_integral F {j} gamma1)\n                 = (integral Dx_pair (\\<lambda>a. (?F_a' a)))\""], ["proof (prove)\nusing this:\n  line_integral F {j} gamma4 + line_integral F {j} gamma3 -\n  line_integral F {j} gamma2 -\n  line_integral F {j} gamma1 =\n  integral Dx_pair\n   (\\<lambda>a.\n       - partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i a)\n\ngoal (1 subgoal):\n 1. - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n    line_integral F {j} gamma2 +\n    line_integral F {j} gamma1 =\n    integral Dx_pair\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)", "by (simp add: \\<open>integral Dx_pair (\\<lambda>a. - ?F_a' a) = - integral (cbox a b) (\\<lambda>x. F(g1 x, x) \\<bullet> j - F(g2 x, x) \\<bullet> j)\\<close> \\<open>integral Dx_pair ?F_a' = integral (cbox a b) (\\<lambda>x. F(g1 x, x) \\<bullet> j - F(g2 x, x) \\<bullet> j)\\<close>)"], ["proof (state)\nthis:\n  - line_integral F {j} gamma4 - line_integral F {j} gamma3 +\n  line_integral F {j} gamma2 +\n  line_integral F {j} gamma1 =\n  integral Dx_pair\n   (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "locale green_typeII_cube =  R2 + \n  fixes twoC F\n  assumes \n    two_cube: \"typeII_twoCube twoC\" and\n    valid_two_cube: \"valid_two_cube twoC\" and\n    f_analytically_valid: \"analytically_valid (cubeImage twoC) (\\<lambda>x. (F x) \\<bullet> j) i\"\nbegin"], ["", "lemma GreenThm_typeII_twoCube:\n  shows \"integral (cubeImage twoC) (\\<lambda>a. partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> j) i  a) = one_chain_line_integral F {j} (boundary twoC)\"\n    \"\\<forall>(k,\\<gamma>) \\<in> boundary twoC. line_integral_exists F {j} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral (cubeImage twoC)\n     (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} (boundary twoC) &&&\n    \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n       line_integral_exists F {j} \\<gamma>", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. integral (cubeImage twoC)\n     (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} (boundary twoC)\n 2. \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n       line_integral_exists F {j} \\<gamma>", "let ?bottom_edge = \"(\\<lambda>x. twoC(x, 0))\""], ["proof (state)\ngoal (2 subgoals):\n 1. integral (cubeImage twoC)\n     (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} (boundary twoC)\n 2. \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n       line_integral_exists F {j} \\<gamma>", "let ?right_edge = \"(\\<lambda>y. twoC(1, y))\""], ["proof (state)\ngoal (2 subgoals):\n 1. integral (cubeImage twoC)\n     (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} (boundary twoC)\n 2. \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n       line_integral_exists F {j} \\<gamma>", "let ?top_edge = \"(\\<lambda>x. twoC(x, 1))\""], ["proof (state)\ngoal (2 subgoals):\n 1. integral (cubeImage twoC)\n     (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} (boundary twoC)\n 2. \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n       line_integral_exists F {j} \\<gamma>", "let ?left_edge = \"(\\<lambda>y. twoC(0, y))\""], ["proof (state)\ngoal (2 subgoals):\n 1. integral (cubeImage twoC)\n     (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} (boundary twoC)\n 2. \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n       line_integral_exists F {j} \\<gamma>", "have line_integral_around_boundary: \n      \"one_chain_line_integral F {j} (boundary twoC) =  \n         line_integral F {j} ?bottom_edge + line_integral F {j} ?right_edge\n         - line_integral F {j} ?top_edge - line_integral F {j} ?left_edge\""], ["proof (prove)\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j} (boundary twoC) =\n    line_integral F {j} (\\<lambda>x. twoC (x, 0)) +\n    line_integral F {j} (\\<lambda>y. twoC (1, y)) -\n    line_integral F {j} (\\<lambda>x. twoC (x, 1)) -\n    line_integral F {j} (\\<lambda>y. twoC (0, y))", "proof (simp add: one_chain_line_integral_def horizontal_boundary_def vertical_boundary_def boundary_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                  (1, \\<lambda>y. twoC (1, y)),\n                  (1, \\<lambda>x. twoC (x, 0)),\n                  (- 1, \\<lambda>x. twoC (x, 1))}.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n    line_integral F {j} (\\<lambda>x. twoC (x, 0)) +\n    line_integral F {j} (\\<lambda>y. twoC (1, y)) -\n    line_integral F {j} (\\<lambda>x. twoC (x, 1)) -\n    line_integral F {j} (\\<lambda>y. twoC (0, y))", "have finite1: \"finite {(- 1::int, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)), (- 1, \\<lambda>x. twoC (x, 1))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n      (- 1, \\<lambda>x. twoC (x, 1))}", "by auto"], ["proof (state)\nthis:\n  finite\n   {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n    (- 1, \\<lambda>x. twoC (x, 1))}\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                  (1, \\<lambda>y. twoC (1, y)),\n                  (1, \\<lambda>x. twoC (x, 0)),\n                  (- 1, \\<lambda>x. twoC (x, 1))}.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n    line_integral F {j} (\\<lambda>x. twoC (x, 0)) +\n    line_integral F {j} (\\<lambda>y. twoC (1, y)) -\n    line_integral F {j} (\\<lambda>x. twoC (x, 1)) -\n    line_integral F {j} (\\<lambda>y. twoC (0, y))", "then"], ["proof (chain)\npicking this:\n  finite\n   {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n    (- 1, \\<lambda>x. twoC (x, 1))}", "have sum_step1: \"(\\<Sum>(k, g)\\<in>{(- (1::int), \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)), (1, \\<lambda>x. twoC (x, 0)), (- 1, \\<lambda>x. twoC (x, 1))}. k * line_integral F {j} g) =\n                       line_integral F {j} (\\<lambda>x. twoC (x, 0)) + (\\<Sum>(k, g)\\<in>{(- (1::int), \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)), (- 1, \\<lambda>x. twoC (x, 1))}. k * line_integral F {j} g)\""], ["proof (prove)\nusing this:\n  finite\n   {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n    (- 1, \\<lambda>x. twoC (x, 1))}\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\n           \\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                 (1, \\<lambda>y. twoC (1, y)), (1, \\<lambda>x. twoC (x, 0)),\n                 (- 1, \\<lambda>x. twoC (x, 1))}.\n       real_of_int k * line_integral F {j} g) =\n    line_integral F {j} (\\<lambda>x. twoC (x, 0)) +\n    (\\<Sum>(k, g)\n           \\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                 (1, \\<lambda>y. twoC (1, y)),\n                 (- 1, \\<lambda>x. twoC (x, 1))}.\n       real_of_int k * line_integral F {j} g)", "using sum.insert_remove [OF finite1]"], ["proof (prove)\nusing this:\n  finite\n   {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n    (- 1, \\<lambda>x. twoC (x, 1))}\n  sum ?g\n   {?x, (- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n    (- 1, \\<lambda>x. twoC (x, 1))} =\n  ?g ?x +\n  sum ?g\n   ({(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n     (- 1, \\<lambda>x. twoC (x, 1))} -\n    {?x})\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\n           \\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                 (1, \\<lambda>y. twoC (1, y)), (1, \\<lambda>x. twoC (x, 0)),\n                 (- 1, \\<lambda>x. twoC (x, 1))}.\n       real_of_int k * line_integral F {j} g) =\n    line_integral F {j} (\\<lambda>x. twoC (x, 0)) +\n    (\\<Sum>(k, g)\n           \\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                 (1, \\<lambda>y. twoC (1, y)),\n                 (- 1, \\<lambda>x. twoC (x, 1))}.\n       real_of_int k * line_integral F {j} g)", "using valid_two_cube"], ["proof (prove)\nusing this:\n  finite\n   {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n    (- 1, \\<lambda>x. twoC (x, 1))}\n  sum ?g\n   {?x, (- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n    (- 1, \\<lambda>x. twoC (x, 1))} =\n  ?g ?x +\n  sum ?g\n   ({(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n     (- 1, \\<lambda>x. twoC (x, 1))} -\n    {?x})\n  valid_two_cube twoC\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\n           \\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                 (1, \\<lambda>y. twoC (1, y)), (1, \\<lambda>x. twoC (x, 0)),\n                 (- 1, \\<lambda>x. twoC (x, 1))}.\n       real_of_int k * line_integral F {j} g) =\n    line_integral F {j} (\\<lambda>x. twoC (x, 0)) +\n    (\\<Sum>(k, g)\n           \\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                 (1, \\<lambda>y. twoC (1, y)),\n                 (- 1, \\<lambda>x. twoC (x, 1))}.\n       real_of_int k * line_integral F {j} g)", "apply (simp only: one_chain_line_integral_def horizontal_boundary_def vertical_boundary_def boundary_def valid_two_cube_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite\n              {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n               (- 1, \\<lambda>x. twoC (x, 1))};\n     \\<And>g x.\n        sum g\n         {x, (- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n          (- 1, \\<lambda>x. twoC (x, 1))} =\n        g x +\n        sum g\n         ({(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n           (- 1, \\<lambda>x. twoC (x, 1))} -\n          {x});\n     card\n      ({(1, \\<lambda>x. twoC (x, 0)),\n        (- 1, \\<lambda>x. twoC (x, 1))} \\<union>\n       {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y))}) =\n     4\\<rbrakk>\n    \\<Longrightarrow> (\\<Sum>(k, g)\n                             \\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                                   (1, \\<lambda>y. twoC (1, y)),\n                                   (1, \\<lambda>x. twoC (x, 0)),\n                                   (- 1, \\<lambda>x. twoC (x, 1))}.\n                         real_of_int k * line_integral F {j} g) =\n                      line_integral F {j} (\\<lambda>x. twoC (x, 0)) +\n                      (\\<Sum>(k, g)\n                             \\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                                   (1, \\<lambda>y. twoC (1, y)),\n                                   (- 1, \\<lambda>x. twoC (x, 1))}.\n                         real_of_int k * line_integral F {j} g)", "by (auto simp: card_insert_if split: if_split_asm)"], ["proof (state)\nthis:\n  (\\<Sum>(k, g)\n         \\<in>{(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n               (1, \\<lambda>x. twoC (x, 0)),\n               (- 1, \\<lambda>x. twoC (x, 1))}.\n     real_of_int k * line_integral F {j} g) =\n  line_integral F {j} (\\<lambda>x. twoC (x, 0)) +\n  (\\<Sum>(k, g)\n         \\<in>{(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n               (- 1, \\<lambda>x. twoC (x, 1))}.\n     real_of_int k * line_integral F {j} g)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                  (1, \\<lambda>y. twoC (1, y)),\n                  (1, \\<lambda>x. twoC (x, 0)),\n                  (- 1, \\<lambda>x. twoC (x, 1))}.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n    line_integral F {j} (\\<lambda>x. twoC (x, 0)) +\n    line_integral F {j} (\\<lambda>y. twoC (1, y)) -\n    line_integral F {j} (\\<lambda>x. twoC (x, 1)) -\n    line_integral F {j} (\\<lambda>y. twoC (0, y))", "have three_distinct_edges: \"card {(- 1::int, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)), (- 1, \\<lambda>x. twoC (x, 1))} = 3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n      (- 1, \\<lambda>x. twoC (x, 1))} =\n    3", "using valid_two_cube"], ["proof (prove)\nusing this:\n  valid_two_cube twoC\n\ngoal (1 subgoal):\n 1. card\n     {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n      (- 1, \\<lambda>x. twoC (x, 1))} =\n    3", "apply (simp add: one_chain_line_integral_def horizontal_boundary_def vertical_boundary_def boundary_def valid_two_cube_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n      (1, \\<lambda>x. twoC (x, 0)), (- 1, \\<lambda>x. twoC (x, 1))} =\n    4 \\<Longrightarrow>\n    card\n     {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n      (- 1, \\<lambda>x. twoC (x, 1))} =\n    3", "by (auto simp: card_insert_if split: if_split_asm)"], ["proof (state)\nthis:\n  card\n   {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n    (- 1, \\<lambda>x. twoC (x, 1))} =\n  3\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                  (1, \\<lambda>y. twoC (1, y)),\n                  (1, \\<lambda>x. twoC (x, 0)),\n                  (- 1, \\<lambda>x. twoC (x, 1))}.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n    line_integral F {j} (\\<lambda>x. twoC (x, 0)) +\n    line_integral F {j} (\\<lambda>y. twoC (1, y)) -\n    line_integral F {j} (\\<lambda>x. twoC (x, 1)) -\n    line_integral F {j} (\\<lambda>y. twoC (0, y))", "have finite2: \"finite {(- 1::int, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y))}", "by auto"], ["proof (state)\nthis:\n  finite {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y))}\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                  (1, \\<lambda>y. twoC (1, y)),\n                  (1, \\<lambda>x. twoC (x, 0)),\n                  (- 1, \\<lambda>x. twoC (x, 1))}.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n    line_integral F {j} (\\<lambda>x. twoC (x, 0)) +\n    line_integral F {j} (\\<lambda>y. twoC (1, y)) -\n    line_integral F {j} (\\<lambda>x. twoC (x, 1)) -\n    line_integral F {j} (\\<lambda>y. twoC (0, y))", "then"], ["proof (chain)\npicking this:\n  finite {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y))}", "have sum_step2: \"(\\<Sum>(k, g)\\<in>{(- (1::int), \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)), (-1, \\<lambda>x. twoC (x, 1))}. k * line_integral F {j} g) =\n                       (- line_integral F {j} (\\<lambda>x. twoC (x, 1))) + (\\<Sum>(k, g)\\<in>{(- (1::int), \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y))}. k * line_integral F {j} g)\""], ["proof (prove)\nusing this:\n  finite {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y))}\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\n           \\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                 (1, \\<lambda>y. twoC (1, y)),\n                 (- 1, \\<lambda>x. twoC (x, 1))}.\n       real_of_int k * line_integral F {j} g) =\n    - line_integral F {j} (\\<lambda>x. twoC (x, 1)) +\n    (\\<Sum>(k, g)\n           \\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                 (1, \\<lambda>y. twoC (1, y))}.\n       real_of_int k * line_integral F {j} g)", "using sum.insert_remove [OF finite2] three_distinct_edges"], ["proof (prove)\nusing this:\n  finite {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y))}\n  sum ?g\n   {?x, (- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y))} =\n  ?g ?x +\n  sum ?g\n   ({(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y))} - {?x})\n  card\n   {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n    (- 1, \\<lambda>x. twoC (x, 1))} =\n  3\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\n           \\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                 (1, \\<lambda>y. twoC (1, y)),\n                 (- 1, \\<lambda>x. twoC (x, 1))}.\n       real_of_int k * line_integral F {j} g) =\n    - line_integral F {j} (\\<lambda>x. twoC (x, 1)) +\n    (\\<Sum>(k, g)\n           \\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                 (1, \\<lambda>y. twoC (1, y))}.\n       real_of_int k * line_integral F {j} g)", "by (auto simp: card_insert_if split: if_split_asm)"], ["proof (state)\nthis:\n  (\\<Sum>(k, g)\n         \\<in>{(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n               (- 1, \\<lambda>x. twoC (x, 1))}.\n     real_of_int k * line_integral F {j} g) =\n  - line_integral F {j} (\\<lambda>x. twoC (x, 1)) +\n  (\\<Sum>(k, g)\n         \\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n               (1, \\<lambda>y. twoC (1, y))}.\n     real_of_int k * line_integral F {j} g)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                  (1, \\<lambda>y. twoC (1, y)),\n                  (1, \\<lambda>x. twoC (x, 0)),\n                  (- 1, \\<lambda>x. twoC (x, 1))}.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n    line_integral F {j} (\\<lambda>x. twoC (x, 0)) +\n    line_integral F {j} (\\<lambda>y. twoC (1, y)) -\n    line_integral F {j} (\\<lambda>x. twoC (x, 1)) -\n    line_integral F {j} (\\<lambda>y. twoC (0, y))", "have two_distinct_edges: \"card {(- 1::int, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y))} = 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y))} = 2", "using three_distinct_edges"], ["proof (prove)\nusing this:\n  card\n   {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n    (- 1, \\<lambda>x. twoC (x, 1))} =\n  3\n\ngoal (1 subgoal):\n 1. card {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y))} = 2", "by (simp add: one_chain_line_integral_def horizontal_boundary_def vertical_boundary_def boundary_def)"], ["proof (state)\nthis:\n  card {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y))} = 2\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                  (1, \\<lambda>y. twoC (1, y)),\n                  (1, \\<lambda>x. twoC (x, 0)),\n                  (- 1, \\<lambda>x. twoC (x, 1))}.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n    line_integral F {j} (\\<lambda>x. twoC (x, 0)) +\n    line_integral F {j} (\\<lambda>y. twoC (1, y)) -\n    line_integral F {j} (\\<lambda>x. twoC (x, 1)) -\n    line_integral F {j} (\\<lambda>y. twoC (0, y))", "have finite3: \"finite {(- 1::int, \\<lambda>y. twoC (0, y))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {(- 1, \\<lambda>y. twoC (0, y))}", "by auto"], ["proof (state)\nthis:\n  finite {(- 1, \\<lambda>y. twoC (0, y))}\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                  (1, \\<lambda>y. twoC (1, y)),\n                  (1, \\<lambda>x. twoC (x, 0)),\n                  (- 1, \\<lambda>x. twoC (x, 1))}.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n    line_integral F {j} (\\<lambda>x. twoC (x, 0)) +\n    line_integral F {j} (\\<lambda>y. twoC (1, y)) -\n    line_integral F {j} (\\<lambda>x. twoC (x, 1)) -\n    line_integral F {j} (\\<lambda>y. twoC (0, y))", "then"], ["proof (chain)\npicking this:\n  finite {(- 1, \\<lambda>y. twoC (0, y))}", "have sum_step3: \"(\\<Sum>(k, g)\\<in>{(- (1::int), \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y))}. k * line_integral F {j} g) =\n                       ( line_integral F {j} (\\<lambda>y. twoC (1, y))) + (\\<Sum>(k, g)\\<in>{(- (1::real), \\<lambda>y. twoC (0, y))}. k * line_integral F {j} g)\""], ["proof (prove)\nusing this:\n  finite {(- 1, \\<lambda>y. twoC (0, y))}\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\n           \\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                 (1, \\<lambda>y. twoC (1, y))}.\n       real_of_int k * line_integral F {j} g) =\n    line_integral F {j} (\\<lambda>y. twoC (1, y)) +\n    (\\<Sum>(k, g)\\<in>{(- 1, \\<lambda>y. twoC (0, y))}.\n       k * line_integral F {j} g)", "using sum.insert_remove [OF finite2] three_distinct_edges"], ["proof (prove)\nusing this:\n  finite {(- 1, \\<lambda>y. twoC (0, y))}\n  sum ?g\n   {?x, (- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y))} =\n  ?g ?x +\n  sum ?g\n   ({(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y))} - {?x})\n  card\n   {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n    (- 1, \\<lambda>x. twoC (x, 1))} =\n  3\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\n           \\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                 (1, \\<lambda>y. twoC (1, y))}.\n       real_of_int k * line_integral F {j} g) =\n    line_integral F {j} (\\<lambda>y. twoC (1, y)) +\n    (\\<Sum>(k, g)\\<in>{(- 1, \\<lambda>y. twoC (0, y))}.\n       k * line_integral F {j} g)", "by (auto simp: card_insert_if split: if_split_asm)"], ["proof (state)\nthis:\n  (\\<Sum>(k, g)\n         \\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n               (1, \\<lambda>y. twoC (1, y))}.\n     real_of_int k * line_integral F {j} g) =\n  line_integral F {j} (\\<lambda>y. twoC (1, y)) +\n  (\\<Sum>(k, g)\\<in>{(- 1, \\<lambda>y. twoC (0, y))}.\n     k * line_integral F {j} g)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                  (1, \\<lambda>y. twoC (1, y)),\n                  (1, \\<lambda>x. twoC (x, 0)),\n                  (- 1, \\<lambda>x. twoC (x, 1))}.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n    line_integral F {j} (\\<lambda>x. twoC (x, 0)) +\n    line_integral F {j} (\\<lambda>y. twoC (1, y)) -\n    line_integral F {j} (\\<lambda>x. twoC (x, 1)) -\n    line_integral F {j} (\\<lambda>y. twoC (0, y))", "show \"(\\<Sum>x\\<in>{(- 1::int, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)), (1, \\<lambda>x. twoC (x, 0)), (- 1, \\<lambda>x. twoC (x, 1))}. case x of (k, g) \\<Rightarrow> k * line_integral F {j} g) =\n                  line_integral F {j} (\\<lambda>x. twoC (x, 0)) + line_integral F {j} (\\<lambda>y. twoC (1, y)) - line_integral F {j} (\\<lambda>x. twoC (x, 1)) - line_integral F {j} (\\<lambda>y. twoC (0, y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                  (1, \\<lambda>y. twoC (1, y)),\n                  (1, \\<lambda>x. twoC (x, 0)),\n                  (- 1, \\<lambda>x. twoC (x, 1))}.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n    line_integral F {j} (\\<lambda>x. twoC (x, 0)) +\n    line_integral F {j} (\\<lambda>y. twoC (1, y)) -\n    line_integral F {j} (\\<lambda>x. twoC (x, 1)) -\n    line_integral F {j} (\\<lambda>y. twoC (0, y))", "using sum_step1 sum_step2 sum_step3"], ["proof (prove)\nusing this:\n  (\\<Sum>(k, g)\n         \\<in>{(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n               (1, \\<lambda>x. twoC (x, 0)),\n               (- 1, \\<lambda>x. twoC (x, 1))}.\n     real_of_int k * line_integral F {j} g) =\n  line_integral F {j} (\\<lambda>x. twoC (x, 0)) +\n  (\\<Sum>(k, g)\n         \\<in>{(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n               (- 1, \\<lambda>x. twoC (x, 1))}.\n     real_of_int k * line_integral F {j} g)\n  (\\<Sum>(k, g)\n         \\<in>{(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n               (- 1, \\<lambda>x. twoC (x, 1))}.\n     real_of_int k * line_integral F {j} g) =\n  - line_integral F {j} (\\<lambda>x. twoC (x, 1)) +\n  (\\<Sum>(k, g)\n         \\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n               (1, \\<lambda>y. twoC (1, y))}.\n     real_of_int k * line_integral F {j} g)\n  (\\<Sum>(k, g)\n         \\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n               (1, \\<lambda>y. twoC (1, y))}.\n     real_of_int k * line_integral F {j} g) =\n  line_integral F {j} (\\<lambda>y. twoC (1, y)) +\n  (\\<Sum>(k, g)\\<in>{(- 1, \\<lambda>y. twoC (0, y))}.\n     k * line_integral F {j} g)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                  (1, \\<lambda>y. twoC (1, y)),\n                  (1, \\<lambda>x. twoC (x, 0)),\n                  (- 1, \\<lambda>x. twoC (x, 1))}.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n    line_integral F {j} (\\<lambda>x. twoC (x, 0)) +\n    line_integral F {j} (\\<lambda>y. twoC (1, y)) -\n    line_integral F {j} (\\<lambda>x. twoC (x, 1)) -\n    line_integral F {j} (\\<lambda>y. twoC (0, y))", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                (1, \\<lambda>y. twoC (1, y)), (1, \\<lambda>x. twoC (x, 0)),\n                (- 1, \\<lambda>x. twoC (x, 1))}.\n     case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n  line_integral F {j} (\\<lambda>x. twoC (x, 0)) +\n  line_integral F {j} (\\<lambda>y. twoC (1, y)) -\n  line_integral F {j} (\\<lambda>x. twoC (x, 1)) -\n  line_integral F {j} (\\<lambda>y. twoC (0, y))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  one_chain_line_integral F {j} (boundary twoC) =\n  line_integral F {j} (\\<lambda>x. twoC (x, 0)) +\n  line_integral F {j} (\\<lambda>y. twoC (1, y)) -\n  line_integral F {j} (\\<lambda>x. twoC (x, 1)) -\n  line_integral F {j} (\\<lambda>y. twoC (0, y))\n\ngoal (2 subgoals):\n 1. integral (cubeImage twoC)\n     (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} (boundary twoC)\n 2. \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n       line_integral_exists F {j} \\<gamma>", "obtain a b g1 g2 where\n    twoCisTypeII: \"a < b\"\n    \"(\\<forall>x \\<in> cbox a b. g2 x \\<le> g1 x)\"\n    \"cubeImage twoC = {(y, x). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)}\"\n    \"twoC = (\\<lambda>(y, x). ((1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b), (1 - x) * a + x * b))\"\n    \"g1 piecewise_C1_differentiable_on {a .. b}\"\n    \"g2 piecewise_C1_differentiable_on {a .. b}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b g2 g1.\n        \\<lbrakk>a < b; \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x;\n         cubeImage twoC =\n         {(y, x). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)};\n         twoC =\n         (\\<lambda>(y, x).\n             ((1 - y) * g2 ((1 - x) * a + x * b) +\n              y * g1 ((1 - x) * a + x * b),\n              (1 - x) * a + x * b));\n         g1 piecewise_C1_differentiable_on {a..b};\n         g2 piecewise_C1_differentiable_on {a..b}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using two_cube and typeII_twoCubeImg[of\"twoC\"]"], ["proof (prove)\nusing this:\n  typeII_twoCube twoC\n  typeII_twoCube twoC \\<Longrightarrow>\n  \\<exists>a b g1 g2.\n     a < b \\<and>\n     (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n     cubeImage twoC =\n     {(y, x). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n     twoC =\n     (\\<lambda>(y, x).\n         ((1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b),\n          (1 - x) * a + x * b)) \\<and>\n     g1 piecewise_C1_differentiable_on {a..b} \\<and>\n     g2 piecewise_C1_differentiable_on {a..b}\n\ngoal (1 subgoal):\n 1. (\\<And>a b g2 g1.\n        \\<lbrakk>a < b; \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x;\n         cubeImage twoC =\n         {(y, x). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)};\n         twoC =\n         (\\<lambda>(y, x).\n             ((1 - y) * g2 ((1 - x) * a + x * b) +\n              y * g1 ((1 - x) * a + x * b),\n              (1 - x) * a + x * b));\n         g1 piecewise_C1_differentiable_on {a..b};\n         g2 piecewise_C1_differentiable_on {a..b}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  a < b\n  \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x\n  cubeImage twoC =\n  {(y, x). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)}\n  twoC =\n  (\\<lambda>(y, x).\n      ((1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b),\n       (1 - x) * a + x * b))\n  g1 piecewise_C1_differentiable_on {a..b}\n  g2 piecewise_C1_differentiable_on {a..b}\n\ngoal (2 subgoals):\n 1. integral (cubeImage twoC)\n     (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} (boundary twoC)\n 2. \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n       line_integral_exists F {j} \\<gamma>", "have left_edge_explicit: \"?left_edge = (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (0, y)) =\n    (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x))", "by (simp add: twoCisTypeII(4) algebra_simps)"], ["proof (state)\nthis:\n  (\\<lambda>y. twoC (0, y)) =\n  (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x))\n\ngoal (2 subgoals):\n 1. integral (cubeImage twoC)\n     (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} (boundary twoC)\n 2. \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n       line_integral_exists F {j} \\<gamma>", "have left_edge_smooth: \"?left_edge piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (0, y)) piecewise_C1_differentiable_on {0..1}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (0, y)) piecewise_C1_differentiable_on {0..1}", "have \"\\<forall>x. (\\<lambda>x. (a + (b - a) * x))-` {x} = {(x - a)/(b -a)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. (\\<lambda>x. a + (b - a) * x) -` {x} = {(x - a) / (b - a)}", "using twoCisTypeII(1)"], ["proof (prove)\nusing this:\n  a < b\n\ngoal (1 subgoal):\n 1. \\<forall>x. (\\<lambda>x. a + (b - a) * x) -` {x} = {(x - a) / (b - a)}", "by(auto simp add: Set.vimage_def)"], ["proof (state)\nthis:\n  \\<forall>x. (\\<lambda>x. a + (b - a) * x) -` {x} = {(x - a) / (b - a)}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (0, y)) piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  \\<forall>x. (\\<lambda>x. a + (b - a) * x) -` {x} = {(x - a) / (b - a)}", "have finite_vimg: \"\\<And>x. finite({0..1} \\<inter> (\\<lambda>x. (a + (b - a) * x))-` {x})\""], ["proof (prove)\nusing this:\n  \\<forall>x. (\\<lambda>x. a + (b - a) * x) -` {x} = {(x - a) / (b - a)}\n\ngoal (1 subgoal):\n 1. \\<And>x. finite ({0..1} \\<inter> (\\<lambda>x. a + (b - a) * x) -` {x})", "by auto"], ["proof (state)\nthis:\n  finite ({0..1} \\<inter> (\\<lambda>x. a + (b - a) * x) -` {?x})\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (0, y)) piecewise_C1_differentiable_on {0..1}", "have scale_shif_smth: \"(\\<lambda>x. (a + (b - a) * x)) C1_differentiable_on {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. a + (b - a) * x) C1_differentiable_on {0..1}", "using scale_shift_smooth"], ["proof (prove)\nusing this:\n  (\\<lambda>x. ?a + ?b * x) C1_differentiable_on ?s\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. a + (b - a) * x) C1_differentiable_on {0..1}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. a + (b - a) * x) C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (0, y)) piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x. a + (b - a) * x) C1_differentiable_on {0..1}", "have scale_shif_pw_smth: \"(\\<lambda>x. (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\nusing this:\n  (\\<lambda>x. a + (b - a) * x) C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. a + (b - a) * x) piecewise_C1_differentiable_on {0..1}", "using C1_differentiable_imp_piecewise"], ["proof (prove)\nusing this:\n  (\\<lambda>x. a + (b - a) * x) C1_differentiable_on {0..1}\n  ?f C1_differentiable_on ?S \\<Longrightarrow>\n  ?f piecewise_C1_differentiable_on ?S\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. a + (b - a) * x) piecewise_C1_differentiable_on {0..1}", "by blast"], ["proof (state)\nthis:\n  (\\<lambda>x. a + (b - a) * x) piecewise_C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (0, y)) piecewise_C1_differentiable_on {0..1}", "have g2_smooth: \"g2 piecewise_C1_differentiable_on (\\<lambda>x. a + (b - a) * x) ` {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g2 piecewise_C1_differentiable_on (\\<lambda>x. a + (b - a) * x) ` {0..1}", "using add_scale_img[OF twoCisTypeII(1)] twoCisTypeII(6)"], ["proof (prove)\nusing this:\n  (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}\n  g2 piecewise_C1_differentiable_on {a..b}\n\ngoal (1 subgoal):\n 1. g2 piecewise_C1_differentiable_on (\\<lambda>x. a + (b - a) * x) ` {0..1}", "by auto"], ["proof (state)\nthis:\n  g2 piecewise_C1_differentiable_on (\\<lambda>x. a + (b - a) * x) ` {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (0, y)) piecewise_C1_differentiable_on {0..1}", "have \"(\\<lambda>x. g2 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. g2 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}", "using piecewise_C1_differentiable_compose[OF scale_shif_pw_smth g2_smooth finite_vimg]"], ["proof (prove)\nusing this:\n  g2 \\<circ> (\\<lambda>x. a + (b - a) * x) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. g2 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}", "by (auto simp add: o_def)"], ["proof (state)\nthis:\n  (\\<lambda>x. g2 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (0, y)) piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x. g2 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}", "have \"(\\<lambda>x::real. (g2 (a + (b - a) * x), a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\nusing this:\n  (\\<lambda>x. g2 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (g2 (a + (b - a) * x),\n         a + (b - a) * x)) piecewise_C1_differentiable_on\n    {0..1}", "using all_components_smooth_one_pw_smooth_is_pw_smooth[where f = \"(\\<lambda>x::real. (g2 (a + (b - a) * x), a + (b - a) * x))\"]"], ["proof (prove)\nusing this:\n  (\\<lambda>x. g2 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\n  \\<lbrakk>\\<And>i.\n              i \\<in> Basis - {?j} \\<Longrightarrow>\n              (\\<lambda>x.\n                  (g2 (a + (b - a) * x), a + (b - a) * x) \\<bullet>\n                  i) C1_differentiable_on\n              ?s;\n   (\\<lambda>x.\n       (g2 (a + (b - a) * x), a + (b - a) * x) \\<bullet>\n       ?j) piecewise_C1_differentiable_on\n   ?s\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>x.\n                        (g2 (a + (b - a) * x),\n                         a + (b - a) * x)) piecewise_C1_differentiable_on\n                    ?s\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (g2 (a + (b - a) * x),\n         a + (b - a) * x)) piecewise_C1_differentiable_on\n    {0..1}", "by (fastforce simp add: real_pair_basis)"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      (g2 (a + (b - a) * x),\n       a + (b - a) * x)) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (0, y)) piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x.\n      (g2 (a + (b - a) * x),\n       a + (b - a) * x)) piecewise_C1_differentiable_on\n  {0..1}", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (g2 (a + (b - a) * x),\n       a + (b - a) * x)) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (0, y)) piecewise_C1_differentiable_on {0..1}", "using left_edge_explicit"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (g2 (a + (b - a) * x),\n       a + (b - a) * x)) piecewise_C1_differentiable_on\n  {0..1}\n  (\\<lambda>y. twoC (0, y)) =\n  (\\<lambda>x. (g2 (a + (b - a) * x), a + (b - a) * x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (0, y)) piecewise_C1_differentiable_on {0..1}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>y. twoC (0, y)) piecewise_C1_differentiable_on {0..1}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>y. twoC (0, y)) piecewise_C1_differentiable_on {0..1}\n\ngoal (2 subgoals):\n 1. integral (cubeImage twoC)\n     (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} (boundary twoC)\n 2. \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n       line_integral_exists F {j} \\<gamma>", "have top_edge_explicit: \"?top_edge = (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b))\"\n   and right_edge_explicit: \"?right_edge = (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 1)) =\n    (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b)) &&&\n    (\\<lambda>y. twoC (1, y)) =\n    (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x))", "by (simp_all add: twoCisTypeII(4) algebra_simps)"], ["proof (state)\nthis:\n  (\\<lambda>x. twoC (x, 1)) =\n  (\\<lambda>x. (g2 b + x *\\<^sub>R (g1 b - g2 b), b))\n  (\\<lambda>y. twoC (1, y)) =\n  (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x))\n\ngoal (2 subgoals):\n 1. integral (cubeImage twoC)\n     (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} (boundary twoC)\n 2. \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n       line_integral_exists F {j} \\<gamma>", "have right_edge_smooth: \"?right_edge piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (1, y)) piecewise_C1_differentiable_on {0..1}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (1, y)) piecewise_C1_differentiable_on {0..1}", "have \"\\<forall>x. (\\<lambda>x. (a + (b - a) * x))-` {x} = {(x - a)/(b -a)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. (\\<lambda>x. a + (b - a) * x) -` {x} = {(x - a) / (b - a)}", "using twoCisTypeII(1)"], ["proof (prove)\nusing this:\n  a < b\n\ngoal (1 subgoal):\n 1. \\<forall>x. (\\<lambda>x. a + (b - a) * x) -` {x} = {(x - a) / (b - a)}", "by(auto simp add: Set.vimage_def)"], ["proof (state)\nthis:\n  \\<forall>x. (\\<lambda>x. a + (b - a) * x) -` {x} = {(x - a) / (b - a)}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (1, y)) piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  \\<forall>x. (\\<lambda>x. a + (b - a) * x) -` {x} = {(x - a) / (b - a)}", "have finite_vimg: \"\\<And>x. finite({0..1} \\<inter> (\\<lambda>x. (a + (b - a) * x))-` {x})\""], ["proof (prove)\nusing this:\n  \\<forall>x. (\\<lambda>x. a + (b - a) * x) -` {x} = {(x - a) / (b - a)}\n\ngoal (1 subgoal):\n 1. \\<And>x. finite ({0..1} \\<inter> (\\<lambda>x. a + (b - a) * x) -` {x})", "by auto"], ["proof (state)\nthis:\n  finite ({0..1} \\<inter> (\\<lambda>x. a + (b - a) * x) -` {?x})\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (1, y)) piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  finite ({0..1} \\<inter> (\\<lambda>x. a + (b - a) * x) -` {?x})", "have scale_shif_pw_smth: \"(\\<lambda>x. (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\nusing this:\n  finite ({0..1} \\<inter> (\\<lambda>x. a + (b - a) * x) -` {?x})\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. a + (b - a) * x) piecewise_C1_differentiable_on {0..1}", "using C1_differentiable_imp_piecewise [OF scale_shift_smooth]"], ["proof (prove)\nusing this:\n  finite ({0..1} \\<inter> (\\<lambda>x. a + (b - a) * x) -` {?x})\n  (\\<lambda>x. ?a1 + ?b1 * x) piecewise_C1_differentiable_on ?S\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. a + (b - a) * x) piecewise_C1_differentiable_on {0..1}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. a + (b - a) * x) piecewise_C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (1, y)) piecewise_C1_differentiable_on {0..1}", "have g1_smooth: \"g1 piecewise_C1_differentiable_on (\\<lambda>x. a + (b - a) * x) ` {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g1 piecewise_C1_differentiable_on (\\<lambda>x. a + (b - a) * x) ` {0..1}", "using add_scale_img[OF twoCisTypeII(1)] twoCisTypeII(5)"], ["proof (prove)\nusing this:\n  (\\<lambda>x. a + (b - a) * x) ` {0..1} = {a..b}\n  g1 piecewise_C1_differentiable_on {a..b}\n\ngoal (1 subgoal):\n 1. g1 piecewise_C1_differentiable_on (\\<lambda>x. a + (b - a) * x) ` {0..1}", "by auto"], ["proof (state)\nthis:\n  g1 piecewise_C1_differentiable_on (\\<lambda>x. a + (b - a) * x) ` {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (1, y)) piecewise_C1_differentiable_on {0..1}", "have \"(\\<lambda>x. g1 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. g1 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}", "using piecewise_C1_differentiable_compose[OF scale_shif_pw_smth g1_smooth finite_vimg]"], ["proof (prove)\nusing this:\n  g1 \\<circ> (\\<lambda>x. a + (b - a) * x) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. g1 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}", "by (auto simp add: o_def)"], ["proof (state)\nthis:\n  (\\<lambda>x. g1 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (1, y)) piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x. g1 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}", "have \"(\\<lambda>x::real. (g1 (a + (b - a) * x), a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\nusing this:\n  (\\<lambda>x. g1 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (g1 (a + (b - a) * x),\n         a + (b - a) * x)) piecewise_C1_differentiable_on\n    {0..1}", "using all_components_smooth_one_pw_smooth_is_pw_smooth[where f = \"(\\<lambda>x::real. (g1 (a + (b - a) * x), a + (b - a) * x))\"]"], ["proof (prove)\nusing this:\n  (\\<lambda>x. g1 (a + (b - a) * x)) piecewise_C1_differentiable_on {0..1}\n  \\<lbrakk>\\<And>i.\n              i \\<in> Basis - {?j} \\<Longrightarrow>\n              (\\<lambda>x.\n                  (g1 (a + (b - a) * x), a + (b - a) * x) \\<bullet>\n                  i) C1_differentiable_on\n              ?s;\n   (\\<lambda>x.\n       (g1 (a + (b - a) * x), a + (b - a) * x) \\<bullet>\n       ?j) piecewise_C1_differentiable_on\n   ?s\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>x.\n                        (g1 (a + (b - a) * x),\n                         a + (b - a) * x)) piecewise_C1_differentiable_on\n                    ?s\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (g1 (a + (b - a) * x),\n         a + (b - a) * x)) piecewise_C1_differentiable_on\n    {0..1}", "by (fastforce simp add: real_pair_basis)"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      (g1 (a + (b - a) * x),\n       a + (b - a) * x)) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (1, y)) piecewise_C1_differentiable_on {0..1}", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x.\n      (g1 (a + (b - a) * x),\n       a + (b - a) * x)) piecewise_C1_differentiable_on\n  {0..1}", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (g1 (a + (b - a) * x),\n       a + (b - a) * x)) piecewise_C1_differentiable_on\n  {0..1}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (1, y)) piecewise_C1_differentiable_on {0..1}", "using right_edge_explicit"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (g1 (a + (b - a) * x),\n       a + (b - a) * x)) piecewise_C1_differentiable_on\n  {0..1}\n  (\\<lambda>y. twoC (1, y)) =\n  (\\<lambda>x. (g1 (a + (b - a) * x), a + (b - a) * x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. twoC (1, y)) piecewise_C1_differentiable_on {0..1}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>y. twoC (1, y)) piecewise_C1_differentiable_on {0..1}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>y. twoC (1, y)) piecewise_C1_differentiable_on {0..1}\n\ngoal (2 subgoals):\n 1. integral (cubeImage twoC)\n     (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} (boundary twoC)\n 2. \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n       line_integral_exists F {j} \\<gamma>", "have bottom_edge_explicit: \"?bottom_edge = (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 0)) =\n    (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))", "by (simp add: twoCisTypeII(4) algebra_simps)"], ["proof (state)\nthis:\n  (\\<lambda>x. twoC (x, 0)) =\n  (\\<lambda>x. (g2 a + x *\\<^sub>R (g1 a - g2 a), a))\n\ngoal (2 subgoals):\n 1. integral (cubeImage twoC)\n     (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} (boundary twoC)\n 2. \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n       line_integral_exists F {j} \\<gamma>", "show \"integral (cubeImage twoC) (\\<lambda>a. partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> j) i  a) = one_chain_line_integral F {j} (boundary twoC)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral (cubeImage twoC)\n     (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} (boundary twoC)", "using Greens_thm_type_II[OF twoCisTypeII(3) left_edge_explicit left_edge_smooth\n        top_edge_explicit right_edge_explicit right_edge_smooth\n        bottom_edge_explicit f_analytically_valid\n        twoCisTypeII(2) twoCisTypeII(1)]\n      line_integral_around_boundary"], ["proof (prove)\nusing this:\n  - line_integral F {j} (\\<lambda>y. twoC (0, y)) -\n  line_integral F {j} (\\<lambda>x. twoC (x, 1)) +\n  line_integral F {j} (\\<lambda>y. twoC (1, y)) +\n  line_integral F {j} (\\<lambda>x. twoC (x, 0)) =\n  integral (cubeImage twoC)\n   (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n  line_integral_exists F {j} (\\<lambda>y. twoC (0, y))\n  line_integral_exists F {j} (\\<lambda>x. twoC (x, 1))\n  line_integral_exists F {j} (\\<lambda>y. twoC (1, y))\n  line_integral_exists F {j} (\\<lambda>x. twoC (x, 0))\n  one_chain_line_integral F {j} (boundary twoC) =\n  line_integral F {j} (\\<lambda>x. twoC (x, 0)) +\n  line_integral F {j} (\\<lambda>y. twoC (1, y)) -\n  line_integral F {j} (\\<lambda>x. twoC (x, 1)) -\n  line_integral F {j} (\\<lambda>y. twoC (0, y))\n\ngoal (1 subgoal):\n 1. integral (cubeImage twoC)\n     (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} (boundary twoC)", "by auto"], ["proof (state)\nthis:\n  integral (cubeImage twoC)\n   (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n  one_chain_line_integral F {j} (boundary twoC)\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n       line_integral_exists F {j} \\<gamma>", "have \"line_integral_exists F {j} \\<gamma>\" if \"(k,\\<gamma>) \\<in> boundary twoC\" for k \\<gamma>"], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral_exists F {j} \\<gamma>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. line_integral_exists F {j} \\<gamma>", "have \"line_integral_exists F {j} (\\<lambda>y. twoC (0, y))\"\n         \"line_integral_exists F {j} (\\<lambda>x. twoC (x, 1))\"\n         \"line_integral_exists F {j} (\\<lambda>y. twoC (1, y))\"\n         \"line_integral_exists F {j} (\\<lambda>x. twoC (x, 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (line_integral_exists F {j} (\\<lambda>y. twoC (0, y)) &&&\n     line_integral_exists F {j} (\\<lambda>x. twoC (x, 1))) &&&\n    line_integral_exists F {j} (\\<lambda>y. twoC (1, y)) &&&\n    line_integral_exists F {j} (\\<lambda>x. twoC (x, 0))", "using Greens_thm_type_II[OF twoCisTypeII(3) left_edge_explicit left_edge_smooth\n          top_edge_explicit right_edge_explicit right_edge_smooth\n          bottom_edge_explicit f_analytically_valid\n          twoCisTypeII(2) twoCisTypeII(1)] line_integral_around_boundary"], ["proof (prove)\nusing this:\n  - line_integral F {j} (\\<lambda>y. twoC (0, y)) -\n  line_integral F {j} (\\<lambda>x. twoC (x, 1)) +\n  line_integral F {j} (\\<lambda>y. twoC (1, y)) +\n  line_integral F {j} (\\<lambda>x. twoC (x, 0)) =\n  integral (cubeImage twoC)\n   (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n  line_integral_exists F {j} (\\<lambda>y. twoC (0, y))\n  line_integral_exists F {j} (\\<lambda>x. twoC (x, 1))\n  line_integral_exists F {j} (\\<lambda>y. twoC (1, y))\n  line_integral_exists F {j} (\\<lambda>x. twoC (x, 0))\n  one_chain_line_integral F {j} (boundary twoC) =\n  line_integral F {j} (\\<lambda>x. twoC (x, 0)) +\n  line_integral F {j} (\\<lambda>y. twoC (1, y)) -\n  line_integral F {j} (\\<lambda>x. twoC (x, 1)) -\n  line_integral F {j} (\\<lambda>y. twoC (0, y))\n\ngoal (1 subgoal):\n 1. (line_integral_exists F {j} (\\<lambda>y. twoC (0, y)) &&&\n     line_integral_exists F {j} (\\<lambda>x. twoC (x, 1))) &&&\n    line_integral_exists F {j} (\\<lambda>y. twoC (1, y)) &&&\n    line_integral_exists F {j} (\\<lambda>x. twoC (x, 0))", "by auto"], ["proof (state)\nthis:\n  line_integral_exists F {j} (\\<lambda>y. twoC (0, y))\n  line_integral_exists F {j} (\\<lambda>x. twoC (x, 1))\n  line_integral_exists F {j} (\\<lambda>y. twoC (1, y))\n  line_integral_exists F {j} (\\<lambda>x. twoC (x, 0))\n\ngoal (1 subgoal):\n 1. line_integral_exists F {j} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  line_integral_exists F {j} (\\<lambda>y. twoC (0, y))\n  line_integral_exists F {j} (\\<lambda>x. twoC (x, 1))\n  line_integral_exists F {j} (\\<lambda>y. twoC (1, y))\n  line_integral_exists F {j} (\\<lambda>x. twoC (x, 0))", "show \"line_integral_exists F {j} \\<gamma>\""], ["proof (prove)\nusing this:\n  line_integral_exists F {j} (\\<lambda>y. twoC (0, y))\n  line_integral_exists F {j} (\\<lambda>x. twoC (x, 1))\n  line_integral_exists F {j} (\\<lambda>y. twoC (1, y))\n  line_integral_exists F {j} (\\<lambda>x. twoC (x, 0))\n\ngoal (1 subgoal):\n 1. line_integral_exists F {j} \\<gamma>", "using that"], ["proof (prove)\nusing this:\n  line_integral_exists F {j} (\\<lambda>y. twoC (0, y))\n  line_integral_exists F {j} (\\<lambda>x. twoC (x, 1))\n  line_integral_exists F {j} (\\<lambda>y. twoC (1, y))\n  line_integral_exists F {j} (\\<lambda>x. twoC (x, 0))\n  (k, \\<gamma>) \\<in> boundary twoC\n\ngoal (1 subgoal):\n 1. line_integral_exists F {j} \\<gamma>", "by (auto simp add: boundary_def horizontal_boundary_def vertical_boundary_def)"], ["proof (state)\nthis:\n  line_integral_exists F {j} \\<gamma>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (?k, ?\\<gamma>) \\<in> boundary twoC \\<Longrightarrow>\n  line_integral_exists F {j} ?\\<gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n       line_integral_exists F {j} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  (?k, ?\\<gamma>) \\<in> boundary twoC \\<Longrightarrow>\n  line_integral_exists F {j} ?\\<gamma>", "show \"\\<forall>(k,\\<gamma>) \\<in> boundary twoC. line_integral_exists F {j} \\<gamma>\""], ["proof (prove)\nusing this:\n  (?k, ?\\<gamma>) \\<in> boundary twoC \\<Longrightarrow>\n  line_integral_exists F {j} ?\\<gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n       line_integral_exists F {j} \\<gamma>", "by auto"], ["proof (state)\nthis:\n  \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n     line_integral_exists F {j} \\<gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma line_integral_exists_on_typeII_Cube_boundaries':\n  assumes \"(k,\\<gamma>) \\<in> boundary twoC\"\n  shows \"line_integral_exists F {j} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral_exists F {j} \\<gamma>", "using assms GreenThm_typeII_twoCube(2)"], ["proof (prove)\nusing this:\n  (k, \\<gamma>) \\<in> boundary twoC\n  \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n     line_integral_exists F {j} \\<gamma>\n\ngoal (1 subgoal):\n 1. line_integral_exists F {j} \\<gamma>", "by blast"], ["", "end"], ["", "locale green_typeII_chain =  R2 + \n  fixes F two_chain s\n  assumes valid_typeII_div: \"valid_typeII_division s two_chain\" and\n          F_anal_valid: \"\\<forall>twoC \\<in> two_chain. analytically_valid (cubeImage twoC) (\\<lambda>x. (F x) \\<bullet> j) i\"\nbegin"], ["", "lemma two_chain_valid_valid_cubes: \"\\<forall>two_cube \\<in> two_chain. valid_two_cube two_cube\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>two_cube\\<in>two_chain. valid_two_cube two_cube", "using valid_typeII_div"], ["proof (prove)\nusing this:\n  valid_typeII_division s two_chain\n\ngoal (1 subgoal):\n 1. \\<forall>two_cube\\<in>two_chain. valid_two_cube two_cube", "by (auto simp add: valid_two_chain_def)"], ["", "lemma typeII_chain_line_integral_exists_boundary':\n  shows \"\\<forall>(k,\\<gamma>) \\<in> two_chain_vertical_boundary two_chain. line_integral_exists F {j} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n       line_integral_exists F {j} \\<gamma>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n       line_integral_exists F {j} \\<gamma>", "have integ_exis: \"\\<forall>(k,\\<gamma>) \\<in> two_chain_boundary two_chain. line_integral_exists F {j} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n       line_integral_exists F {j} \\<gamma>", "using green_typeII_cube.line_integral_exists_on_typeII_Cube_boundaries'[of i j] F_anal_valid valid_typeII_div"], ["proof (prove)\nusing this:\n  \\<lbrakk>green_typeII_cube i j ?twoC ?F;\n   (?k, ?\\<gamma>) \\<in> boundary ?twoC\\<rbrakk>\n  \\<Longrightarrow> line_integral_exists ?F {j} ?\\<gamma>\n  \\<forall>twoC\\<in>two_chain.\n     analytically_valid (cubeImage twoC) (\\<lambda>x. F x \\<bullet> j) i\n  valid_typeII_division s two_chain\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n       line_integral_exists F {j} \\<gamma>", "apply(auto simp add:  two_chain_boundary_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y a b.\n       \\<lbrakk>\\<And>twoC F k \\<gamma>.\n                   \\<lbrakk>green_typeII_cube i j twoC F;\n                    (k, \\<gamma>) \\<in> boundary twoC\\<rbrakk>\n                   \\<Longrightarrow> line_integral_exists F {j} \\<gamma>;\n        \\<forall>twoC\\<in>two_chain.\n           analytically_valid (cubeImage twoC) (\\<lambda>x. F x \\<bullet> j)\n            i;\n        y \\<in> two_chain; (a, b) \\<in> boundary y;\n        \\<forall>x\\<in>two_chain. typeII_twoCube x;\n        gen_division s (cubeImage ` two_chain);\n        valid_two_chain two_chain\\<rbrakk>\n       \\<Longrightarrow> line_integral_exists F {j} b", "using R2_axioms green_typeII_cube_axioms_def green_typeII_cube_def two_chain_valid_valid_cubes"], ["proof (prove)\nusing this:\n  R2 i j\n  green_typeII_cube_axioms ?i ?j ?twoC ?F \\<equiv>\n  typeII_twoCube ?twoC \\<and>\n  valid_two_cube ?twoC \\<and>\n  analytically_valid (cubeImage ?twoC) (\\<lambda>x. ?F x \\<bullet> ?j) ?i\n  green_typeII_cube ?i ?j ?twoC ?F \\<equiv>\n  R2 ?i ?j \\<and> green_typeII_cube_axioms ?i ?j ?twoC ?F\n  \\<forall>two_cube\\<in>two_chain. valid_two_cube two_cube\n\ngoal (1 subgoal):\n 1. \\<And>y a b.\n       \\<lbrakk>\\<And>twoC F k \\<gamma>.\n                   \\<lbrakk>green_typeII_cube i j twoC F;\n                    (k, \\<gamma>) \\<in> boundary twoC\\<rbrakk>\n                   \\<Longrightarrow> line_integral_exists F {j} \\<gamma>;\n        \\<forall>twoC\\<in>two_chain.\n           analytically_valid (cubeImage twoC) (\\<lambda>x. F x \\<bullet> j)\n            i;\n        y \\<in> two_chain; (a, b) \\<in> boundary y;\n        \\<forall>x\\<in>two_chain. typeII_twoCube x;\n        gen_division s (cubeImage ` two_chain);\n        valid_two_chain two_chain\\<rbrakk>\n       \\<Longrightarrow> line_integral_exists F {j} b", "by blast"], ["proof (state)\nthis:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n     line_integral_exists F {j} \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n       line_integral_exists F {j} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n     line_integral_exists F {j} \\<gamma>", "show integ_exis_vert:\n    \"\\<forall>(k,\\<gamma>) \\<in> two_chain_vertical_boundary two_chain. line_integral_exists F {j} \\<gamma>\""], ["proof (prove)\nusing this:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n     line_integral_exists F {j} \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n       line_integral_exists F {j} \\<gamma>", "by (simp add: two_chain_boundary_def two_chain_vertical_boundary_def boundary_def)"], ["proof (state)\nthis:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n     line_integral_exists F {j} \\<gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma typeII_chain_line_integral_exists_boundary'':\n     \"\\<forall>(k,\\<gamma>) \\<in> two_chain_horizontal_boundary two_chain. line_integral_exists F {j} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_horizontal_boundary two_chain.\n       line_integral_exists F {j} \\<gamma>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_horizontal_boundary two_chain.\n       line_integral_exists F {j} \\<gamma>", "have integ_exis: \"\\<forall>(k,\\<gamma>) \\<in> two_chain_boundary two_chain. line_integral_exists F {j} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n       line_integral_exists F {j} \\<gamma>", "using green_typeII_cube.line_integral_exists_on_typeII_Cube_boundaries'[of i j] valid_typeII_div"], ["proof (prove)\nusing this:\n  \\<lbrakk>green_typeII_cube i j ?twoC ?F;\n   (?k, ?\\<gamma>) \\<in> boundary ?twoC\\<rbrakk>\n  \\<Longrightarrow> line_integral_exists ?F {j} ?\\<gamma>\n  valid_typeII_division s two_chain\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n       line_integral_exists F {j} \\<gamma>", "apply (simp add: two_chain_boundary_def boundary_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>twoC F k \\<gamma>.\n                \\<lbrakk>green_typeII_cube i j twoC F;\n                 (k, \\<gamma>) \\<in> horizontal_boundary twoC \\<or>\n                 (k, \\<gamma>) \\<in> vertical_boundary twoC\\<rbrakk>\n                \\<Longrightarrow> line_integral_exists F {j} \\<gamma>;\n     valid_typeII_division s two_chain\\<rbrakk>\n    \\<Longrightarrow> \\<forall>y\\<in>two_chain.\n                         \\<forall>x\\<in>horizontal_boundary y \\<union>\n  vertical_boundary y.\n                            case x of\n                            (k, x) \\<Rightarrow>\n                              line_integral_exists F {j} x", "using F_anal_valid R2_axioms green_typeII_cube_axioms_def green_typeII_cube_def two_chain_valid_valid_cubes"], ["proof (prove)\nusing this:\n  \\<forall>twoC\\<in>two_chain.\n     analytically_valid (cubeImage twoC) (\\<lambda>x. F x \\<bullet> j) i\n  R2 i j\n  green_typeII_cube_axioms ?i ?j ?twoC ?F \\<equiv>\n  typeII_twoCube ?twoC \\<and>\n  valid_two_cube ?twoC \\<and>\n  analytically_valid (cubeImage ?twoC) (\\<lambda>x. ?F x \\<bullet> ?j) ?i\n  green_typeII_cube ?i ?j ?twoC ?F \\<equiv>\n  R2 ?i ?j \\<and> green_typeII_cube_axioms ?i ?j ?twoC ?F\n  \\<forall>two_cube\\<in>two_chain. valid_two_cube two_cube\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>twoC F k \\<gamma>.\n                \\<lbrakk>green_typeII_cube i j twoC F;\n                 (k, \\<gamma>) \\<in> horizontal_boundary twoC \\<or>\n                 (k, \\<gamma>) \\<in> vertical_boundary twoC\\<rbrakk>\n                \\<Longrightarrow> line_integral_exists F {j} \\<gamma>;\n     valid_typeII_division s two_chain\\<rbrakk>\n    \\<Longrightarrow> \\<forall>y\\<in>two_chain.\n                         \\<forall>x\\<in>horizontal_boundary y \\<union>\n  vertical_boundary y.\n                            case x of\n                            (k, x) \\<Rightarrow>\n                              line_integral_exists F {j} x", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n     line_integral_exists F {j} \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_horizontal_boundary two_chain.\n       line_integral_exists F {j} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n     line_integral_exists F {j} \\<gamma>", "show integ_exis_vert:\n    \"\\<forall>(k,\\<gamma>) \\<in> two_chain_horizontal_boundary two_chain. line_integral_exists F {j} \\<gamma>\""], ["proof (prove)\nusing this:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n     line_integral_exists F {j} \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_horizontal_boundary two_chain.\n       line_integral_exists F {j} \\<gamma>", "by (simp add: two_chain_boundary_def two_chain_horizontal_boundary_def boundary_def)"], ["proof (state)\nthis:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_horizontal_boundary two_chain.\n     line_integral_exists F {j} \\<gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma typeII_cube_line_integral_exists_boundary:\n     \"\\<forall>(k,\\<gamma>) \\<in> two_chain_boundary two_chain. line_integral_exists F {j} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n       line_integral_exists F {j} \\<gamma>", "using valid_typeII_div typeII_chain_line_integral_exists_boundary' typeII_chain_line_integral_exists_boundary''"], ["proof (prove)\nusing this:\n  valid_typeII_division s two_chain\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n     line_integral_exists F {j} \\<gamma>\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_horizontal_boundary two_chain.\n     line_integral_exists F {j} \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n       line_integral_exists F {j} \\<gamma>", "apply (auto simp add: two_chain_boundary_def two_chain_horizontal_boundary_def two_chain_vertical_boundary_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y a b.\n       \\<lbrakk>\\<forall>y\\<in>two_chain.\n                   \\<forall>x\\<in>vertical_boundary y.\n                      case x of\n                      (k, x) \\<Rightarrow> line_integral_exists F {j} x;\n        \\<forall>y\\<in>two_chain.\n           \\<forall>x\\<in>horizontal_boundary y.\n              case x of (k, x) \\<Rightarrow> line_integral_exists F {j} x;\n        y \\<in> two_chain; (a, b) \\<in> boundary y;\n        \\<forall>x\\<in>two_chain. typeII_twoCube x;\n        gen_division s (cubeImage ` two_chain);\n        valid_two_chain two_chain\\<rbrakk>\n       \\<Longrightarrow> line_integral_exists F {j} b", "using boundary_def"], ["proof (prove)\nusing this:\n  boundary ?twoC \\<equiv>\n  horizontal_boundary ?twoC \\<union> vertical_boundary ?twoC\n\ngoal (1 subgoal):\n 1. \\<And>y a b.\n       \\<lbrakk>\\<forall>y\\<in>two_chain.\n                   \\<forall>x\\<in>vertical_boundary y.\n                      case x of\n                      (k, x) \\<Rightarrow> line_integral_exists F {j} x;\n        \\<forall>y\\<in>two_chain.\n           \\<forall>x\\<in>horizontal_boundary y.\n              case x of (k, x) \\<Rightarrow> line_integral_exists F {j} x;\n        y \\<in> two_chain; (a, b) \\<in> boundary y;\n        \\<forall>x\\<in>two_chain. typeII_twoCube x;\n        gen_division s (cubeImage ` two_chain);\n        valid_two_chain two_chain\\<rbrakk>\n       \\<Longrightarrow> line_integral_exists F {j} b", "by auto"], ["", "lemma type_II_chain_horiz_bound_valid:\n     \"\\<forall>(k,\\<gamma>) \\<in> two_chain_horizontal_boundary two_chain. valid_path \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_horizontal_boundary two_chain.\n       valid_path \\<gamma>", "using valid_typeII_div typeII_edges_are_valid_paths"], ["proof (prove)\nusing this:\n  valid_typeII_division s two_chain\n  \\<lbrakk>typeII_twoCube ?twoC;\n   (?k, ?\\<gamma>) \\<in> boundary ?twoC\\<rbrakk>\n  \\<Longrightarrow> valid_path ?\\<gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_horizontal_boundary two_chain.\n       valid_path \\<gamma>", "by (force simp add: two_chain_boundary_def two_chain_horizontal_boundary_def boundary_def)"], ["", "lemma type_II_chain_vert_bound_valid: (*This and the previous one need to be used in all proofs*)\n     \"\\<forall>(k,\\<gamma>) \\<in> two_chain_vertical_boundary two_chain. valid_path \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n       valid_path \\<gamma>", "using typeII_edges_are_valid_paths valid_typeII_div"], ["proof (prove)\nusing this:\n  \\<lbrakk>typeII_twoCube ?twoC;\n   (?k, ?\\<gamma>) \\<in> boundary ?twoC\\<rbrakk>\n  \\<Longrightarrow> valid_path ?\\<gamma>\n  valid_typeII_division s two_chain\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n       valid_path \\<gamma>", "by (force simp add: two_chain_boundary_def two_chain_vertical_boundary_def boundary_def)"], ["", "lemma members_of_only_horiz_div_line_integrable':\n  assumes \"only_horizontal_division one_chain two_chain\"\n    \"(k::int, \\<gamma>)\\<in>one_chain\"\n    \"(k::int, \\<gamma>)\\<in>one_chain\"\n    \"finite two_chain\"\n    \"\\<forall>two_cube \\<in> two_chain. valid_two_cube two_cube\"\n  shows \"line_integral_exists F {j} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral_exists F {j} \\<gamma>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. line_integral_exists F {j} \\<gamma>", "have integ_exis: \"\\<forall>(k,\\<gamma>) \\<in> two_chain_boundary two_chain. line_integral_exists F {j} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n       line_integral_exists F {j} \\<gamma>", "using typeII_cube_line_integral_exists_boundary"], ["proof (prove)\nusing this:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n     line_integral_exists F {j} \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n       line_integral_exists F {j} \\<gamma>", "by blast"], ["proof (state)\nthis:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n     line_integral_exists F {j} \\<gamma>\n\ngoal (1 subgoal):\n 1. line_integral_exists F {j} \\<gamma>", "have integ_exis_vert:\n    \"\\<forall>(k,\\<gamma>) \\<in> two_chain_vertical_boundary two_chain. line_integral_exists F {j} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n       line_integral_exists F {j} \\<gamma>", "using typeII_chain_line_integral_exists_boundary' assms"], ["proof (prove)\nusing this:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n     line_integral_exists F {j} \\<gamma>\n  only_horizontal_division one_chain two_chain\n  (k, \\<gamma>) \\<in> one_chain\n  (k, \\<gamma>) \\<in> one_chain\n  finite two_chain\n  \\<forall>two_cube\\<in>two_chain. valid_two_cube two_cube\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n       line_integral_exists F {j} \\<gamma>", "by auto"], ["proof (state)\nthis:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n     line_integral_exists F {j} \\<gamma>\n\ngoal (1 subgoal):\n 1. line_integral_exists F {j} \\<gamma>", "have integ_exis_horiz:\n    \"(\\<And>k \\<gamma>. (\\<exists>(k', \\<gamma>') \\<in> two_chain_horizontal_boundary two_chain. \\<exists>a\\<in>{0..1}. \\<exists>b\\<in>{0..1}. a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>) \\<Longrightarrow>\n                            line_integral_exists F {j} \\<gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k \\<gamma>.\n       \\<exists>(k', \\<gamma>')\\<in>two_chain_horizontal_boundary two_chain.\n          \\<exists>a\\<in>{0..1}.\n             \\<exists>b\\<in>{0..1}.\n                a \\<le> b \\<and>\n                subpath a b \\<gamma>' = \\<gamma> \\<Longrightarrow>\n       line_integral_exists F {j} \\<gamma>", "using integ_exis type_II_chain_horiz_bound_valid"], ["proof (prove)\nusing this:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n     line_integral_exists F {j} \\<gamma>\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_horizontal_boundary two_chain.\n     valid_path \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<And>k \\<gamma>.\n       \\<exists>(k', \\<gamma>')\\<in>two_chain_horizontal_boundary two_chain.\n          \\<exists>a\\<in>{0..1}.\n             \\<exists>b\\<in>{0..1}.\n                a \\<le> b \\<and>\n                subpath a b \\<gamma>' = \\<gamma> \\<Longrightarrow>\n       line_integral_exists F {j} \\<gamma>", "using line_integral_exists_subpath[of \"F\" \"{j}\"]"], ["proof (prove)\nusing this:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n     line_integral_exists F {j} \\<gamma>\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_horizontal_boundary two_chain.\n     valid_path \\<gamma>\n  \\<lbrakk>line_integral_exists F {j} ?g; valid_path ?g; ?u \\<in> {0..1};\n   ?v \\<in> {0..1}; ?u \\<le> ?v\\<rbrakk>\n  \\<Longrightarrow> line_integral_exists F {j} (subpath ?u ?v ?g)\n\ngoal (1 subgoal):\n 1. \\<And>k \\<gamma>.\n       \\<exists>(k', \\<gamma>')\\<in>two_chain_horizontal_boundary two_chain.\n          \\<exists>a\\<in>{0..1}.\n             \\<exists>b\\<in>{0..1}.\n                a \\<le> b \\<and>\n                subpath a b \\<gamma>' = \\<gamma> \\<Longrightarrow>\n       line_integral_exists F {j} \\<gamma>", "by (fastforce simp add: two_chain_boundary_def two_chain_horizontal_boundary_def\n        two_chain_vertical_boundary_def boundary_def)"], ["proof (state)\nthis:\n  \\<exists>(k', \\<gamma>')\\<in>two_chain_horizontal_boundary two_chain.\n     \\<exists>a\\<in>{0..1}.\n        \\<exists>b\\<in>{0..1}.\n           a \\<le> b \\<and>\n           subpath a b \\<gamma>' = ?\\<gamma> \\<Longrightarrow>\n  line_integral_exists F {j} ?\\<gamma>\n\ngoal (1 subgoal):\n 1. line_integral_exists F {j} \\<gamma>", "obtain \\<H> \\<V> where hv_props: \"finite \\<H>\"\n        \"(\\<forall>(k,\\<gamma>) \\<in> \\<H>. (\\<exists>(k', \\<gamma>') \\<in> two_chain_horizontal_boundary two_chain.\n            (\\<exists>a \\<in> {0 .. 1}. \\<exists>b \\<in> {0..1}. a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>)))\"\n        \"one_chain = \\<H> \\<union> \\<V>\"\n        \"((common_sudiv_exists (two_chain_vertical_boundary two_chain) \\<V>)\n          \\<or> common_reparam_exists \\<V> (two_chain_vertical_boundary two_chain))\"\n    \"finite \\<V>\"\n    \"boundary_chain \\<V>\"\n    \"\\<forall>(k,\\<gamma>)\\<in>\\<V>. valid_path \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<H> \\<V>.\n        \\<lbrakk>finite \\<H>;\n         \\<forall>(k, \\<gamma>)\\<in>\\<H>.\n            \\<exists>(k', \\<gamma>')\n                     \\<in>two_chain_horizontal_boundary two_chain.\n               \\<exists>a\\<in>{0..1}.\n                  \\<exists>b\\<in>{0..1}.\n                     a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>;\n         one_chain = \\<H> \\<union> \\<V>;\n         common_sudiv_exists (two_chain_vertical_boundary two_chain)\n          \\<V> \\<or>\n         common_reparam_exists \\<V> (two_chain_vertical_boundary two_chain);\n         finite \\<V>; boundary_chain \\<V>;\n         \\<forall>(k, \\<gamma>)\\<in>\\<V>. valid_path \\<gamma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(1)"], ["proof (prove)\nusing this:\n  only_horizontal_division one_chain two_chain\n\ngoal (1 subgoal):\n 1. (\\<And>\\<H> \\<V>.\n        \\<lbrakk>finite \\<H>;\n         \\<forall>(k, \\<gamma>)\\<in>\\<H>.\n            \\<exists>(k', \\<gamma>')\n                     \\<in>two_chain_horizontal_boundary two_chain.\n               \\<exists>a\\<in>{0..1}.\n                  \\<exists>b\\<in>{0..1}.\n                     a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>;\n         one_chain = \\<H> \\<union> \\<V>;\n         common_sudiv_exists (two_chain_vertical_boundary two_chain)\n          \\<V> \\<or>\n         common_reparam_exists \\<V> (two_chain_vertical_boundary two_chain);\n         finite \\<V>; boundary_chain \\<V>;\n         \\<forall>(k, \\<gamma>)\\<in>\\<V>. valid_path \\<gamma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding only_horizontal_division_def"], ["proof (prove)\nusing this:\n  \\<exists>\\<H> \\<V>.\n     finite \\<H> \\<and>\n     finite \\<V> \\<and>\n     (\\<forall>(k, \\<gamma>)\\<in>\\<H>.\n         \\<exists>(k', \\<gamma>')\n                  \\<in>two_chain_horizontal_boundary two_chain.\n            \\<exists>a\\<in>{0..1}.\n               \\<exists>b\\<in>{0..1}.\n                  a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>) \\<and>\n     (common_sudiv_exists (two_chain_vertical_boundary two_chain) \\<V> \\<or>\n      common_reparam_exists \\<V>\n       (two_chain_vertical_boundary two_chain)) \\<and>\n     boundary_chain \\<V> \\<and>\n     one_chain = \\<H> \\<union> \\<V> \\<and>\n     (\\<forall>(k, \\<gamma>)\\<in>\\<V>. valid_path \\<gamma>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<H> \\<V>.\n        \\<lbrakk>finite \\<H>;\n         \\<forall>(k, \\<gamma>)\\<in>\\<H>.\n            \\<exists>(k', \\<gamma>')\n                     \\<in>two_chain_horizontal_boundary two_chain.\n               \\<exists>a\\<in>{0..1}.\n                  \\<exists>b\\<in>{0..1}.\n                     a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>;\n         one_chain = \\<H> \\<union> \\<V>;\n         common_sudiv_exists (two_chain_vertical_boundary two_chain)\n          \\<V> \\<or>\n         common_reparam_exists \\<V> (two_chain_vertical_boundary two_chain);\n         finite \\<V>; boundary_chain \\<V>;\n         \\<forall>(k, \\<gamma>)\\<in>\\<V>. valid_path \\<gamma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  finite \\<H>\n  \\<forall>(k, \\<gamma>)\\<in>\\<H>.\n     \\<exists>(k', \\<gamma>')\\<in>two_chain_horizontal_boundary two_chain.\n        \\<exists>a\\<in>{0..1}.\n           \\<exists>b\\<in>{0..1}.\n              a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>\n  one_chain = \\<H> \\<union> \\<V>\n  common_sudiv_exists (two_chain_vertical_boundary two_chain) \\<V> \\<or>\n  common_reparam_exists \\<V> (two_chain_vertical_boundary two_chain)\n  finite \\<V>\n  boundary_chain \\<V>\n  \\<forall>(k, \\<gamma>)\\<in>\\<V>. valid_path \\<gamma>\n\ngoal (1 subgoal):\n 1. line_integral_exists F {j} \\<gamma>", "have finite_j: \"finite {j}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {j}", "by auto"], ["proof (state)\nthis:\n  finite {j}\n\ngoal (1 subgoal):\n 1. line_integral_exists F {j} \\<gamma>", "show \"line_integral_exists F {j} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral_exists F {j} \\<gamma>", "proof(cases \"common_sudiv_exists (two_chain_vertical_boundary two_chain) \\<V>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. common_sudiv_exists (two_chain_vertical_boundary two_chain)\n     \\<V> \\<Longrightarrow>\n    line_integral_exists F {j} \\<gamma>\n 2. \\<not> common_sudiv_exists (two_chain_vertical_boundary two_chain)\n            \\<V> \\<Longrightarrow>\n    line_integral_exists F {j} \\<gamma>", "case True"], ["proof (state)\nthis:\n  common_sudiv_exists (two_chain_vertical_boundary two_chain) \\<V>\n\ngoal (2 subgoals):\n 1. common_sudiv_exists (two_chain_vertical_boundary two_chain)\n     \\<V> \\<Longrightarrow>\n    line_integral_exists F {j} \\<gamma>\n 2. \\<not> common_sudiv_exists (two_chain_vertical_boundary two_chain)\n            \\<V> \\<Longrightarrow>\n    line_integral_exists F {j} \\<gamma>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral_exists F {j} \\<gamma>", "using gen_common_subdivision_imp_eq_line_integral(2)[OF True two_chain_vertical_boundary_is_boundary_chain hv_props(6) integ_exis_vert finite_two_chain_vertical_boundary[OF assms(4)] hv_props(5) finite_j]\n        integ_exis_horiz[of \"\\<gamma>\"] assms(3) case_prod_conv hv_props(2) hv_props(3)"], ["proof (prove)\nusing this:\n  \\<forall>(k, \\<gamma>)\\<in>\\<V>. line_integral_exists F {j} \\<gamma>\n  \\<exists>(k', \\<gamma>')\\<in>two_chain_horizontal_boundary two_chain.\n     \\<exists>a\\<in>{0..1}.\n        \\<exists>b\\<in>{0..1}.\n           a \\<le> b \\<and>\n           subpath a b \\<gamma>' = \\<gamma> \\<Longrightarrow>\n  line_integral_exists F {j} \\<gamma>\n  (k, \\<gamma>) \\<in> one_chain\n  (case (?a, ?b) of (c, d) \\<Rightarrow> ?f c d) = ?f ?a ?b\n  \\<forall>(k, \\<gamma>)\\<in>\\<H>.\n     \\<exists>(k', \\<gamma>')\\<in>two_chain_horizontal_boundary two_chain.\n        \\<exists>a\\<in>{0..1}.\n           \\<exists>b\\<in>{0..1}.\n              a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>\n  one_chain = \\<H> \\<union> \\<V>\n\ngoal (1 subgoal):\n 1. line_integral_exists F {j} \\<gamma>", "by fastforce"], ["proof (state)\nthis:\n  line_integral_exists F {j} \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<not> common_sudiv_exists (two_chain_vertical_boundary two_chain)\n            \\<V> \\<Longrightarrow>\n    line_integral_exists F {j} \\<gamma>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> common_sudiv_exists (two_chain_vertical_boundary two_chain)\n            \\<V> \\<Longrightarrow>\n    line_integral_exists F {j} \\<gamma>", "case False"], ["proof (state)\nthis:\n  \\<not> common_sudiv_exists (two_chain_vertical_boundary two_chain) \\<V>\n\ngoal (1 subgoal):\n 1. \\<not> common_sudiv_exists (two_chain_vertical_boundary two_chain)\n            \\<V> \\<Longrightarrow>\n    line_integral_exists F {j} \\<gamma>", "have i: \"{j} \\<subseteq> Basis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {j} \\<subseteq> Basis", "using j_is_y_axis real_pair_basis"], ["proof (prove)\nusing this:\n  j = (0, 1)\n  Basis = {(1, 0), (0, 1)}\n\ngoal (1 subgoal):\n 1. {j} \\<subseteq> Basis", "by auto"], ["proof (state)\nthis:\n  {j} \\<subseteq> Basis\n\ngoal (1 subgoal):\n 1. \\<not> common_sudiv_exists (two_chain_vertical_boundary two_chain)\n            \\<V> \\<Longrightarrow>\n    line_integral_exists F {j} \\<gamma>", "have ii: \" \\<forall>(k2, \\<gamma>2)\\<in>two_chain_vertical_boundary two_chain. \\<forall>b\\<in>{j}. continuous_on (path_image \\<gamma>2) (\\<lambda>x. F x \\<bullet> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(k2, \\<gamma>2)\\<in>two_chain_vertical_boundary two_chain.\n       \\<forall>b\\<in>{j}.\n          continuous_on (path_image \\<gamma>2) (\\<lambda>x. F x \\<bullet> b)", "using F_anal_valid field_cont_on_typeII_region_cont_on_edges valid_typeII_div"], ["proof (prove)\nusing this:\n  \\<forall>twoC\\<in>two_chain.\n     analytically_valid (cubeImage twoC) (\\<lambda>x. F x \\<bullet> j) i\n  \\<lbrakk>typeII_twoCube ?twoC; continuous_on (cubeImage ?twoC) ?F;\n   (?k, ?\\<gamma>) \\<in> boundary ?twoC\\<rbrakk>\n  \\<Longrightarrow> continuous_on (?\\<gamma> ` {0..1}) ?F\n  valid_typeII_division s two_chain\n\ngoal (1 subgoal):\n 1. \\<forall>(k2, \\<gamma>2)\\<in>two_chain_vertical_boundary two_chain.\n       \\<forall>b\\<in>{j}.\n          continuous_on (path_image \\<gamma>2) (\\<lambda>x. F x \\<bullet> b)", "by (fastforce simp add: analytically_valid_def two_chain_vertical_boundary_def boundary_def path_image_def)"], ["proof (state)\nthis:\n  \\<forall>(k2, \\<gamma>2)\\<in>two_chain_vertical_boundary two_chain.\n     \\<forall>b\\<in>{j}.\n        continuous_on (path_image \\<gamma>2) (\\<lambda>x. F x \\<bullet> b)\n\ngoal (1 subgoal):\n 1. \\<not> common_sudiv_exists (two_chain_vertical_boundary two_chain)\n            \\<V> \\<Longrightarrow>\n    line_integral_exists F {j} \\<gamma>", "show \"line_integral_exists F {j} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral_exists F {j} \\<gamma>", "using common_reparam_exists_imp_eq_line_integral(2)[OF finite_j hv_props(5) \n           finite_two_chain_vertical_boundary[OF assms(4)] hv_props(6) two_chain_vertical_boundary_is_boundary_chain ii _ hv_props(7) type_II_chain_vert_bound_valid]\n        integ_exis_horiz[of \"\\<gamma>\"] assms(3) hv_props False"], ["proof (prove)\nusing this:\n  common_reparam_exists \\<V>\n   (two_chain_vertical_boundary two_chain) \\<Longrightarrow>\n  \\<forall>(k, \\<gamma>)\\<in>\\<V>. line_integral_exists F {j} \\<gamma>\n  \\<exists>(k', \\<gamma>')\\<in>two_chain_horizontal_boundary two_chain.\n     \\<exists>a\\<in>{0..1}.\n        \\<exists>b\\<in>{0..1}.\n           a \\<le> b \\<and>\n           subpath a b \\<gamma>' = \\<gamma> \\<Longrightarrow>\n  line_integral_exists F {j} \\<gamma>\n  (k, \\<gamma>) \\<in> one_chain\n  finite \\<H>\n  \\<forall>(k, \\<gamma>)\\<in>\\<H>.\n     \\<exists>(k', \\<gamma>')\\<in>two_chain_horizontal_boundary two_chain.\n        \\<exists>a\\<in>{0..1}.\n           \\<exists>b\\<in>{0..1}.\n              a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>\n  one_chain = \\<H> \\<union> \\<V>\n  common_sudiv_exists (two_chain_vertical_boundary two_chain) \\<V> \\<or>\n  common_reparam_exists \\<V> (two_chain_vertical_boundary two_chain)\n  finite \\<V>\n  boundary_chain \\<V>\n  \\<forall>(k, \\<gamma>)\\<in>\\<V>. valid_path \\<gamma>\n  \\<not> common_sudiv_exists (two_chain_vertical_boundary two_chain) \\<V>\n\ngoal (1 subgoal):\n 1. line_integral_exists F {j} \\<gamma>", "by fastforce"], ["proof (state)\nthis:\n  line_integral_exists F {j} \\<gamma>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  line_integral_exists F {j} \\<gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma GreenThm_typeII_twoChain:\n  shows \"two_chain_integral two_chain (partial_vector_derivative (\\<lambda>a. (F a) \\<bullet> j)  i) = one_chain_line_integral F {j} (two_chain_boundary two_chain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. two_chain_integral two_chain\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) =\n    one_chain_line_integral F {j} (two_chain_boundary two_chain)", "proof (simp add: two_chain_boundary_def one_chain_line_integral_def two_chain_integral_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>C\\<in>two_chain.\n       integral (cubeImage C)\n        (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)) =\n    (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)", "let ?F_a' = \"partial_vector_derivative (\\<lambda>a. (F a) \\<bullet> j)  i\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>C\\<in>two_chain.\n       integral (cubeImage C)\n        (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)) =\n    (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)", "have \"(\\<Sum>(k,g)\\<in> boundary twoCube. k * line_integral F {j} g) = integral (cubeImage twoCube) (\\<lambda>a. ?F_a' a)\"\n    if \"twoCube \\<in> two_chain\" for twoCube"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>boundary twoCube.\n       real_of_int k * line_integral F {j} g) =\n    integral (cubeImage twoCube)\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)", "using green_typeII_cube.GreenThm_typeII_twoCube(1) valid_typeII_div F_anal_valid one_chain_line_integral_def valid_two_chain_def"], ["proof (prove)\nusing this:\n  green_typeII_cube ?i ?j ?twoC ?F \\<Longrightarrow>\n  integral (cubeImage ?twoC)\n   (partial_vector_derivative (\\<lambda>x. ?F x \\<bullet> ?j) ?i) =\n  one_chain_line_integral ?F {?j} (boundary ?twoC)\n  valid_typeII_division s two_chain\n  \\<forall>twoC\\<in>two_chain.\n     analytically_valid (cubeImage twoC) (\\<lambda>x. F x \\<bullet> j) i\n  one_chain_line_integral ?F ?b ?C \\<equiv>\n  \\<Sum>(k, g)\\<in>?C. real_of_int k * line_integral ?F ?b g\n  valid_two_chain ?twoChain \\<equiv>\n  (\\<forall>twoCube\\<in>?twoChain. valid_two_cube twoCube) \\<and>\n  pairwise (\\<lambda>c1 c2. boundary c1 \\<inter> boundary c2 = {})\n   ?twoChain \\<and>\n  inj_on cubeImage ?twoChain\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>boundary twoCube.\n       real_of_int k * line_integral F {j} g) =\n    integral (cubeImage twoCube)\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)", "by (simp add: R2_axioms green_typeII_cube_axioms_def green_typeII_cube_def that)"], ["proof (state)\nthis:\n  ?twoCube \\<in> two_chain \\<Longrightarrow>\n  (\\<Sum>(k, g)\\<in>boundary ?twoCube.\n     real_of_int k * line_integral F {j} g) =\n  integral (cubeImage ?twoCube)\n   (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n\ngoal (1 subgoal):\n 1. (\\<Sum>C\\<in>two_chain.\n       integral (cubeImage C)\n        (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)) =\n    (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)", "then"], ["proof (chain)\npicking this:\n  ?twoCube \\<in> two_chain \\<Longrightarrow>\n  (\\<Sum>(k, g)\\<in>boundary ?twoCube.\n     real_of_int k * line_integral F {j} g) =\n  integral (cubeImage ?twoCube)\n   (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)", "have double_sum_eq_sum:\n    \"(\\<Sum>twoCube\\<in>(two_chain).(\\<Sum>(k,g)\\<in> boundary twoCube. k * line_integral F {j} g))\n                     =  (\\<Sum>twoCube\\<in>(two_chain). integral (cubeImage twoCube) (\\<lambda>a. ?F_a' a))\""], ["proof (prove)\nusing this:\n  ?twoCube \\<in> two_chain \\<Longrightarrow>\n  (\\<Sum>(k, g)\\<in>boundary ?twoCube.\n     real_of_int k * line_integral F {j} g) =\n  integral (cubeImage ?twoCube)\n   (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n\ngoal (1 subgoal):\n 1. (\\<Sum>twoCube\\<in>two_chain.\n       \\<Sum>(k, g)\\<in>boundary twoCube.\n         real_of_int k * line_integral F {j} g) =\n    (\\<Sum>twoCube\\<in>two_chain.\n       integral (cubeImage twoCube)\n        (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i))", "using Finite_Cartesian_Product.sum_cong_aux"], ["proof (prove)\nusing this:\n  ?twoCube \\<in> two_chain \\<Longrightarrow>\n  (\\<Sum>(k, g)\\<in>boundary ?twoCube.\n     real_of_int k * line_integral F {j} g) =\n  integral (cubeImage ?twoCube)\n   (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)\n  (\\<And>x. x \\<in> ?A \\<Longrightarrow> ?f x = ?g x) \\<Longrightarrow>\n  sum ?f ?A = sum ?g ?A\n\ngoal (1 subgoal):\n 1. (\\<Sum>twoCube\\<in>two_chain.\n       \\<Sum>(k, g)\\<in>boundary twoCube.\n         real_of_int k * line_integral F {j} g) =\n    (\\<Sum>twoCube\\<in>two_chain.\n       integral (cubeImage twoCube)\n        (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i))", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>twoCube\\<in>two_chain.\n     \\<Sum>(k, g)\\<in>boundary twoCube.\n       real_of_int k * line_integral F {j} g) =\n  (\\<Sum>twoCube\\<in>two_chain.\n     integral (cubeImage twoCube)\n      (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i))\n\ngoal (1 subgoal):\n 1. (\\<Sum>C\\<in>two_chain.\n       integral (cubeImage C)\n        (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)) =\n    (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)", "have pairwise_disjoint_boundaries: \"\\<forall>x\\<in> (boundary ` two_chain). (\\<forall>y\\<in> (boundary ` two_chain). (x \\<noteq> y \\<longrightarrow> (x \\<inter> y = {})))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>boundary ` two_chain.\n       \\<forall>y\\<in>boundary ` two_chain.\n          x \\<noteq> y \\<longrightarrow> x \\<inter> y = {}", "using valid_typeII_div"], ["proof (prove)\nusing this:\n  valid_typeII_division s two_chain\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>boundary ` two_chain.\n       \\<forall>y\\<in>boundary ` two_chain.\n          x \\<noteq> y \\<longrightarrow> x \\<inter> y = {}", "by (fastforce simp add:  image_def valid_two_chain_def pairwise_def)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>boundary ` two_chain.\n     \\<forall>y\\<in>boundary ` two_chain.\n        x \\<noteq> y \\<longrightarrow> x \\<inter> y = {}\n\ngoal (1 subgoal):\n 1. (\\<Sum>C\\<in>two_chain.\n       integral (cubeImage C)\n        (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)) =\n    (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)", "have finite_boundaries: \"\\<forall>B \\<in> (boundary` two_chain). finite B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>B\\<in>boundary ` two_chain. finite B", "using valid_typeII_div image_iff"], ["proof (prove)\nusing this:\n  valid_typeII_division s two_chain\n  (?z \\<in> ?f ` ?A) = (\\<exists>x\\<in>?A. ?z = ?f x)\n\ngoal (1 subgoal):\n 1. \\<forall>B\\<in>boundary ` two_chain. finite B", "by (fastforce simp add: valid_two_cube_def valid_two_chain_def)"], ["proof (state)\nthis:\n  \\<forall>B\\<in>boundary ` two_chain. finite B\n\ngoal (1 subgoal):\n 1. (\\<Sum>C\\<in>two_chain.\n       integral (cubeImage C)\n        (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)) =\n    (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)", "have boundary_inj: \"inj_on boundary two_chain\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on boundary two_chain", "using valid_typeII_div"], ["proof (prove)\nusing this:\n  valid_typeII_division s two_chain\n\ngoal (1 subgoal):\n 1. inj_on boundary two_chain", "by (force simp add: valid_two_cube_def valid_two_chain_def pairwise_def inj_on_def)"], ["proof (state)\nthis:\n  inj_on boundary two_chain\n\ngoal (1 subgoal):\n 1. (\\<Sum>C\\<in>two_chain.\n       integral (cubeImage C)\n        (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)) =\n    (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)", "have \"(\\<Sum>x\\<in>(\\<Union>x\\<in>two_chain. boundary x). case x of (k, g) \\<Rightarrow> k * line_integral F {j} g) =\n                      (\\<Sum>twoCube\\<in>(two_chain).(\\<Sum>(k,g)\\<in> boundary twoCube. k * line_integral F {j} g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n    (\\<Sum>twoCube\\<in>two_chain.\n       \\<Sum>(k, g)\\<in>boundary twoCube.\n         real_of_int k * line_integral F {j} g)", "using sum.reindex[OF boundary_inj,  of \"\\<lambda>x. (\\<Sum>(k,g)\\<in> x. k * line_integral F {j} g)\"]"], ["proof (prove)\nusing this:\n  sum (sum (\\<lambda>(k, g). real_of_int k * line_integral F {j} g))\n   (boundary ` two_chain) =\n  sum (sum (\\<lambda>(k, g). real_of_int k * line_integral F {j} g) \\<circ>\n       boundary)\n   two_chain\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n    (\\<Sum>twoCube\\<in>two_chain.\n       \\<Sum>(k, g)\\<in>boundary twoCube.\n         real_of_int k * line_integral F {j} g)", "using sum.Union_disjoint[OF finite_boundaries\n        pairwise_disjoint_boundaries,\n        of \"\\<lambda>x. case x of (k, g) \\<Rightarrow> (k::int) * line_integral F {j} g\"]"], ["proof (prove)\nusing this:\n  sum (sum (\\<lambda>(k, g). real_of_int k * line_integral F {j} g))\n   (boundary ` two_chain) =\n  sum (sum (\\<lambda>(k, g). real_of_int k * line_integral F {j} g) \\<circ>\n       boundary)\n   two_chain\n  (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n     case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n  (sum \\<circ> sum)\n   (\\<lambda>x.\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)\n   (boundary ` two_chain)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n    (\\<Sum>twoCube\\<in>two_chain.\n       \\<Sum>(k, g)\\<in>boundary twoCube.\n         real_of_int k * line_integral F {j} g)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n     case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n  (\\<Sum>twoCube\\<in>two_chain.\n     \\<Sum>(k, g)\\<in>boundary twoCube.\n       real_of_int k * line_integral F {j} g)\n\ngoal (1 subgoal):\n 1. (\\<Sum>C\\<in>two_chain.\n       integral (cubeImage C)\n        (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)) =\n    (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)", "then"], ["proof (chain)\npicking this:\n  (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n     case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n  (\\<Sum>twoCube\\<in>two_chain.\n     \\<Sum>(k, g)\\<in>boundary twoCube.\n       real_of_int k * line_integral F {j} g)", "show \"(\\<Sum>C\\<in>two_chain. integral (cubeImage C) (\\<lambda>a. ?F_a' a)) = (\\<Sum>x\\<in>(\\<Union>x\\<in>two_chain. boundary x). case x of (k, g) \\<Rightarrow> k * line_integral F {j} g)\""], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n     case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n  (\\<Sum>twoCube\\<in>two_chain.\n     \\<Sum>(k, g)\\<in>boundary twoCube.\n       real_of_int k * line_integral F {j} g)\n\ngoal (1 subgoal):\n 1. (\\<Sum>C\\<in>two_chain.\n       integral (cubeImage C)\n        (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)) =\n    (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)", "using double_sum_eq_sum"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n     case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n  (\\<Sum>twoCube\\<in>two_chain.\n     \\<Sum>(k, g)\\<in>boundary twoCube.\n       real_of_int k * line_integral F {j} g)\n  (\\<Sum>twoCube\\<in>two_chain.\n     \\<Sum>(k, g)\\<in>boundary twoCube.\n       real_of_int k * line_integral F {j} g) =\n  (\\<Sum>twoCube\\<in>two_chain.\n     integral (cubeImage twoCube)\n      (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i))\n\ngoal (1 subgoal):\n 1. (\\<Sum>C\\<in>two_chain.\n       integral (cubeImage C)\n        (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)) =\n    (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>C\\<in>two_chain.\n     integral (cubeImage C)\n      (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)) =\n  (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n     case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma GreenThm_typeII_divisible:\n  assumes \n    gen_division: \"gen_division s (cubeImage ` two_chain)\"    (*This should follow from the assumption that images are not negligible*)\n  shows \"integral s (partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> j) i) = one_chain_line_integral F {j} (two_chain_boundary two_chain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} (two_chain_boundary two_chain)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} (two_chain_boundary two_chain)", "let ?F_a' = \"(partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> j) i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} (two_chain_boundary two_chain)", "have \"integral s (\\<lambda>x. ?F_a' x) = two_chain_integral two_chain (\\<lambda>a. ?F_a' a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    two_chain_integral two_chain\n     (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i)", "proof (simp add: two_chain_integral_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    (\\<Sum>C\\<in>two_chain.\n       integral (cubeImage C)\n        (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))", "have partial_deriv_integrable:\n      \"(?F_a' has_integral (integral (cubeImage twoCube) ?F_a')) (cubeImage twoCube)\"\n      if \"twoCube \\<in> two_chain\" for twoCube"], ["proof (prove)\ngoal (1 subgoal):\n 1. (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n     integral (cubeImage twoCube)\n      (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))\n     (cubeImage twoCube)", "by (simp add: analytically_valid_imp_part_deriv_integrable_on F_anal_valid integrable_integral that)"], ["proof (state)\nthis:\n  ?twoCube \\<in> two_chain \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n   integral (cubeImage ?twoCube)\n    (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))\n   (cubeImage ?twoCube)\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    (\\<Sum>C\\<in>two_chain.\n       integral (cubeImage C)\n        (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))", "then"], ["proof (chain)\npicking this:\n  ?twoCube \\<in> two_chain \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n   integral (cubeImage ?twoCube)\n    (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))\n   (cubeImage ?twoCube)", "have partial_deriv_integrable:\n      \"\\<And>twoCubeImg. twoCubeImg \\<in> cubeImage ` two_chain \\<Longrightarrow> ((\\<lambda>x. ?F_a' x) has_integral (integral (twoCubeImg) (\\<lambda>x. ?F_a' x))) (twoCubeImg)\""], ["proof (prove)\nusing this:\n  ?twoCube \\<in> two_chain \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n   integral (cubeImage ?twoCube)\n    (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))\n   (cubeImage ?twoCube)\n\ngoal (1 subgoal):\n 1. \\<And>twoCubeImg.\n       twoCubeImg \\<in> cubeImage ` two_chain \\<Longrightarrow>\n       (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j)\n         i has_integral\n        integral twoCubeImg\n         (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))\n        twoCubeImg", "using integrable_neg"], ["proof (prove)\nusing this:\n  ?twoCube \\<in> two_chain \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n   integral (cubeImage ?twoCube)\n    (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))\n   (cubeImage ?twoCube)\n  ?f integrable_on ?S \\<Longrightarrow>\n  (\\<lambda>x. - ?f x) integrable_on ?S\n\ngoal (1 subgoal):\n 1. \\<And>twoCubeImg.\n       twoCubeImg \\<in> cubeImage ` two_chain \\<Longrightarrow>\n       (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j)\n         i has_integral\n        integral twoCubeImg\n         (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))\n        twoCubeImg", "by force"], ["proof (state)\nthis:\n  ?twoCubeImg \\<in> cubeImage ` two_chain \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n   integral ?twoCubeImg\n    (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))\n   ?twoCubeImg\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    (\\<Sum>C\\<in>two_chain.\n       integral (cubeImage C)\n        (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))", "have finite_images: \"finite (cubeImage ` two_chain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (cubeImage ` two_chain)", "using gen_division gen_division_def"], ["proof (prove)\nusing this:\n  gen_division s (cubeImage ` two_chain)\n  gen_division ?s ?S \\<equiv>\n  finite ?S \\<and>\n  \\<Union> ?S = ?s \\<and>\n  pairwise (\\<lambda>X Y. negligible (X \\<inter> Y)) ?S\n\ngoal (1 subgoal):\n 1. finite (cubeImage ` two_chain)", "by auto"], ["proof (state)\nthis:\n  finite (cubeImage ` two_chain)\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    (\\<Sum>C\\<in>two_chain.\n       integral (cubeImage C)\n        (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))", "have negligible_images: \"pairwise (\\<lambda>S S'. negligible (S \\<inter> S')) (cubeImage ` two_chain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pairwise (\\<lambda>S S'. negligible (S \\<inter> S'))\n     (cubeImage ` two_chain)", "using gen_division"], ["proof (prove)\nusing this:\n  gen_division s (cubeImage ` two_chain)\n\ngoal (1 subgoal):\n 1. pairwise (\\<lambda>S S'. negligible (S \\<inter> S'))\n     (cubeImage ` two_chain)", "by (auto simp add: gen_division_def pairwise_def)"], ["proof (state)\nthis:\n  pairwise (\\<lambda>S S'. negligible (S \\<inter> S'))\n   (cubeImage ` two_chain)\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    (\\<Sum>C\\<in>two_chain.\n       integral (cubeImage C)\n        (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))", "have \"inj_on cubeImage two_chain\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on cubeImage two_chain", "using valid_typeII_div valid_two_chain_def"], ["proof (prove)\nusing this:\n  valid_typeII_division s two_chain\n  valid_two_chain ?twoChain \\<equiv>\n  (\\<forall>twoCube\\<in>?twoChain. valid_two_cube twoCube) \\<and>\n  pairwise (\\<lambda>c1 c2. boundary c1 \\<inter> boundary c2 = {})\n   ?twoChain \\<and>\n  inj_on cubeImage ?twoChain\n\ngoal (1 subgoal):\n 1. inj_on cubeImage two_chain", "by auto"], ["proof (state)\nthis:\n  inj_on cubeImage two_chain\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    (\\<Sum>C\\<in>two_chain.\n       integral (cubeImage C)\n        (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))", "then"], ["proof (chain)\npicking this:\n  inj_on cubeImage two_chain", "have \"(\\<Sum>twoCubeImg\\<in>cubeImage ` two_chain. integral twoCubeImg (\\<lambda>x. ?F_a' x))\n             = (\\<Sum>C\\<in>two_chain. integral (cubeImage C) (\\<lambda>a. ?F_a' a))\""], ["proof (prove)\nusing this:\n  inj_on cubeImage two_chain\n\ngoal (1 subgoal):\n 1. (\\<Sum>twoCubeImg\\<in>cubeImage ` two_chain.\n       integral twoCubeImg\n        (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i)) =\n    (\\<Sum>C\\<in>two_chain.\n       integral (cubeImage C)\n        (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))", "using sum.reindex"], ["proof (prove)\nusing this:\n  inj_on cubeImage two_chain\n  inj_on ?h ?A \\<Longrightarrow> sum ?g (?h ` ?A) = sum (?g \\<circ> ?h) ?A\n\ngoal (1 subgoal):\n 1. (\\<Sum>twoCubeImg\\<in>cubeImage ` two_chain.\n       integral twoCubeImg\n        (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i)) =\n    (\\<Sum>C\\<in>two_chain.\n       integral (cubeImage C)\n        (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>twoCubeImg\\<in>cubeImage ` two_chain.\n     integral twoCubeImg\n      (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i)) =\n  (\\<Sum>C\\<in>two_chain.\n     integral (cubeImage C)\n      (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    (\\<Sum>C\\<in>two_chain.\n       integral (cubeImage C)\n        (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))", "then"], ["proof (chain)\npicking this:\n  (\\<Sum>twoCubeImg\\<in>cubeImage ` two_chain.\n     integral twoCubeImg\n      (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i)) =\n  (\\<Sum>C\\<in>two_chain.\n     integral (cubeImage C)\n      (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))", "show \"integral s (\\<lambda>x. ?F_a' x) = (\\<Sum>C\\<in>two_chain. integral (cubeImage C) (\\<lambda>a. ?F_a' a))\""], ["proof (prove)\nusing this:\n  (\\<Sum>twoCubeImg\\<in>cubeImage ` two_chain.\n     integral twoCubeImg\n      (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i)) =\n  (\\<Sum>C\\<in>two_chain.\n     integral (cubeImage C)\n      (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    (\\<Sum>C\\<in>two_chain.\n       integral (cubeImage C)\n        (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))", "using has_integral_Union[OF finite_images partial_deriv_integrable negligible_images] gen_division"], ["proof (prove)\nusing this:\n  (\\<Sum>twoCubeImg\\<in>cubeImage ` two_chain.\n     integral twoCubeImg\n      (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i)) =\n  (\\<Sum>C\\<in>two_chain.\n     integral (cubeImage C)\n      (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))\n  (\\<And>S.\n      S \\<in> cubeImage ` two_chain \\<Longrightarrow>\n      S \\<in> cubeImage ` two_chain) \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n   (\\<Sum>S\\<in>cubeImage ` two_chain.\n      integral S\n       (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i)))\n   (\\<Union> (cubeImage ` two_chain))\n  gen_division s (cubeImage ` two_chain)\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    (\\<Sum>C\\<in>two_chain.\n       integral (cubeImage C)\n        (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))", "by (auto simp add: gen_division_def)"], ["proof (state)\nthis:\n  integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n  (\\<Sum>C\\<in>two_chain.\n     integral (cubeImage C)\n      (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n  two_chain_integral two_chain\n   (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i)\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} (two_chain_boundary two_chain)", "then"], ["proof (chain)\npicking this:\n  integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n  two_chain_integral two_chain\n   (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i)", "show ?thesis"], ["proof (prove)\nusing this:\n  integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n  two_chain_integral two_chain\n   (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i)\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} (two_chain_boundary two_chain)", "using GreenThm_typeII_twoChain F_anal_valid"], ["proof (prove)\nusing this:\n  integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n  two_chain_integral two_chain\n   (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i)\n  two_chain_integral two_chain\n   (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) =\n  one_chain_line_integral F {j} (two_chain_boundary two_chain)\n  \\<forall>twoC\\<in>two_chain.\n     analytically_valid (cubeImage twoC) (\\<lambda>x. F x \\<bullet> j) i\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} (two_chain_boundary two_chain)", "by auto"], ["proof (state)\nthis:\n  integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n  one_chain_line_integral F {j} (two_chain_boundary two_chain)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma GreenThm_typeII_divisible_region_boundary_gen:\n  assumes only_horizontal_division: \"only_horizontal_division \\<gamma> two_chain\"\n  shows \"integral s (partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> j) i) = one_chain_line_integral F {j} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "let ?F_a' = \"(partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> j) i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "(*Proving that line_integral on the x axis is 0 for the vertical 1-cubes*)"], ["proof (state)\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "have horiz_line_integral_zero:\n    \"one_chain_line_integral F {j} (two_chain_horizontal_boundary two_chain) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j}\n     (two_chain_horizontal_boundary two_chain) =\n    0", "proof (simp add: one_chain_line_integral_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>two_chain_horizontal_boundary two_chain.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n    0", "have \"line_integral F {j} (snd oneCube) = 0\"\n      if \"oneCube \\<in> two_chain_horizontal_boundary(two_chain)\" for oneCube"], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "from that"], ["proof (chain)\npicking this:\n  oneCube \\<in> two_chain_horizontal_boundary two_chain", "obtain x y1 y2 k \n        where horiz_edge_def: \"oneCube = (k, (\\<lambda>t::real. ((1 - t) * (y2) + t * y1, x::real)))\""], ["proof (prove)\nusing this:\n  oneCube \\<in> two_chain_horizontal_boundary two_chain\n\ngoal (1 subgoal):\n 1. (\\<And>k y2 y1 x.\n        oneCube =\n        (k, \\<lambda>t. ((1 - t) * y2 + t * y1, x)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using valid_typeII_div"], ["proof (prove)\nusing this:\n  oneCube \\<in> two_chain_horizontal_boundary two_chain\n  valid_typeII_division s two_chain\n\ngoal (1 subgoal):\n 1. (\\<And>k y2 y1 x.\n        oneCube =\n        (k, \\<lambda>t. ((1 - t) * y2 + t * y1, x)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: typeII_twoCube_def two_chain_horizontal_boundary_def horizontal_boundary_def)"], ["proof (state)\nthis:\n  oneCube = (k, \\<lambda>t. ((1 - t) * y2 + t * y1, x))\n\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "let ?horiz_edge = \"(snd oneCube)\""], ["proof (state)\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "have horiz_edge_y_const: \"\\<forall>t. (?horiz_edge t) \\<bullet> j = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t. snd oneCube t \\<bullet> j = x", "by (auto simp add: horiz_edge_def real_inner_class.inner_add_left\n            euclidean_space_class.inner_not_same_Basis j_is_y_axis)"], ["proof (state)\nthis:\n  \\<forall>t. snd oneCube t \\<bullet> j = x\n\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "have horiz_edge_is_straight_path: \"?horiz_edge = (\\<lambda>t. (y2 + t * (y1 - y2), x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd oneCube = (\\<lambda>t. (y2 + t * (y1 - y2), x))", "by (auto simp: horiz_edge_def algebra_simps)"], ["proof (state)\nthis:\n  snd oneCube = (\\<lambda>t. (y2 + t * (y1 - y2), x))\n\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "have \"\\<forall>x. ?horiz_edge differentiable at x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. snd oneCube differentiable at x", "using horiz_edge_is_straight_path straight_path_diffrentiable_y"], ["proof (prove)\nusing this:\n  snd oneCube = (\\<lambda>t. (y2 + t * (y1 - y2), x))\n  ?\\<gamma> = (\\<lambda>x. (?y2.0 + ?y1.0 * x, ?b)) \\<Longrightarrow>\n  \\<forall>x. ?\\<gamma> differentiable at x\n\ngoal (1 subgoal):\n 1. \\<forall>x. snd oneCube differentiable at x", "by (metis mult_commute_abs)"], ["proof (state)\nthis:\n  \\<forall>x. snd oneCube differentiable at x\n\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "then"], ["proof (chain)\npicking this:\n  \\<forall>x. snd oneCube differentiable at x", "show \"line_integral F {j} (snd oneCube) = 0\""], ["proof (prove)\nusing this:\n  \\<forall>x. snd oneCube differentiable at x\n\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "using line_integral_on_pair_straight_path(1) j_is_y_axis real_pair_basis horiz_edge_y_const"], ["proof (prove)\nusing this:\n  \\<forall>x. snd oneCube differentiable at x\n  \\<lbrakk>\\<forall>x. ?\\<gamma> x \\<bullet> ?i = ?a;\n   \\<forall>x\\<in>{0..1}. ?\\<gamma> differentiable at x\\<rbrakk>\n  \\<Longrightarrow> line_integral ?F {?i} ?\\<gamma> = 0\n  j = (0, 1)\n  Basis = {(1, 0), (0, 1)}\n  \\<forall>t. snd oneCube t \\<bullet> j = x\n\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "by blast"], ["proof (state)\nthis:\n  line_integral F {j} (snd oneCube) = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?oneCube \\<in> two_chain_horizontal_boundary two_chain \\<Longrightarrow>\n  line_integral F {j} (snd ?oneCube) = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>two_chain_horizontal_boundary two_chain.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n    0", "then"], ["proof (chain)\npicking this:\n  ?oneCube \\<in> two_chain_horizontal_boundary two_chain \\<Longrightarrow>\n  line_integral F {j} (snd ?oneCube) = 0", "show \"(\\<Sum>x\\<in>two_chain_horizontal_boundary two_chain. case x of (k, g) \\<Rightarrow> k * line_integral F {j} g) = 0\""], ["proof (prove)\nusing this:\n  ?oneCube \\<in> two_chain_horizontal_boundary two_chain \\<Longrightarrow>\n  line_integral F {j} (snd ?oneCube) = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>two_chain_horizontal_boundary two_chain.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n    0", "by (force intro: sum.neutral)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>two_chain_horizontal_boundary two_chain.\n     case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n  0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  one_chain_line_integral F {j} (two_chain_horizontal_boundary two_chain) =\n  0\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "(*then, the x axis line_integral on the boundaries of the twoCube is equal to the line_integral on the horizontal boundaries of the twoCube \\<longrightarrow> 1*)"], ["proof (state)\nthis:\n  one_chain_line_integral F {j} (two_chain_horizontal_boundary two_chain) =\n  0\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "have boundary_is_finite: \"finite (two_chain_boundary two_chain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (two_chain_boundary two_chain)", "unfolding two_chain_boundary_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (\\<Union> (boundary ` two_chain))", "proof (rule finite_UN_I)"], ["proof (state)\ngoal (2 subgoals):\n 1. finite two_chain\n 2. \\<And>a. a \\<in> two_chain \\<Longrightarrow> finite (boundary a)", "show \"finite two_chain\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite two_chain", "using valid_typeII_div finite_image_iff gen_division_def valid_two_chain_def"], ["proof (prove)\nusing this:\n  valid_typeII_division s two_chain\n  inj_on ?f ?A \\<Longrightarrow> finite (?f ` ?A) = finite ?A\n  gen_division ?s ?S \\<equiv>\n  finite ?S \\<and>\n  \\<Union> ?S = ?s \\<and>\n  pairwise (\\<lambda>X Y. negligible (X \\<inter> Y)) ?S\n  valid_two_chain ?twoChain \\<equiv>\n  (\\<forall>twoCube\\<in>?twoChain. valid_two_cube twoCube) \\<and>\n  pairwise (\\<lambda>c1 c2. boundary c1 \\<inter> boundary c2 = {})\n   ?twoChain \\<and>\n  inj_on cubeImage ?twoChain\n\ngoal (1 subgoal):\n 1. finite two_chain", "by auto"], ["proof (state)\nthis:\n  finite two_chain\n\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> two_chain \\<Longrightarrow> finite (boundary a)", "show \"\\<And>a. a \\<in> two_chain \\<Longrightarrow> finite (boundary a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> two_chain \\<Longrightarrow> finite (boundary a)", "by (simp add: boundary_def horizontal_boundary_def vertical_boundary_def)"], ["proof (state)\nthis:\n  ?a \\<in> two_chain \\<Longrightarrow> finite (boundary ?a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finite (two_chain_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "have boundary_is_vert_hor:\n     \"two_chain_boundary two_chain =\n      (two_chain_vertical_boundary two_chain) \\<union>\n      (two_chain_horizontal_boundary two_chain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. two_chain_boundary two_chain =\n    two_chain_vertical_boundary two_chain \\<union>\n    two_chain_horizontal_boundary two_chain", "by(auto simp add: two_chain_boundary_def two_chain_vertical_boundary_def two_chain_horizontal_boundary_def\n        boundary_def)"], ["proof (state)\nthis:\n  two_chain_boundary two_chain =\n  two_chain_vertical_boundary two_chain \\<union>\n  two_chain_horizontal_boundary two_chain\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  two_chain_boundary two_chain =\n  two_chain_vertical_boundary two_chain \\<union>\n  two_chain_horizontal_boundary two_chain", "have hor_vert_finite:\n    \"finite (two_chain_vertical_boundary two_chain)\"\n    \"finite (two_chain_horizontal_boundary two_chain)\""], ["proof (prove)\nusing this:\n  two_chain_boundary two_chain =\n  two_chain_vertical_boundary two_chain \\<union>\n  two_chain_horizontal_boundary two_chain\n\ngoal (1 subgoal):\n 1. finite (two_chain_vertical_boundary two_chain) &&&\n    finite (two_chain_horizontal_boundary two_chain)", "using boundary_is_finite"], ["proof (prove)\nusing this:\n  two_chain_boundary two_chain =\n  two_chain_vertical_boundary two_chain \\<union>\n  two_chain_horizontal_boundary two_chain\n  finite (two_chain_boundary two_chain)\n\ngoal (1 subgoal):\n 1. finite (two_chain_vertical_boundary two_chain) &&&\n    finite (two_chain_horizontal_boundary two_chain)", "by auto"], ["proof (state)\nthis:\n  finite (two_chain_vertical_boundary two_chain)\n  finite (two_chain_horizontal_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "have horiz_verti_disjoint:\n    \"(two_chain_vertical_boundary two_chain) \\<inter>\n     (two_chain_horizontal_boundary two_chain) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. two_chain_vertical_boundary two_chain \\<inter>\n    two_chain_horizontal_boundary two_chain =\n    {}", "proof (simp add: two_chain_vertical_boundary_def two_chain_horizontal_boundary_def horizontal_boundary_def\n        vertical_boundary_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>two_chain.\n        {(- 1, \\<lambda>y. x (0, y)), (1, \\<lambda>y. x (1, y))}) \\<inter>\n    (\\<Union>x\\<in>two_chain.\n        {(1, \\<lambda>xa. x (xa, 0)), (- 1, \\<lambda>xa. x (xa, 1))}) =\n    {}", "show \"(\\<Union>x\\<in>two_chain. {(- 1, \\<lambda>y. x (0, y)), (1::int, \\<lambda>y. x (1::real, y))}) \\<inter> (\\<Union>x\\<in>two_chain. {(1, \\<lambda>z. x (z, 0)), (- 1, \\<lambda>z. x (z, 1))}) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>two_chain.\n        {(- 1, \\<lambda>y. x (0, y)), (1, \\<lambda>y. x (1, y))}) \\<inter>\n    (\\<Union>x\\<in>two_chain.\n        {(1, \\<lambda>z. x (z, 0)), (- 1, \\<lambda>z. x (z, 1))}) =\n    {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>two_chain.\n        {(- 1, \\<lambda>y. x (0, y)), (1, \\<lambda>y. x (1, y))}) \\<inter>\n    (\\<Union>x\\<in>two_chain.\n        {(1, \\<lambda>z. x (z, 0)), (- 1, \\<lambda>z. x (z, 1))}) =\n    {}", "have \"{(- 1, \\<lambda>y. twoCube (0, y)), (1::int, \\<lambda>y. twoCube (1, y))} \\<inter>\n            {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} = {}\"\n        if \"twoCube\\<in>two_chain\" \"twoCube2\\<in>two_chain\" for twoCube twoCube2"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} =\n    {}", "proof (cases \"twoCube = twoCube2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. twoCube = twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} =\n    {}\n 2. twoCube \\<noteq> twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} =\n    {}", "case True"], ["proof (state)\nthis:\n  twoCube = twoCube2\n\ngoal (2 subgoals):\n 1. twoCube = twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} =\n    {}\n 2. twoCube \\<noteq> twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} =\n    {}", "have card_4: \"card {(- 1, \\<lambda>y. twoCube2 (0::real, y)), (1::int, \\<lambda>y. twoCube2 (1, y)), (1, \\<lambda>x. twoCube2 (x, 0)), (- 1, \\<lambda>x. twoCube2 (x, 1))} = 4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     {(- 1, \\<lambda>y. twoCube2 (0, y)), (1, \\<lambda>y. twoCube2 (1, y)),\n      (1, \\<lambda>x. twoCube2 (x, 0)),\n      (- 1, \\<lambda>x. twoCube2 (x, 1))} =\n    4", "using valid_typeII_div valid_two_chain_def that(2)"], ["proof (prove)\nusing this:\n  valid_typeII_division s two_chain\n  valid_two_chain ?twoChain \\<equiv>\n  (\\<forall>twoCube\\<in>?twoChain. valid_two_cube twoCube) \\<and>\n  pairwise (\\<lambda>c1 c2. boundary c1 \\<inter> boundary c2 = {})\n   ?twoChain \\<and>\n  inj_on cubeImage ?twoChain\n  twoCube2 \\<in> two_chain\n\ngoal (1 subgoal):\n 1. card\n     {(- 1, \\<lambda>y. twoCube2 (0, y)), (1, \\<lambda>y. twoCube2 (1, y)),\n      (1, \\<lambda>x. twoCube2 (x, 0)),\n      (- 1, \\<lambda>x. twoCube2 (x, 1))} =\n    4", "by (auto simp add: boundary_def vertical_boundary_def horizontal_boundary_def valid_two_cube_def)"], ["proof (state)\nthis:\n  card\n   {(- 1, \\<lambda>y. twoCube2 (0, y)), (1, \\<lambda>y. twoCube2 (1, y)),\n    (1, \\<lambda>x. twoCube2 (x, 0)), (- 1, \\<lambda>x. twoCube2 (x, 1))} =\n  4\n\ngoal (2 subgoals):\n 1. twoCube = twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} =\n    {}\n 2. twoCube \\<noteq> twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} =\n    {}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} =\n    {}", "using card_4"], ["proof (prove)\nusing this:\n  card\n   {(- 1, \\<lambda>y. twoCube2 (0, y)), (1, \\<lambda>y. twoCube2 (1, y)),\n    (1, \\<lambda>x. twoCube2 (x, 0)), (- 1, \\<lambda>x. twoCube2 (x, 1))} =\n  4\n\ngoal (1 subgoal):\n 1. {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} =\n    {}", "by (auto simp: True card_insert_if split: if_split_asm)"], ["proof (state)\nthis:\n  {(- 1, \\<lambda>y. twoCube (0, y)),\n   (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n  {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} =\n  {}\n\ngoal (1 subgoal):\n 1. twoCube \\<noteq> twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} =\n    {}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. twoCube \\<noteq> twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} =\n    {}", "case False"], ["proof (state)\nthis:\n  twoCube \\<noteq> twoCube2\n\ngoal (1 subgoal):\n 1. twoCube \\<noteq> twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} =\n    {}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} =\n    {}", "using valid_typeII_div valid_two_chain_def"], ["proof (prove)\nusing this:\n  valid_typeII_division s two_chain\n  valid_two_chain ?twoChain \\<equiv>\n  (\\<forall>twoCube\\<in>?twoChain. valid_two_cube twoCube) \\<and>\n  pairwise (\\<lambda>c1 c2. boundary c1 \\<inter> boundary c2 = {})\n   ?twoChain \\<and>\n  inj_on cubeImage ?twoChain\n\ngoal (1 subgoal):\n 1. {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} =\n    {}", "by (simp add: boundary_def vertical_boundary_def horizontal_boundary_def pairwise_def \\<open>twoCube \\<noteq> twoCube2\\<close> that)"], ["proof (state)\nthis:\n  {(- 1, \\<lambda>y. twoCube (0, y)),\n   (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n  {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} =\n  {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?twoCube \\<in> two_chain; ?twoCube2.0 \\<in> two_chain\\<rbrakk>\n  \\<Longrightarrow> {(- 1, \\<lambda>y. ?twoCube (0, y)),\n                     (1, \\<lambda>y. ?twoCube (1, y))} \\<inter>\n                    {(1, \\<lambda>z. ?twoCube2.0 (z, 0)),\n                     (- 1, \\<lambda>z. ?twoCube2.0 (z, 1))} =\n                    {}\n\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>two_chain.\n        {(- 1, \\<lambda>y. x (0, y)), (1, \\<lambda>y. x (1, y))}) \\<inter>\n    (\\<Union>x\\<in>two_chain.\n        {(1, \\<lambda>z. x (z, 0)), (- 1, \\<lambda>z. x (z, 1))}) =\n    {}", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?twoCube \\<in> two_chain; ?twoCube2.0 \\<in> two_chain\\<rbrakk>\n  \\<Longrightarrow> {(- 1, \\<lambda>y. ?twoCube (0, y)),\n                     (1, \\<lambda>y. ?twoCube (1, y))} \\<inter>\n                    {(1, \\<lambda>z. ?twoCube2.0 (z, 0)),\n                     (- 1, \\<lambda>z. ?twoCube2.0 (z, 1))} =\n                    {}", "have \"\\<Union> ((\\<lambda>twoCube. {(- 1, \\<lambda>y. twoCube (0::real, y)), (1::real, \\<lambda>y. twoCube (1::real, y))}) ` two_chain)\n                                          \\<inter> \\<Union> ((\\<lambda>twoCube. {(1::int, \\<lambda>z. twoCube (z, 0::real)), (- 1, \\<lambda>z. twoCube (z, 1::real))}) ` two_chain)\n                                              = {}\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?twoCube \\<in> two_chain; ?twoCube2.0 \\<in> two_chain\\<rbrakk>\n  \\<Longrightarrow> {(- 1, \\<lambda>y. ?twoCube (0, y)),\n                     (1, \\<lambda>y. ?twoCube (1, y))} \\<inter>\n                    {(1, \\<lambda>z. ?twoCube2.0 (z, 0)),\n                     (- 1, \\<lambda>z. ?twoCube2.0 (z, 1))} =\n                    {}\n\ngoal (1 subgoal):\n 1. (\\<Union>twoCube\\<in>two_chain.\n        {(- 1, \\<lambda>y. twoCube (0, y)),\n         (1, \\<lambda>y. twoCube (1, y))}) \\<inter>\n    (\\<Union>twoCube\\<in>two_chain.\n        {case (1, \\<lambda>z. twoCube (z, 0)) of\n         (x, y) \\<Rightarrow> (real_of_int x, y),\n         (- 1, \\<lambda>z. twoCube (z, 1))}) =\n    {}", "by (fastforce simp add: Union_disjoint)"], ["proof (state)\nthis:\n  (\\<Union>twoCube\\<in>two_chain.\n      {(- 1, \\<lambda>y. twoCube (0, y)),\n       (1, \\<lambda>y. twoCube (1, y))}) \\<inter>\n  (\\<Union>twoCube\\<in>two_chain.\n      {case (1, \\<lambda>z. twoCube (z, 0)) of\n       (x, y) \\<Rightarrow> (real_of_int x, y),\n       (- 1, \\<lambda>z. twoCube (z, 1))}) =\n  {}\n\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>two_chain.\n        {(- 1, \\<lambda>y. x (0, y)), (1, \\<lambda>y. x (1, y))}) \\<inter>\n    (\\<Union>x\\<in>two_chain.\n        {(1, \\<lambda>z. x (z, 0)), (- 1, \\<lambda>z. x (z, 1))}) =\n    {}", "then"], ["proof (chain)\npicking this:\n  (\\<Union>twoCube\\<in>two_chain.\n      {(- 1, \\<lambda>y. twoCube (0, y)),\n       (1, \\<lambda>y. twoCube (1, y))}) \\<inter>\n  (\\<Union>twoCube\\<in>two_chain.\n      {case (1, \\<lambda>z. twoCube (z, 0)) of\n       (x, y) \\<Rightarrow> (real_of_int x, y),\n       (- 1, \\<lambda>z. twoCube (z, 1))}) =\n  {}", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Union>twoCube\\<in>two_chain.\n      {(- 1, \\<lambda>y. twoCube (0, y)),\n       (1, \\<lambda>y. twoCube (1, y))}) \\<inter>\n  (\\<Union>twoCube\\<in>two_chain.\n      {case (1, \\<lambda>z. twoCube (z, 0)) of\n       (x, y) \\<Rightarrow> (real_of_int x, y),\n       (- 1, \\<lambda>z. twoCube (z, 1))}) =\n  {}\n\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>two_chain.\n        {(- 1, \\<lambda>y. x (0, y)), (1, \\<lambda>y. x (1, y))}) \\<inter>\n    (\\<Union>x\\<in>two_chain.\n        {(1, \\<lambda>z. x (z, 0)), (- 1, \\<lambda>z. x (z, 1))}) =\n    {}", "by force"], ["proof (state)\nthis:\n  (\\<Union>x\\<in>two_chain.\n      {(- 1, \\<lambda>y. x (0, y)), (1, \\<lambda>y. x (1, y))}) \\<inter>\n  (\\<Union>x\\<in>two_chain.\n      {(1, \\<lambda>z. x (z, 0)), (- 1, \\<lambda>z. x (z, 1))}) =\n  {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Union>x\\<in>two_chain.\n      {(- 1, \\<lambda>y. x (0, y)), (1, \\<lambda>y. x (1, y))}) \\<inter>\n  (\\<Union>x\\<in>two_chain.\n      {(1, \\<lambda>z. x (z, 0)), (- 1, \\<lambda>z. x (z, 1))}) =\n  {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  two_chain_vertical_boundary two_chain \\<inter>\n  two_chain_horizontal_boundary two_chain =\n  {}\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "have \"one_chain_line_integral F {j} (two_chain_boundary two_chain)\n       = one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain) +\n         one_chain_line_integral F {j} (two_chain_horizontal_boundary two_chain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j} (two_chain_boundary two_chain) =\n    one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain) +\n    one_chain_line_integral F {j} (two_chain_horizontal_boundary two_chain)", "using boundary_is_vert_hor horiz_verti_disjoint"], ["proof (prove)\nusing this:\n  two_chain_boundary two_chain =\n  two_chain_vertical_boundary two_chain \\<union>\n  two_chain_horizontal_boundary two_chain\n  two_chain_vertical_boundary two_chain \\<inter>\n  two_chain_horizontal_boundary two_chain =\n  {}\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j} (two_chain_boundary two_chain) =\n    one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain) +\n    one_chain_line_integral F {j} (two_chain_horizontal_boundary two_chain)", "by (simp add: hor_vert_finite sum.union_disjoint one_chain_line_integral_def)"], ["proof (state)\nthis:\n  one_chain_line_integral F {j} (two_chain_boundary two_chain) =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain) +\n  one_chain_line_integral F {j} (two_chain_horizontal_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  one_chain_line_integral F {j} (two_chain_boundary two_chain) =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain) +\n  one_chain_line_integral F {j} (two_chain_horizontal_boundary two_chain)", "have y_axis_line_integral_is_only_vertical:\n    \"one_chain_line_integral F {j} (two_chain_boundary two_chain)\n                         = one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\""], ["proof (prove)\nusing this:\n  one_chain_line_integral F {j} (two_chain_boundary two_chain) =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain) +\n  one_chain_line_integral F {j} (two_chain_horizontal_boundary two_chain)\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j} (two_chain_boundary two_chain) =\n    one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)", "using horiz_line_integral_zero"], ["proof (prove)\nusing this:\n  one_chain_line_integral F {j} (two_chain_boundary two_chain) =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain) +\n  one_chain_line_integral F {j} (two_chain_horizontal_boundary two_chain)\n  one_chain_line_integral F {j} (two_chain_horizontal_boundary two_chain) =\n  0\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j} (two_chain_boundary two_chain) =\n    one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)", "by auto"], ["proof (state)\nthis:\n  one_chain_line_integral F {j} (two_chain_boundary two_chain) =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "(*Since \\<gamma> \\<subseteq> the boundary of the 2-chain and the horizontal boundaries are \\<subseteq> \\<gamma>, then there is some \\<H> \\<subseteq> \\<partial>\\<^sub>H(2-\\<C>) such that \\<gamma> = \\<H> \\<union> \\<partial>\\<^sub>v(2-\\<C>)*)"], ["proof (state)\nthis:\n  one_chain_line_integral F {j} (two_chain_boundary two_chain) =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "obtain \\<H> \\<V> where hv_props: \"finite \\<H>\"\n    \"(\\<forall>(k,\\<gamma>) \\<in> \\<H>. (\\<exists>(k', \\<gamma>') \\<in> two_chain_horizontal_boundary two_chain.\n                      (\\<exists>a \\<in> {0 .. 1}.\n                            \\<exists>b \\<in> {0..1}.\n                                a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>)))\"\n    \"\\<gamma> = \\<H> \\<union> \\<V>\"\n    \"(common_sudiv_exists (two_chain_vertical_boundary two_chain) \\<V>\n      \\<or> common_reparam_exists \\<V> (two_chain_vertical_boundary two_chain))\"\n    \"finite \\<V>\"\n    \"boundary_chain \\<V>\"\n    \"\\<forall>(k,\\<gamma>)\\<in>\\<V>. valid_path \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<H> \\<V>.\n        \\<lbrakk>finite \\<H>;\n         \\<forall>(k, \\<gamma>)\\<in>\\<H>.\n            \\<exists>(k', \\<gamma>')\n                     \\<in>two_chain_horizontal_boundary two_chain.\n               \\<exists>a\\<in>{0..1}.\n                  \\<exists>b\\<in>{0..1}.\n                     a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>;\n         \\<gamma> = \\<H> \\<union> \\<V>;\n         common_sudiv_exists (two_chain_vertical_boundary two_chain)\n          \\<V> \\<or>\n         common_reparam_exists \\<V> (two_chain_vertical_boundary two_chain);\n         finite \\<V>; boundary_chain \\<V>;\n         \\<forall>(k, \\<gamma>)\\<in>\\<V>. valid_path \\<gamma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using only_horizontal_division"], ["proof (prove)\nusing this:\n  only_horizontal_division \\<gamma> two_chain\n\ngoal (1 subgoal):\n 1. (\\<And>\\<H> \\<V>.\n        \\<lbrakk>finite \\<H>;\n         \\<forall>(k, \\<gamma>)\\<in>\\<H>.\n            \\<exists>(k', \\<gamma>')\n                     \\<in>two_chain_horizontal_boundary two_chain.\n               \\<exists>a\\<in>{0..1}.\n                  \\<exists>b\\<in>{0..1}.\n                     a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>;\n         \\<gamma> = \\<H> \\<union> \\<V>;\n         common_sudiv_exists (two_chain_vertical_boundary two_chain)\n          \\<V> \\<or>\n         common_reparam_exists \\<V> (two_chain_vertical_boundary two_chain);\n         finite \\<V>; boundary_chain \\<V>;\n         \\<forall>(k, \\<gamma>)\\<in>\\<V>. valid_path \\<gamma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce simp add:  only_horizontal_division_def)"], ["proof (state)\nthis:\n  finite \\<H>\n  \\<forall>(k, \\<gamma>)\\<in>\\<H>.\n     \\<exists>(k', \\<gamma>')\\<in>two_chain_horizontal_boundary two_chain.\n        \\<exists>a\\<in>{0..1}.\n           \\<exists>b\\<in>{0..1}.\n              a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>\n  \\<gamma> = \\<H> \\<union> \\<V>\n  common_sudiv_exists (two_chain_vertical_boundary two_chain) \\<V> \\<or>\n  common_reparam_exists \\<V> (two_chain_vertical_boundary two_chain)\n  finite \\<V>\n  boundary_chain \\<V>\n  \\<forall>(k, \\<gamma>)\\<in>\\<V>. valid_path \\<gamma>\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "have \"finite {j}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {j}", "by auto"], ["proof (state)\nthis:\n  finite {j}\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  finite {j}", "have eq_integrals: \" one_chain_line_integral F {j} \\<V> = one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\""], ["proof (prove)\nusing this:\n  finite {j}\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j} \\<V> =\n    one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)", "proof(cases \"common_sudiv_exists (two_chain_vertical_boundary two_chain) \\<V>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite {j};\n     common_sudiv_exists (two_chain_vertical_boundary two_chain)\n      \\<V>\\<rbrakk>\n    \\<Longrightarrow> one_chain_line_integral F {j} \\<V> =\n                      one_chain_line_integral F {j}\n                       (two_chain_vertical_boundary two_chain)\n 2. \\<lbrakk>finite {j};\n     \\<not> common_sudiv_exists (two_chain_vertical_boundary two_chain)\n             \\<V>\\<rbrakk>\n    \\<Longrightarrow> one_chain_line_integral F {j} \\<V> =\n                      one_chain_line_integral F {j}\n                       (two_chain_vertical_boundary two_chain)", "case True"], ["proof (state)\nthis:\n  common_sudiv_exists (two_chain_vertical_boundary two_chain) \\<V>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>finite {j};\n     common_sudiv_exists (two_chain_vertical_boundary two_chain)\n      \\<V>\\<rbrakk>\n    \\<Longrightarrow> one_chain_line_integral F {j} \\<V> =\n                      one_chain_line_integral F {j}\n                       (two_chain_vertical_boundary two_chain)\n 2. \\<lbrakk>finite {j};\n     \\<not> common_sudiv_exists (two_chain_vertical_boundary two_chain)\n             \\<V>\\<rbrakk>\n    \\<Longrightarrow> one_chain_line_integral F {j} \\<V> =\n                      one_chain_line_integral F {j}\n                       (two_chain_vertical_boundary two_chain)", "then"], ["proof (chain)\npicking this:\n  common_sudiv_exists (two_chain_vertical_boundary two_chain) \\<V>", "show ?thesis"], ["proof (prove)\nusing this:\n  common_sudiv_exists (two_chain_vertical_boundary two_chain) \\<V>\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j} \\<V> =\n    one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)", "using gen_common_subdivision_imp_eq_line_integral(1)[OF True two_chain_vertical_boundary_is_boundary_chain hv_props(6) _ hor_vert_finite(1) hv_props(5)]\n        typeII_chain_line_integral_exists_boundary'"], ["proof (prove)\nusing this:\n  common_sudiv_exists (two_chain_vertical_boundary two_chain) \\<V>\n  \\<lbrakk>\\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n              line_integral_exists ?F ?basis \\<gamma>;\n   finite ?basis\\<rbrakk>\n  \\<Longrightarrow> one_chain_line_integral ?F ?basis\n                     (two_chain_vertical_boundary two_chain) =\n                    one_chain_line_integral ?F ?basis \\<V>\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n     line_integral_exists F {j} \\<gamma>\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j} \\<V> =\n    one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)", "by force"], ["proof (state)\nthis:\n  one_chain_line_integral F {j} \\<V> =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite {j};\n     \\<not> common_sudiv_exists (two_chain_vertical_boundary two_chain)\n             \\<V>\\<rbrakk>\n    \\<Longrightarrow> one_chain_line_integral F {j} \\<V> =\n                      one_chain_line_integral F {j}\n                       (two_chain_vertical_boundary two_chain)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite {j};\n     \\<not> common_sudiv_exists (two_chain_vertical_boundary two_chain)\n             \\<V>\\<rbrakk>\n    \\<Longrightarrow> one_chain_line_integral F {j} \\<V> =\n                      one_chain_line_integral F {j}\n                       (two_chain_vertical_boundary two_chain)", "case False"], ["proof (state)\nthis:\n  \\<not> common_sudiv_exists (two_chain_vertical_boundary two_chain) \\<V>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite {j};\n     \\<not> common_sudiv_exists (two_chain_vertical_boundary two_chain)\n             \\<V>\\<rbrakk>\n    \\<Longrightarrow> one_chain_line_integral F {j} \\<V> =\n                      one_chain_line_integral F {j}\n                       (two_chain_vertical_boundary two_chain)", "have integ_exis_vert:\n      \"\\<forall>(k,\\<gamma>) \\<in> two_chain_vertical_boundary two_chain. line_integral_exists F {j} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n       line_integral_exists F {j} \\<gamma>", "using typeII_chain_line_integral_exists_boundary' assms"], ["proof (prove)\nusing this:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n     line_integral_exists F {j} \\<gamma>\n  only_horizontal_division \\<gamma> two_chain\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n       line_integral_exists F {j} \\<gamma>", "by (fastforce simp add: valid_two_chain_def)"], ["proof (state)\nthis:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n     line_integral_exists F {j} \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite {j};\n     \\<not> common_sudiv_exists (two_chain_vertical_boundary two_chain)\n             \\<V>\\<rbrakk>\n    \\<Longrightarrow> one_chain_line_integral F {j} \\<V> =\n                      one_chain_line_integral F {j}\n                       (two_chain_vertical_boundary two_chain)", "have integ_exis: \"\\<forall>(k,\\<gamma>) \\<in> two_chain_boundary two_chain. line_integral_exists F {j} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n       line_integral_exists F {j} \\<gamma>", "using typeII_cube_line_integral_exists_boundary"], ["proof (prove)\nusing this:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n     line_integral_exists F {j} \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n       line_integral_exists F {j} \\<gamma>", "by blast"], ["proof (state)\nthis:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n     line_integral_exists F {j} \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite {j};\n     \\<not> common_sudiv_exists (two_chain_vertical_boundary two_chain)\n             \\<V>\\<rbrakk>\n    \\<Longrightarrow> one_chain_line_integral F {j} \\<V> =\n                      one_chain_line_integral F {j}\n                       (two_chain_vertical_boundary two_chain)", "have valid_paths: \"\\<forall>(k,\\<gamma>) \\<in> two_chain_horizontal_boundary two_chain. valid_path \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_horizontal_boundary two_chain.\n       valid_path \\<gamma>", "using typeII_edges_are_valid_paths valid_typeII_div"], ["proof (prove)\nusing this:\n  \\<lbrakk>typeII_twoCube ?twoC;\n   (?k, ?\\<gamma>) \\<in> boundary ?twoC\\<rbrakk>\n  \\<Longrightarrow> valid_path ?\\<gamma>\n  valid_typeII_division s two_chain\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_horizontal_boundary two_chain.\n       valid_path \\<gamma>", "by (fastforce simp add: two_chain_boundary_def two_chain_horizontal_boundary_def boundary_def)"], ["proof (state)\nthis:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_horizontal_boundary two_chain.\n     valid_path \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite {j};\n     \\<not> common_sudiv_exists (two_chain_vertical_boundary two_chain)\n             \\<V>\\<rbrakk>\n    \\<Longrightarrow> one_chain_line_integral F {j} \\<V> =\n                      one_chain_line_integral F {j}\n                       (two_chain_vertical_boundary two_chain)", "have integ_exis_horiz:\n      \"(\\<And>k \\<gamma>. (\\<exists>(k', \\<gamma>')\\<in>two_chain_horizontal_boundary two_chain. \\<exists>a\\<in>{0..1}. \\<exists>b\\<in>{0..1}. a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>) \\<Longrightarrow>\n                line_integral_exists F {j} \\<gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k \\<gamma>.\n       \\<exists>(k', \\<gamma>')\\<in>two_chain_horizontal_boundary two_chain.\n          \\<exists>a\\<in>{0..1}.\n             \\<exists>b\\<in>{0..1}.\n                a \\<le> b \\<and>\n                subpath a b \\<gamma>' = \\<gamma> \\<Longrightarrow>\n       line_integral_exists F {j} \\<gamma>", "using integ_exis valid_paths line_integral_exists_subpath[of \"F\" \"{j}\"]"], ["proof (prove)\nusing this:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n     line_integral_exists F {j} \\<gamma>\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_horizontal_boundary two_chain.\n     valid_path \\<gamma>\n  \\<lbrakk>line_integral_exists F {j} ?g; valid_path ?g; ?u \\<in> {0..1};\n   ?v \\<in> {0..1}; ?u \\<le> ?v\\<rbrakk>\n  \\<Longrightarrow> line_integral_exists F {j} (subpath ?u ?v ?g)\n\ngoal (1 subgoal):\n 1. \\<And>k \\<gamma>.\n       \\<exists>(k', \\<gamma>')\\<in>two_chain_horizontal_boundary two_chain.\n          \\<exists>a\\<in>{0..1}.\n             \\<exists>b\\<in>{0..1}.\n                a \\<le> b \\<and>\n                subpath a b \\<gamma>' = \\<gamma> \\<Longrightarrow>\n       line_integral_exists F {j} \\<gamma>", "by (fastforce simp add: two_chain_boundary_def two_chain_horizontal_boundary_def\n          two_chain_vertical_boundary_def boundary_def)"], ["proof (state)\nthis:\n  \\<exists>(k', \\<gamma>')\\<in>two_chain_horizontal_boundary two_chain.\n     \\<exists>a\\<in>{0..1}.\n        \\<exists>b\\<in>{0..1}.\n           a \\<le> b \\<and>\n           subpath a b \\<gamma>' = ?\\<gamma> \\<Longrightarrow>\n  line_integral_exists F {j} ?\\<gamma>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite {j};\n     \\<not> common_sudiv_exists (two_chain_vertical_boundary two_chain)\n             \\<V>\\<rbrakk>\n    \\<Longrightarrow> one_chain_line_integral F {j} \\<V> =\n                      one_chain_line_integral F {j}\n                       (two_chain_vertical_boundary two_chain)", "have finite_j: \"finite {j}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {j}", "by auto"], ["proof (state)\nthis:\n  finite {j}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite {j};\n     \\<not> common_sudiv_exists (two_chain_vertical_boundary two_chain)\n             \\<V>\\<rbrakk>\n    \\<Longrightarrow> one_chain_line_integral F {j} \\<V> =\n                      one_chain_line_integral F {j}\n                       (two_chain_vertical_boundary two_chain)", "have i: \"{j} \\<subseteq> Basis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {j} \\<subseteq> Basis", "using j_is_y_axis real_pair_basis"], ["proof (prove)\nusing this:\n  j = (0, 1)\n  Basis = {(1, 0), (0, 1)}\n\ngoal (1 subgoal):\n 1. {j} \\<subseteq> Basis", "by auto"], ["proof (state)\nthis:\n  {j} \\<subseteq> Basis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite {j};\n     \\<not> common_sudiv_exists (two_chain_vertical_boundary two_chain)\n             \\<V>\\<rbrakk>\n    \\<Longrightarrow> one_chain_line_integral F {j} \\<V> =\n                      one_chain_line_integral F {j}\n                       (two_chain_vertical_boundary two_chain)", "have ii: \" \\<forall>(k2, \\<gamma>2)\\<in>two_chain_vertical_boundary two_chain. \\<forall>b\\<in>{j}. continuous_on (path_image \\<gamma>2) (\\<lambda>x. F x \\<bullet> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(k2, \\<gamma>2)\\<in>two_chain_vertical_boundary two_chain.\n       \\<forall>b\\<in>{j}.\n          continuous_on (path_image \\<gamma>2) (\\<lambda>x. F x \\<bullet> b)", "using valid_typeII_div field_cont_on_typeII_region_cont_on_edges F_anal_valid"], ["proof (prove)\nusing this:\n  valid_typeII_division s two_chain\n  \\<lbrakk>typeII_twoCube ?twoC; continuous_on (cubeImage ?twoC) ?F;\n   (?k, ?\\<gamma>) \\<in> boundary ?twoC\\<rbrakk>\n  \\<Longrightarrow> continuous_on (?\\<gamma> ` {0..1}) ?F\n  \\<forall>twoC\\<in>two_chain.\n     analytically_valid (cubeImage twoC) (\\<lambda>x. F x \\<bullet> j) i\n\ngoal (1 subgoal):\n 1. \\<forall>(k2, \\<gamma>2)\\<in>two_chain_vertical_boundary two_chain.\n       \\<forall>b\\<in>{j}.\n          continuous_on (path_image \\<gamma>2) (\\<lambda>x. F x \\<bullet> b)", "by (fastforce simp add: analytically_valid_def two_chain_vertical_boundary_def boundary_def path_image_def)"], ["proof (state)\nthis:\n  \\<forall>(k2, \\<gamma>2)\\<in>two_chain_vertical_boundary two_chain.\n     \\<forall>b\\<in>{j}.\n        continuous_on (path_image \\<gamma>2) (\\<lambda>x. F x \\<bullet> b)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite {j};\n     \\<not> common_sudiv_exists (two_chain_vertical_boundary two_chain)\n             \\<V>\\<rbrakk>\n    \\<Longrightarrow> one_chain_line_integral F {j} \\<V> =\n                      one_chain_line_integral F {j}\n                       (two_chain_vertical_boundary two_chain)", "show \"one_chain_line_integral F {j} \\<V> = one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j} \\<V> =\n    one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)", "using hv_props(4) False common_reparam_exists_imp_eq_line_integral(1)[OF finite_j hv_props(5) hor_vert_finite(1) hv_props(6) two_chain_vertical_boundary_is_boundary_chain ii \n          _ hv_props(7) type_II_chain_vert_bound_valid]"], ["proof (prove)\nusing this:\n  common_sudiv_exists (two_chain_vertical_boundary two_chain) \\<V> \\<or>\n  common_reparam_exists \\<V> (two_chain_vertical_boundary two_chain)\n  \\<not> common_sudiv_exists (two_chain_vertical_boundary two_chain) \\<V>\n  common_reparam_exists \\<V>\n   (two_chain_vertical_boundary two_chain) \\<Longrightarrow>\n  one_chain_line_integral F {j} \\<V> =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j} \\<V> =\n    one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)", "by fastforce"], ["proof (state)\nthis:\n  one_chain_line_integral F {j} \\<V> =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  one_chain_line_integral F {j} \\<V> =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "(*Since \\<H> \\<subseteq> \\<partial>\\<^sub>H(2-\\<C>), then the line_integral on the x axis along \\<H> is 0, and from 1 Q.E.D. *)"], ["proof (state)\nthis:\n  one_chain_line_integral F {j} \\<V> =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "have line_integral_on_path:\n    \"one_chain_line_integral F {j} \\<gamma> =\n     one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j} \\<gamma> =\n    one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)", "proof (simp only: one_chain_line_integral_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>\\<gamma>. real_of_int k * line_integral F {j} g) =\n    (\\<Sum>(k, g)\\<in>two_chain_vertical_boundary two_chain.\n       real_of_int k * line_integral F {j} g)", "have \"line_integral F {j} (snd oneCube) = 0\" if oneCube: \"oneCube \\<in> \\<H>\" for oneCube"], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "obtain k \\<gamma> where k_gamma: \"(k,\\<gamma>) = oneCube\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k \\<gamma>.\n        (k, \\<gamma>) = oneCube \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>k \\<gamma>.\n        (k, \\<gamma>) = oneCube \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (k, \\<gamma>) = oneCube\n\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "then"], ["proof (chain)\npicking this:\n  (k, \\<gamma>) = oneCube", "obtain k' \\<gamma>' a b where kp_gammap:\n        \"(k'::int, \\<gamma>') \\<in> two_chain_horizontal_boundary two_chain\"\n        \"a \\<in> {0 .. 1}\"\n        \"b \\<in> {0..1}\"\n        \"subpath a b \\<gamma>' = \\<gamma>\""], ["proof (prove)\nusing this:\n  (k, \\<gamma>) = oneCube\n\ngoal (1 subgoal):\n 1. (\\<And>k' \\<gamma>'' a b.\n        \\<lbrakk>(k', \\<gamma>'')\n                 \\<in> two_chain_horizontal_boundary two_chain;\n         a \\<in> {0..1}; b \\<in> {0..1};\n         subpath a b \\<gamma>'' = \\<gamma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using hv_props oneCube"], ["proof (prove)\nusing this:\n  (k, \\<gamma>) = oneCube\n  finite \\<H>\n  \\<forall>(k, \\<gamma>)\\<in>\\<H>.\n     \\<exists>(k', \\<gamma>')\\<in>two_chain_horizontal_boundary two_chain.\n        \\<exists>a\\<in>{0..1}.\n           \\<exists>b\\<in>{0..1}.\n              a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>\n  \\<gamma> = \\<H> \\<union> \\<V>\n  common_sudiv_exists (two_chain_vertical_boundary two_chain) \\<V> \\<or>\n  common_reparam_exists \\<V> (two_chain_vertical_boundary two_chain)\n  finite \\<V>\n  boundary_chain \\<V>\n  \\<forall>(k, \\<gamma>)\\<in>\\<V>. valid_path \\<gamma>\n  oneCube \\<in> \\<H>\n\ngoal (1 subgoal):\n 1. (\\<And>k' \\<gamma>'' a b.\n        \\<lbrakk>(k', \\<gamma>'')\n                 \\<in> two_chain_horizontal_boundary two_chain;\n         a \\<in> {0..1}; b \\<in> {0..1};\n         subpath a b \\<gamma>'' = \\<gamma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (smt case_prodE split_conv)"], ["proof (state)\nthis:\n  (k', \\<gamma>') \\<in> two_chain_horizontal_boundary two_chain\n  a \\<in> {0..1}\n  b \\<in> {0..1}\n  subpath a b \\<gamma>' = \\<gamma>\n\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "obtain x y1 y2 where horiz_edge_def: \"(k',\\<gamma>') = (k', (\\<lambda>t::real. ((1 - t) * (y2) + t * y1, x::real)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y2 y1 x.\n        (k', \\<gamma>') =\n        (k', \\<lambda>t. ((1 - t) * y2 + t * y1, x)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using valid_typeII_div kp_gammap"], ["proof (prove)\nusing this:\n  valid_typeII_division s two_chain\n  (k', \\<gamma>') \\<in> two_chain_horizontal_boundary two_chain\n  a \\<in> {0..1}\n  b \\<in> {0..1}\n  subpath a b \\<gamma>' = \\<gamma>\n\ngoal (1 subgoal):\n 1. (\\<And>y2 y1 x.\n        (k', \\<gamma>') =\n        (k', \\<lambda>t. ((1 - t) * y2 + t * y1, x)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: typeII_twoCube_def two_chain_horizontal_boundary_def horizontal_boundary_def)"], ["proof (state)\nthis:\n  (k', \\<gamma>') = (k', \\<lambda>t. ((1 - t) * y2 + t * y1, x))\n\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "have horiz_edge_y_const: \"\\<forall>t. \\<gamma> (t) \\<bullet> j = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t. \\<gamma> t \\<bullet> j = x", "using horiz_edge_def kp_gammap(4)"], ["proof (prove)\nusing this:\n  (k', \\<gamma>') = (k', \\<lambda>t. ((1 - t) * y2 + t * y1, x))\n  subpath a b \\<gamma>' = \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>t. \\<gamma> t \\<bullet> j = x", "by (auto simp add: real_inner_class.inner_add_left\n            euclidean_space_class.inner_not_same_Basis j_is_y_axis subpath_def)"], ["proof (state)\nthis:\n  \\<forall>t. \\<gamma> t \\<bullet> j = x\n\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "have horiz_edge_is_straight_path:\n        \"\\<gamma> = (\\<lambda>t::real. ((1*y2 - a*y2) +  a*y1 + ((b-a)*y1 - (b - a)*y2)*t, x::real))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma> =\n    (\\<lambda>t.\n        (1 * y2 - a * y2 + a * y1 + ((b - a) * y1 - (b - a) * y2) * t, x))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<gamma> =\n    (\\<lambda>t.\n        (1 * y2 - a * y2 + a * y1 + ((b - a) * y1 - (b - a) * y2) * t, x))", "fix t::real"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<gamma> =\n    (\\<lambda>t.\n        (1 * y2 - a * y2 + a * y1 + ((b - a) * y1 - (b - a) * y2) * t, x))", "have \"(1 - (b - a)*t + a) * (y2) + ((b-a)*t + a) * y1 = (1 - (b - a)*t + a) * (y2) + ((b-a)*t + a) * y1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1 - (b - a) * t + a) * y2 + ((b - a) * t + a) * y1 =\n    (1 - (b - a) * t + a) * y2 + ((b - a) * t + a) * y1", "by auto"], ["proof (state)\nthis:\n  (1 - (b - a) * t + a) * y2 + ((b - a) * t + a) * y1 =\n  (1 - (b - a) * t + a) * y2 + ((b - a) * t + a) * y1\n\ngoal (1 subgoal):\n 1. \\<gamma> =\n    (\\<lambda>t.\n        (1 * y2 - a * y2 + a * y1 + ((b - a) * y1 - (b - a) * y2) * t, x))", "then"], ["proof (chain)\npicking this:\n  (1 - (b - a) * t + a) * y2 + ((b - a) * t + a) * y1 =\n  (1 - (b - a) * t + a) * y2 + ((b - a) * t + a) * y1", "have \"\\<gamma> = (\\<lambda>t::real. ((1 - (b - a)*t - a) * (y2) + ((b-a)*t + a) * y1, x::real))\""], ["proof (prove)\nusing this:\n  (1 - (b - a) * t + a) * y2 + ((b - a) * t + a) * y1 =\n  (1 - (b - a) * t + a) * y2 + ((b - a) * t + a) * y1\n\ngoal (1 subgoal):\n 1. \\<gamma> =\n    (\\<lambda>t. ((1 - (b - a) * t - a) * y2 + ((b - a) * t + a) * y1, x))", "using horiz_edge_def Product_Type.snd_conv Product_Type.fst_conv kp_gammap(4)"], ["proof (prove)\nusing this:\n  (1 - (b - a) * t + a) * y2 + ((b - a) * t + a) * y1 =\n  (1 - (b - a) * t + a) * y2 + ((b - a) * t + a) * y1\n  (k', \\<gamma>') = (k', \\<lambda>t. ((1 - t) * y2 + t * y1, x))\n  snd (?x1.0, ?x2.0) = ?x2.0\n  fst (?x1.0, ?x2.0) = ?x1.0\n  subpath a b \\<gamma>' = \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<gamma> =\n    (\\<lambda>t. ((1 - (b - a) * t - a) * y2 + ((b - a) * t + a) * y1, x))", "by (simp add: subpath_def diff_diff_eq[symmetric])"], ["proof (state)\nthis:\n  \\<gamma> =\n  (\\<lambda>t. ((1 - (b - a) * t - a) * y2 + ((b - a) * t + a) * y1, x))\n\ngoal (1 subgoal):\n 1. \\<gamma> =\n    (\\<lambda>t.\n        (1 * y2 - a * y2 + a * y1 + ((b - a) * y1 - (b - a) * y2) * t, x))", "also"], ["proof (state)\nthis:\n  \\<gamma> =\n  (\\<lambda>t. ((1 - (b - a) * t - a) * y2 + ((b - a) * t + a) * y1, x))\n\ngoal (1 subgoal):\n 1. \\<gamma> =\n    (\\<lambda>t.\n        (1 * y2 - a * y2 + a * y1 + ((b - a) * y1 - (b - a) * y2) * t, x))", "have \"\\<dots> = (\\<lambda>t::real. ((1*y2 - (b - a)*y2*t - a*y2) + ((b-a)*y1*t + a*y1), x::real))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>t. ((1 - (b - a) * t - a) * y2 + ((b - a) * t + a) * y1, x)) =\n    (\\<lambda>t.\n        (1 * y2 - (b - a) * y2 * t - a * y2 + ((b - a) * y1 * t + a * y1),\n         x))", "by(auto simp add: ring_class.ring_distribs(2) Groups.diff_diff_eq left_diff_distrib)"], ["proof (state)\nthis:\n  (\\<lambda>t. ((1 - (b - a) * t - a) * y2 + ((b - a) * t + a) * y1, x)) =\n  (\\<lambda>t.\n      (1 * y2 - (b - a) * y2 * t - a * y2 + ((b - a) * y1 * t + a * y1), x))\n\ngoal (1 subgoal):\n 1. \\<gamma> =\n    (\\<lambda>t.\n        (1 * y2 - a * y2 + a * y1 + ((b - a) * y1 - (b - a) * y2) * t, x))", "also"], ["proof (state)\nthis:\n  (\\<lambda>t. ((1 - (b - a) * t - a) * y2 + ((b - a) * t + a) * y1, x)) =\n  (\\<lambda>t.\n      (1 * y2 - (b - a) * y2 * t - a * y2 + ((b - a) * y1 * t + a * y1), x))\n\ngoal (1 subgoal):\n 1. \\<gamma> =\n    (\\<lambda>t.\n        (1 * y2 - a * y2 + a * y1 + ((b - a) * y1 - (b - a) * y2) * t, x))", "have \"... = (\\<lambda>t::real. ((1*y2 - a*y2) +  a*y1 + ((b-a)*y1 - (b - a)*y2)*t, x::real))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>t.\n        (1 * y2 - (b - a) * y2 * t - a * y2 + ((b - a) * y1 * t + a * y1),\n         x)) =\n    (\\<lambda>t.\n        (1 * y2 - a * y2 + a * y1 + ((b - a) * y1 - (b - a) * y2) * t, x))", "by (force simp add: left_diff_distrib)"], ["proof (state)\nthis:\n  (\\<lambda>t.\n      (1 * y2 - (b - a) * y2 * t - a * y2 + ((b - a) * y1 * t + a * y1),\n       x)) =\n  (\\<lambda>t.\n      (1 * y2 - a * y2 + a * y1 + ((b - a) * y1 - (b - a) * y2) * t, x))\n\ngoal (1 subgoal):\n 1. \\<gamma> =\n    (\\<lambda>t.\n        (1 * y2 - a * y2 + a * y1 + ((b - a) * y1 - (b - a) * y2) * t, x))", "finally"], ["proof (chain)\npicking this:\n  \\<gamma> =\n  (\\<lambda>t.\n      (1 * y2 - a * y2 + a * y1 + ((b - a) * y1 - (b - a) * y2) * t, x))", "show \"\\<gamma> = (\\<lambda>t::real. ((1*y2 - a*y2) +  a*y1 + ((b-a)*y1 - (b - a)*y2)*t, x::real))\""], ["proof (prove)\nusing this:\n  \\<gamma> =\n  (\\<lambda>t.\n      (1 * y2 - a * y2 + a * y1 + ((b - a) * y1 - (b - a) * y2) * t, x))\n\ngoal (1 subgoal):\n 1. \\<gamma> =\n    (\\<lambda>t.\n        (1 * y2 - a * y2 + a * y1 + ((b - a) * y1 - (b - a) * y2) * t, x))", "."], ["proof (state)\nthis:\n  \\<gamma> =\n  (\\<lambda>t.\n      (1 * y2 - a * y2 + a * y1 + ((b - a) * y1 - (b - a) * y2) * t, x))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<gamma> =\n  (\\<lambda>t.\n      (1 * y2 - a * y2 + a * y1 + ((b - a) * y1 - (b - a) * y2) * t, x))\n\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "show \"line_integral F {j} (snd oneCube) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "have \"\\<forall>x. \\<gamma> differentiable at x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. \\<gamma> differentiable at x", "by (simp add: horiz_edge_is_straight_path straight_path_diffrentiable_y)"], ["proof (state)\nthis:\n  \\<forall>x. \\<gamma> differentiable at x\n\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "then"], ["proof (chain)\npicking this:\n  \\<forall>x. \\<gamma> differentiable at x", "have \"line_integral F {j} \\<gamma> = 0\""], ["proof (prove)\nusing this:\n  \\<forall>x. \\<gamma> differentiable at x\n\ngoal (1 subgoal):\n 1. line_integral F {j} \\<gamma> = 0", "by (simp add: horiz_edge_y_const line_integral_on_pair_straight_path(1))"], ["proof (state)\nthis:\n  line_integral F {j} \\<gamma> = 0\n\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "then"], ["proof (chain)\npicking this:\n  line_integral F {j} \\<gamma> = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  line_integral F {j} \\<gamma> = 0\n\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "using Product_Type.snd_conv k_gamma"], ["proof (prove)\nusing this:\n  line_integral F {j} \\<gamma> = 0\n  snd (?x1.0, ?x2.0) = ?x2.0\n  (k, \\<gamma>) = oneCube\n\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "by auto"], ["proof (state)\nthis:\n  line_integral F {j} (snd oneCube) = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  line_integral F {j} (snd oneCube) = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?oneCube \\<in> \\<H> \\<Longrightarrow>\n  line_integral F {j} (snd ?oneCube) = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>\\<gamma>. real_of_int k * line_integral F {j} g) =\n    (\\<Sum>(k, g)\\<in>two_chain_vertical_boundary two_chain.\n       real_of_int k * line_integral F {j} g)", "then"], ["proof (chain)\npicking this:\n  ?oneCube \\<in> \\<H> \\<Longrightarrow>\n  line_integral F {j} (snd ?oneCube) = 0", "have \"\\<forall>x\\<in>\\<H>. (case x of (k, g) \\<Rightarrow> (k::int) * line_integral F {j} g) = 0\""], ["proof (prove)\nusing this:\n  ?oneCube \\<in> \\<H> \\<Longrightarrow>\n  line_integral F {j} (snd ?oneCube) = 0\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>\\<H>.\n       (case x of\n        (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n       0", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>\\<H>.\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n     0\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>\\<gamma>. real_of_int k * line_integral F {j} g) =\n    (\\<Sum>(k, g)\\<in>two_chain_vertical_boundary two_chain.\n       real_of_int k * line_integral F {j} g)", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>\\<H>.\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n     0", "show \"(\\<Sum>x\\<in>\\<gamma>. case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n               (\\<Sum>x\\<in>two_chain_vertical_boundary two_chain. case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>\\<H>.\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n     0\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>\\<gamma>.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n    (\\<Sum>x\\<in>two_chain_vertical_boundary two_chain.\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)", "using hv_props(1) hv_props(3) hv_props(5) sum_zero_set hor_vert_finite(1) eq_integrals"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>\\<H>.\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n     0\n  finite \\<H>\n  \\<gamma> = \\<H> \\<union> \\<V>\n  finite \\<V>\n  \\<lbrakk>\\<forall>x\\<in>?s. ?f x = (0::?'b); finite ?s; finite ?t\\<rbrakk>\n  \\<Longrightarrow> sum ?f (?s \\<union> ?t) = sum ?f ?t\n  finite (two_chain_vertical_boundary two_chain)\n  one_chain_line_integral F {j} \\<V> =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>\\<gamma>.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n    (\\<Sum>x\\<in>two_chain_vertical_boundary two_chain.\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)", "by (clarsimp simp add: one_chain_line_integral_def sum_zero_set)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>\\<gamma>.\n     case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n  (\\<Sum>x\\<in>two_chain_vertical_boundary two_chain.\n     case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  one_chain_line_integral F {j} \\<gamma> =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  one_chain_line_integral F {j} \\<gamma> =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)", "have \"one_chain_line_integral F {j} \\<gamma> =\n                           one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\""], ["proof (prove)\nusing this:\n  one_chain_line_integral F {j} \\<gamma> =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j} \\<gamma> =\n    one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)", "using line_integral_on_path"], ["proof (prove)\nusing this:\n  one_chain_line_integral F {j} \\<gamma> =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\n  one_chain_line_integral F {j} \\<gamma> =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j} \\<gamma> =\n    one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)", "by auto"], ["proof (state)\nthis:\n  one_chain_line_integral F {j} \\<gamma> =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  one_chain_line_integral F {j} \\<gamma> =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)", "have \"one_chain_line_integral F {j} \\<gamma> =\n                           one_chain_line_integral F {j} (two_chain_boundary two_chain)\""], ["proof (prove)\nusing this:\n  one_chain_line_integral F {j} \\<gamma> =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j} \\<gamma> =\n    one_chain_line_integral F {j} (two_chain_boundary two_chain)", "using y_axis_line_integral_is_only_vertical"], ["proof (prove)\nusing this:\n  one_chain_line_integral F {j} \\<gamma> =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\n  one_chain_line_integral F {j} (two_chain_boundary two_chain) =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j} \\<gamma> =\n    one_chain_line_integral F {j} (two_chain_boundary two_chain)", "by auto"], ["proof (state)\nthis:\n  one_chain_line_integral F {j} \\<gamma> =\n  one_chain_line_integral F {j} (two_chain_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  one_chain_line_integral F {j} \\<gamma> =\n  one_chain_line_integral F {j} (two_chain_boundary two_chain)", "show ?thesis"], ["proof (prove)\nusing this:\n  one_chain_line_integral F {j} \\<gamma> =\n  one_chain_line_integral F {j} (two_chain_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "using valid_typeII_div GreenThm_typeII_divisible"], ["proof (prove)\nusing this:\n  one_chain_line_integral F {j} \\<gamma> =\n  one_chain_line_integral F {j} (two_chain_boundary two_chain)\n  valid_typeII_division s two_chain\n  gen_division s (cubeImage ` two_chain) \\<Longrightarrow>\n  integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n  one_chain_line_integral F {j} (two_chain_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "by auto"], ["proof (state)\nthis:\n  integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n  one_chain_line_integral F {j} \\<gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma GreenThm_typeII_divisible_region_boundary:\n  assumes\n    two_cubes_trace_vertical_boundaries: \n    \"two_chain_vertical_boundary two_chain \\<subseteq> \\<gamma>\" and\n    boundary_of_region_is_subset_of_partition_boundary:\n    \"\\<gamma> \\<subseteq> two_chain_boundary two_chain\"\n  shows \"integral s (partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> j) i) = one_chain_line_integral F {j} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "let ?F_a' = \"(partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> j) i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "(*Proving that line_integral on the x axis is 0 for the vertical 1-cubes*)"], ["proof (state)\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "have horiz_line_integral_zero:\n    \"one_chain_line_integral F {j} (two_chain_horizontal_boundary two_chain) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j}\n     (two_chain_horizontal_boundary two_chain) =\n    0", "proof (simp add: one_chain_line_integral_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>two_chain_horizontal_boundary two_chain.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n    0", "have \"line_integral F {j} (snd oneCube) = 0\"\n      if one: \"oneCube \\<in> two_chain_horizontal_boundary(two_chain)\" for oneCube"], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "obtain x y1 y2 k where horiz_edge_def: \"oneCube = (k, (\\<lambda>t::real. ((1 - t) * (y2) + t * y1, x::real)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k y2 y1 x.\n        oneCube =\n        (k, \\<lambda>t. ((1 - t) * y2 + t * y1, x)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using valid_typeII_div one"], ["proof (prove)\nusing this:\n  valid_typeII_division s two_chain\n  oneCube \\<in> two_chain_horizontal_boundary two_chain\n\ngoal (1 subgoal):\n 1. (\\<And>k y2 y1 x.\n        oneCube =\n        (k, \\<lambda>t. ((1 - t) * y2 + t * y1, x)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: typeII_twoCube_def two_chain_horizontal_boundary_def horizontal_boundary_def)"], ["proof (state)\nthis:\n  oneCube = (k, \\<lambda>t. ((1 - t) * y2 + t * y1, x))\n\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "let ?horiz_edge = \"(snd oneCube)\""], ["proof (state)\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "have horiz_edge_y_const: \"\\<forall>t. (?horiz_edge t) \\<bullet> j = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t. snd oneCube t \\<bullet> j = x", "using horiz_edge_def"], ["proof (prove)\nusing this:\n  oneCube = (k, \\<lambda>t. ((1 - t) * y2 + t * y1, x))\n\ngoal (1 subgoal):\n 1. \\<forall>t. snd oneCube t \\<bullet> j = x", "by (auto simp add: real_inner_class.inner_add_left\n            euclidean_space_class.inner_not_same_Basis j_is_y_axis)"], ["proof (state)\nthis:\n  \\<forall>t. snd oneCube t \\<bullet> j = x\n\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "have horiz_edge_is_straight_path:\n        \"?horiz_edge = (\\<lambda>t. (y2 + t * (y1 - y2), x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd oneCube = (\\<lambda>t. (y2 + t * (y1 - y2), x))", "by (simp add: add_diff_eq diff_add_eq mult.commute right_diff_distrib horiz_edge_def)"], ["proof (state)\nthis:\n  snd oneCube = (\\<lambda>t. (y2 + t * (y1 - y2), x))\n\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "show \"line_integral F {j} (snd oneCube) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "by (metis horiz_edge_is_straight_path horiz_edge_y_const line_integral_on_pair_straight_path(1) mult.commute straight_path_diffrentiable_y)"], ["proof (state)\nthis:\n  line_integral F {j} (snd oneCube) = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?oneCube \\<in> two_chain_horizontal_boundary two_chain \\<Longrightarrow>\n  line_integral F {j} (snd ?oneCube) = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>two_chain_horizontal_boundary two_chain.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n    0", "then"], ["proof (chain)\npicking this:\n  ?oneCube \\<in> two_chain_horizontal_boundary two_chain \\<Longrightarrow>\n  line_integral F {j} (snd ?oneCube) = 0", "show \"(\\<Sum>x\\<in>two_chain_horizontal_boundary two_chain. case x of (k, g) \\<Rightarrow> k * line_integral F {j} g) = 0\""], ["proof (prove)\nusing this:\n  ?oneCube \\<in> two_chain_horizontal_boundary two_chain \\<Longrightarrow>\n  line_integral F {j} (snd ?oneCube) = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>two_chain_horizontal_boundary two_chain.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n    0", "by (simp add: prod.case_eq_if)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>two_chain_horizontal_boundary two_chain.\n     case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n  0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  one_chain_line_integral F {j} (two_chain_horizontal_boundary two_chain) =\n  0\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "(*then, the x axis line_integral on the boundaries of the twoCube is equal to the line_integral on the horizontal boundaries of the twoCube \\<longrightarrow> 1*)"], ["proof (state)\nthis:\n  one_chain_line_integral F {j} (two_chain_horizontal_boundary two_chain) =\n  0\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "have boundary_is_finite: \"finite (two_chain_boundary two_chain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (two_chain_boundary two_chain)", "unfolding two_chain_boundary_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (\\<Union> (boundary ` two_chain))", "proof (rule finite_UN_I)"], ["proof (state)\ngoal (2 subgoals):\n 1. finite two_chain\n 2. \\<And>a. a \\<in> two_chain \\<Longrightarrow> finite (boundary a)", "show \"finite two_chain\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite two_chain", "using valid_typeII_div finite_image_iff gen_division_def valid_two_chain_def"], ["proof (prove)\nusing this:\n  valid_typeII_division s two_chain\n  inj_on ?f ?A \\<Longrightarrow> finite (?f ` ?A) = finite ?A\n  gen_division ?s ?S \\<equiv>\n  finite ?S \\<and>\n  \\<Union> ?S = ?s \\<and>\n  pairwise (\\<lambda>X Y. negligible (X \\<inter> Y)) ?S\n  valid_two_chain ?twoChain \\<equiv>\n  (\\<forall>twoCube\\<in>?twoChain. valid_two_cube twoCube) \\<and>\n  pairwise (\\<lambda>c1 c2. boundary c1 \\<inter> boundary c2 = {})\n   ?twoChain \\<and>\n  inj_on cubeImage ?twoChain\n\ngoal (1 subgoal):\n 1. finite two_chain", "by auto"], ["proof (state)\nthis:\n  finite two_chain\n\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> two_chain \\<Longrightarrow> finite (boundary a)", "show \"\\<And>a. a \\<in> two_chain \\<Longrightarrow> finite (boundary a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> two_chain \\<Longrightarrow> finite (boundary a)", "by (simp add: boundary_def horizontal_boundary_def vertical_boundary_def)"], ["proof (state)\nthis:\n  ?a \\<in> two_chain \\<Longrightarrow> finite (boundary ?a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finite (two_chain_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "have boundary_is_vert_hor:\n    \"two_chain_boundary two_chain = (two_chain_vertical_boundary two_chain) \\<union> (two_chain_horizontal_boundary two_chain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. two_chain_boundary two_chain =\n    two_chain_vertical_boundary two_chain \\<union>\n    two_chain_horizontal_boundary two_chain", "by(auto simp add: two_chain_boundary_def two_chain_vertical_boundary_def two_chain_horizontal_boundary_def boundary_def)"], ["proof (state)\nthis:\n  two_chain_boundary two_chain =\n  two_chain_vertical_boundary two_chain \\<union>\n  two_chain_horizontal_boundary two_chain\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  two_chain_boundary two_chain =\n  two_chain_vertical_boundary two_chain \\<union>\n  two_chain_horizontal_boundary two_chain", "have hor_vert_finite:\n    \"finite (two_chain_vertical_boundary two_chain)\"\n    \"finite (two_chain_horizontal_boundary two_chain)\""], ["proof (prove)\nusing this:\n  two_chain_boundary two_chain =\n  two_chain_vertical_boundary two_chain \\<union>\n  two_chain_horizontal_boundary two_chain\n\ngoal (1 subgoal):\n 1. finite (two_chain_vertical_boundary two_chain) &&&\n    finite (two_chain_horizontal_boundary two_chain)", "using boundary_is_finite"], ["proof (prove)\nusing this:\n  two_chain_boundary two_chain =\n  two_chain_vertical_boundary two_chain \\<union>\n  two_chain_horizontal_boundary two_chain\n  finite (two_chain_boundary two_chain)\n\ngoal (1 subgoal):\n 1. finite (two_chain_vertical_boundary two_chain) &&&\n    finite (two_chain_horizontal_boundary two_chain)", "by auto"], ["proof (state)\nthis:\n  finite (two_chain_vertical_boundary two_chain)\n  finite (two_chain_horizontal_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "have horiz_verti_disjoint:\n    \"(two_chain_vertical_boundary two_chain) \\<inter> (two_chain_horizontal_boundary two_chain) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. two_chain_vertical_boundary two_chain \\<inter>\n    two_chain_horizontal_boundary two_chain =\n    {}", "proof (simp add: two_chain_vertical_boundary_def two_chain_horizontal_boundary_def horizontal_boundary_def\n        vertical_boundary_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>two_chain.\n        {(- 1, \\<lambda>y. x (0, y)), (1, \\<lambda>y. x (1, y))}) \\<inter>\n    (\\<Union>x\\<in>two_chain.\n        {(1, \\<lambda>xa. x (xa, 0)), (- 1, \\<lambda>xa. x (xa, 1))}) =\n    {}", "show \"(\\<Union>x\\<in>two_chain. {(- 1, \\<lambda>y. x (0, y)), (1::int, \\<lambda>y. x (1::real, y))}) \\<inter> (\\<Union>x\\<in>two_chain. {(1, \\<lambda>z. x (z, 0)), (- 1, \\<lambda>z. x (z, 1))}) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>two_chain.\n        {(- 1, \\<lambda>y. x (0, y)), (1, \\<lambda>y. x (1, y))}) \\<inter>\n    (\\<Union>x\\<in>two_chain.\n        {(1, \\<lambda>z. x (z, 0)), (- 1, \\<lambda>z. x (z, 1))}) =\n    {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>two_chain.\n        {(- 1, \\<lambda>y. x (0, y)), (1, \\<lambda>y. x (1, y))}) \\<inter>\n    (\\<Union>x\\<in>two_chain.\n        {(1, \\<lambda>z. x (z, 0)), (- 1, \\<lambda>z. x (z, 1))}) =\n    {}", "have \"{(- 1, \\<lambda>y. twoCube (0, y)), (1::int, \\<lambda>y. twoCube (1, y))} \\<inter>\n            {(1, \\<lambda>y. twoCube2 (y, 0)), (- 1, \\<lambda>y. twoCube2 (y, 1))} = {}\"\n        if  \"twoCube\\<in>two_chain\" \"twoCube2\\<in>two_chain\" for twoCube twoCube2"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>y. twoCube2 (y, 0)), (- 1, \\<lambda>y. twoCube2 (y, 1))} =\n    {}", "proof (cases \"twoCube = twoCube2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. twoCube = twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>y. twoCube2 (y, 0)), (- 1, \\<lambda>y. twoCube2 (y, 1))} =\n    {}\n 2. twoCube \\<noteq> twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>y. twoCube2 (y, 0)), (- 1, \\<lambda>y. twoCube2 (y, 1))} =\n    {}", "case True"], ["proof (state)\nthis:\n  twoCube = twoCube2\n\ngoal (2 subgoals):\n 1. twoCube = twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>y. twoCube2 (y, 0)), (- 1, \\<lambda>y. twoCube2 (y, 1))} =\n    {}\n 2. twoCube \\<noteq> twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>y. twoCube2 (y, 0)), (- 1, \\<lambda>y. twoCube2 (y, 1))} =\n    {}", "have \"card {(- 1, \\<lambda>y. twoCube2 (0::real, y)), (1::int, \\<lambda>y. twoCube2 (1, y)), (1, \\<lambda>x. twoCube2 (x, 0)), (- 1, \\<lambda>x. twoCube2 (x, 1))} = 4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     {(- 1, \\<lambda>y. twoCube2 (0, y)), (1, \\<lambda>y. twoCube2 (1, y)),\n      (1, \\<lambda>x. twoCube2 (x, 0)),\n      (- 1, \\<lambda>x. twoCube2 (x, 1))} =\n    4", "using valid_typeII_div valid_two_chain_def that(2)"], ["proof (prove)\nusing this:\n  valid_typeII_division s two_chain\n  valid_two_chain ?twoChain \\<equiv>\n  (\\<forall>twoCube\\<in>?twoChain. valid_two_cube twoCube) \\<and>\n  pairwise (\\<lambda>c1 c2. boundary c1 \\<inter> boundary c2 = {})\n   ?twoChain \\<and>\n  inj_on cubeImage ?twoChain\n  twoCube2 \\<in> two_chain\n\ngoal (1 subgoal):\n 1. card\n     {(- 1, \\<lambda>y. twoCube2 (0, y)), (1, \\<lambda>y. twoCube2 (1, y)),\n      (1, \\<lambda>x. twoCube2 (x, 0)),\n      (- 1, \\<lambda>x. twoCube2 (x, 1))} =\n    4", "by (auto simp add: boundary_def vertical_boundary_def horizontal_boundary_def valid_two_cube_def)"], ["proof (state)\nthis:\n  card\n   {(- 1, \\<lambda>y. twoCube2 (0, y)), (1, \\<lambda>y. twoCube2 (1, y)),\n    (1, \\<lambda>x. twoCube2 (x, 0)), (- 1, \\<lambda>x. twoCube2 (x, 1))} =\n  4\n\ngoal (2 subgoals):\n 1. twoCube = twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>y. twoCube2 (y, 0)), (- 1, \\<lambda>y. twoCube2 (y, 1))} =\n    {}\n 2. twoCube \\<noteq> twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>y. twoCube2 (y, 0)), (- 1, \\<lambda>y. twoCube2 (y, 1))} =\n    {}", "then"], ["proof (chain)\npicking this:\n  card\n   {(- 1, \\<lambda>y. twoCube2 (0, y)), (1, \\<lambda>y. twoCube2 (1, y)),\n    (1, \\<lambda>x. twoCube2 (x, 0)), (- 1, \\<lambda>x. twoCube2 (x, 1))} =\n  4", "show ?thesis"], ["proof (prove)\nusing this:\n  card\n   {(- 1, \\<lambda>y. twoCube2 (0, y)), (1, \\<lambda>y. twoCube2 (1, y)),\n    (1, \\<lambda>x. twoCube2 (x, 0)), (- 1, \\<lambda>x. twoCube2 (x, 1))} =\n  4\n\ngoal (1 subgoal):\n 1. {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>y. twoCube2 (y, 0)), (- 1, \\<lambda>y. twoCube2 (y, 1))} =\n    {}", "by (auto simp: True card_insert_if split: if_split_asm)"], ["proof (state)\nthis:\n  {(- 1, \\<lambda>y. twoCube (0, y)),\n   (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n  {(1, \\<lambda>y. twoCube2 (y, 0)), (- 1, \\<lambda>y. twoCube2 (y, 1))} =\n  {}\n\ngoal (1 subgoal):\n 1. twoCube \\<noteq> twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>y. twoCube2 (y, 0)), (- 1, \\<lambda>y. twoCube2 (y, 1))} =\n    {}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. twoCube \\<noteq> twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>y. twoCube2 (y, 0)), (- 1, \\<lambda>y. twoCube2 (y, 1))} =\n    {}", "case False"], ["proof (state)\nthis:\n  twoCube \\<noteq> twoCube2\n\ngoal (1 subgoal):\n 1. twoCube \\<noteq> twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>y. twoCube2 (y, 0)), (- 1, \\<lambda>y. twoCube2 (y, 1))} =\n    {}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>y. twoCube2 (y, 0)), (- 1, \\<lambda>y. twoCube2 (y, 1))} =\n    {}", "using valid_typeII_div valid_two_chain_def"], ["proof (prove)\nusing this:\n  valid_typeII_division s two_chain\n  valid_two_chain ?twoChain \\<equiv>\n  (\\<forall>twoCube\\<in>?twoChain. valid_two_cube twoCube) \\<and>\n  pairwise (\\<lambda>c1 c2. boundary c1 \\<inter> boundary c2 = {})\n   ?twoChain \\<and>\n  inj_on cubeImage ?twoChain\n\ngoal (1 subgoal):\n 1. {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>y. twoCube2 (y, 0)), (- 1, \\<lambda>y. twoCube2 (y, 1))} =\n    {}", "by (simp add: boundary_def vertical_boundary_def horizontal_boundary_def pairwise_def \\<open>twoCube \\<noteq> twoCube2\\<close> that(1) that(2))"], ["proof (state)\nthis:\n  {(- 1, \\<lambda>y. twoCube (0, y)),\n   (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n  {(1, \\<lambda>y. twoCube2 (y, 0)), (- 1, \\<lambda>y. twoCube2 (y, 1))} =\n  {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?twoCube \\<in> two_chain; ?twoCube2.0 \\<in> two_chain\\<rbrakk>\n  \\<Longrightarrow> {(- 1, \\<lambda>y. ?twoCube (0, y)),\n                     (1, \\<lambda>y. ?twoCube (1, y))} \\<inter>\n                    {(1, \\<lambda>y. ?twoCube2.0 (y, 0)),\n                     (- 1, \\<lambda>y. ?twoCube2.0 (y, 1))} =\n                    {}\n\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>two_chain.\n        {(- 1, \\<lambda>y. x (0, y)), (1, \\<lambda>y. x (1, y))}) \\<inter>\n    (\\<Union>x\\<in>two_chain.\n        {(1, \\<lambda>z. x (z, 0)), (- 1, \\<lambda>z. x (z, 1))}) =\n    {}", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?twoCube \\<in> two_chain; ?twoCube2.0 \\<in> two_chain\\<rbrakk>\n  \\<Longrightarrow> {(- 1, \\<lambda>y. ?twoCube (0, y)),\n                     (1, \\<lambda>y. ?twoCube (1, y))} \\<inter>\n                    {(1, \\<lambda>y. ?twoCube2.0 (y, 0)),\n                     (- 1, \\<lambda>y. ?twoCube2.0 (y, 1))} =\n                    {}", "have \"\\<Union> ((\\<lambda>twoCube. {(- 1, \\<lambda>y. twoCube (0::real, y)), (1::real, \\<lambda>y. twoCube (1::real, y))}) ` two_chain)\n                                          \\<inter> \\<Union> ((\\<lambda>twoCube. {(1::int, \\<lambda>z. twoCube (z, 0::real)), (- 1, \\<lambda>z. twoCube (z, 1::real))}) ` two_chain)\n                                              = {}\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?twoCube \\<in> two_chain; ?twoCube2.0 \\<in> two_chain\\<rbrakk>\n  \\<Longrightarrow> {(- 1, \\<lambda>y. ?twoCube (0, y)),\n                     (1, \\<lambda>y. ?twoCube (1, y))} \\<inter>\n                    {(1, \\<lambda>y. ?twoCube2.0 (y, 0)),\n                     (- 1, \\<lambda>y. ?twoCube2.0 (y, 1))} =\n                    {}\n\ngoal (1 subgoal):\n 1. (\\<Union>twoCube\\<in>two_chain.\n        {(- 1, \\<lambda>y. twoCube (0, y)),\n         (1, \\<lambda>y. twoCube (1, y))}) \\<inter>\n    (\\<Union>twoCube\\<in>two_chain.\n        {case (1, \\<lambda>z. twoCube (z, 0)) of\n         (x, y) \\<Rightarrow> (real_of_int x, y),\n         (- 1, \\<lambda>z. twoCube (z, 1))}) =\n    {}", "by (force simp add: Complete_Lattices.Union_disjoint)"], ["proof (state)\nthis:\n  (\\<Union>twoCube\\<in>two_chain.\n      {(- 1, \\<lambda>y. twoCube (0, y)),\n       (1, \\<lambda>y. twoCube (1, y))}) \\<inter>\n  (\\<Union>twoCube\\<in>two_chain.\n      {case (1, \\<lambda>z. twoCube (z, 0)) of\n       (x, y) \\<Rightarrow> (real_of_int x, y),\n       (- 1, \\<lambda>z. twoCube (z, 1))}) =\n  {}\n\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>two_chain.\n        {(- 1, \\<lambda>y. x (0, y)), (1, \\<lambda>y. x (1, y))}) \\<inter>\n    (\\<Union>x\\<in>two_chain.\n        {(1, \\<lambda>z. x (z, 0)), (- 1, \\<lambda>z. x (z, 1))}) =\n    {}", "then"], ["proof (chain)\npicking this:\n  (\\<Union>twoCube\\<in>two_chain.\n      {(- 1, \\<lambda>y. twoCube (0, y)),\n       (1, \\<lambda>y. twoCube (1, y))}) \\<inter>\n  (\\<Union>twoCube\\<in>two_chain.\n      {case (1, \\<lambda>z. twoCube (z, 0)) of\n       (x, y) \\<Rightarrow> (real_of_int x, y),\n       (- 1, \\<lambda>z. twoCube (z, 1))}) =\n  {}", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Union>twoCube\\<in>two_chain.\n      {(- 1, \\<lambda>y. twoCube (0, y)),\n       (1, \\<lambda>y. twoCube (1, y))}) \\<inter>\n  (\\<Union>twoCube\\<in>two_chain.\n      {case (1, \\<lambda>z. twoCube (z, 0)) of\n       (x, y) \\<Rightarrow> (real_of_int x, y),\n       (- 1, \\<lambda>z. twoCube (z, 1))}) =\n  {}\n\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>two_chain.\n        {(- 1, \\<lambda>y. x (0, y)), (1, \\<lambda>y. x (1, y))}) \\<inter>\n    (\\<Union>x\\<in>two_chain.\n        {(1, \\<lambda>z. x (z, 0)), (- 1, \\<lambda>z. x (z, 1))}) =\n    {}", "by force"], ["proof (state)\nthis:\n  (\\<Union>x\\<in>two_chain.\n      {(- 1, \\<lambda>y. x (0, y)), (1, \\<lambda>y. x (1, y))}) \\<inter>\n  (\\<Union>x\\<in>two_chain.\n      {(1, \\<lambda>z. x (z, 0)), (- 1, \\<lambda>z. x (z, 1))}) =\n  {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Union>x\\<in>two_chain.\n      {(- 1, \\<lambda>y. x (0, y)), (1, \\<lambda>y. x (1, y))}) \\<inter>\n  (\\<Union>x\\<in>two_chain.\n      {(1, \\<lambda>z. x (z, 0)), (- 1, \\<lambda>z. x (z, 1))}) =\n  {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  two_chain_vertical_boundary two_chain \\<inter>\n  two_chain_horizontal_boundary two_chain =\n  {}\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "have \"one_chain_line_integral F {j} (two_chain_boundary two_chain)\n        = one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain) +\n          one_chain_line_integral F {j} (two_chain_horizontal_boundary two_chain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j} (two_chain_boundary two_chain) =\n    one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain) +\n    one_chain_line_integral F {j} (two_chain_horizontal_boundary two_chain)", "using boundary_is_vert_hor horiz_verti_disjoint"], ["proof (prove)\nusing this:\n  two_chain_boundary two_chain =\n  two_chain_vertical_boundary two_chain \\<union>\n  two_chain_horizontal_boundary two_chain\n  two_chain_vertical_boundary two_chain \\<inter>\n  two_chain_horizontal_boundary two_chain =\n  {}\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j} (two_chain_boundary two_chain) =\n    one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain) +\n    one_chain_line_integral F {j} (two_chain_horizontal_boundary two_chain)", "by (auto simp add: one_chain_line_integral_def hor_vert_finite sum.union_disjoint)"], ["proof (state)\nthis:\n  one_chain_line_integral F {j} (two_chain_boundary two_chain) =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain) +\n  one_chain_line_integral F {j} (two_chain_horizontal_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  one_chain_line_integral F {j} (two_chain_boundary two_chain) =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain) +\n  one_chain_line_integral F {j} (two_chain_horizontal_boundary two_chain)", "have y_axis_line_integral_is_only_vertical:\n    \"one_chain_line_integral F {j} (two_chain_boundary two_chain)\n     = one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\""], ["proof (prove)\nusing this:\n  one_chain_line_integral F {j} (two_chain_boundary two_chain) =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain) +\n  one_chain_line_integral F {j} (two_chain_horizontal_boundary two_chain)\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j} (two_chain_boundary two_chain) =\n    one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)", "using horiz_line_integral_zero"], ["proof (prove)\nusing this:\n  one_chain_line_integral F {j} (two_chain_boundary two_chain) =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain) +\n  one_chain_line_integral F {j} (two_chain_horizontal_boundary two_chain)\n  one_chain_line_integral F {j} (two_chain_horizontal_boundary two_chain) =\n  0\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j} (two_chain_boundary two_chain) =\n    one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)", "by auto"], ["proof (state)\nthis:\n  one_chain_line_integral F {j} (two_chain_boundary two_chain) =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "(*Since \\<gamma> \\<subseteq> the boundary of the 2-chain and the horizontal boundaries are \\<subseteq> \\<gamma>, then there is some \\<H> \\<subseteq> \\<partial>\\<^sub>H(2-\\<C>) such that \\<gamma> = \\<H> \\<union> \\<partial>\\<^sub>v(2-\\<C>)*)"], ["proof (state)\nthis:\n  one_chain_line_integral F {j} (two_chain_boundary two_chain) =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "have \"\\<exists>\\<H>. \\<H> \\<subseteq> (two_chain_horizontal_boundary two_chain) \\<and>\n             \\<gamma> = \\<H> \\<union> (two_chain_vertical_boundary two_chain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<H>\\<subseteq>two_chain_horizontal_boundary two_chain.\n       \\<gamma> = \\<H> \\<union> two_chain_vertical_boundary two_chain", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. ?\\<H> \\<subseteq> two_chain_horizontal_boundary two_chain \\<and>\n    \\<gamma> = ?\\<H> \\<union> two_chain_vertical_boundary two_chain", "let ?\\<H> = \"\\<gamma> - (two_chain_vertical_boundary two_chain)\""], ["proof (state)\ngoal (1 subgoal):\n 1. ?\\<H> \\<subseteq> two_chain_horizontal_boundary two_chain \\<and>\n    \\<gamma> = ?\\<H> \\<union> two_chain_vertical_boundary two_chain", "show \"?\\<H> \\<subseteq> two_chain_horizontal_boundary two_chain \\<and> \\<gamma> = ?\\<H> \\<union> two_chain_vertical_boundary two_chain\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma> - two_chain_vertical_boundary two_chain\n    \\<subseteq> two_chain_horizontal_boundary two_chain \\<and>\n    \\<gamma> =\n    \\<gamma> - two_chain_vertical_boundary two_chain \\<union>\n    two_chain_vertical_boundary two_chain", "using two_cubes_trace_vertical_boundaries\n        boundary_of_region_is_subset_of_partition_boundary boundary_is_vert_hor"], ["proof (prove)\nusing this:\n  two_chain_vertical_boundary two_chain \\<subseteq> \\<gamma>\n  \\<gamma> \\<subseteq> two_chain_boundary two_chain\n  two_chain_boundary two_chain =\n  two_chain_vertical_boundary two_chain \\<union>\n  two_chain_horizontal_boundary two_chain\n\ngoal (1 subgoal):\n 1. \\<gamma> - two_chain_vertical_boundary two_chain\n    \\<subseteq> two_chain_horizontal_boundary two_chain \\<and>\n    \\<gamma> =\n    \\<gamma> - two_chain_vertical_boundary two_chain \\<union>\n    two_chain_vertical_boundary two_chain", "by blast"], ["proof (state)\nthis:\n  \\<gamma> - two_chain_vertical_boundary two_chain\n  \\<subseteq> two_chain_horizontal_boundary two_chain \\<and>\n  \\<gamma> =\n  \\<gamma> - two_chain_vertical_boundary two_chain \\<union>\n  two_chain_vertical_boundary two_chain\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>\\<H>\\<subseteq>two_chain_horizontal_boundary two_chain.\n     \\<gamma> = \\<H> \\<union> two_chain_vertical_boundary two_chain\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<H>\\<subseteq>two_chain_horizontal_boundary two_chain.\n     \\<gamma> = \\<H> \\<union> two_chain_vertical_boundary two_chain", "obtain \\<H> where\n    h_props: \"\\<H> \\<subseteq> (two_chain_horizontal_boundary two_chain)\"\n    \"\\<gamma> = \\<H> \\<union> (two_chain_vertical_boundary two_chain)\""], ["proof (prove)\nusing this:\n  \\<exists>\\<H>\\<subseteq>two_chain_horizontal_boundary two_chain.\n     \\<gamma> = \\<H> \\<union> two_chain_vertical_boundary two_chain\n\ngoal (1 subgoal):\n 1. (\\<And>\\<H>.\n        \\<lbrakk>\\<H> \\<subseteq> two_chain_horizontal_boundary two_chain;\n         \\<gamma> =\n         \\<H> \\<union> two_chain_vertical_boundary two_chain\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<H> \\<subseteq> two_chain_horizontal_boundary two_chain\n  \\<gamma> = \\<H> \\<union> two_chain_vertical_boundary two_chain\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "have h_vert_disj: \"\\<H> \\<inter> (two_chain_vertical_boundary two_chain) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<H> \\<inter> two_chain_vertical_boundary two_chain = {}", "using horiz_verti_disjoint h_props(1)"], ["proof (prove)\nusing this:\n  two_chain_vertical_boundary two_chain \\<inter>\n  two_chain_horizontal_boundary two_chain =\n  {}\n  \\<H> \\<subseteq> two_chain_horizontal_boundary two_chain\n\ngoal (1 subgoal):\n 1. \\<H> \\<inter> two_chain_vertical_boundary two_chain = {}", "by auto"], ["proof (state)\nthis:\n  \\<H> \\<inter> two_chain_vertical_boundary two_chain = {}\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "have h_finite: \"finite \\<H>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite \\<H>", "using hor_vert_finite h_props(1) Finite_Set.rev_finite_subset"], ["proof (prove)\nusing this:\n  finite (two_chain_vertical_boundary two_chain)\n  finite (two_chain_horizontal_boundary two_chain)\n  \\<H> \\<subseteq> two_chain_horizontal_boundary two_chain\n  \\<lbrakk>finite ?B; ?A \\<subseteq> ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite \\<H>", "by force"], ["proof (state)\nthis:\n  finite \\<H>\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "have line_integral_on_path:\n    \"one_chain_line_integral F {j} \\<gamma> =\n     one_chain_line_integral F {j} \\<H> + one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j} \\<gamma> =\n    one_chain_line_integral F {j} \\<H> +\n    one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)", "by (auto simp add: one_chain_line_integral_def  h_props sum.union_disjoint[OF h_finite hor_vert_finite(1) h_vert_disj])"], ["proof (state)\nthis:\n  one_chain_line_integral F {j} \\<gamma> =\n  one_chain_line_integral F {j} \\<H> +\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "(*Since \\<H> \\<subseteq> \\<partial>\\<^sub>H(2-\\<C>), then the line_integral on the x axis along \\<H> is 0, and from 1 Q.E.D. *)"], ["proof (state)\nthis:\n  one_chain_line_integral F {j} \\<gamma> =\n  one_chain_line_integral F {j} \\<H> +\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "have \"one_chain_line_integral F {j} \\<H> = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j} \\<H> = 0", "proof (simp add: one_chain_line_integral_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>\\<H>.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n    0", "have \"line_integral F {j} (snd oneCube) = 0\"\n      if oneCube: \"oneCube \\<in> two_chain_horizontal_boundary(two_chain)\" for oneCube"], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "obtain x y1 y2 k where horiz_edge_def: \"oneCube = (k, (\\<lambda>t::real. ((1 - t) * (y2) + t * y1, x::real)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k y2 y1 x.\n        oneCube =\n        (k, \\<lambda>t. ((1 - t) * y2 + t * y1, x)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using valid_typeII_div oneCube"], ["proof (prove)\nusing this:\n  valid_typeII_division s two_chain\n  oneCube \\<in> two_chain_horizontal_boundary two_chain\n\ngoal (1 subgoal):\n 1. (\\<And>k y2 y1 x.\n        oneCube =\n        (k, \\<lambda>t. ((1 - t) * y2 + t * y1, x)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: typeII_twoCube_def two_chain_horizontal_boundary_def horizontal_boundary_def)"], ["proof (state)\nthis:\n  oneCube = (k, \\<lambda>t. ((1 - t) * y2 + t * y1, x))\n\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "let ?horiz_edge = \"(snd oneCube)\""], ["proof (state)\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "have horiz_edge_y_const: \"\\<forall>t. (?horiz_edge t) \\<bullet> j = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t. snd oneCube t \\<bullet> j = x", "by (simp add: j_is_y_axis horiz_edge_def)"], ["proof (state)\nthis:\n  \\<forall>t. snd oneCube t \\<bullet> j = x\n\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "have horiz_edge_is_straight_path:\n        \"?horiz_edge = (\\<lambda>t. (y2 + t * (y1 - y2), x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd oneCube = (\\<lambda>t. (y2 + t * (y1 - y2), x))", "by (simp add: add_diff_eq diff_add_eq mult.commute right_diff_distrib horiz_edge_def)"], ["proof (state)\nthis:\n  snd oneCube = (\\<lambda>t. (y2 + t * (y1 - y2), x))\n\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "show \"line_integral F {j} (snd oneCube) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral F {j} (snd oneCube) = 0", "by (simp add: horiz_edge_is_straight_path j_is_y_axis line_integral_on_pair_straight_path(1) mult.commute straight_path_diffrentiable_y)"], ["proof (state)\nthis:\n  line_integral F {j} (snd oneCube) = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?oneCube \\<in> two_chain_horizontal_boundary two_chain \\<Longrightarrow>\n  line_integral F {j} (snd ?oneCube) = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>\\<H>.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n    0", "then"], ["proof (chain)\npicking this:\n  ?oneCube \\<in> two_chain_horizontal_boundary two_chain \\<Longrightarrow>\n  line_integral F {j} (snd ?oneCube) = 0", "have \"\\<forall>oneCube \\<in> \\<H>. line_integral F {j} (snd oneCube) = 0\""], ["proof (prove)\nusing this:\n  ?oneCube \\<in> two_chain_horizontal_boundary two_chain \\<Longrightarrow>\n  line_integral F {j} (snd ?oneCube) = 0\n\ngoal (1 subgoal):\n 1. \\<forall>oneCube\\<in>\\<H>. line_integral F {j} (snd oneCube) = 0", "using h_props"], ["proof (prove)\nusing this:\n  ?oneCube \\<in> two_chain_horizontal_boundary two_chain \\<Longrightarrow>\n  line_integral F {j} (snd ?oneCube) = 0\n  \\<H> \\<subseteq> two_chain_horizontal_boundary two_chain\n  \\<gamma> = \\<H> \\<union> two_chain_vertical_boundary two_chain\n\ngoal (1 subgoal):\n 1. \\<forall>oneCube\\<in>\\<H>. line_integral F {j} (snd oneCube) = 0", "by auto"], ["proof (state)\nthis:\n  \\<forall>oneCube\\<in>\\<H>. line_integral F {j} (snd oneCube) = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>\\<H>.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n    0", "then"], ["proof (chain)\npicking this:\n  \\<forall>oneCube\\<in>\\<H>. line_integral F {j} (snd oneCube) = 0", "have \"\\<forall>x\\<in>\\<H>. (case x of (k, g) \\<Rightarrow> (k::int) * line_integral F {j} g) = 0\""], ["proof (prove)\nusing this:\n  \\<forall>oneCube\\<in>\\<H>. line_integral F {j} (snd oneCube) = 0\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>\\<H>.\n       (case x of\n        (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n       0", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>\\<H>.\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n     0\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>\\<H>.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n    0", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>\\<H>.\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n     0", "show \"(\\<Sum>x\\<in>\\<H>. case x of (k, g) \\<Rightarrow> k * line_integral F {j} g) = 0\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>\\<H>.\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n     0\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>\\<H>.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n    0", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>\\<H>.\n     case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) =\n  0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  one_chain_line_integral F {j} \\<H> = 0\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  one_chain_line_integral F {j} \\<H> = 0", "have \"one_chain_line_integral F {j} \\<gamma> =\n                           one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\""], ["proof (prove)\nusing this:\n  one_chain_line_integral F {j} \\<H> = 0\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j} \\<gamma> =\n    one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)", "using line_integral_on_path"], ["proof (prove)\nusing this:\n  one_chain_line_integral F {j} \\<H> = 0\n  one_chain_line_integral F {j} \\<gamma> =\n  one_chain_line_integral F {j} \\<H> +\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j} \\<gamma> =\n    one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)", "by auto"], ["proof (state)\nthis:\n  one_chain_line_integral F {j} \\<gamma> =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  one_chain_line_integral F {j} \\<gamma> =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)", "have \"one_chain_line_integral F {j} \\<gamma> =\n             one_chain_line_integral F {j} (two_chain_boundary two_chain)\""], ["proof (prove)\nusing this:\n  one_chain_line_integral F {j} \\<gamma> =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j} \\<gamma> =\n    one_chain_line_integral F {j} (two_chain_boundary two_chain)", "using y_axis_line_integral_is_only_vertical"], ["proof (prove)\nusing this:\n  one_chain_line_integral F {j} \\<gamma> =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\n  one_chain_line_integral F {j} (two_chain_boundary two_chain) =\n  one_chain_line_integral F {j} (two_chain_vertical_boundary two_chain)\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j} \\<gamma> =\n    one_chain_line_integral F {j} (two_chain_boundary two_chain)", "by auto"], ["proof (state)\nthis:\n  one_chain_line_integral F {j} \\<gamma> =\n  one_chain_line_integral F {j} (two_chain_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  one_chain_line_integral F {j} \\<gamma> =\n  one_chain_line_integral F {j} (two_chain_boundary two_chain)", "show ?thesis"], ["proof (prove)\nusing this:\n  one_chain_line_integral F {j} \\<gamma> =\n  one_chain_line_integral F {j} (two_chain_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "using valid_typeII_div GreenThm_typeII_divisible"], ["proof (prove)\nusing this:\n  one_chain_line_integral F {j} \\<gamma> =\n  one_chain_line_integral F {j} (two_chain_boundary two_chain)\n  valid_typeII_division s two_chain\n  gen_division s (cubeImage ` two_chain) \\<Longrightarrow>\n  integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n  one_chain_line_integral F {j} (two_chain_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "by auto"], ["proof (state)\nthis:\n  integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n  one_chain_line_integral F {j} \\<gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "locale green_typeI_cube =  R2 +\n  fixes twoC F\n  assumes \n    two_cube: \"typeI_twoCube twoC\" and\n    valid_two_cube: \"valid_two_cube twoC\" and\n    f_analytically_valid: \"analytically_valid (cubeImage twoC) (\\<lambda>x. (F x) \\<bullet> i) j\"\nbegin"], ["", "lemma GreenThm_typeI_twoCube:\n  shows \"integral (cubeImage twoC) (\\<lambda>a. - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j  a) = one_chain_line_integral F {i} (boundary twoC)\"\n    \"\\<forall>(k,\\<gamma>) \\<in> boundary twoC. line_integral_exists F {i} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral (cubeImage twoC)\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a) =\n    one_chain_line_integral F {i} (boundary twoC) &&&\n    \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n       line_integral_exists F {i} \\<gamma>", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. integral (cubeImage twoC)\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a) =\n    one_chain_line_integral F {i} (boundary twoC)\n 2. \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n       line_integral_exists F {i} \\<gamma>", "let ?bottom_edge = \"(\\<lambda>x. twoC(x, 0))\""], ["proof (state)\ngoal (2 subgoals):\n 1. integral (cubeImage twoC)\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a) =\n    one_chain_line_integral F {i} (boundary twoC)\n 2. \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n       line_integral_exists F {i} \\<gamma>", "let ?right_edge = \"(\\<lambda>y. twoC(1, y))\""], ["proof (state)\ngoal (2 subgoals):\n 1. integral (cubeImage twoC)\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a) =\n    one_chain_line_integral F {i} (boundary twoC)\n 2. \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n       line_integral_exists F {i} \\<gamma>", "let ?top_edge = \"(\\<lambda>x. twoC(x, 1))\""], ["proof (state)\ngoal (2 subgoals):\n 1. integral (cubeImage twoC)\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a) =\n    one_chain_line_integral F {i} (boundary twoC)\n 2. \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n       line_integral_exists F {i} \\<gamma>", "let ?left_edge = \"(\\<lambda>y. twoC(0, y))\""], ["proof (state)\ngoal (2 subgoals):\n 1. integral (cubeImage twoC)\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a) =\n    one_chain_line_integral F {i} (boundary twoC)\n 2. \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n       line_integral_exists F {i} \\<gamma>", "have line_integral_around_boundary:\n    \"one_chain_line_integral F {i} (boundary twoC) = \n     line_integral F {i} ?bottom_edge + line_integral F {i} ?right_edge\n     -  line_integral F {i} ?top_edge - line_integral F {i} ?left_edge\""], ["proof (prove)\ngoal (1 subgoal):\n 1. one_chain_line_integral F {i} (boundary twoC) =\n    line_integral F {i} (\\<lambda>x. twoC (x, 0)) +\n    line_integral F {i} (\\<lambda>y. twoC (1, y)) -\n    line_integral F {i} (\\<lambda>x. twoC (x, 1)) -\n    line_integral F {i} (\\<lambda>y. twoC (0, y))", "proof (simp add: one_chain_line_integral_def horizontal_boundary_def vertical_boundary_def boundary_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                  (1, \\<lambda>y. twoC (1, y)),\n                  (1, \\<lambda>x. twoC (x, 0)),\n                  (- 1, \\<lambda>x. twoC (x, 1))}.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n    line_integral F {i} (\\<lambda>x. twoC (x, 0)) +\n    line_integral F {i} (\\<lambda>y. twoC (1, y)) -\n    line_integral F {i} (\\<lambda>x. twoC (x, 1)) -\n    line_integral F {i} (\\<lambda>y. twoC (0, y))", "have finite1: \"finite {(- 1::int, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)), (- 1, \\<lambda>x. twoC (x, 1))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n      (- 1, \\<lambda>x. twoC (x, 1))}", "by auto"], ["proof (state)\nthis:\n  finite\n   {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n    (- 1, \\<lambda>x. twoC (x, 1))}\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                  (1, \\<lambda>y. twoC (1, y)),\n                  (1, \\<lambda>x. twoC (x, 0)),\n                  (- 1, \\<lambda>x. twoC (x, 1))}.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n    line_integral F {i} (\\<lambda>x. twoC (x, 0)) +\n    line_integral F {i} (\\<lambda>y. twoC (1, y)) -\n    line_integral F {i} (\\<lambda>x. twoC (x, 1)) -\n    line_integral F {i} (\\<lambda>y. twoC (0, y))", "have sum_step1: \"(\\<Sum>(k, g)\\<in>{(- (1::int), \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)), (1, \\<lambda>x. twoC (x, 0)), (- 1, \\<lambda>x. twoC (x, 1))}. k * line_integral F {i} g) =\n                       line_integral F {i} (\\<lambda>x. twoC (x, 0)) + (\\<Sum>(k, g)\\<in>{(- (1::int), \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)), (- 1, \\<lambda>x. twoC (x, 1))}. k * line_integral F {i} g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\n           \\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                 (1, \\<lambda>y. twoC (1, y)), (1, \\<lambda>x. twoC (x, 0)),\n                 (- 1, \\<lambda>x. twoC (x, 1))}.\n       real_of_int k * line_integral F {i} g) =\n    line_integral F {i} (\\<lambda>x. twoC (x, 0)) +\n    (\\<Sum>(k, g)\n           \\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                 (1, \\<lambda>y. twoC (1, y)),\n                 (- 1, \\<lambda>x. twoC (x, 1))}.\n       real_of_int k * line_integral F {i} g)", "using sum.insert_remove [OF finite1] valid_two_cube"], ["proof (prove)\nusing this:\n  sum ?g\n   {?x, (- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n    (- 1, \\<lambda>x. twoC (x, 1))} =\n  ?g ?x +\n  sum ?g\n   ({(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n     (- 1, \\<lambda>x. twoC (x, 1))} -\n    {?x})\n  valid_two_cube twoC\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\n           \\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                 (1, \\<lambda>y. twoC (1, y)), (1, \\<lambda>x. twoC (x, 0)),\n                 (- 1, \\<lambda>x. twoC (x, 1))}.\n       real_of_int k * line_integral F {i} g) =\n    line_integral F {i} (\\<lambda>x. twoC (x, 0)) +\n    (\\<Sum>(k, g)\n           \\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                 (1, \\<lambda>y. twoC (1, y)),\n                 (- 1, \\<lambda>x. twoC (x, 1))}.\n       real_of_int k * line_integral F {i} g)", "by (auto simp: horizontal_boundary_def vertical_boundary_def boundary_def valid_two_cube_def card_insert_if split: if_split_asm)"], ["proof (state)\nthis:\n  (\\<Sum>(k, g)\n         \\<in>{(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n               (1, \\<lambda>x. twoC (x, 0)),\n               (- 1, \\<lambda>x. twoC (x, 1))}.\n     real_of_int k * line_integral F {i} g) =\n  line_integral F {i} (\\<lambda>x. twoC (x, 0)) +\n  (\\<Sum>(k, g)\n         \\<in>{(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n               (- 1, \\<lambda>x. twoC (x, 1))}.\n     real_of_int k * line_integral F {i} g)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                  (1, \\<lambda>y. twoC (1, y)),\n                  (1, \\<lambda>x. twoC (x, 0)),\n                  (- 1, \\<lambda>x. twoC (x, 1))}.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n    line_integral F {i} (\\<lambda>x. twoC (x, 0)) +\n    line_integral F {i} (\\<lambda>y. twoC (1, y)) -\n    line_integral F {i} (\\<lambda>x. twoC (x, 1)) -\n    line_integral F {i} (\\<lambda>y. twoC (0, y))", "have three_distinct_edges: \"card {(- 1::int, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)), (- 1, \\<lambda>x. twoC (x, 1))} = 3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n      (- 1, \\<lambda>x. twoC (x, 1))} =\n    3", "using valid_two_cube"], ["proof (prove)\nusing this:\n  valid_two_cube twoC\n\ngoal (1 subgoal):\n 1. card\n     {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n      (- 1, \\<lambda>x. twoC (x, 1))} =\n    3", "apply (simp add: one_chain_line_integral_def horizontal_boundary_def vertical_boundary_def boundary_def valid_two_cube_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n      (1, \\<lambda>x. twoC (x, 0)), (- 1, \\<lambda>x. twoC (x, 1))} =\n    4 \\<Longrightarrow>\n    card\n     {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n      (- 1, \\<lambda>x. twoC (x, 1))} =\n    3", "by (auto simp: card_insert_if split: if_split_asm)"], ["proof (state)\nthis:\n  card\n   {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n    (- 1, \\<lambda>x. twoC (x, 1))} =\n  3\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                  (1, \\<lambda>y. twoC (1, y)),\n                  (1, \\<lambda>x. twoC (x, 0)),\n                  (- 1, \\<lambda>x. twoC (x, 1))}.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n    line_integral F {i} (\\<lambda>x. twoC (x, 0)) +\n    line_integral F {i} (\\<lambda>y. twoC (1, y)) -\n    line_integral F {i} (\\<lambda>x. twoC (x, 1)) -\n    line_integral F {i} (\\<lambda>y. twoC (0, y))", "have finite2: \"finite {(- 1::int, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y))}", "by auto"], ["proof (state)\nthis:\n  finite {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y))}\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                  (1, \\<lambda>y. twoC (1, y)),\n                  (1, \\<lambda>x. twoC (x, 0)),\n                  (- 1, \\<lambda>x. twoC (x, 1))}.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n    line_integral F {i} (\\<lambda>x. twoC (x, 0)) +\n    line_integral F {i} (\\<lambda>y. twoC (1, y)) -\n    line_integral F {i} (\\<lambda>x. twoC (x, 1)) -\n    line_integral F {i} (\\<lambda>y. twoC (0, y))", "have sum_step2: \"(\\<Sum>(k, g)\\<in>{(- (1::int), \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)), (-1, \\<lambda>x. twoC (x, 1))}. k * line_integral F {i} g) =\n                          (- line_integral F {i} (\\<lambda>x. twoC (x, 1))) + (\\<Sum>(k, g)\\<in>{(- (1::int), \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y))}. k * line_integral F {i} g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\n           \\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                 (1, \\<lambda>y. twoC (1, y)),\n                 (- 1, \\<lambda>x. twoC (x, 1))}.\n       real_of_int k * line_integral F {i} g) =\n    - line_integral F {i} (\\<lambda>x. twoC (x, 1)) +\n    (\\<Sum>(k, g)\n           \\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                 (1, \\<lambda>y. twoC (1, y))}.\n       real_of_int k * line_integral F {i} g)", "using sum.insert_remove [OF finite2] three_distinct_edges"], ["proof (prove)\nusing this:\n  sum ?g\n   {?x, (- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y))} =\n  ?g ?x +\n  sum ?g\n   ({(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y))} - {?x})\n  card\n   {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n    (- 1, \\<lambda>x. twoC (x, 1))} =\n  3\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\n           \\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                 (1, \\<lambda>y. twoC (1, y)),\n                 (- 1, \\<lambda>x. twoC (x, 1))}.\n       real_of_int k * line_integral F {i} g) =\n    - line_integral F {i} (\\<lambda>x. twoC (x, 1)) +\n    (\\<Sum>(k, g)\n           \\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                 (1, \\<lambda>y. twoC (1, y))}.\n       real_of_int k * line_integral F {i} g)", "by (auto simp: card_insert_if split: if_split_asm)"], ["proof (state)\nthis:\n  (\\<Sum>(k, g)\n         \\<in>{(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n               (- 1, \\<lambda>x. twoC (x, 1))}.\n     real_of_int k * line_integral F {i} g) =\n  - line_integral F {i} (\\<lambda>x. twoC (x, 1)) +\n  (\\<Sum>(k, g)\n         \\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n               (1, \\<lambda>y. twoC (1, y))}.\n     real_of_int k * line_integral F {i} g)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                  (1, \\<lambda>y. twoC (1, y)),\n                  (1, \\<lambda>x. twoC (x, 0)),\n                  (- 1, \\<lambda>x. twoC (x, 1))}.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n    line_integral F {i} (\\<lambda>x. twoC (x, 0)) +\n    line_integral F {i} (\\<lambda>y. twoC (1, y)) -\n    line_integral F {i} (\\<lambda>x. twoC (x, 1)) -\n    line_integral F {i} (\\<lambda>y. twoC (0, y))", "have two_distinct_edges: \"card {(- 1::int, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y))} = 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y))} = 2", "using three_distinct_edges"], ["proof (prove)\nusing this:\n  card\n   {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n    (- 1, \\<lambda>x. twoC (x, 1))} =\n  3\n\ngoal (1 subgoal):\n 1. card {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y))} = 2", "by (simp add: one_chain_line_integral_def horizontal_boundary_def vertical_boundary_def boundary_def)"], ["proof (state)\nthis:\n  card {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y))} = 2\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                  (1, \\<lambda>y. twoC (1, y)),\n                  (1, \\<lambda>x. twoC (x, 0)),\n                  (- 1, \\<lambda>x. twoC (x, 1))}.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n    line_integral F {i} (\\<lambda>x. twoC (x, 0)) +\n    line_integral F {i} (\\<lambda>y. twoC (1, y)) -\n    line_integral F {i} (\\<lambda>x. twoC (x, 1)) -\n    line_integral F {i} (\\<lambda>y. twoC (0, y))", "have finite3: \"finite {(- 1::int, \\<lambda>y. twoC (0, y))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {(- 1, \\<lambda>y. twoC (0, y))}", "by auto"], ["proof (state)\nthis:\n  finite {(- 1, \\<lambda>y. twoC (0, y))}\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                  (1, \\<lambda>y. twoC (1, y)),\n                  (1, \\<lambda>x. twoC (x, 0)),\n                  (- 1, \\<lambda>x. twoC (x, 1))}.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n    line_integral F {i} (\\<lambda>x. twoC (x, 0)) +\n    line_integral F {i} (\\<lambda>y. twoC (1, y)) -\n    line_integral F {i} (\\<lambda>x. twoC (x, 1)) -\n    line_integral F {i} (\\<lambda>y. twoC (0, y))", "have sum_step3: \"(\\<Sum>(k, g)\\<in>{(- (1::int), \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y))}. k * line_integral F {i} g) =\n                          (line_integral F {i} (\\<lambda>y. twoC (1, y))) + (\\<Sum>(k, g)\\<in>{(- (1::real), \\<lambda>y. twoC (0, y))}. k * line_integral F {i} g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\n           \\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                 (1, \\<lambda>y. twoC (1, y))}.\n       real_of_int k * line_integral F {i} g) =\n    line_integral F {i} (\\<lambda>y. twoC (1, y)) +\n    (\\<Sum>(k, g)\\<in>{(- 1, \\<lambda>y. twoC (0, y))}.\n       k * line_integral F {i} g)", "using sum.insert_remove [OF finite2] three_distinct_edges"], ["proof (prove)\nusing this:\n  sum ?g\n   {?x, (- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y))} =\n  ?g ?x +\n  sum ?g\n   ({(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y))} - {?x})\n  card\n   {(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n    (- 1, \\<lambda>x. twoC (x, 1))} =\n  3\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\n           \\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                 (1, \\<lambda>y. twoC (1, y))}.\n       real_of_int k * line_integral F {i} g) =\n    line_integral F {i} (\\<lambda>y. twoC (1, y)) +\n    (\\<Sum>(k, g)\\<in>{(- 1, \\<lambda>y. twoC (0, y))}.\n       k * line_integral F {i} g)", "by (auto simp: card_insert_if split: if_split_asm)"], ["proof (state)\nthis:\n  (\\<Sum>(k, g)\n         \\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n               (1, \\<lambda>y. twoC (1, y))}.\n     real_of_int k * line_integral F {i} g) =\n  line_integral F {i} (\\<lambda>y. twoC (1, y)) +\n  (\\<Sum>(k, g)\\<in>{(- 1, \\<lambda>y. twoC (0, y))}.\n     k * line_integral F {i} g)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                  (1, \\<lambda>y. twoC (1, y)),\n                  (1, \\<lambda>x. twoC (x, 0)),\n                  (- 1, \\<lambda>x. twoC (x, 1))}.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n    line_integral F {i} (\\<lambda>x. twoC (x, 0)) +\n    line_integral F {i} (\\<lambda>y. twoC (1, y)) -\n    line_integral F {i} (\\<lambda>x. twoC (x, 1)) -\n    line_integral F {i} (\\<lambda>y. twoC (0, y))", "show \"(\\<Sum>x\\<in>{(- 1::int, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)), (1, \\<lambda>x. twoC (x, 0)), (- 1, \\<lambda>x. twoC (x, 1))}. case x of (k, g) \\<Rightarrow> k * line_integral F {i} g) =\n                               line_integral F {i} (\\<lambda>x. twoC (x, 0)) + line_integral F {i} (\\<lambda>y. twoC (1, y)) - line_integral F {i} (\\<lambda>x. twoC (x, 1)) - line_integral F {i} (\\<lambda>y. twoC (0, y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                  (1, \\<lambda>y. twoC (1, y)),\n                  (1, \\<lambda>x. twoC (x, 0)),\n                  (- 1, \\<lambda>x. twoC (x, 1))}.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n    line_integral F {i} (\\<lambda>x. twoC (x, 0)) +\n    line_integral F {i} (\\<lambda>y. twoC (1, y)) -\n    line_integral F {i} (\\<lambda>x. twoC (x, 1)) -\n    line_integral F {i} (\\<lambda>y. twoC (0, y))", "using sum_step1 sum_step2 sum_step3"], ["proof (prove)\nusing this:\n  (\\<Sum>(k, g)\n         \\<in>{(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n               (1, \\<lambda>x. twoC (x, 0)),\n               (- 1, \\<lambda>x. twoC (x, 1))}.\n     real_of_int k * line_integral F {i} g) =\n  line_integral F {i} (\\<lambda>x. twoC (x, 0)) +\n  (\\<Sum>(k, g)\n         \\<in>{(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n               (- 1, \\<lambda>x. twoC (x, 1))}.\n     real_of_int k * line_integral F {i} g)\n  (\\<Sum>(k, g)\n         \\<in>{(- 1, \\<lambda>y. twoC (0, y)), (1, \\<lambda>y. twoC (1, y)),\n               (- 1, \\<lambda>x. twoC (x, 1))}.\n     real_of_int k * line_integral F {i} g) =\n  - line_integral F {i} (\\<lambda>x. twoC (x, 1)) +\n  (\\<Sum>(k, g)\n         \\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n               (1, \\<lambda>y. twoC (1, y))}.\n     real_of_int k * line_integral F {i} g)\n  (\\<Sum>(k, g)\n         \\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n               (1, \\<lambda>y. twoC (1, y))}.\n     real_of_int k * line_integral F {i} g) =\n  line_integral F {i} (\\<lambda>y. twoC (1, y)) +\n  (\\<Sum>(k, g)\\<in>{(- 1, \\<lambda>y. twoC (0, y))}.\n     k * line_integral F {i} g)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                  (1, \\<lambda>y. twoC (1, y)),\n                  (1, \\<lambda>x. twoC (x, 0)),\n                  (- 1, \\<lambda>x. twoC (x, 1))}.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n    line_integral F {i} (\\<lambda>x. twoC (x, 0)) +\n    line_integral F {i} (\\<lambda>y. twoC (1, y)) -\n    line_integral F {i} (\\<lambda>x. twoC (x, 1)) -\n    line_integral F {i} (\\<lambda>y. twoC (0, y))", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{(- 1, \\<lambda>y. twoC (0, y)),\n                (1, \\<lambda>y. twoC (1, y)), (1, \\<lambda>x. twoC (x, 0)),\n                (- 1, \\<lambda>x. twoC (x, 1))}.\n     case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n  line_integral F {i} (\\<lambda>x. twoC (x, 0)) +\n  line_integral F {i} (\\<lambda>y. twoC (1, y)) -\n  line_integral F {i} (\\<lambda>x. twoC (x, 1)) -\n  line_integral F {i} (\\<lambda>y. twoC (0, y))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  one_chain_line_integral F {i} (boundary twoC) =\n  line_integral F {i} (\\<lambda>x. twoC (x, 0)) +\n  line_integral F {i} (\\<lambda>y. twoC (1, y)) -\n  line_integral F {i} (\\<lambda>x. twoC (x, 1)) -\n  line_integral F {i} (\\<lambda>y. twoC (0, y))\n\ngoal (2 subgoals):\n 1. integral (cubeImage twoC)\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a) =\n    one_chain_line_integral F {i} (boundary twoC)\n 2. \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n       line_integral_exists F {i} \\<gamma>", "obtain a b g1 g2 where\n    twoCisTypeI: \"a < b\"\n    \"(\\<forall>x \\<in> cbox a b. g2 x \\<le> g1 x)\"\n    \"cubeImage twoC = {(x,y). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)}\"\n    \"twoC = (\\<lambda>(x, y). ((1 - x) * a + x * b, (1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b)))\"\n    \"g1 piecewise_C1_differentiable_on {a .. b}\"\n    \"g2 piecewise_C1_differentiable_on {a .. b}\"\n    \"(\\<lambda>x. twoC(x, 0)) = (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x)))\"\n    \"(\\<lambda>y. twoC(1, y)) = (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b)))\"\n    \"(\\<lambda>x. twoC(x, 1)) = (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x)))\"\n    \"(\\<lambda>y. twoC(0, y)) = (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b g2 g1.\n        \\<lbrakk>a < b; \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x;\n         cubeImage twoC =\n         {(x, y). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)};\n         twoC =\n         (\\<lambda>(x, y).\n             ((1 - x) * a + x * b,\n              (1 - y) * g2 ((1 - x) * a + x * b) +\n              y * g1 ((1 - x) * a + x * b)));\n         g1 piecewise_C1_differentiable_on {a..b};\n         g2 piecewise_C1_differentiable_on {a..b};\n         (\\<lambda>x. twoC (x, 0)) =\n         (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x)));\n         (\\<lambda>y. twoC (1, y)) =\n         (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b)));\n         (\\<lambda>x. twoC (x, 1)) =\n         (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x)));\n         (\\<lambda>y. twoC (0, y)) =\n         (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using two_cube and typeI_cube_explicit_spec[of\"twoC\"]"], ["proof (prove)\nusing this:\n  typeI_twoCube twoC\n  typeI_twoCube twoC \\<Longrightarrow>\n  \\<exists>a b g1 g2.\n     a < b \\<and>\n     (\\<forall>x\\<in>{a..b}. g2 x \\<le> g1 x) \\<and>\n     cubeImage twoC =\n     {(x, y). x \\<in> {a..b} \\<and> y \\<in> {g2 x..g1 x}} \\<and>\n     twoC =\n     (\\<lambda>(x, y).\n         ((1 - x) * a + x * b,\n          (1 - y) * g2 ((1 - x) * a + x * b) +\n          y * g1 ((1 - x) * a + x * b))) \\<and>\n     g1 piecewise_C1_differentiable_on {a..b} \\<and>\n     g2 piecewise_C1_differentiable_on {a..b} \\<and>\n     (\\<lambda>x. twoC (x, 0)) =\n     (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x))) \\<and>\n     (\\<lambda>y. twoC (1, y)) =\n     (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b))) \\<and>\n     (\\<lambda>x. twoC (x, 1)) =\n     (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x))) \\<and>\n     (\\<lambda>y. twoC (0, y)) =\n     (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))\n\ngoal (1 subgoal):\n 1. (\\<And>a b g2 g1.\n        \\<lbrakk>a < b; \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x;\n         cubeImage twoC =\n         {(x, y). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)};\n         twoC =\n         (\\<lambda>(x, y).\n             ((1 - x) * a + x * b,\n              (1 - y) * g2 ((1 - x) * a + x * b) +\n              y * g1 ((1 - x) * a + x * b)));\n         g1 piecewise_C1_differentiable_on {a..b};\n         g2 piecewise_C1_differentiable_on {a..b};\n         (\\<lambda>x. twoC (x, 0)) =\n         (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x)));\n         (\\<lambda>y. twoC (1, y)) =\n         (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b)));\n         (\\<lambda>x. twoC (x, 1)) =\n         (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x)));\n         (\\<lambda>y. twoC (0, y)) =\n         (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  a < b\n  \\<forall>x\\<in>cbox a b. g2 x \\<le> g1 x\n  cubeImage twoC =\n  {(x, y). x \\<in> cbox a b \\<and> y \\<in> cbox (g2 x) (g1 x)}\n  twoC =\n  (\\<lambda>(x, y).\n      ((1 - x) * a + x * b,\n       (1 - y) * g2 ((1 - x) * a + x * b) + y * g1 ((1 - x) * a + x * b)))\n  g1 piecewise_C1_differentiable_on {a..b}\n  g2 piecewise_C1_differentiable_on {a..b}\n  (\\<lambda>x. twoC (x, 0)) =\n  (\\<lambda>x. (a + (b - a) * x, g2 (a + (b - a) * x)))\n  (\\<lambda>y. twoC (1, y)) =\n  (\\<lambda>x. (b, g2 b + x *\\<^sub>R (g1 b - g2 b)))\n  (\\<lambda>x. twoC (x, 1)) =\n  (\\<lambda>x. (a + (b - a) * x, g1 (a + (b - a) * x)))\n  (\\<lambda>y. twoC (0, y)) =\n  (\\<lambda>x. (a, g2 a + x *\\<^sub>R (g1 a - g2 a)))\n\ngoal (2 subgoals):\n 1. integral (cubeImage twoC)\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a) =\n    one_chain_line_integral F {i} (boundary twoC)\n 2. \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n       line_integral_exists F {i} \\<gamma>", "have bottom_edge_smooth: \"(\\<lambda>x. twoC (x, 0)) piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 0)) piecewise_C1_differentiable_on {0..1}", "using typeI_twoCube_smooth_edges two_cube boundary_def vertical_boundary_def horizontal_boundary_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>typeI_twoCube ?twoC;\n   (?k, ?\\<gamma>) \\<in> boundary ?twoC\\<rbrakk>\n  \\<Longrightarrow> ?\\<gamma> piecewise_C1_differentiable_on {0..1}\n  typeI_twoCube twoC\n  boundary ?twoC \\<equiv>\n  horizontal_boundary ?twoC \\<union> vertical_boundary ?twoC\n  vertical_boundary ?twoC \\<equiv>\n  {(- 1, \\<lambda>y. ?twoC (0, y)), (1, \\<lambda>y. ?twoC (1, y))}\n  horizontal_boundary ?twoC \\<equiv>\n  {(1, \\<lambda>x. ?twoC (x, 0)), (- 1, \\<lambda>x. ?twoC (x, 1))}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 0)) piecewise_C1_differentiable_on {0..1}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. twoC (x, 0)) piecewise_C1_differentiable_on {0..1}\n\ngoal (2 subgoals):\n 1. integral (cubeImage twoC)\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a) =\n    one_chain_line_integral F {i} (boundary twoC)\n 2. \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n       line_integral_exists F {i} \\<gamma>", "have top_edge_smooth: \"?top_edge piecewise_C1_differentiable_on {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 1)) piecewise_C1_differentiable_on {0..1}", "using typeI_twoCube_smooth_edges two_cube boundary_def vertical_boundary_def horizontal_boundary_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>typeI_twoCube ?twoC;\n   (?k, ?\\<gamma>) \\<in> boundary ?twoC\\<rbrakk>\n  \\<Longrightarrow> ?\\<gamma> piecewise_C1_differentiable_on {0..1}\n  typeI_twoCube twoC\n  boundary ?twoC \\<equiv>\n  horizontal_boundary ?twoC \\<union> vertical_boundary ?twoC\n  vertical_boundary ?twoC \\<equiv>\n  {(- 1, \\<lambda>y. ?twoC (0, y)), (1, \\<lambda>y. ?twoC (1, y))}\n  horizontal_boundary ?twoC \\<equiv>\n  {(1, \\<lambda>x. ?twoC (x, 0)), (- 1, \\<lambda>x. ?twoC (x, 1))}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. twoC (x, 1)) piecewise_C1_differentiable_on {0..1}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. twoC (x, 1)) piecewise_C1_differentiable_on {0..1}\n\ngoal (2 subgoals):\n 1. integral (cubeImage twoC)\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a) =\n    one_chain_line_integral F {i} (boundary twoC)\n 2. \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n       line_integral_exists F {i} \\<gamma>", "show \"integral (cubeImage twoC) (\\<lambda>a. - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j  a) = one_chain_line_integral F {i} (boundary twoC)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral (cubeImage twoC)\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a) =\n    one_chain_line_integral F {i} (boundary twoC)", "using Greens_thm_type_I[OF twoCisTypeI(3) twoCisTypeI(7) bottom_edge_smooth\n        twoCisTypeI(8) twoCisTypeI(9) top_edge_smooth\n        twoCisTypeI(10) f_analytically_valid twoCisTypeI(2) twoCisTypeI(1)]\n        line_integral_around_boundary"], ["proof (prove)\nusing this:\n  line_integral F {i} (\\<lambda>x. twoC (x, 0)) +\n  line_integral F {i} (\\<lambda>y. twoC (1, y)) -\n  line_integral F {i} (\\<lambda>x. twoC (x, 1)) -\n  line_integral F {i} (\\<lambda>y. twoC (0, y)) =\n  integral (cubeImage twoC)\n   (\\<lambda>a.\n       - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n  line_integral_exists F {i} (\\<lambda>y. twoC (0, y))\n  line_integral_exists F {i} (\\<lambda>x. twoC (x, 1))\n  line_integral_exists F {i} (\\<lambda>y. twoC (1, y))\n  line_integral_exists F {i} (\\<lambda>x. twoC (x, 0))\n  one_chain_line_integral F {i} (boundary twoC) =\n  line_integral F {i} (\\<lambda>x. twoC (x, 0)) +\n  line_integral F {i} (\\<lambda>y. twoC (1, y)) -\n  line_integral F {i} (\\<lambda>x. twoC (x, 1)) -\n  line_integral F {i} (\\<lambda>y. twoC (0, y))\n\ngoal (1 subgoal):\n 1. integral (cubeImage twoC)\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a) =\n    one_chain_line_integral F {i} (boundary twoC)", "by auto"], ["proof (state)\nthis:\n  integral (cubeImage twoC)\n   (\\<lambda>a.\n       - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a) =\n  one_chain_line_integral F {i} (boundary twoC)\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n       line_integral_exists F {i} \\<gamma>", "have \"line_integral_exists F {i} (\\<lambda>y. twoC (0, y))\"\n       \"line_integral_exists F {i} (\\<lambda>x. twoC (x, 1))\"\n       \"line_integral_exists F {i} (\\<lambda>y. twoC (1, y))\"\n       \"line_integral_exists F {i} (\\<lambda>x. twoC (x, 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (line_integral_exists F {i} (\\<lambda>y. twoC (0, y)) &&&\n     line_integral_exists F {i} (\\<lambda>x. twoC (x, 1))) &&&\n    line_integral_exists F {i} (\\<lambda>y. twoC (1, y)) &&&\n    line_integral_exists F {i} (\\<lambda>x. twoC (x, 0))", "using Greens_thm_type_I[OF twoCisTypeI(3) twoCisTypeI(7) bottom_edge_smooth\n        twoCisTypeI(8) twoCisTypeI(9) top_edge_smooth\n        twoCisTypeI(10) f_analytically_valid twoCisTypeI(2) twoCisTypeI(1)]\n      line_integral_around_boundary"], ["proof (prove)\nusing this:\n  line_integral F {i} (\\<lambda>x. twoC (x, 0)) +\n  line_integral F {i} (\\<lambda>y. twoC (1, y)) -\n  line_integral F {i} (\\<lambda>x. twoC (x, 1)) -\n  line_integral F {i} (\\<lambda>y. twoC (0, y)) =\n  integral (cubeImage twoC)\n   (\\<lambda>a.\n       - partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j a)\n  line_integral_exists F {i} (\\<lambda>y. twoC (0, y))\n  line_integral_exists F {i} (\\<lambda>x. twoC (x, 1))\n  line_integral_exists F {i} (\\<lambda>y. twoC (1, y))\n  line_integral_exists F {i} (\\<lambda>x. twoC (x, 0))\n  one_chain_line_integral F {i} (boundary twoC) =\n  line_integral F {i} (\\<lambda>x. twoC (x, 0)) +\n  line_integral F {i} (\\<lambda>y. twoC (1, y)) -\n  line_integral F {i} (\\<lambda>x. twoC (x, 1)) -\n  line_integral F {i} (\\<lambda>y. twoC (0, y))\n\ngoal (1 subgoal):\n 1. (line_integral_exists F {i} (\\<lambda>y. twoC (0, y)) &&&\n     line_integral_exists F {i} (\\<lambda>x. twoC (x, 1))) &&&\n    line_integral_exists F {i} (\\<lambda>y. twoC (1, y)) &&&\n    line_integral_exists F {i} (\\<lambda>x. twoC (x, 0))", "by auto"], ["proof (state)\nthis:\n  line_integral_exists F {i} (\\<lambda>y. twoC (0, y))\n  line_integral_exists F {i} (\\<lambda>x. twoC (x, 1))\n  line_integral_exists F {i} (\\<lambda>y. twoC (1, y))\n  line_integral_exists F {i} (\\<lambda>x. twoC (x, 0))\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n       line_integral_exists F {i} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  line_integral_exists F {i} (\\<lambda>y. twoC (0, y))\n  line_integral_exists F {i} (\\<lambda>x. twoC (x, 1))\n  line_integral_exists F {i} (\\<lambda>y. twoC (1, y))\n  line_integral_exists F {i} (\\<lambda>x. twoC (x, 0))", "have \"line_integral_exists F {i} \\<gamma>\" if \"(k,\\<gamma>) \\<in> boundary twoC\" for k \\<gamma>"], ["proof (prove)\nusing this:\n  line_integral_exists F {i} (\\<lambda>y. twoC (0, y))\n  line_integral_exists F {i} (\\<lambda>x. twoC (x, 1))\n  line_integral_exists F {i} (\\<lambda>y. twoC (1, y))\n  line_integral_exists F {i} (\\<lambda>x. twoC (x, 0))\n\ngoal (1 subgoal):\n 1. line_integral_exists F {i} \\<gamma>", "using that"], ["proof (prove)\nusing this:\n  line_integral_exists F {i} (\\<lambda>y. twoC (0, y))\n  line_integral_exists F {i} (\\<lambda>x. twoC (x, 1))\n  line_integral_exists F {i} (\\<lambda>y. twoC (1, y))\n  line_integral_exists F {i} (\\<lambda>x. twoC (x, 0))\n  (k, \\<gamma>) \\<in> boundary twoC\n\ngoal (1 subgoal):\n 1. line_integral_exists F {i} \\<gamma>", "by (auto simp add: boundary_def horizontal_boundary_def vertical_boundary_def)"], ["proof (state)\nthis:\n  (?k, ?\\<gamma>) \\<in> boundary twoC \\<Longrightarrow>\n  line_integral_exists F {i} ?\\<gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n       line_integral_exists F {i} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  (?k, ?\\<gamma>) \\<in> boundary twoC \\<Longrightarrow>\n  line_integral_exists F {i} ?\\<gamma>", "show \"\\<forall>(k,\\<gamma>) \\<in> boundary twoC. line_integral_exists F {i} \\<gamma>\""], ["proof (prove)\nusing this:\n  (?k, ?\\<gamma>) \\<in> boundary twoC \\<Longrightarrow>\n  line_integral_exists F {i} ?\\<gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n       line_integral_exists F {i} \\<gamma>", "by auto"], ["proof (state)\nthis:\n  \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n     line_integral_exists F {i} \\<gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma line_integral_exists_on_typeI_Cube_boundaries':\n  assumes \"(k,\\<gamma>) \\<in> boundary twoC\"\n  shows \"line_integral_exists F {i} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral_exists F {i} \\<gamma>", "using assms two_cube valid_two_cube f_analytically_valid GreenThm_typeI_twoCube(2)"], ["proof (prove)\nusing this:\n  (k, \\<gamma>) \\<in> boundary twoC\n  typeI_twoCube twoC\n  valid_two_cube twoC\n  analytically_valid (cubeImage twoC) (\\<lambda>x. F x \\<bullet> i) j\n  \\<forall>(k, \\<gamma>)\\<in>boundary twoC.\n     line_integral_exists F {i} \\<gamma>\n\ngoal (1 subgoal):\n 1. line_integral_exists F {i} \\<gamma>", "by blast"], ["", "end"], ["", "locale green_typeI_chain = R2 + \n  fixes F two_chain s\n  assumes valid_typeI_div: \"valid_typeI_division s two_chain\" and\n          F_anal_valid: \"\\<forall>twoC \\<in> two_chain. analytically_valid (cubeImage twoC) (\\<lambda>x. (F x) \\<bullet> i) j\"\nbegin"], ["", "lemma two_chain_valid_valid_cubes: \"\\<forall>two_cube \\<in> two_chain. valid_two_cube two_cube\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>two_cube\\<in>two_chain. valid_two_cube two_cube", "using valid_typeI_div"], ["proof (prove)\nusing this:\n  valid_typeI_division s two_chain\n\ngoal (1 subgoal):\n 1. \\<forall>two_cube\\<in>two_chain. valid_two_cube two_cube", "by (auto simp add: valid_two_chain_def)"], ["", "lemma typeI_cube_line_integral_exists_boundary':\n  assumes \"\\<forall>two_cube \\<in> two_chain. typeI_twoCube two_cube\"\n  assumes \"\\<forall>twoC \\<in> two_chain. analytically_valid (cubeImage twoC) (\\<lambda>x. (F x) \\<bullet> i) j\"\n  assumes \"\\<forall>two_cube \\<in> two_chain. valid_two_cube two_cube\"\n  shows \"\\<forall>(k,\\<gamma>) \\<in> two_chain_vertical_boundary two_chain. line_integral_exists F {i} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n       line_integral_exists F {i} \\<gamma>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n       line_integral_exists F {i} \\<gamma>", "have integ_exis: \"\\<forall>(k,\\<gamma>) \\<in> two_chain_boundary two_chain. line_integral_exists F {i} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n       line_integral_exists F {i} \\<gamma>", "using green_typeI_cube.line_integral_exists_on_typeI_Cube_boundaries'[of i j] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>green_typeI_cube i j ?twoC ?F;\n   (?k, ?\\<gamma>) \\<in> boundary ?twoC\\<rbrakk>\n  \\<Longrightarrow> line_integral_exists ?F {i} ?\\<gamma>\n  \\<forall>two_cube\\<in>two_chain. typeI_twoCube two_cube\n  \\<forall>twoC\\<in>two_chain.\n     analytically_valid (cubeImage twoC) (\\<lambda>x. F x \\<bullet> i) j\n  \\<forall>two_cube\\<in>two_chain. valid_two_cube two_cube\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n       line_integral_exists F {i} \\<gamma>", "using R2_axioms green_typeI_cube_axioms_def green_typeI_cube_def two_chain_boundary_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>green_typeI_cube i j ?twoC ?F;\n   (?k, ?\\<gamma>) \\<in> boundary ?twoC\\<rbrakk>\n  \\<Longrightarrow> line_integral_exists ?F {i} ?\\<gamma>\n  \\<forall>two_cube\\<in>two_chain. typeI_twoCube two_cube\n  \\<forall>twoC\\<in>two_chain.\n     analytically_valid (cubeImage twoC) (\\<lambda>x. F x \\<bullet> i) j\n  \\<forall>two_cube\\<in>two_chain. valid_two_cube two_cube\n  R2 i j\n  green_typeI_cube_axioms ?i ?j ?twoC ?F \\<equiv>\n  typeI_twoCube ?twoC \\<and>\n  valid_two_cube ?twoC \\<and>\n  analytically_valid (cubeImage ?twoC) (\\<lambda>x. ?F x \\<bullet> ?i) ?j\n  green_typeI_cube ?i ?j ?twoC ?F \\<equiv>\n  R2 ?i ?j \\<and> green_typeI_cube_axioms ?i ?j ?twoC ?F\n  two_chain_boundary ?twoChain \\<equiv> \\<Union> (boundary ` ?twoChain)\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n       line_integral_exists F {i} \\<gamma>", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n     line_integral_exists F {i} \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n       line_integral_exists F {i} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n     line_integral_exists F {i} \\<gamma>", "show integ_exis_vert:\n    \"\\<forall>(k,\\<gamma>) \\<in> two_chain_vertical_boundary two_chain. line_integral_exists F {i} \\<gamma>\""], ["proof (prove)\nusing this:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n     line_integral_exists F {i} \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n       line_integral_exists F {i} \\<gamma>", "by (simp add: two_chain_boundary_def two_chain_vertical_boundary_def boundary_def)"], ["proof (state)\nthis:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n     line_integral_exists F {i} \\<gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma typeI_cube_line_integral_exists_boundary'':\n  \"\\<forall>(k,\\<gamma>) \\<in> two_chain_horizontal_boundary two_chain. line_integral_exists F {i} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_horizontal_boundary two_chain.\n       line_integral_exists F {i} \\<gamma>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_horizontal_boundary two_chain.\n       line_integral_exists F {i} \\<gamma>", "have integ_exis: \"\\<forall>(k,\\<gamma>) \\<in> two_chain_boundary two_chain. line_integral_exists F {i} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n       line_integral_exists F {i} \\<gamma>", "using green_typeI_cube.line_integral_exists_on_typeI_Cube_boundaries'[of i j] valid_typeI_div"], ["proof (prove)\nusing this:\n  \\<lbrakk>green_typeI_cube i j ?twoC ?F;\n   (?k, ?\\<gamma>) \\<in> boundary ?twoC\\<rbrakk>\n  \\<Longrightarrow> line_integral_exists ?F {i} ?\\<gamma>\n  valid_typeI_division s two_chain\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n       line_integral_exists F {i} \\<gamma>", "apply (simp add: two_chain_boundary_def boundary_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>twoC F k \\<gamma>.\n                \\<lbrakk>green_typeI_cube i j twoC F;\n                 (k, \\<gamma>) \\<in> horizontal_boundary twoC \\<or>\n                 (k, \\<gamma>) \\<in> vertical_boundary twoC\\<rbrakk>\n                \\<Longrightarrow> line_integral_exists F {i} \\<gamma>;\n     valid_typeI_division s two_chain\\<rbrakk>\n    \\<Longrightarrow> \\<forall>y\\<in>two_chain.\n                         \\<forall>x\\<in>horizontal_boundary y \\<union>\n  vertical_boundary y.\n                            case x of\n                            (k, x) \\<Rightarrow>\n                              line_integral_exists F {i} x", "using F_anal_valid R2_axioms green_typeI_cube_axioms_def green_typeI_cube_def two_chain_valid_valid_cubes"], ["proof (prove)\nusing this:\n  \\<forall>twoC\\<in>two_chain.\n     analytically_valid (cubeImage twoC) (\\<lambda>x. F x \\<bullet> i) j\n  R2 i j\n  green_typeI_cube_axioms ?i ?j ?twoC ?F \\<equiv>\n  typeI_twoCube ?twoC \\<and>\n  valid_two_cube ?twoC \\<and>\n  analytically_valid (cubeImage ?twoC) (\\<lambda>x. ?F x \\<bullet> ?i) ?j\n  green_typeI_cube ?i ?j ?twoC ?F \\<equiv>\n  R2 ?i ?j \\<and> green_typeI_cube_axioms ?i ?j ?twoC ?F\n  \\<forall>two_cube\\<in>two_chain. valid_two_cube two_cube\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>twoC F k \\<gamma>.\n                \\<lbrakk>green_typeI_cube i j twoC F;\n                 (k, \\<gamma>) \\<in> horizontal_boundary twoC \\<or>\n                 (k, \\<gamma>) \\<in> vertical_boundary twoC\\<rbrakk>\n                \\<Longrightarrow> line_integral_exists F {i} \\<gamma>;\n     valid_typeI_division s two_chain\\<rbrakk>\n    \\<Longrightarrow> \\<forall>y\\<in>two_chain.\n                         \\<forall>x\\<in>horizontal_boundary y \\<union>\n  vertical_boundary y.\n                            case x of\n                            (k, x) \\<Rightarrow>\n                              line_integral_exists F {i} x", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n     line_integral_exists F {i} \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_horizontal_boundary two_chain.\n       line_integral_exists F {i} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n     line_integral_exists F {i} \\<gamma>", "show integ_exis_horiz:\n    \"\\<forall>(k,\\<gamma>) \\<in> two_chain_horizontal_boundary two_chain. line_integral_exists F {i} \\<gamma>\""], ["proof (prove)\nusing this:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n     line_integral_exists F {i} \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_horizontal_boundary two_chain.\n       line_integral_exists F {i} \\<gamma>", "by (simp add: two_chain_boundary_def two_chain_horizontal_boundary_def boundary_def)"], ["proof (state)\nthis:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_horizontal_boundary two_chain.\n     line_integral_exists F {i} \\<gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma typeI_cube_line_integral_exists_boundary:\n  \"\\<forall>(k,\\<gamma>) \\<in> two_chain_boundary two_chain. line_integral_exists F {i} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n       line_integral_exists F {i} \\<gamma>", "using  typeI_cube_line_integral_exists_boundary' typeI_cube_line_integral_exists_boundary''"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>two_cube\\<in>two_chain. typeI_twoCube two_cube;\n   \\<forall>twoC\\<in>two_chain.\n      analytically_valid (cubeImage twoC) (\\<lambda>x. F x \\<bullet> i) j;\n   \\<forall>two_cube\\<in>two_chain. valid_two_cube two_cube\\<rbrakk>\n  \\<Longrightarrow> \\<forall>(k, \\<gamma>)\n                             \\<in>two_chain_vertical_boundary two_chain.\n                       line_integral_exists F {i} \\<gamma>\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_horizontal_boundary two_chain.\n     line_integral_exists F {i} \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n       line_integral_exists F {i} \\<gamma>", "apply (auto simp add: two_chain_boundary_def two_chain_horizontal_boundary_def two_chain_vertical_boundary_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y a b.\n       \\<lbrakk>\\<lbrakk>\\<forall>x\\<in>two_chain. typeI_twoCube x;\n                 \\<forall>twoC\\<in>two_chain.\n                    analytically_valid (cubeImage twoC)\n                     (\\<lambda>x. F x \\<bullet> i) j;\n                 \\<forall>x\\<in>two_chain. valid_two_cube x\\<rbrakk>\n                \\<Longrightarrow> \\<forall>y\\<in>two_chain.\n                                     \\<forall>x\\<in>vertical_boundary y.\n  case x of (k, x) \\<Rightarrow> line_integral_exists F {i} x;\n        \\<forall>y\\<in>two_chain.\n           \\<forall>x\\<in>horizontal_boundary y.\n              case x of (k, x) \\<Rightarrow> line_integral_exists F {i} x;\n        y \\<in> two_chain; (a, b) \\<in> boundary y\\<rbrakk>\n       \\<Longrightarrow> line_integral_exists F {i} b", "by (meson R2_axioms green_typeI_chain.F_anal_valid green_typeI_chain_axioms green_typeI_cube.line_integral_exists_on_typeI_Cube_boundaries' green_typeI_cube_axioms_def green_typeI_cube_def two_chain_valid_valid_cubes valid_typeI_div)"], ["", "lemma type_I_chain_horiz_bound_valid:\n  \"\\<forall>(k,\\<gamma>) \\<in> two_chain_horizontal_boundary two_chain. valid_path \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_horizontal_boundary two_chain.\n       valid_path \\<gamma>", "using typeI_edges_are_valid_paths valid_typeI_div"], ["proof (prove)\nusing this:\n  \\<lbrakk>typeI_twoCube ?twoC;\n   (?k, ?\\<gamma>) \\<in> boundary ?twoC\\<rbrakk>\n  \\<Longrightarrow> valid_path ?\\<gamma>\n  valid_typeI_division s two_chain\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_horizontal_boundary two_chain.\n       valid_path \\<gamma>", "by (force simp add: two_chain_boundary_def two_chain_horizontal_boundary_def boundary_def)"], ["", "lemma type_I_chain_vert_bound_valid: (*This and the previous one need to be used in all proofs*)\n  assumes \"\\<forall>two_cube \\<in> two_chain. typeI_twoCube two_cube\"\n  shows \"\\<forall>(k,\\<gamma>) \\<in> two_chain_vertical_boundary two_chain. valid_path \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n       valid_path \\<gamma>", "using typeI_edges_are_valid_paths assms(1)"], ["proof (prove)\nusing this:\n  \\<lbrakk>typeI_twoCube ?twoC;\n   (?k, ?\\<gamma>) \\<in> boundary ?twoC\\<rbrakk>\n  \\<Longrightarrow> valid_path ?\\<gamma>\n  \\<forall>two_cube\\<in>two_chain. typeI_twoCube two_cube\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n       valid_path \\<gamma>", "by (force simp add: two_chain_boundary_def two_chain_vertical_boundary_def boundary_def)"], ["", "lemma members_of_only_vertical_div_line_integrable':\n  assumes \"only_vertical_division one_chain two_chain\"\n    \"(k::int, \\<gamma>)\\<in>one_chain\"\n    \"(k::int, \\<gamma>)\\<in>one_chain\"\n    \"finite two_chain\"\n  shows \"line_integral_exists F {i} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral_exists F {i} \\<gamma>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. line_integral_exists F {i} \\<gamma>", "have integ_exis: \"\\<forall>(k,\\<gamma>) \\<in> two_chain_boundary two_chain. line_integral_exists F {i} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n       line_integral_exists F {i} \\<gamma>", "using typeI_cube_line_integral_exists_boundary"], ["proof (prove)\nusing this:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n     line_integral_exists F {i} \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n       line_integral_exists F {i} \\<gamma>", "by blast"], ["proof (state)\nthis:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n     line_integral_exists F {i} \\<gamma>\n\ngoal (1 subgoal):\n 1. line_integral_exists F {i} \\<gamma>", "have integ_exis_horiz:\n    \"\\<forall>(k,\\<gamma>) \\<in> two_chain_horizontal_boundary two_chain. line_integral_exists F {i} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_horizontal_boundary two_chain.\n       line_integral_exists F {i} \\<gamma>", "using typeI_cube_line_integral_exists_boundary'' assms"], ["proof (prove)\nusing this:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_horizontal_boundary two_chain.\n     line_integral_exists F {i} \\<gamma>\n  only_vertical_division one_chain two_chain\n  (k, \\<gamma>) \\<in> one_chain\n  (k, \\<gamma>) \\<in> one_chain\n  finite two_chain\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_horizontal_boundary two_chain.\n       line_integral_exists F {i} \\<gamma>", "by auto"], ["proof (state)\nthis:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_horizontal_boundary two_chain.\n     line_integral_exists F {i} \\<gamma>\n\ngoal (1 subgoal):\n 1. line_integral_exists F {i} \\<gamma>", "have valid_paths: \"\\<forall>(k,\\<gamma>) \\<in> two_chain_vertical_boundary two_chain. valid_path \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n       valid_path \\<gamma>", "using type_I_chain_vert_bound_valid valid_typeI_div"], ["proof (prove)\nusing this:\n  \\<forall>two_cube\\<in>two_chain. typeI_twoCube two_cube \\<Longrightarrow>\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n     valid_path \\<gamma>\n  valid_typeI_division s two_chain\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n       valid_path \\<gamma>", "by linarith"], ["proof (state)\nthis:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n     valid_path \\<gamma>\n\ngoal (1 subgoal):\n 1. line_integral_exists F {i} \\<gamma>", "have integ_exis_vert:\n    \"(\\<And>k \\<gamma>. (\\<exists>(k', \\<gamma>')\\<in>two_chain_vertical_boundary two_chain. \\<exists>a\\<in>{0..1}. \\<exists>b\\<in>{0..1}. a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>) \\<Longrightarrow>\n                            line_integral_exists F {i} \\<gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k \\<gamma>.\n       \\<exists>(k', \\<gamma>')\\<in>two_chain_vertical_boundary two_chain.\n          \\<exists>a\\<in>{0..1}.\n             \\<exists>b\\<in>{0..1}.\n                a \\<le> b \\<and>\n                subpath a b \\<gamma>' = \\<gamma> \\<Longrightarrow>\n       line_integral_exists F {i} \\<gamma>", "using integ_exis valid_paths line_integral_exists_subpath[of \"F\" \"{i}\"]"], ["proof (prove)\nusing this:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n     line_integral_exists F {i} \\<gamma>\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n     valid_path \\<gamma>\n  \\<lbrakk>line_integral_exists F {i} ?g; valid_path ?g; ?u \\<in> {0..1};\n   ?v \\<in> {0..1}; ?u \\<le> ?v\\<rbrakk>\n  \\<Longrightarrow> line_integral_exists F {i} (subpath ?u ?v ?g)\n\ngoal (1 subgoal):\n 1. \\<And>k \\<gamma>.\n       \\<exists>(k', \\<gamma>')\\<in>two_chain_vertical_boundary two_chain.\n          \\<exists>a\\<in>{0..1}.\n             \\<exists>b\\<in>{0..1}.\n                a \\<le> b \\<and>\n                subpath a b \\<gamma>' = \\<gamma> \\<Longrightarrow>\n       line_integral_exists F {i} \\<gamma>", "by (fastforce simp add: two_chain_boundary_def two_chain_horizontal_boundary_def\n        two_chain_vertical_boundary_def boundary_def)"], ["proof (state)\nthis:\n  \\<exists>(k', \\<gamma>')\\<in>two_chain_vertical_boundary two_chain.\n     \\<exists>a\\<in>{0..1}.\n        \\<exists>b\\<in>{0..1}.\n           a \\<le> b \\<and>\n           subpath a b \\<gamma>' = ?\\<gamma> \\<Longrightarrow>\n  line_integral_exists F {i} ?\\<gamma>\n\ngoal (1 subgoal):\n 1. line_integral_exists F {i} \\<gamma>", "obtain \\<H> \\<V> where hv_props: \"finite \\<V>\"\n        \"(\\<forall>(k,\\<gamma>) \\<in> \\<V>. (\\<exists>(k', \\<gamma>') \\<in> two_chain_vertical_boundary two_chain.\n                        (\\<exists>a \\<in> {0 .. 1}. \\<exists>b \\<in> {0..1}. a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>)))\"\n        \"one_chain = \\<H> \\<union> \\<V>\"\n        \"(common_sudiv_exists (two_chain_horizontal_boundary two_chain) \\<H>)\n         \\<or> common_reparam_exists \\<H> (two_chain_horizontal_boundary two_chain)\"\n        \"finite \\<H>\"\n        \"boundary_chain \\<H>\"\n        \"\\<forall>(k,\\<gamma>)\\<in>\\<H>. valid_path \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<V> \\<H>.\n        \\<lbrakk>finite \\<V>;\n         \\<forall>(k, \\<gamma>)\\<in>\\<V>.\n            \\<exists>(k', \\<gamma>')\n                     \\<in>two_chain_vertical_boundary two_chain.\n               \\<exists>a\\<in>{0..1}.\n                  \\<exists>b\\<in>{0..1}.\n                     a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>;\n         one_chain = \\<H> \\<union> \\<V>;\n         common_sudiv_exists (two_chain_horizontal_boundary two_chain)\n          \\<H> \\<or>\n         common_reparam_exists \\<H>\n          (two_chain_horizontal_boundary two_chain);\n         finite \\<H>; boundary_chain \\<H>;\n         \\<forall>(k, \\<gamma>)\\<in>\\<H>. valid_path \\<gamma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(1)"], ["proof (prove)\nusing this:\n  only_vertical_division one_chain two_chain\n\ngoal (1 subgoal):\n 1. (\\<And>\\<V> \\<H>.\n        \\<lbrakk>finite \\<V>;\n         \\<forall>(k, \\<gamma>)\\<in>\\<V>.\n            \\<exists>(k', \\<gamma>')\n                     \\<in>two_chain_vertical_boundary two_chain.\n               \\<exists>a\\<in>{0..1}.\n                  \\<exists>b\\<in>{0..1}.\n                     a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>;\n         one_chain = \\<H> \\<union> \\<V>;\n         common_sudiv_exists (two_chain_horizontal_boundary two_chain)\n          \\<H> \\<or>\n         common_reparam_exists \\<H>\n          (two_chain_horizontal_boundary two_chain);\n         finite \\<H>; boundary_chain \\<H>;\n         \\<forall>(k, \\<gamma>)\\<in>\\<H>. valid_path \\<gamma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding only_vertical_division_def"], ["proof (prove)\nusing this:\n  \\<exists>\\<V> \\<H>.\n     finite \\<H> \\<and>\n     finite \\<V> \\<and>\n     (\\<forall>(k, \\<gamma>)\\<in>\\<V>.\n         \\<exists>(k', \\<gamma>')\\<in>two_chain_vertical_boundary two_chain.\n            \\<exists>a\\<in>{0..1}.\n               \\<exists>b\\<in>{0..1}.\n                  a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>) \\<and>\n     (common_sudiv_exists (two_chain_horizontal_boundary two_chain)\n       \\<H> \\<or>\n      common_reparam_exists \\<H>\n       (two_chain_horizontal_boundary two_chain)) \\<and>\n     boundary_chain \\<H> \\<and>\n     one_chain = \\<V> \\<union> \\<H> \\<and>\n     (\\<forall>(k, \\<gamma>)\\<in>\\<H>. valid_path \\<gamma>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<V> \\<H>.\n        \\<lbrakk>finite \\<V>;\n         \\<forall>(k, \\<gamma>)\\<in>\\<V>.\n            \\<exists>(k', \\<gamma>')\n                     \\<in>two_chain_vertical_boundary two_chain.\n               \\<exists>a\\<in>{0..1}.\n                  \\<exists>b\\<in>{0..1}.\n                     a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>;\n         one_chain = \\<H> \\<union> \\<V>;\n         common_sudiv_exists (two_chain_horizontal_boundary two_chain)\n          \\<H> \\<or>\n         common_reparam_exists \\<H>\n          (two_chain_horizontal_boundary two_chain);\n         finite \\<H>; boundary_chain \\<H>;\n         \\<forall>(k, \\<gamma>)\\<in>\\<H>. valid_path \\<gamma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  finite \\<V>\n  \\<forall>(k, \\<gamma>)\\<in>\\<V>.\n     \\<exists>(k', \\<gamma>')\\<in>two_chain_vertical_boundary two_chain.\n        \\<exists>a\\<in>{0..1}.\n           \\<exists>b\\<in>{0..1}.\n              a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>\n  one_chain = \\<H> \\<union> \\<V>\n  common_sudiv_exists (two_chain_horizontal_boundary two_chain) \\<H> \\<or>\n  common_reparam_exists \\<H> (two_chain_horizontal_boundary two_chain)\n  finite \\<H>\n  boundary_chain \\<H>\n  \\<forall>(k, \\<gamma>)\\<in>\\<H>. valid_path \\<gamma>\n\ngoal (1 subgoal):\n 1. line_integral_exists F {i} \\<gamma>", "have finite_i: \"finite {i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {i}", "by auto"], ["proof (state)\nthis:\n  finite {i}\n\ngoal (1 subgoal):\n 1. line_integral_exists F {i} \\<gamma>", "show \"line_integral_exists F {i} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral_exists F {i} \\<gamma>", "proof(cases \"common_sudiv_exists (two_chain_horizontal_boundary two_chain) \\<H>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. common_sudiv_exists (two_chain_horizontal_boundary two_chain)\n     \\<H> \\<Longrightarrow>\n    line_integral_exists F {i} \\<gamma>\n 2. \\<not> common_sudiv_exists (two_chain_horizontal_boundary two_chain)\n            \\<H> \\<Longrightarrow>\n    line_integral_exists F {i} \\<gamma>", "case True"], ["proof (state)\nthis:\n  common_sudiv_exists (two_chain_horizontal_boundary two_chain) \\<H>\n\ngoal (2 subgoals):\n 1. common_sudiv_exists (two_chain_horizontal_boundary two_chain)\n     \\<H> \\<Longrightarrow>\n    line_integral_exists F {i} \\<gamma>\n 2. \\<not> common_sudiv_exists (two_chain_horizontal_boundary two_chain)\n            \\<H> \\<Longrightarrow>\n    line_integral_exists F {i} \\<gamma>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral_exists F {i} \\<gamma>", "using gen_common_subdivision_imp_eq_line_integral(2)[OF True two_chain_horizontal_boundary_is_boundary_chain hv_props(6) integ_exis_horiz finite_two_chain_horizontal_boundary[OF assms(4)] hv_props(5) finite_i]\n        integ_exis_vert[of \"\\<gamma>\"] assms(3) case_prod_conv hv_props(2) hv_props(3)"], ["proof (prove)\nusing this:\n  \\<forall>(k, \\<gamma>)\\<in>\\<H>. line_integral_exists F {i} \\<gamma>\n  \\<exists>(k', \\<gamma>')\\<in>two_chain_vertical_boundary two_chain.\n     \\<exists>a\\<in>{0..1}.\n        \\<exists>b\\<in>{0..1}.\n           a \\<le> b \\<and>\n           subpath a b \\<gamma>' = \\<gamma> \\<Longrightarrow>\n  line_integral_exists F {i} \\<gamma>\n  (k, \\<gamma>) \\<in> one_chain\n  (case (?a, ?b) of (c, d) \\<Rightarrow> ?f c d) = ?f ?a ?b\n  \\<forall>(k, \\<gamma>)\\<in>\\<V>.\n     \\<exists>(k', \\<gamma>')\\<in>two_chain_vertical_boundary two_chain.\n        \\<exists>a\\<in>{0..1}.\n           \\<exists>b\\<in>{0..1}.\n              a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>\n  one_chain = \\<H> \\<union> \\<V>\n\ngoal (1 subgoal):\n 1. line_integral_exists F {i} \\<gamma>", "by fastforce"], ["proof (state)\nthis:\n  line_integral_exists F {i} \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<not> common_sudiv_exists (two_chain_horizontal_boundary two_chain)\n            \\<H> \\<Longrightarrow>\n    line_integral_exists F {i} \\<gamma>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> common_sudiv_exists (two_chain_horizontal_boundary two_chain)\n            \\<H> \\<Longrightarrow>\n    line_integral_exists F {i} \\<gamma>", "case False"], ["proof (state)\nthis:\n  \\<not> common_sudiv_exists (two_chain_horizontal_boundary two_chain) \\<H>\n\ngoal (1 subgoal):\n 1. \\<not> common_sudiv_exists (two_chain_horizontal_boundary two_chain)\n            \\<H> \\<Longrightarrow>\n    line_integral_exists F {i} \\<gamma>", "have i: \"{i} \\<subseteq> Basis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i} \\<subseteq> Basis", "using i_is_x_axis real_pair_basis"], ["proof (prove)\nusing this:\n  i = (1, 0)\n  Basis = {(1, 0), (0, 1)}\n\ngoal (1 subgoal):\n 1. {i} \\<subseteq> Basis", "by auto"], ["proof (state)\nthis:\n  {i} \\<subseteq> Basis\n\ngoal (1 subgoal):\n 1. \\<not> common_sudiv_exists (two_chain_horizontal_boundary two_chain)\n            \\<H> \\<Longrightarrow>\n    line_integral_exists F {i} \\<gamma>", "have ii: \" \\<forall>(k2, \\<gamma>2)\\<in>two_chain_horizontal_boundary two_chain. \\<forall>b\\<in>{i}. continuous_on (path_image \\<gamma>2) (\\<lambda>x. F x \\<bullet> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(k2, \\<gamma>2)\\<in>two_chain_horizontal_boundary two_chain.\n       \\<forall>b\\<in>{i}.\n          continuous_on (path_image \\<gamma>2) (\\<lambda>x. F x \\<bullet> b)", "using assms field_cont_on_typeI_region_cont_on_edges F_anal_valid valid_typeI_div"], ["proof (prove)\nusing this:\n  only_vertical_division one_chain two_chain\n  (k, \\<gamma>) \\<in> one_chain\n  (k, \\<gamma>) \\<in> one_chain\n  finite two_chain\n  \\<lbrakk>typeI_twoCube ?twoC; continuous_on (cubeImage ?twoC) ?F;\n   (?k, ?\\<gamma>) \\<in> boundary ?twoC\\<rbrakk>\n  \\<Longrightarrow> continuous_on (?\\<gamma> ` {0..1}) ?F\n  \\<forall>twoC\\<in>two_chain.\n     analytically_valid (cubeImage twoC) (\\<lambda>x. F x \\<bullet> i) j\n  valid_typeI_division s two_chain\n\ngoal (1 subgoal):\n 1. \\<forall>(k2, \\<gamma>2)\\<in>two_chain_horizontal_boundary two_chain.\n       \\<forall>b\\<in>{i}.\n          continuous_on (path_image \\<gamma>2) (\\<lambda>x. F x \\<bullet> b)", "by (fastforce simp add: analytically_valid_def two_chain_horizontal_boundary_def boundary_def path_image_def)"], ["proof (state)\nthis:\n  \\<forall>(k2, \\<gamma>2)\\<in>two_chain_horizontal_boundary two_chain.\n     \\<forall>b\\<in>{i}.\n        continuous_on (path_image \\<gamma>2) (\\<lambda>x. F x \\<bullet> b)\n\ngoal (1 subgoal):\n 1. \\<not> common_sudiv_exists (two_chain_horizontal_boundary two_chain)\n            \\<H> \\<Longrightarrow>\n    line_integral_exists F {i} \\<gamma>", "show \"line_integral_exists F {i} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral_exists F {i} \\<gamma>", "using common_reparam_exists_imp_eq_line_integral(2)[OF finite_i hv_props(5) finite_two_chain_horizontal_boundary[OF assms(4)] hv_props(6) two_chain_horizontal_boundary_is_boundary_chain ii \n            _ hv_props(7) type_I_chain_horiz_bound_valid]\n        integ_exis_vert[of \"\\<gamma>\"] False\n        assms(3) hv_props(2-4)"], ["proof (prove)\nusing this:\n  common_reparam_exists \\<H>\n   (two_chain_horizontal_boundary two_chain) \\<Longrightarrow>\n  \\<forall>(k, \\<gamma>)\\<in>\\<H>. line_integral_exists F {i} \\<gamma>\n  \\<exists>(k', \\<gamma>')\\<in>two_chain_vertical_boundary two_chain.\n     \\<exists>a\\<in>{0..1}.\n        \\<exists>b\\<in>{0..1}.\n           a \\<le> b \\<and>\n           subpath a b \\<gamma>' = \\<gamma> \\<Longrightarrow>\n  line_integral_exists F {i} \\<gamma>\n  \\<not> common_sudiv_exists (two_chain_horizontal_boundary two_chain) \\<H>\n  (k, \\<gamma>) \\<in> one_chain\n  \\<forall>(k, \\<gamma>)\\<in>\\<V>.\n     \\<exists>(k', \\<gamma>')\\<in>two_chain_vertical_boundary two_chain.\n        \\<exists>a\\<in>{0..1}.\n           \\<exists>b\\<in>{0..1}.\n              a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>\n  one_chain = \\<H> \\<union> \\<V>\n  common_sudiv_exists (two_chain_horizontal_boundary two_chain) \\<H> \\<or>\n  common_reparam_exists \\<H> (two_chain_horizontal_boundary two_chain)\n\ngoal (1 subgoal):\n 1. line_integral_exists F {i} \\<gamma>", "by fastforce"], ["proof (state)\nthis:\n  line_integral_exists F {i} \\<gamma>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  line_integral_exists F {i} \\<gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma GreenThm_typeI_two_chain:\n   \"two_chain_integral two_chain (\\<lambda>a. - partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> i) j a) = one_chain_line_integral F {i} (two_chain_boundary two_chain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. two_chain_integral two_chain\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j a) =\n    one_chain_line_integral F {i} (two_chain_boundary two_chain)", "proof (simp add: two_chain_boundary_def one_chain_line_integral_def two_chain_integral_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>C\\<in>two_chain.\n       - integral (cubeImage C)\n          (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)) =\n    (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g)", "let ?F_b' = \"partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> i) j\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>C\\<in>two_chain.\n       - integral (cubeImage C)\n          (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)) =\n    (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g)", "have all_two_cubes_have_four_distict_edges: \"\\<forall>twoCube \\<in> two_chain. card (boundary twoCube) = 4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>twoCube\\<in>two_chain. card (boundary twoCube) = 4", "using valid_typeI_div valid_two_chain_def valid_two_cube_def"], ["proof (prove)\nusing this:\n  valid_typeI_division s two_chain\n  valid_two_chain ?twoChain \\<equiv>\n  (\\<forall>twoCube\\<in>?twoChain. valid_two_cube twoCube) \\<and>\n  pairwise (\\<lambda>c1 c2. boundary c1 \\<inter> boundary c2 = {})\n   ?twoChain \\<and>\n  inj_on cubeImage ?twoChain\n  valid_two_cube ?twoC \\<equiv> card (boundary ?twoC) = 4\n\ngoal (1 subgoal):\n 1. \\<forall>twoCube\\<in>two_chain. card (boundary twoCube) = 4", "by auto"], ["proof (state)\nthis:\n  \\<forall>twoCube\\<in>two_chain. card (boundary twoCube) = 4\n\ngoal (1 subgoal):\n 1. (\\<Sum>C\\<in>two_chain.\n       - integral (cubeImage C)\n          (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)) =\n    (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g)", "have no_shared_edges_have_similar_orientations:\n    \"\\<forall>twoCube1 \\<in> two_chain. \\<forall>twoCube2 \\<in> two_chain.  twoCube1 \\<noteq> twoCube2 \\<longrightarrow>\n                          boundary twoCube1 \\<inter> boundary twoCube2 = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>twoCube1\\<in>two_chain.\n       \\<forall>twoCube2\\<in>two_chain.\n          twoCube1 \\<noteq> twoCube2 \\<longrightarrow>\n          boundary twoCube1 \\<inter> boundary twoCube2 = {}", "using valid_typeI_div valid_two_chain_def"], ["proof (prove)\nusing this:\n  valid_typeI_division s two_chain\n  valid_two_chain ?twoChain \\<equiv>\n  (\\<forall>twoCube\\<in>?twoChain. valid_two_cube twoCube) \\<and>\n  pairwise (\\<lambda>c1 c2. boundary c1 \\<inter> boundary c2 = {})\n   ?twoChain \\<and>\n  inj_on cubeImage ?twoChain\n\ngoal (1 subgoal):\n 1. \\<forall>twoCube1\\<in>two_chain.\n       \\<forall>twoCube2\\<in>two_chain.\n          twoCube1 \\<noteq> twoCube2 \\<longrightarrow>\n          boundary twoCube1 \\<inter> boundary twoCube2 = {}", "by (auto simp add: pairwise_def)"], ["proof (state)\nthis:\n  \\<forall>twoCube1\\<in>two_chain.\n     \\<forall>twoCube2\\<in>two_chain.\n        twoCube1 \\<noteq> twoCube2 \\<longrightarrow>\n        boundary twoCube1 \\<inter> boundary twoCube2 = {}\n\ngoal (1 subgoal):\n 1. (\\<Sum>C\\<in>two_chain.\n       - integral (cubeImage C)\n          (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)) =\n    (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g)", "have \"(\\<Sum>(k,g)\\<in> boundary twoCube. k * line_integral F {i} g) = integral (cubeImage twoCube) (\\<lambda>a. - ?F_b' a)\"\n        if \"twoCube \\<in> two_chain\" for twoCube"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>boundary twoCube.\n       real_of_int k * line_integral F {i} g) =\n    integral (cubeImage twoCube)\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>boundary twoCube.\n       real_of_int k * line_integral F {i} g) =\n    integral (cubeImage twoCube)\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j a)", "have analytically_val: \" analytically_valid (cubeImage twoCube) (\\<lambda>x. F x \\<bullet> i) j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. analytically_valid (cubeImage twoCube) (\\<lambda>x. F x \\<bullet> i) j", "using that F_anal_valid"], ["proof (prove)\nusing this:\n  twoCube \\<in> two_chain\n  \\<forall>twoC\\<in>two_chain.\n     analytically_valid (cubeImage twoC) (\\<lambda>x. F x \\<bullet> i) j\n\ngoal (1 subgoal):\n 1. analytically_valid (cubeImage twoCube) (\\<lambda>x. F x \\<bullet> i) j", "by auto"], ["proof (state)\nthis:\n  analytically_valid (cubeImage twoCube) (\\<lambda>x. F x \\<bullet> i) j\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>boundary twoCube.\n       real_of_int k * line_integral F {i} g) =\n    integral (cubeImage twoCube)\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j a)", "show \"(\\<Sum>(k, g)\\<in>boundary twoCube. k * line_integral F {i} g) = integral (cubeImage twoCube) (\\<lambda>a. - ?F_b' a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>boundary twoCube.\n       real_of_int k * line_integral F {i} g) =\n    integral (cubeImage twoCube)\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j a)", "using green_typeI_cube.GreenThm_typeI_twoCube"], ["proof (prove)\nusing this:\n  green_typeI_cube ?i ?j ?twoC ?F \\<Longrightarrow>\n  integral (cubeImage ?twoC)\n   (\\<lambda>a.\n       - partial_vector_derivative (\\<lambda>p. ?F p \\<bullet> ?i) ?j a) =\n  one_chain_line_integral ?F {?i} (boundary ?twoC)\n  green_typeI_cube ?i ?j ?twoC ?F \\<Longrightarrow>\n  \\<forall>(k, \\<gamma>)\\<in>boundary ?twoC.\n     line_integral_exists ?F {?i} \\<gamma>\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>boundary twoCube.\n       real_of_int k * line_integral F {i} g) =\n    integral (cubeImage twoCube)\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j a)", "apply (simp add: one_chain_line_integral_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i j twoC F.\n                green_typeI_cube i j twoC F \\<Longrightarrow>\n                - integral (cubeImage twoC)\n                   (partial_vector_derivative (\\<lambda>p. F p \\<bullet> i)\n                     j) =\n                (\\<Sum>x\\<in>boundary twoC.\n                   case x of\n                   (k, g) \\<Rightarrow>\n                     real_of_int k * line_integral F {i} g);\n     \\<And>i j twoC F.\n        green_typeI_cube i j twoC F \\<Longrightarrow>\n        \\<forall>x\\<in>boundary twoC.\n           case x of\n           (k, \\<gamma>) \\<Rightarrow>\n             line_integral_exists F {i} \\<gamma>\\<rbrakk>\n    \\<Longrightarrow> (\\<Sum>x\\<in>boundary twoCube.\n                         case x of\n                         (k, g) \\<Rightarrow>\n                           real_of_int k * line_integral F {i} g) =\n                      - integral (cubeImage twoCube)\n                         (partial_vector_derivative\n                           (\\<lambda>x. F x \\<bullet> i) j)", "by (simp add: R2_axioms analytically_val green_typeI_cube_axioms_def green_typeI_cube_def that two_chain_valid_valid_cubes valid_typeI_div)"], ["proof (state)\nthis:\n  (\\<Sum>(k, g)\\<in>boundary twoCube.\n     real_of_int k * line_integral F {i} g) =\n  integral (cubeImage twoCube)\n   (\\<lambda>a.\n       - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?twoCube \\<in> two_chain \\<Longrightarrow>\n  (\\<Sum>(k, g)\\<in>boundary ?twoCube.\n     real_of_int k * line_integral F {i} g) =\n  integral (cubeImage ?twoCube)\n   (\\<lambda>a.\n       - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>C\\<in>two_chain.\n       - integral (cubeImage C)\n          (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)) =\n    (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g)", "then"], ["proof (chain)\npicking this:\n  ?twoCube \\<in> two_chain \\<Longrightarrow>\n  (\\<Sum>(k, g)\\<in>boundary ?twoCube.\n     real_of_int k * line_integral F {i} g) =\n  integral (cubeImage ?twoCube)\n   (\\<lambda>a.\n       - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j a)", "have double_sum_eq_sum:\n    \"(\\<Sum>twoCube\\<in>(two_chain).(\\<Sum>(k,g)\\<in> boundary twoCube. k * line_integral F {i} g))\n                     =  (\\<Sum>twoCube\\<in>(two_chain). integral (cubeImage twoCube) (\\<lambda>a. - ?F_b' a))\""], ["proof (prove)\nusing this:\n  ?twoCube \\<in> two_chain \\<Longrightarrow>\n  (\\<Sum>(k, g)\\<in>boundary ?twoCube.\n     real_of_int k * line_integral F {i} g) =\n  integral (cubeImage ?twoCube)\n   (\\<lambda>a.\n       - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>twoCube\\<in>two_chain.\n       \\<Sum>(k, g)\\<in>boundary twoCube.\n         real_of_int k * line_integral F {i} g) =\n    (\\<Sum>twoCube\\<in>two_chain.\n       integral (cubeImage twoCube)\n        (\\<lambda>a.\n            - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j a))", "using Finite_Cartesian_Product.sum_cong_aux"], ["proof (prove)\nusing this:\n  ?twoCube \\<in> two_chain \\<Longrightarrow>\n  (\\<Sum>(k, g)\\<in>boundary ?twoCube.\n     real_of_int k * line_integral F {i} g) =\n  integral (cubeImage ?twoCube)\n   (\\<lambda>a.\n       - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j a)\n  (\\<And>x. x \\<in> ?A \\<Longrightarrow> ?f x = ?g x) \\<Longrightarrow>\n  sum ?f ?A = sum ?g ?A\n\ngoal (1 subgoal):\n 1. (\\<Sum>twoCube\\<in>two_chain.\n       \\<Sum>(k, g)\\<in>boundary twoCube.\n         real_of_int k * line_integral F {i} g) =\n    (\\<Sum>twoCube\\<in>two_chain.\n       integral (cubeImage twoCube)\n        (\\<lambda>a.\n            - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j a))", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>twoCube\\<in>two_chain.\n     \\<Sum>(k, g)\\<in>boundary twoCube.\n       real_of_int k * line_integral F {i} g) =\n  (\\<Sum>twoCube\\<in>two_chain.\n     integral (cubeImage twoCube)\n      (\\<lambda>a.\n          - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j a))\n\ngoal (1 subgoal):\n 1. (\\<Sum>C\\<in>two_chain.\n       - integral (cubeImage C)\n          (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)) =\n    (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g)", "have pairwise_disjoint_boundaries: \"\\<forall>x\\<in> (boundary ` two_chain). (\\<forall>y\\<in> (boundary ` two_chain). (x \\<noteq> y \\<longrightarrow> (x \\<inter> y = {})))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>boundary ` two_chain.\n       \\<forall>y\\<in>boundary ` two_chain.\n          x \\<noteq> y \\<longrightarrow> x \\<inter> y = {}", "using no_shared_edges_have_similar_orientations"], ["proof (prove)\nusing this:\n  \\<forall>twoCube1\\<in>two_chain.\n     \\<forall>twoCube2\\<in>two_chain.\n        twoCube1 \\<noteq> twoCube2 \\<longrightarrow>\n        boundary twoCube1 \\<inter> boundary twoCube2 = {}\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>boundary ` two_chain.\n       \\<forall>y\\<in>boundary ` two_chain.\n          x \\<noteq> y \\<longrightarrow> x \\<inter> y = {}", "by (force simp add: image_def disjoint_iff_not_equal)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>boundary ` two_chain.\n     \\<forall>y\\<in>boundary ` two_chain.\n        x \\<noteq> y \\<longrightarrow> x \\<inter> y = {}\n\ngoal (1 subgoal):\n 1. (\\<Sum>C\\<in>two_chain.\n       - integral (cubeImage C)\n          (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)) =\n    (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g)", "have finite_boundaries: \"\\<forall>B \\<in> (boundary` two_chain). finite B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>B\\<in>boundary ` two_chain. finite B", "using all_two_cubes_have_four_distict_edges"], ["proof (prove)\nusing this:\n  \\<forall>twoCube\\<in>two_chain. card (boundary twoCube) = 4\n\ngoal (1 subgoal):\n 1. \\<forall>B\\<in>boundary ` two_chain. finite B", "using image_iff"], ["proof (prove)\nusing this:\n  \\<forall>twoCube\\<in>two_chain. card (boundary twoCube) = 4\n  (?z \\<in> ?f ` ?A) = (\\<exists>x\\<in>?A. ?z = ?f x)\n\ngoal (1 subgoal):\n 1. \\<forall>B\\<in>boundary ` two_chain. finite B", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>B\\<in>boundary ` two_chain. finite B\n\ngoal (1 subgoal):\n 1. (\\<Sum>C\\<in>two_chain.\n       - integral (cubeImage C)\n          (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)) =\n    (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g)", "have boundary_inj: \"inj_on boundary two_chain\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on boundary two_chain", "using  all_two_cubes_have_four_distict_edges and no_shared_edges_have_similar_orientations"], ["proof (prove)\nusing this:\n  \\<forall>twoCube\\<in>two_chain. card (boundary twoCube) = 4\n  \\<forall>twoCube1\\<in>two_chain.\n     \\<forall>twoCube2\\<in>two_chain.\n        twoCube1 \\<noteq> twoCube2 \\<longrightarrow>\n        boundary twoCube1 \\<inter> boundary twoCube2 = {}\n\ngoal (1 subgoal):\n 1. inj_on boundary two_chain", "by (force simp add: inj_on_def)"], ["proof (state)\nthis:\n  inj_on boundary two_chain\n\ngoal (1 subgoal):\n 1. (\\<Sum>C\\<in>two_chain.\n       - integral (cubeImage C)\n          (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)) =\n    (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g)", "have \"(\\<Sum>x\\<in>(\\<Union>(boundary` two_chain)). case x of (k, g) \\<Rightarrow> k * line_integral F {i} g) \n        = (sum \\<circ> sum) (\\<lambda>x. case x of (k, g) \\<Rightarrow> (k::int) * line_integral F {i} g) (boundary ` two_chain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n    (sum \\<circ> sum)\n     (\\<lambda>x.\n         case x of\n         (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g)\n     (boundary ` two_chain)", "using sum.Union_disjoint[OF finite_boundaries pairwise_disjoint_boundaries]"], ["proof (prove)\nusing this:\n  sum ?g (\\<Union> (boundary ` two_chain)) =\n  (sum \\<circ> sum) ?g (boundary ` two_chain)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n    (sum \\<circ> sum)\n     (\\<lambda>x.\n         case x of\n         (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g)\n     (boundary ` two_chain)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n     case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n  (sum \\<circ> sum)\n   (\\<lambda>x.\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g)\n   (boundary ` two_chain)\n\ngoal (1 subgoal):\n 1. (\\<Sum>C\\<in>two_chain.\n       - integral (cubeImage C)\n          (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)) =\n    (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g)", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n     case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n  (sum \\<circ> sum)\n   (\\<lambda>x.\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g)\n   (boundary ` two_chain)\n\ngoal (1 subgoal):\n 1. (\\<Sum>C\\<in>two_chain.\n       - integral (cubeImage C)\n          (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)) =\n    (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g)", "have \"... = (\\<Sum>twoCube\\<in>(two_chain).(\\<Sum>(k,g)\\<in> boundary twoCube. k * line_integral F {i} g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sum \\<circ> sum)\n     (\\<lambda>x.\n         case x of\n         (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g)\n     (boundary ` two_chain) =\n    (\\<Sum>twoCube\\<in>two_chain.\n       \\<Sum>(k, g)\\<in>boundary twoCube.\n         real_of_int k * line_integral F {i} g)", "using sum.reindex[OF boundary_inj, of \"\\<lambda>x. (\\<Sum>(k,g)\\<in> x. k * line_integral F {i} g)\"]"], ["proof (prove)\nusing this:\n  sum (sum (\\<lambda>(k, g). real_of_int k * line_integral F {i} g))\n   (boundary ` two_chain) =\n  sum (sum (\\<lambda>(k, g). real_of_int k * line_integral F {i} g) \\<circ>\n       boundary)\n   two_chain\n\ngoal (1 subgoal):\n 1. (sum \\<circ> sum)\n     (\\<lambda>x.\n         case x of\n         (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g)\n     (boundary ` two_chain) =\n    (\\<Sum>twoCube\\<in>two_chain.\n       \\<Sum>(k, g)\\<in>boundary twoCube.\n         real_of_int k * line_integral F {i} g)", "by auto"], ["proof (state)\nthis:\n  (sum \\<circ> sum)\n   (\\<lambda>x.\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g)\n   (boundary ` two_chain) =\n  (\\<Sum>twoCube\\<in>two_chain.\n     \\<Sum>(k, g)\\<in>boundary twoCube.\n       real_of_int k * line_integral F {i} g)\n\ngoal (1 subgoal):\n 1. (\\<Sum>C\\<in>two_chain.\n       - integral (cubeImage C)\n          (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)) =\n    (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n     case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n  (\\<Sum>twoCube\\<in>two_chain.\n     \\<Sum>(k, g)\\<in>boundary twoCube.\n       real_of_int k * line_integral F {i} g)", "show \"(\\<Sum>C\\<in>two_chain. - integral (cubeImage C) (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)) = (\\<Sum>x\\<in>(\\<Union>x\\<in>two_chain. boundary x). case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g)\""], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n     case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n  (\\<Sum>twoCube\\<in>two_chain.\n     \\<Sum>(k, g)\\<in>boundary twoCube.\n       real_of_int k * line_integral F {i} g)\n\ngoal (1 subgoal):\n 1. (\\<Sum>C\\<in>two_chain.\n       - integral (cubeImage C)\n          (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)) =\n    (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g)", "using double_sum_eq_sum"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n     case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n  (\\<Sum>twoCube\\<in>two_chain.\n     \\<Sum>(k, g)\\<in>boundary twoCube.\n       real_of_int k * line_integral F {i} g)\n  (\\<Sum>twoCube\\<in>two_chain.\n     \\<Sum>(k, g)\\<in>boundary twoCube.\n       real_of_int k * line_integral F {i} g) =\n  (\\<Sum>twoCube\\<in>two_chain.\n     integral (cubeImage twoCube)\n      (\\<lambda>a.\n          - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j a))\n\ngoal (1 subgoal):\n 1. (\\<Sum>C\\<in>two_chain.\n       - integral (cubeImage C)\n          (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)) =\n    (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>C\\<in>two_chain.\n     - integral (cubeImage C)\n        (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)) =\n  (\\<Sum>x\\<in>\\<Union> (boundary ` two_chain).\n     case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma GreenThm_typeI_divisible:\n  assumes gen_division: \"gen_division s (cubeImage ` two_chain)\"\n  shows \"integral s (\\<lambda>x. - partial_vector_derivative (\\<lambda>a. F(a) \\<bullet> i) j x) = one_chain_line_integral F {i} (two_chain_boundary two_chain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} (two_chain_boundary two_chain)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} (two_chain_boundary two_chain)", "let ?F_b' = \"partial_vector_derivative (\\<lambda>a. F(a) \\<bullet> i) j\""], ["proof (state)\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} (two_chain_boundary two_chain)", "have \"integral s (\\<lambda>x. - ?F_b' x) = two_chain_integral two_chain (\\<lambda>a. - ?F_b' a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    two_chain_integral two_chain\n     (\\<lambda>a.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j a)", "proof (simp add: two_chain_integral_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. - integral s\n       (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j) =\n    (\\<Sum>C\\<in>two_chain.\n       - integral (cubeImage C)\n          (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j))", "have \"(\\<Sum>f\\<in>two_chain. integral (cubeImage f) (partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j)) = integral s (partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>f\\<in>two_chain.\n       integral (cubeImage f)\n        (partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j)) =\n    integral s (partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j)", "by (metis analytically_valid_imp_part_deriv_integrable_on F_anal_valid gen_division two_chain_integral_def two_chain_integral_eq_integral_divisable valid_typeI_div)"], ["proof (state)\nthis:\n  (\\<Sum>f\\<in>two_chain.\n     integral (cubeImage f)\n      (partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j)) =\n  integral s (partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j)\n\ngoal (1 subgoal):\n 1. - integral s\n       (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j) =\n    (\\<Sum>C\\<in>two_chain.\n       - integral (cubeImage C)\n          (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j))", "then"], ["proof (chain)\npicking this:\n  (\\<Sum>f\\<in>two_chain.\n     integral (cubeImage f)\n      (partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j)) =\n  integral s (partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j)", "show \"- integral s (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j) = (\\<Sum>C\\<in>two_chain. - integral (cubeImage C) (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j))\""], ["proof (prove)\nusing this:\n  (\\<Sum>f\\<in>two_chain.\n     integral (cubeImage f)\n      (partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j)) =\n  integral s (partial_vector_derivative (\\<lambda>p. F p \\<bullet> i) j)\n\ngoal (1 subgoal):\n 1. - integral s\n       (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j) =\n    (\\<Sum>C\\<in>two_chain.\n       - integral (cubeImage C)\n          (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j))", "by (simp add: sum_negf)"], ["proof (state)\nthis:\n  - integral s (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j) =\n  (\\<Sum>C\\<in>two_chain.\n     - integral (cubeImage C)\n        (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  integral s\n   (\\<lambda>x.\n       - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n  two_chain_integral two_chain\n   (\\<lambda>a.\n       - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j a)\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} (two_chain_boundary two_chain)", "then"], ["proof (chain)\npicking this:\n  integral s\n   (\\<lambda>x.\n       - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n  two_chain_integral two_chain\n   (\\<lambda>a.\n       - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j a)", "show ?thesis"], ["proof (prove)\nusing this:\n  integral s\n   (\\<lambda>x.\n       - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n  two_chain_integral two_chain\n   (\\<lambda>a.\n       - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j a)\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} (two_chain_boundary two_chain)", "using GreenThm_typeI_two_chain assms"], ["proof (prove)\nusing this:\n  integral s\n   (\\<lambda>x.\n       - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n  two_chain_integral two_chain\n   (\\<lambda>a.\n       - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j a)\n  two_chain_integral two_chain\n   (\\<lambda>a.\n       - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j a) =\n  one_chain_line_integral F {i} (two_chain_boundary two_chain)\n  gen_division s (cubeImage ` two_chain)\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} (two_chain_boundary two_chain)", "by auto"], ["proof (state)\nthis:\n  integral s\n   (\\<lambda>x.\n       - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n  one_chain_line_integral F {i} (two_chain_boundary two_chain)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma GreenThm_typeI_divisible_region_boundary:\n  assumes \n    gen_division: \"gen_division s (cubeImage ` two_chain)\" and\n    two_cubes_trace_horizontal_boundaries:\n    \"two_chain_horizontal_boundary two_chain \\<subseteq> \\<gamma>\" and\n    boundary_of_region_is_subset_of_partition_boundary:\n    \"\\<gamma> \\<subseteq> two_chain_boundary two_chain\"\n  shows \"integral s (\\<lambda>x. - partial_vector_derivative (\\<lambda>a. F(a) \\<bullet> i) j x) = one_chain_line_integral F {i} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "let ?F_b' = \"partial_vector_derivative (\\<lambda>a. F(a) \\<bullet> i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "have all_two_cubes_have_four_distict_edges: \"\\<forall>twoCube \\<in> two_chain. card (boundary twoCube) = 4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>twoCube\\<in>two_chain. card (boundary twoCube) = 4", "using valid_typeI_div valid_two_chain_def valid_two_cube_def"], ["proof (prove)\nusing this:\n  valid_typeI_division s two_chain\n  valid_two_chain ?twoChain \\<equiv>\n  (\\<forall>twoCube\\<in>?twoChain. valid_two_cube twoCube) \\<and>\n  pairwise (\\<lambda>c1 c2. boundary c1 \\<inter> boundary c2 = {})\n   ?twoChain \\<and>\n  inj_on cubeImage ?twoChain\n  valid_two_cube ?twoC \\<equiv> card (boundary ?twoC) = 4\n\ngoal (1 subgoal):\n 1. \\<forall>twoCube\\<in>two_chain. card (boundary twoCube) = 4", "by auto"], ["proof (state)\nthis:\n  \\<forall>twoCube\\<in>two_chain. card (boundary twoCube) = 4\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "have no_shared_edges_have_similar_orientations:\n    \"\\<forall>twoCube1 \\<in> two_chain. \\<forall>twoCube2 \\<in> two_chain.\n        twoCube1 \\<noteq> twoCube2 \\<longrightarrow> boundary twoCube1 \\<inter> boundary twoCube2 = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>twoCube1\\<in>two_chain.\n       \\<forall>twoCube2\\<in>two_chain.\n          twoCube1 \\<noteq> twoCube2 \\<longrightarrow>\n          boundary twoCube1 \\<inter> boundary twoCube2 = {}", "using valid_typeI_div valid_two_chain_def"], ["proof (prove)\nusing this:\n  valid_typeI_division s two_chain\n  valid_two_chain ?twoChain \\<equiv>\n  (\\<forall>twoCube\\<in>?twoChain. valid_two_cube twoCube) \\<and>\n  pairwise (\\<lambda>c1 c2. boundary c1 \\<inter> boundary c2 = {})\n   ?twoChain \\<and>\n  inj_on cubeImage ?twoChain\n\ngoal (1 subgoal):\n 1. \\<forall>twoCube1\\<in>two_chain.\n       \\<forall>twoCube2\\<in>two_chain.\n          twoCube1 \\<noteq> twoCube2 \\<longrightarrow>\n          boundary twoCube1 \\<inter> boundary twoCube2 = {}", "by (auto simp add: pairwise_def)"], ["proof (state)\nthis:\n  \\<forall>twoCube1\\<in>two_chain.\n     \\<forall>twoCube2\\<in>two_chain.\n        twoCube1 \\<noteq> twoCube2 \\<longrightarrow>\n        boundary twoCube1 \\<inter> boundary twoCube2 = {}\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "(*Proving that line_integral on the x axis is 0 for the vertical 1-cubes*)"], ["proof (state)\nthis:\n  \\<forall>twoCube1\\<in>two_chain.\n     \\<forall>twoCube2\\<in>two_chain.\n        twoCube1 \\<noteq> twoCube2 \\<longrightarrow>\n        boundary twoCube1 \\<inter> boundary twoCube2 = {}\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "have vert_line_integral_zero:\n    \"one_chain_line_integral F {i} (two_chain_vertical_boundary two_chain) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. one_chain_line_integral F {i} (two_chain_vertical_boundary two_chain) =\n    0", "proof (simp add: one_chain_line_integral_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>two_chain_vertical_boundary two_chain.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n    0", "have \"line_integral F {i} (snd oneCube) = 0\"\n      if oneCube: \"oneCube \\<in> two_chain_vertical_boundary(two_chain)\" for oneCube"], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "obtain x y1 y2 k where vert_edge_def: \"oneCube = (k, (\\<lambda>t::real. (x::real, (1 - t) * (y2) + t * y1)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k x y2 y1.\n        oneCube =\n        (k, \\<lambda>t. (x, (1 - t) * y2 + t * y1)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using valid_typeI_div oneCube"], ["proof (prove)\nusing this:\n  valid_typeI_division s two_chain\n  oneCube \\<in> two_chain_vertical_boundary two_chain\n\ngoal (1 subgoal):\n 1. (\\<And>k x y2 y1.\n        oneCube =\n        (k, \\<lambda>t. (x, (1 - t) * y2 + t * y1)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: typeI_twoCube_def two_chain_vertical_boundary_def vertical_boundary_def)"], ["proof (state)\nthis:\n  oneCube = (k, \\<lambda>t. (x, (1 - t) * y2 + t * y1))\n\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "let ?vert_edge = \"(snd oneCube)\""], ["proof (state)\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "have vert_edge_x_const: \"\\<forall>t. (?vert_edge t) \\<bullet> i = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t. snd oneCube t \\<bullet> i = x", "by (simp add: i_is_x_axis vert_edge_def)"], ["proof (state)\nthis:\n  \\<forall>t. snd oneCube t \\<bullet> i = x\n\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "have vert_edge_is_straight_path: \"?vert_edge = (\\<lambda>t. (x, y2 + t * (y1 - y2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd oneCube = (\\<lambda>t. (x, y2 + t * (y1 - y2)))", "using vert_edge_def Product_Type.snd_conv"], ["proof (prove)\nusing this:\n  oneCube = (k, \\<lambda>t. (x, (1 - t) * y2 + t * y1))\n  snd (?x1.0, ?x2.0) = ?x2.0\n\ngoal (1 subgoal):\n 1. snd oneCube = (\\<lambda>t. (x, y2 + t * (y1 - y2)))", "by (auto simp add: mult.commute right_diff_distrib')"], ["proof (state)\nthis:\n  snd oneCube = (\\<lambda>t. (x, y2 + t * (y1 - y2)))\n\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "by (simp add: i_is_x_axis line_integral_on_pair_straight_path(1) mult.commute straight_path_diffrentiable_x vert_edge_is_straight_path)"], ["proof (state)\nthis:\n  line_integral F {i} (snd oneCube) = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?oneCube \\<in> two_chain_vertical_boundary two_chain \\<Longrightarrow>\n  line_integral F {i} (snd ?oneCube) = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>two_chain_vertical_boundary two_chain.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n    0", "then"], ["proof (chain)\npicking this:\n  ?oneCube \\<in> two_chain_vertical_boundary two_chain \\<Longrightarrow>\n  line_integral F {i} (snd ?oneCube) = 0", "show \"(\\<Sum>x\\<in>two_chain_vertical_boundary two_chain. case x of (k, g) \\<Rightarrow> k * line_integral F {i} g) = 0\""], ["proof (prove)\nusing this:\n  ?oneCube \\<in> two_chain_vertical_boundary two_chain \\<Longrightarrow>\n  line_integral F {i} (snd ?oneCube) = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>two_chain_vertical_boundary two_chain.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n    0", "using comm_monoid_add_class.sum.neutral"], ["proof (prove)\nusing this:\n  ?oneCube \\<in> two_chain_vertical_boundary two_chain \\<Longrightarrow>\n  line_integral F {i} (snd ?oneCube) = 0\n  \\<forall>x\\<in>?A. ?g x = (0::?'a) \\<Longrightarrow> sum ?g ?A = (0::?'a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>two_chain_vertical_boundary two_chain.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n    0", "by (simp add: prod.case_eq_if)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>two_chain_vertical_boundary two_chain.\n     case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n  0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  one_chain_line_integral F {i} (two_chain_vertical_boundary two_chain) = 0\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "(*then, the x axis line_integral on the boundaries of the twoCube is equal to the line_integral on the horizontal boundaries of the twoCube \\<longrightarrow> 1*)"], ["proof (state)\nthis:\n  one_chain_line_integral F {i} (two_chain_vertical_boundary two_chain) = 0\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "have boundary_is_finite: \"finite (two_chain_boundary two_chain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (two_chain_boundary two_chain)", "unfolding two_chain_boundary_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (\\<Union> (boundary ` two_chain))", "by (metis all_two_cubes_have_four_distict_edges card.infinite finite_UN_I finite_imageD \n              gen_division gen_division_def zero_neq_numeral valid_typeI_div valid_two_chain_def)"], ["proof (state)\nthis:\n  finite (two_chain_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "have boundary_is_vert_hor: \"(two_chain_boundary two_chain) =\n                              (two_chain_vertical_boundary two_chain) \\<union>\n                              (two_chain_horizontal_boundary two_chain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. two_chain_boundary two_chain =\n    two_chain_vertical_boundary two_chain \\<union>\n    two_chain_horizontal_boundary two_chain", "by(auto simp add: two_chain_boundary_def two_chain_vertical_boundary_def two_chain_horizontal_boundary_def\n        boundary_def)"], ["proof (state)\nthis:\n  two_chain_boundary two_chain =\n  two_chain_vertical_boundary two_chain \\<union>\n  two_chain_horizontal_boundary two_chain\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  two_chain_boundary two_chain =\n  two_chain_vertical_boundary two_chain \\<union>\n  two_chain_horizontal_boundary two_chain", "have hor_vert_finite:\n    \"finite (two_chain_vertical_boundary two_chain)\"\n    \"finite (two_chain_horizontal_boundary two_chain)\""], ["proof (prove)\nusing this:\n  two_chain_boundary two_chain =\n  two_chain_vertical_boundary two_chain \\<union>\n  two_chain_horizontal_boundary two_chain\n\ngoal (1 subgoal):\n 1. finite (two_chain_vertical_boundary two_chain) &&&\n    finite (two_chain_horizontal_boundary two_chain)", "using boundary_is_finite"], ["proof (prove)\nusing this:\n  two_chain_boundary two_chain =\n  two_chain_vertical_boundary two_chain \\<union>\n  two_chain_horizontal_boundary two_chain\n  finite (two_chain_boundary two_chain)\n\ngoal (1 subgoal):\n 1. finite (two_chain_vertical_boundary two_chain) &&&\n    finite (two_chain_horizontal_boundary two_chain)", "by auto"], ["proof (state)\nthis:\n  finite (two_chain_vertical_boundary two_chain)\n  finite (two_chain_horizontal_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "have horiz_verti_disjoint:\n    \"(two_chain_vertical_boundary two_chain) \\<inter> (two_chain_horizontal_boundary two_chain) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. two_chain_vertical_boundary two_chain \\<inter>\n    two_chain_horizontal_boundary two_chain =\n    {}", "proof (simp add: two_chain_vertical_boundary_def two_chain_horizontal_boundary_def horizontal_boundary_def\n        vertical_boundary_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>two_chain.\n        {(- 1, \\<lambda>y. x (0, y)), (1, \\<lambda>y. x (1, y))}) \\<inter>\n    (\\<Union>x\\<in>two_chain.\n        {(1, \\<lambda>xa. x (xa, 0)), (- 1, \\<lambda>xa. x (xa, 1))}) =\n    {}", "show \"(\\<Union>x\\<in>two_chain. {(- 1, \\<lambda>y. x (0, y)), (1::int, \\<lambda>y. x (1::real, y))}) \\<inter> (\\<Union>x\\<in>two_chain. {(1, \\<lambda>z. x (z, 0)), (- 1, \\<lambda>z. x (z, 1))}) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>two_chain.\n        {(- 1, \\<lambda>y. x (0, y)), (1, \\<lambda>y. x (1, y))}) \\<inter>\n    (\\<Union>x\\<in>two_chain.\n        {(1, \\<lambda>z. x (z, 0)), (- 1, \\<lambda>z. x (z, 1))}) =\n    {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>two_chain.\n        {(- 1, \\<lambda>y. x (0, y)), (1, \\<lambda>y. x (1, y))}) \\<inter>\n    (\\<Union>x\\<in>two_chain.\n        {(1, \\<lambda>z. x (z, 0)), (- 1, \\<lambda>z. x (z, 1))}) =\n    {}", "have \"{(- 1, \\<lambda>y. twoCube (0, y)), (1::int, \\<lambda>y. twoCube (1, y))} \\<inter>\n            {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} = {}\"\n        if \"twoCube\\<in>two_chain\" \"twoCube2\\<in>two_chain\" for twoCube twoCube2"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} =\n    {}", "proof (cases \"twoCube = twoCube2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. twoCube = twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} =\n    {}\n 2. twoCube \\<noteq> twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} =\n    {}", "case True"], ["proof (state)\nthis:\n  twoCube = twoCube2\n\ngoal (2 subgoals):\n 1. twoCube = twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} =\n    {}\n 2. twoCube \\<noteq> twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} =\n    {}", "have \"card {(- 1::int, \\<lambda>y. twoCube2 (0::real, y)), (1::int, \\<lambda>y. twoCube2 (1, y)), (1, \\<lambda>x. twoCube2 (x, 0)), (- 1, \\<lambda>x. twoCube2 (x, 1))} = 4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     {(- 1, \\<lambda>y. twoCube2 (0, y)), (1, \\<lambda>y. twoCube2 (1, y)),\n      (1, \\<lambda>x. twoCube2 (x, 0)),\n      (- 1, \\<lambda>x. twoCube2 (x, 1))} =\n    4", "using all_two_cubes_have_four_distict_edges that(2)"], ["proof (prove)\nusing this:\n  \\<forall>twoCube\\<in>two_chain. card (boundary twoCube) = 4\n  twoCube2 \\<in> two_chain\n\ngoal (1 subgoal):\n 1. card\n     {(- 1, \\<lambda>y. twoCube2 (0, y)), (1, \\<lambda>y. twoCube2 (1, y)),\n      (1, \\<lambda>x. twoCube2 (x, 0)),\n      (- 1, \\<lambda>x. twoCube2 (x, 1))} =\n    4", "by (auto simp add: boundary_def vertical_boundary_def horizontal_boundary_def)"], ["proof (state)\nthis:\n  card\n   {(- 1, \\<lambda>y. twoCube2 (0, y)), (1, \\<lambda>y. twoCube2 (1, y)),\n    (1, \\<lambda>x. twoCube2 (x, 0)), (- 1, \\<lambda>x. twoCube2 (x, 1))} =\n  4\n\ngoal (2 subgoals):\n 1. twoCube = twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} =\n    {}\n 2. twoCube \\<noteq> twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} =\n    {}", "then"], ["proof (chain)\npicking this:\n  card\n   {(- 1, \\<lambda>y. twoCube2 (0, y)), (1, \\<lambda>y. twoCube2 (1, y)),\n    (1, \\<lambda>x. twoCube2 (x, 0)), (- 1, \\<lambda>x. twoCube2 (x, 1))} =\n  4", "show ?thesis"], ["proof (prove)\nusing this:\n  card\n   {(- 1, \\<lambda>y. twoCube2 (0, y)), (1, \\<lambda>y. twoCube2 (1, y)),\n    (1, \\<lambda>x. twoCube2 (x, 0)), (- 1, \\<lambda>x. twoCube2 (x, 1))} =\n  4\n\ngoal (1 subgoal):\n 1. {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} =\n    {}", "by (auto simp: True card_insert_if split: if_split_asm)"], ["proof (state)\nthis:\n  {(- 1, \\<lambda>y. twoCube (0, y)),\n   (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n  {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} =\n  {}\n\ngoal (1 subgoal):\n 1. twoCube \\<noteq> twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} =\n    {}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. twoCube \\<noteq> twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} =\n    {}", "case False"], ["proof (state)\nthis:\n  twoCube \\<noteq> twoCube2\n\ngoal (1 subgoal):\n 1. twoCube \\<noteq> twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} =\n    {}", "then"], ["proof (chain)\npicking this:\n  twoCube \\<noteq> twoCube2", "show ?thesis"], ["proof (prove)\nusing this:\n  twoCube \\<noteq> twoCube2\n\ngoal (1 subgoal):\n 1. {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} =\n    {}", "using no_shared_edges_have_similar_orientations"], ["proof (prove)\nusing this:\n  twoCube \\<noteq> twoCube2\n  \\<forall>twoCube1\\<in>two_chain.\n     \\<forall>twoCube2\\<in>two_chain.\n        twoCube1 \\<noteq> twoCube2 \\<longrightarrow>\n        boundary twoCube1 \\<inter> boundary twoCube2 = {}\n\ngoal (1 subgoal):\n 1. {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} =\n    {}", "by (simp add: that boundary_def vertical_boundary_def horizontal_boundary_def)"], ["proof (state)\nthis:\n  {(- 1, \\<lambda>y. twoCube (0, y)),\n   (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n  {(1, \\<lambda>z. twoCube2 (z, 0)), (- 1, \\<lambda>z. twoCube2 (z, 1))} =\n  {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?twoCube \\<in> two_chain; ?twoCube2.0 \\<in> two_chain\\<rbrakk>\n  \\<Longrightarrow> {(- 1, \\<lambda>y. ?twoCube (0, y)),\n                     (1, \\<lambda>y. ?twoCube (1, y))} \\<inter>\n                    {(1, \\<lambda>z. ?twoCube2.0 (z, 0)),\n                     (- 1, \\<lambda>z. ?twoCube2.0 (z, 1))} =\n                    {}\n\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>two_chain.\n        {(- 1, \\<lambda>y. x (0, y)), (1, \\<lambda>y. x (1, y))}) \\<inter>\n    (\\<Union>x\\<in>two_chain.\n        {(1, \\<lambda>z. x (z, 0)), (- 1, \\<lambda>z. x (z, 1))}) =\n    {}", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?twoCube \\<in> two_chain; ?twoCube2.0 \\<in> two_chain\\<rbrakk>\n  \\<Longrightarrow> {(- 1, \\<lambda>y. ?twoCube (0, y)),\n                     (1, \\<lambda>y. ?twoCube (1, y))} \\<inter>\n                    {(1, \\<lambda>z. ?twoCube2.0 (z, 0)),\n                     (- 1, \\<lambda>z. ?twoCube2.0 (z, 1))} =\n                    {}", "have \"\\<Union> ((\\<lambda>twoCube. {(-1::int, \\<lambda>y. twoCube (0,y)), (1, \\<lambda>y. twoCube (1, y))}) ` two_chain)\n               \\<inter> \\<Union> ((\\<lambda>twoCube. {(1, \\<lambda>y. twoCube (y, 0)), (-1, \\<lambda>z. twoCube (z, 1))}) ` two_chain) = {}\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?twoCube \\<in> two_chain; ?twoCube2.0 \\<in> two_chain\\<rbrakk>\n  \\<Longrightarrow> {(- 1, \\<lambda>y. ?twoCube (0, y)),\n                     (1, \\<lambda>y. ?twoCube (1, y))} \\<inter>\n                    {(1, \\<lambda>z. ?twoCube2.0 (z, 0)),\n                     (- 1, \\<lambda>z. ?twoCube2.0 (z, 1))} =\n                    {}\n\ngoal (1 subgoal):\n 1. (\\<Union>twoCube\\<in>two_chain.\n        {(- 1, \\<lambda>y. twoCube (0, y)),\n         (1, \\<lambda>y. twoCube (1, y))}) \\<inter>\n    (\\<Union>twoCube\\<in>two_chain.\n        {(1, \\<lambda>y. twoCube (y, 0)),\n         (- 1, \\<lambda>z. twoCube (z, 1))}) =\n    {}", "using Complete_Lattices.Union_disjoint"], ["proof (prove)\nusing this:\n  \\<lbrakk>?twoCube \\<in> two_chain; ?twoCube2.0 \\<in> two_chain\\<rbrakk>\n  \\<Longrightarrow> {(- 1, \\<lambda>y. ?twoCube (0, y)),\n                     (1, \\<lambda>y. ?twoCube (1, y))} \\<inter>\n                    {(1, \\<lambda>z. ?twoCube2.0 (z, 0)),\n                     (- 1, \\<lambda>z. ?twoCube2.0 (z, 1))} =\n                    {}\n  (\\<Union> ?C \\<inter> ?A = {}) = (\\<forall>B\\<in>?C. B \\<inter> ?A = {})\n\ngoal (1 subgoal):\n 1. (\\<Union>twoCube\\<in>two_chain.\n        {(- 1, \\<lambda>y. twoCube (0, y)),\n         (1, \\<lambda>y. twoCube (1, y))}) \\<inter>\n    (\\<Union>twoCube\\<in>two_chain.\n        {(1, \\<lambda>y. twoCube (y, 0)),\n         (- 1, \\<lambda>z. twoCube (z, 1))}) =\n    {}", "by force"], ["proof (state)\nthis:\n  (\\<Union>twoCube\\<in>two_chain.\n      {(- 1, \\<lambda>y. twoCube (0, y)),\n       (1, \\<lambda>y. twoCube (1, y))}) \\<inter>\n  (\\<Union>twoCube\\<in>two_chain.\n      {(1, \\<lambda>y. twoCube (y, 0)),\n       (- 1, \\<lambda>z. twoCube (z, 1))}) =\n  {}\n\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>two_chain.\n        {(- 1, \\<lambda>y. x (0, y)), (1, \\<lambda>y. x (1, y))}) \\<inter>\n    (\\<Union>x\\<in>two_chain.\n        {(1, \\<lambda>z. x (z, 0)), (- 1, \\<lambda>z. x (z, 1))}) =\n    {}", "then"], ["proof (chain)\npicking this:\n  (\\<Union>twoCube\\<in>two_chain.\n      {(- 1, \\<lambda>y. twoCube (0, y)),\n       (1, \\<lambda>y. twoCube (1, y))}) \\<inter>\n  (\\<Union>twoCube\\<in>two_chain.\n      {(1, \\<lambda>y. twoCube (y, 0)),\n       (- 1, \\<lambda>z. twoCube (z, 1))}) =\n  {}", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Union>twoCube\\<in>two_chain.\n      {(- 1, \\<lambda>y. twoCube (0, y)),\n       (1, \\<lambda>y. twoCube (1, y))}) \\<inter>\n  (\\<Union>twoCube\\<in>two_chain.\n      {(1, \\<lambda>y. twoCube (y, 0)),\n       (- 1, \\<lambda>z. twoCube (z, 1))}) =\n  {}\n\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>two_chain.\n        {(- 1, \\<lambda>y. x (0, y)), (1, \\<lambda>y. x (1, y))}) \\<inter>\n    (\\<Union>x\\<in>two_chain.\n        {(1, \\<lambda>z. x (z, 0)), (- 1, \\<lambda>z. x (z, 1))}) =\n    {}", "by force"], ["proof (state)\nthis:\n  (\\<Union>x\\<in>two_chain.\n      {(- 1, \\<lambda>y. x (0, y)), (1, \\<lambda>y. x (1, y))}) \\<inter>\n  (\\<Union>x\\<in>two_chain.\n      {(1, \\<lambda>z. x (z, 0)), (- 1, \\<lambda>z. x (z, 1))}) =\n  {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Union>x\\<in>two_chain.\n      {(- 1, \\<lambda>y. x (0, y)), (1, \\<lambda>y. x (1, y))}) \\<inter>\n  (\\<Union>x\\<in>two_chain.\n      {(1, \\<lambda>z. x (z, 0)), (- 1, \\<lambda>z. x (z, 1))}) =\n  {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  two_chain_vertical_boundary two_chain \\<inter>\n  two_chain_horizontal_boundary two_chain =\n  {}\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "have \"one_chain_line_integral F {i} (two_chain_boundary two_chain)\n        = one_chain_line_integral F {i} (two_chain_vertical_boundary two_chain) +\n          one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. one_chain_line_integral F {i} (two_chain_boundary two_chain) =\n    one_chain_line_integral F {i} (two_chain_vertical_boundary two_chain) +\n    one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)", "using boundary_is_vert_hor horiz_verti_disjoint"], ["proof (prove)\nusing this:\n  two_chain_boundary two_chain =\n  two_chain_vertical_boundary two_chain \\<union>\n  two_chain_horizontal_boundary two_chain\n  two_chain_vertical_boundary two_chain \\<inter>\n  two_chain_horizontal_boundary two_chain =\n  {}\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {i} (two_chain_boundary two_chain) =\n    one_chain_line_integral F {i} (two_chain_vertical_boundary two_chain) +\n    one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)", "by (auto simp add: one_chain_line_integral_def hor_vert_finite sum.union_disjoint)"], ["proof (state)\nthis:\n  one_chain_line_integral F {i} (two_chain_boundary two_chain) =\n  one_chain_line_integral F {i} (two_chain_vertical_boundary two_chain) +\n  one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  one_chain_line_integral F {i} (two_chain_boundary two_chain) =\n  one_chain_line_integral F {i} (two_chain_vertical_boundary two_chain) +\n  one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)", "have x_axis_line_integral_is_only_horizontal:\n    \"one_chain_line_integral F {i} (two_chain_boundary two_chain)\n     = one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)\""], ["proof (prove)\nusing this:\n  one_chain_line_integral F {i} (two_chain_boundary two_chain) =\n  one_chain_line_integral F {i} (two_chain_vertical_boundary two_chain) +\n  one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {i} (two_chain_boundary two_chain) =\n    one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)", "using vert_line_integral_zero"], ["proof (prove)\nusing this:\n  one_chain_line_integral F {i} (two_chain_boundary two_chain) =\n  one_chain_line_integral F {i} (two_chain_vertical_boundary two_chain) +\n  one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)\n  one_chain_line_integral F {i} (two_chain_vertical_boundary two_chain) = 0\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {i} (two_chain_boundary two_chain) =\n    one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)", "by auto"], ["proof (state)\nthis:\n  one_chain_line_integral F {i} (two_chain_boundary two_chain) =\n  one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "(*Since \\<gamma> \\<subseteq> the boundary of the 2-chain and the horizontal boundaries are \\<subseteq> \\<gamma>, then there is some \\<V> \\<subseteq> \\<partial>\\<^sub>V(2-\\<C>) such that \\<gamma> = \\<V> \\<union> \\<partial>\\<^sub>H(2-\\<C>)*)"], ["proof (state)\nthis:\n  one_chain_line_integral F {i} (two_chain_boundary two_chain) =\n  one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "have \"\\<exists>\\<V>. \\<V> \\<subseteq> (two_chain_vertical_boundary two_chain) \\<and> \\<gamma> = \\<V> \\<union> (two_chain_horizontal_boundary two_chain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<V>\\<subseteq>two_chain_vertical_boundary two_chain.\n       \\<gamma> = \\<V> \\<union> two_chain_horizontal_boundary two_chain", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. ?\\<V> \\<subseteq> two_chain_vertical_boundary two_chain \\<and>\n    \\<gamma> = ?\\<V> \\<union> two_chain_horizontal_boundary two_chain", "let ?\\<V> = \"\\<gamma> - (two_chain_horizontal_boundary two_chain)\""], ["proof (state)\ngoal (1 subgoal):\n 1. ?\\<V> \\<subseteq> two_chain_vertical_boundary two_chain \\<and>\n    \\<gamma> = ?\\<V> \\<union> two_chain_horizontal_boundary two_chain", "show \"?\\<V> \\<subseteq> two_chain_vertical_boundary two_chain \\<and> \\<gamma> = ?\\<V> \\<union> two_chain_horizontal_boundary two_chain\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma> - two_chain_horizontal_boundary two_chain\n    \\<subseteq> two_chain_vertical_boundary two_chain \\<and>\n    \\<gamma> =\n    \\<gamma> - two_chain_horizontal_boundary two_chain \\<union>\n    two_chain_horizontal_boundary two_chain", "using two_cubes_trace_horizontal_boundaries\n        boundary_of_region_is_subset_of_partition_boundary boundary_is_vert_hor"], ["proof (prove)\nusing this:\n  two_chain_horizontal_boundary two_chain \\<subseteq> \\<gamma>\n  \\<gamma> \\<subseteq> two_chain_boundary two_chain\n  two_chain_boundary two_chain =\n  two_chain_vertical_boundary two_chain \\<union>\n  two_chain_horizontal_boundary two_chain\n\ngoal (1 subgoal):\n 1. \\<gamma> - two_chain_horizontal_boundary two_chain\n    \\<subseteq> two_chain_vertical_boundary two_chain \\<and>\n    \\<gamma> =\n    \\<gamma> - two_chain_horizontal_boundary two_chain \\<union>\n    two_chain_horizontal_boundary two_chain", "by blast"], ["proof (state)\nthis:\n  \\<gamma> - two_chain_horizontal_boundary two_chain\n  \\<subseteq> two_chain_vertical_boundary two_chain \\<and>\n  \\<gamma> =\n  \\<gamma> - two_chain_horizontal_boundary two_chain \\<union>\n  two_chain_horizontal_boundary two_chain\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>\\<V>\\<subseteq>two_chain_vertical_boundary two_chain.\n     \\<gamma> = \\<V> \\<union> two_chain_horizontal_boundary two_chain\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<V>\\<subseteq>two_chain_vertical_boundary two_chain.\n     \\<gamma> = \\<V> \\<union> two_chain_horizontal_boundary two_chain", "obtain \\<V> where\n    v_props: \"\\<V> \\<subseteq> (two_chain_vertical_boundary two_chain)\" \"\\<gamma> = \\<V> \\<union> (two_chain_horizontal_boundary two_chain)\""], ["proof (prove)\nusing this:\n  \\<exists>\\<V>\\<subseteq>two_chain_vertical_boundary two_chain.\n     \\<gamma> = \\<V> \\<union> two_chain_horizontal_boundary two_chain\n\ngoal (1 subgoal):\n 1. (\\<And>\\<V>.\n        \\<lbrakk>\\<V> \\<subseteq> two_chain_vertical_boundary two_chain;\n         \\<gamma> =\n         \\<V> \\<union> two_chain_horizontal_boundary two_chain\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<V> \\<subseteq> two_chain_vertical_boundary two_chain\n  \\<gamma> = \\<V> \\<union> two_chain_horizontal_boundary two_chain\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "have v_horiz_disj: \"\\<V> \\<inter> (two_chain_horizontal_boundary two_chain) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<V> \\<inter> two_chain_horizontal_boundary two_chain = {}", "using horiz_verti_disjoint v_props(1)"], ["proof (prove)\nusing this:\n  two_chain_vertical_boundary two_chain \\<inter>\n  two_chain_horizontal_boundary two_chain =\n  {}\n  \\<V> \\<subseteq> two_chain_vertical_boundary two_chain\n\ngoal (1 subgoal):\n 1. \\<V> \\<inter> two_chain_horizontal_boundary two_chain = {}", "by auto"], ["proof (state)\nthis:\n  \\<V> \\<inter> two_chain_horizontal_boundary two_chain = {}\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "have v_finite: \"finite \\<V>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite \\<V>", "using hor_vert_finite v_props(1) Finite_Set.rev_finite_subset"], ["proof (prove)\nusing this:\n  finite (two_chain_vertical_boundary two_chain)\n  finite (two_chain_horizontal_boundary two_chain)\n  \\<V> \\<subseteq> two_chain_vertical_boundary two_chain\n  \\<lbrakk>finite ?B; ?A \\<subseteq> ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite \\<V>", "by force"], ["proof (state)\nthis:\n  finite \\<V>\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "have line_integral_on_path: \"one_chain_line_integral F {i} \\<gamma> =\n                               one_chain_line_integral F {i} \\<V> + one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. one_chain_line_integral F {i} \\<gamma> =\n    one_chain_line_integral F {i} \\<V> +\n    one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)", "by(auto simp add: one_chain_line_integral_def v_props sum.union_disjoint[OF v_finite hor_vert_finite(2) v_horiz_disj])"], ["proof (state)\nthis:\n  one_chain_line_integral F {i} \\<gamma> =\n  one_chain_line_integral F {i} \\<V> +\n  one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "(*Since \\<V> \\<subseteq> \\<partial>\\<^sub>V(2-\\<C>), then the line_integral on the x axis along \\<H> is 0, and from 1 Q.E.D. *)"], ["proof (state)\nthis:\n  one_chain_line_integral F {i} \\<gamma> =\n  one_chain_line_integral F {i} \\<V> +\n  one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "have \"one_chain_line_integral F {i} \\<V> = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. one_chain_line_integral F {i} \\<V> = 0", "proof (simp add: one_chain_line_integral_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>\\<V>.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n    0", "have \"line_integral F {i} (snd oneCube) = 0\"\n      if oneCube: \"oneCube \\<in> two_chain_vertical_boundary(two_chain)\" for oneCube"], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "obtain x y1 y2 k where vert_edge_def: \"oneCube = (k, (\\<lambda>t::real. (x::real, (1 - t) * (y2) + t * y1)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k x y2 y1.\n        oneCube =\n        (k, \\<lambda>t. (x, (1 - t) * y2 + t * y1)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using valid_typeI_div oneCube"], ["proof (prove)\nusing this:\n  valid_typeI_division s two_chain\n  oneCube \\<in> two_chain_vertical_boundary two_chain\n\ngoal (1 subgoal):\n 1. (\\<And>k x y2 y1.\n        oneCube =\n        (k, \\<lambda>t. (x, (1 - t) * y2 + t * y1)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: typeI_twoCube_def two_chain_vertical_boundary_def vertical_boundary_def)"], ["proof (state)\nthis:\n  oneCube = (k, \\<lambda>t. (x, (1 - t) * y2 + t * y1))\n\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "let ?vert_edge = \"(snd oneCube)\""], ["proof (state)\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "have vert_edge_x_const: \"\\<forall>t. (?vert_edge t) \\<bullet> i = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t. snd oneCube t \\<bullet> i = x", "by (simp add: i_is_x_axis vert_edge_def)"], ["proof (state)\nthis:\n  \\<forall>t. snd oneCube t \\<bullet> i = x\n\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "have vert_edge_is_straight_path:\n        \"?vert_edge = (\\<lambda>t. (x, y2 + t * (y1 - y2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd oneCube = (\\<lambda>t. (x, y2 + t * (y1 - y2)))", "by (auto simp: vert_edge_def algebra_simps)"], ["proof (state)\nthis:\n  snd oneCube = (\\<lambda>t. (x, y2 + t * (y1 - y2)))\n\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "have \"\\<forall>x. ?vert_edge differentiable at x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. snd oneCube differentiable at x", "by (metis mult.commute vert_edge_is_straight_path straight_path_diffrentiable_x)"], ["proof (state)\nthis:\n  \\<forall>x. snd oneCube differentiable at x\n\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "then"], ["proof (chain)\npicking this:\n  \\<forall>x. snd oneCube differentiable at x", "show \"line_integral F {i} (snd oneCube) = 0\""], ["proof (prove)\nusing this:\n  \\<forall>x. snd oneCube differentiable at x\n\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "using line_integral_on_pair_straight_path(1) vert_edge_x_const"], ["proof (prove)\nusing this:\n  \\<forall>x. snd oneCube differentiable at x\n  \\<lbrakk>\\<forall>x. ?\\<gamma> x \\<bullet> ?i = ?a;\n   \\<forall>x\\<in>{0..1}. ?\\<gamma> differentiable at x\\<rbrakk>\n  \\<Longrightarrow> line_integral ?F {?i} ?\\<gamma> = 0\n  \\<forall>t. snd oneCube t \\<bullet> i = x\n\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "by blast"], ["proof (state)\nthis:\n  line_integral F {i} (snd oneCube) = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?oneCube \\<in> two_chain_vertical_boundary two_chain \\<Longrightarrow>\n  line_integral F {i} (snd ?oneCube) = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>\\<V>.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n    0", "then"], ["proof (chain)\npicking this:\n  ?oneCube \\<in> two_chain_vertical_boundary two_chain \\<Longrightarrow>\n  line_integral F {i} (snd ?oneCube) = 0", "have \"\\<forall>oneCube \\<in> \\<V>. line_integral F {i} (snd oneCube) = 0\""], ["proof (prove)\nusing this:\n  ?oneCube \\<in> two_chain_vertical_boundary two_chain \\<Longrightarrow>\n  line_integral F {i} (snd ?oneCube) = 0\n\ngoal (1 subgoal):\n 1. \\<forall>oneCube\\<in>\\<V>. line_integral F {i} (snd oneCube) = 0", "using v_props"], ["proof (prove)\nusing this:\n  ?oneCube \\<in> two_chain_vertical_boundary two_chain \\<Longrightarrow>\n  line_integral F {i} (snd ?oneCube) = 0\n  \\<V> \\<subseteq> two_chain_vertical_boundary two_chain\n  \\<gamma> = \\<V> \\<union> two_chain_horizontal_boundary two_chain\n\ngoal (1 subgoal):\n 1. \\<forall>oneCube\\<in>\\<V>. line_integral F {i} (snd oneCube) = 0", "by auto"], ["proof (state)\nthis:\n  \\<forall>oneCube\\<in>\\<V>. line_integral F {i} (snd oneCube) = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>\\<V>.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n    0", "then"], ["proof (chain)\npicking this:\n  \\<forall>oneCube\\<in>\\<V>. line_integral F {i} (snd oneCube) = 0", "show \"(\\<Sum>x\\<in>\\<V>. case x of (k, g) \\<Rightarrow> k * line_integral F {i} g) = 0\""], ["proof (prove)\nusing this:\n  \\<forall>oneCube\\<in>\\<V>. line_integral F {i} (snd oneCube) = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>\\<V>.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n    0", "using comm_monoid_add_class.sum.neutral"], ["proof (prove)\nusing this:\n  \\<forall>oneCube\\<in>\\<V>. line_integral F {i} (snd oneCube) = 0\n  \\<forall>x\\<in>?A. ?g x = (0::?'a) \\<Longrightarrow> sum ?g ?A = (0::?'a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>\\<V>.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n    0", "by (simp add: prod.case_eq_if)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>\\<V>.\n     case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n  0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  one_chain_line_integral F {i} \\<V> = 0\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  one_chain_line_integral F {i} \\<V> = 0", "have \"one_chain_line_integral F {i} \\<gamma> =\n             one_chain_line_integral F {i} (two_chain_boundary two_chain)\""], ["proof (prove)\nusing this:\n  one_chain_line_integral F {i} \\<V> = 0\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {i} \\<gamma> =\n    one_chain_line_integral F {i} (two_chain_boundary two_chain)", "using x_axis_line_integral_is_only_horizontal"], ["proof (prove)\nusing this:\n  one_chain_line_integral F {i} \\<V> = 0\n  one_chain_line_integral F {i} (two_chain_boundary two_chain) =\n  one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {i} \\<gamma> =\n    one_chain_line_integral F {i} (two_chain_boundary two_chain)", "by (simp add: line_integral_on_path)"], ["proof (state)\nthis:\n  one_chain_line_integral F {i} \\<gamma> =\n  one_chain_line_integral F {i} (two_chain_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  one_chain_line_integral F {i} \\<gamma> =\n  one_chain_line_integral F {i} (two_chain_boundary two_chain)", "show ?thesis"], ["proof (prove)\nusing this:\n  one_chain_line_integral F {i} \\<gamma> =\n  one_chain_line_integral F {i} (two_chain_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "using assms and GreenThm_typeI_divisible"], ["proof (prove)\nusing this:\n  one_chain_line_integral F {i} \\<gamma> =\n  one_chain_line_integral F {i} (two_chain_boundary two_chain)\n  gen_division s (cubeImage ` two_chain)\n  two_chain_horizontal_boundary two_chain \\<subseteq> \\<gamma>\n  \\<gamma> \\<subseteq> two_chain_boundary two_chain\n  gen_division s (cubeImage ` two_chain) \\<Longrightarrow>\n  integral s\n   (\\<lambda>x.\n       - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n  one_chain_line_integral F {i} (two_chain_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "by auto"], ["proof (state)\nthis:\n  integral s\n   (\\<lambda>x.\n       - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n  one_chain_line_integral F {i} \\<gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma GreenThm_typeI_divisible_region_boundary_gen:\n  assumes valid_typeI_div: \"valid_typeI_division s two_chain\" and\n    f_analytically_valid: \"\\<forall>twoC \\<in> two_chain. analytically_valid (cubeImage twoC) (\\<lambda>a. F(a) \\<bullet> i) j\" and\n    only_vertical_division:\n    \"only_vertical_division \\<gamma> two_chain\"\n  shows \"integral s (\\<lambda>x. - partial_vector_derivative (\\<lambda>a. F(a) \\<bullet> i) j x) = one_chain_line_integral F {i} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "let ?F_b' = \"partial_vector_derivative (\\<lambda>a. F(a) \\<bullet> i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "have all_two_cubes_have_four_distict_edges: \"\\<forall>twoCube \\<in> two_chain. card (boundary twoCube) = 4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>twoCube\\<in>two_chain. card (boundary twoCube) = 4", "using valid_typeI_div valid_two_chain_def valid_two_cube_def"], ["proof (prove)\nusing this:\n  valid_typeI_division s two_chain\n  valid_two_chain ?twoChain \\<equiv>\n  (\\<forall>twoCube\\<in>?twoChain. valid_two_cube twoCube) \\<and>\n  pairwise (\\<lambda>c1 c2. boundary c1 \\<inter> boundary c2 = {})\n   ?twoChain \\<and>\n  inj_on cubeImage ?twoChain\n  valid_two_cube ?twoC \\<equiv> card (boundary ?twoC) = 4\n\ngoal (1 subgoal):\n 1. \\<forall>twoCube\\<in>two_chain. card (boundary twoCube) = 4", "by auto"], ["proof (state)\nthis:\n  \\<forall>twoCube\\<in>two_chain. card (boundary twoCube) = 4\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "have no_shared_edges_have_similar_orientations:\n    \"\\<forall>twoCube1 \\<in> two_chain. \\<forall>twoCube2 \\<in> two_chain.\n         twoCube1 \\<noteq> twoCube2 \\<longrightarrow> boundary twoCube1 \\<inter> boundary twoCube2 = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>twoCube1\\<in>two_chain.\n       \\<forall>twoCube2\\<in>two_chain.\n          twoCube1 \\<noteq> twoCube2 \\<longrightarrow>\n          boundary twoCube1 \\<inter> boundary twoCube2 = {}", "using valid_typeI_div valid_two_chain_def"], ["proof (prove)\nusing this:\n  valid_typeI_division s two_chain\n  valid_two_chain ?twoChain \\<equiv>\n  (\\<forall>twoCube\\<in>?twoChain. valid_two_cube twoCube) \\<and>\n  pairwise (\\<lambda>c1 c2. boundary c1 \\<inter> boundary c2 = {})\n   ?twoChain \\<and>\n  inj_on cubeImage ?twoChain\n\ngoal (1 subgoal):\n 1. \\<forall>twoCube1\\<in>two_chain.\n       \\<forall>twoCube2\\<in>two_chain.\n          twoCube1 \\<noteq> twoCube2 \\<longrightarrow>\n          boundary twoCube1 \\<inter> boundary twoCube2 = {}", "by (auto simp add: pairwise_def)"], ["proof (state)\nthis:\n  \\<forall>twoCube1\\<in>two_chain.\n     \\<forall>twoCube2\\<in>two_chain.\n        twoCube1 \\<noteq> twoCube2 \\<longrightarrow>\n        boundary twoCube1 \\<inter> boundary twoCube2 = {}\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "(*Proving that line_integral on the x axis is 0 for the vertical 1-cubes*)"], ["proof (state)\nthis:\n  \\<forall>twoCube1\\<in>two_chain.\n     \\<forall>twoCube2\\<in>two_chain.\n        twoCube1 \\<noteq> twoCube2 \\<longrightarrow>\n        boundary twoCube1 \\<inter> boundary twoCube2 = {}\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "have vert_line_integral_zero:\n    \"one_chain_line_integral F {i} (two_chain_vertical_boundary two_chain) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. one_chain_line_integral F {i} (two_chain_vertical_boundary two_chain) =\n    0", "proof (simp add: one_chain_line_integral_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>two_chain_vertical_boundary two_chain.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n    0", "have \"line_integral F {i} (snd oneCube) = 0\"\n      if oneCube: \"oneCube \\<in> two_chain_vertical_boundary(two_chain)\" for oneCube"], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "obtain x y1 y2 k where vert_edge_def: \"oneCube = (k, (\\<lambda>t::real. (x::real, (1 - t) * (y2) + t * y1)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k x y2 y1.\n        oneCube =\n        (k, \\<lambda>t. (x, (1 - t) * y2 + t * y1)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using valid_typeI_div oneCube"], ["proof (prove)\nusing this:\n  valid_typeI_division s two_chain\n  oneCube \\<in> two_chain_vertical_boundary two_chain\n\ngoal (1 subgoal):\n 1. (\\<And>k x y2 y1.\n        oneCube =\n        (k, \\<lambda>t. (x, (1 - t) * y2 + t * y1)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: typeI_twoCube_def two_chain_vertical_boundary_def vertical_boundary_def)"], ["proof (state)\nthis:\n  oneCube = (k, \\<lambda>t. (x, (1 - t) * y2 + t * y1))\n\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "let ?vert_edge = \"(snd oneCube)\""], ["proof (state)\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "have vert_edge_x_const: \"\\<forall>t. (?vert_edge t) \\<bullet> i = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t. snd oneCube t \\<bullet> i = x", "by (simp add: i_is_x_axis vert_edge_def)"], ["proof (state)\nthis:\n  \\<forall>t. snd oneCube t \\<bullet> i = x\n\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "have vert_edge_is_straight_path: \"?vert_edge = (\\<lambda>t. (x, y2 + t * (y1 - y2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd oneCube = (\\<lambda>t. (x, y2 + t * (y1 - y2)))", "by (auto simp: vert_edge_def algebra_simps)"], ["proof (state)\nthis:\n  snd oneCube = (\\<lambda>t. (x, y2 + t * (y1 - y2)))\n\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "by (simp add: i_is_x_axis line_integral_on_pair_straight_path(1) mult.commute straight_path_diffrentiable_x vert_edge_is_straight_path)"], ["proof (state)\nthis:\n  line_integral F {i} (snd oneCube) = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?oneCube \\<in> two_chain_vertical_boundary two_chain \\<Longrightarrow>\n  line_integral F {i} (snd ?oneCube) = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>two_chain_vertical_boundary two_chain.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n    0", "then"], ["proof (chain)\npicking this:\n  ?oneCube \\<in> two_chain_vertical_boundary two_chain \\<Longrightarrow>\n  line_integral F {i} (snd ?oneCube) = 0", "show \"(\\<Sum>x\\<in>two_chain_vertical_boundary two_chain. case x of (k, g) \\<Rightarrow> k * line_integral F {i} g) = 0\""], ["proof (prove)\nusing this:\n  ?oneCube \\<in> two_chain_vertical_boundary two_chain \\<Longrightarrow>\n  line_integral F {i} (snd ?oneCube) = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>two_chain_vertical_boundary two_chain.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n    0", "using comm_monoid_add_class.sum.neutral"], ["proof (prove)\nusing this:\n  ?oneCube \\<in> two_chain_vertical_boundary two_chain \\<Longrightarrow>\n  line_integral F {i} (snd ?oneCube) = 0\n  \\<forall>x\\<in>?A. ?g x = (0::?'a) \\<Longrightarrow> sum ?g ?A = (0::?'a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>two_chain_vertical_boundary two_chain.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n    0", "by (simp add: prod.case_eq_if)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>two_chain_vertical_boundary two_chain.\n     case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n  0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  one_chain_line_integral F {i} (two_chain_vertical_boundary two_chain) = 0\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "(*then, the x axis line_integral on the boundaries of the twoCube is equal to the line_integral on the horizontal boundaries of the twoCube \\<longrightarrow> 1*)"], ["proof (state)\nthis:\n  one_chain_line_integral F {i} (two_chain_vertical_boundary two_chain) = 0\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "have boundary_is_finite: \"finite (two_chain_boundary two_chain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (two_chain_boundary two_chain)", "unfolding two_chain_boundary_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (\\<Union> (boundary ` two_chain))", "proof (rule finite_UN_I)"], ["proof (state)\ngoal (2 subgoals):\n 1. finite two_chain\n 2. \\<And>a. a \\<in> two_chain \\<Longrightarrow> finite (boundary a)", "show \"finite two_chain\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite two_chain", "using assms(1) finite_imageD gen_division_def valid_two_chain_def"], ["proof (prove)\nusing this:\n  valid_typeI_division s two_chain\n  \\<lbrakk>finite (?f ` ?A); inj_on ?f ?A\\<rbrakk>\n  \\<Longrightarrow> finite ?A\n  gen_division ?s ?S \\<equiv>\n  finite ?S \\<and>\n  \\<Union> ?S = ?s \\<and>\n  pairwise (\\<lambda>X Y. negligible (X \\<inter> Y)) ?S\n  valid_two_chain ?twoChain \\<equiv>\n  (\\<forall>twoCube\\<in>?twoChain. valid_two_cube twoCube) \\<and>\n  pairwise (\\<lambda>c1 c2. boundary c1 \\<inter> boundary c2 = {})\n   ?twoChain \\<and>\n  inj_on cubeImage ?twoChain\n\ngoal (1 subgoal):\n 1. finite two_chain", "by auto"], ["proof (state)\nthis:\n  finite two_chain\n\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> two_chain \\<Longrightarrow> finite (boundary a)", "show \"\\<And>a. a \\<in> two_chain \\<Longrightarrow> finite (boundary a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> two_chain \\<Longrightarrow> finite (boundary a)", "by (simp add: boundary_def horizontal_boundary_def vertical_boundary_def)"], ["proof (state)\nthis:\n  ?a \\<in> two_chain \\<Longrightarrow> finite (boundary ?a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finite (two_chain_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "have boundary_is_vert_hor: \"two_chain_boundary two_chain =\n                              (two_chain_vertical_boundary two_chain) \\<union> (two_chain_horizontal_boundary two_chain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. two_chain_boundary two_chain =\n    two_chain_vertical_boundary two_chain \\<union>\n    two_chain_horizontal_boundary two_chain", "by (auto simp add: two_chain_boundary_def two_chain_vertical_boundary_def two_chain_horizontal_boundary_def boundary_def)"], ["proof (state)\nthis:\n  two_chain_boundary two_chain =\n  two_chain_vertical_boundary two_chain \\<union>\n  two_chain_horizontal_boundary two_chain\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  two_chain_boundary two_chain =\n  two_chain_vertical_boundary two_chain \\<union>\n  two_chain_horizontal_boundary two_chain", "have hor_vert_finite:\n    \"finite (two_chain_vertical_boundary two_chain)\"\n    \"finite (two_chain_horizontal_boundary two_chain)\""], ["proof (prove)\nusing this:\n  two_chain_boundary two_chain =\n  two_chain_vertical_boundary two_chain \\<union>\n  two_chain_horizontal_boundary two_chain\n\ngoal (1 subgoal):\n 1. finite (two_chain_vertical_boundary two_chain) &&&\n    finite (two_chain_horizontal_boundary two_chain)", "using boundary_is_finite"], ["proof (prove)\nusing this:\n  two_chain_boundary two_chain =\n  two_chain_vertical_boundary two_chain \\<union>\n  two_chain_horizontal_boundary two_chain\n  finite (two_chain_boundary two_chain)\n\ngoal (1 subgoal):\n 1. finite (two_chain_vertical_boundary two_chain) &&&\n    finite (two_chain_horizontal_boundary two_chain)", "by auto"], ["proof (state)\nthis:\n  finite (two_chain_vertical_boundary two_chain)\n  finite (two_chain_horizontal_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "have horiz_verti_disjoint:\n    \"(two_chain_vertical_boundary two_chain) \\<inter> (two_chain_horizontal_boundary two_chain) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. two_chain_vertical_boundary two_chain \\<inter>\n    two_chain_horizontal_boundary two_chain =\n    {}", "proof (simp add: two_chain_vertical_boundary_def two_chain_horizontal_boundary_def horizontal_boundary_def\n        vertical_boundary_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>two_chain.\n        {(- 1, \\<lambda>y. x (0, y)), (1, \\<lambda>y. x (1, y))}) \\<inter>\n    (\\<Union>x\\<in>two_chain.\n        {(1, \\<lambda>xa. x (xa, 0)), (- 1, \\<lambda>xa. x (xa, 1))}) =\n    {}", "show \"(\\<Union>x\\<in>two_chain. {(- 1, \\<lambda>y. x (0, y)), (1::int, \\<lambda>y. x (1::real, y))}) \n        \\<inter> (\\<Union>x\\<in>two_chain. {(1, \\<lambda>y. x (y, 0)), (- 1, \\<lambda>y. x (y, 1))}) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>two_chain.\n        {(- 1, \\<lambda>y. x (0, y)), (1, \\<lambda>y. x (1, y))}) \\<inter>\n    (\\<Union>x\\<in>two_chain.\n        {(1, \\<lambda>y. x (y, 0)), (- 1, \\<lambda>y. x (y, 1))}) =\n    {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>two_chain.\n        {(- 1, \\<lambda>y. x (0, y)), (1, \\<lambda>y. x (1, y))}) \\<inter>\n    (\\<Union>x\\<in>two_chain.\n        {(1, \\<lambda>y. x (y, 0)), (- 1, \\<lambda>y. x (y, 1))}) =\n    {}", "have \"{(- 1, \\<lambda>y. twoCube (0, y)), (1::int, \\<lambda>y. twoCube (1, y))} \\<inter>\n            {(1, \\<lambda>y. twoCube2 (y, 0)), (- 1, \\<lambda>y. twoCube2 (y, 1))} = {}\"\n        if \"twoCube \\<in> two_chain\" \"twoCube2 \\<in> two_chain\" for twoCube twoCube2"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>y. twoCube2 (y, 0)), (- 1, \\<lambda>y. twoCube2 (y, 1))} =\n    {}", "proof (cases \"twoCube = twoCube2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. twoCube = twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>y. twoCube2 (y, 0)), (- 1, \\<lambda>y. twoCube2 (y, 1))} =\n    {}\n 2. twoCube \\<noteq> twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>y. twoCube2 (y, 0)), (- 1, \\<lambda>y. twoCube2 (y, 1))} =\n    {}", "case True"], ["proof (state)\nthis:\n  twoCube = twoCube2\n\ngoal (2 subgoals):\n 1. twoCube = twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>y. twoCube2 (y, 0)), (- 1, \\<lambda>y. twoCube2 (y, 1))} =\n    {}\n 2. twoCube \\<noteq> twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>y. twoCube2 (y, 0)), (- 1, \\<lambda>y. twoCube2 (y, 1))} =\n    {}", "have \"card {(- 1::int, \\<lambda>y. twoCube2 (0, y)), (1::int, \\<lambda>y. twoCube2 (1, y)), (1, \\<lambda>x. twoCube2 (x, 0)), (- 1, \\<lambda>x. twoCube2 (x, 1))} = 4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     {(- 1, \\<lambda>y. twoCube2 (0, y)), (1, \\<lambda>y. twoCube2 (1, y)),\n      (1, \\<lambda>x. twoCube2 (x, 0)),\n      (- 1, \\<lambda>x. twoCube2 (x, 1))} =\n    4", "using all_two_cubes_have_four_distict_edges that(2)"], ["proof (prove)\nusing this:\n  \\<forall>twoCube\\<in>two_chain. card (boundary twoCube) = 4\n  twoCube2 \\<in> two_chain\n\ngoal (1 subgoal):\n 1. card\n     {(- 1, \\<lambda>y. twoCube2 (0, y)), (1, \\<lambda>y. twoCube2 (1, y)),\n      (1, \\<lambda>x. twoCube2 (x, 0)),\n      (- 1, \\<lambda>x. twoCube2 (x, 1))} =\n    4", "by (auto simp add: boundary_def vertical_boundary_def horizontal_boundary_def)"], ["proof (state)\nthis:\n  card\n   {(- 1, \\<lambda>y. twoCube2 (0, y)), (1, \\<lambda>y. twoCube2 (1, y)),\n    (1, \\<lambda>x. twoCube2 (x, 0)), (- 1, \\<lambda>x. twoCube2 (x, 1))} =\n  4\n\ngoal (2 subgoals):\n 1. twoCube = twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>y. twoCube2 (y, 0)), (- 1, \\<lambda>y. twoCube2 (y, 1))} =\n    {}\n 2. twoCube \\<noteq> twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>y. twoCube2 (y, 0)), (- 1, \\<lambda>y. twoCube2 (y, 1))} =\n    {}", "then"], ["proof (chain)\npicking this:\n  card\n   {(- 1, \\<lambda>y. twoCube2 (0, y)), (1, \\<lambda>y. twoCube2 (1, y)),\n    (1, \\<lambda>x. twoCube2 (x, 0)), (- 1, \\<lambda>x. twoCube2 (x, 1))} =\n  4", "show ?thesis"], ["proof (prove)\nusing this:\n  card\n   {(- 1, \\<lambda>y. twoCube2 (0, y)), (1, \\<lambda>y. twoCube2 (1, y)),\n    (1, \\<lambda>x. twoCube2 (x, 0)), (- 1, \\<lambda>x. twoCube2 (x, 1))} =\n  4\n\ngoal (1 subgoal):\n 1. {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>y. twoCube2 (y, 0)), (- 1, \\<lambda>y. twoCube2 (y, 1))} =\n    {}", "by (auto simp: card_insert_if True split: if_split_asm)"], ["proof (state)\nthis:\n  {(- 1, \\<lambda>y. twoCube (0, y)),\n   (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n  {(1, \\<lambda>y. twoCube2 (y, 0)), (- 1, \\<lambda>y. twoCube2 (y, 1))} =\n  {}\n\ngoal (1 subgoal):\n 1. twoCube \\<noteq> twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>y. twoCube2 (y, 0)), (- 1, \\<lambda>y. twoCube2 (y, 1))} =\n    {}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. twoCube \\<noteq> twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>y. twoCube2 (y, 0)), (- 1, \\<lambda>y. twoCube2 (y, 1))} =\n    {}", "case False"], ["proof (state)\nthis:\n  twoCube \\<noteq> twoCube2\n\ngoal (1 subgoal):\n 1. twoCube \\<noteq> twoCube2 \\<Longrightarrow>\n    {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>y. twoCube2 (y, 0)), (- 1, \\<lambda>y. twoCube2 (y, 1))} =\n    {}", "then"], ["proof (chain)\npicking this:\n  twoCube \\<noteq> twoCube2", "show ?thesis"], ["proof (prove)\nusing this:\n  twoCube \\<noteq> twoCube2\n\ngoal (1 subgoal):\n 1. {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>y. twoCube2 (y, 0)), (- 1, \\<lambda>y. twoCube2 (y, 1))} =\n    {}", "using no_shared_edges_have_similar_orientations"], ["proof (prove)\nusing this:\n  twoCube \\<noteq> twoCube2\n  \\<forall>twoCube1\\<in>two_chain.\n     \\<forall>twoCube2\\<in>two_chain.\n        twoCube1 \\<noteq> twoCube2 \\<longrightarrow>\n        boundary twoCube1 \\<inter> boundary twoCube2 = {}\n\ngoal (1 subgoal):\n 1. {(- 1, \\<lambda>y. twoCube (0, y)),\n     (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n    {(1, \\<lambda>y. twoCube2 (y, 0)), (- 1, \\<lambda>y. twoCube2 (y, 1))} =\n    {}", "by (simp add: that boundary_def vertical_boundary_def horizontal_boundary_def)"], ["proof (state)\nthis:\n  {(- 1, \\<lambda>y. twoCube (0, y)),\n   (1, \\<lambda>y. twoCube (1, y))} \\<inter>\n  {(1, \\<lambda>y. twoCube2 (y, 0)), (- 1, \\<lambda>y. twoCube2 (y, 1))} =\n  {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?twoCube \\<in> two_chain; ?twoCube2.0 \\<in> two_chain\\<rbrakk>\n  \\<Longrightarrow> {(- 1, \\<lambda>y. ?twoCube (0, y)),\n                     (1, \\<lambda>y. ?twoCube (1, y))} \\<inter>\n                    {(1, \\<lambda>y. ?twoCube2.0 (y, 0)),\n                     (- 1, \\<lambda>y. ?twoCube2.0 (y, 1))} =\n                    {}\n\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>two_chain.\n        {(- 1, \\<lambda>y. x (0, y)), (1, \\<lambda>y. x (1, y))}) \\<inter>\n    (\\<Union>x\\<in>two_chain.\n        {(1, \\<lambda>y. x (y, 0)), (- 1, \\<lambda>y. x (y, 1))}) =\n    {}", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?twoCube \\<in> two_chain; ?twoCube2.0 \\<in> two_chain\\<rbrakk>\n  \\<Longrightarrow> {(- 1, \\<lambda>y. ?twoCube (0, y)),\n                     (1, \\<lambda>y. ?twoCube (1, y))} \\<inter>\n                    {(1, \\<lambda>y. ?twoCube2.0 (y, 0)),\n                     (- 1, \\<lambda>y. ?twoCube2.0 (y, 1))} =\n                    {}", "have \"\\<Union> ((\\<lambda>twoCube. {(- 1, \\<lambda>y. twoCube (0, y)), (1, \\<lambda>y. twoCube (1, y))}) ` two_chain)\n               \\<inter> \\<Union> ((\\<lambda>twoCube. {(1::int, \\<lambda>y. twoCube (y, 0)), (- 1, \\<lambda>y. twoCube (y, 1))}) ` two_chain)\n                 = {}\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?twoCube \\<in> two_chain; ?twoCube2.0 \\<in> two_chain\\<rbrakk>\n  \\<Longrightarrow> {(- 1, \\<lambda>y. ?twoCube (0, y)),\n                     (1, \\<lambda>y. ?twoCube (1, y))} \\<inter>\n                    {(1, \\<lambda>y. ?twoCube2.0 (y, 0)),\n                     (- 1, \\<lambda>y. ?twoCube2.0 (y, 1))} =\n                    {}\n\ngoal (1 subgoal):\n 1. (\\<Union>twoCube\\<in>two_chain.\n        {(- 1, \\<lambda>y. twoCube (0, y)),\n         (1, \\<lambda>y. twoCube (1, y))}) \\<inter>\n    (\\<Union>twoCube\\<in>two_chain.\n        {(1, \\<lambda>y. twoCube (y, 0)),\n         (- 1, \\<lambda>y. twoCube (y, 1))}) =\n    {}", "using Complete_Lattices.Union_disjoint"], ["proof (prove)\nusing this:\n  \\<lbrakk>?twoCube \\<in> two_chain; ?twoCube2.0 \\<in> two_chain\\<rbrakk>\n  \\<Longrightarrow> {(- 1, \\<lambda>y. ?twoCube (0, y)),\n                     (1, \\<lambda>y. ?twoCube (1, y))} \\<inter>\n                    {(1, \\<lambda>y. ?twoCube2.0 (y, 0)),\n                     (- 1, \\<lambda>y. ?twoCube2.0 (y, 1))} =\n                    {}\n  (\\<Union> ?C \\<inter> ?A = {}) = (\\<forall>B\\<in>?C. B \\<inter> ?A = {})\n\ngoal (1 subgoal):\n 1. (\\<Union>twoCube\\<in>two_chain.\n        {(- 1, \\<lambda>y. twoCube (0, y)),\n         (1, \\<lambda>y. twoCube (1, y))}) \\<inter>\n    (\\<Union>twoCube\\<in>two_chain.\n        {(1, \\<lambda>y. twoCube (y, 0)),\n         (- 1, \\<lambda>y. twoCube (y, 1))}) =\n    {}", "by force"], ["proof (state)\nthis:\n  (\\<Union>twoCube\\<in>two_chain.\n      {(- 1, \\<lambda>y. twoCube (0, y)),\n       (1, \\<lambda>y. twoCube (1, y))}) \\<inter>\n  (\\<Union>twoCube\\<in>two_chain.\n      {(1, \\<lambda>y. twoCube (y, 0)),\n       (- 1, \\<lambda>y. twoCube (y, 1))}) =\n  {}\n\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>two_chain.\n        {(- 1, \\<lambda>y. x (0, y)), (1, \\<lambda>y. x (1, y))}) \\<inter>\n    (\\<Union>x\\<in>two_chain.\n        {(1, \\<lambda>y. x (y, 0)), (- 1, \\<lambda>y. x (y, 1))}) =\n    {}", "then"], ["proof (chain)\npicking this:\n  (\\<Union>twoCube\\<in>two_chain.\n      {(- 1, \\<lambda>y. twoCube (0, y)),\n       (1, \\<lambda>y. twoCube (1, y))}) \\<inter>\n  (\\<Union>twoCube\\<in>two_chain.\n      {(1, \\<lambda>y. twoCube (y, 0)),\n       (- 1, \\<lambda>y. twoCube (y, 1))}) =\n  {}", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Union>twoCube\\<in>two_chain.\n      {(- 1, \\<lambda>y. twoCube (0, y)),\n       (1, \\<lambda>y. twoCube (1, y))}) \\<inter>\n  (\\<Union>twoCube\\<in>two_chain.\n      {(1, \\<lambda>y. twoCube (y, 0)),\n       (- 1, \\<lambda>y. twoCube (y, 1))}) =\n  {}\n\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>two_chain.\n        {(- 1, \\<lambda>y. x (0, y)), (1, \\<lambda>y. x (1, y))}) \\<inter>\n    (\\<Union>x\\<in>two_chain.\n        {(1, \\<lambda>y. x (y, 0)), (- 1, \\<lambda>y. x (y, 1))}) =\n    {}", "by force"], ["proof (state)\nthis:\n  (\\<Union>x\\<in>two_chain.\n      {(- 1, \\<lambda>y. x (0, y)), (1, \\<lambda>y. x (1, y))}) \\<inter>\n  (\\<Union>x\\<in>two_chain.\n      {(1, \\<lambda>y. x (y, 0)), (- 1, \\<lambda>y. x (y, 1))}) =\n  {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Union>x\\<in>two_chain.\n      {(- 1, \\<lambda>y. x (0, y)), (1, \\<lambda>y. x (1, y))}) \\<inter>\n  (\\<Union>x\\<in>two_chain.\n      {(1, \\<lambda>y. x (y, 0)), (- 1, \\<lambda>y. x (y, 1))}) =\n  {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  two_chain_vertical_boundary two_chain \\<inter>\n  two_chain_horizontal_boundary two_chain =\n  {}\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "have \"one_chain_line_integral F {i} (two_chain_boundary two_chain)\n         = one_chain_line_integral F {i} (two_chain_vertical_boundary two_chain) +\n           one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. one_chain_line_integral F {i} (two_chain_boundary two_chain) =\n    one_chain_line_integral F {i} (two_chain_vertical_boundary two_chain) +\n    one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)", "using boundary_is_vert_hor horiz_verti_disjoint"], ["proof (prove)\nusing this:\n  two_chain_boundary two_chain =\n  two_chain_vertical_boundary two_chain \\<union>\n  two_chain_horizontal_boundary two_chain\n  two_chain_vertical_boundary two_chain \\<inter>\n  two_chain_horizontal_boundary two_chain =\n  {}\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {i} (two_chain_boundary two_chain) =\n    one_chain_line_integral F {i} (two_chain_vertical_boundary two_chain) +\n    one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)", "by (auto simp add: one_chain_line_integral_def hor_vert_finite sum.union_disjoint)"], ["proof (state)\nthis:\n  one_chain_line_integral F {i} (two_chain_boundary two_chain) =\n  one_chain_line_integral F {i} (two_chain_vertical_boundary two_chain) +\n  one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  one_chain_line_integral F {i} (two_chain_boundary two_chain) =\n  one_chain_line_integral F {i} (two_chain_vertical_boundary two_chain) +\n  one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)", "have x_axis_line_integral_is_only_horizontal:\n    \"one_chain_line_integral F {i} (two_chain_boundary two_chain)\n     = one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)\""], ["proof (prove)\nusing this:\n  one_chain_line_integral F {i} (two_chain_boundary two_chain) =\n  one_chain_line_integral F {i} (two_chain_vertical_boundary two_chain) +\n  one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {i} (two_chain_boundary two_chain) =\n    one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)", "using vert_line_integral_zero"], ["proof (prove)\nusing this:\n  one_chain_line_integral F {i} (two_chain_boundary two_chain) =\n  one_chain_line_integral F {i} (two_chain_vertical_boundary two_chain) +\n  one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)\n  one_chain_line_integral F {i} (two_chain_vertical_boundary two_chain) = 0\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {i} (two_chain_boundary two_chain) =\n    one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)", "by auto"], ["proof (state)\nthis:\n  one_chain_line_integral F {i} (two_chain_boundary two_chain) =\n  one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "(*Since \\<gamma> \\<subseteq> the boundary of the 2-chain and the horizontal boundaries are \\<subseteq> \\<gamma>, then there is some \\<V> \\<subseteq> \\<partial>\\<^sub>V(2-\\<C>) such that \\<gamma> = \\<V> \\<union> \\<partial>\\<^sub>H(2-\\<C>)*)"], ["proof (state)\nthis:\n  one_chain_line_integral F {i} (two_chain_boundary two_chain) =\n  one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "obtain \\<H> \\<V> where hv_props: \"finite \\<V>\"\n    \"(\\<forall>(k,\\<gamma>) \\<in> \\<V>. (\\<exists>(k', \\<gamma>') \\<in> two_chain_vertical_boundary two_chain.\n        (\\<exists>a \\<in> {0 .. 1}. \\<exists>b \\<in> {0..1}. a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>)))\" \"\\<gamma> = \\<H> \\<union> \\<V>\"\n    \"(common_sudiv_exists (two_chain_horizontal_boundary two_chain) \\<H>)\n     \\<or> common_reparam_exists \\<H> (two_chain_horizontal_boundary two_chain)\"\n    \"finite \\<H>\"\n    \"boundary_chain \\<H>\"\n    \"\\<forall>(k,\\<gamma>)\\<in>\\<H>. valid_path \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<V> \\<H>.\n        \\<lbrakk>finite \\<V>;\n         \\<forall>(k, \\<gamma>)\\<in>\\<V>.\n            \\<exists>(k', \\<gamma>')\n                     \\<in>two_chain_vertical_boundary two_chain.\n               \\<exists>a\\<in>{0..1}.\n                  \\<exists>b\\<in>{0..1}.\n                     a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>;\n         \\<gamma> = \\<H> \\<union> \\<V>;\n         common_sudiv_exists (two_chain_horizontal_boundary two_chain)\n          \\<H> \\<or>\n         common_reparam_exists \\<H>\n          (two_chain_horizontal_boundary two_chain);\n         finite \\<H>; boundary_chain \\<H>;\n         \\<forall>(k, \\<gamma>)\\<in>\\<H>. valid_path \\<gamma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using only_vertical_division"], ["proof (prove)\nusing this:\n  only_vertical_division \\<gamma> two_chain\n\ngoal (1 subgoal):\n 1. (\\<And>\\<V> \\<H>.\n        \\<lbrakk>finite \\<V>;\n         \\<forall>(k, \\<gamma>)\\<in>\\<V>.\n            \\<exists>(k', \\<gamma>')\n                     \\<in>two_chain_vertical_boundary two_chain.\n               \\<exists>a\\<in>{0..1}.\n                  \\<exists>b\\<in>{0..1}.\n                     a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>;\n         \\<gamma> = \\<H> \\<union> \\<V>;\n         common_sudiv_exists (two_chain_horizontal_boundary two_chain)\n          \\<H> \\<or>\n         common_reparam_exists \\<H>\n          (two_chain_horizontal_boundary two_chain);\n         finite \\<H>; boundary_chain \\<H>;\n         \\<forall>(k, \\<gamma>)\\<in>\\<H>. valid_path \\<gamma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add:  only_vertical_division_def)"], ["proof (state)\nthis:\n  finite \\<V>\n  \\<forall>(k, \\<gamma>)\\<in>\\<V>.\n     \\<exists>(k', \\<gamma>')\\<in>two_chain_vertical_boundary two_chain.\n        \\<exists>a\\<in>{0..1}.\n           \\<exists>b\\<in>{0..1}.\n              a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>\n  \\<gamma> = \\<H> \\<union> \\<V>\n  common_sudiv_exists (two_chain_horizontal_boundary two_chain) \\<H> \\<or>\n  common_reparam_exists \\<H> (two_chain_horizontal_boundary two_chain)\n  finite \\<H>\n  boundary_chain \\<H>\n  \\<forall>(k, \\<gamma>)\\<in>\\<H>. valid_path \\<gamma>\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "have \"finite {i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {i}", "by auto"], ["proof (state)\nthis:\n  finite {i}\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  finite {i}", "have eq_integrals: \" one_chain_line_integral F {i} \\<H> = one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)\""], ["proof (prove)\nusing this:\n  finite {i}\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {i} \\<H> =\n    one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)", "proof(cases \"common_sudiv_exists (two_chain_horizontal_boundary two_chain) \\<H>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite {i};\n     common_sudiv_exists (two_chain_horizontal_boundary two_chain)\n      \\<H>\\<rbrakk>\n    \\<Longrightarrow> one_chain_line_integral F {i} \\<H> =\n                      one_chain_line_integral F {i}\n                       (two_chain_horizontal_boundary two_chain)\n 2. \\<lbrakk>finite {i};\n     \\<not> common_sudiv_exists (two_chain_horizontal_boundary two_chain)\n             \\<H>\\<rbrakk>\n    \\<Longrightarrow> one_chain_line_integral F {i} \\<H> =\n                      one_chain_line_integral F {i}\n                       (two_chain_horizontal_boundary two_chain)", "case True"], ["proof (state)\nthis:\n  common_sudiv_exists (two_chain_horizontal_boundary two_chain) \\<H>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>finite {i};\n     common_sudiv_exists (two_chain_horizontal_boundary two_chain)\n      \\<H>\\<rbrakk>\n    \\<Longrightarrow> one_chain_line_integral F {i} \\<H> =\n                      one_chain_line_integral F {i}\n                       (two_chain_horizontal_boundary two_chain)\n 2. \\<lbrakk>finite {i};\n     \\<not> common_sudiv_exists (two_chain_horizontal_boundary two_chain)\n             \\<H>\\<rbrakk>\n    \\<Longrightarrow> one_chain_line_integral F {i} \\<H> =\n                      one_chain_line_integral F {i}\n                       (two_chain_horizontal_boundary two_chain)", "then"], ["proof (chain)\npicking this:\n  common_sudiv_exists (two_chain_horizontal_boundary two_chain) \\<H>", "show ?thesis"], ["proof (prove)\nusing this:\n  common_sudiv_exists (two_chain_horizontal_boundary two_chain) \\<H>\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {i} \\<H> =\n    one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)", "using gen_common_subdivision_imp_eq_line_integral(1)[OF True two_chain_horizontal_boundary_is_boundary_chain hv_props(6) _ hor_vert_finite(2) hv_props(5)]\n        typeI_cube_line_integral_exists_boundary''"], ["proof (prove)\nusing this:\n  common_sudiv_exists (two_chain_horizontal_boundary two_chain) \\<H>\n  \\<lbrakk>\\<forall>(k, \\<gamma>)\n                    \\<in>two_chain_horizontal_boundary two_chain.\n              line_integral_exists ?F ?basis \\<gamma>;\n   finite ?basis\\<rbrakk>\n  \\<Longrightarrow> one_chain_line_integral ?F ?basis\n                     (two_chain_horizontal_boundary two_chain) =\n                    one_chain_line_integral ?F ?basis \\<H>\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_horizontal_boundary two_chain.\n     line_integral_exists F {i} \\<gamma>\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {i} \\<H> =\n    one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)", "by force"], ["proof (state)\nthis:\n  one_chain_line_integral F {i} \\<H> =\n  one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite {i};\n     \\<not> common_sudiv_exists (two_chain_horizontal_boundary two_chain)\n             \\<H>\\<rbrakk>\n    \\<Longrightarrow> one_chain_line_integral F {i} \\<H> =\n                      one_chain_line_integral F {i}\n                       (two_chain_horizontal_boundary two_chain)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite {i};\n     \\<not> common_sudiv_exists (two_chain_horizontal_boundary two_chain)\n             \\<H>\\<rbrakk>\n    \\<Longrightarrow> one_chain_line_integral F {i} \\<H> =\n                      one_chain_line_integral F {i}\n                       (two_chain_horizontal_boundary two_chain)", "case False"], ["proof (state)\nthis:\n  \\<not> common_sudiv_exists (two_chain_horizontal_boundary two_chain) \\<H>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite {i};\n     \\<not> common_sudiv_exists (two_chain_horizontal_boundary two_chain)\n             \\<H>\\<rbrakk>\n    \\<Longrightarrow> one_chain_line_integral F {i} \\<H> =\n                      one_chain_line_integral F {i}\n                       (two_chain_horizontal_boundary two_chain)", "have integ_exis_horiz:\n      \"\\<forall>(k,\\<gamma>) \\<in> two_chain_horizontal_boundary two_chain. line_integral_exists F {i} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_horizontal_boundary two_chain.\n       line_integral_exists F {i} \\<gamma>", "using typeI_cube_line_integral_exists_boundary'' assms"], ["proof (prove)\nusing this:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_horizontal_boundary two_chain.\n     line_integral_exists F {i} \\<gamma>\n  valid_typeI_division s two_chain\n  \\<forall>twoC\\<in>two_chain.\n     analytically_valid (cubeImage twoC) (\\<lambda>a. F a \\<bullet> i) j\n  only_vertical_division \\<gamma> two_chain\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_horizontal_boundary two_chain.\n       line_integral_exists F {i} \\<gamma>", "by (fastforce simp add: valid_two_chain_def)"], ["proof (state)\nthis:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_horizontal_boundary two_chain.\n     line_integral_exists F {i} \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite {i};\n     \\<not> common_sudiv_exists (two_chain_horizontal_boundary two_chain)\n             \\<H>\\<rbrakk>\n    \\<Longrightarrow> one_chain_line_integral F {i} \\<H> =\n                      one_chain_line_integral F {i}\n                       (two_chain_horizontal_boundary two_chain)", "have integ_exis: \"\\<forall>(k,\\<gamma>) \\<in> two_chain_boundary two_chain. line_integral_exists F {i} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n       line_integral_exists F {i} \\<gamma>", "using typeI_cube_line_integral_exists_boundary"], ["proof (prove)\nusing this:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n     line_integral_exists F {i} \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n       line_integral_exists F {i} \\<gamma>", "by blast"], ["proof (state)\nthis:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n     line_integral_exists F {i} \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite {i};\n     \\<not> common_sudiv_exists (two_chain_horizontal_boundary two_chain)\n             \\<H>\\<rbrakk>\n    \\<Longrightarrow> one_chain_line_integral F {i} \\<H> =\n                      one_chain_line_integral F {i}\n                       (two_chain_horizontal_boundary two_chain)", "have valid_paths: \"\\<forall>(k,\\<gamma>) \\<in> two_chain_vertical_boundary two_chain. valid_path \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n       valid_path \\<gamma>", "using typeI_edges_are_valid_paths assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>typeI_twoCube ?twoC;\n   (?k, ?\\<gamma>) \\<in> boundary ?twoC\\<rbrakk>\n  \\<Longrightarrow> valid_path ?\\<gamma>\n  valid_typeI_division s two_chain\n  \\<forall>twoC\\<in>two_chain.\n     analytically_valid (cubeImage twoC) (\\<lambda>a. F a \\<bullet> i) j\n  only_vertical_division \\<gamma> two_chain\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n       valid_path \\<gamma>", "by (fastforce simp add: two_chain_boundary_def two_chain_vertical_boundary_def boundary_def)"], ["proof (state)\nthis:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n     valid_path \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite {i};\n     \\<not> common_sudiv_exists (two_chain_horizontal_boundary two_chain)\n             \\<H>\\<rbrakk>\n    \\<Longrightarrow> one_chain_line_integral F {i} \\<H> =\n                      one_chain_line_integral F {i}\n                       (two_chain_horizontal_boundary two_chain)", "have integ_exis_vert:\n      \"(\\<And>k \\<gamma>. (\\<exists>(k', \\<gamma>') \\<in> two_chain_vertical_boundary two_chain. \\<exists>a\\<in>{0..1}. \\<exists>b\\<in>{0..1}. a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>) \\<Longrightarrow>\n                                    line_integral_exists F {i} \\<gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k \\<gamma>.\n       \\<exists>(k', \\<gamma>')\\<in>two_chain_vertical_boundary two_chain.\n          \\<exists>a\\<in>{0..1}.\n             \\<exists>b\\<in>{0..1}.\n                a \\<le> b \\<and>\n                subpath a b \\<gamma>' = \\<gamma> \\<Longrightarrow>\n       line_integral_exists F {i} \\<gamma>", "using integ_exis valid_paths line_integral_exists_subpath[of \"F\" \"{i}\"]"], ["proof (prove)\nusing this:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain.\n     line_integral_exists F {i} \\<gamma>\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_vertical_boundary two_chain.\n     valid_path \\<gamma>\n  \\<lbrakk>line_integral_exists F {i} ?g; valid_path ?g; ?u \\<in> {0..1};\n   ?v \\<in> {0..1}; ?u \\<le> ?v\\<rbrakk>\n  \\<Longrightarrow> line_integral_exists F {i} (subpath ?u ?v ?g)\n\ngoal (1 subgoal):\n 1. \\<And>k \\<gamma>.\n       \\<exists>(k', \\<gamma>')\\<in>two_chain_vertical_boundary two_chain.\n          \\<exists>a\\<in>{0..1}.\n             \\<exists>b\\<in>{0..1}.\n                a \\<le> b \\<and>\n                subpath a b \\<gamma>' = \\<gamma> \\<Longrightarrow>\n       line_integral_exists F {i} \\<gamma>", "by (fastforce simp add: two_chain_boundary_def two_chain_vertical_boundary_def\n          two_chain_horizontal_boundary_def boundary_def)"], ["proof (state)\nthis:\n  \\<exists>(k', \\<gamma>')\\<in>two_chain_vertical_boundary two_chain.\n     \\<exists>a\\<in>{0..1}.\n        \\<exists>b\\<in>{0..1}.\n           a \\<le> b \\<and>\n           subpath a b \\<gamma>' = ?\\<gamma> \\<Longrightarrow>\n  line_integral_exists F {i} ?\\<gamma>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite {i};\n     \\<not> common_sudiv_exists (two_chain_horizontal_boundary two_chain)\n             \\<H>\\<rbrakk>\n    \\<Longrightarrow> one_chain_line_integral F {i} \\<H> =\n                      one_chain_line_integral F {i}\n                       (two_chain_horizontal_boundary two_chain)", "have finite_i: \"finite {i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {i}", "by auto"], ["proof (state)\nthis:\n  finite {i}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite {i};\n     \\<not> common_sudiv_exists (two_chain_horizontal_boundary two_chain)\n             \\<H>\\<rbrakk>\n    \\<Longrightarrow> one_chain_line_integral F {i} \\<H> =\n                      one_chain_line_integral F {i}\n                       (two_chain_horizontal_boundary two_chain)", "have i: \"{i} \\<subseteq> Basis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i} \\<subseteq> Basis", "using i_is_x_axis real_pair_basis"], ["proof (prove)\nusing this:\n  i = (1, 0)\n  Basis = {(1, 0), (0, 1)}\n\ngoal (1 subgoal):\n 1. {i} \\<subseteq> Basis", "by auto"], ["proof (state)\nthis:\n  {i} \\<subseteq> Basis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite {i};\n     \\<not> common_sudiv_exists (two_chain_horizontal_boundary two_chain)\n             \\<H>\\<rbrakk>\n    \\<Longrightarrow> one_chain_line_integral F {i} \\<H> =\n                      one_chain_line_integral F {i}\n                       (two_chain_horizontal_boundary two_chain)", "have ii: \" \\<forall>(k2, \\<gamma>2)\\<in>two_chain_horizontal_boundary two_chain. \\<forall>b\\<in>{i}. continuous_on (path_image \\<gamma>2) (\\<lambda>x. F x \\<bullet> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(k2, \\<gamma>2)\\<in>two_chain_horizontal_boundary two_chain.\n       \\<forall>b\\<in>{i}.\n          continuous_on (path_image \\<gamma>2) (\\<lambda>x. F x \\<bullet> b)", "using assms(1) field_cont_on_typeI_region_cont_on_edges assms(2)"], ["proof (prove)\nusing this:\n  valid_typeI_division s two_chain\n  \\<lbrakk>typeI_twoCube ?twoC; continuous_on (cubeImage ?twoC) ?F;\n   (?k, ?\\<gamma>) \\<in> boundary ?twoC\\<rbrakk>\n  \\<Longrightarrow> continuous_on (?\\<gamma> ` {0..1}) ?F\n  \\<forall>twoC\\<in>two_chain.\n     analytically_valid (cubeImage twoC) (\\<lambda>a. F a \\<bullet> i) j\n\ngoal (1 subgoal):\n 1. \\<forall>(k2, \\<gamma>2)\\<in>two_chain_horizontal_boundary two_chain.\n       \\<forall>b\\<in>{i}.\n          continuous_on (path_image \\<gamma>2) (\\<lambda>x. F x \\<bullet> b)", "by (fastforce simp add: analytically_valid_def two_chain_horizontal_boundary_def boundary_def path_image_def)"], ["proof (state)\nthis:\n  \\<forall>(k2, \\<gamma>2)\\<in>two_chain_horizontal_boundary two_chain.\n     \\<forall>b\\<in>{i}.\n        continuous_on (path_image \\<gamma>2) (\\<lambda>x. F x \\<bullet> b)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite {i};\n     \\<not> common_sudiv_exists (two_chain_horizontal_boundary two_chain)\n             \\<H>\\<rbrakk>\n    \\<Longrightarrow> one_chain_line_integral F {i} \\<H> =\n                      one_chain_line_integral F {i}\n                       (two_chain_horizontal_boundary two_chain)", "have *: \"common_reparam_exists \\<H> (two_chain_horizontal_boundary two_chain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. common_reparam_exists \\<H> (two_chain_horizontal_boundary two_chain)", "using hv_props(4) False"], ["proof (prove)\nusing this:\n  common_sudiv_exists (two_chain_horizontal_boundary two_chain) \\<H> \\<or>\n  common_reparam_exists \\<H> (two_chain_horizontal_boundary two_chain)\n  \\<not> common_sudiv_exists (two_chain_horizontal_boundary two_chain) \\<H>\n\ngoal (1 subgoal):\n 1. common_reparam_exists \\<H> (two_chain_horizontal_boundary two_chain)", "by auto"], ["proof (state)\nthis:\n  common_reparam_exists \\<H> (two_chain_horizontal_boundary two_chain)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite {i};\n     \\<not> common_sudiv_exists (two_chain_horizontal_boundary two_chain)\n             \\<H>\\<rbrakk>\n    \\<Longrightarrow> one_chain_line_integral F {i} \\<H> =\n                      one_chain_line_integral F {i}\n                       (two_chain_horizontal_boundary two_chain)", "show \"one_chain_line_integral F {i} \\<H> = one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. one_chain_line_integral F {i} \\<H> =\n    one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)", "using common_reparam_exists_imp_eq_line_integral(1)[OF finite_i hv_props(5) hor_vert_finite(2) hv_props(6) two_chain_horizontal_boundary_is_boundary_chain ii * hv_props(7) type_I_chain_horiz_bound_valid]"], ["proof (prove)\nusing this:\n  one_chain_line_integral F {i} \\<H> =\n  one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {i} \\<H> =\n    one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)", "by fastforce"], ["proof (state)\nthis:\n  one_chain_line_integral F {i} \\<H> =\n  one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  one_chain_line_integral F {i} \\<H> =\n  one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "(*Since \\<V> \\<subseteq> \\<partial>\\<^sub>H(2-\\<C>), then the line_integral on the x axis along \\<V> is 0, and from 1 Q.E.D. *)"], ["proof (state)\nthis:\n  one_chain_line_integral F {i} \\<H> =\n  one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "have line_integral_on_path:\n    \"one_chain_line_integral F {i} \\<gamma> =\n     one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. one_chain_line_integral F {i} \\<gamma> =\n    one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)", "proof (auto simp add: one_chain_line_integral_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>\\<gamma>.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n    (\\<Sum>x\\<in>two_chain_horizontal_boundary two_chain.\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g)", "have \"line_integral F {i} (snd oneCube) = 0\" if oneCube: \"oneCube \\<in> \\<V>\" for oneCube"], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "obtain k \\<gamma> where k_gamma: \"(k,\\<gamma>) = oneCube\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k \\<gamma>.\n        (k, \\<gamma>) = oneCube \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis coeff_cube_to_path.cases)"], ["proof (state)\nthis:\n  (k, \\<gamma>) = oneCube\n\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "then"], ["proof (chain)\npicking this:\n  (k, \\<gamma>) = oneCube", "obtain k' \\<gamma>' a b where kp_gammap:\n        \"(k'::int, \\<gamma>') \\<in> two_chain_vertical_boundary two_chain\"\n        \"a \\<in> {0 .. 1}\"\n        \"b \\<in> {0..1}\"\n        \"subpath a b \\<gamma>' = \\<gamma>\""], ["proof (prove)\nusing this:\n  (k, \\<gamma>) = oneCube\n\ngoal (1 subgoal):\n 1. (\\<And>k' \\<gamma>'' a b.\n        \\<lbrakk>(k', \\<gamma>'')\n                 \\<in> two_chain_vertical_boundary two_chain;\n         a \\<in> {0..1}; b \\<in> {0..1};\n         subpath a b \\<gamma>'' = \\<gamma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using hv_props oneCube"], ["proof (prove)\nusing this:\n  (k, \\<gamma>) = oneCube\n  finite \\<V>\n  \\<forall>(k, \\<gamma>)\\<in>\\<V>.\n     \\<exists>(k', \\<gamma>')\\<in>two_chain_vertical_boundary two_chain.\n        \\<exists>a\\<in>{0..1}.\n           \\<exists>b\\<in>{0..1}.\n              a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>\n  \\<gamma> = \\<H> \\<union> \\<V>\n  common_sudiv_exists (two_chain_horizontal_boundary two_chain) \\<H> \\<or>\n  common_reparam_exists \\<H> (two_chain_horizontal_boundary two_chain)\n  finite \\<H>\n  boundary_chain \\<H>\n  \\<forall>(k, \\<gamma>)\\<in>\\<H>. valid_path \\<gamma>\n  oneCube \\<in> \\<V>\n\ngoal (1 subgoal):\n 1. (\\<And>k' \\<gamma>'' a b.\n        \\<lbrakk>(k', \\<gamma>'')\n                 \\<in> two_chain_vertical_boundary two_chain;\n         a \\<in> {0..1}; b \\<in> {0..1};\n         subpath a b \\<gamma>'' = \\<gamma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (smt case_prodE split_conv)"], ["proof (state)\nthis:\n  (k', \\<gamma>') \\<in> two_chain_vertical_boundary two_chain\n  a \\<in> {0..1}\n  b \\<in> {0..1}\n  subpath a b \\<gamma>' = \\<gamma>\n\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "obtain x y1 y2 where vert_edge_def: \"(k',\\<gamma>') = (k', (\\<lambda>t::real. (x::real, (1 - t) * (y2) + t * y1)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y2 y1.\n        (k', \\<gamma>') =\n        (k', \\<lambda>t. (x, (1 - t) * y2 + t * y1)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using valid_typeI_div kp_gammap"], ["proof (prove)\nusing this:\n  valid_typeI_division s two_chain\n  (k', \\<gamma>') \\<in> two_chain_vertical_boundary two_chain\n  a \\<in> {0..1}\n  b \\<in> {0..1}\n  subpath a b \\<gamma>' = \\<gamma>\n\ngoal (1 subgoal):\n 1. (\\<And>x y2 y1.\n        (k', \\<gamma>') =\n        (k', \\<lambda>t. (x, (1 - t) * y2 + t * y1)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: typeI_twoCube_def two_chain_vertical_boundary_def vertical_boundary_def)"], ["proof (state)\nthis:\n  (k', \\<gamma>') = (k', \\<lambda>t. (x, (1 - t) * y2 + t * y1))\n\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "have vert_edge_x_const: \"\\<forall>t. \\<gamma> (t) \\<bullet> i = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t. \\<gamma> t \\<bullet> i = x", "by (metis (no_types, lifting) Pair_inject fstI i_is_x_axis inner_Pair_0(2) kp_gammap(4) real_inner_1_right subpath_def vert_edge_def)"], ["proof (state)\nthis:\n  \\<forall>t. \\<gamma> t \\<bullet> i = x\n\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "have \"\\<gamma> = (\\<lambda>t::real. (x::real, (1 - (b - a)*t - a) * (y2) + ((b-a)*t + a) * y1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma> =\n    (\\<lambda>t. (x, (1 - (b - a) * t - a) * y2 + ((b - a) * t + a) * y1))", "using vert_edge_def Product_Type.snd_conv Product_Type.fst_conv kp_gammap(4)"], ["proof (prove)\nusing this:\n  (k', \\<gamma>') = (k', \\<lambda>t. (x, (1 - t) * y2 + t * y1))\n  snd (?x1.0, ?x2.0) = ?x2.0\n  fst (?x1.0, ?x2.0) = ?x1.0\n  subpath a b \\<gamma>' = \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<gamma> =\n    (\\<lambda>t. (x, (1 - (b - a) * t - a) * y2 + ((b - a) * t + a) * y1))", "by (simp add: subpath_def diff_diff_eq[symmetric])"], ["proof (state)\nthis:\n  \\<gamma> =\n  (\\<lambda>t. (x, (1 - (b - a) * t - a) * y2 + ((b - a) * t + a) * y1))\n\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "also"], ["proof (state)\nthis:\n  \\<gamma> =\n  (\\<lambda>t. (x, (1 - (b - a) * t - a) * y2 + ((b - a) * t + a) * y1))\n\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "have \"... = (\\<lambda>t::real. (x::real, (1*y2 - a*y2) +  a*y1 + ((b-a)*y1 - (b - a)*y2)*t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>t. (x, (1 - (b - a) * t - a) * y2 + ((b - a) * t + a) * y1)) =\n    (\\<lambda>t.\n        (x, 1 * y2 - a * y2 + a * y1 + ((b - a) * y1 - (b - a) * y2) * t))", "by (simp add: algebra_simps)"], ["proof (state)\nthis:\n  (\\<lambda>t. (x, (1 - (b - a) * t - a) * y2 + ((b - a) * t + a) * y1)) =\n  (\\<lambda>t.\n      (x, 1 * y2 - a * y2 + a * y1 + ((b - a) * y1 - (b - a) * y2) * t))\n\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "finally"], ["proof (chain)\npicking this:\n  \\<gamma> =\n  (\\<lambda>t.\n      (x, 1 * y2 - a * y2 + a * y1 + ((b - a) * y1 - (b - a) * y2) * t))", "have vert_edge_is_straight_path:\n        \"\\<gamma> = (\\<lambda>t::real. (x::real, (1*y2 - a*y2) +  a*y1 + ((b-a)*y1 - (b - a)*y2)*t))\""], ["proof (prove)\nusing this:\n  \\<gamma> =\n  (\\<lambda>t.\n      (x, 1 * y2 - a * y2 + a * y1 + ((b - a) * y1 - (b - a) * y2) * t))\n\ngoal (1 subgoal):\n 1. \\<gamma> =\n    (\\<lambda>t.\n        (x, 1 * y2 - a * y2 + a * y1 + ((b - a) * y1 - (b - a) * y2) * t))", "."], ["proof (state)\nthis:\n  \\<gamma> =\n  (\\<lambda>t.\n      (x, 1 * y2 - a * y2 + a * y1 + ((b - a) * y1 - (b - a) * y2) * t))\n\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "show \"line_integral F {i} (snd oneCube) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "have \"\\<forall>x. \\<gamma> differentiable at x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. \\<gamma> differentiable at x", "by (simp add: straight_path_diffrentiable_x vert_edge_is_straight_path)"], ["proof (state)\nthis:\n  \\<forall>x. \\<gamma> differentiable at x\n\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "then"], ["proof (chain)\npicking this:\n  \\<forall>x. \\<gamma> differentiable at x", "have \"line_integral F {i} \\<gamma> = 0\""], ["proof (prove)\nusing this:\n  \\<forall>x. \\<gamma> differentiable at x\n\ngoal (1 subgoal):\n 1. line_integral F {i} \\<gamma> = 0", "using line_integral_on_pair_straight_path(1) vert_edge_x_const"], ["proof (prove)\nusing this:\n  \\<forall>x. \\<gamma> differentiable at x\n  \\<lbrakk>\\<forall>x. ?\\<gamma> x \\<bullet> ?i = ?a;\n   \\<forall>x\\<in>{0..1}. ?\\<gamma> differentiable at x\\<rbrakk>\n  \\<Longrightarrow> line_integral ?F {?i} ?\\<gamma> = 0\n  \\<forall>t. \\<gamma> t \\<bullet> i = x\n\ngoal (1 subgoal):\n 1. line_integral F {i} \\<gamma> = 0", "by blast"], ["proof (state)\nthis:\n  line_integral F {i} \\<gamma> = 0\n\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "then"], ["proof (chain)\npicking this:\n  line_integral F {i} \\<gamma> = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  line_integral F {i} \\<gamma> = 0\n\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "using Product_Type.snd_conv k_gamma"], ["proof (prove)\nusing this:\n  line_integral F {i} \\<gamma> = 0\n  snd (?x1.0, ?x2.0) = ?x2.0\n  (k, \\<gamma>) = oneCube\n\ngoal (1 subgoal):\n 1. line_integral F {i} (snd oneCube) = 0", "by auto"], ["proof (state)\nthis:\n  line_integral F {i} (snd oneCube) = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  line_integral F {i} (snd oneCube) = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?oneCube \\<in> \\<V> \\<Longrightarrow>\n  line_integral F {i} (snd ?oneCube) = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>\\<gamma>.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n    (\\<Sum>x\\<in>two_chain_horizontal_boundary two_chain.\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g)", "then"], ["proof (chain)\npicking this:\n  ?oneCube \\<in> \\<V> \\<Longrightarrow>\n  line_integral F {i} (snd ?oneCube) = 0", "have \"\\<forall>x\\<in>\\<V>. (case x of (k, g) \\<Rightarrow> (k::int) * line_integral F {i} g) = 0\""], ["proof (prove)\nusing this:\n  ?oneCube \\<in> \\<V> \\<Longrightarrow>\n  line_integral F {i} (snd ?oneCube) = 0\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>\\<V>.\n       (case x of\n        (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n       0", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>\\<V>.\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n     0\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>\\<gamma>.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n    (\\<Sum>x\\<in>two_chain_horizontal_boundary two_chain.\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g)", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>\\<V>.\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n     0", "show \"(\\<Sum>x\\<in>\\<gamma>. case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n               (\\<Sum>x\\<in>two_chain_horizontal_boundary two_chain. case x of (k, g) \\<Rightarrow> of_int k * line_integral F {i} g)\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>\\<V>.\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n     0\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>\\<gamma>.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n    (\\<Sum>x\\<in>two_chain_horizontal_boundary two_chain.\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g)", "using hv_props(1) hv_props(3) hv_props(5) sum_zero_set hor_vert_finite(2) eq_integrals"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>\\<V>.\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n     0\n  finite \\<V>\n  \\<gamma> = \\<H> \\<union> \\<V>\n  finite \\<H>\n  \\<lbrakk>\\<forall>x\\<in>?s. ?f x = (0::?'b); finite ?s; finite ?t\\<rbrakk>\n  \\<Longrightarrow> sum ?f (?s \\<union> ?t) = sum ?f ?t\n  finite (two_chain_horizontal_boundary two_chain)\n  one_chain_line_integral F {i} \\<H> =\n  one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>\\<gamma>.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n    (\\<Sum>x\\<in>two_chain_horizontal_boundary two_chain.\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g)", "apply(auto simp add: one_chain_line_integral_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>\\<V>.\n                (case x of\n                 (k, g) \\<Rightarrow>\n                   real_of_int k * line_integral F {i} g) =\n                0;\n     finite \\<V>; \\<gamma> = \\<H> \\<union> \\<V>; finite \\<H>;\n     \\<And>s f t.\n        \\<lbrakk>\\<forall>x\\<in>s. f x = (0::?'b4); finite s;\n         finite t\\<rbrakk>\n        \\<Longrightarrow> sum f (s \\<union> t) = sum f t;\n     finite (two_chain_horizontal_boundary two_chain);\n     (\\<Sum>x\\<in>\\<H>.\n        case x of\n        (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n     (\\<Sum>x\\<in>two_chain_horizontal_boundary two_chain.\n        case x of\n        (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g)\\<rbrakk>\n    \\<Longrightarrow> (\\<Sum>x\\<in>\\<H> \\<union> \\<V>.\n                         case x of\n                         (k, g) \\<Rightarrow>\n                           real_of_int k * line_integral F {i} g) =\n                      (\\<Sum>x\\<in>two_chain_horizontal_boundary two_chain.\n                         case x of\n                         (k, g) \\<Rightarrow>\n                           real_of_int k * line_integral F {i} g)", "by (smt Un_commute sum_zero_set)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>\\<gamma>.\n     case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) =\n  (\\<Sum>x\\<in>two_chain_horizontal_boundary two_chain.\n     case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  one_chain_line_integral F {i} \\<gamma> =\n  one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  one_chain_line_integral F {i} \\<gamma> =\n  one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)", "have \"one_chain_line_integral F {i} \\<gamma> =\n             one_chain_line_integral F {i} (two_chain_boundary two_chain)\""], ["proof (prove)\nusing this:\n  one_chain_line_integral F {i} \\<gamma> =\n  one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {i} \\<gamma> =\n    one_chain_line_integral F {i} (two_chain_boundary two_chain)", "using x_axis_line_integral_is_only_horizontal line_integral_on_path"], ["proof (prove)\nusing this:\n  one_chain_line_integral F {i} \\<gamma> =\n  one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)\n  one_chain_line_integral F {i} (two_chain_boundary two_chain) =\n  one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)\n  one_chain_line_integral F {i} \\<gamma> =\n  one_chain_line_integral F {i} (two_chain_horizontal_boundary two_chain)\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {i} \\<gamma> =\n    one_chain_line_integral F {i} (two_chain_boundary two_chain)", "by auto"], ["proof (state)\nthis:\n  one_chain_line_integral F {i} \\<gamma> =\n  one_chain_line_integral F {i} (two_chain_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  one_chain_line_integral F {i} \\<gamma> =\n  one_chain_line_integral F {i} (two_chain_boundary two_chain)", "show ?thesis"], ["proof (prove)\nusing this:\n  one_chain_line_integral F {i} \\<gamma> =\n  one_chain_line_integral F {i} (two_chain_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "using assms GreenThm_typeI_divisible"], ["proof (prove)\nusing this:\n  one_chain_line_integral F {i} \\<gamma> =\n  one_chain_line_integral F {i} (two_chain_boundary two_chain)\n  valid_typeI_division s two_chain\n  \\<forall>twoC\\<in>two_chain.\n     analytically_valid (cubeImage twoC) (\\<lambda>a. F a \\<bullet> i) j\n  only_vertical_division \\<gamma> two_chain\n  gen_division s (cubeImage ` two_chain) \\<Longrightarrow>\n  integral s\n   (\\<lambda>x.\n       - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n  one_chain_line_integral F {i} (two_chain_boundary two_chain)\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "by auto"], ["proof (state)\nthis:\n  integral s\n   (\\<lambda>x.\n       - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n  one_chain_line_integral F {i} \\<gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "locale green_typeI_typeII_chain = R2: R2 i j + T1: green_typeI_chain i j F two_chain_typeI + T2: green_typeII_chain i j F two_chain_typeII for i j F two_chain_typeI two_chain_typeII\nbegin"], ["", "lemma GreenThm_typeI_typeII_divisible_region_boundary:\n  assumes \n    gen_divisions: \"gen_division s (cubeImage ` two_chain_typeI)\"\n    \"gen_division s (cubeImage ` two_chain_typeII)\" and\n    typeI_two_cubes_trace_horizontal_boundaries:\n    \"two_chain_horizontal_boundary two_chain_typeI \\<subseteq> \\<gamma>\" and\n    typeII_two_cubes_trace_vertical_boundaries:\n    \"two_chain_vertical_boundary two_chain_typeII \\<subseteq> \\<gamma>\" and\n    boundary_of_region_is_subset_of_partition_boundaries:\n    \"\\<gamma> \\<subseteq> two_chain_boundary two_chain_typeI\"\n    \"\\<gamma> \\<subseteq> two_chain_boundary two_chain_typeII\"\n  shows \"integral s (\\<lambda>x. partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x)\n         = one_chain_line_integral F {i, j} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} \\<gamma>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} \\<gamma>", "let ?F_b' = \"partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j\""], ["proof (state)\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} \\<gamma>", "let ?F_a' = \"partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i\""], ["proof (state)\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} \\<gamma>", "have typeI_regions_integral: \"integral s (\\<lambda>x. - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) = one_chain_line_integral F {i} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "using T1.GreenThm_typeI_divisible_region_boundary\n        gen_divisions(1) typeI_two_cubes_trace_horizontal_boundaries\n        boundary_of_region_is_subset_of_partition_boundaries(1)"], ["proof (prove)\nusing this:\n  \\<lbrakk>gen_division s (cubeImage ` two_chain_typeI);\n   two_chain_horizontal_boundary two_chain_typeI \\<subseteq> ?\\<gamma>;\n   ?\\<gamma> \\<subseteq> two_chain_boundary two_chain_typeI\\<rbrakk>\n  \\<Longrightarrow> integral s\n                     (\\<lambda>x.\n                         - partial_vector_derivative\n                            (\\<lambda>a. F a \\<bullet> i) j x) =\n                    one_chain_line_integral F {i} ?\\<gamma>\n  gen_division s (cubeImage ` two_chain_typeI)\n  two_chain_horizontal_boundary two_chain_typeI \\<subseteq> \\<gamma>\n  \\<gamma> \\<subseteq> two_chain_boundary two_chain_typeI\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i} \\<gamma>", "by blast"], ["proof (state)\nthis:\n  integral s\n   (\\<lambda>x.\n       - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n  one_chain_line_integral F {i} \\<gamma>\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} \\<gamma>", "have typeII_regions_integral: \"integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) = one_chain_line_integral F {j} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "using T2.GreenThm_typeII_divisible_region_boundary gen_divisions(2)\n         typeII_two_cubes_trace_vertical_boundaries\n        boundary_of_region_is_subset_of_partition_boundaries(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>two_chain_vertical_boundary two_chain_typeII\n           \\<subseteq> ?\\<gamma>;\n   ?\\<gamma> \\<subseteq> two_chain_boundary two_chain_typeII\\<rbrakk>\n  \\<Longrightarrow> integral s\n                     (partial_vector_derivative\n                       (\\<lambda>x. F x \\<bullet> j) i) =\n                    one_chain_line_integral F {j} ?\\<gamma>\n  gen_division s (cubeImage ` two_chain_typeII)\n  two_chain_vertical_boundary two_chain_typeII \\<subseteq> \\<gamma>\n  \\<gamma> \\<subseteq> two_chain_boundary two_chain_typeII\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} \\<gamma>", "by auto"], ["proof (state)\nthis:\n  integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n  one_chain_line_integral F {j} \\<gamma>\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} \\<gamma>", "have integral_dis: \"integral s (\\<lambda>x. ?F_a' x - ?F_b' x) = integral s (\\<lambda>x. ?F_a' x) + integral s (\\<lambda>x. - ?F_b' x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    integral s (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) +\n    integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    integral s (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) +\n    integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x)", "have \"\\<forall>twoCube \\<in> two_chain_typeII. (?F_a' has_integral integral (cubeImage twoCube) ?F_a') (cubeImage twoCube)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>twoCube\\<in>two_chain_typeII.\n       (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j)\n         i has_integral\n        integral (cubeImage twoCube)\n         (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i))\n        (cubeImage twoCube)", "by (simp add: analytically_valid_imp_part_deriv_integrable_on T2.F_anal_valid has_integral_iff)"], ["proof (state)\nthis:\n  \\<forall>twoCube\\<in>two_chain_typeII.\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i has_integral\n      integral (cubeImage twoCube)\n       (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i))\n      (cubeImage twoCube)\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    integral s (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) +\n    integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x)", "then"], ["proof (chain)\npicking this:\n  \\<forall>twoCube\\<in>two_chain_typeII.\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i has_integral\n      integral (cubeImage twoCube)\n       (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i))\n      (cubeImage twoCube)", "have \"\\<And>u. u \\<in> (cubeImage ` two_chain_typeII) \\<Longrightarrow> (?F_a' has_integral integral u ?F_a') u\""], ["proof (prove)\nusing this:\n  \\<forall>twoCube\\<in>two_chain_typeII.\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i has_integral\n      integral (cubeImage twoCube)\n       (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i))\n      (cubeImage twoCube)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> cubeImage ` two_chain_typeII \\<Longrightarrow>\n       (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j)\n         i has_integral\n        integral u\n         (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i))\n        u", "by auto"], ["proof (state)\nthis:\n  ?u \\<in> cubeImage ` two_chain_typeII \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i has_integral\n   integral ?u (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i))\n   ?u\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    integral s (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) +\n    integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x)", "then"], ["proof (chain)\npicking this:\n  ?u \\<in> cubeImage ` two_chain_typeII \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i has_integral\n   integral ?u (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i))\n   ?u", "have \"(?F_a' has_integral (\\<Sum>img\\<in>cubeImage ` two_chain_typeII. integral img ?F_a')) s\""], ["proof (prove)\nusing this:\n  ?u \\<in> cubeImage ` two_chain_typeII \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i has_integral\n   integral ?u (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i))\n   ?u\n\ngoal (1 subgoal):\n 1. (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i has_integral\n     (\\<Sum>img\\<in>cubeImage ` two_chain_typeII.\n        integral img\n         (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)))\n     s", "using gen_divisions(2)"], ["proof (prove)\nusing this:\n  ?u \\<in> cubeImage ` two_chain_typeII \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i has_integral\n   integral ?u (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i))\n   ?u\n  gen_division s (cubeImage ` two_chain_typeII)\n\ngoal (1 subgoal):\n 1. (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i has_integral\n     (\\<Sum>img\\<in>cubeImage ` two_chain_typeII.\n        integral img\n         (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)))\n     s", "unfolding gen_division_def"], ["proof (prove)\nusing this:\n  ?u \\<in> cubeImage ` two_chain_typeII \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i has_integral\n   integral ?u (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i))\n   ?u\n  finite (cubeImage ` two_chain_typeII) \\<and>\n  \\<Union> (cubeImage ` two_chain_typeII) = s \\<and>\n  pairwise (\\<lambda>X Y. negligible (X \\<inter> Y))\n   (cubeImage ` two_chain_typeII)\n\ngoal (1 subgoal):\n 1. (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i has_integral\n     (\\<Sum>img\\<in>cubeImage ` two_chain_typeII.\n        integral img\n         (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)))\n     s", "by (metis has_integral_Union)"], ["proof (state)\nthis:\n  (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i has_integral\n   (\\<Sum>img\\<in>cubeImage ` two_chain_typeII.\n      integral img\n       (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)))\n   s\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    integral s (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) +\n    integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x)", "then"], ["proof (chain)\npicking this:\n  (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i has_integral\n   (\\<Sum>img\\<in>cubeImage ` two_chain_typeII.\n      integral img\n       (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)))\n   s", "have F_a'_integrable: \"(?F_a' integrable_on s)\""], ["proof (prove)\nusing this:\n  (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i has_integral\n   (\\<Sum>img\\<in>cubeImage ` two_chain_typeII.\n      integral img\n       (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i)))\n   s\n\ngoal (1 subgoal):\n 1. partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i integrable_on\n    s", "by auto"], ["proof (state)\nthis:\n  partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i integrable_on s\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    integral s (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) +\n    integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x)", "have \"\\<forall>twoCube \\<in> two_chain_typeI. (?F_b' has_integral integral (cubeImage twoCube) ?F_b') (cubeImage twoCube)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>twoCube\\<in>two_chain_typeI.\n       (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i)\n         j has_integral\n        integral (cubeImage twoCube)\n         (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j))\n        (cubeImage twoCube)", "using analytically_valid_imp_part_deriv_integrable_on T1.F_anal_valid"], ["proof (prove)\nusing this:\n  analytically_valid ?s ?f ?i \\<Longrightarrow>\n  partial_vector_derivative ?f ?i integrable_on ?s\n  \\<forall>twoC\\<in>two_chain_typeI.\n     analytically_valid (cubeImage twoC) (\\<lambda>x. F x \\<bullet> i) j\n\ngoal (1 subgoal):\n 1. \\<forall>twoCube\\<in>two_chain_typeI.\n       (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i)\n         j has_integral\n        integral (cubeImage twoCube)\n         (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j))\n        (cubeImage twoCube)", "by blast"], ["proof (state)\nthis:\n  \\<forall>twoCube\\<in>two_chain_typeI.\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j has_integral\n      integral (cubeImage twoCube)\n       (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j))\n      (cubeImage twoCube)\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    integral s (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) +\n    integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x)", "then"], ["proof (chain)\npicking this:\n  \\<forall>twoCube\\<in>two_chain_typeI.\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j has_integral\n      integral (cubeImage twoCube)\n       (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j))\n      (cubeImage twoCube)", "have \"\\<And>u. u \\<in> (cubeImage ` two_chain_typeI) \\<Longrightarrow> (?F_b' has_integral integral u ?F_b') u\""], ["proof (prove)\nusing this:\n  \\<forall>twoCube\\<in>two_chain_typeI.\n     (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j has_integral\n      integral (cubeImage twoCube)\n       (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j))\n      (cubeImage twoCube)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> cubeImage ` two_chain_typeI \\<Longrightarrow>\n       (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i)\n         j has_integral\n        integral u\n         (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j))\n        u", "by auto"], ["proof (state)\nthis:\n  ?u \\<in> cubeImage ` two_chain_typeI \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j has_integral\n   integral ?u (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j))\n   ?u\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    integral s (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) +\n    integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x)", "then"], ["proof (chain)\npicking this:\n  ?u \\<in> cubeImage ` two_chain_typeI \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j has_integral\n   integral ?u (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j))\n   ?u", "have \"(?F_b' has_integral (\\<Sum>img\\<in>cubeImage ` two_chain_typeI. integral img ?F_b')) s\""], ["proof (prove)\nusing this:\n  ?u \\<in> cubeImage ` two_chain_typeI \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j has_integral\n   integral ?u (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j))\n   ?u\n\ngoal (1 subgoal):\n 1. (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j has_integral\n     (\\<Sum>img\\<in>cubeImage ` two_chain_typeI.\n        integral img\n         (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j)))\n     s", "using gen_divisions(1)"], ["proof (prove)\nusing this:\n  ?u \\<in> cubeImage ` two_chain_typeI \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j has_integral\n   integral ?u (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j))\n   ?u\n  gen_division s (cubeImage ` two_chain_typeI)\n\ngoal (1 subgoal):\n 1. (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j has_integral\n     (\\<Sum>img\\<in>cubeImage ` two_chain_typeI.\n        integral img\n         (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j)))\n     s", "unfolding gen_division_def"], ["proof (prove)\nusing this:\n  ?u \\<in> cubeImage ` two_chain_typeI \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j has_integral\n   integral ?u (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j))\n   ?u\n  finite (cubeImage ` two_chain_typeI) \\<and>\n  \\<Union> (cubeImage ` two_chain_typeI) = s \\<and>\n  pairwise (\\<lambda>X Y. negligible (X \\<inter> Y))\n   (cubeImage ` two_chain_typeI)\n\ngoal (1 subgoal):\n 1. (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j has_integral\n     (\\<Sum>img\\<in>cubeImage ` two_chain_typeI.\n        integral img\n         (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j)))\n     s", "by (metis has_integral_Union)"], ["proof (state)\nthis:\n  (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j has_integral\n   (\\<Sum>img\\<in>cubeImage ` two_chain_typeI.\n      integral img\n       (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j)))\n   s\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    integral s (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) +\n    integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x)", "then"], ["proof (chain)\npicking this:\n  (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j has_integral\n   (\\<Sum>img\\<in>cubeImage ` two_chain_typeI.\n      integral img\n       (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j)))\n   s", "show ?thesis"], ["proof (prove)\nusing this:\n  (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j has_integral\n   (\\<Sum>img\\<in>cubeImage ` two_chain_typeI.\n      integral img\n       (partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j)))\n   s\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    integral s (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) +\n    integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x)", "by (simp add: F_a'_integrable Henstock_Kurzweil_Integration.integral_diff has_integral_iff)"], ["proof (state)\nthis:\n  integral s\n   (\\<lambda>x.\n       partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x -\n       partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n  integral s (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) +\n  integral s\n   (\\<lambda>x.\n       - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  integral s\n   (\\<lambda>x.\n       partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x -\n       partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n  integral s (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) +\n  integral s\n   (\\<lambda>x.\n       - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x)\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} \\<gamma>", "have line_integral_dist: \"one_chain_line_integral F {i, j} \\<gamma> = one_chain_line_integral F {i} \\<gamma> + one_chain_line_integral F {j} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. one_chain_line_integral F {i, j} \\<gamma> =\n    one_chain_line_integral F {i} \\<gamma> +\n    one_chain_line_integral F {j} \\<gamma>", "proof (simp add: one_chain_line_integral_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>\\<gamma>.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>x\\<in>\\<gamma>.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n    (\\<Sum>x\\<in>\\<gamma>.\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)", "have \"k * line_integral F {i, j} g = k * line_integral F {i} g +  k * line_integral F {j} g\"\n      if kg: \"(k,g) \\<in> \\<gamma>\" for k g"], ["proof (prove)\ngoal (1 subgoal):\n 1. real_of_int k * line_integral F {i, j} g =\n    real_of_int k * line_integral F {i} g +\n    real_of_int k * line_integral F {j} g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. real_of_int k * line_integral F {i, j} g =\n    real_of_int k * line_integral F {i} g +\n    real_of_int k * line_integral F {j} g", "obtain twoCube_typeI where twoCube_typeI_props:\n        \"twoCube_typeI \\<in> two_chain_typeI\"\n        \"(k, g) \\<in> boundary twoCube_typeI\"\n        \"typeI_twoCube twoCube_typeI\"\n        \"continuous_on (cubeImage twoCube_typeI) (\\<lambda>x. F(x) \\<bullet> i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>twoCube_typeI.\n        \\<lbrakk>twoCube_typeI \\<in> two_chain_typeI;\n         (k, g) \\<in> boundary twoCube_typeI; typeI_twoCube twoCube_typeI;\n         continuous_on (cubeImage twoCube_typeI)\n          (\\<lambda>x. F x \\<bullet> i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using boundary_of_region_is_subset_of_partition_boundaries(1) two_chain_boundary_def T1.valid_typeI_div\n          T1.F_anal_valid kg"], ["proof (prove)\nusing this:\n  \\<gamma> \\<subseteq> two_chain_boundary two_chain_typeI\n  two_chain_boundary ?twoChain \\<equiv> \\<Union> (boundary ` ?twoChain)\n  valid_typeI_division s two_chain_typeI\n  \\<forall>twoC\\<in>two_chain_typeI.\n     analytically_valid (cubeImage twoC) (\\<lambda>x. F x \\<bullet> i) j\n  (k, g) \\<in> \\<gamma>\n\ngoal (1 subgoal):\n 1. (\\<And>twoCube_typeI.\n        \\<lbrakk>twoCube_typeI \\<in> two_chain_typeI;\n         (k, g) \\<in> boundary twoCube_typeI; typeI_twoCube twoCube_typeI;\n         continuous_on (cubeImage twoCube_typeI)\n          (\\<lambda>x. F x \\<bullet> i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: analytically_valid_def)"], ["proof (state)\nthis:\n  twoCube_typeI \\<in> two_chain_typeI\n  (k, g) \\<in> boundary twoCube_typeI\n  typeI_twoCube twoCube_typeI\n  continuous_on (cubeImage twoCube_typeI) (\\<lambda>x. F x \\<bullet> i)\n\ngoal (1 subgoal):\n 1. real_of_int k * line_integral F {i, j} g =\n    real_of_int k * line_integral F {i} g +\n    real_of_int k * line_integral F {j} g", "obtain twoCube_typeII where twoCube_typeII_props:\n        \"twoCube_typeII \\<in> two_chain_typeII\"\n        \"(k, g) \\<in> boundary twoCube_typeII\"\n        \"typeII_twoCube twoCube_typeII\"\n        \"continuous_on (cubeImage twoCube_typeII) (\\<lambda>x. F(x) \\<bullet> j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>twoCube_typeII.\n        \\<lbrakk>twoCube_typeII \\<in> two_chain_typeII;\n         (k, g) \\<in> boundary twoCube_typeII;\n         typeII_twoCube twoCube_typeII;\n         continuous_on (cubeImage twoCube_typeII)\n          (\\<lambda>x. F x \\<bullet> j)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using boundary_of_region_is_subset_of_partition_boundaries(2) two_chain_boundary_def T2.valid_typeII_div\n          kg T2.F_anal_valid"], ["proof (prove)\nusing this:\n  \\<gamma> \\<subseteq> two_chain_boundary two_chain_typeII\n  two_chain_boundary ?twoChain \\<equiv> \\<Union> (boundary ` ?twoChain)\n  valid_typeII_division s two_chain_typeII\n  (k, g) \\<in> \\<gamma>\n  \\<forall>twoC\\<in>two_chain_typeII.\n     analytically_valid (cubeImage twoC) (\\<lambda>x. F x \\<bullet> j) i\n\ngoal (1 subgoal):\n 1. (\\<And>twoCube_typeII.\n        \\<lbrakk>twoCube_typeII \\<in> two_chain_typeII;\n         (k, g) \\<in> boundary twoCube_typeII;\n         typeII_twoCube twoCube_typeII;\n         continuous_on (cubeImage twoCube_typeII)\n          (\\<lambda>x. F x \\<bullet> j)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: analytically_valid_def)"], ["proof (state)\nthis:\n  twoCube_typeII \\<in> two_chain_typeII\n  (k, g) \\<in> boundary twoCube_typeII\n  typeII_twoCube twoCube_typeII\n  continuous_on (cubeImage twoCube_typeII) (\\<lambda>x. F x \\<bullet> j)\n\ngoal (1 subgoal):\n 1. real_of_int k * line_integral F {i, j} g =\n    real_of_int k * line_integral F {i} g +\n    real_of_int k * line_integral F {j} g", "have \"line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g", "have int_exists_i: \"line_integral_exists F {i} g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral_exists F {i} g", "using T1.typeI_cube_line_integral_exists_boundary assms kg"], ["proof (prove)\nusing this:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain_typeI.\n     line_integral_exists F {i} \\<gamma>\n  gen_division s (cubeImage ` two_chain_typeI)\n  gen_division s (cubeImage ` two_chain_typeII)\n  two_chain_horizontal_boundary two_chain_typeI \\<subseteq> \\<gamma>\n  two_chain_vertical_boundary two_chain_typeII \\<subseteq> \\<gamma>\n  \\<gamma> \\<subseteq> two_chain_boundary two_chain_typeI\n  \\<gamma> \\<subseteq> two_chain_boundary two_chain_typeII\n  (k, g) \\<in> \\<gamma>\n\ngoal (1 subgoal):\n 1. line_integral_exists F {i} g", "by (auto simp add: valid_two_chain_def)"], ["proof (state)\nthis:\n  line_integral_exists F {i} g\n\ngoal (1 subgoal):\n 1. line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g", "have int_exists_j: \"line_integral_exists F {j} g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral_exists F {j} g", "using T2.typeII_cube_line_integral_exists_boundary assms kg"], ["proof (prove)\nusing this:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain_typeII.\n     line_integral_exists F {j} \\<gamma>\n  gen_division s (cubeImage ` two_chain_typeI)\n  gen_division s (cubeImage ` two_chain_typeII)\n  two_chain_horizontal_boundary two_chain_typeI \\<subseteq> \\<gamma>\n  two_chain_vertical_boundary two_chain_typeII \\<subseteq> \\<gamma>\n  \\<gamma> \\<subseteq> two_chain_boundary two_chain_typeI\n  \\<gamma> \\<subseteq> two_chain_boundary two_chain_typeII\n  (k, g) \\<in> \\<gamma>\n\ngoal (1 subgoal):\n 1. line_integral_exists F {j} g", "by (auto simp add: valid_two_chain_def)"], ["proof (state)\nthis:\n  line_integral_exists F {j} g\n\ngoal (1 subgoal):\n 1. line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g", "have finite: \"finite {i, j}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {i, j}", "by auto"], ["proof (state)\nthis:\n  finite {i, j}\n\ngoal (1 subgoal):\n 1. line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g", "using line_integral_sum_gen[OF finite int_exists_i int_exists_j] R2.i_is_x_axis R2.j_is_y_axis"], ["proof (prove)\nusing this:\n  \\<lbrakk>{i} \\<union> {j} = {i, j}; {i} \\<inter> {j} = {}\\<rbrakk>\n  \\<Longrightarrow> line_integral F {i, j} g =\n                    line_integral F {i} g + line_integral F {j} g\n  \\<lbrakk>{i} \\<union> {j} = {i, j}; {i} \\<inter> {j} = {}\\<rbrakk>\n  \\<Longrightarrow> line_integral_exists F {i, j} g\n  i = (1, 0)\n  j = (0, 1)\n\ngoal (1 subgoal):\n 1. line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g", "by auto"], ["proof (state)\nthis:\n  line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g\n\ngoal (1 subgoal):\n 1. real_of_int k * line_integral F {i, j} g =\n    real_of_int k * line_integral F {i} g +\n    real_of_int k * line_integral F {j} g", "then"], ["proof (chain)\npicking this:\n  line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g", "show \"k * line_integral F {i, j} g = k * line_integral F {i} g + k * line_integral F {j} g\""], ["proof (prove)\nusing this:\n  line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g\n\ngoal (1 subgoal):\n 1. real_of_int k * line_integral F {i, j} g =\n    real_of_int k * line_integral F {i} g +\n    real_of_int k * line_integral F {j} g", "by (simp add: distrib_left)"], ["proof (state)\nthis:\n  real_of_int k * line_integral F {i, j} g =\n  real_of_int k * line_integral F {i} g +\n  real_of_int k * line_integral F {j} g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (?k, ?g) \\<in> \\<gamma> \\<Longrightarrow>\n  real_of_int ?k * line_integral F {i, j} ?g =\n  real_of_int ?k * line_integral F {i} ?g +\n  real_of_int ?k * line_integral F {j} ?g\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>\\<gamma>.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>x\\<in>\\<gamma>.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n    (\\<Sum>x\\<in>\\<gamma>.\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)", "then"], ["proof (chain)\npicking this:\n  (?k, ?g) \\<in> \\<gamma> \\<Longrightarrow>\n  real_of_int ?k * line_integral F {i, j} ?g =\n  real_of_int ?k * line_integral F {i} ?g +\n  real_of_int ?k * line_integral F {j} ?g", "have line_integral_distrib: \n          \"(\\<Sum>(k,g)\\<in>\\<gamma>. k * line_integral F {i, j} g) =\n           (\\<Sum>(k,g)\\<in>\\<gamma>. k * line_integral F {i} g +  k * line_integral F {j} g)\""], ["proof (prove)\nusing this:\n  (?k, ?g) \\<in> \\<gamma> \\<Longrightarrow>\n  real_of_int ?k * line_integral F {i, j} ?g =\n  real_of_int ?k * line_integral F {i} ?g +\n  real_of_int ?k * line_integral F {j} ?g\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>\\<gamma>. real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>\\<gamma>.\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g)", "by (force intro: sum.cong split_cong)"], ["proof (state)\nthis:\n  (\\<Sum>(k, g)\\<in>\\<gamma>. real_of_int k * line_integral F {i, j} g) =\n  (\\<Sum>(k, g)\\<in>\\<gamma>.\n     real_of_int k * line_integral F {i} g +\n     real_of_int k * line_integral F {j} g)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>\\<gamma>.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>x\\<in>\\<gamma>.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n    (\\<Sum>x\\<in>\\<gamma>.\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)", "have \"(\\<lambda>x. (case x of (k, g) \\<Rightarrow> (k::int) * line_integral F {i} g) + (case x of (k, g) \\<Rightarrow> (k::int) * line_integral F {j} g)) =\n                                     (\\<lambda>x. (case x of (k, g) \\<Rightarrow> (k * line_integral F {i} g) +  (k::int) * line_integral F {j} g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (case x of\n         (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n        (case x of\n         (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n    (\\<lambda>x.\n        case x of\n        (k, g) \\<Rightarrow>\n          real_of_int k * line_integral F {i} g +\n          real_of_int k * line_integral F {j} g)", "using comm_monoid_add_class.sum.distrib"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>?A. ?g x + ?h x) = sum ?g ?A + sum ?h ?A\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (case x of\n         (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n        (case x of\n         (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n    (\\<lambda>x.\n        case x of\n        (k, g) \\<Rightarrow>\n          real_of_int k * line_integral F {i} g +\n          real_of_int k * line_integral F {j} g)", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      (case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n      (case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n  (\\<lambda>x.\n      case x of\n      (k, g) \\<Rightarrow>\n        real_of_int k * line_integral F {i} g +\n        real_of_int k * line_integral F {j} g)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>\\<gamma>.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>x\\<in>\\<gamma>.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n    (\\<Sum>x\\<in>\\<gamma>.\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x.\n      (case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n      (case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n  (\\<lambda>x.\n      case x of\n      (k, g) \\<Rightarrow>\n        real_of_int k * line_integral F {i} g +\n        real_of_int k * line_integral F {j} g)", "show \"(\\<Sum>(k, g)\\<in>\\<gamma>. k * line_integral F {i, j} g) =\n          (\\<Sum>(k, g)\\<in>\\<gamma>. (k::int) * line_integral F {i} g) + (\\<Sum>(k, g)\\<in>\\<gamma>. (k::int) * line_integral F {j} g)\""], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n      (case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n  (\\<lambda>x.\n      case x of\n      (k, g) \\<Rightarrow>\n        real_of_int k * line_integral F {i} g +\n        real_of_int k * line_integral F {j} g)\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>\\<gamma>. real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>\\<gamma>. real_of_int k * line_integral F {i} g) +\n    (\\<Sum>(k, g)\\<in>\\<gamma>. real_of_int k * line_integral F {j} g)", "using comm_monoid_add_class.sum.distrib[of \"(\\<lambda>(k, g).  k * line_integral F {i} g)\" \"(\\<lambda>(k, g).  k * line_integral F {j} g)\" \\<gamma>]\n        line_integral_distrib"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n      (case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n  (\\<lambda>x.\n      case x of\n      (k, g) \\<Rightarrow>\n        real_of_int k * line_integral F {i} g +\n        real_of_int k * line_integral F {j} g)\n  (\\<Sum>x\\<in>\\<gamma>.\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n  (\\<Sum>(k, g)\\<in>\\<gamma>. real_of_int k * line_integral F {i} g) +\n  (\\<Sum>(k, g)\\<in>\\<gamma>. real_of_int k * line_integral F {j} g)\n  (\\<Sum>(k, g)\\<in>\\<gamma>. real_of_int k * line_integral F {i, j} g) =\n  (\\<Sum>(k, g)\\<in>\\<gamma>.\n     real_of_int k * line_integral F {i} g +\n     real_of_int k * line_integral F {j} g)\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>\\<gamma>. real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>\\<gamma>. real_of_int k * line_integral F {i} g) +\n    (\\<Sum>(k, g)\\<in>\\<gamma>. real_of_int k * line_integral F {j} g)", "by presburger"], ["proof (state)\nthis:\n  (\\<Sum>(k, g)\\<in>\\<gamma>. real_of_int k * line_integral F {i, j} g) =\n  (\\<Sum>(k, g)\\<in>\\<gamma>. real_of_int k * line_integral F {i} g) +\n  (\\<Sum>(k, g)\\<in>\\<gamma>. real_of_int k * line_integral F {j} g)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  one_chain_line_integral F {i, j} \\<gamma> =\n  one_chain_line_integral F {i} \\<gamma> +\n  one_chain_line_integral F {j} \\<gamma>\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} \\<gamma>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} \\<gamma>", "using integral_dis line_integral_dist typeI_regions_integral typeII_regions_integral"], ["proof (prove)\nusing this:\n  integral s\n   (\\<lambda>x.\n       partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x -\n       partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n  integral s (partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i) +\n  integral s\n   (\\<lambda>x.\n       - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x)\n  one_chain_line_integral F {i, j} \\<gamma> =\n  one_chain_line_integral F {i} \\<gamma> +\n  one_chain_line_integral F {j} \\<gamma>\n  integral s\n   (\\<lambda>x.\n       - partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n  one_chain_line_integral F {i} \\<gamma>\n  integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n  one_chain_line_integral F {j} \\<gamma>\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} \\<gamma>", "by auto"], ["proof (state)\nthis:\n  integral s\n   (\\<lambda>x.\n       partial_vector_derivative (\\<lambda>a. F a \\<bullet> j) i x -\n       partial_vector_derivative (\\<lambda>a. F a \\<bullet> i) j x) =\n  one_chain_line_integral F {i, j} \\<gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma GreenThm_typeI_typeII_divisible_region':\n  assumes \n    only_vertical_division:\n    \"only_vertical_division one_chain_typeI two_chain_typeI\"\n    \"boundary_chain one_chain_typeI\" and\n    only_horizontal_division:\n    \"only_horizontal_division one_chain_typeII two_chain_typeII\"\n    \"boundary_chain one_chain_typeII\" and\n    typeI_and_typII_one_chains_have_gen_common_subdiv:\n    \"common_sudiv_exists one_chain_typeI one_chain_typeII\"\n  shows \"integral s (\\<lambda>x. partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> j) i x - partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> i) j x) = one_chain_line_integral F {i, j} one_chain_typeI\"\n    \"integral s (\\<lambda>x. partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> j) i x - partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> i) j x) = one_chain_line_integral F {i, j} one_chain_typeII\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeI &&&\n    integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeII", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeI\n 2. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeII", "let ?F_b' = \"partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> i) j\""], ["proof (state)\ngoal (2 subgoals):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeI\n 2. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeII", "let ?F_a' = \"partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> j) i\""], ["proof (state)\ngoal (2 subgoals):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeI\n 2. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeII", "have one_chain_i_integrals:\n    \"one_chain_line_integral F {i} one_chain_typeI = one_chain_line_integral F {i} one_chain_typeII \\<and>\n              (\\<forall>(k,\\<gamma>)\\<in>one_chain_typeI. line_integral_exists F {i} \\<gamma>) \\<and>\n              (\\<forall>(k,\\<gamma>)\\<in>one_chain_typeII. line_integral_exists F {i} \\<gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. one_chain_line_integral F {i} one_chain_typeI =\n    one_chain_line_integral F {i} one_chain_typeII \\<and>\n    (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n        line_integral_exists F {i} \\<gamma>) \\<and>\n    (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n        line_integral_exists F {i} \\<gamma>)", "proof (intro conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. one_chain_line_integral F {i} one_chain_typeI =\n    one_chain_line_integral F {i} one_chain_typeII\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n       line_integral_exists F {i} \\<gamma>\n 3. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n       line_integral_exists F {i} \\<gamma>", "have \"finite two_chain_typeI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite two_chain_typeI", "using T1.valid_typeI_div finite_image_iff"], ["proof (prove)\nusing this:\n  valid_typeI_division s two_chain_typeI\n  inj_on ?f ?A \\<Longrightarrow> finite (?f ` ?A) = finite ?A\n\ngoal (1 subgoal):\n 1. finite two_chain_typeI", "by (auto simp add: gen_division_def valid_two_chain_def)"], ["proof (state)\nthis:\n  finite two_chain_typeI\n\ngoal (3 subgoals):\n 1. one_chain_line_integral F {i} one_chain_typeI =\n    one_chain_line_integral F {i} one_chain_typeII\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n       line_integral_exists F {i} \\<gamma>\n 3. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n       line_integral_exists F {i} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  finite two_chain_typeI", "show ii: \"\\<forall>(k, \\<gamma>)\\<in>one_chain_typeI. line_integral_exists F {i} \\<gamma>\""], ["proof (prove)\nusing this:\n  finite two_chain_typeI\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n       line_integral_exists F {i} \\<gamma>", "using T1.members_of_only_vertical_div_line_integrable' assms"], ["proof (prove)\nusing this:\n  finite two_chain_typeI\n  \\<lbrakk>only_vertical_division ?one_chain two_chain_typeI;\n   (?k, ?\\<gamma>) \\<in> ?one_chain; (?k, ?\\<gamma>) \\<in> ?one_chain;\n   finite two_chain_typeI\\<rbrakk>\n  \\<Longrightarrow> line_integral_exists F {i} ?\\<gamma>\n  only_vertical_division one_chain_typeI two_chain_typeI\n  boundary_chain one_chain_typeI\n  only_horizontal_division one_chain_typeII two_chain_typeII\n  boundary_chain one_chain_typeII\n  common_sudiv_exists one_chain_typeI one_chain_typeII\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n       line_integral_exists F {i} \\<gamma>", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n     line_integral_exists F {i} \\<gamma>\n\ngoal (2 subgoals):\n 1. one_chain_line_integral F {i} one_chain_typeI =\n    one_chain_line_integral F {i} one_chain_typeII\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n       line_integral_exists F {i} \\<gamma>", "have \"finite (two_chain_horizontal_boundary two_chain_typeI)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (two_chain_horizontal_boundary two_chain_typeI)", "by (meson T1.valid_typeI_div finite_imageD finite_two_chain_horizontal_boundary gen_division_def valid_two_chain_def)"], ["proof (state)\nthis:\n  finite (two_chain_horizontal_boundary two_chain_typeI)\n\ngoal (2 subgoals):\n 1. one_chain_line_integral F {i} one_chain_typeI =\n    one_chain_line_integral F {i} one_chain_typeII\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n       line_integral_exists F {i} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  finite (two_chain_horizontal_boundary two_chain_typeI)", "have \"finite one_chain_typeI\""], ["proof (prove)\nusing this:\n  finite (two_chain_horizontal_boundary two_chain_typeI)\n\ngoal (1 subgoal):\n 1. finite one_chain_typeI", "using only_vertical_division(1) only_vertical_division_def"], ["proof (prove)\nusing this:\n  finite (two_chain_horizontal_boundary two_chain_typeI)\n  only_vertical_division one_chain_typeI two_chain_typeI\n  only_vertical_division ?one_chain ?two_chain \\<equiv>\n  \\<exists>\\<V> \\<H>.\n     finite \\<H> \\<and>\n     finite \\<V> \\<and>\n     (\\<forall>(k, \\<gamma>)\\<in>\\<V>.\n         \\<exists>(k', \\<gamma>')\n                  \\<in>two_chain_vertical_boundary ?two_chain.\n            \\<exists>a\\<in>{0..1}.\n               \\<exists>b\\<in>{0..1}.\n                  a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>) \\<and>\n     (common_sudiv_exists (two_chain_horizontal_boundary ?two_chain)\n       \\<H> \\<or>\n      common_reparam_exists \\<H>\n       (two_chain_horizontal_boundary ?two_chain)) \\<and>\n     boundary_chain \\<H> \\<and>\n     ?one_chain = \\<V> \\<union> \\<H> \\<and>\n     (\\<forall>(k, \\<gamma>)\\<in>\\<H>. valid_path \\<gamma>)\n\ngoal (1 subgoal):\n 1. finite one_chain_typeI", "by auto"], ["proof (state)\nthis:\n  finite one_chain_typeI\n\ngoal (2 subgoals):\n 1. one_chain_line_integral F {i} one_chain_typeI =\n    one_chain_line_integral F {i} one_chain_typeII\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n       line_integral_exists F {i} \\<gamma>", "moreover"], ["proof (state)\nthis:\n  finite one_chain_typeI\n\ngoal (2 subgoals):\n 1. one_chain_line_integral F {i} one_chain_typeI =\n    one_chain_line_integral F {i} one_chain_typeII\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n       line_integral_exists F {i} \\<gamma>", "have \"finite one_chain_typeII\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite one_chain_typeII", "using only_horizontal_division(1) only_horizontal_division_def"], ["proof (prove)\nusing this:\n  only_horizontal_division one_chain_typeII two_chain_typeII\n  only_horizontal_division ?one_chain ?two_chain \\<equiv>\n  \\<exists>\\<H> \\<V>.\n     finite \\<H> \\<and>\n     finite \\<V> \\<and>\n     (\\<forall>(k, \\<gamma>)\\<in>\\<H>.\n         \\<exists>(k', \\<gamma>')\n                  \\<in>two_chain_horizontal_boundary ?two_chain.\n            \\<exists>a\\<in>{0..1}.\n               \\<exists>b\\<in>{0..1}.\n                  a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>) \\<and>\n     (common_sudiv_exists (two_chain_vertical_boundary ?two_chain)\n       \\<V> \\<or>\n      common_reparam_exists \\<V>\n       (two_chain_vertical_boundary ?two_chain)) \\<and>\n     boundary_chain \\<V> \\<and>\n     ?one_chain = \\<H> \\<union> \\<V> \\<and>\n     (\\<forall>(k, \\<gamma>)\\<in>\\<V>. valid_path \\<gamma>)\n\ngoal (1 subgoal):\n 1. finite one_chain_typeII", "by auto"], ["proof (state)\nthis:\n  finite one_chain_typeII\n\ngoal (2 subgoals):\n 1. one_chain_line_integral F {i} one_chain_typeI =\n    one_chain_line_integral F {i} one_chain_typeII\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n       line_integral_exists F {i} \\<gamma>", "ultimately"], ["proof (chain)\npicking this:\n  finite one_chain_typeI\n  finite one_chain_typeII", "show \"one_chain_line_integral F {i} one_chain_typeI = one_chain_line_integral F {i} one_chain_typeII\"\n               and \"\\<forall>(k, \\<gamma>)\\<in>one_chain_typeII. line_integral_exists F {i} \\<gamma>\""], ["proof (prove)\nusing this:\n  finite one_chain_typeI\n  finite one_chain_typeII\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {i} one_chain_typeI =\n    one_chain_line_integral F {i} one_chain_typeII &&&\n    \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n       line_integral_exists F {i} \\<gamma>", "using gen_common_subdivision_imp_eq_line_integral[OF typeI_and_typII_one_chains_have_gen_common_subdiv\n          only_vertical_division(2) only_horizontal_division(2)] ii"], ["proof (prove)\nusing this:\n  finite one_chain_typeI\n  finite one_chain_typeII\n  \\<lbrakk>\\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n              line_integral_exists ?F ?basis \\<gamma>;\n   finite one_chain_typeI; finite one_chain_typeII; finite ?basis\\<rbrakk>\n  \\<Longrightarrow> one_chain_line_integral ?F ?basis one_chain_typeI =\n                    one_chain_line_integral ?F ?basis one_chain_typeII\n  \\<lbrakk>\\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n              line_integral_exists ?F ?basis \\<gamma>;\n   finite one_chain_typeI; finite one_chain_typeII; finite ?basis\\<rbrakk>\n  \\<Longrightarrow> \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n                       line_integral_exists ?F ?basis \\<gamma>\n  \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n     line_integral_exists F {i} \\<gamma>\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {i} one_chain_typeI =\n    one_chain_line_integral F {i} one_chain_typeII &&&\n    \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n       line_integral_exists F {i} \\<gamma>", "by auto"], ["proof (state)\nthis:\n  one_chain_line_integral F {i} one_chain_typeI =\n  one_chain_line_integral F {i} one_chain_typeII\n  \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n     line_integral_exists F {i} \\<gamma>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  one_chain_line_integral F {i} one_chain_typeI =\n  one_chain_line_integral F {i} one_chain_typeII \\<and>\n  (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n      line_integral_exists F {i} \\<gamma>) \\<and>\n  (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n      line_integral_exists F {i} \\<gamma>)\n\ngoal (2 subgoals):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeI\n 2. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeII", "have one_chain_j_integrals:\n    \"one_chain_line_integral F {j} one_chain_typeII = one_chain_line_integral F {j} one_chain_typeI \\<and>\n              (\\<forall>(k,\\<gamma>)\\<in>one_chain_typeII. line_integral_exists F {j} \\<gamma>) \\<and>\n              (\\<forall>(k,\\<gamma>)\\<in>one_chain_typeI. line_integral_exists F {j} \\<gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j} one_chain_typeII =\n    one_chain_line_integral F {j} one_chain_typeI \\<and>\n    (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n        line_integral_exists F {j} \\<gamma>) \\<and>\n    (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n        line_integral_exists F {j} \\<gamma>)", "proof (intro conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. one_chain_line_integral F {j} one_chain_typeII =\n    one_chain_line_integral F {j} one_chain_typeI\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n       line_integral_exists F {j} \\<gamma>\n 3. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n       line_integral_exists F {j} \\<gamma>", "have \"finite two_chain_typeII\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite two_chain_typeII", "using T2.valid_typeII_div finite_image_iff"], ["proof (prove)\nusing this:\n  valid_typeII_division s two_chain_typeII\n  inj_on ?f ?A \\<Longrightarrow> finite (?f ` ?A) = finite ?A\n\ngoal (1 subgoal):\n 1. finite two_chain_typeII", "by (auto simp add: gen_division_def valid_two_chain_def)"], ["proof (state)\nthis:\n  finite two_chain_typeII\n\ngoal (3 subgoals):\n 1. one_chain_line_integral F {j} one_chain_typeII =\n    one_chain_line_integral F {j} one_chain_typeI\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n       line_integral_exists F {j} \\<gamma>\n 3. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n       line_integral_exists F {j} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  finite two_chain_typeII", "show ii: \"\\<forall>(k,\\<gamma>)\\<in>one_chain_typeII. line_integral_exists F {j} \\<gamma>\""], ["proof (prove)\nusing this:\n  finite two_chain_typeII\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n       line_integral_exists F {j} \\<gamma>", "using T2.members_of_only_horiz_div_line_integrable' assms T2.two_chain_valid_valid_cubes"], ["proof (prove)\nusing this:\n  finite two_chain_typeII\n  \\<lbrakk>only_horizontal_division ?one_chain two_chain_typeII;\n   (?k, ?\\<gamma>) \\<in> ?one_chain; (?k, ?\\<gamma>) \\<in> ?one_chain;\n   finite two_chain_typeII;\n   \\<forall>two_cube\\<in>two_chain_typeII. valid_two_cube two_cube\\<rbrakk>\n  \\<Longrightarrow> line_integral_exists F {j} ?\\<gamma>\n  only_vertical_division one_chain_typeI two_chain_typeI\n  boundary_chain one_chain_typeI\n  only_horizontal_division one_chain_typeII two_chain_typeII\n  boundary_chain one_chain_typeII\n  common_sudiv_exists one_chain_typeI one_chain_typeII\n  \\<forall>two_cube\\<in>two_chain_typeII. valid_two_cube two_cube\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n       line_integral_exists F {j} \\<gamma>", "by blast"], ["proof (state)\nthis:\n  \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n     line_integral_exists F {j} \\<gamma>\n\ngoal (2 subgoals):\n 1. one_chain_line_integral F {j} one_chain_typeII =\n    one_chain_line_integral F {j} one_chain_typeI\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n       line_integral_exists F {j} \\<gamma>", "have typeII_and_typI_one_chains_have_common_subdiv: \"common_sudiv_exists one_chain_typeII one_chain_typeI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. common_sudiv_exists one_chain_typeII one_chain_typeI", "by (simp add: common_sudiv_exists_comm typeI_and_typII_one_chains_have_gen_common_subdiv)"], ["proof (state)\nthis:\n  common_sudiv_exists one_chain_typeII one_chain_typeI\n\ngoal (2 subgoals):\n 1. one_chain_line_integral F {j} one_chain_typeII =\n    one_chain_line_integral F {j} one_chain_typeI\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n       line_integral_exists F {j} \\<gamma>", "have iv: \"finite one_chain_typeI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite one_chain_typeI", "using only_vertical_division(1) only_vertical_division_def"], ["proof (prove)\nusing this:\n  only_vertical_division one_chain_typeI two_chain_typeI\n  only_vertical_division ?one_chain ?two_chain \\<equiv>\n  \\<exists>\\<V> \\<H>.\n     finite \\<H> \\<and>\n     finite \\<V> \\<and>\n     (\\<forall>(k, \\<gamma>)\\<in>\\<V>.\n         \\<exists>(k', \\<gamma>')\n                  \\<in>two_chain_vertical_boundary ?two_chain.\n            \\<exists>a\\<in>{0..1}.\n               \\<exists>b\\<in>{0..1}.\n                  a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>) \\<and>\n     (common_sudiv_exists (two_chain_horizontal_boundary ?two_chain)\n       \\<H> \\<or>\n      common_reparam_exists \\<H>\n       (two_chain_horizontal_boundary ?two_chain)) \\<and>\n     boundary_chain \\<H> \\<and>\n     ?one_chain = \\<V> \\<union> \\<H> \\<and>\n     (\\<forall>(k, \\<gamma>)\\<in>\\<H>. valid_path \\<gamma>)\n\ngoal (1 subgoal):\n 1. finite one_chain_typeI", "by auto"], ["proof (state)\nthis:\n  finite one_chain_typeI\n\ngoal (2 subgoals):\n 1. one_chain_line_integral F {j} one_chain_typeII =\n    one_chain_line_integral F {j} one_chain_typeI\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n       line_integral_exists F {j} \\<gamma>", "moreover"], ["proof (state)\nthis:\n  finite one_chain_typeI\n\ngoal (2 subgoals):\n 1. one_chain_line_integral F {j} one_chain_typeII =\n    one_chain_line_integral F {j} one_chain_typeI\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n       line_integral_exists F {j} \\<gamma>", "have iv': \"finite one_chain_typeII\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite one_chain_typeII", "using only_horizontal_division(1) only_horizontal_division_def"], ["proof (prove)\nusing this:\n  only_horizontal_division one_chain_typeII two_chain_typeII\n  only_horizontal_division ?one_chain ?two_chain \\<equiv>\n  \\<exists>\\<H> \\<V>.\n     finite \\<H> \\<and>\n     finite \\<V> \\<and>\n     (\\<forall>(k, \\<gamma>)\\<in>\\<H>.\n         \\<exists>(k', \\<gamma>')\n                  \\<in>two_chain_horizontal_boundary ?two_chain.\n            \\<exists>a\\<in>{0..1}.\n               \\<exists>b\\<in>{0..1}.\n                  a \\<le> b \\<and> subpath a b \\<gamma>' = \\<gamma>) \\<and>\n     (common_sudiv_exists (two_chain_vertical_boundary ?two_chain)\n       \\<V> \\<or>\n      common_reparam_exists \\<V>\n       (two_chain_vertical_boundary ?two_chain)) \\<and>\n     boundary_chain \\<V> \\<and>\n     ?one_chain = \\<H> \\<union> \\<V> \\<and>\n     (\\<forall>(k, \\<gamma>)\\<in>\\<V>. valid_path \\<gamma>)\n\ngoal (1 subgoal):\n 1. finite one_chain_typeII", "by auto"], ["proof (state)\nthis:\n  finite one_chain_typeII\n\ngoal (2 subgoals):\n 1. one_chain_line_integral F {j} one_chain_typeII =\n    one_chain_line_integral F {j} one_chain_typeI\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n       line_integral_exists F {j} \\<gamma>", "ultimately"], ["proof (chain)\npicking this:\n  finite one_chain_typeI\n  finite one_chain_typeII", "show \"one_chain_line_integral F {j} one_chain_typeII =\n                     one_chain_line_integral F {j} one_chain_typeI\"\n                    \"\\<forall>(k, \\<gamma>)\\<in>one_chain_typeI. line_integral_exists F {j} \\<gamma>\""], ["proof (prove)\nusing this:\n  finite one_chain_typeI\n  finite one_chain_typeII\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j} one_chain_typeII =\n    one_chain_line_integral F {j} one_chain_typeI &&&\n    \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n       line_integral_exists F {j} \\<gamma>", "using gen_common_subdivision_imp_eq_line_integral[OF typeII_and_typI_one_chains_have_common_subdiv\n          only_horizontal_division(2) only_vertical_division(2) ii] ii"], ["proof (prove)\nusing this:\n  finite one_chain_typeI\n  finite one_chain_typeII\n  \\<lbrakk>finite one_chain_typeII; finite one_chain_typeI;\n   finite {j}\\<rbrakk>\n  \\<Longrightarrow> one_chain_line_integral F {j} one_chain_typeII =\n                    one_chain_line_integral F {j} one_chain_typeI\n  \\<lbrakk>finite one_chain_typeII; finite one_chain_typeI;\n   finite {j}\\<rbrakk>\n  \\<Longrightarrow> \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n                       line_integral_exists F {j} \\<gamma>\n  \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n     line_integral_exists F {j} \\<gamma>\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j} one_chain_typeII =\n    one_chain_line_integral F {j} one_chain_typeI &&&\n    \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n       line_integral_exists F {j} \\<gamma>", "by auto"], ["proof (state)\nthis:\n  one_chain_line_integral F {j} one_chain_typeII =\n  one_chain_line_integral F {j} one_chain_typeI\n  \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n     line_integral_exists F {j} \\<gamma>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  one_chain_line_integral F {j} one_chain_typeII =\n  one_chain_line_integral F {j} one_chain_typeI \\<and>\n  (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n      line_integral_exists F {j} \\<gamma>) \\<and>\n  (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n      line_integral_exists F {j} \\<gamma>)\n\ngoal (2 subgoals):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeI\n 2. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeII", "have typeI_regions_integral:\n    \"integral s (\\<lambda>x. - ?F_b' x) = one_chain_line_integral F {i} one_chain_typeI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i} one_chain_typeI", "using T1.GreenThm_typeI_divisible_region_boundary_gen T1.valid_typeI_div\n          T1.F_anal_valid  only_vertical_division(1)"], ["proof (prove)\nusing this:\n  \\<lbrakk>valid_typeI_division s two_chain_typeI;\n   \\<forall>twoC\\<in>two_chain_typeI.\n      analytically_valid (cubeImage twoC) (\\<lambda>a. F a \\<bullet> i) j;\n   only_vertical_division ?\\<gamma> two_chain_typeI\\<rbrakk>\n  \\<Longrightarrow> integral s\n                     (\\<lambda>x.\n                         - partial_vector_derivative\n                            (\\<lambda>a. F a \\<bullet> i) j x) =\n                    one_chain_line_integral F {i} ?\\<gamma>\n  valid_typeI_division s two_chain_typeI\n  \\<forall>twoC\\<in>two_chain_typeI.\n     analytically_valid (cubeImage twoC) (\\<lambda>x. F x \\<bullet> i) j\n  only_vertical_division one_chain_typeI two_chain_typeI\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i} one_chain_typeI", "by auto"], ["proof (state)\nthis:\n  integral s\n   (\\<lambda>x.\n       - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n  one_chain_line_integral F {i} one_chain_typeI\n\ngoal (2 subgoals):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeI\n 2. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeII", "have typeII_regions_integral:\n    \"integral s ?F_a' = one_chain_line_integral F {j} one_chain_typeII\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} one_chain_typeII", "using T2.GreenThm_typeII_divisible_region_boundary_gen T2.valid_typeII_div\n        T2.F_anal_valid  only_horizontal_division(1)"], ["proof (prove)\nusing this:\n  only_horizontal_division ?\\<gamma> two_chain_typeII \\<Longrightarrow>\n  integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n  one_chain_line_integral F {j} ?\\<gamma>\n  valid_typeII_division s two_chain_typeII\n  \\<forall>twoC\\<in>two_chain_typeII.\n     analytically_valid (cubeImage twoC) (\\<lambda>x. F x \\<bullet> j) i\n  only_horizontal_division one_chain_typeII two_chain_typeII\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} one_chain_typeII", "by auto"], ["proof (state)\nthis:\n  integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n  one_chain_line_integral F {j} one_chain_typeII\n\ngoal (2 subgoals):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeI\n 2. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeII", "have line_integral_dist:\n    \"one_chain_line_integral F {i, j} one_chain_typeI = one_chain_line_integral F {i} one_chain_typeI + one_chain_line_integral F {j} one_chain_typeI \\<and>\n     one_chain_line_integral F {i, j} one_chain_typeII = one_chain_line_integral F {i} one_chain_typeII + one_chain_line_integral F {j} one_chain_typeII\""], ["proof (prove)\ngoal (1 subgoal):\n 1. one_chain_line_integral F {i, j} one_chain_typeI =\n    one_chain_line_integral F {i} one_chain_typeI +\n    one_chain_line_integral F {j} one_chain_typeI \\<and>\n    one_chain_line_integral F {i, j} one_chain_typeII =\n    one_chain_line_integral F {i} one_chain_typeII +\n    one_chain_line_integral F {j} one_chain_typeII", "proof (simp add: one_chain_line_integral_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>one_chain_typeI.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>x\\<in>one_chain_typeI.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n    (\\<Sum>x\\<in>one_chain_typeI.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) \\<and>\n    (\\<Sum>x\\<in>one_chain_typeII.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>x\\<in>one_chain_typeII.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n    (\\<Sum>x\\<in>one_chain_typeII.\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)", "have line_integral_distrib:\n      \"(\\<Sum>(k,g)\\<in>one_chain_typeI. k * line_integral F {i, j} g) =\n       (\\<Sum>(k,g)\\<in>one_chain_typeI. k * line_integral F {i} g +  k * line_integral F {j} g) \\<and>\n       (\\<Sum>(k,g)\\<in>one_chain_typeII. k * line_integral F {i, j} g) =\n       (\\<Sum>(k,g)\\<in>one_chain_typeII. k * line_integral F {i} g +  k * line_integral F {j} g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g) \\<and>\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g) \\<and>\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g)", "have 0: \"k * line_integral F {i, j} g = k * line_integral F {i} g +  k * line_integral F {j} g\"\n        if  \"(k,g) \\<in> one_chain_typeII\" for k g"], ["proof (prove)\ngoal (1 subgoal):\n 1. real_of_int k * line_integral F {i, j} g =\n    real_of_int k * line_integral F {i} g +\n    real_of_int k * line_integral F {j} g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. real_of_int k * line_integral F {i, j} g =\n    real_of_int k * line_integral F {i} g +\n    real_of_int k * line_integral F {j} g", "have \"line_integral_exists F {i} g\" \"line_integral_exists F {j} g\" \"finite {i, j}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral_exists F {i} g &&&\n    line_integral_exists F {j} g &&& finite {i, j}", "using one_chain_i_integrals one_chain_j_integrals that"], ["proof (prove)\nusing this:\n  one_chain_line_integral F {i} one_chain_typeI =\n  one_chain_line_integral F {i} one_chain_typeII \\<and>\n  (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n      line_integral_exists F {i} \\<gamma>) \\<and>\n  (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n      line_integral_exists F {i} \\<gamma>)\n  one_chain_line_integral F {j} one_chain_typeII =\n  one_chain_line_integral F {j} one_chain_typeI \\<and>\n  (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n      line_integral_exists F {j} \\<gamma>) \\<and>\n  (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n      line_integral_exists F {j} \\<gamma>)\n  (k, g) \\<in> one_chain_typeII\n\ngoal (1 subgoal):\n 1. line_integral_exists F {i} g &&&\n    line_integral_exists F {j} g &&& finite {i, j}", "by fastforce+"], ["proof (state)\nthis:\n  line_integral_exists F {i} g\n  line_integral_exists F {j} g\n  finite {i, j}\n\ngoal (1 subgoal):\n 1. real_of_int k * line_integral F {i, j} g =\n    real_of_int k * line_integral F {i} g +\n    real_of_int k * line_integral F {j} g", "moreover"], ["proof (state)\nthis:\n  line_integral_exists F {i} g\n  line_integral_exists F {j} g\n  finite {i, j}\n\ngoal (1 subgoal):\n 1. real_of_int k * line_integral F {i, j} g =\n    real_of_int k * line_integral F {i} g +\n    real_of_int k * line_integral F {j} g", "have \"{i} \\<inter> {j} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i} \\<inter> {j} = {}", "by (simp add: R2.i_is_x_axis R2.j_is_y_axis)"], ["proof (state)\nthis:\n  {i} \\<inter> {j} = {}\n\ngoal (1 subgoal):\n 1. real_of_int k * line_integral F {i, j} g =\n    real_of_int k * line_integral F {i} g +\n    real_of_int k * line_integral F {j} g", "ultimately"], ["proof (chain)\npicking this:\n  line_integral_exists F {i} g\n  line_integral_exists F {j} g\n  finite {i, j}\n  {i} \\<inter> {j} = {}", "have \"line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g\""], ["proof (prove)\nusing this:\n  line_integral_exists F {i} g\n  line_integral_exists F {j} g\n  finite {i, j}\n  {i} \\<inter> {j} = {}\n\ngoal (1 subgoal):\n 1. line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g", "by (metis insert_is_Un line_integral_sum_gen(1))"], ["proof (state)\nthis:\n  line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g\n\ngoal (1 subgoal):\n 1. real_of_int k * line_integral F {i, j} g =\n    real_of_int k * line_integral F {i} g +\n    real_of_int k * line_integral F {j} g", "then"], ["proof (chain)\npicking this:\n  line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g", "show \"k * line_integral F {i, j} g = k * line_integral F {i} g + k * line_integral F {j} g\""], ["proof (prove)\nusing this:\n  line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g\n\ngoal (1 subgoal):\n 1. real_of_int k * line_integral F {i, j} g =\n    real_of_int k * line_integral F {i} g +\n    real_of_int k * line_integral F {j} g", "by (simp add: distrib_left)"], ["proof (state)\nthis:\n  real_of_int k * line_integral F {i, j} g =\n  real_of_int k * line_integral F {i} g +\n  real_of_int k * line_integral F {j} g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (?k, ?g) \\<in> one_chain_typeII \\<Longrightarrow>\n  real_of_int ?k * line_integral F {i, j} ?g =\n  real_of_int ?k * line_integral F {i} ?g +\n  real_of_int ?k * line_integral F {j} ?g\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g) \\<and>\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g)", "have \"k * line_integral F {i, j} g = k * line_integral F {i} g +  k * line_integral F {j} g\"\n        if \"(k,g) \\<in> one_chain_typeI\" for k g"], ["proof (prove)\ngoal (1 subgoal):\n 1. real_of_int k * line_integral F {i, j} g =\n    real_of_int k * line_integral F {i} g +\n    real_of_int k * line_integral F {j} g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. real_of_int k * line_integral F {i, j} g =\n    real_of_int k * line_integral F {i} g +\n    real_of_int k * line_integral F {j} g", "have \"line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g", "by (smt that disjoint_insert(2) finite.emptyI finite.insertI R2.i_is_x_axis inf_bot_right insert_absorb insert_commute insert_is_Un R2.j_is_y_axis line_integral_sum_gen(1) one_chain_i_integrals one_chain_j_integrals prod.case_eq_if singleton_inject snd_conv)"], ["proof (state)\nthis:\n  line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g\n\ngoal (1 subgoal):\n 1. real_of_int k * line_integral F {i, j} g =\n    real_of_int k * line_integral F {i} g +\n    real_of_int k * line_integral F {j} g", "then"], ["proof (chain)\npicking this:\n  line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g", "show \"k * line_integral F {i, j} g = k * line_integral F {i} g + k * line_integral F {j} g\""], ["proof (prove)\nusing this:\n  line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g\n\ngoal (1 subgoal):\n 1. real_of_int k * line_integral F {i, j} g =\n    real_of_int k * line_integral F {i} g +\n    real_of_int k * line_integral F {j} g", "by (simp add: distrib_left)"], ["proof (state)\nthis:\n  real_of_int k * line_integral F {i, j} g =\n  real_of_int k * line_integral F {i} g +\n  real_of_int k * line_integral F {j} g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (?k, ?g) \\<in> one_chain_typeI \\<Longrightarrow>\n  real_of_int ?k * line_integral F {i, j} ?g =\n  real_of_int ?k * line_integral F {i} ?g +\n  real_of_int ?k * line_integral F {j} ?g\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g) \\<and>\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g)", "then"], ["proof (chain)\npicking this:\n  (?k, ?g) \\<in> one_chain_typeI \\<Longrightarrow>\n  real_of_int ?k * line_integral F {i, j} ?g =\n  real_of_int ?k * line_integral F {i} ?g +\n  real_of_int ?k * line_integral F {j} ?g", "show ?thesis"], ["proof (prove)\nusing this:\n  (?k, ?g) \\<in> one_chain_typeI \\<Longrightarrow>\n  real_of_int ?k * line_integral F {i, j} ?g =\n  real_of_int ?k * line_integral F {i} ?g +\n  real_of_int ?k * line_integral F {j} ?g\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g) \\<and>\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g)", "using 0"], ["proof (prove)\nusing this:\n  (?k, ?g) \\<in> one_chain_typeI \\<Longrightarrow>\n  real_of_int ?k * line_integral F {i, j} ?g =\n  real_of_int ?k * line_integral F {i} ?g +\n  real_of_int ?k * line_integral F {j} ?g\n  (?k, ?g) \\<in> one_chain_typeII \\<Longrightarrow>\n  real_of_int ?k * line_integral F {i, j} ?g =\n  real_of_int ?k * line_integral F {i} ?g +\n  real_of_int ?k * line_integral F {j} ?g\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g) \\<and>\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g)", "by (smt sum.cong split_cong)"], ["proof (state)\nthis:\n  (\\<Sum>(k, g)\\<in>one_chain_typeI.\n     real_of_int k * line_integral F {i, j} g) =\n  (\\<Sum>(k, g)\\<in>one_chain_typeI.\n     real_of_int k * line_integral F {i} g +\n     real_of_int k * line_integral F {j} g) \\<and>\n  (\\<Sum>(k, g)\\<in>one_chain_typeII.\n     real_of_int k * line_integral F {i, j} g) =\n  (\\<Sum>(k, g)\\<in>one_chain_typeII.\n     real_of_int k * line_integral F {i} g +\n     real_of_int k * line_integral F {j} g)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>(k, g)\\<in>one_chain_typeI.\n     real_of_int k * line_integral F {i, j} g) =\n  (\\<Sum>(k, g)\\<in>one_chain_typeI.\n     real_of_int k * line_integral F {i} g +\n     real_of_int k * line_integral F {j} g) \\<and>\n  (\\<Sum>(k, g)\\<in>one_chain_typeII.\n     real_of_int k * line_integral F {i, j} g) =\n  (\\<Sum>(k, g)\\<in>one_chain_typeII.\n     real_of_int k * line_integral F {i} g +\n     real_of_int k * line_integral F {j} g)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>one_chain_typeI.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>x\\<in>one_chain_typeI.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n    (\\<Sum>x\\<in>one_chain_typeI.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) \\<and>\n    (\\<Sum>x\\<in>one_chain_typeII.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>x\\<in>one_chain_typeII.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n    (\\<Sum>x\\<in>one_chain_typeII.\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)", "show \"(\\<Sum>(k::int, g)\\<in>one_chain_typeI. k * line_integral F {i, j} g) =\n          (\\<Sum>(k, g)\\<in>one_chain_typeI. k * line_integral F {i} g) + (\\<Sum>(k::int, g)\\<in>one_chain_typeI. k * line_integral F {j} g) \\<and>\n          (\\<Sum>(k::int, g)\\<in>one_chain_typeII. k * line_integral F {i, j} g) =\n          (\\<Sum>(k, g)\\<in>one_chain_typeII. k * line_integral F {i} g) + (\\<Sum>(k::int, g)\\<in>one_chain_typeII. k * line_integral F {j} g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i} g) +\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {j} g) \\<and>\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i} g) +\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {j} g)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i} g) +\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {j} g) \\<and>\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i} g) +\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {j} g)", "have 0: \"(\\<lambda>x. (case x of (k::int, g) \\<Rightarrow> k * line_integral F {i} g) + (case x of (k::int, g) \\<Rightarrow> k * line_integral F {j} g)) =\n                                  (\\<lambda>x. (case x of (k::int, g) \\<Rightarrow> (k * line_integral F {i} g) +  k * line_integral F {j} g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (case x of\n         (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n        (case x of\n         (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n    (\\<lambda>x.\n        case x of\n        (k, g) \\<Rightarrow>\n          real_of_int k * line_integral F {i} g +\n          real_of_int k * line_integral F {j} g)", "using comm_monoid_add_class.sum.distrib"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>?A. ?g x + ?h x) = sum ?g ?A + sum ?h ?A\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (case x of\n         (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n        (case x of\n         (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n    (\\<lambda>x.\n        case x of\n        (k, g) \\<Rightarrow>\n          real_of_int k * line_integral F {i} g +\n          real_of_int k * line_integral F {j} g)", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      (case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n      (case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n  (\\<lambda>x.\n      case x of\n      (k, g) \\<Rightarrow>\n        real_of_int k * line_integral F {i} g +\n        real_of_int k * line_integral F {j} g)\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i} g) +\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {j} g) \\<and>\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i} g) +\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {j} g)", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x.\n      (case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n      (case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n  (\\<lambda>x.\n      case x of\n      (k, g) \\<Rightarrow>\n        real_of_int k * line_integral F {i} g +\n        real_of_int k * line_integral F {j} g)", "have 1: \"(\\<Sum>x\\<in>one_chain_typeI. (case x of (k::int, g) \\<Rightarrow> k * line_integral F {i} g) + (case x of (k::int, g) \\<Rightarrow> k * line_integral F {j} g)) =\n                    (\\<Sum>x\\<in>one_chain_typeI. (case x of (k::int, g) \\<Rightarrow>( k * line_integral F {i} g + k * line_integral F {j} g)))\""], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n      (case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n  (\\<lambda>x.\n      case x of\n      (k, g) \\<Rightarrow>\n        real_of_int k * line_integral F {i} g +\n        real_of_int k * line_integral F {j} g)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>one_chain_typeI.\n       (case x of\n        (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n       (case x of\n        (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n    (\\<Sum>x\\<in>one_chain_typeI.\n       case x of\n       (k, g) \\<Rightarrow>\n         real_of_int k * line_integral F {i} g +\n         real_of_int k * line_integral F {j} g)", "by presburger"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>one_chain_typeI.\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n  (\\<Sum>x\\<in>one_chain_typeI.\n     case x of\n     (k, g) \\<Rightarrow>\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g)\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i} g) +\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {j} g) \\<and>\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i} g) +\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {j} g)", "have \"(\\<Sum>x\\<in>one_chain_typeII. (case x of (k, g) \\<Rightarrow> k * line_integral F {i} g) + (case x of (k, g) \\<Rightarrow> k * line_integral F {j} g)) =\n            (\\<Sum>x\\<in>one_chain_typeII. (case x of (k, g) \\<Rightarrow>( k * line_integral F {i} g + k * line_integral F {j} g)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>one_chain_typeII.\n       (case x of\n        (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n       (case x of\n        (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n    (\\<Sum>x\\<in>one_chain_typeII.\n       case x of\n       (k, g) \\<Rightarrow>\n         real_of_int k * line_integral F {i} g +\n         real_of_int k * line_integral F {j} g)", "using 0"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n      (case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n  (\\<lambda>x.\n      case x of\n      (k, g) \\<Rightarrow>\n        real_of_int k * line_integral F {i} g +\n        real_of_int k * line_integral F {j} g)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>one_chain_typeII.\n       (case x of\n        (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n       (case x of\n        (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n    (\\<Sum>x\\<in>one_chain_typeII.\n       case x of\n       (k, g) \\<Rightarrow>\n         real_of_int k * line_integral F {i} g +\n         real_of_int k * line_integral F {j} g)", "by presburger"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>one_chain_typeII.\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n  (\\<Sum>x\\<in>one_chain_typeII.\n     case x of\n     (k, g) \\<Rightarrow>\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g)\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i} g) +\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {j} g) \\<and>\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i} g) +\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {j} g)", "then"], ["proof (chain)\npicking this:\n  (\\<Sum>x\\<in>one_chain_typeII.\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n  (\\<Sum>x\\<in>one_chain_typeII.\n     case x of\n     (k, g) \\<Rightarrow>\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>one_chain_typeII.\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n  (\\<Sum>x\\<in>one_chain_typeII.\n     case x of\n     (k, g) \\<Rightarrow>\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g)\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i} g) +\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {j} g) \\<and>\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i} g) +\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {j} g)", "using sum.distrib[of \"(\\<lambda>(k, g).  k * line_integral F {i} g)\" \"(\\<lambda>(k, g).  k * line_integral F {j} g)\" \"one_chain_typeI\"]\n          sum.distrib[of \"(\\<lambda>(k, g).  k * line_integral F {i} g)\" \"(\\<lambda>(k, g).  k * line_integral F {j} g)\" \"one_chain_typeII\"]\n          line_integral_distrib 1"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>one_chain_typeII.\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n  (\\<Sum>x\\<in>one_chain_typeII.\n     case x of\n     (k, g) \\<Rightarrow>\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g)\n  (\\<Sum>x\\<in>one_chain_typeI.\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n  (\\<Sum>(k, g)\\<in>one_chain_typeI.\n     real_of_int k * line_integral F {i} g) +\n  (\\<Sum>(k, g)\\<in>one_chain_typeI. real_of_int k * line_integral F {j} g)\n  (\\<Sum>x\\<in>one_chain_typeII.\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n  (\\<Sum>(k, g)\\<in>one_chain_typeII.\n     real_of_int k * line_integral F {i} g) +\n  (\\<Sum>(k, g)\\<in>one_chain_typeII. real_of_int k * line_integral F {j} g)\n  (\\<Sum>(k, g)\\<in>one_chain_typeI.\n     real_of_int k * line_integral F {i, j} g) =\n  (\\<Sum>(k, g)\\<in>one_chain_typeI.\n     real_of_int k * line_integral F {i} g +\n     real_of_int k * line_integral F {j} g) \\<and>\n  (\\<Sum>(k, g)\\<in>one_chain_typeII.\n     real_of_int k * line_integral F {i, j} g) =\n  (\\<Sum>(k, g)\\<in>one_chain_typeII.\n     real_of_int k * line_integral F {i} g +\n     real_of_int k * line_integral F {j} g)\n  (\\<Sum>x\\<in>one_chain_typeI.\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n  (\\<Sum>x\\<in>one_chain_typeI.\n     case x of\n     (k, g) \\<Rightarrow>\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g)\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i} g) +\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {j} g) \\<and>\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i} g) +\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {j} g)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>(k, g)\\<in>one_chain_typeI.\n     real_of_int k * line_integral F {i, j} g) =\n  (\\<Sum>(k, g)\\<in>one_chain_typeI.\n     real_of_int k * line_integral F {i} g) +\n  (\\<Sum>(k, g)\\<in>one_chain_typeI.\n     real_of_int k * line_integral F {j} g) \\<and>\n  (\\<Sum>(k, g)\\<in>one_chain_typeII.\n     real_of_int k * line_integral F {i, j} g) =\n  (\\<Sum>(k, g)\\<in>one_chain_typeII.\n     real_of_int k * line_integral F {i} g) +\n  (\\<Sum>(k, g)\\<in>one_chain_typeII. real_of_int k * line_integral F {j} g)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>(k, g)\\<in>one_chain_typeI.\n     real_of_int k * line_integral F {i, j} g) =\n  (\\<Sum>(k, g)\\<in>one_chain_typeI.\n     real_of_int k * line_integral F {i} g) +\n  (\\<Sum>(k, g)\\<in>one_chain_typeI.\n     real_of_int k * line_integral F {j} g) \\<and>\n  (\\<Sum>(k, g)\\<in>one_chain_typeII.\n     real_of_int k * line_integral F {i, j} g) =\n  (\\<Sum>(k, g)\\<in>one_chain_typeII.\n     real_of_int k * line_integral F {i} g) +\n  (\\<Sum>(k, g)\\<in>one_chain_typeII. real_of_int k * line_integral F {j} g)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  one_chain_line_integral F {i, j} one_chain_typeI =\n  one_chain_line_integral F {i} one_chain_typeI +\n  one_chain_line_integral F {j} one_chain_typeI \\<and>\n  one_chain_line_integral F {i, j} one_chain_typeII =\n  one_chain_line_integral F {i} one_chain_typeII +\n  one_chain_line_integral F {j} one_chain_typeII\n\ngoal (2 subgoals):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeI\n 2. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeII", "have integral_dis: \"integral s (\\<lambda>x. ?F_a' x - ?F_b' x) = integral s (\\<lambda>x. ?F_a' x) + integral s (\\<lambda>x. - ?F_b' x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) +\n    integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) +\n    integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x)", "have \"(?F_a' has_integral integral (cubeImage twoCube) ?F_a') (cubeImage twoCube)\"\n      if \"twoCube \\<in> two_chain_typeII\" for twoCube"], ["proof (prove)\ngoal (1 subgoal):\n 1. (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n     integral (cubeImage twoCube)\n      (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))\n     (cubeImage twoCube)", "by (simp add: analytically_valid_imp_part_deriv_integrable_on T2.F_anal_valid has_integral_integrable_integral that)"], ["proof (state)\nthis:\n  ?twoCube \\<in> two_chain_typeII \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n   integral (cubeImage ?twoCube)\n    (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))\n   (cubeImage ?twoCube)\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) +\n    integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x)", "then"], ["proof (chain)\npicking this:\n  ?twoCube \\<in> two_chain_typeII \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n   integral (cubeImage ?twoCube)\n    (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))\n   (cubeImage ?twoCube)", "have \"\\<And>u. u \\<in> (cubeImage ` two_chain_typeII) \\<Longrightarrow> (?F_a' has_integral integral u ?F_a') u\""], ["proof (prove)\nusing this:\n  ?twoCube \\<in> two_chain_typeII \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n   integral (cubeImage ?twoCube)\n    (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))\n   (cubeImage ?twoCube)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> cubeImage ` two_chain_typeII \\<Longrightarrow>\n       (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j)\n         i has_integral\n        integral u\n         (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))\n        u", "by auto"], ["proof (state)\nthis:\n  ?u \\<in> cubeImage ` two_chain_typeII \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n   integral ?u (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))\n   ?u\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) +\n    integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x)", "then"], ["proof (chain)\npicking this:\n  ?u \\<in> cubeImage ` two_chain_typeII \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n   integral ?u (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))\n   ?u", "have \"(?F_a' has_integral (\\<Sum>img\\<in>cubeImage ` two_chain_typeII. integral img ?F_a')) s\""], ["proof (prove)\nusing this:\n  ?u \\<in> cubeImage ` two_chain_typeII \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n   integral ?u (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))\n   ?u\n\ngoal (1 subgoal):\n 1. (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n     (\\<Sum>img\\<in>cubeImage ` two_chain_typeII.\n        integral img\n         (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i)))\n     s", "using T2.valid_typeII_div"], ["proof (prove)\nusing this:\n  ?u \\<in> cubeImage ` two_chain_typeII \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n   integral ?u (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))\n   ?u\n  valid_typeII_division s two_chain_typeII\n\ngoal (1 subgoal):\n 1. (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n     (\\<Sum>img\\<in>cubeImage ` two_chain_typeII.\n        integral img\n         (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i)))\n     s", "unfolding gen_division_def"], ["proof (prove)\nusing this:\n  ?u \\<in> cubeImage ` two_chain_typeII \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n   integral ?u (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))\n   ?u\n  (\\<forall>twoCube\\<in>two_chain_typeII. typeII_twoCube twoCube) \\<and>\n  (finite (cubeImage ` two_chain_typeII) \\<and>\n   \\<Union> (cubeImage ` two_chain_typeII) = s \\<and>\n   pairwise (\\<lambda>X Y. negligible (X \\<inter> Y))\n    (cubeImage ` two_chain_typeII)) \\<and>\n  valid_two_chain two_chain_typeII\n\ngoal (1 subgoal):\n 1. (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n     (\\<Sum>img\\<in>cubeImage ` two_chain_typeII.\n        integral img\n         (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i)))\n     s", "by (metis has_integral_Union)"], ["proof (state)\nthis:\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n   (\\<Sum>img\\<in>cubeImage ` two_chain_typeII.\n      integral img\n       (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i)))\n   s\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) +\n    integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x)", "then"], ["proof (chain)\npicking this:\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n   (\\<Sum>img\\<in>cubeImage ` two_chain_typeII.\n      integral img\n       (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i)))\n   s", "have F_a'_integrable:\n      \"(?F_a' integrable_on s)\""], ["proof (prove)\nusing this:\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n   (\\<Sum>img\\<in>cubeImage ` two_chain_typeII.\n      integral img\n       (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i)))\n   s\n\ngoal (1 subgoal):\n 1. partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i integrable_on\n    s", "by auto"], ["proof (state)\nthis:\n  partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i integrable_on s\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) +\n    integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x)", "have \"\\<forall>twoCube \\<in> two_chain_typeI. (?F_b' has_integral integral (cubeImage twoCube) ?F_b') (cubeImage twoCube)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>twoCube\\<in>two_chain_typeI.\n       (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i)\n         j has_integral\n        integral (cubeImage twoCube)\n         (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j))\n        (cubeImage twoCube)", "using analytically_valid_imp_part_deriv_integrable_on T1.F_anal_valid"], ["proof (prove)\nusing this:\n  analytically_valid ?s ?f ?i \\<Longrightarrow>\n  partial_vector_derivative ?f ?i integrable_on ?s\n  \\<forall>twoC\\<in>two_chain_typeI.\n     analytically_valid (cubeImage twoC) (\\<lambda>x. F x \\<bullet> i) j\n\ngoal (1 subgoal):\n 1. \\<forall>twoCube\\<in>two_chain_typeI.\n       (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i)\n         j has_integral\n        integral (cubeImage twoCube)\n         (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j))\n        (cubeImage twoCube)", "by blast"], ["proof (state)\nthis:\n  \\<forall>twoCube\\<in>two_chain_typeI.\n     (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n      integral (cubeImage twoCube)\n       (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j))\n      (cubeImage twoCube)\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) +\n    integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x)", "then"], ["proof (chain)\npicking this:\n  \\<forall>twoCube\\<in>two_chain_typeI.\n     (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n      integral (cubeImage twoCube)\n       (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j))\n      (cubeImage twoCube)", "have \"\\<And>u. u \\<in> (cubeImage ` two_chain_typeI) \\<Longrightarrow> (?F_b' has_integral integral u ?F_b') u\""], ["proof (prove)\nusing this:\n  \\<forall>twoCube\\<in>two_chain_typeI.\n     (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n      integral (cubeImage twoCube)\n       (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j))\n      (cubeImage twoCube)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> cubeImage ` two_chain_typeI \\<Longrightarrow>\n       (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i)\n         j has_integral\n        integral u\n         (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j))\n        u", "by auto"], ["proof (state)\nthis:\n  ?u \\<in> cubeImage ` two_chain_typeI \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n   integral ?u (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j))\n   ?u\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) +\n    integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x)", "then"], ["proof (chain)\npicking this:\n  ?u \\<in> cubeImage ` two_chain_typeI \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n   integral ?u (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j))\n   ?u", "have \"(?F_b' has_integral (\\<Sum>img\\<in>cubeImage ` two_chain_typeI. integral img ?F_b')) s\""], ["proof (prove)\nusing this:\n  ?u \\<in> cubeImage ` two_chain_typeI \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n   integral ?u (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j))\n   ?u\n\ngoal (1 subgoal):\n 1. (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n     (\\<Sum>img\\<in>cubeImage ` two_chain_typeI.\n        integral img\n         (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)))\n     s", "using T1.valid_typeI_div"], ["proof (prove)\nusing this:\n  ?u \\<in> cubeImage ` two_chain_typeI \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n   integral ?u (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j))\n   ?u\n  valid_typeI_division s two_chain_typeI\n\ngoal (1 subgoal):\n 1. (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n     (\\<Sum>img\\<in>cubeImage ` two_chain_typeI.\n        integral img\n         (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)))\n     s", "unfolding gen_division_def"], ["proof (prove)\nusing this:\n  ?u \\<in> cubeImage ` two_chain_typeI \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n   integral ?u (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j))\n   ?u\n  (\\<forall>twoCube\\<in>two_chain_typeI. typeI_twoCube twoCube) \\<and>\n  (finite (cubeImage ` two_chain_typeI) \\<and>\n   \\<Union> (cubeImage ` two_chain_typeI) = s \\<and>\n   pairwise (\\<lambda>X Y. negligible (X \\<inter> Y))\n    (cubeImage ` two_chain_typeI)) \\<and>\n  valid_two_chain two_chain_typeI\n\ngoal (1 subgoal):\n 1. (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n     (\\<Sum>img\\<in>cubeImage ` two_chain_typeI.\n        integral img\n         (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)))\n     s", "by (metis has_integral_Union)"], ["proof (state)\nthis:\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n   (\\<Sum>img\\<in>cubeImage ` two_chain_typeI.\n      integral img\n       (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)))\n   s\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) +\n    integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x)", "then"], ["proof (chain)\npicking this:\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n   (\\<Sum>img\\<in>cubeImage ` two_chain_typeI.\n      integral img\n       (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)))\n   s", "show ?thesis"], ["proof (prove)\nusing this:\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n   (\\<Sum>img\\<in>cubeImage ` two_chain_typeI.\n      integral img\n       (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)))\n   s\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) +\n    integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x)", "by (simp add: F_a'_integrable Henstock_Kurzweil_Integration.integral_diff has_integral_iff)"], ["proof (state)\nthis:\n  integral s\n   (\\<lambda>x.\n       partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n       partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n  integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) +\n  integral s\n   (\\<lambda>x.\n       - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  integral s\n   (\\<lambda>x.\n       partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n       partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n  integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) +\n  integral s\n   (\\<lambda>x.\n       - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x)\n\ngoal (2 subgoals):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeI\n 2. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeII", "show \"integral s (\\<lambda>x. ?F_a' x - ?F_b' x) = one_chain_line_integral F {i, j} one_chain_typeI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeI", "using one_chain_j_integrals integral_dis line_integral_dist typeI_regions_integral typeII_regions_integral"], ["proof (prove)\nusing this:\n  one_chain_line_integral F {j} one_chain_typeII =\n  one_chain_line_integral F {j} one_chain_typeI \\<and>\n  (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n      line_integral_exists F {j} \\<gamma>) \\<and>\n  (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n      line_integral_exists F {j} \\<gamma>)\n  integral s\n   (\\<lambda>x.\n       partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n       partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n  integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) +\n  integral s\n   (\\<lambda>x.\n       - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x)\n  one_chain_line_integral F {i, j} one_chain_typeI =\n  one_chain_line_integral F {i} one_chain_typeI +\n  one_chain_line_integral F {j} one_chain_typeI \\<and>\n  one_chain_line_integral F {i, j} one_chain_typeII =\n  one_chain_line_integral F {i} one_chain_typeII +\n  one_chain_line_integral F {j} one_chain_typeII\n  integral s\n   (\\<lambda>x.\n       - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n  one_chain_line_integral F {i} one_chain_typeI\n  integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n  one_chain_line_integral F {j} one_chain_typeII\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeI", "by auto"], ["proof (state)\nthis:\n  integral s\n   (\\<lambda>x.\n       partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n       partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n  one_chain_line_integral F {i, j} one_chain_typeI\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeII", "show \"integral s (\\<lambda>x. ?F_a' x - ?F_b' x) = one_chain_line_integral F {i, j} one_chain_typeII\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeII", "using one_chain_i_integrals integral_dis line_integral_dist typeI_regions_integral typeII_regions_integral"], ["proof (prove)\nusing this:\n  one_chain_line_integral F {i} one_chain_typeI =\n  one_chain_line_integral F {i} one_chain_typeII \\<and>\n  (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n      line_integral_exists F {i} \\<gamma>) \\<and>\n  (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n      line_integral_exists F {i} \\<gamma>)\n  integral s\n   (\\<lambda>x.\n       partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n       partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n  integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) +\n  integral s\n   (\\<lambda>x.\n       - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x)\n  one_chain_line_integral F {i, j} one_chain_typeI =\n  one_chain_line_integral F {i} one_chain_typeI +\n  one_chain_line_integral F {j} one_chain_typeI \\<and>\n  one_chain_line_integral F {i, j} one_chain_typeII =\n  one_chain_line_integral F {i} one_chain_typeII +\n  one_chain_line_integral F {j} one_chain_typeII\n  integral s\n   (\\<lambda>x.\n       - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n  one_chain_line_integral F {i} one_chain_typeI\n  integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n  one_chain_line_integral F {j} one_chain_typeII\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeII", "by auto"], ["proof (state)\nthis:\n  integral s\n   (\\<lambda>x.\n       partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n       partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n  one_chain_line_integral F {i, j} one_chain_typeII\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma GreenThm_typeI_typeII_divisible_region:\n  assumes only_vertical_division:\n    \"only_vertical_division one_chain_typeI two_chain_typeI\"\n    \"boundary_chain one_chain_typeI\" and\n    only_horizontal_division:\n    \"only_horizontal_division one_chain_typeII two_chain_typeII\"\n    \"boundary_chain one_chain_typeII\" and\n    typeI_and_typII_one_chains_have_common_subdiv:\n    \"common_boundary_sudivision_exists one_chain_typeI one_chain_typeII\"\n  shows \"integral s (\\<lambda>x. partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> j) i x - partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> i) j x) = one_chain_line_integral F {i, j} one_chain_typeI\"\n    \"integral s (\\<lambda>x. partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> j) i x - partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> i) j x) = one_chain_line_integral F {i, j} one_chain_typeII\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeI &&&\n    integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeII", "using GreenThm_typeI_typeII_divisible_region' only_vertical_division only_horizontal_division common_subdiv_imp_gen_common_subdiv[OF typeI_and_typII_one_chains_have_common_subdiv]"], ["proof (prove)\nusing this:\n  \\<lbrakk>only_vertical_division ?one_chain_typeI two_chain_typeI;\n   boundary_chain ?one_chain_typeI;\n   only_horizontal_division ?one_chain_typeII two_chain_typeII;\n   boundary_chain ?one_chain_typeII;\n   common_sudiv_exists ?one_chain_typeI ?one_chain_typeII\\<rbrakk>\n  \\<Longrightarrow> integral s\n                     (\\<lambda>x.\n                         partial_vector_derivative\n                          (\\<lambda>x. F x \\<bullet> j) i x -\n                         partial_vector_derivative\n                          (\\<lambda>x. F x \\<bullet> i) j x) =\n                    one_chain_line_integral F {i, j} ?one_chain_typeI\n  \\<lbrakk>only_vertical_division ?one_chain_typeI two_chain_typeI;\n   boundary_chain ?one_chain_typeI;\n   only_horizontal_division ?one_chain_typeII two_chain_typeII;\n   boundary_chain ?one_chain_typeII;\n   common_sudiv_exists ?one_chain_typeI ?one_chain_typeII\\<rbrakk>\n  \\<Longrightarrow> integral s\n                     (\\<lambda>x.\n                         partial_vector_derivative\n                          (\\<lambda>x. F x \\<bullet> j) i x -\n                         partial_vector_derivative\n                          (\\<lambda>x. F x \\<bullet> i) j x) =\n                    one_chain_line_integral F {i, j} ?one_chain_typeII\n  only_vertical_division one_chain_typeI two_chain_typeI\n  boundary_chain one_chain_typeI\n  only_horizontal_division one_chain_typeII two_chain_typeII\n  boundary_chain one_chain_typeII\n  common_sudiv_exists one_chain_typeI one_chain_typeII\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeI &&&\n    integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeII", "by auto"], ["", "lemma GreenThm_typeI_typeII_divisible_region_finite_holes:\n  assumes valid_cube_boundary: \"\\<forall>(k,\\<gamma>)\\<in>boundary C. valid_path \\<gamma>\" and\n    only_vertical_division:\n    \"only_vertical_division (boundary C) two_chain_typeI\" and\n    only_horizontal_division:\n    \"only_horizontal_division (boundary C) two_chain_typeII\" and\n    s_is_oneCube: \"s = cubeImage C\"\n  shows \"integral (cubeImage C) (\\<lambda>x. partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n                     one_chain_line_integral F {i, j} (boundary C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral (cubeImage C)\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} (boundary C)", "using GreenThm_typeI_typeII_divisible_region[OF only_vertical_division\n      two_cube_boundary_is_boundary only_horizontal_division two_cube_boundary_is_boundary\n      common_boundary_subdiv_exists_refl[OF assms(1)]] s_is_oneCube"], ["proof (prove)\nusing this:\n  integral s\n   (\\<lambda>x.\n       partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n       partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n  one_chain_line_integral F {i, j} (boundary C)\n  integral s\n   (\\<lambda>x.\n       partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n       partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n  one_chain_line_integral F {i, j} (boundary C)\n  s = cubeImage C\n\ngoal (1 subgoal):\n 1. integral (cubeImage C)\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} (boundary C)", "by auto"], ["", "lemma GreenThm_typeI_typeII_divisible_region_equivallent_boundary:\n  assumes \n    gen_divisions: \"gen_division s (cubeImage ` two_chain_typeI)\"\n    \"gen_division s (cubeImage ` two_chain_typeII)\" and\n    typeI_two_cubes_trace_horizontal_boundaries:\n    \"two_chain_horizontal_boundary two_chain_typeI \\<subseteq> one_chain_typeI\" and\n    typeII_two_cubes_trace_vertical_boundaries:\n    \"two_chain_vertical_boundary two_chain_typeII \\<subseteq> one_chain_typeII\" and\n    boundary_of_region_is_subset_of_partition_boundaries:\n    \"one_chain_typeI \\<subseteq> two_chain_boundary two_chain_typeI\"\n    \"one_chain_typeII \\<subseteq> two_chain_boundary two_chain_typeII\" and\n    typeI_and_typII_one_chains_have_common_subdiv:\n    \"common_boundary_sudivision_exists one_chain_typeI one_chain_typeII\"\n  shows \"integral s (\\<lambda>x. partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> j) i x - partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> i) j x) = one_chain_line_integral F {i, j} one_chain_typeI\"\n    \"integral s (\\<lambda>x. partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> j) i x - partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> i) j x) = one_chain_line_integral F {i, j} one_chain_typeII\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeI &&&\n    integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeII", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeI\n 2. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeII", "let ?F_b' = \"partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> i) j\""], ["proof (state)\ngoal (2 subgoals):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeI\n 2. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeII", "let ?F_a' = \"partial_vector_derivative (\\<lambda>x. (F x) \\<bullet> j) i\""], ["proof (state)\ngoal (2 subgoals):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeI\n 2. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeII", "have one_chain_i_integrals:\n    \"one_chain_line_integral F {i} one_chain_typeI = one_chain_line_integral F {i} one_chain_typeII \\<and>\n              (\\<forall>(k,\\<gamma>)\\<in>one_chain_typeI. line_integral_exists F {i} \\<gamma>) \\<and>\n              (\\<forall>(k,\\<gamma>)\\<in>one_chain_typeII. line_integral_exists F {i} \\<gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. one_chain_line_integral F {i} one_chain_typeI =\n    one_chain_line_integral F {i} one_chain_typeII \\<and>\n    (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n        line_integral_exists F {i} \\<gamma>) \\<and>\n    (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n        line_integral_exists F {i} \\<gamma>)", "proof (intro conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. one_chain_line_integral F {i} one_chain_typeI =\n    one_chain_line_integral F {i} one_chain_typeII\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n       line_integral_exists F {i} \\<gamma>\n 3. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n       line_integral_exists F {i} \\<gamma>", "have i: \"boundary_chain one_chain_typeI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. boundary_chain one_chain_typeI", "using two_chain_boundary_is_boundary_chain boundary_chain_def\n        boundary_of_region_is_subset_of_partition_boundaries(1)"], ["proof (prove)\nusing this:\n  boundary_chain (two_chain_boundary ?twoChain)\n  boundary_chain ?s \\<equiv>\n  \\<forall>(k, \\<gamma>)\\<in>?s. k = (1::?'a) \\<or> k = - (1::?'a)\n  one_chain_typeI \\<subseteq> two_chain_boundary two_chain_typeI\n\ngoal (1 subgoal):\n 1. boundary_chain one_chain_typeI", "by blast"], ["proof (state)\nthis:\n  boundary_chain one_chain_typeI\n\ngoal (3 subgoals):\n 1. one_chain_line_integral F {i} one_chain_typeI =\n    one_chain_line_integral F {i} one_chain_typeII\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n       line_integral_exists F {i} \\<gamma>\n 3. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n       line_integral_exists F {i} \\<gamma>", "have i': \"boundary_chain one_chain_typeII\""], ["proof (prove)\ngoal (1 subgoal):\n 1. boundary_chain one_chain_typeII", "using two_chain_boundary_is_boundary_chain boundary_chain_def\n        boundary_of_region_is_subset_of_partition_boundaries(2)"], ["proof (prove)\nusing this:\n  boundary_chain (two_chain_boundary ?twoChain)\n  boundary_chain ?s \\<equiv>\n  \\<forall>(k, \\<gamma>)\\<in>?s. k = (1::?'a) \\<or> k = - (1::?'a)\n  one_chain_typeII \\<subseteq> two_chain_boundary two_chain_typeII\n\ngoal (1 subgoal):\n 1. boundary_chain one_chain_typeII", "by blast"], ["proof (state)\nthis:\n  boundary_chain one_chain_typeII\n\ngoal (3 subgoals):\n 1. one_chain_line_integral F {i} one_chain_typeI =\n    one_chain_line_integral F {i} one_chain_typeII\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n       line_integral_exists F {i} \\<gamma>\n 3. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n       line_integral_exists F {i} \\<gamma>", "have \"\\<And>k \\<gamma>. (k,\\<gamma>)\\<in>one_chain_typeI \\<Longrightarrow> line_integral_exists F {i} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k \\<gamma>.\n       (k, \\<gamma>) \\<in> one_chain_typeI \\<Longrightarrow>\n       line_integral_exists F {i} \\<gamma>", "using T1.typeI_cube_line_integral_exists_boundary assms"], ["proof (prove)\nusing this:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary two_chain_typeI.\n     line_integral_exists F {i} \\<gamma>\n  gen_division s (cubeImage ` two_chain_typeI)\n  gen_division s (cubeImage ` two_chain_typeII)\n  two_chain_horizontal_boundary two_chain_typeI \\<subseteq> one_chain_typeI\n  two_chain_vertical_boundary two_chain_typeII \\<subseteq> one_chain_typeII\n  one_chain_typeI \\<subseteq> two_chain_boundary two_chain_typeI\n  one_chain_typeII \\<subseteq> two_chain_boundary two_chain_typeII\n  common_boundary_sudivision_exists one_chain_typeI one_chain_typeII\n\ngoal (1 subgoal):\n 1. \\<And>k \\<gamma>.\n       (k, \\<gamma>) \\<in> one_chain_typeI \\<Longrightarrow>\n       line_integral_exists F {i} \\<gamma>", "by (fastforce simp add: valid_two_chain_def)"], ["proof (state)\nthis:\n  (?k, ?\\<gamma>) \\<in> one_chain_typeI \\<Longrightarrow>\n  line_integral_exists F {i} ?\\<gamma>\n\ngoal (3 subgoals):\n 1. one_chain_line_integral F {i} one_chain_typeI =\n    one_chain_line_integral F {i} one_chain_typeII\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n       line_integral_exists F {i} \\<gamma>\n 3. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n       line_integral_exists F {i} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  (?k, ?\\<gamma>) \\<in> one_chain_typeI \\<Longrightarrow>\n  line_integral_exists F {i} ?\\<gamma>", "show ii: \"\\<forall>(k,\\<gamma>)\\<in>one_chain_typeI. line_integral_exists F {i} \\<gamma>\""], ["proof (prove)\nusing this:\n  (?k, ?\\<gamma>) \\<in> one_chain_typeI \\<Longrightarrow>\n  line_integral_exists F {i} ?\\<gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n       line_integral_exists F {i} \\<gamma>", "by auto"], ["proof (state)\nthis:\n  \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n     line_integral_exists F {i} \\<gamma>\n\ngoal (2 subgoals):\n 1. one_chain_line_integral F {i} one_chain_typeI =\n    one_chain_line_integral F {i} one_chain_typeII\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n       line_integral_exists F {i} \\<gamma>", "have \"finite (two_chain_boundary two_chain_typeI)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (two_chain_boundary two_chain_typeI)", "unfolding two_chain_boundary_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (\\<Union> (boundary ` two_chain_typeI))", "proof (rule finite_UN_I)"], ["proof (state)\ngoal (2 subgoals):\n 1. finite two_chain_typeI\n 2. \\<And>a. a \\<in> two_chain_typeI \\<Longrightarrow> finite (boundary a)", "show \"finite two_chain_typeI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite two_chain_typeI", "using T1.valid_typeI_div finite_imageD gen_division_def valid_two_chain_def"], ["proof (prove)\nusing this:\n  valid_typeI_division s two_chain_typeI\n  \\<lbrakk>finite (?f ` ?A); inj_on ?f ?A\\<rbrakk>\n  \\<Longrightarrow> finite ?A\n  gen_division ?s ?S \\<equiv>\n  finite ?S \\<and>\n  \\<Union> ?S = ?s \\<and>\n  pairwise (\\<lambda>X Y. negligible (X \\<inter> Y)) ?S\n  valid_two_chain ?twoChain \\<equiv>\n  (\\<forall>twoCube\\<in>?twoChain. valid_two_cube twoCube) \\<and>\n  pairwise (\\<lambda>c1 c2. boundary c1 \\<inter> boundary c2 = {})\n   ?twoChain \\<and>\n  inj_on cubeImage ?twoChain\n\ngoal (1 subgoal):\n 1. finite two_chain_typeI", "by auto"], ["proof (state)\nthis:\n  finite two_chain_typeI\n\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> two_chain_typeI \\<Longrightarrow> finite (boundary a)", "show \"\\<And>a. a \\<in> two_chain_typeI \\<Longrightarrow> finite (boundary a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> two_chain_typeI \\<Longrightarrow> finite (boundary a)", "by (simp add: boundary_def horizontal_boundary_def vertical_boundary_def)"], ["proof (state)\nthis:\n  ?a \\<in> two_chain_typeI \\<Longrightarrow> finite (boundary ?a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finite (two_chain_boundary two_chain_typeI)\n\ngoal (2 subgoals):\n 1. one_chain_line_integral F {i} one_chain_typeI =\n    one_chain_line_integral F {i} one_chain_typeII\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n       line_integral_exists F {i} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  finite (two_chain_boundary two_chain_typeI)", "have \"finite one_chain_typeI\""], ["proof (prove)\nusing this:\n  finite (two_chain_boundary two_chain_typeI)\n\ngoal (1 subgoal):\n 1. finite one_chain_typeI", "using boundary_of_region_is_subset_of_partition_boundaries(1) finite_subset"], ["proof (prove)\nusing this:\n  finite (two_chain_boundary two_chain_typeI)\n  one_chain_typeI \\<subseteq> two_chain_boundary two_chain_typeI\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite one_chain_typeI", "by fastforce"], ["proof (state)\nthis:\n  finite one_chain_typeI\n\ngoal (2 subgoals):\n 1. one_chain_line_integral F {i} one_chain_typeI =\n    one_chain_line_integral F {i} one_chain_typeII\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n       line_integral_exists F {i} \\<gamma>", "moreover"], ["proof (state)\nthis:\n  finite one_chain_typeI\n\ngoal (2 subgoals):\n 1. one_chain_line_integral F {i} one_chain_typeI =\n    one_chain_line_integral F {i} one_chain_typeII\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n       line_integral_exists F {i} \\<gamma>", "have \"finite (two_chain_boundary two_chain_typeII)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (two_chain_boundary two_chain_typeII)", "unfolding two_chain_boundary_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (\\<Union> (boundary ` two_chain_typeII))", "proof (rule finite_UN_I)"], ["proof (state)\ngoal (2 subgoals):\n 1. finite two_chain_typeII\n 2. \\<And>a. a \\<in> two_chain_typeII \\<Longrightarrow> finite (boundary a)", "show \"finite two_chain_typeII\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite two_chain_typeII", "using T2.valid_typeII_div finite_imageD gen_division_def valid_two_chain_def"], ["proof (prove)\nusing this:\n  valid_typeII_division s two_chain_typeII\n  \\<lbrakk>finite (?f ` ?A); inj_on ?f ?A\\<rbrakk>\n  \\<Longrightarrow> finite ?A\n  gen_division ?s ?S \\<equiv>\n  finite ?S \\<and>\n  \\<Union> ?S = ?s \\<and>\n  pairwise (\\<lambda>X Y. negligible (X \\<inter> Y)) ?S\n  valid_two_chain ?twoChain \\<equiv>\n  (\\<forall>twoCube\\<in>?twoChain. valid_two_cube twoCube) \\<and>\n  pairwise (\\<lambda>c1 c2. boundary c1 \\<inter> boundary c2 = {})\n   ?twoChain \\<and>\n  inj_on cubeImage ?twoChain\n\ngoal (1 subgoal):\n 1. finite two_chain_typeII", "by auto"], ["proof (state)\nthis:\n  finite two_chain_typeII\n\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> two_chain_typeII \\<Longrightarrow> finite (boundary a)", "show \"\\<And>a. a \\<in> two_chain_typeII \\<Longrightarrow> finite (boundary a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> two_chain_typeII \\<Longrightarrow> finite (boundary a)", "by (simp add: boundary_def horizontal_boundary_def vertical_boundary_def)"], ["proof (state)\nthis:\n  ?a \\<in> two_chain_typeII \\<Longrightarrow> finite (boundary ?a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finite (two_chain_boundary two_chain_typeII)\n\ngoal (2 subgoals):\n 1. one_chain_line_integral F {i} one_chain_typeI =\n    one_chain_line_integral F {i} one_chain_typeII\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n       line_integral_exists F {i} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  finite (two_chain_boundary two_chain_typeII)", "have \"finite one_chain_typeII\""], ["proof (prove)\nusing this:\n  finite (two_chain_boundary two_chain_typeII)\n\ngoal (1 subgoal):\n 1. finite one_chain_typeII", "using boundary_of_region_is_subset_of_partition_boundaries(2) finite_subset"], ["proof (prove)\nusing this:\n  finite (two_chain_boundary two_chain_typeII)\n  one_chain_typeII \\<subseteq> two_chain_boundary two_chain_typeII\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite one_chain_typeII", "by fastforce"], ["proof (state)\nthis:\n  finite one_chain_typeII\n\ngoal (2 subgoals):\n 1. one_chain_line_integral F {i} one_chain_typeI =\n    one_chain_line_integral F {i} one_chain_typeII\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n       line_integral_exists F {i} \\<gamma>", "ultimately"], ["proof (chain)\npicking this:\n  finite one_chain_typeI\n  finite one_chain_typeII", "show \"one_chain_line_integral F {i} one_chain_typeI = one_chain_line_integral F {i} one_chain_typeII\"\n      \"\\<forall>(k, \\<gamma>)\\<in>one_chain_typeII. line_integral_exists F {i} \\<gamma>\""], ["proof (prove)\nusing this:\n  finite one_chain_typeI\n  finite one_chain_typeII\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {i} one_chain_typeI =\n    one_chain_line_integral F {i} one_chain_typeII &&&\n    \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n       line_integral_exists F {i} \\<gamma>", "using ii common_subdivision_imp_eq_line_integral[OF typeI_and_typII_one_chains_have_common_subdiv\n          i i' ii]"], ["proof (prove)\nusing this:\n  finite one_chain_typeI\n  finite one_chain_typeII\n  \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n     line_integral_exists F {i} \\<gamma>\n  \\<lbrakk>finite one_chain_typeI; finite one_chain_typeII;\n   finite {i}\\<rbrakk>\n  \\<Longrightarrow> one_chain_line_integral F {i} one_chain_typeI =\n                    one_chain_line_integral F {i} one_chain_typeII\n  \\<lbrakk>finite one_chain_typeI; finite one_chain_typeII;\n   finite {i}\\<rbrakk>\n  \\<Longrightarrow> \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n                       line_integral_exists F {i} \\<gamma>\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {i} one_chain_typeI =\n    one_chain_line_integral F {i} one_chain_typeII &&&\n    \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n       line_integral_exists F {i} \\<gamma>", "by auto"], ["proof (state)\nthis:\n  one_chain_line_integral F {i} one_chain_typeI =\n  one_chain_line_integral F {i} one_chain_typeII\n  \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n     line_integral_exists F {i} \\<gamma>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  one_chain_line_integral F {i} one_chain_typeI =\n  one_chain_line_integral F {i} one_chain_typeII \\<and>\n  (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n      line_integral_exists F {i} \\<gamma>) \\<and>\n  (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n      line_integral_exists F {i} \\<gamma>)\n\ngoal (2 subgoals):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeI\n 2. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeII", "have one_chain_j_integrals:\n    \"one_chain_line_integral F {j} one_chain_typeI = one_chain_line_integral F {j} one_chain_typeII \\<and>\n              (\\<forall>(k,\\<gamma>)\\<in>one_chain_typeI. line_integral_exists F {j} \\<gamma>) \\<and>\n              (\\<forall>(k,\\<gamma>)\\<in>one_chain_typeII. line_integral_exists F {j} \\<gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j} one_chain_typeI =\n    one_chain_line_integral F {j} one_chain_typeII \\<and>\n    (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n        line_integral_exists F {j} \\<gamma>) \\<and>\n    (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n        line_integral_exists F {j} \\<gamma>)", "proof (intro conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. one_chain_line_integral F {j} one_chain_typeI =\n    one_chain_line_integral F {j} one_chain_typeII\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n       line_integral_exists F {j} \\<gamma>\n 3. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n       line_integral_exists F {j} \\<gamma>", "have i: \"boundary_chain one_chain_typeI\" and i': \"boundary_chain one_chain_typeII\""], ["proof (prove)\ngoal (1 subgoal):\n 1. boundary_chain one_chain_typeI &&& boundary_chain one_chain_typeII", "using two_chain_boundary_is_boundary_chain boundary_of_region_is_subset_of_partition_boundaries"], ["proof (prove)\nusing this:\n  boundary_chain (two_chain_boundary ?twoChain)\n  one_chain_typeI \\<subseteq> two_chain_boundary two_chain_typeI\n  one_chain_typeII \\<subseteq> two_chain_boundary two_chain_typeII\n\ngoal (1 subgoal):\n 1. boundary_chain one_chain_typeI &&& boundary_chain one_chain_typeII", "unfolding boundary_chain_def"], ["proof (prove)\nusing this:\n  \\<forall>(k, \\<gamma>)\\<in>two_chain_boundary ?twoChain.\n     k = 1 \\<or> k = - 1\n  one_chain_typeI \\<subseteq> two_chain_boundary two_chain_typeI\n  one_chain_typeII \\<subseteq> two_chain_boundary two_chain_typeII\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI. k = 1 \\<or> k = - 1 &&&\n    \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII. k = 1 \\<or> k = - 1", "by blast+"], ["proof (state)\nthis:\n  boundary_chain one_chain_typeI\n  boundary_chain one_chain_typeII\n\ngoal (3 subgoals):\n 1. one_chain_line_integral F {j} one_chain_typeI =\n    one_chain_line_integral F {j} one_chain_typeII\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n       line_integral_exists F {j} \\<gamma>\n 3. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n       line_integral_exists F {j} \\<gamma>", "have \"line_integral_exists F {j} \\<gamma>\" if \"(k,\\<gamma>)\\<in>one_chain_typeII\" for k \\<gamma>"], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral_exists F {j} \\<gamma>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. line_integral_exists F {j} \\<gamma>", "have F_is_continuous: \"\\<forall>twoC \\<in> two_chain_typeII. continuous_on (cubeImage twoC) (\\<lambda>a. F(a) \\<bullet> j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>twoC\\<in>two_chain_typeII.\n       continuous_on (cubeImage twoC) (\\<lambda>a. F a \\<bullet> j)", "using T2.F_anal_valid"], ["proof (prove)\nusing this:\n  \\<forall>twoC\\<in>two_chain_typeII.\n     analytically_valid (cubeImage twoC) (\\<lambda>x. F x \\<bullet> j) i\n\ngoal (1 subgoal):\n 1. \\<forall>twoC\\<in>two_chain_typeII.\n       continuous_on (cubeImage twoC) (\\<lambda>a. F a \\<bullet> j)", "by(simp add: analytically_valid_def)"], ["proof (state)\nthis:\n  \\<forall>twoC\\<in>two_chain_typeII.\n     continuous_on (cubeImage twoC) (\\<lambda>a. F a \\<bullet> j)\n\ngoal (1 subgoal):\n 1. line_integral_exists F {j} \\<gamma>", "show \"line_integral_exists F {j} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral_exists F {j} \\<gamma>", "using that T2.valid_typeII_div\n          boundary_of_region_is_subset_of_partition_boundaries(2)"], ["proof (prove)\nusing this:\n  (k, \\<gamma>) \\<in> one_chain_typeII\n  valid_typeII_division s two_chain_typeII\n  one_chain_typeII \\<subseteq> two_chain_boundary two_chain_typeII\n\ngoal (1 subgoal):\n 1. line_integral_exists F {j} \\<gamma>", "using green_typeII_cube.line_integral_exists_on_typeII_Cube_boundaries' assms valid_two_chain_def"], ["proof (prove)\nusing this:\n  (k, \\<gamma>) \\<in> one_chain_typeII\n  valid_typeII_division s two_chain_typeII\n  one_chain_typeII \\<subseteq> two_chain_boundary two_chain_typeII\n  \\<lbrakk>green_typeII_cube ?i ?j ?twoC ?F;\n   (?k, ?\\<gamma>) \\<in> boundary ?twoC\\<rbrakk>\n  \\<Longrightarrow> line_integral_exists ?F {?j} ?\\<gamma>\n  gen_division s (cubeImage ` two_chain_typeI)\n  gen_division s (cubeImage ` two_chain_typeII)\n  two_chain_horizontal_boundary two_chain_typeI \\<subseteq> one_chain_typeI\n  two_chain_vertical_boundary two_chain_typeII \\<subseteq> one_chain_typeII\n  one_chain_typeI \\<subseteq> two_chain_boundary two_chain_typeI\n  one_chain_typeII \\<subseteq> two_chain_boundary two_chain_typeII\n  common_boundary_sudivision_exists one_chain_typeI one_chain_typeII\n  valid_two_chain ?twoChain \\<equiv>\n  (\\<forall>twoCube\\<in>?twoChain. valid_two_cube twoCube) \\<and>\n  pairwise (\\<lambda>c1 c2. boundary c1 \\<inter> boundary c2 = {})\n   ?twoChain \\<and>\n  inj_on cubeImage ?twoChain\n\ngoal (1 subgoal):\n 1. line_integral_exists F {j} \\<gamma>", "apply (simp add: two_chain_boundary_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(k, \\<gamma>) \\<in> one_chain_typeII;\n     (\\<forall>twoCube\\<in>two_chain_typeII. typeII_twoCube twoCube) \\<and>\n     (\\<forall>x\\<in>two_chain_typeII. valid_two_cube x) \\<and>\n     pairwise (\\<lambda>c1 c2. boundary c1 \\<inter> boundary c2 = {})\n      two_chain_typeII \\<and>\n     inj_on cubeImage two_chain_typeII;\n     one_chain_typeII \\<subseteq> \\<Union> (boundary ` two_chain_typeII);\n     \\<And>i j twoC F k \\<gamma>.\n        \\<lbrakk>green_typeII_cube i j twoC F;\n         (k, \\<gamma>) \\<in> boundary twoC\\<rbrakk>\n        \\<Longrightarrow> line_integral_exists F {j} \\<gamma>;\n     gen_division s (cubeImage ` two_chain_typeI);\n     gen_division s (cubeImage ` two_chain_typeII);\n     two_chain_horizontal_boundary two_chain_typeI\n     \\<subseteq> one_chain_typeI;\n     two_chain_vertical_boundary two_chain_typeII\n     \\<subseteq> one_chain_typeII;\n     one_chain_typeI \\<subseteq> \\<Union> (boundary ` two_chain_typeI);\n     common_boundary_sudivision_exists one_chain_typeI one_chain_typeII;\n     \\<And>twoChain.\n        valid_two_chain twoChain \\<equiv>\n        (\\<forall>x\\<in>twoChain. valid_two_cube x) \\<and>\n        pairwise (\\<lambda>c1 c2. boundary c1 \\<inter> boundary c2 = {})\n         twoChain \\<and>\n        inj_on cubeImage twoChain\\<rbrakk>\n    \\<Longrightarrow> line_integral_exists F {j} \\<gamma>", "by (metis T2.typeII_cube_line_integral_exists_boundary case_prodD subset_iff that two_chain_boundary_def)"], ["proof (state)\nthis:\n  line_integral_exists F {j} \\<gamma>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (?k, ?\\<gamma>) \\<in> one_chain_typeII \\<Longrightarrow>\n  line_integral_exists F {j} ?\\<gamma>\n\ngoal (3 subgoals):\n 1. one_chain_line_integral F {j} one_chain_typeI =\n    one_chain_line_integral F {j} one_chain_typeII\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n       line_integral_exists F {j} \\<gamma>\n 3. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n       line_integral_exists F {j} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  (?k, ?\\<gamma>) \\<in> one_chain_typeII \\<Longrightarrow>\n  line_integral_exists F {j} ?\\<gamma>", "show ii: \" \\<forall>(k,\\<gamma>)\\<in>one_chain_typeII. line_integral_exists F {j} \\<gamma>\""], ["proof (prove)\nusing this:\n  (?k, ?\\<gamma>) \\<in> one_chain_typeII \\<Longrightarrow>\n  line_integral_exists F {j} ?\\<gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n       line_integral_exists F {j} \\<gamma>", "by auto"], ["proof (state)\nthis:\n  \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n     line_integral_exists F {j} \\<gamma>\n\ngoal (2 subgoals):\n 1. one_chain_line_integral F {j} one_chain_typeI =\n    one_chain_line_integral F {j} one_chain_typeII\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n       line_integral_exists F {j} \\<gamma>", "have \"finite (two_chain_boundary two_chain_typeI)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (two_chain_boundary two_chain_typeI)", "unfolding two_chain_boundary_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (\\<Union> (boundary ` two_chain_typeI))", "proof (rule finite_UN_I)"], ["proof (state)\ngoal (2 subgoals):\n 1. finite two_chain_typeI\n 2. \\<And>a. a \\<in> two_chain_typeI \\<Longrightarrow> finite (boundary a)", "show \"finite two_chain_typeI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite two_chain_typeI", "using T1.valid_typeI_div finite_imageD gen_division_def valid_two_chain_def"], ["proof (prove)\nusing this:\n  valid_typeI_division s two_chain_typeI\n  \\<lbrakk>finite (?f ` ?A); inj_on ?f ?A\\<rbrakk>\n  \\<Longrightarrow> finite ?A\n  gen_division ?s ?S \\<equiv>\n  finite ?S \\<and>\n  \\<Union> ?S = ?s \\<and>\n  pairwise (\\<lambda>X Y. negligible (X \\<inter> Y)) ?S\n  valid_two_chain ?twoChain \\<equiv>\n  (\\<forall>twoCube\\<in>?twoChain. valid_two_cube twoCube) \\<and>\n  pairwise (\\<lambda>c1 c2. boundary c1 \\<inter> boundary c2 = {})\n   ?twoChain \\<and>\n  inj_on cubeImage ?twoChain\n\ngoal (1 subgoal):\n 1. finite two_chain_typeI", "by auto"], ["proof (state)\nthis:\n  finite two_chain_typeI\n\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> two_chain_typeI \\<Longrightarrow> finite (boundary a)", "show \"\\<And>a. a \\<in> two_chain_typeI \\<Longrightarrow> finite (boundary a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> two_chain_typeI \\<Longrightarrow> finite (boundary a)", "by (simp add: boundary_def horizontal_boundary_def vertical_boundary_def)"], ["proof (state)\nthis:\n  ?a \\<in> two_chain_typeI \\<Longrightarrow> finite (boundary ?a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finite (two_chain_boundary two_chain_typeI)\n\ngoal (2 subgoals):\n 1. one_chain_line_integral F {j} one_chain_typeI =\n    one_chain_line_integral F {j} one_chain_typeII\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n       line_integral_exists F {j} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  finite (two_chain_boundary two_chain_typeI)", "have iv: \"finite one_chain_typeI\""], ["proof (prove)\nusing this:\n  finite (two_chain_boundary two_chain_typeI)\n\ngoal (1 subgoal):\n 1. finite one_chain_typeI", "using boundary_of_region_is_subset_of_partition_boundaries(1) finite_subset"], ["proof (prove)\nusing this:\n  finite (two_chain_boundary two_chain_typeI)\n  one_chain_typeI \\<subseteq> two_chain_boundary two_chain_typeI\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite one_chain_typeI", "by fastforce"], ["proof (state)\nthis:\n  finite one_chain_typeI\n\ngoal (2 subgoals):\n 1. one_chain_line_integral F {j} one_chain_typeI =\n    one_chain_line_integral F {j} one_chain_typeII\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n       line_integral_exists F {j} \\<gamma>", "have \"finite (two_chain_boundary two_chain_typeII)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (two_chain_boundary two_chain_typeII)", "unfolding two_chain_boundary_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (\\<Union> (boundary ` two_chain_typeII))", "proof (rule finite_UN_I)"], ["proof (state)\ngoal (2 subgoals):\n 1. finite two_chain_typeII\n 2. \\<And>a. a \\<in> two_chain_typeII \\<Longrightarrow> finite (boundary a)", "show \"finite two_chain_typeII\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite two_chain_typeII", "using T2.valid_typeII_div finite_imageD gen_division_def valid_two_chain_def"], ["proof (prove)\nusing this:\n  valid_typeII_division s two_chain_typeII\n  \\<lbrakk>finite (?f ` ?A); inj_on ?f ?A\\<rbrakk>\n  \\<Longrightarrow> finite ?A\n  gen_division ?s ?S \\<equiv>\n  finite ?S \\<and>\n  \\<Union> ?S = ?s \\<and>\n  pairwise (\\<lambda>X Y. negligible (X \\<inter> Y)) ?S\n  valid_two_chain ?twoChain \\<equiv>\n  (\\<forall>twoCube\\<in>?twoChain. valid_two_cube twoCube) \\<and>\n  pairwise (\\<lambda>c1 c2. boundary c1 \\<inter> boundary c2 = {})\n   ?twoChain \\<and>\n  inj_on cubeImage ?twoChain\n\ngoal (1 subgoal):\n 1. finite two_chain_typeII", "by auto"], ["proof (state)\nthis:\n  finite two_chain_typeII\n\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> two_chain_typeII \\<Longrightarrow> finite (boundary a)", "show \"\\<And>a. a \\<in> two_chain_typeII \\<Longrightarrow> finite (boundary a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> two_chain_typeII \\<Longrightarrow> finite (boundary a)", "by (simp add: boundary_def horizontal_boundary_def vertical_boundary_def)"], ["proof (state)\nthis:\n  ?a \\<in> two_chain_typeII \\<Longrightarrow> finite (boundary ?a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finite (two_chain_boundary two_chain_typeII)\n\ngoal (2 subgoals):\n 1. one_chain_line_integral F {j} one_chain_typeI =\n    one_chain_line_integral F {j} one_chain_typeII\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n       line_integral_exists F {j} \\<gamma>", "then"], ["proof (chain)\npicking this:\n  finite (two_chain_boundary two_chain_typeII)", "have iv': \"finite one_chain_typeII\""], ["proof (prove)\nusing this:\n  finite (two_chain_boundary two_chain_typeII)\n\ngoal (1 subgoal):\n 1. finite one_chain_typeII", "using boundary_of_region_is_subset_of_partition_boundaries(2) finite_subset"], ["proof (prove)\nusing this:\n  finite (two_chain_boundary two_chain_typeII)\n  one_chain_typeII \\<subseteq> two_chain_boundary two_chain_typeII\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite one_chain_typeII", "by fastforce"], ["proof (state)\nthis:\n  finite one_chain_typeII\n\ngoal (2 subgoals):\n 1. one_chain_line_integral F {j} one_chain_typeI =\n    one_chain_line_integral F {j} one_chain_typeII\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n       line_integral_exists F {j} \\<gamma>", "have typeII_and_typI_one_chains_have_common_subdiv:\n      \"common_boundary_sudivision_exists one_chain_typeII one_chain_typeI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. common_boundary_sudivision_exists one_chain_typeII one_chain_typeI", "using typeI_and_typII_one_chains_have_common_subdiv\n        common_boundary_sudivision_commutative"], ["proof (prove)\nusing this:\n  common_boundary_sudivision_exists one_chain_typeI one_chain_typeII\n  common_boundary_sudivision_exists ?one_chain1.0 ?one_chain2.0 =\n  common_boundary_sudivision_exists ?one_chain2.0 ?one_chain1.0\n\ngoal (1 subgoal):\n 1. common_boundary_sudivision_exists one_chain_typeII one_chain_typeI", "by auto"], ["proof (state)\nthis:\n  common_boundary_sudivision_exists one_chain_typeII one_chain_typeI\n\ngoal (2 subgoals):\n 1. one_chain_line_integral F {j} one_chain_typeI =\n    one_chain_line_integral F {j} one_chain_typeII\n 2. \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n       line_integral_exists F {j} \\<gamma>", "show \"one_chain_line_integral F {j} one_chain_typeI = one_chain_line_integral F {j} one_chain_typeII\" \n          \"\\<forall>(k, \\<gamma>)\\<in>one_chain_typeI. line_integral_exists F {j} \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j} one_chain_typeI =\n    one_chain_line_integral F {j} one_chain_typeII &&&\n    \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n       line_integral_exists F {j} \\<gamma>", "using common_subdivision_imp_eq_line_integral[OF typeII_and_typI_one_chains_have_common_subdiv\n          i' i ii iv' iv] ii"], ["proof (prove)\nusing this:\n  finite {j} \\<Longrightarrow>\n  one_chain_line_integral F {j} one_chain_typeII =\n  one_chain_line_integral F {j} one_chain_typeI\n  finite {j} \\<Longrightarrow>\n  \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n     line_integral_exists F {j} \\<gamma>\n  \\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n     line_integral_exists F {j} \\<gamma>\n\ngoal (1 subgoal):\n 1. one_chain_line_integral F {j} one_chain_typeI =\n    one_chain_line_integral F {j} one_chain_typeII &&&\n    \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n       line_integral_exists F {j} \\<gamma>", "by auto"], ["proof (state)\nthis:\n  one_chain_line_integral F {j} one_chain_typeI =\n  one_chain_line_integral F {j} one_chain_typeII\n  \\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n     line_integral_exists F {j} \\<gamma>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  one_chain_line_integral F {j} one_chain_typeI =\n  one_chain_line_integral F {j} one_chain_typeII \\<and>\n  (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n      line_integral_exists F {j} \\<gamma>) \\<and>\n  (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n      line_integral_exists F {j} \\<gamma>)\n\ngoal (2 subgoals):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeI\n 2. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeII", "have typeI_regions_integral:\n    \"integral s (\\<lambda>x. - ?F_b' x) = one_chain_line_integral F {i} one_chain_typeI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i} one_chain_typeI", "using T1.GreenThm_typeI_divisible_region_boundary gen_divisions(1)\n         typeI_two_cubes_trace_horizontal_boundaries\n        boundary_of_region_is_subset_of_partition_boundaries(1)"], ["proof (prove)\nusing this:\n  \\<lbrakk>gen_division s (cubeImage ` two_chain_typeI);\n   two_chain_horizontal_boundary two_chain_typeI \\<subseteq> ?\\<gamma>;\n   ?\\<gamma> \\<subseteq> two_chain_boundary two_chain_typeI\\<rbrakk>\n  \\<Longrightarrow> integral s\n                     (\\<lambda>x.\n                         - partial_vector_derivative\n                            (\\<lambda>a. F a \\<bullet> i) j x) =\n                    one_chain_line_integral F {i} ?\\<gamma>\n  gen_division s (cubeImage ` two_chain_typeI)\n  two_chain_horizontal_boundary two_chain_typeI \\<subseteq> one_chain_typeI\n  one_chain_typeI \\<subseteq> two_chain_boundary two_chain_typeI\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i} one_chain_typeI", "by auto"], ["proof (state)\nthis:\n  integral s\n   (\\<lambda>x.\n       - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n  one_chain_line_integral F {i} one_chain_typeI\n\ngoal (2 subgoals):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeI\n 2. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeII", "have typeII_regions_integral:\n    \"integral s ?F_a' = one_chain_line_integral F {j} one_chain_typeII\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} one_chain_typeII", "using T2.GreenThm_typeII_divisible_region_boundary gen_divisions(2) \n        typeII_two_cubes_trace_vertical_boundaries\n        boundary_of_region_is_subset_of_partition_boundaries(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>two_chain_vertical_boundary two_chain_typeII\n           \\<subseteq> ?\\<gamma>;\n   ?\\<gamma> \\<subseteq> two_chain_boundary two_chain_typeII\\<rbrakk>\n  \\<Longrightarrow> integral s\n                     (partial_vector_derivative\n                       (\\<lambda>x. F x \\<bullet> j) i) =\n                    one_chain_line_integral F {j} ?\\<gamma>\n  gen_division s (cubeImage ` two_chain_typeII)\n  two_chain_vertical_boundary two_chain_typeII \\<subseteq> one_chain_typeII\n  one_chain_typeII \\<subseteq> two_chain_boundary two_chain_typeII\n\ngoal (1 subgoal):\n 1. integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n    one_chain_line_integral F {j} one_chain_typeII", "by auto"], ["proof (state)\nthis:\n  integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n  one_chain_line_integral F {j} one_chain_typeII\n\ngoal (2 subgoals):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeI\n 2. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeII", "have line_integral_dist:\n    \"one_chain_line_integral F {i, j} one_chain_typeI = one_chain_line_integral F {i} one_chain_typeI + one_chain_line_integral F {j} one_chain_typeI \\<and>\n     one_chain_line_integral F {i, j} one_chain_typeII = one_chain_line_integral F {i} one_chain_typeII + one_chain_line_integral F {j} one_chain_typeII\""], ["proof (prove)\ngoal (1 subgoal):\n 1. one_chain_line_integral F {i, j} one_chain_typeI =\n    one_chain_line_integral F {i} one_chain_typeI +\n    one_chain_line_integral F {j} one_chain_typeI \\<and>\n    one_chain_line_integral F {i, j} one_chain_typeII =\n    one_chain_line_integral F {i} one_chain_typeII +\n    one_chain_line_integral F {j} one_chain_typeII", "proof (simp add: one_chain_line_integral_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>one_chain_typeI.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>x\\<in>one_chain_typeI.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n    (\\<Sum>x\\<in>one_chain_typeI.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) \\<and>\n    (\\<Sum>x\\<in>one_chain_typeII.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>x\\<in>one_chain_typeII.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n    (\\<Sum>x\\<in>one_chain_typeII.\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)", "have line_integral_distrib:\n      \"(\\<Sum>(k,g)\\<in>one_chain_typeI. k * line_integral F {i, j} g) =\n       (\\<Sum>(k,g)\\<in>one_chain_typeI. k * line_integral F {i} g +  k * line_integral F {j} g) \\<and>\n       (\\<Sum>(k,g)\\<in>one_chain_typeII. k * line_integral F {i, j} g) =\n       (\\<Sum>(k,g)\\<in>one_chain_typeII. k * line_integral F {i} g +  k * line_integral F {j} g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g) \\<and>\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g) \\<and>\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g)", "have 0: \"k * line_integral F {i, j} g = k * line_integral F {i} g +  k * line_integral F {j} g\"\n        if \"(k,g) \\<in> one_chain_typeII\" for k g"], ["proof (prove)\ngoal (1 subgoal):\n 1. real_of_int k * line_integral F {i, j} g =\n    real_of_int k * line_integral F {i} g +\n    real_of_int k * line_integral F {j} g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. real_of_int k * line_integral F {i, j} g =\n    real_of_int k * line_integral F {i} g +\n    real_of_int k * line_integral F {j} g", "have \"line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g", "have finite: \"finite {i, j}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {i, j}", "by auto"], ["proof (state)\nthis:\n  finite {i, j}\n\ngoal (1 subgoal):\n 1. line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g", "have line_integral_all: \"\\<forall>i\\<in>{i, j}. line_integral_exists F {i} g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>{i, j}. line_integral_exists F {i} g", "using one_chain_i_integrals one_chain_j_integrals that"], ["proof (prove)\nusing this:\n  one_chain_line_integral F {i} one_chain_typeI =\n  one_chain_line_integral F {i} one_chain_typeII \\<and>\n  (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n      line_integral_exists F {i} \\<gamma>) \\<and>\n  (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n      line_integral_exists F {i} \\<gamma>)\n  one_chain_line_integral F {j} one_chain_typeI =\n  one_chain_line_integral F {j} one_chain_typeII \\<and>\n  (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n      line_integral_exists F {j} \\<gamma>) \\<and>\n  (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n      line_integral_exists F {j} \\<gamma>)\n  (k, g) \\<in> one_chain_typeII\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>{i, j}. line_integral_exists F {i} g", "by auto"], ["proof (state)\nthis:\n  \\<forall>i\\<in>{i, j}. line_integral_exists F {i} g\n\ngoal (1 subgoal):\n 1. line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g", "using line_integral_sum_gen[OF finite] R2.i_is_x_axis R2.j_is_y_axis line_integral_all"], ["proof (prove)\nusing this:\n  \\<lbrakk>line_integral_exists ?F ?basis1.0 ?\\<gamma>;\n   line_integral_exists ?F ?basis2.0 ?\\<gamma>;\n   ?basis1.0 \\<union> ?basis2.0 = {i, j};\n   ?basis1.0 \\<inter> ?basis2.0 = {}\\<rbrakk>\n  \\<Longrightarrow> line_integral ?F {i, j} ?\\<gamma> =\n                    line_integral ?F ?basis1.0 ?\\<gamma> +\n                    line_integral ?F ?basis2.0 ?\\<gamma>\n  \\<lbrakk>line_integral_exists ?F ?basis1.0 ?\\<gamma>;\n   line_integral_exists ?F ?basis2.0 ?\\<gamma>;\n   ?basis1.0 \\<union> ?basis2.0 = {i, j};\n   ?basis1.0 \\<inter> ?basis2.0 = {}\\<rbrakk>\n  \\<Longrightarrow> line_integral_exists ?F {i, j} ?\\<gamma>\n  i = (1, 0)\n  j = (0, 1)\n  \\<forall>i\\<in>{i, j}. line_integral_exists F {i} g\n\ngoal (1 subgoal):\n 1. line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g", "by auto"], ["proof (state)\nthis:\n  line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g\n\ngoal (1 subgoal):\n 1. real_of_int k * line_integral F {i, j} g =\n    real_of_int k * line_integral F {i} g +\n    real_of_int k * line_integral F {j} g", "then"], ["proof (chain)\npicking this:\n  line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g", "show \"k * line_integral F {i, j} g = k * line_integral F {i} g + k * line_integral F {j} g\""], ["proof (prove)\nusing this:\n  line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g\n\ngoal (1 subgoal):\n 1. real_of_int k * line_integral F {i, j} g =\n    real_of_int k * line_integral F {i} g +\n    real_of_int k * line_integral F {j} g", "by (simp add: distrib_left)"], ["proof (state)\nthis:\n  real_of_int k * line_integral F {i, j} g =\n  real_of_int k * line_integral F {i} g +\n  real_of_int k * line_integral F {j} g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (?k, ?g) \\<in> one_chain_typeII \\<Longrightarrow>\n  real_of_int ?k * line_integral F {i, j} ?g =\n  real_of_int ?k * line_integral F {i} ?g +\n  real_of_int ?k * line_integral F {j} ?g\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g) \\<and>\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g)", "have \"k * line_integral F {i, j} g = k * line_integral F {i} g +  k * line_integral F {j} g\"\n        if \"(k,g) \\<in> one_chain_typeI\" for k g"], ["proof (prove)\ngoal (1 subgoal):\n 1. real_of_int k * line_integral F {i, j} g =\n    real_of_int k * line_integral F {i} g +\n    real_of_int k * line_integral F {j} g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. real_of_int k * line_integral F {i, j} g =\n    real_of_int k * line_integral F {i} g +\n    real_of_int k * line_integral F {j} g", "have finite: \"finite {i, j}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {i, j}", "by auto"], ["proof (state)\nthis:\n  finite {i, j}\n\ngoal (1 subgoal):\n 1. real_of_int k * line_integral F {i, j} g =\n    real_of_int k * line_integral F {i} g +\n    real_of_int k * line_integral F {j} g", "have line_integral_all: \"\\<forall>i\\<in>{i, j}. line_integral_exists F {i} g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>{i, j}. line_integral_exists F {i} g", "using one_chain_i_integrals one_chain_j_integrals that"], ["proof (prove)\nusing this:\n  one_chain_line_integral F {i} one_chain_typeI =\n  one_chain_line_integral F {i} one_chain_typeII \\<and>\n  (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n      line_integral_exists F {i} \\<gamma>) \\<and>\n  (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n      line_integral_exists F {i} \\<gamma>)\n  one_chain_line_integral F {j} one_chain_typeI =\n  one_chain_line_integral F {j} one_chain_typeII \\<and>\n  (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n      line_integral_exists F {j} \\<gamma>) \\<and>\n  (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n      line_integral_exists F {j} \\<gamma>)\n  (k, g) \\<in> one_chain_typeI\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>{i, j}. line_integral_exists F {i} g", "by auto"], ["proof (state)\nthis:\n  \\<forall>i\\<in>{i, j}. line_integral_exists F {i} g\n\ngoal (1 subgoal):\n 1. real_of_int k * line_integral F {i, j} g =\n    real_of_int k * line_integral F {i} g +\n    real_of_int k * line_integral F {j} g", "have \"line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g", "using line_integral_sum_gen[OF finite] R2.i_is_x_axis R2.j_is_y_axis line_integral_all"], ["proof (prove)\nusing this:\n  \\<lbrakk>line_integral_exists ?F ?basis1.0 ?\\<gamma>;\n   line_integral_exists ?F ?basis2.0 ?\\<gamma>;\n   ?basis1.0 \\<union> ?basis2.0 = {i, j};\n   ?basis1.0 \\<inter> ?basis2.0 = {}\\<rbrakk>\n  \\<Longrightarrow> line_integral ?F {i, j} ?\\<gamma> =\n                    line_integral ?F ?basis1.0 ?\\<gamma> +\n                    line_integral ?F ?basis2.0 ?\\<gamma>\n  \\<lbrakk>line_integral_exists ?F ?basis1.0 ?\\<gamma>;\n   line_integral_exists ?F ?basis2.0 ?\\<gamma>;\n   ?basis1.0 \\<union> ?basis2.0 = {i, j};\n   ?basis1.0 \\<inter> ?basis2.0 = {}\\<rbrakk>\n  \\<Longrightarrow> line_integral_exists ?F {i, j} ?\\<gamma>\n  i = (1, 0)\n  j = (0, 1)\n  \\<forall>i\\<in>{i, j}. line_integral_exists F {i} g\n\ngoal (1 subgoal):\n 1. line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g", "by auto"], ["proof (state)\nthis:\n  line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g\n\ngoal (1 subgoal):\n 1. real_of_int k * line_integral F {i, j} g =\n    real_of_int k * line_integral F {i} g +\n    real_of_int k * line_integral F {j} g", "then"], ["proof (chain)\npicking this:\n  line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g", "show \"k * line_integral F {i, j} g = k * line_integral F {i} g + k * line_integral F {j} g\""], ["proof (prove)\nusing this:\n  line_integral F {i, j} g = line_integral F {i} g + line_integral F {j} g\n\ngoal (1 subgoal):\n 1. real_of_int k * line_integral F {i, j} g =\n    real_of_int k * line_integral F {i} g +\n    real_of_int k * line_integral F {j} g", "by (simp add: distrib_left)"], ["proof (state)\nthis:\n  real_of_int k * line_integral F {i, j} g =\n  real_of_int k * line_integral F {i} g +\n  real_of_int k * line_integral F {j} g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (?k, ?g) \\<in> one_chain_typeI \\<Longrightarrow>\n  real_of_int ?k * line_integral F {i, j} ?g =\n  real_of_int ?k * line_integral F {i} ?g +\n  real_of_int ?k * line_integral F {j} ?g\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g) \\<and>\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g)", "then"], ["proof (chain)\npicking this:\n  (?k, ?g) \\<in> one_chain_typeI \\<Longrightarrow>\n  real_of_int ?k * line_integral F {i, j} ?g =\n  real_of_int ?k * line_integral F {i} ?g +\n  real_of_int ?k * line_integral F {j} ?g", "show ?thesis"], ["proof (prove)\nusing this:\n  (?k, ?g) \\<in> one_chain_typeI \\<Longrightarrow>\n  real_of_int ?k * line_integral F {i, j} ?g =\n  real_of_int ?k * line_integral F {i} ?g +\n  real_of_int ?k * line_integral F {j} ?g\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g) \\<and>\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g)", "using 0"], ["proof (prove)\nusing this:\n  (?k, ?g) \\<in> one_chain_typeI \\<Longrightarrow>\n  real_of_int ?k * line_integral F {i, j} ?g =\n  real_of_int ?k * line_integral F {i} ?g +\n  real_of_int ?k * line_integral F {j} ?g\n  (?k, ?g) \\<in> one_chain_typeII \\<Longrightarrow>\n  real_of_int ?k * line_integral F {i, j} ?g =\n  real_of_int ?k * line_integral F {i} ?g +\n  real_of_int ?k * line_integral F {j} ?g\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g) \\<and>\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g)", "by (smt sum.cong split_cong)"], ["proof (state)\nthis:\n  (\\<Sum>(k, g)\\<in>one_chain_typeI.\n     real_of_int k * line_integral F {i, j} g) =\n  (\\<Sum>(k, g)\\<in>one_chain_typeI.\n     real_of_int k * line_integral F {i} g +\n     real_of_int k * line_integral F {j} g) \\<and>\n  (\\<Sum>(k, g)\\<in>one_chain_typeII.\n     real_of_int k * line_integral F {i, j} g) =\n  (\\<Sum>(k, g)\\<in>one_chain_typeII.\n     real_of_int k * line_integral F {i} g +\n     real_of_int k * line_integral F {j} g)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>(k, g)\\<in>one_chain_typeI.\n     real_of_int k * line_integral F {i, j} g) =\n  (\\<Sum>(k, g)\\<in>one_chain_typeI.\n     real_of_int k * line_integral F {i} g +\n     real_of_int k * line_integral F {j} g) \\<and>\n  (\\<Sum>(k, g)\\<in>one_chain_typeII.\n     real_of_int k * line_integral F {i, j} g) =\n  (\\<Sum>(k, g)\\<in>one_chain_typeII.\n     real_of_int k * line_integral F {i} g +\n     real_of_int k * line_integral F {j} g)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>one_chain_typeI.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>x\\<in>one_chain_typeI.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n    (\\<Sum>x\\<in>one_chain_typeI.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g) \\<and>\n    (\\<Sum>x\\<in>one_chain_typeII.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>x\\<in>one_chain_typeII.\n       case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n    (\\<Sum>x\\<in>one_chain_typeII.\n       case x of (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)", "show \"(\\<Sum>(k::int, g)\\<in>one_chain_typeI. k * line_integral F {i, j} g) =\n          (\\<Sum>(k, g)\\<in>one_chain_typeI. k * line_integral F {i} g) + (\\<Sum>(k::int, g)\\<in>one_chain_typeI. k * line_integral F {j} g) \\<and>\n          (\\<Sum>(k::int, g)\\<in>one_chain_typeII. k * line_integral F {i, j} g) =\n          (\\<Sum>(k, g)\\<in>one_chain_typeII. k * line_integral F {i} g) + (\\<Sum>(k::int, g)\\<in>one_chain_typeII. k * line_integral F {j} g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i} g) +\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {j} g) \\<and>\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i} g) +\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {j} g)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i} g) +\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {j} g) \\<and>\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i} g) +\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {j} g)", "have 0: \"(\\<lambda>x. (case x of (k::int, g) \\<Rightarrow> k * line_integral F {i} g) + (case x of (k::int, g) \\<Rightarrow> k * line_integral F {j} g)) =\n                                  (\\<lambda>x. (case x of (k::int, g) \\<Rightarrow> (k * line_integral F {i} g) +  k * line_integral F {j} g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (case x of\n         (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n        (case x of\n         (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n    (\\<lambda>x.\n        case x of\n        (k, g) \\<Rightarrow>\n          real_of_int k * line_integral F {i} g +\n          real_of_int k * line_integral F {j} g)", "using comm_monoid_add_class.sum.distrib"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>?A. ?g x + ?h x) = sum ?g ?A + sum ?h ?A\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (case x of\n         (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n        (case x of\n         (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n    (\\<lambda>x.\n        case x of\n        (k, g) \\<Rightarrow>\n          real_of_int k * line_integral F {i} g +\n          real_of_int k * line_integral F {j} g)", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      (case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n      (case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n  (\\<lambda>x.\n      case x of\n      (k, g) \\<Rightarrow>\n        real_of_int k * line_integral F {i} g +\n        real_of_int k * line_integral F {j} g)\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i} g) +\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {j} g) \\<and>\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i} g) +\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {j} g)", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x.\n      (case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n      (case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n  (\\<lambda>x.\n      case x of\n      (k, g) \\<Rightarrow>\n        real_of_int k * line_integral F {i} g +\n        real_of_int k * line_integral F {j} g)", "have 1: \"(\\<Sum>x\\<in>one_chain_typeI. (case x of (k::int, g) \\<Rightarrow> k * line_integral F {i} g) + (case x of (k::int, g) \\<Rightarrow> k * line_integral F {j} g)) =\n                    (\\<Sum>x\\<in>one_chain_typeI. (case x of (k::int, g) \\<Rightarrow>( k * line_integral F {i} g + k * line_integral F {j} g)))\""], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n      (case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n  (\\<lambda>x.\n      case x of\n      (k, g) \\<Rightarrow>\n        real_of_int k * line_integral F {i} g +\n        real_of_int k * line_integral F {j} g)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>one_chain_typeI.\n       (case x of\n        (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n       (case x of\n        (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n    (\\<Sum>x\\<in>one_chain_typeI.\n       case x of\n       (k, g) \\<Rightarrow>\n         real_of_int k * line_integral F {i} g +\n         real_of_int k * line_integral F {j} g)", "by presburger"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>one_chain_typeI.\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n  (\\<Sum>x\\<in>one_chain_typeI.\n     case x of\n     (k, g) \\<Rightarrow>\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g)\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i} g) +\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {j} g) \\<and>\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i} g) +\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {j} g)", "have \"(\\<Sum>x\\<in>one_chain_typeII. (case x of (k, g) \\<Rightarrow> k * line_integral F {i} g) + (case x of (k, g) \\<Rightarrow> k * line_integral F {j} g)) =\n            (\\<Sum>x\\<in>one_chain_typeII. (case x of (k, g) \\<Rightarrow>( k * line_integral F {i} g + k * line_integral F {j} g)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>one_chain_typeII.\n       (case x of\n        (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n       (case x of\n        (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n    (\\<Sum>x\\<in>one_chain_typeII.\n       case x of\n       (k, g) \\<Rightarrow>\n         real_of_int k * line_integral F {i} g +\n         real_of_int k * line_integral F {j} g)", "using 0"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n      (case x of\n       (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n  (\\<lambda>x.\n      case x of\n      (k, g) \\<Rightarrow>\n        real_of_int k * line_integral F {i} g +\n        real_of_int k * line_integral F {j} g)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>one_chain_typeII.\n       (case x of\n        (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n       (case x of\n        (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n    (\\<Sum>x\\<in>one_chain_typeII.\n       case x of\n       (k, g) \\<Rightarrow>\n         real_of_int k * line_integral F {i} g +\n         real_of_int k * line_integral F {j} g)", "by presburger"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>one_chain_typeII.\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n  (\\<Sum>x\\<in>one_chain_typeII.\n     case x of\n     (k, g) \\<Rightarrow>\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g)\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i} g) +\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {j} g) \\<and>\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i} g) +\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {j} g)", "then"], ["proof (chain)\npicking this:\n  (\\<Sum>x\\<in>one_chain_typeII.\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n  (\\<Sum>x\\<in>one_chain_typeII.\n     case x of\n     (k, g) \\<Rightarrow>\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>one_chain_typeII.\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n  (\\<Sum>x\\<in>one_chain_typeII.\n     case x of\n     (k, g) \\<Rightarrow>\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g)\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i} g) +\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {j} g) \\<and>\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i} g) +\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {j} g)", "using sum.distrib[of \"(\\<lambda>(k, g).  k * line_integral F {i} g)\" \"(\\<lambda>(k, g).  k * line_integral F {j} g)\" \"one_chain_typeI\"]\n          sum.distrib[of \"(\\<lambda>(k, g).  k * line_integral F {i} g)\" \"(\\<lambda>(k, g).  k * line_integral F {j} g)\" \"one_chain_typeII\"]\n          line_integral_distrib\n          1"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>one_chain_typeII.\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n  (\\<Sum>x\\<in>one_chain_typeII.\n     case x of\n     (k, g) \\<Rightarrow>\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g)\n  (\\<Sum>x\\<in>one_chain_typeI.\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n  (\\<Sum>(k, g)\\<in>one_chain_typeI.\n     real_of_int k * line_integral F {i} g) +\n  (\\<Sum>(k, g)\\<in>one_chain_typeI. real_of_int k * line_integral F {j} g)\n  (\\<Sum>x\\<in>one_chain_typeII.\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n  (\\<Sum>(k, g)\\<in>one_chain_typeII.\n     real_of_int k * line_integral F {i} g) +\n  (\\<Sum>(k, g)\\<in>one_chain_typeII. real_of_int k * line_integral F {j} g)\n  (\\<Sum>(k, g)\\<in>one_chain_typeI.\n     real_of_int k * line_integral F {i, j} g) =\n  (\\<Sum>(k, g)\\<in>one_chain_typeI.\n     real_of_int k * line_integral F {i} g +\n     real_of_int k * line_integral F {j} g) \\<and>\n  (\\<Sum>(k, g)\\<in>one_chain_typeII.\n     real_of_int k * line_integral F {i, j} g) =\n  (\\<Sum>(k, g)\\<in>one_chain_typeII.\n     real_of_int k * line_integral F {i} g +\n     real_of_int k * line_integral F {j} g)\n  (\\<Sum>x\\<in>one_chain_typeI.\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {i} g) +\n     (case x of\n      (k, g) \\<Rightarrow> real_of_int k * line_integral F {j} g)) =\n  (\\<Sum>x\\<in>one_chain_typeI.\n     case x of\n     (k, g) \\<Rightarrow>\n       real_of_int k * line_integral F {i} g +\n       real_of_int k * line_integral F {j} g)\n\ngoal (1 subgoal):\n 1. (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {i} g) +\n    (\\<Sum>(k, g)\\<in>one_chain_typeI.\n       real_of_int k * line_integral F {j} g) \\<and>\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i, j} g) =\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {i} g) +\n    (\\<Sum>(k, g)\\<in>one_chain_typeII.\n       real_of_int k * line_integral F {j} g)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>(k, g)\\<in>one_chain_typeI.\n     real_of_int k * line_integral F {i, j} g) =\n  (\\<Sum>(k, g)\\<in>one_chain_typeI.\n     real_of_int k * line_integral F {i} g) +\n  (\\<Sum>(k, g)\\<in>one_chain_typeI.\n     real_of_int k * line_integral F {j} g) \\<and>\n  (\\<Sum>(k, g)\\<in>one_chain_typeII.\n     real_of_int k * line_integral F {i, j} g) =\n  (\\<Sum>(k, g)\\<in>one_chain_typeII.\n     real_of_int k * line_integral F {i} g) +\n  (\\<Sum>(k, g)\\<in>one_chain_typeII. real_of_int k * line_integral F {j} g)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>(k, g)\\<in>one_chain_typeI.\n     real_of_int k * line_integral F {i, j} g) =\n  (\\<Sum>(k, g)\\<in>one_chain_typeI.\n     real_of_int k * line_integral F {i} g) +\n  (\\<Sum>(k, g)\\<in>one_chain_typeI.\n     real_of_int k * line_integral F {j} g) \\<and>\n  (\\<Sum>(k, g)\\<in>one_chain_typeII.\n     real_of_int k * line_integral F {i, j} g) =\n  (\\<Sum>(k, g)\\<in>one_chain_typeII.\n     real_of_int k * line_integral F {i} g) +\n  (\\<Sum>(k, g)\\<in>one_chain_typeII. real_of_int k * line_integral F {j} g)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  one_chain_line_integral F {i, j} one_chain_typeI =\n  one_chain_line_integral F {i} one_chain_typeI +\n  one_chain_line_integral F {j} one_chain_typeI \\<and>\n  one_chain_line_integral F {i, j} one_chain_typeII =\n  one_chain_line_integral F {i} one_chain_typeII +\n  one_chain_line_integral F {j} one_chain_typeII\n\ngoal (2 subgoals):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeI\n 2. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeII", "have integral_dis: \"integral s (\\<lambda>x. ?F_a' x - ?F_b' x) = integral s (\\<lambda>x. ?F_a' x) + integral s (\\<lambda>x. - ?F_b' x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) +\n    integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) +\n    integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x)", "have \"(?F_a' has_integral (\\<Sum>img\\<in>cubeImage ` two_chain_typeII. integral img ?F_a')) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n     (\\<Sum>img\\<in>cubeImage ` two_chain_typeII.\n        integral img\n         (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i)))\n     s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n     (\\<Sum>img\\<in>cubeImage ` two_chain_typeII.\n        integral img\n         (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i)))\n     s", "have \"(?F_a' has_integral integral (cubeImage twoCube) ?F_a') (cubeImage twoCube)\"\n        if \"twoCube \\<in> two_chain_typeII\" for twoCube"], ["proof (prove)\ngoal (1 subgoal):\n 1. (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n     integral (cubeImage twoCube)\n      (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))\n     (cubeImage twoCube)", "by (simp add: analytically_valid_imp_part_deriv_integrable_on T2.F_anal_valid has_integral_integrable_integral that)"], ["proof (state)\nthis:\n  ?twoCube \\<in> two_chain_typeII \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n   integral (cubeImage ?twoCube)\n    (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))\n   (cubeImage ?twoCube)\n\ngoal (1 subgoal):\n 1. (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n     (\\<Sum>img\\<in>cubeImage ` two_chain_typeII.\n        integral img\n         (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i)))\n     s", "then"], ["proof (chain)\npicking this:\n  ?twoCube \\<in> two_chain_typeII \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n   integral (cubeImage ?twoCube)\n    (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))\n   (cubeImage ?twoCube)", "have  \"\\<And>u. u \\<in> (cubeImage ` two_chain_typeII) \\<Longrightarrow> (?F_a' has_integral integral u ?F_a') u\""], ["proof (prove)\nusing this:\n  ?twoCube \\<in> two_chain_typeII \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n   integral (cubeImage ?twoCube)\n    (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))\n   (cubeImage ?twoCube)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> cubeImage ` two_chain_typeII \\<Longrightarrow>\n       (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j)\n         i has_integral\n        integral u\n         (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))\n        u", "by auto"], ["proof (state)\nthis:\n  ?u \\<in> cubeImage ` two_chain_typeII \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n   integral ?u (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))\n   ?u\n\ngoal (1 subgoal):\n 1. (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n     (\\<Sum>img\\<in>cubeImage ` two_chain_typeII.\n        integral img\n         (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i)))\n     s", "then"], ["proof (chain)\npicking this:\n  ?u \\<in> cubeImage ` two_chain_typeII \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n   integral ?u (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))\n   ?u", "show ?thesis"], ["proof (prove)\nusing this:\n  ?u \\<in> cubeImage ` two_chain_typeII \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n   integral ?u (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))\n   ?u\n\ngoal (1 subgoal):\n 1. (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n     (\\<Sum>img\\<in>cubeImage ` two_chain_typeII.\n        integral img\n         (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i)))\n     s", "using gen_divisions(2)"], ["proof (prove)\nusing this:\n  ?u \\<in> cubeImage ` two_chain_typeII \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n   integral ?u (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))\n   ?u\n  gen_division s (cubeImage ` two_chain_typeII)\n\ngoal (1 subgoal):\n 1. (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n     (\\<Sum>img\\<in>cubeImage ` two_chain_typeII.\n        integral img\n         (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i)))\n     s", "unfolding gen_division_def"], ["proof (prove)\nusing this:\n  ?u \\<in> cubeImage ` two_chain_typeII \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n   integral ?u (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i))\n   ?u\n  finite (cubeImage ` two_chain_typeII) \\<and>\n  \\<Union> (cubeImage ` two_chain_typeII) = s \\<and>\n  pairwise (\\<lambda>X Y. negligible (X \\<inter> Y))\n   (cubeImage ` two_chain_typeII)\n\ngoal (1 subgoal):\n 1. (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n     (\\<Sum>img\\<in>cubeImage ` two_chain_typeII.\n        integral img\n         (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i)))\n     s", "by (metis has_integral_Union)"], ["proof (state)\nthis:\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n   (\\<Sum>img\\<in>cubeImage ` two_chain_typeII.\n      integral img\n       (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i)))\n   s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n   (\\<Sum>img\\<in>cubeImage ` two_chain_typeII.\n      integral img\n       (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i)))\n   s\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) +\n    integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x)", "then"], ["proof (chain)\npicking this:\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n   (\\<Sum>img\\<in>cubeImage ` two_chain_typeII.\n      integral img\n       (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i)))\n   s", "have F_a'_integrable:\n      \"(?F_a' integrable_on s)\""], ["proof (prove)\nusing this:\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i has_integral\n   (\\<Sum>img\\<in>cubeImage ` two_chain_typeII.\n      integral img\n       (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i)))\n   s\n\ngoal (1 subgoal):\n 1. partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i integrable_on\n    s", "by auto"], ["proof (state)\nthis:\n  partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i integrable_on s\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) +\n    integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x)", "have \"(?F_b' has_integral (\\<Sum>img\\<in>cubeImage ` two_chain_typeI. integral img ?F_b')) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n     (\\<Sum>img\\<in>cubeImage ` two_chain_typeI.\n        integral img\n         (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)))\n     s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n     (\\<Sum>img\\<in>cubeImage ` two_chain_typeI.\n        integral img\n         (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)))\n     s", "have \"\\<forall>twoCube \\<in> two_chain_typeI. (?F_b' has_integral integral (cubeImage twoCube) ?F_b') (cubeImage twoCube)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>twoCube\\<in>two_chain_typeI.\n       (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i)\n         j has_integral\n        integral (cubeImage twoCube)\n         (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j))\n        (cubeImage twoCube)", "by (simp add: analytically_valid_imp_part_deriv_integrable_on T1.F_anal_valid has_integral_integrable_integral)"], ["proof (state)\nthis:\n  \\<forall>twoCube\\<in>two_chain_typeI.\n     (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n      integral (cubeImage twoCube)\n       (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j))\n      (cubeImage twoCube)\n\ngoal (1 subgoal):\n 1. (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n     (\\<Sum>img\\<in>cubeImage ` two_chain_typeI.\n        integral img\n         (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)))\n     s", "then"], ["proof (chain)\npicking this:\n  \\<forall>twoCube\\<in>two_chain_typeI.\n     (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n      integral (cubeImage twoCube)\n       (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j))\n      (cubeImage twoCube)", "have \"\\<And>u. u \\<in> (cubeImage ` two_chain_typeI) \\<Longrightarrow> (?F_b' has_integral integral u ?F_b') u\""], ["proof (prove)\nusing this:\n  \\<forall>twoCube\\<in>two_chain_typeI.\n     (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n      integral (cubeImage twoCube)\n       (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j))\n      (cubeImage twoCube)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> cubeImage ` two_chain_typeI \\<Longrightarrow>\n       (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i)\n         j has_integral\n        integral u\n         (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j))\n        u", "by auto"], ["proof (state)\nthis:\n  ?u \\<in> cubeImage ` two_chain_typeI \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n   integral ?u (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j))\n   ?u\n\ngoal (1 subgoal):\n 1. (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n     (\\<Sum>img\\<in>cubeImage ` two_chain_typeI.\n        integral img\n         (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)))\n     s", "then"], ["proof (chain)\npicking this:\n  ?u \\<in> cubeImage ` two_chain_typeI \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n   integral ?u (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j))\n   ?u", "show ?thesis"], ["proof (prove)\nusing this:\n  ?u \\<in> cubeImage ` two_chain_typeI \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n   integral ?u (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j))\n   ?u\n\ngoal (1 subgoal):\n 1. (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n     (\\<Sum>img\\<in>cubeImage ` two_chain_typeI.\n        integral img\n         (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)))\n     s", "using gen_divisions(1)"], ["proof (prove)\nusing this:\n  ?u \\<in> cubeImage ` two_chain_typeI \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n   integral ?u (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j))\n   ?u\n  gen_division s (cubeImage ` two_chain_typeI)\n\ngoal (1 subgoal):\n 1. (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n     (\\<Sum>img\\<in>cubeImage ` two_chain_typeI.\n        integral img\n         (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)))\n     s", "unfolding gen_division_def"], ["proof (prove)\nusing this:\n  ?u \\<in> cubeImage ` two_chain_typeI \\<Longrightarrow>\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n   integral ?u (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j))\n   ?u\n  finite (cubeImage ` two_chain_typeI) \\<and>\n  \\<Union> (cubeImage ` two_chain_typeI) = s \\<and>\n  pairwise (\\<lambda>X Y. negligible (X \\<inter> Y))\n   (cubeImage ` two_chain_typeI)\n\ngoal (1 subgoal):\n 1. (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n     (\\<Sum>img\\<in>cubeImage ` two_chain_typeI.\n        integral img\n         (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)))\n     s", "by (metis has_integral_Union)"], ["proof (state)\nthis:\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n   (\\<Sum>img\\<in>cubeImage ` two_chain_typeI.\n      integral img\n       (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)))\n   s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n   (\\<Sum>img\\<in>cubeImage ` two_chain_typeI.\n      integral img\n       (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)))\n   s\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) +\n    integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x)", "then"], ["proof (chain)\npicking this:\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n   (\\<Sum>img\\<in>cubeImage ` two_chain_typeI.\n      integral img\n       (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)))\n   s", "show ?thesis"], ["proof (prove)\nusing this:\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n   (\\<Sum>img\\<in>cubeImage ` two_chain_typeI.\n      integral img\n       (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)))\n   s\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) +\n    integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x)", "using F_a'_integrable Henstock_Kurzweil_Integration.integral_diff"], ["proof (prove)\nusing this:\n  (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j has_integral\n   (\\<Sum>img\\<in>cubeImage ` two_chain_typeI.\n      integral img\n       (partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j)))\n   s\n  partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i integrable_on s\n  \\<lbrakk>?f integrable_on ?S; ?g integrable_on ?S\\<rbrakk>\n  \\<Longrightarrow> integral ?S (\\<lambda>x. ?f x - ?g x) =\n                    integral ?S ?f - integral ?S ?g\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) +\n    integral s\n     (\\<lambda>x.\n         - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x)", "by auto"], ["proof (state)\nthis:\n  integral s\n   (\\<lambda>x.\n       partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n       partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n  integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) +\n  integral s\n   (\\<lambda>x.\n       - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  integral s\n   (\\<lambda>x.\n       partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n       partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n  integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) +\n  integral s\n   (\\<lambda>x.\n       - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x)\n\ngoal (2 subgoals):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeI\n 2. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeII", "show \"integral s (\\<lambda>x. ?F_a' x - ?F_b' x) = one_chain_line_integral F {i, j} one_chain_typeI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeI", "using one_chain_j_integrals integral_dis line_integral_dist typeI_regions_integral typeII_regions_integral"], ["proof (prove)\nusing this:\n  one_chain_line_integral F {j} one_chain_typeI =\n  one_chain_line_integral F {j} one_chain_typeII \\<and>\n  (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n      line_integral_exists F {j} \\<gamma>) \\<and>\n  (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n      line_integral_exists F {j} \\<gamma>)\n  integral s\n   (\\<lambda>x.\n       partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n       partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n  integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) +\n  integral s\n   (\\<lambda>x.\n       - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x)\n  one_chain_line_integral F {i, j} one_chain_typeI =\n  one_chain_line_integral F {i} one_chain_typeI +\n  one_chain_line_integral F {j} one_chain_typeI \\<and>\n  one_chain_line_integral F {i, j} one_chain_typeII =\n  one_chain_line_integral F {i} one_chain_typeII +\n  one_chain_line_integral F {j} one_chain_typeII\n  integral s\n   (\\<lambda>x.\n       - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n  one_chain_line_integral F {i} one_chain_typeI\n  integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n  one_chain_line_integral F {j} one_chain_typeII\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeI", "by auto"], ["proof (state)\nthis:\n  integral s\n   (\\<lambda>x.\n       partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n       partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n  one_chain_line_integral F {i, j} one_chain_typeI\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeII", "show \"integral s (\\<lambda>x. ?F_a' x - ?F_b' x) = one_chain_line_integral F {i, j} one_chain_typeII\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeII", "using one_chain_i_integrals integral_dis line_integral_dist typeI_regions_integral typeII_regions_integral"], ["proof (prove)\nusing this:\n  one_chain_line_integral F {i} one_chain_typeI =\n  one_chain_line_integral F {i} one_chain_typeII \\<and>\n  (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeI.\n      line_integral_exists F {i} \\<gamma>) \\<and>\n  (\\<forall>(k, \\<gamma>)\\<in>one_chain_typeII.\n      line_integral_exists F {i} \\<gamma>)\n  integral s\n   (\\<lambda>x.\n       partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n       partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n  integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) +\n  integral s\n   (\\<lambda>x.\n       - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x)\n  one_chain_line_integral F {i, j} one_chain_typeI =\n  one_chain_line_integral F {i} one_chain_typeI +\n  one_chain_line_integral F {j} one_chain_typeI \\<and>\n  one_chain_line_integral F {i, j} one_chain_typeII =\n  one_chain_line_integral F {i} one_chain_typeII +\n  one_chain_line_integral F {j} one_chain_typeII\n  integral s\n   (\\<lambda>x.\n       - partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n  one_chain_line_integral F {i} one_chain_typeI\n  integral s (partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i) =\n  one_chain_line_integral F {j} one_chain_typeII\n\ngoal (1 subgoal):\n 1. integral s\n     (\\<lambda>x.\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n         partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n    one_chain_line_integral F {i, j} one_chain_typeII", "by auto"], ["proof (state)\nthis:\n  integral s\n   (\\<lambda>x.\n       partial_vector_derivative (\\<lambda>x. F x \\<bullet> j) i x -\n       partial_vector_derivative (\\<lambda>x. F x \\<bullet> i) j x) =\n  one_chain_line_integral F {i, j} one_chain_typeII\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}