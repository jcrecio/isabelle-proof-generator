{"file_name": "/home/qj213/afp-2021-10-22/thys/UPF/Monads.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/UPF", "problem_names": ["lemma bind_left_unit : \"(x \\<leftarrow> return a; k) = k\"", "lemma bind_right_unit: \"(x \\<leftarrow> m; return x) = m\"", "lemma bind_assoc: \"(y \\<leftarrow> (x \\<leftarrow> m; k); h) = (x \\<leftarrow> m; (y \\<leftarrow> k; h))\"", "lemma mbind_unit [simp]: \"mbind [] f = (return [])\"", "lemma mbind_nofailure [simp]: \"mbind S f \\<sigma> \\<noteq> None\"", "lemma mbind_try: \n  \"(x \\<leftarrow> mbind (a#S) F; M x) = \n   (a' \\<leftarrow> try_SE(F a); \n      if a' = None \n      then (M [])\n      else (x \\<leftarrow> mbind S F; M (the a' # x)))\"", "lemma malt_SE_mt [simp]: \"\\<Sqinter>\\<^sub>S\\<^sub>E [] = fail\\<^sub>S\\<^sub>E\"", "lemma malt_SE_cons [simp]: \"\\<Sqinter>\\<^sub>S\\<^sub>E (a # S) = (a \\<sqinter>\\<^sub>S\\<^sub>E (\\<Sqinter>\\<^sub>S\\<^sub>E S))\"", "lemma bind_left_unit_SB : \"(x := returns a; m) = m\"", "lemma bind_right_unit_SB: \"(x := m; returns x) = m\"", "lemma bind_assoc_SB: \"(y := (x := m; k); h) = (x := m; (y := k; h))\"", "lemma bind_left_unit_SBE : \"(x :\\<equiv> returning a; m) = m\"", "lemma bind_right_unit_SBE: \"(x :\\<equiv> m; returning x) = m\"", "lemmas aux = trans[OF HOL.neq_commute,OF Option.not_None_eq]", "lemma bind_assoc_SBE: \"(y :\\<equiv> (x :\\<equiv> m; k); h) = (x :\\<equiv> m; (y :\\<equiv> k; h))\"", "lemma syntax_test : \n  \"\\<sigma> \\<Turnstile> (os \\<leftarrow> (mbind \\<iota>s ioprog); return(length \\<iota>s = length os))\"", "lemma valid_true[simp]: \"(\\<sigma> \\<Turnstile> (s \\<leftarrow> return x ; return (P s))) = P x\"", "lemma valid_failure: \"ioprog a \\<sigma> = None \\<Longrightarrow> \n                                   (\\<sigma> \\<Turnstile> (s \\<leftarrow> mbind (a#S) ioprog ; M s)) = \n                                   (\\<sigma> \\<Turnstile> (M []))\"", "lemma valid_failure': \"A \\<sigma> = None \\<Longrightarrow> \\<not>(\\<sigma> \\<Turnstile> ((s \\<leftarrow> A ; M s)))\"", "lemma valid_successElem: (* atomic boolean Monad \"Query Functions\" *) \n                         \"M \\<sigma> = Some(f \\<sigma>,\\<sigma>) \\<Longrightarrow>  (\\<sigma> \\<Turnstile> M) = f \\<sigma>\"", "lemma valid_success:  \"ioprog a \\<sigma> = Some(b,\\<sigma>') \\<Longrightarrow> \n                                  (\\<sigma>  \\<Turnstile> (s \\<leftarrow> mbind (a#S) ioprog ; M s)) = \n                                  (\\<sigma>' \\<Turnstile> (s \\<leftarrow> mbind S ioprog ; M (b#s)))\"", "lemma valid_success'': \"ioprog a \\<sigma> = Some(b,\\<sigma>') \\<Longrightarrow>\n                                    (\\<sigma>  \\<Turnstile> (s \\<leftarrow> mbind (a#S) ioprog ; return (P s))) =\n                                    (\\<sigma>' \\<Turnstile> (s \\<leftarrow> mbind S ioprog ; return (P (b#s))))\"", "lemma valid_success':  \"A \\<sigma> = Some(b,\\<sigma>') \\<Longrightarrow> (\\<sigma> \\<Turnstile> ((s \\<leftarrow> A ; M s))) = (\\<sigma>' \\<Turnstile> (M b))\"", "lemma valid_both: \"(\\<sigma> \\<Turnstile> (s \\<leftarrow> mbind (a#S) ioprog ; return (P s))) =\n                         (case ioprog a \\<sigma> of\n                               None \\<Rightarrow> (\\<sigma>  \\<Turnstile> (return (P [])))\n                             | Some(b,\\<sigma>') \\<Rightarrow> (\\<sigma>'  \\<Turnstile> (s \\<leftarrow> mbind S ioprog ; return (P (b#s)))))\"", "lemma valid_propagate_1 [simp]: \"(\\<sigma> \\<Turnstile> (return P)) = (P)\"", "lemma valid_propagate_2: \"\\<sigma> \\<Turnstile> ((s \\<leftarrow> A ; M s)) \\<Longrightarrow>  \\<exists> v \\<sigma>'. the(A \\<sigma>) = (v,\\<sigma>') \\<and> \\<sigma>' \\<Turnstile> (M v)\"", "lemma valid_propagate_2': \"\\<sigma> \\<Turnstile> ((s \\<leftarrow> A ; M s)) \\<Longrightarrow>  \\<exists> a. (A \\<sigma>) = Some a \\<and> (snd a) \\<Turnstile> (M (fst a))\"", "lemma valid_propagate_2'': \"\\<sigma> \\<Turnstile> ((s \\<leftarrow> A ; M s)) \\<Longrightarrow> \\<exists> v \\<sigma>'. A \\<sigma> = Some(v,\\<sigma>') \\<and> \\<sigma>' \\<Turnstile> (M v)\"", "lemma valid_propoagate_3[simp]: \"(\\<sigma>\\<^sub>0 \\<Turnstile> (\\<lambda>\\<sigma>. Some (f \\<sigma>, \\<sigma>))) = (f \\<sigma>\\<^sub>0)\"", "lemma valid_propoagate_3'[simp]: \"\\<not>(\\<sigma>\\<^sub>0 \\<Turnstile> (\\<lambda>\\<sigma>. None))\"", "lemma assert_disch1 :\" P \\<sigma> \\<Longrightarrow> (\\<sigma> \\<Turnstile> (x \\<leftarrow> assert\\<^sub>S\\<^sub>E P; M x)) = (\\<sigma> \\<Turnstile> (M True))\"", "lemma assert_disch2 :\" \\<not> P \\<sigma> \\<Longrightarrow> \\<not> (\\<sigma> \\<Turnstile> (x \\<leftarrow> assert\\<^sub>S\\<^sub>E P ; M s))\"", "lemma assert_disch3 :\" \\<not> P \\<sigma> \\<Longrightarrow> \\<not> (\\<sigma> \\<Turnstile> (assert\\<^sub>S\\<^sub>E P))\"", "lemma assert_D : \"(\\<sigma> \\<Turnstile> (x \\<leftarrow> assert\\<^sub>S\\<^sub>E P; M x)) \\<Longrightarrow> P \\<sigma> \\<and> (\\<sigma> \\<Turnstile> (M True))\"", "lemma assume_D : \"(\\<sigma> \\<Turnstile> (x \\<leftarrow> assume\\<^sub>S\\<^sub>E P; M x)) \\<Longrightarrow> \\<exists> \\<sigma>. (P \\<sigma> \\<and>  \\<sigma> \\<Turnstile> (M ()))\"", "lemma if_SE_D1 : \"P \\<sigma> \\<Longrightarrow> (\\<sigma> \\<Turnstile> if\\<^sub>S\\<^sub>E P B\\<^sub>1 B\\<^sub>2) = (\\<sigma> \\<Turnstile> B\\<^sub>1)\"", "lemma if_SE_D2 : \"\\<not> P \\<sigma> \\<Longrightarrow> (\\<sigma> \\<Turnstile> if\\<^sub>S\\<^sub>E P B\\<^sub>1 B\\<^sub>2) = (\\<sigma> \\<Turnstile> B\\<^sub>2)\"", "lemma if_SE_split_asm : \" (\\<sigma> \\<Turnstile> if\\<^sub>S\\<^sub>E P B\\<^sub>1 B\\<^sub>2) = ((P \\<sigma> \\<and> (\\<sigma> \\<Turnstile> B\\<^sub>1)) \\<or> (\\<not> P \\<sigma> \\<and> (\\<sigma> \\<Turnstile> B\\<^sub>2)))\"", "lemma if_SE_split : \" (\\<sigma> \\<Turnstile> if\\<^sub>S\\<^sub>E P B\\<^sub>1 B\\<^sub>2) = ((P \\<sigma> \\<longrightarrow> (\\<sigma> \\<Turnstile> B\\<^sub>1)) \\<and> (\\<not> P \\<sigma> \\<longrightarrow> (\\<sigma> \\<Turnstile> B\\<^sub>2)))\"", "lemma [code]: \"(\\<sigma> \\<Turnstile> m) = (case (m \\<sigma>) of None  \\<Rightarrow> False | (Some (x,y))  \\<Rightarrow> x)\"", "lemma assume_assert: \"(\\<sigma> \\<Turnstile>\\<^sub>S\\<^sub>B\\<^sub>E ( _ :\\<equiv> assume\\<^sub>S\\<^sub>B\\<^sub>E P ; assert\\<^sub>S\\<^sub>B\\<^sub>E Q)) = (P \\<sigma> \\<longrightarrow> Q \\<sigma>)\"", "lemma assert_intro: \"Q \\<sigma> \\<Longrightarrow> \\<sigma> \\<Turnstile>\\<^sub>S\\<^sub>B\\<^sub>E (assert\\<^sub>S\\<^sub>B\\<^sub>E Q)\""], "translations": [["", "lemma bind_left_unit : \"(x \\<leftarrow> return a; k) = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ( x \\<leftarrow> unit\\<^sub>S\\<^sub>E a; k) = k", "apply (simp add: unit_SE_def bind_SE_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma bind_right_unit: \"(x \\<leftarrow> m; return x) = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bind\\<^sub>S\\<^sub>E m unit\\<^sub>S\\<^sub>E = m", "apply (simp add:  unit_SE_def bind_SE_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>.\n        case m \\<sigma> of None \\<Rightarrow> None\n        | Some (out, \\<sigma>') \\<Rightarrow> Some (out, \\<sigma>')) =\n    m", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       (case m \\<sigma> of None \\<Rightarrow> None\n        | Some (out, \\<sigma>') \\<Rightarrow> Some (out, \\<sigma>')) =\n       m \\<sigma>", "subgoal for \"\\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case m \\<sigma> of None \\<Rightarrow> None\n     | Some (out, \\<sigma>') \\<Rightarrow> Some (out, \\<sigma>')) =\n    m \\<sigma>", "apply (case_tac \"m \\<sigma>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. m \\<sigma> = None \\<Longrightarrow>\n    (case m \\<sigma> of None \\<Rightarrow> None\n     | Some (out, \\<sigma>') \\<Rightarrow> Some (out, \\<sigma>')) =\n    m \\<sigma>\n 2. \\<And>a.\n       m \\<sigma> = Some a \\<Longrightarrow>\n       (case m \\<sigma> of None \\<Rightarrow> None\n        | Some (out, \\<sigma>') \\<Rightarrow> Some (out, \\<sigma>')) =\n       m \\<sigma>", "apply ( simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma bind_assoc: \"(y \\<leftarrow> (x \\<leftarrow> m; k); h) = (x \\<leftarrow> m; (y \\<leftarrow> k; h))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ( y \\<leftarrow>  x \\<leftarrow> m; k; h) =\n    ( x \\<leftarrow> m;  y \\<leftarrow> k; h)", "apply (simp add: unit_SE_def bind_SE_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>.\n        case case m \\<sigma> of None \\<Rightarrow> None\n             | Some (out, xa) \\<Rightarrow> k xa of\n        None \\<Rightarrow> None\n        | Some (out, \\<sigma>') \\<Rightarrow> h \\<sigma>') =\n    (\\<lambda>\\<sigma>.\n        case m \\<sigma> of None \\<Rightarrow> None\n        | Some (out, \\<sigma>') \\<Rightarrow>\n            case k \\<sigma>' of None \\<Rightarrow> None\n            | Some (out, xa) \\<Rightarrow> h xa)", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       (case case m \\<sigma> of None \\<Rightarrow> None\n             | Some (out, xa) \\<Rightarrow> k xa of\n        None \\<Rightarrow> None\n        | Some (out, \\<sigma>') \\<Rightarrow> h \\<sigma>') =\n       (case m \\<sigma> of None \\<Rightarrow> None\n        | Some (out, \\<sigma>') \\<Rightarrow>\n            case k \\<sigma>' of None \\<Rightarrow> None\n            | Some (out, xa) \\<Rightarrow> h xa)", "subgoal for \"\\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case case m \\<sigma> of None \\<Rightarrow> None\n          | Some (out, xa) \\<Rightarrow> k xa of\n     None \\<Rightarrow> None\n     | Some (out, \\<sigma>') \\<Rightarrow> h \\<sigma>') =\n    (case m \\<sigma> of None \\<Rightarrow> None\n     | Some (out, \\<sigma>') \\<Rightarrow>\n         case k \\<sigma>' of None \\<Rightarrow> None\n         | Some (out, xa) \\<Rightarrow> h xa)", "apply (case_tac \"m \\<sigma>\", simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       m \\<sigma> = Some a \\<Longrightarrow>\n       (case case a of (out, x) \\<Rightarrow> k x of None \\<Rightarrow> None\n        | Some (out, \\<sigma>') \\<Rightarrow> h \\<sigma>') =\n       (case a of\n        (out, \\<sigma>') \\<Rightarrow>\n          case k \\<sigma>' of None \\<Rightarrow> None\n          | Some (out, xa) \\<Rightarrow> h xa)", "subgoal for a"], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<sigma> = Some a \\<Longrightarrow>\n    (case case a of (out, x) \\<Rightarrow> k x of None \\<Rightarrow> None\n     | Some (out, \\<sigma>') \\<Rightarrow> h \\<sigma>') =\n    (case a of\n     (out, \\<sigma>') \\<Rightarrow>\n       case k \\<sigma>' of None \\<Rightarrow> None\n       | Some (out, xa) \\<Rightarrow> h xa)", "apply (case_tac \"a\", simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text\\<open>\n  In order to express test-sequences also on the object-level and to make our theory amenable to \n  formal reasoning over test-sequences, we represent them as lists of input and generalize the \n  bind-operator of the state-exception monad accordingly. The approach is straightforward, but \n  comes with a price: we have to encapsulate all input and output data into one type. Assume that \n  we have a typed interface to a module with the operations $op_1$, $op_2$, \\ldots, $op_n$ with \n  the inputs $\\iota_1$, $\\iota_2$, \\ldots, $\\iota_n$ (outputs are treated analogously). Then we \n  can encode for this interface the general input - type:\n  \\begin{displaymath}\n    \\texttt{datatype}\\ \\texttt{in}\\ =\\ op_1\\ ::\\ \\iota_1\\ |\\ ...\\ |\\ \\iota_n\n  \\end{displaymath}\n  Obviously, we loose some type-safety in this approach; we have to express that in traces only \n  \\emph{corresponding} input and output belonging to the same operation will occur; this form \n  of side-conditions have to be expressed inside \\HOL. From the user perspective, this will not \n  make much difference, since junk-data resulting from too weak typing can be ruled out by adopted\n  front-ends. \n\\<close>"], ["", "text\\<open>\n  In order to express test-sequences also on the object-level and to make our theory amenable to \n  formal reasoning over test-sequences, we represent them as lists of input and generalize the \n  bind-operator of the state-exception monad accordingly. Thus, the notion of test-sequence\n  is mapped to the notion of a \\emph{computation}, a semantic notion; at times we will use \n  reifications of computations, \\ie{} a data-type in order to make computation amenable to\n  case-splitting and meta-theoretic reasoning. To this end,  we have to encapsulate all input \n  and output data into one type. Assume that we have a typed interface to a module with\n  the operations $op_1$, $op_2$, \\ldots, $op_n$ with the inputs  $\\iota_1$, $\\iota_2$, \\ldots, \n  $\\iota_n$ (outputs are treated analogously).\n   Then we can encode for this interface the general input - type:\n  \\begin{displaymath}\n  \\texttt{datatype}\\ \\texttt{in}\\ =\\ op_1\\ ::\\ \\iota_1\\ |\\ ...\\ |\\ \\iota_n\n  \\end{displaymath}\n  Obviously, we loose some type-safety in this approach; we have to express\n  that in traces only \\emph{corresponding} input and output belonging to the \n  same operation will occur; this form of side-conditions have to be expressed\n  inside \\HOL. From the user perspective, this will not make much difference,\n  since junk-data resulting from too weak typing can be ruled out by adopted\n  front-ends.\\<close>"], ["", "text\\<open>Note that the subsequent notion of a test-sequence allows the io stepping \nfunction (and the special case of a program under test) to stop execution \n\\emph{within} the sequence; such premature terminations are characterized by an \noutput list which is shorter than the input list. Note that our primary\nnotion of multiple execution ignores failure and reports failure\nsteps only by missing results ...\\<close>"], ["", "fun    mbind :: \"'\\<iota> list  \\<Rightarrow>  ('\\<iota> \\<Rightarrow> ('o,'\\<sigma>) MON\\<^sub>S\\<^sub>E) \\<Rightarrow> ('o list,'\\<sigma>) MON\\<^sub>S\\<^sub>E\"  \n  where \"mbind [] iostep \\<sigma> = Some([], \\<sigma>)\" |\n    \"mbind (a#H) iostep \\<sigma> = \n                (case iostep a \\<sigma> of \n                     None   \\<Rightarrow> Some([], \\<sigma>)\n                  |  Some (out, \\<sigma>') \\<Rightarrow> (case mbind H iostep \\<sigma>' of \n                                          None    \\<Rightarrow> Some([out],\\<sigma>') \n                                        | Some(outs,\\<sigma>'') \\<Rightarrow> Some(out#outs,\\<sigma>'')))\""], ["", "text\\<open>As mentioned, this definition is fail-safe; in case of an exception, \nthe current state is maintained, no result is reported. \nAn alternative is the fail-strict variant \\<open>mbind'\\<close> defined below.\\<close>"], ["", "lemma mbind_unit [simp]: \"mbind [] f = (return [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mbind [] f = unit\\<^sub>S\\<^sub>E []", "by(rule ext, simp add: unit_SE_def)"], ["", "lemma mbind_nofailure [simp]: \"mbind S f \\<sigma> \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mbind S f \\<sigma> \\<noteq> None", "apply (rule_tac x=\\<sigma> in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. mbind S f x \\<noteq> None", "apply (induct S)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>x. mbind [] f x \\<noteq> None\n 2. \\<And>a S.\n       \\<forall>x. mbind S f x \\<noteq> None \\<Longrightarrow>\n       \\<forall>x. mbind (a # S) f x \\<noteq> None", "using mbind.simps(1)"], ["proof (prove)\nusing this:\n  mbind [] ?iostep ?\\<sigma> = Some ([], ?\\<sigma>)\n\ngoal (2 subgoals):\n 1. \\<forall>x. mbind [] f x \\<noteq> None\n 2. \\<And>a S.\n       \\<forall>x. mbind S f x \\<noteq> None \\<Longrightarrow>\n       \\<forall>x. mbind (a # S) f x \\<noteq> None", "apply force"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a S.\n       \\<forall>x. mbind S f x \\<noteq> None \\<Longrightarrow>\n       \\<forall>x. mbind (a # S) f x \\<noteq> None", "apply(simp add:unit_SE_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a S.\n       \\<forall>x. \\<exists>a b. mbind S f x = Some (a, b) \\<Longrightarrow>\n       \\<forall>x.\n          \\<exists>aa b.\n             (case f a x of None \\<Rightarrow> Some ([], x)\n              | Some (out, \\<sigma>') \\<Rightarrow>\n                  case mbind S f \\<sigma>' of\n                  None \\<Rightarrow> Some ([out], \\<sigma>')\n                  | Some (outs, \\<sigma>'') \\<Rightarrow>\n                      Some (out # outs, \\<sigma>'')) =\n             Some (aa, b)", "apply(safe)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a S x.\n       \\<forall>x. \\<exists>a b. mbind S f x = Some (a, b) \\<Longrightarrow>\n       \\<exists>aa b.\n          (case f a x of None \\<Rightarrow> Some ([], x)\n           | Some (out, \\<sigma>') \\<Rightarrow>\n               case mbind S f \\<sigma>' of\n               None \\<Rightarrow> Some ([out], \\<sigma>')\n               | Some (outs, \\<sigma>'') \\<Rightarrow>\n                   Some (out # outs, \\<sigma>'')) =\n          Some (aa, b)", "subgoal for a S x"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. \\<exists>a b. mbind S f x = Some (a, b) \\<Longrightarrow>\n    \\<exists>aa b.\n       (case f a x of None \\<Rightarrow> Some ([], x)\n        | Some (out, \\<sigma>') \\<Rightarrow>\n            case mbind S f \\<sigma>' of\n            None \\<Rightarrow> Some ([out], \\<sigma>')\n            | Some (outs, \\<sigma>'') \\<Rightarrow>\n                Some (out # outs, \\<sigma>'')) =\n       Some (aa, b)", "apply (case_tac \"f a x\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x. \\<exists>a b. mbind S f x = Some (a, b);\n     f a x = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>aa b.\n                         (case f a x of None \\<Rightarrow> Some ([], x)\n                          | Some (out, \\<sigma>') \\<Rightarrow>\n                              case mbind S f \\<sigma>' of\n                              None \\<Rightarrow> Some ([out], \\<sigma>')\n                              | Some (outs, \\<sigma>'') \\<Rightarrow>\n                                  Some (out # outs, \\<sigma>'')) =\n                         Some (aa, b)\n 2. \\<And>aa.\n       \\<lbrakk>\\<forall>x. \\<exists>a b. mbind S f x = Some (a, b);\n        f a x = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa b.\n                            (case f a x of None \\<Rightarrow> Some ([], x)\n                             | Some (out, \\<sigma>') \\<Rightarrow>\n                                 case mbind S f \\<sigma>' of\n                                 None \\<Rightarrow> Some ([out], \\<sigma>')\n                                 | Some (outs, \\<sigma>'') \\<Rightarrow>\n                                     Some (out # outs, \\<sigma>'')) =\n                            Some (aa, b)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>\\<forall>x. \\<exists>a b. mbind S f x = Some (a, b);\n        f a x = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa b.\n                            (case f a x of None \\<Rightarrow> Some ([], x)\n                             | Some (out, \\<sigma>') \\<Rightarrow>\n                                 case mbind S f \\<sigma>' of\n                                 None \\<Rightarrow> Some ([out], \\<sigma>')\n                                 | Some (outs, \\<sigma>'') \\<Rightarrow>\n                                     Some (out # outs, \\<sigma>'')) =\n                            Some (aa, b)", "apply(safe)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>\\<forall>x. \\<exists>a b. mbind S f x = Some (a, b);\n        f a x = Some (aa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa b.\n                            (case f a x of None \\<Rightarrow> Some ([], x)\n                             | Some (out, \\<sigma>') \\<Rightarrow>\n                                 case mbind S f \\<sigma>' of\n                                 None \\<Rightarrow> Some ([out], \\<sigma>')\n                                 | Some (outs, \\<sigma>'') \\<Rightarrow>\n                                     Some (out # outs, \\<sigma>'')) =\n                            Some (aa, b)", "subgoal for aa b"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x. \\<exists>a b. mbind S f x = Some (a, b);\n     f a x = Some (aa, b)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>aa b.\n                         (case f a x of None \\<Rightarrow> Some ([], x)\n                          | Some (out, \\<sigma>') \\<Rightarrow>\n                              case mbind S f \\<sigma>' of\n                              None \\<Rightarrow> Some ([out], \\<sigma>')\n                              | Some (outs, \\<sigma>'') \\<Rightarrow>\n                                  Some (out # outs, \\<sigma>'')) =\n                         Some (aa, b)", "apply (erule_tac x=\"b\" in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f a x = Some (aa, b);\n     \\<exists>a ba. mbind S f b = Some (a, ba)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>aa b.\n                         (case f a x of None \\<Rightarrow> Some ([], x)\n                          | Some (out, \\<sigma>') \\<Rightarrow>\n                              case mbind S f \\<sigma>' of\n                              None \\<Rightarrow> Some ([out], \\<sigma>')\n                              | Some (outs, \\<sigma>'') \\<Rightarrow>\n                                  Some (out # outs, \\<sigma>'')) =\n                         Some (aa, b)", "apply (erule exE)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ab ba.\n       \\<lbrakk>f a x = Some (aa, b); mbind S f b = Some (ab, ba)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa b.\n                            (case f a x of None \\<Rightarrow> Some ([], x)\n                             | Some (out, \\<sigma>') \\<Rightarrow>\n                                 case mbind S f \\<sigma>' of\n                                 None \\<Rightarrow> Some ([out], \\<sigma>')\n                                 | Some (outs, \\<sigma>'') \\<Rightarrow>\n                                     Some (out # outs, \\<sigma>'')) =\n                            Some (aa, b)", "apply (simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text\\<open>The fail-strict version of \\<open>mbind'\\<close> looks as follows:\\<close>"], ["", "fun    mbind' :: \"'\\<iota> list  \\<Rightarrow>  ('\\<iota> \\<Rightarrow> ('o,'\\<sigma>) MON\\<^sub>S\\<^sub>E) \\<Rightarrow> ('o list,'\\<sigma>) MON\\<^sub>S\\<^sub>E\"\nwhere \"mbind' [] iostep \\<sigma> = Some([], \\<sigma>)\" |\n      \"mbind' (a#H) iostep \\<sigma> = \n                (case iostep a \\<sigma> of \n                     None   \\<Rightarrow> None\n                  |  Some (out, \\<sigma>') \\<Rightarrow> (case mbind H iostep \\<sigma>' of \n                                          None    \\<Rightarrow> None   \\<comment> \\<open>fail-strict\\<close>\n                                        | Some(outs,\\<sigma>'') \\<Rightarrow> Some(out#outs,\\<sigma>'')))\""], ["", "text\\<open>\n  mbind' as failure strict operator can be seen as a foldr on bind---if the types would  \n  match \\ldots \n\\<close>"], ["", "definition try_SE :: \"('o,'\\<sigma>) MON\\<^sub>S\\<^sub>E \\<Rightarrow> ('o option,'\\<sigma>) MON\\<^sub>S\\<^sub>E\" \nwhere     \"try_SE ioprog = (\\<lambda>\\<sigma>. case ioprog \\<sigma> of\n                                      None \\<Rightarrow> Some(None, \\<sigma>)\n                                    | Some(outs, \\<sigma>') \\<Rightarrow> Some(Some outs, \\<sigma>'))\""], ["", "text\\<open>In contrast @{term mbind} as a failure safe operator can roughly be seen \n       as a @{term foldr} on bind - try:\n       \\<open>m1 ; try m2 ; try m3; ...\\<close>. Note, that the rough equivalence only holds for\n       certain predicates in the sequence - length equivalence modulo None,\n       for example. However, if a conditional is added, the equivalence\n       can be made precise:\\<close>"], ["", "lemma mbind_try: \n  \"(x \\<leftarrow> mbind (a#S) F; M x) = \n   (a' \\<leftarrow> try_SE(F a); \n      if a' = None \n      then (M [])\n      else (x \\<leftarrow> mbind S F; M (the a' # x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bind\\<^sub>S\\<^sub>E (mbind (a # S) F) M =\n    ( a' \\<leftarrow> try_SE\n                       (F a); if a' = None then M []\n                              else ( x \\<leftarrow> mbind S\n               F; M (the a' # x)))", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       bind\\<^sub>S\\<^sub>E (mbind (a # S) F) M x =\n       ( a' \\<leftarrow> try_SE\n                          (F a); if a' = None then M []\n                                 else ( x \\<leftarrow> mbind S\n                  F; M (the a' # x)))\n        x", "apply (simp add: bind_SE_def try_SE_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (case case F a x of None \\<Rightarrow> Some ([], x)\n             | Some (out, \\<sigma>') \\<Rightarrow>\n                 case mbind S F \\<sigma>' of\n                 None \\<Rightarrow> Some ([out], \\<sigma>')\n                 | Some (outs, \\<sigma>'') \\<Rightarrow>\n                     Some (out # outs, \\<sigma>'') of\n        None \\<Rightarrow> None | Some (xa, xb) \\<Rightarrow> M xa xb) =\n       (case case F a x of None \\<Rightarrow> Some (None, x)\n             | Some (outs, \\<sigma>') \\<Rightarrow>\n                 Some (Some outs, \\<sigma>') of\n        None \\<Rightarrow> None\n        | Some (out, xa) \\<Rightarrow>\n            (if out = None then M []\n             else ( x \\<leftarrow> mbind S F; M (the out # x)))\n             xa)", "subgoal for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case case F a x of None \\<Rightarrow> Some ([], x)\n          | Some (out, \\<sigma>') \\<Rightarrow>\n              case mbind S F \\<sigma>' of\n              None \\<Rightarrow> Some ([out], \\<sigma>')\n              | Some (outs, \\<sigma>'') \\<Rightarrow>\n                  Some (out # outs, \\<sigma>'') of\n     None \\<Rightarrow> None | Some (xa, xb) \\<Rightarrow> M xa xb) =\n    (case case F a x of None \\<Rightarrow> Some (None, x)\n          | Some (outs, \\<sigma>') \\<Rightarrow>\n              Some (Some outs, \\<sigma>') of\n     None \\<Rightarrow> None\n     | Some (out, xa) \\<Rightarrow>\n         (if out = None then M []\n          else ( x \\<leftarrow> mbind S F; M (the out # x)))\n          xa)", "apply (case_tac \"F a x\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. F a x = None \\<Longrightarrow>\n    (case case F a x of None \\<Rightarrow> Some ([], x)\n          | Some (out, \\<sigma>') \\<Rightarrow>\n              case mbind S F \\<sigma>' of\n              None \\<Rightarrow> Some ([out], \\<sigma>')\n              | Some (outs, \\<sigma>'') \\<Rightarrow>\n                  Some (out # outs, \\<sigma>'') of\n     None \\<Rightarrow> None | Some (xa, xb) \\<Rightarrow> M xa xb) =\n    (case case F a x of None \\<Rightarrow> Some (None, x)\n          | Some (outs, \\<sigma>') \\<Rightarrow>\n              Some (Some outs, \\<sigma>') of\n     None \\<Rightarrow> None\n     | Some (out, xa) \\<Rightarrow>\n         (if out = None then M []\n          else ( x \\<leftarrow> mbind S F; M (the out # x)))\n          xa)\n 2. \\<And>aa.\n       F a x = Some aa \\<Longrightarrow>\n       (case case F a x of None \\<Rightarrow> Some ([], x)\n             | Some (out, \\<sigma>') \\<Rightarrow>\n                 case mbind S F \\<sigma>' of\n                 None \\<Rightarrow> Some ([out], \\<sigma>')\n                 | Some (outs, \\<sigma>'') \\<Rightarrow>\n                     Some (out # outs, \\<sigma>'') of\n        None \\<Rightarrow> None | Some (xa, xb) \\<Rightarrow> M xa xb) =\n       (case case F a x of None \\<Rightarrow> Some (None, x)\n             | Some (outs, \\<sigma>') \\<Rightarrow>\n                 Some (Some outs, \\<sigma>') of\n        None \\<Rightarrow> None\n        | Some (out, xa) \\<Rightarrow>\n            (if out = None then M []\n             else ( x \\<leftarrow> mbind S F; M (the out # x)))\n             xa)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       F a x = Some aa \\<Longrightarrow>\n       (case case F a x of None \\<Rightarrow> Some ([], x)\n             | Some (out, \\<sigma>') \\<Rightarrow>\n                 case mbind S F \\<sigma>' of\n                 None \\<Rightarrow> Some ([out], \\<sigma>')\n                 | Some (outs, \\<sigma>'') \\<Rightarrow>\n                     Some (out # outs, \\<sigma>'') of\n        None \\<Rightarrow> None | Some (xa, xb) \\<Rightarrow> M xa xb) =\n       (case case F a x of None \\<Rightarrow> Some (None, x)\n             | Some (outs, \\<sigma>') \\<Rightarrow>\n                 Some (Some outs, \\<sigma>') of\n        None \\<Rightarrow> None\n        | Some (out, xa) \\<Rightarrow>\n            (if out = None then M []\n             else ( x \\<leftarrow> mbind S F; M (the out # x)))\n             xa)", "apply (safe)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       F a x = Some (aa, b) \\<Longrightarrow>\n       (case case F a x of None \\<Rightarrow> Some ([], x)\n             | Some (out, \\<sigma>') \\<Rightarrow>\n                 case mbind S F \\<sigma>' of\n                 None \\<Rightarrow> Some ([out], \\<sigma>')\n                 | Some (outs, \\<sigma>'') \\<Rightarrow>\n                     Some (out # outs, \\<sigma>'') of\n        None \\<Rightarrow> None | Some (xa, xb) \\<Rightarrow> M xa xb) =\n       (case case F a x of None \\<Rightarrow> Some (None, x)\n             | Some (outs, \\<sigma>') \\<Rightarrow>\n                 Some (Some outs, \\<sigma>') of\n        None \\<Rightarrow> None\n        | Some (out, xa) \\<Rightarrow>\n            (if out = None then M []\n             else ( x \\<leftarrow> mbind S F; M (the out # x)))\n             xa)", "apply (simp add: bind_SE_def try_SE_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       F a x = Some (aa, b) \\<Longrightarrow>\n       (case case mbind S F b of None \\<Rightarrow> Some ([aa], b)\n             | Some (outs, \\<sigma>'') \\<Rightarrow>\n                 Some (aa # outs, \\<sigma>'') of\n        None \\<Rightarrow> None | Some (xa, xb) \\<Rightarrow> M xa xb) =\n       (case mbind S F b of None \\<Rightarrow> None\n        | Some (out, xa) \\<Rightarrow> M (aa # out) xa)", "subgoal for aa b"], ["proof (prove)\ngoal (1 subgoal):\n 1. F a x = Some (aa, b) \\<Longrightarrow>\n    (case case mbind S F b of None \\<Rightarrow> Some ([aa], b)\n          | Some (outs, \\<sigma>'') \\<Rightarrow>\n              Some (aa # outs, \\<sigma>'') of\n     None \\<Rightarrow> None | Some (xa, xb) \\<Rightarrow> M xa xb) =\n    (case mbind S F b of None \\<Rightarrow> None\n     | Some (out, xa) \\<Rightarrow> M (aa # out) xa)", "apply (case_tac \"mbind S F b\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>F a x = Some (aa, b); mbind S F b = None\\<rbrakk>\n    \\<Longrightarrow> (case case mbind S F b of\n                            None \\<Rightarrow> Some ([aa], b)\n                            | Some (outs, \\<sigma>'') \\<Rightarrow>\n                                Some (aa # outs, \\<sigma>'') of\n                       None \\<Rightarrow> None\n                       | Some (xa, xb) \\<Rightarrow> M xa xb) =\n                      (case mbind S F b of None \\<Rightarrow> None\n                       | Some (out, xa) \\<Rightarrow> M (aa # out) xa)\n 2. \\<And>aaa.\n       \\<lbrakk>F a x = Some (aa, b); mbind S F b = Some aaa\\<rbrakk>\n       \\<Longrightarrow> (case case mbind S F b of\n                               None \\<Rightarrow> Some ([aa], b)\n                               | Some (outs, \\<sigma>'') \\<Rightarrow>\n                                   Some (aa # outs, \\<sigma>'') of\n                          None \\<Rightarrow> None\n                          | Some (xa, xb) \\<Rightarrow> M xa xb) =\n                         (case mbind S F b of None \\<Rightarrow> None\n                          | Some (out, xa) \\<Rightarrow> M (aa # out) xa)", "apply (auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text\\<open>On this basis, a symbolic evaluation scheme can be established\n  that reduces @{term mbind}-code to @{term try_SE}-code and If-cascades.\\<close>"], ["", "definition alt_SE    :: \"[('o, '\\<sigma>)MON\\<^sub>S\\<^sub>E, ('o, '\\<sigma>)MON\\<^sub>S\\<^sub>E] \\<Rightarrow> ('o, '\\<sigma>)MON\\<^sub>S\\<^sub>E\"   (infixl \"\\<sqinter>\\<^sub>S\\<^sub>E\" 10)\nwhere     \"(f \\<sqinter>\\<^sub>S\\<^sub>E g) = (\\<lambda> \\<sigma>. case f \\<sigma> of None \\<Rightarrow> g \\<sigma>\n                                      | Some H \\<Rightarrow> Some H)\""], ["", "definition malt_SE   :: \"('o, '\\<sigma>)MON\\<^sub>S\\<^sub>E list \\<Rightarrow> ('o, '\\<sigma>)MON\\<^sub>S\\<^sub>E\"\nwhere     \"malt_SE S = foldr alt_SE S fail\\<^sub>S\\<^sub>E\""], ["", "notation   malt_SE (\"\\<Sqinter>\\<^sub>S\\<^sub>E\")"], ["", "lemma malt_SE_mt [simp]: \"\\<Sqinter>\\<^sub>S\\<^sub>E [] = fail\\<^sub>S\\<^sub>E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sqinter>\\<^sub>S\\<^sub>E [] = fail\\<^sub>S\\<^sub>E", "by(simp add: malt_SE_def)"], ["", "lemma malt_SE_cons [simp]: \"\\<Sqinter>\\<^sub>S\\<^sub>E (a # S) = (a \\<sqinter>\\<^sub>S\\<^sub>E (\\<Sqinter>\\<^sub>S\\<^sub>E S))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sqinter>\\<^sub>S\\<^sub>E (a # S) =\n    (a \\<sqinter>\\<^sub>S\\<^sub>E \\<Sqinter>\\<^sub>S\\<^sub>E S)", "by(simp add: malt_SE_def)"], ["", "subsubsection\\<open>State-Backtrack Monads\\<close>"], ["", "text\\<open>This subsection is still rudimentary and as such an interesting\n  formal analogue to the previous monad definitions. It is doubtful that it is\n  interesting for testing and as a computational structure at all. \n  Clearly more relevant is ``sequence'' instead of ``set,'' which would\n  rephrase Isabelle's internal tactic concept. \n\\<close>"], ["", "type_synonym ('o, '\\<sigma>) MON\\<^sub>S\\<^sub>B = \"'\\<sigma> \\<Rightarrow> ('o \\<times> '\\<sigma>) set\""], ["", "definition bind_SB :: \"('o, '\\<sigma>)MON\\<^sub>S\\<^sub>B \\<Rightarrow> ('o \\<Rightarrow>  ('o', '\\<sigma>)MON\\<^sub>S\\<^sub>B) \\<Rightarrow> ('o', '\\<sigma>)MON\\<^sub>S\\<^sub>B\"\nwhere     \"bind_SB f g \\<sigma> = \\<Union> ((\\<lambda>(out, \\<sigma>). (g out \\<sigma>)) ` (f \\<sigma>))\""], ["", "notation   bind_SB (\"bind\\<^sub>S\\<^sub>B\")"], ["", "definition unit_SB   :: \"'o \\<Rightarrow> ('o, '\\<sigma>)MON\\<^sub>S\\<^sub>B\" (\"(returns _)\" 8) \nwhere     \"unit_SB e = (\\<lambda>\\<sigma>. {(e,\\<sigma>)})\""], ["", "notation   unit_SB (\"unit\\<^sub>S\\<^sub>B\")"], ["", "syntax \"_bind_SB\" :: \"[pttrn,('o,'\\<sigma>)MON\\<^sub>S\\<^sub>B,('o','\\<sigma>)MON\\<^sub>S\\<^sub>B] \\<Rightarrow> ('o','\\<sigma>)MON\\<^sub>S\\<^sub>B\" \n                                                                         (\"(2 _ := _; _)\" [5,8,8]8)"], ["", "translations \n          \"x := f; g\" \\<rightleftharpoons> \"CONST bind_SB f (% x . g)\""], ["", "lemma bind_left_unit_SB : \"(x := returns a; m) = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ( x := unit\\<^sub>S\\<^sub>B a; m) = m", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. ( x := unit\\<^sub>S\\<^sub>B a; m) x = m x", "apply (simp add: unit_SB_def bind_SB_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma bind_right_unit_SB: \"(x := m; returns x) = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bind\\<^sub>S\\<^sub>B m unit\\<^sub>S\\<^sub>B = m", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. bind\\<^sub>S\\<^sub>B m unit\\<^sub>S\\<^sub>B x = m x", "apply (simp add: unit_SB_def bind_SB_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma bind_assoc_SB: \"(y := (x := m; k); h) = (x := m; (y := k; h))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ( y :=  x := m; k; h) = ( x := m;  y := k; h)", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. ( y :=  x := m; k; h) x = ( x := m;  y := k; h) x", "apply (simp add: unit_SB_def bind_SB_def split_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection\\<open>State Backtrack Exception Monad\\<close>"], ["", "text\\<open>\n  The following combination of the previous two Monad-Constructions allows for the semantic \n  foundation of a simple generic assertion language in the style of Schirmer's Simpl-Language or \n  Rustan Leino's Boogie-PL language. The key is to use the exceptional element None for violations \n  of the assert-statement. \n\\<close>"], ["", "type_synonym  ('o, '\\<sigma>) MON\\<^sub>S\\<^sub>B\\<^sub>E = \"'\\<sigma> \\<Rightarrow> (('o \\<times> '\\<sigma>) set) option\""], ["", "definition bind_SBE :: \"('o,'\\<sigma>)MON\\<^sub>S\\<^sub>B\\<^sub>E \\<Rightarrow> ('o \\<Rightarrow> ('o','\\<sigma>)MON\\<^sub>S\\<^sub>B\\<^sub>E) \\<Rightarrow> ('o','\\<sigma>)MON\\<^sub>S\\<^sub>B\\<^sub>E\" \nwhere     \"bind_SBE f g = (\\<lambda>\\<sigma>. case f \\<sigma> of None \\<Rightarrow> None \n                                         | Some S \\<Rightarrow> (let S' = (\\<lambda>(out, \\<sigma>'). g out \\<sigma>') ` S\n                                                      in  if None \\<in> S' then None\n                                                          else Some(\\<Union> (the ` S'))))\""], ["", "syntax \"_bind_SBE\" :: \"[pttrn,('o,'\\<sigma>)MON\\<^sub>S\\<^sub>B\\<^sub>E,('o','\\<sigma>)MON\\<^sub>S\\<^sub>B\\<^sub>E] \\<Rightarrow> ('o','\\<sigma>)MON\\<^sub>S\\<^sub>B\\<^sub>E\" \n                                                                         (\"(2 _ :\\<equiv> _; _)\" [5,8,8]8)"], ["", "translations \n          \"x :\\<equiv> f; g\" \\<rightleftharpoons> \"CONST bind_SBE f (% x . g)\""], ["", "definition unit_SBE   :: \"'o \\<Rightarrow> ('o, '\\<sigma>)MON\\<^sub>S\\<^sub>B\\<^sub>E\"   (\"(returning _)\" 8) \nwhere     \"unit_SBE e = (\\<lambda>\\<sigma>. Some({(e,\\<sigma>)}))\""], ["", "definition assert_SBE   :: \"('\\<sigma> \\<Rightarrow> bool) \\<Rightarrow> (unit, '\\<sigma>)MON\\<^sub>S\\<^sub>B\\<^sub>E\"\nwhere     \"assert_SBE e = (\\<lambda>\\<sigma>. if e \\<sigma> then Some({((),\\<sigma>)})\n                                      else None)\""], ["", "notation   assert_SBE (\"assert\\<^sub>S\\<^sub>B\\<^sub>E\")"], ["", "definition assume_SBE :: \"('\\<sigma> \\<Rightarrow> bool) \\<Rightarrow> (unit, '\\<sigma>)MON\\<^sub>S\\<^sub>B\\<^sub>E\"\nwhere     \"assume_SBE e = (\\<lambda>\\<sigma>. if e \\<sigma> then Some({((),\\<sigma>)})\n                                      else Some {})\""], ["", "notation   assume_SBE (\"assume\\<^sub>S\\<^sub>B\\<^sub>E\")"], ["", "definition havoc_SBE :: \" (unit, '\\<sigma>)MON\\<^sub>S\\<^sub>B\\<^sub>E\"\nwhere     \"havoc_SBE = (\\<lambda>\\<sigma>.  Some({x. True}))\""], ["", "notation   havoc_SBE (\"havoc\\<^sub>S\\<^sub>B\\<^sub>E\")"], ["", "lemma bind_left_unit_SBE : \"(x :\\<equiv> returning a; m) = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ( x :\\<equiv> returning a; m) = m", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. ( x :\\<equiv> returning a; m) x = m x", "apply (simp add: unit_SBE_def bind_SBE_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma bind_right_unit_SBE: \"(x :\\<equiv> m; returning x) = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bind_SBE m unit_SBE = m", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. bind_SBE m unit_SBE x = m x", "apply (simp add: unit_SBE_def bind_SBE_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (case m x of None \\<Rightarrow> None\n        | Some S \\<Rightarrow>\n            let S' = (\\<lambda>(out, \\<sigma>'). Some {(out, \\<sigma>')}) `\n                     S\n            in if None \\<in> S' then None else Some (\\<Union> (the ` S'))) =\n       m x", "subgoal for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case m x of None \\<Rightarrow> None\n     | Some S \\<Rightarrow>\n         let S' = (\\<lambda>(out, \\<sigma>'). Some {(out, \\<sigma>')}) ` S\n         in if None \\<in> S' then None else Some (\\<Union> (the ` S'))) =\n    m x", "apply (case_tac \"m x\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. m x = None \\<Longrightarrow>\n    (case m x of None \\<Rightarrow> None\n     | Some S \\<Rightarrow>\n         let S' = (\\<lambda>(out, \\<sigma>'). Some {(out, \\<sigma>')}) ` S\n         in if None \\<in> S' then None else Some (\\<Union> (the ` S'))) =\n    m x\n 2. \\<And>a.\n       m x = Some a \\<Longrightarrow>\n       (case m x of None \\<Rightarrow> None\n        | Some S \\<Rightarrow>\n            let S' = (\\<lambda>(out, \\<sigma>'). Some {(out, \\<sigma>')}) `\n                     S\n            in if None \\<in> S' then None else Some (\\<Union> (the ` S'))) =\n       m x", "apply (simp_all add:Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       m x = Some a \\<Longrightarrow>\n       None \\<notin> (\\<lambda>x. Some {x}) ` a", "apply (rule HOL.ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>m x = Some a;\n        \\<not> None \\<notin> (\\<lambda>x. Some {x}) ` a\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add: Set.image_iff)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas aux = trans[OF HOL.neq_commute,OF Option.not_None_eq]"], ["", "lemma bind_assoc_SBE: \"(y :\\<equiv> (x :\\<equiv> m; k); h) = (x :\\<equiv> m; (y :\\<equiv> k; h))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ( y :\\<equiv>  x :\\<equiv> m; k; h) =\n    ( x :\\<equiv> m;  y :\\<equiv> k; h)", "proof (rule ext, simp add: unit_SBE_def bind_SBE_def, rename_tac x,\n    case_tac \"m x\", simp_all add: Let_def Set.image_iff, safe,goal_cases)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x a aa b ab ba aaa baa.\n       \\<lbrakk>m x = Some a; (aa, b) \\<in> a; (ab, ba) \\<in> the (k b);\n        None = h ba; (aaa, baa) \\<in> a; None = k baa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>a.\n                            None =\n                            (case x of\n                             (out, \\<sigma>') \\<Rightarrow>\n                               case k \\<sigma>' of None \\<Rightarrow> None\n                               | Some S \\<Rightarrow>\n                                   let S' = (\\<lambda>(out, y). h y) ` S\n                                   in if None \\<in> S' then None\nelse Some (\\<Union> (the ` S')))\n 2. \\<And>x a aa b ab ba.\n       \\<lbrakk>m x = Some a; (aa, b) \\<in> a; (ab, ba) \\<in> the (k b);\n        None = h ba;\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>a.\n                            None =\n                            (case x of\n                             (out, \\<sigma>') \\<Rightarrow>\n                               case k \\<sigma>' of None \\<Rightarrow> None\n                               | Some S \\<Rightarrow>\n                                   let S' = (\\<lambda>(out, y). h y) ` S\n                                   in if None \\<in> S' then None\nelse Some (\\<Union> (the ` S')))\n 3. \\<And>x a aa b.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        (aa, b) \\<in> a; None = k b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>a.\n                            None =\n                            (case x of\n                             (out, \\<sigma>') \\<Rightarrow>\n                               case k \\<sigma>' of None \\<Rightarrow> None\n                               | Some S \\<Rightarrow>\n                                   let S' = (\\<lambda>(out, y). h y) ` S\n                                   in if None \\<in> S' then None\nelse Some (\\<Union> (the ` S')))\n 4. \\<And>x a aa b.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        (aa, b) \\<in> a;\n        None =\n        (case k b of None \\<Rightarrow> None\n         | Some S \\<Rightarrow>\n             let S' = (\\<lambda>(out, y). h y) ` S\n             in if None \\<in> S' then None\n                else Some (\\<Union> (the ` S')))\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>x a aa b ab ba aaa baa.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        \\<forall>x\\<in>a.\n           None \\<noteq>\n           (case x of\n            (out, \\<sigma>') \\<Rightarrow>\n              case k \\<sigma>' of None \\<Rightarrow> None\n              | Some S \\<Rightarrow>\n                  let S' = (\\<lambda>(out, y). h y) ` S\n                  in if None \\<in> S' then None\n                     else Some (\\<Union> (the ` S')));\n        (ab, ba) \\<in> a; (aaa, baa) \\<in> the (k ba);\n        (aa, b) \\<in> the (h baa)\\<rbrakk>\n       \\<Longrightarrow> (aa, b)\n                         \\<in> (\\<Union>a\\<in>a.\n                                   the (case a of\n  (out, \\<sigma>') \\<Rightarrow>\n    case k \\<sigma>' of None \\<Rightarrow> None\n    | Some S \\<Rightarrow>\n        let S' = (\\<lambda>(out, y). h y) ` S\n        in if None \\<in> S' then None else Some (\\<Union> (the ` S'))))\n 6. \\<And>x a aa b aaa ba.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        \\<forall>x\\<in>a.\n           None \\<noteq>\n           (case x of\n            (out, \\<sigma>') \\<Rightarrow>\n              case k \\<sigma>' of None \\<Rightarrow> None\n              | Some S \\<Rightarrow>\n                  let S' = (\\<lambda>(out, y). h y) ` S\n                  in if None \\<in> S' then None\n                     else Some (\\<Union> (the ` S')));\n        (aaa, ba) \\<in> a;\n        (aa, b)\n        \\<in> the (case k ba of None \\<Rightarrow> None\n                   | Some S \\<Rightarrow>\n                       let S' = (\\<lambda>(out, y). h y) ` S\n                       in if None \\<in> S' then None\n                          else Some (\\<Union> (the ` S')))\\<rbrakk>\n       \\<Longrightarrow> (aa, b)\n                         \\<in> (\\<Union>x\\<in>a.\n                                   \\<Union>a\\<in>the\n            (case x of (out, x) \\<Rightarrow> k x).\nthe (case a of (out, x) \\<Rightarrow> h x))", "case (1 x a aa b ab ba a b)"], ["proof (state)\nthis:\n  m x = Some a__\n  (aa, b__) \\<in> a__\n  (ab, ba) \\<in> the (k b__)\n  None = h ba\n  (a, b) \\<in> a__\n  None = k b\n\ngoal (6 subgoals):\n 1. \\<And>x a aa b ab ba aaa baa.\n       \\<lbrakk>m x = Some a; (aa, b) \\<in> a; (ab, ba) \\<in> the (k b);\n        None = h ba; (aaa, baa) \\<in> a; None = k baa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>a.\n                            None =\n                            (case x of\n                             (out, \\<sigma>') \\<Rightarrow>\n                               case k \\<sigma>' of None \\<Rightarrow> None\n                               | Some S \\<Rightarrow>\n                                   let S' = (\\<lambda>(out, y). h y) ` S\n                                   in if None \\<in> S' then None\nelse Some (\\<Union> (the ` S')))\n 2. \\<And>x a aa b ab ba.\n       \\<lbrakk>m x = Some a; (aa, b) \\<in> a; (ab, ba) \\<in> the (k b);\n        None = h ba;\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>a.\n                            None =\n                            (case x of\n                             (out, \\<sigma>') \\<Rightarrow>\n                               case k \\<sigma>' of None \\<Rightarrow> None\n                               | Some S \\<Rightarrow>\n                                   let S' = (\\<lambda>(out, y). h y) ` S\n                                   in if None \\<in> S' then None\nelse Some (\\<Union> (the ` S')))\n 3. \\<And>x a aa b.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        (aa, b) \\<in> a; None = k b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>a.\n                            None =\n                            (case x of\n                             (out, \\<sigma>') \\<Rightarrow>\n                               case k \\<sigma>' of None \\<Rightarrow> None\n                               | Some S \\<Rightarrow>\n                                   let S' = (\\<lambda>(out, y). h y) ` S\n                                   in if None \\<in> S' then None\nelse Some (\\<Union> (the ` S')))\n 4. \\<And>x a aa b.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        (aa, b) \\<in> a;\n        None =\n        (case k b of None \\<Rightarrow> None\n         | Some S \\<Rightarrow>\n             let S' = (\\<lambda>(out, y). h y) ` S\n             in if None \\<in> S' then None\n                else Some (\\<Union> (the ` S')))\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>x a aa b ab ba aaa baa.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        \\<forall>x\\<in>a.\n           None \\<noteq>\n           (case x of\n            (out, \\<sigma>') \\<Rightarrow>\n              case k \\<sigma>' of None \\<Rightarrow> None\n              | Some S \\<Rightarrow>\n                  let S' = (\\<lambda>(out, y). h y) ` S\n                  in if None \\<in> S' then None\n                     else Some (\\<Union> (the ` S')));\n        (ab, ba) \\<in> a; (aaa, baa) \\<in> the (k ba);\n        (aa, b) \\<in> the (h baa)\\<rbrakk>\n       \\<Longrightarrow> (aa, b)\n                         \\<in> (\\<Union>a\\<in>a.\n                                   the (case a of\n  (out, \\<sigma>') \\<Rightarrow>\n    case k \\<sigma>' of None \\<Rightarrow> None\n    | Some S \\<Rightarrow>\n        let S' = (\\<lambda>(out, y). h y) ` S\n        in if None \\<in> S' then None else Some (\\<Union> (the ` S'))))\n 6. \\<And>x a aa b aaa ba.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        \\<forall>x\\<in>a.\n           None \\<noteq>\n           (case x of\n            (out, \\<sigma>') \\<Rightarrow>\n              case k \\<sigma>' of None \\<Rightarrow> None\n              | Some S \\<Rightarrow>\n                  let S' = (\\<lambda>(out, y). h y) ` S\n                  in if None \\<in> S' then None\n                     else Some (\\<Union> (the ` S')));\n        (aaa, ba) \\<in> a;\n        (aa, b)\n        \\<in> the (case k ba of None \\<Rightarrow> None\n                   | Some S \\<Rightarrow>\n                       let S' = (\\<lambda>(out, y). h y) ` S\n                       in if None \\<in> S' then None\n                          else Some (\\<Union> (the ` S')))\\<rbrakk>\n       \\<Longrightarrow> (aa, b)\n                         \\<in> (\\<Union>x\\<in>a.\n                                   \\<Union>a\\<in>the\n            (case x of (out, x) \\<Rightarrow> k x).\nthe (case a of (out, x) \\<Rightarrow> h x))", "then"], ["proof (chain)\npicking this:\n  m x = Some a__\n  (aa, b__) \\<in> a__\n  (ab, ba) \\<in> the (k b__)\n  None = h ba\n  (a, b) \\<in> a__\n  None = k b", "show ?case"], ["proof (prove)\nusing this:\n  m x = Some a__\n  (aa, b__) \\<in> a__\n  (ab, ba) \\<in> the (k b__)\n  None = h ba\n  (a, b) \\<in> a__\n  None = k b\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>a__.\n       None =\n       (case x of\n        (out, \\<sigma>') \\<Rightarrow>\n          case k \\<sigma>' of None \\<Rightarrow> None\n          | Some S \\<Rightarrow>\n              let S' = (\\<lambda>(out, y). h y) ` S\n              in if None \\<in> S' then None else Some (\\<Union> (the ` S')))", "by(rule_tac x=\"(a, b)\" in bexI, simp_all)"], ["proof (state)\nthis:\n  \\<exists>x\\<in>a__.\n     None =\n     (case x of\n      (out, \\<sigma>') \\<Rightarrow>\n        case k \\<sigma>' of None \\<Rightarrow> None\n        | Some S \\<Rightarrow>\n            let S' = (\\<lambda>(out, y). h y) ` S\n            in if None \\<in> S' then None else Some (\\<Union> (the ` S')))\n\ngoal (5 subgoals):\n 1. \\<And>x a aa b ab ba.\n       \\<lbrakk>m x = Some a; (aa, b) \\<in> a; (ab, ba) \\<in> the (k b);\n        None = h ba;\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>a.\n                            None =\n                            (case x of\n                             (out, \\<sigma>') \\<Rightarrow>\n                               case k \\<sigma>' of None \\<Rightarrow> None\n                               | Some S \\<Rightarrow>\n                                   let S' = (\\<lambda>(out, y). h y) ` S\n                                   in if None \\<in> S' then None\nelse Some (\\<Union> (the ` S')))\n 2. \\<And>x a aa b.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        (aa, b) \\<in> a; None = k b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>a.\n                            None =\n                            (case x of\n                             (out, \\<sigma>') \\<Rightarrow>\n                               case k \\<sigma>' of None \\<Rightarrow> None\n                               | Some S \\<Rightarrow>\n                                   let S' = (\\<lambda>(out, y). h y) ` S\n                                   in if None \\<in> S' then None\nelse Some (\\<Union> (the ` S')))\n 3. \\<And>x a aa b.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        (aa, b) \\<in> a;\n        None =\n        (case k b of None \\<Rightarrow> None\n         | Some S \\<Rightarrow>\n             let S' = (\\<lambda>(out, y). h y) ` S\n             in if None \\<in> S' then None\n                else Some (\\<Union> (the ` S')))\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x a aa b ab ba aaa baa.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        \\<forall>x\\<in>a.\n           None \\<noteq>\n           (case x of\n            (out, \\<sigma>') \\<Rightarrow>\n              case k \\<sigma>' of None \\<Rightarrow> None\n              | Some S \\<Rightarrow>\n                  let S' = (\\<lambda>(out, y). h y) ` S\n                  in if None \\<in> S' then None\n                     else Some (\\<Union> (the ` S')));\n        (ab, ba) \\<in> a; (aaa, baa) \\<in> the (k ba);\n        (aa, b) \\<in> the (h baa)\\<rbrakk>\n       \\<Longrightarrow> (aa, b)\n                         \\<in> (\\<Union>a\\<in>a.\n                                   the (case a of\n  (out, \\<sigma>') \\<Rightarrow>\n    case k \\<sigma>' of None \\<Rightarrow> None\n    | Some S \\<Rightarrow>\n        let S' = (\\<lambda>(out, y). h y) ` S\n        in if None \\<in> S' then None else Some (\\<Union> (the ` S'))))\n 5. \\<And>x a aa b aaa ba.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        \\<forall>x\\<in>a.\n           None \\<noteq>\n           (case x of\n            (out, \\<sigma>') \\<Rightarrow>\n              case k \\<sigma>' of None \\<Rightarrow> None\n              | Some S \\<Rightarrow>\n                  let S' = (\\<lambda>(out, y). h y) ` S\n                  in if None \\<in> S' then None\n                     else Some (\\<Union> (the ` S')));\n        (aaa, ba) \\<in> a;\n        (aa, b)\n        \\<in> the (case k ba of None \\<Rightarrow> None\n                   | Some S \\<Rightarrow>\n                       let S' = (\\<lambda>(out, y). h y) ` S\n                       in if None \\<in> S' then None\n                          else Some (\\<Union> (the ` S')))\\<rbrakk>\n       \\<Longrightarrow> (aa, b)\n                         \\<in> (\\<Union>x\\<in>a.\n                                   \\<Union>a\\<in>the\n            (case x of (out, x) \\<Rightarrow> k x).\nthe (case a of (out, x) \\<Rightarrow> h x))", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x a aa b ab ba.\n       \\<lbrakk>m x = Some a; (aa, b) \\<in> a; (ab, ba) \\<in> the (k b);\n        None = h ba;\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>a.\n                            None =\n                            (case x of\n                             (out, \\<sigma>') \\<Rightarrow>\n                               case k \\<sigma>' of None \\<Rightarrow> None\n                               | Some S \\<Rightarrow>\n                                   let S' = (\\<lambda>(out, y). h y) ` S\n                                   in if None \\<in> S' then None\nelse Some (\\<Union> (the ` S')))\n 2. \\<And>x a aa b.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        (aa, b) \\<in> a; None = k b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>a.\n                            None =\n                            (case x of\n                             (out, \\<sigma>') \\<Rightarrow>\n                               case k \\<sigma>' of None \\<Rightarrow> None\n                               | Some S \\<Rightarrow>\n                                   let S' = (\\<lambda>(out, y). h y) ` S\n                                   in if None \\<in> S' then None\nelse Some (\\<Union> (the ` S')))\n 3. \\<And>x a aa b.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        (aa, b) \\<in> a;\n        None =\n        (case k b of None \\<Rightarrow> None\n         | Some S \\<Rightarrow>\n             let S' = (\\<lambda>(out, y). h y) ` S\n             in if None \\<in> S' then None\n                else Some (\\<Union> (the ` S')))\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x a aa b ab ba aaa baa.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        \\<forall>x\\<in>a.\n           None \\<noteq>\n           (case x of\n            (out, \\<sigma>') \\<Rightarrow>\n              case k \\<sigma>' of None \\<Rightarrow> None\n              | Some S \\<Rightarrow>\n                  let S' = (\\<lambda>(out, y). h y) ` S\n                  in if None \\<in> S' then None\n                     else Some (\\<Union> (the ` S')));\n        (ab, ba) \\<in> a; (aaa, baa) \\<in> the (k ba);\n        (aa, b) \\<in> the (h baa)\\<rbrakk>\n       \\<Longrightarrow> (aa, b)\n                         \\<in> (\\<Union>a\\<in>a.\n                                   the (case a of\n  (out, \\<sigma>') \\<Rightarrow>\n    case k \\<sigma>' of None \\<Rightarrow> None\n    | Some S \\<Rightarrow>\n        let S' = (\\<lambda>(out, y). h y) ` S\n        in if None \\<in> S' then None else Some (\\<Union> (the ` S'))))\n 5. \\<And>x a aa b aaa ba.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        \\<forall>x\\<in>a.\n           None \\<noteq>\n           (case x of\n            (out, \\<sigma>') \\<Rightarrow>\n              case k \\<sigma>' of None \\<Rightarrow> None\n              | Some S \\<Rightarrow>\n                  let S' = (\\<lambda>(out, y). h y) ` S\n                  in if None \\<in> S' then None\n                     else Some (\\<Union> (the ` S')));\n        (aaa, ba) \\<in> a;\n        (aa, b)\n        \\<in> the (case k ba of None \\<Rightarrow> None\n                   | Some S \\<Rightarrow>\n                       let S' = (\\<lambda>(out, y). h y) ` S\n                       in if None \\<in> S' then None\n                          else Some (\\<Union> (the ` S')))\\<rbrakk>\n       \\<Longrightarrow> (aa, b)\n                         \\<in> (\\<Union>x\\<in>a.\n                                   \\<Union>a\\<in>the\n            (case x of (out, x) \\<Rightarrow> k x).\nthe (case a of (out, x) \\<Rightarrow> h x))", "case (2 x a aa b ab ba)"], ["proof (state)\nthis:\n  m x = Some a\n  (aa, b) \\<in> a\n  (ab, ba) \\<in> the (k b)\n  None = h ba\n  \\<forall>x\\<in>a. None \\<noteq> (case x of (out, x) \\<Rightarrow> k x)\n\ngoal (5 subgoals):\n 1. \\<And>x a aa b ab ba.\n       \\<lbrakk>m x = Some a; (aa, b) \\<in> a; (ab, ba) \\<in> the (k b);\n        None = h ba;\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>a.\n                            None =\n                            (case x of\n                             (out, \\<sigma>') \\<Rightarrow>\n                               case k \\<sigma>' of None \\<Rightarrow> None\n                               | Some S \\<Rightarrow>\n                                   let S' = (\\<lambda>(out, y). h y) ` S\n                                   in if None \\<in> S' then None\nelse Some (\\<Union> (the ` S')))\n 2. \\<And>x a aa b.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        (aa, b) \\<in> a; None = k b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>a.\n                            None =\n                            (case x of\n                             (out, \\<sigma>') \\<Rightarrow>\n                               case k \\<sigma>' of None \\<Rightarrow> None\n                               | Some S \\<Rightarrow>\n                                   let S' = (\\<lambda>(out, y). h y) ` S\n                                   in if None \\<in> S' then None\nelse Some (\\<Union> (the ` S')))\n 3. \\<And>x a aa b.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        (aa, b) \\<in> a;\n        None =\n        (case k b of None \\<Rightarrow> None\n         | Some S \\<Rightarrow>\n             let S' = (\\<lambda>(out, y). h y) ` S\n             in if None \\<in> S' then None\n                else Some (\\<Union> (the ` S')))\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x a aa b ab ba aaa baa.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        \\<forall>x\\<in>a.\n           None \\<noteq>\n           (case x of\n            (out, \\<sigma>') \\<Rightarrow>\n              case k \\<sigma>' of None \\<Rightarrow> None\n              | Some S \\<Rightarrow>\n                  let S' = (\\<lambda>(out, y). h y) ` S\n                  in if None \\<in> S' then None\n                     else Some (\\<Union> (the ` S')));\n        (ab, ba) \\<in> a; (aaa, baa) \\<in> the (k ba);\n        (aa, b) \\<in> the (h baa)\\<rbrakk>\n       \\<Longrightarrow> (aa, b)\n                         \\<in> (\\<Union>a\\<in>a.\n                                   the (case a of\n  (out, \\<sigma>') \\<Rightarrow>\n    case k \\<sigma>' of None \\<Rightarrow> None\n    | Some S \\<Rightarrow>\n        let S' = (\\<lambda>(out, y). h y) ` S\n        in if None \\<in> S' then None else Some (\\<Union> (the ` S'))))\n 5. \\<And>x a aa b aaa ba.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        \\<forall>x\\<in>a.\n           None \\<noteq>\n           (case x of\n            (out, \\<sigma>') \\<Rightarrow>\n              case k \\<sigma>' of None \\<Rightarrow> None\n              | Some S \\<Rightarrow>\n                  let S' = (\\<lambda>(out, y). h y) ` S\n                  in if None \\<in> S' then None\n                     else Some (\\<Union> (the ` S')));\n        (aaa, ba) \\<in> a;\n        (aa, b)\n        \\<in> the (case k ba of None \\<Rightarrow> None\n                   | Some S \\<Rightarrow>\n                       let S' = (\\<lambda>(out, y). h y) ` S\n                       in if None \\<in> S' then None\n                          else Some (\\<Union> (the ` S')))\\<rbrakk>\n       \\<Longrightarrow> (aa, b)\n                         \\<in> (\\<Union>x\\<in>a.\n                                   \\<Union>a\\<in>the\n            (case x of (out, x) \\<Rightarrow> k x).\nthe (case a of (out, x) \\<Rightarrow> h x))", "then"], ["proof (chain)\npicking this:\n  m x = Some a\n  (aa, b) \\<in> a\n  (ab, ba) \\<in> the (k b)\n  None = h ba\n  \\<forall>x\\<in>a. None \\<noteq> (case x of (out, x) \\<Rightarrow> k x)", "show ?case"], ["proof (prove)\nusing this:\n  m x = Some a\n  (aa, b) \\<in> a\n  (ab, ba) \\<in> the (k b)\n  None = h ba\n  \\<forall>x\\<in>a. None \\<noteq> (case x of (out, x) \\<Rightarrow> k x)\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>a.\n       None =\n       (case x of\n        (out, \\<sigma>') \\<Rightarrow>\n          case k \\<sigma>' of None \\<Rightarrow> None\n          | Some S \\<Rightarrow>\n              let S' = (\\<lambda>(out, y). h y) ` S\n              in if None \\<in> S' then None else Some (\\<Union> (the ` S')))", "apply (rule_tac x=\"(aa, b)\" in bexI, simp_all add:split_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>a. None \\<noteq> k (snd x); m x = Some a;\n     (aa, b) \\<in> a; (ab, ba) \\<in> the (k b); None = h ba\\<rbrakk>\n    \\<Longrightarrow> None =\n                      (case k b of None \\<Rightarrow> None\n                       | Some S \\<Rightarrow>\n                           let S' = (\\<lambda>(out, y). h y) ` S\n                           in if None \\<in> S' then None\n                              else Some (\\<Union> (the ` S')))", "apply (erule_tac x=\"(aa,b)\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>m x = Some a; (aa, b) \\<in> a; (ab, ba) \\<in> the (k b);\n     None = h ba; None \\<noteq> k (snd (aa, b))\\<rbrakk>\n    \\<Longrightarrow> None =\n                      (case k b of None \\<Rightarrow> None\n                       | Some S \\<Rightarrow>\n                           let S' = (\\<lambda>(out, y). h y) ` S\n                           in if None \\<in> S' then None\n                              else Some (\\<Union> (the ` S')))\n 2. \\<lbrakk>m x = Some a; (aa, b) \\<in> a; (ab, ba) \\<in> the (k b);\n     None = h ba; (aa, b) \\<notin> a\\<rbrakk>\n    \\<Longrightarrow> None =\n                      (case k b of None \\<Rightarrow> None\n                       | Some S \\<Rightarrow>\n                           let S' = (\\<lambda>(out, y). h y) ` S\n                           in if None \\<in> S' then None\n                              else Some (\\<Union> (the ` S')))", "apply (auto simp: aux image_def split_def intro!: rev_bexI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>x\\<in>a.\n     None =\n     (case x of\n      (out, \\<sigma>') \\<Rightarrow>\n        case k \\<sigma>' of None \\<Rightarrow> None\n        | Some S \\<Rightarrow>\n            let S' = (\\<lambda>(out, y). h y) ` S\n            in if None \\<in> S' then None else Some (\\<Union> (the ` S')))\n\ngoal (4 subgoals):\n 1. \\<And>x a aa b.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        (aa, b) \\<in> a; None = k b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>a.\n                            None =\n                            (case x of\n                             (out, \\<sigma>') \\<Rightarrow>\n                               case k \\<sigma>' of None \\<Rightarrow> None\n                               | Some S \\<Rightarrow>\n                                   let S' = (\\<lambda>(out, y). h y) ` S\n                                   in if None \\<in> S' then None\nelse Some (\\<Union> (the ` S')))\n 2. \\<And>x a aa b.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        (aa, b) \\<in> a;\n        None =\n        (case k b of None \\<Rightarrow> None\n         | Some S \\<Rightarrow>\n             let S' = (\\<lambda>(out, y). h y) ` S\n             in if None \\<in> S' then None\n                else Some (\\<Union> (the ` S')))\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x a aa b ab ba aaa baa.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        \\<forall>x\\<in>a.\n           None \\<noteq>\n           (case x of\n            (out, \\<sigma>') \\<Rightarrow>\n              case k \\<sigma>' of None \\<Rightarrow> None\n              | Some S \\<Rightarrow>\n                  let S' = (\\<lambda>(out, y). h y) ` S\n                  in if None \\<in> S' then None\n                     else Some (\\<Union> (the ` S')));\n        (ab, ba) \\<in> a; (aaa, baa) \\<in> the (k ba);\n        (aa, b) \\<in> the (h baa)\\<rbrakk>\n       \\<Longrightarrow> (aa, b)\n                         \\<in> (\\<Union>a\\<in>a.\n                                   the (case a of\n  (out, \\<sigma>') \\<Rightarrow>\n    case k \\<sigma>' of None \\<Rightarrow> None\n    | Some S \\<Rightarrow>\n        let S' = (\\<lambda>(out, y). h y) ` S\n        in if None \\<in> S' then None else Some (\\<Union> (the ` S'))))\n 4. \\<And>x a aa b aaa ba.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        \\<forall>x\\<in>a.\n           None \\<noteq>\n           (case x of\n            (out, \\<sigma>') \\<Rightarrow>\n              case k \\<sigma>' of None \\<Rightarrow> None\n              | Some S \\<Rightarrow>\n                  let S' = (\\<lambda>(out, y). h y) ` S\n                  in if None \\<in> S' then None\n                     else Some (\\<Union> (the ` S')));\n        (aaa, ba) \\<in> a;\n        (aa, b)\n        \\<in> the (case k ba of None \\<Rightarrow> None\n                   | Some S \\<Rightarrow>\n                       let S' = (\\<lambda>(out, y). h y) ` S\n                       in if None \\<in> S' then None\n                          else Some (\\<Union> (the ` S')))\\<rbrakk>\n       \\<Longrightarrow> (aa, b)\n                         \\<in> (\\<Union>x\\<in>a.\n                                   \\<Union>a\\<in>the\n            (case x of (out, x) \\<Rightarrow> k x).\nthe (case a of (out, x) \\<Rightarrow> h x))", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x a aa b.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        (aa, b) \\<in> a; None = k b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>a.\n                            None =\n                            (case x of\n                             (out, \\<sigma>') \\<Rightarrow>\n                               case k \\<sigma>' of None \\<Rightarrow> None\n                               | Some S \\<Rightarrow>\n                                   let S' = (\\<lambda>(out, y). h y) ` S\n                                   in if None \\<in> S' then None\nelse Some (\\<Union> (the ` S')))\n 2. \\<And>x a aa b.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        (aa, b) \\<in> a;\n        None =\n        (case k b of None \\<Rightarrow> None\n         | Some S \\<Rightarrow>\n             let S' = (\\<lambda>(out, y). h y) ` S\n             in if None \\<in> S' then None\n                else Some (\\<Union> (the ` S')))\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x a aa b ab ba aaa baa.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        \\<forall>x\\<in>a.\n           None \\<noteq>\n           (case x of\n            (out, \\<sigma>') \\<Rightarrow>\n              case k \\<sigma>' of None \\<Rightarrow> None\n              | Some S \\<Rightarrow>\n                  let S' = (\\<lambda>(out, y). h y) ` S\n                  in if None \\<in> S' then None\n                     else Some (\\<Union> (the ` S')));\n        (ab, ba) \\<in> a; (aaa, baa) \\<in> the (k ba);\n        (aa, b) \\<in> the (h baa)\\<rbrakk>\n       \\<Longrightarrow> (aa, b)\n                         \\<in> (\\<Union>a\\<in>a.\n                                   the (case a of\n  (out, \\<sigma>') \\<Rightarrow>\n    case k \\<sigma>' of None \\<Rightarrow> None\n    | Some S \\<Rightarrow>\n        let S' = (\\<lambda>(out, y). h y) ` S\n        in if None \\<in> S' then None else Some (\\<Union> (the ` S'))))\n 4. \\<And>x a aa b aaa ba.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        \\<forall>x\\<in>a.\n           None \\<noteq>\n           (case x of\n            (out, \\<sigma>') \\<Rightarrow>\n              case k \\<sigma>' of None \\<Rightarrow> None\n              | Some S \\<Rightarrow>\n                  let S' = (\\<lambda>(out, y). h y) ` S\n                  in if None \\<in> S' then None\n                     else Some (\\<Union> (the ` S')));\n        (aaa, ba) \\<in> a;\n        (aa, b)\n        \\<in> the (case k ba of None \\<Rightarrow> None\n                   | Some S \\<Rightarrow>\n                       let S' = (\\<lambda>(out, y). h y) ` S\n                       in if None \\<in> S' then None\n                          else Some (\\<Union> (the ` S')))\\<rbrakk>\n       \\<Longrightarrow> (aa, b)\n                         \\<in> (\\<Union>x\\<in>a.\n                                   \\<Union>a\\<in>the\n            (case x of (out, x) \\<Rightarrow> k x).\nthe (case a of (out, x) \\<Rightarrow> h x))", "case (3 x a a b)"], ["proof (state)\nthis:\n  m x = Some a__\n  \\<forall>y\\<in>a__.\n     \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n        None \\<noteq> (case x of (out, x) \\<Rightarrow> h x)\n  (a, b) \\<in> a__\n  None = k b\n\ngoal (4 subgoals):\n 1. \\<And>x a aa b.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        (aa, b) \\<in> a; None = k b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>a.\n                            None =\n                            (case x of\n                             (out, \\<sigma>') \\<Rightarrow>\n                               case k \\<sigma>' of None \\<Rightarrow> None\n                               | Some S \\<Rightarrow>\n                                   let S' = (\\<lambda>(out, y). h y) ` S\n                                   in if None \\<in> S' then None\nelse Some (\\<Union> (the ` S')))\n 2. \\<And>x a aa b.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        (aa, b) \\<in> a;\n        None =\n        (case k b of None \\<Rightarrow> None\n         | Some S \\<Rightarrow>\n             let S' = (\\<lambda>(out, y). h y) ` S\n             in if None \\<in> S' then None\n                else Some (\\<Union> (the ` S')))\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x a aa b ab ba aaa baa.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        \\<forall>x\\<in>a.\n           None \\<noteq>\n           (case x of\n            (out, \\<sigma>') \\<Rightarrow>\n              case k \\<sigma>' of None \\<Rightarrow> None\n              | Some S \\<Rightarrow>\n                  let S' = (\\<lambda>(out, y). h y) ` S\n                  in if None \\<in> S' then None\n                     else Some (\\<Union> (the ` S')));\n        (ab, ba) \\<in> a; (aaa, baa) \\<in> the (k ba);\n        (aa, b) \\<in> the (h baa)\\<rbrakk>\n       \\<Longrightarrow> (aa, b)\n                         \\<in> (\\<Union>a\\<in>a.\n                                   the (case a of\n  (out, \\<sigma>') \\<Rightarrow>\n    case k \\<sigma>' of None \\<Rightarrow> None\n    | Some S \\<Rightarrow>\n        let S' = (\\<lambda>(out, y). h y) ` S\n        in if None \\<in> S' then None else Some (\\<Union> (the ` S'))))\n 4. \\<And>x a aa b aaa ba.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        \\<forall>x\\<in>a.\n           None \\<noteq>\n           (case x of\n            (out, \\<sigma>') \\<Rightarrow>\n              case k \\<sigma>' of None \\<Rightarrow> None\n              | Some S \\<Rightarrow>\n                  let S' = (\\<lambda>(out, y). h y) ` S\n                  in if None \\<in> S' then None\n                     else Some (\\<Union> (the ` S')));\n        (aaa, ba) \\<in> a;\n        (aa, b)\n        \\<in> the (case k ba of None \\<Rightarrow> None\n                   | Some S \\<Rightarrow>\n                       let S' = (\\<lambda>(out, y). h y) ` S\n                       in if None \\<in> S' then None\n                          else Some (\\<Union> (the ` S')))\\<rbrakk>\n       \\<Longrightarrow> (aa, b)\n                         \\<in> (\\<Union>x\\<in>a.\n                                   \\<Union>a\\<in>the\n            (case x of (out, x) \\<Rightarrow> k x).\nthe (case a of (out, x) \\<Rightarrow> h x))", "then"], ["proof (chain)\npicking this:\n  m x = Some a__\n  \\<forall>y\\<in>a__.\n     \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n        None \\<noteq> (case x of (out, x) \\<Rightarrow> h x)\n  (a, b) \\<in> a__\n  None = k b", "show ?case"], ["proof (prove)\nusing this:\n  m x = Some a__\n  \\<forall>y\\<in>a__.\n     \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n        None \\<noteq> (case x of (out, x) \\<Rightarrow> h x)\n  (a, b) \\<in> a__\n  None = k b\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>a__.\n       None =\n       (case x of\n        (out, \\<sigma>') \\<Rightarrow>\n          case k \\<sigma>' of None \\<Rightarrow> None\n          | Some S \\<Rightarrow>\n              let S' = (\\<lambda>(out, y). h y) ` S\n              in if None \\<in> S' then None else Some (\\<Union> (the ` S')))", "by(rule_tac x=\"(a, b)\" in bexI, simp_all)"], ["proof (state)\nthis:\n  \\<exists>x\\<in>a__.\n     None =\n     (case x of\n      (out, \\<sigma>') \\<Rightarrow>\n        case k \\<sigma>' of None \\<Rightarrow> None\n        | Some S \\<Rightarrow>\n            let S' = (\\<lambda>(out, y). h y) ` S\n            in if None \\<in> S' then None else Some (\\<Union> (the ` S')))\n\ngoal (3 subgoals):\n 1. \\<And>x a aa b.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        (aa, b) \\<in> a;\n        None =\n        (case k b of None \\<Rightarrow> None\n         | Some S \\<Rightarrow>\n             let S' = (\\<lambda>(out, y). h y) ` S\n             in if None \\<in> S' then None\n                else Some (\\<Union> (the ` S')))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x a aa b ab ba aaa baa.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        \\<forall>x\\<in>a.\n           None \\<noteq>\n           (case x of\n            (out, \\<sigma>') \\<Rightarrow>\n              case k \\<sigma>' of None \\<Rightarrow> None\n              | Some S \\<Rightarrow>\n                  let S' = (\\<lambda>(out, y). h y) ` S\n                  in if None \\<in> S' then None\n                     else Some (\\<Union> (the ` S')));\n        (ab, ba) \\<in> a; (aaa, baa) \\<in> the (k ba);\n        (aa, b) \\<in> the (h baa)\\<rbrakk>\n       \\<Longrightarrow> (aa, b)\n                         \\<in> (\\<Union>a\\<in>a.\n                                   the (case a of\n  (out, \\<sigma>') \\<Rightarrow>\n    case k \\<sigma>' of None \\<Rightarrow> None\n    | Some S \\<Rightarrow>\n        let S' = (\\<lambda>(out, y). h y) ` S\n        in if None \\<in> S' then None else Some (\\<Union> (the ` S'))))\n 3. \\<And>x a aa b aaa ba.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        \\<forall>x\\<in>a.\n           None \\<noteq>\n           (case x of\n            (out, \\<sigma>') \\<Rightarrow>\n              case k \\<sigma>' of None \\<Rightarrow> None\n              | Some S \\<Rightarrow>\n                  let S' = (\\<lambda>(out, y). h y) ` S\n                  in if None \\<in> S' then None\n                     else Some (\\<Union> (the ` S')));\n        (aaa, ba) \\<in> a;\n        (aa, b)\n        \\<in> the (case k ba of None \\<Rightarrow> None\n                   | Some S \\<Rightarrow>\n                       let S' = (\\<lambda>(out, y). h y) ` S\n                       in if None \\<in> S' then None\n                          else Some (\\<Union> (the ` S')))\\<rbrakk>\n       \\<Longrightarrow> (aa, b)\n                         \\<in> (\\<Union>x\\<in>a.\n                                   \\<Union>a\\<in>the\n            (case x of (out, x) \\<Rightarrow> k x).\nthe (case a of (out, x) \\<Rightarrow> h x))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x a aa b.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        (aa, b) \\<in> a;\n        None =\n        (case k b of None \\<Rightarrow> None\n         | Some S \\<Rightarrow>\n             let S' = (\\<lambda>(out, y). h y) ` S\n             in if None \\<in> S' then None\n                else Some (\\<Union> (the ` S')))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x a aa b ab ba aaa baa.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        \\<forall>x\\<in>a.\n           None \\<noteq>\n           (case x of\n            (out, \\<sigma>') \\<Rightarrow>\n              case k \\<sigma>' of None \\<Rightarrow> None\n              | Some S \\<Rightarrow>\n                  let S' = (\\<lambda>(out, y). h y) ` S\n                  in if None \\<in> S' then None\n                     else Some (\\<Union> (the ` S')));\n        (ab, ba) \\<in> a; (aaa, baa) \\<in> the (k ba);\n        (aa, b) \\<in> the (h baa)\\<rbrakk>\n       \\<Longrightarrow> (aa, b)\n                         \\<in> (\\<Union>a\\<in>a.\n                                   the (case a of\n  (out, \\<sigma>') \\<Rightarrow>\n    case k \\<sigma>' of None \\<Rightarrow> None\n    | Some S \\<Rightarrow>\n        let S' = (\\<lambda>(out, y). h y) ` S\n        in if None \\<in> S' then None else Some (\\<Union> (the ` S'))))\n 3. \\<And>x a aa b aaa ba.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        \\<forall>x\\<in>a.\n           None \\<noteq>\n           (case x of\n            (out, \\<sigma>') \\<Rightarrow>\n              case k \\<sigma>' of None \\<Rightarrow> None\n              | Some S \\<Rightarrow>\n                  let S' = (\\<lambda>(out, y). h y) ` S\n                  in if None \\<in> S' then None\n                     else Some (\\<Union> (the ` S')));\n        (aaa, ba) \\<in> a;\n        (aa, b)\n        \\<in> the (case k ba of None \\<Rightarrow> None\n                   | Some S \\<Rightarrow>\n                       let S' = (\\<lambda>(out, y). h y) ` S\n                       in if None \\<in> S' then None\n                          else Some (\\<Union> (the ` S')))\\<rbrakk>\n       \\<Longrightarrow> (aa, b)\n                         \\<in> (\\<Union>x\\<in>a.\n                                   \\<Union>a\\<in>the\n            (case x of (out, x) \\<Rightarrow> k x).\nthe (case a of (out, x) \\<Rightarrow> h x))", "case (4 x a aa b)"], ["proof (state)\nthis:\n  m x = Some a\n  \\<forall>y\\<in>a.\n     \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n        None \\<noteq> (case x of (out, x) \\<Rightarrow> h x)\n  \\<forall>x\\<in>a. None \\<noteq> (case x of (out, x) \\<Rightarrow> k x)\n  (aa, b) \\<in> a\n  None =\n  (case k b of None \\<Rightarrow> None\n   | Some S \\<Rightarrow>\n       let S' = (\\<lambda>(out, y). h y) ` S\n       in if None \\<in> S' then None else Some (\\<Union> (the ` S')))\n\ngoal (3 subgoals):\n 1. \\<And>x a aa b.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        (aa, b) \\<in> a;\n        None =\n        (case k b of None \\<Rightarrow> None\n         | Some S \\<Rightarrow>\n             let S' = (\\<lambda>(out, y). h y) ` S\n             in if None \\<in> S' then None\n                else Some (\\<Union> (the ` S')))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x a aa b ab ba aaa baa.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        \\<forall>x\\<in>a.\n           None \\<noteq>\n           (case x of\n            (out, \\<sigma>') \\<Rightarrow>\n              case k \\<sigma>' of None \\<Rightarrow> None\n              | Some S \\<Rightarrow>\n                  let S' = (\\<lambda>(out, y). h y) ` S\n                  in if None \\<in> S' then None\n                     else Some (\\<Union> (the ` S')));\n        (ab, ba) \\<in> a; (aaa, baa) \\<in> the (k ba);\n        (aa, b) \\<in> the (h baa)\\<rbrakk>\n       \\<Longrightarrow> (aa, b)\n                         \\<in> (\\<Union>a\\<in>a.\n                                   the (case a of\n  (out, \\<sigma>') \\<Rightarrow>\n    case k \\<sigma>' of None \\<Rightarrow> None\n    | Some S \\<Rightarrow>\n        let S' = (\\<lambda>(out, y). h y) ` S\n        in if None \\<in> S' then None else Some (\\<Union> (the ` S'))))\n 3. \\<And>x a aa b aaa ba.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        \\<forall>x\\<in>a.\n           None \\<noteq>\n           (case x of\n            (out, \\<sigma>') \\<Rightarrow>\n              case k \\<sigma>' of None \\<Rightarrow> None\n              | Some S \\<Rightarrow>\n                  let S' = (\\<lambda>(out, y). h y) ` S\n                  in if None \\<in> S' then None\n                     else Some (\\<Union> (the ` S')));\n        (aaa, ba) \\<in> a;\n        (aa, b)\n        \\<in> the (case k ba of None \\<Rightarrow> None\n                   | Some S \\<Rightarrow>\n                       let S' = (\\<lambda>(out, y). h y) ` S\n                       in if None \\<in> S' then None\n                          else Some (\\<Union> (the ` S')))\\<rbrakk>\n       \\<Longrightarrow> (aa, b)\n                         \\<in> (\\<Union>x\\<in>a.\n                                   \\<Union>a\\<in>the\n            (case x of (out, x) \\<Rightarrow> k x).\nthe (case a of (out, x) \\<Rightarrow> h x))", "then"], ["proof (chain)\npicking this:\n  m x = Some a\n  \\<forall>y\\<in>a.\n     \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n        None \\<noteq> (case x of (out, x) \\<Rightarrow> h x)\n  \\<forall>x\\<in>a. None \\<noteq> (case x of (out, x) \\<Rightarrow> k x)\n  (aa, b) \\<in> a\n  None =\n  (case k b of None \\<Rightarrow> None\n   | Some S \\<Rightarrow>\n       let S' = (\\<lambda>(out, y). h y) ` S\n       in if None \\<in> S' then None else Some (\\<Union> (the ` S')))", "show ?case"], ["proof (prove)\nusing this:\n  m x = Some a\n  \\<forall>y\\<in>a.\n     \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n        None \\<noteq> (case x of (out, x) \\<Rightarrow> h x)\n  \\<forall>x\\<in>a. None \\<noteq> (case x of (out, x) \\<Rightarrow> k x)\n  (aa, b) \\<in> a\n  None =\n  (case k b of None \\<Rightarrow> None\n   | Some S \\<Rightarrow>\n       let S' = (\\<lambda>(out, y). h y) ` S\n       in if None \\<in> S' then None else Some (\\<Union> (the ` S')))\n\ngoal (1 subgoal):\n 1. False", "apply (erule_tac Q=\"None = X\" for X in contrapos_pp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m x = Some a;\n     \\<forall>y\\<in>a.\n        \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n     \\<forall>x\\<in>a. None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n     (aa, b) \\<in> a; \\<not> False\\<rbrakk>\n    \\<Longrightarrow> None \\<noteq>\n                      (case k b of None \\<Rightarrow> None\n                       | Some S \\<Rightarrow>\n                           let S' = (\\<lambda>(out, y). h y) ` S\n                           in if None \\<in> S' then None\n                              else Some (\\<Union> (the ` S')))", "apply (erule_tac x=\"(aa,b)\" and P=\"\\<lambda> x. None \\<noteq> case_prod (\\<lambda>out. k) x\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>m x = Some a;\n     \\<forall>y\\<in>a.\n        \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n     (aa, b) \\<in> a; \\<not> False;\n     None \\<noteq> (case (aa, b) of (out, x) \\<Rightarrow> k x)\\<rbrakk>\n    \\<Longrightarrow> None \\<noteq>\n                      (case k b of None \\<Rightarrow> None\n                       | Some S \\<Rightarrow>\n                           let S' = (\\<lambda>(out, y). h y) ` S\n                           in if None \\<in> S' then None\n                              else Some (\\<Union> (the ` S')))\n 2. \\<lbrakk>m x = Some a;\n     \\<forall>y\\<in>a.\n        \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n     (aa, b) \\<in> a; \\<not> False; (aa, b) \\<notin> a\\<rbrakk>\n    \\<Longrightarrow> None \\<noteq>\n                      (case k b of None \\<Rightarrow> None\n                       | Some S \\<Rightarrow>\n                           let S' = (\\<lambda>(out, y). h y) ` S\n                           in if None \\<in> S' then None\n                              else Some (\\<Union> (the ` S')))", "apply (auto simp: aux image_def split_def intro!: rev_bexI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<And>x a aa b ab ba aaa baa.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        \\<forall>x\\<in>a.\n           None \\<noteq>\n           (case x of\n            (out, \\<sigma>') \\<Rightarrow>\n              case k \\<sigma>' of None \\<Rightarrow> None\n              | Some S \\<Rightarrow>\n                  let S' = (\\<lambda>(out, y). h y) ` S\n                  in if None \\<in> S' then None\n                     else Some (\\<Union> (the ` S')));\n        (ab, ba) \\<in> a; (aaa, baa) \\<in> the (k ba);\n        (aa, b) \\<in> the (h baa)\\<rbrakk>\n       \\<Longrightarrow> (aa, b)\n                         \\<in> (\\<Union>a\\<in>a.\n                                   the (case a of\n  (out, \\<sigma>') \\<Rightarrow>\n    case k \\<sigma>' of None \\<Rightarrow> None\n    | Some S \\<Rightarrow>\n        let S' = (\\<lambda>(out, y). h y) ` S\n        in if None \\<in> S' then None else Some (\\<Union> (the ` S'))))\n 2. \\<And>x a aa b aaa ba.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        \\<forall>x\\<in>a.\n           None \\<noteq>\n           (case x of\n            (out, \\<sigma>') \\<Rightarrow>\n              case k \\<sigma>' of None \\<Rightarrow> None\n              | Some S \\<Rightarrow>\n                  let S' = (\\<lambda>(out, y). h y) ` S\n                  in if None \\<in> S' then None\n                     else Some (\\<Union> (the ` S')));\n        (aaa, ba) \\<in> a;\n        (aa, b)\n        \\<in> the (case k ba of None \\<Rightarrow> None\n                   | Some S \\<Rightarrow>\n                       let S' = (\\<lambda>(out, y). h y) ` S\n                       in if None \\<in> S' then None\n                          else Some (\\<Union> (the ` S')))\\<rbrakk>\n       \\<Longrightarrow> (aa, b)\n                         \\<in> (\\<Union>x\\<in>a.\n                                   \\<Union>a\\<in>the\n            (case x of (out, x) \\<Rightarrow> k x).\nthe (case a of (out, x) \\<Rightarrow> h x))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x a aa b ab ba aaa baa.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        \\<forall>x\\<in>a.\n           None \\<noteq>\n           (case x of\n            (out, \\<sigma>') \\<Rightarrow>\n              case k \\<sigma>' of None \\<Rightarrow> None\n              | Some S \\<Rightarrow>\n                  let S' = (\\<lambda>(out, y). h y) ` S\n                  in if None \\<in> S' then None\n                     else Some (\\<Union> (the ` S')));\n        (ab, ba) \\<in> a; (aaa, baa) \\<in> the (k ba);\n        (aa, b) \\<in> the (h baa)\\<rbrakk>\n       \\<Longrightarrow> (aa, b)\n                         \\<in> (\\<Union>a\\<in>a.\n                                   the (case a of\n  (out, \\<sigma>') \\<Rightarrow>\n    case k \\<sigma>' of None \\<Rightarrow> None\n    | Some S \\<Rightarrow>\n        let S' = (\\<lambda>(out, y). h y) ` S\n        in if None \\<in> S' then None else Some (\\<Union> (the ` S'))))\n 2. \\<And>x a aa b aaa ba.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        \\<forall>x\\<in>a.\n           None \\<noteq>\n           (case x of\n            (out, \\<sigma>') \\<Rightarrow>\n              case k \\<sigma>' of None \\<Rightarrow> None\n              | Some S \\<Rightarrow>\n                  let S' = (\\<lambda>(out, y). h y) ` S\n                  in if None \\<in> S' then None\n                     else Some (\\<Union> (the ` S')));\n        (aaa, ba) \\<in> a;\n        (aa, b)\n        \\<in> the (case k ba of None \\<Rightarrow> None\n                   | Some S \\<Rightarrow>\n                       let S' = (\\<lambda>(out, y). h y) ` S\n                       in if None \\<in> S' then None\n                          else Some (\\<Union> (the ` S')))\\<rbrakk>\n       \\<Longrightarrow> (aa, b)\n                         \\<in> (\\<Union>x\\<in>a.\n                                   \\<Union>a\\<in>the\n            (case x of (out, x) \\<Rightarrow> k x).\nthe (case a of (out, x) \\<Rightarrow> h x))", "case (5 x a aa b ab ba a b)"], ["proof (state)\nthis:\n  m x = Some a__\n  \\<forall>y\\<in>a__.\n     \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n        None \\<noteq> (case x of (out, x) \\<Rightarrow> h x)\n  \\<forall>x\\<in>a__. None \\<noteq> (case x of (out, x) \\<Rightarrow> k x)\n  \\<forall>x\\<in>a__.\n     None \\<noteq>\n     (case x of\n      (out, \\<sigma>') \\<Rightarrow>\n        case k \\<sigma>' of None \\<Rightarrow> None\n        | Some S \\<Rightarrow>\n            let S' = (\\<lambda>(out, y). h y) ` S\n            in if None \\<in> S' then None else Some (\\<Union> (the ` S')))\n  (ab, ba) \\<in> a__\n  (a, b) \\<in> the (k ba)\n  (aa, b__) \\<in> the (h b)\n\ngoal (2 subgoals):\n 1. \\<And>x a aa b ab ba aaa baa.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        \\<forall>x\\<in>a.\n           None \\<noteq>\n           (case x of\n            (out, \\<sigma>') \\<Rightarrow>\n              case k \\<sigma>' of None \\<Rightarrow> None\n              | Some S \\<Rightarrow>\n                  let S' = (\\<lambda>(out, y). h y) ` S\n                  in if None \\<in> S' then None\n                     else Some (\\<Union> (the ` S')));\n        (ab, ba) \\<in> a; (aaa, baa) \\<in> the (k ba);\n        (aa, b) \\<in> the (h baa)\\<rbrakk>\n       \\<Longrightarrow> (aa, b)\n                         \\<in> (\\<Union>a\\<in>a.\n                                   the (case a of\n  (out, \\<sigma>') \\<Rightarrow>\n    case k \\<sigma>' of None \\<Rightarrow> None\n    | Some S \\<Rightarrow>\n        let S' = (\\<lambda>(out, y). h y) ` S\n        in if None \\<in> S' then None else Some (\\<Union> (the ` S'))))\n 2. \\<And>x a aa b aaa ba.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        \\<forall>x\\<in>a.\n           None \\<noteq>\n           (case x of\n            (out, \\<sigma>') \\<Rightarrow>\n              case k \\<sigma>' of None \\<Rightarrow> None\n              | Some S \\<Rightarrow>\n                  let S' = (\\<lambda>(out, y). h y) ` S\n                  in if None \\<in> S' then None\n                     else Some (\\<Union> (the ` S')));\n        (aaa, ba) \\<in> a;\n        (aa, b)\n        \\<in> the (case k ba of None \\<Rightarrow> None\n                   | Some S \\<Rightarrow>\n                       let S' = (\\<lambda>(out, y). h y) ` S\n                       in if None \\<in> S' then None\n                          else Some (\\<Union> (the ` S')))\\<rbrakk>\n       \\<Longrightarrow> (aa, b)\n                         \\<in> (\\<Union>x\\<in>a.\n                                   \\<Union>a\\<in>the\n            (case x of (out, x) \\<Rightarrow> k x).\nthe (case a of (out, x) \\<Rightarrow> h x))", "then"], ["proof (chain)\npicking this:\n  m x = Some a__\n  \\<forall>y\\<in>a__.\n     \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n        None \\<noteq> (case x of (out, x) \\<Rightarrow> h x)\n  \\<forall>x\\<in>a__. None \\<noteq> (case x of (out, x) \\<Rightarrow> k x)\n  \\<forall>x\\<in>a__.\n     None \\<noteq>\n     (case x of\n      (out, \\<sigma>') \\<Rightarrow>\n        case k \\<sigma>' of None \\<Rightarrow> None\n        | Some S \\<Rightarrow>\n            let S' = (\\<lambda>(out, y). h y) ` S\n            in if None \\<in> S' then None else Some (\\<Union> (the ` S')))\n  (ab, ba) \\<in> a__\n  (a, b) \\<in> the (k ba)\n  (aa, b__) \\<in> the (h b)", "show ?case"], ["proof (prove)\nusing this:\n  m x = Some a__\n  \\<forall>y\\<in>a__.\n     \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n        None \\<noteq> (case x of (out, x) \\<Rightarrow> h x)\n  \\<forall>x\\<in>a__. None \\<noteq> (case x of (out, x) \\<Rightarrow> k x)\n  \\<forall>x\\<in>a__.\n     None \\<noteq>\n     (case x of\n      (out, \\<sigma>') \\<Rightarrow>\n        case k \\<sigma>' of None \\<Rightarrow> None\n        | Some S \\<Rightarrow>\n            let S' = (\\<lambda>(out, y). h y) ` S\n            in if None \\<in> S' then None else Some (\\<Union> (the ` S')))\n  (ab, ba) \\<in> a__\n  (a, b) \\<in> the (k ba)\n  (aa, b__) \\<in> the (h b)\n\ngoal (1 subgoal):\n 1. (aa, b__)\n    \\<in> (\\<Union>a\\<in>a__.\n              the (case a of\n                   (out, \\<sigma>') \\<Rightarrow>\n                     case k \\<sigma>' of None \\<Rightarrow> None\n                     | Some S \\<Rightarrow>\n                         let S' = (\\<lambda>(out, y). h y) ` S\n                         in if None \\<in> S' then None\n                            else Some (\\<Union> (the ` S'))))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m x = Some a__;\n     \\<forall>y\\<in>a__.\n        \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n     \\<forall>x\\<in>a__.\n        None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n     \\<forall>x\\<in>a__.\n        None \\<noteq>\n        (case x of\n         (out, \\<sigma>') \\<Rightarrow>\n           case k \\<sigma>' of None \\<Rightarrow> None\n           | Some S \\<Rightarrow>\n               let S' = (\\<lambda>(out, y). h y) ` S\n               in if None \\<in> S' then None\n                  else Some (\\<Union> (the ` S')));\n     (ab, ba) \\<in> a__; (a, b) \\<in> the (k ba);\n     (aa, b__) \\<in> the (h b)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>a__.\n                         (aa, b__)\n                         \\<in> the (case x of\n                                    (out, \\<sigma>') \\<Rightarrow>\ncase k \\<sigma>' of None \\<Rightarrow> None\n| Some S \\<Rightarrow>\n    let S' = (\\<lambda>(out, y). h y) ` S\n    in if None \\<in> S' then None else Some (\\<Union> (the ` S')))", "apply ((erule_tac x=\"(ab,ba)\" in ballE)+)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>m x = Some a__; (ab, ba) \\<in> a__; (a, b) \\<in> the (k ba);\n     (aa, b__) \\<in> the (h b);\n     \\<forall>x\\<in>the (case (ab, ba) of (out, x) \\<Rightarrow> k x).\n        None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n     None \\<noteq> (case (ab, ba) of (out, x) \\<Rightarrow> k x);\n     None \\<noteq>\n     (case (ab, ba) of\n      (out, \\<sigma>') \\<Rightarrow>\n        case k \\<sigma>' of None \\<Rightarrow> None\n        | Some S \\<Rightarrow>\n            let S' = (\\<lambda>(out, y). h y) ` S\n            in if None \\<in> S' then None\n               else Some (\\<Union> (the ` S')))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>a__.\n                         (aa, b__)\n                         \\<in> the (case x of\n                                    (out, \\<sigma>') \\<Rightarrow>\ncase k \\<sigma>' of None \\<Rightarrow> None\n| Some S \\<Rightarrow>\n    let S' = (\\<lambda>(out, y). h y) ` S\n    in if None \\<in> S' then None else Some (\\<Union> (the ` S')))\n 2. \\<lbrakk>m x = Some a__; (ab, ba) \\<in> a__; (a, b) \\<in> the (k ba);\n     (aa, b__) \\<in> the (h b);\n     \\<forall>x\\<in>the (case (ab, ba) of (out, x) \\<Rightarrow> k x).\n        None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n     None \\<noteq> (case (ab, ba) of (out, x) \\<Rightarrow> k x);\n     (ab, ba) \\<notin> a__\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>a__.\n                         (aa, b__)\n                         \\<in> the (case x of\n                                    (out, \\<sigma>') \\<Rightarrow>\ncase k \\<sigma>' of None \\<Rightarrow> None\n| Some S \\<Rightarrow>\n    let S' = (\\<lambda>(out, y). h y) ` S\n    in if None \\<in> S' then None else Some (\\<Union> (the ` S')))\n 3. \\<lbrakk>m x = Some a__;\n     \\<forall>x\\<in>a__.\n        None \\<noteq>\n        (case x of\n         (out, \\<sigma>') \\<Rightarrow>\n           case k \\<sigma>' of None \\<Rightarrow> None\n           | Some S \\<Rightarrow>\n               let S' = (\\<lambda>(out, y). h y) ` S\n               in if None \\<in> S' then None\n                  else Some (\\<Union> (the ` S')));\n     (ab, ba) \\<in> a__; (a, b) \\<in> the (k ba); (aa, b__) \\<in> the (h b);\n     \\<forall>x\\<in>the (case (ab, ba) of (out, x) \\<Rightarrow> k x).\n        None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n     (ab, ba) \\<notin> a__\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>a__.\n                         (aa, b__)\n                         \\<in> the (case x of\n                                    (out, \\<sigma>') \\<Rightarrow>\ncase k \\<sigma>' of None \\<Rightarrow> None\n| Some S \\<Rightarrow>\n    let S' = (\\<lambda>(out, y). h y) ` S\n    in if None \\<in> S' then None else Some (\\<Union> (the ` S')))\n 4. \\<lbrakk>m x = Some a__;\n     \\<forall>x\\<in>a__.\n        None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n     \\<forall>x\\<in>a__.\n        None \\<noteq>\n        (case x of\n         (out, \\<sigma>') \\<Rightarrow>\n           case k \\<sigma>' of None \\<Rightarrow> None\n           | Some S \\<Rightarrow>\n               let S' = (\\<lambda>(out, y). h y) ` S\n               in if None \\<in> S' then None\n                  else Some (\\<Union> (the ` S')));\n     (ab, ba) \\<in> a__; (a, b) \\<in> the (k ba); (aa, b__) \\<in> the (h b);\n     (ab, ba) \\<notin> a__\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>a__.\n                         (aa, b__)\n                         \\<in> the (case x of\n                                    (out, \\<sigma>') \\<Rightarrow>\ncase k \\<sigma>' of None \\<Rightarrow> None\n| Some S \\<Rightarrow>\n    let S' = (\\<lambda>(out, y). h y) ` S\n    in if None \\<in> S' then None else Some (\\<Union> (the ` S')))", "apply (simp_all add: aux, (erule exE)+, simp add:split_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y ya.\n       \\<lbrakk>m x = Some a__; (ab, ba) \\<in> a__; (a, b) \\<in> y;\n        (aa, b__) \\<in> the (h b);\n        \\<forall>x\\<in>y. \\<exists>y. h (snd x) = Some y; k ba = Some y;\n        (let S' = (\\<lambda>x. h (snd x)) ` y\n         in if None \\<in> S' then None else Some (\\<Union> (the ` S'))) =\n        Some ya\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>a__.\n                            (aa, b__)\n                            \\<in> the (case k (snd x) of\n None \\<Rightarrow> None\n | Some S \\<Rightarrow>\n     let S' = (\\<lambda>(out, y). h y) ` S\n     in if None \\<in> S' then None else Some (\\<Union> (the ` S')))", "apply (erule rev_bexI, case_tac \"None\\<in>(\\<lambda>p. h(snd p))`y\",auto simp:split_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (aa, b__)\n  \\<in> (\\<Union>a\\<in>a__.\n            the (case a of\n                 (out, \\<sigma>') \\<Rightarrow>\n                   case k \\<sigma>' of None \\<Rightarrow> None\n                   | Some S \\<Rightarrow>\n                       let S' = (\\<lambda>(out, y). h y) ` S\n                       in if None \\<in> S' then None\n                          else Some (\\<Union> (the ` S'))))\n\ngoal (1 subgoal):\n 1. \\<And>x a aa b aaa ba.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        \\<forall>x\\<in>a.\n           None \\<noteq>\n           (case x of\n            (out, \\<sigma>') \\<Rightarrow>\n              case k \\<sigma>' of None \\<Rightarrow> None\n              | Some S \\<Rightarrow>\n                  let S' = (\\<lambda>(out, y). h y) ` S\n                  in if None \\<in> S' then None\n                     else Some (\\<Union> (the ` S')));\n        (aaa, ba) \\<in> a;\n        (aa, b)\n        \\<in> the (case k ba of None \\<Rightarrow> None\n                   | Some S \\<Rightarrow>\n                       let S' = (\\<lambda>(out, y). h y) ` S\n                       in if None \\<in> S' then None\n                          else Some (\\<Union> (the ` S')))\\<rbrakk>\n       \\<Longrightarrow> (aa, b)\n                         \\<in> (\\<Union>x\\<in>a.\n                                   \\<Union>a\\<in>the\n            (case x of (out, x) \\<Rightarrow> k x).\nthe (case a of (out, x) \\<Rightarrow> h x))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x a aa b aaa ba.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        \\<forall>x\\<in>a.\n           None \\<noteq>\n           (case x of\n            (out, \\<sigma>') \\<Rightarrow>\n              case k \\<sigma>' of None \\<Rightarrow> None\n              | Some S \\<Rightarrow>\n                  let S' = (\\<lambda>(out, y). h y) ` S\n                  in if None \\<in> S' then None\n                     else Some (\\<Union> (the ` S')));\n        (aaa, ba) \\<in> a;\n        (aa, b)\n        \\<in> the (case k ba of None \\<Rightarrow> None\n                   | Some S \\<Rightarrow>\n                       let S' = (\\<lambda>(out, y). h y) ` S\n                       in if None \\<in> S' then None\n                          else Some (\\<Union> (the ` S')))\\<rbrakk>\n       \\<Longrightarrow> (aa, b)\n                         \\<in> (\\<Union>x\\<in>a.\n                                   \\<Union>a\\<in>the\n            (case x of (out, x) \\<Rightarrow> k x).\nthe (case a of (out, x) \\<Rightarrow> h x))", "case (6 x a aa b a b)"], ["proof (state)\nthis:\n  m x = Some a__\n  \\<forall>y\\<in>a__.\n     \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n        None \\<noteq> (case x of (out, x) \\<Rightarrow> h x)\n  \\<forall>x\\<in>a__. None \\<noteq> (case x of (out, x) \\<Rightarrow> k x)\n  \\<forall>x\\<in>a__.\n     None \\<noteq>\n     (case x of\n      (out, \\<sigma>') \\<Rightarrow>\n        case k \\<sigma>' of None \\<Rightarrow> None\n        | Some S \\<Rightarrow>\n            let S' = (\\<lambda>(out, y). h y) ` S\n            in if None \\<in> S' then None else Some (\\<Union> (the ` S')))\n  (a, b) \\<in> a__\n  (aa, b__)\n  \\<in> the (case k b of None \\<Rightarrow> None\n             | Some S \\<Rightarrow>\n                 let S' = (\\<lambda>(out, y). h y) ` S\n                 in if None \\<in> S' then None\n                    else Some (\\<Union> (the ` S')))\n\ngoal (1 subgoal):\n 1. \\<And>x a aa b aaa ba.\n       \\<lbrakk>m x = Some a;\n        \\<forall>y\\<in>a.\n           \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n              None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n        \\<forall>x\\<in>a.\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n        \\<forall>x\\<in>a.\n           None \\<noteq>\n           (case x of\n            (out, \\<sigma>') \\<Rightarrow>\n              case k \\<sigma>' of None \\<Rightarrow> None\n              | Some S \\<Rightarrow>\n                  let S' = (\\<lambda>(out, y). h y) ` S\n                  in if None \\<in> S' then None\n                     else Some (\\<Union> (the ` S')));\n        (aaa, ba) \\<in> a;\n        (aa, b)\n        \\<in> the (case k ba of None \\<Rightarrow> None\n                   | Some S \\<Rightarrow>\n                       let S' = (\\<lambda>(out, y). h y) ` S\n                       in if None \\<in> S' then None\n                          else Some (\\<Union> (the ` S')))\\<rbrakk>\n       \\<Longrightarrow> (aa, b)\n                         \\<in> (\\<Union>x\\<in>a.\n                                   \\<Union>a\\<in>the\n            (case x of (out, x) \\<Rightarrow> k x).\nthe (case a of (out, x) \\<Rightarrow> h x))", "then"], ["proof (chain)\npicking this:\n  m x = Some a__\n  \\<forall>y\\<in>a__.\n     \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n        None \\<noteq> (case x of (out, x) \\<Rightarrow> h x)\n  \\<forall>x\\<in>a__. None \\<noteq> (case x of (out, x) \\<Rightarrow> k x)\n  \\<forall>x\\<in>a__.\n     None \\<noteq>\n     (case x of\n      (out, \\<sigma>') \\<Rightarrow>\n        case k \\<sigma>' of None \\<Rightarrow> None\n        | Some S \\<Rightarrow>\n            let S' = (\\<lambda>(out, y). h y) ` S\n            in if None \\<in> S' then None else Some (\\<Union> (the ` S')))\n  (a, b) \\<in> a__\n  (aa, b__)\n  \\<in> the (case k b of None \\<Rightarrow> None\n             | Some S \\<Rightarrow>\n                 let S' = (\\<lambda>(out, y). h y) ` S\n                 in if None \\<in> S' then None\n                    else Some (\\<Union> (the ` S')))", "show ?case"], ["proof (prove)\nusing this:\n  m x = Some a__\n  \\<forall>y\\<in>a__.\n     \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n        None \\<noteq> (case x of (out, x) \\<Rightarrow> h x)\n  \\<forall>x\\<in>a__. None \\<noteq> (case x of (out, x) \\<Rightarrow> k x)\n  \\<forall>x\\<in>a__.\n     None \\<noteq>\n     (case x of\n      (out, \\<sigma>') \\<Rightarrow>\n        case k \\<sigma>' of None \\<Rightarrow> None\n        | Some S \\<Rightarrow>\n            let S' = (\\<lambda>(out, y). h y) ` S\n            in if None \\<in> S' then None else Some (\\<Union> (the ` S')))\n  (a, b) \\<in> a__\n  (aa, b__)\n  \\<in> the (case k b of None \\<Rightarrow> None\n             | Some S \\<Rightarrow>\n                 let S' = (\\<lambda>(out, y). h y) ` S\n                 in if None \\<in> S' then None\n                    else Some (\\<Union> (the ` S')))\n\ngoal (1 subgoal):\n 1. (aa, b__)\n    \\<in> (\\<Union>x\\<in>a__.\n              \\<Union>a\\<in>the (case x of (out, x) \\<Rightarrow> k x).\n                 the (case a of (out, x) \\<Rightarrow> h x))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m x = Some a__;\n     \\<forall>y\\<in>a__.\n        \\<forall>x\\<in>the (case y of (out, x) \\<Rightarrow> k x).\n           None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n     \\<forall>x\\<in>a__.\n        None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n     \\<forall>x\\<in>a__.\n        None \\<noteq>\n        (case x of\n         (out, \\<sigma>') \\<Rightarrow>\n           case k \\<sigma>' of None \\<Rightarrow> None\n           | Some S \\<Rightarrow>\n               let S' = (\\<lambda>(out, y). h y) ` S\n               in if None \\<in> S' then None\n                  else Some (\\<Union> (the ` S')));\n     (a, b) \\<in> a__;\n     (aa, b__)\n     \\<in> the (case k b of None \\<Rightarrow> None\n                | Some S \\<Rightarrow>\n                    let S' = (\\<lambda>(out, y). h y) ` S\n                    in if None \\<in> S' then None\n                       else Some (\\<Union> (the ` S')))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>a__.\n                         \\<exists>x\\<in>the\n   (case x of (out, x) \\<Rightarrow> k x).\n                            (aa, b__)\n                            \\<in> the (case x of (out, x) \\<Rightarrow> h x)", "apply ((erule_tac x=\"(a,b)\" in ballE)+)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>m x = Some a__; (a, b) \\<in> a__;\n     (aa, b__)\n     \\<in> the (case k b of None \\<Rightarrow> None\n                | Some S \\<Rightarrow>\n                    let S' = (\\<lambda>(out, y). h y) ` S\n                    in if None \\<in> S' then None\n                       else Some (\\<Union> (the ` S')));\n     \\<forall>x\\<in>the (case (a, b) of (out, x) \\<Rightarrow> k x).\n        None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n     None \\<noteq> (case (a, b) of (out, x) \\<Rightarrow> k x);\n     None \\<noteq>\n     (case (a, b) of\n      (out, \\<sigma>') \\<Rightarrow>\n        case k \\<sigma>' of None \\<Rightarrow> None\n        | Some S \\<Rightarrow>\n            let S' = (\\<lambda>(out, y). h y) ` S\n            in if None \\<in> S' then None\n               else Some (\\<Union> (the ` S')))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>a__.\n                         \\<exists>x\\<in>the\n   (case x of (out, x) \\<Rightarrow> k x).\n                            (aa, b__)\n                            \\<in> the (case x of (out, x) \\<Rightarrow> h x)\n 2. \\<lbrakk>m x = Some a__; (a, b) \\<in> a__;\n     (aa, b__)\n     \\<in> the (case k b of None \\<Rightarrow> None\n                | Some S \\<Rightarrow>\n                    let S' = (\\<lambda>(out, y). h y) ` S\n                    in if None \\<in> S' then None\n                       else Some (\\<Union> (the ` S')));\n     \\<forall>x\\<in>the (case (a, b) of (out, x) \\<Rightarrow> k x).\n        None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n     None \\<noteq> (case (a, b) of (out, x) \\<Rightarrow> k x);\n     (a, b) \\<notin> a__\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>a__.\n                         \\<exists>x\\<in>the\n   (case x of (out, x) \\<Rightarrow> k x).\n                            (aa, b__)\n                            \\<in> the (case x of (out, x) \\<Rightarrow> h x)\n 3. \\<lbrakk>m x = Some a__;\n     \\<forall>x\\<in>a__.\n        None \\<noteq>\n        (case x of\n         (out, \\<sigma>') \\<Rightarrow>\n           case k \\<sigma>' of None \\<Rightarrow> None\n           | Some S \\<Rightarrow>\n               let S' = (\\<lambda>(out, y). h y) ` S\n               in if None \\<in> S' then None\n                  else Some (\\<Union> (the ` S')));\n     (a, b) \\<in> a__;\n     (aa, b__)\n     \\<in> the (case k b of None \\<Rightarrow> None\n                | Some S \\<Rightarrow>\n                    let S' = (\\<lambda>(out, y). h y) ` S\n                    in if None \\<in> S' then None\n                       else Some (\\<Union> (the ` S')));\n     \\<forall>x\\<in>the (case (a, b) of (out, x) \\<Rightarrow> k x).\n        None \\<noteq> (case x of (out, x) \\<Rightarrow> h x);\n     (a, b) \\<notin> a__\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>a__.\n                         \\<exists>x\\<in>the\n   (case x of (out, x) \\<Rightarrow> k x).\n                            (aa, b__)\n                            \\<in> the (case x of (out, x) \\<Rightarrow> h x)\n 4. \\<lbrakk>m x = Some a__;\n     \\<forall>x\\<in>a__.\n        None \\<noteq> (case x of (out, x) \\<Rightarrow> k x);\n     \\<forall>x\\<in>a__.\n        None \\<noteq>\n        (case x of\n         (out, \\<sigma>') \\<Rightarrow>\n           case k \\<sigma>' of None \\<Rightarrow> None\n           | Some S \\<Rightarrow>\n               let S' = (\\<lambda>(out, y). h y) ` S\n               in if None \\<in> S' then None\n                  else Some (\\<Union> (the ` S')));\n     (a, b) \\<in> a__;\n     (aa, b__)\n     \\<in> the (case k b of None \\<Rightarrow> None\n                | Some S \\<Rightarrow>\n                    let S' = (\\<lambda>(out, y). h y) ` S\n                    in if None \\<in> S' then None\n                       else Some (\\<Union> (the ` S')));\n     (a, b) \\<notin> a__\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>a__.\n                         \\<exists>x\\<in>the\n   (case x of (out, x) \\<Rightarrow> k x).\n                            (aa, b__)\n                            \\<in> the (case x of (out, x) \\<Rightarrow> h x)", "apply (simp_all add: aux, (erule exE)+, simp add:split_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y ya.\n       \\<lbrakk>m x = Some a__; (a, b) \\<in> a__; (aa, b__) \\<in> ya;\n        \\<forall>x\\<in>y. \\<exists>y. h (snd x) = Some y; k b = Some y;\n        (let S' = (\\<lambda>x. h (snd x)) ` y\n         in if None \\<in> S' then None else Some (\\<Union> (the ` S'))) =\n        Some ya\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>a__.\n                            \\<exists>x\\<in>the (k (snd x)).\n                               (aa, b__) \\<in> the (h (snd x))", "apply (erule rev_bexI, case_tac \"None\\<in>(\\<lambda>p. h(snd p))`y\",auto simp:split_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (aa, b__)\n  \\<in> (\\<Union>x\\<in>a__.\n            \\<Union>a\\<in>the (case x of (out, x) \\<Rightarrow> k x).\n               the (case a of (out, x) \\<Rightarrow> h x))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Valid Test Sequences in the State Exception Monad\\<close>"], ["", "text\\<open>\n  This is still an unstructured merge of executable monad concepts and specification oriented \n  high-level properties initiating test procedures. \n\\<close>"], ["", "definition valid_SE :: \"'\\<sigma> \\<Rightarrow> (bool,'\\<sigma>) MON\\<^sub>S\\<^sub>E \\<Rightarrow> bool\" (infix \"\\<Turnstile>\" 15)\nwhere \"(\\<sigma> \\<Turnstile> m) = (m \\<sigma> \\<noteq> None \\<and> fst(the (m \\<sigma>)))\""], ["", "text\\<open>\n  This notation consideres failures as valid---a definition inspired by I/O conformance. \n  Note that it is not possible to define this concept once and for all in a Hindley-Milner \n  type-system. For the moment, we present it only for the state-exception monad, although for \n  the same definition, this notion is applicable to other monads as well.  \n\\<close>"], ["", "lemma syntax_test : \n  \"\\<sigma> \\<Turnstile> (os \\<leftarrow> (mbind \\<iota>s ioprog); return(length \\<iota>s = length os))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<Turnstile>\n    ( os \\<leftarrow> mbind \\<iota>s\n                       ioprog; unit\\<^sub>S\\<^sub>E\n                                (length \\<iota>s = length os))", "oops"], ["", "lemma valid_true[simp]: \"(\\<sigma> \\<Turnstile> (s \\<leftarrow> return x ; return (P s))) = P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<Turnstile>\n     ( s \\<leftarrow> unit\\<^sub>S\\<^sub>E x; unit\\<^sub>S\\<^sub>E (P s))) =\n    P x", "by(simp add: valid_SE_def unit_SE_def bind_SE_def)"], ["", "text\\<open>Recall mbind\\_unit for the base case.\\<close>"], ["", "lemma valid_failure: \"ioprog a \\<sigma> = None \\<Longrightarrow> \n                                   (\\<sigma> \\<Turnstile> (s \\<leftarrow> mbind (a#S) ioprog ; M s)) = \n                                   (\\<sigma> \\<Turnstile> (M []))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ioprog a \\<sigma> = None \\<Longrightarrow>\n    (\\<sigma> \\<Turnstile> bind\\<^sub>S\\<^sub>E (mbind (a # S) ioprog) M) =\n    (\\<sigma> \\<Turnstile> M [])", "by(simp add: valid_SE_def unit_SE_def bind_SE_def)"], ["", "lemma valid_failure': \"A \\<sigma> = None \\<Longrightarrow> \\<not>(\\<sigma> \\<Turnstile> ((s \\<leftarrow> A ; M s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<sigma> = None \\<Longrightarrow>\n    \\<not> (\\<sigma> \\<Turnstile> bind\\<^sub>S\\<^sub>E A M)", "by(simp add: valid_SE_def unit_SE_def bind_SE_def)"], ["", "lemma valid_successElem: (* atomic boolean Monad \"Query Functions\" *) \n                         \"M \\<sigma> = Some(f \\<sigma>,\\<sigma>) \\<Longrightarrow>  (\\<sigma> \\<Turnstile> M) = f \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M \\<sigma> = Some (f \\<sigma>, \\<sigma>) \\<Longrightarrow>\n    (\\<sigma> \\<Turnstile> M) = f \\<sigma>", "by(simp add: valid_SE_def unit_SE_def bind_SE_def )"], ["", "lemma valid_success:  \"ioprog a \\<sigma> = Some(b,\\<sigma>') \\<Longrightarrow> \n                                  (\\<sigma>  \\<Turnstile> (s \\<leftarrow> mbind (a#S) ioprog ; M s)) = \n                                  (\\<sigma>' \\<Turnstile> (s \\<leftarrow> mbind S ioprog ; M (b#s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ioprog a \\<sigma> = Some (b, \\<sigma>') \\<Longrightarrow>\n    (\\<sigma> \\<Turnstile> bind\\<^sub>S\\<^sub>E (mbind (a # S) ioprog) M) =\n    (\\<sigma>' \\<Turnstile> ( s \\<leftarrow> mbind S ioprog; M (b # s)))", "apply (simp add: valid_SE_def unit_SE_def bind_SE_def )"], ["proof (prove)\ngoal (1 subgoal):\n 1. ioprog a \\<sigma> = Some (b, \\<sigma>') \\<Longrightarrow>\n    ((\\<exists>a ba.\n         (case case mbind S ioprog \\<sigma>' of\n               None \\<Rightarrow> Some ([b], \\<sigma>')\n               | Some (outs, \\<sigma>'') \\<Rightarrow>\n                   Some (b # outs, \\<sigma>'') of\n          None \\<Rightarrow> None | Some (xa, xb) \\<Rightarrow> M xa xb) =\n         Some (a, ba)) \\<and>\n     fst (the (case case mbind S ioprog \\<sigma>' of\n                    None \\<Rightarrow> Some ([b], \\<sigma>')\n                    | Some (outs, \\<sigma>'') \\<Rightarrow>\n                        Some (b # outs, \\<sigma>'') of\n               None \\<Rightarrow> None\n               | Some (xa, xb) \\<Rightarrow> M xa xb))) =\n    ((\\<exists>a ba.\n         (case mbind S ioprog \\<sigma>' of None \\<Rightarrow> None\n          | Some (out, xa) \\<Rightarrow> M (b # out) xa) =\n         Some (a, ba)) \\<and>\n     fst (the (case mbind S ioprog \\<sigma>' of None \\<Rightarrow> None\n               | Some (out, xa) \\<Rightarrow> M (b # out) xa)))", "apply (cases \"mbind S ioprog \\<sigma>'\", auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma valid_success'': \"ioprog a \\<sigma> = Some(b,\\<sigma>') \\<Longrightarrow>\n                                    (\\<sigma>  \\<Turnstile> (s \\<leftarrow> mbind (a#S) ioprog ; return (P s))) =\n                                    (\\<sigma>' \\<Turnstile> (s \\<leftarrow> mbind S ioprog ; return (P (b#s))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ioprog a \\<sigma> = Some (b, \\<sigma>') \\<Longrightarrow>\n    (\\<sigma> \\<Turnstile>\n     ( s \\<leftarrow> mbind (a # S) ioprog; unit\\<^sub>S\\<^sub>E (P s))) =\n    (\\<sigma>' \\<Turnstile>\n     ( s \\<leftarrow> mbind S ioprog; unit\\<^sub>S\\<^sub>E (P (b # s))))", "apply (simp add: valid_SE_def unit_SE_def bind_SE_def )"], ["proof (prove)\ngoal (1 subgoal):\n 1. ioprog a \\<sigma> = Some (b, \\<sigma>') \\<Longrightarrow>\n    ((\\<exists>a ba.\n         (case case mbind S ioprog \\<sigma>' of\n               None \\<Rightarrow> Some ([b], \\<sigma>')\n               | Some (outs, \\<sigma>'') \\<Rightarrow>\n                   Some (b # outs, \\<sigma>'') of\n          None \\<Rightarrow> None\n          | Some (out, \\<sigma>') \\<Rightarrow> Some (P out, \\<sigma>')) =\n         Some (a, ba)) \\<and>\n     fst (the (case case mbind S ioprog \\<sigma>' of\n                    None \\<Rightarrow> Some ([b], \\<sigma>')\n                    | Some (outs, \\<sigma>'') \\<Rightarrow>\n                        Some (b # outs, \\<sigma>'') of\n               None \\<Rightarrow> None\n               | Some (out, \\<sigma>') \\<Rightarrow>\n                   Some (P out, \\<sigma>')))) =\n    ((\\<exists>a ba.\n         (case mbind S ioprog \\<sigma>' of None \\<Rightarrow> None\n          | Some (out, \\<sigma>') \\<Rightarrow>\n              Some (P (b # out), \\<sigma>')) =\n         Some (a, ba)) \\<and>\n     fst (the (case mbind S ioprog \\<sigma>' of None \\<Rightarrow> None\n               | Some (out, \\<sigma>') \\<Rightarrow>\n                   Some (P (b # out), \\<sigma>'))))", "apply (cases \"mbind S ioprog \\<sigma>'\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>ioprog a \\<sigma> = Some (b, \\<sigma>');\n     mbind S ioprog \\<sigma>' = None\\<rbrakk>\n    \\<Longrightarrow> ((\\<exists>a ba.\n                           (case case mbind S ioprog \\<sigma>' of\n                                 None \\<Rightarrow> Some ([b], \\<sigma>')\n                                 | Some (outs, \\<sigma>'') \\<Rightarrow>\n                                     Some (b # outs, \\<sigma>'') of\n                            None \\<Rightarrow> None\n                            | Some (out, \\<sigma>') \\<Rightarrow>\n                                Some (P out, \\<sigma>')) =\n                           Some (a, ba)) \\<and>\n                       fst (the (case case mbind S ioprog \\<sigma>' of\nNone \\<Rightarrow> Some ([b], \\<sigma>')\n| Some (outs, \\<sigma>'') \\<Rightarrow> Some (b # outs, \\<sigma>'') of\n                                 None \\<Rightarrow> None\n                                 | Some (out, \\<sigma>') \\<Rightarrow>\n                                     Some (P out, \\<sigma>')))) =\n                      ((\\<exists>a ba.\n                           (case mbind S ioprog \\<sigma>' of\n                            None \\<Rightarrow> None\n                            | Some (out, \\<sigma>') \\<Rightarrow>\n                                Some (P (b # out), \\<sigma>')) =\n                           Some (a, ba)) \\<and>\n                       fst (the (case mbind S ioprog \\<sigma>' of\n                                 None \\<Rightarrow> None\n                                 | Some (out, \\<sigma>') \\<Rightarrow>\n                                     Some (P (b # out), \\<sigma>'))))\n 2. \\<And>aa.\n       \\<lbrakk>ioprog a \\<sigma> = Some (b, \\<sigma>');\n        mbind S ioprog \\<sigma>' = Some aa\\<rbrakk>\n       \\<Longrightarrow> ((\\<exists>a ba.\n                              (case case mbind S ioprog \\<sigma>' of\n                                    None \\<Rightarrow> Some ([b], \\<sigma>')\n                                    | Some (outs, \\<sigma>'') \\<Rightarrow>\n  Some (b # outs, \\<sigma>'') of\n                               None \\<Rightarrow> None\n                               | Some (out, \\<sigma>') \\<Rightarrow>\n                                   Some (P out, \\<sigma>')) =\n                              Some (a, ba)) \\<and>\n                          fst (the (case case mbind S ioprog \\<sigma>' of\n   None \\<Rightarrow> Some ([b], \\<sigma>')\n   | Some (outs, \\<sigma>'') \\<Rightarrow> Some (b # outs, \\<sigma>'') of\n                                    None \\<Rightarrow> None\n                                    | Some (out, \\<sigma>') \\<Rightarrow>\n  Some (P out, \\<sigma>')))) =\n                         ((\\<exists>a ba.\n                              (case mbind S ioprog \\<sigma>' of\n                               None \\<Rightarrow> None\n                               | Some (out, \\<sigma>') \\<Rightarrow>\n                                   Some (P (b # out), \\<sigma>')) =\n                              Some (a, ba)) \\<and>\n                          fst (the (case mbind S ioprog \\<sigma>' of\n                                    None \\<Rightarrow> None\n                                    | Some (out, \\<sigma>') \\<Rightarrow>\n  Some (P (b # out), \\<sigma>'))))", "apply (simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>ioprog a \\<sigma> = Some (b, \\<sigma>');\n        mbind S ioprog \\<sigma>' = Some aa\\<rbrakk>\n       \\<Longrightarrow> ((\\<exists>a ba.\n                              (case case aa of\n                                    (outs, \\<sigma>'') \\<Rightarrow>\nSome (b # outs, \\<sigma>'') of\n                               None \\<Rightarrow> None\n                               | Some (out, \\<sigma>') \\<Rightarrow>\n                                   Some (P out, \\<sigma>')) =\n                              Some (a, ba)) \\<and>\n                          fst (the (case case aa of\n   (outs, \\<sigma>'') \\<Rightarrow> Some (b # outs, \\<sigma>'') of\n                                    None \\<Rightarrow> None\n                                    | Some (out, \\<sigma>') \\<Rightarrow>\n  Some (P out, \\<sigma>')))) =\n                         ((\\<exists>a ba.\n                              (case aa of\n                               (out, \\<sigma>') \\<Rightarrow>\n                                 Some (P (b # out), \\<sigma>')) =\n                              Some (a, ba)) \\<and>\n                          fst (the (case aa of\n                                    (out, \\<sigma>') \\<Rightarrow>\nSome (P (b # out), \\<sigma>'))))", "apply (auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma valid_success':  \"A \\<sigma> = Some(b,\\<sigma>') \\<Longrightarrow> (\\<sigma> \\<Turnstile> ((s \\<leftarrow> A ; M s))) = (\\<sigma>' \\<Turnstile> (M b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<sigma> = Some (b, \\<sigma>') \\<Longrightarrow>\n    (\\<sigma> \\<Turnstile> bind\\<^sub>S\\<^sub>E A M) =\n    (\\<sigma>' \\<Turnstile> M b)", "by(simp add: valid_SE_def unit_SE_def bind_SE_def )"], ["", "lemma valid_both: \"(\\<sigma> \\<Turnstile> (s \\<leftarrow> mbind (a#S) ioprog ; return (P s))) =\n                         (case ioprog a \\<sigma> of\n                               None \\<Rightarrow> (\\<sigma>  \\<Turnstile> (return (P [])))\n                             | Some(b,\\<sigma>') \\<Rightarrow> (\\<sigma>'  \\<Turnstile> (s \\<leftarrow> mbind S ioprog ; return (P (b#s)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<Turnstile>\n     ( s \\<leftarrow> mbind (a # S) ioprog; unit\\<^sub>S\\<^sub>E (P s))) =\n    (case ioprog a \\<sigma> of\n     None \\<Rightarrow> \\<sigma> \\<Turnstile> unit\\<^sub>S\\<^sub>E (P [])\n     | Some (b, \\<sigma>') \\<Rightarrow>\n         \\<sigma>' \\<Turnstile>\n         ( s \\<leftarrow> mbind S ioprog; unit\\<^sub>S\\<^sub>E (P (b # s))))", "apply (case_tac \"ioprog a \\<sigma>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. ioprog a \\<sigma> = None \\<Longrightarrow>\n    (\\<sigma> \\<Turnstile>\n     ( s \\<leftarrow> mbind (a # S) ioprog; unit\\<^sub>S\\<^sub>E (P s))) =\n    (case ioprog a \\<sigma> of\n     None \\<Rightarrow> \\<sigma> \\<Turnstile> unit\\<^sub>S\\<^sub>E (P [])\n     | Some (b, \\<sigma>') \\<Rightarrow>\n         \\<sigma>' \\<Turnstile>\n         ( s \\<leftarrow> mbind S ioprog; unit\\<^sub>S\\<^sub>E (P (b # s))))\n 2. \\<And>aa.\n       ioprog a \\<sigma> = Some aa \\<Longrightarrow>\n       (\\<sigma> \\<Turnstile>\n        ( s \\<leftarrow> mbind (a # S)\n                          ioprog; unit\\<^sub>S\\<^sub>E (P s))) =\n       (case ioprog a \\<sigma> of\n        None \\<Rightarrow> \\<sigma> \\<Turnstile> unit\\<^sub>S\\<^sub>E (P [])\n        | Some (b, \\<sigma>') \\<Rightarrow>\n            \\<sigma>' \\<Turnstile>\n            ( s \\<leftarrow> mbind S\n                              ioprog; unit\\<^sub>S\\<^sub>E (P (b # s))))", "apply (simp_all add: valid_failure valid_success'' split: prod.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma valid_propagate_1 [simp]: \"(\\<sigma> \\<Turnstile> (return P)) = (P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<Turnstile> unit\\<^sub>S\\<^sub>E P) = P", "by(auto simp: valid_SE_def unit_SE_def)"], ["", "lemma valid_propagate_2: \"\\<sigma> \\<Turnstile> ((s \\<leftarrow> A ; M s)) \\<Longrightarrow>  \\<exists> v \\<sigma>'. the(A \\<sigma>) = (v,\\<sigma>') \\<and> \\<sigma>' \\<Turnstile> (M v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<Turnstile> bind\\<^sub>S\\<^sub>E A M \\<Longrightarrow>\n    \\<exists>v \\<sigma>'.\n       the (A \\<sigma>) = (v, \\<sigma>') \\<and> \\<sigma>' \\<Turnstile> M v", "apply (auto simp: valid_SE_def unit_SE_def bind_SE_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a;\n        (case A \\<sigma> of None \\<Rightarrow> None\n         | Some (xa, xb) \\<Rightarrow> M xa xb) =\n        Some (True, b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v \\<sigma>'.\n                            (\\<exists>a b.\n                                M v (the (A \\<sigma>) =\n                                     (v, \\<sigma>') \\<and>\n                                     \\<sigma>') =\n                                Some (a, b)) \\<and>\n                            fst (the (M v\n (the (A \\<sigma>) = (v, \\<sigma>') \\<and> \\<sigma>')))", "apply (cases \"A \\<sigma>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a;\n        (case A \\<sigma> of None \\<Rightarrow> None\n         | Some (xa, xb) \\<Rightarrow> M xa xb) =\n        Some (True, b);\n        A \\<sigma> = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v \\<sigma>'.\n                            (\\<exists>a b.\n                                M v (the (A \\<sigma>) =\n                                     (v, \\<sigma>') \\<and>\n                                     \\<sigma>') =\n                                Some (a, b)) \\<and>\n                            fst (the (M v\n (the (A \\<sigma>) = (v, \\<sigma>') \\<and> \\<sigma>')))\n 2. \\<And>a b aa.\n       \\<lbrakk>a;\n        (case A \\<sigma> of None \\<Rightarrow> None\n         | Some (xa, xb) \\<Rightarrow> M xa xb) =\n        Some (True, b);\n        A \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v \\<sigma>'.\n                            (\\<exists>a b.\n                                M v (the (A \\<sigma>) =\n                                     (v, \\<sigma>') \\<and>\n                                     \\<sigma>') =\n                                Some (a, b)) \\<and>\n                            fst (the (M v\n (the (A \\<sigma>) = (v, \\<sigma>') \\<and> \\<sigma>')))", "apply (simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa.\n       \\<lbrakk>a;\n        (case aa of (x, xa) \\<Rightarrow> M x xa) = Some (True, b);\n        A \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v \\<sigma>'.\n                            (\\<exists>a b.\n                                M v (aa = (v, \\<sigma>') \\<and> \\<sigma>') =\n                                Some (a, b)) \\<and>\n                            fst (the (M v\n (aa = (v, \\<sigma>') \\<and> \\<sigma>')))", "apply (drule_tac x=\"A \\<sigma>\" and f=the in arg_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa.\n       \\<lbrakk>a;\n        (case aa of (x, xa) \\<Rightarrow> M x xa) = Some (True, b);\n        the (A \\<sigma>) = the (Some aa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v \\<sigma>'.\n                            (\\<exists>a b.\n                                M v (aa = (v, \\<sigma>') \\<and> \\<sigma>') =\n                                Some (a, b)) \\<and>\n                            fst (the (M v\n (aa = (v, \\<sigma>') \\<and> \\<sigma>')))", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa.\n       \\<lbrakk>a;\n        (case aa of (x, xa) \\<Rightarrow> M x xa) = Some (True, b);\n        the (A \\<sigma>) = aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v \\<sigma>'.\n                            (\\<exists>a b.\n                                M v (aa = (v, \\<sigma>') \\<and> \\<sigma>') =\n                                Some (a, b)) \\<and>\n                            fst (the (M v\n (aa = (v, \\<sigma>') \\<and> \\<sigma>')))", "apply (rename_tac a b aa )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa.\n       \\<lbrakk>a;\n        (case aa of (x, xa) \\<Rightarrow> M x xa) = Some (True, b);\n        the (A \\<sigma>) = aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v \\<sigma>'.\n                            (\\<exists>a b.\n                                M v (aa = (v, \\<sigma>') \\<and> \\<sigma>') =\n                                Some (a, b)) \\<and>\n                            fst (the (M v\n (aa = (v, \\<sigma>') \\<and> \\<sigma>')))", "apply (rule_tac x=\"fst aa\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa.\n       \\<lbrakk>a;\n        (case aa of (x, xa) \\<Rightarrow> M x xa) = Some (True, b);\n        the (A \\<sigma>) = aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>'.\n                            (\\<exists>a b.\n                                M (fst aa)\n                                 (aa = (fst aa, \\<sigma>') \\<and>\n                                  \\<sigma>') =\n                                Some (a, b)) \\<and>\n                            fst (the (M (fst aa)\n (aa = (fst aa, \\<sigma>') \\<and> \\<sigma>')))", "apply (rule_tac x=\"snd aa\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa.\n       \\<lbrakk>a;\n        (case aa of (x, xa) \\<Rightarrow> M x xa) = Some (True, b);\n        the (A \\<sigma>) = aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>a b.\n                             M (fst aa)\n                              (aa = (fst aa, snd aa) \\<and> snd aa) =\n                             Some (a, b)) \\<and>\n                         fst (the (M (fst aa)\n                                    (aa = (fst aa, snd aa) \\<and> snd aa)))", "by (auto)"], ["", "lemma valid_propagate_2': \"\\<sigma> \\<Turnstile> ((s \\<leftarrow> A ; M s)) \\<Longrightarrow>  \\<exists> a. (A \\<sigma>) = Some a \\<and> (snd a) \\<Turnstile> (M (fst a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<Turnstile> bind\\<^sub>S\\<^sub>E A M \\<Longrightarrow>\n    \\<exists>a. A \\<sigma> = Some a \\<and> snd a \\<Turnstile> M (fst a)", "apply (auto simp: valid_SE_def unit_SE_def bind_SE_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a;\n        (case A \\<sigma> of None \\<Rightarrow> None\n         | Some (xa, xb) \\<Rightarrow> M xa xb) =\n        Some (True, b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b.\n                            (\\<exists>aa ba.\n                                M a (A \\<sigma> = Some (a, b) \\<and> b) =\n                                Some (aa, ba)) \\<and>\n                            fst (the (M a\n (A \\<sigma> = Some (a, b) \\<and> b)))", "apply (cases \"A \\<sigma>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a;\n        (case A \\<sigma> of None \\<Rightarrow> None\n         | Some (xa, xb) \\<Rightarrow> M xa xb) =\n        Some (True, b);\n        A \\<sigma> = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b.\n                            (\\<exists>aa ba.\n                                M a (A \\<sigma> = Some (a, b) \\<and> b) =\n                                Some (aa, ba)) \\<and>\n                            fst (the (M a\n (A \\<sigma> = Some (a, b) \\<and> b)))\n 2. \\<And>a b aa.\n       \\<lbrakk>a;\n        (case A \\<sigma> of None \\<Rightarrow> None\n         | Some (xa, xb) \\<Rightarrow> M xa xb) =\n        Some (True, b);\n        A \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b.\n                            (\\<exists>aa ba.\n                                M a (A \\<sigma> = Some (a, b) \\<and> b) =\n                                Some (aa, ba)) \\<and>\n                            fst (the (M a\n (A \\<sigma> = Some (a, b) \\<and> b)))", "apply (simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa.\n       \\<lbrakk>a;\n        (case aa of (x, xa) \\<Rightarrow> M x xa) = Some (True, b);\n        A \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b.\n                            (\\<exists>aaa ba.\n                                M a (aa = (a, b) \\<and> b) =\n                                Some (aaa, ba)) \\<and>\n                            fst (the (M a (aa = (a, b) \\<and> b)))", "apply (simp_all split: prod.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa x1 x2.\n       \\<lbrakk>A \\<sigma> = Some (x1, x2); a; aa = (x1, x2);\n        M x1 x2 = Some (True, b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b.\n                            (\\<exists>aa ba.\n                                M a (x1 = a \\<and> x2 = b \\<and> b) =\n                                Some (aa, ba)) \\<and>\n                            fst (the (M a (x1 = a \\<and> x2 = b \\<and> b)))", "apply (drule_tac x=\"A \\<sigma>\" and f=the in arg_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa x1 x2.\n       \\<lbrakk>a; aa = (x1, x2); M x1 x2 = Some (True, b);\n        the (A \\<sigma>) = the (Some (x1, x2))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b.\n                            (\\<exists>aa ba.\n                                M a (x1 = a \\<and> x2 = b \\<and> b) =\n                                Some (aa, ba)) \\<and>\n                            fst (the (M a (x1 = a \\<and> x2 = b \\<and> b)))", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa x1 x2.\n       \\<lbrakk>a; aa = (x1, x2); M x1 x2 = Some (True, b);\n        the (A \\<sigma>) = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b.\n                            (\\<exists>aa ba.\n                                M a (x1 = a \\<and> x2 = b \\<and> b) =\n                                Some (aa, ba)) \\<and>\n                            fst (the (M a (x1 = a \\<and> x2 = b \\<and> b)))", "apply (rename_tac a b aa x1 x2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa x1 x2.\n       \\<lbrakk>a; aa = (x1, x2); M x1 x2 = Some (True, b);\n        the (A \\<sigma>) = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b.\n                            (\\<exists>aa ba.\n                                M a (x1 = a \\<and> x2 = b \\<and> b) =\n                                Some (aa, ba)) \\<and>\n                            fst (the (M a (x1 = a \\<and> x2 = b \\<and> b)))", "apply (rule_tac x=\"fst aa\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa x1 x2.\n       \\<lbrakk>a; aa = (x1, x2); M x1 x2 = Some (True, b);\n        the (A \\<sigma>) = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b.\n                            (\\<exists>a ba.\n                                M (fst aa)\n                                 (x1 = fst aa \\<and> x2 = b \\<and> b) =\n                                Some (a, ba)) \\<and>\n                            fst (the (M (fst aa)\n (x1 = fst aa \\<and> x2 = b \\<and> b)))", "apply (rule_tac x=\"snd aa\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa x1 x2.\n       \\<lbrakk>a; aa = (x1, x2); M x1 x2 = Some (True, b);\n        the (A \\<sigma>) = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>a b.\n                             M (fst aa)\n                              (x1 = fst aa \\<and>\n                               x2 = snd aa \\<and> snd aa) =\n                             Some (a, b)) \\<and>\n                         fst (the (M (fst aa)\n                                    (x1 = fst aa \\<and>\n                                     x2 = snd aa \\<and> snd aa)))", "apply (auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma valid_propagate_2'': \"\\<sigma> \\<Turnstile> ((s \\<leftarrow> A ; M s)) \\<Longrightarrow> \\<exists> v \\<sigma>'. A \\<sigma> = Some(v,\\<sigma>') \\<and> \\<sigma>' \\<Turnstile> (M v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<Turnstile> bind\\<^sub>S\\<^sub>E A M \\<Longrightarrow>\n    \\<exists>v \\<sigma>'.\n       A \\<sigma> = Some (v, \\<sigma>') \\<and> \\<sigma>' \\<Turnstile> M v", "apply (auto simp: valid_SE_def unit_SE_def bind_SE_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a;\n        (case A \\<sigma> of None \\<Rightarrow> None\n         | Some (xa, xb) \\<Rightarrow> M xa xb) =\n        Some (True, b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v \\<sigma>'.\n                            (\\<exists>a b.\n                                M v (A \\<sigma> = Some (v, \\<sigma>') \\<and>\n                                     \\<sigma>') =\n                                Some (a, b)) \\<and>\n                            fst (the (M v\n (A \\<sigma> = Some (v, \\<sigma>') \\<and> \\<sigma>')))", "apply (cases \"A \\<sigma>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a;\n        (case A \\<sigma> of None \\<Rightarrow> None\n         | Some (xa, xb) \\<Rightarrow> M xa xb) =\n        Some (True, b);\n        A \\<sigma> = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v \\<sigma>'.\n                            (\\<exists>a b.\n                                M v (A \\<sigma> = Some (v, \\<sigma>') \\<and>\n                                     \\<sigma>') =\n                                Some (a, b)) \\<and>\n                            fst (the (M v\n (A \\<sigma> = Some (v, \\<sigma>') \\<and> \\<sigma>')))\n 2. \\<And>a b aa.\n       \\<lbrakk>a;\n        (case A \\<sigma> of None \\<Rightarrow> None\n         | Some (xa, xb) \\<Rightarrow> M xa xb) =\n        Some (True, b);\n        A \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v \\<sigma>'.\n                            (\\<exists>a b.\n                                M v (A \\<sigma> = Some (v, \\<sigma>') \\<and>\n                                     \\<sigma>') =\n                                Some (a, b)) \\<and>\n                            fst (the (M v\n (A \\<sigma> = Some (v, \\<sigma>') \\<and> \\<sigma>')))", "apply (simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa.\n       \\<lbrakk>a;\n        (case aa of (x, xa) \\<Rightarrow> M x xa) = Some (True, b);\n        A \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v \\<sigma>'.\n                            (\\<exists>a b.\n                                M v (aa = (v, \\<sigma>') \\<and> \\<sigma>') =\n                                Some (a, b)) \\<and>\n                            fst (the (M v\n (aa = (v, \\<sigma>') \\<and> \\<sigma>')))", "apply (drule_tac x=\"A \\<sigma>\" and f=the in arg_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa.\n       \\<lbrakk>a;\n        (case aa of (x, xa) \\<Rightarrow> M x xa) = Some (True, b);\n        the (A \\<sigma>) = the (Some aa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v \\<sigma>'.\n                            (\\<exists>a b.\n                                M v (aa = (v, \\<sigma>') \\<and> \\<sigma>') =\n                                Some (a, b)) \\<and>\n                            fst (the (M v\n (aa = (v, \\<sigma>') \\<and> \\<sigma>')))", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa.\n       \\<lbrakk>a;\n        (case aa of (x, xa) \\<Rightarrow> M x xa) = Some (True, b);\n        the (A \\<sigma>) = aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v \\<sigma>'.\n                            (\\<exists>a b.\n                                M v (aa = (v, \\<sigma>') \\<and> \\<sigma>') =\n                                Some (a, b)) \\<and>\n                            fst (the (M v\n (aa = (v, \\<sigma>') \\<and> \\<sigma>')))", "apply (rename_tac a b aa )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa.\n       \\<lbrakk>a;\n        (case aa of (x, xa) \\<Rightarrow> M x xa) = Some (True, b);\n        the (A \\<sigma>) = aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v \\<sigma>'.\n                            (\\<exists>a b.\n                                M v (aa = (v, \\<sigma>') \\<and> \\<sigma>') =\n                                Some (a, b)) \\<and>\n                            fst (the (M v\n (aa = (v, \\<sigma>') \\<and> \\<sigma>')))", "apply (rule_tac x=\"fst aa\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa.\n       \\<lbrakk>a;\n        (case aa of (x, xa) \\<Rightarrow> M x xa) = Some (True, b);\n        the (A \\<sigma>) = aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>'.\n                            (\\<exists>a b.\n                                M (fst aa)\n                                 (aa = (fst aa, \\<sigma>') \\<and>\n                                  \\<sigma>') =\n                                Some (a, b)) \\<and>\n                            fst (the (M (fst aa)\n (aa = (fst aa, \\<sigma>') \\<and> \\<sigma>')))", "apply (rule_tac x=\"snd aa\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa.\n       \\<lbrakk>a;\n        (case aa of (x, xa) \\<Rightarrow> M x xa) = Some (True, b);\n        the (A \\<sigma>) = aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>a b.\n                             M (fst aa)\n                              (aa = (fst aa, snd aa) \\<and> snd aa) =\n                             Some (a, b)) \\<and>\n                         fst (the (M (fst aa)\n                                    (aa = (fst aa, snd aa) \\<and> snd aa)))", "apply (auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma valid_propoagate_3[simp]: \"(\\<sigma>\\<^sub>0 \\<Turnstile> (\\<lambda>\\<sigma>. Some (f \\<sigma>, \\<sigma>))) = (f \\<sigma>\\<^sub>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>\\<^sub>0 \\<Turnstile>\n     (\\<lambda>\\<sigma>. Some (f \\<sigma>, \\<sigma>))) =\n    f \\<sigma>\\<^sub>0", "by(simp add: valid_SE_def )"], ["", "lemma valid_propoagate_3'[simp]: \"\\<not>(\\<sigma>\\<^sub>0 \\<Turnstile> (\\<lambda>\\<sigma>. None))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<sigma>\\<^sub>0 \\<Turnstile> Map.empty)", "by(simp add: valid_SE_def )"], ["", "lemma assert_disch1 :\" P \\<sigma> \\<Longrightarrow> (\\<sigma> \\<Turnstile> (x \\<leftarrow> assert\\<^sub>S\\<^sub>E P; M x)) = (\\<sigma> \\<Turnstile> (M True))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<sigma> \\<Longrightarrow>\n    (\\<sigma> \\<Turnstile>\n     bind\\<^sub>S\\<^sub>E (assert\\<^sub>S\\<^sub>E P) M) =\n    (\\<sigma> \\<Turnstile> M True)", "by(auto simp: bind_SE_def assert_SE_def valid_SE_def)"], ["", "lemma assert_disch2 :\" \\<not> P \\<sigma> \\<Longrightarrow> \\<not> (\\<sigma> \\<Turnstile> (x \\<leftarrow> assert\\<^sub>S\\<^sub>E P ; M s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> P \\<sigma> \\<Longrightarrow>\n    \\<not> (\\<sigma> \\<Turnstile>\n            ( x \\<leftarrow> assert\\<^sub>S\\<^sub>E P; M s))", "by(auto simp: bind_SE_def assert_SE_def valid_SE_def)"], ["", "lemma assert_disch3 :\" \\<not> P \\<sigma> \\<Longrightarrow> \\<not> (\\<sigma> \\<Turnstile> (assert\\<^sub>S\\<^sub>E P))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> P \\<sigma> \\<Longrightarrow>\n    \\<not> (\\<sigma> \\<Turnstile> assert\\<^sub>S\\<^sub>E P)", "by(auto simp: bind_SE_def assert_SE_def valid_SE_def)"], ["", "lemma assert_D : \"(\\<sigma> \\<Turnstile> (x \\<leftarrow> assert\\<^sub>S\\<^sub>E P; M x)) \\<Longrightarrow> P \\<sigma> \\<and> (\\<sigma> \\<Turnstile> (M True))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<Turnstile>\n    bind\\<^sub>S\\<^sub>E (assert\\<^sub>S\\<^sub>E P) M \\<Longrightarrow>\n    P \\<sigma> \\<and> (\\<sigma> \\<Turnstile> M True)", "by(auto simp: bind_SE_def assert_SE_def valid_SE_def split: HOL.if_split_asm)"], ["", "lemma assume_D : \"(\\<sigma> \\<Turnstile> (x \\<leftarrow> assume\\<^sub>S\\<^sub>E P; M x)) \\<Longrightarrow> \\<exists> \\<sigma>. (P \\<sigma> \\<and>  \\<sigma> \\<Turnstile> (M ()))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<Turnstile>\n    bind\\<^sub>S\\<^sub>E (assume\\<^sub>S\\<^sub>E P) M \\<Longrightarrow>\n    \\<exists>\\<sigma>. P \\<sigma> \\<and> \\<sigma> \\<Turnstile> M ()", "apply (auto simp: bind_SE_def assume_SE_def valid_SE_def split: HOL.if_split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       \\<lbrakk>P x; a; M () (Eps P) = Some (True, b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<exists>a b.\n                                M () (P \\<sigma> \\<and> \\<sigma>) =\n                                Some (a, b)) \\<and>\n                            fst (the (M () (P \\<sigma> \\<and> \\<sigma>)))", "apply (rule_tac x=\"Eps P\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       \\<lbrakk>P x; a; M () (Eps P) = Some (True, b)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>a b.\n                             M () (P (Eps P) \\<and> Eps P) =\n                             Some (a, b)) \\<and>\n                         fst (the (M () (P (Eps P) \\<and> Eps P)))", "apply (auto)[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x a b.\n       \\<lbrakk>P x; a; M () (Eps P) = Some (True, b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b.\n                            M () (P (Eps P) \\<and> Eps P) = Some (a, b)\n 2. \\<And>x a b.\n       \\<lbrakk>P x; a; M () (Eps P) = Some (True, b)\\<rbrakk>\n       \\<Longrightarrow> fst (the (M () (P (Eps P) \\<and> Eps P)))", "subgoal for x a b"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P x; a; M () (Eps P) = Some (True, b)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a b.\n                         M () (P (Eps P) \\<and> Eps P) = Some (a, b)", "apply (rule_tac x=\"True\" in exI, rule_tac x=\"b\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P x; a; M () (Eps P) = Some (True, b)\\<rbrakk>\n    \\<Longrightarrow> M () (P (Eps P) \\<and> Eps P) = Some (True, b)", "apply (subst Hilbert_Choice.someI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>P x; a; M () (Eps P) = Some (True, b)\\<rbrakk>\n    \\<Longrightarrow> P ?x2\n 2. \\<lbrakk>P x; a; M () (Eps P) = Some (True, b)\\<rbrakk>\n    \\<Longrightarrow> M () (True \\<and> Eps P) = Some (True, b)", "apply (assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P x; a; M () (Eps P) = Some (True, b)\\<rbrakk>\n    \\<Longrightarrow> M () (True \\<and> Eps P) = Some (True, b)", "apply (simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       \\<lbrakk>P x; a; M () (Eps P) = Some (True, b)\\<rbrakk>\n       \\<Longrightarrow> fst (the (M () (P (Eps P) \\<and> Eps P)))", "apply (subst Hilbert_Choice.someI,assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       \\<lbrakk>P x; a; M () (Eps P) = Some (True, b)\\<rbrakk>\n       \\<Longrightarrow> fst (the (M () (True \\<and> Eps P)))", "apply (simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text\\<open>\n  These two rule prove that the SE Monad in connection with the notion of valid sequence is \n  actually sufficient for a representation of a Boogie-like language. The SBE monad with explicit\n  sets of states---to be shown below---is strictly speaking not necessary (and will therefore\n  be discontinued in the development). \n\\<close>"], ["", "lemma if_SE_D1 : \"P \\<sigma> \\<Longrightarrow> (\\<sigma> \\<Turnstile> if\\<^sub>S\\<^sub>E P B\\<^sub>1 B\\<^sub>2) = (\\<sigma> \\<Turnstile> B\\<^sub>1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<sigma> \\<Longrightarrow>\n    (\\<sigma> \\<Turnstile> if\\<^sub>S\\<^sub>E P B\\<^sub>1 B\\<^sub>2) =\n    (\\<sigma> \\<Turnstile> B\\<^sub>1)", "by(auto simp: if_SE_def valid_SE_def)"], ["", "lemma if_SE_D2 : \"\\<not> P \\<sigma> \\<Longrightarrow> (\\<sigma> \\<Turnstile> if\\<^sub>S\\<^sub>E P B\\<^sub>1 B\\<^sub>2) = (\\<sigma> \\<Turnstile> B\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> P \\<sigma> \\<Longrightarrow>\n    (\\<sigma> \\<Turnstile> if\\<^sub>S\\<^sub>E P B\\<^sub>1 B\\<^sub>2) =\n    (\\<sigma> \\<Turnstile> B\\<^sub>2)", "by(auto simp: if_SE_def valid_SE_def)"], ["", "lemma if_SE_split_asm : \" (\\<sigma> \\<Turnstile> if\\<^sub>S\\<^sub>E P B\\<^sub>1 B\\<^sub>2) = ((P \\<sigma> \\<and> (\\<sigma> \\<Turnstile> B\\<^sub>1)) \\<or> (\\<not> P \\<sigma> \\<and> (\\<sigma> \\<Turnstile> B\\<^sub>2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<Turnstile> if\\<^sub>S\\<^sub>E P B\\<^sub>1 B\\<^sub>2) =\n    (P \\<sigma> \\<and> (\\<sigma> \\<Turnstile> B\\<^sub>1) \\<or>\n     \\<not> P \\<sigma> \\<and> (\\<sigma> \\<Turnstile> B\\<^sub>2))", "by(cases \"P \\<sigma>\",auto simp: if_SE_D1 if_SE_D2)"], ["", "lemma if_SE_split : \" (\\<sigma> \\<Turnstile> if\\<^sub>S\\<^sub>E P B\\<^sub>1 B\\<^sub>2) = ((P \\<sigma> \\<longrightarrow> (\\<sigma> \\<Turnstile> B\\<^sub>1)) \\<and> (\\<not> P \\<sigma> \\<longrightarrow> (\\<sigma> \\<Turnstile> B\\<^sub>2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<Turnstile> if\\<^sub>S\\<^sub>E P B\\<^sub>1 B\\<^sub>2) =\n    ((P \\<sigma> \\<longrightarrow> (\\<sigma> \\<Turnstile> B\\<^sub>1)) \\<and>\n     (\\<not> P \\<sigma> \\<longrightarrow>\n      (\\<sigma> \\<Turnstile> B\\<^sub>2)))", "by(cases \"P \\<sigma>\", auto simp: if_SE_D1 if_SE_D2)"], ["", "lemma [code]: \"(\\<sigma> \\<Turnstile> m) = (case (m \\<sigma>) of None  \\<Rightarrow> False | (Some (x,y))  \\<Rightarrow> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<Turnstile> m) =\n    (case m \\<sigma> of None \\<Rightarrow> False\n     | Some (x, y) \\<Rightarrow> x)", "apply (simp add: valid_SE_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<exists>a b. m \\<sigma> = Some (a, b)) \\<and>\n     fst (the (m \\<sigma>))) =\n    (case m \\<sigma> of None \\<Rightarrow> False\n     | Some (x, y) \\<Rightarrow> x)", "apply (cases \"m \\<sigma> = None\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. m \\<sigma> = None \\<Longrightarrow>\n    ((\\<exists>a b. m \\<sigma> = Some (a, b)) \\<and>\n     fst (the (m \\<sigma>))) =\n    (case m \\<sigma> of None \\<Rightarrow> False\n     | Some (x, y) \\<Rightarrow> x)\n 2. m \\<sigma> \\<noteq> None \\<Longrightarrow>\n    ((\\<exists>a b. m \\<sigma> = Some (a, b)) \\<and>\n     fst (the (m \\<sigma>))) =\n    (case m \\<sigma> of None \\<Rightarrow> False\n     | Some (x, y) \\<Rightarrow> x)", "apply (simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a b. m \\<sigma> = Some (a, b) \\<Longrightarrow>\n    fst (the (m \\<sigma>)) =\n    (case m \\<sigma> of None \\<Rightarrow> False\n     | Some (x, y) \\<Rightarrow> x)", "apply (insert not_None_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>a b. m \\<sigma> = Some (a, b);\n     \\<And>x. (x \\<noteq> None) = (\\<exists>y. x = Some y)\\<rbrakk>\n    \\<Longrightarrow> fst (the (m \\<sigma>)) =\n                      (case m \\<sigma> of None \\<Rightarrow> False\n                       | Some (x, y) \\<Rightarrow> x)", "apply (auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection\\<open>Valid Test Sequences in the State Exception Backtrack Monad\\<close>"], ["", "text\\<open>\n  This is still an unstructured merge of executable monad concepts and specification oriented \n  high-level properties initiating test procedures. \n\\<close>"], ["", "definition valid_SBE :: \"'\\<sigma> \\<Rightarrow> ('a,'\\<sigma>) MON\\<^sub>S\\<^sub>B\\<^sub>E \\<Rightarrow> bool\" (infix \"\\<Turnstile>\\<^sub>S\\<^sub>B\\<^sub>E\" 15)\n  where \"\\<sigma> \\<Turnstile>\\<^sub>S\\<^sub>B\\<^sub>E m \\<equiv> (m \\<sigma> \\<noteq> None)\""], ["", "text\\<open>\n  This notation considers all non-failures as valid. \n\\<close>"], ["", "lemma assume_assert: \"(\\<sigma> \\<Turnstile>\\<^sub>S\\<^sub>B\\<^sub>E ( _ :\\<equiv> assume\\<^sub>S\\<^sub>B\\<^sub>E P ; assert\\<^sub>S\\<^sub>B\\<^sub>E Q)) = (P \\<sigma> \\<longrightarrow> Q \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<Turnstile>\\<^sub>S\\<^sub>B\\<^sub>E\n     ( _ :\\<equiv> assume\\<^sub>S\\<^sub>B\\<^sub>E\n                    P; assert\\<^sub>S\\<^sub>B\\<^sub>E Q)) =\n    (P \\<sigma> \\<longrightarrow> Q \\<sigma>)", "by(simp add: valid_SBE_def assume_SBE_def assert_SBE_def bind_SBE_def)"], ["", "lemma assert_intro: \"Q \\<sigma> \\<Longrightarrow> \\<sigma> \\<Turnstile>\\<^sub>S\\<^sub>B\\<^sub>E (assert\\<^sub>S\\<^sub>B\\<^sub>E Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q \\<sigma> \\<Longrightarrow>\n    \\<sigma> \\<Turnstile>\\<^sub>S\\<^sub>B\\<^sub>E\n    assert\\<^sub>S\\<^sub>B\\<^sub>E Q", "by(simp add: valid_SBE_def assume_SBE_def assert_SBE_def bind_SBE_def)"], ["", "end"]]}