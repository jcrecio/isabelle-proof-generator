{"file_name": "/home/qj213/afp-2021-10-22/thys/UPF/Normalisation.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/UPF", "problem_names": ["lemma none_MT_rules_vs_notMT: \"none_MT_rules  C p \\<Longrightarrow> p \\<noteq> [] \\<Longrightarrow> not_MT C p\"", "lemma rmnMT: \"none_MT_rules C (rm_MT_rules C p)\"", "lemma rmnMT2: \"none_MT_rules C  p \\<Longrightarrow>  (rm_MT_rules C p) = p\"", "lemma nMTcharn: \"none_MT_rules C p = (\\<forall> r \\<in> set p. dom (C r) \\<noteq> {})\"", "lemma nMTeqSet: \"set p = set s \\<Longrightarrow> none_MT_rules C p = none_MT_rules C s\"", "lemma notMTnMT: \"\\<lbrakk>a \\<in> set p; none_MT_rules C p\\<rbrakk> \\<Longrightarrow> dom (C a) \\<noteq> {}\"", "lemma none_MT_rulesconc: \"none_MT_rules C (a@[b]) \\<Longrightarrow> none_MT_rules C a\"", "lemma nMTtail: \"none_MT_rules C p \\<Longrightarrow> none_MT_rules C (tl p)\"", "lemma not_MTimpnotMT[simp]: \"not_MT C p \\<Longrightarrow> p \\<noteq> []\"", "lemma SR3nMT: \"\\<not> not_MT C  p \\<Longrightarrow> rm_MT_rules C p = []\"", "lemma NMPcharn: \"\\<lbrakk>a \\<in> set p; dom (C a) \\<noteq> {}\\<rbrakk> \\<Longrightarrow> not_MT C  p\"", "lemma NMPrm: \"not_MT C  p \\<Longrightarrow> not_MT C (rm_MT_rules C p)\"", "lemma mrconc: \"applied_rule_rev C x p = Some a \\<Longrightarrow> applied_rule_rev C x (b#p) = Some a\"", "lemma mreq_end: \"\\<lbrakk>applied_rule_rev C x b = Some r; applied_rule_rev C x c = Some r\\<rbrakk> \\<Longrightarrow> \n applied_rule_rev C x (a#b) = applied_rule_rev C x (a#c)\"", "lemma mrconcNone: \"applied_rule_rev C x p = None \\<Longrightarrow>\n                                applied_rule_rev C x (b#p) = applied_rule_rev C x [b]\"", "lemma mreq_endNone: \"\\<lbrakk>applied_rule_rev C x b = None; applied_rule_rev C x c = None\\<rbrakk> \\<Longrightarrow> \n     applied_rule_rev C x (a#b) = applied_rule_rev C x (a#c)\"", "lemma mreq_end2: \"applied_rule_rev C x b = applied_rule_rev C x c \\<Longrightarrow> \n     applied_rule_rev C x (a#b) = applied_rule_rev C x (a#c)\"", "lemma mreq_end3: \"applied_rule_rev C x p \\<noteq> None \\<Longrightarrow>\n                  applied_rule_rev C x (b # p) = applied_rule_rev C x (p)\"", "lemma mrNoneMT: \"\\<lbrakk>r \\<in> set p; applied_rule_rev C x p = None\\<rbrakk> \\<Longrightarrow>\n                              x \\<notin> dom (C r)\"", "lemma list2listNMT:  \"x \\<noteq> [] \\<Longrightarrow> map sem x \\<noteq> []\"", "lemma two_conc: \"(prod_list x (y#ys) p r d) = ((r o_f ((p x y) o d))#(prod_list x ys p r d))\"", "lemma is_distr_orD: \"is_distr (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) d r\"", "lemma is_strict_orD: \"is_strict (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) d r\"", "lemma is_distr_2: \"is_distr (\\<Otimes>\\<^sub>2) d r\"", "lemma is_strict_2: \"is_strict (\\<Otimes>\\<^sub>2) d r\"", "lemma domStart: \"t \\<in> dom p1 \\<Longrightarrow> (p1 \\<Oplus> p2) t = p1 t\"", "lemma notDom: \"x \\<in> dom A \\<Longrightarrow> \\<not> A x = None\"", "lemma Norm_Distr_1:  \"((r o_f (((\\<Otimes>\\<^sub>1) P1 (list2policy P2)) o d)) x = \n                                                   ((list2policy ((P1 \\<Otimes>\\<^sub>L P2) (\\<Otimes>\\<^sub>1) r d)) x))\"", "lemma Norm_Distr_2: \"((r o_f (((\\<Otimes>\\<^sub>2) P1 (list2policy P2)) o d)) x = \n                               ((list2policy ((P1 \\<Otimes>\\<^sub>L P2) (\\<Otimes>\\<^sub>2) r d)) x))\"", "lemma Norm_Distr_A: \"((r o_f (((\\<Otimes>\\<^sub>\\<or>\\<^sub>A) P1 (list2policy P2)) o d)) x = \n                                                 ((list2policy ((P1 \\<Otimes>\\<^sub>L P2) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d)) x))\"", "lemma Norm_Distr_D: \"((r o_f (((\\<Otimes>\\<^sub>\\<or>\\<^sub>D) P1 (list2policy P2)) o d)) x = \n                                                  ((list2policy ((P1 \\<Otimes>\\<^sub>L P2) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d)) x))\"", "lemma domSubsetDistr1: \"dom A = UNIV \\<Longrightarrow> dom ((\\<lambda>(x, y). x) o_f (A \\<Otimes>\\<^sub>1 B) o (\\<lambda> x. (x,x))) = dom B\"", "lemma domSubsetDistr2: \"dom A = UNIV \\<Longrightarrow> dom ((\\<lambda>(x, y). x) o_f (A \\<Otimes>\\<^sub>2 B) o (\\<lambda> x. (x,x))) = dom B\"", "lemma domSubsetDistrA: \"dom A = UNIV \\<Longrightarrow> dom ((\\<lambda>(x, y). x) o_f (A \\<Otimes>\\<^sub>\\<or>\\<^sub>A B) o (\\<lambda> x. (x,x))) = dom B\"", "lemma domSubsetDistrD: \"dom A = UNIV \\<Longrightarrow> dom ((\\<lambda>(x, y). x) o_f (A \\<Otimes>\\<^sub>\\<or>\\<^sub>D B) o (\\<lambda> x. (x,x))) = dom B\""], "translations": [["", "lemma none_MT_rules_vs_notMT: \"none_MT_rules  C p \\<Longrightarrow> p \\<noteq> [] \\<Longrightarrow> not_MT C p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>none_MT_rules C p; p \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> not_MT C p", "apply (induct p)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>none_MT_rules C []; [] \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> not_MT C []\n 2. \\<And>a p.\n       \\<lbrakk>\\<lbrakk>none_MT_rules C p; p \\<noteq> []\\<rbrakk>\n                \\<Longrightarrow> not_MT C p;\n        none_MT_rules C (a # p); a # p \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> not_MT C (a # p)", "apply (simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma rmnMT: \"none_MT_rules C (rm_MT_rules C p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. none_MT_rules C (rm_MT_rules C p)", "apply (induct p)"], ["proof (prove)\ngoal (2 subgoals):\n 1. none_MT_rules C (rm_MT_rules C [])\n 2. \\<And>a p.\n       none_MT_rules C (rm_MT_rules C p) \\<Longrightarrow>\n       none_MT_rules C (rm_MT_rules C (a # p))", "apply (simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma rmnMT2: \"none_MT_rules C  p \\<Longrightarrow>  (rm_MT_rules C p) = p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. none_MT_rules C p \\<Longrightarrow> rm_MT_rules C p = p", "apply (induct p)"], ["proof (prove)\ngoal (2 subgoals):\n 1. none_MT_rules C [] \\<Longrightarrow> rm_MT_rules C [] = []\n 2. \\<And>a p.\n       \\<lbrakk>none_MT_rules C p \\<Longrightarrow> rm_MT_rules C p = p;\n        none_MT_rules C (a # p)\\<rbrakk>\n       \\<Longrightarrow> rm_MT_rules C (a # p) = a # p", "apply (simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nMTcharn: \"none_MT_rules C p = (\\<forall> r \\<in> set p. dom (C r) \\<noteq> {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. none_MT_rules C p = (\\<forall>r\\<in>set p. dom (C r) \\<noteq> {})", "apply (induct p)"], ["proof (prove)\ngoal (2 subgoals):\n 1. none_MT_rules C [] = (\\<forall>r\\<in>set []. dom (C r) \\<noteq> {})\n 2. \\<And>a p.\n       none_MT_rules C p =\n       (\\<forall>r\\<in>set p. dom (C r) \\<noteq> {}) \\<Longrightarrow>\n       none_MT_rules C (a # p) =\n       (\\<forall>r\\<in>set (a # p). dom (C r) \\<noteq> {})", "apply (simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nMTeqSet: \"set p = set s \\<Longrightarrow> none_MT_rules C p = none_MT_rules C s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set p = set s \\<Longrightarrow> none_MT_rules C p = none_MT_rules C s", "apply (simp add: nMTcharn)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma notMTnMT: \"\\<lbrakk>a \\<in> set p; none_MT_rules C p\\<rbrakk> \\<Longrightarrow> dom (C a) \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> set p; none_MT_rules C p\\<rbrakk>\n    \\<Longrightarrow> dom (C a) \\<noteq> {}", "apply (simp add: nMTcharn)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma none_MT_rulesconc: \"none_MT_rules C (a@[b]) \\<Longrightarrow> none_MT_rules C a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. none_MT_rules C (a @ [b]) \\<Longrightarrow> none_MT_rules C a", "apply (induct a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. none_MT_rules C ([] @ [b]) \\<Longrightarrow> none_MT_rules C []\n 2. \\<And>a1 a2.\n       \\<lbrakk>none_MT_rules C (a2 @ [b]) \\<Longrightarrow>\n                none_MT_rules C a2;\n        none_MT_rules C ((a1 # a2) @ [b])\\<rbrakk>\n       \\<Longrightarrow> none_MT_rules C (a1 # a2)", "apply (simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nMTtail: \"none_MT_rules C p \\<Longrightarrow> none_MT_rules C (tl p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. none_MT_rules C p \\<Longrightarrow> none_MT_rules C (tl p)", "apply (induct p)"], ["proof (prove)\ngoal (2 subgoals):\n 1. none_MT_rules C [] \\<Longrightarrow> none_MT_rules C (tl [])\n 2. \\<And>a p.\n       \\<lbrakk>none_MT_rules C p \\<Longrightarrow> none_MT_rules C (tl p);\n        none_MT_rules C (a # p)\\<rbrakk>\n       \\<Longrightarrow> none_MT_rules C (tl (a # p))", "apply (simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma not_MTimpnotMT[simp]: \"not_MT C p \\<Longrightarrow> p \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. not_MT C p \\<Longrightarrow> p \\<noteq> []", "apply (auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma SR3nMT: \"\\<not> not_MT C  p \\<Longrightarrow> rm_MT_rules C p = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> not_MT C p \\<Longrightarrow> rm_MT_rules C p = []", "apply (induct p)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<not> not_MT C [] \\<Longrightarrow> rm_MT_rules C [] = []\n 2. \\<And>a p.\n       \\<lbrakk>\\<not> not_MT C p \\<Longrightarrow> rm_MT_rules C p = [];\n        \\<not> not_MT C (a # p)\\<rbrakk>\n       \\<Longrightarrow> rm_MT_rules C (a # p) = []", "apply (auto simp: if_splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma NMPcharn: \"\\<lbrakk>a \\<in> set p; dom (C a) \\<noteq> {}\\<rbrakk> \\<Longrightarrow> not_MT C  p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> set p; dom (C a) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> not_MT C p", "apply (induct p)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> set []; dom (C a) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> not_MT C []\n 2. \\<And>aa p.\n       \\<lbrakk>\\<lbrakk>a \\<in> set p; dom (C a) \\<noteq> {}\\<rbrakk>\n                \\<Longrightarrow> not_MT C p;\n        a \\<in> set (aa # p); dom (C a) \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> not_MT C (aa # p)", "apply (auto simp: if_splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma NMPrm: \"not_MT C  p \\<Longrightarrow> not_MT C (rm_MT_rules C p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. not_MT C p \\<Longrightarrow> not_MT C (rm_MT_rules C p)", "apply (induct p)"], ["proof (prove)\ngoal (2 subgoals):\n 1. not_MT C [] \\<Longrightarrow> not_MT C (rm_MT_rules C [])\n 2. \\<And>a p.\n       \\<lbrakk>not_MT C p \\<Longrightarrow> not_MT C (rm_MT_rules C p);\n        not_MT C (a # p)\\<rbrakk>\n       \\<Longrightarrow> not_MT C (rm_MT_rules C (a # p))", "apply (simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text\\<open>Next, a few theorems about applied\\_rule:\\<close>"], ["", "lemma mrconc: \"applied_rule_rev C x p = Some a \\<Longrightarrow> applied_rule_rev C x (b#p) = Some a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. applied_rule_rev C x p = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n    applied_rule_rev C x (b # p) = \\<lfloor>a\\<rfloor>", "proof (induct p rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. applied_rule_rev C x [] = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n    applied_rule_rev C x [b] = \\<lfloor>a\\<rfloor>\n 2. \\<And>xa xs.\n       \\<lbrakk>applied_rule_rev C x xs =\n                \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n                applied_rule_rev C x (b # xs) = \\<lfloor>a\\<rfloor>;\n        applied_rule_rev C x (xs @ [xa]) = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> applied_rule_rev C x (b # xs @ [xa]) =\n                         \\<lfloor>a\\<rfloor>", "case Nil"], ["proof (state)\nthis:\n  applied_rule_rev C x [] = \\<lfloor>a\\<rfloor>\n\ngoal (2 subgoals):\n 1. applied_rule_rev C x [] = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n    applied_rule_rev C x [b] = \\<lfloor>a\\<rfloor>\n 2. \\<And>xa xs.\n       \\<lbrakk>applied_rule_rev C x xs =\n                \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n                applied_rule_rev C x (b # xs) = \\<lfloor>a\\<rfloor>;\n        applied_rule_rev C x (xs @ [xa]) = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> applied_rule_rev C x (b # xs @ [xa]) =\n                         \\<lfloor>a\\<rfloor>", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. applied_rule_rev C x [b] = \\<lfloor>a\\<rfloor>", "using Nil"], ["proof (prove)\nusing this:\n  applied_rule_rev C x [] = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. applied_rule_rev C x [b] = \\<lfloor>a\\<rfloor>", "by (simp add: applied_rule_rev_def)"], ["proof (state)\nthis:\n  applied_rule_rev C x [b] = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>xa xs.\n       \\<lbrakk>applied_rule_rev C x xs =\n                \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n                applied_rule_rev C x (b # xs) = \\<lfloor>a\\<rfloor>;\n        applied_rule_rev C x (xs @ [xa]) = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> applied_rule_rev C x (b # xs @ [xa]) =\n                         \\<lfloor>a\\<rfloor>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xs.\n       \\<lbrakk>applied_rule_rev C x xs =\n                \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n                applied_rule_rev C x (b # xs) = \\<lfloor>a\\<rfloor>;\n        applied_rule_rev C x (xs @ [xa]) = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> applied_rule_rev C x (b # xs @ [xa]) =\n                         \\<lfloor>a\\<rfloor>", "case (snoc xs x)"], ["proof (state)\nthis:\n  applied_rule_rev C x x = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n  applied_rule_rev C x (b # x) = \\<lfloor>a\\<rfloor>\n  applied_rule_rev C x (x @ [xs]) = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>xa xs.\n       \\<lbrakk>applied_rule_rev C x xs =\n                \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n                applied_rule_rev C x (b # xs) = \\<lfloor>a\\<rfloor>;\n        applied_rule_rev C x (xs @ [xa]) = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> applied_rule_rev C x (b # xs @ [xa]) =\n                         \\<lfloor>a\\<rfloor>", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. applied_rule_rev C x (b # x @ [xs]) = \\<lfloor>a\\<rfloor>", "using snoc"], ["proof (prove)\nusing this:\n  applied_rule_rev C x x = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n  applied_rule_rev C x (b # x) = \\<lfloor>a\\<rfloor>\n  applied_rule_rev C x (x @ [xs]) = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. applied_rule_rev C x (b # x @ [xs]) = \\<lfloor>a\\<rfloor>", "apply (simp add: applied_rule_rev_def if_splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>applied_rule C x (rev x) =\n             \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n             applied_rule C x (rev x @ [b]) = \\<lfloor>a\\<rfloor>;\n     (if x \\<in> dom (C xs) then \\<lfloor>xs\\<rfloor>\n      else applied_rule C x (rev x)) =\n     \\<lfloor>a\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> (x \\<in> dom (C xs) \\<longrightarrow> xs = a) \\<and>\n                      (x \\<notin> dom (C xs) \\<longrightarrow>\n                       applied_rule C x (rev x @ [b]) = \\<lfloor>a\\<rfloor>)", "by (metis option.inject)"], ["proof (state)\nthis:\n  applied_rule_rev C x (b # x @ [xs]) = \\<lfloor>a\\<rfloor>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mreq_end: \"\\<lbrakk>applied_rule_rev C x b = Some r; applied_rule_rev C x c = Some r\\<rbrakk> \\<Longrightarrow> \n applied_rule_rev C x (a#b) = applied_rule_rev C x (a#c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>applied_rule_rev C x b = \\<lfloor>r\\<rfloor>;\n     applied_rule_rev C x c = \\<lfloor>r\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> applied_rule_rev C x (a # b) =\n                      applied_rule_rev C x (a # c)", "by (simp add: mrconc)"], ["", "lemma mrconcNone: \"applied_rule_rev C x p = None \\<Longrightarrow>\n                                applied_rule_rev C x (b#p) = applied_rule_rev C x [b]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. applied_rule_rev C x p = \\<bottom> \\<Longrightarrow>\n    applied_rule_rev C x (b # p) = applied_rule_rev C x [b]", "proof (induct p rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. applied_rule_rev C x [] = \\<bottom> \\<Longrightarrow>\n    applied_rule_rev C x [b] = applied_rule_rev C x [b]\n 2. \\<And>xa xs.\n       \\<lbrakk>applied_rule_rev C x xs = \\<bottom> \\<Longrightarrow>\n                applied_rule_rev C x (b # xs) = applied_rule_rev C x [b];\n        applied_rule_rev C x (xs @ [xa]) = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> applied_rule_rev C x (b # xs @ [xa]) =\n                         applied_rule_rev C x [b]", "case Nil"], ["proof (state)\nthis:\n  applied_rule_rev C x [] = \\<bottom>\n\ngoal (2 subgoals):\n 1. applied_rule_rev C x [] = \\<bottom> \\<Longrightarrow>\n    applied_rule_rev C x [b] = applied_rule_rev C x [b]\n 2. \\<And>xa xs.\n       \\<lbrakk>applied_rule_rev C x xs = \\<bottom> \\<Longrightarrow>\n                applied_rule_rev C x (b # xs) = applied_rule_rev C x [b];\n        applied_rule_rev C x (xs @ [xa]) = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> applied_rule_rev C x (b # xs @ [xa]) =\n                         applied_rule_rev C x [b]", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. applied_rule_rev C x [b] = applied_rule_rev C x [b]", "by (simp add: applied_rule_rev_def)"], ["proof (state)\nthis:\n  applied_rule_rev C x [b] = applied_rule_rev C x [b]\n\ngoal (1 subgoal):\n 1. \\<And>xa xs.\n       \\<lbrakk>applied_rule_rev C x xs = \\<bottom> \\<Longrightarrow>\n                applied_rule_rev C x (b # xs) = applied_rule_rev C x [b];\n        applied_rule_rev C x (xs @ [xa]) = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> applied_rule_rev C x (b # xs @ [xa]) =\n                         applied_rule_rev C x [b]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xs.\n       \\<lbrakk>applied_rule_rev C x xs = \\<bottom> \\<Longrightarrow>\n                applied_rule_rev C x (b # xs) = applied_rule_rev C x [b];\n        applied_rule_rev C x (xs @ [xa]) = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> applied_rule_rev C x (b # xs @ [xa]) =\n                         applied_rule_rev C x [b]", "case (snoc ys y)"], ["proof (state)\nthis:\n  applied_rule_rev C x y = \\<bottom> \\<Longrightarrow>\n  applied_rule_rev C x (b # y) = applied_rule_rev C x [b]\n  applied_rule_rev C x (y @ [ys]) = \\<bottom>\n\ngoal (1 subgoal):\n 1. \\<And>xa xs.\n       \\<lbrakk>applied_rule_rev C x xs = \\<bottom> \\<Longrightarrow>\n                applied_rule_rev C x (b # xs) = applied_rule_rev C x [b];\n        applied_rule_rev C x (xs @ [xa]) = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> applied_rule_rev C x (b # xs @ [xa]) =\n                         applied_rule_rev C x [b]", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. applied_rule_rev C x (b # y @ [ys]) = applied_rule_rev C x [b]", "using snoc"], ["proof (prove)\nusing this:\n  applied_rule_rev C x y = \\<bottom> \\<Longrightarrow>\n  applied_rule_rev C x (b # y) = applied_rule_rev C x [b]\n  applied_rule_rev C x (y @ [ys]) = \\<bottom>\n\ngoal (1 subgoal):\n 1. applied_rule_rev C x (b # y @ [ys]) = applied_rule_rev C x [b]", "proof (cases \"x \\<in> dom (C ys)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>applied_rule_rev C x y = \\<bottom> \\<Longrightarrow>\n             applied_rule_rev C x (b # y) = applied_rule_rev C x [b];\n     applied_rule_rev C x (y @ [ys]) = \\<bottom>;\n     x \\<in> dom (C ys)\\<rbrakk>\n    \\<Longrightarrow> applied_rule_rev C x (b # y @ [ys]) =\n                      applied_rule_rev C x [b]\n 2. \\<lbrakk>applied_rule_rev C x y = \\<bottom> \\<Longrightarrow>\n             applied_rule_rev C x (b # y) = applied_rule_rev C x [b];\n     applied_rule_rev C x (y @ [ys]) = \\<bottom>;\n     x \\<notin> dom (C ys)\\<rbrakk>\n    \\<Longrightarrow> applied_rule_rev C x (b # y @ [ys]) =\n                      applied_rule_rev C x [b]", "case True"], ["proof (state)\nthis:\n  x \\<in> dom (C ys)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>applied_rule_rev C x y = \\<bottom> \\<Longrightarrow>\n             applied_rule_rev C x (b # y) = applied_rule_rev C x [b];\n     applied_rule_rev C x (y @ [ys]) = \\<bottom>;\n     x \\<in> dom (C ys)\\<rbrakk>\n    \\<Longrightarrow> applied_rule_rev C x (b # y @ [ys]) =\n                      applied_rule_rev C x [b]\n 2. \\<lbrakk>applied_rule_rev C x y = \\<bottom> \\<Longrightarrow>\n             applied_rule_rev C x (b # y) = applied_rule_rev C x [b];\n     applied_rule_rev C x (y @ [ys]) = \\<bottom>;\n     x \\<notin> dom (C ys)\\<rbrakk>\n    \\<Longrightarrow> applied_rule_rev C x (b # y @ [ys]) =\n                      applied_rule_rev C x [b]", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. applied_rule_rev C x (b # y @ [ys]) = applied_rule_rev C x [b]", "using True snoc"], ["proof (prove)\nusing this:\n  x \\<in> dom (C ys)\n  applied_rule_rev C x y = \\<bottom> \\<Longrightarrow>\n  applied_rule_rev C x (b # y) = applied_rule_rev C x [b]\n  applied_rule_rev C x (y @ [ys]) = \\<bottom>\n\ngoal (1 subgoal):\n 1. applied_rule_rev C x (b # y @ [ys]) = applied_rule_rev C x [b]", "by (auto simp: applied_rule_rev_def)"], ["proof (state)\nthis:\n  applied_rule_rev C x (b # y @ [ys]) = applied_rule_rev C x [b]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>applied_rule_rev C x y = \\<bottom> \\<Longrightarrow>\n             applied_rule_rev C x (b # y) = applied_rule_rev C x [b];\n     applied_rule_rev C x (y @ [ys]) = \\<bottom>;\n     x \\<notin> dom (C ys)\\<rbrakk>\n    \\<Longrightarrow> applied_rule_rev C x (b # y @ [ys]) =\n                      applied_rule_rev C x [b]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>applied_rule_rev C x y = \\<bottom> \\<Longrightarrow>\n             applied_rule_rev C x (b # y) = applied_rule_rev C x [b];\n     applied_rule_rev C x (y @ [ys]) = \\<bottom>;\n     x \\<notin> dom (C ys)\\<rbrakk>\n    \\<Longrightarrow> applied_rule_rev C x (b # y @ [ys]) =\n                      applied_rule_rev C x [b]", "case False"], ["proof (state)\nthis:\n  x \\<notin> dom (C ys)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>applied_rule_rev C x y = \\<bottom> \\<Longrightarrow>\n             applied_rule_rev C x (b # y) = applied_rule_rev C x [b];\n     applied_rule_rev C x (y @ [ys]) = \\<bottom>;\n     x \\<notin> dom (C ys)\\<rbrakk>\n    \\<Longrightarrow> applied_rule_rev C x (b # y @ [ys]) =\n                      applied_rule_rev C x [b]", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. applied_rule_rev C x (b # y @ [ys]) = applied_rule_rev C x [b]", "using False snoc"], ["proof (prove)\nusing this:\n  x \\<notin> dom (C ys)\n  applied_rule_rev C x y = \\<bottom> \\<Longrightarrow>\n  applied_rule_rev C x (b # y) = applied_rule_rev C x [b]\n  applied_rule_rev C x (y @ [ys]) = \\<bottom>\n\ngoal (1 subgoal):\n 1. applied_rule_rev C x (b # y @ [ys]) = applied_rule_rev C x [b]", "by (auto simp: applied_rule_rev_def)"], ["proof (state)\nthis:\n  applied_rule_rev C x (b # y @ [ys]) = applied_rule_rev C x [b]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  applied_rule_rev C x (b # y @ [ys]) = applied_rule_rev C x [b]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mreq_endNone: \"\\<lbrakk>applied_rule_rev C x b = None; applied_rule_rev C x c = None\\<rbrakk> \\<Longrightarrow> \n     applied_rule_rev C x (a#b) = applied_rule_rev C x (a#c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>applied_rule_rev C x b = \\<bottom>;\n     applied_rule_rev C x c = \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> applied_rule_rev C x (a # b) =\n                      applied_rule_rev C x (a # c)", "by (metis mrconcNone)"], ["", "lemma mreq_end2: \"applied_rule_rev C x b = applied_rule_rev C x c \\<Longrightarrow> \n     applied_rule_rev C x (a#b) = applied_rule_rev C x (a#c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. applied_rule_rev C x b = applied_rule_rev C x c \\<Longrightarrow>\n    applied_rule_rev C x (a # b) = applied_rule_rev C x (a # c)", "apply (case_tac \"applied_rule_rev C x b = None\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>applied_rule_rev C x b = applied_rule_rev C x c;\n     applied_rule_rev C x b = \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> applied_rule_rev C x (a # b) =\n                      applied_rule_rev C x (a # c)\n 2. \\<lbrakk>applied_rule_rev C x b = applied_rule_rev C x c;\n     applied_rule_rev C x b \\<noteq> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> applied_rule_rev C x (a # b) =\n                      applied_rule_rev C x (a # c)", "apply (auto intro: mreq_end mreq_endNone)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mreq_end3: \"applied_rule_rev C x p \\<noteq> None \\<Longrightarrow>\n                  applied_rule_rev C x (b # p) = applied_rule_rev C x (p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. applied_rule_rev C x p \\<noteq> \\<bottom> \\<Longrightarrow>\n    applied_rule_rev C x (b # p) = applied_rule_rev C x p", "by (auto simp: mrconc)"], ["", "lemma mrNoneMT: \"\\<lbrakk>r \\<in> set p; applied_rule_rev C x p = None\\<rbrakk> \\<Longrightarrow>\n                              x \\<notin> dom (C r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>r \\<in> set p; applied_rule_rev C x p = \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> x \\<notin> dom (C r)", "proof (induct p rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>r \\<in> set []; applied_rule_rev C x [] = \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> x \\<notin> dom (C r)\n 2. \\<And>xa xs.\n       \\<lbrakk>\\<lbrakk>r \\<in> set xs;\n                 applied_rule_rev C x xs = \\<bottom>\\<rbrakk>\n                \\<Longrightarrow> x \\<notin> dom (C r);\n        r \\<in> set (xs @ [xa]);\n        applied_rule_rev C x (xs @ [xa]) = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> dom (C r)", "case Nil"], ["proof (state)\nthis:\n  r \\<in> set []\n  applied_rule_rev C x [] = \\<bottom>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>r \\<in> set []; applied_rule_rev C x [] = \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> x \\<notin> dom (C r)\n 2. \\<And>xa xs.\n       \\<lbrakk>\\<lbrakk>r \\<in> set xs;\n                 applied_rule_rev C x xs = \\<bottom>\\<rbrakk>\n                \\<Longrightarrow> x \\<notin> dom (C r);\n        r \\<in> set (xs @ [xa]);\n        applied_rule_rev C x (xs @ [xa]) = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> dom (C r)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> dom (C r)", "using Nil"], ["proof (prove)\nusing this:\n  r \\<in> set []\n  applied_rule_rev C x [] = \\<bottom>\n\ngoal (1 subgoal):\n 1. x \\<notin> dom (C r)", "by (simp add: applied_rule_rev_def)"], ["proof (state)\nthis:\n  x \\<notin> dom (C r)\n\ngoal (1 subgoal):\n 1. \\<And>xa xs.\n       \\<lbrakk>\\<lbrakk>r \\<in> set xs;\n                 applied_rule_rev C x xs = \\<bottom>\\<rbrakk>\n                \\<Longrightarrow> x \\<notin> dom (C r);\n        r \\<in> set (xs @ [xa]);\n        applied_rule_rev C x (xs @ [xa]) = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> dom (C r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xs.\n       \\<lbrakk>\\<lbrakk>r \\<in> set xs;\n                 applied_rule_rev C x xs = \\<bottom>\\<rbrakk>\n                \\<Longrightarrow> x \\<notin> dom (C r);\n        r \\<in> set (xs @ [xa]);\n        applied_rule_rev C x (xs @ [xa]) = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> dom (C r)", "case (snoc y ys)"], ["proof (state)\nthis:\n  \\<lbrakk>r \\<in> set ys; applied_rule_rev C x ys = \\<bottom>\\<rbrakk>\n  \\<Longrightarrow> x \\<notin> dom (C r)\n  r \\<in> set (ys @ [y])\n  applied_rule_rev C x (ys @ [y]) = \\<bottom>\n\ngoal (1 subgoal):\n 1. \\<And>xa xs.\n       \\<lbrakk>\\<lbrakk>r \\<in> set xs;\n                 applied_rule_rev C x xs = \\<bottom>\\<rbrakk>\n                \\<Longrightarrow> x \\<notin> dom (C r);\n        r \\<in> set (xs @ [xa]);\n        applied_rule_rev C x (xs @ [xa]) = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> dom (C r)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> dom (C r)", "using snoc"], ["proof (prove)\nusing this:\n  \\<lbrakk>r \\<in> set ys; applied_rule_rev C x ys = \\<bottom>\\<rbrakk>\n  \\<Longrightarrow> x \\<notin> dom (C r)\n  r \\<in> set (ys @ [y])\n  applied_rule_rev C x (ys @ [y]) = \\<bottom>\n\ngoal (1 subgoal):\n 1. x \\<notin> dom (C r)", "proof (cases \"r \\<in> set ys\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>r \\<in> set ys;\n              applied_rule_rev C x ys = \\<bottom>\\<rbrakk>\n             \\<Longrightarrow> x \\<notin> dom (C r);\n     r \\<in> set (ys @ [y]); applied_rule_rev C x (ys @ [y]) = \\<bottom>;\n     r \\<in> set ys\\<rbrakk>\n    \\<Longrightarrow> x \\<notin> dom (C r)\n 2. \\<lbrakk>\\<lbrakk>r \\<in> set ys;\n              applied_rule_rev C x ys = \\<bottom>\\<rbrakk>\n             \\<Longrightarrow> x \\<notin> dom (C r);\n     r \\<in> set (ys @ [y]); applied_rule_rev C x (ys @ [y]) = \\<bottom>;\n     r \\<notin> set ys\\<rbrakk>\n    \\<Longrightarrow> x \\<notin> dom (C r)", "case True"], ["proof (state)\nthis:\n  r \\<in> set ys\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>r \\<in> set ys;\n              applied_rule_rev C x ys = \\<bottom>\\<rbrakk>\n             \\<Longrightarrow> x \\<notin> dom (C r);\n     r \\<in> set (ys @ [y]); applied_rule_rev C x (ys @ [y]) = \\<bottom>;\n     r \\<in> set ys\\<rbrakk>\n    \\<Longrightarrow> x \\<notin> dom (C r)\n 2. \\<lbrakk>\\<lbrakk>r \\<in> set ys;\n              applied_rule_rev C x ys = \\<bottom>\\<rbrakk>\n             \\<Longrightarrow> x \\<notin> dom (C r);\n     r \\<in> set (ys @ [y]); applied_rule_rev C x (ys @ [y]) = \\<bottom>;\n     r \\<notin> set ys\\<rbrakk>\n    \\<Longrightarrow> x \\<notin> dom (C r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> dom (C r)", "using snoc True"], ["proof (prove)\nusing this:\n  \\<lbrakk>r \\<in> set ys; applied_rule_rev C x ys = \\<bottom>\\<rbrakk>\n  \\<Longrightarrow> x \\<notin> dom (C r)\n  r \\<in> set (ys @ [y])\n  applied_rule_rev C x (ys @ [y]) = \\<bottom>\n  r \\<in> set ys\n\ngoal (1 subgoal):\n 1. x \\<notin> dom (C r)", "by (simp add: applied_rule_rev_def split: if_split_asm)"], ["proof (state)\nthis:\n  x \\<notin> dom (C r)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>r \\<in> set ys;\n              applied_rule_rev C x ys = \\<bottom>\\<rbrakk>\n             \\<Longrightarrow> x \\<notin> dom (C r);\n     r \\<in> set (ys @ [y]); applied_rule_rev C x (ys @ [y]) = \\<bottom>;\n     r \\<notin> set ys\\<rbrakk>\n    \\<Longrightarrow> x \\<notin> dom (C r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>r \\<in> set ys;\n              applied_rule_rev C x ys = \\<bottom>\\<rbrakk>\n             \\<Longrightarrow> x \\<notin> dom (C r);\n     r \\<in> set (ys @ [y]); applied_rule_rev C x (ys @ [y]) = \\<bottom>;\n     r \\<notin> set ys\\<rbrakk>\n    \\<Longrightarrow> x \\<notin> dom (C r)", "case False"], ["proof (state)\nthis:\n  r \\<notin> set ys\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>r \\<in> set ys;\n              applied_rule_rev C x ys = \\<bottom>\\<rbrakk>\n             \\<Longrightarrow> x \\<notin> dom (C r);\n     r \\<in> set (ys @ [y]); applied_rule_rev C x (ys @ [y]) = \\<bottom>;\n     r \\<notin> set ys\\<rbrakk>\n    \\<Longrightarrow> x \\<notin> dom (C r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> dom (C r)", "using snoc False"], ["proof (prove)\nusing this:\n  \\<lbrakk>r \\<in> set ys; applied_rule_rev C x ys = \\<bottom>\\<rbrakk>\n  \\<Longrightarrow> x \\<notin> dom (C r)\n  r \\<in> set (ys @ [y])\n  applied_rule_rev C x (ys @ [y]) = \\<bottom>\n  r \\<notin> set ys\n\ngoal (1 subgoal):\n 1. x \\<notin> dom (C r)", "by (simp add: applied_rule_rev_def split: if_split_asm)"], ["proof (state)\nthis:\n  x \\<notin> dom (C r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<notin> dom (C r)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Distributivity of the Transformation.\\<close>"], ["", "text\\<open>\n  The scenario is the following (can be applied iteratively):\n  \\begin{itemize}\n    \\item Two policies are combined using one of the parallel combinators\n    \\item (e.g. P = P1 P2) (At least) one of the constituent policies has\n    \\item a normalisation procedures, which as output produces a list of\n    \\item policies that are semantically equivalent to the original policy if\n    \\item combined from left to right using the override operator.\n  \\end{itemize}\n\\<close>"], ["", "text\\<open>\n  The following function is crucial for the distribution. Its arguments are a policy, a list\n  of policies, a parallel combinator, and a range and a domain coercion function. \n\\<close>"], ["", "fun prod_list :: \"('\\<alpha> \\<mapsto>'\\<beta>) \\<Rightarrow> (('\\<gamma> \\<mapsto>'\\<delta>) list) \\<Rightarrow> \n                  (('\\<alpha> \\<mapsto>'\\<beta>) \\<Rightarrow> ('\\<gamma> \\<mapsto>'\\<delta>) \\<Rightarrow> (('\\<alpha> \\<times> '\\<gamma>) \\<mapsto> ('\\<beta> \\<times> '\\<delta>))) \\<Rightarrow>\n                  (('\\<beta> \\<times> '\\<delta>) \\<Rightarrow> 'y) \\<Rightarrow> ('x \\<Rightarrow> ('\\<alpha> \\<times> '\\<gamma>)) \\<Rightarrow>  \n                  (('x \\<mapsto> 'y) list)\"  (infixr \"\\<Otimes>\\<^sub>L\" 54) where\n  \"prod_list x (y#ys) par_comb ran_adapt dom_adapt = \n  ((ran_adapt o_f ((par_comb x y) o dom_adapt))#(prod_list x ys par_comb ran_adapt dom_adapt))\"\n| \"prod_list x [] par_comb ran_adapt dom_adapt = []\""], ["", "text\\<open>\n  An instance, as usual there are four of them. \n\\<close>"], ["", "definition prod_2_list :: \"[('\\<alpha> \\<mapsto>'\\<beta>), (('\\<gamma> \\<mapsto>'\\<delta>) list)] \\<Rightarrow> \n                  (('\\<beta> \\<times> '\\<delta>) \\<Rightarrow> 'y) \\<Rightarrow> ('x \\<Rightarrow> ('\\<alpha> \\<times> '\\<gamma>)) \\<Rightarrow> \n                  (('x \\<mapsto> 'y) list)\" (infixr \"\\<Otimes>\\<^sub>2\\<^sub>L\" 55) where \n  \"x \\<Otimes>\\<^sub>2\\<^sub>L y =  (\\<lambda> d r. (x \\<Otimes>\\<^sub>L y) (\\<Otimes>\\<^sub>2) d r)\""], ["", "lemma list2listNMT:  \"x \\<noteq> [] \\<Longrightarrow> map sem x \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> [] \\<Longrightarrow> map sem x \\<noteq> []", "apply (case_tac x)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<noteq> []; x = []\\<rbrakk>\n    \\<Longrightarrow> map sem x \\<noteq> []\n 2. \\<And>a list.\n       \\<lbrakk>x \\<noteq> []; x = a # list\\<rbrakk>\n       \\<Longrightarrow> map sem x \\<noteq> []", "apply (simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma two_conc: \"(prod_list x (y#ys) p r d) = ((r o_f ((p x y) o d))#(prod_list x ys p r d))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<Otimes>\\<^sub>L y # ys) p r d =\n    (r o\\<^sub>f (p x y \\<circ> d)) # (x \\<Otimes>\\<^sub>L ys) p r d", "by simp"], ["", "text\\<open>\n  The following two invariants establish if the law of distributivity holds for a combinator\n  and if an operator is strict regarding undefinedness. \n\\<close>"], ["", "definition is_distr where\n \"is_distr p = (\\<lambda> g f. (\\<forall> N P1 P2. ((g o_f ((p N (P1 \\<Oplus> P2)) o f)) = \n               ((g o_f ((p N P1) o f)) \\<Oplus> (g o_f ((p N P2)  o f))))))\""], ["", "definition is_strict where\n \"is_strict p = (\\<lambda> r d. \\<forall> P1. (r o_f (p P1 \\<emptyset> \\<circ> d)) = \\<emptyset>)\""], ["", "lemma is_distr_orD: \"is_distr (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) d r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_distr (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) d r", "apply (simp add: is_distr_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>N P1 P2.\n       d o\\<^sub>f\n       (N \\<Otimes>\\<^sub>\\<or>\\<^sub>D P1 \\<Oplus> P2 \\<circ> r) =\n       (d o\\<^sub>f (N \\<Otimes>\\<^sub>\\<or>\\<^sub>D P1 \\<circ> r)) \\<Oplus>\n       (d o\\<^sub>f (N \\<Otimes>\\<^sub>\\<or>\\<^sub>D P2 \\<circ> r))", "apply (rule allI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>N P1 P2.\n       d o\\<^sub>f\n       (N \\<Otimes>\\<^sub>\\<or>\\<^sub>D P1 \\<Oplus> P2 \\<circ> r) =\n       (d o\\<^sub>f (N \\<Otimes>\\<^sub>\\<or>\\<^sub>D P1 \\<circ> r)) \\<Oplus>\n       (d o\\<^sub>f (N \\<Otimes>\\<^sub>\\<or>\\<^sub>D P2 \\<circ> r))", "apply (rule distr_orD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>N P1 P2. P1 \\<Oplus> P2 = P1 \\<Oplus> P2", "apply (simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma is_strict_orD: \"is_strict (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) d r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_strict (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) d r", "apply (simp add: is_strict_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. d o\\<^sub>f (\\<emptyset> \\<circ> r) = \\<emptyset>", "apply (simp add: policy_range_comp_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma is_distr_2: \"is_distr (\\<Otimes>\\<^sub>2) d r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_distr (\\<Otimes>\\<^sub>2) d r", "apply (simp add: is_distr_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>N P1 P2.\n       d o\\<^sub>f (N \\<Otimes>\\<^sub>2 P1 \\<Oplus> P2 \\<circ> r) =\n       (d o\\<^sub>f (N \\<Otimes>\\<^sub>2 P1 \\<circ> r)) \\<Oplus>\n       (d o\\<^sub>f (N \\<Otimes>\\<^sub>2 P2 \\<circ> r))", "apply (rule allI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>N P1 P2.\n       d o\\<^sub>f (N \\<Otimes>\\<^sub>2 P1 \\<Oplus> P2 \\<circ> r) =\n       (d o\\<^sub>f (N \\<Otimes>\\<^sub>2 P1 \\<circ> r)) \\<Oplus>\n       (d o\\<^sub>f (N \\<Otimes>\\<^sub>2 P2 \\<circ> r))", "apply (rule distr_or2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>N P1 P2. P1 \\<Oplus> P2 = P1 \\<Oplus> P2", "by simp"], ["", "lemma is_strict_2: \"is_strict (\\<Otimes>\\<^sub>2) d r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_strict (\\<Otimes>\\<^sub>2) d r", "apply (simp only: is_strict_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>P1.\n       d o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 \\<emptyset> \\<circ> r) =\n       \\<emptyset>", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. d o\\<^sub>f (\\<emptyset> \\<circ> r) = \\<emptyset>", "apply (simp add: policy_range_comp_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma domStart: \"t \\<in> dom p1 \\<Longrightarrow> (p1 \\<Oplus> p2) t = p1 t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> dom p1 \\<Longrightarrow> (p1 \\<Oplus> p2) t = p1 t", "apply (simp add: map_add_dom_app_simps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma notDom: \"x \\<in> dom A \\<Longrightarrow> \\<not> A x = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> dom A \\<Longrightarrow> A x \\<noteq> \\<bottom>", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text\\<open>\n  The following theorems are crucial: they establish the correctness of the distribution.\n\\<close>"], ["", "lemma Norm_Distr_1:  \"((r o_f (((\\<Otimes>\\<^sub>1) P1 (list2policy P2)) o d)) x = \n                                                   ((list2policy ((P1 \\<Otimes>\\<^sub>L P2) (\\<Otimes>\\<^sub>1) r d)) x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy P2 \\<circ> d)) x =\n    list2policy ((P1 \\<Otimes>\\<^sub>L P2) (\\<Otimes>\\<^sub>1) r d) x", "proof (induct P2)"], ["proof (state)\ngoal (2 subgoals):\n 1. (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy [] \\<circ> d)) x =\n    list2policy ((P1 \\<Otimes>\\<^sub>L []) (\\<Otimes>\\<^sub>1) r d) x\n 2. \\<And>a P2.\n       (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy P2 \\<circ> d)) x =\n       list2policy ((P1 \\<Otimes>\\<^sub>L P2) (\\<Otimes>\\<^sub>1) r d)\n        x \\<Longrightarrow>\n       (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy (a # P2) \\<circ> d))\n        x =\n       list2policy ((P1 \\<Otimes>\\<^sub>L a # P2) (\\<Otimes>\\<^sub>1) r d) x", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy [] \\<circ> d)) x =\n    list2policy ((P1 \\<Otimes>\\<^sub>L []) (\\<Otimes>\\<^sub>1) r d) x\n 2. \\<And>a P2.\n       (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy P2 \\<circ> d)) x =\n       list2policy ((P1 \\<Otimes>\\<^sub>L P2) (\\<Otimes>\\<^sub>1) r d)\n        x \\<Longrightarrow>\n       (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy (a # P2) \\<circ> d))\n        x =\n       list2policy ((P1 \\<Otimes>\\<^sub>L a # P2) (\\<Otimes>\\<^sub>1) r d) x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy [] \\<circ> d)) x =\n    list2policy ((P1 \\<Otimes>\\<^sub>L []) (\\<Otimes>\\<^sub>1) r d) x", "by (simp add: policy_range_comp_def  list2policy_def)"], ["proof (state)\nthis:\n  (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy [] \\<circ> d)) x =\n  list2policy ((P1 \\<Otimes>\\<^sub>L []) (\\<Otimes>\\<^sub>1) r d) x\n\ngoal (1 subgoal):\n 1. \\<And>a P2.\n       (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy P2 \\<circ> d)) x =\n       list2policy ((P1 \\<Otimes>\\<^sub>L P2) (\\<Otimes>\\<^sub>1) r d)\n        x \\<Longrightarrow>\n       (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy (a # P2) \\<circ> d))\n        x =\n       list2policy ((P1 \\<Otimes>\\<^sub>L a # P2) (\\<Otimes>\\<^sub>1) r d) x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a P2.\n       (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy P2 \\<circ> d)) x =\n       list2policy ((P1 \\<Otimes>\\<^sub>L P2) (\\<Otimes>\\<^sub>1) r d)\n        x \\<Longrightarrow>\n       (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy (a # P2) \\<circ> d))\n        x =\n       list2policy ((P1 \\<Otimes>\\<^sub>L a # P2) (\\<Otimes>\\<^sub>1) r d) x", "case (Cons p ps)"], ["proof (state)\nthis:\n  (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy ps \\<circ> d)) x =\n  list2policy ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>1) r d) x\n\ngoal (1 subgoal):\n 1. \\<And>a P2.\n       (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy P2 \\<circ> d)) x =\n       list2policy ((P1 \\<Otimes>\\<^sub>L P2) (\\<Otimes>\\<^sub>1) r d)\n        x \\<Longrightarrow>\n       (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy (a # P2) \\<circ> d))\n        x =\n       list2policy ((P1 \\<Otimes>\\<^sub>L a # P2) (\\<Otimes>\\<^sub>1) r d) x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy (p # ps) \\<circ> d)) x =\n    list2policy ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>1) r d) x", "using Cons"], ["proof (prove)\nusing this:\n  (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy ps \\<circ> d)) x =\n  list2policy ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>1) r d) x\n\ngoal (1 subgoal):\n 1. (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy (p # ps) \\<circ> d)) x =\n    list2policy ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>1) r d) x", "proof (cases \"x \\<in> dom (r o_f ((P1 \\<Otimes>\\<^sub>1 p) \\<circ> d))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>(r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy ps \\<circ> d))\n              x =\n             list2policy ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>1) r d)\n              x;\n     x \\<in> dom (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 p \\<circ> d))\\<rbrakk>\n    \\<Longrightarrow> (r o\\<^sub>f\n                       (P1 \\<Otimes>\\<^sub>1 list2policy (p # ps) \\<circ>\n                        d))\n                       x =\n                      list2policy\n                       ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>1) r\n                         d)\n                       x\n 2. \\<lbrakk>(r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy ps \\<circ> d))\n              x =\n             list2policy ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>1) r d)\n              x;\n     x \\<notin> dom (r o\\<^sub>f\n                     (P1 \\<Otimes>\\<^sub>1 p \\<circ> d))\\<rbrakk>\n    \\<Longrightarrow> (r o\\<^sub>f\n                       (P1 \\<Otimes>\\<^sub>1 list2policy (p # ps) \\<circ>\n                        d))\n                       x =\n                      list2policy\n                       ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>1) r\n                         d)\n                       x", "case True"], ["proof (state)\nthis:\n  x \\<in> dom (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 p \\<circ> d))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy ps \\<circ> d))\n              x =\n             list2policy ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>1) r d)\n              x;\n     x \\<in> dom (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 p \\<circ> d))\\<rbrakk>\n    \\<Longrightarrow> (r o\\<^sub>f\n                       (P1 \\<Otimes>\\<^sub>1 list2policy (p # ps) \\<circ>\n                        d))\n                       x =\n                      list2policy\n                       ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>1) r\n                         d)\n                       x\n 2. \\<lbrakk>(r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy ps \\<circ> d))\n              x =\n             list2policy ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>1) r d)\n              x;\n     x \\<notin> dom (r o\\<^sub>f\n                     (P1 \\<Otimes>\\<^sub>1 p \\<circ> d))\\<rbrakk>\n    \\<Longrightarrow> (r o\\<^sub>f\n                       (P1 \\<Otimes>\\<^sub>1 list2policy (p # ps) \\<circ>\n                        d))\n                       x =\n                      list2policy\n                       ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>1) r\n                         d)\n                       x", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy (p # ps) \\<circ> d)) x =\n    list2policy ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>1) r d) x", "using True"], ["proof (prove)\nusing this:\n  x \\<in> dom (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 p \\<circ> d))\n\ngoal (1 subgoal):\n 1. (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy (p # ps) \\<circ> d)) x =\n    list2policy ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>1) r d) x", "by (auto simp: list2policy_def policy_range_comp_def  prod_1_def \n          split: option.splits decision.splits prod.splits)"], ["proof (state)\nthis:\n  (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy (p # ps) \\<circ> d)) x =\n  list2policy ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>1) r d) x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy ps \\<circ> d))\n              x =\n             list2policy ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>1) r d)\n              x;\n     x \\<notin> dom (r o\\<^sub>f\n                     (P1 \\<Otimes>\\<^sub>1 p \\<circ> d))\\<rbrakk>\n    \\<Longrightarrow> (r o\\<^sub>f\n                       (P1 \\<Otimes>\\<^sub>1 list2policy (p # ps) \\<circ>\n                        d))\n                       x =\n                      list2policy\n                       ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>1) r\n                         d)\n                       x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>(r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy ps \\<circ> d))\n              x =\n             list2policy ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>1) r d)\n              x;\n     x \\<notin> dom (r o\\<^sub>f\n                     (P1 \\<Otimes>\\<^sub>1 p \\<circ> d))\\<rbrakk>\n    \\<Longrightarrow> (r o\\<^sub>f\n                       (P1 \\<Otimes>\\<^sub>1 list2policy (p # ps) \\<circ>\n                        d))\n                       x =\n                      list2policy\n                       ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>1) r\n                         d)\n                       x", "case False"], ["proof (state)\nthis:\n  x \\<notin> dom (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 p \\<circ> d))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy ps \\<circ> d))\n              x =\n             list2policy ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>1) r d)\n              x;\n     x \\<notin> dom (r o\\<^sub>f\n                     (P1 \\<Otimes>\\<^sub>1 p \\<circ> d))\\<rbrakk>\n    \\<Longrightarrow> (r o\\<^sub>f\n                       (P1 \\<Otimes>\\<^sub>1 list2policy (p # ps) \\<circ>\n                        d))\n                       x =\n                      list2policy\n                       ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>1) r\n                         d)\n                       x", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy (p # ps) \\<circ> d)) x =\n    list2policy ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>1) r d) x", "using Cons False"], ["proof (prove)\nusing this:\n  (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy ps \\<circ> d)) x =\n  list2policy ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>1) r d) x\n  x \\<notin> dom (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 p \\<circ> d))\n\ngoal (1 subgoal):\n 1. (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy (p # ps) \\<circ> d)) x =\n    list2policy ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>1) r d) x", "by (auto simp: list2policy_def policy_range_comp_def  map_add_dom_app_simps(3) prod_1_def\n          split: option.splits decision.splits prod.splits)"], ["proof (state)\nthis:\n  (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy (p # ps) \\<circ> d)) x =\n  list2policy ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>1) r d) x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>1 list2policy (p # ps) \\<circ> d)) x =\n  list2policy ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>1) r d) x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Norm_Distr_2: \"((r o_f (((\\<Otimes>\\<^sub>2) P1 (list2policy P2)) o d)) x = \n                               ((list2policy ((P1 \\<Otimes>\\<^sub>L P2) (\\<Otimes>\\<^sub>2) r d)) x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy P2 \\<circ> d)) x =\n    list2policy ((P1 \\<Otimes>\\<^sub>L P2) (\\<Otimes>\\<^sub>2) r d) x", "proof (induct P2)"], ["proof (state)\ngoal (2 subgoals):\n 1. (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy [] \\<circ> d)) x =\n    list2policy ((P1 \\<Otimes>\\<^sub>L []) (\\<Otimes>\\<^sub>2) r d) x\n 2. \\<And>a P2.\n       (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy P2 \\<circ> d)) x =\n       list2policy ((P1 \\<Otimes>\\<^sub>L P2) (\\<Otimes>\\<^sub>2) r d)\n        x \\<Longrightarrow>\n       (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy (a # P2) \\<circ> d))\n        x =\n       list2policy ((P1 \\<Otimes>\\<^sub>L a # P2) (\\<Otimes>\\<^sub>2) r d) x", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy [] \\<circ> d)) x =\n    list2policy ((P1 \\<Otimes>\\<^sub>L []) (\\<Otimes>\\<^sub>2) r d) x\n 2. \\<And>a P2.\n       (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy P2 \\<circ> d)) x =\n       list2policy ((P1 \\<Otimes>\\<^sub>L P2) (\\<Otimes>\\<^sub>2) r d)\n        x \\<Longrightarrow>\n       (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy (a # P2) \\<circ> d))\n        x =\n       list2policy ((P1 \\<Otimes>\\<^sub>L a # P2) (\\<Otimes>\\<^sub>2) r d) x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy [] \\<circ> d)) x =\n    list2policy ((P1 \\<Otimes>\\<^sub>L []) (\\<Otimes>\\<^sub>2) r d) x", "by (simp add: policy_range_comp_def  list2policy_def)"], ["proof (state)\nthis:\n  (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy [] \\<circ> d)) x =\n  list2policy ((P1 \\<Otimes>\\<^sub>L []) (\\<Otimes>\\<^sub>2) r d) x\n\ngoal (1 subgoal):\n 1. \\<And>a P2.\n       (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy P2 \\<circ> d)) x =\n       list2policy ((P1 \\<Otimes>\\<^sub>L P2) (\\<Otimes>\\<^sub>2) r d)\n        x \\<Longrightarrow>\n       (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy (a # P2) \\<circ> d))\n        x =\n       list2policy ((P1 \\<Otimes>\\<^sub>L a # P2) (\\<Otimes>\\<^sub>2) r d) x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a P2.\n       (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy P2 \\<circ> d)) x =\n       list2policy ((P1 \\<Otimes>\\<^sub>L P2) (\\<Otimes>\\<^sub>2) r d)\n        x \\<Longrightarrow>\n       (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy (a # P2) \\<circ> d))\n        x =\n       list2policy ((P1 \\<Otimes>\\<^sub>L a # P2) (\\<Otimes>\\<^sub>2) r d) x", "case (Cons p ps)"], ["proof (state)\nthis:\n  (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy ps \\<circ> d)) x =\n  list2policy ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>2) r d) x\n\ngoal (1 subgoal):\n 1. \\<And>a P2.\n       (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy P2 \\<circ> d)) x =\n       list2policy ((P1 \\<Otimes>\\<^sub>L P2) (\\<Otimes>\\<^sub>2) r d)\n        x \\<Longrightarrow>\n       (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy (a # P2) \\<circ> d))\n        x =\n       list2policy ((P1 \\<Otimes>\\<^sub>L a # P2) (\\<Otimes>\\<^sub>2) r d) x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy (p # ps) \\<circ> d)) x =\n    list2policy ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>2) r d) x", "using Cons"], ["proof (prove)\nusing this:\n  (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy ps \\<circ> d)) x =\n  list2policy ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>2) r d) x\n\ngoal (1 subgoal):\n 1. (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy (p # ps) \\<circ> d)) x =\n    list2policy ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>2) r d) x", "proof (cases \"x \\<in> dom (r o_f ((P1 \\<Otimes>\\<^sub>2 p) \\<circ> d))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>(r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy ps \\<circ> d))\n              x =\n             list2policy ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>2) r d)\n              x;\n     x \\<in> dom (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 p \\<circ> d))\\<rbrakk>\n    \\<Longrightarrow> (r o\\<^sub>f\n                       (P1 \\<Otimes>\\<^sub>2 list2policy (p # ps) \\<circ>\n                        d))\n                       x =\n                      list2policy\n                       ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>2) r\n                         d)\n                       x\n 2. \\<lbrakk>(r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy ps \\<circ> d))\n              x =\n             list2policy ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>2) r d)\n              x;\n     x \\<notin> dom (r o\\<^sub>f\n                     (P1 \\<Otimes>\\<^sub>2 p \\<circ> d))\\<rbrakk>\n    \\<Longrightarrow> (r o\\<^sub>f\n                       (P1 \\<Otimes>\\<^sub>2 list2policy (p # ps) \\<circ>\n                        d))\n                       x =\n                      list2policy\n                       ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>2) r\n                         d)\n                       x", "case True"], ["proof (state)\nthis:\n  x \\<in> dom (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 p \\<circ> d))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy ps \\<circ> d))\n              x =\n             list2policy ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>2) r d)\n              x;\n     x \\<in> dom (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 p \\<circ> d))\\<rbrakk>\n    \\<Longrightarrow> (r o\\<^sub>f\n                       (P1 \\<Otimes>\\<^sub>2 list2policy (p # ps) \\<circ>\n                        d))\n                       x =\n                      list2policy\n                       ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>2) r\n                         d)\n                       x\n 2. \\<lbrakk>(r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy ps \\<circ> d))\n              x =\n             list2policy ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>2) r d)\n              x;\n     x \\<notin> dom (r o\\<^sub>f\n                     (P1 \\<Otimes>\\<^sub>2 p \\<circ> d))\\<rbrakk>\n    \\<Longrightarrow> (r o\\<^sub>f\n                       (P1 \\<Otimes>\\<^sub>2 list2policy (p # ps) \\<circ>\n                        d))\n                       x =\n                      list2policy\n                       ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>2) r\n                         d)\n                       x", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy (p # ps) \\<circ> d)) x =\n    list2policy ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>2) r d) x", "using True"], ["proof (prove)\nusing this:\n  x \\<in> dom (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 p \\<circ> d))\n\ngoal (1 subgoal):\n 1. (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy (p # ps) \\<circ> d)) x =\n    list2policy ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>2) r d) x", "by (auto simp: list2policy_def prod_2_def policy_range_comp_def \n          split: option.splits decision.splits prod.splits)"], ["proof (state)\nthis:\n  (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy (p # ps) \\<circ> d)) x =\n  list2policy ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>2) r d) x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy ps \\<circ> d))\n              x =\n             list2policy ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>2) r d)\n              x;\n     x \\<notin> dom (r o\\<^sub>f\n                     (P1 \\<Otimes>\\<^sub>2 p \\<circ> d))\\<rbrakk>\n    \\<Longrightarrow> (r o\\<^sub>f\n                       (P1 \\<Otimes>\\<^sub>2 list2policy (p # ps) \\<circ>\n                        d))\n                       x =\n                      list2policy\n                       ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>2) r\n                         d)\n                       x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>(r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy ps \\<circ> d))\n              x =\n             list2policy ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>2) r d)\n              x;\n     x \\<notin> dom (r o\\<^sub>f\n                     (P1 \\<Otimes>\\<^sub>2 p \\<circ> d))\\<rbrakk>\n    \\<Longrightarrow> (r o\\<^sub>f\n                       (P1 \\<Otimes>\\<^sub>2 list2policy (p # ps) \\<circ>\n                        d))\n                       x =\n                      list2policy\n                       ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>2) r\n                         d)\n                       x", "case False"], ["proof (state)\nthis:\n  x \\<notin> dom (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 p \\<circ> d))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy ps \\<circ> d))\n              x =\n             list2policy ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>2) r d)\n              x;\n     x \\<notin> dom (r o\\<^sub>f\n                     (P1 \\<Otimes>\\<^sub>2 p \\<circ> d))\\<rbrakk>\n    \\<Longrightarrow> (r o\\<^sub>f\n                       (P1 \\<Otimes>\\<^sub>2 list2policy (p # ps) \\<circ>\n                        d))\n                       x =\n                      list2policy\n                       ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>2) r\n                         d)\n                       x", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy (p # ps) \\<circ> d)) x =\n    list2policy ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>2) r d) x", "using Cons False"], ["proof (prove)\nusing this:\n  (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy ps \\<circ> d)) x =\n  list2policy ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>2) r d) x\n  x \\<notin> dom (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 p \\<circ> d))\n\ngoal (1 subgoal):\n 1. (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy (p # ps) \\<circ> d)) x =\n    list2policy ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>2) r d) x", "by (auto simp:  policy_range_comp_def  list2policy_def map_add_dom_app_simps(3) prod_2_def\n          split: option.splits decision.splits prod.splits)"], ["proof (state)\nthis:\n  (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy (p # ps) \\<circ> d)) x =\n  list2policy ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>2) r d) x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>2 list2policy (p # ps) \\<circ> d)) x =\n  list2policy ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>2) r d) x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Norm_Distr_A: \"((r o_f (((\\<Otimes>\\<^sub>\\<or>\\<^sub>A) P1 (list2policy P2)) o d)) x = \n                                                 ((list2policy ((P1 \\<Otimes>\\<^sub>L P2) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d)) x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (r o\\<^sub>f\n     (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy P2 \\<circ> d))\n     x =\n    list2policy\n     ((P1 \\<Otimes>\\<^sub>L P2) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d) x", "proof (induct P2)"], ["proof (state)\ngoal (2 subgoals):\n 1. (r o\\<^sub>f\n     (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy [] \\<circ> d))\n     x =\n    list2policy\n     ((P1 \\<Otimes>\\<^sub>L []) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d) x\n 2. \\<And>a P2.\n       (r o\\<^sub>f\n        (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy P2 \\<circ> d))\n        x =\n       list2policy\n        ((P1 \\<Otimes>\\<^sub>L P2) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d)\n        x \\<Longrightarrow>\n       (r o\\<^sub>f\n        (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy (a # P2) \\<circ> d))\n        x =\n       list2policy\n        ((P1 \\<Otimes>\\<^sub>L a # P2) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d)\n        x", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. (r o\\<^sub>f\n     (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy [] \\<circ> d))\n     x =\n    list2policy\n     ((P1 \\<Otimes>\\<^sub>L []) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d) x\n 2. \\<And>a P2.\n       (r o\\<^sub>f\n        (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy P2 \\<circ> d))\n        x =\n       list2policy\n        ((P1 \\<Otimes>\\<^sub>L P2) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d)\n        x \\<Longrightarrow>\n       (r o\\<^sub>f\n        (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy (a # P2) \\<circ> d))\n        x =\n       list2policy\n        ((P1 \\<Otimes>\\<^sub>L a # P2) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d)\n        x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r o\\<^sub>f\n     (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy [] \\<circ> d))\n     x =\n    list2policy\n     ((P1 \\<Otimes>\\<^sub>L []) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d) x", "by (simp add: policy_range_comp_def  list2policy_def)"], ["proof (state)\nthis:\n  (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy [] \\<circ> d))\n   x =\n  list2policy\n   ((P1 \\<Otimes>\\<^sub>L []) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d) x\n\ngoal (1 subgoal):\n 1. \\<And>a P2.\n       (r o\\<^sub>f\n        (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy P2 \\<circ> d))\n        x =\n       list2policy\n        ((P1 \\<Otimes>\\<^sub>L P2) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d)\n        x \\<Longrightarrow>\n       (r o\\<^sub>f\n        (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy (a # P2) \\<circ> d))\n        x =\n       list2policy\n        ((P1 \\<Otimes>\\<^sub>L a # P2) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d)\n        x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a P2.\n       (r o\\<^sub>f\n        (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy P2 \\<circ> d))\n        x =\n       list2policy\n        ((P1 \\<Otimes>\\<^sub>L P2) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d)\n        x \\<Longrightarrow>\n       (r o\\<^sub>f\n        (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy (a # P2) \\<circ> d))\n        x =\n       list2policy\n        ((P1 \\<Otimes>\\<^sub>L a # P2) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d)\n        x", "case (Cons p ps)"], ["proof (state)\nthis:\n  (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy ps \\<circ> d))\n   x =\n  list2policy\n   ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d) x\n\ngoal (1 subgoal):\n 1. \\<And>a P2.\n       (r o\\<^sub>f\n        (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy P2 \\<circ> d))\n        x =\n       list2policy\n        ((P1 \\<Otimes>\\<^sub>L P2) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d)\n        x \\<Longrightarrow>\n       (r o\\<^sub>f\n        (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy (a # P2) \\<circ> d))\n        x =\n       list2policy\n        ((P1 \\<Otimes>\\<^sub>L a # P2) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d)\n        x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r o\\<^sub>f\n     (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy (p # ps) \\<circ> d))\n     x =\n    list2policy\n     ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d) x", "using Cons"], ["proof (prove)\nusing this:\n  (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy ps \\<circ> d))\n   x =\n  list2policy\n   ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d) x\n\ngoal (1 subgoal):\n 1. (r o\\<^sub>f\n     (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy (p # ps) \\<circ> d))\n     x =\n    list2policy\n     ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d) x", "proof (cases \"x \\<in> dom (r o_f ((P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A p) \\<circ> d))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>(r o\\<^sub>f\n              (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy ps \\<circ> d))\n              x =\n             list2policy\n              ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r\n                d)\n              x;\n     x \\<in> dom (r o\\<^sub>f\n                  (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A p \\<circ> d))\\<rbrakk>\n    \\<Longrightarrow> (r o\\<^sub>f\n                       (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A\n                        list2policy (p # ps) \\<circ>\n                        d))\n                       x =\n                      list2policy\n                       ((P1 \\<Otimes>\\<^sub>L p # ps)\n                         (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d)\n                       x\n 2. \\<lbrakk>(r o\\<^sub>f\n              (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy ps \\<circ> d))\n              x =\n             list2policy\n              ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r\n                d)\n              x;\n     x \\<notin> dom (r o\\<^sub>f\n                     (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A p \\<circ>\n                      d))\\<rbrakk>\n    \\<Longrightarrow> (r o\\<^sub>f\n                       (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A\n                        list2policy (p # ps) \\<circ>\n                        d))\n                       x =\n                      list2policy\n                       ((P1 \\<Otimes>\\<^sub>L p # ps)\n                         (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d)\n                       x", "case True"], ["proof (state)\nthis:\n  x \\<in> dom (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A p \\<circ> d))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(r o\\<^sub>f\n              (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy ps \\<circ> d))\n              x =\n             list2policy\n              ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r\n                d)\n              x;\n     x \\<in> dom (r o\\<^sub>f\n                  (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A p \\<circ> d))\\<rbrakk>\n    \\<Longrightarrow> (r o\\<^sub>f\n                       (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A\n                        list2policy (p # ps) \\<circ>\n                        d))\n                       x =\n                      list2policy\n                       ((P1 \\<Otimes>\\<^sub>L p # ps)\n                         (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d)\n                       x\n 2. \\<lbrakk>(r o\\<^sub>f\n              (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy ps \\<circ> d))\n              x =\n             list2policy\n              ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r\n                d)\n              x;\n     x \\<notin> dom (r o\\<^sub>f\n                     (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A p \\<circ>\n                      d))\\<rbrakk>\n    \\<Longrightarrow> (r o\\<^sub>f\n                       (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A\n                        list2policy (p # ps) \\<circ>\n                        d))\n                       x =\n                      list2policy\n                       ((P1 \\<Otimes>\\<^sub>L p # ps)\n                         (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d)\n                       x", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r o\\<^sub>f\n     (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy (p # ps) \\<circ> d))\n     x =\n    list2policy\n     ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d) x", "using True"], ["proof (prove)\nusing this:\n  x \\<in> dom (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A p \\<circ> d))\n\ngoal (1 subgoal):\n 1. (r o\\<^sub>f\n     (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy (p # ps) \\<circ> d))\n     x =\n    list2policy\n     ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d) x", "by (auto simp: policy_range_comp_def  list2policy_def prod_orA_def\n          split: option.splits decision.splits prod.splits)"], ["proof (state)\nthis:\n  (r o\\<^sub>f\n   (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy (p # ps) \\<circ> d))\n   x =\n  list2policy\n   ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d) x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(r o\\<^sub>f\n              (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy ps \\<circ> d))\n              x =\n             list2policy\n              ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r\n                d)\n              x;\n     x \\<notin> dom (r o\\<^sub>f\n                     (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A p \\<circ>\n                      d))\\<rbrakk>\n    \\<Longrightarrow> (r o\\<^sub>f\n                       (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A\n                        list2policy (p # ps) \\<circ>\n                        d))\n                       x =\n                      list2policy\n                       ((P1 \\<Otimes>\\<^sub>L p # ps)\n                         (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d)\n                       x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>(r o\\<^sub>f\n              (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy ps \\<circ> d))\n              x =\n             list2policy\n              ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r\n                d)\n              x;\n     x \\<notin> dom (r o\\<^sub>f\n                     (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A p \\<circ>\n                      d))\\<rbrakk>\n    \\<Longrightarrow> (r o\\<^sub>f\n                       (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A\n                        list2policy (p # ps) \\<circ>\n                        d))\n                       x =\n                      list2policy\n                       ((P1 \\<Otimes>\\<^sub>L p # ps)\n                         (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d)\n                       x", "case False"], ["proof (state)\nthis:\n  x \\<notin> dom (r o\\<^sub>f\n                  (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A p \\<circ> d))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(r o\\<^sub>f\n              (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy ps \\<circ> d))\n              x =\n             list2policy\n              ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r\n                d)\n              x;\n     x \\<notin> dom (r o\\<^sub>f\n                     (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A p \\<circ>\n                      d))\\<rbrakk>\n    \\<Longrightarrow> (r o\\<^sub>f\n                       (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A\n                        list2policy (p # ps) \\<circ>\n                        d))\n                       x =\n                      list2policy\n                       ((P1 \\<Otimes>\\<^sub>L p # ps)\n                         (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d)\n                       x", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r o\\<^sub>f\n     (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy (p # ps) \\<circ> d))\n     x =\n    list2policy\n     ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d) x", "using Cons False"], ["proof (prove)\nusing this:\n  (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy ps \\<circ> d))\n   x =\n  list2policy\n   ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d) x\n  x \\<notin> dom (r o\\<^sub>f\n                  (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A p \\<circ> d))\n\ngoal (1 subgoal):\n 1. (r o\\<^sub>f\n     (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy (p # ps) \\<circ> d))\n     x =\n    list2policy\n     ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d) x", "by (auto simp: policy_range_comp_def  list2policy_def map_add_dom_app_simps(3) prod_orA_def\n          split: option.splits decision.splits prod.splits)"], ["proof (state)\nthis:\n  (r o\\<^sub>f\n   (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy (p # ps) \\<circ> d))\n   x =\n  list2policy\n   ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d) x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (r o\\<^sub>f\n   (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>A list2policy (p # ps) \\<circ> d))\n   x =\n  list2policy\n   ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>A) r d) x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Norm_Distr_D: \"((r o_f (((\\<Otimes>\\<^sub>\\<or>\\<^sub>D) P1 (list2policy P2)) o d)) x = \n                                                  ((list2policy ((P1 \\<Otimes>\\<^sub>L P2) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d)) x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (r o\\<^sub>f\n     (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy P2 \\<circ> d))\n     x =\n    list2policy\n     ((P1 \\<Otimes>\\<^sub>L P2) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d) x", "proof (induct P2)"], ["proof (state)\ngoal (2 subgoals):\n 1. (r o\\<^sub>f\n     (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy [] \\<circ> d))\n     x =\n    list2policy\n     ((P1 \\<Otimes>\\<^sub>L []) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d) x\n 2. \\<And>a P2.\n       (r o\\<^sub>f\n        (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy P2 \\<circ> d))\n        x =\n       list2policy\n        ((P1 \\<Otimes>\\<^sub>L P2) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d)\n        x \\<Longrightarrow>\n       (r o\\<^sub>f\n        (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy (a # P2) \\<circ> d))\n        x =\n       list2policy\n        ((P1 \\<Otimes>\\<^sub>L a # P2) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d)\n        x", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. (r o\\<^sub>f\n     (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy [] \\<circ> d))\n     x =\n    list2policy\n     ((P1 \\<Otimes>\\<^sub>L []) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d) x\n 2. \\<And>a P2.\n       (r o\\<^sub>f\n        (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy P2 \\<circ> d))\n        x =\n       list2policy\n        ((P1 \\<Otimes>\\<^sub>L P2) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d)\n        x \\<Longrightarrow>\n       (r o\\<^sub>f\n        (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy (a # P2) \\<circ> d))\n        x =\n       list2policy\n        ((P1 \\<Otimes>\\<^sub>L a # P2) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d)\n        x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r o\\<^sub>f\n     (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy [] \\<circ> d))\n     x =\n    list2policy\n     ((P1 \\<Otimes>\\<^sub>L []) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d) x", "by (simp add: policy_range_comp_def  list2policy_def)"], ["proof (state)\nthis:\n  (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy [] \\<circ> d))\n   x =\n  list2policy\n   ((P1 \\<Otimes>\\<^sub>L []) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d) x\n\ngoal (1 subgoal):\n 1. \\<And>a P2.\n       (r o\\<^sub>f\n        (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy P2 \\<circ> d))\n        x =\n       list2policy\n        ((P1 \\<Otimes>\\<^sub>L P2) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d)\n        x \\<Longrightarrow>\n       (r o\\<^sub>f\n        (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy (a # P2) \\<circ> d))\n        x =\n       list2policy\n        ((P1 \\<Otimes>\\<^sub>L a # P2) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d)\n        x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a P2.\n       (r o\\<^sub>f\n        (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy P2 \\<circ> d))\n        x =\n       list2policy\n        ((P1 \\<Otimes>\\<^sub>L P2) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d)\n        x \\<Longrightarrow>\n       (r o\\<^sub>f\n        (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy (a # P2) \\<circ> d))\n        x =\n       list2policy\n        ((P1 \\<Otimes>\\<^sub>L a # P2) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d)\n        x", "case (Cons p ps)"], ["proof (state)\nthis:\n  (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy ps \\<circ> d))\n   x =\n  list2policy\n   ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d) x\n\ngoal (1 subgoal):\n 1. \\<And>a P2.\n       (r o\\<^sub>f\n        (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy P2 \\<circ> d))\n        x =\n       list2policy\n        ((P1 \\<Otimes>\\<^sub>L P2) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d)\n        x \\<Longrightarrow>\n       (r o\\<^sub>f\n        (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy (a # P2) \\<circ> d))\n        x =\n       list2policy\n        ((P1 \\<Otimes>\\<^sub>L a # P2) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d)\n        x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r o\\<^sub>f\n     (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy (p # ps) \\<circ> d))\n     x =\n    list2policy\n     ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d) x", "using Cons"], ["proof (prove)\nusing this:\n  (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy ps \\<circ> d))\n   x =\n  list2policy\n   ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d) x\n\ngoal (1 subgoal):\n 1. (r o\\<^sub>f\n     (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy (p # ps) \\<circ> d))\n     x =\n    list2policy\n     ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d) x", "proof (cases \"x \\<in> dom (r o_f ((P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D p) \\<circ> d))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>(r o\\<^sub>f\n              (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy ps \\<circ> d))\n              x =\n             list2policy\n              ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r\n                d)\n              x;\n     x \\<in> dom (r o\\<^sub>f\n                  (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D p \\<circ> d))\\<rbrakk>\n    \\<Longrightarrow> (r o\\<^sub>f\n                       (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D\n                        list2policy (p # ps) \\<circ>\n                        d))\n                       x =\n                      list2policy\n                       ((P1 \\<Otimes>\\<^sub>L p # ps)\n                         (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d)\n                       x\n 2. \\<lbrakk>(r o\\<^sub>f\n              (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy ps \\<circ> d))\n              x =\n             list2policy\n              ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r\n                d)\n              x;\n     x \\<notin> dom (r o\\<^sub>f\n                     (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D p \\<circ>\n                      d))\\<rbrakk>\n    \\<Longrightarrow> (r o\\<^sub>f\n                       (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D\n                        list2policy (p # ps) \\<circ>\n                        d))\n                       x =\n                      list2policy\n                       ((P1 \\<Otimes>\\<^sub>L p # ps)\n                         (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d)\n                       x", "case True"], ["proof (state)\nthis:\n  x \\<in> dom (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D p \\<circ> d))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(r o\\<^sub>f\n              (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy ps \\<circ> d))\n              x =\n             list2policy\n              ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r\n                d)\n              x;\n     x \\<in> dom (r o\\<^sub>f\n                  (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D p \\<circ> d))\\<rbrakk>\n    \\<Longrightarrow> (r o\\<^sub>f\n                       (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D\n                        list2policy (p # ps) \\<circ>\n                        d))\n                       x =\n                      list2policy\n                       ((P1 \\<Otimes>\\<^sub>L p # ps)\n                         (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d)\n                       x\n 2. \\<lbrakk>(r o\\<^sub>f\n              (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy ps \\<circ> d))\n              x =\n             list2policy\n              ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r\n                d)\n              x;\n     x \\<notin> dom (r o\\<^sub>f\n                     (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D p \\<circ>\n                      d))\\<rbrakk>\n    \\<Longrightarrow> (r o\\<^sub>f\n                       (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D\n                        list2policy (p # ps) \\<circ>\n                        d))\n                       x =\n                      list2policy\n                       ((P1 \\<Otimes>\\<^sub>L p # ps)\n                         (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d)\n                       x", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r o\\<^sub>f\n     (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy (p # ps) \\<circ> d))\n     x =\n    list2policy\n     ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d) x", "using True"], ["proof (prove)\nusing this:\n  x \\<in> dom (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D p \\<circ> d))\n\ngoal (1 subgoal):\n 1. (r o\\<^sub>f\n     (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy (p # ps) \\<circ> d))\n     x =\n    list2policy\n     ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d) x", "by (auto simp: policy_range_comp_def  list2policy_def prod_orD_def\n          split: option.splits decision.splits prod.splits)"], ["proof (state)\nthis:\n  (r o\\<^sub>f\n   (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy (p # ps) \\<circ> d))\n   x =\n  list2policy\n   ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d) x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(r o\\<^sub>f\n              (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy ps \\<circ> d))\n              x =\n             list2policy\n              ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r\n                d)\n              x;\n     x \\<notin> dom (r o\\<^sub>f\n                     (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D p \\<circ>\n                      d))\\<rbrakk>\n    \\<Longrightarrow> (r o\\<^sub>f\n                       (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D\n                        list2policy (p # ps) \\<circ>\n                        d))\n                       x =\n                      list2policy\n                       ((P1 \\<Otimes>\\<^sub>L p # ps)\n                         (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d)\n                       x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>(r o\\<^sub>f\n              (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy ps \\<circ> d))\n              x =\n             list2policy\n              ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r\n                d)\n              x;\n     x \\<notin> dom (r o\\<^sub>f\n                     (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D p \\<circ>\n                      d))\\<rbrakk>\n    \\<Longrightarrow> (r o\\<^sub>f\n                       (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D\n                        list2policy (p # ps) \\<circ>\n                        d))\n                       x =\n                      list2policy\n                       ((P1 \\<Otimes>\\<^sub>L p # ps)\n                         (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d)\n                       x", "case False"], ["proof (state)\nthis:\n  x \\<notin> dom (r o\\<^sub>f\n                  (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D p \\<circ> d))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(r o\\<^sub>f\n              (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy ps \\<circ> d))\n              x =\n             list2policy\n              ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r\n                d)\n              x;\n     x \\<notin> dom (r o\\<^sub>f\n                     (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D p \\<circ>\n                      d))\\<rbrakk>\n    \\<Longrightarrow> (r o\\<^sub>f\n                       (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D\n                        list2policy (p # ps) \\<circ>\n                        d))\n                       x =\n                      list2policy\n                       ((P1 \\<Otimes>\\<^sub>L p # ps)\n                         (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d)\n                       x", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r o\\<^sub>f\n     (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy (p # ps) \\<circ> d))\n     x =\n    list2policy\n     ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d) x", "using Cons False"], ["proof (prove)\nusing this:\n  (r o\\<^sub>f (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy ps \\<circ> d))\n   x =\n  list2policy\n   ((P1 \\<Otimes>\\<^sub>L ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d) x\n  x \\<notin> dom (r o\\<^sub>f\n                  (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D p \\<circ> d))\n\ngoal (1 subgoal):\n 1. (r o\\<^sub>f\n     (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy (p # ps) \\<circ> d))\n     x =\n    list2policy\n     ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d) x", "by (auto simp: policy_range_comp_def  list2policy_def map_add_dom_app_simps(3) prod_orD_def\n          split: option.splits decision.splits prod.splits)"], ["proof (state)\nthis:\n  (r o\\<^sub>f\n   (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy (p # ps) \\<circ> d))\n   x =\n  list2policy\n   ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d) x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (r o\\<^sub>f\n   (P1 \\<Otimes>\\<^sub>\\<or>\\<^sub>D list2policy (p # ps) \\<circ> d))\n   x =\n  list2policy\n   ((P1 \\<Otimes>\\<^sub>L p # ps) (\\<Otimes>\\<^sub>\\<or>\\<^sub>D) r d) x\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Some domain reasoning\\<close>"], ["", "lemma domSubsetDistr1: \"dom A = UNIV \\<Longrightarrow> dom ((\\<lambda>(x, y). x) o_f (A \\<Otimes>\\<^sub>1 B) o (\\<lambda> x. (x,x))) = dom B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom A = UNIV \\<Longrightarrow>\n    dom ((\\<lambda>(x, y). x) o\\<^sub>f (A \\<Otimes>\\<^sub>1 B) \\<circ>\n         (\\<lambda>x. (x, x))) =\n    dom B", "apply (rule set_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       dom A = UNIV \\<Longrightarrow>\n       (x \\<in> dom ((\\<lambda>(x, y). x) o\\<^sub>f\n                     (A \\<Otimes>\\<^sub>1 B) \\<circ>\n                     (\\<lambda>x. (x, x)))) =\n       (x \\<in> dom B)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>dom A = UNIV;\n        x \\<in> dom ((\\<lambda>(x, y). x) o\\<^sub>f\n                     (A \\<Otimes>\\<^sub>1 B) \\<circ>\n                     (\\<lambda>x. (x, x)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> dom B\n 2. \\<And>x.\n       \\<lbrakk>dom A = UNIV; x \\<in> dom B\\<rbrakk>\n       \\<Longrightarrow> x \\<in> dom ((\\<lambda>(x, y). x) o\\<^sub>f\n(A \\<Otimes>\\<^sub>1 B) \\<circ>\n(\\<lambda>x. (x, x)))", "apply (auto simp: prod_1_def policy_range_comp_def dom_def  \n      split: decision.splits option.splits prod.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma domSubsetDistr2: \"dom A = UNIV \\<Longrightarrow> dom ((\\<lambda>(x, y). x) o_f (A \\<Otimes>\\<^sub>2 B) o (\\<lambda> x. (x,x))) = dom B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom A = UNIV \\<Longrightarrow>\n    dom ((\\<lambda>(x, y). x) o\\<^sub>f (A \\<Otimes>\\<^sub>2 B) \\<circ>\n         (\\<lambda>x. (x, x))) =\n    dom B", "apply (rule set_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       dom A = UNIV \\<Longrightarrow>\n       (x \\<in> dom ((\\<lambda>(x, y). x) o\\<^sub>f\n                     (A \\<Otimes>\\<^sub>2 B) \\<circ>\n                     (\\<lambda>x. (x, x)))) =\n       (x \\<in> dom B)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>dom A = UNIV;\n        x \\<in> dom ((\\<lambda>(x, y). x) o\\<^sub>f\n                     (A \\<Otimes>\\<^sub>2 B) \\<circ>\n                     (\\<lambda>x. (x, x)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> dom B\n 2. \\<And>x.\n       \\<lbrakk>dom A = UNIV; x \\<in> dom B\\<rbrakk>\n       \\<Longrightarrow> x \\<in> dom ((\\<lambda>(x, y). x) o\\<^sub>f\n(A \\<Otimes>\\<^sub>2 B) \\<circ>\n(\\<lambda>x. (x, x)))", "apply (auto simp: prod_2_def policy_range_comp_def dom_def \n      split: decision.splits option.splits prod.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma domSubsetDistrA: \"dom A = UNIV \\<Longrightarrow> dom ((\\<lambda>(x, y). x) o_f (A \\<Otimes>\\<^sub>\\<or>\\<^sub>A B) o (\\<lambda> x. (x,x))) = dom B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom A = UNIV \\<Longrightarrow>\n    dom ((\\<lambda>(x, y). x) o\\<^sub>f\n         (A \\<Otimes>\\<^sub>\\<or>\\<^sub>A B) \\<circ>\n         (\\<lambda>x. (x, x))) =\n    dom B", "apply (rule set_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       dom A = UNIV \\<Longrightarrow>\n       (x \\<in> dom ((\\<lambda>(x, y). x) o\\<^sub>f\n                     (A \\<Otimes>\\<^sub>\\<or>\\<^sub>A B) \\<circ>\n                     (\\<lambda>x. (x, x)))) =\n       (x \\<in> dom B)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>dom A = UNIV;\n        x \\<in> dom ((\\<lambda>(x, y). x) o\\<^sub>f\n                     (A \\<Otimes>\\<^sub>\\<or>\\<^sub>A B) \\<circ>\n                     (\\<lambda>x. (x, x)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> dom B\n 2. \\<And>x.\n       \\<lbrakk>dom A = UNIV; x \\<in> dom B\\<rbrakk>\n       \\<Longrightarrow> x \\<in> dom ((\\<lambda>(x, y). x) o\\<^sub>f\n(A \\<Otimes>\\<^sub>\\<or>\\<^sub>A B) \\<circ>\n(\\<lambda>x. (x, x)))", "apply (auto simp: prod_orA_def policy_range_comp_def dom_def \n      split: decision.splits option.splits prod.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma domSubsetDistrD: \"dom A = UNIV \\<Longrightarrow> dom ((\\<lambda>(x, y). x) o_f (A \\<Otimes>\\<^sub>\\<or>\\<^sub>D B) o (\\<lambda> x. (x,x))) = dom B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom A = UNIV \\<Longrightarrow>\n    dom ((\\<lambda>(x, y). x) o\\<^sub>f\n         (A \\<Otimes>\\<^sub>\\<or>\\<^sub>D B) \\<circ>\n         (\\<lambda>x. (x, x))) =\n    dom B", "apply (rule set_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       dom A = UNIV \\<Longrightarrow>\n       (x \\<in> dom ((\\<lambda>(x, y). x) o\\<^sub>f\n                     (A \\<Otimes>\\<^sub>\\<or>\\<^sub>D B) \\<circ>\n                     (\\<lambda>x. (x, x)))) =\n       (x \\<in> dom B)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>dom A = UNIV;\n        x \\<in> dom ((\\<lambda>(x, y). x) o\\<^sub>f\n                     (A \\<Otimes>\\<^sub>\\<or>\\<^sub>D B) \\<circ>\n                     (\\<lambda>x. (x, x)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> dom B\n 2. \\<And>x.\n       \\<lbrakk>dom A = UNIV; x \\<in> dom B\\<rbrakk>\n       \\<Longrightarrow> x \\<in> dom ((\\<lambda>(x, y). x) o\\<^sub>f\n(A \\<Otimes>\\<^sub>\\<or>\\<^sub>D B) \\<circ>\n(\\<lambda>x. (x, x)))", "apply (auto simp: prod_orD_def policy_range_comp_def dom_def \n      split: decision.splits option.splits prod.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}