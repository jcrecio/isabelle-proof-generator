{"file_name": "/home/qj213/afp-2021-10-22/thys/UPF/Service.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/UPF", "problem_names": ["lemmas SEsimps = SEPolicy_def get_entry_def userHasAccess_def\n                 editEntrySE_def deleteEntrySE_def readEntrySE_def", "lemmas LRsimps = LR_Policy_def createSCRPolicy_def addLRPolicy_def LRPolicy_def"], "translations": [["", "lemmas SEsimps = SEPolicy_def get_entry_def userHasAccess_def\n                 editEntrySE_def deleteEntrySE_def readEntrySE_def"], ["", "subsubsection \\<open>Legitimate Relationships\\<close>"], ["", "type_synonym LRPolicy = \"(Operation \\<times> \\<Sigma>, unit) policy\""], ["", "fun hasLR:: \"user \\<Rightarrow> patient \\<Rightarrow> \\<Sigma> \\<Rightarrow> bool\"  where\n \"hasLR u p \\<Sigma> = (case \\<Sigma> p of \\<bottom>     \\<Rightarrow> False  \n                           | \\<lfloor>lrs\\<rfloor>  \\<Rightarrow>  (\\<exists>lr. lr\\<in>(ran lrs) \\<and> u \\<in> lr))\""], ["", "definition LRPolicy :: LRPolicy where \n \"LRPolicy = (\\<lambda>(x,y). (if hasLR (userOfOp x) (patientOfOp x) y \n                       then \\<lfloor>allow ()\\<rfloor> \n                       else \\<lfloor>deny ()\\<rfloor>))\""], ["", "definition createSCRPolicy :: LRPolicy where\n \"createSCRPolicy x = (if   (is_createSCR (fst x)) \n                       then \\<lfloor>allow ()\\<rfloor> \n                       else  \\<bottom>)\""], ["", "definition addLRPolicy :: LRPolicy where\n \"addLRPolicy x = (if  (is_addLR (fst x)) \n                   then \\<lfloor>allow ()\\<rfloor> \n                   else \\<bottom>)\""], ["", "definition LR_Policy where  \"LR_Policy = createSCRPolicy \\<Oplus> addLRPolicy \\<Oplus> LRPolicy \\<Oplus> A\\<^sub>U\""], ["", "lemmas LRsimps = LR_Policy_def createSCRPolicy_def addLRPolicy_def LRPolicy_def"], ["", "type_synonym FunPolicy = \"(Operation \\<times> DB \\<times> \\<Sigma>,unit) policy\""], ["", "fun createFunPolicy :: FunPolicy where\n   \"createFunPolicy ((createSCR u r p),(D,S)) = (if p \\<in> dom D \n                                                 then \\<lfloor>deny ()\\<rfloor> \n                                                 else \\<lfloor>allow ()\\<rfloor>)\"\n  |\"createFunPolicy x = \\<bottom>\""], ["", "fun addLRFunPolicy :: FunPolicy where\n   \"addLRFunPolicy ((addLR u r p l us),(D,S)) = (if l \\<in> dom S \n                                                 then \\<lfloor>deny ()\\<rfloor> \n                                                 else \\<lfloor>allow ()\\<rfloor>)\"\n  |\"addLRFunPolicy x = \\<bottom>\""], ["", "fun removeLRFunPolicy :: FunPolicy where\n   \"removeLRFunPolicy ((removeLR u r p l),(D,S)) = (if l \\<in> dom S \n                                                    then \\<lfloor>allow ()\\<rfloor> \n                                                    else \\<lfloor>deny ()\\<rfloor>)\"\n  |\"removeLRFunPolicy x = \\<bottom>\""], ["", "fun readSCRFunPolicy :: FunPolicy where\n   \"readSCRFunPolicy ((readSCR u r p),(D,S)) = (if p \\<in> dom D \n                                                then \\<lfloor>allow ()\\<rfloor> \n                                                else \\<lfloor>deny ()\\<rfloor>)\"\n  |\"readSCRFunPolicy x = \\<bottom>\""], ["", "fun deleteSCRFunPolicy :: FunPolicy where\n   \"deleteSCRFunPolicy ((deleteSCR u r p),(D,S)) = (if p \\<in> dom D \n                                                    then \\<lfloor>allow ()\\<rfloor> \n                                                    else \\<lfloor>deny ()\\<rfloor>)\"\n  |\"deleteSCRFunPolicy x = \\<bottom>\""], ["", "fun changeStatusFunPolicy  :: FunPolicy where\n   \"changeStatusFunPolicy (changeStatus u r p e s,(d,S)) = \n          (case d p of \\<lfloor>x\\<rfloor> \\<Rightarrow> (if e \\<in> dom x \n                                  then \\<lfloor>allow ()\\<rfloor> \n                                  else \\<lfloor>deny ()\\<rfloor>)\n                     | _  \\<Rightarrow> \\<lfloor>deny ()\\<rfloor>)\" \n  |\"changeStatusFunPolicy x = \\<bottom>\""], ["", "fun deleteEntryFunPolicy  :: FunPolicy where\n   \"deleteEntryFunPolicy (deleteEntry u r p e,(d,S)) = \n          (case d p of \\<lfloor>x\\<rfloor> \\<Rightarrow> (if e \\<in> dom x \n                                  then \\<lfloor>allow ()\\<rfloor> \n                                  else \\<lfloor>deny ()\\<rfloor>)\n                     | _  \\<Rightarrow> \\<lfloor>deny ()\\<rfloor>)\" \n  |\"deleteEntryFunPolicy x = \\<bottom>\""], ["", "fun readEntryFunPolicy :: FunPolicy where\n   \"readEntryFunPolicy (readEntry u r p e,(d,S)) = \n          (case d p of \\<lfloor>x\\<rfloor> \\<Rightarrow>  (if e \\<in> dom x \n                                   then \\<lfloor>allow ()\\<rfloor> \n                                   else \\<lfloor>deny ()\\<rfloor>)\n                      | _ \\<Rightarrow> \\<lfloor>deny ()\\<rfloor>)\" \n  |\"readEntryFunPolicy x = \\<bottom>\""], ["", "fun appendEntryFunPolicy  :: FunPolicy where\n   \"appendEntryFunPolicy (appendEntry u r p e ed,(d,S)) = \n          (case d p of \\<lfloor>x\\<rfloor> \\<Rightarrow>  (if e \\<in> dom x \n                                   then \\<lfloor>deny ()\\<rfloor> \n                                   else \\<lfloor>allow ()\\<rfloor>)\n                      | _ \\<Rightarrow> \\<lfloor>deny ()\\<rfloor>)\" \n  |\"appendEntryFunPolicy x = \\<bottom>\""], ["", "fun editEntryFunPolicy  :: FunPolicy where\n   \"editEntryFunPolicy (editEntry u r p ei e,(d,S)) = \n               (case d p of \\<lfloor>x\\<rfloor> \\<Rightarrow> (if ei \\<in> dom x \n                                       then \\<lfloor>allow ()\\<rfloor> \n                                       else \\<lfloor>deny ()\\<rfloor>)\n                          | _ \\<Rightarrow> \\<lfloor>deny ()\\<rfloor>)\" \n  |\"editEntryFunPolicy x = \\<bottom>\""], ["", "definition FunPolicy where \n \"FunPolicy = editEntryFunPolicy \\<Oplus> appendEntryFunPolicy \\<Oplus>\n              readEntryFunPolicy \\<Oplus> deleteEntryFunPolicy \\<Oplus> \n              changeStatusFunPolicy \\<Oplus> deleteSCRFunPolicy \\<Oplus>\n              removeLRFunPolicy \\<Oplus> readSCRFunPolicy \\<Oplus>\n              addLRFunPolicy \\<Oplus> createFunPolicy \\<Oplus> A\\<^sub>U\""], ["", "subsubsection\\<open>Modelling Core RBAC\\<close>"], ["", "type_synonym RBACPolicy = \"Operation \\<times> \\<upsilon> \\<mapsto> unit\""], ["", "definition RBAC :: \"(role \\<times> Operation) set\" where \n \"RBAC = {(r,f). r = Nurse \\<and> is_readEntry f} \\<union>  \n        {(r,f). r = Nurse \\<and> is_readSCR f} \\<union>  \n        {(r,f). r = ClinicalPractitioner \\<and> is_appendEntry f} \\<union>  \n        {(r,f). r = ClinicalPractitioner \\<and> is_deleteEntry f} \\<union>  \n        {(r,f). r = ClinicalPractitioner \\<and> is_readEntry f} \\<union>  \n        {(r,f). r = ClinicalPractitioner \\<and> is_readSCR f} \\<union>  \n        {(r,f). r = ClinicalPractitioner \\<and> is_changeStatus f} \\<union>  \n        {(r,f). r = ClinicalPractitioner \\<and> is_editEntry f} \\<union>  \n        {(r,f). r = Clerical \\<and> is_createSCR f} \\<union>  \n        {(r,f). r = Clerical \\<and> is_deleteSCR f} \\<union>  \n        {(r,f). r = Clerical \\<and> is_addLR f}  \\<union>  \n        {(r,f). r = Clerical \\<and> is_removeLR f}\""], ["", "definition RBACPolicy :: RBACPolicy where\n \"RBACPolicy = (\\<lambda> (f,uc).\n     if    ((roleOfOp f,f) \\<in> RBAC \\<and> \\<lfloor>roleOfOp f\\<rfloor> = uc (userOfOp f)) \n     then  \\<lfloor>allow ()\\<rfloor>\n     else  \\<lfloor>deny ()\\<rfloor>)\""], ["", "subsection \\<open>The State Transitions and Output Function\\<close>"], ["", "subsubsection\\<open>State Transition\\<close>"], ["", "fun OpSuccessDB :: \"(Operation \\<times> DB) \\<rightharpoonup> DB\"  where\n   \"OpSuccessDB (createSCR u r p,S) = (case S p of \\<bottom> \\<Rightarrow> \\<lfloor>S(p\\<mapsto>\\<emptyset>)\\<rfloor>\n                                                 | \\<lfloor>x\\<rfloor> \\<Rightarrow> \\<lfloor>S\\<rfloor>)\" \n  |\"OpSuccessDB ((appendEntry u r p ei e),S) = \n                                      (case S p of \\<bottom>  \\<Rightarrow> \\<lfloor>S\\<rfloor>\n                                                | \\<lfloor>x\\<rfloor> \\<Rightarrow> ((if ei \\<in> (dom x) \n                                                              then \\<lfloor>S\\<rfloor> \n                                                              else \\<lfloor>S(p \\<mapsto> x(ei\\<mapsto>e))\\<rfloor>)))\"\n  |\"OpSuccessDB ((deleteSCR u r p),S) =  (Some (S(p:=\\<bottom>)))\"\n  |\"OpSuccessDB ((deleteEntry u r p ei),S) = \n                                      (case S p of \\<bottom> \\<Rightarrow> \\<lfloor>S\\<rfloor>\n                                                 | \\<lfloor>x\\<rfloor> \\<Rightarrow> Some (S(p\\<mapsto>(x(ei:=\\<bottom>)))))\"\n  |\"OpSuccessDB ((changeStatus u r p ei s),S) = \n                                      (case S p of \\<bottom> \\<Rightarrow> \\<lfloor>S\\<rfloor>\n                                                 | \\<lfloor>x\\<rfloor> \\<Rightarrow> (case x ei of\n                                                            \\<lfloor>e\\<rfloor> \\<Rightarrow> \\<lfloor>S(p \\<mapsto> x(ei\\<mapsto>(s,snd e)))\\<rfloor>\n                                                          | \\<bottom> \\<Rightarrow> \\<lfloor>S\\<rfloor>))\"\n  |\"OpSuccessDB ((editEntry u r p ei e),S) = \n                                      (case S p of \\<bottom> \\<Rightarrow>\\<lfloor>S\\<rfloor>\n                                                 | \\<lfloor>x\\<rfloor> \\<Rightarrow> (case x ei of\n                                                                 \\<lfloor>e\\<rfloor> \\<Rightarrow> \\<lfloor>S(p\\<mapsto>(x(ei\\<mapsto>(e))))\\<rfloor>\n                                                              | \\<bottom> \\<Rightarrow> \\<lfloor>S\\<rfloor>))\"\n  |\"OpSuccessDB (x,S) = \\<lfloor>S\\<rfloor>\""], ["", "fun OpSuccessSigma :: \"(Operation \\<times> \\<Sigma>) \\<rightharpoonup> \\<Sigma>\" where\n   \"OpSuccessSigma (addLR u r p lr_id us,S) = \n                   (case S p of \\<lfloor>lrs\\<rfloor>  \\<Rightarrow> (case (lrs lr_id) of \n                                               \\<bottom>  \\<Rightarrow> \\<lfloor>S(p\\<mapsto>(lrs(lr_id\\<mapsto>us)))\\<rfloor>                        \n                                             | \\<lfloor>x\\<rfloor> \\<Rightarrow> \\<lfloor>S\\<rfloor>)\n                              | \\<bottom> \\<Rightarrow> \\<lfloor>S(p\\<mapsto>(Map.empty(lr_id\\<mapsto>us)))\\<rfloor>)\"\n  |\"OpSuccessSigma (removeLR u r p lr_id,S) = \n                   (case S p of Some lrs \\<Rightarrow> \\<lfloor>S(p\\<mapsto>(lrs(lr_id:=\\<bottom>)))\\<rfloor>\n                              | \\<bottom> \\<Rightarrow> \\<lfloor>S\\<rfloor>)\"\n  |\"OpSuccessSigma (x,S) = \\<lfloor>S\\<rfloor>\""], ["", "fun OpSuccessUC :: \"(Operation \\<times> \\<upsilon>) \\<rightharpoonup> \\<upsilon>\" where\n   \"OpSuccessUC (f,u) = \\<lfloor>u\\<rfloor>\""], ["", "subsubsection \\<open>Output\\<close>"], ["", "type_synonym Output = unit"], ["", "fun OpSuccessOutput :: \"(Operation) \\<rightharpoonup> Output\" where \n   \"OpSuccessOutput x = \\<lfloor>()\\<rfloor>\""], ["", "fun OpFailOutput :: \"Operation \\<rightharpoonup>  Output\" where\n   \"OpFailOutput x = \\<lfloor>()\\<rfloor>\""], ["", "subsection \\<open>Combine All Parts\\<close>"], ["", "definition SE_LR_Policy :: \"(Operation \\<times> DB \\<times> \\<Sigma>, unit) policy\" where\n   \"SE_LR_Policy = (\\<lambda>(x,x). x)  o\\<^sub>f  (SEPolicy \\<Otimes>\\<^sub>\\<or>\\<^sub>D LR_Policy) o (\\<lambda>(a,b,c). ((a,b),a,c))\""], ["", "definition SE_LR_FUN_Policy :: \"(Operation \\<times> DB \\<times> \\<Sigma>, unit) policy\" where\n  \"SE_LR_FUN_Policy =  ((\\<lambda>(x,x). x) o\\<^sub>f (FunPolicy \\<Otimes>\\<^sub>\\<or>\\<^sub>D SE_LR_Policy) o (\\<lambda>a. (a,a)))\""], ["", "definition SE_LR_RBAC_Policy :: \"(Operation \\<times> DB \\<times> \\<Sigma> \\<times> \\<upsilon>, unit) policy\" where\n  \"SE_LR_RBAC_Policy = (\\<lambda>(x,x). x) \n                        o\\<^sub>f (RBACPolicy \\<Otimes>\\<^sub>\\<or>\\<^sub>D SE_LR_FUN_Policy) \n                        o (\\<lambda>(a,b,c,d). ((a,d),(a,b,c)))\""], ["", "definition ST_Allow :: \"Operation \\<times> DB \\<times> \\<Sigma>  \\<times> \\<upsilon> \\<rightharpoonup> Output \\<times> DB \\<times> \\<Sigma> \\<times> \\<upsilon>\" \nwhere     \"ST_Allow = ((OpSuccessOutput \\<Otimes>\\<^sub>M (OpSuccessDB \\<Otimes>\\<^sub>S OpSuccessSigma \\<Otimes>\\<^sub>S OpSuccessUC)) \n                      o ( (\\<lambda>(a,b,c). ((a),(a,b,c)))))\""], ["", "definition ST_Deny :: \"Operation \\<times> DB \\<times> \\<Sigma> \\<times> \\<upsilon> \\<rightharpoonup> Output \\<times> DB \\<times> \\<Sigma> \\<times> \\<upsilon>\" \nwhere     \"ST_Deny = (\\<lambda> (ope,sp,si,uc). Some ((), sp,si,uc))\""], ["", "definition SE_LR_RBAC_ST_Policy :: \"Operation \\<times> DB \\<times> \\<Sigma>  \\<times> \\<upsilon> \\<mapsto> Output \\<times> DB \\<times> \\<Sigma> \\<times> \\<upsilon>\"\nwhere     \"SE_LR_RBAC_ST_Policy =   ((\\<lambda> (x,y).y)  \n                                     o\\<^sub>f ((ST_Allow,ST_Deny) \\<Otimes>\\<^sub>\\<nabla> SE_LR_RBAC_Policy) \n                                     o (\\<lambda>x.(x,x)))\""], ["", "definition PolMon :: \"Operation \\<Rightarrow> (Output decision,DB \\<times> \\<Sigma> \\<times> \\<upsilon>) MON\\<^sub>S\\<^sub>E\" \nwhere     \"PolMon = (policy2MON SE_LR_RBAC_ST_Policy)\""], ["", "end"]]}