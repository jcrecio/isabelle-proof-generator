{"file_name": "/home/qj213/afp-2021-10-22/thys/UPF/Analysis.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/UPF", "problem_names": ["lemma strictly_more_vs_more: \"strictly_more_defined p q \\<Longrightarrow> more_defined p q\"", "lemma more_permissive_refl : \"p \\<sqsubseteq>\\<^sub>A p \"", "lemma more_permissive_trans : \"p \\<sqsubseteq>\\<^sub>A p' \\<Longrightarrow> p' \\<sqsubseteq>\\<^sub>A p'' \\<Longrightarrow>  p \\<sqsubseteq>\\<^sub>A p''\"", "lemma more_rejective_trans : \"p \\<sqsubseteq>\\<^sub>D p' \\<Longrightarrow> p' \\<sqsubseteq>\\<^sub>D p'' \\<Longrightarrow>  p \\<sqsubseteq>\\<^sub>D p''\"", "lemma more_rejective_refl : \"p \\<sqsubseteq>\\<^sub>D p \"", "lemma \"A\\<^sub>f f \\<sqsubseteq>\\<^sub>A p\"", "lemma \"A\\<^sub>I \\<sqsubseteq>\\<^sub>A p\"", "theorem polref_refl: \"p \\<sqsubseteq>\\<^bsub>id\\<^esub>\\<^sub>,\\<^bsub>id\\<^esub> p\"", "theorem polref_trans: \n  assumes A: \"p \\<sqsubseteq>\\<^bsub>f\\<^esub>\\<^sub>,\\<^bsub>g\\<^esub> p'\"\n    and     B: \"p' \\<sqsubseteq>\\<^bsub>f'\\<^esub>\\<^sub>,\\<^bsub>g'\\<^esub> p''\"\n  shows   \"p \\<sqsubseteq>\\<^bsub>f o f'\\<^esub>\\<^sub>,\\<^bsub>g o g'\\<^esub> p''\"", "lemma policy_eq:\n  assumes p_over_qA: \"p \\<sqsubseteq>\\<^sub>A q \"\n    and  q_over_pA:    \"q \\<sqsubseteq>\\<^sub>A p\" \n    and  p_over_qD:    \"q \\<sqsubseteq>\\<^sub>D p\" \n    and  q_over_pD:    \"p \\<sqsubseteq>\\<^sub>D q\" \n    and  dom_eq:       \"dom p = dom q\"\n  shows                \"no_conflicts p q\"", "lemma dom_inter: \"\\<lbrakk>dom p \\<inter> dom q = {}; p x = \\<lfloor>y\\<rfloor>\\<rbrakk> \\<Longrightarrow> q x = \\<bottom>\"", "lemma dom_eq: \"dom p \\<inter> dom q = {} \\<Longrightarrow> p \\<Oplus>\\<^sub>A q = p \\<Oplus>\\<^sub>D q\"", "lemma dom_split_alt_def : \"(f, g) \\<Delta> p = (dom(p \\<triangleright> Allow) \\<triangleleft> (A\\<^sub>f f)) \\<Oplus> (dom(p \\<triangleright> Deny) \\<triangleleft> (D\\<^sub>f g))\""], "translations": [["", "lemma strictly_more_vs_more: \"strictly_more_defined p q \\<Longrightarrow> more_defined p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strictly_more_defined p q \\<Longrightarrow> more_defined p q", "unfolding more_defined_def strictly_more_defined_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dom q \\<subset> dom p \\<Longrightarrow> dom q \\<subseteq> dom p", "by auto"], ["", "text\\<open>Policy p is more permissive than q:\\<close>"], ["", "definition more_permissive :: \"('a \\<mapsto> 'b) \\<Rightarrow> ('a \\<mapsto> 'b) \\<Rightarrow> bool\"  (infixl \"\\<sqsubseteq>\\<^sub>A\" 60)\nwhere \" p \\<sqsubseteq>\\<^sub>A q =  (\\<forall> x. (case q x of \\<lfloor>allow y\\<rfloor> \\<Rightarrow> (\\<exists> z. (p x = \\<lfloor>allow z\\<rfloor>))\n                                   | \\<lfloor>deny y\\<rfloor>  \\<Rightarrow> True\n                                   | \\<bottom>        \\<Rightarrow> True))\""], ["", "lemma more_permissive_refl : \"p \\<sqsubseteq>\\<^sub>A p \""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<sqsubseteq>\\<^sub>A p", "unfolding more_permissive_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       case p x of \\<bottom> \\<Rightarrow> True\n       | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n           \\<exists>z. p x = \\<lfloor>allow z\\<rfloor>\n       | \\<lfloor>deny y\\<rfloor> \\<Rightarrow> True", "by(auto split : option.split decision.split)"], ["", "lemma more_permissive_trans : \"p \\<sqsubseteq>\\<^sub>A p' \\<Longrightarrow> p' \\<sqsubseteq>\\<^sub>A p'' \\<Longrightarrow>  p \\<sqsubseteq>\\<^sub>A p''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<sqsubseteq>\\<^sub>A p';\n     p' \\<sqsubseteq>\\<^sub>A p''\\<rbrakk>\n    \\<Longrightarrow> p \\<sqsubseteq>\\<^sub>A p''", "unfolding more_permissive_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x.\n                case p' x of \\<bottom> \\<Rightarrow> True\n                | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n                    \\<exists>z. p x = \\<lfloor>allow z\\<rfloor>\n                | \\<lfloor>deny y\\<rfloor> \\<Rightarrow> True;\n     \\<forall>x.\n        case p'' x of \\<bottom> \\<Rightarrow> True\n        | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n            \\<exists>z. p' x = \\<lfloor>allow z\\<rfloor>\n        | \\<lfloor>deny y\\<rfloor> \\<Rightarrow> True\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         case p'' x of \\<bottom> \\<Rightarrow> True\n                         | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n                             \\<exists>z. p x = \\<lfloor>allow z\\<rfloor>\n                         | \\<lfloor>deny y\\<rfloor> \\<Rightarrow> True", "apply(auto split : option.split decision.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x x1.\n       \\<lbrakk>\\<forall>x.\n                   case p' x of \\<bottom> \\<Rightarrow> True\n                   | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n                       \\<exists>z. p x = \\<lfloor>allow z\\<rfloor>\n                   | \\<lfloor>deny y\\<rfloor> \\<Rightarrow> True;\n        \\<forall>x.\n           case p'' x of \\<bottom> \\<Rightarrow> True\n           | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n               \\<exists>z. p' x = \\<lfloor>allow z\\<rfloor>\n           | \\<lfloor>deny y\\<rfloor> \\<Rightarrow> True;\n        p'' x = \\<lfloor>allow x1\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z. p x = \\<lfloor>allow z\\<rfloor>", "subgoal for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x.\n                case p' x of \\<bottom> \\<Rightarrow> True\n                | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n                    \\<exists>z. p x = \\<lfloor>allow z\\<rfloor>\n                | \\<lfloor>deny y\\<rfloor> \\<Rightarrow> True;\n     \\<forall>x.\n        case p'' x of \\<bottom> \\<Rightarrow> True\n        | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n            \\<exists>z. p' x = \\<lfloor>allow z\\<rfloor>\n        | \\<lfloor>deny y\\<rfloor> \\<Rightarrow> True;\n     p'' x = \\<lfloor>allow y\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>z. p x = \\<lfloor>allow z\\<rfloor>", "apply(erule_tac x = x and \n        P = \"\\<lambda>x. case p'' x of \\<bottom> \\<Rightarrow> True \n                                     | \\<lfloor>allow y\\<rfloor> \\<Rightarrow> \\<exists>z. p' x = \\<lfloor>allow z\\<rfloor> \n                                     | \\<lfloor>deny y\\<rfloor> \\<Rightarrow> True\" in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x.\n                case p' x of \\<bottom> \\<Rightarrow> True\n                | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n                    \\<exists>z. p x = \\<lfloor>allow z\\<rfloor>\n                | \\<lfloor>deny y\\<rfloor> \\<Rightarrow> True;\n     p'' x = \\<lfloor>allow y\\<rfloor>;\n     case p'' x of \\<bottom> \\<Rightarrow> True\n     | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n         \\<exists>z. p' x = \\<lfloor>allow z\\<rfloor>\n     | \\<lfloor>deny y\\<rfloor> \\<Rightarrow> True\\<rbrakk>\n    \\<Longrightarrow> \\<exists>z. p x = \\<lfloor>allow z\\<rfloor>", "apply(simp, elim exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>\\<forall>x.\n                   case p' x of \\<bottom> \\<Rightarrow> True\n                   | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n                       \\<exists>z. p x = \\<lfloor>allow z\\<rfloor>\n                   | \\<lfloor>deny y\\<rfloor> \\<Rightarrow> True;\n        p'' x = \\<lfloor>allow y\\<rfloor>;\n        p' x = \\<lfloor>allow z\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z. p x = \\<lfloor>allow z\\<rfloor>", "by(erule_tac x = x in allE, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text\\<open>Policy p is more rejective than q:\\<close>"], ["", "definition more_rejective :: \"('a \\<mapsto> 'b) \\<Rightarrow> ('a \\<mapsto> 'b) \\<Rightarrow> bool\" (infixl \"\\<sqsubseteq>\\<^sub>D\" 60)\n  where \" p \\<sqsubseteq>\\<^sub>D q = (\\<forall> x. (case q x of \\<lfloor>deny y\\<rfloor>  \\<Rightarrow> (\\<exists> z. (p x = \\<lfloor>deny z\\<rfloor>))\n                                  | \\<lfloor>allow y\\<rfloor> \\<Rightarrow> True\n                                  | \\<bottom>        \\<Rightarrow> True))\""], ["", "lemma more_rejective_trans : \"p \\<sqsubseteq>\\<^sub>D p' \\<Longrightarrow> p' \\<sqsubseteq>\\<^sub>D p'' \\<Longrightarrow>  p \\<sqsubseteq>\\<^sub>D p''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<sqsubseteq>\\<^sub>D p';\n     p' \\<sqsubseteq>\\<^sub>D p''\\<rbrakk>\n    \\<Longrightarrow> p \\<sqsubseteq>\\<^sub>D p''", "unfolding more_rejective_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x.\n                case p' x of \\<bottom> \\<Rightarrow> True\n                | \\<lfloor>allow y\\<rfloor> \\<Rightarrow> True\n                | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n                    \\<exists>z. p x = \\<lfloor>deny z\\<rfloor>;\n     \\<forall>x.\n        case p'' x of \\<bottom> \\<Rightarrow> True\n        | \\<lfloor>allow y\\<rfloor> \\<Rightarrow> True\n        | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n            \\<exists>z. p' x = \\<lfloor>deny z\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         case p'' x of \\<bottom> \\<Rightarrow> True\n                         | \\<lfloor>allow y\\<rfloor> \\<Rightarrow> True\n                         | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n                             \\<exists>z. p x = \\<lfloor>deny z\\<rfloor>", "apply(auto split : option.split decision.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x x2.\n       \\<lbrakk>\\<forall>x.\n                   case p' x of \\<bottom> \\<Rightarrow> True\n                   | \\<lfloor>allow y\\<rfloor> \\<Rightarrow> True\n                   | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n                       \\<exists>z. p x = \\<lfloor>deny z\\<rfloor>;\n        \\<forall>x.\n           case p'' x of \\<bottom> \\<Rightarrow> True\n           | \\<lfloor>allow y\\<rfloor> \\<Rightarrow> True\n           | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n               \\<exists>z. p' x = \\<lfloor>deny z\\<rfloor>;\n        p'' x = \\<lfloor>deny x2\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z. p x = \\<lfloor>deny z\\<rfloor>", "subgoal for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x.\n                case p' x of \\<bottom> \\<Rightarrow> True\n                | \\<lfloor>allow y\\<rfloor> \\<Rightarrow> True\n                | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n                    \\<exists>z. p x = \\<lfloor>deny z\\<rfloor>;\n     \\<forall>x.\n        case p'' x of \\<bottom> \\<Rightarrow> True\n        | \\<lfloor>allow y\\<rfloor> \\<Rightarrow> True\n        | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n            \\<exists>z. p' x = \\<lfloor>deny z\\<rfloor>;\n     p'' x = \\<lfloor>deny y\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>z. p x = \\<lfloor>deny z\\<rfloor>", "apply(erule_tac x = x and \n        P = \"\\<lambda>x. case p'' x of \\<bottom> \\<Rightarrow> True \n                                     | \\<lfloor>allow y\\<rfloor> \\<Rightarrow> True \n                                     | \\<lfloor>deny y\\<rfloor> \\<Rightarrow> \\<exists>z. p' x = \\<lfloor>deny z\\<rfloor>\" in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x.\n                case p' x of \\<bottom> \\<Rightarrow> True\n                | \\<lfloor>allow y\\<rfloor> \\<Rightarrow> True\n                | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n                    \\<exists>z. p x = \\<lfloor>deny z\\<rfloor>;\n     p'' x = \\<lfloor>deny y\\<rfloor>;\n     case p'' x of \\<bottom> \\<Rightarrow> True\n     | \\<lfloor>allow y\\<rfloor> \\<Rightarrow> True\n     | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n         \\<exists>z. p' x = \\<lfloor>deny z\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>z. p x = \\<lfloor>deny z\\<rfloor>", "apply(simp, elim exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>\\<forall>x.\n                   case p' x of \\<bottom> \\<Rightarrow> True\n                   | \\<lfloor>allow y\\<rfloor> \\<Rightarrow> True\n                   | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n                       \\<exists>z. p x = \\<lfloor>deny z\\<rfloor>;\n        p'' x = \\<lfloor>deny y\\<rfloor>;\n        p' x = \\<lfloor>deny z\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z. p x = \\<lfloor>deny z\\<rfloor>", "by(erule_tac x = x in allE, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma more_rejective_refl : \"p \\<sqsubseteq>\\<^sub>D p \""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<sqsubseteq>\\<^sub>D p", "unfolding more_rejective_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       case p x of \\<bottom> \\<Rightarrow> True\n       | \\<lfloor>allow y\\<rfloor> \\<Rightarrow> True\n       | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n           \\<exists>z. p x = \\<lfloor>deny z\\<rfloor>", "by(auto split : option.split decision.split)"], ["", "lemma \"A\\<^sub>f f \\<sqsubseteq>\\<^sub>A p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A\\<^sub>f f \\<sqsubseteq>\\<^sub>A p", "unfolding more_permissive_def allow_all_fun_def allow_pfun_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       case p x of \\<bottom> \\<Rightarrow> True\n       | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n           \\<exists>z.\n              (case (Some \\<circ> f) x of \\<bottom> \\<Rightarrow> \\<bottom>\n               | \\<lfloor>y\\<rfloor> \\<Rightarrow>\n                   \\<lfloor>allow y\\<rfloor>) =\n              \\<lfloor>allow z\\<rfloor>\n       | \\<lfloor>deny y\\<rfloor> \\<Rightarrow> True", "by(auto split: option.split decision.split)"], ["", "lemma \"A\\<^sub>I \\<sqsubseteq>\\<^sub>A p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A\\<^sub>I \\<sqsubseteq>\\<^sub>A p", "unfolding more_permissive_def allow_all_fun_def allow_pfun_def allow_all_id_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       case p x of \\<bottom> \\<Rightarrow> True\n       | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n           \\<exists>z.\n              (case (id \\<circ> Some) x of \\<bottom> \\<Rightarrow> \\<bottom>\n               | \\<lfloor>y\\<rfloor> \\<Rightarrow>\n                   \\<lfloor>allow y\\<rfloor>) =\n              \\<lfloor>allow z\\<rfloor>\n       | \\<lfloor>deny y\\<rfloor> \\<Rightarrow> True", "by(auto split: option.split decision.split)"], ["", "subsection\\<open>Combined Data-Policy Refinement\\<close>"], ["", "definition policy_refinement :: \n  \"('a \\<mapsto> 'b) \\<Rightarrow> ('a' \\<Rightarrow> 'a) \\<Rightarrow>('b' \\<Rightarrow> 'b) \\<Rightarrow> ('a' \\<mapsto> 'b') \\<Rightarrow> bool\" \n  (\"_ \\<sqsubseteq>\\<^bsub>_\\<^esub>\\<^sub>,\\<^bsub>_\\<^esub> _\" [50,50,50,50]50)\n  where     \"p \\<sqsubseteq>\\<^bsub>abs\\<^sub>a\\<^esub>\\<^sub>,\\<^bsub>abs\\<^sub>b\\<^esub> q \\<equiv> \n              (\\<forall> a. case p a of \n                      \\<bottom> \\<Rightarrow> True\n                    | \\<lfloor>allow y\\<rfloor> \\<Rightarrow> (\\<forall> a'\\<in>{x. abs\\<^sub>a x=a}. \n                                     \\<exists> b'.  q a' = \\<lfloor>allow b'\\<rfloor>\n                                            \\<and> abs\\<^sub>b b' = y)\n                    | \\<lfloor>deny y\\<rfloor> \\<Rightarrow> (\\<forall> a'\\<in>{x. abs\\<^sub>a x=a}. \n                                     \\<exists> b'.  q a' = \\<lfloor>deny b'\\<rfloor>\n                                            \\<and> abs\\<^sub>b b' = y))\""], ["", "theorem polref_refl: \"p \\<sqsubseteq>\\<^bsub>id\\<^esub>\\<^sub>,\\<^bsub>id\\<^esub> p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<sqsubseteq>\\<^bsub>id\\<^esub>\\<^sub>,\\<^bsub>id\\<^esub> p", "unfolding policy_refinement_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a.\n       case p a of \\<bottom> \\<Rightarrow> True\n       | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n           \\<forall>a'\\<in>{x. id x = a}.\n              \\<exists>b'.\n                 p a' = \\<lfloor>allow b'\\<rfloor> \\<and> id b' = y\n       | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n           \\<forall>a'\\<in>{x. id x = a}.\n              \\<exists>b'. p a' = \\<lfloor>deny b'\\<rfloor> \\<and> id b' = y", "by(auto split: option.split decision.split)"], ["", "theorem polref_trans: \n  assumes A: \"p \\<sqsubseteq>\\<^bsub>f\\<^esub>\\<^sub>,\\<^bsub>g\\<^esub> p'\"\n    and     B: \"p' \\<sqsubseteq>\\<^bsub>f'\\<^esub>\\<^sub>,\\<^bsub>g'\\<^esub> p''\"\n  shows   \"p \\<sqsubseteq>\\<^bsub>f o f'\\<^esub>\\<^sub>,\\<^bsub>g o g'\\<^esub> p''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<sqsubseteq>\\<^bsub>f \\<circ>\n                           f'\\<^esub>\\<^sub>,\\<^bsub>g \\<circ>\n               g'\\<^esub> p''", "apply(insert A B)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<sqsubseteq>\\<^bsub>f\\<^esub>\\<^sub>,\\<^bsub>g\\<^esub> p';\n     p' \\<sqsubseteq>\\<^bsub>f'\\<^esub>\\<^sub>,\\<^bsub>g'\\<^esub> p''\\<rbrakk>\n    \\<Longrightarrow> p \\<sqsubseteq>\\<^bsub>f \\<circ>\n       f'\\<^esub>\\<^sub>,\\<^bsub>g \\<circ> g'\\<^esub> p''", "unfolding policy_refinement_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a.\n                case p a of \\<bottom> \\<Rightarrow> True\n                | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n                    \\<forall>a'\\<in>{x. f x = a}.\n                       \\<exists>b'.\n                          p' a' = \\<lfloor>allow b'\\<rfloor> \\<and> g b' = y\n                | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n                    \\<forall>a'\\<in>{x. f x = a}.\n                       \\<exists>b'.\n                          p' a' = \\<lfloor>deny b'\\<rfloor> \\<and> g b' = y;\n     \\<forall>a.\n        case p' a of \\<bottom> \\<Rightarrow> True\n        | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n            \\<forall>a'\\<in>{x. f' x = a}.\n               \\<exists>b'.\n                  p'' a' = \\<lfloor>allow b'\\<rfloor> \\<and> g' b' = y\n        | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n            \\<forall>a'\\<in>{x. f' x = a}.\n               \\<exists>b'.\n                  p'' a' = \\<lfloor>deny b'\\<rfloor> \\<and>\n                  g' b' = y\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a.\n                         case p a of \\<bottom> \\<Rightarrow> True\n                         | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n                             \\<forall>a'\\<in>{x. (f \\<circ> f') x = a}.\n                                \\<exists>b'.\n                                   p'' a' =\n                                   \\<lfloor>allow b'\\<rfloor> \\<and>\n                                   (g \\<circ> g') b' = y\n                         | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n                             \\<forall>a'\\<in>{x. (f \\<circ> f') x = a}.\n                                \\<exists>b'.\n                                   p'' a' = \\<lfloor>deny b'\\<rfloor> \\<and>\n                                   (g \\<circ> g') b' = y", "apply(auto split: option.split decision.split simp: o_def)[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 a'.\n       \\<lbrakk>\\<forall>a.\n                   case p a of \\<bottom> \\<Rightarrow> True\n                   | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n                       \\<forall>a'\\<in>{x. f x = a}.\n                          \\<exists>b'.\n                             p' a' = \\<lfloor>allow b'\\<rfloor> \\<and>\n                             g b' = y\n                   | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n                       \\<forall>a'\\<in>{x. f x = a}.\n                          \\<exists>b'.\n                             p' a' = \\<lfloor>deny b'\\<rfloor> \\<and>\n                             g b' = y;\n        \\<forall>a.\n           case p' a of \\<bottom> \\<Rightarrow> True\n           | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n               \\<forall>a'\\<in>{x. f' x = a}.\n                  \\<exists>b'.\n                     p'' a' = \\<lfloor>allow b'\\<rfloor> \\<and> g' b' = y\n           | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n               \\<forall>a'\\<in>{x. f' x = a}.\n                  \\<exists>b'.\n                     p'' a' = \\<lfloor>deny b'\\<rfloor> \\<and> g' b' = y;\n        p (f (f' a')) = \\<lfloor>allow x1\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b'.\n                            p'' a' = \\<lfloor>allow b'\\<rfloor> \\<and>\n                            g (g' b') = x1\n 2. \\<And>x2a a'.\n       \\<lbrakk>\\<forall>a.\n                   case p a of \\<bottom> \\<Rightarrow> True\n                   | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n                       \\<forall>a'\\<in>{x. f x = a}.\n                          \\<exists>b'.\n                             p' a' = \\<lfloor>allow b'\\<rfloor> \\<and>\n                             g b' = y\n                   | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n                       \\<forall>a'\\<in>{x. f x = a}.\n                          \\<exists>b'.\n                             p' a' = \\<lfloor>deny b'\\<rfloor> \\<and>\n                             g b' = y;\n        \\<forall>a.\n           case p' a of \\<bottom> \\<Rightarrow> True\n           | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n               \\<forall>a'\\<in>{x. f' x = a}.\n                  \\<exists>b'.\n                     p'' a' = \\<lfloor>allow b'\\<rfloor> \\<and> g' b' = y\n           | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n               \\<forall>a'\\<in>{x. f' x = a}.\n                  \\<exists>b'.\n                     p'' a' = \\<lfloor>deny b'\\<rfloor> \\<and> g' b' = y;\n        p (f (f' a')) = \\<lfloor>deny x2a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b'.\n                            p'' a' = \\<lfloor>deny b'\\<rfloor> \\<and>\n                            g (g' b') = x2a", "subgoal for a a'"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a.\n                case p a of \\<bottom> \\<Rightarrow> True\n                | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n                    \\<forall>a'\\<in>{x. f x = a}.\n                       \\<exists>b'.\n                          p' a' = \\<lfloor>allow b'\\<rfloor> \\<and> g b' = y\n                | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n                    \\<forall>a'\\<in>{x. f x = a}.\n                       \\<exists>b'.\n                          p' a' = \\<lfloor>deny b'\\<rfloor> \\<and> g b' = y;\n     \\<forall>a.\n        case p' a of \\<bottom> \\<Rightarrow> True\n        | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n            \\<forall>a'\\<in>{x. f' x = a}.\n               \\<exists>b'.\n                  p'' a' = \\<lfloor>allow b'\\<rfloor> \\<and> g' b' = y\n        | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n            \\<forall>a'\\<in>{x. f' x = a}.\n               \\<exists>b'.\n                  p'' a' = \\<lfloor>deny b'\\<rfloor> \\<and> g' b' = y;\n     p (f (f' a')) = \\<lfloor>allow a\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>b'.\n                         p'' a' = \\<lfloor>allow b'\\<rfloor> \\<and>\n                         g (g' b') = a", "apply(erule_tac x=\"f (f' a')\" in allE, simp)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a.\n                case p' a of \\<bottom> \\<Rightarrow> True\n                | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n                    \\<forall>a'\\<in>{x. f' x = a}.\n                       \\<exists>b'.\n                          p'' a' = \\<lfloor>allow b'\\<rfloor> \\<and>\n                          g' b' = y\n                | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n                    \\<forall>a'\\<in>{x. f' x = a}.\n                       \\<exists>b'.\n                          p'' a' = \\<lfloor>deny b'\\<rfloor> \\<and>\n                          g' b' = y;\n     p (f (f' a')) = \\<lfloor>allow a\\<rfloor>;\n     \\<forall>a'a.\n        f a'a = f (f' a') \\<longrightarrow>\n        (\\<exists>b'.\n            p' a'a = \\<lfloor>allow b'\\<rfloor> \\<and> g b' = a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>b'.\n                         p'' a' = \\<lfloor>allow b'\\<rfloor> \\<and>\n                         g (g' b') = a", "apply(erule_tac x=\"f' a'\" in allE, auto)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b'.\n       \\<lbrakk>\\<forall>a.\n                   case p' a of \\<bottom> \\<Rightarrow> True\n                   | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n                       \\<forall>a'\\<in>{x. f' x = a}.\n                          \\<exists>b'.\n                             p'' a' = \\<lfloor>allow b'\\<rfloor> \\<and>\n                             g' b' = y\n                   | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n                       \\<forall>a'\\<in>{x. f' x = a}.\n                          \\<exists>b'.\n                             p'' a' = \\<lfloor>deny b'\\<rfloor> \\<and>\n                             g' b' = y;\n        p (f (f' a')) = \\<lfloor>allow (g b')\\<rfloor>;\n        p' (f' a') = \\<lfloor>allow b'\\<rfloor>; a = g b'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b'a.\n                            p'' a' = \\<lfloor>allow b'a\\<rfloor> \\<and>\n                            g (g' b'a) = g b'", "apply(erule_tac x=\" (f' a')\" in allE, auto)[1]"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2a a'.\n       \\<lbrakk>\\<forall>a.\n                   case p a of \\<bottom> \\<Rightarrow> True\n                   | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n                       \\<forall>a'\\<in>{x. f x = a}.\n                          \\<exists>b'.\n                             p' a' = \\<lfloor>allow b'\\<rfloor> \\<and>\n                             g b' = y\n                   | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n                       \\<forall>a'\\<in>{x. f x = a}.\n                          \\<exists>b'.\n                             p' a' = \\<lfloor>deny b'\\<rfloor> \\<and>\n                             g b' = y;\n        \\<forall>a.\n           case p' a of \\<bottom> \\<Rightarrow> True\n           | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n               \\<forall>a'\\<in>{x. f' x = a}.\n                  \\<exists>b'.\n                     p'' a' = \\<lfloor>allow b'\\<rfloor> \\<and> g' b' = y\n           | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n               \\<forall>a'\\<in>{x. f' x = a}.\n                  \\<exists>b'.\n                     p'' a' = \\<lfloor>deny b'\\<rfloor> \\<and> g' b' = y;\n        p (f (f' a')) = \\<lfloor>deny x2a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b'.\n                            p'' a' = \\<lfloor>deny b'\\<rfloor> \\<and>\n                            g (g' b') = x2a", "subgoal for a a'"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a.\n                case p a of \\<bottom> \\<Rightarrow> True\n                | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n                    \\<forall>a'\\<in>{x. f x = a}.\n                       \\<exists>b'.\n                          p' a' = \\<lfloor>allow b'\\<rfloor> \\<and> g b' = y\n                | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n                    \\<forall>a'\\<in>{x. f x = a}.\n                       \\<exists>b'.\n                          p' a' = \\<lfloor>deny b'\\<rfloor> \\<and> g b' = y;\n     \\<forall>a.\n        case p' a of \\<bottom> \\<Rightarrow> True\n        | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n            \\<forall>a'\\<in>{x. f' x = a}.\n               \\<exists>b'.\n                  p'' a' = \\<lfloor>allow b'\\<rfloor> \\<and> g' b' = y\n        | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n            \\<forall>a'\\<in>{x. f' x = a}.\n               \\<exists>b'.\n                  p'' a' = \\<lfloor>deny b'\\<rfloor> \\<and> g' b' = y;\n     p (f (f' a')) = \\<lfloor>deny a\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>b'.\n                         p'' a' = \\<lfloor>deny b'\\<rfloor> \\<and>\n                         g (g' b') = a", "apply(erule_tac x=\"f (f' a')\" in allE, simp)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a.\n                case p' a of \\<bottom> \\<Rightarrow> True\n                | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n                    \\<forall>a'\\<in>{x. f' x = a}.\n                       \\<exists>b'.\n                          p'' a' = \\<lfloor>allow b'\\<rfloor> \\<and>\n                          g' b' = y\n                | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n                    \\<forall>a'\\<in>{x. f' x = a}.\n                       \\<exists>b'.\n                          p'' a' = \\<lfloor>deny b'\\<rfloor> \\<and>\n                          g' b' = y;\n     p (f (f' a')) = \\<lfloor>deny a\\<rfloor>;\n     \\<forall>a'a.\n        f a'a = f (f' a') \\<longrightarrow>\n        (\\<exists>b'.\n            p' a'a = \\<lfloor>deny b'\\<rfloor> \\<and> g b' = a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>b'.\n                         p'' a' = \\<lfloor>deny b'\\<rfloor> \\<and>\n                         g (g' b') = a", "apply(erule_tac x=\"f' a'\" in allE, auto)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b'.\n       \\<lbrakk>\\<forall>a.\n                   case p' a of \\<bottom> \\<Rightarrow> True\n                   | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n                       \\<forall>a'\\<in>{x. f' x = a}.\n                          \\<exists>b'.\n                             p'' a' = \\<lfloor>allow b'\\<rfloor> \\<and>\n                             g' b' = y\n                   | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n                       \\<forall>a'\\<in>{x. f' x = a}.\n                          \\<exists>b'.\n                             p'' a' = \\<lfloor>deny b'\\<rfloor> \\<and>\n                             g' b' = y;\n        p (f (f' a')) = \\<lfloor>deny (g b')\\<rfloor>;\n        p' (f' a') = \\<lfloor>deny b'\\<rfloor>; a = g b'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b'a.\n                            p'' a' = \\<lfloor>deny b'a\\<rfloor> \\<and>\n                            g (g' b'a) = g b'", "apply(erule_tac x=\" (f' a')\" in allE, auto)[1]"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Equivalence of Policies\\<close>"], ["", "subsubsection\\<open>Equivalence over domain D\\<close>"], ["", "definition p_eq_dom :: \"('a \\<mapsto> 'b) \\<Rightarrow> 'a set \\<Rightarrow> ('a \\<mapsto> 'b) \\<Rightarrow>bool\" (\"_ \\<approx>\\<^bsub>_\\<^esub> _\" [60,60,60]60)\n  where     \"p \\<approx>\\<^bsub>D\\<^esub> q  = (\\<forall>x\\<in>D. p x = q x)\""], ["", "text\\<open>p and q have no conflicts\\<close>"], ["", "definition no_conflicts :: \"('a \\<mapsto> 'b) \\<Rightarrow>('a \\<mapsto> 'b)  \\<Rightarrow>bool\" where\n  \"no_conflicts p q = (dom p = dom q \\<and> (\\<forall>x\\<in>(dom p). \n    (case p x of \\<lfloor>allow y\\<rfloor> \\<Rightarrow> (\\<exists>z. q x = \\<lfloor>allow z\\<rfloor>)\n               | \\<lfloor>deny y\\<rfloor> \\<Rightarrow> (\\<exists>z. q x = \\<lfloor>deny z\\<rfloor>))))\""], ["", "lemma policy_eq:\n  assumes p_over_qA: \"p \\<sqsubseteq>\\<^sub>A q \"\n    and  q_over_pA:    \"q \\<sqsubseteq>\\<^sub>A p\" \n    and  p_over_qD:    \"q \\<sqsubseteq>\\<^sub>D p\" \n    and  q_over_pD:    \"p \\<sqsubseteq>\\<^sub>D q\" \n    and  dom_eq:       \"dom p = dom q\"\n  shows                \"no_conflicts p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. no_conflicts p q", "apply (insert p_over_qA q_over_pA p_over_qD q_over_pD dom_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<sqsubseteq>\\<^sub>A q; q \\<sqsubseteq>\\<^sub>A p;\n     q \\<sqsubseteq>\\<^sub>D p; p \\<sqsubseteq>\\<^sub>D q;\n     dom p = dom q\\<rbrakk>\n    \\<Longrightarrow> no_conflicts p q", "apply (simp add:  no_conflicts_def more_permissive_def more_rejective_def\n      split: option.splits decision.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x x2.\n                p x = \\<lfloor>x2\\<rfloor> \\<longrightarrow>\n                (\\<forall>x2a. x2 \\<noteq> deny x2a) \\<or>\n                (\\<exists>z. q x = \\<lfloor>deny z\\<rfloor>);\n     \\<forall>x x2.\n        q x = \\<lfloor>x2\\<rfloor> \\<longrightarrow>\n        (\\<forall>x2a. x2 \\<noteq> deny x2a) \\<or>\n        (\\<exists>z. p x = \\<lfloor>deny z\\<rfloor>);\n     dom p = dom q;\n     \\<forall>x x2.\n        q x = \\<lfloor>x2\\<rfloor> \\<longrightarrow>\n        (\\<forall>x1. x2 \\<noteq> allow x1) \\<or>\n        (\\<exists>z. p x = \\<lfloor>allow z\\<rfloor>);\n     \\<forall>x x2.\n        p x = \\<lfloor>x2\\<rfloor> \\<longrightarrow>\n        (\\<forall>x1. x2 \\<noteq> allow x1) \\<or>\n        (\\<exists>z. q x = \\<lfloor>allow z\\<rfloor>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>dom q.\n                         (p x = \\<bottom> \\<longrightarrow>\n                          undefined) \\<and>\n                         (\\<forall>x2.\n                             (\\<forall>x1.\n                                 x2 = allow x1 \\<longrightarrow>\n                                 p x =\n                                 \\<lfloor>allow\n     x1\\<rfloor> \\<longrightarrow>\n                                 (\\<exists>z.\n                                     q x =\n                                     \\<lfloor>allow z\\<rfloor>)) \\<and>\n                             (\\<forall>x2a.\n                                 x2 = deny x2a \\<longrightarrow>\n                                 p x =\n                                 \\<lfloor>deny\n     x2a\\<rfloor> \\<longrightarrow>\n                                 (\\<exists>z.\n                                     q x = \\<lfloor>deny z\\<rfloor>)))", "apply (safe)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>\\<forall>x x2.\n                   p x = \\<lfloor>x2\\<rfloor> \\<longrightarrow>\n                   (\\<forall>x2a. x2 \\<noteq> deny x2a) \\<or>\n                   (\\<exists>z. q x = \\<lfloor>deny z\\<rfloor>);\n        \\<forall>x x2.\n           q x = \\<lfloor>x2\\<rfloor> \\<longrightarrow>\n           (\\<forall>x2a. x2 \\<noteq> deny x2a) \\<or>\n           (\\<exists>z. p x = \\<lfloor>deny z\\<rfloor>);\n        dom p = dom q;\n        \\<forall>x x2.\n           q x = \\<lfloor>x2\\<rfloor> \\<longrightarrow>\n           (\\<forall>x1. x2 \\<noteq> allow x1) \\<or>\n           (\\<exists>z. p x = \\<lfloor>allow z\\<rfloor>);\n        \\<forall>x x2.\n           p x = \\<lfloor>x2\\<rfloor> \\<longrightarrow>\n           (\\<forall>x1. x2 \\<noteq> allow x1) \\<or>\n           (\\<exists>z. q x = \\<lfloor>allow z\\<rfloor>);\n        q x = \\<lfloor>y\\<rfloor>; p x = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> undefined\n 2. \\<And>x y x2 x1.\n       \\<lbrakk>\\<forall>x x2.\n                   p x = \\<lfloor>x2\\<rfloor> \\<longrightarrow>\n                   (\\<forall>x2a. x2 \\<noteq> deny x2a) \\<or>\n                   (\\<exists>z. q x = \\<lfloor>deny z\\<rfloor>);\n        \\<forall>x x2.\n           q x = \\<lfloor>x2\\<rfloor> \\<longrightarrow>\n           (\\<forall>x2a. x2 \\<noteq> deny x2a) \\<or>\n           (\\<exists>z. p x = \\<lfloor>deny z\\<rfloor>);\n        dom p = dom q;\n        \\<forall>x x2.\n           q x = \\<lfloor>x2\\<rfloor> \\<longrightarrow>\n           (\\<forall>x1. x2 \\<noteq> allow x1) \\<or>\n           (\\<exists>z. p x = \\<lfloor>allow z\\<rfloor>);\n        \\<forall>x x2.\n           p x = \\<lfloor>x2\\<rfloor> \\<longrightarrow>\n           (\\<forall>x1. x2 \\<noteq> allow x1) \\<or>\n           (\\<exists>z. q x = \\<lfloor>allow z\\<rfloor>);\n        q x = \\<lfloor>y\\<rfloor>; p x = \\<lfloor>allow x1\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z. q x = \\<lfloor>allow z\\<rfloor>\n 3. \\<And>x y x2 x2a.\n       \\<lbrakk>\\<forall>x x2.\n                   p x = \\<lfloor>x2\\<rfloor> \\<longrightarrow>\n                   (\\<forall>x2a. x2 \\<noteq> deny x2a) \\<or>\n                   (\\<exists>z. q x = \\<lfloor>deny z\\<rfloor>);\n        \\<forall>x x2.\n           q x = \\<lfloor>x2\\<rfloor> \\<longrightarrow>\n           (\\<forall>x2a. x2 \\<noteq> deny x2a) \\<or>\n           (\\<exists>z. p x = \\<lfloor>deny z\\<rfloor>);\n        dom p = dom q;\n        \\<forall>x x2.\n           q x = \\<lfloor>x2\\<rfloor> \\<longrightarrow>\n           (\\<forall>x1. x2 \\<noteq> allow x1) \\<or>\n           (\\<exists>z. p x = \\<lfloor>allow z\\<rfloor>);\n        \\<forall>x x2.\n           p x = \\<lfloor>x2\\<rfloor> \\<longrightarrow>\n           (\\<forall>x1. x2 \\<noteq> allow x1) \\<or>\n           (\\<exists>z. q x = \\<lfloor>allow z\\<rfloor>);\n        q x = \\<lfloor>y\\<rfloor>; p x = \\<lfloor>deny x2a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z. q x = \\<lfloor>deny z\\<rfloor>", "apply (metis domI domIff dom_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y x2 x1.\n       \\<lbrakk>\\<forall>x x2.\n                   p x = \\<lfloor>x2\\<rfloor> \\<longrightarrow>\n                   (\\<forall>x2a. x2 \\<noteq> deny x2a) \\<or>\n                   (\\<exists>z. q x = \\<lfloor>deny z\\<rfloor>);\n        \\<forall>x x2.\n           q x = \\<lfloor>x2\\<rfloor> \\<longrightarrow>\n           (\\<forall>x2a. x2 \\<noteq> deny x2a) \\<or>\n           (\\<exists>z. p x = \\<lfloor>deny z\\<rfloor>);\n        dom p = dom q;\n        \\<forall>x x2.\n           q x = \\<lfloor>x2\\<rfloor> \\<longrightarrow>\n           (\\<forall>x1. x2 \\<noteq> allow x1) \\<or>\n           (\\<exists>z. p x = \\<lfloor>allow z\\<rfloor>);\n        \\<forall>x x2.\n           p x = \\<lfloor>x2\\<rfloor> \\<longrightarrow>\n           (\\<forall>x1. x2 \\<noteq> allow x1) \\<or>\n           (\\<exists>z. q x = \\<lfloor>allow z\\<rfloor>);\n        q x = \\<lfloor>y\\<rfloor>; p x = \\<lfloor>allow x1\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z. q x = \\<lfloor>allow z\\<rfloor>\n 2. \\<And>x y x2 x2a.\n       \\<lbrakk>\\<forall>x x2.\n                   p x = \\<lfloor>x2\\<rfloor> \\<longrightarrow>\n                   (\\<forall>x2a. x2 \\<noteq> deny x2a) \\<or>\n                   (\\<exists>z. q x = \\<lfloor>deny z\\<rfloor>);\n        \\<forall>x x2.\n           q x = \\<lfloor>x2\\<rfloor> \\<longrightarrow>\n           (\\<forall>x2a. x2 \\<noteq> deny x2a) \\<or>\n           (\\<exists>z. p x = \\<lfloor>deny z\\<rfloor>);\n        dom p = dom q;\n        \\<forall>x x2.\n           q x = \\<lfloor>x2\\<rfloor> \\<longrightarrow>\n           (\\<forall>x1. x2 \\<noteq> allow x1) \\<or>\n           (\\<exists>z. p x = \\<lfloor>allow z\\<rfloor>);\n        \\<forall>x x2.\n           p x = \\<lfloor>x2\\<rfloor> \\<longrightarrow>\n           (\\<forall>x1. x2 \\<noteq> allow x1) \\<or>\n           (\\<exists>z. q x = \\<lfloor>allow z\\<rfloor>);\n        q x = \\<lfloor>y\\<rfloor>; p x = \\<lfloor>deny x2a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z. q x = \\<lfloor>deny z\\<rfloor>", "apply (metis)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection\\<open>Miscellaneous\\<close>"], ["", "lemma dom_inter: \"\\<lbrakk>dom p \\<inter> dom q = {}; p x = \\<lfloor>y\\<rfloor>\\<rbrakk> \\<Longrightarrow> q x = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>dom p \\<inter> dom q = {}; p x = \\<lfloor>y\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> q x = \\<bottom>", "by (auto)"], ["", "lemma dom_eq: \"dom p \\<inter> dom q = {} \\<Longrightarrow> p \\<Oplus>\\<^sub>A q = p \\<Oplus>\\<^sub>D q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom p \\<inter> dom q = {} \\<Longrightarrow>\n    p \\<Oplus>\\<^sub>A q = p \\<Oplus>\\<^sub>D q", "unfolding override_A_def override_D_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dom p \\<inter> dom q = {} \\<Longrightarrow>\n    (\\<lambda>x.\n        case q x of \\<bottom> \\<Rightarrow> p x\n        | \\<lfloor>allow a\\<rfloor> \\<Rightarrow> \\<lfloor>allow a\\<rfloor>\n        | \\<lfloor>deny a\\<rfloor> \\<Rightarrow>\n            case p x of \\<bottom> \\<Rightarrow> \\<lfloor>deny a\\<rfloor>\n            | \\<lfloor>allow b\\<rfloor> \\<Rightarrow>\n                \\<lfloor>allow b\\<rfloor>\n            | \\<lfloor>deny \\<alpha>\\<rfloor> \\<Rightarrow>\n                \\<lfloor>deny a\\<rfloor>) =\n    (\\<lambda>x.\n        case q x of \\<bottom> \\<Rightarrow> p x\n        | \\<lfloor>allow a\\<rfloor> \\<Rightarrow>\n            case p x of \\<bottom> \\<Rightarrow> \\<lfloor>allow a\\<rfloor>\n            | \\<lfloor>allow \\<alpha>\\<rfloor> \\<Rightarrow>\n                \\<lfloor>allow a\\<rfloor>\n            | \\<lfloor>deny b\\<rfloor> \\<Rightarrow>\n                \\<lfloor>deny b\\<rfloor>\n        | \\<lfloor>deny a\\<rfloor> \\<Rightarrow> \\<lfloor>deny a\\<rfloor>)", "by (rule ext, auto simp: dom_def split: prod.splits option.splits decision.splits )"], ["", "lemma dom_split_alt_def : \"(f, g) \\<Delta> p = (dom(p \\<triangleright> Allow) \\<triangleleft> (A\\<^sub>f f)) \\<Oplus> (dom(p \\<triangleright> Deny) \\<triangleleft> (D\\<^sub>f g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f, g) \\<Delta> p =\n    (dom (p \\<triangleright> Allow) \\<triangleleft> A\\<^sub>f f) \\<Oplus>\n    (dom (p \\<triangleright> Deny) \\<triangleleft> D\\<^sub>f g)", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       ((f, g) \\<Delta> p) x =\n       ((dom (p \\<triangleright> Allow) \\<triangleleft>\n         A\\<^sub>f f) \\<Oplus>\n        (dom (p \\<triangleright> Deny) \\<triangleleft> D\\<^sub>f g))\n        x", "apply (simp add: dom_split2_def Allow_def Deny_def dom_restrict_def\n      deny_all_fun_def allow_all_fun_def map_add_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (x \\<in> dom (p \\<triangleright> range deny) \\<longrightarrow>\n        (x \\<in> dom (p \\<triangleright> range allow) \\<longrightarrow>\n         (case p x of \\<bottom> \\<Rightarrow> \\<bottom>\n          | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n              \\<lfloor>allow (fst (f, g) x)\\<rfloor>\n          | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n              \\<lfloor>deny (snd (f, g) x)\\<rfloor>) =\n         (case (A\\<^sub>p (Some \\<circ> f)) x of\n          \\<bottom> \\<Rightarrow> (D\\<^sub>p (Some \\<circ> g)) x\n          | \\<lfloor>x\\<rfloor> \\<Rightarrow> \\<lfloor>x\\<rfloor>)) \\<and>\n        (x \\<notin> dom (p \\<triangleright> range allow) \\<longrightarrow>\n         (case p x of \\<bottom> \\<Rightarrow> \\<bottom>\n          | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n              \\<lfloor>allow (fst (f, g) x)\\<rfloor>\n          | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n              \\<lfloor>deny (snd (f, g) x)\\<rfloor>) =\n         (D\\<^sub>p (Some \\<circ> g)) x)) \\<and>\n       (x \\<notin> dom (p \\<triangleright> range deny) \\<longrightarrow>\n        (x \\<in> dom (p \\<triangleright> range allow) \\<longrightarrow>\n         (case p x of \\<bottom> \\<Rightarrow> \\<bottom>\n          | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n              \\<lfloor>allow (fst (f, g) x)\\<rfloor>\n          | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n              \\<lfloor>deny (snd (f, g) x)\\<rfloor>) =\n         (case (A\\<^sub>p (Some \\<circ> f)) x of\n          \\<bottom> \\<Rightarrow> \\<bottom>\n          | \\<lfloor>x\\<rfloor> \\<Rightarrow> \\<lfloor>x\\<rfloor>)) \\<and>\n        (x \\<notin> dom (p \\<triangleright> range allow) \\<longrightarrow>\n         (case p x of \\<bottom> \\<Rightarrow> \\<bottom>\n          | \\<lfloor>allow y\\<rfloor> \\<Rightarrow>\n              \\<lfloor>allow (fst (f, g) x)\\<rfloor>\n          | \\<lfloor>deny y\\<rfloor> \\<Rightarrow>\n              \\<lfloor>deny (snd (f, g) x)\\<rfloor>) =\n         \\<bottom>))", "apply (simp split: option.splits decision.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       ((A\\<^sub>p (Some \\<circ> f)) x = \\<bottom> \\<longrightarrow>\n        (p x = \\<bottom> \\<longrightarrow>\n         x \\<in> dom (p \\<triangleright> range deny) \\<longrightarrow>\n         \\<bottom> = (D\\<^sub>p (Some \\<circ> g)) x) \\<and>\n        (\\<forall>x2.\n            (\\<forall>x1.\n                x2 = allow x1 \\<longrightarrow>\n                p x = \\<lfloor>allow x1\\<rfloor> \\<longrightarrow>\n                (x \\<in> dom (p \\<triangleright>\n                              range deny) \\<longrightarrow>\n                 \\<lfloor>allow (f x)\\<rfloor> =\n                 (D\\<^sub>p (Some \\<circ> g)) x) \\<and>\n                x \\<in> dom (p \\<triangleright> range deny)) \\<and>\n            (\\<forall>x2a.\n                x2 = deny x2a \\<longrightarrow>\n                p x = \\<lfloor>deny x2a\\<rfloor> \\<longrightarrow>\n                (x \\<in> dom (p \\<triangleright>\n                              range deny) \\<longrightarrow>\n                 \\<lfloor>deny (g x)\\<rfloor> =\n                 (D\\<^sub>p (Some \\<circ> g)) x) \\<and>\n                x \\<in> dom (p \\<triangleright> range deny)))) \\<and>\n       (\\<forall>x2.\n           (A\\<^sub>p (Some \\<circ> f)) x =\n           \\<lfloor>x2\\<rfloor> \\<longrightarrow>\n           (p x = \\<bottom> \\<longrightarrow>\n            (x \\<in> dom (p \\<triangleright> range deny) \\<longrightarrow>\n             x \\<notin> dom (p \\<triangleright> range allow) \\<and>\n             (x \\<notin> dom (p \\<triangleright>\n                              range allow) \\<longrightarrow>\n              \\<bottom> = (D\\<^sub>p (Some \\<circ> g)) x)) \\<and>\n            (x \\<notin> dom (p \\<triangleright>\n                             range deny) \\<longrightarrow>\n             x \\<notin> dom (p \\<triangleright> range allow))) \\<and>\n           (\\<forall>x2a.\n               (\\<forall>x1.\n                   x2a = allow x1 \\<longrightarrow>\n                   p x = \\<lfloor>allow x1\\<rfloor> \\<longrightarrow>\n                   (x \\<in> dom (p \\<triangleright>\n                                 range deny) \\<longrightarrow>\n                    (x \\<in> dom (p \\<triangleright>\n                                  range allow) \\<longrightarrow>\n                     allow (f x) = x2) \\<and>\n                    (x \\<notin> dom (p \\<triangleright>\n                                     range allow) \\<longrightarrow>\n                     \\<lfloor>allow (f x)\\<rfloor> =\n                     (D\\<^sub>p (Some \\<circ> g)) x)) \\<and>\n                   (x \\<notin> dom (p \\<triangleright>\n                                    range deny) \\<longrightarrow>\n                    (x \\<in> dom (p \\<triangleright>\n                                  range allow) \\<longrightarrow>\n                     allow (f x) = x2) \\<and>\n                    x \\<in> dom (p \\<triangleright> range allow))) \\<and>\n               (\\<forall>x2b.\n                   x2a = deny x2b \\<longrightarrow>\n                   p x = \\<lfloor>deny x2b\\<rfloor> \\<longrightarrow>\n                   (x \\<in> dom (p \\<triangleright>\n                                 range deny) \\<longrightarrow>\n                    (x \\<in> dom (p \\<triangleright>\n                                  range allow) \\<longrightarrow>\n                     deny (g x) = x2) \\<and>\n                    (x \\<notin> dom (p \\<triangleright>\n                                     range allow) \\<longrightarrow>\n                     \\<lfloor>deny (g x)\\<rfloor> =\n                     (D\\<^sub>p (Some \\<circ> g)) x)) \\<and>\n                   (x \\<notin> dom (p \\<triangleright>\n                                    range deny) \\<longrightarrow>\n                    (x \\<in> dom (p \\<triangleright>\n                                  range allow) \\<longrightarrow>\n                     deny (g x) = x2) \\<and>\n                    x \\<in> dom (p \\<triangleright> range allow)))))", "apply (auto simp: map_add_def o_def deny_pfun_def ran_restrict_def image_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}