{"file_name": "/home/qj213/afp-2021-10-22/thys/Discrete_Summation/Factorials.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Discrete_Summation", "problem_names": ["lemma pochhammer_0 [simp]: \\<comment> \\<open>TODO move\\<close>\n  \"pochhammer 0 n = (0::nat)\" if \"n > 0\"", "lemma ffact_0 [simp]:\n  \"ffact 0 = (\\<lambda>x. 1)\"", "lemma ffact_Suc:\n  \"ffact (Suc n) a = a * ffact n (a - 1)\"\n    for a :: \"'a :: comm_ring_1\"", "lemma ffact_Suc_rev:\n  \"ffact (Suc n) m = (m - of_nat n) * ffact n m\"\n    for m :: \"'a :: {comm_semiring_1_cancel, ab_group_add}\"", "lemma ffact_nat_triv:\n  \"ffact n m = 0\" if \"m < n\"", "lemma ffact_Suc_nat:\n  \"ffact (Suc n) m = m * ffact n (m - 1)\"\n    for m :: nat", "lemma ffact_Suc_rev_nat:\n  \"ffact (Suc n) m = (m - n) * ffact n m\"", "lemma fact_div_fact_ffact:\n  \"fact n div fact m = ffact (n - m) n\" if \"m \\<le> n\"", "lemma fact_div_fact_ffact_nat:\n  \"fact n div fact (n - k) = ffact k n\" if \"k \\<le> n\"", "lemma ffact_fact:\n  \"ffact n (of_nat n) = (of_nat (fact n) :: 'a :: comm_ring_1)\"", "lemma ffact_add_diff_assoc:\n  \"(a - of_nat n) * ffact n a + of_nat n * ffact n a = a * ffact n a\"\n    for a :: \"'a :: comm_ring_1\"", "lemma mult_ffact:\n  \"a * ffact n a = ffact (Suc n) a + of_nat n * ffact n a\"\n    for a :: \"'a :: comm_ring_1\"", "lemma prod_ffact:\n  fixes m :: \"'a :: {ord, ring_1, comm_monoid_mult, comm_semiring_1_cancel}\"\n  shows \"(\\<Prod>i = 0..<n. m - of_nat i) = ffact n m\"", "lemma prod_ffact_nat:\n  fixes m :: nat\n  shows \"(\\<Prod>i = 0..<n. m - i) = ffact n m\"", "lemma prod_rev_ffact:\n  fixes m :: \"'a :: {ord, ring_1, comm_monoid_mult, comm_semiring_1_cancel}\"\n  shows \"(\\<Prod>i = 1..n. m - of_nat n + of_nat i) = ffact n m\"", "lemma prod_rev_ffact_nat:\n  fixes m :: nat\n  assumes \"n \\<le> m\"\n  shows \"(\\<Prod>i = 1..n. m - n + i) = ffact n m\"", "lemma prod_rev_ffact_nat':\n  fixes m :: nat\n  assumes \"n \\<le> m\"\n  shows \"\\<Prod>{m - n + 1..m} = ffact n m\"", "lemma ffact_eq_fact_mult_binomial:\n  \"ffact k n = fact k * (n choose k)\"", "lemma of_nat_ffact:\n  \"of_nat (ffact n m) = ffact n (of_nat m :: 'a :: comm_ring_1)\"", "lemma of_int_ffact:\n  \"of_int (ffact n k) = ffact n (of_int k :: 'a :: comm_ring_1)\"", "lemma ffact_minus:\n  fixes x :: \"'a :: comm_ring_1\"\n  shows \"ffact n (- x) = (- 1) ^ n * pochhammer x n\"", "lemma monomial_ffact:\n  \"a ^ n = (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact k a)\"\n    for a :: \"'a :: comm_ring_1\"", "lemma ffact_monomial:\n  \"ffact n a = (\\<Sum>k = 0..n. (- 1) ^ (n - k) * of_nat (stirling n k) * a ^ k)\"\n    for a :: \"'a :: comm_ring_1\""], "translations": [["", "lemma pochhammer_0 [simp]: \\<comment> \\<open>TODO move\\<close>\n  \"pochhammer 0 n = (0::nat)\" if \"n > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pochhammer 0 n = 0", "using that"], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. pochhammer 0 n = 0", "by (simp add: pochhammer_prod)"], ["", "definition ffact :: \"nat \\<Rightarrow> 'a::comm_semiring_1_cancel \\<Rightarrow> 'a\"\n  where \"ffact n a = pochhammer (a + 1 - of_nat n) n\""], ["", "lemma ffact_0 [simp]:\n  \"ffact 0 = (\\<lambda>x. 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ffact 0 = (\\<lambda>x. 1::'a)", "by (simp add: fun_eq_iff ffact_def)"], ["", "lemma ffact_Suc:\n  \"ffact (Suc n) a = a * ffact n (a - 1)\"\n    for a :: \"'a :: comm_ring_1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ffact (Suc n) a = a * ffact n (a - (1::'a))", "by (simp add: ffact_def pochhammer_prod prod.atLeast0_lessThan_Suc algebra_simps)"], ["", "(* TODO: what's the right class here? *)"], ["", "lemma ffact_Suc_rev:\n  \"ffact (Suc n) m = (m - of_nat n) * ffact n m\"\n    for m :: \"'a :: {comm_semiring_1_cancel, ab_group_add}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ffact (Suc n) m = (m - of_nat n) * ffact n m", "unfolding ffact_def pochhammer_rec"], ["proof (prove)\ngoal (1 subgoal):\n 1. (m + (1::'a) - of_nat (Suc n)) *\n    pochhammer (m + (1::'a) - of_nat (Suc n) + (1::'a)) n =\n    (m - of_nat n) * pochhammer (m + (1::'a) - of_nat n) n", "by (simp add: diff_add_eq)"], ["", "lemma ffact_nat_triv:\n  \"ffact n m = 0\" if \"m < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ffact n m = 0", "using that"], ["proof (prove)\nusing this:\n  m < n\n\ngoal (1 subgoal):\n 1. ffact n m = 0", "by (simp add: ffact_def)"], ["", "lemma ffact_Suc_nat:\n  \"ffact (Suc n) m = m * ffact n (m - 1)\"\n    for m :: nat"], ["proof (prove)\ngoal (1 subgoal):\n 1. ffact (Suc n) m = m * ffact n (m - 1)", "proof (cases \"n \\<le> m\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n \\<le> m \\<Longrightarrow> ffact (Suc n) m = m * ffact n (m - 1)\n 2. \\<not> n \\<le> m \\<Longrightarrow> ffact (Suc n) m = m * ffact n (m - 1)", "case True"], ["proof (state)\nthis:\n  n \\<le> m\n\ngoal (2 subgoals):\n 1. n \\<le> m \\<Longrightarrow> ffact (Suc n) m = m * ffact n (m - 1)\n 2. \\<not> n \\<le> m \\<Longrightarrow> ffact (Suc n) m = m * ffact n (m - 1)", "then"], ["proof (chain)\npicking this:\n  n \\<le> m", "show ?thesis"], ["proof (prove)\nusing this:\n  n \\<le> m\n\ngoal (1 subgoal):\n 1. ffact (Suc n) m = m * ffact n (m - 1)", "by (simp add: ffact_def pochhammer_prod algebra_simps prod.atLeast0_lessThan_Suc)"], ["proof (state)\nthis:\n  ffact (Suc n) m = m * ffact n (m - 1)\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> m \\<Longrightarrow> ffact (Suc n) m = m * ffact n (m - 1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n \\<le> m \\<Longrightarrow> ffact (Suc n) m = m * ffact n (m - 1)", "case False"], ["proof (state)\nthis:\n  \\<not> n \\<le> m\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> m \\<Longrightarrow> ffact (Suc n) m = m * ffact n (m - 1)", "then"], ["proof (chain)\npicking this:\n  \\<not> n \\<le> m", "have \"m < n\""], ["proof (prove)\nusing this:\n  \\<not> n \\<le> m\n\ngoal (1 subgoal):\n 1. m < n", "by simp"], ["proof (state)\nthis:\n  m < n\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> m \\<Longrightarrow> ffact (Suc n) m = m * ffact n (m - 1)", "then"], ["proof (chain)\npicking this:\n  m < n", "show ?thesis"], ["proof (prove)\nusing this:\n  m < n\n\ngoal (1 subgoal):\n 1. ffact (Suc n) m = m * ffact n (m - 1)", "by (simp add: ffact_nat_triv)"], ["proof (state)\nthis:\n  ffact (Suc n) m = m * ffact n (m - 1)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ffact_Suc_rev_nat:\n  \"ffact (Suc n) m = (m - n) * ffact n m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ffact (Suc n) m = (m - n) * ffact n m", "proof (cases \"n \\<le> m\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n \\<le> m \\<Longrightarrow> ffact (Suc n) m = (m - n) * ffact n m\n 2. \\<not> n \\<le> m \\<Longrightarrow> ffact (Suc n) m = (m - n) * ffact n m", "case True"], ["proof (state)\nthis:\n  n \\<le> m\n\ngoal (2 subgoals):\n 1. n \\<le> m \\<Longrightarrow> ffact (Suc n) m = (m - n) * ffact n m\n 2. \\<not> n \\<le> m \\<Longrightarrow> ffact (Suc n) m = (m - n) * ffact n m", "then"], ["proof (chain)\npicking this:\n  n \\<le> m", "show ?thesis"], ["proof (prove)\nusing this:\n  n \\<le> m\n\ngoal (1 subgoal):\n 1. ffact (Suc n) m = (m - n) * ffact n m", "by (simp add: ffact_def pochhammer_rec Suc_diff_le)"], ["proof (state)\nthis:\n  ffact (Suc n) m = (m - n) * ffact n m\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> m \\<Longrightarrow> ffact (Suc n) m = (m - n) * ffact n m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n \\<le> m \\<Longrightarrow> ffact (Suc n) m = (m - n) * ffact n m", "case False"], ["proof (state)\nthis:\n  \\<not> n \\<le> m\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> m \\<Longrightarrow> ffact (Suc n) m = (m - n) * ffact n m", "then"], ["proof (chain)\npicking this:\n  \\<not> n \\<le> m", "have \"m < n\""], ["proof (prove)\nusing this:\n  \\<not> n \\<le> m\n\ngoal (1 subgoal):\n 1. m < n", "by simp"], ["proof (state)\nthis:\n  m < n\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> m \\<Longrightarrow> ffact (Suc n) m = (m - n) * ffact n m", "then"], ["proof (chain)\npicking this:\n  m < n", "show ?thesis"], ["proof (prove)\nusing this:\n  m < n\n\ngoal (1 subgoal):\n 1. ffact (Suc n) m = (m - n) * ffact n m", "by (simp add: ffact_nat_triv)"], ["proof (state)\nthis:\n  ffact (Suc n) m = (m - n) * ffact n m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fact_div_fact_ffact:\n  \"fact n div fact m = ffact (n - m) n\" if \"m \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fact n div fact m = ffact (n - m) n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fact n div fact m = ffact (n - m) n", "from that"], ["proof (chain)\npicking this:\n  m \\<le> n", "have \"fact n = ffact (n - m) n * fact m\""], ["proof (prove)\nusing this:\n  m \\<le> n\n\ngoal (1 subgoal):\n 1. fact n = ffact (n - m) n * fact m", "by (simp add: ffact_def pochhammer_product pochhammer_fact)"], ["proof (state)\nthis:\n  fact n = ffact (n - m) n * fact m\n\ngoal (1 subgoal):\n 1. fact n div fact m = ffact (n - m) n", "moreover"], ["proof (state)\nthis:\n  fact n = ffact (n - m) n * fact m\n\ngoal (1 subgoal):\n 1. fact n div fact m = ffact (n - m) n", "have \"fact m dvd (fact n :: nat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fact m dvd fact n", "using that"], ["proof (prove)\nusing this:\n  m \\<le> n\n\ngoal (1 subgoal):\n 1. fact m dvd fact n", "by (rule fact_dvd)"], ["proof (state)\nthis:\n  fact m dvd fact n\n\ngoal (1 subgoal):\n 1. fact n div fact m = ffact (n - m) n", "ultimately"], ["proof (chain)\npicking this:\n  fact n = ffact (n - m) n * fact m\n  fact m dvd fact n", "show ?thesis"], ["proof (prove)\nusing this:\n  fact n = ffact (n - m) n * fact m\n  fact m dvd fact n\n\ngoal (1 subgoal):\n 1. fact n div fact m = ffact (n - m) n", "by simp"], ["proof (state)\nthis:\n  fact n div fact m = ffact (n - m) n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fact_div_fact_ffact_nat:\n  \"fact n div fact (n - k) = ffact k n\" if \"k \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fact n div fact (n - k) = ffact k n", "using that"], ["proof (prove)\nusing this:\n  k \\<le> n\n\ngoal (1 subgoal):\n 1. fact n div fact (n - k) = ffact k n", "by (simp add: fact_div_fact_ffact)"], ["", "lemma ffact_fact:\n  \"ffact n (of_nat n) = (of_nat (fact n) :: 'a :: comm_ring_1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ffact n (of_nat n) = of_nat (fact n)", "by (induct n) (simp_all add: algebra_simps ffact_Suc)"], ["", "lemma ffact_add_diff_assoc:\n  \"(a - of_nat n) * ffact n a + of_nat n * ffact n a = a * ffact n a\"\n    for a :: \"'a :: comm_ring_1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a - of_nat n) * ffact n a + of_nat n * ffact n a = a * ffact n a", "by (simp add: algebra_simps)"], ["", "lemma mult_ffact:\n  \"a * ffact n a = ffact (Suc n) a + of_nat n * ffact n a\"\n    for a :: \"'a :: comm_ring_1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * ffact n a = ffact (Suc n) a + of_nat n * ffact n a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. a * ffact n a = ffact (Suc n) a + of_nat n * ffact n a", "have \"ffact (Suc n) a + of_nat n * (ffact n a) = (a - of_nat n) * (ffact n a) + of_nat n * (ffact n a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ffact (Suc n) a + of_nat n * ffact n a =\n    (a - of_nat n) * ffact n a + of_nat n * ffact n a", "using ffact_Suc_rev [of n]"], ["proof (prove)\nusing this:\n  ffact (Suc n) ?m = (?m - of_nat n) * ffact n ?m\n\ngoal (1 subgoal):\n 1. ffact (Suc n) a + of_nat n * ffact n a =\n    (a - of_nat n) * ffact n a + of_nat n * ffact n a", "by auto"], ["proof (state)\nthis:\n  ffact (Suc n) a + of_nat n * ffact n a =\n  (a - of_nat n) * ffact n a + of_nat n * ffact n a\n\ngoal (1 subgoal):\n 1. a * ffact n a = ffact (Suc n) a + of_nat n * ffact n a", "also"], ["proof (state)\nthis:\n  ffact (Suc n) a + of_nat n * ffact n a =\n  (a - of_nat n) * ffact n a + of_nat n * ffact n a\n\ngoal (1 subgoal):\n 1. a * ffact n a = ffact (Suc n) a + of_nat n * ffact n a", "have \"\\<dots> = a * ffact n a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a - of_nat n) * ffact n a + of_nat n * ffact n a = a * ffact n a", "using ffact_add_diff_assoc"], ["proof (prove)\nusing this:\n  (?a - of_nat ?n) * ffact ?n ?a + of_nat ?n * ffact ?n ?a =\n  ?a * ffact ?n ?a\n\ngoal (1 subgoal):\n 1. (a - of_nat n) * ffact n a + of_nat n * ffact n a = a * ffact n a", "by (simp add: algebra_simps)"], ["proof (state)\nthis:\n  (a - of_nat n) * ffact n a + of_nat n * ffact n a = a * ffact n a\n\ngoal (1 subgoal):\n 1. a * ffact n a = ffact (Suc n) a + of_nat n * ffact n a", "finally"], ["proof (chain)\npicking this:\n  ffact (Suc n) a + of_nat n * ffact n a = a * ffact n a", "show ?thesis"], ["proof (prove)\nusing this:\n  ffact (Suc n) a + of_nat n * ffact n a = a * ffact n a\n\ngoal (1 subgoal):\n 1. a * ffact n a = ffact (Suc n) a + of_nat n * ffact n a", "by simp"], ["proof (state)\nthis:\n  a * ffact n a = ffact (Suc n) a + of_nat n * ffact n a\n\ngoal:\nNo subgoals!", "qed"], ["", "(* TODO: what's the right class here? *)"], ["", "lemma prod_ffact:\n  fixes m :: \"'a :: {ord, ring_1, comm_monoid_mult, comm_semiring_1_cancel}\"\n  shows \"(\\<Prod>i = 0..<n. m - of_nat i) = ffact n m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>i = 0..<n. m - of_nat i) = ffact n m", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Prod>i = 0..<n. m - of_nat i) = ffact n m", "have \"inj_on (\\<lambda>j. j - 1) {1..n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>j. j - 1) {1..n}", "by (force intro: inj_on_diff_nat)"], ["proof (state)\nthis:\n  inj_on (\\<lambda>j. j - 1) {1..n}\n\ngoal (1 subgoal):\n 1. (\\<Prod>i = 0..<n. m - of_nat i) = ffact n m", "moreover"], ["proof (state)\nthis:\n  inj_on (\\<lambda>j. j - 1) {1..n}\n\ngoal (1 subgoal):\n 1. (\\<Prod>i = 0..<n. m - of_nat i) = ffact n m", "have \"{0..<n} = (\\<lambda>j. j - 1) ` {1..n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..<n} = (\\<lambda>j. j - 1) ` {1..n}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {0..<n} = (\\<lambda>j. j - 1) ` {1..n}", "have \"i \\<in> (\\<lambda>j. j - 1) ` {1..n}\" if \"i \\<in> {0..<n}\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> (\\<lambda>j. j - 1) ` {1..n}", "using that"], ["proof (prove)\nusing this:\n  i \\<in> {0..<n}\n\ngoal (1 subgoal):\n 1. i \\<in> (\\<lambda>j. j - 1) ` {1..n}", "by (auto intro: image_eqI[where x=\"i + 1\"])"], ["proof (state)\nthis:\n  ?i \\<in> {0..<n} \\<Longrightarrow> ?i \\<in> (\\<lambda>j. j - 1) ` {1..n}\n\ngoal (1 subgoal):\n 1. {0..<n} = (\\<lambda>j. j - 1) ` {1..n}", "from this"], ["proof (chain)\npicking this:\n  ?i \\<in> {0..<n} \\<Longrightarrow> ?i \\<in> (\\<lambda>j. j - 1) ` {1..n}", "show ?thesis"], ["proof (prove)\nusing this:\n  ?i \\<in> {0..<n} \\<Longrightarrow> ?i \\<in> (\\<lambda>j. j - 1) ` {1..n}\n\ngoal (1 subgoal):\n 1. {0..<n} = (\\<lambda>j. j - 1) ` {1..n}", "by auto"], ["proof (state)\nthis:\n  {0..<n} = (\\<lambda>j. j - 1) ` {1..n}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {0..<n} = (\\<lambda>j. j - 1) ` {1..n}\n\ngoal (1 subgoal):\n 1. (\\<Prod>i = 0..<n. m - of_nat i) = ffact n m", "moreover"], ["proof (state)\nthis:\n  {0..<n} = (\\<lambda>j. j - 1) ` {1..n}\n\ngoal (1 subgoal):\n 1. (\\<Prod>i = 0..<n. m - of_nat i) = ffact n m", "have \"m - of_nat (i - 1) = m + 1 - of_nat n + of_nat (n - i)\" if \"i \\<in> {1..n}\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. m - of_nat (i - 1) = m + (1::'a) - of_nat n + of_nat (n - i)", "using that"], ["proof (prove)\nusing this:\n  i \\<in> {1..n}\n\ngoal (1 subgoal):\n 1. m - of_nat (i - 1) = m + (1::'a) - of_nat n + of_nat (n - i)", "by (simp add: of_nat_diff)"], ["proof (state)\nthis:\n  ?i \\<in> {1..n} \\<Longrightarrow>\n  m - of_nat (?i - 1) = m + (1::'a) - of_nat n + of_nat (n - ?i)\n\ngoal (1 subgoal):\n 1. (\\<Prod>i = 0..<n. m - of_nat i) = ffact n m", "ultimately"], ["proof (chain)\npicking this:\n  inj_on (\\<lambda>j. j - 1) {1..n}\n  {0..<n} = (\\<lambda>j. j - 1) ` {1..n}\n  ?i \\<in> {1..n} \\<Longrightarrow>\n  m - of_nat (?i - 1) = m + (1::'a) - of_nat n + of_nat (n - ?i)", "have \"(\\<Prod>i = 0..<n. m - of_nat i) = (\\<Prod>i = 1..n. m + 1 - of_nat n + of_nat (n - i))\""], ["proof (prove)\nusing this:\n  inj_on (\\<lambda>j. j - 1) {1..n}\n  {0..<n} = (\\<lambda>j. j - 1) ` {1..n}\n  ?i \\<in> {1..n} \\<Longrightarrow>\n  m - of_nat (?i - 1) = m + (1::'a) - of_nat n + of_nat (n - ?i)\n\ngoal (1 subgoal):\n 1. (\\<Prod>i = 0..<n. m - of_nat i) =\n    (\\<Prod>i = 1..n. m + (1::'a) - of_nat n + of_nat (n - i))", "by (rule prod.reindex_cong)"], ["proof (state)\nthis:\n  (\\<Prod>i = 0..<n. m - of_nat i) =\n  (\\<Prod>i = 1..n. m + (1::'a) - of_nat n + of_nat (n - i))\n\ngoal (1 subgoal):\n 1. (\\<Prod>i = 0..<n. m - of_nat i) = ffact n m", "from this"], ["proof (chain)\npicking this:\n  (\\<Prod>i = 0..<n. m - of_nat i) =\n  (\\<Prod>i = 1..n. m + (1::'a) - of_nat n + of_nat (n - i))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Prod>i = 0..<n. m - of_nat i) =\n  (\\<Prod>i = 1..n. m + (1::'a) - of_nat n + of_nat (n - i))\n\ngoal (1 subgoal):\n 1. (\\<Prod>i = 0..<n. m - of_nat i) = ffact n m", "unfolding ffact_def"], ["proof (prove)\nusing this:\n  (\\<Prod>i = 0..<n. m - of_nat i) =\n  (\\<Prod>i = 1..n. m + (1::'a) - of_nat n + of_nat (n - i))\n\ngoal (1 subgoal):\n 1. (\\<Prod>i = 0..<n. m - of_nat i) = pochhammer (m + (1::'a) - of_nat n) n", "by (simp only: pochhammer_prod_rev)"], ["proof (state)\nthis:\n  (\\<Prod>i = 0..<n. m - of_nat i) = ffact n m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prod_ffact_nat:\n  fixes m :: nat\n  shows \"(\\<Prod>i = 0..<n. m - i) = ffact n m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod ((-) m) {0..<n} = ffact n m", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> prod ((-) m) {0..<n} = ffact n m\n 2. \\<not> ?P \\<Longrightarrow> prod ((-) m) {0..<n} = ffact n m", "assume \"n \\<le> m\""], ["proof (state)\nthis:\n  n \\<le> m\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> prod ((-) m) {0..<n} = ffact n m\n 2. \\<not> ?P \\<Longrightarrow> prod ((-) m) {0..<n} = ffact n m", "have \"inj_on (\\<lambda>j. j - 1) {1..n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>j. j - 1) {1..n}", "by (force intro: inj_on_diff_nat)"], ["proof (state)\nthis:\n  inj_on (\\<lambda>j. j - 1) {1..n}\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> prod ((-) m) {0..<n} = ffact n m\n 2. \\<not> ?P \\<Longrightarrow> prod ((-) m) {0..<n} = ffact n m", "moreover"], ["proof (state)\nthis:\n  inj_on (\\<lambda>j. j - 1) {1..n}\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> prod ((-) m) {0..<n} = ffact n m\n 2. \\<not> ?P \\<Longrightarrow> prod ((-) m) {0..<n} = ffact n m", "have \"{0..<n} = (\\<lambda>j. j - 1) ` {1..n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..<n} = (\\<lambda>j. j - 1) ` {1..n}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {0..<n} = (\\<lambda>j. j - 1) ` {1..n}", "have \"i \\<in> (\\<lambda>j. j - 1) ` {1..n}\" if \"i \\<in> {0..<n}\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> (\\<lambda>j. j - 1) ` {1..n}", "using that"], ["proof (prove)\nusing this:\n  i \\<in> {0..<n}\n\ngoal (1 subgoal):\n 1. i \\<in> (\\<lambda>j. j - 1) ` {1..n}", "by (auto intro: image_eqI[where x=\"i + 1\"])"], ["proof (state)\nthis:\n  ?i \\<in> {0..<n} \\<Longrightarrow> ?i \\<in> (\\<lambda>j. j - 1) ` {1..n}\n\ngoal (1 subgoal):\n 1. {0..<n} = (\\<lambda>j. j - 1) ` {1..n}", "from this"], ["proof (chain)\npicking this:\n  ?i \\<in> {0..<n} \\<Longrightarrow> ?i \\<in> (\\<lambda>j. j - 1) ` {1..n}", "show ?thesis"], ["proof (prove)\nusing this:\n  ?i \\<in> {0..<n} \\<Longrightarrow> ?i \\<in> (\\<lambda>j. j - 1) ` {1..n}\n\ngoal (1 subgoal):\n 1. {0..<n} = (\\<lambda>j. j - 1) ` {1..n}", "by auto"], ["proof (state)\nthis:\n  {0..<n} = (\\<lambda>j. j - 1) ` {1..n}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {0..<n} = (\\<lambda>j. j - 1) ` {1..n}\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> prod ((-) m) {0..<n} = ffact n m\n 2. \\<not> ?P \\<Longrightarrow> prod ((-) m) {0..<n} = ffact n m", "ultimately"], ["proof (chain)\npicking this:\n  inj_on (\\<lambda>j. j - 1) {1..n}\n  {0..<n} = (\\<lambda>j. j - 1) ` {1..n}", "have \"(\\<Prod>i = 0..<n. m - i) = (\\<Prod>i = 1..n. (m + 1) - i)\""], ["proof (prove)\nusing this:\n  inj_on (\\<lambda>j. j - 1) {1..n}\n  {0..<n} = (\\<lambda>j. j - 1) ` {1..n}\n\ngoal (1 subgoal):\n 1. prod ((-) m) {0..<n} = prod ((-) (m + 1)) {1..n}", "by (auto intro: prod.reindex_cong[where l=\"\\<lambda>i. i - 1\"])"], ["proof (state)\nthis:\n  prod ((-) m) {0..<n} = prod ((-) (m + 1)) {1..n}\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> prod ((-) m) {0..<n} = ffact n m\n 2. \\<not> ?P \\<Longrightarrow> prod ((-) m) {0..<n} = ffact n m", "from this \\<open>n \\<le> m\\<close>"], ["proof (chain)\npicking this:\n  prod ((-) m) {0..<n} = prod ((-) (m + 1)) {1..n}\n  n \\<le> m", "show ?thesis"], ["proof (prove)\nusing this:\n  prod ((-) m) {0..<n} = prod ((-) (m + 1)) {1..n}\n  n \\<le> m\n\ngoal (1 subgoal):\n 1. prod ((-) m) {0..<n} = ffact n m", "unfolding ffact_def"], ["proof (prove)\nusing this:\n  prod ((-) m) {0..<n} = prod ((-) (m + 1)) {1..n}\n  n \\<le> m\n\ngoal (1 subgoal):\n 1. prod ((-) m) {0..<n} = pochhammer (m + 1 - of_nat n) n", "by (simp add: pochhammer_prod_rev)"], ["proof (state)\nthis:\n  prod ((-) m) {0..<n} = ffact n m\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> m \\<Longrightarrow> prod ((-) m) {0..<n} = ffact n m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n \\<le> m \\<Longrightarrow> prod ((-) m) {0..<n} = ffact n m", "assume \"\\<not> n \\<le> m\""], ["proof (state)\nthis:\n  \\<not> n \\<le> m\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> m \\<Longrightarrow> prod ((-) m) {0..<n} = ffact n m", "from this"], ["proof (chain)\npicking this:\n  \\<not> n \\<le> m", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> n \\<le> m\n\ngoal (1 subgoal):\n 1. prod ((-) m) {0..<n} = ffact n m", "by (auto simp add: ffact_nat_triv)"], ["proof (state)\nthis:\n  prod ((-) m) {0..<n} = ffact n m\n\ngoal:\nNo subgoals!", "qed"], ["", "(* TODO: what's the right class here? *)"], ["", "lemma prod_rev_ffact:\n  fixes m :: \"'a :: {ord, ring_1, comm_monoid_mult, comm_semiring_1_cancel}\"\n  shows \"(\\<Prod>i = 1..n. m - of_nat n + of_nat i) = ffact n m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>i = 1..n. m - of_nat n + of_nat i) = ffact n m", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Prod>i = 1..n. m - of_nat n + of_nat i) = ffact n m", "have \"inj_on (\\<lambda>i. i + 1) {0..<n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>i. i + 1) {0..<n}", "by simp"], ["proof (state)\nthis:\n  inj_on (\\<lambda>i. i + 1) {0..<n}\n\ngoal (1 subgoal):\n 1. (\\<Prod>i = 1..n. m - of_nat n + of_nat i) = ffact n m", "moreover"], ["proof (state)\nthis:\n  inj_on (\\<lambda>i. i + 1) {0..<n}\n\ngoal (1 subgoal):\n 1. (\\<Prod>i = 1..n. m - of_nat n + of_nat i) = ffact n m", "have \"{1..n} = (\\<lambda>i. i + 1) ` {0..<n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {1..n} = (\\<lambda>i. i + 1) ` {0..<n}", "by auto"], ["proof (state)\nthis:\n  {1..n} = (\\<lambda>i. i + 1) ` {0..<n}\n\ngoal (1 subgoal):\n 1. (\\<Prod>i = 1..n. m - of_nat n + of_nat i) = ffact n m", "moreover"], ["proof (state)\nthis:\n  {1..n} = (\\<lambda>i. i + 1) ` {0..<n}\n\ngoal (1 subgoal):\n 1. (\\<Prod>i = 1..n. m - of_nat n + of_nat i) = ffact n m", "have \"m - of_nat n + of_nat (i + 1) = m + 1 - of_nat n + of_nat i\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. m - of_nat n + of_nat (i + 1) = m + (1::'a) - of_nat n + of_nat i", "by simp"], ["proof (state)\nthis:\n  m - of_nat n + of_nat (?i + 1) = m + (1::'a) - of_nat n + of_nat ?i\n\ngoal (1 subgoal):\n 1. (\\<Prod>i = 1..n. m - of_nat n + of_nat i) = ffact n m", "ultimately"], ["proof (chain)\npicking this:\n  inj_on (\\<lambda>i. i + 1) {0..<n}\n  {1..n} = (\\<lambda>i. i + 1) ` {0..<n}\n  m - of_nat n + of_nat (?i + 1) = m + (1::'a) - of_nat n + of_nat ?i", "have \"(\\<Prod>i = 1..n. m - of_nat n + of_nat i) = (\\<Prod>i = 0..<n. m + 1 - of_nat n + of_nat i)\""], ["proof (prove)\nusing this:\n  inj_on (\\<lambda>i. i + 1) {0..<n}\n  {1..n} = (\\<lambda>i. i + 1) ` {0..<n}\n  m - of_nat n + of_nat (?i + 1) = m + (1::'a) - of_nat n + of_nat ?i\n\ngoal (1 subgoal):\n 1. (\\<Prod>i = 1..n. m - of_nat n + of_nat i) =\n    (\\<Prod>i = 0..<n. m + (1::'a) - of_nat n + of_nat i)", "by (rule prod.reindex_cong[where l=\"\\<lambda>i. i + 1\"])"], ["proof (state)\nthis:\n  (\\<Prod>i = 1..n. m - of_nat n + of_nat i) =\n  (\\<Prod>i = 0..<n. m + (1::'a) - of_nat n + of_nat i)\n\ngoal (1 subgoal):\n 1. (\\<Prod>i = 1..n. m - of_nat n + of_nat i) = ffact n m", "from this"], ["proof (chain)\npicking this:\n  (\\<Prod>i = 1..n. m - of_nat n + of_nat i) =\n  (\\<Prod>i = 0..<n. m + (1::'a) - of_nat n + of_nat i)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Prod>i = 1..n. m - of_nat n + of_nat i) =\n  (\\<Prod>i = 0..<n. m + (1::'a) - of_nat n + of_nat i)\n\ngoal (1 subgoal):\n 1. (\\<Prod>i = 1..n. m - of_nat n + of_nat i) = ffact n m", "unfolding ffact_def"], ["proof (prove)\nusing this:\n  (\\<Prod>i = 1..n. m - of_nat n + of_nat i) =\n  (\\<Prod>i = 0..<n. m + (1::'a) - of_nat n + of_nat i)\n\ngoal (1 subgoal):\n 1. (\\<Prod>i = 1..n. m - of_nat n + of_nat i) =\n    pochhammer (m + (1::'a) - of_nat n) n", "by (simp only: pochhammer_prod)"], ["proof (state)\nthis:\n  (\\<Prod>i = 1..n. m - of_nat n + of_nat i) = ffact n m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prod_rev_ffact_nat:\n  fixes m :: nat\n  assumes \"n \\<le> m\"\n  shows \"(\\<Prod>i = 1..n. m - n + i) = ffact n m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod ((+) (m - n)) {1..n} = ffact n m", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. prod ((+) (m - n)) {1..n} = ffact n m", "have \"inj_on (\\<lambda>i. i + 1) {0..<n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>i. i + 1) {0..<n}", "by simp"], ["proof (state)\nthis:\n  inj_on (\\<lambda>i. i + 1) {0..<n}\n\ngoal (1 subgoal):\n 1. prod ((+) (m - n)) {1..n} = ffact n m", "moreover"], ["proof (state)\nthis:\n  inj_on (\\<lambda>i. i + 1) {0..<n}\n\ngoal (1 subgoal):\n 1. prod ((+) (m - n)) {1..n} = ffact n m", "have \"{1..n} = (\\<lambda>i. i + 1) ` {0..<n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {1..n} = (\\<lambda>i. i + 1) ` {0..<n}", "by auto"], ["proof (state)\nthis:\n  {1..n} = (\\<lambda>i. i + 1) ` {0..<n}\n\ngoal (1 subgoal):\n 1. prod ((+) (m - n)) {1..n} = ffact n m", "moreover"], ["proof (state)\nthis:\n  {1..n} = (\\<lambda>i. i + 1) ` {0..<n}\n\ngoal (1 subgoal):\n 1. prod ((+) (m - n)) {1..n} = ffact n m", "have \"m - n + (i + 1) = m + 1 - n + i\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. m - n + (i + 1) = m + 1 - n + i", "using  \\<open>n \\<le> m\\<close>"], ["proof (prove)\nusing this:\n  n \\<le> m\n\ngoal (1 subgoal):\n 1. m - n + (i + 1) = m + 1 - n + i", "by auto"], ["proof (state)\nthis:\n  m - n + (?i + 1) = m + 1 - n + ?i\n\ngoal (1 subgoal):\n 1. prod ((+) (m - n)) {1..n} = ffact n m", "ultimately"], ["proof (chain)\npicking this:\n  inj_on (\\<lambda>i. i + 1) {0..<n}\n  {1..n} = (\\<lambda>i. i + 1) ` {0..<n}\n  m - n + (?i + 1) = m + 1 - n + ?i", "have \"(\\<Prod>i = 1..n. m - n + i) = (\\<Prod>i = 0..<n. m + 1 - n + i)\""], ["proof (prove)\nusing this:\n  inj_on (\\<lambda>i. i + 1) {0..<n}\n  {1..n} = (\\<lambda>i. i + 1) ` {0..<n}\n  m - n + (?i + 1) = m + 1 - n + ?i\n\ngoal (1 subgoal):\n 1. prod ((+) (m - n)) {1..n} = prod ((+) (m + 1 - n)) {0..<n}", "by (rule prod.reindex_cong)"], ["proof (state)\nthis:\n  prod ((+) (m - n)) {1..n} = prod ((+) (m + 1 - n)) {0..<n}\n\ngoal (1 subgoal):\n 1. prod ((+) (m - n)) {1..n} = ffact n m", "from this"], ["proof (chain)\npicking this:\n  prod ((+) (m - n)) {1..n} = prod ((+) (m + 1 - n)) {0..<n}", "show ?thesis"], ["proof (prove)\nusing this:\n  prod ((+) (m - n)) {1..n} = prod ((+) (m + 1 - n)) {0..<n}\n\ngoal (1 subgoal):\n 1. prod ((+) (m - n)) {1..n} = ffact n m", "unfolding ffact_def"], ["proof (prove)\nusing this:\n  prod ((+) (m - n)) {1..n} = prod ((+) (m + 1 - n)) {0..<n}\n\ngoal (1 subgoal):\n 1. prod ((+) (m - n)) {1..n} = pochhammer (m + 1 - of_nat n) n", "by (simp only: pochhammer_prod of_nat_id)"], ["proof (state)\nthis:\n  prod ((+) (m - n)) {1..n} = ffact n m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prod_rev_ffact_nat':\n  fixes m :: nat\n  assumes \"n \\<le> m\"\n  shows \"\\<Prod>{m - n + 1..m} = ffact n m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Prod>{m - n + 1..m} = ffact n m", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Prod>{m - n + 1..m} = ffact n m", "have \"inj_on (\\<lambda>i. m - n + i) {1::nat..n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on ((+) (m - n)) {1..n}", "by (auto intro: inj_onI)"], ["proof (state)\nthis:\n  inj_on ((+) (m - n)) {1..n}\n\ngoal (1 subgoal):\n 1. \\<Prod>{m - n + 1..m} = ffact n m", "moreover"], ["proof (state)\nthis:\n  inj_on ((+) (m - n)) {1..n}\n\ngoal (1 subgoal):\n 1. \\<Prod>{m - n + 1..m} = ffact n m", "have \"{m - n + 1..m} = (\\<lambda>i. m - n + i) ` {1::nat..n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {m - n + 1..m} = (+) (m - n) ` {1..n}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {m - n + 1..m} = (+) (m - n) ` {1..n}", "have \"i \\<in> (\\<lambda>i. m + i - n) ` {Suc 0..n}\" if \"i \\<in> {m - n + 1..m}\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> (\\<lambda>i. m + i - n) ` {Suc 0..n}", "using that \\<open>n \\<le> m\\<close>"], ["proof (prove)\nusing this:\n  i \\<in> {m - n + 1..m}\n  n \\<le> m\n\ngoal (1 subgoal):\n 1. i \\<in> (\\<lambda>i. m + i - n) ` {Suc 0..n}", "by (auto intro!: image_eqI[where x=\"i - (m - n)\"])"], ["proof (state)\nthis:\n  ?i \\<in> {m - n + 1..m} \\<Longrightarrow>\n  ?i \\<in> (\\<lambda>i. m + i - n) ` {Suc 0..n}\n\ngoal (1 subgoal):\n 1. {m - n + 1..m} = (+) (m - n) ` {1..n}", "with \\<open>n \\<le> m\\<close>"], ["proof (chain)\npicking this:\n  n \\<le> m\n  ?i \\<in> {m - n + 1..m} \\<Longrightarrow>\n  ?i \\<in> (\\<lambda>i. m + i - n) ` {Suc 0..n}", "show ?thesis"], ["proof (prove)\nusing this:\n  n \\<le> m\n  ?i \\<in> {m - n + 1..m} \\<Longrightarrow>\n  ?i \\<in> (\\<lambda>i. m + i - n) ` {Suc 0..n}\n\ngoal (1 subgoal):\n 1. {m - n + 1..m} = (+) (m - n) ` {1..n}", "by auto"], ["proof (state)\nthis:\n  {m - n + 1..m} = (+) (m - n) ` {1..n}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {m - n + 1..m} = (+) (m - n) ` {1..n}\n\ngoal (1 subgoal):\n 1. \\<Prod>{m - n + 1..m} = ffact n m", "moreover"], ["proof (state)\nthis:\n  {m - n + 1..m} = (+) (m - n) ` {1..n}\n\ngoal (1 subgoal):\n 1. \\<Prod>{m - n + 1..m} = ffact n m", "have \"m - n + i = m - n + i\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. m - n + i = m - n + i", ".."], ["proof (state)\nthis:\n  m - n + ?i = m - n + ?i\n\ngoal (1 subgoal):\n 1. \\<Prod>{m - n + 1..m} = ffact n m", "ultimately"], ["proof (chain)\npicking this:\n  inj_on ((+) (m - n)) {1..n}\n  {m - n + 1..m} = (+) (m - n) ` {1..n}\n  m - n + ?i = m - n + ?i", "have \"\\<Prod>{m - n + (1::nat)..m} = (\\<Prod>i = 1..n. m - n + i)\""], ["proof (prove)\nusing this:\n  inj_on ((+) (m - n)) {1..n}\n  {m - n + 1..m} = (+) (m - n) ` {1..n}\n  m - n + ?i = m - n + ?i\n\ngoal (1 subgoal):\n 1. \\<Prod>{m - n + 1..m} = prod ((+) (m - n)) {1..n}", "by (rule prod.reindex_cong)"], ["proof (state)\nthis:\n  \\<Prod>{m - n + 1..m} = prod ((+) (m - n)) {1..n}\n\ngoal (1 subgoal):\n 1. \\<Prod>{m - n + 1..m} = ffact n m", "from this"], ["proof (chain)\npicking this:\n  \\<Prod>{m - n + 1..m} = prod ((+) (m - n)) {1..n}", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Prod>{m - n + 1..m} = prod ((+) (m - n)) {1..n}\n\ngoal (1 subgoal):\n 1. \\<Prod>{m - n + 1..m} = ffact n m", "using \\<open>n \\<le> m\\<close>"], ["proof (prove)\nusing this:\n  \\<Prod>{m - n + 1..m} = prod ((+) (m - n)) {1..n}\n  n \\<le> m\n\ngoal (1 subgoal):\n 1. \\<Prod>{m - n + 1..m} = ffact n m", "by (simp only: prod_rev_ffact_nat)"], ["proof (state)\nthis:\n  \\<Prod>{m - n + 1..m} = ffact n m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ffact_eq_fact_mult_binomial:\n  \"ffact k n = fact k * (n choose k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ffact k n = fact k * (n choose k)", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ffact k n = fact k * (n choose k)\n 2. \\<not> ?P \\<Longrightarrow> ffact k n = fact k * (n choose k)", "assume \"k \\<le> n\""], ["proof (state)\nthis:\n  k \\<le> n\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ffact k n = fact k * (n choose k)\n 2. \\<not> ?P \\<Longrightarrow> ffact k n = fact k * (n choose k)", "have \"ffact k n = fact n div fact (n - k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ffact k n = fact n div fact (n - k)", "using \\<open>k \\<le> n\\<close>"], ["proof (prove)\nusing this:\n  k \\<le> n\n\ngoal (1 subgoal):\n 1. ffact k n = fact n div fact (n - k)", "by (simp add: fact_div_fact_ffact_nat)"], ["proof (state)\nthis:\n  ffact k n = fact n div fact (n - k)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ffact k n = fact k * (n choose k)\n 2. \\<not> ?P \\<Longrightarrow> ffact k n = fact k * (n choose k)", "also"], ["proof (state)\nthis:\n  ffact k n = fact n div fact (n - k)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ffact k n = fact k * (n choose k)\n 2. \\<not> ?P \\<Longrightarrow> ffact k n = fact k * (n choose k)", "have \"\\<dots> = fact k * (n choose k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fact n div fact (n - k) = fact k * (n choose k)", "using \\<open>k \\<le> n\\<close>"], ["proof (prove)\nusing this:\n  k \\<le> n\n\ngoal (1 subgoal):\n 1. fact n div fact (n - k) = fact k * (n choose k)", "by (simp add: binomial_fact_lemma[symmetric])"], ["proof (state)\nthis:\n  fact n div fact (n - k) = fact k * (n choose k)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ffact k n = fact k * (n choose k)\n 2. \\<not> ?P \\<Longrightarrow> ffact k n = fact k * (n choose k)", "finally"], ["proof (chain)\npicking this:\n  ffact k n = fact k * (n choose k)", "show ?thesis"], ["proof (prove)\nusing this:\n  ffact k n = fact k * (n choose k)\n\ngoal (1 subgoal):\n 1. ffact k n = fact k * (n choose k)", "."], ["proof (state)\nthis:\n  ffact k n = fact k * (n choose k)\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> n \\<Longrightarrow> ffact k n = fact k * (n choose k)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> k \\<le> n \\<Longrightarrow> ffact k n = fact k * (n choose k)", "assume \"\\<not> k \\<le> n\""], ["proof (state)\nthis:\n  \\<not> k \\<le> n\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> n \\<Longrightarrow> ffact k n = fact k * (n choose k)", "from this ffact_nat_triv"], ["proof (chain)\npicking this:\n  \\<not> k \\<le> n\n  ?m < ?n \\<Longrightarrow> ffact ?n ?m = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> k \\<le> n\n  ?m < ?n \\<Longrightarrow> ffact ?n ?m = 0\n\ngoal (1 subgoal):\n 1. ffact k n = fact k * (n choose k)", "by force"], ["proof (state)\nthis:\n  ffact k n = fact k * (n choose k)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma of_nat_ffact:\n  \"of_nat (ffact n m) = ffact n (of_nat m :: 'a :: comm_ring_1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_nat (ffact n m) = ffact n (of_nat m)", "proof (induct n arbitrary: m)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>m. of_nat (ffact 0 m) = ffact 0 (of_nat m)\n 2. \\<And>n m.\n       (\\<And>m. of_nat (ffact n m) = ffact n (of_nat m)) \\<Longrightarrow>\n       of_nat (ffact (Suc n) m) = ffact (Suc n) (of_nat m)", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>m. of_nat (ffact 0 m) = ffact 0 (of_nat m)\n 2. \\<And>n m.\n       (\\<And>m. of_nat (ffact n m) = ffact n (of_nat m)) \\<Longrightarrow>\n       of_nat (ffact (Suc n) m) = ffact (Suc n) (of_nat m)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. of_nat (ffact 0 m) = ffact 0 (of_nat m)", "by simp"], ["proof (state)\nthis:\n  of_nat (ffact 0 m) = ffact 0 (of_nat m)\n\ngoal (1 subgoal):\n 1. \\<And>n m.\n       (\\<And>m. of_nat (ffact n m) = ffact n (of_nat m)) \\<Longrightarrow>\n       of_nat (ffact (Suc n) m) = ffact (Suc n) (of_nat m)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n m.\n       (\\<And>m. of_nat (ffact n m) = ffact n (of_nat m)) \\<Longrightarrow>\n       of_nat (ffact (Suc n) m) = ffact (Suc n) (of_nat m)", "case (Suc n)"], ["proof (state)\nthis:\n  of_nat (ffact n ?m) = ffact n (of_nat ?m)\n\ngoal (1 subgoal):\n 1. \\<And>n m.\n       (\\<And>m. of_nat (ffact n m) = ffact n (of_nat m)) \\<Longrightarrow>\n       of_nat (ffact (Suc n) m) = ffact (Suc n) (of_nat m)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. of_nat (ffact (Suc n) m) = ffact (Suc n) (of_nat m)", "proof (cases m)"], ["proof (state)\ngoal (2 subgoals):\n 1. m = 0 \\<Longrightarrow>\n    of_nat (ffact (Suc n) m) = ffact (Suc n) (of_nat m)\n 2. \\<And>nat.\n       m = Suc nat \\<Longrightarrow>\n       of_nat (ffact (Suc n) m) = ffact (Suc n) (of_nat m)", "case 0"], ["proof (state)\nthis:\n  m = 0\n\ngoal (2 subgoals):\n 1. m = 0 \\<Longrightarrow>\n    of_nat (ffact (Suc n) m) = ffact (Suc n) (of_nat m)\n 2. \\<And>nat.\n       m = Suc nat \\<Longrightarrow>\n       of_nat (ffact (Suc n) m) = ffact (Suc n) (of_nat m)", "then"], ["proof (chain)\npicking this:\n  m = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  m = 0\n\ngoal (1 subgoal):\n 1. of_nat (ffact (Suc n) m) = ffact (Suc n) (of_nat m)", "by (simp add: ffact_Suc_nat ffact_Suc)"], ["proof (state)\nthis:\n  of_nat (ffact (Suc n) m) = ffact (Suc n) (of_nat m)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       m = Suc nat \\<Longrightarrow>\n       of_nat (ffact (Suc n) m) = ffact (Suc n) (of_nat m)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       m = Suc nat \\<Longrightarrow>\n       of_nat (ffact (Suc n) m) = ffact (Suc n) (of_nat m)", "case (Suc m)"], ["proof (state)\nthis:\n  ma__ = Suc m\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       ma__ = Suc nat \\<Longrightarrow>\n       of_nat (ffact (Suc n) ma__) = ffact (Suc n) (of_nat ma__)", "with Suc.hyps"], ["proof (chain)\npicking this:\n  of_nat (ffact n ?m) = ffact n (of_nat ?m)\n  ma__ = Suc m", "show ?thesis"], ["proof (prove)\nusing this:\n  of_nat (ffact n ?m) = ffact n (of_nat ?m)\n  ma__ = Suc m\n\ngoal (1 subgoal):\n 1. of_nat (ffact (Suc n) ma__) = ffact (Suc n) (of_nat ma__)", "by (simp add: algebra_simps ffact_Suc_nat ffact_Suc)"], ["proof (state)\nthis:\n  of_nat (ffact (Suc n) ma__) = ffact (Suc n) (of_nat ma__)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  of_nat (ffact (Suc n) m) = ffact (Suc n) (of_nat m)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma of_int_ffact:\n  \"of_int (ffact n k) = ffact n (of_int k :: 'a :: comm_ring_1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_int (ffact n k) = ffact n (of_int k)", "proof (induct n arbitrary: k)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k. of_int (ffact 0 k) = ffact 0 (of_int k)\n 2. \\<And>n k.\n       (\\<And>k. of_int (ffact n k) = ffact n (of_int k)) \\<Longrightarrow>\n       of_int (ffact (Suc n) k) = ffact (Suc n) (of_int k)", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>k. of_int (ffact 0 k) = ffact 0 (of_int k)\n 2. \\<And>n k.\n       (\\<And>k. of_int (ffact n k) = ffact n (of_int k)) \\<Longrightarrow>\n       of_int (ffact (Suc n) k) = ffact (Suc n) (of_int k)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. of_int (ffact 0 k) = ffact 0 (of_int k)", "by simp"], ["proof (state)\nthis:\n  of_int (ffact 0 k) = ffact 0 (of_int k)\n\ngoal (1 subgoal):\n 1. \\<And>n k.\n       (\\<And>k. of_int (ffact n k) = ffact n (of_int k)) \\<Longrightarrow>\n       of_int (ffact (Suc n) k) = ffact (Suc n) (of_int k)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n k.\n       (\\<And>k. of_int (ffact n k) = ffact n (of_int k)) \\<Longrightarrow>\n       of_int (ffact (Suc n) k) = ffact (Suc n) (of_int k)", "case (Suc n k)"], ["proof (state)\nthis:\n  of_int (ffact n ?k) = ffact n (of_int ?k)\n\ngoal (1 subgoal):\n 1. \\<And>n k.\n       (\\<And>k. of_int (ffact n k) = ffact n (of_int k)) \\<Longrightarrow>\n       of_int (ffact (Suc n) k) = ffact (Suc n) (of_int k)", "then"], ["proof (chain)\npicking this:\n  of_int (ffact n ?k) = ffact n (of_int ?k)", "have \"of_int (ffact n (k - 1)) = ffact n (of_int (k - 1) :: 'a)\""], ["proof (prove)\nusing this:\n  of_int (ffact n ?k) = ffact n (of_int ?k)\n\ngoal (1 subgoal):\n 1. of_int (ffact n (k - 1)) = ffact n (of_int (k - 1))", "."], ["proof (state)\nthis:\n  of_int (ffact n (k - 1)) = ffact n (of_int (k - 1))\n\ngoal (1 subgoal):\n 1. \\<And>n k.\n       (\\<And>k. of_int (ffact n k) = ffact n (of_int k)) \\<Longrightarrow>\n       of_int (ffact (Suc n) k) = ffact (Suc n) (of_int k)", "then"], ["proof (chain)\npicking this:\n  of_int (ffact n (k - 1)) = ffact n (of_int (k - 1))", "show ?case"], ["proof (prove)\nusing this:\n  of_int (ffact n (k - 1)) = ffact n (of_int (k - 1))\n\ngoal (1 subgoal):\n 1. of_int (ffact (Suc n) k) = ffact (Suc n) (of_int k)", "by (simp add: ffact_Suc_nat ffact_Suc)"], ["proof (state)\nthis:\n  of_int (ffact (Suc n) k) = ffact (Suc n) (of_int k)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ffact_minus:\n  fixes x :: \"'a :: comm_ring_1\"\n  shows \"ffact n (- x) = (- 1) ^ n * pochhammer x n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ffact n (- x) = (- (1::'a)) ^ n * pochhammer x n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ffact n (- x) = (- (1::'a)) ^ n * pochhammer x n", "have \"ffact n (- x) = pochhammer (- x + 1 - of_nat n) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ffact n (- x) = pochhammer (- x + (1::'a) - of_nat n) n", "unfolding ffact_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. pochhammer (- x + (1::'a) - of_nat n) n =\n    pochhammer (- x + (1::'a) - of_nat n) n", ".."], ["proof (state)\nthis:\n  ffact n (- x) = pochhammer (- x + (1::'a) - of_nat n) n\n\ngoal (1 subgoal):\n 1. ffact n (- x) = (- (1::'a)) ^ n * pochhammer x n", "also"], ["proof (state)\nthis:\n  ffact n (- x) = pochhammer (- x + (1::'a) - of_nat n) n\n\ngoal (1 subgoal):\n 1. ffact n (- x) = (- (1::'a)) ^ n * pochhammer x n", "have \"\\<dots> = pochhammer (- x - of_nat n + 1) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pochhammer (- x + (1::'a) - of_nat n) n =\n    pochhammer (- x - of_nat n + (1::'a)) n", "by (simp add: diff_add_eq)"], ["proof (state)\nthis:\n  pochhammer (- x + (1::'a) - of_nat n) n =\n  pochhammer (- x - of_nat n + (1::'a)) n\n\ngoal (1 subgoal):\n 1. ffact n (- x) = (- (1::'a)) ^ n * pochhammer x n", "also"], ["proof (state)\nthis:\n  pochhammer (- x + (1::'a) - of_nat n) n =\n  pochhammer (- x - of_nat n + (1::'a)) n\n\ngoal (1 subgoal):\n 1. ffact n (- x) = (- (1::'a)) ^ n * pochhammer x n", "have \"\\<dots> = (- 1) ^ n * pochhammer (- (- x)) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pochhammer (- x - of_nat n + (1::'a)) n =\n    (- (1::'a)) ^ n * pochhammer (- (- x)) n", "by (rule pochhammer_minus')"], ["proof (state)\nthis:\n  pochhammer (- x - of_nat n + (1::'a)) n =\n  (- (1::'a)) ^ n * pochhammer (- (- x)) n\n\ngoal (1 subgoal):\n 1. ffact n (- x) = (- (1::'a)) ^ n * pochhammer x n", "also"], ["proof (state)\nthis:\n  pochhammer (- x - of_nat n + (1::'a)) n =\n  (- (1::'a)) ^ n * pochhammer (- (- x)) n\n\ngoal (1 subgoal):\n 1. ffact n (- x) = (- (1::'a)) ^ n * pochhammer x n", "have \"\\<dots> = (- 1) ^ n * pochhammer x n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (- (1::'a)) ^ n * pochhammer (- (- x)) n =\n    (- (1::'a)) ^ n * pochhammer x n", "by simp"], ["proof (state)\nthis:\n  (- (1::'a)) ^ n * pochhammer (- (- x)) n =\n  (- (1::'a)) ^ n * pochhammer x n\n\ngoal (1 subgoal):\n 1. ffact n (- x) = (- (1::'a)) ^ n * pochhammer x n", "finally"], ["proof (chain)\npicking this:\n  ffact n (- x) = (- (1::'a)) ^ n * pochhammer x n", "show ?thesis"], ["proof (prove)\nusing this:\n  ffact n (- x) = (- (1::'a)) ^ n * pochhammer x n\n\ngoal (1 subgoal):\n 1. ffact n (- x) = (- (1::'a)) ^ n * pochhammer x n", "."], ["proof (state)\nthis:\n  ffact n (- x) = (- (1::'a)) ^ n * pochhammer x n\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Conversion of natural potences into falling factorials and back\\<close>"], ["", "lemma monomial_ffact:\n  \"a ^ n = (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact k a)\"\n    for a :: \"'a :: comm_ring_1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a ^ n = (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact k a)", "proof (induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. a ^ 0 = (\\<Sum>k = 0..0. of_nat (Stirling 0 k) * ffact k a)\n 2. \\<And>n.\n       a ^ n =\n       (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact k a) \\<Longrightarrow>\n       a ^ Suc n =\n       (\\<Sum>k = 0..Suc n. of_nat (Stirling (Suc n) k) * ffact k a)", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. a ^ 0 = (\\<Sum>k = 0..0. of_nat (Stirling 0 k) * ffact k a)\n 2. \\<And>n.\n       a ^ n =\n       (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact k a) \\<Longrightarrow>\n       a ^ Suc n =\n       (\\<Sum>k = 0..Suc n. of_nat (Stirling (Suc n) k) * ffact k a)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. a ^ 0 = (\\<Sum>k = 0..0. of_nat (Stirling 0 k) * ffact k a)", "by simp"], ["proof (state)\nthis:\n  a ^ 0 = (\\<Sum>k = 0..0. of_nat (Stirling 0 k) * ffact k a)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       a ^ n =\n       (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact k a) \\<Longrightarrow>\n       a ^ Suc n =\n       (\\<Sum>k = 0..Suc n. of_nat (Stirling (Suc n) k) * ffact k a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       a ^ n =\n       (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact k a) \\<Longrightarrow>\n       a ^ Suc n =\n       (\\<Sum>k = 0..Suc n. of_nat (Stirling (Suc n) k) * ffact k a)", "case (Suc n)"], ["proof (state)\nthis:\n  a ^ n = (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact k a)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       a ^ n =\n       (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact k a) \\<Longrightarrow>\n       a ^ Suc n =\n       (\\<Sum>k = 0..Suc n. of_nat (Stirling (Suc n) k) * ffact k a)", "then"], ["proof (chain)\npicking this:\n  a ^ n = (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact k a)", "have \"a ^ Suc n = a * (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact k a)\""], ["proof (prove)\nusing this:\n  a ^ n = (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact k a)\n\ngoal (1 subgoal):\n 1. a ^ Suc n = a * (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact k a)", "by simp"], ["proof (state)\nthis:\n  a ^ Suc n = a * (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact k a)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       a ^ n =\n       (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact k a) \\<Longrightarrow>\n       a ^ Suc n =\n       (\\<Sum>k = 0..Suc n. of_nat (Stirling (Suc n) k) * ffact k a)", "also"], ["proof (state)\nthis:\n  a ^ Suc n = a * (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact k a)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       a ^ n =\n       (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact k a) \\<Longrightarrow>\n       a ^ Suc n =\n       (\\<Sum>k = 0..Suc n. of_nat (Stirling (Suc n) k) * ffact k a)", "have \"\\<dots> = (\\<Sum>k = 0..n. of_nat (Stirling n k) * (a * ffact k a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact k a) =\n    (\\<Sum>k = 0..n. of_nat (Stirling n k) * (a * ffact k a))", "by (simp add: sum_distrib_left algebra_simps)"], ["proof (state)\nthis:\n  a * (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact k a) =\n  (\\<Sum>k = 0..n. of_nat (Stirling n k) * (a * ffact k a))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       a ^ n =\n       (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact k a) \\<Longrightarrow>\n       a ^ Suc n =\n       (\\<Sum>k = 0..Suc n. of_nat (Stirling (Suc n) k) * ffact k a)", "also"], ["proof (state)\nthis:\n  a * (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact k a) =\n  (\\<Sum>k = 0..n. of_nat (Stirling n k) * (a * ffact k a))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       a ^ n =\n       (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact k a) \\<Longrightarrow>\n       a ^ Suc n =\n       (\\<Sum>k = 0..Suc n. of_nat (Stirling (Suc n) k) * ffact k a)", "have \"\\<dots> = (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact (Suc k) a) +\n    (\\<Sum>k = 0..n. of_nat (Stirling n k) * (of_nat k * ffact k a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..n. of_nat (Stirling n k) * (a * ffact k a)) =\n    (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact (Suc k) a) +\n    (\\<Sum>k = 0..n. of_nat (Stirling n k) * (of_nat k * ffact k a))", "by (simp add: sum.distrib algebra_simps mult_ffact)"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..n. of_nat (Stirling n k) * (a * ffact k a)) =\n  (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact (Suc k) a) +\n  (\\<Sum>k = 0..n. of_nat (Stirling n k) * (of_nat k * ffact k a))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       a ^ n =\n       (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact k a) \\<Longrightarrow>\n       a ^ Suc n =\n       (\\<Sum>k = 0..Suc n. of_nat (Stirling (Suc n) k) * ffact k a)", "also"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..n. of_nat (Stirling n k) * (a * ffact k a)) =\n  (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact (Suc k) a) +\n  (\\<Sum>k = 0..n. of_nat (Stirling n k) * (of_nat k * ffact k a))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       a ^ n =\n       (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact k a) \\<Longrightarrow>\n       a ^ Suc n =\n       (\\<Sum>k = 0..Suc n. of_nat (Stirling (Suc n) k) * ffact k a)", "have \"\\<dots> = (\\<Sum>k = 0.. Suc n. of_nat (Stirling n k) * ffact (Suc k) a) +\n    (\\<Sum>k = 0..Suc n. of_nat ((Suc k) * (Stirling n (Suc k))) * (ffact (Suc k) a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact (Suc k) a) +\n    (\\<Sum>k = 0..n. of_nat (Stirling n k) * (of_nat k * ffact k a)) =\n    (\\<Sum>k = 0..Suc n. of_nat (Stirling n k) * ffact (Suc k) a) +\n    (\\<Sum>k = 0..Suc n.\n        of_nat (Suc k * Stirling n (Suc k)) * ffact (Suc k) a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact (Suc k) a) +\n    (\\<Sum>k = 0..n. of_nat (Stirling n k) * (of_nat k * ffact k a)) =\n    (\\<Sum>k = 0..Suc n. of_nat (Stirling n k) * ffact (Suc k) a) +\n    (\\<Sum>k = 0..Suc n.\n        of_nat (Suc k * Stirling n (Suc k)) * ffact (Suc k) a)", "have \"(\\<Sum>k = 0..n. of_nat (Stirling n k) * (of_nat k * ffact k a)) =\n      (\\<Sum>k = 0..n+2. of_nat (Stirling n k) * (of_nat k * ffact k a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..n. of_nat (Stirling n k) * (of_nat k * ffact k a)) =\n    (\\<Sum>k = 0..n + 2. of_nat (Stirling n k) * (of_nat k * ffact k a))", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..n. of_nat (Stirling n k) * (of_nat k * ffact k a)) =\n  (\\<Sum>k = 0..n + 2. of_nat (Stirling n k) * (of_nat k * ffact k a))\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact (Suc k) a) +\n    (\\<Sum>k = 0..n. of_nat (Stirling n k) * (of_nat k * ffact k a)) =\n    (\\<Sum>k = 0..Suc n. of_nat (Stirling n k) * ffact (Suc k) a) +\n    (\\<Sum>k = 0..Suc n.\n        of_nat (Suc k * Stirling n (Suc k)) * ffact (Suc k) a)", "also"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..n. of_nat (Stirling n k) * (of_nat k * ffact k a)) =\n  (\\<Sum>k = 0..n + 2. of_nat (Stirling n k) * (of_nat k * ffact k a))\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact (Suc k) a) +\n    (\\<Sum>k = 0..n. of_nat (Stirling n k) * (of_nat k * ffact k a)) =\n    (\\<Sum>k = 0..Suc n. of_nat (Stirling n k) * ffact (Suc k) a) +\n    (\\<Sum>k = 0..Suc n.\n        of_nat (Suc k * Stirling n (Suc k)) * ffact (Suc k) a)", "have \"\\<dots> = (\\<Sum>k = Suc 0 .. Suc (Suc n). of_nat (Stirling n k) * (of_nat k * ffact k a)) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..n + 2. of_nat (Stirling n k) * (of_nat k * ffact k a)) =\n    (\\<Sum>k = Suc 0..Suc (Suc n).\n        of_nat (Stirling n k) * (of_nat k * ffact k a))", "by (simp only: sum.atLeast_Suc_atMost [of 0 \"n + 2\"]) simp"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..n + 2. of_nat (Stirling n k) * (of_nat k * ffact k a)) =\n  (\\<Sum>k = Suc 0..Suc (Suc n).\n      of_nat (Stirling n k) * (of_nat k * ffact k a))\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact (Suc k) a) +\n    (\\<Sum>k = 0..n. of_nat (Stirling n k) * (of_nat k * ffact k a)) =\n    (\\<Sum>k = 0..Suc n. of_nat (Stirling n k) * ffact (Suc k) a) +\n    (\\<Sum>k = 0..Suc n.\n        of_nat (Suc k * Stirling n (Suc k)) * ffact (Suc k) a)", "also"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..n + 2. of_nat (Stirling n k) * (of_nat k * ffact k a)) =\n  (\\<Sum>k = Suc 0..Suc (Suc n).\n      of_nat (Stirling n k) * (of_nat k * ffact k a))\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact (Suc k) a) +\n    (\\<Sum>k = 0..n. of_nat (Stirling n k) * (of_nat k * ffact k a)) =\n    (\\<Sum>k = 0..Suc n. of_nat (Stirling n k) * ffact (Suc k) a) +\n    (\\<Sum>k = 0..Suc n.\n        of_nat (Suc k * Stirling n (Suc k)) * ffact (Suc k) a)", "have \"\\<dots> = (\\<Sum>k = 0 .. Suc n. of_nat (Stirling n (Suc k)) * (of_nat (Suc k) * ffact (Suc k) a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = Suc 0..Suc (Suc n).\n        of_nat (Stirling n k) * (of_nat k * ffact k a)) =\n    (\\<Sum>k = 0..Suc n.\n        of_nat (Stirling n (Suc k)) * (of_nat (Suc k) * ffact (Suc k) a))", "by (simp only: image_Suc_atLeastAtMost sum.shift_bounds_cl_Suc_ivl)"], ["proof (state)\nthis:\n  (\\<Sum>k = Suc 0..Suc (Suc n).\n      of_nat (Stirling n k) * (of_nat k * ffact k a)) =\n  (\\<Sum>k = 0..Suc n.\n      of_nat (Stirling n (Suc k)) * (of_nat (Suc k) * ffact (Suc k) a))\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact (Suc k) a) +\n    (\\<Sum>k = 0..n. of_nat (Stirling n k) * (of_nat k * ffact k a)) =\n    (\\<Sum>k = 0..Suc n. of_nat (Stirling n k) * ffact (Suc k) a) +\n    (\\<Sum>k = 0..Suc n.\n        of_nat (Suc k * Stirling n (Suc k)) * ffact (Suc k) a)", "also"], ["proof (state)\nthis:\n  (\\<Sum>k = Suc 0..Suc (Suc n).\n      of_nat (Stirling n k) * (of_nat k * ffact k a)) =\n  (\\<Sum>k = 0..Suc n.\n      of_nat (Stirling n (Suc k)) * (of_nat (Suc k) * ffact (Suc k) a))\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact (Suc k) a) +\n    (\\<Sum>k = 0..n. of_nat (Stirling n k) * (of_nat k * ffact k a)) =\n    (\\<Sum>k = 0..Suc n. of_nat (Stirling n k) * ffact (Suc k) a) +\n    (\\<Sum>k = 0..Suc n.\n        of_nat (Suc k * Stirling n (Suc k)) * ffact (Suc k) a)", "have \"\\<dots> = (\\<Sum>k = 0 .. Suc n. of_nat ((Suc k) * Stirling n (Suc k)) * ffact (Suc k) a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..Suc n.\n        of_nat (Stirling n (Suc k)) * (of_nat (Suc k) * ffact (Suc k) a)) =\n    (\\<Sum>k = 0..Suc n.\n        of_nat (Suc k * Stirling n (Suc k)) * ffact (Suc k) a)", "by (simp only: of_nat_mult algebra_simps)"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..Suc n.\n      of_nat (Stirling n (Suc k)) * (of_nat (Suc k) * ffact (Suc k) a)) =\n  (\\<Sum>k = 0..Suc n.\n      of_nat (Suc k * Stirling n (Suc k)) * ffact (Suc k) a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact (Suc k) a) +\n    (\\<Sum>k = 0..n. of_nat (Stirling n k) * (of_nat k * ffact k a)) =\n    (\\<Sum>k = 0..Suc n. of_nat (Stirling n k) * ffact (Suc k) a) +\n    (\\<Sum>k = 0..Suc n.\n        of_nat (Suc k * Stirling n (Suc k)) * ffact (Suc k) a)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>k = 0..n. of_nat (Stirling n k) * (of_nat k * ffact k a)) =\n  (\\<Sum>k = 0..Suc n.\n      of_nat (Suc k * Stirling n (Suc k)) * ffact (Suc k) a)", "have \"(\\<Sum>k = 0..n. of_nat (Stirling n k) * (of_nat k * ffact k a)) =\n      (\\<Sum>k = 0..Suc n. of_nat (Suc k * Stirling n (Suc k)) * ffact (Suc k) a)\""], ["proof (prove)\nusing this:\n  (\\<Sum>k = 0..n. of_nat (Stirling n k) * (of_nat k * ffact k a)) =\n  (\\<Sum>k = 0..Suc n.\n      of_nat (Suc k * Stirling n (Suc k)) * ffact (Suc k) a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..n. of_nat (Stirling n k) * (of_nat k * ffact k a)) =\n    (\\<Sum>k = 0..Suc n.\n        of_nat (Suc k * Stirling n (Suc k)) * ffact (Suc k) a)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..n. of_nat (Stirling n k) * (of_nat k * ffact k a)) =\n  (\\<Sum>k = 0..Suc n.\n      of_nat (Suc k * Stirling n (Suc k)) * ffact (Suc k) a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact (Suc k) a) +\n    (\\<Sum>k = 0..n. of_nat (Stirling n k) * (of_nat k * ffact k a)) =\n    (\\<Sum>k = 0..Suc n. of_nat (Stirling n k) * ffact (Suc k) a) +\n    (\\<Sum>k = 0..Suc n.\n        of_nat (Suc k * Stirling n (Suc k)) * ffact (Suc k) a)", "then"], ["proof (chain)\npicking this:\n  (\\<Sum>k = 0..n. of_nat (Stirling n k) * (of_nat k * ffact k a)) =\n  (\\<Sum>k = 0..Suc n.\n      of_nat (Suc k * Stirling n (Suc k)) * ffact (Suc k) a)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>k = 0..n. of_nat (Stirling n k) * (of_nat k * ffact k a)) =\n  (\\<Sum>k = 0..Suc n.\n      of_nat (Suc k * Stirling n (Suc k)) * ffact (Suc k) a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact (Suc k) a) +\n    (\\<Sum>k = 0..n. of_nat (Stirling n k) * (of_nat k * ffact k a)) =\n    (\\<Sum>k = 0..Suc n. of_nat (Stirling n k) * ffact (Suc k) a) +\n    (\\<Sum>k = 0..Suc n.\n        of_nat (Suc k * Stirling n (Suc k)) * ffact (Suc k) a)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact (Suc k) a) +\n  (\\<Sum>k = 0..n. of_nat (Stirling n k) * (of_nat k * ffact k a)) =\n  (\\<Sum>k = 0..Suc n. of_nat (Stirling n k) * ffact (Suc k) a) +\n  (\\<Sum>k = 0..Suc n.\n      of_nat (Suc k * Stirling n (Suc k)) * ffact (Suc k) a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact (Suc k) a) +\n  (\\<Sum>k = 0..n. of_nat (Stirling n k) * (of_nat k * ffact k a)) =\n  (\\<Sum>k = 0..Suc n. of_nat (Stirling n k) * ffact (Suc k) a) +\n  (\\<Sum>k = 0..Suc n.\n      of_nat (Suc k * Stirling n (Suc k)) * ffact (Suc k) a)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       a ^ n =\n       (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact k a) \\<Longrightarrow>\n       a ^ Suc n =\n       (\\<Sum>k = 0..Suc n. of_nat (Stirling (Suc n) k) * ffact k a)", "also"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact (Suc k) a) +\n  (\\<Sum>k = 0..n. of_nat (Stirling n k) * (of_nat k * ffact k a)) =\n  (\\<Sum>k = 0..Suc n. of_nat (Stirling n k) * ffact (Suc k) a) +\n  (\\<Sum>k = 0..Suc n.\n      of_nat (Suc k * Stirling n (Suc k)) * ffact (Suc k) a)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       a ^ n =\n       (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact k a) \\<Longrightarrow>\n       a ^ Suc n =\n       (\\<Sum>k = 0..Suc n. of_nat (Stirling (Suc n) k) * ffact k a)", "have \"\\<dots> = (\\<Sum>k = 0..n. of_nat (Stirling (Suc n) (Suc k)) * ffact (Suc k) a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..Suc n. of_nat (Stirling n k) * ffact (Suc k) a) +\n    (\\<Sum>k = 0..Suc n.\n        of_nat (Suc k * Stirling n (Suc k)) * ffact (Suc k) a) =\n    (\\<Sum>k = 0..n. of_nat (Stirling (Suc n) (Suc k)) * ffact (Suc k) a)", "by (simp add: algebra_simps sum.distrib)"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..Suc n. of_nat (Stirling n k) * ffact (Suc k) a) +\n  (\\<Sum>k = 0..Suc n.\n      of_nat (Suc k * Stirling n (Suc k)) * ffact (Suc k) a) =\n  (\\<Sum>k = 0..n. of_nat (Stirling (Suc n) (Suc k)) * ffact (Suc k) a)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       a ^ n =\n       (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact k a) \\<Longrightarrow>\n       a ^ Suc n =\n       (\\<Sum>k = 0..Suc n. of_nat (Stirling (Suc n) k) * ffact k a)", "also"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..Suc n. of_nat (Stirling n k) * ffact (Suc k) a) +\n  (\\<Sum>k = 0..Suc n.\n      of_nat (Suc k * Stirling n (Suc k)) * ffact (Suc k) a) =\n  (\\<Sum>k = 0..n. of_nat (Stirling (Suc n) (Suc k)) * ffact (Suc k) a)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       a ^ n =\n       (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact k a) \\<Longrightarrow>\n       a ^ Suc n =\n       (\\<Sum>k = 0..Suc n. of_nat (Stirling (Suc n) k) * ffact k a)", "have \"\\<dots> = (\\<Sum>k = Suc 0..Suc n. of_nat (Stirling (Suc n) k) * ffact k a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..n. of_nat (Stirling (Suc n) (Suc k)) * ffact (Suc k) a) =\n    (\\<Sum>k = Suc 0..Suc n. of_nat (Stirling (Suc n) k) * ffact k a)", "by (simp only: image_Suc_atLeastAtMost sum.shift_bounds_cl_Suc_ivl)"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..n. of_nat (Stirling (Suc n) (Suc k)) * ffact (Suc k) a) =\n  (\\<Sum>k = Suc 0..Suc n. of_nat (Stirling (Suc n) k) * ffact k a)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       a ^ n =\n       (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact k a) \\<Longrightarrow>\n       a ^ Suc n =\n       (\\<Sum>k = 0..Suc n. of_nat (Stirling (Suc n) k) * ffact k a)", "also"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..n. of_nat (Stirling (Suc n) (Suc k)) * ffact (Suc k) a) =\n  (\\<Sum>k = Suc 0..Suc n. of_nat (Stirling (Suc n) k) * ffact k a)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       a ^ n =\n       (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact k a) \\<Longrightarrow>\n       a ^ Suc n =\n       (\\<Sum>k = 0..Suc n. of_nat (Stirling (Suc n) k) * ffact k a)", "have \"\\<dots> = (\\<Sum>k = 0..Suc n. of_nat (Stirling (Suc n) k) * ffact k a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = Suc 0..Suc n. of_nat (Stirling (Suc n) k) * ffact k a) =\n    (\\<Sum>k = 0..Suc n. of_nat (Stirling (Suc n) k) * ffact k a)", "by (simp only: sum.atLeast_Suc_atMost [of \"0\" \"Suc n\"]) simp"], ["proof (state)\nthis:\n  (\\<Sum>k = Suc 0..Suc n. of_nat (Stirling (Suc n) k) * ffact k a) =\n  (\\<Sum>k = 0..Suc n. of_nat (Stirling (Suc n) k) * ffact k a)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       a ^ n =\n       (\\<Sum>k = 0..n. of_nat (Stirling n k) * ffact k a) \\<Longrightarrow>\n       a ^ Suc n =\n       (\\<Sum>k = 0..Suc n. of_nat (Stirling (Suc n) k) * ffact k a)", "finally"], ["proof (chain)\npicking this:\n  a ^ Suc n = (\\<Sum>k = 0..Suc n. of_nat (Stirling (Suc n) k) * ffact k a)", "show ?case"], ["proof (prove)\nusing this:\n  a ^ Suc n = (\\<Sum>k = 0..Suc n. of_nat (Stirling (Suc n) k) * ffact k a)\n\ngoal (1 subgoal):\n 1. a ^ Suc n =\n    (\\<Sum>k = 0..Suc n. of_nat (Stirling (Suc n) k) * ffact k a)", "by simp"], ["proof (state)\nthis:\n  a ^ Suc n = (\\<Sum>k = 0..Suc n. of_nat (Stirling (Suc n) k) * ffact k a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ffact_monomial:\n  \"ffact n a = (\\<Sum>k = 0..n. (- 1) ^ (n - k) * of_nat (stirling n k) * a ^ k)\"\n    for a :: \"'a :: comm_ring_1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ffact n a =\n    (\\<Sum>k = 0..n. (- (1::'a)) ^ (n - k) * of_nat (stirling n k) * a ^ k)", "proof (induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. ffact 0 a =\n    (\\<Sum>k = 0..0. (- (1::'a)) ^ (0 - k) * of_nat (stirling 0 k) * a ^ k)\n 2. \\<And>n.\n       ffact n a =\n       (\\<Sum>k = 0..n.\n           (- (1::'a)) ^ (n - k) * of_nat (stirling n k) *\n           a ^ k) \\<Longrightarrow>\n       ffact (Suc n) a =\n       (\\<Sum>k = 0..Suc n.\n           (- (1::'a)) ^ (Suc n - k) * of_nat (stirling (Suc n) k) * a ^ k)", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. ffact 0 a =\n    (\\<Sum>k = 0..0. (- (1::'a)) ^ (0 - k) * of_nat (stirling 0 k) * a ^ k)\n 2. \\<And>n.\n       ffact n a =\n       (\\<Sum>k = 0..n.\n           (- (1::'a)) ^ (n - k) * of_nat (stirling n k) *\n           a ^ k) \\<Longrightarrow>\n       ffact (Suc n) a =\n       (\\<Sum>k = 0..Suc n.\n           (- (1::'a)) ^ (Suc n - k) * of_nat (stirling (Suc n) k) * a ^ k)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ffact 0 a =\n    (\\<Sum>k = 0..0. (- (1::'a)) ^ (0 - k) * of_nat (stirling 0 k) * a ^ k)", "by simp"], ["proof (state)\nthis:\n  ffact 0 a =\n  (\\<Sum>k = 0..0. (- (1::'a)) ^ (0 - k) * of_nat (stirling 0 k) * a ^ k)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ffact n a =\n       (\\<Sum>k = 0..n.\n           (- (1::'a)) ^ (n - k) * of_nat (stirling n k) *\n           a ^ k) \\<Longrightarrow>\n       ffact (Suc n) a =\n       (\\<Sum>k = 0..Suc n.\n           (- (1::'a)) ^ (Suc n - k) * of_nat (stirling (Suc n) k) * a ^ k)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       ffact n a =\n       (\\<Sum>k = 0..n.\n           (- (1::'a)) ^ (n - k) * of_nat (stirling n k) *\n           a ^ k) \\<Longrightarrow>\n       ffact (Suc n) a =\n       (\\<Sum>k = 0..Suc n.\n           (- (1::'a)) ^ (Suc n - k) * of_nat (stirling (Suc n) k) * a ^ k)", "case (Suc n)"], ["proof (state)\nthis:\n  ffact n a =\n  (\\<Sum>k = 0..n. (- (1::'a)) ^ (n - k) * of_nat (stirling n k) * a ^ k)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ffact n a =\n       (\\<Sum>k = 0..n.\n           (- (1::'a)) ^ (n - k) * of_nat (stirling n k) *\n           a ^ k) \\<Longrightarrow>\n       ffact (Suc n) a =\n       (\\<Sum>k = 0..Suc n.\n           (- (1::'a)) ^ (Suc n - k) * of_nat (stirling (Suc n) k) * a ^ k)", "then"], ["proof (chain)\npicking this:\n  ffact n a =\n  (\\<Sum>k = 0..n. (- (1::'a)) ^ (n - k) * of_nat (stirling n k) * a ^ k)", "have \"ffact (Suc n) a = (a - of_nat n) * (\\<Sum>k = 0..n. (- 1) ^ (n - k) * of_nat (stirling n k) * a ^ k)\""], ["proof (prove)\nusing this:\n  ffact n a =\n  (\\<Sum>k = 0..n. (- (1::'a)) ^ (n - k) * of_nat (stirling n k) * a ^ k)\n\ngoal (1 subgoal):\n 1. ffact (Suc n) a =\n    (a - of_nat n) *\n    (\\<Sum>k = 0..n. (- (1::'a)) ^ (n - k) * of_nat (stirling n k) * a ^ k)", "by (simp add: ffact_Suc_rev)"], ["proof (state)\nthis:\n  ffact (Suc n) a =\n  (a - of_nat n) *\n  (\\<Sum>k = 0..n. (- (1::'a)) ^ (n - k) * of_nat (stirling n k) * a ^ k)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ffact n a =\n       (\\<Sum>k = 0..n.\n           (- (1::'a)) ^ (n - k) * of_nat (stirling n k) *\n           a ^ k) \\<Longrightarrow>\n       ffact (Suc n) a =\n       (\\<Sum>k = 0..Suc n.\n           (- (1::'a)) ^ (Suc n - k) * of_nat (stirling (Suc n) k) * a ^ k)", "also"], ["proof (state)\nthis:\n  ffact (Suc n) a =\n  (a - of_nat n) *\n  (\\<Sum>k = 0..n. (- (1::'a)) ^ (n - k) * of_nat (stirling n k) * a ^ k)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ffact n a =\n       (\\<Sum>k = 0..n.\n           (- (1::'a)) ^ (n - k) * of_nat (stirling n k) *\n           a ^ k) \\<Longrightarrow>\n       ffact (Suc n) a =\n       (\\<Sum>k = 0..Suc n.\n           (- (1::'a)) ^ (Suc n - k) * of_nat (stirling (Suc n) k) * a ^ k)", "have \"\\<dots> = (\\<Sum>k = 0..n. (- 1) ^ (n - k) * of_nat (stirling n k) * a ^ (Suc k)) +\n    (\\<Sum>k = 0..n. (- 1) * (- 1) ^ (n - k) * of_nat (n * (stirling n k)) * a ^ k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a - of_nat n) *\n    (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (n - k) * of_nat (stirling n k) * a ^ k) =\n    (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (n - k) * of_nat (stirling n k) * a ^ Suc k) +\n    (\\<Sum>k = 0..n.\n        - (1::'a) * (- (1::'a)) ^ (n - k) * of_nat (n * stirling n k) *\n        a ^ k)", "by (simp only: diff_conv_add_uminus distrib_right) (simp add: sum_distrib_left field_simps)"], ["proof (state)\nthis:\n  (a - of_nat n) *\n  (\\<Sum>k = 0..n. (- (1::'a)) ^ (n - k) * of_nat (stirling n k) * a ^ k) =\n  (\\<Sum>k = 0..n.\n      (- (1::'a)) ^ (n - k) * of_nat (stirling n k) * a ^ Suc k) +\n  (\\<Sum>k = 0..n.\n      - (1::'a) * (- (1::'a)) ^ (n - k) * of_nat (n * stirling n k) * a ^ k)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ffact n a =\n       (\\<Sum>k = 0..n.\n           (- (1::'a)) ^ (n - k) * of_nat (stirling n k) *\n           a ^ k) \\<Longrightarrow>\n       ffact (Suc n) a =\n       (\\<Sum>k = 0..Suc n.\n           (- (1::'a)) ^ (Suc n - k) * of_nat (stirling (Suc n) k) * a ^ k)", "also"], ["proof (state)\nthis:\n  (a - of_nat n) *\n  (\\<Sum>k = 0..n. (- (1::'a)) ^ (n - k) * of_nat (stirling n k) * a ^ k) =\n  (\\<Sum>k = 0..n.\n      (- (1::'a)) ^ (n - k) * of_nat (stirling n k) * a ^ Suc k) +\n  (\\<Sum>k = 0..n.\n      - (1::'a) * (- (1::'a)) ^ (n - k) * of_nat (n * stirling n k) * a ^ k)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ffact n a =\n       (\\<Sum>k = 0..n.\n           (- (1::'a)) ^ (n - k) * of_nat (stirling n k) *\n           a ^ k) \\<Longrightarrow>\n       ffact (Suc n) a =\n       (\\<Sum>k = 0..Suc n.\n           (- (1::'a)) ^ (Suc n - k) * of_nat (stirling (Suc n) k) * a ^ k)", "have \"\\<dots> = (\\<Sum>k = 0..n. (- 1) ^ (Suc n - Suc k) * of_nat (stirling n k) * a ^ Suc k) +\n  (\\<Sum>k = 0..n. (- 1) ^ (Suc n - Suc k) * of_nat (n * stirling n (Suc k)) * a ^ Suc k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (n - k) * of_nat (stirling n k) * a ^ Suc k) +\n    (\\<Sum>k = 0..n.\n        - (1::'a) * (- (1::'a)) ^ (n - k) * of_nat (n * stirling n k) *\n        a ^ k) =\n    (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (Suc n - Suc k) * of_nat (stirling n k) * a ^ Suc k) +\n    (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (Suc n - Suc k) * of_nat (n * stirling n (Suc k)) *\n        a ^ Suc k)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (n - k) * of_nat (stirling n k) * a ^ Suc k) +\n    (\\<Sum>k = 0..n.\n        - (1::'a) * (- (1::'a)) ^ (n - k) * of_nat (n * stirling n k) *\n        a ^ k) =\n    (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (Suc n - Suc k) * of_nat (stirling n k) * a ^ Suc k) +\n    (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (Suc n - Suc k) * of_nat (n * stirling n (Suc k)) *\n        a ^ Suc k)", "have \"(\\<Sum>k = 0..n. (- 1) * (- 1) ^ (n - k) * of_nat (n * stirling n k) * a ^ k) =\n      (\\<Sum>k = 0..n. (- 1) ^ (Suc n - k) * of_nat (n * stirling n k) * a ^ k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..n.\n        - (1::'a) * (- (1::'a)) ^ (n - k) * of_nat (n * stirling n k) *\n        a ^ k) =\n    (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (Suc n - k) * of_nat (n * stirling n k) * a ^ k)", "by (simp add: Suc_diff_le)"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..n.\n      - (1::'a) * (- (1::'a)) ^ (n - k) * of_nat (n * stirling n k) *\n      a ^ k) =\n  (\\<Sum>k = 0..n.\n      (- (1::'a)) ^ (Suc n - k) * of_nat (n * stirling n k) * a ^ k)\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (n - k) * of_nat (stirling n k) * a ^ Suc k) +\n    (\\<Sum>k = 0..n.\n        - (1::'a) * (- (1::'a)) ^ (n - k) * of_nat (n * stirling n k) *\n        a ^ k) =\n    (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (Suc n - Suc k) * of_nat (stirling n k) * a ^ Suc k) +\n    (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (Suc n - Suc k) * of_nat (n * stirling n (Suc k)) *\n        a ^ Suc k)", "also"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..n.\n      - (1::'a) * (- (1::'a)) ^ (n - k) * of_nat (n * stirling n k) *\n      a ^ k) =\n  (\\<Sum>k = 0..n.\n      (- (1::'a)) ^ (Suc n - k) * of_nat (n * stirling n k) * a ^ k)\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (n - k) * of_nat (stirling n k) * a ^ Suc k) +\n    (\\<Sum>k = 0..n.\n        - (1::'a) * (- (1::'a)) ^ (n - k) * of_nat (n * stirling n k) *\n        a ^ k) =\n    (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (Suc n - Suc k) * of_nat (stirling n k) * a ^ Suc k) +\n    (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (Suc n - Suc k) * of_nat (n * stirling n (Suc k)) *\n        a ^ Suc k)", "have \"\\<dots> = (\\<Sum>k = Suc 0..Suc n. (- 1) ^ (Suc n - k) * of_nat (n * stirling n k) * a ^ k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (Suc n - k) * of_nat (n * stirling n k) * a ^ k) =\n    (\\<Sum>k = Suc 0..Suc n.\n        (- (1::'a)) ^ (Suc n - k) * of_nat (n * stirling n k) * a ^ k)", "by (simp add: sum.atLeast_Suc_atMost) (cases n; simp)"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..n.\n      (- (1::'a)) ^ (Suc n - k) * of_nat (n * stirling n k) * a ^ k) =\n  (\\<Sum>k = Suc 0..Suc n.\n      (- (1::'a)) ^ (Suc n - k) * of_nat (n * stirling n k) * a ^ k)\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (n - k) * of_nat (stirling n k) * a ^ Suc k) +\n    (\\<Sum>k = 0..n.\n        - (1::'a) * (- (1::'a)) ^ (n - k) * of_nat (n * stirling n k) *\n        a ^ k) =\n    (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (Suc n - Suc k) * of_nat (stirling n k) * a ^ Suc k) +\n    (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (Suc n - Suc k) * of_nat (n * stirling n (Suc k)) *\n        a ^ Suc k)", "also"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..n.\n      (- (1::'a)) ^ (Suc n - k) * of_nat (n * stirling n k) * a ^ k) =\n  (\\<Sum>k = Suc 0..Suc n.\n      (- (1::'a)) ^ (Suc n - k) * of_nat (n * stirling n k) * a ^ k)\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (n - k) * of_nat (stirling n k) * a ^ Suc k) +\n    (\\<Sum>k = 0..n.\n        - (1::'a) * (- (1::'a)) ^ (n - k) * of_nat (n * stirling n k) *\n        a ^ k) =\n    (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (Suc n - Suc k) * of_nat (stirling n k) * a ^ Suc k) +\n    (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (Suc n - Suc k) * of_nat (n * stirling n (Suc k)) *\n        a ^ Suc k)", "have \"\\<dots> = (\\<Sum>k = 0..n. (- 1) ^ (Suc n - Suc k) * of_nat (n * stirling n (Suc k)) * a ^ Suc k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = Suc 0..Suc n.\n        (- (1::'a)) ^ (Suc n - k) * of_nat (n * stirling n k) * a ^ k) =\n    (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (Suc n - Suc k) * of_nat (n * stirling n (Suc k)) *\n        a ^ Suc k)", "by (simp only: sum.shift_bounds_cl_Suc_ivl)"], ["proof (state)\nthis:\n  (\\<Sum>k = Suc 0..Suc n.\n      (- (1::'a)) ^ (Suc n - k) * of_nat (n * stirling n k) * a ^ k) =\n  (\\<Sum>k = 0..n.\n      (- (1::'a)) ^ (Suc n - Suc k) * of_nat (n * stirling n (Suc k)) *\n      a ^ Suc k)\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (n - k) * of_nat (stirling n k) * a ^ Suc k) +\n    (\\<Sum>k = 0..n.\n        - (1::'a) * (- (1::'a)) ^ (n - k) * of_nat (n * stirling n k) *\n        a ^ k) =\n    (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (Suc n - Suc k) * of_nat (stirling n k) * a ^ Suc k) +\n    (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (Suc n - Suc k) * of_nat (n * stirling n (Suc k)) *\n        a ^ Suc k)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>k = 0..n.\n      - (1::'a) * (- (1::'a)) ^ (n - k) * of_nat (n * stirling n k) *\n      a ^ k) =\n  (\\<Sum>k = 0..n.\n      (- (1::'a)) ^ (Suc n - Suc k) * of_nat (n * stirling n (Suc k)) *\n      a ^ Suc k)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>k = 0..n.\n      - (1::'a) * (- (1::'a)) ^ (n - k) * of_nat (n * stirling n k) *\n      a ^ k) =\n  (\\<Sum>k = 0..n.\n      (- (1::'a)) ^ (Suc n - Suc k) * of_nat (n * stirling n (Suc k)) *\n      a ^ Suc k)\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (n - k) * of_nat (stirling n k) * a ^ Suc k) +\n    (\\<Sum>k = 0..n.\n        - (1::'a) * (- (1::'a)) ^ (n - k) * of_nat (n * stirling n k) *\n        a ^ k) =\n    (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (Suc n - Suc k) * of_nat (stirling n k) * a ^ Suc k) +\n    (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (Suc n - Suc k) * of_nat (n * stirling n (Suc k)) *\n        a ^ Suc k)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..n.\n      (- (1::'a)) ^ (n - k) * of_nat (stirling n k) * a ^ Suc k) +\n  (\\<Sum>k = 0..n.\n      - (1::'a) * (- (1::'a)) ^ (n - k) * of_nat (n * stirling n k) *\n      a ^ k) =\n  (\\<Sum>k = 0..n.\n      (- (1::'a)) ^ (Suc n - Suc k) * of_nat (stirling n k) * a ^ Suc k) +\n  (\\<Sum>k = 0..n.\n      (- (1::'a)) ^ (Suc n - Suc k) * of_nat (n * stirling n (Suc k)) *\n      a ^ Suc k)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..n.\n      (- (1::'a)) ^ (n - k) * of_nat (stirling n k) * a ^ Suc k) +\n  (\\<Sum>k = 0..n.\n      - (1::'a) * (- (1::'a)) ^ (n - k) * of_nat (n * stirling n k) *\n      a ^ k) =\n  (\\<Sum>k = 0..n.\n      (- (1::'a)) ^ (Suc n - Suc k) * of_nat (stirling n k) * a ^ Suc k) +\n  (\\<Sum>k = 0..n.\n      (- (1::'a)) ^ (Suc n - Suc k) * of_nat (n * stirling n (Suc k)) *\n      a ^ Suc k)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ffact n a =\n       (\\<Sum>k = 0..n.\n           (- (1::'a)) ^ (n - k) * of_nat (stirling n k) *\n           a ^ k) \\<Longrightarrow>\n       ffact (Suc n) a =\n       (\\<Sum>k = 0..Suc n.\n           (- (1::'a)) ^ (Suc n - k) * of_nat (stirling (Suc n) k) * a ^ k)", "also"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..n.\n      (- (1::'a)) ^ (n - k) * of_nat (stirling n k) * a ^ Suc k) +\n  (\\<Sum>k = 0..n.\n      - (1::'a) * (- (1::'a)) ^ (n - k) * of_nat (n * stirling n k) *\n      a ^ k) =\n  (\\<Sum>k = 0..n.\n      (- (1::'a)) ^ (Suc n - Suc k) * of_nat (stirling n k) * a ^ Suc k) +\n  (\\<Sum>k = 0..n.\n      (- (1::'a)) ^ (Suc n - Suc k) * of_nat (n * stirling n (Suc k)) *\n      a ^ Suc k)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ffact n a =\n       (\\<Sum>k = 0..n.\n           (- (1::'a)) ^ (n - k) * of_nat (stirling n k) *\n           a ^ k) \\<Longrightarrow>\n       ffact (Suc n) a =\n       (\\<Sum>k = 0..Suc n.\n           (- (1::'a)) ^ (Suc n - k) * of_nat (stirling (Suc n) k) * a ^ k)", "have \"\\<dots> = (\\<Sum>k = 0..n. (- 1) ^ (Suc n - Suc k) * of_nat (n * stirling n (Suc k) + stirling n k) * a ^ Suc k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (Suc n - Suc k) * of_nat (stirling n k) * a ^ Suc k) +\n    (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (Suc n - Suc k) * of_nat (n * stirling n (Suc k)) *\n        a ^ Suc k) =\n    (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (Suc n - Suc k) *\n        of_nat (n * stirling n (Suc k) + stirling n k) *\n        a ^ Suc k)", "by (simp add: sum.distrib algebra_simps)"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..n.\n      (- (1::'a)) ^ (Suc n - Suc k) * of_nat (stirling n k) * a ^ Suc k) +\n  (\\<Sum>k = 0..n.\n      (- (1::'a)) ^ (Suc n - Suc k) * of_nat (n * stirling n (Suc k)) *\n      a ^ Suc k) =\n  (\\<Sum>k = 0..n.\n      (- (1::'a)) ^ (Suc n - Suc k) *\n      of_nat (n * stirling n (Suc k) + stirling n k) *\n      a ^ Suc k)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ffact n a =\n       (\\<Sum>k = 0..n.\n           (- (1::'a)) ^ (n - k) * of_nat (stirling n k) *\n           a ^ k) \\<Longrightarrow>\n       ffact (Suc n) a =\n       (\\<Sum>k = 0..Suc n.\n           (- (1::'a)) ^ (Suc n - k) * of_nat (stirling (Suc n) k) * a ^ k)", "also"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..n.\n      (- (1::'a)) ^ (Suc n - Suc k) * of_nat (stirling n k) * a ^ Suc k) +\n  (\\<Sum>k = 0..n.\n      (- (1::'a)) ^ (Suc n - Suc k) * of_nat (n * stirling n (Suc k)) *\n      a ^ Suc k) =\n  (\\<Sum>k = 0..n.\n      (- (1::'a)) ^ (Suc n - Suc k) *\n      of_nat (n * stirling n (Suc k) + stirling n k) *\n      a ^ Suc k)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ffact n a =\n       (\\<Sum>k = 0..n.\n           (- (1::'a)) ^ (n - k) * of_nat (stirling n k) *\n           a ^ k) \\<Longrightarrow>\n       ffact (Suc n) a =\n       (\\<Sum>k = 0..Suc n.\n           (- (1::'a)) ^ (Suc n - k) * of_nat (stirling (Suc n) k) * a ^ k)", "have \"\\<dots> = (\\<Sum>k = 0..n. (- 1) ^ (Suc n - Suc k) * of_nat (stirling (Suc n) (Suc k)) * a ^ Suc k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (Suc n - Suc k) *\n        of_nat (n * stirling n (Suc k) + stirling n k) *\n        a ^ Suc k) =\n    (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (Suc n - Suc k) * of_nat (stirling (Suc n) (Suc k)) *\n        a ^ Suc k)", "by (simp only: stirling.simps)"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..n.\n      (- (1::'a)) ^ (Suc n - Suc k) *\n      of_nat (n * stirling n (Suc k) + stirling n k) *\n      a ^ Suc k) =\n  (\\<Sum>k = 0..n.\n      (- (1::'a)) ^ (Suc n - Suc k) * of_nat (stirling (Suc n) (Suc k)) *\n      a ^ Suc k)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ffact n a =\n       (\\<Sum>k = 0..n.\n           (- (1::'a)) ^ (n - k) * of_nat (stirling n k) *\n           a ^ k) \\<Longrightarrow>\n       ffact (Suc n) a =\n       (\\<Sum>k = 0..Suc n.\n           (- (1::'a)) ^ (Suc n - k) * of_nat (stirling (Suc n) k) * a ^ k)", "also"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..n.\n      (- (1::'a)) ^ (Suc n - Suc k) *\n      of_nat (n * stirling n (Suc k) + stirling n k) *\n      a ^ Suc k) =\n  (\\<Sum>k = 0..n.\n      (- (1::'a)) ^ (Suc n - Suc k) * of_nat (stirling (Suc n) (Suc k)) *\n      a ^ Suc k)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ffact n a =\n       (\\<Sum>k = 0..n.\n           (- (1::'a)) ^ (n - k) * of_nat (stirling n k) *\n           a ^ k) \\<Longrightarrow>\n       ffact (Suc n) a =\n       (\\<Sum>k = 0..Suc n.\n           (- (1::'a)) ^ (Suc n - k) * of_nat (stirling (Suc n) k) * a ^ k)", "have \"\\<dots> = (\\<Sum>k = Suc 0..Suc n. (- 1) ^ (Suc n - k) * of_nat (stirling (Suc n) k) * a ^ k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..n.\n        (- (1::'a)) ^ (Suc n - Suc k) * of_nat (stirling (Suc n) (Suc k)) *\n        a ^ Suc k) =\n    (\\<Sum>k = Suc 0..Suc n.\n        (- (1::'a)) ^ (Suc n - k) * of_nat (stirling (Suc n) k) * a ^ k)", "by (simp only: sum.shift_bounds_cl_Suc_ivl)"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..n.\n      (- (1::'a)) ^ (Suc n - Suc k) * of_nat (stirling (Suc n) (Suc k)) *\n      a ^ Suc k) =\n  (\\<Sum>k = Suc 0..Suc n.\n      (- (1::'a)) ^ (Suc n - k) * of_nat (stirling (Suc n) k) * a ^ k)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ffact n a =\n       (\\<Sum>k = 0..n.\n           (- (1::'a)) ^ (n - k) * of_nat (stirling n k) *\n           a ^ k) \\<Longrightarrow>\n       ffact (Suc n) a =\n       (\\<Sum>k = 0..Suc n.\n           (- (1::'a)) ^ (Suc n - k) * of_nat (stirling (Suc n) k) * a ^ k)", "also"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..n.\n      (- (1::'a)) ^ (Suc n - Suc k) * of_nat (stirling (Suc n) (Suc k)) *\n      a ^ Suc k) =\n  (\\<Sum>k = Suc 0..Suc n.\n      (- (1::'a)) ^ (Suc n - k) * of_nat (stirling (Suc n) k) * a ^ k)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ffact n a =\n       (\\<Sum>k = 0..n.\n           (- (1::'a)) ^ (n - k) * of_nat (stirling n k) *\n           a ^ k) \\<Longrightarrow>\n       ffact (Suc n) a =\n       (\\<Sum>k = 0..Suc n.\n           (- (1::'a)) ^ (Suc n - k) * of_nat (stirling (Suc n) k) * a ^ k)", "have \"\\<dots> = (\\<Sum>k = 0..Suc n. (- 1) ^ (Suc n - k) * of_nat (stirling (Suc n) k) * a ^ k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = Suc 0..Suc n.\n        (- (1::'a)) ^ (Suc n - k) * of_nat (stirling (Suc n) k) * a ^ k) =\n    (\\<Sum>k = 0..Suc n.\n        (- (1::'a)) ^ (Suc n - k) * of_nat (stirling (Suc n) k) * a ^ k)", "by (simp add: sum.atLeast_Suc_atMost)"], ["proof (state)\nthis:\n  (\\<Sum>k = Suc 0..Suc n.\n      (- (1::'a)) ^ (Suc n - k) * of_nat (stirling (Suc n) k) * a ^ k) =\n  (\\<Sum>k = 0..Suc n.\n      (- (1::'a)) ^ (Suc n - k) * of_nat (stirling (Suc n) k) * a ^ k)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ffact n a =\n       (\\<Sum>k = 0..n.\n           (- (1::'a)) ^ (n - k) * of_nat (stirling n k) *\n           a ^ k) \\<Longrightarrow>\n       ffact (Suc n) a =\n       (\\<Sum>k = 0..Suc n.\n           (- (1::'a)) ^ (Suc n - k) * of_nat (stirling (Suc n) k) * a ^ k)", "finally"], ["proof (chain)\npicking this:\n  ffact (Suc n) a =\n  (\\<Sum>k = 0..Suc n.\n      (- (1::'a)) ^ (Suc n - k) * of_nat (stirling (Suc n) k) * a ^ k)", "show ?case"], ["proof (prove)\nusing this:\n  ffact (Suc n) a =\n  (\\<Sum>k = 0..Suc n.\n      (- (1::'a)) ^ (Suc n - k) * of_nat (stirling (Suc n) k) * a ^ k)\n\ngoal (1 subgoal):\n 1. ffact (Suc n) a =\n    (\\<Sum>k = 0..Suc n.\n        (- (1::'a)) ^ (Suc n - k) * of_nat (stirling (Suc n) k) * a ^ k)", "."], ["proof (state)\nthis:\n  ffact (Suc n) a =\n  (\\<Sum>k = 0..Suc n.\n      (- (1::'a)) ^ (Suc n - k) * of_nat (stirling (Suc n) k) * a ^ k)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}