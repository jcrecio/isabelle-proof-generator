{"file_name": "/home/qj213/afp-2021-10-22/thys/Slicing/Dynamic/DynPDG.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Slicing", "problem_names": ["lemma DynPDG_empty_path_eq_nodes:\"n -[]\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow> n = n'\"", "lemma DynPDG_path_cdep:\"n -as\\<rightarrow>\\<^sub>c\\<^sub>d n' \\<Longrightarrow> n -as\\<rightarrow>\\<^sub>d* n'\"", "lemma DynPDG_path_ddep:\"n -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<Longrightarrow> n -as\\<rightarrow>\\<^sub>d* n'\"", "lemma DynPDG_path_Append:\n  \"\\<lbrakk>n'' -as'\\<rightarrow>\\<^sub>d* n'; n -as\\<rightarrow>\\<^sub>d* n''\\<rbrakk> \\<Longrightarrow> n -as@as'\\<rightarrow>\\<^sub>d* n'\"", "lemma DynPDG_path_Exit:\"\\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'; n' = (_Exit_)\\<rbrakk> \\<Longrightarrow> n = (_Exit_)\"", "lemma DynPDG_path_not_inner:\n  \"\\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'; \\<not> inner_node n'\\<rbrakk> \\<Longrightarrow> n = n'\"", "lemma DynPDG_cdep_edge_CFG_path:\n  assumes \"n -as\\<rightarrow>\\<^sub>c\\<^sub>d n'\" shows \"n -as\\<rightarrow>* n'\" and \"as \\<noteq> []\"", "lemma DynPDG_ddep_edge_CFG_path:\n  assumes \"n -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n'\" shows \"n -as\\<rightarrow>* n'\" and \"as \\<noteq> []\"", "lemma DynPDG_path_CFG_path:\n  \"n -as\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow> n -as\\<rightarrow>* n'\"", "lemma DynPDG_path_split: \n  \"n -as\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n  (as = [] \\<and> n = n') \\<or> \n  (\\<exists>n'' asx asx'. (n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'') \\<and> (n'' -asx'\\<rightarrow>\\<^sub>d* n') \\<and> \n        (as = asx@asx')) \\<or>\n  (\\<exists>n'' V asx asx'. (n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'') \\<and> (n'' -asx'\\<rightarrow>\\<^sub>d* n') \\<and> \n        (as = asx@asx'))\"", "lemma DynPDG_path_rev_cases [consumes 1,\n  case_names DynPDG_path_Nil DynPDG_path_cdep_Append DynPDG_path_ddep_Append]:\n  \"\\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'; \\<lbrakk>as = []; n = n'\\<rbrakk> \\<Longrightarrow> Q;\n    \\<And>n'' asx asx'. \\<lbrakk>n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n''; n'' -asx'\\<rightarrow>\\<^sub>d* n'; \n                       as = asx@asx'\\<rbrakk> \\<Longrightarrow> Q;\n    \\<And>V n'' asx asx'. \\<lbrakk>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''; n'' -asx'\\<rightarrow>\\<^sub>d* n'; \n                       as = asx@asx'\\<rbrakk> \\<Longrightarrow> Q\\<rbrakk>\n  \\<Longrightarrow> Q\"", "lemma DynPDG_ddep_edge_no_shorter_ddep_edge:\n  assumes ddep:\"n -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n'\"\n  shows \"\\<forall>as' a as''. tl as = as'@a#as'' \\<longrightarrow> \\<not> sourcenode a -{V}a#as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\"", "lemma no_ddep_same_state:\n  assumes path:\"n -as\\<rightarrow>* n'\" and Uses:\"V \\<in> Use n'\" and preds:\"preds (kinds as) s\"\n  and no_dep:\"\\<forall>as' a as''. as = as'@a#as'' \\<longrightarrow> \\<not> sourcenode a -{V}a#as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\"\n  shows \"state_val (transfers (kinds as) s) V = state_val s V\"", "lemma DynPDG_ddep_edge_only_first_edge:\n  \"\\<lbrakk>n -{V}a#as\\<rightarrow>\\<^sub>d\\<^sub>d n'; preds (kinds (a#as)) s\\<rbrakk> \\<Longrightarrow> \n    state_val (transfers (kinds (a#as)) s) V = state_val (transfer (kind a) s) V\"", "lemma Use_value_change_implies_DynPDG_ddep_edge:\n  assumes \"n -as\\<rightarrow>* n'\" and \"V \\<in> Use n'\" and \"preds (kinds as) s\" \n  and \"preds (kinds as) s'\" and \"state_val s V = state_val s' V\"\n  and \"state_val (transfers (kinds as) s) V \\<noteq> \n             state_val (transfers (kinds as) s') V\"\n  obtains as' a as'' where \"as = as'@a#as''\"\n  and \"sourcenode a -{V}a#as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\"\n  and \"state_val (transfers (kinds as) s) V = \n       state_val (transfers (kinds (as'@[a])) s) V\"\n  and \"state_val (transfers (kinds as) s') V = \n       state_val (transfers (kinds (as'@[a])) s') V\"", "lemma DynPDG_scd:\n  \"DynPDG sourcenode targetnode kind valid_edge (_Entry_) \n          Def Use state_val (_Exit_) dyn_standard_control_dependence\"", "lemma DynPDG_wcd:\n  \"DynPDG sourcenode targetnode kind valid_edge (_Entry_) \n          Def Use state_val (_Exit_) dyn_weak_control_dependence\"", "lemma (in CFGExit_wf) DynPDG_scd:\n  \"DynPDG sourcenode targetnode kind valid_edge (_Entry_)\n          Def Use state_val  (_Exit_) empty_control_dependence\""], "translations": [["", "lemma DynPDG_empty_path_eq_nodes:\"n -[]\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow> n = n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n -[]\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow> n = n'", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. n -[]\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow> n = n'", "apply(erule DynPDG_path.cases)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>na.\n       \\<lbrakk>n = na; [] = []; n' = na; valid_node na\\<rbrakk>\n       \\<Longrightarrow> n = n'\n 2. \\<And>na as n'' as' n'a.\n       \\<lbrakk>n = na; [] = as @ as'; n' = n'a;\n        na -as\\<rightarrow>\\<^sub>d* n'';\n        n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'a\\<rbrakk>\n       \\<Longrightarrow> n = n'\n 3. \\<And>na as n'' V as' n'a.\n       \\<lbrakk>n = na; [] = as @ as'; n' = n'a;\n        na -as\\<rightarrow>\\<^sub>d* n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'a\\<rbrakk>\n       \\<Longrightarrow> n = n'", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na as n'' as' n'a.\n       \\<lbrakk>n = na; [] = as @ as'; n' = n'a;\n        na -as\\<rightarrow>\\<^sub>d* n'';\n        n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'a\\<rbrakk>\n       \\<Longrightarrow> n = n'\n 2. \\<And>na as n'' V as' n'a.\n       \\<lbrakk>n = na; [] = as @ as'; n' = n'a;\n        na -as\\<rightarrow>\\<^sub>d* n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'a\\<rbrakk>\n       \\<Longrightarrow> n = n'", "apply(auto elim:DynPDG_edge.cases dest:dyn_control_dependence_path)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n'' V.\n       \\<lbrakk>n -[]\\<rightarrow>\\<^sub>d* n'';\n        n'' -{V}[]\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> n = n'", "by(auto elim:DynPDG_edge.cases simp:dyn_data_dependence_def)"], ["", "lemma DynPDG_path_cdep:\"n -as\\<rightarrow>\\<^sub>c\\<^sub>d n' \\<Longrightarrow> n -as\\<rightarrow>\\<^sub>d* n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n -as\\<rightarrow>\\<^sub>c\\<^sub>d n' \\<Longrightarrow>\n    n -as\\<rightarrow>\\<^sub>d* n'", "apply(subgoal_tac \"n -[]@as\\<rightarrow>\\<^sub>d* n'\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n -as\\<rightarrow>\\<^sub>c\\<^sub>d n';\n     n -[] @ as\\<rightarrow>\\<^sub>d* n'\\<rbrakk>\n    \\<Longrightarrow> n -as\\<rightarrow>\\<^sub>d* n'\n 2. n -as\\<rightarrow>\\<^sub>c\\<^sub>d n' \\<Longrightarrow>\n    n -[] @ as\\<rightarrow>\\<^sub>d* n'", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. n -as\\<rightarrow>\\<^sub>c\\<^sub>d n' \\<Longrightarrow>\n    n -[] @ as\\<rightarrow>\\<^sub>d* n'", "apply(rule DynPDG_path_Append_cdep, rule DynPDG_path_Nil)"], ["proof (prove)\ngoal (2 subgoals):\n 1. n -as\\<rightarrow>\\<^sub>c\\<^sub>d n' \\<Longrightarrow> valid_node n\n 2. n -as\\<rightarrow>\\<^sub>c\\<^sub>d n' \\<Longrightarrow>\n    n -as\\<rightarrow>\\<^sub>c\\<^sub>d n'", "by(auto elim!:DynPDG_edge.cases dest:dyn_control_dependence_path path_valid_node)"], ["", "lemma DynPDG_path_ddep:\"n -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<Longrightarrow> n -as\\<rightarrow>\\<^sub>d* n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<Longrightarrow>\n    n -as\\<rightarrow>\\<^sub>d* n'", "apply(subgoal_tac \"n -[]@as\\<rightarrow>\\<^sub>d* n'\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n';\n     n -[] @ as\\<rightarrow>\\<^sub>d* n'\\<rbrakk>\n    \\<Longrightarrow> n -as\\<rightarrow>\\<^sub>d* n'\n 2. n -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<Longrightarrow>\n    n -[] @ as\\<rightarrow>\\<^sub>d* n'", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. n -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<Longrightarrow>\n    n -[] @ as\\<rightarrow>\\<^sub>d* n'", "apply(rule DynPDG_path_Append_ddep, rule DynPDG_path_Nil)"], ["proof (prove)\ngoal (2 subgoals):\n 1. n -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<Longrightarrow> valid_node n\n 2. n -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<Longrightarrow>\n    n -{?V1}as\\<rightarrow>\\<^sub>d\\<^sub>d n'", "by(auto elim!:DynPDG_edge.cases dest:path_valid_node simp:dyn_data_dependence_def)"], ["", "lemma DynPDG_path_Append:\n  \"\\<lbrakk>n'' -as'\\<rightarrow>\\<^sub>d* n'; n -as\\<rightarrow>\\<^sub>d* n''\\<rbrakk> \\<Longrightarrow> n -as@as'\\<rightarrow>\\<^sub>d* n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n'' -as'\\<rightarrow>\\<^sub>d* n';\n     n -as\\<rightarrow>\\<^sub>d* n''\\<rbrakk>\n    \\<Longrightarrow> n -as @ as'\\<rightarrow>\\<^sub>d* n'", "apply(induct rule:DynPDG_path.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>na.\n       \\<lbrakk>valid_node na; n -as\\<rightarrow>\\<^sub>d* na\\<rbrakk>\n       \\<Longrightarrow> n -as @ []\\<rightarrow>\\<^sub>d* na\n 2. \\<And>na asa n'' as' n'.\n       \\<lbrakk>na -asa\\<rightarrow>\\<^sub>d* n'';\n        n -as\\<rightarrow>\\<^sub>d* na \\<Longrightarrow>\n        n -as @ asa\\<rightarrow>\\<^sub>d* n'';\n        n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n';\n        n -as\\<rightarrow>\\<^sub>d* na\\<rbrakk>\n       \\<Longrightarrow> n -as @ asa @ as'\\<rightarrow>\\<^sub>d* n'\n 3. \\<And>na asa n'' V as' n'.\n       \\<lbrakk>na -asa\\<rightarrow>\\<^sub>d* n'';\n        n -as\\<rightarrow>\\<^sub>d* na \\<Longrightarrow>\n        n -as @ asa\\<rightarrow>\\<^sub>d* n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        n -as\\<rightarrow>\\<^sub>d* na\\<rbrakk>\n       \\<Longrightarrow> n -as @ asa @ as'\\<rightarrow>\\<^sub>d* n'", "apply(auto intro:DynPDG_path.intros)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na asa n'' as' n'.\n       \\<lbrakk>na -asa\\<rightarrow>\\<^sub>d* n'';\n        n -as @ asa\\<rightarrow>\\<^sub>d* n'';\n        n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n';\n        n -as\\<rightarrow>\\<^sub>d* na\\<rbrakk>\n       \\<Longrightarrow> n -as @ asa @ as'\\<rightarrow>\\<^sub>d* n'\n 2. \\<And>na asa n'' V as' n'.\n       \\<lbrakk>na -asa\\<rightarrow>\\<^sub>d* n'';\n        n -as @ asa\\<rightarrow>\\<^sub>d* n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        n -as\\<rightarrow>\\<^sub>d* na\\<rbrakk>\n       \\<Longrightarrow> n -as @ asa @ as'\\<rightarrow>\\<^sub>d* n'", "apply(rotate_tac 1,drule DynPDG_path_Append_cdep,simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na asa n'' V as' n'.\n       \\<lbrakk>na -asa\\<rightarrow>\\<^sub>d* n'';\n        n -as @ asa\\<rightarrow>\\<^sub>d* n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        n -as\\<rightarrow>\\<^sub>d* na\\<rbrakk>\n       \\<Longrightarrow> n -as @ asa @ as'\\<rightarrow>\\<^sub>d* n'", "apply(rotate_tac 1,drule DynPDG_path_Append_ddep,simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma DynPDG_path_Exit:\"\\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'; n' = (_Exit_)\\<rbrakk> \\<Longrightarrow> n = (_Exit_)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'; n' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n = (_Exit_)", "apply(induct rule:DynPDG_path.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n; n = (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> n = (_Exit_)\n 2. \\<And>n as n'' as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        n'' = (_Exit_) \\<Longrightarrow> n = (_Exit_);\n        n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'; n' = (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> n = (_Exit_)\n 3. \\<And>n as n'' V as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        n'' = (_Exit_) \\<Longrightarrow> n = (_Exit_);\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'; n' = (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> n = (_Exit_)", "by(auto elim:DynPDG_edge.cases dest:Exit_not_dyn_control_dependent \n        simp:dyn_data_dependence_def)"], ["", "lemma DynPDG_path_not_inner:\n  \"\\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'; \\<not> inner_node n'\\<rbrakk> \\<Longrightarrow> n = n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'; \\<not> inner_node n'\\<rbrakk>\n    \\<Longrightarrow> n = n'", "proof(induct rule:DynPDG_path.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n; \\<not> inner_node n\\<rbrakk>\n       \\<Longrightarrow> n = n\n 2. \\<And>n as n'' as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        \\<not> inner_node n'' \\<Longrightarrow> n = n'';\n        n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n';\n        \\<not> inner_node n'\\<rbrakk>\n       \\<Longrightarrow> n = n'\n 3. \\<And>n as n'' V as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        \\<not> inner_node n'' \\<Longrightarrow> n = n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        \\<not> inner_node n'\\<rbrakk>\n       \\<Longrightarrow> n = n'", "case (DynPDG_path_Nil n)"], ["proof (state)\nthis:\n  valid_node n\n  \\<not> inner_node n\n\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n; \\<not> inner_node n\\<rbrakk>\n       \\<Longrightarrow> n = n\n 2. \\<And>n as n'' as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        \\<not> inner_node n'' \\<Longrightarrow> n = n'';\n        n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n';\n        \\<not> inner_node n'\\<rbrakk>\n       \\<Longrightarrow> n = n'\n 3. \\<And>n as n'' V as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        \\<not> inner_node n'' \\<Longrightarrow> n = n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        \\<not> inner_node n'\\<rbrakk>\n       \\<Longrightarrow> n = n'", "thus ?case"], ["proof (prove)\nusing this:\n  valid_node n\n  \\<not> inner_node n\n\ngoal (1 subgoal):\n 1. n = n", "by simp"], ["proof (state)\nthis:\n  n = n\n\ngoal (2 subgoals):\n 1. \\<And>n as n'' as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        \\<not> inner_node n'' \\<Longrightarrow> n = n'';\n        n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n';\n        \\<not> inner_node n'\\<rbrakk>\n       \\<Longrightarrow> n = n'\n 2. \\<And>n as n'' V as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        \\<not> inner_node n'' \\<Longrightarrow> n = n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        \\<not> inner_node n'\\<rbrakk>\n       \\<Longrightarrow> n = n'", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n as n'' as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        \\<not> inner_node n'' \\<Longrightarrow> n = n'';\n        n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n';\n        \\<not> inner_node n'\\<rbrakk>\n       \\<Longrightarrow> n = n'\n 2. \\<And>n as n'' V as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        \\<not> inner_node n'' \\<Longrightarrow> n = n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        \\<not> inner_node n'\\<rbrakk>\n       \\<Longrightarrow> n = n'", "case (DynPDG_path_Append_cdep n as n'' as' n')"], ["proof (state)\nthis:\n  n -as\\<rightarrow>\\<^sub>d* n''\n  \\<not> inner_node n'' \\<Longrightarrow> n = n''\n  n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'\n  \\<not> inner_node n'\n\ngoal (2 subgoals):\n 1. \\<And>n as n'' as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        \\<not> inner_node n'' \\<Longrightarrow> n = n'';\n        n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n';\n        \\<not> inner_node n'\\<rbrakk>\n       \\<Longrightarrow> n = n'\n 2. \\<And>n as n'' V as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        \\<not> inner_node n'' \\<Longrightarrow> n = n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        \\<not> inner_node n'\\<rbrakk>\n       \\<Longrightarrow> n = n'", "from \\<open>n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'\\<close> \\<open>\\<not> inner_node n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'\n  \\<not> inner_node n'", "have False"], ["proof (prove)\nusing this:\n  n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'\n  \\<not> inner_node n'\n\ngoal (1 subgoal):\n 1. False", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n';\n     \\<not> inner_node n'\\<rbrakk>\n    \\<Longrightarrow> False", "apply(erule DynPDG_edge.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n n' as.\n       \\<lbrakk>\\<not> inner_node n'; n'' = n; None = None; as' = as;\n        n' = n'; n controls n' via as\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n V n' as.\n       \\<lbrakk>\\<not> inner_node n'; n'' = n; None = Some V; as' = as;\n        n' = n'; n influences V in n' via as\\<rbrakk>\n       \\<Longrightarrow> False", "apply(auto simp:inner_node_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>n'' controls n' via as'; \\<not> valid_node n'\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>n'' controls (_Entry_) via as'; n' = (_Entry_)\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>n'' controls (_Exit_) via as'; n' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> False", "apply(fastforce dest:dyn_control_dependence_path path_valid_node)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n'' controls (_Entry_) via as'; n' = (_Entry_)\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>n'' controls (_Exit_) via as'; n' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> False", "apply(fastforce dest:dyn_control_dependence_path path_valid_node)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n'' controls (_Exit_) via as'; n' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> False", "by(fastforce dest:Exit_not_dyn_control_dependent)"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<And>n as n'' as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        \\<not> inner_node n'' \\<Longrightarrow> n = n'';\n        n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n';\n        \\<not> inner_node n'\\<rbrakk>\n       \\<Longrightarrow> n = n'\n 2. \\<And>n as n'' V as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        \\<not> inner_node n'' \\<Longrightarrow> n = n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        \\<not> inner_node n'\\<rbrakk>\n       \\<Longrightarrow> n = n'", "thus ?case"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. n = n'", "by simp"], ["proof (state)\nthis:\n  n = n'\n\ngoal (1 subgoal):\n 1. \\<And>n as n'' V as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        \\<not> inner_node n'' \\<Longrightarrow> n = n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        \\<not> inner_node n'\\<rbrakk>\n       \\<Longrightarrow> n = n'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n as n'' V as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        \\<not> inner_node n'' \\<Longrightarrow> n = n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        \\<not> inner_node n'\\<rbrakk>\n       \\<Longrightarrow> n = n'", "case (DynPDG_path_Append_ddep n as n'' V as' n')"], ["proof (state)\nthis:\n  n -as\\<rightarrow>\\<^sub>d* n''\n  \\<not> inner_node n'' \\<Longrightarrow> n = n''\n  n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  \\<not> inner_node n'\n\ngoal (1 subgoal):\n 1. \\<And>n as n'' V as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        \\<not> inner_node n'' \\<Longrightarrow> n = n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        \\<not> inner_node n'\\<rbrakk>\n       \\<Longrightarrow> n = n'", "from \\<open>n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close> \\<open>\\<not> inner_node n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  \\<not> inner_node n'", "have False"], ["proof (prove)\nusing this:\n  n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  \\<not> inner_node n'\n\ngoal (1 subgoal):\n 1. False", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n';\n     \\<not> inner_node n'\\<rbrakk>\n    \\<Longrightarrow> False", "apply(erule DynPDG_edge.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n n' as.\n       \\<lbrakk>\\<not> inner_node n'; n'' = n; Some V = None; as' = as;\n        n' = n'; n controls n' via as\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n Va n' as.\n       \\<lbrakk>\\<not> inner_node n'; n'' = n; Some V = Some Va; as' = as;\n        n' = n'; n influences Va in n' via as\\<rbrakk>\n       \\<Longrightarrow> False", "by(auto dest:path_valid_node simp:inner_node_def dyn_data_dependence_def)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>n as n'' V as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        \\<not> inner_node n'' \\<Longrightarrow> n = n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        \\<not> inner_node n'\\<rbrakk>\n       \\<Longrightarrow> n = n'", "thus ?case"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. n = n'", "by simp"], ["proof (state)\nthis:\n  n = n'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma DynPDG_cdep_edge_CFG_path:\n  assumes \"n -as\\<rightarrow>\\<^sub>c\\<^sub>d n'\" shows \"n -as\\<rightarrow>* n'\" and \"as \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n -as\\<rightarrow>* n' &&& as \\<noteq> []", "using \\<open>n -as\\<rightarrow>\\<^sub>c\\<^sub>d n'\\<close>"], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>\\<^sub>c\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. n -as\\<rightarrow>* n' &&& as \\<noteq> []", "by(auto elim:DynPDG_edge.cases dest:dyn_control_dependence_path)"], ["", "lemma DynPDG_ddep_edge_CFG_path:\n  assumes \"n -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n'\" shows \"n -as\\<rightarrow>* n'\" and \"as \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n -as\\<rightarrow>* n' &&& as \\<noteq> []", "using \\<open>n -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close>"], ["proof (prove)\nusing this:\n  n -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. n -as\\<rightarrow>* n' &&& as \\<noteq> []", "by(auto elim:DynPDG_edge.cases simp:dyn_data_dependence_def)"], ["", "lemma DynPDG_path_CFG_path:\n  \"n -as\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow> n -as\\<rightarrow>* n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n -as\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow> n -as\\<rightarrow>* n'", "proof(induct rule:DynPDG_path.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n. valid_node n \\<Longrightarrow> n -[]\\<rightarrow>* n\n 2. \\<And>n as n'' as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n''; n -as\\<rightarrow>* n'';\n        n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> n -as @ as'\\<rightarrow>* n'\n 3. \\<And>n as n'' V as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n''; n -as\\<rightarrow>* n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> n -as @ as'\\<rightarrow>* n'", "case DynPDG_path_Nil"], ["proof (state)\nthis:\n  valid_node n_\n\ngoal (3 subgoals):\n 1. \\<And>n. valid_node n \\<Longrightarrow> n -[]\\<rightarrow>* n\n 2. \\<And>n as n'' as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n''; n -as\\<rightarrow>* n'';\n        n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> n -as @ as'\\<rightarrow>* n'\n 3. \\<And>n as n'' V as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n''; n -as\\<rightarrow>* n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> n -as @ as'\\<rightarrow>* n'", "thus ?case"], ["proof (prove)\nusing this:\n  valid_node n_\n\ngoal (1 subgoal):\n 1. n_ -[]\\<rightarrow>* n_", "by(rule empty_path)"], ["proof (state)\nthis:\n  n_ -[]\\<rightarrow>* n_\n\ngoal (2 subgoals):\n 1. \\<And>n as n'' as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n''; n -as\\<rightarrow>* n'';\n        n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> n -as @ as'\\<rightarrow>* n'\n 2. \\<And>n as n'' V as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n''; n -as\\<rightarrow>* n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> n -as @ as'\\<rightarrow>* n'", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n as n'' as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n''; n -as\\<rightarrow>* n'';\n        n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> n -as @ as'\\<rightarrow>* n'\n 2. \\<And>n as n'' V as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n''; n -as\\<rightarrow>* n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> n -as @ as'\\<rightarrow>* n'", "case (DynPDG_path_Append_cdep n as n'' as' n')"], ["proof (state)\nthis:\n  n -as\\<rightarrow>\\<^sub>d* n''\n  n -as\\<rightarrow>* n''\n  n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'\n\ngoal (2 subgoals):\n 1. \\<And>n as n'' as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n''; n -as\\<rightarrow>* n'';\n        n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> n -as @ as'\\<rightarrow>* n'\n 2. \\<And>n as n'' V as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n''; n -as\\<rightarrow>* n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> n -as @ as'\\<rightarrow>* n'", "from \\<open>n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'", "have \"n'' -as'\\<rightarrow>* n'\""], ["proof (prove)\nusing this:\n  n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. n'' -as'\\<rightarrow>* n'", "by(rule DynPDG_cdep_edge_CFG_path(1))"], ["proof (state)\nthis:\n  n'' -as'\\<rightarrow>* n'\n\ngoal (2 subgoals):\n 1. \\<And>n as n'' as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n''; n -as\\<rightarrow>* n'';\n        n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> n -as @ as'\\<rightarrow>* n'\n 2. \\<And>n as n'' V as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n''; n -as\\<rightarrow>* n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> n -as @ as'\\<rightarrow>* n'", "with \\<open>n -as\\<rightarrow>* n''\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* n''\n  n'' -as'\\<rightarrow>* n'", "show ?case"], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n''\n  n'' -as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. n -as @ as'\\<rightarrow>* n'", "by(rule path_Append)"], ["proof (state)\nthis:\n  n -as @ as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. \\<And>n as n'' V as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n''; n -as\\<rightarrow>* n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> n -as @ as'\\<rightarrow>* n'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n as n'' V as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n''; n -as\\<rightarrow>* n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> n -as @ as'\\<rightarrow>* n'", "case (DynPDG_path_Append_ddep n as n'' V as' n')"], ["proof (state)\nthis:\n  n -as\\<rightarrow>\\<^sub>d* n''\n  n -as\\<rightarrow>* n''\n  n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. \\<And>n as n'' V as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n''; n -as\\<rightarrow>* n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> n -as @ as'\\<rightarrow>* n'", "from \\<open>n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'", "have \"n'' -as'\\<rightarrow>* n'\""], ["proof (prove)\nusing this:\n  n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. n'' -as'\\<rightarrow>* n'", "by(rule DynPDG_ddep_edge_CFG_path(1))"], ["proof (state)\nthis:\n  n'' -as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. \\<And>n as n'' V as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n''; n -as\\<rightarrow>* n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> n -as @ as'\\<rightarrow>* n'", "with \\<open>n -as\\<rightarrow>* n''\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* n''\n  n'' -as'\\<rightarrow>* n'", "show ?case"], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n''\n  n'' -as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. n -as @ as'\\<rightarrow>* n'", "by(rule path_Append)"], ["proof (state)\nthis:\n  n -as @ as'\\<rightarrow>* n'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma DynPDG_path_split: \n  \"n -as\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n  (as = [] \\<and> n = n') \\<or> \n  (\\<exists>n'' asx asx'. (n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'') \\<and> (n'' -asx'\\<rightarrow>\\<^sub>d* n') \\<and> \n        (as = asx@asx')) \\<or>\n  (\\<exists>n'' V asx asx'. (n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'') \\<and> (n'' -asx'\\<rightarrow>\\<^sub>d* n') \\<and> \n        (as = asx@asx'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n -as\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    as = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as = asx @ asx')", "proof(induct rule:DynPDG_path.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n.\n       valid_node n \\<Longrightarrow>\n       [] = [] \\<and> n = n \\<or>\n       (\\<exists>n'' asx asx'.\n           n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n           n'' -asx'\\<rightarrow>\\<^sub>d* n \\<and> [] = asx @ asx') \\<or>\n       (\\<exists>n'' V asx asx'.\n           n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n           n'' -asx'\\<rightarrow>\\<^sub>d* n \\<and> [] = asx @ asx')\n 2. \\<And>n as n'' as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        as = [] \\<and> n = n'' \\<or>\n        (\\<exists>n''a asx asx'.\n            n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n''a \\<and>\n            n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n            as = asx @ asx') \\<or>\n        (\\<exists>n''a V asx asx'.\n            n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''a \\<and>\n            n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx');\n        n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> as @ as' = [] \\<and> n = n' \\<or>\n                         (\\<exists>n'' asx asx'.\n                             n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n                             n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n                             as @ as' = asx @ asx') \\<or>\n                         (\\<exists>n'' V asx asx'.\n                             n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n                             n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n                             as @ as' = asx @ asx')\n 3. \\<And>n as n'' V as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        as = [] \\<and> n = n'' \\<or>\n        (\\<exists>n''a asx asx'.\n            n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n''a \\<and>\n            n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n            as = asx @ asx') \\<or>\n        (\\<exists>n''a V asx asx'.\n            n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''a \\<and>\n            n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx');\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> as @ as' = [] \\<and> n = n' \\<or>\n                         (\\<exists>n'' asx asx'.\n                             n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n                             n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n                             as @ as' = asx @ asx') \\<or>\n                         (\\<exists>n'' V asx asx'.\n                             n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n                             n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n                             as @ as' = asx @ asx')", "case (DynPDG_path_Nil n)"], ["proof (state)\nthis:\n  valid_node n\n\ngoal (3 subgoals):\n 1. \\<And>n.\n       valid_node n \\<Longrightarrow>\n       [] = [] \\<and> n = n \\<or>\n       (\\<exists>n'' asx asx'.\n           n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n           n'' -asx'\\<rightarrow>\\<^sub>d* n \\<and> [] = asx @ asx') \\<or>\n       (\\<exists>n'' V asx asx'.\n           n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n           n'' -asx'\\<rightarrow>\\<^sub>d* n \\<and> [] = asx @ asx')\n 2. \\<And>n as n'' as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        as = [] \\<and> n = n'' \\<or>\n        (\\<exists>n''a asx asx'.\n            n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n''a \\<and>\n            n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n            as = asx @ asx') \\<or>\n        (\\<exists>n''a V asx asx'.\n            n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''a \\<and>\n            n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx');\n        n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> as @ as' = [] \\<and> n = n' \\<or>\n                         (\\<exists>n'' asx asx'.\n                             n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n                             n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n                             as @ as' = asx @ asx') \\<or>\n                         (\\<exists>n'' V asx asx'.\n                             n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n                             n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n                             as @ as' = asx @ asx')\n 3. \\<And>n as n'' V as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        as = [] \\<and> n = n'' \\<or>\n        (\\<exists>n''a asx asx'.\n            n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n''a \\<and>\n            n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n            as = asx @ asx') \\<or>\n        (\\<exists>n''a V asx asx'.\n            n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''a \\<and>\n            n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx');\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> as @ as' = [] \\<and> n = n' \\<or>\n                         (\\<exists>n'' asx asx'.\n                             n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n                             n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n                             as @ as' = asx @ asx') \\<or>\n                         (\\<exists>n'' V asx asx'.\n                             n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n                             n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n                             as @ as' = asx @ asx')", "thus ?case"], ["proof (prove)\nusing this:\n  valid_node n\n\ngoal (1 subgoal):\n 1. [] = [] \\<and> n = n \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n \\<and> [] = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n \\<and> [] = asx @ asx')", "by auto"], ["proof (state)\nthis:\n  [] = [] \\<and> n = n \\<or>\n  (\\<exists>n'' asx asx'.\n      n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n      n'' -asx'\\<rightarrow>\\<^sub>d* n \\<and> [] = asx @ asx') \\<or>\n  (\\<exists>n'' V asx asx'.\n      n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n      n'' -asx'\\<rightarrow>\\<^sub>d* n \\<and> [] = asx @ asx')\n\ngoal (2 subgoals):\n 1. \\<And>n as n'' as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        as = [] \\<and> n = n'' \\<or>\n        (\\<exists>n''a asx asx'.\n            n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n''a \\<and>\n            n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n            as = asx @ asx') \\<or>\n        (\\<exists>n''a V asx asx'.\n            n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''a \\<and>\n            n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx');\n        n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> as @ as' = [] \\<and> n = n' \\<or>\n                         (\\<exists>n'' asx asx'.\n                             n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n                             n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n                             as @ as' = asx @ asx') \\<or>\n                         (\\<exists>n'' V asx asx'.\n                             n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n                             n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n                             as @ as' = asx @ asx')\n 2. \\<And>n as n'' V as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        as = [] \\<and> n = n'' \\<or>\n        (\\<exists>n''a asx asx'.\n            n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n''a \\<and>\n            n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n            as = asx @ asx') \\<or>\n        (\\<exists>n''a V asx asx'.\n            n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''a \\<and>\n            n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx');\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> as @ as' = [] \\<and> n = n' \\<or>\n                         (\\<exists>n'' asx asx'.\n                             n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n                             n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n                             as @ as' = asx @ asx') \\<or>\n                         (\\<exists>n'' V asx asx'.\n                             n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n                             n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n                             as @ as' = asx @ asx')", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n as n'' as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        as = [] \\<and> n = n'' \\<or>\n        (\\<exists>n''a asx asx'.\n            n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n''a \\<and>\n            n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n            as = asx @ asx') \\<or>\n        (\\<exists>n''a V asx asx'.\n            n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''a \\<and>\n            n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx');\n        n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> as @ as' = [] \\<and> n = n' \\<or>\n                         (\\<exists>n'' asx asx'.\n                             n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n                             n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n                             as @ as' = asx @ asx') \\<or>\n                         (\\<exists>n'' V asx asx'.\n                             n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n                             n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n                             as @ as' = asx @ asx')\n 2. \\<And>n as n'' V as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        as = [] \\<and> n = n'' \\<or>\n        (\\<exists>n''a asx asx'.\n            n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n''a \\<and>\n            n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n            as = asx @ asx') \\<or>\n        (\\<exists>n''a V asx asx'.\n            n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''a \\<and>\n            n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx');\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> as @ as' = [] \\<and> n = n' \\<or>\n                         (\\<exists>n'' asx asx'.\n                             n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n                             n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n                             as @ as' = asx @ asx') \\<or>\n                         (\\<exists>n'' V asx asx'.\n                             n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n                             n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n                             as @ as' = asx @ asx')", "case (DynPDG_path_Append_cdep n as n'' as' n')"], ["proof (state)\nthis:\n  n -as\\<rightarrow>\\<^sub>d* n''\n  as = [] \\<and> n = n'' \\<or>\n  (\\<exists>n''a asx asx'.\n      n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n''a \\<and>\n      n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx') \\<or>\n  (\\<exists>n''a V asx asx'.\n      n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''a \\<and>\n      n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx')\n  n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'\n\ngoal (2 subgoals):\n 1. \\<And>n as n'' as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        as = [] \\<and> n = n'' \\<or>\n        (\\<exists>n''a asx asx'.\n            n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n''a \\<and>\n            n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n            as = asx @ asx') \\<or>\n        (\\<exists>n''a V asx asx'.\n            n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''a \\<and>\n            n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx');\n        n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> as @ as' = [] \\<and> n = n' \\<or>\n                         (\\<exists>n'' asx asx'.\n                             n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n                             n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n                             as @ as' = asx @ asx') \\<or>\n                         (\\<exists>n'' V asx asx'.\n                             n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n                             n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n                             as @ as' = asx @ asx')\n 2. \\<And>n as n'' V as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        as = [] \\<and> n = n'' \\<or>\n        (\\<exists>n''a asx asx'.\n            n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n''a \\<and>\n            n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n            as = asx @ asx') \\<or>\n        (\\<exists>n''a V asx asx'.\n            n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''a \\<and>\n            n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx');\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> as @ as' = [] \\<and> n = n' \\<or>\n                         (\\<exists>n'' asx asx'.\n                             n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n                             n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n                             as @ as' = asx @ asx') \\<or>\n                         (\\<exists>n'' V asx asx'.\n                             n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n                             n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n                             as @ as' = asx @ asx')", "note IH = \\<open>as = [] \\<and> n = n'' \\<or>\n    (\\<exists>nx asx asx'. n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and> nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx@asx') \\<or>\n    (\\<exists>nx V asx asx'. n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and> nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx@asx')\\<close>"], ["proof (state)\nthis:\n  as = [] \\<and> n = n'' \\<or>\n  (\\<exists>nx asx asx'.\n      n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n      nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx') \\<or>\n  (\\<exists>nx V asx asx'.\n      n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n      nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx')\n\ngoal (2 subgoals):\n 1. \\<And>n as n'' as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        as = [] \\<and> n = n'' \\<or>\n        (\\<exists>n''a asx asx'.\n            n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n''a \\<and>\n            n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n            as = asx @ asx') \\<or>\n        (\\<exists>n''a V asx asx'.\n            n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''a \\<and>\n            n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx');\n        n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> as @ as' = [] \\<and> n = n' \\<or>\n                         (\\<exists>n'' asx asx'.\n                             n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n                             n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n                             as @ as' = asx @ asx') \\<or>\n                         (\\<exists>n'' V asx asx'.\n                             n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n                             n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n                             as @ as' = asx @ asx')\n 2. \\<And>n as n'' V as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        as = [] \\<and> n = n'' \\<or>\n        (\\<exists>n''a asx asx'.\n            n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n''a \\<and>\n            n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n            as = asx @ asx') \\<or>\n        (\\<exists>n''a V asx asx'.\n            n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''a \\<and>\n            n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx');\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> as @ as' = [] \\<and> n = n' \\<or>\n                         (\\<exists>n'' asx asx'.\n                             n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n                             n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n                             as @ as' = asx @ asx') \\<or>\n                         (\\<exists>n'' V asx asx'.\n                             n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n                             n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n                             as @ as' = asx @ asx')", "from IH"], ["proof (chain)\npicking this:\n  as = [] \\<and> n = n'' \\<or>\n  (\\<exists>nx asx asx'.\n      n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n      nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx') \\<or>\n  (\\<exists>nx V asx asx'.\n      n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n      nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx')", "show ?case"], ["proof (prove)\nusing this:\n  as = [] \\<and> n = n'' \\<or>\n  (\\<exists>nx asx asx'.\n      n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n      nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx') \\<or>\n  (\\<exists>nx V asx asx'.\n      n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n      nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx')\n\ngoal (1 subgoal):\n 1. as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. as = [] \\<and> n = n'' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')\n 2. (\\<exists>nx asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n        nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx') \\<or>\n    (\\<exists>nx V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n        nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n        as = asx @ asx') \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "assume \"as = [] \\<and> n = n''\""], ["proof (state)\nthis:\n  as = [] \\<and> n = n''\n\ngoal (2 subgoals):\n 1. as = [] \\<and> n = n'' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')\n 2. (\\<exists>nx asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n        nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx') \\<or>\n    (\\<exists>nx V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n        nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n        as = asx @ asx') \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "with \\<open>n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'\n  as = [] \\<and> n = n''", "have \"valid_node n'\""], ["proof (prove)\nusing this:\n  n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'\n  as = [] \\<and> n = n''\n\ngoal (1 subgoal):\n 1. valid_node n'", "by(fastforce intro:path_valid_node(2) DynPDG_path_CFG_path \n                        DynPDG_path_cdep)"], ["proof (state)\nthis:\n  valid_node n'\n\ngoal (2 subgoals):\n 1. as = [] \\<and> n = n'' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')\n 2. (\\<exists>nx asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n        nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx') \\<or>\n    (\\<exists>nx V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n        nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n        as = asx @ asx') \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "with \\<open>as = [] \\<and> n = n''\\<close> \\<open>n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  as = [] \\<and> n = n''\n  n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'\n  valid_node n'", "have \"\\<exists>n'' asx asx'. n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and> n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as@as' = asx@asx'\""], ["proof (prove)\nusing this:\n  as = [] \\<and> n = n''\n  n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'\n  valid_node n'\n\ngoal (1 subgoal):\n 1. \\<exists>n'' asx asx'.\n       n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n       n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx'", "by(auto intro:DynPDG_path_Nil)"], ["proof (state)\nthis:\n  \\<exists>n'' asx asx'.\n     n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n     n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx'\n\ngoal (2 subgoals):\n 1. as = [] \\<and> n = n'' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')\n 2. (\\<exists>nx asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n        nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx') \\<or>\n    (\\<exists>nx V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n        nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n        as = asx @ asx') \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>n'' asx asx'.\n     n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n     n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx'\n\ngoal (1 subgoal):\n 1. as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "by simp"], ["proof (state)\nthis:\n  as @ as' = [] \\<and> n = n' \\<or>\n  (\\<exists>n'' asx asx'.\n      n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n      n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx') \\<or>\n  (\\<exists>n'' V asx asx'.\n      n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n      n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')\n\ngoal (1 subgoal):\n 1. (\\<exists>nx asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n        nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx') \\<or>\n    (\\<exists>nx V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n        nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n        as = asx @ asx') \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>nx asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n        nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx') \\<or>\n    (\\<exists>nx V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n        nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n        as = asx @ asx') \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "assume \"(\\<exists>nx asx asx'. n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and> nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx@asx') \\<or>\n      (\\<exists>nx V asx asx'. n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and> nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx@asx')\""], ["proof (state)\nthis:\n  (\\<exists>nx asx asx'.\n      n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n      nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx') \\<or>\n  (\\<exists>nx V asx asx'.\n      n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n      nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx')\n\ngoal (1 subgoal):\n 1. (\\<exists>nx asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n        nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx') \\<or>\n    (\\<exists>nx V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n        nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n        as = asx @ asx') \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<exists>nx asx asx'.\n      n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n      nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx') \\<or>\n  (\\<exists>nx V asx asx'.\n      n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n      nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx')\n\ngoal (1 subgoal):\n 1. as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>nx asx asx'.\n       n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')\n 2. \\<exists>nx V asx asx'.\n       n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "assume \"\\<exists>nx asx asx'. n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and> nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx@asx'\""], ["proof (state)\nthis:\n  \\<exists>nx asx asx'.\n     n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n     nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx'\n\ngoal (2 subgoals):\n 1. \\<exists>nx asx asx'.\n       n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')\n 2. \\<exists>nx V asx asx'.\n       n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "then"], ["proof (chain)\npicking this:\n  \\<exists>nx asx asx'.\n     n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n     nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx'", "obtain nx asx asx' where \"n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx\" and \"nx -asx'\\<rightarrow>\\<^sub>d* n''\"\n        and \"as = asx@asx'\""], ["proof (prove)\nusing this:\n  \\<exists>nx asx asx'.\n     n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n     nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx'\n\ngoal (1 subgoal):\n 1. (\\<And>asx nx asx'.\n        \\<lbrakk>n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx;\n         nx -asx'\\<rightarrow>\\<^sub>d* n''; as = asx @ asx'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx\n  nx -asx'\\<rightarrow>\\<^sub>d* n''\n  as = asx @ asx'\n\ngoal (2 subgoals):\n 1. \\<exists>nx asx asx'.\n       n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')\n 2. \\<exists>nx V asx asx'.\n       n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "from \\<open>n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'", "have \"n'' -as'\\<rightarrow>\\<^sub>d* n'\""], ["proof (prove)\nusing this:\n  n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. n'' -as'\\<rightarrow>\\<^sub>d* n'", "by(rule DynPDG_path_cdep)"], ["proof (state)\nthis:\n  n'' -as'\\<rightarrow>\\<^sub>d* n'\n\ngoal (2 subgoals):\n 1. \\<exists>nx asx asx'.\n       n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')\n 2. \\<exists>nx V asx asx'.\n       n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "with \\<open>nx -asx'\\<rightarrow>\\<^sub>d* n''\\<close>"], ["proof (chain)\npicking this:\n  nx -asx'\\<rightarrow>\\<^sub>d* n''\n  n'' -as'\\<rightarrow>\\<^sub>d* n'", "have \"nx -asx'@as'\\<rightarrow>\\<^sub>d* n'\""], ["proof (prove)\nusing this:\n  nx -asx'\\<rightarrow>\\<^sub>d* n''\n  n'' -as'\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. nx -asx' @ as'\\<rightarrow>\\<^sub>d* n'", "by(fastforce intro:DynPDG_path_Append)"], ["proof (state)\nthis:\n  nx -asx' @ as'\\<rightarrow>\\<^sub>d* n'\n\ngoal (2 subgoals):\n 1. \\<exists>nx asx asx'.\n       n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')\n 2. \\<exists>nx V asx asx'.\n       n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "with \\<open>n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx\\<close> \\<open>as = asx@asx'\\<close>"], ["proof (chain)\npicking this:\n  n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx\n  as = asx @ asx'\n  nx -asx' @ as'\\<rightarrow>\\<^sub>d* n'", "have \"\\<exists>n'' asx asx'. n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and> n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as@as' = asx@asx'\""], ["proof (prove)\nusing this:\n  n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx\n  as = asx @ asx'\n  nx -asx' @ as'\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. \\<exists>n'' asx asx'.\n       n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n       n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx'", "by auto"], ["proof (state)\nthis:\n  \\<exists>n'' asx asx'.\n     n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n     n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx'\n\ngoal (2 subgoals):\n 1. \\<exists>nx asx asx'.\n       n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')\n 2. \\<exists>nx V asx asx'.\n       n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>n'' asx asx'.\n     n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n     n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx'\n\ngoal (1 subgoal):\n 1. as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "by simp"], ["proof (state)\nthis:\n  as @ as' = [] \\<and> n = n' \\<or>\n  (\\<exists>n'' asx asx'.\n      n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n      n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx') \\<or>\n  (\\<exists>n'' V asx asx'.\n      n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n      n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')\n\ngoal (1 subgoal):\n 1. \\<exists>nx V asx asx'.\n       n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>nx V asx asx'.\n       n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "assume \"\\<exists>nx V asx asx'. n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and> nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx@asx'\""], ["proof (state)\nthis:\n  \\<exists>nx V asx asx'.\n     n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n     nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx'\n\ngoal (1 subgoal):\n 1. \\<exists>nx V asx asx'.\n       n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "then"], ["proof (chain)\npicking this:\n  \\<exists>nx V asx asx'.\n     n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n     nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx'", "obtain nx V asx asx' where \"n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx\" and \"nx -asx'\\<rightarrow>\\<^sub>d* n''\"\n        and \"as = asx@asx'\""], ["proof (prove)\nusing this:\n  \\<exists>nx V asx asx'.\n     n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n     nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx'\n\ngoal (1 subgoal):\n 1. (\\<And>V asx nx asx'.\n        \\<lbrakk>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx;\n         nx -asx'\\<rightarrow>\\<^sub>d* n''; as = asx @ asx'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx\n  nx -asx'\\<rightarrow>\\<^sub>d* n''\n  as = asx @ asx'\n\ngoal (1 subgoal):\n 1. \\<exists>nx V asx asx'.\n       n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "from \\<open>n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'", "have \"n'' -as'\\<rightarrow>\\<^sub>d* n'\""], ["proof (prove)\nusing this:\n  n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. n'' -as'\\<rightarrow>\\<^sub>d* n'", "by(rule DynPDG_path_cdep)"], ["proof (state)\nthis:\n  n'' -as'\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. \\<exists>nx V asx asx'.\n       n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "with \\<open>nx -asx'\\<rightarrow>\\<^sub>d* n''\\<close>"], ["proof (chain)\npicking this:\n  nx -asx'\\<rightarrow>\\<^sub>d* n''\n  n'' -as'\\<rightarrow>\\<^sub>d* n'", "have \"nx -asx'@as'\\<rightarrow>\\<^sub>d* n'\""], ["proof (prove)\nusing this:\n  nx -asx'\\<rightarrow>\\<^sub>d* n''\n  n'' -as'\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. nx -asx' @ as'\\<rightarrow>\\<^sub>d* n'", "by(fastforce intro:DynPDG_path_Append)"], ["proof (state)\nthis:\n  nx -asx' @ as'\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. \\<exists>nx V asx asx'.\n       n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "with \\<open>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx\\<close> \\<open>as = asx@asx'\\<close>"], ["proof (chain)\npicking this:\n  n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx\n  as = asx @ asx'\n  nx -asx' @ as'\\<rightarrow>\\<^sub>d* n'", "have \"\\<exists>n'' V asx asx'. n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and> n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as@as' = asx@asx'\""], ["proof (prove)\nusing this:\n  n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx\n  as = asx @ asx'\n  nx -asx' @ as'\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. \\<exists>n'' V asx asx'.\n       n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n       n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx'", "by auto"], ["proof (state)\nthis:\n  \\<exists>n'' V asx asx'.\n     n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n     n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx'\n\ngoal (1 subgoal):\n 1. \\<exists>nx V asx asx'.\n       n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>n'' V asx asx'.\n     n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n     n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx'\n\ngoal (1 subgoal):\n 1. as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "by simp"], ["proof (state)\nthis:\n  as @ as' = [] \\<and> n = n' \\<or>\n  (\\<exists>n'' asx asx'.\n      n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n      n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx') \\<or>\n  (\\<exists>n'' V asx asx'.\n      n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n      n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  as @ as' = [] \\<and> n = n' \\<or>\n  (\\<exists>n'' asx asx'.\n      n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n      n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx') \\<or>\n  (\\<exists>n'' V asx asx'.\n      n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n      n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  as @ as' = [] \\<and> n = n' \\<or>\n  (\\<exists>n'' asx asx'.\n      n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n      n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx') \\<or>\n  (\\<exists>n'' V asx asx'.\n      n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n      n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')\n\ngoal (1 subgoal):\n 1. \\<And>n as n'' V as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        as = [] \\<and> n = n'' \\<or>\n        (\\<exists>n''a asx asx'.\n            n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n''a \\<and>\n            n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n            as = asx @ asx') \\<or>\n        (\\<exists>n''a V asx asx'.\n            n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''a \\<and>\n            n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx');\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> as @ as' = [] \\<and> n = n' \\<or>\n                         (\\<exists>n'' asx asx'.\n                             n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n                             n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n                             as @ as' = asx @ asx') \\<or>\n                         (\\<exists>n'' V asx asx'.\n                             n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n                             n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n                             as @ as' = asx @ asx')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n as n'' V as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        as = [] \\<and> n = n'' \\<or>\n        (\\<exists>n''a asx asx'.\n            n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n''a \\<and>\n            n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n            as = asx @ asx') \\<or>\n        (\\<exists>n''a V asx asx'.\n            n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''a \\<and>\n            n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx');\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> as @ as' = [] \\<and> n = n' \\<or>\n                         (\\<exists>n'' asx asx'.\n                             n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n                             n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n                             as @ as' = asx @ asx') \\<or>\n                         (\\<exists>n'' V asx asx'.\n                             n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n                             n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n                             as @ as' = asx @ asx')", "case (DynPDG_path_Append_ddep n as n'' V as' n')"], ["proof (state)\nthis:\n  n -as\\<rightarrow>\\<^sub>d* n''\n  as = [] \\<and> n = n'' \\<or>\n  (\\<exists>n''a asx asx'.\n      n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n''a \\<and>\n      n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx') \\<or>\n  (\\<exists>n''a V asx asx'.\n      n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''a \\<and>\n      n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx')\n  n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. \\<And>n as n'' V as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        as = [] \\<and> n = n'' \\<or>\n        (\\<exists>n''a asx asx'.\n            n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n''a \\<and>\n            n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n            as = asx @ asx') \\<or>\n        (\\<exists>n''a V asx asx'.\n            n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''a \\<and>\n            n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx');\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> as @ as' = [] \\<and> n = n' \\<or>\n                         (\\<exists>n'' asx asx'.\n                             n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n                             n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n                             as @ as' = asx @ asx') \\<or>\n                         (\\<exists>n'' V asx asx'.\n                             n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n                             n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n                             as @ as' = asx @ asx')", "note IH = \\<open>as = [] \\<and> n = n'' \\<or>\n    (\\<exists>nx asx asx'. n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and> nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx@asx') \\<or>\n    (\\<exists>nx V asx asx'. n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and> nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx@asx')\\<close>"], ["proof (state)\nthis:\n  as = [] \\<and> n = n'' \\<or>\n  (\\<exists>nx asx asx'.\n      n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n      nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx') \\<or>\n  (\\<exists>nx V asx asx'.\n      n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n      nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx')\n\ngoal (1 subgoal):\n 1. \\<And>n as n'' V as' n'.\n       \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'';\n        as = [] \\<and> n = n'' \\<or>\n        (\\<exists>n''a asx asx'.\n            n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n''a \\<and>\n            n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n            as = asx @ asx') \\<or>\n        (\\<exists>n''a V asx asx'.\n            n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''a \\<and>\n            n''a -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx');\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<rbrakk>\n       \\<Longrightarrow> as @ as' = [] \\<and> n = n' \\<or>\n                         (\\<exists>n'' asx asx'.\n                             n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n                             n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n                             as @ as' = asx @ asx') \\<or>\n                         (\\<exists>n'' V asx asx'.\n                             n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n                             n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n                             as @ as' = asx @ asx')", "from IH"], ["proof (chain)\npicking this:\n  as = [] \\<and> n = n'' \\<or>\n  (\\<exists>nx asx asx'.\n      n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n      nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx') \\<or>\n  (\\<exists>nx V asx asx'.\n      n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n      nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx')", "show ?case"], ["proof (prove)\nusing this:\n  as = [] \\<and> n = n'' \\<or>\n  (\\<exists>nx asx asx'.\n      n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n      nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx') \\<or>\n  (\\<exists>nx V asx asx'.\n      n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n      nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx')\n\ngoal (1 subgoal):\n 1. as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. as = [] \\<and> n = n'' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')\n 2. (\\<exists>nx asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n        nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx') \\<or>\n    (\\<exists>nx V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n        nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n        as = asx @ asx') \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "assume \"as = [] \\<and> n = n''\""], ["proof (state)\nthis:\n  as = [] \\<and> n = n''\n\ngoal (2 subgoals):\n 1. as = [] \\<and> n = n'' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')\n 2. (\\<exists>nx asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n        nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx') \\<or>\n    (\\<exists>nx V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n        nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n        as = asx @ asx') \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "with \\<open>n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  as = [] \\<and> n = n''", "have \"valid_node n'\""], ["proof (prove)\nusing this:\n  n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  as = [] \\<and> n = n''\n\ngoal (1 subgoal):\n 1. valid_node n'", "by(fastforce intro:path_valid_node(2) DynPDG_path_CFG_path \n                        DynPDG_path_ddep)"], ["proof (state)\nthis:\n  valid_node n'\n\ngoal (2 subgoals):\n 1. as = [] \\<and> n = n'' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')\n 2. (\\<exists>nx asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n        nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx') \\<or>\n    (\\<exists>nx V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n        nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n        as = asx @ asx') \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "with \\<open>as = [] \\<and> n = n''\\<close> \\<open>n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  as = [] \\<and> n = n''\n  n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  valid_node n'", "have \"\\<exists>n'' V asx asx'. n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and> n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as@as' = asx@asx'\""], ["proof (prove)\nusing this:\n  as = [] \\<and> n = n''\n  n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  valid_node n'\n\ngoal (1 subgoal):\n 1. \\<exists>n'' V asx asx'.\n       n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n       n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx'", "by(fastforce intro:DynPDG_path_Nil)"], ["proof (state)\nthis:\n  \\<exists>n'' V asx asx'.\n     n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n     n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx'\n\ngoal (2 subgoals):\n 1. as = [] \\<and> n = n'' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')\n 2. (\\<exists>nx asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n        nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx') \\<or>\n    (\\<exists>nx V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n        nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n        as = asx @ asx') \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>n'' V asx asx'.\n     n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n     n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx'\n\ngoal (1 subgoal):\n 1. as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "by simp"], ["proof (state)\nthis:\n  as @ as' = [] \\<and> n = n' \\<or>\n  (\\<exists>n'' asx asx'.\n      n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n      n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx') \\<or>\n  (\\<exists>n'' V asx asx'.\n      n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n      n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')\n\ngoal (1 subgoal):\n 1. (\\<exists>nx asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n        nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx') \\<or>\n    (\\<exists>nx V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n        nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n        as = asx @ asx') \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>nx asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n        nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx') \\<or>\n    (\\<exists>nx V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n        nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n        as = asx @ asx') \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "assume \"(\\<exists>nx asx asx'. n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and> nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx@asx') \\<or>\n      (\\<exists>nx V asx asx'. n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and> nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx@asx')\""], ["proof (state)\nthis:\n  (\\<exists>nx asx asx'.\n      n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n      nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx') \\<or>\n  (\\<exists>nx V asx asx'.\n      n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n      nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx')\n\ngoal (1 subgoal):\n 1. (\\<exists>nx asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n        nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx') \\<or>\n    (\\<exists>nx V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n        nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n        as = asx @ asx') \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<exists>nx asx asx'.\n      n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n      nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx') \\<or>\n  (\\<exists>nx V asx asx'.\n      n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n      nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx')\n\ngoal (1 subgoal):\n 1. as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>nx asx asx'.\n       n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')\n 2. \\<exists>nx V asx asx'.\n       n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "assume \"\\<exists>nx asx asx'. n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and> nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx@asx'\""], ["proof (state)\nthis:\n  \\<exists>nx asx asx'.\n     n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n     nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx'\n\ngoal (2 subgoals):\n 1. \\<exists>nx asx asx'.\n       n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')\n 2. \\<exists>nx V asx asx'.\n       n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "then"], ["proof (chain)\npicking this:\n  \\<exists>nx asx asx'.\n     n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n     nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx'", "obtain nx asx asx' where \"n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx\" and \"nx -asx'\\<rightarrow>\\<^sub>d* n''\"\n        and \"as = asx@asx'\""], ["proof (prove)\nusing this:\n  \\<exists>nx asx asx'.\n     n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n     nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx'\n\ngoal (1 subgoal):\n 1. (\\<And>asx nx asx'.\n        \\<lbrakk>n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx;\n         nx -asx'\\<rightarrow>\\<^sub>d* n''; as = asx @ asx'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx\n  nx -asx'\\<rightarrow>\\<^sub>d* n''\n  as = asx @ asx'\n\ngoal (2 subgoals):\n 1. \\<exists>nx asx asx'.\n       n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')\n 2. \\<exists>nx V asx asx'.\n       n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "from \\<open>n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'", "have \"n'' -as'\\<rightarrow>\\<^sub>d* n'\""], ["proof (prove)\nusing this:\n  n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. n'' -as'\\<rightarrow>\\<^sub>d* n'", "by(rule DynPDG_path_ddep)"], ["proof (state)\nthis:\n  n'' -as'\\<rightarrow>\\<^sub>d* n'\n\ngoal (2 subgoals):\n 1. \\<exists>nx asx asx'.\n       n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')\n 2. \\<exists>nx V asx asx'.\n       n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "with \\<open>nx -asx'\\<rightarrow>\\<^sub>d* n''\\<close>"], ["proof (chain)\npicking this:\n  nx -asx'\\<rightarrow>\\<^sub>d* n''\n  n'' -as'\\<rightarrow>\\<^sub>d* n'", "have \"nx -asx'@as'\\<rightarrow>\\<^sub>d* n'\""], ["proof (prove)\nusing this:\n  nx -asx'\\<rightarrow>\\<^sub>d* n''\n  n'' -as'\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. nx -asx' @ as'\\<rightarrow>\\<^sub>d* n'", "by(fastforce intro:DynPDG_path_Append)"], ["proof (state)\nthis:\n  nx -asx' @ as'\\<rightarrow>\\<^sub>d* n'\n\ngoal (2 subgoals):\n 1. \\<exists>nx asx asx'.\n       n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')\n 2. \\<exists>nx V asx asx'.\n       n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "with \\<open>n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx\\<close> \\<open>as = asx@asx'\\<close>"], ["proof (chain)\npicking this:\n  n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx\n  as = asx @ asx'\n  nx -asx' @ as'\\<rightarrow>\\<^sub>d* n'", "have \"\\<exists>n'' asx asx'. n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and> n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as@as' = asx@asx'\""], ["proof (prove)\nusing this:\n  n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx\n  as = asx @ asx'\n  nx -asx' @ as'\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. \\<exists>n'' asx asx'.\n       n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n       n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx'", "by auto"], ["proof (state)\nthis:\n  \\<exists>n'' asx asx'.\n     n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n     n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx'\n\ngoal (2 subgoals):\n 1. \\<exists>nx asx asx'.\n       n -asx\\<rightarrow>\\<^sub>c\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')\n 2. \\<exists>nx V asx asx'.\n       n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>n'' asx asx'.\n     n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n     n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx'\n\ngoal (1 subgoal):\n 1. as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "by simp"], ["proof (state)\nthis:\n  as @ as' = [] \\<and> n = n' \\<or>\n  (\\<exists>n'' asx asx'.\n      n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n      n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx') \\<or>\n  (\\<exists>n'' V asx asx'.\n      n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n      n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')\n\ngoal (1 subgoal):\n 1. \\<exists>nx V asx asx'.\n       n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>nx V asx asx'.\n       n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "assume \"\\<exists>nx V asx asx'. n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and> nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx@asx'\""], ["proof (state)\nthis:\n  \\<exists>nx V asx asx'.\n     n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n     nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx'\n\ngoal (1 subgoal):\n 1. \\<exists>nx V asx asx'.\n       n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "then"], ["proof (chain)\npicking this:\n  \\<exists>nx V asx asx'.\n     n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n     nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx'", "obtain nx V' asx asx' where \"n -{V'}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx\" and \"nx -asx'\\<rightarrow>\\<^sub>d* n''\"\n        and \"as = asx@asx'\""], ["proof (prove)\nusing this:\n  \\<exists>nx V asx asx'.\n     n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n     nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and> as = asx @ asx'\n\ngoal (1 subgoal):\n 1. (\\<And>V' asx nx asx'.\n        \\<lbrakk>n -{V'}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx;\n         nx -asx'\\<rightarrow>\\<^sub>d* n''; as = asx @ asx'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  n -{V'}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx\n  nx -asx'\\<rightarrow>\\<^sub>d* n''\n  as = asx @ asx'\n\ngoal (1 subgoal):\n 1. \\<exists>nx V asx asx'.\n       n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "from \\<open>n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'", "have \"n'' -as'\\<rightarrow>\\<^sub>d* n'\""], ["proof (prove)\nusing this:\n  n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. n'' -as'\\<rightarrow>\\<^sub>d* n'", "by(rule DynPDG_path_ddep)"], ["proof (state)\nthis:\n  n'' -as'\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. \\<exists>nx V asx asx'.\n       n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "with \\<open>nx -asx'\\<rightarrow>\\<^sub>d* n''\\<close>"], ["proof (chain)\npicking this:\n  nx -asx'\\<rightarrow>\\<^sub>d* n''\n  n'' -as'\\<rightarrow>\\<^sub>d* n'", "have \"nx -asx'@as'\\<rightarrow>\\<^sub>d* n'\""], ["proof (prove)\nusing this:\n  nx -asx'\\<rightarrow>\\<^sub>d* n''\n  n'' -as'\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. nx -asx' @ as'\\<rightarrow>\\<^sub>d* n'", "by(fastforce intro:DynPDG_path_Append)"], ["proof (state)\nthis:\n  nx -asx' @ as'\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. \\<exists>nx V asx asx'.\n       n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "with \\<open>n -{V'}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx\\<close> \\<open>as = asx@asx'\\<close>"], ["proof (chain)\npicking this:\n  n -{V'}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx\n  as = asx @ asx'\n  nx -asx' @ as'\\<rightarrow>\\<^sub>d* n'", "have \"\\<exists>n'' V asx asx'. n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and> n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as@as' = asx@asx'\""], ["proof (prove)\nusing this:\n  n -{V'}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx\n  as = asx @ asx'\n  nx -asx' @ as'\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. \\<exists>n'' V asx asx'.\n       n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n       n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx'", "by auto"], ["proof (state)\nthis:\n  \\<exists>n'' V asx asx'.\n     n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n     n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx'\n\ngoal (1 subgoal):\n 1. \\<exists>nx V asx asx'.\n       n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -asx'\\<rightarrow>\\<^sub>d* n'' \\<and>\n       as = asx @ asx' \\<Longrightarrow>\n    as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>n'' V asx asx'.\n     n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n     n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx'\n\ngoal (1 subgoal):\n 1. as @ as' = [] \\<and> n = n' \\<or>\n    (\\<exists>n'' asx asx'.\n        n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and>\n        as @ as' = asx @ asx') \\<or>\n    (\\<exists>n'' V asx asx'.\n        n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n        n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')", "by simp"], ["proof (state)\nthis:\n  as @ as' = [] \\<and> n = n' \\<or>\n  (\\<exists>n'' asx asx'.\n      n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n      n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx') \\<or>\n  (\\<exists>n'' V asx asx'.\n      n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n      n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  as @ as' = [] \\<and> n = n' \\<or>\n  (\\<exists>n'' asx asx'.\n      n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n      n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx') \\<or>\n  (\\<exists>n'' V asx asx'.\n      n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n      n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  as @ as' = [] \\<and> n = n' \\<or>\n  (\\<exists>n'' asx asx'.\n      n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n      n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx') \\<or>\n  (\\<exists>n'' V asx asx'.\n      n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'' \\<and>\n      n'' -asx'\\<rightarrow>\\<^sub>d* n' \\<and> as @ as' = asx @ asx')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma DynPDG_path_rev_cases [consumes 1,\n  case_names DynPDG_path_Nil DynPDG_path_cdep_Append DynPDG_path_ddep_Append]:\n  \"\\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n'; \\<lbrakk>as = []; n = n'\\<rbrakk> \\<Longrightarrow> Q;\n    \\<And>n'' asx asx'. \\<lbrakk>n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n''; n'' -asx'\\<rightarrow>\\<^sub>d* n'; \n                       as = asx@asx'\\<rbrakk> \\<Longrightarrow> Q;\n    \\<And>V n'' asx asx'. \\<lbrakk>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''; n'' -asx'\\<rightarrow>\\<^sub>d* n'; \n                       as = asx@asx'\\<rbrakk> \\<Longrightarrow> Q\\<rbrakk>\n  \\<Longrightarrow> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n -as\\<rightarrow>\\<^sub>d* n';\n     \\<lbrakk>as = []; n = n'\\<rbrakk> \\<Longrightarrow> Q;\n     \\<And>n'' asx asx'.\n        \\<lbrakk>n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n         n'' -asx'\\<rightarrow>\\<^sub>d* n'; as = asx @ asx'\\<rbrakk>\n        \\<Longrightarrow> Q;\n     \\<And>V n'' asx asx'.\n        \\<lbrakk>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'';\n         n'' -asx'\\<rightarrow>\\<^sub>d* n'; as = asx @ asx'\\<rbrakk>\n        \\<Longrightarrow> Q\\<rbrakk>\n    \\<Longrightarrow> Q", "by(blast dest:DynPDG_path_split)"], ["", "lemma DynPDG_ddep_edge_no_shorter_ddep_edge:\n  assumes ddep:\"n -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n'\"\n  shows \"\\<forall>as' a as''. tl as = as'@a#as'' \\<longrightarrow> \\<not> sourcenode a -{V}a#as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>as' a as''.\n       tl as = as' @ a # as'' \\<longrightarrow>\n       \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>as' a as''.\n       tl as = as' @ a # as'' \\<longrightarrow>\n       \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'", "from ddep"], ["proof (chain)\npicking this:\n  n -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n'", "have influence:\"n influences V in n' via as\""], ["proof (prove)\nusing this:\n  n -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. n influences V in n' via as", "by(auto elim!:DynPDG_edge.cases)"], ["proof (state)\nthis:\n  n influences V in n' via as\n\ngoal (1 subgoal):\n 1. \\<forall>as' a as''.\n       tl as = as' @ a # as'' \\<longrightarrow>\n       \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'", "then"], ["proof (chain)\npicking this:\n  n influences V in n' via as", "obtain  a asx where as:\"as = a#asx\"\n    and notin:\"n \\<notin> set (sourcenodes asx)\""], ["proof (prove)\nusing this:\n  n influences V in n' via as\n\ngoal (1 subgoal):\n 1. (\\<And>a asx.\n        \\<lbrakk>as = a # asx; n \\<notin> set (sourcenodes asx)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto dest:dyn_influence_source_notin_tl_edges simp:dyn_data_dependence_def)"], ["proof (state)\nthis:\n  as = a # asx\n  n \\<notin> set (sourcenodes asx)\n\ngoal (1 subgoal):\n 1. \\<forall>as' a as''.\n       tl as = as' @ a # as'' \\<longrightarrow>\n       \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'", "from influence as"], ["proof (chain)\npicking this:\n  n influences V in n' via as\n  as = a # asx", "have imp:\"\\<forall>nx \\<in> set (sourcenodes asx). V \\<notin> Def nx\""], ["proof (prove)\nusing this:\n  n influences V in n' via as\n  as = a # asx\n\ngoal (1 subgoal):\n 1. \\<forall>nx\\<in>set (sourcenodes asx). V \\<notin> Def nx", "by(auto simp:dyn_data_dependence_def)"], ["proof (state)\nthis:\n  \\<forall>nx\\<in>set (sourcenodes asx). V \\<notin> Def nx\n\ngoal (1 subgoal):\n 1. \\<forall>as' a as''.\n       tl as = as' @ a # as'' \\<longrightarrow>\n       \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'", "{"], ["proof (state)\nthis:\n  \\<forall>nx\\<in>set (sourcenodes asx). V \\<notin> Def nx\n\ngoal (1 subgoal):\n 1. \\<forall>as' a as''.\n       tl as = as' @ a # as'' \\<longrightarrow>\n       \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'", "fix as' a' as''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>as' a as''.\n       tl as = as' @ a # as'' \\<longrightarrow>\n       \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'", "assume eq:\"tl as = as'@a'#as''\"\n      and ddep':\"sourcenode a' -{V}a'#as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\""], ["proof (state)\nthis:\n  tl as = as' @ a' # as''\n  sourcenode a' -{V}a' # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. \\<forall>as' a as''.\n       tl as = as' @ a # as'' \\<longrightarrow>\n       \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'", "from eq as notin"], ["proof (chain)\npicking this:\n  tl as = as' @ a' # as''\n  as = a # asx\n  n \\<notin> set (sourcenodes asx)", "have noteq:\"sourcenode a' \\<noteq> n\""], ["proof (prove)\nusing this:\n  tl as = as' @ a' # as''\n  as = a # asx\n  n \\<notin> set (sourcenodes asx)\n\ngoal (1 subgoal):\n 1. sourcenode a' \\<noteq> n", "by(auto simp:sourcenodes_def)"], ["proof (state)\nthis:\n  sourcenode a' \\<noteq> n\n\ngoal (1 subgoal):\n 1. \\<forall>as' a as''.\n       tl as = as' @ a # as'' \\<longrightarrow>\n       \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'", "from ddep'"], ["proof (chain)\npicking this:\n  sourcenode a' -{V}a' # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'", "have \"V \\<in> Def (sourcenode a')\""], ["proof (prove)\nusing this:\n  sourcenode a' -{V}a' # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. V \\<in> Def (sourcenode a')", "by(auto elim!:DynPDG_edge.cases simp:dyn_data_dependence_def)"], ["proof (state)\nthis:\n  V \\<in> Def (sourcenode a')\n\ngoal (1 subgoal):\n 1. \\<forall>as' a as''.\n       tl as = as' @ a # as'' \\<longrightarrow>\n       \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'", "with eq as noteq imp"], ["proof (chain)\npicking this:\n  tl as = as' @ a' # as''\n  as = a # asx\n  sourcenode a' \\<noteq> n\n  \\<forall>nx\\<in>set (sourcenodes asx). V \\<notin> Def nx\n  V \\<in> Def (sourcenode a')", "have False"], ["proof (prove)\nusing this:\n  tl as = as' @ a' # as''\n  as = a # asx\n  sourcenode a' \\<noteq> n\n  \\<forall>nx\\<in>set (sourcenodes asx). V \\<notin> Def nx\n  V \\<in> Def (sourcenode a')\n\ngoal (1 subgoal):\n 1. False", "by(auto simp:sourcenodes_def)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<forall>as' a as''.\n       tl as = as' @ a # as'' \\<longrightarrow>\n       \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'", "}"], ["proof (state)\nthis:\n  \\<lbrakk>tl as = ?as'2 @ ?a'2 # ?as''2;\n   sourcenode\n    ?a'2 -{V}?a'2 # ?as''2\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<forall>as' a as''.\n       tl as = as' @ a # as'' \\<longrightarrow>\n       \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>tl as = ?as'2 @ ?a'2 # ?as''2;\n   sourcenode\n    ?a'2 -{V}?a'2 # ?as''2\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<forall>as' a as''.\n       tl as = as' @ a # as'' \\<longrightarrow>\n       \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'", "by blast"], ["proof (state)\nthis:\n  \\<forall>as' a as''.\n     tl as = as' @ a # as'' \\<longrightarrow>\n     \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma no_ddep_same_state:\n  assumes path:\"n -as\\<rightarrow>* n'\" and Uses:\"V \\<in> Use n'\" and preds:\"preds (kinds as) s\"\n  and no_dep:\"\\<forall>as' a as''. as = as'@a#as'' \\<longrightarrow> \\<not> sourcenode a -{V}a#as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\"\n  shows \"state_val (transfers (kinds as) s) V = state_val s V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_val (transfers (kinds as) s) V = state_val s V", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. state_val (transfers (kinds as) s) V = state_val s V", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. state_val (transfers (kinds as) s) V = state_val s V", "fix n''"], ["proof (state)\ngoal (1 subgoal):\n 1. state_val (transfers (kinds as) s) V = state_val s V", "assume inset:\"n'' \\<in> set (sourcenodes as)\" and Defs:\"V \\<in> Def n''\""], ["proof (state)\nthis:\n  n'' \\<in> set (sourcenodes as)\n  V \\<in> Def n''\n\ngoal (1 subgoal):\n 1. state_val (transfers (kinds as) s) V = state_val s V", "hence \"\\<exists>nx \\<in> set (sourcenodes as). V \\<in> Def nx\""], ["proof (prove)\nusing this:\n  n'' \\<in> set (sourcenodes as)\n  V \\<in> Def n''\n\ngoal (1 subgoal):\n 1. \\<exists>nx\\<in>set (sourcenodes as). V \\<in> Def nx", "by auto"], ["proof (state)\nthis:\n  \\<exists>nx\\<in>set (sourcenodes as). V \\<in> Def nx\n\ngoal (1 subgoal):\n 1. state_val (transfers (kinds as) s) V = state_val s V", "then"], ["proof (chain)\npicking this:\n  \\<exists>nx\\<in>set (sourcenodes as). V \\<in> Def nx", "obtain nx ns' ns'' where nodes:\"sourcenodes as = ns'@nx#ns''\"\n        and Defs':\"V \\<in> Def nx\" and notDef:\"\\<forall>nx' \\<in> set ns''. V \\<notin> Def nx'\""], ["proof (prove)\nusing this:\n  \\<exists>nx\\<in>set (sourcenodes as). V \\<in> Def nx\n\ngoal (1 subgoal):\n 1. (\\<And>ns' nx ns''.\n        \\<lbrakk>sourcenodes as = ns' @ nx # ns''; V \\<in> Def nx;\n         \\<forall>nx'\\<in>set ns''. V \\<notin> Def nx'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim!:rightmost_element_property)"], ["proof (state)\nthis:\n  sourcenodes as = ns' @ nx # ns''\n  V \\<in> Def nx\n  \\<forall>nx'\\<in>set ns''. V \\<notin> Def nx'\n\ngoal (1 subgoal):\n 1. state_val (transfers (kinds as) s) V = state_val s V", "from nodes"], ["proof (chain)\npicking this:\n  sourcenodes as = ns' @ nx # ns''", "obtain as' a as''\n      where as'':\"sourcenodes as'' = ns''\" and as:\"as=as'@a#as''\"\n      and source:\"sourcenode a = nx\""], ["proof (prove)\nusing this:\n  sourcenodes as = ns' @ nx # ns''\n\ngoal (1 subgoal):\n 1. (\\<And>as'' as' a.\n        \\<lbrakk>sourcenodes as'' = ns''; as = as' @ a # as'';\n         sourcenode a = nx\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim:map_append_append_maps simp:sourcenodes_def)"], ["proof (state)\nthis:\n  sourcenodes as'' = ns''\n  as = as' @ a # as''\n  sourcenode a = nx\n\ngoal (1 subgoal):\n 1. state_val (transfers (kinds as) s) V = state_val s V", "from as path"], ["proof (chain)\npicking this:\n  as = as' @ a # as''\n  n -as\\<rightarrow>* n'", "have path':\"sourcenode a -a#as''\\<rightarrow>* n'\""], ["proof (prove)\nusing this:\n  as = as' @ a # as''\n  n -as\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. sourcenode a -a # as''\\<rightarrow>* n'", "by(fastforce dest:path_split_second)"], ["proof (state)\nthis:\n  sourcenode a -a # as''\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. state_val (transfers (kinds as) s) V = state_val s V", "from notDef as'' source"], ["proof (chain)\npicking this:\n  \\<forall>nx'\\<in>set ns''. V \\<notin> Def nx'\n  sourcenodes as'' = ns''\n  sourcenode a = nx", "have \"\\<forall>n'' \\<in> set (sourcenodes as''). V \\<notin> Def n''\""], ["proof (prove)\nusing this:\n  \\<forall>nx'\\<in>set ns''. V \\<notin> Def nx'\n  sourcenodes as'' = ns''\n  sourcenode a = nx\n\ngoal (1 subgoal):\n 1. \\<forall>n''\\<in>set (sourcenodes as''). V \\<notin> Def n''", "by(auto simp:sourcenodes_def)"], ["proof (state)\nthis:\n  \\<forall>n''\\<in>set (sourcenodes as''). V \\<notin> Def n''\n\ngoal (1 subgoal):\n 1. state_val (transfers (kinds as) s) V = state_val s V", "with path' Defs' Uses source"], ["proof (chain)\npicking this:\n  sourcenode a -a # as''\\<rightarrow>* n'\n  V \\<in> Def nx\n  V \\<in> Use n'\n  sourcenode a = nx\n  \\<forall>n''\\<in>set (sourcenodes as''). V \\<notin> Def n''", "have influence:\"nx influences V in n' via (a#as'')\""], ["proof (prove)\nusing this:\n  sourcenode a -a # as''\\<rightarrow>* n'\n  V \\<in> Def nx\n  V \\<in> Use n'\n  sourcenode a = nx\n  \\<forall>n''\\<in>set (sourcenodes as''). V \\<notin> Def n''\n\ngoal (1 subgoal):\n 1. nx influences V in n' via a # as''", "by(simp add:dyn_data_dependence_def)"], ["proof (state)\nthis:\n  nx influences V in n' via a # as''\n\ngoal (1 subgoal):\n 1. state_val (transfers (kinds as) s) V = state_val s V", "hence \"nx \\<notin> set (sourcenodes as'')\""], ["proof (prove)\nusing this:\n  nx influences V in n' via a # as''\n\ngoal (1 subgoal):\n 1. nx \\<notin> set (sourcenodes as'')", "by(rule dyn_influence_source_notin_tl_edges)"], ["proof (state)\nthis:\n  nx \\<notin> set (sourcenodes as'')\n\ngoal (1 subgoal):\n 1. state_val (transfers (kinds as) s) V = state_val s V", "with influence source"], ["proof (chain)\npicking this:\n  nx influences V in n' via a # as''\n  sourcenode a = nx\n  nx \\<notin> set (sourcenodes as'')", "have \"\\<exists>asx a'. sourcenode a' -{V}a'#asx\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<and> sourcenode a' = nx \\<and>\n          (\\<exists>asx'. a#as'' = asx'@a'#asx)\""], ["proof (prove)\nusing this:\n  nx influences V in n' via a # as''\n  sourcenode a = nx\n  nx \\<notin> set (sourcenodes as'')\n\ngoal (1 subgoal):\n 1. \\<exists>asx a'.\n       sourcenode a' -{V}a' # asx\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<and>\n       sourcenode a' = nx \\<and> (\\<exists>asx'. a # as'' = asx' @ a' # asx)", "by(fastforce intro:DynPDG_ddep_edge)"], ["proof (state)\nthis:\n  \\<exists>asx a'.\n     sourcenode a' -{V}a' # asx\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<and>\n     sourcenode a' = nx \\<and> (\\<exists>asx'. a # as'' = asx' @ a' # asx)\n\ngoal (1 subgoal):\n 1. state_val (transfers (kinds as) s) V = state_val s V", "with nodes no_dep as"], ["proof (chain)\npicking this:\n  sourcenodes as = ns' @ nx # ns''\n  \\<forall>as' a as''.\n     as = as' @ a # as'' \\<longrightarrow>\n     \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  as = as' @ a # as''\n  \\<exists>asx a'.\n     sourcenode a' -{V}a' # asx\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<and>\n     sourcenode a' = nx \\<and> (\\<exists>asx'. a # as'' = asx' @ a' # asx)", "have False"], ["proof (prove)\nusing this:\n  sourcenodes as = ns' @ nx # ns''\n  \\<forall>as' a as''.\n     as = as' @ a # as'' \\<longrightarrow>\n     \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  as = as' @ a # as''\n  \\<exists>asx a'.\n     sourcenode a' -{V}a' # asx\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<and>\n     sourcenode a' = nx \\<and> (\\<exists>asx'. a # as'' = asx' @ a' # asx)\n\ngoal (1 subgoal):\n 1. False", "by(auto simp:sourcenodes_def)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. state_val (transfers (kinds as) s) V = state_val s V", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?n''2 \\<in> set (sourcenodes as); V \\<in> Def ?n''2\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. state_val (transfers (kinds as) s) V = state_val s V", "hence \"\\<forall>n \\<in> set (sourcenodes as). V \\<notin> Def n\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?n''2 \\<in> set (sourcenodes as); V \\<in> Def ?n''2\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>set (sourcenodes as). V \\<notin> Def n", "by auto"], ["proof (state)\nthis:\n  \\<forall>n\\<in>set (sourcenodes as). V \\<notin> Def n\n\ngoal (1 subgoal):\n 1. state_val (transfers (kinds as) s) V = state_val s V", "with wf path preds"], ["proof (chain)\npicking this:\n  wf {(x, y). x < y}\n  n -as\\<rightarrow>* n'\n  preds (kinds as) s\n  \\<forall>n\\<in>set (sourcenodes as). V \\<notin> Def n", "show ?thesis"], ["proof (prove)\nusing this:\n  wf {(x, y). x < y}\n  n -as\\<rightarrow>* n'\n  preds (kinds as) s\n  \\<forall>n\\<in>set (sourcenodes as). V \\<notin> Def n\n\ngoal (1 subgoal):\n 1. state_val (transfers (kinds as) s) V = state_val s V", "by(fastforce intro:CFG_path_no_Def_equal)"], ["proof (state)\nthis:\n  state_val (transfers (kinds as) s) V = state_val s V\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma DynPDG_ddep_edge_only_first_edge:\n  \"\\<lbrakk>n -{V}a#as\\<rightarrow>\\<^sub>d\\<^sub>d n'; preds (kinds (a#as)) s\\<rbrakk> \\<Longrightarrow> \n    state_val (transfers (kinds (a#as)) s) V = state_val (transfer (kind a) s) V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n -{V}a # as\\<rightarrow>\\<^sub>d\\<^sub>d n';\n     preds (kinds (a # as)) s\\<rbrakk>\n    \\<Longrightarrow> state_val (transfers (kinds (a # as)) s) V =\n                      state_val (transfer (kind a) s) V", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n -{V}a # as\\<rightarrow>\\<^sub>d\\<^sub>d n';\n     preds (kinds (a # as)) s\\<rbrakk>\n    \\<Longrightarrow> state_val (transfers (kinds (a # as)) s) V =\n                      state_val (transfer (kind a) s) V", "apply(erule DynPDG_edge.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na n'a asa.\n       \\<lbrakk>preds (kinds (a # as)) s; n = na; Some V = None;\n        a # as = asa; n' = n'a; na controls n'a via asa\\<rbrakk>\n       \\<Longrightarrow> state_val (transfers (kinds (a # as)) s) V =\n                         state_val (transfer (kind a) s) V\n 2. \\<And>na Va n'a asa.\n       \\<lbrakk>preds (kinds (a # as)) s; n = na; Some V = Some Va;\n        a # as = asa; n' = n'a; na influences Va in n'a via asa\\<rbrakk>\n       \\<Longrightarrow> state_val (transfers (kinds (a # as)) s) V =\n                         state_val (transfer (kind a) s) V", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>preds (kinds (a # as)) s;\n     n influences V in n' via a # as\\<rbrakk>\n    \\<Longrightarrow> state_val (transfers (kinds (a # as)) s) V =\n                      state_val (transfer (kind a) s) V", "apply(frule dyn_influence_Cons_source)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>preds (kinds (a # as)) s; n influences V in n' via a # as;\n     sourcenode a = n\\<rbrakk>\n    \\<Longrightarrow> state_val (transfers (kinds (a # as)) s) V =\n                      state_val (transfer (kind a) s) V", "apply(frule dyn_influence_source_notin_tl_edges)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>preds (kinds (a # as)) s; n influences V in n' via a # as;\n     sourcenode a = n; n \\<notin> set (sourcenodes as)\\<rbrakk>\n    \\<Longrightarrow> state_val (transfers (kinds (a # as)) s) V =\n                      state_val (transfer (kind a) s) V", "by(erule dyn_influence_only_first_edge)"], ["", "lemma Use_value_change_implies_DynPDG_ddep_edge:\n  assumes \"n -as\\<rightarrow>* n'\" and \"V \\<in> Use n'\" and \"preds (kinds as) s\" \n  and \"preds (kinds as) s'\" and \"state_val s V = state_val s' V\"\n  and \"state_val (transfers (kinds as) s) V \\<noteq> \n             state_val (transfers (kinds as) s') V\"\n  obtains as' a as'' where \"as = as'@a#as''\"\n  and \"sourcenode a -{V}a#as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\"\n  and \"state_val (transfers (kinds as) s) V = \n       state_val (transfers (kinds (as'@[a])) s) V\"\n  and \"state_val (transfers (kinds as) s') V = \n       state_val (transfers (kinds (as'@[a])) s') V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as' a as''.\n        \\<lbrakk>as = as' @ a # as'';\n         sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n';\n         state_val (transfers (kinds as) s) V =\n         state_val (transfers (kinds (as' @ [a])) s) V;\n         state_val (transfers (kinds as) s') V =\n         state_val (transfers (kinds (as' @ [a])) s') V\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(atomize_elim)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>as' a as''.\n       as = as' @ a # as'' \\<and>\n       sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<and>\n       state_val (transfers (kinds as) s) V =\n       state_val (transfers (kinds (as' @ [a])) s) V \\<and>\n       state_val (transfers (kinds as) s') V =\n       state_val (transfers (kinds (as' @ [a])) s') V", "show \"\\<exists>as' a as''. as = as'@a#as'' \\<and>\n                     sourcenode a -{V}a#as''\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<and>\n             state_val (transfers (kinds as) s) V = \n             state_val (transfers (kinds (as'@[a])) s) V \\<and>\n             state_val (transfers (kinds as) s') V = \n             state_val (transfers (kinds (as'@[a])) s') V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>as' a as''.\n       as = as' @ a # as'' \\<and>\n       sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<and>\n       state_val (transfers (kinds as) s) V =\n       state_val (transfers (kinds (as' @ [a])) s) V \\<and>\n       state_val (transfers (kinds as) s') V =\n       state_val (transfers (kinds (as' @ [a])) s') V", "proof(cases \"\\<forall>as' a as''. as = as'@a#as'' \\<longrightarrow>\n                 \\<not> sourcenode a -{V}a#as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>as' a as''.\n       as = as' @ a # as'' \\<longrightarrow>\n       \\<not> sourcenode\n               a -{V}a #\n                     as''\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<Longrightarrow>\n    \\<exists>as' a as''.\n       as = as' @ a # as'' \\<and>\n       sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<and>\n       state_val (transfers (kinds as) s) V =\n       state_val (transfers (kinds (as' @ [a])) s) V \\<and>\n       state_val (transfers (kinds as) s') V =\n       state_val (transfers (kinds (as' @ [a])) s') V\n 2. \\<not> (\\<forall>as' a as''.\n               as = as' @ a # as'' \\<longrightarrow>\n               \\<not> sourcenode\n                       a -{V}a #\n                             as''\\<rightarrow>\\<^sub>d\\<^sub>d n') \\<Longrightarrow>\n    \\<exists>as' a as''.\n       as = as' @ a # as'' \\<and>\n       sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<and>\n       state_val (transfers (kinds as) s) V =\n       state_val (transfers (kinds (as' @ [a])) s) V \\<and>\n       state_val (transfers (kinds as) s') V =\n       state_val (transfers (kinds (as' @ [a])) s') V", "case True"], ["proof (state)\nthis:\n  \\<forall>as' a as''.\n     as = as' @ a # as'' \\<longrightarrow>\n     \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (2 subgoals):\n 1. \\<forall>as' a as''.\n       as = as' @ a # as'' \\<longrightarrow>\n       \\<not> sourcenode\n               a -{V}a #\n                     as''\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<Longrightarrow>\n    \\<exists>as' a as''.\n       as = as' @ a # as'' \\<and>\n       sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<and>\n       state_val (transfers (kinds as) s) V =\n       state_val (transfers (kinds (as' @ [a])) s) V \\<and>\n       state_val (transfers (kinds as) s') V =\n       state_val (transfers (kinds (as' @ [a])) s') V\n 2. \\<not> (\\<forall>as' a as''.\n               as = as' @ a # as'' \\<longrightarrow>\n               \\<not> sourcenode\n                       a -{V}a #\n                             as''\\<rightarrow>\\<^sub>d\\<^sub>d n') \\<Longrightarrow>\n    \\<exists>as' a as''.\n       as = as' @ a # as'' \\<and>\n       sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<and>\n       state_val (transfers (kinds as) s) V =\n       state_val (transfers (kinds (as' @ [a])) s) V \\<and>\n       state_val (transfers (kinds as) s') V =\n       state_val (transfers (kinds (as' @ [a])) s') V", "with \\<open>n -as\\<rightarrow>* n'\\<close> \\<open>V \\<in> Use n'\\<close> \\<open>preds (kinds as) s\\<close> \\<open>preds (kinds as) s'\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* n'\n  V \\<in> Use n'\n  preds (kinds as) s\n  preds (kinds as) s'\n  \\<forall>as' a as''.\n     as = as' @ a # as'' \\<longrightarrow>\n     \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'", "have \"state_val (transfers (kinds as) s) V = state_val s V\"\n      and \"state_val (transfers (kinds as) s') V = state_val s' V\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n'\n  V \\<in> Use n'\n  preds (kinds as) s\n  preds (kinds as) s'\n  \\<forall>as' a as''.\n     as = as' @ a # as'' \\<longrightarrow>\n     \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. state_val (transfers (kinds as) s) V = state_val s V &&&\n    state_val (transfers (kinds as) s') V = state_val s' V", "by(auto intro:no_ddep_same_state)"], ["proof (state)\nthis:\n  state_val (transfers (kinds as) s) V = state_val s V\n  state_val (transfers (kinds as) s') V = state_val s' V\n\ngoal (2 subgoals):\n 1. \\<forall>as' a as''.\n       as = as' @ a # as'' \\<longrightarrow>\n       \\<not> sourcenode\n               a -{V}a #\n                     as''\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<Longrightarrow>\n    \\<exists>as' a as''.\n       as = as' @ a # as'' \\<and>\n       sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<and>\n       state_val (transfers (kinds as) s) V =\n       state_val (transfers (kinds (as' @ [a])) s) V \\<and>\n       state_val (transfers (kinds as) s') V =\n       state_val (transfers (kinds (as' @ [a])) s') V\n 2. \\<not> (\\<forall>as' a as''.\n               as = as' @ a # as'' \\<longrightarrow>\n               \\<not> sourcenode\n                       a -{V}a #\n                             as''\\<rightarrow>\\<^sub>d\\<^sub>d n') \\<Longrightarrow>\n    \\<exists>as' a as''.\n       as = as' @ a # as'' \\<and>\n       sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<and>\n       state_val (transfers (kinds as) s) V =\n       state_val (transfers (kinds (as' @ [a])) s) V \\<and>\n       state_val (transfers (kinds as) s') V =\n       state_val (transfers (kinds (as' @ [a])) s') V", "with \\<open>state_val s V = state_val s' V\\<close> \n      \\<open>state_val (transfers (kinds as) s) V \\<noteq> state_val (transfers (kinds as) s') V\\<close>"], ["proof (chain)\npicking this:\n  state_val s V = state_val s' V\n  state_val (transfers (kinds as) s) V \\<noteq>\n  state_val (transfers (kinds as) s') V\n  state_val (transfers (kinds as) s) V = state_val s V\n  state_val (transfers (kinds as) s') V = state_val s' V", "show ?thesis"], ["proof (prove)\nusing this:\n  state_val s V = state_val s' V\n  state_val (transfers (kinds as) s) V \\<noteq>\n  state_val (transfers (kinds as) s') V\n  state_val (transfers (kinds as) s) V = state_val s V\n  state_val (transfers (kinds as) s') V = state_val s' V\n\ngoal (1 subgoal):\n 1. \\<exists>as' a as''.\n       as = as' @ a # as'' \\<and>\n       sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<and>\n       state_val (transfers (kinds as) s) V =\n       state_val (transfers (kinds (as' @ [a])) s) V \\<and>\n       state_val (transfers (kinds as) s') V =\n       state_val (transfers (kinds (as' @ [a])) s') V", "by simp"], ["proof (state)\nthis:\n  \\<exists>as' a as''.\n     as = as' @ a # as'' \\<and>\n     sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<and>\n     state_val (transfers (kinds as) s) V =\n     state_val (transfers (kinds (as' @ [a])) s) V \\<and>\n     state_val (transfers (kinds as) s') V =\n     state_val (transfers (kinds (as' @ [a])) s') V\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>as' a as''.\n               as = as' @ a # as'' \\<longrightarrow>\n               \\<not> sourcenode\n                       a -{V}a #\n                             as''\\<rightarrow>\\<^sub>d\\<^sub>d n') \\<Longrightarrow>\n    \\<exists>as' a as''.\n       as = as' @ a # as'' \\<and>\n       sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<and>\n       state_val (transfers (kinds as) s) V =\n       state_val (transfers (kinds (as' @ [a])) s) V \\<and>\n       state_val (transfers (kinds as) s') V =\n       state_val (transfers (kinds (as' @ [a])) s') V", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>as' a as''.\n               as = as' @ a # as'' \\<longrightarrow>\n               \\<not> sourcenode\n                       a -{V}a #\n                             as''\\<rightarrow>\\<^sub>d\\<^sub>d n') \\<Longrightarrow>\n    \\<exists>as' a as''.\n       as = as' @ a # as'' \\<and>\n       sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<and>\n       state_val (transfers (kinds as) s) V =\n       state_val (transfers (kinds (as' @ [a])) s) V \\<and>\n       state_val (transfers (kinds as) s') V =\n       state_val (transfers (kinds (as' @ [a])) s') V", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<forall>as' a as''.\n             as = as' @ a # as'' \\<longrightarrow>\n             \\<not> sourcenode\n                     a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n')\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>as' a as''.\n               as = as' @ a # as'' \\<longrightarrow>\n               \\<not> sourcenode\n                       a -{V}a #\n                             as''\\<rightarrow>\\<^sub>d\\<^sub>d n') \\<Longrightarrow>\n    \\<exists>as' a as''.\n       as = as' @ a # as'' \\<and>\n       sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<and>\n       state_val (transfers (kinds as) s) V =\n       state_val (transfers (kinds (as' @ [a])) s) V \\<and>\n       state_val (transfers (kinds as) s') V =\n       state_val (transfers (kinds (as' @ [a])) s') V", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>as' a as''.\n             as = as' @ a # as'' \\<longrightarrow>\n             \\<not> sourcenode\n                     a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n')", "obtain as' a as'' where [simp]:\"as = as'@a#as''\"\n      and \"sourcenode a -{V}a#as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>as' a as''.\n             as = as' @ a # as'' \\<longrightarrow>\n             \\<not> sourcenode\n                     a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n')\n\ngoal (1 subgoal):\n 1. (\\<And>as' a as''.\n        \\<lbrakk>as = as' @ a # as'';\n         sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  as = as' @ a # as''\n  sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>as' a as''.\n               as = as' @ a # as'' \\<longrightarrow>\n               \\<not> sourcenode\n                       a -{V}a #\n                             as''\\<rightarrow>\\<^sub>d\\<^sub>d n') \\<Longrightarrow>\n    \\<exists>as' a as''.\n       as = as' @ a # as'' \\<and>\n       sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<and>\n       state_val (transfers (kinds as) s) V =\n       state_val (transfers (kinds (as' @ [a])) s) V \\<and>\n       state_val (transfers (kinds as) s') V =\n       state_val (transfers (kinds (as' @ [a])) s') V", "from \\<open>preds (kinds as) s\\<close>"], ["proof (chain)\npicking this:\n  preds (kinds as) s", "have \"preds (kinds (a#as'')) (transfers (kinds as') s)\""], ["proof (prove)\nusing this:\n  preds (kinds as) s\n\ngoal (1 subgoal):\n 1. preds (kinds (a # as'')) (transfers (kinds as') s)", "by(simp add:kinds_def preds_split)"], ["proof (state)\nthis:\n  preds (kinds (a # as'')) (transfers (kinds as') s)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>as' a as''.\n               as = as' @ a # as'' \\<longrightarrow>\n               \\<not> sourcenode\n                       a -{V}a #\n                             as''\\<rightarrow>\\<^sub>d\\<^sub>d n') \\<Longrightarrow>\n    \\<exists>as' a as''.\n       as = as' @ a # as'' \\<and>\n       sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<and>\n       state_val (transfers (kinds as) s) V =\n       state_val (transfers (kinds (as' @ [a])) s) V \\<and>\n       state_val (transfers (kinds as) s') V =\n       state_val (transfers (kinds (as' @ [a])) s') V", "with \\<open>sourcenode a -{V}a#as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  preds (kinds (a # as'')) (transfers (kinds as') s)", "have all:\n      \"state_val (transfers (kinds (a#as'')) (transfers (kinds as') s)) V = \n       state_val (transfer (kind a) (transfers (kinds as') s)) V\""], ["proof (prove)\nusing this:\n  sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  preds (kinds (a # as'')) (transfers (kinds as') s)\n\ngoal (1 subgoal):\n 1. state_val (transfers (kinds (a # as'')) (transfers (kinds as') s)) V =\n    state_val (transfer (kind a) (transfers (kinds as') s)) V", "by(auto dest!:DynPDG_ddep_edge_only_first_edge)"], ["proof (state)\nthis:\n  state_val (transfers (kinds (a # as'')) (transfers (kinds as') s)) V =\n  state_val (transfer (kind a) (transfers (kinds as') s)) V\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>as' a as''.\n               as = as' @ a # as'' \\<longrightarrow>\n               \\<not> sourcenode\n                       a -{V}a #\n                             as''\\<rightarrow>\\<^sub>d\\<^sub>d n') \\<Longrightarrow>\n    \\<exists>as' a as''.\n       as = as' @ a # as'' \\<and>\n       sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<and>\n       state_val (transfers (kinds as) s) V =\n       state_val (transfers (kinds (as' @ [a])) s) V \\<and>\n       state_val (transfers (kinds as) s') V =\n       state_val (transfers (kinds (as' @ [a])) s') V", "from \\<open>preds (kinds as) s'\\<close>"], ["proof (chain)\npicking this:\n  preds (kinds as) s'", "have \"preds (kinds (a#as'')) (transfers (kinds as') s')\""], ["proof (prove)\nusing this:\n  preds (kinds as) s'\n\ngoal (1 subgoal):\n 1. preds (kinds (a # as'')) (transfers (kinds as') s')", "by(simp add:kinds_def preds_split)"], ["proof (state)\nthis:\n  preds (kinds (a # as'')) (transfers (kinds as') s')\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>as' a as''.\n               as = as' @ a # as'' \\<longrightarrow>\n               \\<not> sourcenode\n                       a -{V}a #\n                             as''\\<rightarrow>\\<^sub>d\\<^sub>d n') \\<Longrightarrow>\n    \\<exists>as' a as''.\n       as = as' @ a # as'' \\<and>\n       sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<and>\n       state_val (transfers (kinds as) s) V =\n       state_val (transfers (kinds (as' @ [a])) s) V \\<and>\n       state_val (transfers (kinds as) s') V =\n       state_val (transfers (kinds (as' @ [a])) s') V", "with \\<open>sourcenode a -{V}a#as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  preds (kinds (a # as'')) (transfers (kinds as') s')", "have all':\n      \"state_val (transfers (kinds (a#as'')) (transfers (kinds as') s')) V = \n       state_val (transfer (kind a) (transfers (kinds as') s')) V\""], ["proof (prove)\nusing this:\n  sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  preds (kinds (a # as'')) (transfers (kinds as') s')\n\ngoal (1 subgoal):\n 1. state_val (transfers (kinds (a # as'')) (transfers (kinds as') s')) V =\n    state_val (transfer (kind a) (transfers (kinds as') s')) V", "by(auto dest!:DynPDG_ddep_edge_only_first_edge)"], ["proof (state)\nthis:\n  state_val (transfers (kinds (a # as'')) (transfers (kinds as') s')) V =\n  state_val (transfer (kind a) (transfers (kinds as') s')) V\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>as' a as''.\n               as = as' @ a # as'' \\<longrightarrow>\n               \\<not> sourcenode\n                       a -{V}a #\n                             as''\\<rightarrow>\\<^sub>d\\<^sub>d n') \\<Longrightarrow>\n    \\<exists>as' a as''.\n       as = as' @ a # as'' \\<and>\n       sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<and>\n       state_val (transfers (kinds as) s) V =\n       state_val (transfers (kinds (as' @ [a])) s) V \\<and>\n       state_val (transfers (kinds as) s') V =\n       state_val (transfers (kinds (as' @ [a])) s') V", "hence eq:\"\\<And>s. transfers (kinds as) s =\n      transfers (kinds (a#as'')) (transfers (kinds as') s)\""], ["proof (prove)\nusing this:\n  state_val (transfers (kinds (a # as'')) (transfers (kinds as') s')) V =\n  state_val (transfer (kind a) (transfers (kinds as') s')) V\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       transfers (kinds as) s =\n       transfers (kinds (a # as'')) (transfers (kinds as') s)", "by(simp add:transfers_split[THEN sym] kinds_def)"], ["proof (state)\nthis:\n  transfers (kinds as) ?s =\n  transfers (kinds (a # as'')) (transfers (kinds as') ?s)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>as' a as''.\n               as = as' @ a # as'' \\<longrightarrow>\n               \\<not> sourcenode\n                       a -{V}a #\n                             as''\\<rightarrow>\\<^sub>d\\<^sub>d n') \\<Longrightarrow>\n    \\<exists>as' a as''.\n       as = as' @ a # as'' \\<and>\n       sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<and>\n       state_val (transfers (kinds as) s) V =\n       state_val (transfers (kinds (as' @ [a])) s) V \\<and>\n       state_val (transfers (kinds as) s') V =\n       state_val (transfers (kinds (as' @ [a])) s') V", "with all"], ["proof (chain)\npicking this:\n  state_val (transfers (kinds (a # as'')) (transfers (kinds as') s)) V =\n  state_val (transfer (kind a) (transfers (kinds as') s)) V\n  transfers (kinds as) ?s =\n  transfers (kinds (a # as'')) (transfers (kinds as') ?s)", "have \"state_val (transfers (kinds as) s) V = \n                   state_val (transfers (kinds (as'@[a])) s) V\""], ["proof (prove)\nusing this:\n  state_val (transfers (kinds (a # as'')) (transfers (kinds as') s)) V =\n  state_val (transfer (kind a) (transfers (kinds as') s)) V\n  transfers (kinds as) ?s =\n  transfers (kinds (a # as'')) (transfers (kinds as') ?s)\n\ngoal (1 subgoal):\n 1. state_val (transfers (kinds as) s) V =\n    state_val (transfers (kinds (as' @ [a])) s) V", "by(simp add:transfers_split kinds_def)"], ["proof (state)\nthis:\n  state_val (transfers (kinds as) s) V =\n  state_val (transfers (kinds (as' @ [a])) s) V\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>as' a as''.\n               as = as' @ a # as'' \\<longrightarrow>\n               \\<not> sourcenode\n                       a -{V}a #\n                             as''\\<rightarrow>\\<^sub>d\\<^sub>d n') \\<Longrightarrow>\n    \\<exists>as' a as''.\n       as = as' @ a # as'' \\<and>\n       sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<and>\n       state_val (transfers (kinds as) s) V =\n       state_val (transfers (kinds (as' @ [a])) s) V \\<and>\n       state_val (transfers (kinds as) s') V =\n       state_val (transfers (kinds (as' @ [a])) s') V", "moreover"], ["proof (state)\nthis:\n  state_val (transfers (kinds as) s) V =\n  state_val (transfers (kinds (as' @ [a])) s) V\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>as' a as''.\n               as = as' @ a # as'' \\<longrightarrow>\n               \\<not> sourcenode\n                       a -{V}a #\n                             as''\\<rightarrow>\\<^sub>d\\<^sub>d n') \\<Longrightarrow>\n    \\<exists>as' a as''.\n       as = as' @ a # as'' \\<and>\n       sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<and>\n       state_val (transfers (kinds as) s) V =\n       state_val (transfers (kinds (as' @ [a])) s) V \\<and>\n       state_val (transfers (kinds as) s') V =\n       state_val (transfers (kinds (as' @ [a])) s') V", "from eq all'"], ["proof (chain)\npicking this:\n  transfers (kinds as) ?s =\n  transfers (kinds (a # as'')) (transfers (kinds as') ?s)\n  state_val (transfers (kinds (a # as'')) (transfers (kinds as') s')) V =\n  state_val (transfer (kind a) (transfers (kinds as') s')) V", "have \"state_val (transfers (kinds as) s') V = \n                       state_val (transfers (kinds (as'@[a])) s') V\""], ["proof (prove)\nusing this:\n  transfers (kinds as) ?s =\n  transfers (kinds (a # as'')) (transfers (kinds as') ?s)\n  state_val (transfers (kinds (a # as'')) (transfers (kinds as') s')) V =\n  state_val (transfer (kind a) (transfers (kinds as') s')) V\n\ngoal (1 subgoal):\n 1. state_val (transfers (kinds as) s') V =\n    state_val (transfers (kinds (as' @ [a])) s') V", "by(simp add:transfers_split kinds_def)"], ["proof (state)\nthis:\n  state_val (transfers (kinds as) s') V =\n  state_val (transfers (kinds (as' @ [a])) s') V\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>as' a as''.\n               as = as' @ a # as'' \\<longrightarrow>\n               \\<not> sourcenode\n                       a -{V}a #\n                             as''\\<rightarrow>\\<^sub>d\\<^sub>d n') \\<Longrightarrow>\n    \\<exists>as' a as''.\n       as = as' @ a # as'' \\<and>\n       sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<and>\n       state_val (transfers (kinds as) s) V =\n       state_val (transfers (kinds (as' @ [a])) s) V \\<and>\n       state_val (transfers (kinds as) s') V =\n       state_val (transfers (kinds (as' @ [a])) s') V", "ultimately"], ["proof (chain)\npicking this:\n  state_val (transfers (kinds as) s) V =\n  state_val (transfers (kinds (as' @ [a])) s) V\n  state_val (transfers (kinds as) s') V =\n  state_val (transfers (kinds (as' @ [a])) s') V", "show ?thesis"], ["proof (prove)\nusing this:\n  state_val (transfers (kinds as) s) V =\n  state_val (transfers (kinds (as' @ [a])) s) V\n  state_val (transfers (kinds as) s') V =\n  state_val (transfers (kinds (as' @ [a])) s') V\n\ngoal (1 subgoal):\n 1. \\<exists>as' a as''.\n       as = as' @ a # as'' \\<and>\n       sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<and>\n       state_val (transfers (kinds as) s) V =\n       state_val (transfers (kinds (as' @ [a])) s) V \\<and>\n       state_val (transfers (kinds as) s') V =\n       state_val (transfers (kinds (as' @ [a])) s') V", "using \\<open>sourcenode a -{V}a#as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close>"], ["proof (prove)\nusing this:\n  state_val (transfers (kinds as) s) V =\n  state_val (transfers (kinds (as' @ [a])) s) V\n  state_val (transfers (kinds as) s') V =\n  state_val (transfers (kinds (as' @ [a])) s') V\n  sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. \\<exists>as' a as''.\n       as = as' @ a # as'' \\<and>\n       sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<and>\n       state_val (transfers (kinds as) s) V =\n       state_val (transfers (kinds (as' @ [a])) s) V \\<and>\n       state_val (transfers (kinds as) s') V =\n       state_val (transfers (kinds (as' @ [a])) s') V", "by simp blast"], ["proof (state)\nthis:\n  \\<exists>as' a as''.\n     as = as' @ a # as'' \\<and>\n     sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<and>\n     state_val (transfers (kinds as) s) V =\n     state_val (transfers (kinds (as' @ [a])) s) V \\<and>\n     state_val (transfers (kinds as) s') V =\n     state_val (transfers (kinds (as' @ [a])) s') V\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>as' a as''.\n     as = as' @ a # as'' \\<and>\n     sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<and>\n     state_val (transfers (kinds as) s) V =\n     state_val (transfers (kinds (as' @ [a])) s) V \\<and>\n     state_val (transfers (kinds as) s') V =\n     state_val (transfers (kinds (as' @ [a])) s') V\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Instantiate dynamic PDG\\<close>"], ["", "subsubsection \\<open>Standard control dependence\\<close>"], ["", "locale DynStandardControlDependencePDG =\n  Postdomination sourcenode targetnode kind valid_edge Entry Exit +\n  CFGExit_wf sourcenode targetnode kind valid_edge Entry Def Use state_val Exit\n  for sourcenode :: \"'edge \\<Rightarrow> 'node\" and targetnode :: \"'edge \\<Rightarrow> 'node\"\n  and kind :: \"'edge \\<Rightarrow> 'state edge_kind\" and valid_edge :: \"'edge \\<Rightarrow> bool\"\n  and Entry :: \"'node\" (\"'('_Entry'_')\") and Def :: \"'node \\<Rightarrow> 'var set\"\n  and Use :: \"'node \\<Rightarrow> 'var set\" and state_val :: \"'state \\<Rightarrow> 'var \\<Rightarrow> 'val\"\n  and Exit :: \"'node\" (\"'('_Exit'_')\")\n\nbegin"], ["", "lemma DynPDG_scd:\n  \"DynPDG sourcenode targetnode kind valid_edge (_Entry_) \n          Def Use state_val (_Exit_) dyn_standard_control_dependence\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DynPDG sourcenode targetnode kind valid_edge (_Entry_) Def Use state_val\n     (_Exit_) dyn_standard_control_dependence", "proof(unfold_locales)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n n' as.\n       n controls\\<^sub>s n' via as \\<Longrightarrow> n' \\<noteq> (_Exit_)\n 2. \\<And>n n' as.\n       n controls\\<^sub>s n' via as \\<Longrightarrow>\n       n -as\\<rightarrow>* n' \\<and> as \\<noteq> []", "fix n n' as"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n n' as.\n       n controls\\<^sub>s n' via as \\<Longrightarrow> n' \\<noteq> (_Exit_)\n 2. \\<And>n n' as.\n       n controls\\<^sub>s n' via as \\<Longrightarrow>\n       n -as\\<rightarrow>* n' \\<and> as \\<noteq> []", "assume \"n controls\\<^sub>s n' via as\""], ["proof (state)\nthis:\n  n controls\\<^sub>s n' via as\n\ngoal (2 subgoals):\n 1. \\<And>n n' as.\n       n controls\\<^sub>s n' via as \\<Longrightarrow> n' \\<noteq> (_Exit_)\n 2. \\<And>n n' as.\n       n controls\\<^sub>s n' via as \\<Longrightarrow>\n       n -as\\<rightarrow>* n' \\<and> as \\<noteq> []", "show \"n' \\<noteq> (_Exit_)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n' \\<noteq> (_Exit_)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. n' = (_Exit_) \\<Longrightarrow> False", "assume \"n' = (_Exit_)\""], ["proof (state)\nthis:\n  n' = (_Exit_)\n\ngoal (1 subgoal):\n 1. n' = (_Exit_) \\<Longrightarrow> False", "with \\<open>n controls\\<^sub>s n' via as\\<close>"], ["proof (chain)\npicking this:\n  n controls\\<^sub>s n' via as\n  n' = (_Exit_)", "show False"], ["proof (prove)\nusing this:\n  n controls\\<^sub>s n' via as\n  n' = (_Exit_)\n\ngoal (1 subgoal):\n 1. False", "by(fastforce intro:Exit_not_dyn_standard_control_dependent)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n' \\<noteq> (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<And>n n' as.\n       n controls\\<^sub>s n' via as \\<Longrightarrow>\n       n -as\\<rightarrow>* n' \\<and> as \\<noteq> []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n n' as.\n       n controls\\<^sub>s n' via as \\<Longrightarrow>\n       n -as\\<rightarrow>* n' \\<and> as \\<noteq> []", "fix n n' as"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n n' as.\n       n controls\\<^sub>s n' via as \\<Longrightarrow>\n       n -as\\<rightarrow>* n' \\<and> as \\<noteq> []", "assume \"n controls\\<^sub>s n' via as\""], ["proof (state)\nthis:\n  n controls\\<^sub>s n' via as\n\ngoal (1 subgoal):\n 1. \\<And>n n' as.\n       n controls\\<^sub>s n' via as \\<Longrightarrow>\n       n -as\\<rightarrow>* n' \\<and> as \\<noteq> []", "thus \"n -as\\<rightarrow>* n' \\<and> as \\<noteq> []\""], ["proof (prove)\nusing this:\n  n controls\\<^sub>s n' via as\n\ngoal (1 subgoal):\n 1. n -as\\<rightarrow>* n' \\<and> as \\<noteq> []", "by(fastforce simp:dyn_standard_control_dependence_def)"], ["proof (state)\nthis:\n  n -as\\<rightarrow>* n' \\<and> as \\<noteq> []\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsubsection \\<open>Weak control dependence\\<close>"], ["", "locale DynWeakControlDependencePDG = \n  StrongPostdomination sourcenode targetnode kind valid_edge Entry Exit +\n  CFGExit_wf sourcenode targetnode kind valid_edge Entry Def Use state_val Exit\n  for sourcenode :: \"'edge \\<Rightarrow> 'node\" and targetnode :: \"'edge \\<Rightarrow> 'node\"\n  and kind :: \"'edge \\<Rightarrow> 'state edge_kind\" and valid_edge :: \"'edge \\<Rightarrow> bool\"\n  and Entry :: \"'node\" (\"'('_Entry'_')\") and Def :: \"'node \\<Rightarrow> 'var set\"\n  and Use :: \"'node \\<Rightarrow> 'var set\" and state_val :: \"'state \\<Rightarrow> 'var \\<Rightarrow> 'val\"\n  and Exit :: \"'node\" (\"'('_Exit'_')\")\n\nbegin"], ["", "lemma DynPDG_wcd:\n  \"DynPDG sourcenode targetnode kind valid_edge (_Entry_) \n          Def Use state_val (_Exit_) dyn_weak_control_dependence\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DynPDG sourcenode targetnode kind valid_edge (_Entry_) Def Use state_val\n     (_Exit_) dyn_weak_control_dependence", "proof(unfold_locales)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n n' as.\n       n weakly controls n' via as \\<Longrightarrow> n' \\<noteq> (_Exit_)\n 2. \\<And>n n' as.\n       n weakly controls n' via as \\<Longrightarrow>\n       n -as\\<rightarrow>* n' \\<and> as \\<noteq> []", "fix n n' as"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n n' as.\n       n weakly controls n' via as \\<Longrightarrow> n' \\<noteq> (_Exit_)\n 2. \\<And>n n' as.\n       n weakly controls n' via as \\<Longrightarrow>\n       n -as\\<rightarrow>* n' \\<and> as \\<noteq> []", "assume \"n weakly controls n' via as\""], ["proof (state)\nthis:\n  n weakly controls n' via as\n\ngoal (2 subgoals):\n 1. \\<And>n n' as.\n       n weakly controls n' via as \\<Longrightarrow> n' \\<noteq> (_Exit_)\n 2. \\<And>n n' as.\n       n weakly controls n' via as \\<Longrightarrow>\n       n -as\\<rightarrow>* n' \\<and> as \\<noteq> []", "show \"n' \\<noteq> (_Exit_)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n' \\<noteq> (_Exit_)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. n' = (_Exit_) \\<Longrightarrow> False", "assume \"n' = (_Exit_)\""], ["proof (state)\nthis:\n  n' = (_Exit_)\n\ngoal (1 subgoal):\n 1. n' = (_Exit_) \\<Longrightarrow> False", "with \\<open>n weakly controls n' via as\\<close>"], ["proof (chain)\npicking this:\n  n weakly controls n' via as\n  n' = (_Exit_)", "show False"], ["proof (prove)\nusing this:\n  n weakly controls n' via as\n  n' = (_Exit_)\n\ngoal (1 subgoal):\n 1. False", "by(fastforce intro:Exit_not_dyn_weak_control_dependent)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n' \\<noteq> (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<And>n n' as.\n       n weakly controls n' via as \\<Longrightarrow>\n       n -as\\<rightarrow>* n' \\<and> as \\<noteq> []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n n' as.\n       n weakly controls n' via as \\<Longrightarrow>\n       n -as\\<rightarrow>* n' \\<and> as \\<noteq> []", "fix n n' as"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n n' as.\n       n weakly controls n' via as \\<Longrightarrow>\n       n -as\\<rightarrow>* n' \\<and> as \\<noteq> []", "assume \"n weakly controls n' via as\""], ["proof (state)\nthis:\n  n weakly controls n' via as\n\ngoal (1 subgoal):\n 1. \\<And>n n' as.\n       n weakly controls n' via as \\<Longrightarrow>\n       n -as\\<rightarrow>* n' \\<and> as \\<noteq> []", "thus \"n -as\\<rightarrow>* n' \\<and> as \\<noteq> []\""], ["proof (prove)\nusing this:\n  n weakly controls n' via as\n\ngoal (1 subgoal):\n 1. n -as\\<rightarrow>* n' \\<and> as \\<noteq> []", "by(fastforce simp:dyn_weak_control_dependence_def)"], ["proof (state)\nthis:\n  n -as\\<rightarrow>* n' \\<and> as \\<noteq> []\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Data slice\\<close>"], ["", "definition (in CFG) empty_control_dependence :: \"'node \\<Rightarrow> 'node \\<Rightarrow> 'edge list \\<Rightarrow> bool\"\nwhere \"empty_control_dependence n n' as \\<equiv> False\""], ["", "lemma (in CFGExit_wf) DynPDG_scd:\n  \"DynPDG sourcenode targetnode kind valid_edge (_Entry_)\n          Def Use state_val  (_Exit_) empty_control_dependence\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DynPDG sourcenode targetnode kind valid_edge (_Entry_) Def Use state_val\n     (_Exit_) empty_control_dependence", "proof(unfold_locales)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n n' as.\n       empty_control_dependence n n' as \\<Longrightarrow>\n       n' \\<noteq> (_Exit_)\n 2. \\<And>n n' as.\n       empty_control_dependence n n' as \\<Longrightarrow>\n       n -as\\<rightarrow>* n' \\<and> as \\<noteq> []", "fix n n' as"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n n' as.\n       empty_control_dependence n n' as \\<Longrightarrow>\n       n' \\<noteq> (_Exit_)\n 2. \\<And>n n' as.\n       empty_control_dependence n n' as \\<Longrightarrow>\n       n -as\\<rightarrow>* n' \\<and> as \\<noteq> []", "assume \"empty_control_dependence n n' as\""], ["proof (state)\nthis:\n  empty_control_dependence n n' as\n\ngoal (2 subgoals):\n 1. \\<And>n n' as.\n       empty_control_dependence n n' as \\<Longrightarrow>\n       n' \\<noteq> (_Exit_)\n 2. \\<And>n n' as.\n       empty_control_dependence n n' as \\<Longrightarrow>\n       n -as\\<rightarrow>* n' \\<and> as \\<noteq> []", "thus \"n' \\<noteq> (_Exit_)\""], ["proof (prove)\nusing this:\n  empty_control_dependence n n' as\n\ngoal (1 subgoal):\n 1. n' \\<noteq> (_Exit_)", "by(simp add:empty_control_dependence_def)"], ["proof (state)\nthis:\n  n' \\<noteq> (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<And>n n' as.\n       empty_control_dependence n n' as \\<Longrightarrow>\n       n -as\\<rightarrow>* n' \\<and> as \\<noteq> []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n n' as.\n       empty_control_dependence n n' as \\<Longrightarrow>\n       n -as\\<rightarrow>* n' \\<and> as \\<noteq> []", "fix n n' as"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n n' as.\n       empty_control_dependence n n' as \\<Longrightarrow>\n       n -as\\<rightarrow>* n' \\<and> as \\<noteq> []", "assume \"empty_control_dependence n n' as\""], ["proof (state)\nthis:\n  empty_control_dependence n n' as\n\ngoal (1 subgoal):\n 1. \\<And>n n' as.\n       empty_control_dependence n n' as \\<Longrightarrow>\n       n -as\\<rightarrow>* n' \\<and> as \\<noteq> []", "thus \"n -as\\<rightarrow>* n' \\<and> as \\<noteq> []\""], ["proof (prove)\nusing this:\n  empty_control_dependence n n' as\n\ngoal (1 subgoal):\n 1. n -as\\<rightarrow>* n' \\<and> as \\<noteq> []", "by(simp add:empty_control_dependence_def)"], ["proof (state)\nthis:\n  n -as\\<rightarrow>* n' \\<and> as \\<noteq> []\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}