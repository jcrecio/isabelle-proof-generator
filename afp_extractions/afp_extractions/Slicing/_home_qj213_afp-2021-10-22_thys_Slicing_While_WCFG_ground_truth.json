{"file_name": "/home/qj213/afp-2021-10-22/thys/Slicing/While/WCFG.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Slicing", "problem_names": ["lemma Exit_label_incr [dest]: \"(_Exit_) = n \\<oplus> i \\<Longrightarrow> n = (_Exit_)\"", "lemma label_incr_Exit [dest]: \"n \\<oplus> i = (_Exit_) \\<Longrightarrow> n = (_Exit_)\"", "lemma Entry_label_incr [dest]: \"(_Entry_) = n \\<oplus> i \\<Longrightarrow> n = (_Entry_)\"", "lemma label_incr_Entry [dest]: \"n \\<oplus> i = (_Entry_) \\<Longrightarrow> n = (_Entry_)\"", "lemma label_incr_inj:\n  \"n \\<oplus> c = n' \\<oplus> c \\<Longrightarrow> n = n'\"", "lemma label_incr_simp:\"n \\<oplus> i = m \\<oplus> (i + j) \\<Longrightarrow> n = m \\<oplus> j\"", "lemma label_incr_simp_rev:\"m \\<oplus> (j + i) = n \\<oplus> i \\<Longrightarrow> m \\<oplus> j = n\"", "lemma label_incr_start_Node_smaller:\n  \"(_ l _) = n \\<oplus> i \\<Longrightarrow> n = (_(l - i)_)\"", "lemma label_incr_ge:\"(_ l _) = n \\<oplus> i \\<Longrightarrow> l \\<ge> i\"", "lemma label_incr_0 [dest]:\n  \"\\<lbrakk>(_0_) = n \\<oplus> i; i > 0\\<rbrakk> \\<Longrightarrow> False\"", "lemma label_incr_0_rev [dest]:\n  \"\\<lbrakk>n \\<oplus> i = (_0_); i > 0\\<rbrakk> \\<Longrightarrow> False\"", "lemmas WCFG_intros = While_CFG.intros[split_format (complete)]", "lemmas WCFG_elims = While_CFG.cases[split_format (complete)]", "lemmas WCFG_induct = While_CFG.induct[split_format (complete)]", "lemma WCFG_Exit_no_sourcenode [dest]:\n  \"prog \\<turnstile> (_Exit_) -et\\<rightarrow> n' \\<Longrightarrow> False\"", "lemma WCFG_Entry_no_targetnode [dest]:\n  \"prog \\<turnstile> n -et\\<rightarrow> (_Entry_) \\<Longrightarrow> False\"", "lemma WCFG_sourcelabel_less_num_nodes:\n  \"prog \\<turnstile> (_ l _) -et\\<rightarrow> n' \\<Longrightarrow> l < #:prog\"", "lemma WCFG_targetlabel_less_num_nodes:\n  \"prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<Longrightarrow> l < #:prog\"", "lemma WCFG_EntryD:\n  \"prog \\<turnstile> (_Entry_) -et\\<rightarrow> n'\n  \\<Longrightarrow> (n' = (_Exit_) \\<and> et = (\\<lambda>s. False)\\<^sub>\\<surd>) \\<or> (n' = (_0_) \\<and> et = (\\<lambda>s. True)\\<^sub>\\<surd>)\"", "lemma WCFG_edge_det:\n  \"\\<lbrakk>prog \\<turnstile> n -et\\<rightarrow> n'; prog \\<turnstile> n -et'\\<rightarrow> n'\\<rbrakk> \\<Longrightarrow> et = et'\"", "lemma less_num_nodes_edge_Exit:\n  obtains l et where \"l < #:prog\" and \"prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\"", "lemma less_num_nodes_edge:\n  \"l < #:prog \\<Longrightarrow> \\<exists>n et. prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog \\<turnstile> (_ l _) -et\\<rightarrow> n\"", "lemma WCFG_deterministic:\n  \"\\<lbrakk>prog \\<turnstile> n\\<^sub>1 -et\\<^sub>1\\<rightarrow> n\\<^sub>1'; prog \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'; n\\<^sub>1 = n\\<^sub>2; n\\<^sub>1' \\<noteq> n\\<^sub>2'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Q Q'. et\\<^sub>1 = (Q)\\<^sub>\\<surd> \\<and> et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and> (\\<forall>s. (Q s \\<longrightarrow> \\<not> Q' s) \\<and> (Q' s \\<longrightarrow> \\<not> Q s))\""], "translations": [["", "lemma Exit_label_incr [dest]: \"(_Exit_) = n \\<oplus> i \\<Longrightarrow> n = (_Exit_)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (_Exit_) = n \\<oplus> i \\<Longrightarrow> n = (_Exit_)", "by(cases n,auto)"], ["", "lemma label_incr_Exit [dest]: \"n \\<oplus> i = (_Exit_) \\<Longrightarrow> n = (_Exit_)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<oplus> i = (_Exit_) \\<Longrightarrow> n = (_Exit_)", "by(cases n,auto)"], ["", "lemma Entry_label_incr [dest]: \"(_Entry_) = n \\<oplus> i \\<Longrightarrow> n = (_Entry_)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (_Entry_) = n \\<oplus> i \\<Longrightarrow> n = (_Entry_)", "by(cases n,auto)"], ["", "lemma label_incr_Entry [dest]: \"n \\<oplus> i = (_Entry_) \\<Longrightarrow> n = (_Entry_)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<oplus> i = (_Entry_) \\<Longrightarrow> n = (_Entry_)", "by(cases n,auto)"], ["", "lemma label_incr_inj:\n  \"n \\<oplus> c = n' \\<oplus> c \\<Longrightarrow> n = n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<oplus> c = n' \\<oplus> c \\<Longrightarrow> n = n'", "by(cases n)(cases n',auto)+"], ["", "lemma label_incr_simp:\"n \\<oplus> i = m \\<oplus> (i + j) \\<Longrightarrow> n = m \\<oplus> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<oplus> i = m \\<oplus> i + j \\<Longrightarrow> n = m \\<oplus> j", "by(cases n,auto,cases m,auto)"], ["", "lemma label_incr_simp_rev:\"m \\<oplus> (j + i) = n \\<oplus> i \\<Longrightarrow> m \\<oplus> j = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<oplus> j + i = n \\<oplus> i \\<Longrightarrow> m \\<oplus> j = n", "by(cases n,auto,cases m,auto)"], ["", "lemma label_incr_start_Node_smaller:\n  \"(_ l _) = n \\<oplus> i \\<Longrightarrow> n = (_(l - i)_)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (_ l _) = n \\<oplus> i \\<Longrightarrow> n = (_ l - i _)", "by(cases n,auto)"], ["", "lemma label_incr_ge:\"(_ l _) = n \\<oplus> i \\<Longrightarrow> l \\<ge> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (_ l _) = n \\<oplus> i \\<Longrightarrow> i \\<le> l", "by(cases n) auto"], ["", "lemma label_incr_0 [dest]:\n  \"\\<lbrakk>(_0_) = n \\<oplus> i; i > 0\\<rbrakk> \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(_ 0 _) = n \\<oplus> i; 0 < i\\<rbrakk> \\<Longrightarrow> False", "by(cases n) auto"], ["", "lemma label_incr_0_rev [dest]:\n  \"\\<lbrakk>n \\<oplus> i = (_0_); i > 0\\<rbrakk> \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<oplus> i = (_ 0 _); 0 < i\\<rbrakk> \\<Longrightarrow> False", "by(cases n) auto"], ["", "subsection\\<open>CFG edges\\<close>"], ["", "type_synonym w_edge = \"(w_node \\<times> state edge_kind \\<times> w_node)\""], ["", "inductive While_CFG :: \"cmd \\<Rightarrow> w_node \\<Rightarrow> state edge_kind \\<Rightarrow> w_node \\<Rightarrow> bool\"\n  (\"_ \\<turnstile> _ -_\\<rightarrow> _\")\nwhere\n\nWCFG_Entry_Exit:\n  \"prog \\<turnstile> (_Entry_) -(\\<lambda>s. False)\\<^sub>\\<surd>\\<rightarrow> (_Exit_)\"\n\n| WCFG_Entry:\n  \"prog \\<turnstile> (_Entry_) -(\\<lambda>s. True)\\<^sub>\\<surd>\\<rightarrow> (_0_)\"\n\n| WCFG_Skip: \n  \"Skip \\<turnstile> (_0_) -\\<Up>id\\<rightarrow> (_Exit_)\"\n\n| WCFG_LAss: \n  \"V:=e \\<turnstile> (_0_) -\\<Up>(\\<lambda>s. s(V:=(interpret e s)))\\<rightarrow> (_1_)\"\n\n| WCFG_LAssSkip:\n  \"V:=e \\<turnstile> (_1_) -\\<Up>id\\<rightarrow> (_Exit_)\"\n\n| WCFG_SeqFirst:\n  \"\\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'; n' \\<noteq> (_Exit_)\\<rbrakk> \\<Longrightarrow> c\\<^sub>1;;c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\"\n\n| WCFG_SeqConnect: \n  \"\\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk> \\<Longrightarrow> c\\<^sub>1;;c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> (_0_) \\<oplus> #:c\\<^sub>1\"\n\n| WCFG_SeqSecond: \n  \"\\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_)\\<rbrakk> \\<Longrightarrow> c\\<^sub>1;;c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\"\n\n| WCFG_CondTrue:\n    \"if (b) c\\<^sub>1 else c\\<^sub>2 \\<turnstile> (_0_) -(\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\\<rightarrow> (_0_) \\<oplus> 1\"\n\n| WCFG_CondFalse:\n    \"if (b) c\\<^sub>1 else c\\<^sub>2 \\<turnstile> (_0_) -(\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\\<rightarrow> (_0_) \\<oplus> (#:c\\<^sub>1 + 1)\"\n\n| WCFG_CondThen:\n  \"\\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_)\\<rbrakk> \\<Longrightarrow> if (b) c\\<^sub>1 else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et\\<rightarrow> n' \\<oplus> 1\"\n\n| WCFG_CondElse:\n  \"\\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_)\\<rbrakk> \n  \\<Longrightarrow> if (b) c\\<^sub>1 else c\\<^sub>2 \\<turnstile> n \\<oplus> (#:c\\<^sub>1 + 1) -et\\<rightarrow> n' \\<oplus> (#:c\\<^sub>1 + 1)\"\n\n| WCFG_WhileTrue:\n    \"while (b) c' \\<turnstile> (_0_) -(\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\\<rightarrow> (_0_) \\<oplus> 2\"\n\n| WCFG_WhileFalse:\n    \"while (b) c' \\<turnstile> (_0_) -(\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\\<rightarrow> (_1_)\"\n\n| WCFG_WhileFalseSkip:\n  \"while (b) c' \\<turnstile> (_1_) -\\<Up>id\\<rightarrow> (_Exit_)\"\n\n| WCFG_WhileBody:\n  \"\\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_)\\<rbrakk> \n  \\<Longrightarrow> while (b) c' \\<turnstile> n \\<oplus> 2 -et\\<rightarrow> n' \\<oplus> 2\"\n\n| WCFG_WhileBodyExit:\n  \"\\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk> \\<Longrightarrow> while (b) c' \\<turnstile> n \\<oplus> 2 -et\\<rightarrow> (_0_)\""], ["", "lemmas WCFG_intros = While_CFG.intros[split_format (complete)]"], ["", "lemmas WCFG_elims = While_CFG.cases[split_format (complete)]"], ["", "lemmas WCFG_induct = While_CFG.induct[split_format (complete)]"], ["", "subsection \\<open>Some lemmas about the CFG\\<close>"], ["", "lemma WCFG_Exit_no_sourcenode [dest]:\n  \"prog \\<turnstile> (_Exit_) -et\\<rightarrow> n' \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prog \\<turnstile> (_Exit_) -et\\<rightarrow> n' \\<Longrightarrow> False", "by(induct prog n\\<equiv>\"(_Exit_)\" et n' rule:WCFG_induct,auto)"], ["", "lemma WCFG_Entry_no_targetnode [dest]:\n  \"prog \\<turnstile> n -et\\<rightarrow> (_Entry_) \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prog \\<turnstile> n -et\\<rightarrow> (_Entry_) \\<Longrightarrow> False", "by(induct prog n et n'\\<equiv>\"(_Entry_)\" rule:WCFG_induct,auto)"], ["", "lemma WCFG_sourcelabel_less_num_nodes:\n  \"prog \\<turnstile> (_ l _) -et\\<rightarrow> n' \\<Longrightarrow> l < #:prog\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prog \\<turnstile> (_ l _) -et\\<rightarrow> n' \\<Longrightarrow>\n    l < #:prog", "proof(induct prog \"(_ l _)\" et n' arbitrary:l rule:WCFG_induct)"], ["proof (state)\ngoal (15 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>c\\<^sub>1 et n' c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> n';\n        l < #:c\\<^sub>1; n' \\<noteq> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 5. \\<And>c\\<^sub>1 et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        l < #:c\\<^sub>1; (_ l _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 6. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 9. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 10. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n        \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n         n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n        \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\nA total of 15 subgoals...", "case (WCFG_SeqFirst c\\<^sub>1 et n' c\\<^sub>2)"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> n'\n  l < #:c\\<^sub>1\n  n' \\<noteq> (_Exit_)\n\ngoal (15 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>c\\<^sub>1 et n' c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> n';\n        l < #:c\\<^sub>1; n' \\<noteq> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 5. \\<And>c\\<^sub>1 et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        l < #:c\\<^sub>1; (_ l _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 6. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 9. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 10. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n        \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n         n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n        \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\nA total of 15 subgoals...", "from \\<open>l < #:c\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  l < #:c\\<^sub>1", "show ?case"], ["proof (prove)\nusing this:\n  l < #:c\\<^sub>1\n\ngoal (1 subgoal):\n 1. l < #:c\\<^sub>1;; c\\<^sub>2", "by simp"], ["proof (state)\nthis:\n  l < #:c\\<^sub>1;; c\\<^sub>2\n\ngoal (14 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>c\\<^sub>1 et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        l < #:c\\<^sub>1; (_ l _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 5. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 10. \\<And>b c'. 0 < #:while (b) c'\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>c\\<^sub>1 et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        l < #:c\\<^sub>1; (_ l _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 5. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 10. \\<And>b c'. 0 < #:while (b) c'\nA total of 14 subgoals...", "case (WCFG_SeqConnect c\\<^sub>1 et c\\<^sub>2)"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n  l < #:c\\<^sub>1\n  (_ l _) \\<noteq> (_Entry_)\n\ngoal (14 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>c\\<^sub>1 et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        l < #:c\\<^sub>1; (_ l _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 5. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 10. \\<And>b c'. 0 < #:while (b) c'\nA total of 14 subgoals...", "from \\<open>l < #:c\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  l < #:c\\<^sub>1", "show ?case"], ["proof (prove)\nusing this:\n  l < #:c\\<^sub>1\n\ngoal (1 subgoal):\n 1. l < #:c\\<^sub>1;; c\\<^sub>2", "by simp"], ["proof (state)\nthis:\n  l < #:c\\<^sub>1;; c\\<^sub>2\n\ngoal (13 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 9. \\<And>b c'. 0 < #:while (b) c'\n 10. \\<And>b c'. 0 < #:while (b) c'\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 9. \\<And>b c'. 0 < #:while (b) c'\n 10. \\<And>b c'. 0 < #:while (b) c'\nA total of 13 subgoals...", "case (WCFG_SeqSecond c\\<^sub>2 n et n' c\\<^sub>1)"], ["proof (state)\nthis:\n  c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\n  n = (_ ?l _) \\<Longrightarrow> ?l < #:c\\<^sub>2\n  n \\<noteq> (_Entry_)\n  n \\<oplus> #:c\\<^sub>1 = (_ l _)\n\ngoal (13 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 9. \\<And>b c'. 0 < #:while (b) c'\n 10. \\<And>b c'. 0 < #:while (b) c'\nA total of 13 subgoals...", "note IH = \\<open>\\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2\\<close>"], ["proof (state)\nthis:\n  n = (_ ?l _) \\<Longrightarrow> ?l < #:c\\<^sub>2\n\ngoal (13 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 9. \\<And>b c'. 0 < #:while (b) c'\n 10. \\<And>b c'. 0 < #:while (b) c'\nA total of 13 subgoals...", "from \\<open>n \\<oplus> #:c\\<^sub>1 = (_ l _)\\<close>"], ["proof (chain)\npicking this:\n  n \\<oplus> #:c\\<^sub>1 = (_ l _)", "obtain l' where \"n = (_ l' _)\""], ["proof (prove)\nusing this:\n  n \\<oplus> #:c\\<^sub>1 = (_ l _)\n\ngoal (1 subgoal):\n 1. (\\<And>l'. n = (_ l' _) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases n) auto"], ["proof (state)\nthis:\n  n = (_ l' _)\n\ngoal (13 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 9. \\<And>b c'. 0 < #:while (b) c'\n 10. \\<And>b c'. 0 < #:while (b) c'\nA total of 13 subgoals...", "from IH[OF this]"], ["proof (chain)\npicking this:\n  l' < #:c\\<^sub>2", "have \"l' < #:c\\<^sub>2\""], ["proof (prove)\nusing this:\n  l' < #:c\\<^sub>2\n\ngoal (1 subgoal):\n 1. l' < #:c\\<^sub>2", "."], ["proof (state)\nthis:\n  l' < #:c\\<^sub>2\n\ngoal (13 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 9. \\<And>b c'. 0 < #:while (b) c'\n 10. \\<And>b c'. 0 < #:while (b) c'\nA total of 13 subgoals...", "with \\<open>n \\<oplus> #:c\\<^sub>1 = (_ l _)\\<close> \\<open>n = (_ l' _)\\<close>"], ["proof (chain)\npicking this:\n  n \\<oplus> #:c\\<^sub>1 = (_ l _)\n  n = (_ l' _)\n  l' < #:c\\<^sub>2", "show ?case"], ["proof (prove)\nusing this:\n  n \\<oplus> #:c\\<^sub>1 = (_ l _)\n  n = (_ l' _)\n  l' < #:c\\<^sub>2\n\ngoal (1 subgoal):\n 1. l < #:c\\<^sub>1;; c\\<^sub>2", "by simp"], ["proof (state)\nthis:\n  l < #:c\\<^sub>1;; c\\<^sub>2\n\ngoal (12 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 8. \\<And>b c'. 0 < #:while (b) c'\n 9. \\<And>b c'. 0 < #:while (b) c'\n 10. \\<And>b c'. 1 < #:while (b) c'\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 8. \\<And>b c'. 0 < #:while (b) c'\n 9. \\<And>b c'. 0 < #:while (b) c'\n 10. \\<And>b c'. 1 < #:while (b) c'\nA total of 12 subgoals...", "case (WCFG_CondThen c\\<^sub>1 n et n' b c\\<^sub>2)"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\n  n = (_ ?l _) \\<Longrightarrow> ?l < #:c\\<^sub>1\n  n \\<noteq> (_Entry_)\n  n \\<oplus> 1 = (_ l _)\n\ngoal (12 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 8. \\<And>b c'. 0 < #:while (b) c'\n 9. \\<And>b c'. 0 < #:while (b) c'\n 10. \\<And>b c'. 1 < #:while (b) c'\nA total of 12 subgoals...", "note IH = \\<open>\\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1\\<close>"], ["proof (state)\nthis:\n  n = (_ ?l _) \\<Longrightarrow> ?l < #:c\\<^sub>1\n\ngoal (12 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 8. \\<And>b c'. 0 < #:while (b) c'\n 9. \\<And>b c'. 0 < #:while (b) c'\n 10. \\<And>b c'. 1 < #:while (b) c'\nA total of 12 subgoals...", "from \\<open>n \\<oplus> 1 = (_ l _)\\<close>"], ["proof (chain)\npicking this:\n  n \\<oplus> 1 = (_ l _)", "obtain l' where \"n = (_ l' _)\""], ["proof (prove)\nusing this:\n  n \\<oplus> 1 = (_ l _)\n\ngoal (1 subgoal):\n 1. (\\<And>l'. n = (_ l' _) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases n) auto"], ["proof (state)\nthis:\n  n = (_ l' _)\n\ngoal (12 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 8. \\<And>b c'. 0 < #:while (b) c'\n 9. \\<And>b c'. 0 < #:while (b) c'\n 10. \\<And>b c'. 1 < #:while (b) c'\nA total of 12 subgoals...", "from IH[OF this]"], ["proof (chain)\npicking this:\n  l' < #:c\\<^sub>1", "have \"l' < #:c\\<^sub>1\""], ["proof (prove)\nusing this:\n  l' < #:c\\<^sub>1\n\ngoal (1 subgoal):\n 1. l' < #:c\\<^sub>1", "."], ["proof (state)\nthis:\n  l' < #:c\\<^sub>1\n\ngoal (12 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 8. \\<And>b c'. 0 < #:while (b) c'\n 9. \\<And>b c'. 0 < #:while (b) c'\n 10. \\<And>b c'. 1 < #:while (b) c'\nA total of 12 subgoals...", "with \\<open>n \\<oplus> 1 = (_ l _)\\<close> \\<open>n = (_ l' _)\\<close>"], ["proof (chain)\npicking this:\n  n \\<oplus> 1 = (_ l _)\n  n = (_ l' _)\n  l' < #:c\\<^sub>1", "show ?case"], ["proof (prove)\nusing this:\n  n \\<oplus> 1 = (_ l _)\n  n = (_ l' _)\n  l' < #:c\\<^sub>1\n\ngoal (1 subgoal):\n 1. l < #:if (b) c\\<^sub>1 else c\\<^sub>2", "by simp"], ["proof (state)\nthis:\n  l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n\ngoal (11 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>b c'. 0 < #:while (b) c'\n 8. \\<And>b c'. 0 < #:while (b) c'\n 9. \\<And>b c'. 1 < #:while (b) c'\n 10. \\<And>c' n et n' b l.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c';\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         n \\<oplus> 2 = (_ l _)\\<rbrakk>\n        \\<Longrightarrow> l < #:while (b) c'\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>b c'. 0 < #:while (b) c'\n 8. \\<And>b c'. 0 < #:while (b) c'\n 9. \\<And>b c'. 1 < #:while (b) c'\n 10. \\<And>c' n et n' b l.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c';\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         n \\<oplus> 2 = (_ l _)\\<rbrakk>\n        \\<Longrightarrow> l < #:while (b) c'\nA total of 11 subgoals...", "case (WCFG_CondElse c\\<^sub>2 n et n' b c\\<^sub>1)"], ["proof (state)\nthis:\n  c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\n  n = (_ ?l _) \\<Longrightarrow> ?l < #:c\\<^sub>2\n  n \\<noteq> (_Entry_)\n  n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\n\ngoal (11 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>b c'. 0 < #:while (b) c'\n 8. \\<And>b c'. 0 < #:while (b) c'\n 9. \\<And>b c'. 1 < #:while (b) c'\n 10. \\<And>c' n et n' b l.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c';\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         n \\<oplus> 2 = (_ l _)\\<rbrakk>\n        \\<Longrightarrow> l < #:while (b) c'\nA total of 11 subgoals...", "note IH = \\<open>\\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2\\<close>"], ["proof (state)\nthis:\n  n = (_ ?l _) \\<Longrightarrow> ?l < #:c\\<^sub>2\n\ngoal (11 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>b c'. 0 < #:while (b) c'\n 8. \\<And>b c'. 0 < #:while (b) c'\n 9. \\<And>b c'. 1 < #:while (b) c'\n 10. \\<And>c' n et n' b l.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c';\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         n \\<oplus> 2 = (_ l _)\\<rbrakk>\n        \\<Longrightarrow> l < #:while (b) c'\nA total of 11 subgoals...", "from \\<open>n \\<oplus> (#:c\\<^sub>1 + 1) = (_ l _)\\<close>"], ["proof (chain)\npicking this:\n  n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)", "obtain l' where \"n = (_ l' _)\""], ["proof (prove)\nusing this:\n  n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\n\ngoal (1 subgoal):\n 1. (\\<And>l'. n = (_ l' _) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases n) auto"], ["proof (state)\nthis:\n  n = (_ l' _)\n\ngoal (11 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>b c'. 0 < #:while (b) c'\n 8. \\<And>b c'. 0 < #:while (b) c'\n 9. \\<And>b c'. 1 < #:while (b) c'\n 10. \\<And>c' n et n' b l.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c';\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         n \\<oplus> 2 = (_ l _)\\<rbrakk>\n        \\<Longrightarrow> l < #:while (b) c'\nA total of 11 subgoals...", "from IH[OF this]"], ["proof (chain)\npicking this:\n  l' < #:c\\<^sub>2", "have \"l' < #:c\\<^sub>2\""], ["proof (prove)\nusing this:\n  l' < #:c\\<^sub>2\n\ngoal (1 subgoal):\n 1. l' < #:c\\<^sub>2", "."], ["proof (state)\nthis:\n  l' < #:c\\<^sub>2\n\ngoal (11 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>b c'. 0 < #:while (b) c'\n 8. \\<And>b c'. 0 < #:while (b) c'\n 9. \\<And>b c'. 1 < #:while (b) c'\n 10. \\<And>c' n et n' b l.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c';\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         n \\<oplus> 2 = (_ l _)\\<rbrakk>\n        \\<Longrightarrow> l < #:while (b) c'\nA total of 11 subgoals...", "with \\<open>n \\<oplus> (#:c\\<^sub>1 + 1) = (_ l _)\\<close> \\<open>n = (_ l' _)\\<close>"], ["proof (chain)\npicking this:\n  n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\n  n = (_ l' _)\n  l' < #:c\\<^sub>2", "show ?case"], ["proof (prove)\nusing this:\n  n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\n  n = (_ l' _)\n  l' < #:c\\<^sub>2\n\ngoal (1 subgoal):\n 1. l < #:if (b) c\\<^sub>1 else c\\<^sub>2", "by simp"], ["proof (state)\nthis:\n  l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n\ngoal (10 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>b c'. 0 < #:while (b) c'\n 7. \\<And>b c'. 0 < #:while (b) c'\n 8. \\<And>b c'. 1 < #:while (b) c'\n 9. \\<And>c' n et n' b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        n \\<oplus> 2 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:while (b) c'\n 10. \\<And>c' n et b l.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c';\n         n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _)\\<rbrakk>\n        \\<Longrightarrow> l < #:while (b) c'", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>b c'. 0 < #:while (b) c'\n 7. \\<And>b c'. 0 < #:while (b) c'\n 8. \\<And>b c'. 1 < #:while (b) c'\n 9. \\<And>c' n et n' b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        n \\<oplus> 2 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:while (b) c'\n 10. \\<And>c' n et b l.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c';\n         n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _)\\<rbrakk>\n        \\<Longrightarrow> l < #:while (b) c'", "case (WCFG_WhileBody c' n et n' b)"], ["proof (state)\nthis:\n  c' \\<turnstile> n -et\\<rightarrow> n'\n  n = (_ ?l _) \\<Longrightarrow> ?l < #:c'\n  n \\<noteq> (_Entry_)\n  n' \\<noteq> (_Exit_)\n  n \\<oplus> 2 = (_ l _)\n\ngoal (10 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>b c'. 0 < #:while (b) c'\n 7. \\<And>b c'. 0 < #:while (b) c'\n 8. \\<And>b c'. 1 < #:while (b) c'\n 9. \\<And>c' n et n' b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        n \\<oplus> 2 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:while (b) c'\n 10. \\<And>c' n et b l.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c';\n         n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _)\\<rbrakk>\n        \\<Longrightarrow> l < #:while (b) c'", "note IH = \\<open>\\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c'\\<close>"], ["proof (state)\nthis:\n  n = (_ ?l _) \\<Longrightarrow> ?l < #:c'\n\ngoal (10 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>b c'. 0 < #:while (b) c'\n 7. \\<And>b c'. 0 < #:while (b) c'\n 8. \\<And>b c'. 1 < #:while (b) c'\n 9. \\<And>c' n et n' b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        n \\<oplus> 2 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:while (b) c'\n 10. \\<And>c' n et b l.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c';\n         n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _)\\<rbrakk>\n        \\<Longrightarrow> l < #:while (b) c'", "from \\<open>n \\<oplus> 2 = (_ l _)\\<close>"], ["proof (chain)\npicking this:\n  n \\<oplus> 2 = (_ l _)", "obtain l' where \"n = (_ l' _)\""], ["proof (prove)\nusing this:\n  n \\<oplus> 2 = (_ l _)\n\ngoal (1 subgoal):\n 1. (\\<And>l'. n = (_ l' _) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases n) auto"], ["proof (state)\nthis:\n  n = (_ l' _)\n\ngoal (10 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>b c'. 0 < #:while (b) c'\n 7. \\<And>b c'. 0 < #:while (b) c'\n 8. \\<And>b c'. 1 < #:while (b) c'\n 9. \\<And>c' n et n' b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        n \\<oplus> 2 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:while (b) c'\n 10. \\<And>c' n et b l.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c';\n         n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _)\\<rbrakk>\n        \\<Longrightarrow> l < #:while (b) c'", "from IH[OF this]"], ["proof (chain)\npicking this:\n  l' < #:c'", "have \"l' < #:c'\""], ["proof (prove)\nusing this:\n  l' < #:c'\n\ngoal (1 subgoal):\n 1. l' < #:c'", "."], ["proof (state)\nthis:\n  l' < #:c'\n\ngoal (10 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>b c'. 0 < #:while (b) c'\n 7. \\<And>b c'. 0 < #:while (b) c'\n 8. \\<And>b c'. 1 < #:while (b) c'\n 9. \\<And>c' n et n' b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        n \\<oplus> 2 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:while (b) c'\n 10. \\<And>c' n et b l.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c';\n         n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _)\\<rbrakk>\n        \\<Longrightarrow> l < #:while (b) c'", "with \\<open>n \\<oplus> 2 = (_ l _)\\<close> \\<open>n = (_ l' _)\\<close>"], ["proof (chain)\npicking this:\n  n \\<oplus> 2 = (_ l _)\n  n = (_ l' _)\n  l' < #:c'", "show ?case"], ["proof (prove)\nusing this:\n  n \\<oplus> 2 = (_ l _)\n  n = (_ l' _)\n  l' < #:c'\n\ngoal (1 subgoal):\n 1. l < #:while (b) c'", "by simp"], ["proof (state)\nthis:\n  l < #:while (b) c'\n\ngoal (9 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>b c'. 0 < #:while (b) c'\n 7. \\<And>b c'. 0 < #:while (b) c'\n 8. \\<And>b c'. 1 < #:while (b) c'\n 9. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c';\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:while (b) c'", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>b c'. 0 < #:while (b) c'\n 7. \\<And>b c'. 0 < #:while (b) c'\n 8. \\<And>b c'. 1 < #:while (b) c'\n 9. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c';\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:while (b) c'", "case (WCFG_WhileBodyExit c' n et b)"], ["proof (state)\nthis:\n  c' \\<turnstile> n -et\\<rightarrow> (_Exit_)\n  n = (_ ?l _) \\<Longrightarrow> ?l < #:c'\n  n \\<noteq> (_Entry_)\n  n \\<oplus> 2 = (_ l _)\n\ngoal (9 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>b c'. 0 < #:while (b) c'\n 7. \\<And>b c'. 0 < #:while (b) c'\n 8. \\<And>b c'. 1 < #:while (b) c'\n 9. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c';\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:while (b) c'", "note IH = \\<open>\\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c'\\<close>"], ["proof (state)\nthis:\n  n = (_ ?l _) \\<Longrightarrow> ?l < #:c'\n\ngoal (9 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>b c'. 0 < #:while (b) c'\n 7. \\<And>b c'. 0 < #:while (b) c'\n 8. \\<And>b c'. 1 < #:while (b) c'\n 9. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c';\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:while (b) c'", "from \\<open>n \\<oplus> 2 = (_ l _)\\<close>"], ["proof (chain)\npicking this:\n  n \\<oplus> 2 = (_ l _)", "obtain l' where \"n = (_ l' _)\""], ["proof (prove)\nusing this:\n  n \\<oplus> 2 = (_ l _)\n\ngoal (1 subgoal):\n 1. (\\<And>l'. n = (_ l' _) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases n) auto"], ["proof (state)\nthis:\n  n = (_ l' _)\n\ngoal (9 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>b c'. 0 < #:while (b) c'\n 7. \\<And>b c'. 0 < #:while (b) c'\n 8. \\<And>b c'. 1 < #:while (b) c'\n 9. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c';\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:while (b) c'", "from IH[OF this]"], ["proof (chain)\npicking this:\n  l' < #:c'", "have \"l' < #:c'\""], ["proof (prove)\nusing this:\n  l' < #:c'\n\ngoal (1 subgoal):\n 1. l' < #:c'", "."], ["proof (state)\nthis:\n  l' < #:c'\n\ngoal (9 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>b c'. 0 < #:while (b) c'\n 7. \\<And>b c'. 0 < #:while (b) c'\n 8. \\<And>b c'. 1 < #:while (b) c'\n 9. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>l. n = (_ l _) \\<Longrightarrow> l < #:c';\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:while (b) c'", "with \\<open>n \\<oplus> 2 = (_ l _)\\<close> \\<open>n = (_ l' _)\\<close>"], ["proof (chain)\npicking this:\n  n \\<oplus> 2 = (_ l _)\n  n = (_ l' _)\n  l' < #:c'", "show ?case"], ["proof (prove)\nusing this:\n  n \\<oplus> 2 = (_ l _)\n  n = (_ l' _)\n  l' < #:c'\n\ngoal (1 subgoal):\n 1. l < #:while (b) c'", "by simp"], ["proof (state)\nthis:\n  l < #:while (b) c'\n\ngoal (8 subgoals):\n 1. 0 < #:Skip\n 2. \\<And>V e. 0 < #:V:=e\n 3. \\<And>V e. 1 < #:V:=e\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2. 0 < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>b c'. 0 < #:while (b) c'\n 7. \\<And>b c'. 0 < #:while (b) c'\n 8. \\<And>b c'. 1 < #:while (b) c'", "qed (auto simp:num_inner_nodes_gr_0)"], ["", "lemma WCFG_targetlabel_less_num_nodes:\n  \"prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<Longrightarrow> l < #:prog\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<Longrightarrow>\n    l < #:prog", "proof(induct prog n et \"(_ l _)\" arbitrary:l rule:WCFG_induct)"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>prog. 0 < #:prog\n 2. \\<And>V e. 1 < #:V:=e\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_ l _);\n        l < #:c\\<^sub>1; (_ l _) \\<noteq> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 4. \\<And>c\\<^sub>1 n et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 5. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 10. \\<And>b c' l.\n        (_ 0 _) \\<oplus> 2 = (_ l _) \\<Longrightarrow> l < #:while (b) c'\nA total of 13 subgoals...", "case (WCFG_SeqFirst c\\<^sub>1 n et c\\<^sub>2)"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_ l _)\n  l < #:c\\<^sub>1\n  (_ l _) \\<noteq> (_Exit_)\n\ngoal (13 subgoals):\n 1. \\<And>prog. 0 < #:prog\n 2. \\<And>V e. 1 < #:V:=e\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_ l _);\n        l < #:c\\<^sub>1; (_ l _) \\<noteq> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 4. \\<And>c\\<^sub>1 n et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 5. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 10. \\<And>b c' l.\n        (_ 0 _) \\<oplus> 2 = (_ l _) \\<Longrightarrow> l < #:while (b) c'\nA total of 13 subgoals...", "from \\<open>l < #:c\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  l < #:c\\<^sub>1", "show ?case"], ["proof (prove)\nusing this:\n  l < #:c\\<^sub>1\n\ngoal (1 subgoal):\n 1. l < #:c\\<^sub>1;; c\\<^sub>2", "by simp"], ["proof (state)\nthis:\n  l < #:c\\<^sub>1;; c\\<^sub>2\n\ngoal (12 subgoals):\n 1. \\<And>prog. 0 < #:prog\n 2. \\<And>V e. 1 < #:V:=e\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 4. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 9. \\<And>b c' l.\n       (_ 0 _) \\<oplus> 2 = (_ l _) \\<Longrightarrow> l < #:while (b) c'\n 10. \\<And>b c'. 1 < #:while (b) c'\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>prog. 0 < #:prog\n 2. \\<And>V e. 1 < #:V:=e\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 4. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 9. \\<And>b c' l.\n       (_ 0 _) \\<oplus> 2 = (_ l _) \\<Longrightarrow> l < #:while (b) c'\n 10. \\<And>b c'. 1 < #:while (b) c'\nA total of 12 subgoals...", "case (WCFG_SeqSecond c\\<^sub>2 n et n' c\\<^sub>1)"], ["proof (state)\nthis:\n  c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\n  n' = (_ ?l _) \\<Longrightarrow> ?l < #:c\\<^sub>2\n  n \\<noteq> (_Entry_)\n  n' \\<oplus> #:c\\<^sub>1 = (_ l _)\n\ngoal (12 subgoals):\n 1. \\<And>prog. 0 < #:prog\n 2. \\<And>V e. 1 < #:V:=e\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 4. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 9. \\<And>b c' l.\n       (_ 0 _) \\<oplus> 2 = (_ l _) \\<Longrightarrow> l < #:while (b) c'\n 10. \\<And>b c'. 1 < #:while (b) c'\nA total of 12 subgoals...", "note IH = \\<open>\\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2\\<close>"], ["proof (state)\nthis:\n  n' = (_ ?l _) \\<Longrightarrow> ?l < #:c\\<^sub>2\n\ngoal (12 subgoals):\n 1. \\<And>prog. 0 < #:prog\n 2. \\<And>V e. 1 < #:V:=e\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 4. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 9. \\<And>b c' l.\n       (_ 0 _) \\<oplus> 2 = (_ l _) \\<Longrightarrow> l < #:while (b) c'\n 10. \\<And>b c'. 1 < #:while (b) c'\nA total of 12 subgoals...", "from \\<open>n' \\<oplus> #:c\\<^sub>1 = (_ l _)\\<close>"], ["proof (chain)\npicking this:\n  n' \\<oplus> #:c\\<^sub>1 = (_ l _)", "obtain l' where \"n' = (_ l' _)\""], ["proof (prove)\nusing this:\n  n' \\<oplus> #:c\\<^sub>1 = (_ l _)\n\ngoal (1 subgoal):\n 1. (\\<And>l'. n' = (_ l' _) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases n') auto"], ["proof (state)\nthis:\n  n' = (_ l' _)\n\ngoal (12 subgoals):\n 1. \\<And>prog. 0 < #:prog\n 2. \\<And>V e. 1 < #:V:=e\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 4. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 9. \\<And>b c' l.\n       (_ 0 _) \\<oplus> 2 = (_ l _) \\<Longrightarrow> l < #:while (b) c'\n 10. \\<And>b c'. 1 < #:while (b) c'\nA total of 12 subgoals...", "from IH[OF this]"], ["proof (chain)\npicking this:\n  l' < #:c\\<^sub>2", "have \"l' < #:c\\<^sub>2\""], ["proof (prove)\nusing this:\n  l' < #:c\\<^sub>2\n\ngoal (1 subgoal):\n 1. l' < #:c\\<^sub>2", "."], ["proof (state)\nthis:\n  l' < #:c\\<^sub>2\n\ngoal (12 subgoals):\n 1. \\<And>prog. 0 < #:prog\n 2. \\<And>V e. 1 < #:V:=e\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 4. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 9. \\<And>b c' l.\n       (_ 0 _) \\<oplus> 2 = (_ l _) \\<Longrightarrow> l < #:while (b) c'\n 10. \\<And>b c'. 1 < #:while (b) c'\nA total of 12 subgoals...", "with \\<open>n' \\<oplus> #:c\\<^sub>1 = (_ l _)\\<close> \\<open>n' = (_ l' _)\\<close>"], ["proof (chain)\npicking this:\n  n' \\<oplus> #:c\\<^sub>1 = (_ l _)\n  n' = (_ l' _)\n  l' < #:c\\<^sub>2", "show ?case"], ["proof (prove)\nusing this:\n  n' \\<oplus> #:c\\<^sub>1 = (_ l _)\n  n' = (_ l' _)\n  l' < #:c\\<^sub>2\n\ngoal (1 subgoal):\n 1. l < #:c\\<^sub>1;; c\\<^sub>2", "by simp"], ["proof (state)\nthis:\n  l < #:c\\<^sub>1;; c\\<^sub>2\n\ngoal (11 subgoals):\n 1. \\<And>prog. 0 < #:prog\n 2. \\<And>V e. 1 < #:V:=e\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 8. \\<And>b c' l.\n       (_ 0 _) \\<oplus> 2 = (_ l _) \\<Longrightarrow> l < #:while (b) c'\n 9. \\<And>b c'. 1 < #:while (b) c'\n 10. \\<And>c' n et n' b l.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c';\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         n' \\<oplus> 2 = (_ l _)\\<rbrakk>\n        \\<Longrightarrow> l < #:while (b) c'\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>prog. 0 < #:prog\n 2. \\<And>V e. 1 < #:V:=e\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 8. \\<And>b c' l.\n       (_ 0 _) \\<oplus> 2 = (_ l _) \\<Longrightarrow> l < #:while (b) c'\n 9. \\<And>b c'. 1 < #:while (b) c'\n 10. \\<And>c' n et n' b l.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c';\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         n' \\<oplus> 2 = (_ l _)\\<rbrakk>\n        \\<Longrightarrow> l < #:while (b) c'\nA total of 11 subgoals...", "case (WCFG_CondThen c\\<^sub>1 n et n' b c\\<^sub>2)"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\n  n' = (_ ?l _) \\<Longrightarrow> ?l < #:c\\<^sub>1\n  n \\<noteq> (_Entry_)\n  n' \\<oplus> 1 = (_ l _)\n\ngoal (11 subgoals):\n 1. \\<And>prog. 0 < #:prog\n 2. \\<And>V e. 1 < #:V:=e\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 8. \\<And>b c' l.\n       (_ 0 _) \\<oplus> 2 = (_ l _) \\<Longrightarrow> l < #:while (b) c'\n 9. \\<And>b c'. 1 < #:while (b) c'\n 10. \\<And>c' n et n' b l.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c';\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         n' \\<oplus> 2 = (_ l _)\\<rbrakk>\n        \\<Longrightarrow> l < #:while (b) c'\nA total of 11 subgoals...", "note IH = \\<open>\\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1\\<close>"], ["proof (state)\nthis:\n  n' = (_ ?l _) \\<Longrightarrow> ?l < #:c\\<^sub>1\n\ngoal (11 subgoals):\n 1. \\<And>prog. 0 < #:prog\n 2. \\<And>V e. 1 < #:V:=e\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 8. \\<And>b c' l.\n       (_ 0 _) \\<oplus> 2 = (_ l _) \\<Longrightarrow> l < #:while (b) c'\n 9. \\<And>b c'. 1 < #:while (b) c'\n 10. \\<And>c' n et n' b l.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c';\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         n' \\<oplus> 2 = (_ l _)\\<rbrakk>\n        \\<Longrightarrow> l < #:while (b) c'\nA total of 11 subgoals...", "from \\<open>n' \\<oplus> 1 = (_ l _)\\<close>"], ["proof (chain)\npicking this:\n  n' \\<oplus> 1 = (_ l _)", "obtain l' where \"n' = (_ l' _)\""], ["proof (prove)\nusing this:\n  n' \\<oplus> 1 = (_ l _)\n\ngoal (1 subgoal):\n 1. (\\<And>l'. n' = (_ l' _) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases n') auto"], ["proof (state)\nthis:\n  n' = (_ l' _)\n\ngoal (11 subgoals):\n 1. \\<And>prog. 0 < #:prog\n 2. \\<And>V e. 1 < #:V:=e\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 8. \\<And>b c' l.\n       (_ 0 _) \\<oplus> 2 = (_ l _) \\<Longrightarrow> l < #:while (b) c'\n 9. \\<And>b c'. 1 < #:while (b) c'\n 10. \\<And>c' n et n' b l.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c';\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         n' \\<oplus> 2 = (_ l _)\\<rbrakk>\n        \\<Longrightarrow> l < #:while (b) c'\nA total of 11 subgoals...", "from IH[OF this]"], ["proof (chain)\npicking this:\n  l' < #:c\\<^sub>1", "have \"l' < #:c\\<^sub>1\""], ["proof (prove)\nusing this:\n  l' < #:c\\<^sub>1\n\ngoal (1 subgoal):\n 1. l' < #:c\\<^sub>1", "."], ["proof (state)\nthis:\n  l' < #:c\\<^sub>1\n\ngoal (11 subgoals):\n 1. \\<And>prog. 0 < #:prog\n 2. \\<And>V e. 1 < #:V:=e\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 8. \\<And>b c' l.\n       (_ 0 _) \\<oplus> 2 = (_ l _) \\<Longrightarrow> l < #:while (b) c'\n 9. \\<And>b c'. 1 < #:while (b) c'\n 10. \\<And>c' n et n' b l.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c';\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         n' \\<oplus> 2 = (_ l _)\\<rbrakk>\n        \\<Longrightarrow> l < #:while (b) c'\nA total of 11 subgoals...", "with \\<open>n' \\<oplus> 1 = (_ l _)\\<close> \\<open>n' = (_ l' _)\\<close>"], ["proof (chain)\npicking this:\n  n' \\<oplus> 1 = (_ l _)\n  n' = (_ l' _)\n  l' < #:c\\<^sub>1", "show ?case"], ["proof (prove)\nusing this:\n  n' \\<oplus> 1 = (_ l _)\n  n' = (_ l' _)\n  l' < #:c\\<^sub>1\n\ngoal (1 subgoal):\n 1. l < #:if (b) c\\<^sub>1 else c\\<^sub>2", "by simp"], ["proof (state)\nthis:\n  l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n\ngoal (10 subgoals):\n 1. \\<And>prog. 0 < #:prog\n 2. \\<And>V e. 1 < #:V:=e\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>b c' l.\n       (_ 0 _) \\<oplus> 2 = (_ l _) \\<Longrightarrow> l < #:while (b) c'\n 8. \\<And>b c'. 1 < #:while (b) c'\n 9. \\<And>c' n et n' b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        n' \\<oplus> 2 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:while (b) c'\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> 0 < #:while (b) c'", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>prog. 0 < #:prog\n 2. \\<And>V e. 1 < #:V:=e\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>b c' l.\n       (_ 0 _) \\<oplus> 2 = (_ l _) \\<Longrightarrow> l < #:while (b) c'\n 8. \\<And>b c'. 1 < #:while (b) c'\n 9. \\<And>c' n et n' b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        n' \\<oplus> 2 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:while (b) c'\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> 0 < #:while (b) c'", "case (WCFG_CondElse c\\<^sub>2 n et n' b c\\<^sub>1)"], ["proof (state)\nthis:\n  c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\n  n' = (_ ?l _) \\<Longrightarrow> ?l < #:c\\<^sub>2\n  n \\<noteq> (_Entry_)\n  n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\n\ngoal (10 subgoals):\n 1. \\<And>prog. 0 < #:prog\n 2. \\<And>V e. 1 < #:V:=e\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>b c' l.\n       (_ 0 _) \\<oplus> 2 = (_ l _) \\<Longrightarrow> l < #:while (b) c'\n 8. \\<And>b c'. 1 < #:while (b) c'\n 9. \\<And>c' n et n' b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        n' \\<oplus> 2 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:while (b) c'\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> 0 < #:while (b) c'", "note IH = \\<open>\\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2\\<close>"], ["proof (state)\nthis:\n  n' = (_ ?l _) \\<Longrightarrow> ?l < #:c\\<^sub>2\n\ngoal (10 subgoals):\n 1. \\<And>prog. 0 < #:prog\n 2. \\<And>V e. 1 < #:V:=e\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>b c' l.\n       (_ 0 _) \\<oplus> 2 = (_ l _) \\<Longrightarrow> l < #:while (b) c'\n 8. \\<And>b c'. 1 < #:while (b) c'\n 9. \\<And>c' n et n' b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        n' \\<oplus> 2 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:while (b) c'\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> 0 < #:while (b) c'", "from \\<open>n' \\<oplus> (#:c\\<^sub>1 + 1) = (_ l _)\\<close>"], ["proof (chain)\npicking this:\n  n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)", "obtain l' where \"n' = (_ l' _)\""], ["proof (prove)\nusing this:\n  n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\n\ngoal (1 subgoal):\n 1. (\\<And>l'. n' = (_ l' _) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases n') auto"], ["proof (state)\nthis:\n  n' = (_ l' _)\n\ngoal (10 subgoals):\n 1. \\<And>prog. 0 < #:prog\n 2. \\<And>V e. 1 < #:V:=e\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>b c' l.\n       (_ 0 _) \\<oplus> 2 = (_ l _) \\<Longrightarrow> l < #:while (b) c'\n 8. \\<And>b c'. 1 < #:while (b) c'\n 9. \\<And>c' n et n' b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        n' \\<oplus> 2 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:while (b) c'\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> 0 < #:while (b) c'", "from IH[OF this]"], ["proof (chain)\npicking this:\n  l' < #:c\\<^sub>2", "have \"l' < #:c\\<^sub>2\""], ["proof (prove)\nusing this:\n  l' < #:c\\<^sub>2\n\ngoal (1 subgoal):\n 1. l' < #:c\\<^sub>2", "."], ["proof (state)\nthis:\n  l' < #:c\\<^sub>2\n\ngoal (10 subgoals):\n 1. \\<And>prog. 0 < #:prog\n 2. \\<And>V e. 1 < #:V:=e\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c\\<^sub>2;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 7. \\<And>b c' l.\n       (_ 0 _) \\<oplus> 2 = (_ l _) \\<Longrightarrow> l < #:while (b) c'\n 8. \\<And>b c'. 1 < #:while (b) c'\n 9. \\<And>c' n et n' b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        n' \\<oplus> 2 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:while (b) c'\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> 0 < #:while (b) c'", "with \\<open>n' \\<oplus> (#:c\\<^sub>1 + 1) = (_ l _)\\<close> \\<open>n' = (_ l' _)\\<close>"], ["proof (chain)\npicking this:\n  n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\n  n' = (_ l' _)\n  l' < #:c\\<^sub>2", "show ?case"], ["proof (prove)\nusing this:\n  n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\n  n' = (_ l' _)\n  l' < #:c\\<^sub>2\n\ngoal (1 subgoal):\n 1. l < #:if (b) c\\<^sub>1 else c\\<^sub>2", "by simp"], ["proof (state)\nthis:\n  l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n\ngoal (9 subgoals):\n 1. \\<And>prog. 0 < #:prog\n 2. \\<And>V e. 1 < #:V:=e\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>b c' l.\n       (_ 0 _) \\<oplus> 2 = (_ l _) \\<Longrightarrow> l < #:while (b) c'\n 7. \\<And>b c'. 1 < #:while (b) c'\n 8. \\<And>c' n et n' b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        n' \\<oplus> 2 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:while (b) c'\n 9. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> 0 < #:while (b) c'", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>prog. 0 < #:prog\n 2. \\<And>V e. 1 < #:V:=e\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>b c' l.\n       (_ 0 _) \\<oplus> 2 = (_ l _) \\<Longrightarrow> l < #:while (b) c'\n 7. \\<And>b c'. 1 < #:while (b) c'\n 8. \\<And>c' n et n' b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        n' \\<oplus> 2 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:while (b) c'\n 9. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> 0 < #:while (b) c'", "case (WCFG_WhileBody c' n et n' b)"], ["proof (state)\nthis:\n  c' \\<turnstile> n -et\\<rightarrow> n'\n  n' = (_ ?l _) \\<Longrightarrow> ?l < #:c'\n  n \\<noteq> (_Entry_)\n  n' \\<noteq> (_Exit_)\n  n' \\<oplus> 2 = (_ l _)\n\ngoal (9 subgoals):\n 1. \\<And>prog. 0 < #:prog\n 2. \\<And>V e. 1 < #:V:=e\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>b c' l.\n       (_ 0 _) \\<oplus> 2 = (_ l _) \\<Longrightarrow> l < #:while (b) c'\n 7. \\<And>b c'. 1 < #:while (b) c'\n 8. \\<And>c' n et n' b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        n' \\<oplus> 2 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:while (b) c'\n 9. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> 0 < #:while (b) c'", "note IH = \\<open>\\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c'\\<close>"], ["proof (state)\nthis:\n  n' = (_ ?l _) \\<Longrightarrow> ?l < #:c'\n\ngoal (9 subgoals):\n 1. \\<And>prog. 0 < #:prog\n 2. \\<And>V e. 1 < #:V:=e\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>b c' l.\n       (_ 0 _) \\<oplus> 2 = (_ l _) \\<Longrightarrow> l < #:while (b) c'\n 7. \\<And>b c'. 1 < #:while (b) c'\n 8. \\<And>c' n et n' b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        n' \\<oplus> 2 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:while (b) c'\n 9. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> 0 < #:while (b) c'", "from \\<open>n' \\<oplus> 2 = (_ l _)\\<close>"], ["proof (chain)\npicking this:\n  n' \\<oplus> 2 = (_ l _)", "obtain l' where \"n' = (_ l' _)\""], ["proof (prove)\nusing this:\n  n' \\<oplus> 2 = (_ l _)\n\ngoal (1 subgoal):\n 1. (\\<And>l'. n' = (_ l' _) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases n') auto"], ["proof (state)\nthis:\n  n' = (_ l' _)\n\ngoal (9 subgoals):\n 1. \\<And>prog. 0 < #:prog\n 2. \\<And>V e. 1 < #:V:=e\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>b c' l.\n       (_ 0 _) \\<oplus> 2 = (_ l _) \\<Longrightarrow> l < #:while (b) c'\n 7. \\<And>b c'. 1 < #:while (b) c'\n 8. \\<And>c' n et n' b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        n' \\<oplus> 2 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:while (b) c'\n 9. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> 0 < #:while (b) c'", "from IH[OF this]"], ["proof (chain)\npicking this:\n  l' < #:c'", "have \"l' < #:c'\""], ["proof (prove)\nusing this:\n  l' < #:c'\n\ngoal (1 subgoal):\n 1. l' < #:c'", "."], ["proof (state)\nthis:\n  l' < #:c'\n\ngoal (9 subgoals):\n 1. \\<And>prog. 0 < #:prog\n 2. \\<And>V e. 1 < #:V:=e\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>b c' l.\n       (_ 0 _) \\<oplus> 2 = (_ l _) \\<Longrightarrow> l < #:while (b) c'\n 7. \\<And>b c'. 1 < #:while (b) c'\n 8. \\<And>c' n et n' b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l. n' = (_ l _) \\<Longrightarrow> l < #:c';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        n' \\<oplus> 2 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:while (b) c'\n 9. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> 0 < #:while (b) c'", "with \\<open>n' \\<oplus> 2 = (_ l _)\\<close> \\<open>n' = (_ l' _)\\<close>"], ["proof (chain)\npicking this:\n  n' \\<oplus> 2 = (_ l _)\n  n' = (_ l' _)\n  l' < #:c'", "show ?case"], ["proof (prove)\nusing this:\n  n' \\<oplus> 2 = (_ l _)\n  n' = (_ l' _)\n  l' < #:c'\n\ngoal (1 subgoal):\n 1. l < #:while (b) c'", "by simp"], ["proof (state)\nthis:\n  l < #:while (b) c'\n\ngoal (8 subgoals):\n 1. \\<And>prog. 0 < #:prog\n 2. \\<And>V e. 1 < #:V:=e\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2 l.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l _)\\<rbrakk>\n       \\<Longrightarrow> l < #:c\\<^sub>1;; c\\<^sub>2\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l.\n       (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<Longrightarrow>\n       l < #:if (b) c\\<^sub>1 else c\\<^sub>2\n 6. \\<And>b c' l.\n       (_ 0 _) \\<oplus> 2 = (_ l _) \\<Longrightarrow> l < #:while (b) c'\n 7. \\<And>b c'. 1 < #:while (b) c'\n 8. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> 0 < #:while (b) c'", "qed (auto simp:num_inner_nodes_gr_0)"], ["", "lemma WCFG_EntryD:\n  \"prog \\<turnstile> (_Entry_) -et\\<rightarrow> n'\n  \\<Longrightarrow> (n' = (_Exit_) \\<and> et = (\\<lambda>s. False)\\<^sub>\\<surd>) \\<or> (n' = (_0_) \\<and> et = (\\<lambda>s. True)\\<^sub>\\<surd>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prog \\<turnstile> (_Entry_) -et\\<rightarrow> n' \\<Longrightarrow>\n    n' = (_Exit_) \\<and> et = (\\<lambda>s. False)\\<^sub>\\<surd> \\<or>\n    n' = (_ 0 _) \\<and> et = (\\<lambda>s. True)\\<^sub>\\<surd>", "by(induct prog n\\<equiv>\"(_Entry_)\" et n' rule:WCFG_induct,auto)"], ["", "(*<*)"], ["", "declare One_nat_def [simp del] add_2_eq_Suc' [simp del]"], ["", "(*>*)"], ["", "lemma WCFG_edge_det:\n  \"\\<lbrakk>prog \\<turnstile> n -et\\<rightarrow> n'; prog \\<turnstile> n -et'\\<rightarrow> n'\\<rbrakk> \\<Longrightarrow> et = et'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prog \\<turnstile> n -et\\<rightarrow> n';\n     prog \\<turnstile> n -et'\\<rightarrow> n'\\<rbrakk>\n    \\<Longrightarrow> et = et'", "proof(induct rule:WCFG_induct)"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>prog.\n       prog \\<turnstile> (_Entry_) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       (\\<lambda>s. False)\\<^sub>\\<surd> = et'\n 2. \\<And>prog.\n       prog \\<turnstile> (_Entry_) -et'\\<rightarrow> (_ 0 _) \\<Longrightarrow>\n       (\\<lambda>s. True)\\<^sub>\\<surd> = et'\n 3. Skip \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n    \\<Up>id = et'\n 4. \\<And>V e.\n       V:=e \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       \\<Up>\\<lambda>s. s(V := interpret e s) = et'\n 5. \\<And>V e.\n       V:=e \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 6. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;; c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n'\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 7. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 8. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 10. \\<And>b c\\<^sub>1 c\\<^sub>2.\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n   1 \\<Longrightarrow>\n        (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\nA total of 17 subgoals...", "case WCFG_Entry_Exit"], ["proof (state)\nthis:\n  prog_ \\<turnstile> (_Entry_) -et'\\<rightarrow> (_Exit_)\n\ngoal (17 subgoals):\n 1. \\<And>prog.\n       prog \\<turnstile> (_Entry_) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       (\\<lambda>s. False)\\<^sub>\\<surd> = et'\n 2. \\<And>prog.\n       prog \\<turnstile> (_Entry_) -et'\\<rightarrow> (_ 0 _) \\<Longrightarrow>\n       (\\<lambda>s. True)\\<^sub>\\<surd> = et'\n 3. Skip \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n    \\<Up>id = et'\n 4. \\<And>V e.\n       V:=e \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       \\<Up>\\<lambda>s. s(V := interpret e s) = et'\n 5. \\<And>V e.\n       V:=e \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 6. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;; c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n'\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 7. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 8. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 10. \\<And>b c\\<^sub>1 c\\<^sub>2.\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n   1 \\<Longrightarrow>\n        (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\nA total of 17 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  prog_ \\<turnstile> (_Entry_) -et'\\<rightarrow> (_Exit_)\n\ngoal (1 subgoal):\n 1. (\\<lambda>s. False)\\<^sub>\\<surd> = et'", "by(fastforce dest:WCFG_EntryD)"], ["proof (state)\nthis:\n  (\\<lambda>s. False)\\<^sub>\\<surd> = et'\n\ngoal (16 subgoals):\n 1. \\<And>prog.\n       prog \\<turnstile> (_Entry_) -et'\\<rightarrow> (_ 0 _) \\<Longrightarrow>\n       (\\<lambda>s. True)\\<^sub>\\<surd> = et'\n 2. Skip \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n    \\<Up>id = et'\n 3. \\<And>V e.\n       V:=e \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       \\<Up>\\<lambda>s. s(V := interpret e s) = et'\n 4. \\<And>V e.\n       V:=e \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 5. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;; c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n'\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 6. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 7. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 10. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n        \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n         c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n         et = et';\n         n \\<noteq> (_Entry_);\n         if (b) c\\<^sub>1\n         else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n        \\<Longrightarrow> et = et'\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>prog.\n       prog \\<turnstile> (_Entry_) -et'\\<rightarrow> (_ 0 _) \\<Longrightarrow>\n       (\\<lambda>s. True)\\<^sub>\\<surd> = et'\n 2. Skip \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n    \\<Up>id = et'\n 3. \\<And>V e.\n       V:=e \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       \\<Up>\\<lambda>s. s(V := interpret e s) = et'\n 4. \\<And>V e.\n       V:=e \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 5. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;; c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n'\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 6. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 7. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 10. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n        \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n         c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n         et = et';\n         n \\<noteq> (_Entry_);\n         if (b) c\\<^sub>1\n         else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n        \\<Longrightarrow> et = et'\nA total of 16 subgoals...", "case WCFG_Entry"], ["proof (state)\nthis:\n  prog_ \\<turnstile> (_Entry_) -et'\\<rightarrow> (_ 0 _)\n\ngoal (16 subgoals):\n 1. \\<And>prog.\n       prog \\<turnstile> (_Entry_) -et'\\<rightarrow> (_ 0 _) \\<Longrightarrow>\n       (\\<lambda>s. True)\\<^sub>\\<surd> = et'\n 2. Skip \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n    \\<Up>id = et'\n 3. \\<And>V e.\n       V:=e \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       \\<Up>\\<lambda>s. s(V := interpret e s) = et'\n 4. \\<And>V e.\n       V:=e \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 5. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;; c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n'\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 6. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 7. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 10. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n        \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n         c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n         et = et';\n         n \\<noteq> (_Entry_);\n         if (b) c\\<^sub>1\n         else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n        \\<Longrightarrow> et = et'\nA total of 16 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  prog_ \\<turnstile> (_Entry_) -et'\\<rightarrow> (_ 0 _)\n\ngoal (1 subgoal):\n 1. (\\<lambda>s. True)\\<^sub>\\<surd> = et'", "by(fastforce dest:WCFG_EntryD)"], ["proof (state)\nthis:\n  (\\<lambda>s. True)\\<^sub>\\<surd> = et'\n\ngoal (15 subgoals):\n 1. Skip \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n    \\<Up>id = et'\n 2. \\<And>V e.\n       V:=e \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       \\<Up>\\<lambda>s. s(V := interpret e s) = et'\n 3. \\<And>V e.\n       V:=e \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 4. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;; c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n'\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 5. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 6. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 9. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 10. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n        \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n         c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n         et = et';\n         n \\<noteq> (_Entry_);\n         if (b) c\\<^sub>1\n         else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n          1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n        \\<Longrightarrow> et = et'\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. Skip \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n    \\<Up>id = et'\n 2. \\<And>V e.\n       V:=e \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       \\<Up>\\<lambda>s. s(V := interpret e s) = et'\n 3. \\<And>V e.\n       V:=e \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 4. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;; c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n'\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 5. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 6. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 9. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 10. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n        \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n         c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n         et = et';\n         n \\<noteq> (_Entry_);\n         if (b) c\\<^sub>1\n         else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n          1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n        \\<Longrightarrow> et = et'\nA total of 15 subgoals...", "case WCFG_Skip"], ["proof (state)\nthis:\n  Skip \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_Exit_)\n\ngoal (15 subgoals):\n 1. Skip \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n    \\<Up>id = et'\n 2. \\<And>V e.\n       V:=e \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       \\<Up>\\<lambda>s. s(V := interpret e s) = et'\n 3. \\<And>V e.\n       V:=e \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 4. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;; c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n'\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 5. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 6. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 9. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 10. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n        \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n         c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n         et = et';\n         n \\<noteq> (_Entry_);\n         if (b) c\\<^sub>1\n         else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n          1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n        \\<Longrightarrow> et = et'\nA total of 15 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  Skip \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<Up>id = et'", "by(fastforce elim:WCFG_elims)"], ["proof (state)\nthis:\n  \\<Up>id = et'\n\ngoal (14 subgoals):\n 1. \\<And>V e.\n       V:=e \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       \\<Up>\\<lambda>s. s(V := interpret e s) = et'\n 2. \\<And>V e.\n       V:=e \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 3. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;; c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n'\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 4. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 5. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 10. \\<And>b c'.\n        while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n        (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>V e.\n       V:=e \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       \\<Up>\\<lambda>s. s(V := interpret e s) = et'\n 2. \\<And>V e.\n       V:=e \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 3. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;; c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n'\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 4. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 5. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 10. \\<And>b c'.\n        while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n        (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\nA total of 14 subgoals...", "case WCFG_LAss"], ["proof (state)\nthis:\n  V_:=e_ \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _)\n\ngoal (14 subgoals):\n 1. \\<And>V e.\n       V:=e \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       \\<Up>\\<lambda>s. s(V := interpret e s) = et'\n 2. \\<And>V e.\n       V:=e \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 3. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;; c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n'\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 4. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 5. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 10. \\<And>b c'.\n        while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n        (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\nA total of 14 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  V_:=e_ \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _)\n\ngoal (1 subgoal):\n 1. \\<Up>\\<lambda>s. s(V_ := interpret e_ s) = et'", "by(fastforce elim:WCFG_elims)"], ["proof (state)\nthis:\n  \\<Up>\\<lambda>s. s(V_ := interpret e_ s) = et'\n\ngoal (13 subgoals):\n 1. \\<And>V e.\n       V:=e \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 2. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;; c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n'\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 4. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 9. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 10. \\<And>b c'.\n        while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n        (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>V e.\n       V:=e \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 2. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;; c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n'\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 4. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 9. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 10. \\<And>b c'.\n        while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n        (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\nA total of 13 subgoals...", "case WCFG_LAssSkip"], ["proof (state)\nthis:\n  V_:=e_ \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_)\n\ngoal (13 subgoals):\n 1. \\<And>V e.\n       V:=e \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 2. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;; c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n'\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 4. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 9. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 10. \\<And>b c'.\n        while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n        (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\nA total of 13 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  V_:=e_ \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<Up>id = et'", "by(fastforce elim:WCFG_elims)"], ["proof (state)\nthis:\n  \\<Up>id = et'\n\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;; c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n'\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 3. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 8. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 9. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 10. \\<And>b c'.\n        while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        \\<Up>id = et'\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;; c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n'\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 3. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 8. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 9. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 10. \\<And>b c'.\n        while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        \\<Up>id = et'\nA total of 12 subgoals...", "case (WCFG_SeqFirst c\\<^sub>1 n et n' c\\<^sub>2)"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\n  c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et'\n  n' \\<noteq> (_Exit_)\n  c\\<^sub>1;; c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n'\n\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;; c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n'\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 3. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 8. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 9. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 10. \\<And>b c'.\n        while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        \\<Up>id = et'\nA total of 12 subgoals...", "note IH = \\<open>c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et'\\<close>"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et'\n\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;; c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n'\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 3. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 8. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 9. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 10. \\<And>b c'.\n        while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        \\<Up>id = et'\nA total of 12 subgoals...", "from \\<open>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\\<close> \\<open>n' \\<noteq> (_Exit_)\\<close>"], ["proof (chain)\npicking this:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\n  n' \\<noteq> (_Exit_)", "obtain l where \"n' = (_ l _)\""], ["proof (prove)\nusing this:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\n  n' \\<noteq> (_Exit_)\n\ngoal (1 subgoal):\n 1. (\\<And>l. n' = (_ l _) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases n') auto"], ["proof (state)\nthis:\n  n' = (_ l _)\n\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;; c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n'\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 3. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 8. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 9. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 10. \\<And>b c'.\n        while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        \\<Up>id = et'\nA total of 12 subgoals...", "with \\<open>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\\<close>"], ["proof (chain)\npicking this:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\n  n' = (_ l _)", "have \"l < #:c\\<^sub>1\""], ["proof (prove)\nusing this:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\n  n' = (_ l _)\n\ngoal (1 subgoal):\n 1. l < #:c\\<^sub>1", "by(fastforce intro:WCFG_targetlabel_less_num_nodes)"], ["proof (state)\nthis:\n  l < #:c\\<^sub>1\n\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;; c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n'\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 3. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 8. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 9. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 10. \\<And>b c'.\n        while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        \\<Up>id = et'\nA total of 12 subgoals...", "with \\<open>c\\<^sub>1;;c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n'\\<close> \\<open>n' = (_ l _)\\<close>"], ["proof (chain)\npicking this:\n  c\\<^sub>1;; c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n'\n  n' = (_ l _)\n  l < #:c\\<^sub>1", "have \"c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n'\""], ["proof (prove)\nusing this:\n  c\\<^sub>1;; c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n'\n  n' = (_ l _)\n  l < #:c\\<^sub>1\n\ngoal (1 subgoal):\n 1. c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n'", "by(fastforce elim:WCFG_elims intro:WCFG_intros dest:label_incr_ge)"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n'\n\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;; c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n'\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 3. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 8. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 9. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 10. \\<And>b c'.\n        while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        \\<Up>id = et'\nA total of 12 subgoals...", "from IH[OF this]"], ["proof (chain)\npicking this:\n  et = et'", "show ?case"], ["proof (prove)\nusing this:\n  et = et'\n\ngoal (1 subgoal):\n 1. et = et'", "."], ["proof (state)\nthis:\n  et = et'\n\ngoal (11 subgoals):\n 1. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 5. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 7. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 8. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 9. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 10. \\<And>c' n et n' b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n        \\<Longrightarrow> et = et'\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 5. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 7. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 8. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 9. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 10. \\<And>c' n et n' b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n        \\<Longrightarrow> et = et'\nA total of 11 subgoals...", "case (WCFG_SeqConnect c\\<^sub>1 n et c\\<^sub>2)"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_)\n  c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n  et = et'\n  n \\<noteq> (_Entry_)\n  c\\<^sub>1;;\n  c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\n\ngoal (11 subgoals):\n 1. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 5. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 7. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 8. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 9. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 10. \\<And>c' n et n' b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n        \\<Longrightarrow> et = et'\nA total of 11 subgoals...", "note IH = \\<open>c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow> et = et'\\<close>"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n  et = et'\n\ngoal (11 subgoals):\n 1. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 5. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 7. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 8. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 9. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 10. \\<And>c' n et n' b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n        \\<Longrightarrow> et = et'\nA total of 11 subgoals...", "from \\<open>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_)\\<close> \\<open>n \\<noteq> (_Entry_)\\<close>"], ["proof (chain)\npicking this:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_)\n  n \\<noteq> (_Entry_)", "obtain l where \"n = (_ l _)\""], ["proof (prove)\nusing this:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_)\n  n \\<noteq> (_Entry_)\n\ngoal (1 subgoal):\n 1. (\\<And>l. n = (_ l _) \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (cases n) auto"], ["proof (state)\nthis:\n  n = (_ l _)\n\ngoal (11 subgoals):\n 1. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 5. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 7. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 8. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 9. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 10. \\<And>c' n et n' b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n        \\<Longrightarrow> et = et'\nA total of 11 subgoals...", "with \\<open>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_)\\<close>"], ["proof (chain)\npicking this:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_)\n  n = (_ l _)", "have \"l < #:c\\<^sub>1\""], ["proof (prove)\nusing this:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_)\n  n = (_ l _)\n\ngoal (1 subgoal):\n 1. l < #:c\\<^sub>1", "by(fastforce intro:WCFG_sourcelabel_less_num_nodes)"], ["proof (state)\nthis:\n  l < #:c\\<^sub>1\n\ngoal (11 subgoals):\n 1. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 5. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 7. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 8. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 9. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 10. \\<And>c' n et n' b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n        \\<Longrightarrow> et = et'\nA total of 11 subgoals...", "with \\<open>c\\<^sub>1;;c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\\<close> \\<open>n = (_ l _)\\<close>"], ["proof (chain)\npicking this:\n  c\\<^sub>1;;\n  c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\n  n = (_ l _)\n  l < #:c\\<^sub>1", "have \"c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_)\""], ["proof (prove)\nusing this:\n  c\\<^sub>1;;\n  c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\n  n = (_ l _)\n  l < #:c\\<^sub>1\n\ngoal (1 subgoal):\n 1. c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_)", "by(fastforce elim:WCFG_elims dest:WCFG_targetlabel_less_num_nodes label_incr_ge)"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_)\n\ngoal (11 subgoals):\n 1. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 5. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 7. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 8. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 9. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 10. \\<And>c' n et n' b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n        \\<Longrightarrow> et = et'\nA total of 11 subgoals...", "from IH[OF this]"], ["proof (chain)\npicking this:\n  et = et'", "show ?case"], ["proof (prove)\nusing this:\n  et = et'\n\ngoal (1 subgoal):\n 1. et = et'", "."], ["proof (state)\nthis:\n  et = et'\n\ngoal (10 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 4. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 5. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 6. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 7. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 8. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 9. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n         et = et';\n         n \\<noteq> (_Entry_);\n         while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n        \\<Longrightarrow> et = et'", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 4. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 5. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 6. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 7. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 8. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 9. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n         et = et';\n         n \\<noteq> (_Entry_);\n         while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n        \\<Longrightarrow> et = et'", "case (WCFG_SeqSecond c\\<^sub>2 n et n' c\\<^sub>1)"], ["proof (state)\nthis:\n  c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\n  c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et'\n  n \\<noteq> (_Entry_)\n  c\\<^sub>1;;\n  c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\n\ngoal (10 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 4. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 5. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 6. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 7. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 8. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 9. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n         et = et';\n         n \\<noteq> (_Entry_);\n         while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n        \\<Longrightarrow> et = et'", "note IH = \\<open>c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et'\\<close>"], ["proof (state)\nthis:\n  c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et'\n\ngoal (10 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 4. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 5. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 6. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 7. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 8. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 9. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n         et = et';\n         n \\<noteq> (_Entry_);\n         while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n        \\<Longrightarrow> et = et'", "from \\<open>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\\<close> \\<open>n \\<noteq> (_Entry_)\\<close>"], ["proof (chain)\npicking this:\n  c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\n  n \\<noteq> (_Entry_)", "obtain l where \"n = (_ l _)\""], ["proof (prove)\nusing this:\n  c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\n  n \\<noteq> (_Entry_)\n\ngoal (1 subgoal):\n 1. (\\<And>l. n = (_ l _) \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (cases n) auto"], ["proof (state)\nthis:\n  n = (_ l _)\n\ngoal (10 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 4. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 5. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 6. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 7. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 8. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 9. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n         et = et';\n         n \\<noteq> (_Entry_);\n         while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n        \\<Longrightarrow> et = et'", "with \\<open>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\\<close>"], ["proof (chain)\npicking this:\n  c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\n  n = (_ l _)", "have \"l < #:c\\<^sub>2\""], ["proof (prove)\nusing this:\n  c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\n  n = (_ l _)\n\ngoal (1 subgoal):\n 1. l < #:c\\<^sub>2", "by(fastforce intro:WCFG_sourcelabel_less_num_nodes)"], ["proof (state)\nthis:\n  l < #:c\\<^sub>2\n\ngoal (10 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 4. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 5. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 6. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 7. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 8. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 9. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n         et = et';\n         n \\<noteq> (_Entry_);\n         while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n        \\<Longrightarrow> et = et'", "with \\<open>c\\<^sub>1;;c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<close> \\<open>n = (_ l _)\\<close>"], ["proof (chain)\npicking this:\n  c\\<^sub>1;;\n  c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\n  n = (_ l _)\n  l < #:c\\<^sub>2", "have \"c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n'\""], ["proof (prove)\nusing this:\n  c\\<^sub>1;;\n  c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\n  n = (_ l _)\n  l < #:c\\<^sub>2\n\ngoal (1 subgoal):\n 1. c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n'", "by -(erule WCFG_elims,(fastforce dest:WCFG_sourcelabel_less_num_nodes label_incr_ge\n                                    dest!:label_incr_inj)+)"], ["proof (state)\nthis:\n  c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n'\n\ngoal (10 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 4. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 5. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 6. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 7. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 8. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 9. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n         et = et';\n         n \\<noteq> (_Entry_);\n         while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n        \\<Longrightarrow> et = et'", "from IH[OF this]"], ["proof (chain)\npicking this:\n  et = et'", "show ?case"], ["proof (prove)\nusing this:\n  et = et'\n\ngoal (1 subgoal):\n 1. et = et'", "."], ["proof (state)\nthis:\n  et = et'\n\ngoal (9 subgoals):\n 1. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 3. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 4. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 5. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 6. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 7. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 8. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 9. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 3. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 4. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 5. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 6. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 7. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 8. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 9. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "case WCFG_CondTrue"], ["proof (state)\nthis:\n  if (b_) c\\<^sub>1_\n  else c\\<^sub>2_ \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1\n\ngoal (9 subgoals):\n 1. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 3. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 4. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 5. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 6. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 7. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 8. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 9. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "thus ?case"], ["proof (prove)\nusing this:\n  if (b_) c\\<^sub>1_\n  else c\\<^sub>2_ \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 1\n\ngoal (1 subgoal):\n 1. (\\<lambda>s. interpret b_ s = Some true)\\<^sub>\\<surd> = et'", "by(fastforce elim:WCFG_elims)"], ["proof (state)\nthis:\n  (\\<lambda>s. interpret b_ s = Some true)\\<^sub>\\<surd> = et'\n\ngoal (8 subgoals):\n 1. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 2. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 3. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 4. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 5. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 6. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 7. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 8. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 2. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 3. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 4. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 5. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 6. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 7. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 8. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "case WCFG_CondFalse"], ["proof (state)\nthis:\n  if (b_) c\\<^sub>1_\n  else c\\<^sub>2_ \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1_ +\n                                    1\n\ngoal (8 subgoals):\n 1. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 +\n  1 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 2. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 3. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 4. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 5. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 6. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 7. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 8. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "thus ?case"], ["proof (prove)\nusing this:\n  if (b_) c\\<^sub>1_\n  else c\\<^sub>2_ \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1_ +\n                                    1\n\ngoal (1 subgoal):\n 1. (\\<lambda>s. interpret b_ s = Some false)\\<^sub>\\<surd> = et'", "by(fastforce elim:WCFG_elims)"], ["proof (state)\nthis:\n  (\\<lambda>s. interpret b_ s = Some false)\\<^sub>\\<surd> = et'\n\ngoal (7 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 3. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 4. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 5. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 6. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 7. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 3. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 4. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 5. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 6. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 7. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "case (WCFG_CondThen c\\<^sub>1 n et n' b c\\<^sub>2)"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\n  c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et'\n  n \\<noteq> (_Entry_)\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\n\ngoal (7 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 3. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 4. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 5. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 6. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 7. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "note IH = \\<open>c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et'\\<close>"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et'\n\ngoal (7 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 3. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 4. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 5. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 6. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 7. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "from \\<open>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\\<close> \\<open>n \\<noteq> (_Entry_)\\<close>"], ["proof (chain)\npicking this:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\n  n \\<noteq> (_Entry_)", "obtain l where \"n = (_ l _)\""], ["proof (prove)\nusing this:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\n  n \\<noteq> (_Entry_)\n\ngoal (1 subgoal):\n 1. (\\<And>l. n = (_ l _) \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (cases n) auto"], ["proof (state)\nthis:\n  n = (_ l _)\n\ngoal (7 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 3. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 4. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 5. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 6. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 7. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "with \\<open>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\\<close>"], ["proof (chain)\npicking this:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\n  n = (_ l _)", "have \"l < #:c\\<^sub>1\""], ["proof (prove)\nusing this:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\n  n = (_ l _)\n\ngoal (1 subgoal):\n 1. l < #:c\\<^sub>1", "by(fastforce intro:WCFG_sourcelabel_less_num_nodes)"], ["proof (state)\nthis:\n  l < #:c\\<^sub>1\n\ngoal (7 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 3. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 4. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 5. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 6. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 7. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "with \\<open>if (b) c\\<^sub>1 else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<close> \\<open>n = (_ l _)\\<close>"], ["proof (chain)\npicking this:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\n  n = (_ l _)\n  l < #:c\\<^sub>1", "have \"c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n'\""], ["proof (prove)\nusing this:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\n  n = (_ l _)\n  l < #:c\\<^sub>1\n\ngoal (1 subgoal):\n 1. c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n'", "by -(erule WCFG_elims,(fastforce dest:label_incr_ge label_incr_inj)+)"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n'\n\ngoal (7 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>1 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> 1 -et'\\<rightarrow> n' \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 3. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 4. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 5. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 6. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 7. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "from IH[OF this]"], ["proof (chain)\npicking this:\n  et = et'", "show ?case"], ["proof (prove)\nusing this:\n  et = et'\n\ngoal (1 subgoal):\n 1. et = et'", "."], ["proof (state)\nthis:\n  et = et'\n\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 3. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 4. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 5. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 6. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 3. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 4. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 5. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 6. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "case (WCFG_CondElse c\\<^sub>2 n et n' b c\\<^sub>1)"], ["proof (state)\nthis:\n  c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\n  c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et'\n  n \\<noteq> (_Entry_)\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n   1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\n\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 3. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 4. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 5. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 6. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "note IH = \\<open>c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et'\\<close>"], ["proof (state)\nthis:\n  c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et'\n\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 3. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 4. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 5. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 6. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "from \\<open>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\\<close> \\<open>n \\<noteq> (_Entry_)\\<close>"], ["proof (chain)\npicking this:\n  c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\n  n \\<noteq> (_Entry_)", "obtain l where \"n = (_ l _)\""], ["proof (prove)\nusing this:\n  c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\n  n \\<noteq> (_Entry_)\n\ngoal (1 subgoal):\n 1. (\\<And>l. n = (_ l _) \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (cases n) auto"], ["proof (state)\nthis:\n  n = (_ l _)\n\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 3. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 4. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 5. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 6. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "with \\<open>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\\<close>"], ["proof (chain)\npicking this:\n  c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\n  n = (_ l _)", "have \"l < #:c\\<^sub>2\""], ["proof (prove)\nusing this:\n  c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\n  n = (_ l _)\n\ngoal (1 subgoal):\n 1. l < #:c\\<^sub>2", "by(fastforce intro:WCFG_sourcelabel_less_num_nodes)"], ["proof (state)\nthis:\n  l < #:c\\<^sub>2\n\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 3. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 4. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 5. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 6. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "with \\<open>if (b) c\\<^sub>1 else c\\<^sub>2 \\<turnstile> n \\<oplus> (#:c\\<^sub>1 + 1) -et'\\<rightarrow> n' \\<oplus> (#:c\\<^sub>1 + 1)\\<close> \\<open>n = (_ l _)\\<close>"], ["proof (chain)\npicking this:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n   1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\n  n = (_ l _)\n  l < #:c\\<^sub>2", "have \"c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n'\""], ["proof (prove)\nusing this:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n   1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\n  n = (_ l _)\n  l < #:c\\<^sub>2\n\ngoal (1 subgoal):\n 1. c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n'", "by -(erule WCFG_elims,(fastforce dest:WCFG_sourcelabel_less_num_nodes \n                             label_incr_inj label_incr_ge label_incr_simp_rev)+)"], ["proof (state)\nthis:\n  c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n'\n\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        c\\<^sub>2 \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n \\<oplus> #:c\\<^sub>1 +\n         1 -et'\\<rightarrow> n' \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 3. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 4. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 5. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 6. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "from IH[OF this]"], ["proof (chain)\npicking this:\n  et = et'", "show ?case"], ["proof (prove)\nusing this:\n  et = et'\n\ngoal (1 subgoal):\n 1. et = et'", "."], ["proof (state)\nthis:\n  et = et'\n\ngoal (5 subgoals):\n 1. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 2. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 3. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 4. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 5. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 2. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 3. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 4. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 5. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "case WCFG_WhileTrue"], ["proof (state)\nthis:\n  while (b_) c'_ \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2\n\ngoal (5 subgoals):\n 1. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2 \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> = et'\n 2. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 3. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 4. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 5. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "thus ?case"], ["proof (prove)\nusing this:\n  while (b_) c'_ \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 0 _) \\<oplus> 2\n\ngoal (1 subgoal):\n 1. (\\<lambda>s. interpret b_ s = Some true)\\<^sub>\\<surd> = et'", "by(fastforce elim:WCFG_elims)"], ["proof (state)\nthis:\n  (\\<lambda>s. interpret b_ s = Some true)\\<^sub>\\<surd> = et'\n\ngoal (4 subgoals):\n 1. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 2. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 3. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 4. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 2. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 3. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 4. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "case WCFG_WhileFalse"], ["proof (state)\nthis:\n  while (b_) c'_ \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _)\n\ngoal (4 subgoals):\n 1. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _) \\<Longrightarrow>\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> = et'\n 2. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 3. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 4. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "thus ?case"], ["proof (prove)\nusing this:\n  while (b_) c'_ \\<turnstile> (_ 0 _) -et'\\<rightarrow> (_ 1 _)\n\ngoal (1 subgoal):\n 1. (\\<lambda>s. interpret b_ s = Some false)\\<^sub>\\<surd> = et'", "by(fastforce elim:WCFG_elims)"], ["proof (state)\nthis:\n  (\\<lambda>s. interpret b_ s = Some false)\\<^sub>\\<surd> = et'\n\ngoal (3 subgoals):\n 1. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 2. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 3. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 2. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 3. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "case WCFG_WhileFalseSkip"], ["proof (state)\nthis:\n  while (b_) c'_ \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_)\n\ngoal (3 subgoals):\n 1. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<Up>id = et'\n 2. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 3. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "thus ?case"], ["proof (prove)\nusing this:\n  while (b_) c'_ \\<turnstile> (_ 1 _) -et'\\<rightarrow> (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<Up>id = et'", "by(fastforce elim:WCFG_elims)"], ["proof (state)\nthis:\n  \\<Up>id = et'\n\ngoal (2 subgoals):\n 1. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "case (WCFG_WhileBody c' n et n' b)"], ["proof (state)\nthis:\n  c' \\<turnstile> n -et\\<rightarrow> n'\n  c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et'\n  n \\<noteq> (_Entry_)\n  n' \\<noteq> (_Exit_)\n  while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\n\ngoal (2 subgoals):\n 1. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "note IH = \\<open>c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et'\\<close>"], ["proof (state)\nthis:\n  c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et'\n\ngoal (2 subgoals):\n 1. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "from \\<open>c' \\<turnstile> n -et\\<rightarrow> n'\\<close> \\<open>n \\<noteq> (_Entry_)\\<close>"], ["proof (chain)\npicking this:\n  c' \\<turnstile> n -et\\<rightarrow> n'\n  n \\<noteq> (_Entry_)", "obtain l where \"n = (_ l _)\""], ["proof (prove)\nusing this:\n  c' \\<turnstile> n -et\\<rightarrow> n'\n  n \\<noteq> (_Entry_)\n\ngoal (1 subgoal):\n 1. (\\<And>l. n = (_ l _) \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (cases n) auto"], ["proof (state)\nthis:\n  n = (_ l _)\n\ngoal (2 subgoals):\n 1. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "moreover"], ["proof (state)\nthis:\n  n = (_ l _)\n\ngoal (2 subgoals):\n 1. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "with \\<open>c' \\<turnstile> n -et\\<rightarrow> n'\\<close>"], ["proof (chain)\npicking this:\n  c' \\<turnstile> n -et\\<rightarrow> n'\n  n = (_ l _)", "have \"l < #:c'\""], ["proof (prove)\nusing this:\n  c' \\<turnstile> n -et\\<rightarrow> n'\n  n = (_ l _)\n\ngoal (1 subgoal):\n 1. l < #:c'", "by(fastforce intro:WCFG_sourcelabel_less_num_nodes)"], ["proof (state)\nthis:\n  l < #:c'\n\ngoal (2 subgoals):\n 1. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "moreover"], ["proof (state)\nthis:\n  l < #:c'\n\ngoal (2 subgoals):\n 1. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "from \\<open>c' \\<turnstile> n -et\\<rightarrow> n'\\<close> \\<open>n' \\<noteq> (_Exit_)\\<close>"], ["proof (chain)\npicking this:\n  c' \\<turnstile> n -et\\<rightarrow> n'\n  n' \\<noteq> (_Exit_)", "obtain l' where \"n' = (_ l' _)\""], ["proof (prove)\nusing this:\n  c' \\<turnstile> n -et\\<rightarrow> n'\n  n' \\<noteq> (_Exit_)\n\ngoal (1 subgoal):\n 1. (\\<And>l'. n' = (_ l' _) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases n') auto"], ["proof (state)\nthis:\n  n' = (_ l' _)\n\ngoal (2 subgoals):\n 1. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "moreover"], ["proof (state)\nthis:\n  n' = (_ l' _)\n\ngoal (2 subgoals):\n 1. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "with \\<open>c' \\<turnstile> n -et\\<rightarrow> n'\\<close>"], ["proof (chain)\npicking this:\n  c' \\<turnstile> n -et\\<rightarrow> n'\n  n' = (_ l' _)", "have \"l' < #:c'\""], ["proof (prove)\nusing this:\n  c' \\<turnstile> n -et\\<rightarrow> n'\n  n' = (_ l' _)\n\ngoal (1 subgoal):\n 1. l' < #:c'", "by(fastforce intro:WCFG_targetlabel_less_num_nodes)"], ["proof (state)\nthis:\n  l' < #:c'\n\ngoal (2 subgoals):\n 1. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "ultimately"], ["proof (chain)\npicking this:\n  n = (_ l _)\n  l < #:c'\n  n' = (_ l' _)\n  l' < #:c'", "have \"c' \\<turnstile> n -et'\\<rightarrow> n'\""], ["proof (prove)\nusing this:\n  n = (_ l _)\n  l < #:c'\n  n' = (_ l' _)\n  l' < #:c'\n\ngoal (1 subgoal):\n 1. c' \\<turnstile> n -et'\\<rightarrow> n'", "using \\<open>while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<close>"], ["proof (prove)\nusing this:\n  n = (_ l _)\n  l < #:c'\n  n' = (_ l' _)\n  l' < #:c'\n  while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\n\ngoal (1 subgoal):\n 1. c' \\<turnstile> n -et'\\<rightarrow> n'", "by(fastforce elim:WCFG_elims dest:label_incr_start_Node_smaller)"], ["proof (state)\nthis:\n  c' \\<turnstile> n -et'\\<rightarrow> n'\n\ngoal (2 subgoals):\n 1. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        c' \\<turnstile> n -et'\\<rightarrow> n' \\<Longrightarrow> et = et';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> n' \\<oplus> 2\\<rbrakk>\n       \\<Longrightarrow> et = et'\n 2. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "from IH[OF this]"], ["proof (chain)\npicking this:\n  et = et'", "show ?case"], ["proof (prove)\nusing this:\n  et = et'\n\ngoal (1 subgoal):\n 1. et = et'", "."], ["proof (state)\nthis:\n  et = et'\n\ngoal (1 subgoal):\n 1. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "case (WCFG_WhileBodyExit c' n et b)"], ["proof (state)\nthis:\n  c' \\<turnstile> n -et\\<rightarrow> (_Exit_)\n  c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow> et = et'\n  n \\<noteq> (_Entry_)\n  while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\n\ngoal (1 subgoal):\n 1. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "note IH = \\<open>c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow> et = et'\\<close>"], ["proof (state)\nthis:\n  c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow> et = et'\n\ngoal (1 subgoal):\n 1. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "from \\<open>c' \\<turnstile> n -et\\<rightarrow> (_Exit_)\\<close> \\<open>n \\<noteq> (_Entry_)\\<close>"], ["proof (chain)\npicking this:\n  c' \\<turnstile> n -et\\<rightarrow> (_Exit_)\n  n \\<noteq> (_Entry_)", "obtain l where \"n = (_ l _)\""], ["proof (prove)\nusing this:\n  c' \\<turnstile> n -et\\<rightarrow> (_Exit_)\n  n \\<noteq> (_Entry_)\n\ngoal (1 subgoal):\n 1. (\\<And>l. n = (_ l _) \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (cases n) auto"], ["proof (state)\nthis:\n  n = (_ l _)\n\ngoal (1 subgoal):\n 1. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "with \\<open>c' \\<turnstile> n -et\\<rightarrow> (_Exit_)\\<close>"], ["proof (chain)\npicking this:\n  c' \\<turnstile> n -et\\<rightarrow> (_Exit_)\n  n = (_ l _)", "have \"l < #:c'\""], ["proof (prove)\nusing this:\n  c' \\<turnstile> n -et\\<rightarrow> (_Exit_)\n  n = (_ l _)\n\ngoal (1 subgoal):\n 1. l < #:c'", "by(fastforce intro:WCFG_sourcelabel_less_num_nodes)"], ["proof (state)\nthis:\n  l < #:c'\n\ngoal (1 subgoal):\n 1. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "with \\<open>while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_0_)\\<close> \\<open>n = (_ l _)\\<close>"], ["proof (chain)\npicking this:\n  while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\n  n = (_ l _)\n  l < #:c'", "have \"c' \\<turnstile> n -et'\\<rightarrow> (_Exit_)\""], ["proof (prove)\nusing this:\n  while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\n  n = (_ l _)\n  l < #:c'\n\ngoal (1 subgoal):\n 1. c' \\<turnstile> n -et'\\<rightarrow> (_Exit_)", "by -(erule WCFG_elims,auto dest:label_incr_start_Node_smaller)"], ["proof (state)\nthis:\n  c' \\<turnstile> n -et'\\<rightarrow> (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        c' \\<turnstile> n -et'\\<rightarrow> (_Exit_) \\<Longrightarrow>\n        et = et';\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n \\<oplus> 2 -et'\\<rightarrow> (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> et = et'", "from IH[OF this]"], ["proof (chain)\npicking this:\n  et = et'", "show ?case"], ["proof (prove)\nusing this:\n  et = et'\n\ngoal (1 subgoal):\n 1. et = et'", "."], ["proof (state)\nthis:\n  et = et'\n\ngoal:\nNo subgoals!", "qed"], ["", "(*<*)"], ["", "declare One_nat_def [simp] add_2_eq_Suc' [simp]"], ["", "(*>*)"], ["", "lemma less_num_nodes_edge_Exit:\n  obtains l et where \"l < #:prog\" and \"prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l et.\n        \\<lbrakk>l < #:prog;\n         prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>l et.\n        \\<lbrakk>l < #:prog;\n         prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<exists>l et. l < #:prog \\<and> prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l et.\n       l < #:prog \\<and> prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "proof(induct prog)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<exists>l et.\n       l < #:Skip \\<and> Skip \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 2. \\<And>x1 x2.\n       \\<exists>l et.\n          l < #:x1:=x2 \\<and>\n          x1:=x2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 3. \\<And>prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:prog1;; prog2 \\<and> prog1;;\n                            prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 4. \\<And>x1 prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:if (x1) prog1 else prog2 \\<and>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 5. \\<And>x1 prog.\n       \\<exists>l et.\n          l < #:prog \\<and>\n          prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<exists>l et.\n          l < #:while (x1) prog \\<and>\n          while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "case Skip"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<exists>l et.\n       l < #:Skip \\<and> Skip \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 2. \\<And>x1 x2.\n       \\<exists>l et.\n          l < #:x1:=x2 \\<and>\n          x1:=x2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 3. \\<And>prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:prog1;; prog2 \\<and> prog1;;\n                            prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 4. \\<And>x1 prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:if (x1) prog1 else prog2 \\<and>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 5. \\<And>x1 prog.\n       \\<exists>l et.\n          l < #:prog \\<and>\n          prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<exists>l et.\n          l < #:while (x1) prog \\<and>\n          while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "have \"0 < #:Skip\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < #:Skip", "by simp"], ["proof (state)\nthis:\n  0 < #:Skip\n\ngoal (5 subgoals):\n 1. \\<exists>l et.\n       l < #:Skip \\<and> Skip \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 2. \\<And>x1 x2.\n       \\<exists>l et.\n          l < #:x1:=x2 \\<and>\n          x1:=x2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 3. \\<And>prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:prog1;; prog2 \\<and> prog1;;\n                            prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 4. \\<And>x1 prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:if (x1) prog1 else prog2 \\<and>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 5. \\<And>x1 prog.\n       \\<exists>l et.\n          l < #:prog \\<and>\n          prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<exists>l et.\n          l < #:while (x1) prog \\<and>\n          while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "moreover"], ["proof (state)\nthis:\n  0 < #:Skip\n\ngoal (5 subgoals):\n 1. \\<exists>l et.\n       l < #:Skip \\<and> Skip \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 2. \\<And>x1 x2.\n       \\<exists>l et.\n          l < #:x1:=x2 \\<and>\n          x1:=x2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 3. \\<And>prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:prog1;; prog2 \\<and> prog1;;\n                            prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 4. \\<And>x1 prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:if (x1) prog1 else prog2 \\<and>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 5. \\<And>x1 prog.\n       \\<exists>l et.\n          l < #:prog \\<and>\n          prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<exists>l et.\n          l < #:while (x1) prog \\<and>\n          while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "have \"Skip \\<turnstile> (_0_) -\\<Up>id\\<rightarrow> (_Exit_)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Skip \\<turnstile> (_ 0 _) -\\<Up>id\\<rightarrow> (_Exit_)", "by(rule WCFG_Skip)"], ["proof (state)\nthis:\n  Skip \\<turnstile> (_ 0 _) -\\<Up>id\\<rightarrow> (_Exit_)\n\ngoal (5 subgoals):\n 1. \\<exists>l et.\n       l < #:Skip \\<and> Skip \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 2. \\<And>x1 x2.\n       \\<exists>l et.\n          l < #:x1:=x2 \\<and>\n          x1:=x2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 3. \\<And>prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:prog1;; prog2 \\<and> prog1;;\n                            prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 4. \\<And>x1 prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:if (x1) prog1 else prog2 \\<and>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 5. \\<And>x1 prog.\n       \\<exists>l et.\n          l < #:prog \\<and>\n          prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<exists>l et.\n          l < #:while (x1) prog \\<and>\n          while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "ultimately"], ["proof (chain)\npicking this:\n  0 < #:Skip\n  Skip \\<turnstile> (_ 0 _) -\\<Up>id\\<rightarrow> (_Exit_)", "show ?case"], ["proof (prove)\nusing this:\n  0 < #:Skip\n  Skip \\<turnstile> (_ 0 _) -\\<Up>id\\<rightarrow> (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<exists>l et.\n       l < #:Skip \\<and> Skip \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "by blast"], ["proof (state)\nthis:\n  \\<exists>l et.\n     l < #:Skip \\<and> Skip \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2.\n       \\<exists>l et.\n          l < #:x1:=x2 \\<and>\n          x1:=x2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 2. \\<And>prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:prog1;; prog2 \\<and> prog1;;\n                            prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 3. \\<And>x1 prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:if (x1) prog1 else prog2 \\<and>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 4. \\<And>x1 prog.\n       \\<exists>l et.\n          l < #:prog \\<and>\n          prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<exists>l et.\n          l < #:while (x1) prog \\<and>\n          while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1 x2.\n       \\<exists>l et.\n          l < #:x1:=x2 \\<and>\n          x1:=x2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 2. \\<And>prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:prog1;; prog2 \\<and> prog1;;\n                            prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 3. \\<And>x1 prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:if (x1) prog1 else prog2 \\<and>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 4. \\<And>x1 prog.\n       \\<exists>l et.\n          l < #:prog \\<and>\n          prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<exists>l et.\n          l < #:while (x1) prog \\<and>\n          while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "case (LAss V e)"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>x1 x2.\n       \\<exists>l et.\n          l < #:x1:=x2 \\<and>\n          x1:=x2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 2. \\<And>prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:prog1;; prog2 \\<and> prog1;;\n                            prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 3. \\<And>x1 prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:if (x1) prog1 else prog2 \\<and>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 4. \\<And>x1 prog.\n       \\<exists>l et.\n          l < #:prog \\<and>\n          prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<exists>l et.\n          l < #:while (x1) prog \\<and>\n          while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "have \"1 < #:(V:=e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < #:V:=e", "by simp"], ["proof (state)\nthis:\n  1 < #:V:=e\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2.\n       \\<exists>l et.\n          l < #:x1:=x2 \\<and>\n          x1:=x2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 2. \\<And>prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:prog1;; prog2 \\<and> prog1;;\n                            prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 3. \\<And>x1 prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:if (x1) prog1 else prog2 \\<and>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 4. \\<And>x1 prog.\n       \\<exists>l et.\n          l < #:prog \\<and>\n          prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<exists>l et.\n          l < #:while (x1) prog \\<and>\n          while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "moreover"], ["proof (state)\nthis:\n  1 < #:V:=e\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2.\n       \\<exists>l et.\n          l < #:x1:=x2 \\<and>\n          x1:=x2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 2. \\<And>prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:prog1;; prog2 \\<and> prog1;;\n                            prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 3. \\<And>x1 prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:if (x1) prog1 else prog2 \\<and>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 4. \\<And>x1 prog.\n       \\<exists>l et.\n          l < #:prog \\<and>\n          prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<exists>l et.\n          l < #:while (x1) prog \\<and>\n          while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "have \"V:=e \\<turnstile> (_1_) -\\<Up>id\\<rightarrow> (_Exit_)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V:=e \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)", "by(rule WCFG_LAssSkip)"], ["proof (state)\nthis:\n  V:=e \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2.\n       \\<exists>l et.\n          l < #:x1:=x2 \\<and>\n          x1:=x2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 2. \\<And>prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:prog1;; prog2 \\<and> prog1;;\n                            prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 3. \\<And>x1 prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:if (x1) prog1 else prog2 \\<and>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 4. \\<And>x1 prog.\n       \\<exists>l et.\n          l < #:prog \\<and>\n          prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<exists>l et.\n          l < #:while (x1) prog \\<and>\n          while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "ultimately"], ["proof (chain)\npicking this:\n  1 < #:V:=e\n  V:=e \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)", "show ?case"], ["proof (prove)\nusing this:\n  1 < #:V:=e\n  V:=e \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<exists>l et.\n       l < #:V:=e \\<and> V:=e \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "by blast"], ["proof (state)\nthis:\n  \\<exists>l et.\n     l < #:V:=e \\<and> V:=e \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n\ngoal (3 subgoals):\n 1. \\<And>prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:prog1;; prog2 \\<and> prog1;;\n                            prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 2. \\<And>x1 prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:if (x1) prog1 else prog2 \\<and>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 3. \\<And>x1 prog.\n       \\<exists>l et.\n          l < #:prog \\<and>\n          prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<exists>l et.\n          l < #:while (x1) prog \\<and>\n          while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:prog1;; prog2 \\<and> prog1;;\n                            prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 2. \\<And>x1 prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:if (x1) prog1 else prog2 \\<and>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 3. \\<And>x1 prog.\n       \\<exists>l et.\n          l < #:prog \\<and>\n          prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<exists>l et.\n          l < #:while (x1) prog \\<and>\n          while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "case (Seq prog1 prog2)"], ["proof (state)\nthis:\n  \\<exists>l et.\n     l < #:prog1 \\<and> prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n  \\<exists>l et.\n     l < #:prog2 \\<and> prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n\ngoal (3 subgoals):\n 1. \\<And>prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:prog1;; prog2 \\<and> prog1;;\n                            prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 2. \\<And>x1 prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:if (x1) prog1 else prog2 \\<and>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 3. \\<And>x1 prog.\n       \\<exists>l et.\n          l < #:prog \\<and>\n          prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<exists>l et.\n          l < #:while (x1) prog \\<and>\n          while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "from \\<open>\\<exists>l et. l < #:prog2 \\<and> prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>l et.\n     l < #:prog2 \\<and> prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "obtain l et where \"l < #:prog2\" and \"prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\""], ["proof (prove)\nusing this:\n  \\<exists>l et.\n     l < #:prog2 \\<and> prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n\ngoal (1 subgoal):\n 1. (\\<And>l et.\n        \\<lbrakk>l < #:prog2;\n         prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  l < #:prog2\n  prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n\ngoal (3 subgoals):\n 1. \\<And>prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:prog1;; prog2 \\<and> prog1;;\n                            prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 2. \\<And>x1 prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:if (x1) prog1 else prog2 \\<and>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 3. \\<And>x1 prog.\n       \\<exists>l et.\n          l < #:prog \\<and>\n          prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<exists>l et.\n          l < #:while (x1) prog \\<and>\n          while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "from \\<open>prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<close>"], ["proof (chain)\npicking this:\n  prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "have \"prog1;;prog2 \\<turnstile> (_ l _) \\<oplus> #:prog1 -et\\<rightarrow> (_Exit_) \\<oplus> #:prog1\""], ["proof (prove)\nusing this:\n  prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n\ngoal (1 subgoal):\n 1. prog1;;\n    prog2 \\<turnstile> (_ l _) \\<oplus> #:prog1 -et\\<rightarrow> (_Exit_) \\<oplus> #:prog1", "by(fastforce intro:WCFG_SeqSecond)"], ["proof (state)\nthis:\n  prog1;;\n  prog2 \\<turnstile> (_ l _) \\<oplus> #:prog1 -et\\<rightarrow> (_Exit_) \\<oplus> #:prog1\n\ngoal (3 subgoals):\n 1. \\<And>prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:prog1;; prog2 \\<and> prog1;;\n                            prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 2. \\<And>x1 prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:if (x1) prog1 else prog2 \\<and>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 3. \\<And>x1 prog.\n       \\<exists>l et.\n          l < #:prog \\<and>\n          prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<exists>l et.\n          l < #:while (x1) prog \\<and>\n          while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "with \\<open>l < #:prog2\\<close>"], ["proof (chain)\npicking this:\n  l < #:prog2\n  prog1;;\n  prog2 \\<turnstile> (_ l _) \\<oplus> #:prog1 -et\\<rightarrow> (_Exit_) \\<oplus> #:prog1", "show ?case"], ["proof (prove)\nusing this:\n  l < #:prog2\n  prog1;;\n  prog2 \\<turnstile> (_ l _) \\<oplus> #:prog1 -et\\<rightarrow> (_Exit_) \\<oplus> #:prog1\n\ngoal (1 subgoal):\n 1. \\<exists>l et.\n       l < #:prog1;; prog2 \\<and> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "by(rule_tac x=\"l + #:prog1\" in exI,auto)"], ["proof (state)\nthis:\n  \\<exists>l et.\n     l < #:prog1;; prog2 \\<and> prog1;;\n     prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n\ngoal (2 subgoals):\n 1. \\<And>x1 prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:if (x1) prog1 else prog2 \\<and>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 2. \\<And>x1 prog.\n       \\<exists>l et.\n          l < #:prog \\<and>\n          prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<exists>l et.\n          l < #:while (x1) prog \\<and>\n          while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1 prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:if (x1) prog1 else prog2 \\<and>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 2. \\<And>x1 prog.\n       \\<exists>l et.\n          l < #:prog \\<and>\n          prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<exists>l et.\n          l < #:while (x1) prog \\<and>\n          while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "case (Cond b prog1 prog2)"], ["proof (state)\nthis:\n  \\<exists>l et.\n     l < #:prog1 \\<and> prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n  \\<exists>l et.\n     l < #:prog2 \\<and> prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n\ngoal (2 subgoals):\n 1. \\<And>x1 prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:if (x1) prog1 else prog2 \\<and>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 2. \\<And>x1 prog.\n       \\<exists>l et.\n          l < #:prog \\<and>\n          prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<exists>l et.\n          l < #:while (x1) prog \\<and>\n          while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "from \\<open>\\<exists>l et. l < #:prog1 \\<and> prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>l et.\n     l < #:prog1 \\<and> prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "obtain l et where \"l < #:prog1\" and \"prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\""], ["proof (prove)\nusing this:\n  \\<exists>l et.\n     l < #:prog1 \\<and> prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n\ngoal (1 subgoal):\n 1. (\\<And>l et.\n        \\<lbrakk>l < #:prog1;\n         prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  l < #:prog1\n  prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n\ngoal (2 subgoals):\n 1. \\<And>x1 prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:if (x1) prog1 else prog2 \\<and>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 2. \\<And>x1 prog.\n       \\<exists>l et.\n          l < #:prog \\<and>\n          prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<exists>l et.\n          l < #:while (x1) prog \\<and>\n          while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "from \\<open>prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<close>"], ["proof (chain)\npicking this:\n  prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "have \"if (b) prog1 else prog2 \\<turnstile> (_ l _) \\<oplus> 1 -et\\<rightarrow> (_Exit_) \\<oplus> 1\""], ["proof (prove)\nusing this:\n  prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n\ngoal (1 subgoal):\n 1. if (b) prog1\n    else prog2 \\<turnstile> (_ l _) \\<oplus> 1 -et\\<rightarrow> (_Exit_) \\<oplus> 1", "by(fastforce intro:WCFG_CondThen)"], ["proof (state)\nthis:\n  if (b) prog1\n  else prog2 \\<turnstile> (_ l _) \\<oplus> 1 -et\\<rightarrow> (_Exit_) \\<oplus> 1\n\ngoal (2 subgoals):\n 1. \\<And>x1 prog1 prog2.\n       \\<lbrakk>\\<exists>l et.\n                   l < #:prog1 \\<and>\n                   prog1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<exists>l et.\n           l < #:prog2 \\<and>\n           prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l et.\n                            l < #:if (x1) prog1 else prog2 \\<and>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n 2. \\<And>x1 prog.\n       \\<exists>l et.\n          l < #:prog \\<and>\n          prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<exists>l et.\n          l < #:while (x1) prog \\<and>\n          while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "with \\<open>l < #:prog1\\<close>"], ["proof (chain)\npicking this:\n  l < #:prog1\n  if (b) prog1\n  else prog2 \\<turnstile> (_ l _) \\<oplus> 1 -et\\<rightarrow> (_Exit_) \\<oplus> 1", "show ?case"], ["proof (prove)\nusing this:\n  l < #:prog1\n  if (b) prog1\n  else prog2 \\<turnstile> (_ l _) \\<oplus> 1 -et\\<rightarrow> (_Exit_) \\<oplus> 1\n\ngoal (1 subgoal):\n 1. \\<exists>l et.\n       l < #:if (b) prog1 else prog2 \\<and> if (b) prog1\n       else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "by(rule_tac x=\"l + 1\" in exI,auto)"], ["proof (state)\nthis:\n  \\<exists>l et.\n     l < #:if (b) prog1 else prog2 \\<and> if (b) prog1\n     else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<And>x1 prog.\n       \\<exists>l et.\n          l < #:prog \\<and>\n          prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<exists>l et.\n          l < #:while (x1) prog \\<and>\n          while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 prog.\n       \\<exists>l et.\n          l < #:prog \\<and>\n          prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<exists>l et.\n          l < #:while (x1) prog \\<and>\n          while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "case (While b prog')"], ["proof (state)\nthis:\n  \\<exists>l et.\n     l < #:prog' \\<and> prog' \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<And>x1 prog.\n       \\<exists>l et.\n          l < #:prog \\<and>\n          prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<exists>l et.\n          l < #:while (x1) prog \\<and>\n          while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "have \"1 < #:(while (b) prog')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < #:while (b) prog'", "by simp"], ["proof (state)\nthis:\n  1 < #:while (b) prog'\n\ngoal (1 subgoal):\n 1. \\<And>x1 prog.\n       \\<exists>l et.\n          l < #:prog \\<and>\n          prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<exists>l et.\n          l < #:while (x1) prog \\<and>\n          while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "moreover"], ["proof (state)\nthis:\n  1 < #:while (b) prog'\n\ngoal (1 subgoal):\n 1. \\<And>x1 prog.\n       \\<exists>l et.\n          l < #:prog \\<and>\n          prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<exists>l et.\n          l < #:while (x1) prog \\<and>\n          while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "have \"while (b) prog' \\<turnstile> (_1_) -\\<Up>id\\<rightarrow> (_Exit_)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. while (b) prog' \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)", "by(rule WCFG_WhileFalseSkip)"], ["proof (state)\nthis:\n  while (b) prog' \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<And>x1 prog.\n       \\<exists>l et.\n          l < #:prog \\<and>\n          prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_) \\<Longrightarrow>\n       \\<exists>l et.\n          l < #:while (x1) prog \\<and>\n          while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "ultimately"], ["proof (chain)\npicking this:\n  1 < #:while (b) prog'\n  while (b) prog' \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)", "show ?case"], ["proof (prove)\nusing this:\n  1 < #:while (b) prog'\n  while (b) prog' \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<exists>l et.\n       l < #:while (b) prog' \\<and>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "by blast"], ["proof (state)\nthis:\n  \\<exists>l et.\n     l < #:while (b) prog' \\<and>\n     while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>l et.\n     l < #:prog \\<and> prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n\ngoal (1 subgoal):\n 1. (\\<And>l et.\n        \\<lbrakk>l < #:prog;\n         prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with that"], ["proof (chain)\npicking this:\n  \\<lbrakk>?l < #:prog;\n   prog \\<turnstile> (_ ?l _) -?et\\<rightarrow> (_Exit_)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<exists>l et.\n     l < #:prog \\<and> prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?l < #:prog;\n   prog \\<turnstile> (_ ?l _) -?et\\<rightarrow> (_Exit_)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<exists>l et.\n     l < #:prog \\<and> prog \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma less_num_nodes_edge:\n  \"l < #:prog \\<Longrightarrow> \\<exists>n et. prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog \\<turnstile> (_ l _) -et\\<rightarrow> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l < #:prog \\<Longrightarrow>\n    \\<exists>n et.\n       prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       prog \\<turnstile> (_ l _) -et\\<rightarrow> n", "proof(induct prog arbitrary:l)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>l.\n       l < #:Skip \\<Longrightarrow>\n       \\<exists>n et.\n          Skip \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n          Skip \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. \\<And>x1 x2 l.\n       l < #:x1:=x2 \\<Longrightarrow>\n       \\<exists>n et.\n          x1:=x2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n          x1:=x2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 3. \\<And>prog1 prog2 l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog1 \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        \\<And>l.\n           l < #:prog2 \\<Longrightarrow>\n           \\<exists>n et.\n              prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n              prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:prog1;; prog2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            prog1;;\n                            prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            prog1;;\n                            prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 4. \\<And>x1 prog1 prog2 l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog1 \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        \\<And>l.\n           l < #:prog2 \\<Longrightarrow>\n           \\<exists>n et.\n              prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n              prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:if (x1) prog1 else prog2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            if (x1) prog1\n                            else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 5. \\<And>x1 prog l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:while (x1) prog\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            while (x1) prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> n", "case Skip"], ["proof (state)\nthis:\n  l < #:Skip\n\ngoal (5 subgoals):\n 1. \\<And>l.\n       l < #:Skip \\<Longrightarrow>\n       \\<exists>n et.\n          Skip \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n          Skip \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. \\<And>x1 x2 l.\n       l < #:x1:=x2 \\<Longrightarrow>\n       \\<exists>n et.\n          x1:=x2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n          x1:=x2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 3. \\<And>prog1 prog2 l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog1 \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        \\<And>l.\n           l < #:prog2 \\<Longrightarrow>\n           \\<exists>n et.\n              prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n              prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:prog1;; prog2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            prog1;;\n                            prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            prog1;;\n                            prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 4. \\<And>x1 prog1 prog2 l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog1 \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        \\<And>l.\n           l < #:prog2 \\<Longrightarrow>\n           \\<exists>n et.\n              prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n              prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:if (x1) prog1 else prog2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            if (x1) prog1\n                            else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 5. \\<And>x1 prog l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:while (x1) prog\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            while (x1) prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> n", "from \\<open>l < #:Skip\\<close>"], ["proof (chain)\npicking this:\n  l < #:Skip", "have \"l = 0\""], ["proof (prove)\nusing this:\n  l < #:Skip\n\ngoal (1 subgoal):\n 1. l = 0", "by simp"], ["proof (state)\nthis:\n  l = 0\n\ngoal (5 subgoals):\n 1. \\<And>l.\n       l < #:Skip \\<Longrightarrow>\n       \\<exists>n et.\n          Skip \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n          Skip \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. \\<And>x1 x2 l.\n       l < #:x1:=x2 \\<Longrightarrow>\n       \\<exists>n et.\n          x1:=x2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n          x1:=x2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 3. \\<And>prog1 prog2 l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog1 \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        \\<And>l.\n           l < #:prog2 \\<Longrightarrow>\n           \\<exists>n et.\n              prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n              prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:prog1;; prog2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            prog1;;\n                            prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            prog1;;\n                            prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 4. \\<And>x1 prog1 prog2 l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog1 \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        \\<And>l.\n           l < #:prog2 \\<Longrightarrow>\n           \\<exists>n et.\n              prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n              prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:if (x1) prog1 else prog2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            if (x1) prog1\n                            else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 5. \\<And>x1 prog l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:while (x1) prog\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            while (x1) prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> n", "hence \"Skip \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\""], ["proof (prove)\nusing this:\n  l = 0\n\ngoal (1 subgoal):\n 1. Skip \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)", "by(fastforce intro:WCFG_Skip)"], ["proof (state)\nthis:\n  Skip \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\n\ngoal (5 subgoals):\n 1. \\<And>l.\n       l < #:Skip \\<Longrightarrow>\n       \\<exists>n et.\n          Skip \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n          Skip \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. \\<And>x1 x2 l.\n       l < #:x1:=x2 \\<Longrightarrow>\n       \\<exists>n et.\n          x1:=x2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n          x1:=x2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 3. \\<And>prog1 prog2 l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog1 \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        \\<And>l.\n           l < #:prog2 \\<Longrightarrow>\n           \\<exists>n et.\n              prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n              prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:prog1;; prog2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            prog1;;\n                            prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            prog1;;\n                            prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 4. \\<And>x1 prog1 prog2 l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog1 \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        \\<And>l.\n           l < #:prog2 \\<Longrightarrow>\n           \\<exists>n et.\n              prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n              prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:if (x1) prog1 else prog2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            if (x1) prog1\n                            else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 5. \\<And>x1 prog l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:while (x1) prog\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            while (x1) prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> n", "thus ?case"], ["proof (prove)\nusing this:\n  Skip \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       Skip \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       Skip \\<turnstile> (_ l _) -et\\<rightarrow> n", "by blast"], ["proof (state)\nthis:\n  \\<exists>n et.\n     Skip \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n     Skip \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 l.\n       l < #:x1:=x2 \\<Longrightarrow>\n       \\<exists>n et.\n          x1:=x2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n          x1:=x2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. \\<And>prog1 prog2 l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog1 \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        \\<And>l.\n           l < #:prog2 \\<Longrightarrow>\n           \\<exists>n et.\n              prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n              prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:prog1;; prog2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            prog1;;\n                            prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            prog1;;\n                            prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 3. \\<And>x1 prog1 prog2 l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog1 \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        \\<And>l.\n           l < #:prog2 \\<Longrightarrow>\n           \\<exists>n et.\n              prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n              prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:if (x1) prog1 else prog2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            if (x1) prog1\n                            else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 4. \\<And>x1 prog l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:while (x1) prog\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            while (x1) prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> n", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1 x2 l.\n       l < #:x1:=x2 \\<Longrightarrow>\n       \\<exists>n et.\n          x1:=x2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n          x1:=x2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. \\<And>prog1 prog2 l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog1 \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        \\<And>l.\n           l < #:prog2 \\<Longrightarrow>\n           \\<exists>n et.\n              prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n              prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:prog1;; prog2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            prog1;;\n                            prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            prog1;;\n                            prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 3. \\<And>x1 prog1 prog2 l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog1 \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        \\<And>l.\n           l < #:prog2 \\<Longrightarrow>\n           \\<exists>n et.\n              prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n              prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:if (x1) prog1 else prog2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            if (x1) prog1\n                            else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 4. \\<And>x1 prog l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:while (x1) prog\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            while (x1) prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> n", "case (LAss V e)"], ["proof (state)\nthis:\n  l < #:V:=e\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 l.\n       l < #:x1:=x2 \\<Longrightarrow>\n       \\<exists>n et.\n          x1:=x2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n          x1:=x2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. \\<And>prog1 prog2 l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog1 \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        \\<And>l.\n           l < #:prog2 \\<Longrightarrow>\n           \\<exists>n et.\n              prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n              prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:prog1;; prog2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            prog1;;\n                            prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            prog1;;\n                            prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 3. \\<And>x1 prog1 prog2 l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog1 \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        \\<And>l.\n           l < #:prog2 \\<Longrightarrow>\n           \\<exists>n et.\n              prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n              prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:if (x1) prog1 else prog2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            if (x1) prog1\n                            else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 4. \\<And>x1 prog l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:while (x1) prog\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            while (x1) prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> n", "from \\<open>l < #:V:=e\\<close>"], ["proof (chain)\npicking this:\n  l < #:V:=e", "have \"l = 0 \\<or> l = 1\""], ["proof (prove)\nusing this:\n  l < #:V:=e\n\ngoal (1 subgoal):\n 1. l = 0 \\<or> l = 1", "by auto"], ["proof (state)\nthis:\n  l = 0 \\<or> l = 1\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 l.\n       l < #:x1:=x2 \\<Longrightarrow>\n       \\<exists>n et.\n          x1:=x2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n          x1:=x2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. \\<And>prog1 prog2 l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog1 \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        \\<And>l.\n           l < #:prog2 \\<Longrightarrow>\n           \\<exists>n et.\n              prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n              prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:prog1;; prog2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            prog1;;\n                            prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            prog1;;\n                            prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 3. \\<And>x1 prog1 prog2 l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog1 \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        \\<And>l.\n           l < #:prog2 \\<Longrightarrow>\n           \\<exists>n et.\n              prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n              prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:if (x1) prog1 else prog2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            if (x1) prog1\n                            else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 4. \\<And>x1 prog l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:while (x1) prog\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            while (x1) prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> n", "thus ?case"], ["proof (prove)\nusing this:\n  l = 0 \\<or> l = 1\n\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       V:=e \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       V:=e \\<turnstile> (_ l _) -et\\<rightarrow> n", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. l = 0 \\<Longrightarrow>\n    \\<exists>n et.\n       V:=e \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       V:=e \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. l = 1 \\<Longrightarrow>\n    \\<exists>n et.\n       V:=e \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       V:=e \\<turnstile> (_ l _) -et\\<rightarrow> n", "assume \"l = 0\""], ["proof (state)\nthis:\n  l = 0\n\ngoal (2 subgoals):\n 1. l = 0 \\<Longrightarrow>\n    \\<exists>n et.\n       V:=e \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       V:=e \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. l = 1 \\<Longrightarrow>\n    \\<exists>n et.\n       V:=e \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       V:=e \\<turnstile> (_ l _) -et\\<rightarrow> n", "hence \"V:=e \\<turnstile> (_Entry_) -(\\<lambda>s. True)\\<^sub>\\<surd>\\<rightarrow> (_ l _)\""], ["proof (prove)\nusing this:\n  l = 0\n\ngoal (1 subgoal):\n 1. V:=e \\<turnstile> (_Entry_) -(\\<lambda>s.\n                                     True)\\<^sub>\\<surd>\\<rightarrow> (_ l _)", "by(fastforce intro:WCFG_Entry)"], ["proof (state)\nthis:\n  V:=e \\<turnstile> (_Entry_) -(\\<lambda>s.\n                                   True)\\<^sub>\\<surd>\\<rightarrow> (_ l _)\n\ngoal (2 subgoals):\n 1. l = 0 \\<Longrightarrow>\n    \\<exists>n et.\n       V:=e \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       V:=e \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. l = 1 \\<Longrightarrow>\n    \\<exists>n et.\n       V:=e \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       V:=e \\<turnstile> (_ l _) -et\\<rightarrow> n", "thus ?thesis"], ["proof (prove)\nusing this:\n  V:=e \\<turnstile> (_Entry_) -(\\<lambda>s.\n                                   True)\\<^sub>\\<surd>\\<rightarrow> (_ l _)\n\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       V:=e \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       V:=e \\<turnstile> (_ l _) -et\\<rightarrow> n", "by blast"], ["proof (state)\nthis:\n  \\<exists>n et.\n     V:=e \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n     V:=e \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. l = 1 \\<Longrightarrow>\n    \\<exists>n et.\n       V:=e \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       V:=e \\<turnstile> (_ l _) -et\\<rightarrow> n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. l = 1 \\<Longrightarrow>\n    \\<exists>n et.\n       V:=e \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       V:=e \\<turnstile> (_ l _) -et\\<rightarrow> n", "assume \"l = 1\""], ["proof (state)\nthis:\n  l = 1\n\ngoal (1 subgoal):\n 1. l = 1 \\<Longrightarrow>\n    \\<exists>n et.\n       V:=e \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       V:=e \\<turnstile> (_ l _) -et\\<rightarrow> n", "hence \"V:=e \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\""], ["proof (prove)\nusing this:\n  l = 1\n\ngoal (1 subgoal):\n 1. V:=e \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)", "by(fastforce intro:WCFG_LAssSkip)"], ["proof (state)\nthis:\n  V:=e \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\n\ngoal (1 subgoal):\n 1. l = 1 \\<Longrightarrow>\n    \\<exists>n et.\n       V:=e \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       V:=e \\<turnstile> (_ l _) -et\\<rightarrow> n", "thus ?thesis"], ["proof (prove)\nusing this:\n  V:=e \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       V:=e \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       V:=e \\<turnstile> (_ l _) -et\\<rightarrow> n", "by blast"], ["proof (state)\nthis:\n  \\<exists>n et.\n     V:=e \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n     V:=e \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n et.\n     V:=e \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n     V:=e \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal (3 subgoals):\n 1. \\<And>prog1 prog2 l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog1 \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        \\<And>l.\n           l < #:prog2 \\<Longrightarrow>\n           \\<exists>n et.\n              prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n              prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:prog1;; prog2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            prog1;;\n                            prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            prog1;;\n                            prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. \\<And>x1 prog1 prog2 l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog1 \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        \\<And>l.\n           l < #:prog2 \\<Longrightarrow>\n           \\<exists>n et.\n              prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n              prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:if (x1) prog1 else prog2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            if (x1) prog1\n                            else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 3. \\<And>x1 prog l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:while (x1) prog\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            while (x1) prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> n", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>prog1 prog2 l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog1 \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        \\<And>l.\n           l < #:prog2 \\<Longrightarrow>\n           \\<exists>n et.\n              prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n              prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:prog1;; prog2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            prog1;;\n                            prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            prog1;;\n                            prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. \\<And>x1 prog1 prog2 l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog1 \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        \\<And>l.\n           l < #:prog2 \\<Longrightarrow>\n           \\<exists>n et.\n              prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n              prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:if (x1) prog1 else prog2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            if (x1) prog1\n                            else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 3. \\<And>x1 prog l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:while (x1) prog\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            while (x1) prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> n", "case (Seq prog1 prog2)"], ["proof (state)\nthis:\n  ?l < #:prog1 \\<Longrightarrow>\n  \\<exists>n et.\n     prog1 \\<turnstile> n -et\\<rightarrow> (_ ?l _) \\<or>\n     prog1 \\<turnstile> (_ ?l _) -et\\<rightarrow> n\n  ?l < #:prog2 \\<Longrightarrow>\n  \\<exists>n et.\n     prog2 \\<turnstile> n -et\\<rightarrow> (_ ?l _) \\<or>\n     prog2 \\<turnstile> (_ ?l _) -et\\<rightarrow> n\n  l < #:prog1;; prog2\n\ngoal (3 subgoals):\n 1. \\<And>prog1 prog2 l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog1 \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        \\<And>l.\n           l < #:prog2 \\<Longrightarrow>\n           \\<exists>n et.\n              prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n              prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:prog1;; prog2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            prog1;;\n                            prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            prog1;;\n                            prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. \\<And>x1 prog1 prog2 l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog1 \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        \\<And>l.\n           l < #:prog2 \\<Longrightarrow>\n           \\<exists>n et.\n              prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n              prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:if (x1) prog1 else prog2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            if (x1) prog1\n                            else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 3. \\<And>x1 prog l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:while (x1) prog\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            while (x1) prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> n", "note IH1 = \\<open>\\<And>l. l < #:prog1 \\<Longrightarrow> \n              \\<exists>n et. prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n\\<close>"], ["proof (state)\nthis:\n  ?l < #:prog1 \\<Longrightarrow>\n  \\<exists>n et.\n     prog1 \\<turnstile> n -et\\<rightarrow> (_ ?l _) \\<or>\n     prog1 \\<turnstile> (_ ?l _) -et\\<rightarrow> n\n\ngoal (3 subgoals):\n 1. \\<And>prog1 prog2 l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog1 \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        \\<And>l.\n           l < #:prog2 \\<Longrightarrow>\n           \\<exists>n et.\n              prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n              prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:prog1;; prog2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            prog1;;\n                            prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            prog1;;\n                            prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. \\<And>x1 prog1 prog2 l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog1 \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        \\<And>l.\n           l < #:prog2 \\<Longrightarrow>\n           \\<exists>n et.\n              prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n              prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:if (x1) prog1 else prog2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            if (x1) prog1\n                            else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 3. \\<And>x1 prog l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:while (x1) prog\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            while (x1) prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> n", "note IH2 = \\<open>\\<And>l. l < #:prog2 \\<Longrightarrow> \n              \\<exists>n et. prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\\<close>"], ["proof (state)\nthis:\n  ?l < #:prog2 \\<Longrightarrow>\n  \\<exists>n et.\n     prog2 \\<turnstile> n -et\\<rightarrow> (_ ?l _) \\<or>\n     prog2 \\<turnstile> (_ ?l _) -et\\<rightarrow> n\n\ngoal (3 subgoals):\n 1. \\<And>prog1 prog2 l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog1 \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        \\<And>l.\n           l < #:prog2 \\<Longrightarrow>\n           \\<exists>n et.\n              prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n              prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:prog1;; prog2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            prog1;;\n                            prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            prog1;;\n                            prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. \\<And>x1 prog1 prog2 l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog1 \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        \\<And>l.\n           l < #:prog2 \\<Longrightarrow>\n           \\<exists>n et.\n              prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n              prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:if (x1) prog1 else prog2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            if (x1) prog1\n                            else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 3. \\<And>x1 prog l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:while (x1) prog\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            while (x1) prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> n", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "proof(cases \"l < #:prog1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. l < #:prog1 \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. \\<not> l < #:prog1 \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "case True"], ["proof (state)\nthis:\n  l < #:prog1\n\ngoal (2 subgoals):\n 1. l < #:prog1 \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. \\<not> l < #:prog1 \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "from IH1[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>n et.\n     prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n     prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n", "obtain n et \n      where \"prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n\""], ["proof (prove)\nusing this:\n  \\<exists>n et.\n     prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n     prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. (\\<And>n et.\n        prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n        prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n  prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal (2 subgoals):\n 1. l < #:prog1 \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. \\<not> l < #:prog1 \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "thus ?thesis"], ["proof (prove)\nusing this:\n  prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n  prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "assume \"prog1 \\<turnstile> n -et\\<rightarrow> (_ l _)\""], ["proof (state)\nthis:\n  prog1 \\<turnstile> n -et\\<rightarrow> (_ l _)\n\ngoal (2 subgoals):\n 1. prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "hence \"prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _)\""], ["proof (prove)\nusing this:\n  prog1 \\<turnstile> n -et\\<rightarrow> (_ l _)\n\ngoal (1 subgoal):\n 1. prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _)", "by(fastforce intro:WCFG_SeqFirst)"], ["proof (state)\nthis:\n  prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _)\n\ngoal (2 subgoals):\n 1. prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "thus ?thesis"], ["proof (prove)\nusing this:\n  prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _)\n\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "by blast"], ["proof (state)\nthis:\n  \\<exists>n et.\n     prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n     prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "assume edge:\"prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n\""], ["proof (state)\nthis:\n  prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "proof(cases \"n = (_Exit_)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = (_Exit_) \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. n \\<noteq> (_Exit_) \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "case True"], ["proof (state)\nthis:\n  n = (_Exit_)\n\ngoal (2 subgoals):\n 1. n = (_Exit_) \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. n \\<noteq> (_Exit_) \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "with edge"], ["proof (chain)\npicking this:\n  prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n\n  n = (_Exit_)", "have \"prog1;; prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_0_) \\<oplus> #:prog1\""], ["proof (prove)\nusing this:\n  prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n\n  n = (_Exit_)\n\ngoal (1 subgoal):\n 1. prog1;;\n    prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ 0 _) \\<oplus> #:prog1", "by(fastforce intro:WCFG_SeqConnect)"], ["proof (state)\nthis:\n  prog1;;\n  prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ 0 _) \\<oplus> #:prog1\n\ngoal (2 subgoals):\n 1. n = (_Exit_) \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. n \\<noteq> (_Exit_) \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "thus ?thesis"], ["proof (prove)\nusing this:\n  prog1;;\n  prog2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ 0 _) \\<oplus> #:prog1\n\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "by blast"], ["proof (state)\nthis:\n  \\<exists>n et.\n     prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n     prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. n \\<noteq> (_Exit_) \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<noteq> (_Exit_) \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "case False"], ["proof (state)\nthis:\n  n \\<noteq> (_Exit_)\n\ngoal (1 subgoal):\n 1. n \\<noteq> (_Exit_) \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "with edge"], ["proof (chain)\npicking this:\n  prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n\n  n \\<noteq> (_Exit_)", "have \"prog1;; prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\""], ["proof (prove)\nusing this:\n  prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n\n  n \\<noteq> (_Exit_)\n\ngoal (1 subgoal):\n 1. prog1;; prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "by(fastforce intro:WCFG_SeqFirst)"], ["proof (state)\nthis:\n  prog1;; prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. n \\<noteq> (_Exit_) \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "thus ?thesis"], ["proof (prove)\nusing this:\n  prog1;; prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "by blast"], ["proof (state)\nthis:\n  \\<exists>n et.\n     prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n     prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n et.\n     prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n     prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n et.\n     prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n     prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. \\<not> l < #:prog1 \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> l < #:prog1 \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "case False"], ["proof (state)\nthis:\n  \\<not> l < #:prog1\n\ngoal (1 subgoal):\n 1. \\<not> l < #:prog1 \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "hence \"#:prog1 \\<le> l\""], ["proof (prove)\nusing this:\n  \\<not> l < #:prog1\n\ngoal (1 subgoal):\n 1. #:prog1 \\<le> l", "by simp"], ["proof (state)\nthis:\n  #:prog1 \\<le> l\n\ngoal (1 subgoal):\n 1. \\<not> l < #:prog1 \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "then"], ["proof (chain)\npicking this:\n  #:prog1 \\<le> l", "obtain l' where \"l = l' + #:prog1\" and \"l' = l - #:prog1\""], ["proof (prove)\nusing this:\n  #:prog1 \\<le> l\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>l = l' + #:prog1; l' = l - #:prog1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  l = l' + #:prog1\n  l' = l - #:prog1\n\ngoal (1 subgoal):\n 1. \\<not> l < #:prog1 \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "from \\<open>l = l' + #:prog1\\<close> \\<open>l < #:prog1;; prog2\\<close>"], ["proof (chain)\npicking this:\n  l = l' + #:prog1\n  l < #:prog1;; prog2", "have \"l' < #:prog2\""], ["proof (prove)\nusing this:\n  l = l' + #:prog1\n  l < #:prog1;; prog2\n\ngoal (1 subgoal):\n 1. l' < #:prog2", "by simp"], ["proof (state)\nthis:\n  l' < #:prog2\n\ngoal (1 subgoal):\n 1. \\<not> l < #:prog1 \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "from IH2[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>n et.\n     prog2 \\<turnstile> n -et\\<rightarrow> (_ l' _) \\<or>\n     prog2 \\<turnstile> (_ l' _) -et\\<rightarrow> n", "obtain n et\n      where \"prog2 \\<turnstile> n -et\\<rightarrow> (_ l' _) \\<or> prog2 \\<turnstile> (_ l' _) -et\\<rightarrow> n\""], ["proof (prove)\nusing this:\n  \\<exists>n et.\n     prog2 \\<turnstile> n -et\\<rightarrow> (_ l' _) \\<or>\n     prog2 \\<turnstile> (_ l' _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. (\\<And>n et.\n        prog2 \\<turnstile> n -et\\<rightarrow> (_ l' _) \\<or>\n        prog2 \\<turnstile> (_ l' _) -et\\<rightarrow> n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  prog2 \\<turnstile> n -et\\<rightarrow> (_ l' _) \\<or>\n  prog2 \\<turnstile> (_ l' _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. \\<not> l < #:prog1 \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "thus ?thesis"], ["proof (prove)\nusing this:\n  prog2 \\<turnstile> n -et\\<rightarrow> (_ l' _) \\<or>\n  prog2 \\<turnstile> (_ l' _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. prog2 \\<turnstile> n -et\\<rightarrow> (_ l' _) \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. prog2 \\<turnstile> (_ l' _) -et\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "assume \"prog2 \\<turnstile> n -et\\<rightarrow> (_ l' _)\""], ["proof (state)\nthis:\n  prog2 \\<turnstile> n -et\\<rightarrow> (_ l' _)\n\ngoal (2 subgoals):\n 1. prog2 \\<turnstile> n -et\\<rightarrow> (_ l' _) \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. prog2 \\<turnstile> (_ l' _) -et\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "proof(cases \"n = (_Entry_)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "case True"], ["proof (state)\nthis:\n  n = (_Entry_)\n\ngoal (2 subgoals):\n 1. n = (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "with \\<open>prog2 \\<turnstile> n -et\\<rightarrow> (_ l' _)\\<close>"], ["proof (chain)\npicking this:\n  prog2 \\<turnstile> n -et\\<rightarrow> (_ l' _)\n  n = (_Entry_)", "have \"l' = 0\""], ["proof (prove)\nusing this:\n  prog2 \\<turnstile> n -et\\<rightarrow> (_ l' _)\n  n = (_Entry_)\n\ngoal (1 subgoal):\n 1. l' = 0", "by(auto dest:WCFG_EntryD)"], ["proof (state)\nthis:\n  l' = 0\n\ngoal (2 subgoals):\n 1. n = (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "obtain l'' et'' where \"l'' < #:prog1\" \n          and \"prog1 \\<turnstile> (_ l'' _) -et''\\<rightarrow> (_Exit_)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l'' et''.\n        \\<lbrakk>l'' < #:prog1;\n         prog1 \\<turnstile> (_ l'' _) -et''\\<rightarrow> (_Exit_)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(erule less_num_nodes_edge_Exit)"], ["proof (state)\nthis:\n  l'' < #:prog1\n  prog1 \\<turnstile> (_ l'' _) -et''\\<rightarrow> (_Exit_)\n\ngoal (2 subgoals):\n 1. n = (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "hence \"prog1;;prog2 \\<turnstile> (_ l'' _) -et''\\<rightarrow> (_0_) \\<oplus> #:prog1\""], ["proof (prove)\nusing this:\n  l'' < #:prog1\n  prog1 \\<turnstile> (_ l'' _) -et''\\<rightarrow> (_Exit_)\n\ngoal (1 subgoal):\n 1. prog1;;\n    prog2 \\<turnstile> (_ l'' _) -et''\\<rightarrow> (_ 0 _) \\<oplus> #:prog1", "by(fastforce intro:WCFG_SeqConnect)"], ["proof (state)\nthis:\n  prog1;;\n  prog2 \\<turnstile> (_ l'' _) -et''\\<rightarrow> (_ 0 _) \\<oplus> #:prog1\n\ngoal (2 subgoals):\n 1. n = (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "with \\<open>l' = 0\\<close> \\<open>l = l' + #:prog1\\<close>"], ["proof (chain)\npicking this:\n  l' = 0\n  l = l' + #:prog1\n  prog1;;\n  prog2 \\<turnstile> (_ l'' _) -et''\\<rightarrow> (_ 0 _) \\<oplus> #:prog1", "show ?thesis"], ["proof (prove)\nusing this:\n  l' = 0\n  l = l' + #:prog1\n  prog1;;\n  prog2 \\<turnstile> (_ l'' _) -et''\\<rightarrow> (_ 0 _) \\<oplus> #:prog1\n\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "by simp blast"], ["proof (state)\nthis:\n  \\<exists>n et.\n     prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n     prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "case False"], ["proof (state)\nthis:\n  n \\<noteq> (_Entry_)\n\ngoal (1 subgoal):\n 1. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "with \\<open>prog2 \\<turnstile> n -et\\<rightarrow> (_ l' _)\\<close>"], ["proof (chain)\npicking this:\n  prog2 \\<turnstile> n -et\\<rightarrow> (_ l' _)\n  n \\<noteq> (_Entry_)", "have \"prog1;;prog2 \\<turnstile> n \\<oplus> #:prog1 -et\\<rightarrow> (_ l' _) \\<oplus> #:prog1\""], ["proof (prove)\nusing this:\n  prog2 \\<turnstile> n -et\\<rightarrow> (_ l' _)\n  n \\<noteq> (_Entry_)\n\ngoal (1 subgoal):\n 1. prog1;;\n    prog2 \\<turnstile> n \\<oplus> #:prog1 -et\\<rightarrow> (_ l' _) \\<oplus> #:prog1", "by(fastforce intro:WCFG_SeqSecond)"], ["proof (state)\nthis:\n  prog1;;\n  prog2 \\<turnstile> n \\<oplus> #:prog1 -et\\<rightarrow> (_ l' _) \\<oplus> #:prog1\n\ngoal (1 subgoal):\n 1. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "with \\<open>l = l' + #:prog1\\<close>"], ["proof (chain)\npicking this:\n  l = l' + #:prog1\n  prog1;;\n  prog2 \\<turnstile> n \\<oplus> #:prog1 -et\\<rightarrow> (_ l' _) \\<oplus> #:prog1", "show ?thesis"], ["proof (prove)\nusing this:\n  l = l' + #:prog1\n  prog1;;\n  prog2 \\<turnstile> n \\<oplus> #:prog1 -et\\<rightarrow> (_ l' _) \\<oplus> #:prog1\n\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "by simp blast"], ["proof (state)\nthis:\n  \\<exists>n et.\n     prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n     prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n et.\n     prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n     prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. prog2 \\<turnstile> (_ l' _) -et\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. prog2 \\<turnstile> (_ l' _) -et\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "assume \"prog2 \\<turnstile> (_ l' _) -et\\<rightarrow> n\""], ["proof (state)\nthis:\n  prog2 \\<turnstile> (_ l' _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. prog2 \\<turnstile> (_ l' _) -et\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "hence \"prog1;;prog2 \\<turnstile> (_ l' _) \\<oplus> #:prog1 -et\\<rightarrow> n \\<oplus> #:prog1\""], ["proof (prove)\nusing this:\n  prog2 \\<turnstile> (_ l' _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. prog1;;\n    prog2 \\<turnstile> (_ l' _) \\<oplus> #:prog1 -et\\<rightarrow> n \\<oplus> #:prog1", "by(fastforce intro:WCFG_SeqSecond)"], ["proof (state)\nthis:\n  prog1;;\n  prog2 \\<turnstile> (_ l' _) \\<oplus> #:prog1 -et\\<rightarrow> n \\<oplus> #:prog1\n\ngoal (1 subgoal):\n 1. prog2 \\<turnstile> (_ l' _) -et\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "with \\<open>l = l' + #:prog1\\<close>"], ["proof (chain)\npicking this:\n  l = l' + #:prog1\n  prog1;;\n  prog2 \\<turnstile> (_ l' _) \\<oplus> #:prog1 -et\\<rightarrow> n \\<oplus> #:prog1", "show ?thesis"], ["proof (prove)\nusing this:\n  l = l' + #:prog1\n  prog1;;\n  prog2 \\<turnstile> (_ l' _) \\<oplus> #:prog1 -et\\<rightarrow> n \\<oplus> #:prog1\n\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n       prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "by simp blast"], ["proof (state)\nthis:\n  \\<exists>n et.\n     prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n     prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n et.\n     prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n     prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n et.\n     prog1;; prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1;;\n     prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal (2 subgoals):\n 1. \\<And>x1 prog1 prog2 l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog1 \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        \\<And>l.\n           l < #:prog2 \\<Longrightarrow>\n           \\<exists>n et.\n              prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n              prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:if (x1) prog1 else prog2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            if (x1) prog1\n                            else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. \\<And>x1 prog l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:while (x1) prog\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            while (x1) prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> n", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1 prog1 prog2 l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog1 \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        \\<And>l.\n           l < #:prog2 \\<Longrightarrow>\n           \\<exists>n et.\n              prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n              prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:if (x1) prog1 else prog2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            if (x1) prog1\n                            else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. \\<And>x1 prog l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:while (x1) prog\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            while (x1) prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> n", "case (Cond b prog1 prog2)"], ["proof (state)\nthis:\n  ?l < #:prog1 \\<Longrightarrow>\n  \\<exists>n et.\n     prog1 \\<turnstile> n -et\\<rightarrow> (_ ?l _) \\<or>\n     prog1 \\<turnstile> (_ ?l _) -et\\<rightarrow> n\n  ?l < #:prog2 \\<Longrightarrow>\n  \\<exists>n et.\n     prog2 \\<turnstile> n -et\\<rightarrow> (_ ?l _) \\<or>\n     prog2 \\<turnstile> (_ ?l _) -et\\<rightarrow> n\n  l < #:if (b) prog1 else prog2\n\ngoal (2 subgoals):\n 1. \\<And>x1 prog1 prog2 l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog1 \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        \\<And>l.\n           l < #:prog2 \\<Longrightarrow>\n           \\<exists>n et.\n              prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n              prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:if (x1) prog1 else prog2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            if (x1) prog1\n                            else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. \\<And>x1 prog l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:while (x1) prog\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            while (x1) prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> n", "note IH1 = \\<open>\\<And>l. l < #:prog1 \\<Longrightarrow> \n              \\<exists>n et. prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n\\<close>"], ["proof (state)\nthis:\n  ?l < #:prog1 \\<Longrightarrow>\n  \\<exists>n et.\n     prog1 \\<turnstile> n -et\\<rightarrow> (_ ?l _) \\<or>\n     prog1 \\<turnstile> (_ ?l _) -et\\<rightarrow> n\n\ngoal (2 subgoals):\n 1. \\<And>x1 prog1 prog2 l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog1 \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        \\<And>l.\n           l < #:prog2 \\<Longrightarrow>\n           \\<exists>n et.\n              prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n              prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:if (x1) prog1 else prog2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            if (x1) prog1\n                            else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. \\<And>x1 prog l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:while (x1) prog\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            while (x1) prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> n", "note IH2 = \\<open>\\<And>l. l < #:prog2 \\<Longrightarrow> \n              \\<exists>n et. prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\\<close>"], ["proof (state)\nthis:\n  ?l < #:prog2 \\<Longrightarrow>\n  \\<exists>n et.\n     prog2 \\<turnstile> n -et\\<rightarrow> (_ ?l _) \\<or>\n     prog2 \\<turnstile> (_ ?l _) -et\\<rightarrow> n\n\ngoal (2 subgoals):\n 1. \\<And>x1 prog1 prog2 l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog1 \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog1 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog1 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        \\<And>l.\n           l < #:prog2 \\<Longrightarrow>\n           \\<exists>n et.\n              prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n              prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:if (x1) prog1 else prog2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            if (x1) prog1\n                            else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            if (x1) prog1\n                            else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. \\<And>x1 prog l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:while (x1) prog\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            while (x1) prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> n", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "proof(cases \"l = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. l = 0 \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. l \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "case True"], ["proof (state)\nthis:\n  l = 0\n\ngoal (2 subgoals):\n 1. l = 0 \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. l \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "have \"if (b) prog1 else prog2 \\<turnstile> (_Entry_) -(\\<lambda>s. True)\\<^sub>\\<surd>\\<rightarrow> (_0_)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. if (b) prog1\n    else prog2 \\<turnstile> (_Entry_) -(\\<lambda>s.\n     True)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _)", "by(rule WCFG_Entry)"], ["proof (state)\nthis:\n  if (b) prog1\n  else prog2 \\<turnstile> (_Entry_) -(\\<lambda>s.\n   True)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _)\n\ngoal (2 subgoals):\n 1. l = 0 \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. l \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "with True"], ["proof (chain)\npicking this:\n  l = 0\n  if (b) prog1\n  else prog2 \\<turnstile> (_Entry_) -(\\<lambda>s.\n   True)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _)", "show ?thesis"], ["proof (prove)\nusing this:\n  l = 0\n  if (b) prog1\n  else prog2 \\<turnstile> (_Entry_) -(\\<lambda>s.\n   True)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _)\n\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "by simp blast"], ["proof (state)\nthis:\n  \\<exists>n et.\n     if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n     if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. l \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. l \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "case False"], ["proof (state)\nthis:\n  l \\<noteq> 0\n\ngoal (1 subgoal):\n 1. l \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "hence \"0 < l\""], ["proof (prove)\nusing this:\n  l \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < l", "by simp"], ["proof (state)\nthis:\n  0 < l\n\ngoal (1 subgoal):\n 1. l \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "then"], ["proof (chain)\npicking this:\n  0 < l", "obtain l' where \"l = l' + 1\" and \"l' = l - 1\""], ["proof (prove)\nusing this:\n  0 < l\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>l = l' + 1; l' = l - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  l = l' + 1\n  l' = l - 1\n\ngoal (1 subgoal):\n 1. l \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "thus ?thesis"], ["proof (prove)\nusing this:\n  l = l' + 1\n  l' = l - 1\n\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "proof(cases \"l' < #:prog1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>l = l' + 1; l' = l - 1; l' < #:prog1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n et.\n                         if (b) prog1\n                         else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                         if (b) prog1\n                         else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. \\<lbrakk>l = l' + 1; l' = l - 1; \\<not> l' < #:prog1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n et.\n                         if (b) prog1\n                         else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                         if (b) prog1\n                         else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "case True"], ["proof (state)\nthis:\n  l' < #:prog1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>l = l' + 1; l' = l - 1; l' < #:prog1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n et.\n                         if (b) prog1\n                         else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                         if (b) prog1\n                         else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. \\<lbrakk>l = l' + 1; l' = l - 1; \\<not> l' < #:prog1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n et.\n                         if (b) prog1\n                         else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                         if (b) prog1\n                         else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "from IH1[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>n et.\n     prog1 \\<turnstile> n -et\\<rightarrow> (_ l' _) \\<or>\n     prog1 \\<turnstile> (_ l' _) -et\\<rightarrow> n", "obtain n et \n        where \"prog1 \\<turnstile> n -et\\<rightarrow> (_ l' _) \\<or> prog1 \\<turnstile> (_ l' _) -et\\<rightarrow> n\""], ["proof (prove)\nusing this:\n  \\<exists>n et.\n     prog1 \\<turnstile> n -et\\<rightarrow> (_ l' _) \\<or>\n     prog1 \\<turnstile> (_ l' _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. (\\<And>n et.\n        prog1 \\<turnstile> n -et\\<rightarrow> (_ l' _) \\<or>\n        prog1 \\<turnstile> (_ l' _) -et\\<rightarrow> n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  prog1 \\<turnstile> n -et\\<rightarrow> (_ l' _) \\<or>\n  prog1 \\<turnstile> (_ l' _) -et\\<rightarrow> n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>l = l' + 1; l' = l - 1; l' < #:prog1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n et.\n                         if (b) prog1\n                         else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                         if (b) prog1\n                         else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. \\<lbrakk>l = l' + 1; l' = l - 1; \\<not> l' < #:prog1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n et.\n                         if (b) prog1\n                         else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                         if (b) prog1\n                         else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "thus ?thesis"], ["proof (prove)\nusing this:\n  prog1 \\<turnstile> n -et\\<rightarrow> (_ l' _) \\<or>\n  prog1 \\<turnstile> (_ l' _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. prog1 \\<turnstile> n -et\\<rightarrow> (_ l' _) \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. prog1 \\<turnstile> (_ l' _) -et\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "assume edge:\"prog1 \\<turnstile> n -et\\<rightarrow> (_ l' _)\""], ["proof (state)\nthis:\n  prog1 \\<turnstile> n -et\\<rightarrow> (_ l' _)\n\ngoal (2 subgoals):\n 1. prog1 \\<turnstile> n -et\\<rightarrow> (_ l' _) \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. prog1 \\<turnstile> (_ l' _) -et\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "proof(cases \"n = (_Entry_)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "case True"], ["proof (state)\nthis:\n  n = (_Entry_)\n\ngoal (2 subgoals):\n 1. n = (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "with edge"], ["proof (chain)\npicking this:\n  prog1 \\<turnstile> n -et\\<rightarrow> (_ l' _)\n  n = (_Entry_)", "have \"l' = 0\""], ["proof (prove)\nusing this:\n  prog1 \\<turnstile> n -et\\<rightarrow> (_ l' _)\n  n = (_Entry_)\n\ngoal (1 subgoal):\n 1. l' = 0", "by(auto dest:WCFG_EntryD)"], ["proof (state)\nthis:\n  l' = 0\n\ngoal (2 subgoals):\n 1. n = (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "have \"if (b) prog1 else prog2 \\<turnstile> (_0_) -(\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\\<rightarrow> \n                                          (_0_) \\<oplus> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. if (b) prog1\n    else prog2 \\<turnstile> (_ 0 _) -(\\<lambda>s.\n   interpret b s = Some true)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _) \\<oplus> 1", "by(rule WCFG_CondTrue)"], ["proof (state)\nthis:\n  if (b) prog1\n  else prog2 \\<turnstile> (_ 0 _) -(\\<lambda>s.\n interpret b s = Some true)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _) \\<oplus> 1\n\ngoal (2 subgoals):\n 1. n = (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "with \\<open>l' = 0\\<close> \\<open>l = l' + 1\\<close>"], ["proof (chain)\npicking this:\n  l' = 0\n  l = l' + 1\n  if (b) prog1\n  else prog2 \\<turnstile> (_ 0 _) -(\\<lambda>s.\n interpret b s = Some true)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _) \\<oplus> 1", "show ?thesis"], ["proof (prove)\nusing this:\n  l' = 0\n  l = l' + 1\n  if (b) prog1\n  else prog2 \\<turnstile> (_ 0 _) -(\\<lambda>s.\n interpret b s = Some true)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _) \\<oplus> 1\n\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "by simp blast"], ["proof (state)\nthis:\n  \\<exists>n et.\n     if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n     if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "case False"], ["proof (state)\nthis:\n  n \\<noteq> (_Entry_)\n\ngoal (1 subgoal):\n 1. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "with edge"], ["proof (chain)\npicking this:\n  prog1 \\<turnstile> n -et\\<rightarrow> (_ l' _)\n  n \\<noteq> (_Entry_)", "have \"if (b) prog1 else prog2 \\<turnstile> n \\<oplus> 1 -et\\<rightarrow> (_ l' _) \\<oplus> 1\""], ["proof (prove)\nusing this:\n  prog1 \\<turnstile> n -et\\<rightarrow> (_ l' _)\n  n \\<noteq> (_Entry_)\n\ngoal (1 subgoal):\n 1. if (b) prog1\n    else prog2 \\<turnstile> n \\<oplus> 1 -et\\<rightarrow> (_ l' _) \\<oplus> 1", "by(fastforce intro:WCFG_CondThen)"], ["proof (state)\nthis:\n  if (b) prog1\n  else prog2 \\<turnstile> n \\<oplus> 1 -et\\<rightarrow> (_ l' _) \\<oplus> 1\n\ngoal (1 subgoal):\n 1. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "with \\<open>l = l' + 1\\<close>"], ["proof (chain)\npicking this:\n  l = l' + 1\n  if (b) prog1\n  else prog2 \\<turnstile> n \\<oplus> 1 -et\\<rightarrow> (_ l' _) \\<oplus> 1", "show ?thesis"], ["proof (prove)\nusing this:\n  l = l' + 1\n  if (b) prog1\n  else prog2 \\<turnstile> n \\<oplus> 1 -et\\<rightarrow> (_ l' _) \\<oplus> 1\n\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "by simp blast"], ["proof (state)\nthis:\n  \\<exists>n et.\n     if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n     if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n et.\n     if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n     if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. prog1 \\<turnstile> (_ l' _) -et\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. prog1 \\<turnstile> (_ l' _) -et\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "assume \"prog1 \\<turnstile> (_ l' _) -et\\<rightarrow> n\""], ["proof (state)\nthis:\n  prog1 \\<turnstile> (_ l' _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. prog1 \\<turnstile> (_ l' _) -et\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "hence \"if (b) prog1 else prog2 \\<turnstile> (_ l' _) \\<oplus> 1 -et\\<rightarrow> n \\<oplus> 1\""], ["proof (prove)\nusing this:\n  prog1 \\<turnstile> (_ l' _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. if (b) prog1\n    else prog2 \\<turnstile> (_ l' _) \\<oplus> 1 -et\\<rightarrow> n \\<oplus> 1", "by(fastforce intro:WCFG_CondThen)"], ["proof (state)\nthis:\n  if (b) prog1\n  else prog2 \\<turnstile> (_ l' _) \\<oplus> 1 -et\\<rightarrow> n \\<oplus> 1\n\ngoal (1 subgoal):\n 1. prog1 \\<turnstile> (_ l' _) -et\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "with \\<open>l = l' + 1\\<close>"], ["proof (chain)\npicking this:\n  l = l' + 1\n  if (b) prog1\n  else prog2 \\<turnstile> (_ l' _) \\<oplus> 1 -et\\<rightarrow> n \\<oplus> 1", "show ?thesis"], ["proof (prove)\nusing this:\n  l = l' + 1\n  if (b) prog1\n  else prog2 \\<turnstile> (_ l' _) \\<oplus> 1 -et\\<rightarrow> n \\<oplus> 1\n\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "by simp blast"], ["proof (state)\nthis:\n  \\<exists>n et.\n     if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n     if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n et.\n     if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n     if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>l = l' + 1; l' = l - 1; \\<not> l' < #:prog1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n et.\n                         if (b) prog1\n                         else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                         if (b) prog1\n                         else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>l = l' + 1; l' = l - 1; \\<not> l' < #:prog1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n et.\n                         if (b) prog1\n                         else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                         if (b) prog1\n                         else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "case False"], ["proof (state)\nthis:\n  \\<not> l' < #:prog1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>l = l' + 1; l' = l - 1; \\<not> l' < #:prog1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n et.\n                         if (b) prog1\n                         else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                         if (b) prog1\n                         else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "hence \"#:prog1 \\<le> l'\""], ["proof (prove)\nusing this:\n  \\<not> l' < #:prog1\n\ngoal (1 subgoal):\n 1. #:prog1 \\<le> l'", "by simp"], ["proof (state)\nthis:\n  #:prog1 \\<le> l'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>l = l' + 1; l' = l - 1; \\<not> l' < #:prog1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n et.\n                         if (b) prog1\n                         else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                         if (b) prog1\n                         else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "then"], ["proof (chain)\npicking this:\n  #:prog1 \\<le> l'", "obtain l'' where \"l' = l'' + #:prog1\" and \"l'' = l' - #:prog1\""], ["proof (prove)\nusing this:\n  #:prog1 \\<le> l'\n\ngoal (1 subgoal):\n 1. (\\<And>l''.\n        \\<lbrakk>l' = l'' + #:prog1; l'' = l' - #:prog1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  l' = l'' + #:prog1\n  l'' = l' - #:prog1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>l = l' + 1; l' = l - 1; \\<not> l' < #:prog1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n et.\n                         if (b) prog1\n                         else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                         if (b) prog1\n                         else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "from \\<open>l' = l'' + #:prog1\\<close> \\<open>l = l' + 1\\<close> \\<open>l < #:(if (b) prog1 else prog2)\\<close>"], ["proof (chain)\npicking this:\n  l' = l'' + #:prog1\n  l = l' + 1\n  l < #:if (b) prog1 else prog2", "have \"l'' < #:prog2\""], ["proof (prove)\nusing this:\n  l' = l'' + #:prog1\n  l = l' + 1\n  l < #:if (b) prog1 else prog2\n\ngoal (1 subgoal):\n 1. l'' < #:prog2", "by simp"], ["proof (state)\nthis:\n  l'' < #:prog2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>l = l' + 1; l' = l - 1; \\<not> l' < #:prog1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n et.\n                         if (b) prog1\n                         else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                         if (b) prog1\n                         else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "from IH2[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>n et.\n     prog2 \\<turnstile> n -et\\<rightarrow> (_ l'' _) \\<or>\n     prog2 \\<turnstile> (_ l'' _) -et\\<rightarrow> n", "obtain n et \n        where \"prog2 \\<turnstile> n -et\\<rightarrow> (_ l'' _) \\<or> prog2 \\<turnstile> (_ l'' _) -et\\<rightarrow> n\""], ["proof (prove)\nusing this:\n  \\<exists>n et.\n     prog2 \\<turnstile> n -et\\<rightarrow> (_ l'' _) \\<or>\n     prog2 \\<turnstile> (_ l'' _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. (\\<And>n et.\n        prog2 \\<turnstile> n -et\\<rightarrow> (_ l'' _) \\<or>\n        prog2 \\<turnstile> (_ l'' _) -et\\<rightarrow> n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  prog2 \\<turnstile> n -et\\<rightarrow> (_ l'' _) \\<or>\n  prog2 \\<turnstile> (_ l'' _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>l = l' + 1; l' = l - 1; \\<not> l' < #:prog1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n et.\n                         if (b) prog1\n                         else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                         if (b) prog1\n                         else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "thus ?thesis"], ["proof (prove)\nusing this:\n  prog2 \\<turnstile> n -et\\<rightarrow> (_ l'' _) \\<or>\n  prog2 \\<turnstile> (_ l'' _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. prog2 \\<turnstile> n -et\\<rightarrow> (_ l'' _) \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. prog2 \\<turnstile> (_ l'' _) -et\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "assume \"prog2 \\<turnstile> n -et\\<rightarrow> (_ l'' _)\""], ["proof (state)\nthis:\n  prog2 \\<turnstile> n -et\\<rightarrow> (_ l'' _)\n\ngoal (2 subgoals):\n 1. prog2 \\<turnstile> n -et\\<rightarrow> (_ l'' _) \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. prog2 \\<turnstile> (_ l'' _) -et\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "proof(cases \"n = (_Entry_)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "case True"], ["proof (state)\nthis:\n  n = (_Entry_)\n\ngoal (2 subgoals):\n 1. n = (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "with \\<open>prog2 \\<turnstile> n -et\\<rightarrow> (_ l'' _)\\<close>"], ["proof (chain)\npicking this:\n  prog2 \\<turnstile> n -et\\<rightarrow> (_ l'' _)\n  n = (_Entry_)", "have \"l'' = 0\""], ["proof (prove)\nusing this:\n  prog2 \\<turnstile> n -et\\<rightarrow> (_ l'' _)\n  n = (_Entry_)\n\ngoal (1 subgoal):\n 1. l'' = 0", "by(auto dest:WCFG_EntryD)"], ["proof (state)\nthis:\n  l'' = 0\n\ngoal (2 subgoals):\n 1. n = (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "have \"if (b) prog1 else prog2 \\<turnstile> (_0_) -(\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\\<rightarrow> \n                                          (_0_) \\<oplus> (#:prog1 + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. if (b) prog1\n    else prog2 \\<turnstile> (_ 0 _) -(\\<lambda>s.\n   interpret b s =\n   Some false)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _) \\<oplus> #:prog1 + 1", "by(rule WCFG_CondFalse)"], ["proof (state)\nthis:\n  if (b) prog1\n  else prog2 \\<turnstile> (_ 0 _) -(\\<lambda>s.\n interpret b s =\n Some false)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _) \\<oplus> #:prog1 + 1\n\ngoal (2 subgoals):\n 1. n = (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "with \\<open>l'' = 0\\<close> \\<open>l' = l'' + #:prog1\\<close> \\<open>l = l' + 1\\<close>"], ["proof (chain)\npicking this:\n  l'' = 0\n  l' = l'' + #:prog1\n  l = l' + 1\n  if (b) prog1\n  else prog2 \\<turnstile> (_ 0 _) -(\\<lambda>s.\n interpret b s =\n Some false)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _) \\<oplus> #:prog1 + 1", "show ?thesis"], ["proof (prove)\nusing this:\n  l'' = 0\n  l' = l'' + #:prog1\n  l = l' + 1\n  if (b) prog1\n  else prog2 \\<turnstile> (_ 0 _) -(\\<lambda>s.\n interpret b s =\n Some false)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _) \\<oplus> #:prog1 + 1\n\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "by simp blast"], ["proof (state)\nthis:\n  \\<exists>n et.\n     if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n     if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "case False"], ["proof (state)\nthis:\n  n \\<noteq> (_Entry_)\n\ngoal (1 subgoal):\n 1. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "with \\<open>prog2 \\<turnstile> n -et\\<rightarrow> (_ l'' _)\\<close>"], ["proof (chain)\npicking this:\n  prog2 \\<turnstile> n -et\\<rightarrow> (_ l'' _)\n  n \\<noteq> (_Entry_)", "have \"if (b) prog1 else prog2 \\<turnstile> n \\<oplus> (#:prog1 + 1) -et\\<rightarrow> \n                                          (_ l'' _) \\<oplus> (#:prog1 + 1)\""], ["proof (prove)\nusing this:\n  prog2 \\<turnstile> n -et\\<rightarrow> (_ l'' _)\n  n \\<noteq> (_Entry_)\n\ngoal (1 subgoal):\n 1. if (b) prog1\n    else prog2 \\<turnstile> n \\<oplus> #:prog1 +\n 1 -et\\<rightarrow> (_ l'' _) \\<oplus> #:prog1 + 1", "by(fastforce intro:WCFG_CondElse)"], ["proof (state)\nthis:\n  if (b) prog1\n  else prog2 \\<turnstile> n \\<oplus> #:prog1 +\n                                     1 -et\\<rightarrow> (_ l'' _) \\<oplus> #:prog1 +\n                                     1\n\ngoal (1 subgoal):\n 1. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "with \\<open>l = l' + 1\\<close> \\<open>l' = l'' + #:prog1\\<close>"], ["proof (chain)\npicking this:\n  l = l' + 1\n  l' = l'' + #:prog1\n  if (b) prog1\n  else prog2 \\<turnstile> n \\<oplus> #:prog1 +\n                                     1 -et\\<rightarrow> (_ l'' _) \\<oplus> #:prog1 +\n                                     1", "show ?thesis"], ["proof (prove)\nusing this:\n  l = l' + 1\n  l' = l'' + #:prog1\n  if (b) prog1\n  else prog2 \\<turnstile> n \\<oplus> #:prog1 +\n                                     1 -et\\<rightarrow> (_ l'' _) \\<oplus> #:prog1 +\n                                     1\n\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "by simp blast"], ["proof (state)\nthis:\n  \\<exists>n et.\n     if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n     if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n et.\n     if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n     if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. prog2 \\<turnstile> (_ l'' _) -et\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. prog2 \\<turnstile> (_ l'' _) -et\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "assume \"prog2 \\<turnstile> (_ l'' _) -et\\<rightarrow> n\""], ["proof (state)\nthis:\n  prog2 \\<turnstile> (_ l'' _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. prog2 \\<turnstile> (_ l'' _) -et\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "hence \"if (b) prog1 else prog2 \\<turnstile> (_ l'' _) \\<oplus> (#:prog1 + 1) -et\\<rightarrow> \n                                         n \\<oplus> (#:prog1 + 1)\""], ["proof (prove)\nusing this:\n  prog2 \\<turnstile> (_ l'' _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. if (b) prog1\n    else prog2 \\<turnstile> (_ l'' _) \\<oplus> #:prog1 +\n         1 -et\\<rightarrow> n \\<oplus> #:prog1 + 1", "by(fastforce intro:WCFG_CondElse)"], ["proof (state)\nthis:\n  if (b) prog1\n  else prog2 \\<turnstile> (_ l'' _) \\<oplus> #:prog1 +\n       1 -et\\<rightarrow> n \\<oplus> #:prog1 + 1\n\ngoal (1 subgoal):\n 1. prog2 \\<turnstile> (_ l'' _) -et\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "with \\<open>l = l' + 1\\<close> \\<open>l' = l'' + #:prog1\\<close>"], ["proof (chain)\npicking this:\n  l = l' + 1\n  l' = l'' + #:prog1\n  if (b) prog1\n  else prog2 \\<turnstile> (_ l'' _) \\<oplus> #:prog1 +\n       1 -et\\<rightarrow> n \\<oplus> #:prog1 + 1", "show ?thesis"], ["proof (prove)\nusing this:\n  l = l' + 1\n  l' = l'' + #:prog1\n  if (b) prog1\n  else prog2 \\<turnstile> (_ l'' _) \\<oplus> #:prog1 +\n       1 -et\\<rightarrow> n \\<oplus> #:prog1 + 1\n\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n", "by simp blast"], ["proof (state)\nthis:\n  \\<exists>n et.\n     if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n     if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n et.\n     if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n     if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n et.\n     if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n     if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n et.\n     if (b) prog1 else prog2 \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n     if (b) prog1 else prog2 \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. \\<And>x1 prog l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:while (x1) prog\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            while (x1) prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 prog l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:while (x1) prog\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            while (x1) prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> n", "case (While b prog')"], ["proof (state)\nthis:\n  ?l < #:prog' \\<Longrightarrow>\n  \\<exists>n et.\n     prog' \\<turnstile> n -et\\<rightarrow> (_ ?l _) \\<or>\n     prog' \\<turnstile> (_ ?l _) -et\\<rightarrow> n\n  l < #:while (b) prog'\n\ngoal (1 subgoal):\n 1. \\<And>x1 prog l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:while (x1) prog\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            while (x1) prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> n", "note IH = \\<open>\\<And>l. l < #:prog' \n             \\<Longrightarrow> \\<exists>n et. prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or> prog' \\<turnstile> (_ l _) -et\\<rightarrow> n\\<close>"], ["proof (state)\nthis:\n  ?l < #:prog' \\<Longrightarrow>\n  \\<exists>n et.\n     prog' \\<turnstile> n -et\\<rightarrow> (_ ?l _) \\<or>\n     prog' \\<turnstile> (_ ?l _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. \\<And>x1 prog l.\n       \\<lbrakk>\\<And>l.\n                   l < #:prog \\<Longrightarrow>\n                   \\<exists>n et.\n                      prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                      prog \\<turnstile> (_ l _) -et\\<rightarrow> n;\n        l < #:while (x1) prog\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n et.\n                            while (x1) prog \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                            while (x1) prog \\<turnstile> (_ l _) -et\\<rightarrow> n", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "proof(cases \"l < 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. l < 1 \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. \\<not> l < 1 \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "case True"], ["proof (state)\nthis:\n  l < 1\n\ngoal (2 subgoals):\n 1. l < 1 \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. \\<not> l < 1 \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "have \"while (b) prog' \\<turnstile> (_Entry_) -(\\<lambda>s. True)\\<^sub>\\<surd>\\<rightarrow> (_0_)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. while (b) prog' \\<turnstile> (_Entry_) -(\\<lambda>s.\n          True)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _)", "by(rule WCFG_Entry)"], ["proof (state)\nthis:\n  while (b) prog' \\<turnstile> (_Entry_) -(\\<lambda>s.\n        True)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _)\n\ngoal (2 subgoals):\n 1. l < 1 \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. \\<not> l < 1 \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "with True"], ["proof (chain)\npicking this:\n  l < 1\n  while (b) prog' \\<turnstile> (_Entry_) -(\\<lambda>s.\n        True)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _)", "show ?thesis"], ["proof (prove)\nusing this:\n  l < 1\n  while (b) prog' \\<turnstile> (_Entry_) -(\\<lambda>s.\n        True)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _)\n\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "by simp blast"], ["proof (state)\nthis:\n  \\<exists>n et.\n     while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n     while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. \\<not> l < 1 \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> l < 1 \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "case False"], ["proof (state)\nthis:\n  \\<not> l < 1\n\ngoal (1 subgoal):\n 1. \\<not> l < 1 \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "hence \"1 \\<le> l\""], ["proof (prove)\nusing this:\n  \\<not> l < 1\n\ngoal (1 subgoal):\n 1. 1 \\<le> l", "by simp"], ["proof (state)\nthis:\n  1 \\<le> l\n\ngoal (1 subgoal):\n 1. \\<not> l < 1 \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "thus ?thesis"], ["proof (prove)\nusing this:\n  1 \\<le> l\n\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "proof(cases \"l < 2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>1 \\<le> l; l < 2\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n et.\n                         while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                         while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. \\<lbrakk>1 \\<le> l; \\<not> l < 2\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n et.\n                         while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                         while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "case True"], ["proof (state)\nthis:\n  l < 2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>1 \\<le> l; l < 2\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n et.\n                         while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                         while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. \\<lbrakk>1 \\<le> l; \\<not> l < 2\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n et.\n                         while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                         while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "with \\<open>1 \\<le> l\\<close>"], ["proof (chain)\npicking this:\n  1 \\<le> l\n  l < 2", "have \"l = 1\""], ["proof (prove)\nusing this:\n  1 \\<le> l\n  l < 2\n\ngoal (1 subgoal):\n 1. l = 1", "by simp"], ["proof (state)\nthis:\n  l = 1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>1 \\<le> l; l < 2\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n et.\n                         while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                         while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. \\<lbrakk>1 \\<le> l; \\<not> l < 2\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n et.\n                         while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                         while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "have \"while (b) prog' \\<turnstile> (_0_) -(\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\\<rightarrow> (_1_)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. while (b) prog' \\<turnstile> (_ 0 _) -(\\<lambda>s.\n        interpret b s = Some false)\\<^sub>\\<surd>\\<rightarrow> (_ 1 _)", "by(rule WCFG_WhileFalse)"], ["proof (state)\nthis:\n  while (b) prog' \\<turnstile> (_ 0 _) -(\\<lambda>s.\n      interpret b s = Some false)\\<^sub>\\<surd>\\<rightarrow> (_ 1 _)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>1 \\<le> l; l < 2\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n et.\n                         while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                         while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. \\<lbrakk>1 \\<le> l; \\<not> l < 2\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n et.\n                         while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                         while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "with \\<open>l = 1\\<close>"], ["proof (chain)\npicking this:\n  l = 1\n  while (b) prog' \\<turnstile> (_ 0 _) -(\\<lambda>s.\n      interpret b s = Some false)\\<^sub>\\<surd>\\<rightarrow> (_ 1 _)", "show ?thesis"], ["proof (prove)\nusing this:\n  l = 1\n  while (b) prog' \\<turnstile> (_ 0 _) -(\\<lambda>s.\n      interpret b s = Some false)\\<^sub>\\<surd>\\<rightarrow> (_ 1 _)\n\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "by simp blast"], ["proof (state)\nthis:\n  \\<exists>n et.\n     while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n     while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>1 \\<le> l; \\<not> l < 2\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n et.\n                         while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                         while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>1 \\<le> l; \\<not> l < 2\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n et.\n                         while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                         while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "case False"], ["proof (state)\nthis:\n  \\<not> l < 2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>1 \\<le> l; \\<not> l < 2\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n et.\n                         while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                         while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "with \\<open>1 \\<le> l\\<close>"], ["proof (chain)\npicking this:\n  1 \\<le> l\n  \\<not> l < 2", "have \"2 \\<le> l\""], ["proof (prove)\nusing this:\n  1 \\<le> l\n  \\<not> l < 2\n\ngoal (1 subgoal):\n 1. 2 \\<le> l", "by simp"], ["proof (state)\nthis:\n  2 \\<le> l\n\ngoal (1 subgoal):\n 1. \\<lbrakk>1 \\<le> l; \\<not> l < 2\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n et.\n                         while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                         while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "then"], ["proof (chain)\npicking this:\n  2 \\<le> l", "obtain l' where \"l = l' + 2\" and \"l' = l - 2\""], ["proof (prove)\nusing this:\n  2 \\<le> l\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>l = l' + 2; l' = l - 2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(simp del:add_2_eq_Suc')"], ["proof (state)\nthis:\n  l = l' + 2\n  l' = l - 2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>1 \\<le> l; \\<not> l < 2\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n et.\n                         while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                         while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "from \\<open>l = l' + 2\\<close> \\<open>l < #:while (b) prog'\\<close>"], ["proof (chain)\npicking this:\n  l = l' + 2\n  l < #:while (b) prog'", "have \"l' < #:prog'\""], ["proof (prove)\nusing this:\n  l = l' + 2\n  l < #:while (b) prog'\n\ngoal (1 subgoal):\n 1. l' < #:prog'", "by simp"], ["proof (state)\nthis:\n  l' < #:prog'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>1 \\<le> l; \\<not> l < 2\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n et.\n                         while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                         while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "from IH[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>n et.\n     prog' \\<turnstile> n -et\\<rightarrow> (_ l' _) \\<or>\n     prog' \\<turnstile> (_ l' _) -et\\<rightarrow> n", "obtain n et \n        where \"prog' \\<turnstile> n -et\\<rightarrow> (_ l' _) \\<or> prog' \\<turnstile> (_ l' _) -et\\<rightarrow> n\""], ["proof (prove)\nusing this:\n  \\<exists>n et.\n     prog' \\<turnstile> n -et\\<rightarrow> (_ l' _) \\<or>\n     prog' \\<turnstile> (_ l' _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. (\\<And>n et.\n        prog' \\<turnstile> n -et\\<rightarrow> (_ l' _) \\<or>\n        prog' \\<turnstile> (_ l' _) -et\\<rightarrow> n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  prog' \\<turnstile> n -et\\<rightarrow> (_ l' _) \\<or>\n  prog' \\<turnstile> (_ l' _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>1 \\<le> l; \\<not> l < 2\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n et.\n                         while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n                         while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "thus ?thesis"], ["proof (prove)\nusing this:\n  prog' \\<turnstile> n -et\\<rightarrow> (_ l' _) \\<or>\n  prog' \\<turnstile> (_ l' _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. prog' \\<turnstile> n -et\\<rightarrow> (_ l' _) \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. prog' \\<turnstile> (_ l' _) -et\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "assume \"prog' \\<turnstile> n -et\\<rightarrow> (_ l' _)\""], ["proof (state)\nthis:\n  prog' \\<turnstile> n -et\\<rightarrow> (_ l' _)\n\ngoal (2 subgoals):\n 1. prog' \\<turnstile> n -et\\<rightarrow> (_ l' _) \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. prog' \\<turnstile> (_ l' _) -et\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "proof(cases \"n = (_Entry_)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "case True"], ["proof (state)\nthis:\n  n = (_Entry_)\n\ngoal (2 subgoals):\n 1. n = (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "with \\<open>prog' \\<turnstile> n -et\\<rightarrow> (_ l' _)\\<close>"], ["proof (chain)\npicking this:\n  prog' \\<turnstile> n -et\\<rightarrow> (_ l' _)\n  n = (_Entry_)", "have \"l' = 0\""], ["proof (prove)\nusing this:\n  prog' \\<turnstile> n -et\\<rightarrow> (_ l' _)\n  n = (_Entry_)\n\ngoal (1 subgoal):\n 1. l' = 0", "by(auto dest:WCFG_EntryD)"], ["proof (state)\nthis:\n  l' = 0\n\ngoal (2 subgoals):\n 1. n = (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "have \"while (b) prog' \\<turnstile> (_0_) -(\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\\<rightarrow> \n                                  (_0_) \\<oplus> 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. while (b) prog' \\<turnstile> (_ 0 _) -(\\<lambda>s.\n        interpret b s =\n        Some true)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _) \\<oplus> 2", "by(rule WCFG_WhileTrue)"], ["proof (state)\nthis:\n  while (b) prog' \\<turnstile> (_ 0 _) -(\\<lambda>s.\n      interpret b s =\n      Some true)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _) \\<oplus> 2\n\ngoal (2 subgoals):\n 1. n = (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "with \\<open>l' = 0\\<close> \\<open>l = l' + 2\\<close>"], ["proof (chain)\npicking this:\n  l' = 0\n  l = l' + 2\n  while (b) prog' \\<turnstile> (_ 0 _) -(\\<lambda>s.\n      interpret b s =\n      Some true)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _) \\<oplus> 2", "show ?thesis"], ["proof (prove)\nusing this:\n  l' = 0\n  l = l' + 2\n  while (b) prog' \\<turnstile> (_ 0 _) -(\\<lambda>s.\n      interpret b s =\n      Some true)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _) \\<oplus> 2\n\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "by simp blast"], ["proof (state)\nthis:\n  \\<exists>n et.\n     while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n     while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "case False"], ["proof (state)\nthis:\n  n \\<noteq> (_Entry_)\n\ngoal (1 subgoal):\n 1. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "with \\<open>prog' \\<turnstile> n -et\\<rightarrow> (_ l' _)\\<close>"], ["proof (chain)\npicking this:\n  prog' \\<turnstile> n -et\\<rightarrow> (_ l' _)\n  n \\<noteq> (_Entry_)", "have \"while (b) prog' \\<turnstile> n \\<oplus> 2 -et\\<rightarrow> (_ l' _) \\<oplus> 2\""], ["proof (prove)\nusing this:\n  prog' \\<turnstile> n -et\\<rightarrow> (_ l' _)\n  n \\<noteq> (_Entry_)\n\ngoal (1 subgoal):\n 1. while (b) prog' \\<turnstile> n \\<oplus> 2 -et\\<rightarrow> (_ l' _) \\<oplus> 2", "by(fastforce intro:WCFG_WhileBody)"], ["proof (state)\nthis:\n  while (b) prog' \\<turnstile> n \\<oplus> 2 -et\\<rightarrow> (_ l' _) \\<oplus> 2\n\ngoal (1 subgoal):\n 1. n \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "with \\<open>l = l' + 2\\<close>"], ["proof (chain)\npicking this:\n  l = l' + 2\n  while (b) prog' \\<turnstile> n \\<oplus> 2 -et\\<rightarrow> (_ l' _) \\<oplus> 2", "show ?thesis"], ["proof (prove)\nusing this:\n  l = l' + 2\n  while (b) prog' \\<turnstile> n \\<oplus> 2 -et\\<rightarrow> (_ l' _) \\<oplus> 2\n\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "by simp blast"], ["proof (state)\nthis:\n  \\<exists>n et.\n     while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n     while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n et.\n     while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n     while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. prog' \\<turnstile> (_ l' _) -et\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. prog' \\<turnstile> (_ l' _) -et\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "assume \"prog' \\<turnstile> (_ l' _) -et\\<rightarrow> n\""], ["proof (state)\nthis:\n  prog' \\<turnstile> (_ l' _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. prog' \\<turnstile> (_ l' _) -et\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "proof(cases \"n = (_Exit_)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = (_Exit_) \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. n \\<noteq> (_Exit_) \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "case True"], ["proof (state)\nthis:\n  n = (_Exit_)\n\ngoal (2 subgoals):\n 1. n = (_Exit_) \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. n \\<noteq> (_Exit_) \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "with \\<open>prog' \\<turnstile> (_ l' _) -et\\<rightarrow> n\\<close>"], ["proof (chain)\npicking this:\n  prog' \\<turnstile> (_ l' _) -et\\<rightarrow> n\n  n = (_Exit_)", "have \"while (b) prog' \\<turnstile> (_ l' _) \\<oplus> 2 -et\\<rightarrow> (_0_)\""], ["proof (prove)\nusing this:\n  prog' \\<turnstile> (_ l' _) -et\\<rightarrow> n\n  n = (_Exit_)\n\ngoal (1 subgoal):\n 1. while (b) prog' \\<turnstile> (_ l' _) \\<oplus> 2 -et\\<rightarrow> (_ 0 _)", "by(fastforce intro:WCFG_WhileBodyExit)"], ["proof (state)\nthis:\n  while (b) prog' \\<turnstile> (_ l' _) \\<oplus> 2 -et\\<rightarrow> (_ 0 _)\n\ngoal (2 subgoals):\n 1. n = (_Exit_) \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n\n 2. n \\<noteq> (_Exit_) \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "with \\<open>l = l' + 2\\<close>"], ["proof (chain)\npicking this:\n  l = l' + 2\n  while (b) prog' \\<turnstile> (_ l' _) \\<oplus> 2 -et\\<rightarrow> (_ 0 _)", "show ?thesis"], ["proof (prove)\nusing this:\n  l = l' + 2\n  while (b) prog' \\<turnstile> (_ l' _) \\<oplus> 2 -et\\<rightarrow> (_ 0 _)\n\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "by simp blast"], ["proof (state)\nthis:\n  \\<exists>n et.\n     while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n     while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. n \\<noteq> (_Exit_) \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<noteq> (_Exit_) \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "case False"], ["proof (state)\nthis:\n  n \\<noteq> (_Exit_)\n\ngoal (1 subgoal):\n 1. n \\<noteq> (_Exit_) \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "with \\<open>prog' \\<turnstile> (_ l' _) -et\\<rightarrow> n\\<close>"], ["proof (chain)\npicking this:\n  prog' \\<turnstile> (_ l' _) -et\\<rightarrow> n\n  n \\<noteq> (_Exit_)", "have \"while (b) prog' \\<turnstile> (_ l' _) \\<oplus> 2 -et\\<rightarrow> n \\<oplus> 2\""], ["proof (prove)\nusing this:\n  prog' \\<turnstile> (_ l' _) -et\\<rightarrow> n\n  n \\<noteq> (_Exit_)\n\ngoal (1 subgoal):\n 1. while (b) prog' \\<turnstile> (_ l' _) \\<oplus> 2 -et\\<rightarrow> n \\<oplus> 2", "by(fastforce intro:WCFG_WhileBody)"], ["proof (state)\nthis:\n  while (b) prog' \\<turnstile> (_ l' _) \\<oplus> 2 -et\\<rightarrow> n \\<oplus> 2\n\ngoal (1 subgoal):\n 1. n \\<noteq> (_Exit_) \\<Longrightarrow>\n    \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "with \\<open>l = l' + 2\\<close>"], ["proof (chain)\npicking this:\n  l = l' + 2\n  while (b) prog' \\<turnstile> (_ l' _) \\<oplus> 2 -et\\<rightarrow> n \\<oplus> 2", "show ?thesis"], ["proof (prove)\nusing this:\n  l = l' + 2\n  while (b) prog' \\<turnstile> (_ l' _) \\<oplus> 2 -et\\<rightarrow> n \\<oplus> 2\n\ngoal (1 subgoal):\n 1. \\<exists>n et.\n       while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n       while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n", "by simp blast"], ["proof (state)\nthis:\n  \\<exists>n et.\n     while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n     while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n et.\n     while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n     while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n et.\n     while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n     while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n et.\n     while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n     while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n et.\n     while (b) prog' \\<turnstile> n -et\\<rightarrow> (_ l _) \\<or>\n     while (b) prog' \\<turnstile> (_ l _) -et\\<rightarrow> n\n\ngoal:\nNo subgoals!", "qed"], ["", "(*<*)"], ["", "declare One_nat_def [simp del]"], ["", "(*>*)"], ["", "lemma WCFG_deterministic:\n  \"\\<lbrakk>prog \\<turnstile> n\\<^sub>1 -et\\<^sub>1\\<rightarrow> n\\<^sub>1'; prog \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'; n\\<^sub>1 = n\\<^sub>2; n\\<^sub>1' \\<noteq> n\\<^sub>2'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Q Q'. et\\<^sub>1 = (Q)\\<^sub>\\<surd> \\<and> et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and> (\\<forall>s. (Q s \\<longrightarrow> \\<not> Q' s) \\<and> (Q' s \\<longrightarrow> \\<not> Q s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prog \\<turnstile> n\\<^sub>1 -et\\<^sub>1\\<rightarrow> n\\<^sub>1';\n     prog \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n     n\\<^sub>1 = n\\<^sub>2; n\\<^sub>1' \\<noteq> n\\<^sub>2'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q Q'.\n                         et\\<^sub>1 = (Q)\\<^sub>\\<surd> \\<and>\n                         et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                         (\\<forall>s.\n                             (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                             (Q' s \\<longrightarrow> \\<not> Q s))", "proof(induct arbitrary:n\\<^sub>2 n\\<^sub>2' rule:WCFG_induct)"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>prog n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>prog \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_Entry_) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s. False)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>prog n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>prog \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_Entry_) = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s. True)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>Skip \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>\\<lambda>s. s(V := interpret e s) =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>c\\<^sub>1 n et n' c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>c\\<^sub>1 n et c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>if (b) c\\<^sub>1\n                 else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         (_ 0 _) = n\\<^sub>2;\n         (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             (\\<lambda>s.\n                                 interpret b s = Some false)\\<^sub>\\<surd> =\n                             (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))\nA total of 17 subgoals...", "case (WCFG_Entry_Exit prog)"], ["proof (state)\nthis:\n  prog \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  (_Entry_) = n\\<^sub>2\n  (_Exit_) \\<noteq> n\\<^sub>2'\n\ngoal (17 subgoals):\n 1. \\<And>prog n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>prog \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_Entry_) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s. False)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>prog n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>prog \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_Entry_) = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s. True)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>Skip \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>\\<lambda>s. s(V := interpret e s) =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>c\\<^sub>1 n et n' c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>c\\<^sub>1 n et c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>if (b) c\\<^sub>1\n                 else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         (_ 0 _) = n\\<^sub>2;\n         (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             (\\<lambda>s.\n                                 interpret b s = Some false)\\<^sub>\\<surd> =\n                             (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))\nA total of 17 subgoals...", "from \\<open>prog \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\\<close> \\<open>(_Entry_) = n\\<^sub>2\\<close> \\<open>(_Exit_) \\<noteq> n\\<^sub>2'\\<close>"], ["proof (chain)\npicking this:\n  prog \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  (_Entry_) = n\\<^sub>2\n  (_Exit_) \\<noteq> n\\<^sub>2'", "have \"et\\<^sub>2 = (\\<lambda>s. True)\\<^sub>\\<surd>\""], ["proof (prove)\nusing this:\n  prog \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  (_Entry_) = n\\<^sub>2\n  (_Exit_) \\<noteq> n\\<^sub>2'\n\ngoal (1 subgoal):\n 1. et\\<^sub>2 = (\\<lambda>s. True)\\<^sub>\\<surd>", "by(fastforce dest:WCFG_EntryD)"], ["proof (state)\nthis:\n  et\\<^sub>2 = (\\<lambda>s. True)\\<^sub>\\<surd>\n\ngoal (17 subgoals):\n 1. \\<And>prog n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>prog \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_Entry_) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s. False)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>prog n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>prog \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_Entry_) = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s. True)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>Skip \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>\\<lambda>s. s(V := interpret e s) =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>c\\<^sub>1 n et n' c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>c\\<^sub>1 n et c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>if (b) c\\<^sub>1\n                 else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         (_ 0 _) = n\\<^sub>2;\n         (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             (\\<lambda>s.\n                                 interpret b s = Some false)\\<^sub>\\<surd> =\n                             (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))\nA total of 17 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  et\\<^sub>2 = (\\<lambda>s. True)\\<^sub>\\<surd>\n\ngoal (1 subgoal):\n 1. \\<exists>Q Q'.\n       (\\<lambda>s. False)\\<^sub>\\<surd> = (Q)\\<^sub>\\<surd> \\<and>\n       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n       (\\<forall>s.\n           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n           (Q' s \\<longrightarrow> \\<not> Q s))", "by simp"], ["proof (state)\nthis:\n  \\<exists>Q Q'.\n     (\\<lambda>s. False)\\<^sub>\\<surd> = (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal (16 subgoals):\n 1. \\<And>prog n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>prog \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_Entry_) = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s. True)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>Skip \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>\\<lambda>s. s(V := interpret e s) =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>c\\<^sub>1 n et n' c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>c\\<^sub>1 n et c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>n\\<^sub>2 n\\<^sub>2'.\n            \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n             n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n            \\<Longrightarrow> \\<exists>Q Q'.\n                                 et = (Q)\\<^sub>\\<surd> \\<and>\n                                 et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                 (\\<forall>s.\n                                     (Q s \\<longrightarrow>\n\\<not> Q' s) \\<and>\n                                     (Q' s \\<longrightarrow> \\<not> Q s));\n         n \\<noteq> (_Entry_);\n         if (b) c\\<^sub>1\n         else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         n \\<oplus> 1 = n\\<^sub>2;\n         n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             et = (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>prog n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>prog \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_Entry_) = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s. True)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>Skip \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>\\<lambda>s. s(V := interpret e s) =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>c\\<^sub>1 n et n' c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>c\\<^sub>1 n et c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>n\\<^sub>2 n\\<^sub>2'.\n            \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n             n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n            \\<Longrightarrow> \\<exists>Q Q'.\n                                 et = (Q)\\<^sub>\\<surd> \\<and>\n                                 et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                 (\\<forall>s.\n                                     (Q s \\<longrightarrow>\n\\<not> Q' s) \\<and>\n                                     (Q' s \\<longrightarrow> \\<not> Q s));\n         n \\<noteq> (_Entry_);\n         if (b) c\\<^sub>1\n         else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         n \\<oplus> 1 = n\\<^sub>2;\n         n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             et = (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))\nA total of 16 subgoals...", "case (WCFG_Entry prog)"], ["proof (state)\nthis:\n  prog \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  (_Entry_) = n\\<^sub>2\n  (_ 0 _) \\<noteq> n\\<^sub>2'\n\ngoal (16 subgoals):\n 1. \\<And>prog n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>prog \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_Entry_) = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s. True)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>Skip \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>\\<lambda>s. s(V := interpret e s) =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>c\\<^sub>1 n et n' c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>c\\<^sub>1 n et c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>n\\<^sub>2 n\\<^sub>2'.\n            \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n             n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n            \\<Longrightarrow> \\<exists>Q Q'.\n                                 et = (Q)\\<^sub>\\<surd> \\<and>\n                                 et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                 (\\<forall>s.\n                                     (Q s \\<longrightarrow>\n\\<not> Q' s) \\<and>\n                                     (Q' s \\<longrightarrow> \\<not> Q s));\n         n \\<noteq> (_Entry_);\n         if (b) c\\<^sub>1\n         else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         n \\<oplus> 1 = n\\<^sub>2;\n         n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             et = (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))\nA total of 16 subgoals...", "from \\<open>prog \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\\<close> \\<open>(_Entry_) = n\\<^sub>2\\<close> \\<open>(_0_) \\<noteq> n\\<^sub>2'\\<close>"], ["proof (chain)\npicking this:\n  prog \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  (_Entry_) = n\\<^sub>2\n  (_ 0 _) \\<noteq> n\\<^sub>2'", "have \"et\\<^sub>2 = (\\<lambda>s. False)\\<^sub>\\<surd>\""], ["proof (prove)\nusing this:\n  prog \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  (_Entry_) = n\\<^sub>2\n  (_ 0 _) \\<noteq> n\\<^sub>2'\n\ngoal (1 subgoal):\n 1. et\\<^sub>2 = (\\<lambda>s. False)\\<^sub>\\<surd>", "by(fastforce dest:WCFG_EntryD)"], ["proof (state)\nthis:\n  et\\<^sub>2 = (\\<lambda>s. False)\\<^sub>\\<surd>\n\ngoal (16 subgoals):\n 1. \\<And>prog n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>prog \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_Entry_) = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s. True)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>Skip \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>\\<lambda>s. s(V := interpret e s) =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>c\\<^sub>1 n et n' c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>c\\<^sub>1 n et c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>n\\<^sub>2 n\\<^sub>2'.\n            \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n             n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n            \\<Longrightarrow> \\<exists>Q Q'.\n                                 et = (Q)\\<^sub>\\<surd> \\<and>\n                                 et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                 (\\<forall>s.\n                                     (Q s \\<longrightarrow>\n\\<not> Q' s) \\<and>\n                                     (Q' s \\<longrightarrow> \\<not> Q s));\n         n \\<noteq> (_Entry_);\n         if (b) c\\<^sub>1\n         else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         n \\<oplus> 1 = n\\<^sub>2;\n         n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             et = (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))\nA total of 16 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  et\\<^sub>2 = (\\<lambda>s. False)\\<^sub>\\<surd>\n\ngoal (1 subgoal):\n 1. \\<exists>Q Q'.\n       (\\<lambda>s. True)\\<^sub>\\<surd> = (Q)\\<^sub>\\<surd> \\<and>\n       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n       (\\<forall>s.\n           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n           (Q' s \\<longrightarrow> \\<not> Q s))", "by simp"], ["proof (state)\nthis:\n  \\<exists>Q Q'.\n     (\\<lambda>s. True)\\<^sub>\\<surd> = (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal (15 subgoals):\n 1. \\<And>n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>Skip \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>\\<lambda>s. s(V := interpret e s) =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>c\\<^sub>1 n et n' c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>c\\<^sub>1 n et c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>n\\<^sub>2 n\\<^sub>2'.\n            \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n             n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n            \\<Longrightarrow> \\<exists>Q Q'.\n                                 et = (Q)\\<^sub>\\<surd> \\<and>\n                                 et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                 (\\<forall>s.\n                                     (Q s \\<longrightarrow>\n\\<not> Q' s) \\<and>\n                                     (Q' s \\<longrightarrow> \\<not> Q s));\n         n \\<noteq> (_Entry_);\n         if (b) c\\<^sub>1\n         else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n         n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             et = (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>Skip \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>\\<lambda>s. s(V := interpret e s) =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>c\\<^sub>1 n et n' c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>c\\<^sub>1 n et c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>n\\<^sub>2 n\\<^sub>2'.\n            \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n             n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n            \\<Longrightarrow> \\<exists>Q Q'.\n                                 et = (Q)\\<^sub>\\<surd> \\<and>\n                                 et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                 (\\<forall>s.\n                                     (Q s \\<longrightarrow>\n\\<not> Q' s) \\<and>\n                                     (Q' s \\<longrightarrow> \\<not> Q s));\n         n \\<noteq> (_Entry_);\n         if (b) c\\<^sub>1\n         else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n         n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             et = (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))\nA total of 15 subgoals...", "case WCFG_Skip"], ["proof (state)\nthis:\n  Skip \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  (_ 0 _) = n\\<^sub>2\n  (_Exit_) \\<noteq> n\\<^sub>2'\n\ngoal (15 subgoals):\n 1. \\<And>n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>Skip \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>\\<lambda>s. s(V := interpret e s) =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>c\\<^sub>1 n et n' c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>c\\<^sub>1 n et c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>n\\<^sub>2 n\\<^sub>2'.\n            \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n             n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n            \\<Longrightarrow> \\<exists>Q Q'.\n                                 et = (Q)\\<^sub>\\<surd> \\<and>\n                                 et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                 (\\<forall>s.\n                                     (Q s \\<longrightarrow>\n\\<not> Q' s) \\<and>\n                                     (Q' s \\<longrightarrow> \\<not> Q s));\n         n \\<noteq> (_Entry_);\n         if (b) c\\<^sub>1\n         else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n         n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             et = (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))\nA total of 15 subgoals...", "from \\<open>Skip \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\\<close> \\<open>(_0_) = n\\<^sub>2\\<close> \\<open>(_Exit_) \\<noteq> n\\<^sub>2'\\<close>"], ["proof (chain)\npicking this:\n  Skip \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  (_ 0 _) = n\\<^sub>2\n  (_Exit_) \\<noteq> n\\<^sub>2'", "have False"], ["proof (prove)\nusing this:\n  Skip \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  (_ 0 _) = n\\<^sub>2\n  (_Exit_) \\<noteq> n\\<^sub>2'\n\ngoal (1 subgoal):\n 1. False", "by(fastforce elim:WCFG.While_CFG.cases)"], ["proof (state)\nthis:\n  False\n\ngoal (15 subgoals):\n 1. \\<And>n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>Skip \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>\\<lambda>s. s(V := interpret e s) =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>c\\<^sub>1 n et n' c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>c\\<^sub>1 n et c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>n\\<^sub>2 n\\<^sub>2'.\n            \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n             n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n            \\<Longrightarrow> \\<exists>Q Q'.\n                                 et = (Q)\\<^sub>\\<surd> \\<and>\n                                 et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                 (\\<forall>s.\n                                     (Q s \\<longrightarrow>\n\\<not> Q' s) \\<and>\n                                     (Q' s \\<longrightarrow> \\<not> Q s));\n         n \\<noteq> (_Entry_);\n         if (b) c\\<^sub>1\n         else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n         n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             et = (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))\nA total of 15 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>Q Q'.\n       \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n       (\\<forall>s.\n           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n           (Q' s \\<longrightarrow> \\<not> Q s))", "by simp"], ["proof (state)\nthis:\n  \\<exists>Q Q'.\n     \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal (14 subgoals):\n 1. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>\\<lambda>s. s(V := interpret e s) =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>c\\<^sub>1 n et n' c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>c\\<^sub>1 n et c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         (_ 0 _) = n\\<^sub>2;\n         (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             (\\<lambda>s.\n                                 interpret b s = Some true)\\<^sub>\\<surd> =\n                             (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>\\<lambda>s. s(V := interpret e s) =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>c\\<^sub>1 n et n' c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>c\\<^sub>1 n et c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         (_ 0 _) = n\\<^sub>2;\n         (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             (\\<lambda>s.\n                                 interpret b s = Some true)\\<^sub>\\<surd> =\n                             (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))\nA total of 14 subgoals...", "case (WCFG_LAss V e)"], ["proof (state)\nthis:\n  V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  (_ 0 _) = n\\<^sub>2\n  (_ 1 _) \\<noteq> n\\<^sub>2'\n\ngoal (14 subgoals):\n 1. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>\\<lambda>s. s(V := interpret e s) =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>c\\<^sub>1 n et n' c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>c\\<^sub>1 n et c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         (_ 0 _) = n\\<^sub>2;\n         (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             (\\<lambda>s.\n                                 interpret b s = Some true)\\<^sub>\\<surd> =\n                             (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))\nA total of 14 subgoals...", "from \\<open>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\\<close> \\<open>(_0_) = n\\<^sub>2\\<close> \\<open>(_1_) \\<noteq> n\\<^sub>2'\\<close>"], ["proof (chain)\npicking this:\n  V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  (_ 0 _) = n\\<^sub>2\n  (_ 1 _) \\<noteq> n\\<^sub>2'", "have False"], ["proof (prove)\nusing this:\n  V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  (_ 0 _) = n\\<^sub>2\n  (_ 1 _) \\<noteq> n\\<^sub>2'\n\ngoal (1 subgoal):\n 1. False", "by -(erule WCFG.While_CFG.cases,auto)"], ["proof (state)\nthis:\n  False\n\ngoal (14 subgoals):\n 1. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>\\<lambda>s. s(V := interpret e s) =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>c\\<^sub>1 n et n' c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>c\\<^sub>1 n et c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         (_ 0 _) = n\\<^sub>2;\n         (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             (\\<lambda>s.\n                                 interpret b s = Some true)\\<^sub>\\<surd> =\n                             (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))\nA total of 14 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>Q Q'.\n       \\<Up>\\<lambda>s. s(V := interpret e s) = (Q)\\<^sub>\\<surd> \\<and>\n       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n       (\\<forall>s.\n           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n           (Q' s \\<longrightarrow> \\<not> Q s))", "by simp"], ["proof (state)\nthis:\n  \\<exists>Q Q'.\n     \\<Up>\\<lambda>s. s(V := interpret e s) = (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal (13 subgoals):\n 1. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>c\\<^sub>1 n et n' c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             (\\<lambda>s.\n                                 interpret b s = Some false)\\<^sub>\\<surd> =\n                             (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>c\\<^sub>1 n et n' c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             (\\<lambda>s.\n                                 interpret b s = Some false)\\<^sub>\\<surd> =\n                             (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))\nA total of 13 subgoals...", "case (WCFG_LAssSkip V e)"], ["proof (state)\nthis:\n  V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  (_ 1 _) = n\\<^sub>2\n  (_Exit_) \\<noteq> n\\<^sub>2'\n\ngoal (13 subgoals):\n 1. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>c\\<^sub>1 n et n' c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             (\\<lambda>s.\n                                 interpret b s = Some false)\\<^sub>\\<surd> =\n                             (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))\nA total of 13 subgoals...", "from \\<open>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\\<close> \\<open>(_1_) = n\\<^sub>2\\<close> \\<open>(_Exit_) \\<noteq> n\\<^sub>2'\\<close>"], ["proof (chain)\npicking this:\n  V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  (_ 1 _) = n\\<^sub>2\n  (_Exit_) \\<noteq> n\\<^sub>2'", "have False"], ["proof (prove)\nusing this:\n  V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  (_ 1 _) = n\\<^sub>2\n  (_Exit_) \\<noteq> n\\<^sub>2'\n\ngoal (1 subgoal):\n 1. False", "by -(erule WCFG.While_CFG.cases,auto)"], ["proof (state)\nthis:\n  False\n\ngoal (13 subgoals):\n 1. \\<And>V e n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>V:=e \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>c\\<^sub>1 n et n' c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             (\\<lambda>s.\n                                 interpret b s = Some false)\\<^sub>\\<surd> =\n                             (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))\nA total of 13 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>Q Q'.\n       \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n       (\\<forall>s.\n           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n           (Q' s \\<longrightarrow> \\<not> Q s))", "by simp"], ["proof (state)\nthis:\n  \\<exists>Q Q'.\n     \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))\nA total of 12 subgoals...", "case (WCFG_SeqFirst c\\<^sub>1 n et n' c\\<^sub>2)"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\n  \\<lbrakk>c\\<^sub>1 \\<turnstile> ?n\\<^sub>2 -et\\<^sub>2\\<rightarrow> ?n\\<^sub>2';\n   n = ?n\\<^sub>2; n' \\<noteq> ?n\\<^sub>2'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Q Q'.\n                       et = (Q)\\<^sub>\\<surd> \\<and>\n                       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                       (\\<forall>s.\n                           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                           (Q' s \\<longrightarrow> \\<not> Q s))\n  n' \\<noteq> (_Exit_)\n  c\\<^sub>1;;\n  c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  n = n\\<^sub>2\n  n' \\<noteq> n\\<^sub>2'\n\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))\nA total of 12 subgoals...", "note IH = \\<open>\\<And>n\\<^sub>2 n\\<^sub>2'. \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'; n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Q Q'. et = (Q)\\<^sub>\\<surd> \\<and> et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and> (\\<forall>s. (Q s \\<longrightarrow> \\<not> Q' s) \\<and> (Q' s \\<longrightarrow> \\<not> Q s))\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>c\\<^sub>1 \\<turnstile> ?n\\<^sub>2 -et\\<^sub>2\\<rightarrow> ?n\\<^sub>2';\n   n = ?n\\<^sub>2; n' \\<noteq> ?n\\<^sub>2'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Q Q'.\n                       et = (Q)\\<^sub>\\<surd> \\<and>\n                       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                       (\\<forall>s.\n                           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                           (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))\nA total of 12 subgoals...", "from \\<open>c\\<^sub>1;;c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\\<close> \\<open>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\\<close> \\<open>n = n\\<^sub>2\\<close> \\<open>n' \\<noteq> n\\<^sub>2'\\<close>"], ["proof (chain)\npicking this:\n  c\\<^sub>1;;\n  c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\n  n = n\\<^sub>2\n  n' \\<noteq> n\\<^sub>2'", "have \"c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2' \\<or> (c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> (_Exit_) \\<and> n\\<^sub>2' = (_0_) \\<oplus> #:c\\<^sub>1)\""], ["proof (prove)\nusing this:\n  c\\<^sub>1;;\n  c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\n  n = n\\<^sub>2\n  n' \\<noteq> n\\<^sub>2'\n\ngoal (1 subgoal):\n 1. c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2' \\<or>\n    c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> (_Exit_) \\<and>\n    n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1", "apply hypsubst_thin"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c\\<^sub>1;;\n             c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n     c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<rightarrow> n';\n     n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n    \\<Longrightarrow> c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2' \\<or>\n                      c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> (_Exit_) \\<and>\n                      n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1", "apply(erule WCFG.While_CFG.cases)"], ["proof (prove)\ngoal (17 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<rightarrow> n';\n        n' \\<noteq> n\\<^sub>2'; c\\<^sub>1;; c\\<^sub>2 = prog;\n        n\\<^sub>2 = (_Entry_);\n        et\\<^sub>2 = (\\<lambda>s. False)\\<^sub>\\<surd>;\n        n\\<^sub>2' = (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2' \\<or>\n                         c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> (_Exit_) \\<and>\n                         n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1\n 2. \\<And>prog.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<rightarrow> n';\n        n' \\<noteq> n\\<^sub>2'; c\\<^sub>1;; c\\<^sub>2 = prog;\n        n\\<^sub>2 = (_Entry_);\n        et\\<^sub>2 = (\\<lambda>s. True)\\<^sub>\\<surd>;\n        n\\<^sub>2' = (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2' \\<or>\n                         c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> (_Exit_) \\<and>\n                         n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1\n 3. \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<rightarrow> n';\n     n' \\<noteq> n\\<^sub>2'; c\\<^sub>1;; c\\<^sub>2 = Skip;\n     n\\<^sub>2 = (_ 0 _); et\\<^sub>2 = \\<Up>id;\n     n\\<^sub>2' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2' \\<or>\n                      c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> (_Exit_) \\<and>\n                      n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1\n 4. \\<And>V e.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<rightarrow> n';\n        n' \\<noteq> n\\<^sub>2'; c\\<^sub>1;; c\\<^sub>2 = V:=e;\n        n\\<^sub>2 = (_ 0 _);\n        et\\<^sub>2 = \\<Up>\\<lambda>s. s(V := interpret e s);\n        n\\<^sub>2' = (_ 1 _)\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2' \\<or>\n                         c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> (_Exit_) \\<and>\n                         n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1\n 5. \\<And>V e.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<rightarrow> n';\n        n' \\<noteq> n\\<^sub>2'; c\\<^sub>1;; c\\<^sub>2 = V:=e;\n        n\\<^sub>2 = (_ 1 _); et\\<^sub>2 = \\<Up>id;\n        n\\<^sub>2' = (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2' \\<or>\n                         c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> (_Exit_) \\<and>\n                         n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1\n 6. \\<And>c\\<^sub>1' n eta n'a c\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<rightarrow> n';\n        n' \\<noteq> n\\<^sub>2';\n        c\\<^sub>1;; c\\<^sub>2 = c\\<^sub>1';; c\\<^sub>2'; n\\<^sub>2 = n;\n        et\\<^sub>2 = eta; n\\<^sub>2' = n'a;\n        c\\<^sub>1' \\<turnstile> n -eta\\<rightarrow> n'a;\n        n'a \\<noteq> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2' \\<or>\n                         c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> (_Exit_) \\<and>\n                         n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1\n 7. \\<And>c\\<^sub>1' n eta c\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<rightarrow> n';\n        n' \\<noteq> n\\<^sub>2';\n        c\\<^sub>1;; c\\<^sub>2 = c\\<^sub>1';; c\\<^sub>2'; n\\<^sub>2 = n;\n        et\\<^sub>2 = eta; n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1';\n        c\\<^sub>1' \\<turnstile> n -eta\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2' \\<or>\n                         c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> (_Exit_) \\<and>\n                         n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1\n 8. \\<And>c\\<^sub>2' n eta n'a c\\<^sub>1'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<rightarrow> n';\n        n' \\<noteq> n\\<^sub>2';\n        c\\<^sub>1;; c\\<^sub>2 = c\\<^sub>1';; c\\<^sub>2';\n        n\\<^sub>2 = n \\<oplus> #:c\\<^sub>1'; et\\<^sub>2 = eta;\n        n\\<^sub>2' = n'a \\<oplus> #:c\\<^sub>1';\n        c\\<^sub>2' \\<turnstile> n -eta\\<rightarrow> n'a;\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2' \\<or>\n                         c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> (_Exit_) \\<and>\n                         n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1\n 9. \\<And>b c\\<^sub>1' c\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<rightarrow> n';\n        n' \\<noteq> n\\<^sub>2';\n        c\\<^sub>1;; c\\<^sub>2 = if (b) c\\<^sub>1' else c\\<^sub>2';\n        n\\<^sub>2 = (_ 0 _);\n        et\\<^sub>2 = (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>;\n        n\\<^sub>2' = (_ 0 _) \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2' \\<or>\n                         c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> (_Exit_) \\<and>\n                         n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1\n 10. \\<And>b c\\<^sub>1' c\\<^sub>2'.\n        \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<rightarrow> n';\n         n' \\<noteq> n\\<^sub>2';\n         c\\<^sub>1;; c\\<^sub>2 = if (b) c\\<^sub>1' else c\\<^sub>2';\n         n\\<^sub>2 = (_ 0 _);\n         et\\<^sub>2 =\n         (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>;\n         n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1' + 1\\<rbrakk>\n        \\<Longrightarrow> c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2' \\<or>\n                          c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> (_Exit_) \\<and>\n                          n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1\nA total of 17 subgoals...", "apply(auto intro:WCFG.While_CFG.intros)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n n'a.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et\\<rightarrow> n';\n        n' \\<noteq> n'a \\<oplus> #:c\\<^sub>1;\n        n\\<^sub>2 = n \\<oplus> #:c\\<^sub>1;\n        n\\<^sub>2' = n'a \\<oplus> #:c\\<^sub>1;\n        c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> n'a;\n        n \\<noteq> (_Entry_);\n        \\<not> c\\<^sub>1 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et\\<^sub>2\\<rightarrow> n'a \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>1 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et\\<^sub>2\\<rightarrow> (_Exit_)\n 2. \\<And>n n'a.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et\\<rightarrow> n';\n        n' \\<noteq> n'a \\<oplus> #:c\\<^sub>1;\n        n\\<^sub>2 = n \\<oplus> #:c\\<^sub>1;\n        n\\<^sub>2' = n'a \\<oplus> #:c\\<^sub>1;\n        c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> n'a;\n        n \\<noteq> (_Entry_);\n        \\<not> c\\<^sub>1 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et\\<^sub>2\\<rightarrow> n'a \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> n'a \\<oplus> #:c\\<^sub>1 = (_ #:c\\<^sub>1 _)", "by(case_tac n,auto dest:WCFG_sourcelabel_less_num_nodes)+"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2' \\<or>\n  c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> (_Exit_) \\<and>\n  n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1\n\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n' \\<noteq> (_Exit_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))\nA total of 12 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2' \\<or>\n  c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> (_Exit_) \\<and>\n  n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<exists>Q Q'.\n       et = (Q)\\<^sub>\\<surd> \\<and>\n       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n       (\\<forall>s.\n           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n           (Q' s \\<longrightarrow> \\<not> Q s))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2' \\<Longrightarrow>\n    \\<exists>Q Q'.\n       et = (Q)\\<^sub>\\<surd> \\<and>\n       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n       (\\<forall>s.\n           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n           (Q' s \\<longrightarrow> \\<not> Q s))\n 2. c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> (_Exit_) \\<and>\n    n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<Longrightarrow>\n    \\<exists>Q Q'.\n       et = (Q)\\<^sub>\\<surd> \\<and>\n       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n       (\\<forall>s.\n           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n           (Q' s \\<longrightarrow> \\<not> Q s))", "assume \"c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\""], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n\ngoal (2 subgoals):\n 1. c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2' \\<Longrightarrow>\n    \\<exists>Q Q'.\n       et = (Q)\\<^sub>\\<surd> \\<and>\n       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n       (\\<forall>s.\n           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n           (Q' s \\<longrightarrow> \\<not> Q s))\n 2. c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> (_Exit_) \\<and>\n    n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<Longrightarrow>\n    \\<exists>Q Q'.\n       et = (Q)\\<^sub>\\<surd> \\<and>\n       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n       (\\<forall>s.\n           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n           (Q' s \\<longrightarrow> \\<not> Q s))", "from IH[OF this \\<open>n = n\\<^sub>2\\<close> \\<open>n' \\<noteq> n\\<^sub>2'\\<close>]"], ["proof (chain)\npicking this:\n  \\<exists>Q Q'.\n     et = (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))", "show ?case"], ["proof (prove)\nusing this:\n  \\<exists>Q Q'.\n     et = (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal (1 subgoal):\n 1. \\<exists>Q Q'.\n       et = (Q)\\<^sub>\\<surd> \\<and>\n       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n       (\\<forall>s.\n           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n           (Q' s \\<longrightarrow> \\<not> Q s))", "."], ["proof (state)\nthis:\n  \\<exists>Q Q'.\n     et = (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal (1 subgoal):\n 1. c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> (_Exit_) \\<and>\n    n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<Longrightarrow>\n    \\<exists>Q Q'.\n       et = (Q)\\<^sub>\\<surd> \\<and>\n       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n       (\\<forall>s.\n           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n           (Q' s \\<longrightarrow> \\<not> Q s))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> (_Exit_) \\<and>\n    n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<Longrightarrow>\n    \\<exists>Q Q'.\n       et = (Q)\\<^sub>\\<surd> \\<and>\n       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n       (\\<forall>s.\n           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n           (Q' s \\<longrightarrow> \\<not> Q s))", "assume \"c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> (_Exit_) \\<and> n\\<^sub>2' = (_0_) \\<oplus> #:c\\<^sub>1\""], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> (_Exit_) \\<and>\n  n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1\n\ngoal (1 subgoal):\n 1. c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> (_Exit_) \\<and>\n    n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<Longrightarrow>\n    \\<exists>Q Q'.\n       et = (Q)\\<^sub>\\<surd> \\<and>\n       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n       (\\<forall>s.\n           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n           (Q' s \\<longrightarrow> \\<not> Q s))", "hence edge:\"c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> (_Exit_)\" and n2':\"n\\<^sub>2' = (_0_) \\<oplus> #:c\\<^sub>1\""], ["proof (prove)\nusing this:\n  c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> (_Exit_) \\<and>\n  n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1\n\ngoal (1 subgoal):\n 1. c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> (_Exit_) &&&\n    n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1", "by simp_all"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> (_Exit_)\n  n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1\n\ngoal (1 subgoal):\n 1. c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> (_Exit_) \\<and>\n    n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<Longrightarrow>\n    \\<exists>Q Q'.\n       et = (Q)\\<^sub>\\<surd> \\<and>\n       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n       (\\<forall>s.\n           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n           (Q' s \\<longrightarrow> \\<not> Q s))", "from IH[OF edge \\<open>n = n\\<^sub>2\\<close> \\<open>n' \\<noteq> (_Exit_)\\<close>]"], ["proof (chain)\npicking this:\n  \\<exists>Q Q'.\n     et = (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))", "show ?case"], ["proof (prove)\nusing this:\n  \\<exists>Q Q'.\n     et = (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal (1 subgoal):\n 1. \\<exists>Q Q'.\n       et = (Q)\\<^sub>\\<surd> \\<and>\n       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n       (\\<forall>s.\n           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n           (Q' s \\<longrightarrow> \\<not> Q s))", "."], ["proof (state)\nthis:\n  \\<exists>Q Q'.\n     et = (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>Q Q'.\n     et = (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal (11 subgoals):\n 1. \\<And>c\\<^sub>1 n et c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>n\\<^sub>2 n\\<^sub>2'.\n            \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n             n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n            \\<Longrightarrow> \\<exists>Q Q'.\n                                 et = (Q)\\<^sub>\\<surd> \\<and>\n                                 et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                 (\\<forall>s.\n                                     (Q s \\<longrightarrow>\n\\<not> Q' s) \\<and>\n                                     (Q' s \\<longrightarrow> \\<not> Q s));\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         n \\<oplus> 2 = n\\<^sub>2;\n         n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             et = (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>c\\<^sub>1 n et c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>n\\<^sub>2 n\\<^sub>2'.\n            \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n             n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n            \\<Longrightarrow> \\<exists>Q Q'.\n                                 et = (Q)\\<^sub>\\<surd> \\<and>\n                                 et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                 (\\<forall>s.\n                                     (Q s \\<longrightarrow>\n\\<not> Q' s) \\<and>\n                                     (Q' s \\<longrightarrow> \\<not> Q s));\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         n \\<oplus> 2 = n\\<^sub>2;\n         n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             et = (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))\nA total of 11 subgoals...", "case (WCFG_SeqConnect c\\<^sub>1 n et c\\<^sub>2)"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_)\n  \\<lbrakk>c\\<^sub>1 \\<turnstile> ?n\\<^sub>2 -et\\<^sub>2\\<rightarrow> ?n\\<^sub>2';\n   n = ?n\\<^sub>2; (_Exit_) \\<noteq> ?n\\<^sub>2'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Q Q'.\n                       et = (Q)\\<^sub>\\<surd> \\<and>\n                       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                       (\\<forall>s.\n                           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                           (Q' s \\<longrightarrow> \\<not> Q s))\n  n \\<noteq> (_Entry_)\n  c\\<^sub>1;;\n  c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  n = n\\<^sub>2\n  (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\n\ngoal (11 subgoals):\n 1. \\<And>c\\<^sub>1 n et c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>n\\<^sub>2 n\\<^sub>2'.\n            \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n             n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n            \\<Longrightarrow> \\<exists>Q Q'.\n                                 et = (Q)\\<^sub>\\<surd> \\<and>\n                                 et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                 (\\<forall>s.\n                                     (Q s \\<longrightarrow>\n\\<not> Q' s) \\<and>\n                                     (Q' s \\<longrightarrow> \\<not> Q s));\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         n \\<oplus> 2 = n\\<^sub>2;\n         n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             et = (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))\nA total of 11 subgoals...", "note IH = \\<open>\\<And>n\\<^sub>2 n\\<^sub>2'. \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'; n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Q Q'. et = (Q)\\<^sub>\\<surd> \\<and> et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and> (\\<forall>s. (Q s \\<longrightarrow> \\<not> Q' s) \\<and> (Q' s \\<longrightarrow> \\<not> Q s))\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>c\\<^sub>1 \\<turnstile> ?n\\<^sub>2 -et\\<^sub>2\\<rightarrow> ?n\\<^sub>2';\n   n = ?n\\<^sub>2; (_Exit_) \\<noteq> ?n\\<^sub>2'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Q Q'.\n                       et = (Q)\\<^sub>\\<surd> \\<and>\n                       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                       (\\<forall>s.\n                           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                           (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal (11 subgoals):\n 1. \\<And>c\\<^sub>1 n et c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>n\\<^sub>2 n\\<^sub>2'.\n            \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n             n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n            \\<Longrightarrow> \\<exists>Q Q'.\n                                 et = (Q)\\<^sub>\\<surd> \\<and>\n                                 et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                 (\\<forall>s.\n                                     (Q s \\<longrightarrow>\n\\<not> Q' s) \\<and>\n                                     (Q' s \\<longrightarrow> \\<not> Q s));\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         n \\<oplus> 2 = n\\<^sub>2;\n         n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             et = (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))\nA total of 11 subgoals...", "from \\<open>c\\<^sub>1;;c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\\<close> \\<open>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_)\\<close> \\<open>n = n\\<^sub>2\\<close> \\<open>n \\<noteq> (_Entry_)\\<close>\n    \\<open>(_0_) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<close>"], ["proof (chain)\npicking this:\n  c\\<^sub>1;;\n  c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_)\n  n = n\\<^sub>2\n  n \\<noteq> (_Entry_)\n  (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'", "have \"c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2' \\<and> (_Exit_) \\<noteq> n\\<^sub>2'\""], ["proof (prove)\nusing this:\n  c\\<^sub>1;;\n  c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_)\n  n = n\\<^sub>2\n  n \\<noteq> (_Entry_)\n  (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\n\ngoal (1 subgoal):\n 1. c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2' \\<and>\n    (_Exit_) \\<noteq> n\\<^sub>2'", "apply hypsubst_thin"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c\\<^sub>1;;\n             c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n     c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<rightarrow> (_Exit_);\n     n\\<^sub>2 \\<noteq> (_Entry_);\n     (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n    \\<Longrightarrow> c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2' \\<and>\n                      (_Exit_) \\<noteq> n\\<^sub>2'", "apply(erule WCFG.While_CFG.cases)"], ["proof (prove)\ngoal (17 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<rightarrow> (_Exit_);\n        n\\<^sub>2 \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2';\n        c\\<^sub>1;; c\\<^sub>2 = prog; n\\<^sub>2 = (_Entry_);\n        et\\<^sub>2 = (\\<lambda>s. False)\\<^sub>\\<surd>;\n        n\\<^sub>2' = (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2' \\<and>\n                         (_Exit_) \\<noteq> n\\<^sub>2'\n 2. \\<And>prog.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<rightarrow> (_Exit_);\n        n\\<^sub>2 \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2';\n        c\\<^sub>1;; c\\<^sub>2 = prog; n\\<^sub>2 = (_Entry_);\n        et\\<^sub>2 = (\\<lambda>s. True)\\<^sub>\\<surd>;\n        n\\<^sub>2' = (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2' \\<and>\n                         (_Exit_) \\<noteq> n\\<^sub>2'\n 3. \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<rightarrow> (_Exit_);\n     n\\<^sub>2 \\<noteq> (_Entry_);\n     (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2';\n     c\\<^sub>1;; c\\<^sub>2 = Skip; n\\<^sub>2 = (_ 0 _);\n     et\\<^sub>2 = \\<Up>id; n\\<^sub>2' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2' \\<and>\n                      (_Exit_) \\<noteq> n\\<^sub>2'\n 4. \\<And>V e.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<rightarrow> (_Exit_);\n        n\\<^sub>2 \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2';\n        c\\<^sub>1;; c\\<^sub>2 = V:=e; n\\<^sub>2 = (_ 0 _);\n        et\\<^sub>2 = \\<Up>\\<lambda>s. s(V := interpret e s);\n        n\\<^sub>2' = (_ 1 _)\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2' \\<and>\n                         (_Exit_) \\<noteq> n\\<^sub>2'\n 5. \\<And>V e.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<rightarrow> (_Exit_);\n        n\\<^sub>2 \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2';\n        c\\<^sub>1;; c\\<^sub>2 = V:=e; n\\<^sub>2 = (_ 1 _);\n        et\\<^sub>2 = \\<Up>id; n\\<^sub>2' = (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2' \\<and>\n                         (_Exit_) \\<noteq> n\\<^sub>2'\n 6. \\<And>c\\<^sub>1' n eta n' c\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<rightarrow> (_Exit_);\n        n\\<^sub>2 \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2';\n        c\\<^sub>1;; c\\<^sub>2 = c\\<^sub>1';; c\\<^sub>2'; n\\<^sub>2 = n;\n        et\\<^sub>2 = eta; n\\<^sub>2' = n';\n        c\\<^sub>1' \\<turnstile> n -eta\\<rightarrow> n';\n        n' \\<noteq> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2' \\<and>\n                         (_Exit_) \\<noteq> n\\<^sub>2'\n 7. \\<And>c\\<^sub>1' n eta c\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<rightarrow> (_Exit_);\n        n\\<^sub>2 \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2';\n        c\\<^sub>1;; c\\<^sub>2 = c\\<^sub>1';; c\\<^sub>2'; n\\<^sub>2 = n;\n        et\\<^sub>2 = eta; n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1';\n        c\\<^sub>1' \\<turnstile> n -eta\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2' \\<and>\n                         (_Exit_) \\<noteq> n\\<^sub>2'\n 8. \\<And>c\\<^sub>2' n eta n' c\\<^sub>1'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<rightarrow> (_Exit_);\n        n\\<^sub>2 \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2';\n        c\\<^sub>1;; c\\<^sub>2 = c\\<^sub>1';; c\\<^sub>2';\n        n\\<^sub>2 = n \\<oplus> #:c\\<^sub>1'; et\\<^sub>2 = eta;\n        n\\<^sub>2' = n' \\<oplus> #:c\\<^sub>1';\n        c\\<^sub>2' \\<turnstile> n -eta\\<rightarrow> n';\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2' \\<and>\n                         (_Exit_) \\<noteq> n\\<^sub>2'\n 9. \\<And>b c\\<^sub>1' c\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<rightarrow> (_Exit_);\n        n\\<^sub>2 \\<noteq> (_Entry_);\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2';\n        c\\<^sub>1;; c\\<^sub>2 = if (b) c\\<^sub>1' else c\\<^sub>2';\n        n\\<^sub>2 = (_ 0 _);\n        et\\<^sub>2 = (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>;\n        n\\<^sub>2' = (_ 0 _) \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2' \\<and>\n                         (_Exit_) \\<noteq> n\\<^sub>2'\n 10. \\<And>b c\\<^sub>1' c\\<^sub>2'.\n        \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<rightarrow> (_Exit_);\n         n\\<^sub>2 \\<noteq> (_Entry_);\n         (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2';\n         c\\<^sub>1;; c\\<^sub>2 = if (b) c\\<^sub>1' else c\\<^sub>2';\n         n\\<^sub>2 = (_ 0 _);\n         et\\<^sub>2 =\n         (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>;\n         n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1' + 1\\<rbrakk>\n        \\<Longrightarrow> c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2' \\<and>\n                          (_Exit_) \\<noteq> n\\<^sub>2'\nA total of 17 subgoals...", "apply(auto intro:WCFG.While_CFG.intros)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n n'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et\\<rightarrow> (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 \\<noteq> (_Entry_);\n        (_ #:c\\<^sub>1 _) \\<noteq> n' \\<oplus> #:c\\<^sub>1;\n        n\\<^sub>2 = n \\<oplus> #:c\\<^sub>1;\n        n\\<^sub>2' = n' \\<oplus> #:c\\<^sub>1;\n        c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> n';\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>1 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et\\<^sub>2\\<rightarrow> n' \\<oplus> #:c\\<^sub>1\n 2. \\<And>n n'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et\\<rightarrow> (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 \\<noteq> (_Entry_);\n        n\\<^sub>2 = n \\<oplus> #:c\\<^sub>1; n\\<^sub>2' = (_Exit_);\n        c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> n';\n        n \\<noteq> (_Entry_); (_Exit_) = n' \\<oplus> #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> False", "by(case_tac n,auto dest:WCFG_sourcelabel_less_num_nodes)+"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2' \\<and>\n  (_Exit_) \\<noteq> n\\<^sub>2'\n\ngoal (11 subgoals):\n 1. \\<And>c\\<^sub>1 n et c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>n\\<^sub>2 n\\<^sub>2'.\n            \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n             n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n            \\<Longrightarrow> \\<exists>Q Q'.\n                                 et = (Q)\\<^sub>\\<surd> \\<and>\n                                 et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                 (\\<forall>s.\n                                     (Q s \\<longrightarrow>\n\\<not> Q' s) \\<and>\n                                     (Q' s \\<longrightarrow> \\<not> Q s));\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         n \\<oplus> 2 = n\\<^sub>2;\n         n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             et = (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))\nA total of 11 subgoals...", "from IH[OF this[THEN conjunct1] \\<open>n = n\\<^sub>2\\<close> this[THEN conjunct2]]"], ["proof (chain)\npicking this:\n  \\<exists>Q Q'.\n     et = (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))", "show ?case"], ["proof (prove)\nusing this:\n  \\<exists>Q Q'.\n     et = (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal (1 subgoal):\n 1. \\<exists>Q Q'.\n       et = (Q)\\<^sub>\\<surd> \\<and>\n       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n       (\\<forall>s.\n           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n           (Q' s \\<longrightarrow> \\<not> Q s))", "."], ["proof (state)\nthis:\n  \\<exists>Q Q'.\n     et = (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal (10 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         \\<And>n\\<^sub>2 n\\<^sub>2'.\n            \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n             n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n            \\<Longrightarrow> \\<exists>Q Q'.\n                                 et = (Q)\\<^sub>\\<surd> \\<and>\n                                 et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                 (\\<forall>s.\n                                     (Q s \\<longrightarrow>\n\\<not> Q' s) \\<and>\n                                     (Q' s \\<longrightarrow> \\<not> Q s));\n         n \\<noteq> (_Entry_);\n         while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             et = (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         \\<And>n\\<^sub>2 n\\<^sub>2'.\n            \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n             n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n            \\<Longrightarrow> \\<exists>Q Q'.\n                                 et = (Q)\\<^sub>\\<surd> \\<and>\n                                 et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                 (\\<forall>s.\n                                     (Q s \\<longrightarrow>\n\\<not> Q' s) \\<and>\n                                     (Q' s \\<longrightarrow> \\<not> Q s));\n         n \\<noteq> (_Entry_);\n         while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             et = (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))", "case (WCFG_SeqSecond c\\<^sub>2 n et n' c\\<^sub>1)"], ["proof (state)\nthis:\n  c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\n  \\<lbrakk>c\\<^sub>2 \\<turnstile> ?n\\<^sub>2 -et\\<^sub>2\\<rightarrow> ?n\\<^sub>2';\n   n = ?n\\<^sub>2; n' \\<noteq> ?n\\<^sub>2'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Q Q'.\n                       et = (Q)\\<^sub>\\<surd> \\<and>\n                       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                       (\\<forall>s.\n                           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                           (Q' s \\<longrightarrow> \\<not> Q s))\n  n \\<noteq> (_Entry_)\n  c\\<^sub>1;;\n  c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2\n  n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\n\ngoal (10 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         \\<And>n\\<^sub>2 n\\<^sub>2'.\n            \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n             n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n            \\<Longrightarrow> \\<exists>Q Q'.\n                                 et = (Q)\\<^sub>\\<surd> \\<and>\n                                 et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                 (\\<forall>s.\n                                     (Q s \\<longrightarrow>\n\\<not> Q' s) \\<and>\n                                     (Q' s \\<longrightarrow> \\<not> Q s));\n         n \\<noteq> (_Entry_);\n         while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             et = (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))", "note IH = \\<open>\\<And>n\\<^sub>2 n\\<^sub>2'. \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'; n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Q Q'. et = (Q)\\<^sub>\\<surd> \\<and> et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and> (\\<forall>s. (Q s \\<longrightarrow> \\<not> Q' s) \\<and> (Q' s \\<longrightarrow> \\<not> Q s))\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>c\\<^sub>2 \\<turnstile> ?n\\<^sub>2 -et\\<^sub>2\\<rightarrow> ?n\\<^sub>2';\n   n = ?n\\<^sub>2; n' \\<noteq> ?n\\<^sub>2'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Q Q'.\n                       et = (Q)\\<^sub>\\<surd> \\<and>\n                       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                       (\\<forall>s.\n                           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                           (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal (10 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         \\<And>n\\<^sub>2 n\\<^sub>2'.\n            \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n             n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n            \\<Longrightarrow> \\<exists>Q Q'.\n                                 et = (Q)\\<^sub>\\<surd> \\<and>\n                                 et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                 (\\<forall>s.\n                                     (Q s \\<longrightarrow>\n\\<not> Q' s) \\<and>\n                                     (Q' s \\<longrightarrow> \\<not> Q s));\n         n \\<noteq> (_Entry_);\n         while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             et = (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))", "from \\<open>c\\<^sub>1;;c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\\<close> \\<open>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\\<close> \\<open>n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2\\<close>\n    \\<open>n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<close> \\<open>n \\<noteq> (_Entry_)\\<close>"], ["proof (chain)\npicking this:\n  c\\<^sub>1;;\n  c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\n  n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2\n  n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\n  n \\<noteq> (_Entry_)", "obtain nx where \"c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and> nx \\<oplus> #:c\\<^sub>1 = n\\<^sub>2'\""], ["proof (prove)\nusing this:\n  c\\<^sub>1;;\n  c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\n  n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2\n  n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\n  n \\<noteq> (_Entry_)\n\ngoal (1 subgoal):\n 1. (\\<And>nx.\n        c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n        nx \\<oplus> #:c\\<^sub>1 = n\\<^sub>2' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>nx.\n                c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                nx \\<oplus> #:c\\<^sub>1 = n\\<^sub>2' \\<Longrightarrow>\n                thesis;\n     c\\<^sub>1;;\n     c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n     c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n     n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n     n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2';\n     n \\<noteq> (_Entry_)\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply(erule WCFG.While_CFG.cases)"], ["proof (prove)\ngoal (17 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   nx \\<oplus> #:c\\<^sub>1 = n\\<^sub>2' \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'; n \\<noteq> (_Entry_);\n        c\\<^sub>1;; c\\<^sub>2 = prog; n\\<^sub>2 = (_Entry_);\n        et\\<^sub>2 = (\\<lambda>s. False)\\<^sub>\\<surd>;\n        n\\<^sub>2' = (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>prog.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   nx \\<oplus> #:c\\<^sub>1 = n\\<^sub>2' \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'; n \\<noteq> (_Entry_);\n        c\\<^sub>1;; c\\<^sub>2 = prog; n\\<^sub>2 = (_Entry_);\n        et\\<^sub>2 = (\\<lambda>s. True)\\<^sub>\\<surd>;\n        n\\<^sub>2' = (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<lbrakk>\\<And>nx.\n                c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                nx \\<oplus> #:c\\<^sub>1 = n\\<^sub>2' \\<Longrightarrow>\n                thesis;\n     c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n     n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n     n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'; n \\<noteq> (_Entry_);\n     c\\<^sub>1;; c\\<^sub>2 = Skip; n\\<^sub>2 = (_ 0 _);\n     et\\<^sub>2 = \\<Up>id; n\\<^sub>2' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> thesis\n 4. \\<And>V e.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   nx \\<oplus> #:c\\<^sub>1 = n\\<^sub>2' \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'; n \\<noteq> (_Entry_);\n        c\\<^sub>1;; c\\<^sub>2 = V:=e; n\\<^sub>2 = (_ 0 _);\n        et\\<^sub>2 = \\<Up>\\<lambda>s. s(V := interpret e s);\n        n\\<^sub>2' = (_ 1 _)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>V e.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   nx \\<oplus> #:c\\<^sub>1 = n\\<^sub>2' \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'; n \\<noteq> (_Entry_);\n        c\\<^sub>1;; c\\<^sub>2 = V:=e; n\\<^sub>2 = (_ 1 _);\n        et\\<^sub>2 = \\<Up>id; n\\<^sub>2' = (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>c\\<^sub>1' na eta n'a c\\<^sub>2'.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   nx \\<oplus> #:c\\<^sub>1 = n\\<^sub>2' \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'; n \\<noteq> (_Entry_);\n        c\\<^sub>1;; c\\<^sub>2 = c\\<^sub>1';; c\\<^sub>2'; n\\<^sub>2 = na;\n        et\\<^sub>2 = eta; n\\<^sub>2' = n'a;\n        c\\<^sub>1' \\<turnstile> na -eta\\<rightarrow> n'a;\n        n'a \\<noteq> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 7. \\<And>c\\<^sub>1' na eta c\\<^sub>2'.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   nx \\<oplus> #:c\\<^sub>1 = n\\<^sub>2' \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'; n \\<noteq> (_Entry_);\n        c\\<^sub>1;; c\\<^sub>2 = c\\<^sub>1';; c\\<^sub>2'; n\\<^sub>2 = na;\n        et\\<^sub>2 = eta; n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1';\n        c\\<^sub>1' \\<turnstile> na -eta\\<rightarrow> (_Exit_);\n        na \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 8. \\<And>c\\<^sub>2' na eta n'a c\\<^sub>1'.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   nx \\<oplus> #:c\\<^sub>1 = n\\<^sub>2' \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'; n \\<noteq> (_Entry_);\n        c\\<^sub>1;; c\\<^sub>2 = c\\<^sub>1';; c\\<^sub>2';\n        n\\<^sub>2 = na \\<oplus> #:c\\<^sub>1'; et\\<^sub>2 = eta;\n        n\\<^sub>2' = n'a \\<oplus> #:c\\<^sub>1';\n        c\\<^sub>2' \\<turnstile> na -eta\\<rightarrow> n'a;\n        na \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 9. \\<And>b c\\<^sub>1' c\\<^sub>2'.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   nx \\<oplus> #:c\\<^sub>1 = n\\<^sub>2' \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'; n \\<noteq> (_Entry_);\n        c\\<^sub>1;; c\\<^sub>2 = if (b) c\\<^sub>1' else c\\<^sub>2';\n        n\\<^sub>2 = (_ 0 _);\n        et\\<^sub>2 = (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>;\n        n\\<^sub>2' = (_ 0 _) \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> thesis\n 10. \\<And>b c\\<^sub>1' c\\<^sub>2'.\n        \\<lbrakk>\\<And>nx.\n                    c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                    nx \\<oplus> #:c\\<^sub>1 = n\\<^sub>2' \\<Longrightarrow>\n                    thesis;\n         c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n         n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n         n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'; n \\<noteq> (_Entry_);\n         c\\<^sub>1;; c\\<^sub>2 = if (b) c\\<^sub>1' else c\\<^sub>2';\n         n\\<^sub>2 = (_ 0 _);\n         et\\<^sub>2 =\n         (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>;\n         n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1' + 1\\<rbrakk>\n        \\<Longrightarrow> thesis\nA total of 17 subgoals...", "apply(auto intro:WCFG.While_CFG.intros)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<And>nx.\n                c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                nx \\<oplus> #:c\\<^sub>1 = n\\<^sub>2' \\<Longrightarrow>\n                thesis;\n     c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n     n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'; n \\<noteq> (_Entry_);\n     n\\<^sub>2 = n \\<oplus> #:c\\<^sub>1;\n     c\\<^sub>1 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n     n\\<^sub>2' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>nx.\n                c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                nx \\<oplus> #:c\\<^sub>1 =\n                (_ #:c\\<^sub>1 _) \\<Longrightarrow>\n                thesis;\n     c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n     n' \\<oplus> #:c\\<^sub>1 \\<noteq> (_ #:c\\<^sub>1 _);\n     n \\<noteq> (_Entry_); n\\<^sub>2 = n \\<oplus> #:c\\<^sub>1;\n     n\\<^sub>2' = (_ #:c\\<^sub>1 _);\n     c\\<^sub>1 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et\\<^sub>2\\<rightarrow> (_Exit_);\n     n \\<oplus> #:c\\<^sub>1 \\<noteq> (_Entry_)\\<rbrakk>\n    \\<Longrightarrow> thesis\n 3. \\<And>na n'a.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   nx \\<oplus> #:c\\<^sub>1 =\n                   n'a \\<oplus> #:c\\<^sub>1 \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        n \\<oplus> #:c\\<^sub>1 = na \\<oplus> #:c\\<^sub>1;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n'a \\<oplus> #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n\\<^sub>2 = na \\<oplus> #:c\\<^sub>1;\n        n\\<^sub>2' = n'a \\<oplus> #:c\\<^sub>1;\n        c\\<^sub>2 \\<turnstile> na -et\\<^sub>2\\<rightarrow> n'a;\n        na \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply(cases n,auto dest:WCFG_sourcelabel_less_num_nodes)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>nx.\n                c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                nx \\<oplus> #:c\\<^sub>1 =\n                (_ #:c\\<^sub>1 _) \\<Longrightarrow>\n                thesis;\n     c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n     n' \\<oplus> #:c\\<^sub>1 \\<noteq> (_ #:c\\<^sub>1 _);\n     n \\<noteq> (_Entry_); n\\<^sub>2 = n \\<oplus> #:c\\<^sub>1;\n     n\\<^sub>2' = (_ #:c\\<^sub>1 _);\n     c\\<^sub>1 \\<turnstile> n \\<oplus> #:c\\<^sub>1 -et\\<^sub>2\\<rightarrow> (_Exit_);\n     n \\<oplus> #:c\\<^sub>1 \\<noteq> (_Entry_)\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>na n'a.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   nx \\<oplus> #:c\\<^sub>1 =\n                   n'a \\<oplus> #:c\\<^sub>1 \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        n \\<oplus> #:c\\<^sub>1 = na \\<oplus> #:c\\<^sub>1;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n'a \\<oplus> #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n\\<^sub>2 = na \\<oplus> #:c\\<^sub>1;\n        n\\<^sub>2' = n'a \\<oplus> #:c\\<^sub>1;\n        c\\<^sub>2 \\<turnstile> na -et\\<^sub>2\\<rightarrow> n'a;\n        na \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply(cases n,auto dest:WCFG_sourcelabel_less_num_nodes)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na n'a.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   nx \\<oplus> #:c\\<^sub>1 =\n                   n'a \\<oplus> #:c\\<^sub>1 \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        n \\<oplus> #:c\\<^sub>1 = na \\<oplus> #:c\\<^sub>1;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n'a \\<oplus> #:c\\<^sub>1;\n        n \\<noteq> (_Entry_); n\\<^sub>2 = na \\<oplus> #:c\\<^sub>1;\n        n\\<^sub>2' = n'a \\<oplus> #:c\\<^sub>1;\n        c\\<^sub>2 \\<turnstile> na -et\\<^sub>2\\<rightarrow> n'a;\n        na \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> thesis", "by(fastforce dest:label_incr_inj)"], ["proof (state)\nthis:\n  c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n  nx \\<oplus> #:c\\<^sub>1 = n\\<^sub>2'\n\ngoal (10 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         \\<And>n\\<^sub>2 n\\<^sub>2'.\n            \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n             n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n            \\<Longrightarrow> \\<exists>Q Q'.\n                                 et = (Q)\\<^sub>\\<surd> \\<and>\n                                 et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                 (\\<forall>s.\n                                     (Q s \\<longrightarrow>\n\\<not> Q' s) \\<and>\n                                     (Q' s \\<longrightarrow> \\<not> Q s));\n         n \\<noteq> (_Entry_);\n         while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             et = (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))", "with \\<open>n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<close>"], ["proof (chain)\npicking this:\n  n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\n  c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n  nx \\<oplus> #:c\\<^sub>1 = n\\<^sub>2'", "have edge:\"c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx\" and neq:\"n' \\<noteq> nx\""], ["proof (prove)\nusing this:\n  n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\n  c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n  nx \\<oplus> #:c\\<^sub>1 = n\\<^sub>2'\n\ngoal (1 subgoal):\n 1. c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx &&& n' \\<noteq> nx", "by auto"], ["proof (state)\nthis:\n  c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx\n  n' \\<noteq> nx\n\ngoal (10 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        c\\<^sub>1;;\n        c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 10. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         \\<And>n\\<^sub>2 n\\<^sub>2'.\n            \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n             n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n            \\<Longrightarrow> \\<exists>Q Q'.\n                                 et = (Q)\\<^sub>\\<surd> \\<and>\n                                 et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                 (\\<forall>s.\n                                     (Q s \\<longrightarrow>\n\\<not> Q' s) \\<and>\n                                     (Q' s \\<longrightarrow> \\<not> Q s));\n         n \\<noteq> (_Entry_);\n         while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n         n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Q Q'.\n                             et = (Q)\\<^sub>\\<surd> \\<and>\n                             et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                             (\\<forall>s.\n                                 (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                 (Q' s \\<longrightarrow> \\<not> Q s))", "from IH[OF edge _ neq]"], ["proof (chain)\npicking this:\n  n = n \\<Longrightarrow>\n  \\<exists>Q Q'.\n     et = (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))", "show ?case"], ["proof (prove)\nusing this:\n  n = n \\<Longrightarrow>\n  \\<exists>Q Q'.\n     et = (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal (1 subgoal):\n 1. \\<exists>Q Q'.\n       et = (Q)\\<^sub>\\<surd> \\<and>\n       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n       (\\<forall>s.\n           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n           (Q' s \\<longrightarrow> \\<not> Q s))", "by simp"], ["proof (state)\nthis:\n  \\<exists>Q Q'.\n     et = (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal (9 subgoals):\n 1. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "case (WCFG_CondTrue b c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  (_ 0 _) = n\\<^sub>2\n  (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\n\ngoal (9 subgoals):\n 1. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 9. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "from \\<open>if (b) c\\<^sub>1 else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\\<close> \\<open>(_0_) = n\\<^sub>2\\<close> \\<open>(_0_) \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<close>"], ["proof (chain)\npicking this:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  (_ 0 _) = n\\<^sub>2\n  (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'", "show ?case"], ["proof (prove)\nusing this:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  (_ 0 _) = n\\<^sub>2\n  (_ 0 _) \\<oplus> 1 \\<noteq> n\\<^sub>2'\n\ngoal (1 subgoal):\n 1. \\<exists>Q Q'.\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> =\n       (Q)\\<^sub>\\<surd> \\<and>\n       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n       (\\<forall>s.\n           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n           (Q' s \\<longrightarrow> \\<not> Q s))", "by -(erule WCFG.While_CFG.cases,auto)"], ["proof (state)\nthis:\n  \\<exists>Q Q'.\n     (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> =\n     (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal (8 subgoals):\n 1. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "case (WCFG_CondFalse b c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  (_ 0 _) = n\\<^sub>2\n  (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\n\ngoal (8 subgoals):\n 1. \\<And>b c\\<^sub>1 c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>if (b) c\\<^sub>1\n                else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2;\n        (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 8. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "from \\<open>if (b) c\\<^sub>1 else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\\<close> \\<open>(_0_) = n\\<^sub>2\\<close> \\<open>(_0_) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<close>"], ["proof (chain)\npicking this:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  (_ 0 _) = n\\<^sub>2\n  (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'", "show ?case"], ["proof (prove)\nusing this:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  (_ 0 _) = n\\<^sub>2\n  (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\n\ngoal (1 subgoal):\n 1. \\<exists>Q Q'.\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> =\n       (Q)\\<^sub>\\<surd> \\<and>\n       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n       (\\<forall>s.\n           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n           (Q' s \\<longrightarrow> \\<not> Q s))", "by -(erule WCFG.While_CFG.cases,auto)"], ["proof (state)\nthis:\n  \\<exists>Q Q'.\n     (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> =\n     (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal (7 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "case (WCFG_CondThen c\\<^sub>1 n et n' b c\\<^sub>2)"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\n  \\<lbrakk>c\\<^sub>1 \\<turnstile> ?n\\<^sub>2 -et\\<^sub>2\\<rightarrow> ?n\\<^sub>2';\n   n = ?n\\<^sub>2; n' \\<noteq> ?n\\<^sub>2'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Q Q'.\n                       et = (Q)\\<^sub>\\<surd> \\<and>\n                       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                       (\\<forall>s.\n                           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                           (Q' s \\<longrightarrow> \\<not> Q s))\n  n \\<noteq> (_Entry_)\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  n \\<oplus> 1 = n\\<^sub>2\n  n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\n\ngoal (7 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "note IH = \\<open>\\<And>n\\<^sub>2 n\\<^sub>2'. \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'; n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q Q'. et = (Q)\\<^sub>\\<surd> \\<and> et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and> (\\<forall>s. (Q s \\<longrightarrow> \\<not> Q' s) \\<and> (Q' s \\<longrightarrow> \\<not> Q s))\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>c\\<^sub>1 \\<turnstile> ?n\\<^sub>2 -et\\<^sub>2\\<rightarrow> ?n\\<^sub>2';\n   n = ?n\\<^sub>2; n' \\<noteq> ?n\\<^sub>2'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Q Q'.\n                       et = (Q)\\<^sub>\\<surd> \\<and>\n                       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                       (\\<forall>s.\n                           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                           (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal (7 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "from \\<open>if (b) c\\<^sub>1 else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\\<close> \\<open>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\\<close> \\<open>n \\<noteq> (_Entry_)\\<close> \n    \\<open>n \\<oplus> 1 = n\\<^sub>2\\<close> \\<open>n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<close>"], ["proof (chain)\npicking this:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\n  n \\<noteq> (_Entry_)\n  n \\<oplus> 1 = n\\<^sub>2\n  n' \\<oplus> 1 \\<noteq> n\\<^sub>2'", "obtain nx where \"c\\<^sub>1 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and> n' \\<noteq> nx\""], ["proof (prove)\nusing this:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\n  n \\<noteq> (_Entry_)\n  n \\<oplus> 1 = n\\<^sub>2\n  n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\n\ngoal (1 subgoal):\n 1. (\\<And>nx.\n        c\\<^sub>1 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n        n' \\<noteq> nx \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>nx.\n                c\\<^sub>1 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                n' \\<noteq> nx \\<Longrightarrow>\n                thesis;\n     if (b) c\\<^sub>1\n     else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n     c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n     n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply(erule WCFG.While_CFG.cases)"], ["proof (prove)\ngoal (17 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>1 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2';\n        if (b) c\\<^sub>1 else c\\<^sub>2 = prog; n\\<^sub>2 = (_Entry_);\n        et\\<^sub>2 = (\\<lambda>s. False)\\<^sub>\\<surd>;\n        n\\<^sub>2' = (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>prog.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>1 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2';\n        if (b) c\\<^sub>1 else c\\<^sub>2 = prog; n\\<^sub>2 = (_Entry_);\n        et\\<^sub>2 = (\\<lambda>s. True)\\<^sub>\\<surd>;\n        n\\<^sub>2' = (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<lbrakk>\\<And>nx.\n                c\\<^sub>1 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                n' \\<noteq> nx \\<Longrightarrow>\n                thesis;\n     c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n     n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2';\n     if (b) c\\<^sub>1 else c\\<^sub>2 = Skip; n\\<^sub>2 = (_ 0 _);\n     et\\<^sub>2 = \\<Up>id; n\\<^sub>2' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> thesis\n 4. \\<And>V e.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>1 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2';\n        if (b) c\\<^sub>1 else c\\<^sub>2 = V:=e; n\\<^sub>2 = (_ 0 _);\n        et\\<^sub>2 = \\<Up>\\<lambda>s. s(V := interpret e s);\n        n\\<^sub>2' = (_ 1 _)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>V e.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>1 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2';\n        if (b) c\\<^sub>1 else c\\<^sub>2 = V:=e; n\\<^sub>2 = (_ 1 _);\n        et\\<^sub>2 = \\<Up>id; n\\<^sub>2' = (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>c\\<^sub>1' na eta n'a c\\<^sub>2'.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>1 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2';\n        if (b) c\\<^sub>1 else c\\<^sub>2 = c\\<^sub>1';; c\\<^sub>2';\n        n\\<^sub>2 = na; et\\<^sub>2 = eta; n\\<^sub>2' = n'a;\n        c\\<^sub>1' \\<turnstile> na -eta\\<rightarrow> n'a;\n        n'a \\<noteq> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 7. \\<And>c\\<^sub>1' na eta c\\<^sub>2'.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>1 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2';\n        if (b) c\\<^sub>1 else c\\<^sub>2 = c\\<^sub>1';; c\\<^sub>2';\n        n\\<^sub>2 = na; et\\<^sub>2 = eta;\n        n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1';\n        c\\<^sub>1' \\<turnstile> na -eta\\<rightarrow> (_Exit_);\n        na \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 8. \\<And>c\\<^sub>2' na eta n'a c\\<^sub>1'.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>1 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2';\n        if (b) c\\<^sub>1 else c\\<^sub>2 = c\\<^sub>1';; c\\<^sub>2';\n        n\\<^sub>2 = na \\<oplus> #:c\\<^sub>1'; et\\<^sub>2 = eta;\n        n\\<^sub>2' = n'a \\<oplus> #:c\\<^sub>1';\n        c\\<^sub>2' \\<turnstile> na -eta\\<rightarrow> n'a;\n        na \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 9. \\<And>ba c\\<^sub>1' c\\<^sub>2'.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>1 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2';\n        if (b) c\\<^sub>1 else c\\<^sub>2 = if (ba) c\\<^sub>1'\n        else c\\<^sub>2';\n        n\\<^sub>2 = (_ 0 _);\n        et\\<^sub>2 = (\\<lambda>s. interpret ba s = Some true)\\<^sub>\\<surd>;\n        n\\<^sub>2' = (_ 0 _) \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> thesis\n 10. \\<And>ba c\\<^sub>1' c\\<^sub>2'.\n        \\<lbrakk>\\<And>nx.\n                    c\\<^sub>1 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                    n' \\<noteq> nx \\<Longrightarrow>\n                    thesis;\n         c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n         n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2';\n         if (b) c\\<^sub>1 else c\\<^sub>2 = if (ba) c\\<^sub>1'\n         else c\\<^sub>2';\n         n\\<^sub>2 = (_ 0 _);\n         et\\<^sub>2 =\n         (\\<lambda>s. interpret ba s = Some false)\\<^sub>\\<surd>;\n         n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1' + 1\\<rbrakk>\n        \\<Longrightarrow> thesis\nA total of 17 subgoals...", "apply(auto intro:WCFG.While_CFG.intros)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na n'a.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>1 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n \\<oplus> 1 = na \\<oplus> 1; n' \\<oplus> 1 \\<noteq> n'a \\<oplus> 1;\n        n\\<^sub>2 = na \\<oplus> 1; n\\<^sub>2' = n'a \\<oplus> 1;\n        c\\<^sub>1 \\<turnstile> na -et\\<^sub>2\\<rightarrow> n'a;\n        na \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>na n'a.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>1 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n \\<oplus> 1 = na \\<oplus> #:c\\<^sub>1 + 1;\n        n' \\<oplus> 1 \\<noteq> n'a \\<oplus> #:c\\<^sub>1 + 1;\n        n\\<^sub>2 = na \\<oplus> #:c\\<^sub>1 + 1;\n        n\\<^sub>2' = n'a \\<oplus> #:c\\<^sub>1 + 1;\n        c\\<^sub>2 \\<turnstile> na -et\\<^sub>2\\<rightarrow> n'a;\n        na \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply(drule label_incr_inj)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na n'a.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>1 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n' \\<oplus> 1 \\<noteq> n'a \\<oplus> 1; n\\<^sub>2 = na \\<oplus> 1;\n        n\\<^sub>2' = n'a \\<oplus> 1;\n        c\\<^sub>1 \\<turnstile> na -et\\<^sub>2\\<rightarrow> n'a;\n        na \\<noteq> (_Entry_); n = na\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>na n'a.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>1 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n \\<oplus> 1 = na \\<oplus> #:c\\<^sub>1 + 1;\n        n' \\<oplus> 1 \\<noteq> n'a \\<oplus> #:c\\<^sub>1 + 1;\n        n\\<^sub>2 = na \\<oplus> #:c\\<^sub>1 + 1;\n        n\\<^sub>2' = n'a \\<oplus> #:c\\<^sub>1 + 1;\n        c\\<^sub>2 \\<turnstile> na -et\\<^sub>2\\<rightarrow> n'a;\n        na \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na n'a.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>1 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n \\<oplus> 1 = na \\<oplus> #:c\\<^sub>1 + 1;\n        n' \\<oplus> 1 \\<noteq> n'a \\<oplus> #:c\\<^sub>1 + 1;\n        n\\<^sub>2 = na \\<oplus> #:c\\<^sub>1 + 1;\n        n\\<^sub>2' = n'a \\<oplus> #:c\\<^sub>1 + 1;\n        c\\<^sub>2 \\<turnstile> na -et\\<^sub>2\\<rightarrow> n'a;\n        na \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply(drule label_incr_simp_rev[OF sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na n'a.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>1 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n' \\<oplus> 1 \\<noteq> n'a \\<oplus> #:c\\<^sub>1 + 1;\n        n\\<^sub>2 = na \\<oplus> #:c\\<^sub>1 + 1;\n        n\\<^sub>2' = n'a \\<oplus> #:c\\<^sub>1 + 1;\n        c\\<^sub>2 \\<turnstile> na -et\\<^sub>2\\<rightarrow> n'a;\n        na \\<noteq> (_Entry_); na \\<oplus> #:c\\<^sub>1 = n\\<rbrakk>\n       \\<Longrightarrow> thesis", "by(case_tac na,auto dest:WCFG_sourcelabel_less_num_nodes)"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and> n' \\<noteq> nx\n\ngoal (7 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>1 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 1 = n\\<^sub>2; n' \\<oplus> 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 7. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "from IH[OF this[THEN conjunct1] _ this[THEN conjunct2]]"], ["proof (chain)\npicking this:\n  n = n \\<Longrightarrow>\n  \\<exists>Q Q'.\n     et = (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))", "show ?case"], ["proof (prove)\nusing this:\n  n = n \\<Longrightarrow>\n  \\<exists>Q Q'.\n     et = (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal (1 subgoal):\n 1. \\<exists>Q Q'.\n       et = (Q)\\<^sub>\\<surd> \\<and>\n       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n       (\\<forall>s.\n           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n           (Q' s \\<longrightarrow> \\<not> Q s))", "by simp"], ["proof (state)\nthis:\n  \\<exists>Q Q'.\n     et = (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "case (WCFG_CondElse c\\<^sub>2 n et n' b c\\<^sub>1)"], ["proof (state)\nthis:\n  c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\n  \\<lbrakk>c\\<^sub>2 \\<turnstile> ?n\\<^sub>2 -et\\<^sub>2\\<rightarrow> ?n\\<^sub>2';\n   n = ?n\\<^sub>2; n' \\<noteq> ?n\\<^sub>2'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Q Q'.\n                       et = (Q)\\<^sub>\\<surd> \\<and>\n                       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                       (\\<forall>s.\n                           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                           (Q' s \\<longrightarrow> \\<not> Q s))\n  n \\<noteq> (_Entry_)\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2\n  n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\n\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "note IH = \\<open>\\<And>n\\<^sub>2 n\\<^sub>2'. \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'; n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q Q'. et = (Q)\\<^sub>\\<surd> \\<and> et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and> (\\<forall>s. (Q s \\<longrightarrow> \\<not> Q' s) \\<and> (Q' s \\<longrightarrow> \\<not> Q s))\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>c\\<^sub>2 \\<turnstile> ?n\\<^sub>2 -et\\<^sub>2\\<rightarrow> ?n\\<^sub>2';\n   n = ?n\\<^sub>2; n' \\<noteq> ?n\\<^sub>2'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Q Q'.\n                       et = (Q)\\<^sub>\\<surd> \\<and>\n                       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                       (\\<forall>s.\n                           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                           (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "from \\<open>if (b) c\\<^sub>1 else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\\<close> \\<open>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\\<close> \\<open>n \\<noteq> (_Entry_)\\<close> \n    \\<open>n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2\\<close> \\<open>n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<close>"], ["proof (chain)\npicking this:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\n  n \\<noteq> (_Entry_)\n  n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2\n  n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'", "obtain nx where \"c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and> n' \\<noteq> nx\""], ["proof (prove)\nusing this:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\n  n \\<noteq> (_Entry_)\n  n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2\n  n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\n\ngoal (1 subgoal):\n 1. (\\<And>nx.\n        c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n        n' \\<noteq> nx \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>nx.\n                c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                n' \\<noteq> nx \\<Longrightarrow>\n                thesis;\n     if (b) c\\<^sub>1\n     else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n     c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n     n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n     n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply(erule WCFG.While_CFG.cases)"], ["proof (prove)\ngoal (17 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2';\n        if (b) c\\<^sub>1 else c\\<^sub>2 = prog; n\\<^sub>2 = (_Entry_);\n        et\\<^sub>2 = (\\<lambda>s. False)\\<^sub>\\<surd>;\n        n\\<^sub>2' = (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>prog.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2';\n        if (b) c\\<^sub>1 else c\\<^sub>2 = prog; n\\<^sub>2 = (_Entry_);\n        et\\<^sub>2 = (\\<lambda>s. True)\\<^sub>\\<surd>;\n        n\\<^sub>2' = (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<lbrakk>\\<And>nx.\n                c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                n' \\<noteq> nx \\<Longrightarrow>\n                thesis;\n     c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n     n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n     n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2';\n     if (b) c\\<^sub>1 else c\\<^sub>2 = Skip; n\\<^sub>2 = (_ 0 _);\n     et\\<^sub>2 = \\<Up>id; n\\<^sub>2' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> thesis\n 4. \\<And>V e.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2';\n        if (b) c\\<^sub>1 else c\\<^sub>2 = V:=e; n\\<^sub>2 = (_ 0 _);\n        et\\<^sub>2 = \\<Up>\\<lambda>s. s(V := interpret e s);\n        n\\<^sub>2' = (_ 1 _)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>V e.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2';\n        if (b) c\\<^sub>1 else c\\<^sub>2 = V:=e; n\\<^sub>2 = (_ 1 _);\n        et\\<^sub>2 = \\<Up>id; n\\<^sub>2' = (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>c\\<^sub>1' na eta n'a c\\<^sub>2'.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2';\n        if (b) c\\<^sub>1 else c\\<^sub>2 = c\\<^sub>1';; c\\<^sub>2';\n        n\\<^sub>2 = na; et\\<^sub>2 = eta; n\\<^sub>2' = n'a;\n        c\\<^sub>1' \\<turnstile> na -eta\\<rightarrow> n'a;\n        n'a \\<noteq> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 7. \\<And>c\\<^sub>1' na eta c\\<^sub>2'.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2';\n        if (b) c\\<^sub>1 else c\\<^sub>2 = c\\<^sub>1';; c\\<^sub>2';\n        n\\<^sub>2 = na; et\\<^sub>2 = eta;\n        n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1';\n        c\\<^sub>1' \\<turnstile> na -eta\\<rightarrow> (_Exit_);\n        na \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 8. \\<And>c\\<^sub>2' na eta n'a c\\<^sub>1'.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2';\n        if (b) c\\<^sub>1 else c\\<^sub>2 = c\\<^sub>1';; c\\<^sub>2';\n        n\\<^sub>2 = na \\<oplus> #:c\\<^sub>1'; et\\<^sub>2 = eta;\n        n\\<^sub>2' = n'a \\<oplus> #:c\\<^sub>1';\n        c\\<^sub>2' \\<turnstile> na -eta\\<rightarrow> n'a;\n        na \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 9. \\<And>ba c\\<^sub>1' c\\<^sub>2'.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2';\n        if (b) c\\<^sub>1 else c\\<^sub>2 = if (ba) c\\<^sub>1'\n        else c\\<^sub>2';\n        n\\<^sub>2 = (_ 0 _);\n        et\\<^sub>2 = (\\<lambda>s. interpret ba s = Some true)\\<^sub>\\<surd>;\n        n\\<^sub>2' = (_ 0 _) \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> thesis\n 10. \\<And>ba c\\<^sub>1' c\\<^sub>2'.\n        \\<lbrakk>\\<And>nx.\n                    c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                    n' \\<noteq> nx \\<Longrightarrow>\n                    thesis;\n         c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n         n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n         n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2';\n         if (b) c\\<^sub>1 else c\\<^sub>2 = if (ba) c\\<^sub>1'\n         else c\\<^sub>2';\n         n\\<^sub>2 = (_ 0 _);\n         et\\<^sub>2 =\n         (\\<lambda>s. interpret ba s = Some false)\\<^sub>\\<surd>;\n         n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1' + 1\\<rbrakk>\n        \\<Longrightarrow> thesis\nA total of 17 subgoals...", "apply(auto intro:WCFG.While_CFG.intros)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na n'a.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n \\<oplus> #:c\\<^sub>1 + 1 = na \\<oplus> 1;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n'a \\<oplus> 1;\n        n\\<^sub>2 = na \\<oplus> 1; n\\<^sub>2' = n'a \\<oplus> 1;\n        c\\<^sub>1 \\<turnstile> na -et\\<^sub>2\\<rightarrow> n'a;\n        na \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>na n'a.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n \\<oplus> #:c\\<^sub>1 + 1 = na \\<oplus> #:c\\<^sub>1 + 1;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n'a \\<oplus> #:c\\<^sub>1 + 1;\n        n\\<^sub>2 = na \\<oplus> #:c\\<^sub>1 + 1;\n        n\\<^sub>2' = n'a \\<oplus> #:c\\<^sub>1 + 1;\n        c\\<^sub>2 \\<turnstile> na -et\\<^sub>2\\<rightarrow> n'a;\n        na \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply(drule label_incr_simp_rev)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na n'a.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n'a \\<oplus> 1;\n        n\\<^sub>2 = na \\<oplus> 1; n\\<^sub>2' = n'a \\<oplus> 1;\n        c\\<^sub>1 \\<turnstile> na -et\\<^sub>2\\<rightarrow> n'a;\n        na \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = na\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>na n'a.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n \\<oplus> #:c\\<^sub>1 + 1 = na \\<oplus> #:c\\<^sub>1 + 1;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n'a \\<oplus> #:c\\<^sub>1 + 1;\n        n\\<^sub>2 = na \\<oplus> #:c\\<^sub>1 + 1;\n        n\\<^sub>2' = n'a \\<oplus> #:c\\<^sub>1 + 1;\n        c\\<^sub>2 \\<turnstile> na -et\\<^sub>2\\<rightarrow> n'a;\n        na \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply(case_tac na,auto,cases n,auto dest:WCFG_sourcelabel_less_num_nodes)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na n'a.\n       \\<lbrakk>\\<And>nx.\n                   c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n \\<oplus> #:c\\<^sub>1 + 1 = na \\<oplus> #:c\\<^sub>1 + 1;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n'a \\<oplus> #:c\\<^sub>1 + 1;\n        n\\<^sub>2 = na \\<oplus> #:c\\<^sub>1 + 1;\n        n\\<^sub>2' = n'a \\<oplus> #:c\\<^sub>1 + 1;\n        c\\<^sub>2 \\<turnstile> na -et\\<^sub>2\\<rightarrow> n'a;\n        na \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> thesis", "by(fastforce dest:label_incr_inj)"], ["proof (state)\nthis:\n  c\\<^sub>2 \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and> n' \\<noteq> nx\n\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        if (b) c\\<^sub>1\n        else c\\<^sub>2 \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> #:c\\<^sub>1 + 1 = n\\<^sub>2;\n        n' \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 6. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "from IH[OF this[THEN conjunct1] _ this[THEN conjunct2]]"], ["proof (chain)\npicking this:\n  n = n \\<Longrightarrow>\n  \\<exists>Q Q'.\n     et = (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))", "show ?case"], ["proof (prove)\nusing this:\n  n = n \\<Longrightarrow>\n  \\<exists>Q Q'.\n     et = (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal (1 subgoal):\n 1. \\<exists>Q Q'.\n       et = (Q)\\<^sub>\\<surd> \\<and>\n       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n       (\\<forall>s.\n           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n           (Q' s \\<longrightarrow> \\<not> Q s))", "by simp"], ["proof (state)\nthis:\n  \\<exists>Q Q'.\n     et = (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal (5 subgoals):\n 1. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "case (WCFG_WhileTrue b c')"], ["proof (state)\nthis:\n  while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  (_ 0 _) = n\\<^sub>2\n  (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\n\ngoal (5 subgoals):\n 1. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 5. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "from \\<open>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\\<close> \\<open>(_0_) = n\\<^sub>2\\<close> \\<open>(_0_) \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<close>"], ["proof (chain)\npicking this:\n  while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  (_ 0 _) = n\\<^sub>2\n  (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'", "show ?case"], ["proof (prove)\nusing this:\n  while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  (_ 0 _) = n\\<^sub>2\n  (_ 0 _) \\<oplus> 2 \\<noteq> n\\<^sub>2'\n\ngoal (1 subgoal):\n 1. \\<exists>Q Q'.\n       (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> =\n       (Q)\\<^sub>\\<surd> \\<and>\n       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n       (\\<forall>s.\n           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n           (Q' s \\<longrightarrow> \\<not> Q s))", "by -(erule WCFG.While_CFG.cases,auto)"], ["proof (state)\nthis:\n  \\<exists>Q Q'.\n     (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> =\n     (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal (4 subgoals):\n 1. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "case (WCFG_WhileFalse b c')"], ["proof (state)\nthis:\n  while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  (_ 0 _) = n\\<^sub>2\n  (_ 1 _) \\<noteq> n\\<^sub>2'\n\ngoal (4 subgoals):\n 1. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 0 _) = n\\<^sub>2; (_ 1 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 4. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "from \\<open>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\\<close> \\<open>(_0_) = n\\<^sub>2\\<close> \\<open>(_1_) \\<noteq> n\\<^sub>2'\\<close>"], ["proof (chain)\npicking this:\n  while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  (_ 0 _) = n\\<^sub>2\n  (_ 1 _) \\<noteq> n\\<^sub>2'", "show ?case"], ["proof (prove)\nusing this:\n  while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  (_ 0 _) = n\\<^sub>2\n  (_ 1 _) \\<noteq> n\\<^sub>2'\n\ngoal (1 subgoal):\n 1. \\<exists>Q Q'.\n       (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> =\n       (Q)\\<^sub>\\<surd> \\<and>\n       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n       (\\<forall>s.\n           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n           (Q' s \\<longrightarrow> \\<not> Q s))", "by -(erule WCFG.While_CFG.cases,auto)"], ["proof (state)\nthis:\n  \\<exists>Q Q'.\n     (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> =\n     (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal (3 subgoals):\n 1. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "case (WCFG_WhileFalseSkip b c')"], ["proof (state)\nthis:\n  while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  (_ 1 _) = n\\<^sub>2\n  (_Exit_) \\<noteq> n\\<^sub>2'\n\ngoal (3 subgoals):\n 1. \\<And>b c' n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        (_ 1 _) = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 3. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "from \\<open>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\\<close> \\<open>(_1_) = n\\<^sub>2\\<close> \\<open>(_Exit_) \\<noteq> n\\<^sub>2'\\<close>"], ["proof (chain)\npicking this:\n  while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  (_ 1 _) = n\\<^sub>2\n  (_Exit_) \\<noteq> n\\<^sub>2'", "show ?case"], ["proof (prove)\nusing this:\n  while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  (_ 1 _) = n\\<^sub>2\n  (_Exit_) \\<noteq> n\\<^sub>2'\n\ngoal (1 subgoal):\n 1. \\<exists>Q Q'.\n       \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n       (\\<forall>s.\n           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n           (Q' s \\<longrightarrow> \\<not> Q s))", "by -(erule WCFG.While_CFG.cases,auto dest:label_incr_ge)"], ["proof (state)\nthis:\n  \\<exists>Q Q'.\n     \\<Up>id = (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal (2 subgoals):\n 1. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "case (WCFG_WhileBody c' n et n' b)"], ["proof (state)\nthis:\n  c' \\<turnstile> n -et\\<rightarrow> n'\n  \\<lbrakk>c' \\<turnstile> ?n\\<^sub>2 -et\\<^sub>2\\<rightarrow> ?n\\<^sub>2';\n   n = ?n\\<^sub>2; n' \\<noteq> ?n\\<^sub>2'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Q Q'.\n                       et = (Q)\\<^sub>\\<surd> \\<and>\n                       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                       (\\<forall>s.\n                           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                           (Q' s \\<longrightarrow> \\<not> Q s))\n  n \\<noteq> (_Entry_)\n  n' \\<noteq> (_Exit_)\n  while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  n \\<oplus> 2 = n\\<^sub>2\n  n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\n\ngoal (2 subgoals):\n 1. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "note IH = \\<open>\\<And>n\\<^sub>2 n\\<^sub>2'. \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'; n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q Q'. et = (Q)\\<^sub>\\<surd> \\<and> et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and> (\\<forall>s. (Q s \\<longrightarrow> \\<not> Q' s) \\<and> (Q' s \\<longrightarrow> \\<not> Q s))\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>c' \\<turnstile> ?n\\<^sub>2 -et\\<^sub>2\\<rightarrow> ?n\\<^sub>2';\n   n = ?n\\<^sub>2; n' \\<noteq> ?n\\<^sub>2'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Q Q'.\n                       et = (Q)\\<^sub>\\<surd> \\<and>\n                       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                       (\\<forall>s.\n                           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                           (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal (2 subgoals):\n 1. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "from \\<open>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\\<close> \\<open>c' \\<turnstile> n -et\\<rightarrow> n'\\<close> \\<open>n \\<noteq> (_Entry_)\\<close>\n    \\<open>n' \\<noteq> (_Exit_)\\<close> \\<open>n \\<oplus> 2 = n\\<^sub>2\\<close> \\<open>n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<close>"], ["proof (chain)\npicking this:\n  while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  c' \\<turnstile> n -et\\<rightarrow> n'\n  n \\<noteq> (_Entry_)\n  n' \\<noteq> (_Exit_)\n  n \\<oplus> 2 = n\\<^sub>2\n  n' \\<oplus> 2 \\<noteq> n\\<^sub>2'", "obtain nx where \"c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and> n' \\<noteq> nx\""], ["proof (prove)\nusing this:\n  while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  c' \\<turnstile> n -et\\<rightarrow> n'\n  n \\<noteq> (_Entry_)\n  n' \\<noteq> (_Exit_)\n  n \\<oplus> 2 = n\\<^sub>2\n  n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\n\ngoal (1 subgoal):\n 1. (\\<And>nx.\n        c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n        n' \\<noteq> nx \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>nx.\n                c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                n' \\<noteq> nx \\<Longrightarrow>\n                thesis;\n     while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n     c' \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n     n' \\<noteq> (_Exit_); n \\<oplus> 2 = n\\<^sub>2;\n     n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply(erule WCFG.While_CFG.cases)"], ["proof (prove)\ngoal (17 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<And>nx.\n                   c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c' \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n' \\<noteq> (_Exit_); n \\<oplus> 2 = n\\<^sub>2;\n        n' \\<oplus> 2 \\<noteq> n\\<^sub>2'; while (b) c' = prog;\n        n\\<^sub>2 = (_Entry_);\n        et\\<^sub>2 = (\\<lambda>s. False)\\<^sub>\\<surd>;\n        n\\<^sub>2' = (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>prog.\n       \\<lbrakk>\\<And>nx.\n                   c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c' \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n' \\<noteq> (_Exit_); n \\<oplus> 2 = n\\<^sub>2;\n        n' \\<oplus> 2 \\<noteq> n\\<^sub>2'; while (b) c' = prog;\n        n\\<^sub>2 = (_Entry_);\n        et\\<^sub>2 = (\\<lambda>s. True)\\<^sub>\\<surd>;\n        n\\<^sub>2' = (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<lbrakk>\\<And>nx.\n                c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                n' \\<noteq> nx \\<Longrightarrow>\n                thesis;\n     c' \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n     n' \\<noteq> (_Exit_); n \\<oplus> 2 = n\\<^sub>2;\n     n' \\<oplus> 2 \\<noteq> n\\<^sub>2'; while (b) c' = Skip;\n     n\\<^sub>2 = (_ 0 _); et\\<^sub>2 = \\<Up>id;\n     n\\<^sub>2' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> thesis\n 4. \\<And>V e.\n       \\<lbrakk>\\<And>nx.\n                   c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c' \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n' \\<noteq> (_Exit_); n \\<oplus> 2 = n\\<^sub>2;\n        n' \\<oplus> 2 \\<noteq> n\\<^sub>2'; while (b) c' = V:=e;\n        n\\<^sub>2 = (_ 0 _);\n        et\\<^sub>2 = \\<Up>\\<lambda>s. s(V := interpret e s);\n        n\\<^sub>2' = (_ 1 _)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>V e.\n       \\<lbrakk>\\<And>nx.\n                   c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c' \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n' \\<noteq> (_Exit_); n \\<oplus> 2 = n\\<^sub>2;\n        n' \\<oplus> 2 \\<noteq> n\\<^sub>2'; while (b) c' = V:=e;\n        n\\<^sub>2 = (_ 1 _); et\\<^sub>2 = \\<Up>id;\n        n\\<^sub>2' = (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>c\\<^sub>1 na eta n'a c\\<^sub>2.\n       \\<lbrakk>\\<And>nx.\n                   c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c' \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n' \\<noteq> (_Exit_); n \\<oplus> 2 = n\\<^sub>2;\n        n' \\<oplus> 2 \\<noteq> n\\<^sub>2';\n        while (b) c' = c\\<^sub>1;; c\\<^sub>2; n\\<^sub>2 = na;\n        et\\<^sub>2 = eta; n\\<^sub>2' = n'a;\n        c\\<^sub>1 \\<turnstile> na -eta\\<rightarrow> n'a;\n        n'a \\<noteq> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 7. \\<And>c\\<^sub>1 na eta c\\<^sub>2.\n       \\<lbrakk>\\<And>nx.\n                   c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c' \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n' \\<noteq> (_Exit_); n \\<oplus> 2 = n\\<^sub>2;\n        n' \\<oplus> 2 \\<noteq> n\\<^sub>2';\n        while (b) c' = c\\<^sub>1;; c\\<^sub>2; n\\<^sub>2 = na;\n        et\\<^sub>2 = eta; n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1;\n        c\\<^sub>1 \\<turnstile> na -eta\\<rightarrow> (_Exit_);\n        na \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 8. \\<And>c\\<^sub>2 na eta n'a c\\<^sub>1.\n       \\<lbrakk>\\<And>nx.\n                   c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c' \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n' \\<noteq> (_Exit_); n \\<oplus> 2 = n\\<^sub>2;\n        n' \\<oplus> 2 \\<noteq> n\\<^sub>2';\n        while (b) c' = c\\<^sub>1;; c\\<^sub>2;\n        n\\<^sub>2 = na \\<oplus> #:c\\<^sub>1; et\\<^sub>2 = eta;\n        n\\<^sub>2' = n'a \\<oplus> #:c\\<^sub>1;\n        c\\<^sub>2 \\<turnstile> na -eta\\<rightarrow> n'a;\n        na \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 9. \\<And>ba c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<And>nx.\n                   c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c' \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n' \\<noteq> (_Exit_); n \\<oplus> 2 = n\\<^sub>2;\n        n' \\<oplus> 2 \\<noteq> n\\<^sub>2';\n        while (b) c' = if (ba) c\\<^sub>1 else c\\<^sub>2;\n        n\\<^sub>2 = (_ 0 _);\n        et\\<^sub>2 = (\\<lambda>s. interpret ba s = Some true)\\<^sub>\\<surd>;\n        n\\<^sub>2' = (_ 0 _) \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> thesis\n 10. \\<And>ba c\\<^sub>1 c\\<^sub>2.\n        \\<lbrakk>\\<And>nx.\n                    c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                    n' \\<noteq> nx \\<Longrightarrow>\n                    thesis;\n         c' \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n         n' \\<noteq> (_Exit_); n \\<oplus> 2 = n\\<^sub>2;\n         n' \\<oplus> 2 \\<noteq> n\\<^sub>2';\n         while (b) c' = if (ba) c\\<^sub>1 else c\\<^sub>2;\n         n\\<^sub>2 = (_ 0 _);\n         et\\<^sub>2 =\n         (\\<lambda>s. interpret ba s = Some false)\\<^sub>\\<surd>;\n         n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n        \\<Longrightarrow> thesis\nA total of 17 subgoals...", "apply(auto intro:WCFG.While_CFG.intros)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<And>nx.\n                c' \\<turnstile> n -\\<Up>id\\<rightarrow> nx \\<and>\n                n' \\<noteq> nx \\<Longrightarrow>\n                thesis;\n     c' \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n     n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ 1 _);\n     n' \\<oplus> 2 \\<noteq> (_Exit_); n\\<^sub>2 = (_ 1 _);\n     et\\<^sub>2 = \\<Up>id; n\\<^sub>2' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>na n'a.\n       \\<lbrakk>\\<And>nx.\n                   c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c' \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n' \\<noteq> (_Exit_); n \\<oplus> 2 = na \\<oplus> 2;\n        n' \\<oplus> 2 \\<noteq> n'a \\<oplus> 2; n\\<^sub>2 = na \\<oplus> 2;\n        n\\<^sub>2' = n'a \\<oplus> 2;\n        c' \\<turnstile> na -et\\<^sub>2\\<rightarrow> n'a;\n        na \\<noteq> (_Entry_); n'a \\<noteq> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>na.\n       \\<lbrakk>\\<And>nx.\n                   c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c' \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n' \\<noteq> (_Exit_); n \\<oplus> 2 = na \\<oplus> 2;\n        n' \\<oplus> 2 \\<noteq> (_ 0 _); n\\<^sub>2 = na \\<oplus> 2;\n        n\\<^sub>2' = (_ 0 _);\n        c' \\<turnstile> na -et\\<^sub>2\\<rightarrow> (_Exit_);\n        na \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply(fastforce dest:label_incr_ge[OF sym])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na n'a.\n       \\<lbrakk>\\<And>nx.\n                   c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c' \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n' \\<noteq> (_Exit_); n \\<oplus> 2 = na \\<oplus> 2;\n        n' \\<oplus> 2 \\<noteq> n'a \\<oplus> 2; n\\<^sub>2 = na \\<oplus> 2;\n        n\\<^sub>2' = n'a \\<oplus> 2;\n        c' \\<turnstile> na -et\\<^sub>2\\<rightarrow> n'a;\n        na \\<noteq> (_Entry_); n'a \\<noteq> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>na.\n       \\<lbrakk>\\<And>nx.\n                   c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c' \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n' \\<noteq> (_Exit_); n \\<oplus> 2 = na \\<oplus> 2;\n        n' \\<oplus> 2 \\<noteq> (_ 0 _); n\\<^sub>2 = na \\<oplus> 2;\n        n\\<^sub>2' = (_ 0 _);\n        c' \\<turnstile> na -et\\<^sub>2\\<rightarrow> (_Exit_);\n        na \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply(fastforce dest:label_incr_inj)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>\\<And>nx.\n                   c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   n' \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c' \\<turnstile> n -et\\<rightarrow> n'; n \\<noteq> (_Entry_);\n        n' \\<noteq> (_Exit_); n \\<oplus> 2 = na \\<oplus> 2;\n        n' \\<oplus> 2 \\<noteq> (_ 0 _); n\\<^sub>2 = na \\<oplus> 2;\n        n\\<^sub>2' = (_ 0 _);\n        c' \\<turnstile> na -et\\<^sub>2\\<rightarrow> (_Exit_);\n        na \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> thesis", "by(fastforce dest:label_incr_inj)"], ["proof (state)\nthis:\n  c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and> n' \\<noteq> nx\n\ngoal (2 subgoals):\n 1. \\<And>c' n et n' b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; n' \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; n' \\<oplus> 2 \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))\n 2. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "from IH[OF this[THEN conjunct1] _ this[THEN conjunct2]]"], ["proof (chain)\npicking this:\n  n = n \\<Longrightarrow>\n  \\<exists>Q Q'.\n     et = (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))", "show ?case"], ["proof (prove)\nusing this:\n  n = n \\<Longrightarrow>\n  \\<exists>Q Q'.\n     et = (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal (1 subgoal):\n 1. \\<exists>Q Q'.\n       et = (Q)\\<^sub>\\<surd> \\<and>\n       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n       (\\<forall>s.\n           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n           (Q' s \\<longrightarrow> \\<not> Q s))", "by simp"], ["proof (state)\nthis:\n  \\<exists>Q Q'.\n     et = (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal (1 subgoal):\n 1. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "case (WCFG_WhileBodyExit c' n et b)"], ["proof (state)\nthis:\n  c' \\<turnstile> n -et\\<rightarrow> (_Exit_)\n  \\<lbrakk>c' \\<turnstile> ?n\\<^sub>2 -et\\<^sub>2\\<rightarrow> ?n\\<^sub>2';\n   n = ?n\\<^sub>2; (_Exit_) \\<noteq> ?n\\<^sub>2'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Q Q'.\n                       et = (Q)\\<^sub>\\<surd> \\<and>\n                       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                       (\\<forall>s.\n                           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                           (Q' s \\<longrightarrow> \\<not> Q s))\n  n \\<noteq> (_Entry_)\n  while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  n \\<oplus> 2 = n\\<^sub>2\n  (_ 0 _) \\<noteq> n\\<^sub>2'\n\ngoal (1 subgoal):\n 1. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "note IH = \\<open>\\<And>n\\<^sub>2 n\\<^sub>2'. \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'; n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q Q'. et = (Q)\\<^sub>\\<surd> \\<and> et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and> (\\<forall>s. (Q s \\<longrightarrow> \\<not> Q' s) \\<and> (Q' s \\<longrightarrow> \\<not> Q s))\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>c' \\<turnstile> ?n\\<^sub>2 -et\\<^sub>2\\<rightarrow> ?n\\<^sub>2';\n   n = ?n\\<^sub>2; (_Exit_) \\<noteq> ?n\\<^sub>2'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Q Q'.\n                       et = (Q)\\<^sub>\\<surd> \\<and>\n                       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                       (\\<forall>s.\n                           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                           (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal (1 subgoal):\n 1. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "from \\<open>while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\\<close> \\<open>c' \\<turnstile> n -et\\<rightarrow> (_Exit_)\\<close> \\<open>n \\<noteq> (_Entry_)\\<close>\n    \\<open>n \\<oplus> 2 = n\\<^sub>2\\<close> \\<open>(_0_) \\<noteq> n\\<^sub>2'\\<close>"], ["proof (chain)\npicking this:\n  while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  c' \\<turnstile> n -et\\<rightarrow> (_Exit_)\n  n \\<noteq> (_Entry_)\n  n \\<oplus> 2 = n\\<^sub>2\n  (_ 0 _) \\<noteq> n\\<^sub>2'", "obtain nx where \"c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and> (_Exit_) \\<noteq> nx\""], ["proof (prove)\nusing this:\n  while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2'\n  c' \\<turnstile> n -et\\<rightarrow> (_Exit_)\n  n \\<noteq> (_Entry_)\n  n \\<oplus> 2 = n\\<^sub>2\n  (_ 0 _) \\<noteq> n\\<^sub>2'\n\ngoal (1 subgoal):\n 1. (\\<And>nx.\n        c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n        (_Exit_) \\<noteq> nx \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>nx.\n                c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                (_Exit_) \\<noteq> nx \\<Longrightarrow>\n                thesis;\n     while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n     c' \\<turnstile> n -et\\<rightarrow> (_Exit_); n \\<noteq> (_Entry_);\n     n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply(erule WCFG.While_CFG.cases)"], ["proof (prove)\ngoal (17 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<And>nx.\n                   c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   (_Exit_) \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c' \\<turnstile> n -et\\<rightarrow> (_Exit_); n \\<noteq> (_Entry_);\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2';\n        while (b) c' = prog; n\\<^sub>2 = (_Entry_);\n        et\\<^sub>2 = (\\<lambda>s. False)\\<^sub>\\<surd>;\n        n\\<^sub>2' = (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>prog.\n       \\<lbrakk>\\<And>nx.\n                   c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   (_Exit_) \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c' \\<turnstile> n -et\\<rightarrow> (_Exit_); n \\<noteq> (_Entry_);\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2';\n        while (b) c' = prog; n\\<^sub>2 = (_Entry_);\n        et\\<^sub>2 = (\\<lambda>s. True)\\<^sub>\\<surd>;\n        n\\<^sub>2' = (_ 0 _)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<lbrakk>\\<And>nx.\n                c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                (_Exit_) \\<noteq> nx \\<Longrightarrow>\n                thesis;\n     c' \\<turnstile> n -et\\<rightarrow> (_Exit_); n \\<noteq> (_Entry_);\n     n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2';\n     while (b) c' = Skip; n\\<^sub>2 = (_ 0 _); et\\<^sub>2 = \\<Up>id;\n     n\\<^sub>2' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> thesis\n 4. \\<And>V e.\n       \\<lbrakk>\\<And>nx.\n                   c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   (_Exit_) \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c' \\<turnstile> n -et\\<rightarrow> (_Exit_); n \\<noteq> (_Entry_);\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2';\n        while (b) c' = V:=e; n\\<^sub>2 = (_ 0 _);\n        et\\<^sub>2 = \\<Up>\\<lambda>s. s(V := interpret e s);\n        n\\<^sub>2' = (_ 1 _)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>V e.\n       \\<lbrakk>\\<And>nx.\n                   c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   (_Exit_) \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c' \\<turnstile> n -et\\<rightarrow> (_Exit_); n \\<noteq> (_Entry_);\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2';\n        while (b) c' = V:=e; n\\<^sub>2 = (_ 1 _); et\\<^sub>2 = \\<Up>id;\n        n\\<^sub>2' = (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>c\\<^sub>1 na eta n' c\\<^sub>2.\n       \\<lbrakk>\\<And>nx.\n                   c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   (_Exit_) \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c' \\<turnstile> n -et\\<rightarrow> (_Exit_); n \\<noteq> (_Entry_);\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2';\n        while (b) c' = c\\<^sub>1;; c\\<^sub>2; n\\<^sub>2 = na;\n        et\\<^sub>2 = eta; n\\<^sub>2' = n';\n        c\\<^sub>1 \\<turnstile> na -eta\\<rightarrow> n';\n        n' \\<noteq> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 7. \\<And>c\\<^sub>1 na eta c\\<^sub>2.\n       \\<lbrakk>\\<And>nx.\n                   c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   (_Exit_) \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c' \\<turnstile> n -et\\<rightarrow> (_Exit_); n \\<noteq> (_Entry_);\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2';\n        while (b) c' = c\\<^sub>1;; c\\<^sub>2; n\\<^sub>2 = na;\n        et\\<^sub>2 = eta; n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1;\n        c\\<^sub>1 \\<turnstile> na -eta\\<rightarrow> (_Exit_);\n        na \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 8. \\<And>c\\<^sub>2 na eta n' c\\<^sub>1.\n       \\<lbrakk>\\<And>nx.\n                   c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   (_Exit_) \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c' \\<turnstile> n -et\\<rightarrow> (_Exit_); n \\<noteq> (_Entry_);\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2';\n        while (b) c' = c\\<^sub>1;; c\\<^sub>2;\n        n\\<^sub>2 = na \\<oplus> #:c\\<^sub>1; et\\<^sub>2 = eta;\n        n\\<^sub>2' = n' \\<oplus> #:c\\<^sub>1;\n        c\\<^sub>2 \\<turnstile> na -eta\\<rightarrow> n';\n        na \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 9. \\<And>ba c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<And>nx.\n                   c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   (_Exit_) \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c' \\<turnstile> n -et\\<rightarrow> (_Exit_); n \\<noteq> (_Entry_);\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2';\n        while (b) c' = if (ba) c\\<^sub>1 else c\\<^sub>2;\n        n\\<^sub>2 = (_ 0 _);\n        et\\<^sub>2 = (\\<lambda>s. interpret ba s = Some true)\\<^sub>\\<surd>;\n        n\\<^sub>2' = (_ 0 _) \\<oplus> 1\\<rbrakk>\n       \\<Longrightarrow> thesis\n 10. \\<And>ba c\\<^sub>1 c\\<^sub>2.\n        \\<lbrakk>\\<And>nx.\n                    c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                    (_Exit_) \\<noteq> nx \\<Longrightarrow>\n                    thesis;\n         c' \\<turnstile> n -et\\<rightarrow> (_Exit_); n \\<noteq> (_Entry_);\n         n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2';\n         while (b) c' = if (ba) c\\<^sub>1 else c\\<^sub>2;\n         n\\<^sub>2 = (_ 0 _);\n         et\\<^sub>2 =\n         (\\<lambda>s. interpret ba s = Some false)\\<^sub>\\<surd>;\n         n\\<^sub>2' = (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1\\<rbrakk>\n        \\<Longrightarrow> thesis\nA total of 17 subgoals...", "apply(auto intro:WCFG.While_CFG.intros)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>nx.\n                c' \\<turnstile> n -\\<Up>id\\<rightarrow> nx \\<and>\n                (_Exit_) \\<noteq> nx \\<Longrightarrow>\n                thesis;\n     c' \\<turnstile> n -et\\<rightarrow> (_Exit_); n \\<noteq> (_Entry_);\n     n \\<oplus> 2 = (_ 1 _); n\\<^sub>2 = (_ 1 _); et\\<^sub>2 = \\<Up>id;\n     n\\<^sub>2' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>na n'.\n       \\<lbrakk>\\<And>nx.\n                   c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   (_Exit_) \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c' \\<turnstile> n -et\\<rightarrow> (_Exit_); n \\<noteq> (_Entry_);\n        n \\<oplus> 2 = na \\<oplus> 2; (_ 0 _) \\<noteq> n' \\<oplus> 2;\n        n\\<^sub>2 = na \\<oplus> 2; n\\<^sub>2' = n' \\<oplus> 2;\n        c' \\<turnstile> na -et\\<^sub>2\\<rightarrow> n';\n        na \\<noteq> (_Entry_); n' \\<noteq> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply(fastforce dest:label_incr_ge[OF sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na n'.\n       \\<lbrakk>\\<And>nx.\n                   c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and>\n                   (_Exit_) \\<noteq> nx \\<Longrightarrow>\n                   thesis;\n        c' \\<turnstile> n -et\\<rightarrow> (_Exit_); n \\<noteq> (_Entry_);\n        n \\<oplus> 2 = na \\<oplus> 2; (_ 0 _) \\<noteq> n' \\<oplus> 2;\n        n\\<^sub>2 = na \\<oplus> 2; n\\<^sub>2' = n' \\<oplus> 2;\n        c' \\<turnstile> na -et\\<^sub>2\\<rightarrow> n';\n        na \\<noteq> (_Entry_); n' \\<noteq> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> thesis", "by(fastforce dest:label_incr_inj)"], ["proof (state)\nthis:\n  c' \\<turnstile> n -et\\<^sub>2\\<rightarrow> nx \\<and> (_Exit_) \\<noteq> nx\n\ngoal (1 subgoal):\n 1. \\<And>c' n et b n\\<^sub>2 n\\<^sub>2'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<And>n\\<^sub>2 n\\<^sub>2'.\n           \\<lbrakk>c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n            n = n\\<^sub>2; (_Exit_) \\<noteq> n\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> \\<exists>Q Q'.\n                                et = (Q)\\<^sub>\\<surd> \\<and>\n                                et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                                (\\<forall>s.\n                                    (Q s \\<longrightarrow>\n                                     \\<not> Q' s) \\<and>\n                                    (Q' s \\<longrightarrow> \\<not> Q s));\n        n \\<noteq> (_Entry_);\n        while (b) c' \\<turnstile> n\\<^sub>2 -et\\<^sub>2\\<rightarrow> n\\<^sub>2';\n        n \\<oplus> 2 = n\\<^sub>2; (_ 0 _) \\<noteq> n\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            et = (Q)\\<^sub>\\<surd> \\<and>\n                            et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "from IH[OF this[THEN conjunct1] _ this[THEN conjunct2]]"], ["proof (chain)\npicking this:\n  n = n \\<Longrightarrow>\n  \\<exists>Q Q'.\n     et = (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))", "show ?case"], ["proof (prove)\nusing this:\n  n = n \\<Longrightarrow>\n  \\<exists>Q Q'.\n     et = (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal (1 subgoal):\n 1. \\<exists>Q Q'.\n       et = (Q)\\<^sub>\\<surd> \\<and>\n       et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n       (\\<forall>s.\n           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n           (Q' s \\<longrightarrow> \\<not> Q s))", "by simp"], ["proof (state)\nthis:\n  \\<exists>Q Q'.\n     et = (Q)\\<^sub>\\<surd> \\<and>\n     et\\<^sub>2 = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal:\nNo subgoals!", "qed"], ["", "(*<*)"], ["", "declare One_nat_def [simp]"], ["", "(*>*)"], ["", "end"]]}