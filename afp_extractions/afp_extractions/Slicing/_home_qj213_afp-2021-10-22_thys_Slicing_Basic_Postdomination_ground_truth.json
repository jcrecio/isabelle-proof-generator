{"file_name": "/home/qj213/afp-2021-10-22/thys/Slicing/Basic/Postdomination.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Slicing", "problem_names": ["lemma postdominate_implies_path: \n  assumes \"n' postdominates n\" obtains as where \"n -as\\<rightarrow>* n'\"", "lemma postdominate_refl:\n  assumes valid:\"valid_node n\" and notExit:\"n \\<noteq> (_Exit_)\"\n  shows \"n postdominates n\"", "lemma postdominate_trans:\n  assumes pd1:\"n'' postdominates n\" and pd2:\"n' postdominates n''\"\n  shows \"n' postdominates n\"", "lemma postdominate_antisym:\n  assumes pd1:\"n' postdominates n\" and pd2:\"n postdominates n'\"\n  shows \"n = n'\"", "lemma postdominate_path_branch:\n  assumes \"n -as\\<rightarrow>* n''\" and \"n' postdominates n''\" and \"\\<not> n' postdominates n\"  \n  obtains a as' as'' where \"as = as'@a#as''\" and \"valid_edge a\"\n  and \"\\<not> n' postdominates (sourcenode a)\" and \"n' postdominates (targetnode a)\"", "lemma Exit_no_postdominator:\n  \"(_Exit_) postdominates n \\<Longrightarrow> False\"", "lemma postdominate_path_targetnode:\n  assumes \"n' postdominates n\" and \"n -as\\<rightarrow>* n''\" and \"n' \\<notin> set(sourcenodes as)\"\n  shows \"n' postdominates n''\"", "lemma not_postdominate_source_not_postdominate_target:\n  assumes \"\\<not> n postdominates (sourcenode a)\" and \"valid_node n\" and \"valid_edge a\"\n  obtains ax where \"sourcenode a = sourcenode ax\" and \"valid_edge ax\"\n  and \"\\<not> n postdominates targetnode ax\"", "lemma inner_node_Entry_edge:\n  assumes \"inner_node n\" \n  obtains a where \"valid_edge a\" and \"inner_node (targetnode a)\"\n  and \"sourcenode a = (_Entry_)\"", "lemma inner_node_Exit_edge:\n  assumes \"inner_node n\" \n  obtains a where \"valid_edge a\" and \"inner_node (sourcenode a)\"\n  and \"targetnode a = (_Exit_)\"", "lemma strong_postdominate_prop_smaller_path:\n  assumes all:\"\\<forall>as nx. n -as\\<rightarrow>* nx \\<and> length as \\<ge> k \\<longrightarrow> n' \\<in> set(sourcenodes as)\"\n  and \"n -as\\<rightarrow>* n''\" and \"length as \\<ge> k\"\n  obtains as' as'' where \"n -as'\\<rightarrow>* n'\" and \"length as' < k\" and \"n' -as''\\<rightarrow>* n''\"\n  and \"as = as'@as''\"", "lemma strong_postdominate_refl:\n  assumes \"valid_node n\" and \"n \\<noteq> (_Exit_)\"\n  shows \"n strongly-postdominates n\"", "lemma strong_postdominate_trans:\n  assumes \"n'' strongly-postdominates n\" and \"n' strongly-postdominates n''\"\n  shows \"n' strongly-postdominates n\"", "lemma strong_postdominate_antisym:\n  \"\\<lbrakk>n' strongly-postdominates n; n strongly-postdominates n'\\<rbrakk> \\<Longrightarrow> n = n'\"", "lemma strong_postdominate_path_branch:\n  assumes \"n -as\\<rightarrow>* n''\" and \"n' strongly-postdominates n''\" \n  and \"\\<not> n' strongly-postdominates n\"\n  obtains a as' as'' where \"as = as'@a#as''\" and \"valid_edge a\"\n  and \"\\<not> n' strongly-postdominates (sourcenode a)\" \n  and \"n' strongly-postdominates (targetnode a)\"", "lemma Exit_no_strong_postdominator:\n  \"\\<lbrakk>(_Exit_) strongly-postdominates n; n -as\\<rightarrow>* (_Exit_)\\<rbrakk> \\<Longrightarrow> False\"", "lemma strong_postdominate_path_targetnode:\n  assumes \"n' strongly-postdominates n\" and \"n -as\\<rightarrow>* n''\"\n  and \"n' \\<notin> set(sourcenodes as)\"\n  shows \"n' strongly-postdominates n''\"", "lemma not_strong_postdominate_successor_set:\n  assumes \"\\<not> n strongly-postdominates (sourcenode a)\" and \"valid_node n\"\n  and \"valid_edge a\"\n  and all:\"\\<forall>nx \\<in> N. \\<exists>a'. valid_edge a' \\<and> sourcenode a' = sourcenode a \\<and>\n    targetnode a' = nx \\<and> n strongly-postdominates nx\"\n  obtains a' where \"valid_edge a'\" and \"sourcenode a' =  sourcenode a\"\n  and \"targetnode a' \\<notin> N\"", "lemma not_strong_postdominate_predecessor_successor:\n  assumes \"\\<not> n strongly-postdominates (sourcenode a)\"\n  and \"valid_node n\" and \"valid_edge a\"\n  obtains a' where \"valid_edge a'\" and \"sourcenode a' = sourcenode a\"\n  and \"\\<not> n strongly-postdominates (targetnode a')\""], "translations": [["", "lemma postdominate_implies_path: \n  assumes \"n' postdominates n\" obtains as where \"n -as\\<rightarrow>* n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as.\n        n -as\\<rightarrow>* n' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(atomize_elim)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>as. n -as\\<rightarrow>* n'", "from \\<open>n' postdominates n\\<close>"], ["proof (chain)\npicking this:\n  n' postdominates n", "have \"valid_node n\"\n    and all:\"\\<forall>as. n -as\\<rightarrow>* (_Exit_) \\<longrightarrow> n' \\<in> set(sourcenodes as)\""], ["proof (prove)\nusing this:\n  n' postdominates n\n\ngoal (1 subgoal):\n 1. valid_node n &&&\n    \\<forall>as.\n       n -as\\<rightarrow>* (_Exit_) \\<longrightarrow>\n       n' \\<in> set (sourcenodes as)", "by(auto simp:postdominate_def)"], ["proof (state)\nthis:\n  valid_node n\n  \\<forall>as.\n     n -as\\<rightarrow>* (_Exit_) \\<longrightarrow>\n     n' \\<in> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. \\<exists>as. n -as\\<rightarrow>* n'", "from \\<open>valid_node n\\<close>"], ["proof (chain)\npicking this:\n  valid_node n", "obtain as where \"n -as\\<rightarrow>* (_Exit_)\""], ["proof (prove)\nusing this:\n  valid_node n\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        n -as\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(auto dest:Exit_path)"], ["proof (state)\nthis:\n  n -as\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<exists>as. n -as\\<rightarrow>* n'", "with all"], ["proof (chain)\npicking this:\n  \\<forall>as.\n     n -as\\<rightarrow>* (_Exit_) \\<longrightarrow>\n     n' \\<in> set (sourcenodes as)\n  n -as\\<rightarrow>* (_Exit_)", "have \"n' \\<in> set(sourcenodes as)\""], ["proof (prove)\nusing this:\n  \\<forall>as.\n     n -as\\<rightarrow>* (_Exit_) \\<longrightarrow>\n     n' \\<in> set (sourcenodes as)\n  n -as\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. n' \\<in> set (sourcenodes as)", "by simp"], ["proof (state)\nthis:\n  n' \\<in> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. \\<exists>as. n -as\\<rightarrow>* n'", "then"], ["proof (chain)\npicking this:\n  n' \\<in> set (sourcenodes as)", "obtain ns ns' where \"sourcenodes as = ns@n'#ns'\""], ["proof (prove)\nusing this:\n  n' \\<in> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. (\\<And>ns ns'.\n        sourcenodes as = ns @ n' # ns' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(auto dest:split_list)"], ["proof (state)\nthis:\n  sourcenodes as = ns @ n' # ns'\n\ngoal (1 subgoal):\n 1. \\<exists>as. n -as\\<rightarrow>* n'", "then"], ["proof (chain)\npicking this:\n  sourcenodes as = ns @ n' # ns'", "obtain as' a as'' where \"sourcenodes as' = ns\" \n    and \"sourcenode a = n'\" and \"as = as'@a#as''\""], ["proof (prove)\nusing this:\n  sourcenodes as = ns @ n' # ns'\n\ngoal (1 subgoal):\n 1. (\\<And>as' a as''.\n        \\<lbrakk>sourcenodes as' = ns; sourcenode a = n';\n         as = as' @ a # as''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim:map_append_append_maps simp:sourcenodes_def)"], ["proof (state)\nthis:\n  sourcenodes as' = ns\n  sourcenode a = n'\n  as = as' @ a # as''\n\ngoal (1 subgoal):\n 1. \\<exists>as. n -as\\<rightarrow>* n'", "from \\<open>n -as\\<rightarrow>* (_Exit_)\\<close> \\<open>as = as'@a#as''\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* (_Exit_)\n  as = as' @ a # as''", "have \"n -as'\\<rightarrow>* sourcenode a\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* (_Exit_)\n  as = as' @ a # as''\n\ngoal (1 subgoal):\n 1. n -as'\\<rightarrow>* sourcenode a", "by(fastforce dest:path_split)"], ["proof (state)\nthis:\n  n -as'\\<rightarrow>* sourcenode a\n\ngoal (1 subgoal):\n 1. \\<exists>as. n -as\\<rightarrow>* n'", "with \\<open>sourcenode a = n'\\<close>"], ["proof (chain)\npicking this:\n  sourcenode a = n'\n  n -as'\\<rightarrow>* sourcenode a", "show \"\\<exists>as. n -as\\<rightarrow>* n'\""], ["proof (prove)\nusing this:\n  sourcenode a = n'\n  n -as'\\<rightarrow>* sourcenode a\n\ngoal (1 subgoal):\n 1. \\<exists>as. n -as\\<rightarrow>* n'", "by blast"], ["proof (state)\nthis:\n  \\<exists>as. n -as\\<rightarrow>* n'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma postdominate_refl:\n  assumes valid:\"valid_node n\" and notExit:\"n \\<noteq> (_Exit_)\"\n  shows \"n postdominates n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n postdominates n", "using valid"], ["proof (prove)\nusing this:\n  valid_node n\n\ngoal (1 subgoal):\n 1. n postdominates n", "proof(induct rule:valid_node_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. n = (_Entry_) \\<Longrightarrow> n postdominates n\n 2. n = (_Exit_) \\<Longrightarrow> n postdominates n\n 3. inner_node n \\<Longrightarrow> n postdominates n", "case Entry"], ["proof (state)\nthis:\n  n = (_Entry_)\n\ngoal (3 subgoals):\n 1. n = (_Entry_) \\<Longrightarrow> n postdominates n\n 2. n = (_Exit_) \\<Longrightarrow> n postdominates n\n 3. inner_node n \\<Longrightarrow> n postdominates n", "{"], ["proof (state)\nthis:\n  n = (_Entry_)\n\ngoal (3 subgoals):\n 1. n = (_Entry_) \\<Longrightarrow> n postdominates n\n 2. n = (_Exit_) \\<Longrightarrow> n postdominates n\n 3. inner_node n \\<Longrightarrow> n postdominates n", "fix as"], ["proof (state)\ngoal (3 subgoals):\n 1. n = (_Entry_) \\<Longrightarrow> n postdominates n\n 2. n = (_Exit_) \\<Longrightarrow> n postdominates n\n 3. inner_node n \\<Longrightarrow> n postdominates n", "assume path:\"(_Entry_) -as\\<rightarrow>* (_Exit_)\""], ["proof (state)\nthis:\n  (_Entry_) -as\\<rightarrow>* (_Exit_)\n\ngoal (3 subgoals):\n 1. n = (_Entry_) \\<Longrightarrow> n postdominates n\n 2. n = (_Exit_) \\<Longrightarrow> n postdominates n\n 3. inner_node n \\<Longrightarrow> n postdominates n", "hence notempty:\"as \\<noteq> []\""], ["proof (prove)\nusing this:\n  (_Entry_) -as\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. as \\<noteq> []", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. (_Entry_) -as\\<rightarrow>* (_Exit_) \\<Longrightarrow> as \\<noteq> []", "apply(erule path.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(_Entry_) = n; as = []; (_Exit_) = n; valid_node n\\<rbrakk>\n       \\<Longrightarrow> as \\<noteq> []\n 2. \\<And>n'' asa n' a n.\n       \\<lbrakk>(_Entry_) = n; as = a # asa; (_Exit_) = n';\n        n'' -asa\\<rightarrow>* n'; valid_edge a; sourcenode a = n;\n        targetnode a = n''\\<rbrakk>\n       \\<Longrightarrow> as \\<noteq> []", "by (drule sym,simp,drule Exit_noteq_Entry,auto)"], ["proof (state)\nthis:\n  as \\<noteq> []\n\ngoal (3 subgoals):\n 1. n = (_Entry_) \\<Longrightarrow> n postdominates n\n 2. n = (_Exit_) \\<Longrightarrow> n postdominates n\n 3. inner_node n \\<Longrightarrow> n postdominates n", "with path"], ["proof (chain)\npicking this:\n  (_Entry_) -as\\<rightarrow>* (_Exit_)\n  as \\<noteq> []", "have \"hd (sourcenodes as) = (_Entry_)\""], ["proof (prove)\nusing this:\n  (_Entry_) -as\\<rightarrow>* (_Exit_)\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. hd (sourcenodes as) = (_Entry_)", "by(fastforce intro:path_sourcenode)"], ["proof (state)\nthis:\n  hd (sourcenodes as) = (_Entry_)\n\ngoal (3 subgoals):\n 1. n = (_Entry_) \\<Longrightarrow> n postdominates n\n 2. n = (_Exit_) \\<Longrightarrow> n postdominates n\n 3. inner_node n \\<Longrightarrow> n postdominates n", "with notempty"], ["proof (chain)\npicking this:\n  as \\<noteq> []\n  hd (sourcenodes as) = (_Entry_)", "have \"(_Entry_) \\<in> set (sourcenodes as)\""], ["proof (prove)\nusing this:\n  as \\<noteq> []\n  hd (sourcenodes as) = (_Entry_)\n\ngoal (1 subgoal):\n 1. (_Entry_) \\<in> set (sourcenodes as)", "by(fastforce intro:hd_in_set simp:sourcenodes_def)"], ["proof (state)\nthis:\n  (_Entry_) \\<in> set (sourcenodes as)\n\ngoal (3 subgoals):\n 1. n = (_Entry_) \\<Longrightarrow> n postdominates n\n 2. n = (_Exit_) \\<Longrightarrow> n postdominates n\n 3. inner_node n \\<Longrightarrow> n postdominates n", "}"], ["proof (state)\nthis:\n  (_Entry_) -?as2\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n  (_Entry_) \\<in> set (sourcenodes ?as2)\n\ngoal (3 subgoals):\n 1. n = (_Entry_) \\<Longrightarrow> n postdominates n\n 2. n = (_Exit_) \\<Longrightarrow> n postdominates n\n 3. inner_node n \\<Longrightarrow> n postdominates n", "with Entry"], ["proof (chain)\npicking this:\n  n = (_Entry_)\n  (_Entry_) -?as2\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n  (_Entry_) \\<in> set (sourcenodes ?as2)", "show ?thesis"], ["proof (prove)\nusing this:\n  n = (_Entry_)\n  (_Entry_) -?as2\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n  (_Entry_) \\<in> set (sourcenodes ?as2)\n\ngoal (1 subgoal):\n 1. n postdominates n", "by(simp add:postdominate_def)"], ["proof (state)\nthis:\n  n postdominates n\n\ngoal (2 subgoals):\n 1. n = (_Exit_) \\<Longrightarrow> n postdominates n\n 2. inner_node n \\<Longrightarrow> n postdominates n", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. n = (_Exit_) \\<Longrightarrow> n postdominates n\n 2. inner_node n \\<Longrightarrow> n postdominates n", "case Exit"], ["proof (state)\nthis:\n  n = (_Exit_)\n\ngoal (2 subgoals):\n 1. n = (_Exit_) \\<Longrightarrow> n postdominates n\n 2. inner_node n \\<Longrightarrow> n postdominates n", "with notExit"], ["proof (chain)\npicking this:\n  n \\<noteq> (_Exit_)\n  n = (_Exit_)", "have False"], ["proof (prove)\nusing this:\n  n \\<noteq> (_Exit_)\n  n = (_Exit_)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. n = (_Exit_) \\<Longrightarrow> n postdominates n\n 2. inner_node n \\<Longrightarrow> n postdominates n", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. n postdominates n", "by simp"], ["proof (state)\nthis:\n  n postdominates n\n\ngoal (1 subgoal):\n 1. inner_node n \\<Longrightarrow> n postdominates n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. inner_node n \\<Longrightarrow> n postdominates n", "case inner"], ["proof (state)\nthis:\n  inner_node n\n\ngoal (1 subgoal):\n 1. inner_node n \\<Longrightarrow> n postdominates n", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. n postdominates n", "proof(cases \"\\<exists>as. n -as\\<rightarrow>* (_Exit_)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>as. n -as\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n postdominates n\n 2. \\<nexists>as. n -as\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n postdominates n", "case True"], ["proof (state)\nthis:\n  \\<exists>as. n -as\\<rightarrow>* (_Exit_)\n\ngoal (2 subgoals):\n 1. \\<exists>as. n -as\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n postdominates n\n 2. \\<nexists>as. n -as\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n postdominates n", "{"], ["proof (state)\nthis:\n  \\<exists>as. n -as\\<rightarrow>* (_Exit_)\n\ngoal (2 subgoals):\n 1. \\<exists>as. n -as\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n postdominates n\n 2. \\<nexists>as. n -as\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n postdominates n", "fix as'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>as. n -as\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n postdominates n\n 2. \\<nexists>as. n -as\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n postdominates n", "assume path':\"n -as'\\<rightarrow>* (_Exit_)\""], ["proof (state)\nthis:\n  n -as'\\<rightarrow>* (_Exit_)\n\ngoal (2 subgoals):\n 1. \\<exists>as. n -as\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n postdominates n\n 2. \\<nexists>as. n -as\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n postdominates n", "with inner"], ["proof (chain)\npicking this:\n  inner_node n\n  n -as'\\<rightarrow>* (_Exit_)", "have notempty:\"as' \\<noteq> []\""], ["proof (prove)\nusing this:\n  inner_node n\n  n -as'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. as' \\<noteq> []", "by(cases as',auto elim!:path.cases simp:inner_node_def)"], ["proof (state)\nthis:\n  as' \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<exists>as. n -as\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n postdominates n\n 2. \\<nexists>as. n -as\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n postdominates n", "with path' inner"], ["proof (chain)\npicking this:\n  n -as'\\<rightarrow>* (_Exit_)\n  inner_node n\n  as' \\<noteq> []", "have hd:\"hd (sourcenodes as') = n\""], ["proof (prove)\nusing this:\n  n -as'\\<rightarrow>* (_Exit_)\n  inner_node n\n  as' \\<noteq> []\n\ngoal (1 subgoal):\n 1. hd (sourcenodes as') = n", "by -(rule path_sourcenode)"], ["proof (state)\nthis:\n  hd (sourcenodes as') = n\n\ngoal (2 subgoals):\n 1. \\<exists>as. n -as\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n postdominates n\n 2. \\<nexists>as. n -as\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n postdominates n", "from notempty"], ["proof (chain)\npicking this:\n  as' \\<noteq> []", "have \"sourcenodes as' \\<noteq> []\""], ["proof (prove)\nusing this:\n  as' \\<noteq> []\n\ngoal (1 subgoal):\n 1. sourcenodes as' \\<noteq> []", "by(simp add:sourcenodes_def)"], ["proof (state)\nthis:\n  sourcenodes as' \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<exists>as. n -as\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n postdominates n\n 2. \\<nexists>as. n -as\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n postdominates n", "with hd[THEN sym]"], ["proof (chain)\npicking this:\n  n = hd (sourcenodes as')\n  sourcenodes as' \\<noteq> []", "have \"n \\<in> set (sourcenodes as')\""], ["proof (prove)\nusing this:\n  n = hd (sourcenodes as')\n  sourcenodes as' \\<noteq> []\n\ngoal (1 subgoal):\n 1. n \\<in> set (sourcenodes as')", "by simp"], ["proof (state)\nthis:\n  n \\<in> set (sourcenodes as')\n\ngoal (2 subgoals):\n 1. \\<exists>as. n -as\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n postdominates n\n 2. \\<nexists>as. n -as\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n postdominates n", "}"], ["proof (state)\nthis:\n  n -?as'2\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n  n \\<in> set (sourcenodes ?as'2)\n\ngoal (2 subgoals):\n 1. \\<exists>as. n -as\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n postdominates n\n 2. \\<nexists>as. n -as\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n postdominates n", "hence \"\\<forall>as. n -as\\<rightarrow>* (_Exit_) \\<longrightarrow> n \\<in> set (sourcenodes as)\""], ["proof (prove)\nusing this:\n  n -?as'2\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n  n \\<in> set (sourcenodes ?as'2)\n\ngoal (1 subgoal):\n 1. \\<forall>as.\n       n -as\\<rightarrow>* (_Exit_) \\<longrightarrow>\n       n \\<in> set (sourcenodes as)", "by simp"], ["proof (state)\nthis:\n  \\<forall>as.\n     n -as\\<rightarrow>* (_Exit_) \\<longrightarrow>\n     n \\<in> set (sourcenodes as)\n\ngoal (2 subgoals):\n 1. \\<exists>as. n -as\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n postdominates n\n 2. \\<nexists>as. n -as\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n postdominates n", "with True inner"], ["proof (chain)\npicking this:\n  \\<exists>as. n -as\\<rightarrow>* (_Exit_)\n  inner_node n\n  \\<forall>as.\n     n -as\\<rightarrow>* (_Exit_) \\<longrightarrow>\n     n \\<in> set (sourcenodes as)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>as. n -as\\<rightarrow>* (_Exit_)\n  inner_node n\n  \\<forall>as.\n     n -as\\<rightarrow>* (_Exit_) \\<longrightarrow>\n     n \\<in> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. n postdominates n", "by(simp add:postdominate_def inner_is_valid)"], ["proof (state)\nthis:\n  n postdominates n\n\ngoal (1 subgoal):\n 1. \\<nexists>as. n -as\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n postdominates n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>as. n -as\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n postdominates n", "case False"], ["proof (state)\nthis:\n  \\<nexists>as. n -as\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<nexists>as. n -as\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n postdominates n", "with inner"], ["proof (chain)\npicking this:\n  inner_node n\n  \\<nexists>as. n -as\\<rightarrow>* (_Exit_)", "show ?thesis"], ["proof (prove)\nusing this:\n  inner_node n\n  \\<nexists>as. n -as\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. n postdominates n", "by(simp add:postdominate_def inner_is_valid)"], ["proof (state)\nthis:\n  n postdominates n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n postdominates n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma postdominate_trans:\n  assumes pd1:\"n'' postdominates n\" and pd2:\"n' postdominates n''\"\n  shows \"n' postdominates n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n' postdominates n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. n' postdominates n", "from pd1 pd2"], ["proof (chain)\npicking this:\n  n'' postdominates n\n  n' postdominates n''", "have valid:\"valid_node n\" and valid':\"valid_node n'\""], ["proof (prove)\nusing this:\n  n'' postdominates n\n  n' postdominates n''\n\ngoal (1 subgoal):\n 1. valid_node n &&& valid_node n'", "by(simp_all add:postdominate_def)"], ["proof (state)\nthis:\n  valid_node n\n  valid_node n'\n\ngoal (1 subgoal):\n 1. n' postdominates n", "{"], ["proof (state)\nthis:\n  valid_node n\n  valid_node n'\n\ngoal (1 subgoal):\n 1. n' postdominates n", "fix as"], ["proof (state)\ngoal (1 subgoal):\n 1. n' postdominates n", "assume path:\"n -as\\<rightarrow>* (_Exit_)\""], ["proof (state)\nthis:\n  n -as\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. n' postdominates n", "with pd1"], ["proof (chain)\npicking this:\n  n'' postdominates n\n  n -as\\<rightarrow>* (_Exit_)", "have \"n'' \\<in> set (sourcenodes as)\""], ["proof (prove)\nusing this:\n  n'' postdominates n\n  n -as\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. n'' \\<in> set (sourcenodes as)", "by(simp add:postdominate_def)"], ["proof (state)\nthis:\n  n'' \\<in> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. n' postdominates n", "then"], ["proof (chain)\npicking this:\n  n'' \\<in> set (sourcenodes as)", "obtain ns' ns'' where \"sourcenodes as = ns'@n''#ns''\""], ["proof (prove)\nusing this:\n  n'' \\<in> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. (\\<And>ns' ns''.\n        sourcenodes as = ns' @ n'' # ns'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(auto dest:split_list)"], ["proof (state)\nthis:\n  sourcenodes as = ns' @ n'' # ns''\n\ngoal (1 subgoal):\n 1. n' postdominates n", "then"], ["proof (chain)\npicking this:\n  sourcenodes as = ns' @ n'' # ns''", "obtain as' as'' a\n      where as'':\"sourcenodes as'' = ns''\" and as:\"as=as'@a#as''\"\n      and source:\"sourcenode a = n''\""], ["proof (prove)\nusing this:\n  sourcenodes as = ns' @ n'' # ns''\n\ngoal (1 subgoal):\n 1. (\\<And>as'' as' a.\n        \\<lbrakk>sourcenodes as'' = ns''; as = as' @ a # as'';\n         sourcenode a = n''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim:map_append_append_maps simp:sourcenodes_def)"], ["proof (state)\nthis:\n  sourcenodes as'' = ns''\n  as = as' @ a # as''\n  sourcenode a = n''\n\ngoal (1 subgoal):\n 1. n' postdominates n", "from as path"], ["proof (chain)\npicking this:\n  as = as' @ a # as''\n  n -as\\<rightarrow>* (_Exit_)", "have \"n -as'@a#as''\\<rightarrow>* (_Exit_)\""], ["proof (prove)\nusing this:\n  as = as' @ a # as''\n  n -as\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. n -as' @ a # as''\\<rightarrow>* (_Exit_)", "by simp"], ["proof (state)\nthis:\n  n -as' @ a # as''\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. n' postdominates n", "with source"], ["proof (chain)\npicking this:\n  sourcenode a = n''\n  n -as' @ a # as''\\<rightarrow>* (_Exit_)", "have path':\"n'' -a#as''\\<rightarrow>* (_Exit_)\""], ["proof (prove)\nusing this:\n  sourcenode a = n''\n  n -as' @ a # as''\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. n'' -a # as''\\<rightarrow>* (_Exit_)", "by(fastforce dest:path_split_second)"], ["proof (state)\nthis:\n  n'' -a # as''\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. n' postdominates n", "with pd2"], ["proof (chain)\npicking this:\n  n' postdominates n''\n  n'' -a # as''\\<rightarrow>* (_Exit_)", "have \"n' \\<in> set(sourcenodes (a#as''))\""], ["proof (prove)\nusing this:\n  n' postdominates n''\n  n'' -a # as''\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. n' \\<in> set (sourcenodes (a # as''))", "by(auto simp:postdominate_def)"], ["proof (state)\nthis:\n  n' \\<in> set (sourcenodes (a # as''))\n\ngoal (1 subgoal):\n 1. n' postdominates n", "with as"], ["proof (chain)\npicking this:\n  as = as' @ a # as''\n  n' \\<in> set (sourcenodes (a # as''))", "have \"n' \\<in> set(sourcenodes as)\""], ["proof (prove)\nusing this:\n  as = as' @ a # as''\n  n' \\<in> set (sourcenodes (a # as''))\n\ngoal (1 subgoal):\n 1. n' \\<in> set (sourcenodes as)", "by(auto simp:sourcenodes_def)"], ["proof (state)\nthis:\n  n' \\<in> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. n' postdominates n", "}"], ["proof (state)\nthis:\n  n -?as2\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n  n' \\<in> set (sourcenodes ?as2)\n\ngoal (1 subgoal):\n 1. n' postdominates n", "with valid valid'"], ["proof (chain)\npicking this:\n  valid_node n\n  valid_node n'\n  n -?as2\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n  n' \\<in> set (sourcenodes ?as2)", "show ?thesis"], ["proof (prove)\nusing this:\n  valid_node n\n  valid_node n'\n  n -?as2\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n  n' \\<in> set (sourcenodes ?as2)\n\ngoal (1 subgoal):\n 1. n' postdominates n", "by(simp add:postdominate_def)"], ["proof (state)\nthis:\n  n' postdominates n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma postdominate_antisym:\n  assumes pd1:\"n' postdominates n\" and pd2:\"n postdominates n'\"\n  shows \"n = n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = n'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. n = n'", "from pd1"], ["proof (chain)\npicking this:\n  n' postdominates n", "have valid:\"valid_node n\" and valid':\"valid_node n'\""], ["proof (prove)\nusing this:\n  n' postdominates n\n\ngoal (1 subgoal):\n 1. valid_node n &&& valid_node n'", "by(auto simp:postdominate_def)"], ["proof (state)\nthis:\n  valid_node n\n  valid_node n'\n\ngoal (1 subgoal):\n 1. n = n'", "from valid"], ["proof (chain)\npicking this:\n  valid_node n", "obtain as where path1:\"n -as\\<rightarrow>* (_Exit_)\""], ["proof (prove)\nusing this:\n  valid_node n\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        n -as\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(fastforce dest:Exit_path)"], ["proof (state)\nthis:\n  n -as\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. n = n'", "from valid'"], ["proof (chain)\npicking this:\n  valid_node n'", "obtain as' where path2:\"n' -as'\\<rightarrow>* (_Exit_)\""], ["proof (prove)\nusing this:\n  valid_node n'\n\ngoal (1 subgoal):\n 1. (\\<And>as'.\n        n' -as'\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(fastforce dest:Exit_path)"], ["proof (state)\nthis:\n  n' -as'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. n = n'", "from pd1 path1"], ["proof (chain)\npicking this:\n  n' postdominates n\n  n -as\\<rightarrow>* (_Exit_)", "have \"\\<exists>nx \\<in> set(sourcenodes as). nx = n'\""], ["proof (prove)\nusing this:\n  n' postdominates n\n  n -as\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<exists>nx\\<in>set (sourcenodes as). nx = n'", "by(simp add:postdominate_def)"], ["proof (state)\nthis:\n  \\<exists>nx\\<in>set (sourcenodes as). nx = n'\n\ngoal (1 subgoal):\n 1. n = n'", "then"], ["proof (chain)\npicking this:\n  \\<exists>nx\\<in>set (sourcenodes as). nx = n'", "obtain ns ns' where sources:\"sourcenodes as = ns@n'#ns'\"\n    and all:\"\\<forall>nx \\<in> set ns'. nx \\<noteq> n'\""], ["proof (prove)\nusing this:\n  \\<exists>nx\\<in>set (sourcenodes as). nx = n'\n\ngoal (1 subgoal):\n 1. (\\<And>ns ns'.\n        \\<lbrakk>sourcenodes as = ns @ n' # ns';\n         \\<forall>nx\\<in>set ns'. nx \\<noteq> n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim!: rightmost_element_property)"], ["proof (state)\nthis:\n  sourcenodes as = ns @ n' # ns'\n  \\<forall>nx\\<in>set ns'. nx \\<noteq> n'\n\ngoal (1 subgoal):\n 1. n = n'", "from sources"], ["proof (chain)\npicking this:\n  sourcenodes as = ns @ n' # ns'", "obtain asx a asx' where ns':\"ns' = sourcenodes asx'\"\n    and as:\"as = asx@a#asx'\" and source:\"sourcenode a = n'\""], ["proof (prove)\nusing this:\n  sourcenodes as = ns @ n' # ns'\n\ngoal (1 subgoal):\n 1. (\\<And>asx' asx a.\n        \\<lbrakk>ns' = sourcenodes asx'; as = asx @ a # asx';\n         sourcenode a = n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim:map_append_append_maps simp:sourcenodes_def)"], ["proof (state)\nthis:\n  ns' = sourcenodes asx'\n  as = asx @ a # asx'\n  sourcenode a = n'\n\ngoal (1 subgoal):\n 1. n = n'", "from path1 as"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* (_Exit_)\n  as = asx @ a # asx'", "have \"n -asx@a#asx'\\<rightarrow>* (_Exit_)\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* (_Exit_)\n  as = asx @ a # asx'\n\ngoal (1 subgoal):\n 1. n -asx @ a # asx'\\<rightarrow>* (_Exit_)", "by simp"], ["proof (state)\nthis:\n  n -asx @ a # asx'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. n = n'", "with source"], ["proof (chain)\npicking this:\n  sourcenode a = n'\n  n -asx @ a # asx'\\<rightarrow>* (_Exit_)", "have \"n' -a#asx'\\<rightarrow>* (_Exit_)\""], ["proof (prove)\nusing this:\n  sourcenode a = n'\n  n -asx @ a # asx'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. n' -a # asx'\\<rightarrow>* (_Exit_)", "by(fastforce dest:path_split_second)"], ["proof (state)\nthis:\n  n' -a # asx'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. n = n'", "with pd2"], ["proof (chain)\npicking this:\n  n postdominates n'\n  n' -a # asx'\\<rightarrow>* (_Exit_)", "have \"n \\<in> set(sourcenodes (a#asx'))\""], ["proof (prove)\nusing this:\n  n postdominates n'\n  n' -a # asx'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. n \\<in> set (sourcenodes (a # asx'))", "by(simp add:postdominate_def)"], ["proof (state)\nthis:\n  n \\<in> set (sourcenodes (a # asx'))\n\ngoal (1 subgoal):\n 1. n = n'", "with source"], ["proof (chain)\npicking this:\n  sourcenode a = n'\n  n \\<in> set (sourcenodes (a # asx'))", "have \"n = n' \\<or> n \\<in> set(sourcenodes asx')\""], ["proof (prove)\nusing this:\n  sourcenode a = n'\n  n \\<in> set (sourcenodes (a # asx'))\n\ngoal (1 subgoal):\n 1. n = n' \\<or> n \\<in> set (sourcenodes asx')", "by(simp add:sourcenodes_def)"], ["proof (state)\nthis:\n  n = n' \\<or> n \\<in> set (sourcenodes asx')\n\ngoal (1 subgoal):\n 1. n = n'", "thus ?thesis"], ["proof (prove)\nusing this:\n  n = n' \\<or> n \\<in> set (sourcenodes asx')\n\ngoal (1 subgoal):\n 1. n = n'", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. n = n' \\<Longrightarrow> n = n'\n 2. n \\<in> set (sourcenodes asx') \\<Longrightarrow> n = n'", "assume \"n = n'\""], ["proof (state)\nthis:\n  n = n'\n\ngoal (2 subgoals):\n 1. n = n' \\<Longrightarrow> n = n'\n 2. n \\<in> set (sourcenodes asx') \\<Longrightarrow> n = n'", "thus ?thesis"], ["proof (prove)\nusing this:\n  n = n'\n\ngoal (1 subgoal):\n 1. n = n'", "."], ["proof (state)\nthis:\n  n = n'\n\ngoal (1 subgoal):\n 1. n \\<in> set (sourcenodes asx') \\<Longrightarrow> n = n'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<in> set (sourcenodes asx') \\<Longrightarrow> n = n'", "assume \"n \\<in> set(sourcenodes asx')\""], ["proof (state)\nthis:\n  n \\<in> set (sourcenodes asx')\n\ngoal (1 subgoal):\n 1. n \\<in> set (sourcenodes asx') \\<Longrightarrow> n = n'", "then"], ["proof (chain)\npicking this:\n  n \\<in> set (sourcenodes asx')", "obtain nsx' nsx'' where \"sourcenodes asx' = nsx'@n#nsx''\""], ["proof (prove)\nusing this:\n  n \\<in> set (sourcenodes asx')\n\ngoal (1 subgoal):\n 1. (\\<And>nsx' nsx''.\n        sourcenodes asx' = nsx' @ n # nsx'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(auto dest:split_list)"], ["proof (state)\nthis:\n  sourcenodes asx' = nsx' @ n # nsx''\n\ngoal (1 subgoal):\n 1. n \\<in> set (sourcenodes asx') \\<Longrightarrow> n = n'", "then"], ["proof (chain)\npicking this:\n  sourcenodes asx' = nsx' @ n # nsx''", "obtain asi asi' a' where asx':\"asx' = asi@a'#asi'\"\n      and source':\"sourcenode a' = n\""], ["proof (prove)\nusing this:\n  sourcenodes asx' = nsx' @ n # nsx''\n\ngoal (1 subgoal):\n 1. (\\<And>asi a' asi'.\n        \\<lbrakk>asx' = asi @ a' # asi'; sourcenode a' = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim:map_append_append_maps simp:sourcenodes_def)"], ["proof (state)\nthis:\n  asx' = asi @ a' # asi'\n  sourcenode a' = n\n\ngoal (1 subgoal):\n 1. n \\<in> set (sourcenodes asx') \\<Longrightarrow> n = n'", "with path1 as"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* (_Exit_)\n  as = asx @ a # asx'\n  asx' = asi @ a' # asi'\n  sourcenode a' = n", "have \"n -(asx@a#asi)@a'#asi'\\<rightarrow>* (_Exit_)\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* (_Exit_)\n  as = asx @ a # asx'\n  asx' = asi @ a' # asi'\n  sourcenode a' = n\n\ngoal (1 subgoal):\n 1. n -(asx @ a # asi) @ a' # asi'\\<rightarrow>* (_Exit_)", "by simp"], ["proof (state)\nthis:\n  n -(asx @ a # asi) @ a' # asi'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. n \\<in> set (sourcenodes asx') \\<Longrightarrow> n = n'", "with source'"], ["proof (chain)\npicking this:\n  sourcenode a' = n\n  n -(asx @ a # asi) @ a' # asi'\\<rightarrow>* (_Exit_)", "have \"n -a'#asi'\\<rightarrow>* (_Exit_)\""], ["proof (prove)\nusing this:\n  sourcenode a' = n\n  n -(asx @ a # asi) @ a' # asi'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. n -a' # asi'\\<rightarrow>* (_Exit_)", "by(fastforce dest:path_split_second)"], ["proof (state)\nthis:\n  n -a' # asi'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. n \\<in> set (sourcenodes asx') \\<Longrightarrow> n = n'", "with pd1"], ["proof (chain)\npicking this:\n  n' postdominates n\n  n -a' # asi'\\<rightarrow>* (_Exit_)", "have \"n' \\<in> set(sourcenodes (a'#asi'))\""], ["proof (prove)\nusing this:\n  n' postdominates n\n  n -a' # asi'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. n' \\<in> set (sourcenodes (a' # asi'))", "by(auto simp:postdominate_def)"], ["proof (state)\nthis:\n  n' \\<in> set (sourcenodes (a' # asi'))\n\ngoal (1 subgoal):\n 1. n \\<in> set (sourcenodes asx') \\<Longrightarrow> n = n'", "with source'"], ["proof (chain)\npicking this:\n  sourcenode a' = n\n  n' \\<in> set (sourcenodes (a' # asi'))", "have \"n' = n \\<or> n' \\<in> set(sourcenodes asi')\""], ["proof (prove)\nusing this:\n  sourcenode a' = n\n  n' \\<in> set (sourcenodes (a' # asi'))\n\ngoal (1 subgoal):\n 1. n' = n \\<or> n' \\<in> set (sourcenodes asi')", "by(simp add:sourcenodes_def)"], ["proof (state)\nthis:\n  n' = n \\<or> n' \\<in> set (sourcenodes asi')\n\ngoal (1 subgoal):\n 1. n \\<in> set (sourcenodes asx') \\<Longrightarrow> n = n'", "thus ?thesis"], ["proof (prove)\nusing this:\n  n' = n \\<or> n' \\<in> set (sourcenodes asi')\n\ngoal (1 subgoal):\n 1. n = n'", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. n' = n \\<Longrightarrow> n = n'\n 2. n' \\<in> set (sourcenodes asi') \\<Longrightarrow> n = n'", "assume \"n' = n\""], ["proof (state)\nthis:\n  n' = n\n\ngoal (2 subgoals):\n 1. n' = n \\<Longrightarrow> n = n'\n 2. n' \\<in> set (sourcenodes asi') \\<Longrightarrow> n = n'", "thus ?thesis"], ["proof (prove)\nusing this:\n  n' = n\n\ngoal (1 subgoal):\n 1. n = n'", "by(rule sym)"], ["proof (state)\nthis:\n  n = n'\n\ngoal (1 subgoal):\n 1. n' \\<in> set (sourcenodes asi') \\<Longrightarrow> n = n'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n' \\<in> set (sourcenodes asi') \\<Longrightarrow> n = n'", "assume \"n' \\<in> set(sourcenodes asi')\""], ["proof (state)\nthis:\n  n' \\<in> set (sourcenodes asi')\n\ngoal (1 subgoal):\n 1. n' \\<in> set (sourcenodes asi') \\<Longrightarrow> n = n'", "with asx' ns'"], ["proof (chain)\npicking this:\n  asx' = asi @ a' # asi'\n  ns' = sourcenodes asx'\n  n' \\<in> set (sourcenodes asi')", "have \"n' \\<in> set ns'\""], ["proof (prove)\nusing this:\n  asx' = asi @ a' # asi'\n  ns' = sourcenodes asx'\n  n' \\<in> set (sourcenodes asi')\n\ngoal (1 subgoal):\n 1. n' \\<in> set ns'", "by(simp add:sourcenodes_def)"], ["proof (state)\nthis:\n  n' \\<in> set ns'\n\ngoal (1 subgoal):\n 1. n' \\<in> set (sourcenodes asi') \\<Longrightarrow> n = n'", "with all"], ["proof (chain)\npicking this:\n  \\<forall>nx\\<in>set ns'. nx \\<noteq> n'\n  n' \\<in> set ns'", "have False"], ["proof (prove)\nusing this:\n  \\<forall>nx\\<in>set ns'. nx \\<noteq> n'\n  n' \\<in> set ns'\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. n' \\<in> set (sourcenodes asi') \\<Longrightarrow> n = n'", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. n = n'", "by simp"], ["proof (state)\nthis:\n  n = n'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n = n'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n = n'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma postdominate_path_branch:\n  assumes \"n -as\\<rightarrow>* n''\" and \"n' postdominates n''\" and \"\\<not> n' postdominates n\"  \n  obtains a as' as'' where \"as = as'@a#as''\" and \"valid_edge a\"\n  and \"\\<not> n' postdominates (sourcenode a)\" and \"n' postdominates (targetnode a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as' a as''.\n        \\<lbrakk>as = as' @ a # as''; valid_edge a;\n         \\<not> n' postdominates sourcenode a;\n         n' postdominates targetnode a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(atomize_elim)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>as' a as''.\n       as = as' @ a # as'' \\<and>\n       valid_edge a \\<and>\n       \\<not> n' postdominates sourcenode a \\<and>\n       n' postdominates targetnode a", "from assms"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* n''\n  n' postdominates n''\n  \\<not> n' postdominates n", "show \"\\<exists>as' a as''. as = as'@a#as'' \\<and> valid_edge a \\<and> \n    \\<not> n' postdominates (sourcenode a) \\<and> n' postdominates (targetnode a)\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n''\n  n' postdominates n''\n  \\<not> n' postdominates n\n\ngoal (1 subgoal):\n 1. \\<exists>as' a as''.\n       as = as' @ a # as'' \\<and>\n       valid_edge a \\<and>\n       \\<not> n' postdominates sourcenode a \\<and>\n       n' postdominates targetnode a", "proof(induct rule:path.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n; n' postdominates n;\n        \\<not> n' postdominates n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as' a as''.\n                            [] = as' @ a # as'' \\<and>\n                            valid_edge a \\<and>\n                            \\<not> n' postdominates sourcenode a \\<and>\n                            n' postdominates targetnode a\n 2. \\<And>n'' as n'a a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n'a;\n        \\<lbrakk>n' postdominates n'a; \\<not> n' postdominates n''\\<rbrakk>\n        \\<Longrightarrow> \\<exists>as' a as''.\n                             as = as' @ a # as'' \\<and>\n                             valid_edge a \\<and>\n                             \\<not> n' postdominates sourcenode a \\<and>\n                             n' postdominates targetnode a;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        n' postdominates n'a; \\<not> n' postdominates n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as' aa as''.\n                            a # as = as' @ aa # as'' \\<and>\n                            valid_edge aa \\<and>\n                            \\<not> n' postdominates sourcenode aa \\<and>\n                            n' postdominates targetnode aa", "case (Cons_path n'' as nx a n)"], ["proof (state)\nthis:\n  n'' -as\\<rightarrow>* nx\n  \\<lbrakk>n' postdominates nx; \\<not> n' postdominates n''\\<rbrakk>\n  \\<Longrightarrow> \\<exists>as' a as''.\n                       as = as' @ a # as'' \\<and>\n                       valid_edge a \\<and>\n                       \\<not> n' postdominates sourcenode a \\<and>\n                       n' postdominates targetnode a\n  valid_edge a\n  sourcenode a = n\n  targetnode a = n''\n  n' postdominates nx\n  \\<not> n' postdominates n\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n; n' postdominates n;\n        \\<not> n' postdominates n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as' a as''.\n                            [] = as' @ a # as'' \\<and>\n                            valid_edge a \\<and>\n                            \\<not> n' postdominates sourcenode a \\<and>\n                            n' postdominates targetnode a\n 2. \\<And>n'' as n'a a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n'a;\n        \\<lbrakk>n' postdominates n'a; \\<not> n' postdominates n''\\<rbrakk>\n        \\<Longrightarrow> \\<exists>as' a as''.\n                             as = as' @ a # as'' \\<and>\n                             valid_edge a \\<and>\n                             \\<not> n' postdominates sourcenode a \\<and>\n                             n' postdominates targetnode a;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        n' postdominates n'a; \\<not> n' postdominates n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as' aa as''.\n                            a # as = as' @ aa # as'' \\<and>\n                            valid_edge aa \\<and>\n                            \\<not> n' postdominates sourcenode aa \\<and>\n                            n' postdominates targetnode aa", "note IH = \\<open>\\<lbrakk>n' postdominates nx; \\<not> n' postdominates n''\\<rbrakk>\n      \\<Longrightarrow> \\<exists>as' a as''. as = as'@a#as'' \\<and> valid_edge a \\<and>\n        \\<not> n' postdominates sourcenode a \\<and> n' postdominates targetnode a\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>n' postdominates nx; \\<not> n' postdominates n''\\<rbrakk>\n  \\<Longrightarrow> \\<exists>as' a as''.\n                       as = as' @ a # as'' \\<and>\n                       valid_edge a \\<and>\n                       \\<not> n' postdominates sourcenode a \\<and>\n                       n' postdominates targetnode a\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n; n' postdominates n;\n        \\<not> n' postdominates n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as' a as''.\n                            [] = as' @ a # as'' \\<and>\n                            valid_edge a \\<and>\n                            \\<not> n' postdominates sourcenode a \\<and>\n                            n' postdominates targetnode a\n 2. \\<And>n'' as n'a a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n'a;\n        \\<lbrakk>n' postdominates n'a; \\<not> n' postdominates n''\\<rbrakk>\n        \\<Longrightarrow> \\<exists>as' a as''.\n                             as = as' @ a # as'' \\<and>\n                             valid_edge a \\<and>\n                             \\<not> n' postdominates sourcenode a \\<and>\n                             n' postdominates targetnode a;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        n' postdominates n'a; \\<not> n' postdominates n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as' aa as''.\n                            a # as = as' @ aa # as'' \\<and>\n                            valid_edge aa \\<and>\n                            \\<not> n' postdominates sourcenode aa \\<and>\n                            n' postdominates targetnode aa", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>as' aa as''.\n       a # as = as' @ aa # as'' \\<and>\n       valid_edge aa \\<and>\n       \\<not> n' postdominates sourcenode aa \\<and>\n       n' postdominates targetnode aa", "proof(cases \"n' postdominates n''\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n' postdominates n'' \\<Longrightarrow>\n    \\<exists>as' aa as''.\n       a # as = as' @ aa # as'' \\<and>\n       valid_edge aa \\<and>\n       \\<not> n' postdominates sourcenode aa \\<and>\n       n' postdominates targetnode aa\n 2. \\<not> n' postdominates n'' \\<Longrightarrow>\n    \\<exists>as' aa as''.\n       a # as = as' @ aa # as'' \\<and>\n       valid_edge aa \\<and>\n       \\<not> n' postdominates sourcenode aa \\<and>\n       n' postdominates targetnode aa", "case True"], ["proof (state)\nthis:\n  n' postdominates n''\n\ngoal (2 subgoals):\n 1. n' postdominates n'' \\<Longrightarrow>\n    \\<exists>as' aa as''.\n       a # as = as' @ aa # as'' \\<and>\n       valid_edge aa \\<and>\n       \\<not> n' postdominates sourcenode aa \\<and>\n       n' postdominates targetnode aa\n 2. \\<not> n' postdominates n'' \\<Longrightarrow>\n    \\<exists>as' aa as''.\n       a # as = as' @ aa # as'' \\<and>\n       valid_edge aa \\<and>\n       \\<not> n' postdominates sourcenode aa \\<and>\n       n' postdominates targetnode aa", "with \\<open>\\<not> n' postdominates n\\<close> \\<open>sourcenode a = n\\<close> \\<open>targetnode a = n''\\<close> \n        \\<open>valid_edge a\\<close>"], ["proof (chain)\npicking this:\n  \\<not> n' postdominates n\n  sourcenode a = n\n  targetnode a = n''\n  valid_edge a\n  n' postdominates n''", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> n' postdominates n\n  sourcenode a = n\n  targetnode a = n''\n  valid_edge a\n  n' postdominates n''\n\ngoal (1 subgoal):\n 1. \\<exists>as' aa as''.\n       a # as = as' @ aa # as'' \\<and>\n       valid_edge aa \\<and>\n       \\<not> n' postdominates sourcenode aa \\<and>\n       n' postdominates targetnode aa", "by blast"], ["proof (state)\nthis:\n  \\<exists>as' aa as''.\n     a # as = as' @ aa # as'' \\<and>\n     valid_edge aa \\<and>\n     \\<not> n' postdominates sourcenode aa \\<and>\n     n' postdominates targetnode aa\n\ngoal (1 subgoal):\n 1. \\<not> n' postdominates n'' \\<Longrightarrow>\n    \\<exists>as' aa as''.\n       a # as = as' @ aa # as'' \\<and>\n       valid_edge aa \\<and>\n       \\<not> n' postdominates sourcenode aa \\<and>\n       n' postdominates targetnode aa", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n' postdominates n'' \\<Longrightarrow>\n    \\<exists>as' aa as''.\n       a # as = as' @ aa # as'' \\<and>\n       valid_edge aa \\<and>\n       \\<not> n' postdominates sourcenode aa \\<and>\n       n' postdominates targetnode aa", "case False"], ["proof (state)\nthis:\n  \\<not> n' postdominates n''\n\ngoal (1 subgoal):\n 1. \\<not> n' postdominates n'' \\<Longrightarrow>\n    \\<exists>as' aa as''.\n       a # as = as' @ aa # as'' \\<and>\n       valid_edge aa \\<and>\n       \\<not> n' postdominates sourcenode aa \\<and>\n       n' postdominates targetnode aa", "from IH[OF \\<open>n' postdominates nx\\<close> this]"], ["proof (chain)\npicking this:\n  \\<exists>as' a as''.\n     as = as' @ a # as'' \\<and>\n     valid_edge a \\<and>\n     \\<not> n' postdominates sourcenode a \\<and>\n     n' postdominates targetnode a", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>as' a as''.\n     as = as' @ a # as'' \\<and>\n     valid_edge a \\<and>\n     \\<not> n' postdominates sourcenode a \\<and>\n     n' postdominates targetnode a\n\ngoal (1 subgoal):\n 1. \\<exists>as' aa as''.\n       a # as = as' @ aa # as'' \\<and>\n       valid_edge aa \\<and>\n       \\<not> n' postdominates sourcenode aa \\<and>\n       n' postdominates targetnode aa", "by clarsimp(rule_tac x=\"a#as'\" in exI,clarsimp)"], ["proof (state)\nthis:\n  \\<exists>as' aa as''.\n     a # as = as' @ aa # as'' \\<and>\n     valid_edge aa \\<and>\n     \\<not> n' postdominates sourcenode aa \\<and>\n     n' postdominates targetnode aa\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>as' aa as''.\n     a # as = as' @ aa # as'' \\<and>\n     valid_edge aa \\<and>\n     \\<not> n' postdominates sourcenode aa \\<and>\n     n' postdominates targetnode aa\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n; n' postdominates n;\n        \\<not> n' postdominates n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as' a as''.\n                            [] = as' @ a # as'' \\<and>\n                            valid_edge a \\<and>\n                            \\<not> n' postdominates sourcenode a \\<and>\n                            n' postdominates targetnode a", "qed simp"], ["proof (state)\nthis:\n  \\<exists>as' a as''.\n     as = as' @ a # as'' \\<and>\n     valid_edge a \\<and>\n     \\<not> n' postdominates sourcenode a \\<and>\n     n' postdominates targetnode a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Exit_no_postdominator:\n  \"(_Exit_) postdominates n \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (_Exit_) postdominates n \\<Longrightarrow> False", "by(fastforce dest:Exit_path simp:postdominate_def)"], ["", "lemma postdominate_path_targetnode:\n  assumes \"n' postdominates n\" and \"n -as\\<rightarrow>* n''\" and \"n' \\<notin> set(sourcenodes as)\"\n  shows \"n' postdominates n''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n' postdominates n''", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. n' postdominates n''", "from \\<open>n' postdominates n\\<close>"], ["proof (chain)\npicking this:\n  n' postdominates n", "have \"valid_node n\" and \"valid_node n'\"\n    and all:\"\\<forall>as''. n -as''\\<rightarrow>* (_Exit_) \\<longrightarrow> n' \\<in> set(sourcenodes as'')\""], ["proof (prove)\nusing this:\n  n' postdominates n\n\ngoal (1 subgoal):\n 1. valid_node n &&&\n    valid_node n' &&&\n    \\<forall>as''.\n       n -as''\\<rightarrow>* (_Exit_) \\<longrightarrow>\n       n' \\<in> set (sourcenodes as'')", "by(simp_all add:postdominate_def)"], ["proof (state)\nthis:\n  valid_node n\n  valid_node n'\n  \\<forall>as''.\n     n -as''\\<rightarrow>* (_Exit_) \\<longrightarrow>\n     n' \\<in> set (sourcenodes as'')\n\ngoal (1 subgoal):\n 1. n' postdominates n''", "from \\<open>n -as\\<rightarrow>* n''\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* n''", "have \"valid_node n''\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n''\n\ngoal (1 subgoal):\n 1. valid_node n''", "by(fastforce dest:path_valid_node)"], ["proof (state)\nthis:\n  valid_node n''\n\ngoal (1 subgoal):\n 1. n' postdominates n''", "have \"\\<forall>as''. n'' -as''\\<rightarrow>* (_Exit_) \\<longrightarrow> n' \\<in> set(sourcenodes as'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>as''.\n       n'' -as''\\<rightarrow>* (_Exit_) \\<longrightarrow>\n       n' \\<in> set (sourcenodes as'')", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>as''.\n               n'' -as''\\<rightarrow>* (_Exit_) \\<longrightarrow>\n               n' \\<in> set (sourcenodes as'')) \\<Longrightarrow>\n    False", "assume \"\\<not> (\\<forall>as''. n'' -as''\\<rightarrow>* (_Exit_) \\<longrightarrow> n' \\<in> set (sourcenodes as''))\""], ["proof (state)\nthis:\n  \\<not> (\\<forall>as''.\n             n'' -as''\\<rightarrow>* (_Exit_) \\<longrightarrow>\n             n' \\<in> set (sourcenodes as''))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>as''.\n               n'' -as''\\<rightarrow>* (_Exit_) \\<longrightarrow>\n               n' \\<in> set (sourcenodes as'')) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>as''.\n             n'' -as''\\<rightarrow>* (_Exit_) \\<longrightarrow>\n             n' \\<in> set (sourcenodes as''))", "obtain as'' where \"n'' -as''\\<rightarrow>* (_Exit_)\"\n      and \"n' \\<notin> set (sourcenodes as'')\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>as''.\n             n'' -as''\\<rightarrow>* (_Exit_) \\<longrightarrow>\n             n' \\<in> set (sourcenodes as''))\n\ngoal (1 subgoal):\n 1. (\\<And>as''.\n        \\<lbrakk>n'' -as''\\<rightarrow>* (_Exit_);\n         n' \\<notin> set (sourcenodes as'')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  n'' -as''\\<rightarrow>* (_Exit_)\n  n' \\<notin> set (sourcenodes as'')\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>as''.\n               n'' -as''\\<rightarrow>* (_Exit_) \\<longrightarrow>\n               n' \\<in> set (sourcenodes as'')) \\<Longrightarrow>\n    False", "from \\<open>n -as\\<rightarrow>* n''\\<close> \\<open>n'' -as''\\<rightarrow>* (_Exit_)\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* n''\n  n'' -as''\\<rightarrow>* (_Exit_)", "have \"n -as@as''\\<rightarrow>* (_Exit_)\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n''\n  n'' -as''\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. n -as @ as''\\<rightarrow>* (_Exit_)", "by(rule path_Append)"], ["proof (state)\nthis:\n  n -as @ as''\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>as''.\n               n'' -as''\\<rightarrow>* (_Exit_) \\<longrightarrow>\n               n' \\<in> set (sourcenodes as'')) \\<Longrightarrow>\n    False", "with \\<open>n' \\<notin> set(sourcenodes as)\\<close> \\<open>n' \\<notin> set (sourcenodes as'')\\<close>"], ["proof (chain)\npicking this:\n  n' \\<notin> set (sourcenodes as)\n  n' \\<notin> set (sourcenodes as'')\n  n -as @ as''\\<rightarrow>* (_Exit_)", "have \"n' \\<notin> set (sourcenodes (as@as''))\""], ["proof (prove)\nusing this:\n  n' \\<notin> set (sourcenodes as)\n  n' \\<notin> set (sourcenodes as'')\n  n -as @ as''\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. n' \\<notin> set (sourcenodes (as @ as''))", "by(simp add:sourcenodes_def)"], ["proof (state)\nthis:\n  n' \\<notin> set (sourcenodes (as @ as''))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>as''.\n               n'' -as''\\<rightarrow>* (_Exit_) \\<longrightarrow>\n               n' \\<in> set (sourcenodes as'')) \\<Longrightarrow>\n    False", "with \\<open>n -as@as''\\<rightarrow>* (_Exit_)\\<close> \\<open>n' postdominates n\\<close>"], ["proof (chain)\npicking this:\n  n -as @ as''\\<rightarrow>* (_Exit_)\n  n' postdominates n\n  n' \\<notin> set (sourcenodes (as @ as''))", "show False"], ["proof (prove)\nusing this:\n  n -as @ as''\\<rightarrow>* (_Exit_)\n  n' postdominates n\n  n' \\<notin> set (sourcenodes (as @ as''))\n\ngoal (1 subgoal):\n 1. False", "by(simp add:postdominate_def)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>as''.\n     n'' -as''\\<rightarrow>* (_Exit_) \\<longrightarrow>\n     n' \\<in> set (sourcenodes as'')\n\ngoal (1 subgoal):\n 1. n' postdominates n''", "with \\<open>valid_node n'\\<close> \\<open>valid_node n''\\<close>"], ["proof (chain)\npicking this:\n  valid_node n'\n  valid_node n''\n  \\<forall>as''.\n     n'' -as''\\<rightarrow>* (_Exit_) \\<longrightarrow>\n     n' \\<in> set (sourcenodes as'')", "show ?thesis"], ["proof (prove)\nusing this:\n  valid_node n'\n  valid_node n''\n  \\<forall>as''.\n     n'' -as''\\<rightarrow>* (_Exit_) \\<longrightarrow>\n     n' \\<in> set (sourcenodes as'')\n\ngoal (1 subgoal):\n 1. n' postdominates n''", "by(simp add:postdominate_def)"], ["proof (state)\nthis:\n  n' postdominates n''\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_postdominate_source_not_postdominate_target:\n  assumes \"\\<not> n postdominates (sourcenode a)\" and \"valid_node n\" and \"valid_edge a\"\n  obtains ax where \"sourcenode a = sourcenode ax\" and \"valid_edge ax\"\n  and \"\\<not> n postdominates targetnode ax\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ax.\n        \\<lbrakk>sourcenode a = sourcenode ax; valid_edge ax;\n         \\<not> n postdominates targetnode ax\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(atomize_elim)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>ax.\n       sourcenode a = sourcenode ax \\<and>\n       valid_edge ax \\<and> \\<not> n postdominates targetnode ax", "show \"\\<exists>ax. sourcenode a = sourcenode ax \\<and> valid_edge ax \\<and> \n    \\<not> n postdominates targetnode ax\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ax.\n       sourcenode a = sourcenode ax \\<and>\n       valid_edge ax \\<and> \\<not> n postdominates targetnode ax", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>ax.\n       sourcenode a = sourcenode ax \\<and>\n       valid_edge ax \\<and> \\<not> n postdominates targetnode ax", "from assms"], ["proof (chain)\npicking this:\n  \\<not> n postdominates sourcenode a\n  valid_node n\n  valid_edge a", "obtain asx \n      where \"sourcenode a -asx\\<rightarrow>* (_Exit_)\"\n      and \"n \\<notin> set(sourcenodes asx)\""], ["proof (prove)\nusing this:\n  \\<not> n postdominates sourcenode a\n  valid_node n\n  valid_edge a\n\ngoal (1 subgoal):\n 1. (\\<And>asx.\n        \\<lbrakk>sourcenode a -asx\\<rightarrow>* (_Exit_);\n         n \\<notin> set (sourcenodes asx)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp:postdominate_def)"], ["proof (state)\nthis:\n  sourcenode a -asx\\<rightarrow>* (_Exit_)\n  n \\<notin> set (sourcenodes asx)\n\ngoal (1 subgoal):\n 1. \\<exists>ax.\n       sourcenode a = sourcenode ax \\<and>\n       valid_edge ax \\<and> \\<not> n postdominates targetnode ax", "from \\<open>sourcenode a -asx\\<rightarrow>* (_Exit_)\\<close> \\<open>valid_edge a\\<close>"], ["proof (chain)\npicking this:\n  sourcenode a -asx\\<rightarrow>* (_Exit_)\n  valid_edge a", "obtain ax asx' where [simp]:\"asx = ax#asx'\""], ["proof (prove)\nusing this:\n  sourcenode a -asx\\<rightarrow>* (_Exit_)\n  valid_edge a\n\ngoal (1 subgoal):\n 1. (\\<And>ax asx'.\n        asx = ax # asx' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>ax asx'. asx = ax # asx' \\<Longrightarrow> thesis;\n     sourcenode a -asx\\<rightarrow>* (_Exit_); valid_edge a\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply(erule path.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>\\<And>ax asx'. asx = ax # asx' \\<Longrightarrow> thesis;\n        valid_edge a; sourcenode a = n; asx = []; (_Exit_) = n;\n        valid_node n\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>n'' as n' aa n.\n       \\<lbrakk>\\<And>ax asx'. asx = ax # asx' \\<Longrightarrow> thesis;\n        valid_edge a; sourcenode a = n; asx = aa # as; (_Exit_) = n';\n        n'' -as\\<rightarrow>* n'; valid_edge aa; sourcenode aa = n;\n        targetnode aa = n''\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply(drule_tac s=\"(_Exit_)\" in sym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>\\<And>ax asx'. asx = ax # asx' \\<Longrightarrow> thesis;\n        valid_edge a; sourcenode a = n; asx = []; valid_node n;\n        n = (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>n'' as n' aa n.\n       \\<lbrakk>\\<And>ax asx'. asx = ax # asx' \\<Longrightarrow> thesis;\n        valid_edge a; sourcenode a = n; asx = aa # as; (_Exit_) = n';\n        n'' -as\\<rightarrow>* n'; valid_edge aa; sourcenode aa = n;\n        targetnode aa = n''\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_edge a; sourcenode a = (_Exit_); asx = [];\n        n = (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>n'' as n' aa n.\n       \\<lbrakk>\\<And>ax asx'. asx = ax # asx' \\<Longrightarrow> thesis;\n        valid_edge a; sourcenode a = n; asx = aa # as; (_Exit_) = n';\n        n'' -as\\<rightarrow>* n'; valid_edge aa; sourcenode aa = n;\n        targetnode aa = n''\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply(drule Exit_source)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>sourcenode a = (_Exit_); asx = []; n = (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> sourcenode a = (_Exit_)\n 2. \\<And>n.\n       \\<lbrakk>sourcenode a = (_Exit_); asx = []; n = (_Exit_);\n        False\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>n'' as n' aa n.\n       \\<lbrakk>\\<And>ax asx'. asx = ax # asx' \\<Longrightarrow> thesis;\n        valid_edge a; sourcenode a = n; asx = aa # as; (_Exit_) = n';\n        n'' -as\\<rightarrow>* n'; valid_edge aa; sourcenode aa = n;\n        targetnode aa = n''\\<rbrakk>\n       \\<Longrightarrow> thesis", "by simp_all"], ["proof (state)\nthis:\n  asx = ax # asx'\n\ngoal (1 subgoal):\n 1. \\<exists>ax.\n       sourcenode a = sourcenode ax \\<and>\n       valid_edge ax \\<and> \\<not> n postdominates targetnode ax", "with \\<open>sourcenode a -asx\\<rightarrow>* (_Exit_)\\<close>"], ["proof (chain)\npicking this:\n  sourcenode a -asx\\<rightarrow>* (_Exit_)\n  asx = ax # asx'", "have \"sourcenode a -[]@ax#asx'\\<rightarrow>* (_Exit_)\""], ["proof (prove)\nusing this:\n  sourcenode a -asx\\<rightarrow>* (_Exit_)\n  asx = ax # asx'\n\ngoal (1 subgoal):\n 1. sourcenode a -[] @ ax # asx'\\<rightarrow>* (_Exit_)", "by simp"], ["proof (state)\nthis:\n  sourcenode a -[] @ ax # asx'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<exists>ax.\n       sourcenode a = sourcenode ax \\<and>\n       valid_edge ax \\<and> \\<not> n postdominates targetnode ax", "hence \"valid_edge ax\" and \"sourcenode a = sourcenode ax\"\n      and \"targetnode ax -asx'\\<rightarrow>* (_Exit_)\""], ["proof (prove)\nusing this:\n  sourcenode a -[] @ ax # asx'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. valid_edge ax &&&\n    sourcenode a = sourcenode ax &&&\n    targetnode ax -asx'\\<rightarrow>* (_Exit_)", "by(fastforce dest:path_split)+"], ["proof (state)\nthis:\n  valid_edge ax\n  sourcenode a = sourcenode ax\n  targetnode ax -asx'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<exists>ax.\n       sourcenode a = sourcenode ax \\<and>\n       valid_edge ax \\<and> \\<not> n postdominates targetnode ax", "with \\<open>n \\<notin> set(sourcenodes asx)\\<close>"], ["proof (chain)\npicking this:\n  n \\<notin> set (sourcenodes asx)\n  valid_edge ax\n  sourcenode a = sourcenode ax\n  targetnode ax -asx'\\<rightarrow>* (_Exit_)", "have \"\\<not> n postdominates targetnode ax\""], ["proof (prove)\nusing this:\n  n \\<notin> set (sourcenodes asx)\n  valid_edge ax\n  sourcenode a = sourcenode ax\n  targetnode ax -asx'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<not> n postdominates targetnode ax", "by(fastforce simp:postdominate_def sourcenodes_def)"], ["proof (state)\nthis:\n  \\<not> n postdominates targetnode ax\n\ngoal (1 subgoal):\n 1. \\<exists>ax.\n       sourcenode a = sourcenode ax \\<and>\n       valid_edge ax \\<and> \\<not> n postdominates targetnode ax", "with \\<open>sourcenode a = sourcenode ax\\<close> \\<open>valid_edge ax\\<close>"], ["proof (chain)\npicking this:\n  sourcenode a = sourcenode ax\n  valid_edge ax\n  \\<not> n postdominates targetnode ax", "show ?thesis"], ["proof (prove)\nusing this:\n  sourcenode a = sourcenode ax\n  valid_edge ax\n  \\<not> n postdominates targetnode ax\n\ngoal (1 subgoal):\n 1. \\<exists>ax.\n       sourcenode a = sourcenode ax \\<and>\n       valid_edge ax \\<and> \\<not> n postdominates targetnode ax", "by blast"], ["proof (state)\nthis:\n  \\<exists>ax.\n     sourcenode a = sourcenode ax \\<and>\n     valid_edge ax \\<and> \\<not> n postdominates targetnode ax\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>ax.\n     sourcenode a = sourcenode ax \\<and>\n     valid_edge ax \\<and> \\<not> n postdominates targetnode ax\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inner_node_Entry_edge:\n  assumes \"inner_node n\" \n  obtains a where \"valid_edge a\" and \"inner_node (targetnode a)\"\n  and \"sourcenode a = (_Entry_)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>valid_edge a; inner_node (targetnode a);\n         sourcenode a = (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(atomize_elim)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)", "from \\<open>inner_node n\\<close>"], ["proof (chain)\npicking this:\n  inner_node n", "have \"valid_node n\""], ["proof (prove)\nusing this:\n  inner_node n\n\ngoal (1 subgoal):\n 1. valid_node n", "by(rule inner_is_valid)"], ["proof (state)\nthis:\n  valid_node n\n\ngoal (1 subgoal):\n 1. \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)", "then"], ["proof (chain)\npicking this:\n  valid_node n", "obtain as where \"(_Entry_) -as\\<rightarrow>* n\""], ["proof (prove)\nusing this:\n  valid_node n\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        (_Entry_) -as\\<rightarrow>* n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(fastforce dest:Entry_path)"], ["proof (state)\nthis:\n  (_Entry_) -as\\<rightarrow>* n\n\ngoal (1 subgoal):\n 1. \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)", "show \"\\<exists>a. valid_edge a \\<and> inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)", "proof(cases \"as = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. as = [] \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)\n 2. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)", "case True"], ["proof (state)\nthis:\n  as = []\n\ngoal (2 subgoals):\n 1. as = [] \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)\n 2. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)", "with \\<open>inner_node n\\<close> \\<open>(_Entry_) -as\\<rightarrow>* n\\<close>"], ["proof (chain)\npicking this:\n  inner_node n\n  (_Entry_) -as\\<rightarrow>* n\n  as = []", "have False"], ["proof (prove)\nusing this:\n  inner_node n\n  (_Entry_) -as\\<rightarrow>* n\n  as = []\n\ngoal (1 subgoal):\n 1. False", "by(fastforce simp:inner_node_def)"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. as = [] \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)\n 2. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)", "by simp"], ["proof (state)\nthis:\n  \\<exists>a.\n     valid_edge a \\<and>\n     inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)", "case False"], ["proof (state)\nthis:\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)", "with \\<open>(_Entry_) -as\\<rightarrow>* n\\<close>"], ["proof (chain)\npicking this:\n  (_Entry_) -as\\<rightarrow>* n\n  as \\<noteq> []", "obtain a' as' where \"as = a'#as'\"\n      and \"(_Entry_) = sourcenode a'\" and \"valid_edge a'\" \n      and \"targetnode a' -as'\\<rightarrow>* n\""], ["proof (prove)\nusing this:\n  (_Entry_) -as\\<rightarrow>* n\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>a' as'.\n        \\<lbrakk>as = a' # as'; (_Entry_) = sourcenode a'; valid_edge a';\n         targetnode a' -as'\\<rightarrow>* n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by -(erule path_split_Cons)"], ["proof (state)\nthis:\n  as = a' # as'\n  (_Entry_) = sourcenode a'\n  valid_edge a'\n  targetnode a' -as'\\<rightarrow>* n\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)", "from \\<open>valid_edge a'\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a'", "have \"valid_node (targetnode a')\""], ["proof (prove)\nusing this:\n  valid_edge a'\n\ngoal (1 subgoal):\n 1. valid_node (targetnode a')", "by simp"], ["proof (state)\nthis:\n  valid_node (targetnode a')\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)", "thus ?thesis"], ["proof (prove)\nusing this:\n  valid_node (targetnode a')\n\ngoal (1 subgoal):\n 1. \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)", "proof(cases \"targetnode a'\" rule:valid_node_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. targetnode a' = (_Entry_) \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)\n 2. targetnode a' = (_Exit_) \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)\n 3. inner_node (targetnode a') \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)", "case Entry"], ["proof (state)\nthis:\n  targetnode a' = (_Entry_)\n\ngoal (3 subgoals):\n 1. targetnode a' = (_Entry_) \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)\n 2. targetnode a' = (_Exit_) \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)\n 3. inner_node (targetnode a') \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)", "from \\<open>valid_edge a'\\<close> this"], ["proof (chain)\npicking this:\n  valid_edge a'\n  targetnode a' = (_Entry_)", "have False"], ["proof (prove)\nusing this:\n  valid_edge a'\n  targetnode a' = (_Entry_)\n\ngoal (1 subgoal):\n 1. False", "by(rule Entry_target)"], ["proof (state)\nthis:\n  False\n\ngoal (3 subgoals):\n 1. targetnode a' = (_Entry_) \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)\n 2. targetnode a' = (_Exit_) \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)\n 3. inner_node (targetnode a') \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)", "by simp"], ["proof (state)\nthis:\n  \\<exists>a.\n     valid_edge a \\<and>\n     inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)\n\ngoal (2 subgoals):\n 1. targetnode a' = (_Exit_) \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)\n 2. inner_node (targetnode a') \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. targetnode a' = (_Exit_) \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)\n 2. inner_node (targetnode a') \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)", "case Exit"], ["proof (state)\nthis:\n  targetnode a' = (_Exit_)\n\ngoal (2 subgoals):\n 1. targetnode a' = (_Exit_) \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)\n 2. inner_node (targetnode a') \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)", "with \\<open>targetnode a' -as'\\<rightarrow>* n\\<close> \\<open>inner_node n\\<close>"], ["proof (chain)\npicking this:\n  targetnode a' -as'\\<rightarrow>* n\n  inner_node n\n  targetnode a' = (_Exit_)", "have False"], ["proof (prove)\nusing this:\n  targetnode a' -as'\\<rightarrow>* n\n  inner_node n\n  targetnode a' = (_Exit_)\n\ngoal (1 subgoal):\n 1. False", "by simp (drule path_Exit_source,auto simp:inner_node_def)"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. targetnode a' = (_Exit_) \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)\n 2. inner_node (targetnode a') \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)", "by simp"], ["proof (state)\nthis:\n  \\<exists>a.\n     valid_edge a \\<and>\n     inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)\n\ngoal (1 subgoal):\n 1. inner_node (targetnode a') \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. inner_node (targetnode a') \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)", "case inner"], ["proof (state)\nthis:\n  inner_node (targetnode a')\n\ngoal (1 subgoal):\n 1. inner_node (targetnode a') \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)", "with \\<open>valid_edge a'\\<close> \\<open>(_Entry_) = sourcenode a'\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a'\n  (_Entry_) = sourcenode a'\n  inner_node (targetnode a')", "show ?thesis"], ["proof (prove)\nusing this:\n  valid_edge a'\n  (_Entry_) = sourcenode a'\n  inner_node (targetnode a')\n\ngoal (1 subgoal):\n 1. \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)", "by simp blast"], ["proof (state)\nthis:\n  \\<exists>a.\n     valid_edge a \\<and>\n     inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>a.\n     valid_edge a \\<and>\n     inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>a.\n     valid_edge a \\<and>\n     inner_node (targetnode a) \\<and> sourcenode a = (_Entry_)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inner_node_Exit_edge:\n  assumes \"inner_node n\" \n  obtains a where \"valid_edge a\" and \"inner_node (sourcenode a)\"\n  and \"targetnode a = (_Exit_)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>valid_edge a; inner_node (sourcenode a);\n         targetnode a = (_Exit_)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(atomize_elim)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)", "from \\<open>inner_node n\\<close>"], ["proof (chain)\npicking this:\n  inner_node n", "have \"valid_node n\""], ["proof (prove)\nusing this:\n  inner_node n\n\ngoal (1 subgoal):\n 1. valid_node n", "by(rule inner_is_valid)"], ["proof (state)\nthis:\n  valid_node n\n\ngoal (1 subgoal):\n 1. \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)", "then"], ["proof (chain)\npicking this:\n  valid_node n", "obtain as where \"n -as\\<rightarrow>* (_Exit_)\""], ["proof (prove)\nusing this:\n  valid_node n\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        n -as\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(fastforce dest:Exit_path)"], ["proof (state)\nthis:\n  n -as\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)", "show \"\\<exists>a. valid_edge a \\<and> inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)", "proof(cases \"as = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. as = [] \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)\n 2. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)", "case True"], ["proof (state)\nthis:\n  as = []\n\ngoal (2 subgoals):\n 1. as = [] \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)\n 2. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)", "with \\<open>inner_node n\\<close> \\<open>n -as\\<rightarrow>* (_Exit_)\\<close>"], ["proof (chain)\npicking this:\n  inner_node n\n  n -as\\<rightarrow>* (_Exit_)\n  as = []", "have False"], ["proof (prove)\nusing this:\n  inner_node n\n  n -as\\<rightarrow>* (_Exit_)\n  as = []\n\ngoal (1 subgoal):\n 1. False", "by fastforce"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. as = [] \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)\n 2. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)", "by simp"], ["proof (state)\nthis:\n  \\<exists>a.\n     valid_edge a \\<and>\n     inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)", "case False"], ["proof (state)\nthis:\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)", "with \\<open>n -as\\<rightarrow>* (_Exit_)\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* (_Exit_)\n  as \\<noteq> []", "obtain a' as' where \"as = as'@[a']\" \n      and \"n -as'\\<rightarrow>* sourcenode a'\" and \"valid_edge a'\" \n      and \"(_Exit_) = targetnode a'\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* (_Exit_)\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>as' a'.\n        \\<lbrakk>as = as' @ [a']; n -as'\\<rightarrow>* sourcenode a';\n         valid_edge a'; (_Exit_) = targetnode a'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by -(erule path_split_snoc)"], ["proof (state)\nthis:\n  as = as' @ [a']\n  n -as'\\<rightarrow>* sourcenode a'\n  valid_edge a'\n  (_Exit_) = targetnode a'\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)", "from \\<open>valid_edge a'\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a'", "have \"valid_node (sourcenode a')\""], ["proof (prove)\nusing this:\n  valid_edge a'\n\ngoal (1 subgoal):\n 1. valid_node (sourcenode a')", "by simp"], ["proof (state)\nthis:\n  valid_node (sourcenode a')\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)", "thus ?thesis"], ["proof (prove)\nusing this:\n  valid_node (sourcenode a')\n\ngoal (1 subgoal):\n 1. \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)", "proof(cases \"sourcenode a'\" rule:valid_node_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. sourcenode a' = (_Entry_) \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)\n 2. sourcenode a' = (_Exit_) \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)\n 3. inner_node (sourcenode a') \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)", "case Entry"], ["proof (state)\nthis:\n  sourcenode a' = (_Entry_)\n\ngoal (3 subgoals):\n 1. sourcenode a' = (_Entry_) \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)\n 2. sourcenode a' = (_Exit_) \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)\n 3. inner_node (sourcenode a') \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)", "with \\<open>n -as'\\<rightarrow>* sourcenode a'\\<close> \\<open>inner_node n\\<close>"], ["proof (chain)\npicking this:\n  n -as'\\<rightarrow>* sourcenode a'\n  inner_node n\n  sourcenode a' = (_Entry_)", "have False"], ["proof (prove)\nusing this:\n  n -as'\\<rightarrow>* sourcenode a'\n  inner_node n\n  sourcenode a' = (_Entry_)\n\ngoal (1 subgoal):\n 1. False", "by simp (drule path_Entry_target,auto simp:inner_node_def)"], ["proof (state)\nthis:\n  False\n\ngoal (3 subgoals):\n 1. sourcenode a' = (_Entry_) \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)\n 2. sourcenode a' = (_Exit_) \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)\n 3. inner_node (sourcenode a') \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)", "by simp"], ["proof (state)\nthis:\n  \\<exists>a.\n     valid_edge a \\<and>\n     inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)\n\ngoal (2 subgoals):\n 1. sourcenode a' = (_Exit_) \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)\n 2. inner_node (sourcenode a') \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. sourcenode a' = (_Exit_) \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)\n 2. inner_node (sourcenode a') \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)", "case Exit"], ["proof (state)\nthis:\n  sourcenode a' = (_Exit_)\n\ngoal (2 subgoals):\n 1. sourcenode a' = (_Exit_) \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)\n 2. inner_node (sourcenode a') \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)", "from \\<open>valid_edge a'\\<close> this"], ["proof (chain)\npicking this:\n  valid_edge a'\n  sourcenode a' = (_Exit_)", "have False"], ["proof (prove)\nusing this:\n  valid_edge a'\n  sourcenode a' = (_Exit_)\n\ngoal (1 subgoal):\n 1. False", "by(rule Exit_source)"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. sourcenode a' = (_Exit_) \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)\n 2. inner_node (sourcenode a') \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)", "by simp"], ["proof (state)\nthis:\n  \\<exists>a.\n     valid_edge a \\<and>\n     inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)\n\ngoal (1 subgoal):\n 1. inner_node (sourcenode a') \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. inner_node (sourcenode a') \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)", "case inner"], ["proof (state)\nthis:\n  inner_node (sourcenode a')\n\ngoal (1 subgoal):\n 1. inner_node (sourcenode a') \\<Longrightarrow>\n    \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)", "with \\<open>valid_edge a'\\<close> \\<open>(_Exit_) = targetnode a'\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a'\n  (_Exit_) = targetnode a'\n  inner_node (sourcenode a')", "show ?thesis"], ["proof (prove)\nusing this:\n  valid_edge a'\n  (_Exit_) = targetnode a'\n  inner_node (sourcenode a')\n\ngoal (1 subgoal):\n 1. \\<exists>a.\n       valid_edge a \\<and>\n       inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)", "by simp blast"], ["proof (state)\nthis:\n  \\<exists>a.\n     valid_edge a \\<and>\n     inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>a.\n     valid_edge a \\<and>\n     inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>a.\n     valid_edge a \\<and>\n     inner_node (sourcenode a) \\<and> targetnode a = (_Exit_)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Strong Postdomination\\<close>"], ["", "locale StrongPostdomination = \n  Postdomination sourcenode targetnode kind valid_edge Entry Exit \n  for sourcenode :: \"'edge \\<Rightarrow> 'node\" and targetnode :: \"'edge \\<Rightarrow> 'node\"\n  and kind :: \"'edge \\<Rightarrow> 'state edge_kind\" and valid_edge :: \"'edge \\<Rightarrow> bool\"\n  and Entry :: \"'node\" (\"'('_Entry'_')\") and Exit :: \"'node\" (\"'('_Exit'_')\") +\n  assumes successor_set_finite: \"valid_node n \\<Longrightarrow> \n  finite {n'. \\<exists>a'. valid_edge a' \\<and> sourcenode a' = n \\<and> targetnode a' = n'}\"\n\nbegin"], ["", "definition  strong_postdominate :: \"'node \\<Rightarrow> 'node \\<Rightarrow> bool\" \n(\"_ strongly-postdominates _\" [51,0])\nwhere strong_postdominate_def:\"n' strongly-postdominates n \\<equiv>\n  (n' postdominates n \\<and> \n  (\\<exists>k \\<ge> 1. \\<forall>as nx. n -as\\<rightarrow>* nx \\<and> \n                    length as \\<ge> k \\<longrightarrow> n' \\<in> set(sourcenodes as)))\""], ["", "lemma strong_postdominate_prop_smaller_path:\n  assumes all:\"\\<forall>as nx. n -as\\<rightarrow>* nx \\<and> length as \\<ge> k \\<longrightarrow> n' \\<in> set(sourcenodes as)\"\n  and \"n -as\\<rightarrow>* n''\" and \"length as \\<ge> k\"\n  obtains as' as'' where \"n -as'\\<rightarrow>* n'\" and \"length as' < k\" and \"n' -as''\\<rightarrow>* n''\"\n  and \"as = as'@as''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as' as''.\n        \\<lbrakk>n -as'\\<rightarrow>* n'; length as' < k;\n         n' -as''\\<rightarrow>* n''; as = as' @ as''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(atomize_elim)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>as' as''.\n       n -as'\\<rightarrow>* n' \\<and>\n       length as' < k \\<and>\n       n' -as''\\<rightarrow>* n'' \\<and> as = as' @ as''", "show \"\\<exists>as' as''. n -as'\\<rightarrow>* n' \\<and> length as' < k \\<and> n' -as''\\<rightarrow>* n'' \\<and> as = as'@as''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>as' as''.\n       n -as'\\<rightarrow>* n' \\<and>\n       length as' < k \\<and>\n       n' -as''\\<rightarrow>* n'' \\<and> as = as' @ as''", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>as' as''.\n       n -as'\\<rightarrow>* n' \\<and>\n       length as' < k \\<and>\n       n' -as''\\<rightarrow>* n'' \\<and> as = as' @ as'' \\<Longrightarrow>\n    False", "assume \"\\<not> (\\<exists>as' as''. n -as'\\<rightarrow>* n' \\<and> length as' < k \\<and> n' -as''\\<rightarrow>* n'' \\<and> \n                          as = as'@as'')\""], ["proof (state)\nthis:\n  \\<nexists>as' as''.\n     n -as'\\<rightarrow>* n' \\<and>\n     length as' < k \\<and> n' -as''\\<rightarrow>* n'' \\<and> as = as' @ as''\n\ngoal (1 subgoal):\n 1. \\<nexists>as' as''.\n       n -as'\\<rightarrow>* n' \\<and>\n       length as' < k \\<and>\n       n' -as''\\<rightarrow>* n'' \\<and> as = as' @ as'' \\<Longrightarrow>\n    False", "hence all':\"\\<forall>as' as''. n -as'\\<rightarrow>* n' \\<and> n' -as''\\<rightarrow>* n'' \\<and> as = as'@as'' \n      \\<longrightarrow> length as' \\<ge> k\""], ["proof (prove)\nusing this:\n  \\<nexists>as' as''.\n     n -as'\\<rightarrow>* n' \\<and>\n     length as' < k \\<and> n' -as''\\<rightarrow>* n'' \\<and> as = as' @ as''\n\ngoal (1 subgoal):\n 1. \\<forall>as' as''.\n       n -as'\\<rightarrow>* n' \\<and>\n       n' -as''\\<rightarrow>* n'' \\<and> as = as' @ as'' \\<longrightarrow>\n       k \\<le> length as'", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>as' as''.\n     n -as'\\<rightarrow>* n' \\<and>\n     n' -as''\\<rightarrow>* n'' \\<and> as = as' @ as'' \\<longrightarrow>\n     k \\<le> length as'\n\ngoal (1 subgoal):\n 1. \\<nexists>as' as''.\n       n -as'\\<rightarrow>* n' \\<and>\n       length as' < k \\<and>\n       n' -as''\\<rightarrow>* n'' \\<and> as = as' @ as'' \\<Longrightarrow>\n    False", "from all \\<open>n -as\\<rightarrow>* n''\\<close> \\<open>length as \\<ge> k\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>as nx.\n     n -as\\<rightarrow>* nx \\<and> k \\<le> length as \\<longrightarrow>\n     n' \\<in> set (sourcenodes as)\n  n -as\\<rightarrow>* n''\n  k \\<le> length as", "have \"\\<exists>nx \\<in> set(sourcenodes as). nx = n'\""], ["proof (prove)\nusing this:\n  \\<forall>as nx.\n     n -as\\<rightarrow>* nx \\<and> k \\<le> length as \\<longrightarrow>\n     n' \\<in> set (sourcenodes as)\n  n -as\\<rightarrow>* n''\n  k \\<le> length as\n\ngoal (1 subgoal):\n 1. \\<exists>nx\\<in>set (sourcenodes as). nx = n'", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>nx\\<in>set (sourcenodes as). nx = n'\n\ngoal (1 subgoal):\n 1. \\<nexists>as' as''.\n       n -as'\\<rightarrow>* n' \\<and>\n       length as' < k \\<and>\n       n' -as''\\<rightarrow>* n'' \\<and> as = as' @ as'' \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<exists>nx\\<in>set (sourcenodes as). nx = n'", "obtain ns ns' where \"sourcenodes as = ns@n'#ns'\"\n      and \"\\<forall>nx \\<in> set ns. nx \\<noteq> n'\""], ["proof (prove)\nusing this:\n  \\<exists>nx\\<in>set (sourcenodes as). nx = n'\n\ngoal (1 subgoal):\n 1. (\\<And>ns ns'.\n        \\<lbrakk>sourcenodes as = ns @ n' # ns';\n         \\<forall>nx\\<in>set ns. nx \\<noteq> n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim!:split_list_first_propE)"], ["proof (state)\nthis:\n  sourcenodes as = ns @ n' # ns'\n  \\<forall>nx\\<in>set ns. nx \\<noteq> n'\n\ngoal (1 subgoal):\n 1. \\<nexists>as' as''.\n       n -as'\\<rightarrow>* n' \\<and>\n       length as' < k \\<and>\n       n' -as''\\<rightarrow>* n'' \\<and> as = as' @ as'' \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  sourcenodes as = ns @ n' # ns'\n  \\<forall>nx\\<in>set ns. nx \\<noteq> n'", "obtain asx a asx' where [simp]:\"ns = sourcenodes asx\"\n      and [simp]:\"as = asx@a#asx'\" and \"sourcenode a = n'\""], ["proof (prove)\nusing this:\n  sourcenodes as = ns @ n' # ns'\n  \\<forall>nx\\<in>set ns. nx \\<noteq> n'\n\ngoal (1 subgoal):\n 1. (\\<And>asx a asx'.\n        \\<lbrakk>ns = sourcenodes asx; as = asx @ a # asx';\n         sourcenode a = n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim:map_append_append_maps simp:sourcenodes_def)"], ["proof (state)\nthis:\n  ns = sourcenodes asx\n  as = asx @ a # asx'\n  sourcenode a = n'\n\ngoal (1 subgoal):\n 1. \\<nexists>as' as''.\n       n -as'\\<rightarrow>* n' \\<and>\n       length as' < k \\<and>\n       n' -as''\\<rightarrow>* n'' \\<and> as = as' @ as'' \\<Longrightarrow>\n    False", "from \\<open>n -as\\<rightarrow>* n''\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* n''", "have \"n -asx@a#asx'\\<rightarrow>* n''\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n''\n\ngoal (1 subgoal):\n 1. n -asx @ a # asx'\\<rightarrow>* n''", "by simp"], ["proof (state)\nthis:\n  n -asx @ a # asx'\\<rightarrow>* n''\n\ngoal (1 subgoal):\n 1. \\<nexists>as' as''.\n       n -as'\\<rightarrow>* n' \\<and>\n       length as' < k \\<and>\n       n' -as''\\<rightarrow>* n'' \\<and> as = as' @ as'' \\<Longrightarrow>\n    False", "with \\<open>sourcenode a = n'\\<close>"], ["proof (chain)\npicking this:\n  sourcenode a = n'\n  n -asx @ a # asx'\\<rightarrow>* n''", "have \"n -asx\\<rightarrow>* n'\" and \"valid_edge a\"\n      and \"targetnode a -asx'\\<rightarrow>* n''\""], ["proof (prove)\nusing this:\n  sourcenode a = n'\n  n -asx @ a # asx'\\<rightarrow>* n''\n\ngoal (1 subgoal):\n 1. n -asx\\<rightarrow>* n' &&&\n    valid_edge a &&& targetnode a -asx'\\<rightarrow>* n''", "by(fastforce dest:path_split)+"], ["proof (state)\nthis:\n  n -asx\\<rightarrow>* n'\n  valid_edge a\n  targetnode a -asx'\\<rightarrow>* n''\n\ngoal (1 subgoal):\n 1. \\<nexists>as' as''.\n       n -as'\\<rightarrow>* n' \\<and>\n       length as' < k \\<and>\n       n' -as''\\<rightarrow>* n'' \\<and> as = as' @ as'' \\<Longrightarrow>\n    False", "with \\<open>sourcenode a = n'\\<close>"], ["proof (chain)\npicking this:\n  sourcenode a = n'\n  n -asx\\<rightarrow>* n'\n  valid_edge a\n  targetnode a -asx'\\<rightarrow>* n''", "have \"n' -a#asx'\\<rightarrow>* n''\""], ["proof (prove)\nusing this:\n  sourcenode a = n'\n  n -asx\\<rightarrow>* n'\n  valid_edge a\n  targetnode a -asx'\\<rightarrow>* n''\n\ngoal (1 subgoal):\n 1. n' -a # asx'\\<rightarrow>* n''", "by(fastforce intro:Cons_path)"], ["proof (state)\nthis:\n  n' -a # asx'\\<rightarrow>* n''\n\ngoal (1 subgoal):\n 1. \\<nexists>as' as''.\n       n -as'\\<rightarrow>* n' \\<and>\n       length as' < k \\<and>\n       n' -as''\\<rightarrow>* n'' \\<and> as = as' @ as'' \\<Longrightarrow>\n    False", "with \\<open>n -asx\\<rightarrow>* n'\\<close> all'"], ["proof (chain)\npicking this:\n  n -asx\\<rightarrow>* n'\n  \\<forall>as' as''.\n     n -as'\\<rightarrow>* n' \\<and>\n     n' -as''\\<rightarrow>* n'' \\<and> as = as' @ as'' \\<longrightarrow>\n     k \\<le> length as'\n  n' -a # asx'\\<rightarrow>* n''", "have \"length asx \\<ge> k\""], ["proof (prove)\nusing this:\n  n -asx\\<rightarrow>* n'\n  \\<forall>as' as''.\n     n -as'\\<rightarrow>* n' \\<and>\n     n' -as''\\<rightarrow>* n'' \\<and> as = as' @ as'' \\<longrightarrow>\n     k \\<le> length as'\n  n' -a # asx'\\<rightarrow>* n''\n\ngoal (1 subgoal):\n 1. k \\<le> length asx", "by simp"], ["proof (state)\nthis:\n  k \\<le> length asx\n\ngoal (1 subgoal):\n 1. \\<nexists>as' as''.\n       n -as'\\<rightarrow>* n' \\<and>\n       length as' < k \\<and>\n       n' -as''\\<rightarrow>* n'' \\<and> as = as' @ as'' \\<Longrightarrow>\n    False", "with \\<open>n -asx\\<rightarrow>* n'\\<close> all"], ["proof (chain)\npicking this:\n  n -asx\\<rightarrow>* n'\n  \\<forall>as nx.\n     n -as\\<rightarrow>* nx \\<and> k \\<le> length as \\<longrightarrow>\n     n' \\<in> set (sourcenodes as)\n  k \\<le> length asx", "have \"n' \\<in> set(sourcenodes asx)\""], ["proof (prove)\nusing this:\n  n -asx\\<rightarrow>* n'\n  \\<forall>as nx.\n     n -as\\<rightarrow>* nx \\<and> k \\<le> length as \\<longrightarrow>\n     n' \\<in> set (sourcenodes as)\n  k \\<le> length asx\n\ngoal (1 subgoal):\n 1. n' \\<in> set (sourcenodes asx)", "by fastforce"], ["proof (state)\nthis:\n  n' \\<in> set (sourcenodes asx)\n\ngoal (1 subgoal):\n 1. \\<nexists>as' as''.\n       n -as'\\<rightarrow>* n' \\<and>\n       length as' < k \\<and>\n       n' -as''\\<rightarrow>* n'' \\<and> as = as' @ as'' \\<Longrightarrow>\n    False", "with \\<open>\\<forall>nx \\<in> set ns. nx \\<noteq> n'\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>nx\\<in>set ns. nx \\<noteq> n'\n  n' \\<in> set (sourcenodes asx)", "show False"], ["proof (prove)\nusing this:\n  \\<forall>nx\\<in>set ns. nx \\<noteq> n'\n  n' \\<in> set (sourcenodes asx)\n\ngoal (1 subgoal):\n 1. False", "by fastforce"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>as' as''.\n     n -as'\\<rightarrow>* n' \\<and>\n     length as' < k \\<and> n' -as''\\<rightarrow>* n'' \\<and> as = as' @ as''\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma strong_postdominate_refl:\n  assumes \"valid_node n\" and \"n \\<noteq> (_Exit_)\"\n  shows \"n strongly-postdominates n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n strongly-postdominates n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. n strongly-postdominates n", "from assms"], ["proof (chain)\npicking this:\n  valid_node n\n  n \\<noteq> (_Exit_)", "have \"n postdominates n\""], ["proof (prove)\nusing this:\n  valid_node n\n  n \\<noteq> (_Exit_)\n\ngoal (1 subgoal):\n 1. n postdominates n", "by(rule postdominate_refl)"], ["proof (state)\nthis:\n  n postdominates n\n\ngoal (1 subgoal):\n 1. n strongly-postdominates n", "{"], ["proof (state)\nthis:\n  n postdominates n\n\ngoal (1 subgoal):\n 1. n strongly-postdominates n", "fix as nx"], ["proof (state)\ngoal (1 subgoal):\n 1. n strongly-postdominates n", "assume \"n -as\\<rightarrow>* nx\" and \"length as \\<ge> 1\""], ["proof (state)\nthis:\n  n -as\\<rightarrow>* nx\n  1 \\<le> length as\n\ngoal (1 subgoal):\n 1. n strongly-postdominates n", "then"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* nx\n  1 \\<le> length as", "obtain a' as' where [simp]:\"as = a'#as'\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* nx\n  1 \\<le> length as\n\ngoal (1 subgoal):\n 1. (\\<And>a' as'. as = a' # as' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases as) auto"], ["proof (state)\nthis:\n  as = a' # as'\n\ngoal (1 subgoal):\n 1. n strongly-postdominates n", "with \\<open>n -as\\<rightarrow>* nx\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* nx\n  as = a' # as'", "have \"n -[]@a'#as'\\<rightarrow>* nx\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* nx\n  as = a' # as'\n\ngoal (1 subgoal):\n 1. n -[] @ a' # as'\\<rightarrow>* nx", "by simp"], ["proof (state)\nthis:\n  n -[] @ a' # as'\\<rightarrow>* nx\n\ngoal (1 subgoal):\n 1. n strongly-postdominates n", "hence \"n = sourcenode a'\""], ["proof (prove)\nusing this:\n  n -[] @ a' # as'\\<rightarrow>* nx\n\ngoal (1 subgoal):\n 1. n = sourcenode a'", "by(fastforce dest:path_split)"], ["proof (state)\nthis:\n  n = sourcenode a'\n\ngoal (1 subgoal):\n 1. n strongly-postdominates n", "hence \"n \\<in> set(sourcenodes as)\""], ["proof (prove)\nusing this:\n  n = sourcenode a'\n\ngoal (1 subgoal):\n 1. n \\<in> set (sourcenodes as)", "by(simp add:sourcenodes_def)"], ["proof (state)\nthis:\n  n \\<in> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. n strongly-postdominates n", "}"], ["proof (state)\nthis:\n  \\<lbrakk>n -?as2\\<rightarrow>* ?nx2; 1 \\<le> length ?as2\\<rbrakk>\n  \\<Longrightarrow> n \\<in> set (sourcenodes ?as2)\n\ngoal (1 subgoal):\n 1. n strongly-postdominates n", "hence \"\\<forall>as nx. n -as\\<rightarrow>* nx \\<and> length as \\<ge> 1 \\<longrightarrow> n \\<in> set(sourcenodes as)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>n -?as2\\<rightarrow>* ?nx2; 1 \\<le> length ?as2\\<rbrakk>\n  \\<Longrightarrow> n \\<in> set (sourcenodes ?as2)\n\ngoal (1 subgoal):\n 1. \\<forall>as nx.\n       n -as\\<rightarrow>* nx \\<and> 1 \\<le> length as \\<longrightarrow>\n       n \\<in> set (sourcenodes as)", "by auto"], ["proof (state)\nthis:\n  \\<forall>as nx.\n     n -as\\<rightarrow>* nx \\<and> 1 \\<le> length as \\<longrightarrow>\n     n \\<in> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. n strongly-postdominates n", "hence \"\\<exists>k \\<ge> 1. \\<forall>as nx. n -as\\<rightarrow>* nx \\<and> length as \\<ge> k \\<longrightarrow> n \\<in> set(sourcenodes as)\""], ["proof (prove)\nusing this:\n  \\<forall>as nx.\n     n -as\\<rightarrow>* nx \\<and> 1 \\<le> length as \\<longrightarrow>\n     n \\<in> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<ge>1.\n       \\<forall>as nx.\n          n -as\\<rightarrow>* nx \\<and> k \\<le> length as \\<longrightarrow>\n          n \\<in> set (sourcenodes as)", "by blast"], ["proof (state)\nthis:\n  \\<exists>k\\<ge>1.\n     \\<forall>as nx.\n        n -as\\<rightarrow>* nx \\<and> k \\<le> length as \\<longrightarrow>\n        n \\<in> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. n strongly-postdominates n", "with \\<open>n postdominates n\\<close>"], ["proof (chain)\npicking this:\n  n postdominates n\n  \\<exists>k\\<ge>1.\n     \\<forall>as nx.\n        n -as\\<rightarrow>* nx \\<and> k \\<le> length as \\<longrightarrow>\n        n \\<in> set (sourcenodes as)", "show ?thesis"], ["proof (prove)\nusing this:\n  n postdominates n\n  \\<exists>k\\<ge>1.\n     \\<forall>as nx.\n        n -as\\<rightarrow>* nx \\<and> k \\<le> length as \\<longrightarrow>\n        n \\<in> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. n strongly-postdominates n", "by(simp add:strong_postdominate_def)"], ["proof (state)\nthis:\n  n strongly-postdominates n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma strong_postdominate_trans:\n  assumes \"n'' strongly-postdominates n\" and \"n' strongly-postdominates n''\"\n  shows \"n' strongly-postdominates n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n' strongly-postdominates n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. n' strongly-postdominates n", "from \\<open>n'' strongly-postdominates n\\<close>"], ["proof (chain)\npicking this:\n  n'' strongly-postdominates n", "have \"n'' postdominates n\"\n    and paths1:\"\\<exists>k \\<ge> 1. \\<forall>as nx. n -as\\<rightarrow>* nx \\<and> length as \\<ge> k \n             \\<longrightarrow> n'' \\<in> set(sourcenodes as)\""], ["proof (prove)\nusing this:\n  n'' strongly-postdominates n\n\ngoal (1 subgoal):\n 1. n'' postdominates n &&&\n    \\<exists>k\\<ge>1.\n       \\<forall>as nx.\n          n -as\\<rightarrow>* nx \\<and> k \\<le> length as \\<longrightarrow>\n          n'' \\<in> set (sourcenodes as)", "by(auto simp only:strong_postdominate_def)"], ["proof (state)\nthis:\n  n'' postdominates n\n  \\<exists>k\\<ge>1.\n     \\<forall>as nx.\n        n -as\\<rightarrow>* nx \\<and> k \\<le> length as \\<longrightarrow>\n        n'' \\<in> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. n' strongly-postdominates n", "from paths1"], ["proof (chain)\npicking this:\n  \\<exists>k\\<ge>1.\n     \\<forall>as nx.\n        n -as\\<rightarrow>* nx \\<and> k \\<le> length as \\<longrightarrow>\n        n'' \\<in> set (sourcenodes as)", "obtain k1 \n    where all1:\"\\<forall>as nx. n -as\\<rightarrow>* nx \\<and> length as \\<ge> k1 \\<longrightarrow> n'' \\<in> set(sourcenodes as)\"\n    and \"k1 \\<ge> 1\""], ["proof (prove)\nusing this:\n  \\<exists>k\\<ge>1.\n     \\<forall>as nx.\n        n -as\\<rightarrow>* nx \\<and> k \\<le> length as \\<longrightarrow>\n        n'' \\<in> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. (\\<And>k1.\n        \\<lbrakk>\\<forall>as nx.\n                    n -as\\<rightarrow>* nx \\<and>\n                    k1 \\<le> length as \\<longrightarrow>\n                    n'' \\<in> set (sourcenodes as);\n         1 \\<le> k1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>as nx.\n     n -as\\<rightarrow>* nx \\<and> k1 \\<le> length as \\<longrightarrow>\n     n'' \\<in> set (sourcenodes as)\n  1 \\<le> k1\n\ngoal (1 subgoal):\n 1. n' strongly-postdominates n", "from \\<open>n' strongly-postdominates n''\\<close>"], ["proof (chain)\npicking this:\n  n' strongly-postdominates n''", "have \"n' postdominates n''\"\n    and paths2:\"\\<exists>k \\<ge> 1. \\<forall>as nx. n'' -as\\<rightarrow>* nx \\<and> length as \\<ge> k \n             \\<longrightarrow> n' \\<in> set(sourcenodes as)\""], ["proof (prove)\nusing this:\n  n' strongly-postdominates n''\n\ngoal (1 subgoal):\n 1. n' postdominates n'' &&&\n    \\<exists>k\\<ge>1.\n       \\<forall>as nx.\n          n'' -as\\<rightarrow>* nx \\<and>\n          k \\<le> length as \\<longrightarrow>\n          n' \\<in> set (sourcenodes as)", "by(auto simp only:strong_postdominate_def)"], ["proof (state)\nthis:\n  n' postdominates n''\n  \\<exists>k\\<ge>1.\n     \\<forall>as nx.\n        n'' -as\\<rightarrow>* nx \\<and> k \\<le> length as \\<longrightarrow>\n        n' \\<in> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. n' strongly-postdominates n", "from paths2"], ["proof (chain)\npicking this:\n  \\<exists>k\\<ge>1.\n     \\<forall>as nx.\n        n'' -as\\<rightarrow>* nx \\<and> k \\<le> length as \\<longrightarrow>\n        n' \\<in> set (sourcenodes as)", "obtain k2 \n    where all2:\"\\<forall>as nx. n'' -as\\<rightarrow>* nx \\<and> length as \\<ge> k2 \\<longrightarrow> n' \\<in> set(sourcenodes as)\"\n    and \"k2 \\<ge> 1\""], ["proof (prove)\nusing this:\n  \\<exists>k\\<ge>1.\n     \\<forall>as nx.\n        n'' -as\\<rightarrow>* nx \\<and> k \\<le> length as \\<longrightarrow>\n        n' \\<in> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. (\\<And>k2.\n        \\<lbrakk>\\<forall>as nx.\n                    n'' -as\\<rightarrow>* nx \\<and>\n                    k2 \\<le> length as \\<longrightarrow>\n                    n' \\<in> set (sourcenodes as);\n         1 \\<le> k2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>as nx.\n     n'' -as\\<rightarrow>* nx \\<and> k2 \\<le> length as \\<longrightarrow>\n     n' \\<in> set (sourcenodes as)\n  1 \\<le> k2\n\ngoal (1 subgoal):\n 1. n' strongly-postdominates n", "from \\<open>n'' postdominates n\\<close> \\<open>n' postdominates n''\\<close>"], ["proof (chain)\npicking this:\n  n'' postdominates n\n  n' postdominates n''", "have \"n' postdominates n\""], ["proof (prove)\nusing this:\n  n'' postdominates n\n  n' postdominates n''\n\ngoal (1 subgoal):\n 1. n' postdominates n", "by(rule postdominate_trans)"], ["proof (state)\nthis:\n  n' postdominates n\n\ngoal (1 subgoal):\n 1. n' strongly-postdominates n", "{"], ["proof (state)\nthis:\n  n' postdominates n\n\ngoal (1 subgoal):\n 1. n' strongly-postdominates n", "fix as nx"], ["proof (state)\ngoal (1 subgoal):\n 1. n' strongly-postdominates n", "assume \"n -as\\<rightarrow>* nx\" and \"length as \\<ge> k1 + k2\""], ["proof (state)\nthis:\n  n -as\\<rightarrow>* nx\n  k1 + k2 \\<le> length as\n\ngoal (1 subgoal):\n 1. n' strongly-postdominates n", "hence \"length as \\<ge> k1\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* nx\n  k1 + k2 \\<le> length as\n\ngoal (1 subgoal):\n 1. k1 \\<le> length as", "by fastforce"], ["proof (state)\nthis:\n  k1 \\<le> length as\n\ngoal (1 subgoal):\n 1. n' strongly-postdominates n", "with \\<open>n -as\\<rightarrow>* nx\\<close> all1"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* nx\n  \\<forall>as nx.\n     n -as\\<rightarrow>* nx \\<and> k1 \\<le> length as \\<longrightarrow>\n     n'' \\<in> set (sourcenodes as)\n  k1 \\<le> length as", "obtain asx asx' where \"n -asx\\<rightarrow>* n''\"\n      and \"length asx < k1\" and \"n'' -asx'\\<rightarrow>* nx\"\n      and [simp]:\"as = asx@asx'\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* nx\n  \\<forall>as nx.\n     n -as\\<rightarrow>* nx \\<and> k1 \\<le> length as \\<longrightarrow>\n     n'' \\<in> set (sourcenodes as)\n  k1 \\<le> length as\n\ngoal (1 subgoal):\n 1. (\\<And>asx asx'.\n        \\<lbrakk>n -asx\\<rightarrow>* n''; length asx < k1;\n         n'' -asx'\\<rightarrow>* nx; as = asx @ asx'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by -(erule strong_postdominate_prop_smaller_path)"], ["proof (state)\nthis:\n  n -asx\\<rightarrow>* n''\n  length asx < k1\n  n'' -asx'\\<rightarrow>* nx\n  as = asx @ asx'\n\ngoal (1 subgoal):\n 1. n' strongly-postdominates n", "with \\<open>length as \\<ge> k1 + k2\\<close>"], ["proof (chain)\npicking this:\n  k1 + k2 \\<le> length as\n  n -asx\\<rightarrow>* n''\n  length asx < k1\n  n'' -asx'\\<rightarrow>* nx\n  as = asx @ asx'", "have \"length asx' \\<ge> k2\""], ["proof (prove)\nusing this:\n  k1 + k2 \\<le> length as\n  n -asx\\<rightarrow>* n''\n  length asx < k1\n  n'' -asx'\\<rightarrow>* nx\n  as = asx @ asx'\n\ngoal (1 subgoal):\n 1. k2 \\<le> length asx'", "by fastforce"], ["proof (state)\nthis:\n  k2 \\<le> length asx'\n\ngoal (1 subgoal):\n 1. n' strongly-postdominates n", "with \\<open>n'' -asx'\\<rightarrow>* nx\\<close> all2"], ["proof (chain)\npicking this:\n  n'' -asx'\\<rightarrow>* nx\n  \\<forall>as nx.\n     n'' -as\\<rightarrow>* nx \\<and> k2 \\<le> length as \\<longrightarrow>\n     n' \\<in> set (sourcenodes as)\n  k2 \\<le> length asx'", "have \"n' \\<in> set(sourcenodes asx')\""], ["proof (prove)\nusing this:\n  n'' -asx'\\<rightarrow>* nx\n  \\<forall>as nx.\n     n'' -as\\<rightarrow>* nx \\<and> k2 \\<le> length as \\<longrightarrow>\n     n' \\<in> set (sourcenodes as)\n  k2 \\<le> length asx'\n\ngoal (1 subgoal):\n 1. n' \\<in> set (sourcenodes asx')", "by fastforce"], ["proof (state)\nthis:\n  n' \\<in> set (sourcenodes asx')\n\ngoal (1 subgoal):\n 1. n' strongly-postdominates n", "hence \"n' \\<in> set(sourcenodes as)\""], ["proof (prove)\nusing this:\n  n' \\<in> set (sourcenodes asx')\n\ngoal (1 subgoal):\n 1. n' \\<in> set (sourcenodes as)", "by(simp add:sourcenodes_def)"], ["proof (state)\nthis:\n  n' \\<in> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. n' strongly-postdominates n", "}"], ["proof (state)\nthis:\n  \\<lbrakk>n -?as2\\<rightarrow>* ?nx2; k1 + k2 \\<le> length ?as2\\<rbrakk>\n  \\<Longrightarrow> n' \\<in> set (sourcenodes ?as2)\n\ngoal (1 subgoal):\n 1. n' strongly-postdominates n", "with \\<open>k1 \\<ge> 1\\<close> \\<open>k2 \\<ge> 1\\<close>"], ["proof (chain)\npicking this:\n  1 \\<le> k1\n  1 \\<le> k2\n  \\<lbrakk>n -?as2\\<rightarrow>* ?nx2; k1 + k2 \\<le> length ?as2\\<rbrakk>\n  \\<Longrightarrow> n' \\<in> set (sourcenodes ?as2)", "have \"\\<exists>k \\<ge> 1. \\<forall>as nx. n -as\\<rightarrow>* nx \\<and> length as \\<ge> k \n             \\<longrightarrow> n' \\<in> set(sourcenodes as)\""], ["proof (prove)\nusing this:\n  1 \\<le> k1\n  1 \\<le> k2\n  \\<lbrakk>n -?as2\\<rightarrow>* ?nx2; k1 + k2 \\<le> length ?as2\\<rbrakk>\n  \\<Longrightarrow> n' \\<in> set (sourcenodes ?as2)\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<ge>1.\n       \\<forall>as nx.\n          n -as\\<rightarrow>* nx \\<and> k \\<le> length as \\<longrightarrow>\n          n' \\<in> set (sourcenodes as)", "by(rule_tac x=\"k1 + k2\" in exI,auto)"], ["proof (state)\nthis:\n  \\<exists>k\\<ge>1.\n     \\<forall>as nx.\n        n -as\\<rightarrow>* nx \\<and> k \\<le> length as \\<longrightarrow>\n        n' \\<in> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. n' strongly-postdominates n", "with \\<open>n' postdominates n\\<close>"], ["proof (chain)\npicking this:\n  n' postdominates n\n  \\<exists>k\\<ge>1.\n     \\<forall>as nx.\n        n -as\\<rightarrow>* nx \\<and> k \\<le> length as \\<longrightarrow>\n        n' \\<in> set (sourcenodes as)", "show ?thesis"], ["proof (prove)\nusing this:\n  n' postdominates n\n  \\<exists>k\\<ge>1.\n     \\<forall>as nx.\n        n -as\\<rightarrow>* nx \\<and> k \\<le> length as \\<longrightarrow>\n        n' \\<in> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. n' strongly-postdominates n", "by(simp add:strong_postdominate_def)"], ["proof (state)\nthis:\n  n' strongly-postdominates n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma strong_postdominate_antisym:\n  \"\\<lbrakk>n' strongly-postdominates n; n strongly-postdominates n'\\<rbrakk> \\<Longrightarrow> n = n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n' strongly-postdominates n;\n     n strongly-postdominates n'\\<rbrakk>\n    \\<Longrightarrow> n = n'", "by(fastforce intro:postdominate_antisym simp:strong_postdominate_def)"], ["", "lemma strong_postdominate_path_branch:\n  assumes \"n -as\\<rightarrow>* n''\" and \"n' strongly-postdominates n''\" \n  and \"\\<not> n' strongly-postdominates n\"\n  obtains a as' as'' where \"as = as'@a#as''\" and \"valid_edge a\"\n  and \"\\<not> n' strongly-postdominates (sourcenode a)\" \n  and \"n' strongly-postdominates (targetnode a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as' a as''.\n        \\<lbrakk>as = as' @ a # as''; valid_edge a;\n         \\<not> n' strongly-postdominates sourcenode a;\n         n' strongly-postdominates targetnode a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(atomize_elim)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>as' a as''.\n       as = as' @ a # as'' \\<and>\n       valid_edge a \\<and>\n       \\<not> n' strongly-postdominates sourcenode a \\<and>\n       n' strongly-postdominates targetnode a", "from assms"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* n''\n  n' strongly-postdominates n''\n  \\<not> n' strongly-postdominates n", "show \"\\<exists>as' a as''. as = as'@a#as'' \\<and> valid_edge a \\<and> \n    \\<not> n' strongly-postdominates (sourcenode a) \\<and> \n      n' strongly-postdominates (targetnode a)\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n''\n  n' strongly-postdominates n''\n  \\<not> n' strongly-postdominates n\n\ngoal (1 subgoal):\n 1. \\<exists>as' a as''.\n       as = as' @ a # as'' \\<and>\n       valid_edge a \\<and>\n       \\<not> n' strongly-postdominates sourcenode a \\<and>\n       n' strongly-postdominates targetnode a", "proof(induct rule:path.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n; n' strongly-postdominates n;\n        \\<not> n' strongly-postdominates n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as' a as''.\n                            [] = as' @ a # as'' \\<and>\n                            valid_edge a \\<and>\n                            \\<not> n' strongly-postdominates sourcenode\n                        a \\<and>\n                            n' strongly-postdominates targetnode a\n 2. \\<And>n'' as n'a a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n'a;\n        \\<lbrakk>n' strongly-postdominates n'a;\n         \\<not> n' strongly-postdominates n''\\<rbrakk>\n        \\<Longrightarrow> \\<exists>as' a as''.\n                             as = as' @ a # as'' \\<and>\n                             valid_edge a \\<and>\n                             \\<not> n' strongly-postdominates sourcenode\n                         a \\<and>\n                             n' strongly-postdominates targetnode a;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        n' strongly-postdominates n'a;\n        \\<not> n' strongly-postdominates n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as' aa as''.\n                            a # as = as' @ aa # as'' \\<and>\n                            valid_edge aa \\<and>\n                            \\<not> n' strongly-postdominates sourcenode\n                        aa \\<and>\n                            n' strongly-postdominates targetnode aa", "case (Cons_path n'' as nx a n)"], ["proof (state)\nthis:\n  n'' -as\\<rightarrow>* nx\n  \\<lbrakk>n' strongly-postdominates nx;\n   \\<not> n' strongly-postdominates n''\\<rbrakk>\n  \\<Longrightarrow> \\<exists>as' a as''.\n                       as = as' @ a # as'' \\<and>\n                       valid_edge a \\<and>\n                       \\<not> n' strongly-postdominates sourcenode a \\<and>\n                       n' strongly-postdominates targetnode a\n  valid_edge a\n  sourcenode a = n\n  targetnode a = n''\n  n' strongly-postdominates nx\n  \\<not> n' strongly-postdominates n\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n; n' strongly-postdominates n;\n        \\<not> n' strongly-postdominates n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as' a as''.\n                            [] = as' @ a # as'' \\<and>\n                            valid_edge a \\<and>\n                            \\<not> n' strongly-postdominates sourcenode\n                        a \\<and>\n                            n' strongly-postdominates targetnode a\n 2. \\<And>n'' as n'a a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n'a;\n        \\<lbrakk>n' strongly-postdominates n'a;\n         \\<not> n' strongly-postdominates n''\\<rbrakk>\n        \\<Longrightarrow> \\<exists>as' a as''.\n                             as = as' @ a # as'' \\<and>\n                             valid_edge a \\<and>\n                             \\<not> n' strongly-postdominates sourcenode\n                         a \\<and>\n                             n' strongly-postdominates targetnode a;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        n' strongly-postdominates n'a;\n        \\<not> n' strongly-postdominates n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as' aa as''.\n                            a # as = as' @ aa # as'' \\<and>\n                            valid_edge aa \\<and>\n                            \\<not> n' strongly-postdominates sourcenode\n                        aa \\<and>\n                            n' strongly-postdominates targetnode aa", "note IH = \\<open>\\<lbrakk>n' strongly-postdominates nx; \\<not> n' strongly-postdominates n''\\<rbrakk>\n      \\<Longrightarrow> \\<exists>as' a as''. as = as'@a#as'' \\<and> valid_edge a \\<and>\n        \\<not> n' strongly-postdominates sourcenode a \\<and> \n          n' strongly-postdominates targetnode a\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>n' strongly-postdominates nx;\n   \\<not> n' strongly-postdominates n''\\<rbrakk>\n  \\<Longrightarrow> \\<exists>as' a as''.\n                       as = as' @ a # as'' \\<and>\n                       valid_edge a \\<and>\n                       \\<not> n' strongly-postdominates sourcenode a \\<and>\n                       n' strongly-postdominates targetnode a\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n; n' strongly-postdominates n;\n        \\<not> n' strongly-postdominates n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as' a as''.\n                            [] = as' @ a # as'' \\<and>\n                            valid_edge a \\<and>\n                            \\<not> n' strongly-postdominates sourcenode\n                        a \\<and>\n                            n' strongly-postdominates targetnode a\n 2. \\<And>n'' as n'a a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n'a;\n        \\<lbrakk>n' strongly-postdominates n'a;\n         \\<not> n' strongly-postdominates n''\\<rbrakk>\n        \\<Longrightarrow> \\<exists>as' a as''.\n                             as = as' @ a # as'' \\<and>\n                             valid_edge a \\<and>\n                             \\<not> n' strongly-postdominates sourcenode\n                         a \\<and>\n                             n' strongly-postdominates targetnode a;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        n' strongly-postdominates n'a;\n        \\<not> n' strongly-postdominates n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as' aa as''.\n                            a # as = as' @ aa # as'' \\<and>\n                            valid_edge aa \\<and>\n                            \\<not> n' strongly-postdominates sourcenode\n                        aa \\<and>\n                            n' strongly-postdominates targetnode aa", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>as' aa as''.\n       a # as = as' @ aa # as'' \\<and>\n       valid_edge aa \\<and>\n       \\<not> n' strongly-postdominates sourcenode aa \\<and>\n       n' strongly-postdominates targetnode aa", "proof(cases \"n' strongly-postdominates n''\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n' strongly-postdominates n'' \\<Longrightarrow>\n    \\<exists>as' aa as''.\n       a # as = as' @ aa # as'' \\<and>\n       valid_edge aa \\<and>\n       \\<not> n' strongly-postdominates sourcenode aa \\<and>\n       n' strongly-postdominates targetnode aa\n 2. \\<not> n' strongly-postdominates n'' \\<Longrightarrow>\n    \\<exists>as' aa as''.\n       a # as = as' @ aa # as'' \\<and>\n       valid_edge aa \\<and>\n       \\<not> n' strongly-postdominates sourcenode aa \\<and>\n       n' strongly-postdominates targetnode aa", "case True"], ["proof (state)\nthis:\n  n' strongly-postdominates n''\n\ngoal (2 subgoals):\n 1. n' strongly-postdominates n'' \\<Longrightarrow>\n    \\<exists>as' aa as''.\n       a # as = as' @ aa # as'' \\<and>\n       valid_edge aa \\<and>\n       \\<not> n' strongly-postdominates sourcenode aa \\<and>\n       n' strongly-postdominates targetnode aa\n 2. \\<not> n' strongly-postdominates n'' \\<Longrightarrow>\n    \\<exists>as' aa as''.\n       a # as = as' @ aa # as'' \\<and>\n       valid_edge aa \\<and>\n       \\<not> n' strongly-postdominates sourcenode aa \\<and>\n       n' strongly-postdominates targetnode aa", "with \\<open>\\<not> n' strongly-postdominates n\\<close> \\<open>sourcenode a = n\\<close> \\<open>targetnode a = n''\\<close>\n        \\<open>valid_edge a\\<close>"], ["proof (chain)\npicking this:\n  \\<not> n' strongly-postdominates n\n  sourcenode a = n\n  targetnode a = n''\n  valid_edge a\n  n' strongly-postdominates n''", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> n' strongly-postdominates n\n  sourcenode a = n\n  targetnode a = n''\n  valid_edge a\n  n' strongly-postdominates n''\n\ngoal (1 subgoal):\n 1. \\<exists>as' aa as''.\n       a # as = as' @ aa # as'' \\<and>\n       valid_edge aa \\<and>\n       \\<not> n' strongly-postdominates sourcenode aa \\<and>\n       n' strongly-postdominates targetnode aa", "by blast"], ["proof (state)\nthis:\n  \\<exists>as' aa as''.\n     a # as = as' @ aa # as'' \\<and>\n     valid_edge aa \\<and>\n     \\<not> n' strongly-postdominates sourcenode aa \\<and>\n     n' strongly-postdominates targetnode aa\n\ngoal (1 subgoal):\n 1. \\<not> n' strongly-postdominates n'' \\<Longrightarrow>\n    \\<exists>as' aa as''.\n       a # as = as' @ aa # as'' \\<and>\n       valid_edge aa \\<and>\n       \\<not> n' strongly-postdominates sourcenode aa \\<and>\n       n' strongly-postdominates targetnode aa", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n' strongly-postdominates n'' \\<Longrightarrow>\n    \\<exists>as' aa as''.\n       a # as = as' @ aa # as'' \\<and>\n       valid_edge aa \\<and>\n       \\<not> n' strongly-postdominates sourcenode aa \\<and>\n       n' strongly-postdominates targetnode aa", "case False"], ["proof (state)\nthis:\n  \\<not> n' strongly-postdominates n''\n\ngoal (1 subgoal):\n 1. \\<not> n' strongly-postdominates n'' \\<Longrightarrow>\n    \\<exists>as' aa as''.\n       a # as = as' @ aa # as'' \\<and>\n       valid_edge aa \\<and>\n       \\<not> n' strongly-postdominates sourcenode aa \\<and>\n       n' strongly-postdominates targetnode aa", "from IH[OF \\<open>n' strongly-postdominates nx\\<close> this]"], ["proof (chain)\npicking this:\n  \\<exists>as' a as''.\n     as = as' @ a # as'' \\<and>\n     valid_edge a \\<and>\n     \\<not> n' strongly-postdominates sourcenode a \\<and>\n     n' strongly-postdominates targetnode a", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>as' a as''.\n     as = as' @ a # as'' \\<and>\n     valid_edge a \\<and>\n     \\<not> n' strongly-postdominates sourcenode a \\<and>\n     n' strongly-postdominates targetnode a\n\ngoal (1 subgoal):\n 1. \\<exists>as' aa as''.\n       a # as = as' @ aa # as'' \\<and>\n       valid_edge aa \\<and>\n       \\<not> n' strongly-postdominates sourcenode aa \\<and>\n       n' strongly-postdominates targetnode aa", "by clarsimp(rule_tac x=\"a#as'\" in exI,clarsimp)"], ["proof (state)\nthis:\n  \\<exists>as' aa as''.\n     a # as = as' @ aa # as'' \\<and>\n     valid_edge aa \\<and>\n     \\<not> n' strongly-postdominates sourcenode aa \\<and>\n     n' strongly-postdominates targetnode aa\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>as' aa as''.\n     a # as = as' @ aa # as'' \\<and>\n     valid_edge aa \\<and>\n     \\<not> n' strongly-postdominates sourcenode aa \\<and>\n     n' strongly-postdominates targetnode aa\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n; n' strongly-postdominates n;\n        \\<not> n' strongly-postdominates n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as' a as''.\n                            [] = as' @ a # as'' \\<and>\n                            valid_edge a \\<and>\n                            \\<not> n' strongly-postdominates sourcenode\n                        a \\<and>\n                            n' strongly-postdominates targetnode a", "qed simp"], ["proof (state)\nthis:\n  \\<exists>as' a as''.\n     as = as' @ a # as'' \\<and>\n     valid_edge a \\<and>\n     \\<not> n' strongly-postdominates sourcenode a \\<and>\n     n' strongly-postdominates targetnode a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Exit_no_strong_postdominator:\n  \"\\<lbrakk>(_Exit_) strongly-postdominates n; n -as\\<rightarrow>* (_Exit_)\\<rbrakk> \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(_Exit_) strongly-postdominates n;\n     n -as\\<rightarrow>* (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> False", "by(fastforce intro:Exit_no_postdominator path_valid_node simp:strong_postdominate_def)"], ["", "lemma strong_postdominate_path_targetnode:\n  assumes \"n' strongly-postdominates n\" and \"n -as\\<rightarrow>* n''\"\n  and \"n' \\<notin> set(sourcenodes as)\"\n  shows \"n' strongly-postdominates n''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n' strongly-postdominates n''", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. n' strongly-postdominates n''", "from \\<open>n' strongly-postdominates n\\<close>"], ["proof (chain)\npicking this:\n  n' strongly-postdominates n", "have \"n' postdominates n\"\n    and \"\\<exists>k \\<ge> 1. \\<forall>as nx. n -as\\<rightarrow>* nx \\<and> length as \\<ge> k \n             \\<longrightarrow> n' \\<in> set(sourcenodes as)\""], ["proof (prove)\nusing this:\n  n' strongly-postdominates n\n\ngoal (1 subgoal):\n 1. n' postdominates n &&&\n    \\<exists>k\\<ge>1.\n       \\<forall>as nx.\n          n -as\\<rightarrow>* nx \\<and> k \\<le> length as \\<longrightarrow>\n          n' \\<in> set (sourcenodes as)", "by(auto simp only:strong_postdominate_def)"], ["proof (state)\nthis:\n  n' postdominates n\n  \\<exists>k\\<ge>1.\n     \\<forall>as nx.\n        n -as\\<rightarrow>* nx \\<and> k \\<le> length as \\<longrightarrow>\n        n' \\<in> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. n' strongly-postdominates n''", "then"], ["proof (chain)\npicking this:\n  n' postdominates n\n  \\<exists>k\\<ge>1.\n     \\<forall>as nx.\n        n -as\\<rightarrow>* nx \\<and> k \\<le> length as \\<longrightarrow>\n        n' \\<in> set (sourcenodes as)", "obtain k where \"k \\<ge> 1\"\n    and paths:\"\\<forall>as nx. n -as\\<rightarrow>* nx \\<and> length as \\<ge> k \n                         \\<longrightarrow> n' \\<in> set(sourcenodes as)\""], ["proof (prove)\nusing this:\n  n' postdominates n\n  \\<exists>k\\<ge>1.\n     \\<forall>as nx.\n        n -as\\<rightarrow>* nx \\<and> k \\<le> length as \\<longrightarrow>\n        n' \\<in> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>1 \\<le> k;\n         \\<forall>as nx.\n            n -as\\<rightarrow>* nx \\<and>\n            k \\<le> length as \\<longrightarrow>\n            n' \\<in> set (sourcenodes as)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  1 \\<le> k\n  \\<forall>as nx.\n     n -as\\<rightarrow>* nx \\<and> k \\<le> length as \\<longrightarrow>\n     n' \\<in> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. n' strongly-postdominates n''", "from \\<open>n' postdominates n\\<close> \\<open>n -as\\<rightarrow>* n''\\<close> \\<open>n' \\<notin> set(sourcenodes as)\\<close>"], ["proof (chain)\npicking this:\n  n' postdominates n\n  n -as\\<rightarrow>* n''\n  n' \\<notin> set (sourcenodes as)", "have \"n' postdominates n''\""], ["proof (prove)\nusing this:\n  n' postdominates n\n  n -as\\<rightarrow>* n''\n  n' \\<notin> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. n' postdominates n''", "by(rule postdominate_path_targetnode)"], ["proof (state)\nthis:\n  n' postdominates n''\n\ngoal (1 subgoal):\n 1. n' strongly-postdominates n''", "{"], ["proof (state)\nthis:\n  n' postdominates n''\n\ngoal (1 subgoal):\n 1. n' strongly-postdominates n''", "fix as' nx"], ["proof (state)\ngoal (1 subgoal):\n 1. n' strongly-postdominates n''", "assume \"n'' -as'\\<rightarrow>* nx\" and \"length as' \\<ge> k\""], ["proof (state)\nthis:\n  n'' -as'\\<rightarrow>* nx\n  k \\<le> length as'\n\ngoal (1 subgoal):\n 1. n' strongly-postdominates n''", "with \\<open>n -as\\<rightarrow>* n''\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* n''\n  n'' -as'\\<rightarrow>* nx\n  k \\<le> length as'", "have \"n -as@as'\\<rightarrow>* nx\" and \"length (as@as') \\<ge> k\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n''\n  n'' -as'\\<rightarrow>* nx\n  k \\<le> length as'\n\ngoal (1 subgoal):\n 1. n -as @ as'\\<rightarrow>* nx &&& k \\<le> length (as @ as')", "by(auto intro:path_Append)"], ["proof (state)\nthis:\n  n -as @ as'\\<rightarrow>* nx\n  k \\<le> length (as @ as')\n\ngoal (1 subgoal):\n 1. n' strongly-postdominates n''", "with paths"], ["proof (chain)\npicking this:\n  \\<forall>as nx.\n     n -as\\<rightarrow>* nx \\<and> k \\<le> length as \\<longrightarrow>\n     n' \\<in> set (sourcenodes as)\n  n -as @ as'\\<rightarrow>* nx\n  k \\<le> length (as @ as')", "have \"n' \\<in> set(sourcenodes (as@as'))\""], ["proof (prove)\nusing this:\n  \\<forall>as nx.\n     n -as\\<rightarrow>* nx \\<and> k \\<le> length as \\<longrightarrow>\n     n' \\<in> set (sourcenodes as)\n  n -as @ as'\\<rightarrow>* nx\n  k \\<le> length (as @ as')\n\ngoal (1 subgoal):\n 1. n' \\<in> set (sourcenodes (as @ as'))", "by fastforce"], ["proof (state)\nthis:\n  n' \\<in> set (sourcenodes (as @ as'))\n\ngoal (1 subgoal):\n 1. n' strongly-postdominates n''", "with \\<open>n' \\<notin> set(sourcenodes as)\\<close>"], ["proof (chain)\npicking this:\n  n' \\<notin> set (sourcenodes as)\n  n' \\<in> set (sourcenodes (as @ as'))", "have \"n' \\<in> set(sourcenodes as')\""], ["proof (prove)\nusing this:\n  n' \\<notin> set (sourcenodes as)\n  n' \\<in> set (sourcenodes (as @ as'))\n\ngoal (1 subgoal):\n 1. n' \\<in> set (sourcenodes as')", "by(fastforce simp:sourcenodes_def)"], ["proof (state)\nthis:\n  n' \\<in> set (sourcenodes as')\n\ngoal (1 subgoal):\n 1. n' strongly-postdominates n''", "}"], ["proof (state)\nthis:\n  \\<lbrakk>n'' -?as'2\\<rightarrow>* ?nx2; k \\<le> length ?as'2\\<rbrakk>\n  \\<Longrightarrow> n' \\<in> set (sourcenodes ?as'2)\n\ngoal (1 subgoal):\n 1. n' strongly-postdominates n''", "with \\<open>k \\<ge> 1\\<close>"], ["proof (chain)\npicking this:\n  1 \\<le> k\n  \\<lbrakk>n'' -?as'2\\<rightarrow>* ?nx2; k \\<le> length ?as'2\\<rbrakk>\n  \\<Longrightarrow> n' \\<in> set (sourcenodes ?as'2)", "have \"\\<exists>k \\<ge> 1. \\<forall>as' nx. n'' -as'\\<rightarrow>* nx \\<and> length as' \\<ge> k \n             \\<longrightarrow> n' \\<in> set(sourcenodes as')\""], ["proof (prove)\nusing this:\n  1 \\<le> k\n  \\<lbrakk>n'' -?as'2\\<rightarrow>* ?nx2; k \\<le> length ?as'2\\<rbrakk>\n  \\<Longrightarrow> n' \\<in> set (sourcenodes ?as'2)\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<ge>1.\n       \\<forall>as' nx.\n          n'' -as'\\<rightarrow>* nx \\<and>\n          k \\<le> length as' \\<longrightarrow>\n          n' \\<in> set (sourcenodes as')", "by auto"], ["proof (state)\nthis:\n  \\<exists>k\\<ge>1.\n     \\<forall>as' nx.\n        n'' -as'\\<rightarrow>* nx \\<and>\n        k \\<le> length as' \\<longrightarrow>\n        n' \\<in> set (sourcenodes as')\n\ngoal (1 subgoal):\n 1. n' strongly-postdominates n''", "with \\<open>n' postdominates n''\\<close>"], ["proof (chain)\npicking this:\n  n' postdominates n''\n  \\<exists>k\\<ge>1.\n     \\<forall>as' nx.\n        n'' -as'\\<rightarrow>* nx \\<and>\n        k \\<le> length as' \\<longrightarrow>\n        n' \\<in> set (sourcenodes as')", "show ?thesis"], ["proof (prove)\nusing this:\n  n' postdominates n''\n  \\<exists>k\\<ge>1.\n     \\<forall>as' nx.\n        n'' -as'\\<rightarrow>* nx \\<and>\n        k \\<le> length as' \\<longrightarrow>\n        n' \\<in> set (sourcenodes as')\n\ngoal (1 subgoal):\n 1. n' strongly-postdominates n''", "by(simp add:strong_postdominate_def)"], ["proof (state)\nthis:\n  n' strongly-postdominates n''\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_strong_postdominate_successor_set:\n  assumes \"\\<not> n strongly-postdominates (sourcenode a)\" and \"valid_node n\"\n  and \"valid_edge a\"\n  and all:\"\\<forall>nx \\<in> N. \\<exists>a'. valid_edge a' \\<and> sourcenode a' = sourcenode a \\<and>\n    targetnode a' = nx \\<and> n strongly-postdominates nx\"\n  obtains a' where \"valid_edge a'\" and \"sourcenode a' =  sourcenode a\"\n  and \"targetnode a' \\<notin> N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a'.\n        \\<lbrakk>valid_edge a'; sourcenode a' = sourcenode a;\n         targetnode a' \\<notin> N\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(atomize_elim)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and> targetnode a' \\<notin> N", "show \"\\<exists>a'. valid_edge a' \\<and> sourcenode a' =  sourcenode a \\<and> targetnode a' \\<notin> N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and> targetnode a' \\<notin> N", "proof(cases \"n postdominates (sourcenode a)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n postdominates sourcenode a \\<Longrightarrow>\n    \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and> targetnode a' \\<notin> N\n 2. \\<not> n postdominates sourcenode a \\<Longrightarrow>\n    \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and> targetnode a' \\<notin> N", "case False"], ["proof (state)\nthis:\n  \\<not> n postdominates sourcenode a\n\ngoal (2 subgoals):\n 1. n postdominates sourcenode a \\<Longrightarrow>\n    \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and> targetnode a' \\<notin> N\n 2. \\<not> n postdominates sourcenode a \\<Longrightarrow>\n    \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and> targetnode a' \\<notin> N", "with \\<open>valid_edge a\\<close> \\<open>valid_node n\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a\n  valid_node n\n  \\<not> n postdominates sourcenode a", "obtain a' where [simp]:\"sourcenode a = sourcenode a'\"\n      and \"valid_edge a'\" and \"\\<not> n postdominates targetnode a'\""], ["proof (prove)\nusing this:\n  valid_edge a\n  valid_node n\n  \\<not> n postdominates sourcenode a\n\ngoal (1 subgoal):\n 1. (\\<And>a'.\n        \\<lbrakk>sourcenode a = sourcenode a'; valid_edge a';\n         \\<not> n postdominates targetnode a'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by -(erule not_postdominate_source_not_postdominate_target)"], ["proof (state)\nthis:\n  sourcenode a = sourcenode a'\n  valid_edge a'\n  \\<not> n postdominates targetnode a'\n\ngoal (2 subgoals):\n 1. n postdominates sourcenode a \\<Longrightarrow>\n    \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and> targetnode a' \\<notin> N\n 2. \\<not> n postdominates sourcenode a \\<Longrightarrow>\n    \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and> targetnode a' \\<notin> N", "with all"], ["proof (chain)\npicking this:\n  \\<forall>nx\\<in>N.\n     \\<exists>a'.\n        valid_edge a' \\<and>\n        sourcenode a' = sourcenode a \\<and>\n        targetnode a' = nx \\<and> n strongly-postdominates nx\n  sourcenode a = sourcenode a'\n  valid_edge a'\n  \\<not> n postdominates targetnode a'", "have \"targetnode a' \\<notin> N\""], ["proof (prove)\nusing this:\n  \\<forall>nx\\<in>N.\n     \\<exists>a'.\n        valid_edge a' \\<and>\n        sourcenode a' = sourcenode a \\<and>\n        targetnode a' = nx \\<and> n strongly-postdominates nx\n  sourcenode a = sourcenode a'\n  valid_edge a'\n  \\<not> n postdominates targetnode a'\n\ngoal (1 subgoal):\n 1. targetnode a' \\<notin> N", "by(auto simp:strong_postdominate_def)"], ["proof (state)\nthis:\n  targetnode a' \\<notin> N\n\ngoal (2 subgoals):\n 1. n postdominates sourcenode a \\<Longrightarrow>\n    \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and> targetnode a' \\<notin> N\n 2. \\<not> n postdominates sourcenode a \\<Longrightarrow>\n    \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and> targetnode a' \\<notin> N", "with \\<open>valid_edge a'\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a'\n  targetnode a' \\<notin> N", "show ?thesis"], ["proof (prove)\nusing this:\n  valid_edge a'\n  targetnode a' \\<notin> N\n\ngoal (1 subgoal):\n 1. \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and> targetnode a' \\<notin> N", "by simp blast"], ["proof (state)\nthis:\n  \\<exists>a'.\n     valid_edge a' \\<and>\n     sourcenode a' = sourcenode a \\<and> targetnode a' \\<notin> N\n\ngoal (1 subgoal):\n 1. n postdominates sourcenode a \\<Longrightarrow>\n    \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and> targetnode a' \\<notin> N", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n postdominates sourcenode a \\<Longrightarrow>\n    \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and> targetnode a' \\<notin> N", "case True"], ["proof (state)\nthis:\n  n postdominates sourcenode a\n\ngoal (1 subgoal):\n 1. n postdominates sourcenode a \\<Longrightarrow>\n    \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and> targetnode a' \\<notin> N", "let ?M = \"{n'. \\<exists>a'. valid_edge a' \\<and> sourcenode a' =  sourcenode a \\<and> \n                         targetnode a' = n'}\""], ["proof (state)\ngoal (1 subgoal):\n 1. n postdominates sourcenode a \\<Longrightarrow>\n    \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and> targetnode a' \\<notin> N", "let ?M' = \"{n'. \\<exists>a'. valid_edge a' \\<and> sourcenode a' =  sourcenode a \\<and> \n                          targetnode a' = n' \\<and> n strongly-postdominates n'}\""], ["proof (state)\ngoal (1 subgoal):\n 1. n postdominates sourcenode a \\<Longrightarrow>\n    \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and> targetnode a' \\<notin> N", "let ?N' = \"(\\<lambda>n'. SOME i. i \\<ge> 1 \\<and> \n      (\\<forall>as nx. n' -as\\<rightarrow>* nx \\<and> length as \\<ge> i \n                                \\<longrightarrow> n \\<in> set(sourcenodes as))) ` N\""], ["proof (state)\ngoal (1 subgoal):\n 1. n postdominates sourcenode a \\<Longrightarrow>\n    \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and> targetnode a' \\<notin> N", "obtain k where [simp]:\"k = Max ?N'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        k =\n        (MAX n'\\<in>N.\n            SOME i.\n               1 \\<le> i \\<and>\n               (\\<forall>as nx.\n                   n' -as\\<rightarrow>* nx \\<and>\n                   i \\<le> length as \\<longrightarrow>\n                   n \\<in> set (sourcenodes as))) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  k =\n  (MAX n'\\<in>N.\n      SOME i.\n         1 \\<le> i \\<and>\n         (\\<forall>as nx.\n             n' -as\\<rightarrow>* nx \\<and>\n             i \\<le> length as \\<longrightarrow>\n             n \\<in> set (sourcenodes as)))\n\ngoal (1 subgoal):\n 1. n postdominates sourcenode a \\<Longrightarrow>\n    \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and> targetnode a' \\<notin> N", "have eq:\"{x \\<in> ?M. (\\<lambda>n'. n strongly-postdominates n') x} = ?M'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x \\<in> {n'.\n              \\<exists>a'.\n                 valid_edge a' \\<and>\n                 sourcenode a' = sourcenode a \\<and> targetnode a' = n'}.\n     n strongly-postdominates x} =\n    {n'.\n     \\<exists>a'.\n        valid_edge a' \\<and>\n        sourcenode a' = sourcenode a \\<and>\n        targetnode a' = n' \\<and> n strongly-postdominates n'}", "by auto"], ["proof (state)\nthis:\n  {x \\<in> {n'.\n            \\<exists>a'.\n               valid_edge a' \\<and>\n               sourcenode a' = sourcenode a \\<and> targetnode a' = n'}.\n   n strongly-postdominates x} =\n  {n'.\n   \\<exists>a'.\n      valid_edge a' \\<and>\n      sourcenode a' = sourcenode a \\<and>\n      targetnode a' = n' \\<and> n strongly-postdominates n'}\n\ngoal (1 subgoal):\n 1. n postdominates sourcenode a \\<Longrightarrow>\n    \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and> targetnode a' \\<notin> N", "from \\<open>valid_edge a\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a", "have \"finite ?M\""], ["proof (prove)\nusing this:\n  valid_edge a\n\ngoal (1 subgoal):\n 1. finite\n     {n'.\n      \\<exists>a'.\n         valid_edge a' \\<and>\n         sourcenode a' = sourcenode a \\<and> targetnode a' = n'}", "by(simp add:successor_set_finite)"], ["proof (state)\nthis:\n  finite\n   {n'.\n    \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and> targetnode a' = n'}\n\ngoal (1 subgoal):\n 1. n postdominates sourcenode a \\<Longrightarrow>\n    \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and> targetnode a' \\<notin> N", "hence \"finite {x \\<in> ?M. (\\<lambda>n'. n strongly-postdominates n') x}\""], ["proof (prove)\nusing this:\n  finite\n   {n'.\n    \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and> targetnode a' = n'}\n\ngoal (1 subgoal):\n 1. finite\n     {x \\<in> {n'.\n               \\<exists>a'.\n                  valid_edge a' \\<and>\n                  sourcenode a' = sourcenode a \\<and> targetnode a' = n'}.\n      n strongly-postdominates x}", "by fastforce"], ["proof (state)\nthis:\n  finite\n   {x \\<in> {n'.\n             \\<exists>a'.\n                valid_edge a' \\<and>\n                sourcenode a' = sourcenode a \\<and> targetnode a' = n'}.\n    n strongly-postdominates x}\n\ngoal (1 subgoal):\n 1. n postdominates sourcenode a \\<Longrightarrow>\n    \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and> targetnode a' \\<notin> N", "with eq"], ["proof (chain)\npicking this:\n  {x \\<in> {n'.\n            \\<exists>a'.\n               valid_edge a' \\<and>\n               sourcenode a' = sourcenode a \\<and> targetnode a' = n'}.\n   n strongly-postdominates x} =\n  {n'.\n   \\<exists>a'.\n      valid_edge a' \\<and>\n      sourcenode a' = sourcenode a \\<and>\n      targetnode a' = n' \\<and> n strongly-postdominates n'}\n  finite\n   {x \\<in> {n'.\n             \\<exists>a'.\n                valid_edge a' \\<and>\n                sourcenode a' = sourcenode a \\<and> targetnode a' = n'}.\n    n strongly-postdominates x}", "have \"finite ?M'\""], ["proof (prove)\nusing this:\n  {x \\<in> {n'.\n            \\<exists>a'.\n               valid_edge a' \\<and>\n               sourcenode a' = sourcenode a \\<and> targetnode a' = n'}.\n   n strongly-postdominates x} =\n  {n'.\n   \\<exists>a'.\n      valid_edge a' \\<and>\n      sourcenode a' = sourcenode a \\<and>\n      targetnode a' = n' \\<and> n strongly-postdominates n'}\n  finite\n   {x \\<in> {n'.\n             \\<exists>a'.\n                valid_edge a' \\<and>\n                sourcenode a' = sourcenode a \\<and> targetnode a' = n'}.\n    n strongly-postdominates x}\n\ngoal (1 subgoal):\n 1. finite\n     {n'.\n      \\<exists>a'.\n         valid_edge a' \\<and>\n         sourcenode a' = sourcenode a \\<and>\n         targetnode a' = n' \\<and> n strongly-postdominates n'}", "by simp"], ["proof (state)\nthis:\n  finite\n   {n'.\n    \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and>\n       targetnode a' = n' \\<and> n strongly-postdominates n'}\n\ngoal (1 subgoal):\n 1. n postdominates sourcenode a \\<Longrightarrow>\n    \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and> targetnode a' \\<notin> N", "from all"], ["proof (chain)\npicking this:\n  \\<forall>nx\\<in>N.\n     \\<exists>a'.\n        valid_edge a' \\<and>\n        sourcenode a' = sourcenode a \\<and>\n        targetnode a' = nx \\<and> n strongly-postdominates nx", "have \"N \\<subseteq> ?M'\""], ["proof (prove)\nusing this:\n  \\<forall>nx\\<in>N.\n     \\<exists>a'.\n        valid_edge a' \\<and>\n        sourcenode a' = sourcenode a \\<and>\n        targetnode a' = nx \\<and> n strongly-postdominates nx\n\ngoal (1 subgoal):\n 1. N \\<subseteq> {n'.\n                   \\<exists>a'.\n                      valid_edge a' \\<and>\n                      sourcenode a' = sourcenode a \\<and>\n                      targetnode a' = n' \\<and> n strongly-postdominates n'}", "by auto"], ["proof (state)\nthis:\n  N \\<subseteq> {n'.\n                 \\<exists>a'.\n                    valid_edge a' \\<and>\n                    sourcenode a' = sourcenode a \\<and>\n                    targetnode a' = n' \\<and> n strongly-postdominates n'}\n\ngoal (1 subgoal):\n 1. n postdominates sourcenode a \\<Longrightarrow>\n    \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and> targetnode a' \\<notin> N", "with \\<open>finite ?M'\\<close>"], ["proof (chain)\npicking this:\n  finite\n   {n'.\n    \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and>\n       targetnode a' = n' \\<and> n strongly-postdominates n'}\n  N \\<subseteq> {n'.\n                 \\<exists>a'.\n                    valid_edge a' \\<and>\n                    sourcenode a' = sourcenode a \\<and>\n                    targetnode a' = n' \\<and> n strongly-postdominates n'}", "have \"finite N\""], ["proof (prove)\nusing this:\n  finite\n   {n'.\n    \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and>\n       targetnode a' = n' \\<and> n strongly-postdominates n'}\n  N \\<subseteq> {n'.\n                 \\<exists>a'.\n                    valid_edge a' \\<and>\n                    sourcenode a' = sourcenode a \\<and>\n                    targetnode a' = n' \\<and> n strongly-postdominates n'}\n\ngoal (1 subgoal):\n 1. finite N", "by(auto intro:finite_subset)"], ["proof (state)\nthis:\n  finite N\n\ngoal (1 subgoal):\n 1. n postdominates sourcenode a \\<Longrightarrow>\n    \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and> targetnode a' \\<notin> N", "hence \"finite ?N'\""], ["proof (prove)\nusing this:\n  finite N\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>n'.\n          SOME i.\n             1 \\<le> i \\<and>\n             (\\<forall>as nx.\n                 n' -as\\<rightarrow>* nx \\<and>\n                 i \\<le> length as \\<longrightarrow>\n                 n \\<in> set (sourcenodes as))) `\n      N)", "by fastforce"], ["proof (state)\nthis:\n  finite\n   ((\\<lambda>n'.\n        SOME i.\n           1 \\<le> i \\<and>\n           (\\<forall>as nx.\n               n' -as\\<rightarrow>* nx \\<and>\n               i \\<le> length as \\<longrightarrow>\n               n \\<in> set (sourcenodes as))) `\n    N)\n\ngoal (1 subgoal):\n 1. n postdominates sourcenode a \\<Longrightarrow>\n    \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and> targetnode a' \\<notin> N", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and> targetnode a' \\<notin> N", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and>\n       targetnode a' \\<notin> N \\<Longrightarrow>\n    False", "assume \"\\<not> (\\<exists>a'. valid_edge a' \\<and> sourcenode a' = sourcenode a \\<and> \n                      targetnode a' \\<notin> N)\""], ["proof (state)\nthis:\n  \\<nexists>a'.\n     valid_edge a' \\<and>\n     sourcenode a' = sourcenode a \\<and> targetnode a' \\<notin> N\n\ngoal (1 subgoal):\n 1. \\<nexists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and>\n       targetnode a' \\<notin> N \\<Longrightarrow>\n    False", "hence allImp:\"\\<forall>a'. valid_edge a' \\<and> sourcenode a' = sourcenode a\n                         \\<longrightarrow> targetnode a' \\<in> N\""], ["proof (prove)\nusing this:\n  \\<nexists>a'.\n     valid_edge a' \\<and>\n     sourcenode a' = sourcenode a \\<and> targetnode a' \\<notin> N\n\ngoal (1 subgoal):\n 1. \\<forall>a'.\n       valid_edge a' \\<and> sourcenode a' = sourcenode a \\<longrightarrow>\n       targetnode a' \\<in> N", "by blast"], ["proof (state)\nthis:\n  \\<forall>a'.\n     valid_edge a' \\<and> sourcenode a' = sourcenode a \\<longrightarrow>\n     targetnode a' \\<in> N\n\ngoal (1 subgoal):\n 1. \\<nexists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and>\n       targetnode a' \\<notin> N \\<Longrightarrow>\n    False", "from True \\<open>\\<not> n strongly-postdominates (sourcenode a)\\<close>"], ["proof (chain)\npicking this:\n  n postdominates sourcenode a\n  \\<not> n strongly-postdominates sourcenode a", "have allPaths:\"\\<forall>k \\<ge> 1. \\<exists>as nx. sourcenode a -as\\<rightarrow>* nx \\<and> length as \\<ge> k \n        \\<and> n \\<notin> set(sourcenodes as)\""], ["proof (prove)\nusing this:\n  n postdominates sourcenode a\n  \\<not> n strongly-postdominates sourcenode a\n\ngoal (1 subgoal):\n 1. \\<forall>k\\<ge>1.\n       \\<exists>as nx.\n          sourcenode a -as\\<rightarrow>* nx \\<and>\n          k \\<le> length as \\<and> n \\<notin> set (sourcenodes as)", "by(auto simp:strong_postdominate_def)"], ["proof (state)\nthis:\n  \\<forall>k\\<ge>1.\n     \\<exists>as nx.\n        sourcenode a -as\\<rightarrow>* nx \\<and>\n        k \\<le> length as \\<and> n \\<notin> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. \\<nexists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and>\n       targetnode a' \\<notin> N \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<forall>k\\<ge>1.\n     \\<exists>as nx.\n        sourcenode a -as\\<rightarrow>* nx \\<and>\n        k \\<le> length as \\<and> n \\<notin> set (sourcenodes as)", "obtain as nx where \"sourcenode a -as\\<rightarrow>* nx\"\n        and \"length as \\<ge> k + 1\" and \"n \\<notin> set(sourcenodes as)\""], ["proof (prove)\nusing this:\n  \\<forall>k\\<ge>1.\n     \\<exists>as nx.\n        sourcenode a -as\\<rightarrow>* nx \\<and>\n        k \\<le> length as \\<and> n \\<notin> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. (\\<And>as nx.\n        \\<lbrakk>sourcenode a -as\\<rightarrow>* nx; k + 1 \\<le> length as;\n         n \\<notin> set (sourcenodes as)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (erule_tac x=\"k + 1\" in allE) auto"], ["proof (state)\nthis:\n  sourcenode a -as\\<rightarrow>* nx\n  k + 1 \\<le> length as\n  n \\<notin> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. \\<nexists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and>\n       targetnode a' \\<notin> N \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  sourcenode a -as\\<rightarrow>* nx\n  k + 1 \\<le> length as\n  n \\<notin> set (sourcenodes as)", "obtain ax as' where [simp]:\"as = ax#as'\" and \"valid_edge ax\"\n        and \"sourcenode ax = sourcenode a\" and \"targetnode ax -as'\\<rightarrow>* nx\""], ["proof (prove)\nusing this:\n  sourcenode a -as\\<rightarrow>* nx\n  k + 1 \\<le> length as\n  n \\<notin> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. (\\<And>ax as'.\n        \\<lbrakk>as = ax # as'; valid_edge ax; sourcenode ax = sourcenode a;\n         targetnode ax -as'\\<rightarrow>* nx\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by -(erule path.cases,auto)"], ["proof (state)\nthis:\n  as = ax # as'\n  valid_edge ax\n  sourcenode ax = sourcenode a\n  targetnode ax -as'\\<rightarrow>* nx\n\ngoal (1 subgoal):\n 1. \\<nexists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and>\n       targetnode a' \\<notin> N \\<Longrightarrow>\n    False", "with allImp"], ["proof (chain)\npicking this:\n  \\<forall>a'.\n     valid_edge a' \\<and> sourcenode a' = sourcenode a \\<longrightarrow>\n     targetnode a' \\<in> N\n  as = ax # as'\n  valid_edge ax\n  sourcenode ax = sourcenode a\n  targetnode ax -as'\\<rightarrow>* nx", "have \"targetnode ax \\<in> N\""], ["proof (prove)\nusing this:\n  \\<forall>a'.\n     valid_edge a' \\<and> sourcenode a' = sourcenode a \\<longrightarrow>\n     targetnode a' \\<in> N\n  as = ax # as'\n  valid_edge ax\n  sourcenode ax = sourcenode a\n  targetnode ax -as'\\<rightarrow>* nx\n\ngoal (1 subgoal):\n 1. targetnode ax \\<in> N", "by fastforce"], ["proof (state)\nthis:\n  targetnode ax \\<in> N\n\ngoal (1 subgoal):\n 1. \\<nexists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and>\n       targetnode a' \\<notin> N \\<Longrightarrow>\n    False", "with all"], ["proof (chain)\npicking this:\n  \\<forall>nx\\<in>N.\n     \\<exists>a'.\n        valid_edge a' \\<and>\n        sourcenode a' = sourcenode a \\<and>\n        targetnode a' = nx \\<and> n strongly-postdominates nx\n  targetnode ax \\<in> N", "have \"n strongly-postdominates (targetnode ax)\""], ["proof (prove)\nusing this:\n  \\<forall>nx\\<in>N.\n     \\<exists>a'.\n        valid_edge a' \\<and>\n        sourcenode a' = sourcenode a \\<and>\n        targetnode a' = nx \\<and> n strongly-postdominates nx\n  targetnode ax \\<in> N\n\ngoal (1 subgoal):\n 1. n strongly-postdominates targetnode ax", "by auto"], ["proof (state)\nthis:\n  n strongly-postdominates targetnode ax\n\ngoal (1 subgoal):\n 1. \\<nexists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and>\n       targetnode a' \\<notin> N \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  n strongly-postdominates targetnode ax", "obtain k' where k':\"k' = (SOME i. i \\<ge> 1 \\<and>\n        (\\<forall>as nx. targetnode ax -as\\<rightarrow>* nx \\<and> length as \\<ge> i \n                 \\<longrightarrow> n \\<in> set(sourcenodes as)))\""], ["proof (prove)\nusing this:\n  n strongly-postdominates targetnode ax\n\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        k' =\n        (SOME i.\n            1 \\<le> i \\<and>\n            (\\<forall>as nx.\n                targetnode ax -as\\<rightarrow>* nx \\<and>\n                i \\<le> length as \\<longrightarrow>\n                n \\<in> set (sourcenodes as))) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  k' =\n  (SOME i.\n      1 \\<le> i \\<and>\n      (\\<forall>as nx.\n          targetnode ax -as\\<rightarrow>* nx \\<and>\n          i \\<le> length as \\<longrightarrow>\n          n \\<in> set (sourcenodes as)))\n\ngoal (1 subgoal):\n 1. \\<nexists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and>\n       targetnode a' \\<notin> N \\<Longrightarrow>\n    False", "with \\<open>n strongly-postdominates (targetnode ax)\\<close>"], ["proof (chain)\npicking this:\n  n strongly-postdominates targetnode ax\n  k' =\n  (SOME i.\n      1 \\<le> i \\<and>\n      (\\<forall>as nx.\n          targetnode ax -as\\<rightarrow>* nx \\<and>\n          i \\<le> length as \\<longrightarrow>\n          n \\<in> set (sourcenodes as)))", "have \"k' \\<ge> 1 \\<and> (\\<forall>as nx. targetnode ax -as\\<rightarrow>* nx \\<and> length as \\<ge> k'\n        \\<longrightarrow> n \\<in> set(sourcenodes as))\""], ["proof (prove)\nusing this:\n  n strongly-postdominates targetnode ax\n  k' =\n  (SOME i.\n      1 \\<le> i \\<and>\n      (\\<forall>as nx.\n          targetnode ax -as\\<rightarrow>* nx \\<and>\n          i \\<le> length as \\<longrightarrow>\n          n \\<in> set (sourcenodes as)))\n\ngoal (1 subgoal):\n 1. 1 \\<le> k' \\<and>\n    (\\<forall>as nx.\n        targetnode ax -as\\<rightarrow>* nx \\<and>\n        k' \\<le> length as \\<longrightarrow>\n        n \\<in> set (sourcenodes as))", "by(auto elim!:someI_ex simp:strong_postdominate_def)"], ["proof (state)\nthis:\n  1 \\<le> k' \\<and>\n  (\\<forall>as nx.\n      targetnode ax -as\\<rightarrow>* nx \\<and>\n      k' \\<le> length as \\<longrightarrow>\n      n \\<in> set (sourcenodes as))\n\ngoal (1 subgoal):\n 1. \\<nexists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and>\n       targetnode a' \\<notin> N \\<Longrightarrow>\n    False", "hence \"k' \\<ge> 1\"\n        and spdAll:\"\\<forall>as nx. targetnode ax -as\\<rightarrow>* nx \\<and> length as \\<ge> k'\n        \\<longrightarrow> n \\<in> set(sourcenodes as)\""], ["proof (prove)\nusing this:\n  1 \\<le> k' \\<and>\n  (\\<forall>as nx.\n      targetnode ax -as\\<rightarrow>* nx \\<and>\n      k' \\<le> length as \\<longrightarrow>\n      n \\<in> set (sourcenodes as))\n\ngoal (1 subgoal):\n 1. 1 \\<le> k' &&&\n    \\<forall>as nx.\n       targetnode ax -as\\<rightarrow>* nx \\<and>\n       k' \\<le> length as \\<longrightarrow>\n       n \\<in> set (sourcenodes as)", "by simp_all"], ["proof (state)\nthis:\n  1 \\<le> k'\n  \\<forall>as nx.\n     targetnode ax -as\\<rightarrow>* nx \\<and>\n     k' \\<le> length as \\<longrightarrow>\n     n \\<in> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. \\<nexists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and>\n       targetnode a' \\<notin> N \\<Longrightarrow>\n    False", "from \\<open>targetnode ax \\<in> N\\<close> k'"], ["proof (chain)\npicking this:\n  targetnode ax \\<in> N\n  k' =\n  (SOME i.\n      1 \\<le> i \\<and>\n      (\\<forall>as nx.\n          targetnode ax -as\\<rightarrow>* nx \\<and>\n          i \\<le> length as \\<longrightarrow>\n          n \\<in> set (sourcenodes as)))", "have \"k' \\<in> ?N'\""], ["proof (prove)\nusing this:\n  targetnode ax \\<in> N\n  k' =\n  (SOME i.\n      1 \\<le> i \\<and>\n      (\\<forall>as nx.\n          targetnode ax -as\\<rightarrow>* nx \\<and>\n          i \\<le> length as \\<longrightarrow>\n          n \\<in> set (sourcenodes as)))\n\ngoal (1 subgoal):\n 1. k' \\<in> (\\<lambda>n'.\n                 SOME i.\n                    1 \\<le> i \\<and>\n                    (\\<forall>as nx.\n                        n' -as\\<rightarrow>* nx \\<and>\n                        i \\<le> length as \\<longrightarrow>\n                        n \\<in> set (sourcenodes as))) `\n             N", "by blast"], ["proof (state)\nthis:\n  k' \\<in> (\\<lambda>n'.\n               SOME i.\n                  1 \\<le> i \\<and>\n                  (\\<forall>as nx.\n                      n' -as\\<rightarrow>* nx \\<and>\n                      i \\<le> length as \\<longrightarrow>\n                      n \\<in> set (sourcenodes as))) `\n           N\n\ngoal (1 subgoal):\n 1. \\<nexists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and>\n       targetnode a' \\<notin> N \\<Longrightarrow>\n    False", "with \\<open>targetnode ax \\<in> N\\<close>"], ["proof (chain)\npicking this:\n  targetnode ax \\<in> N\n  k' \\<in> (\\<lambda>n'.\n               SOME i.\n                  1 \\<le> i \\<and>\n                  (\\<forall>as nx.\n                      n' -as\\<rightarrow>* nx \\<and>\n                      i \\<le> length as \\<longrightarrow>\n                      n \\<in> set (sourcenodes as))) `\n           N", "have \"?N' \\<noteq> {}\""], ["proof (prove)\nusing this:\n  targetnode ax \\<in> N\n  k' \\<in> (\\<lambda>n'.\n               SOME i.\n                  1 \\<le> i \\<and>\n                  (\\<forall>as nx.\n                      n' -as\\<rightarrow>* nx \\<and>\n                      i \\<le> length as \\<longrightarrow>\n                      n \\<in> set (sourcenodes as))) `\n           N\n\ngoal (1 subgoal):\n 1. (\\<lambda>n'.\n        SOME i.\n           1 \\<le> i \\<and>\n           (\\<forall>as nx.\n               n' -as\\<rightarrow>* nx \\<and>\n               i \\<le> length as \\<longrightarrow>\n               n \\<in> set (sourcenodes as))) `\n    N \\<noteq>\n    {}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>n'.\n      SOME i.\n         1 \\<le> i \\<and>\n         (\\<forall>as nx.\n             n' -as\\<rightarrow>* nx \\<and>\n             i \\<le> length as \\<longrightarrow>\n             n \\<in> set (sourcenodes as))) `\n  N \\<noteq>\n  {}\n\ngoal (1 subgoal):\n 1. \\<nexists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and>\n       targetnode a' \\<notin> N \\<Longrightarrow>\n    False", "with \\<open>k' \\<in> ?N'\\<close>"], ["proof (chain)\npicking this:\n  k' \\<in> (\\<lambda>n'.\n               SOME i.\n                  1 \\<le> i \\<and>\n                  (\\<forall>as nx.\n                      n' -as\\<rightarrow>* nx \\<and>\n                      i \\<le> length as \\<longrightarrow>\n                      n \\<in> set (sourcenodes as))) `\n           N\n  (\\<lambda>n'.\n      SOME i.\n         1 \\<le> i \\<and>\n         (\\<forall>as nx.\n             n' -as\\<rightarrow>* nx \\<and>\n             i \\<le> length as \\<longrightarrow>\n             n \\<in> set (sourcenodes as))) `\n  N \\<noteq>\n  {}", "have \"k' \\<le> Max ?N'\""], ["proof (prove)\nusing this:\n  k' \\<in> (\\<lambda>n'.\n               SOME i.\n                  1 \\<le> i \\<and>\n                  (\\<forall>as nx.\n                      n' -as\\<rightarrow>* nx \\<and>\n                      i \\<le> length as \\<longrightarrow>\n                      n \\<in> set (sourcenodes as))) `\n           N\n  (\\<lambda>n'.\n      SOME i.\n         1 \\<le> i \\<and>\n         (\\<forall>as nx.\n             n' -as\\<rightarrow>* nx \\<and>\n             i \\<le> length as \\<longrightarrow>\n             n \\<in> set (sourcenodes as))) `\n  N \\<noteq>\n  {}\n\ngoal (1 subgoal):\n 1. k' \\<le> (MAX n'\\<in>N.\n                 SOME i.\n                    1 \\<le> i \\<and>\n                    (\\<forall>as nx.\n                        n' -as\\<rightarrow>* nx \\<and>\n                        i \\<le> length as \\<longrightarrow>\n                        n \\<in> set (sourcenodes as)))", "using \\<open>finite ?N'\\<close>"], ["proof (prove)\nusing this:\n  k' \\<in> (\\<lambda>n'.\n               SOME i.\n                  1 \\<le> i \\<and>\n                  (\\<forall>as nx.\n                      n' -as\\<rightarrow>* nx \\<and>\n                      i \\<le> length as \\<longrightarrow>\n                      n \\<in> set (sourcenodes as))) `\n           N\n  (\\<lambda>n'.\n      SOME i.\n         1 \\<le> i \\<and>\n         (\\<forall>as nx.\n             n' -as\\<rightarrow>* nx \\<and>\n             i \\<le> length as \\<longrightarrow>\n             n \\<in> set (sourcenodes as))) `\n  N \\<noteq>\n  {}\n  finite\n   ((\\<lambda>n'.\n        SOME i.\n           1 \\<le> i \\<and>\n           (\\<forall>as nx.\n               n' -as\\<rightarrow>* nx \\<and>\n               i \\<le> length as \\<longrightarrow>\n               n \\<in> set (sourcenodes as))) `\n    N)\n\ngoal (1 subgoal):\n 1. k' \\<le> (MAX n'\\<in>N.\n                 SOME i.\n                    1 \\<le> i \\<and>\n                    (\\<forall>as nx.\n                        n' -as\\<rightarrow>* nx \\<and>\n                        i \\<le> length as \\<longrightarrow>\n                        n \\<in> set (sourcenodes as)))", "by(fastforce intro:Max_ge)"], ["proof (state)\nthis:\n  k' \\<le> (MAX n'\\<in>N.\n               SOME i.\n                  1 \\<le> i \\<and>\n                  (\\<forall>as nx.\n                      n' -as\\<rightarrow>* nx \\<and>\n                      i \\<le> length as \\<longrightarrow>\n                      n \\<in> set (sourcenodes as)))\n\ngoal (1 subgoal):\n 1. \\<nexists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and>\n       targetnode a' \\<notin> N \\<Longrightarrow>\n    False", "hence \"k' \\<le> k\""], ["proof (prove)\nusing this:\n  k' \\<le> (MAX n'\\<in>N.\n               SOME i.\n                  1 \\<le> i \\<and>\n                  (\\<forall>as nx.\n                      n' -as\\<rightarrow>* nx \\<and>\n                      i \\<le> length as \\<longrightarrow>\n                      n \\<in> set (sourcenodes as)))\n\ngoal (1 subgoal):\n 1. k' \\<le> k", "by simp"], ["proof (state)\nthis:\n  k' \\<le> k\n\ngoal (1 subgoal):\n 1. \\<nexists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and>\n       targetnode a' \\<notin> N \\<Longrightarrow>\n    False", "with \\<open>targetnode ax -as'\\<rightarrow>* nx\\<close> \\<open>length as \\<ge> k + 1\\<close> spdAll"], ["proof (chain)\npicking this:\n  targetnode ax -as'\\<rightarrow>* nx\n  k + 1 \\<le> length as\n  \\<forall>as nx.\n     targetnode ax -as\\<rightarrow>* nx \\<and>\n     k' \\<le> length as \\<longrightarrow>\n     n \\<in> set (sourcenodes as)\n  k' \\<le> k", "have \"n \\<in> set(sourcenodes as')\""], ["proof (prove)\nusing this:\n  targetnode ax -as'\\<rightarrow>* nx\n  k + 1 \\<le> length as\n  \\<forall>as nx.\n     targetnode ax -as\\<rightarrow>* nx \\<and>\n     k' \\<le> length as \\<longrightarrow>\n     n \\<in> set (sourcenodes as)\n  k' \\<le> k\n\ngoal (1 subgoal):\n 1. n \\<in> set (sourcenodes as')", "by fastforce"], ["proof (state)\nthis:\n  n \\<in> set (sourcenodes as')\n\ngoal (1 subgoal):\n 1. \\<nexists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and>\n       targetnode a' \\<notin> N \\<Longrightarrow>\n    False", "with \\<open>n \\<notin> set(sourcenodes as)\\<close>"], ["proof (chain)\npicking this:\n  n \\<notin> set (sourcenodes as)\n  n \\<in> set (sourcenodes as')", "show False"], ["proof (prove)\nusing this:\n  n \\<notin> set (sourcenodes as)\n  n \\<in> set (sourcenodes as')\n\ngoal (1 subgoal):\n 1. False", "by(simp add:sourcenodes_def)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>a'.\n     valid_edge a' \\<and>\n     sourcenode a' = sourcenode a \\<and> targetnode a' \\<notin> N\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>a'.\n     valid_edge a' \\<and>\n     sourcenode a' = sourcenode a \\<and> targetnode a' \\<notin> N\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_strong_postdominate_predecessor_successor:\n  assumes \"\\<not> n strongly-postdominates (sourcenode a)\"\n  and \"valid_node n\" and \"valid_edge a\"\n  obtains a' where \"valid_edge a'\" and \"sourcenode a' = sourcenode a\"\n  and \"\\<not> n strongly-postdominates (targetnode a')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a'.\n        \\<lbrakk>valid_edge a'; sourcenode a' = sourcenode a;\n         \\<not> n strongly-postdominates targetnode a'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(atomize_elim)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and>\n       \\<not> n strongly-postdominates targetnode a'", "show \"\\<exists>a'. valid_edge a' \\<and> sourcenode a' = sourcenode a \\<and> \n             \\<not> n strongly-postdominates (targetnode a')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and>\n       \\<not> n strongly-postdominates targetnode a'", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and>\n       \\<not> n strongly-postdominates targetnode a' \\<Longrightarrow>\n    False", "assume \"\\<not> (\\<exists>a'. valid_edge a' \\<and> sourcenode a' = sourcenode a \\<and>\n            \\<not> n strongly-postdominates targetnode a')\""], ["proof (state)\nthis:\n  \\<nexists>a'.\n     valid_edge a' \\<and>\n     sourcenode a' = sourcenode a \\<and>\n     \\<not> n strongly-postdominates targetnode a'\n\ngoal (1 subgoal):\n 1. \\<nexists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and>\n       \\<not> n strongly-postdominates targetnode a' \\<Longrightarrow>\n    False", "hence all:\"\\<forall>a'. valid_edge a' \\<and> sourcenode a' = sourcenode a \\<longrightarrow> \n                    n strongly-postdominates (targetnode a')\""], ["proof (prove)\nusing this:\n  \\<nexists>a'.\n     valid_edge a' \\<and>\n     sourcenode a' = sourcenode a \\<and>\n     \\<not> n strongly-postdominates targetnode a'\n\ngoal (1 subgoal):\n 1. \\<forall>a'.\n       valid_edge a' \\<and> sourcenode a' = sourcenode a \\<longrightarrow>\n       n strongly-postdominates targetnode a'", "by auto"], ["proof (state)\nthis:\n  \\<forall>a'.\n     valid_edge a' \\<and> sourcenode a' = sourcenode a \\<longrightarrow>\n     n strongly-postdominates targetnode a'\n\ngoal (1 subgoal):\n 1. \\<nexists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and>\n       \\<not> n strongly-postdominates targetnode a' \\<Longrightarrow>\n    False", "let ?N = \"{n'. \\<exists>a'. sourcenode a' =  sourcenode a \\<and> valid_edge a' \\<and> \n                        targetnode a' = n'}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and>\n       \\<not> n strongly-postdominates targetnode a' \\<Longrightarrow>\n    False", "from all"], ["proof (chain)\npicking this:\n  \\<forall>a'.\n     valid_edge a' \\<and> sourcenode a' = sourcenode a \\<longrightarrow>\n     n strongly-postdominates targetnode a'", "have \"\\<forall>nx \\<in> ?N. \\<exists>a'. valid_edge a' \\<and> sourcenode a' = sourcenode a \\<and> \n      targetnode a' = nx \\<and> n strongly-postdominates nx\""], ["proof (prove)\nusing this:\n  \\<forall>a'.\n     valid_edge a' \\<and> sourcenode a' = sourcenode a \\<longrightarrow>\n     n strongly-postdominates targetnode a'\n\ngoal (1 subgoal):\n 1. \\<forall>nx\\<in>{n'.\n                     \\<exists>a'.\n                        sourcenode a' = sourcenode a \\<and>\n                        valid_edge a' \\<and> targetnode a' = n'}.\n       \\<exists>a'.\n          valid_edge a' \\<and>\n          sourcenode a' = sourcenode a \\<and>\n          targetnode a' = nx \\<and> n strongly-postdominates nx", "by auto"], ["proof (state)\nthis:\n  \\<forall>nx\\<in>{n'.\n                   \\<exists>a'.\n                      sourcenode a' = sourcenode a \\<and>\n                      valid_edge a' \\<and> targetnode a' = n'}.\n     \\<exists>a'.\n        valid_edge a' \\<and>\n        sourcenode a' = sourcenode a \\<and>\n        targetnode a' = nx \\<and> n strongly-postdominates nx\n\ngoal (1 subgoal):\n 1. \\<nexists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and>\n       \\<not> n strongly-postdominates targetnode a' \\<Longrightarrow>\n    False", "with assms"], ["proof (chain)\npicking this:\n  \\<not> n strongly-postdominates sourcenode a\n  valid_node n\n  valid_edge a\n  \\<forall>nx\\<in>{n'.\n                   \\<exists>a'.\n                      sourcenode a' = sourcenode a \\<and>\n                      valid_edge a' \\<and> targetnode a' = n'}.\n     \\<exists>a'.\n        valid_edge a' \\<and>\n        sourcenode a' = sourcenode a \\<and>\n        targetnode a' = nx \\<and> n strongly-postdominates nx", "obtain a' where \"valid_edge a'\" \n      and \"sourcenode a' =  sourcenode a\" and \"targetnode a' \\<notin> ?N\""], ["proof (prove)\nusing this:\n  \\<not> n strongly-postdominates sourcenode a\n  valid_node n\n  valid_edge a\n  \\<forall>nx\\<in>{n'.\n                   \\<exists>a'.\n                      sourcenode a' = sourcenode a \\<and>\n                      valid_edge a' \\<and> targetnode a' = n'}.\n     \\<exists>a'.\n        valid_edge a' \\<and>\n        sourcenode a' = sourcenode a \\<and>\n        targetnode a' = nx \\<and> n strongly-postdominates nx\n\ngoal (1 subgoal):\n 1. (\\<And>a'.\n        \\<lbrakk>valid_edge a'; sourcenode a' = sourcenode a;\n         targetnode a'\n         \\<notin> {n'.\n                   \\<exists>a'.\n                      sourcenode a' = sourcenode a \\<and>\n                      valid_edge a' \\<and> targetnode a' = n'}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(erule not_strong_postdominate_successor_set)"], ["proof (state)\nthis:\n  valid_edge a'\n  sourcenode a' = sourcenode a\n  targetnode a'\n  \\<notin> {n'.\n            \\<exists>a'.\n               sourcenode a' = sourcenode a \\<and>\n               valid_edge a' \\<and> targetnode a' = n'}\n\ngoal (1 subgoal):\n 1. \\<nexists>a'.\n       valid_edge a' \\<and>\n       sourcenode a' = sourcenode a \\<and>\n       \\<not> n strongly-postdominates targetnode a' \\<Longrightarrow>\n    False", "thus False"], ["proof (prove)\nusing this:\n  valid_edge a'\n  sourcenode a' = sourcenode a\n  targetnode a'\n  \\<notin> {n'.\n            \\<exists>a'.\n               sourcenode a' = sourcenode a \\<and>\n               valid_edge a' \\<and> targetnode a' = n'}\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>a'.\n     valid_edge a' \\<and>\n     sourcenode a' = sourcenode a \\<and>\n     \\<not> n strongly-postdominates targetnode a'\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}