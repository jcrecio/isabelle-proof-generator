{"file_name": "/home/qj213/afp-2021-10-22/thys/Slicing/Dynamic/DynSlice.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Slicing", "problem_names": ["lemma slice_path_length:\n  \"length(slice_path as) = length as\"", "lemma slice_path_right_Cons:\n  assumes slice:\"slice_path as = x#xs\"\n  obtains a' as' where \"as = a'#as'\" and \"slice_path as' = xs\"", "lemma select_edge_kinds_max_bv:\n  \"select_edge_kinds as (replicate (length as) True) = kinds as\"", "lemma slice_path_leqs_information_same_Uses:\n  \"\\<lbrakk>n -as\\<rightarrow>* n'; bs \\<preceq>\\<^sub>b bs'; slice_path as = bs;\n    select_edge_kinds as bs = es; select_edge_kinds as bs' = es'; \n    \\<forall>V xs. (V,xs,as) \\<in> dependent_live_vars n' \\<longrightarrow> state_val s V = state_val s' V;\n    preds es' s'\\<rbrakk> \n  \\<Longrightarrow> (\\<forall>V \\<in> Use n'. state_val (transfers es s) V =\n      state_val (transfers es' s') V) \\<and> preds es s\"", "theorem fundamental_property_of_path_slicing:\n  assumes \"n -as\\<rightarrow>* n'\" and \"preds (kinds as) s\"\n  shows \"(\\<forall>V \\<in> Use n'. state_val (transfers (slice_kinds as) s) V = \n                         state_val (transfers (kinds as) s) V)\" \n  and \"preds (slice_kinds as) s\"", "theorem fundamental_property_of_path_slicing_semantically:\n  assumes \"n \\<triangleq> c\" and \"\\<langle>c,s\\<rangle> \\<Rightarrow> \\<langle>c',s'\\<rangle>\"\n  obtains n' as where \"n -as\\<rightarrow>* n'\" and \"preds (slice_kinds as) s\" \n  and \"n' \\<triangleq> c'\" \n  and \"\\<forall>V \\<in> Use n'. state_val (transfers (slice_kinds as) s) V = \n                     state_val s' V\""], "translations": [["", "lemma slice_path_length:\n  \"length(slice_path as) = length as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (slice_path as) = length as", "by(induct as) auto"], ["", "lemma slice_path_right_Cons:\n  assumes slice:\"slice_path as = x#xs\"\n  obtains a' as' where \"as = a'#as'\" and \"slice_path as' = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a' as'.\n        \\<lbrakk>as = a' # as'; slice_path as' = xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(atomize_elim)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a' as'. as = a' # as' \\<and> slice_path as' = xs", "from slice"], ["proof (chain)\npicking this:\n  slice_path as = x # xs", "show \"\\<exists>a' as'. as = a'#as' \\<and> slice_path as' = xs\""], ["proof (prove)\nusing this:\n  slice_path as = x # xs\n\ngoal (1 subgoal):\n 1. \\<exists>a' as'. as = a' # as' \\<and> slice_path as' = xs", "by(induct as) auto"], ["proof (state)\nthis:\n  \\<exists>a' as'. as = a' # as' \\<and> slice_path as' = xs\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>The proof of the fundamental property of (dynamic) slicing\\<close>"], ["", "fun select_edge_kinds :: \"'edge list \\<Rightarrow> bit_vector \\<Rightarrow> 'state edge_kind list\"\nwhere \"select_edge_kinds [] [] = []\"\n  | \"select_edge_kinds (a#as) (b#bs) = (if b then kind a\n      else (case kind a of \\<Up>f \\<Rightarrow> \\<Up>id | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>))#select_edge_kinds as bs\""], ["", "definition slice_kinds :: \"'edge list \\<Rightarrow> 'state edge_kind list\"\n  where \"slice_kinds as = select_edge_kinds as (slice_path as)\""], ["", "lemma select_edge_kinds_max_bv:\n  \"select_edge_kinds as (replicate (length as) True) = kinds as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. select_edge_kinds as (replicate (length as) True) = kinds as", "by(induct as,auto simp:kinds_def)"], ["", "lemma slice_path_leqs_information_same_Uses:\n  \"\\<lbrakk>n -as\\<rightarrow>* n'; bs \\<preceq>\\<^sub>b bs'; slice_path as = bs;\n    select_edge_kinds as bs = es; select_edge_kinds as bs' = es'; \n    \\<forall>V xs. (V,xs,as) \\<in> dependent_live_vars n' \\<longrightarrow> state_val s V = state_val s' V;\n    preds es' s'\\<rbrakk> \n  \\<Longrightarrow> (\\<forall>V \\<in> Use n'. state_val (transfers es s) V =\n      state_val (transfers es' s') V) \\<and> preds es s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n -as\\<rightarrow>* n'; bs \\<preceq>\\<^sub>b bs';\n     slice_path as = bs; select_edge_kinds as bs = es;\n     select_edge_kinds as bs' = es';\n     \\<forall>V xs.\n        (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n        state_val s V = state_val s' V;\n     preds es' s'\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                          state_val (transfers es s) V =\n                          state_val (transfers es' s') V) \\<and>\n                      preds es s", "proof(induct bs bs' arbitrary:as es es' n s s' rule:bv_leqs.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b [];\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 2. \\<And>x xs y ys as es es' n s s'.\n       \\<lbrakk>\\<And>as es es' n s s'.\n                   \\<lbrakk>n -as\\<rightarrow>* n'; xs \\<preceq>\\<^sub>b ys;\n                    slice_path as = xs; select_edge_kinds as xs = es;\n                    select_edge_kinds as ys = es';\n                    \\<forall>V xs.\n                       (V, xs, as)\n                       \\<in> dependent_live_vars n' \\<longrightarrow>\n                       state_val s V = state_val s' V;\n                    preds es' s'\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n   state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n                                     preds es s;\n        n -as\\<rightarrow>* n'; x # xs \\<preceq>\\<^sub>b y # ys;\n        slice_path as = x # xs; select_edge_kinds as (x # xs) = es;\n        select_edge_kinds as (y # ys) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 3. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; v # va \\<preceq>\\<^sub>b [];\n        slice_path as = v # va; select_edge_kinds as (v # va) = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 4. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b v # va;\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as (v # va) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s", "case 1"], ["proof (state)\nthis:\n  n -as\\<rightarrow>* n'\n  [] \\<preceq>\\<^sub>b []\n  slice_path as = []\n  select_edge_kinds as [] = es\n  select_edge_kinds as [] = es'\n  \\<forall>V xs.\n     (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n     state_val s V = state_val s' V\n  preds es' s'\n\ngoal (4 subgoals):\n 1. \\<And>as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b [];\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 2. \\<And>x xs y ys as es es' n s s'.\n       \\<lbrakk>\\<And>as es es' n s s'.\n                   \\<lbrakk>n -as\\<rightarrow>* n'; xs \\<preceq>\\<^sub>b ys;\n                    slice_path as = xs; select_edge_kinds as xs = es;\n                    select_edge_kinds as ys = es';\n                    \\<forall>V xs.\n                       (V, xs, as)\n                       \\<in> dependent_live_vars n' \\<longrightarrow>\n                       state_val s V = state_val s' V;\n                    preds es' s'\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n   state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n                                     preds es s;\n        n -as\\<rightarrow>* n'; x # xs \\<preceq>\\<^sub>b y # ys;\n        slice_path as = x # xs; select_edge_kinds as (x # xs) = es;\n        select_edge_kinds as (y # ys) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 3. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; v # va \\<preceq>\\<^sub>b [];\n        slice_path as = v # va; select_edge_kinds as (v # va) = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 4. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b v # va;\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as (v # va) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s", "from \\<open>slice_path as = []\\<close>"], ["proof (chain)\npicking this:\n  slice_path as = []", "have \"as = []\""], ["proof (prove)\nusing this:\n  slice_path as = []\n\ngoal (1 subgoal):\n 1. as = []", "by(cases as) auto"], ["proof (state)\nthis:\n  as = []\n\ngoal (4 subgoals):\n 1. \\<And>as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b [];\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 2. \\<And>x xs y ys as es es' n s s'.\n       \\<lbrakk>\\<And>as es es' n s s'.\n                   \\<lbrakk>n -as\\<rightarrow>* n'; xs \\<preceq>\\<^sub>b ys;\n                    slice_path as = xs; select_edge_kinds as xs = es;\n                    select_edge_kinds as ys = es';\n                    \\<forall>V xs.\n                       (V, xs, as)\n                       \\<in> dependent_live_vars n' \\<longrightarrow>\n                       state_val s V = state_val s' V;\n                    preds es' s'\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n   state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n                                     preds es s;\n        n -as\\<rightarrow>* n'; x # xs \\<preceq>\\<^sub>b y # ys;\n        slice_path as = x # xs; select_edge_kinds as (x # xs) = es;\n        select_edge_kinds as (y # ys) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 3. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; v # va \\<preceq>\\<^sub>b [];\n        slice_path as = v # va; select_edge_kinds as (v # va) = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 4. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b v # va;\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as (v # va) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s", "with \\<open>select_edge_kinds as [] = es\\<close> \\<open>select_edge_kinds as [] = es'\\<close>"], ["proof (chain)\npicking this:\n  select_edge_kinds as [] = es\n  select_edge_kinds as [] = es'\n  as = []", "have \"es = []\" and \"es' = []\""], ["proof (prove)\nusing this:\n  select_edge_kinds as [] = es\n  select_edge_kinds as [] = es'\n  as = []\n\ngoal (1 subgoal):\n 1. es = [] &&& es' = []", "by simp_all"], ["proof (state)\nthis:\n  es = []\n  es' = []\n\ngoal (4 subgoals):\n 1. \\<And>as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b [];\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 2. \\<And>x xs y ys as es es' n s s'.\n       \\<lbrakk>\\<And>as es es' n s s'.\n                   \\<lbrakk>n -as\\<rightarrow>* n'; xs \\<preceq>\\<^sub>b ys;\n                    slice_path as = xs; select_edge_kinds as xs = es;\n                    select_edge_kinds as ys = es';\n                    \\<forall>V xs.\n                       (V, xs, as)\n                       \\<in> dependent_live_vars n' \\<longrightarrow>\n                       state_val s V = state_val s' V;\n                    preds es' s'\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n   state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n                                     preds es s;\n        n -as\\<rightarrow>* n'; x # xs \\<preceq>\\<^sub>b y # ys;\n        slice_path as = x # xs; select_edge_kinds as (x # xs) = es;\n        select_edge_kinds as (y # ys) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 3. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; v # va \\<preceq>\\<^sub>b [];\n        slice_path as = v # va; select_edge_kinds as (v # va) = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 4. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b v # va;\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as (v # va) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s", "{"], ["proof (state)\nthis:\n  es = []\n  es' = []\n\ngoal (4 subgoals):\n 1. \\<And>as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b [];\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 2. \\<And>x xs y ys as es es' n s s'.\n       \\<lbrakk>\\<And>as es es' n s s'.\n                   \\<lbrakk>n -as\\<rightarrow>* n'; xs \\<preceq>\\<^sub>b ys;\n                    slice_path as = xs; select_edge_kinds as xs = es;\n                    select_edge_kinds as ys = es';\n                    \\<forall>V xs.\n                       (V, xs, as)\n                       \\<in> dependent_live_vars n' \\<longrightarrow>\n                       state_val s V = state_val s' V;\n                    preds es' s'\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n   state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n                                     preds es s;\n        n -as\\<rightarrow>* n'; x # xs \\<preceq>\\<^sub>b y # ys;\n        slice_path as = x # xs; select_edge_kinds as (x # xs) = es;\n        select_edge_kinds as (y # ys) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 3. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; v # va \\<preceq>\\<^sub>b [];\n        slice_path as = v # va; select_edge_kinds as (v # va) = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 4. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b v # va;\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as (v # va) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s", "fix V"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b [];\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 2. \\<And>x xs y ys as es es' n s s'.\n       \\<lbrakk>\\<And>as es es' n s s'.\n                   \\<lbrakk>n -as\\<rightarrow>* n'; xs \\<preceq>\\<^sub>b ys;\n                    slice_path as = xs; select_edge_kinds as xs = es;\n                    select_edge_kinds as ys = es';\n                    \\<forall>V xs.\n                       (V, xs, as)\n                       \\<in> dependent_live_vars n' \\<longrightarrow>\n                       state_val s V = state_val s' V;\n                    preds es' s'\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n   state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n                                     preds es s;\n        n -as\\<rightarrow>* n'; x # xs \\<preceq>\\<^sub>b y # ys;\n        slice_path as = x # xs; select_edge_kinds as (x # xs) = es;\n        select_edge_kinds as (y # ys) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 3. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; v # va \\<preceq>\\<^sub>b [];\n        slice_path as = v # va; select_edge_kinds as (v # va) = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 4. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b v # va;\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as (v # va) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s", "assume \"V \\<in> Use n'\""], ["proof (state)\nthis:\n  V \\<in> Use n'\n\ngoal (4 subgoals):\n 1. \\<And>as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b [];\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 2. \\<And>x xs y ys as es es' n s s'.\n       \\<lbrakk>\\<And>as es es' n s s'.\n                   \\<lbrakk>n -as\\<rightarrow>* n'; xs \\<preceq>\\<^sub>b ys;\n                    slice_path as = xs; select_edge_kinds as xs = es;\n                    select_edge_kinds as ys = es';\n                    \\<forall>V xs.\n                       (V, xs, as)\n                       \\<in> dependent_live_vars n' \\<longrightarrow>\n                       state_val s V = state_val s' V;\n                    preds es' s'\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n   state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n                                     preds es s;\n        n -as\\<rightarrow>* n'; x # xs \\<preceq>\\<^sub>b y # ys;\n        slice_path as = x # xs; select_edge_kinds as (x # xs) = es;\n        select_edge_kinds as (y # ys) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 3. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; v # va \\<preceq>\\<^sub>b [];\n        slice_path as = v # va; select_edge_kinds as (v # va) = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 4. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b v # va;\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as (v # va) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s", "hence \"(V,[],[]) \\<in> dependent_live_vars n'\""], ["proof (prove)\nusing this:\n  V \\<in> Use n'\n\ngoal (1 subgoal):\n 1. (V, [], []) \\<in> dependent_live_vars n'", "by(rule dep_vars_Use)"], ["proof (state)\nthis:\n  (V, [], []) \\<in> dependent_live_vars n'\n\ngoal (4 subgoals):\n 1. \\<And>as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b [];\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 2. \\<And>x xs y ys as es es' n s s'.\n       \\<lbrakk>\\<And>as es es' n s s'.\n                   \\<lbrakk>n -as\\<rightarrow>* n'; xs \\<preceq>\\<^sub>b ys;\n                    slice_path as = xs; select_edge_kinds as xs = es;\n                    select_edge_kinds as ys = es';\n                    \\<forall>V xs.\n                       (V, xs, as)\n                       \\<in> dependent_live_vars n' \\<longrightarrow>\n                       state_val s V = state_val s' V;\n                    preds es' s'\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n   state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n                                     preds es s;\n        n -as\\<rightarrow>* n'; x # xs \\<preceq>\\<^sub>b y # ys;\n        slice_path as = x # xs; select_edge_kinds as (x # xs) = es;\n        select_edge_kinds as (y # ys) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 3. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; v # va \\<preceq>\\<^sub>b [];\n        slice_path as = v # va; select_edge_kinds as (v # va) = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 4. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b v # va;\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as (v # va) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s", "with \\<open>\\<forall>V xs. (V,xs,as) \\<in> dependent_live_vars n' \\<longrightarrow>\n                  state_val s V = state_val s' V\\<close> \\<open>V \\<in> Use n'\\<close> \\<open>as = []\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>V xs.\n     (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n     state_val s V = state_val s' V\n  V \\<in> Use n'\n  as = []\n  (V, [], []) \\<in> dependent_live_vars n'", "have \"state_val s V = state_val s' V\""], ["proof (prove)\nusing this:\n  \\<forall>V xs.\n     (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n     state_val s V = state_val s' V\n  V \\<in> Use n'\n  as = []\n  (V, [], []) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. state_val s V = state_val s' V", "by blast"], ["proof (state)\nthis:\n  state_val s V = state_val s' V\n\ngoal (4 subgoals):\n 1. \\<And>as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b [];\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 2. \\<And>x xs y ys as es es' n s s'.\n       \\<lbrakk>\\<And>as es es' n s s'.\n                   \\<lbrakk>n -as\\<rightarrow>* n'; xs \\<preceq>\\<^sub>b ys;\n                    slice_path as = xs; select_edge_kinds as xs = es;\n                    select_edge_kinds as ys = es';\n                    \\<forall>V xs.\n                       (V, xs, as)\n                       \\<in> dependent_live_vars n' \\<longrightarrow>\n                       state_val s V = state_val s' V;\n                    preds es' s'\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n   state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n                                     preds es s;\n        n -as\\<rightarrow>* n'; x # xs \\<preceq>\\<^sub>b y # ys;\n        slice_path as = x # xs; select_edge_kinds as (x # xs) = es;\n        select_edge_kinds as (y # ys) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 3. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; v # va \\<preceq>\\<^sub>b [];\n        slice_path as = v # va; select_edge_kinds as (v # va) = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 4. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b v # va;\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as (v # va) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s", "}"], ["proof (state)\nthis:\n  ?V2 \\<in> Use n' \\<Longrightarrow> state_val s ?V2 = state_val s' ?V2\n\ngoal (4 subgoals):\n 1. \\<And>as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b [];\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 2. \\<And>x xs y ys as es es' n s s'.\n       \\<lbrakk>\\<And>as es es' n s s'.\n                   \\<lbrakk>n -as\\<rightarrow>* n'; xs \\<preceq>\\<^sub>b ys;\n                    slice_path as = xs; select_edge_kinds as xs = es;\n                    select_edge_kinds as ys = es';\n                    \\<forall>V xs.\n                       (V, xs, as)\n                       \\<in> dependent_live_vars n' \\<longrightarrow>\n                       state_val s V = state_val s' V;\n                    preds es' s'\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n   state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n                                     preds es s;\n        n -as\\<rightarrow>* n'; x # xs \\<preceq>\\<^sub>b y # ys;\n        slice_path as = x # xs; select_edge_kinds as (x # xs) = es;\n        select_edge_kinds as (y # ys) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 3. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; v # va \\<preceq>\\<^sub>b [];\n        slice_path as = v # va; select_edge_kinds as (v # va) = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 4. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b v # va;\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as (v # va) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s", "with \\<open>es = []\\<close> \\<open>es' = []\\<close>"], ["proof (chain)\npicking this:\n  es = []\n  es' = []\n  ?V2 \\<in> Use n' \\<Longrightarrow> state_val s ?V2 = state_val s' ?V2", "show ?case"], ["proof (prove)\nusing this:\n  es = []\n  es' = []\n  ?V2 \\<in> Use n' \\<Longrightarrow> state_val s ?V2 = state_val s' ?V2\n\ngoal (1 subgoal):\n 1. (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "by simp"], ["proof (state)\nthis:\n  (\\<forall>V\\<in>Use n'.\n      state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n  preds es s\n\ngoal (3 subgoals):\n 1. \\<And>x xs y ys as es es' n s s'.\n       \\<lbrakk>\\<And>as es es' n s s'.\n                   \\<lbrakk>n -as\\<rightarrow>* n'; xs \\<preceq>\\<^sub>b ys;\n                    slice_path as = xs; select_edge_kinds as xs = es;\n                    select_edge_kinds as ys = es';\n                    \\<forall>V xs.\n                       (V, xs, as)\n                       \\<in> dependent_live_vars n' \\<longrightarrow>\n                       state_val s V = state_val s' V;\n                    preds es' s'\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n   state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n                                     preds es s;\n        n -as\\<rightarrow>* n'; x # xs \\<preceq>\\<^sub>b y # ys;\n        slice_path as = x # xs; select_edge_kinds as (x # xs) = es;\n        select_edge_kinds as (y # ys) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 2. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; v # va \\<preceq>\\<^sub>b [];\n        slice_path as = v # va; select_edge_kinds as (v # va) = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 3. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b v # va;\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as (v # va) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x xs y ys as es es' n s s'.\n       \\<lbrakk>\\<And>as es es' n s s'.\n                   \\<lbrakk>n -as\\<rightarrow>* n'; xs \\<preceq>\\<^sub>b ys;\n                    slice_path as = xs; select_edge_kinds as xs = es;\n                    select_edge_kinds as ys = es';\n                    \\<forall>V xs.\n                       (V, xs, as)\n                       \\<in> dependent_live_vars n' \\<longrightarrow>\n                       state_val s V = state_val s' V;\n                    preds es' s'\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n   state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n                                     preds es s;\n        n -as\\<rightarrow>* n'; x # xs \\<preceq>\\<^sub>b y # ys;\n        slice_path as = x # xs; select_edge_kinds as (x # xs) = es;\n        select_edge_kinds as (y # ys) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 2. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; v # va \\<preceq>\\<^sub>b [];\n        slice_path as = v # va; select_edge_kinds as (v # va) = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 3. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b v # va;\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as (v # va) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s", "case (2 x xs y ys)"], ["proof (state)\nthis:\n  \\<lbrakk>?n -?as\\<rightarrow>* n'; xs \\<preceq>\\<^sub>b ys;\n   slice_path ?as = xs; select_edge_kinds ?as xs = ?es;\n   select_edge_kinds ?as ys = ?es';\n   \\<forall>V xs.\n      (V, xs, ?as) \\<in> dependent_live_vars n' \\<longrightarrow>\n      state_val ?s V = state_val ?s' V;\n   preds ?es' ?s'\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                        state_val (transfers ?es ?s) V =\n                        state_val (transfers ?es' ?s') V) \\<and>\n                    preds ?es ?s\n  n -as\\<rightarrow>* n'\n  x # xs \\<preceq>\\<^sub>b y # ys\n  slice_path as = x # xs\n  select_edge_kinds as (x # xs) = es\n  select_edge_kinds as (y # ys) = es'\n  \\<forall>V xs.\n     (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n     state_val s V = state_val s' V\n  preds es' s'\n\ngoal (3 subgoals):\n 1. \\<And>x xs y ys as es es' n s s'.\n       \\<lbrakk>\\<And>as es es' n s s'.\n                   \\<lbrakk>n -as\\<rightarrow>* n'; xs \\<preceq>\\<^sub>b ys;\n                    slice_path as = xs; select_edge_kinds as xs = es;\n                    select_edge_kinds as ys = es';\n                    \\<forall>V xs.\n                       (V, xs, as)\n                       \\<in> dependent_live_vars n' \\<longrightarrow>\n                       state_val s V = state_val s' V;\n                    preds es' s'\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n   state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n                                     preds es s;\n        n -as\\<rightarrow>* n'; x # xs \\<preceq>\\<^sub>b y # ys;\n        slice_path as = x # xs; select_edge_kinds as (x # xs) = es;\n        select_edge_kinds as (y # ys) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 2. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; v # va \\<preceq>\\<^sub>b [];\n        slice_path as = v # va; select_edge_kinds as (v # va) = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 3. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b v # va;\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as (v # va) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s", "note all = \\<open>\\<forall>V xs. (V,xs,as) \\<in> dependent_live_vars n' \\<longrightarrow>\n                     state_val s V = state_val s' V\\<close>"], ["proof (state)\nthis:\n  \\<forall>V xs.\n     (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n     state_val s V = state_val s' V\n\ngoal (3 subgoals):\n 1. \\<And>x xs y ys as es es' n s s'.\n       \\<lbrakk>\\<And>as es es' n s s'.\n                   \\<lbrakk>n -as\\<rightarrow>* n'; xs \\<preceq>\\<^sub>b ys;\n                    slice_path as = xs; select_edge_kinds as xs = es;\n                    select_edge_kinds as ys = es';\n                    \\<forall>V xs.\n                       (V, xs, as)\n                       \\<in> dependent_live_vars n' \\<longrightarrow>\n                       state_val s V = state_val s' V;\n                    preds es' s'\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n   state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n                                     preds es s;\n        n -as\\<rightarrow>* n'; x # xs \\<preceq>\\<^sub>b y # ys;\n        slice_path as = x # xs; select_edge_kinds as (x # xs) = es;\n        select_edge_kinds as (y # ys) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 2. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; v # va \\<preceq>\\<^sub>b [];\n        slice_path as = v # va; select_edge_kinds as (v # va) = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 3. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b v # va;\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as (v # va) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s", "note IH = \\<open>\\<And>as es es' n s s'. \\<lbrakk>n -as\\<rightarrow>* n'; xs \\<preceq>\\<^sub>b ys; slice_path as = xs; \n                        select_edge_kinds as xs = es; select_edge_kinds as ys = es';\n                        \\<forall>V xs. (V,xs,as) \\<in> dependent_live_vars n' \\<longrightarrow>\n                                   state_val s V = state_val s' V; \n                           preds es' s'\\<rbrakk>\n            \\<Longrightarrow> (\\<forall>V \\<in> Use n'. state_val (transfers es s) V =\n                state_val (transfers es' s') V) \\<and> preds es s\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>?n -?as\\<rightarrow>* n'; xs \\<preceq>\\<^sub>b ys;\n   slice_path ?as = xs; select_edge_kinds ?as xs = ?es;\n   select_edge_kinds ?as ys = ?es';\n   \\<forall>V xs.\n      (V, xs, ?as) \\<in> dependent_live_vars n' \\<longrightarrow>\n      state_val ?s V = state_val ?s' V;\n   preds ?es' ?s'\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                        state_val (transfers ?es ?s) V =\n                        state_val (transfers ?es' ?s') V) \\<and>\n                    preds ?es ?s\n\ngoal (3 subgoals):\n 1. \\<And>x xs y ys as es es' n s s'.\n       \\<lbrakk>\\<And>as es es' n s s'.\n                   \\<lbrakk>n -as\\<rightarrow>* n'; xs \\<preceq>\\<^sub>b ys;\n                    slice_path as = xs; select_edge_kinds as xs = es;\n                    select_edge_kinds as ys = es';\n                    \\<forall>V xs.\n                       (V, xs, as)\n                       \\<in> dependent_live_vars n' \\<longrightarrow>\n                       state_val s V = state_val s' V;\n                    preds es' s'\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n   state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n                                     preds es s;\n        n -as\\<rightarrow>* n'; x # xs \\<preceq>\\<^sub>b y # ys;\n        slice_path as = x # xs; select_edge_kinds as (x # xs) = es;\n        select_edge_kinds as (y # ys) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 2. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; v # va \\<preceq>\\<^sub>b [];\n        slice_path as = v # va; select_edge_kinds as (v # va) = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 3. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b v # va;\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as (v # va) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s", "from \\<open>x#xs \\<preceq>\\<^sub>b y#ys\\<close>"], ["proof (chain)\npicking this:\n  x # xs \\<preceq>\\<^sub>b y # ys", "have \"x \\<longrightarrow> y\" and \"xs \\<preceq>\\<^sub>b ys\""], ["proof (prove)\nusing this:\n  x # xs \\<preceq>\\<^sub>b y # ys\n\ngoal (1 subgoal):\n 1. x \\<longrightarrow> y &&& xs \\<preceq>\\<^sub>b ys", "by simp_all"], ["proof (state)\nthis:\n  x \\<longrightarrow> y\n  xs \\<preceq>\\<^sub>b ys\n\ngoal (3 subgoals):\n 1. \\<And>x xs y ys as es es' n s s'.\n       \\<lbrakk>\\<And>as es es' n s s'.\n                   \\<lbrakk>n -as\\<rightarrow>* n'; xs \\<preceq>\\<^sub>b ys;\n                    slice_path as = xs; select_edge_kinds as xs = es;\n                    select_edge_kinds as ys = es';\n                    \\<forall>V xs.\n                       (V, xs, as)\n                       \\<in> dependent_live_vars n' \\<longrightarrow>\n                       state_val s V = state_val s' V;\n                    preds es' s'\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n   state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n                                     preds es s;\n        n -as\\<rightarrow>* n'; x # xs \\<preceq>\\<^sub>b y # ys;\n        slice_path as = x # xs; select_edge_kinds as (x # xs) = es;\n        select_edge_kinds as (y # ys) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 2. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; v # va \\<preceq>\\<^sub>b [];\n        slice_path as = v # va; select_edge_kinds as (v # va) = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 3. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b v # va;\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as (v # va) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s", "from \\<open>slice_path as = x#xs\\<close>"], ["proof (chain)\npicking this:\n  slice_path as = x # xs", "obtain a' as' where \"as = a'#as'\"\n    and \"slice_path as' = xs\""], ["proof (prove)\nusing this:\n  slice_path as = x # xs\n\ngoal (1 subgoal):\n 1. (\\<And>a' as'.\n        \\<lbrakk>as = a' # as'; slice_path as' = xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(erule slice_path_right_Cons)"], ["proof (state)\nthis:\n  as = a' # as'\n  slice_path as' = xs\n\ngoal (3 subgoals):\n 1. \\<And>x xs y ys as es es' n s s'.\n       \\<lbrakk>\\<And>as es es' n s s'.\n                   \\<lbrakk>n -as\\<rightarrow>* n'; xs \\<preceq>\\<^sub>b ys;\n                    slice_path as = xs; select_edge_kinds as xs = es;\n                    select_edge_kinds as ys = es';\n                    \\<forall>V xs.\n                       (V, xs, as)\n                       \\<in> dependent_live_vars n' \\<longrightarrow>\n                       state_val s V = state_val s' V;\n                    preds es' s'\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n   state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n                                     preds es s;\n        n -as\\<rightarrow>* n'; x # xs \\<preceq>\\<^sub>b y # ys;\n        slice_path as = x # xs; select_edge_kinds as (x # xs) = es;\n        select_edge_kinds as (y # ys) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 2. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; v # va \\<preceq>\\<^sub>b [];\n        slice_path as = v # va; select_edge_kinds as (v # va) = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 3. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b v # va;\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as (v # va) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s", "from \\<open>as = a'#as'\\<close> \\<open>select_edge_kinds as (x#xs) = es\\<close>"], ["proof (chain)\npicking this:\n  as = a' # as'\n  select_edge_kinds as (x # xs) = es", "obtain ex esx where \"es = ex#esx\"\n    and ex:\"ex = (if x then kind a'\n                    else (case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>))\"\n    and \"select_edge_kinds as' xs = esx\""], ["proof (prove)\nusing this:\n  as = a' # as'\n  select_edge_kinds as (x # xs) = es\n\ngoal (1 subgoal):\n 1. (\\<And>ex esx.\n        \\<lbrakk>es = ex # esx;\n         ex =\n         (if x then kind a'\n          else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n               | (Q)\\<^sub>\\<surd> \\<Rightarrow>\n                   (\\<lambda>s. True)\\<^sub>\\<surd>);\n         select_edge_kinds as' xs = esx\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  es = ex # esx\n  ex =\n  (if x then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  select_edge_kinds as' xs = esx\n\ngoal (3 subgoals):\n 1. \\<And>x xs y ys as es es' n s s'.\n       \\<lbrakk>\\<And>as es es' n s s'.\n                   \\<lbrakk>n -as\\<rightarrow>* n'; xs \\<preceq>\\<^sub>b ys;\n                    slice_path as = xs; select_edge_kinds as xs = es;\n                    select_edge_kinds as ys = es';\n                    \\<forall>V xs.\n                       (V, xs, as)\n                       \\<in> dependent_live_vars n' \\<longrightarrow>\n                       state_val s V = state_val s' V;\n                    preds es' s'\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n   state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n                                     preds es s;\n        n -as\\<rightarrow>* n'; x # xs \\<preceq>\\<^sub>b y # ys;\n        slice_path as = x # xs; select_edge_kinds as (x # xs) = es;\n        select_edge_kinds as (y # ys) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 2. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; v # va \\<preceq>\\<^sub>b [];\n        slice_path as = v # va; select_edge_kinds as (v # va) = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 3. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b v # va;\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as (v # va) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s", "from \\<open>as = a'#as'\\<close> \\<open>select_edge_kinds as (y#ys) = es'\\<close>"], ["proof (chain)\npicking this:\n  as = a' # as'\n  select_edge_kinds as (y # ys) = es'", "obtain ex' esx' \n    where \"es' = ex'#esx'\"\n    and ex':\"ex' = (if y then kind a'\n                    else (case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>))\"\n    and \"select_edge_kinds as' ys = esx'\""], ["proof (prove)\nusing this:\n  as = a' # as'\n  select_edge_kinds as (y # ys) = es'\n\ngoal (1 subgoal):\n 1. (\\<And>ex' esx'.\n        \\<lbrakk>es' = ex' # esx';\n         ex' =\n         (if y then kind a'\n          else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n               | (Q)\\<^sub>\\<surd> \\<Rightarrow>\n                   (\\<lambda>s. True)\\<^sub>\\<surd>);\n         select_edge_kinds as' ys = esx'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  es' = ex' # esx'\n  ex' =\n  (if y then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  select_edge_kinds as' ys = esx'\n\ngoal (3 subgoals):\n 1. \\<And>x xs y ys as es es' n s s'.\n       \\<lbrakk>\\<And>as es es' n s s'.\n                   \\<lbrakk>n -as\\<rightarrow>* n'; xs \\<preceq>\\<^sub>b ys;\n                    slice_path as = xs; select_edge_kinds as xs = es;\n                    select_edge_kinds as ys = es';\n                    \\<forall>V xs.\n                       (V, xs, as)\n                       \\<in> dependent_live_vars n' \\<longrightarrow>\n                       state_val s V = state_val s' V;\n                    preds es' s'\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n   state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n                                     preds es s;\n        n -as\\<rightarrow>* n'; x # xs \\<preceq>\\<^sub>b y # ys;\n        slice_path as = x # xs; select_edge_kinds as (x # xs) = es;\n        select_edge_kinds as (y # ys) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 2. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; v # va \\<preceq>\\<^sub>b [];\n        slice_path as = v # va; select_edge_kinds as (v # va) = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 3. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b v # va;\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as (v # va) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s", "from \\<open>n -as\\<rightarrow>* n'\\<close> \\<open>as = a'#as'\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* n'\n  as = a' # as'", "have [simp]:\"n = sourcenode a'\" \n    and \"valid_edge a'\" and \"targetnode a' -as'\\<rightarrow>* n'\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n'\n  as = a' # as'\n\ngoal (1 subgoal):\n 1. n = sourcenode a' &&&\n    valid_edge a' &&& targetnode a' -as'\\<rightarrow>* n'", "by(auto elim:path_split_Cons)"], ["proof (state)\nthis:\n  n = sourcenode a'\n  valid_edge a'\n  targetnode a' -as'\\<rightarrow>* n'\n\ngoal (3 subgoals):\n 1. \\<And>x xs y ys as es es' n s s'.\n       \\<lbrakk>\\<And>as es es' n s s'.\n                   \\<lbrakk>n -as\\<rightarrow>* n'; xs \\<preceq>\\<^sub>b ys;\n                    slice_path as = xs; select_edge_kinds as xs = es;\n                    select_edge_kinds as ys = es';\n                    \\<forall>V xs.\n                       (V, xs, as)\n                       \\<in> dependent_live_vars n' \\<longrightarrow>\n                       state_val s V = state_val s' V;\n                    preds es' s'\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n   state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n                                     preds es s;\n        n -as\\<rightarrow>* n'; x # xs \\<preceq>\\<^sub>b y # ys;\n        slice_path as = x # xs; select_edge_kinds as (x # xs) = es;\n        select_edge_kinds as (y # ys) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 2. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; v # va \\<preceq>\\<^sub>b [];\n        slice_path as = v # va; select_edge_kinds as (v # va) = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 3. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b v # va;\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as (v # va) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s", "from \\<open>n -as\\<rightarrow>* n'\\<close> \\<open>as = a'#as'\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* n'\n  as = a' # as'", "have \"last(targetnodes as) = n'\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n'\n  as = a' # as'\n\ngoal (1 subgoal):\n 1. last (targetnodes as) = n'", "by(fastforce intro:path_targetnode)"], ["proof (state)\nthis:\n  last (targetnodes as) = n'\n\ngoal (3 subgoals):\n 1. \\<And>x xs y ys as es es' n s s'.\n       \\<lbrakk>\\<And>as es es' n s s'.\n                   \\<lbrakk>n -as\\<rightarrow>* n'; xs \\<preceq>\\<^sub>b ys;\n                    slice_path as = xs; select_edge_kinds as xs = es;\n                    select_edge_kinds as ys = es';\n                    \\<forall>V xs.\n                       (V, xs, as)\n                       \\<in> dependent_live_vars n' \\<longrightarrow>\n                       state_val s V = state_val s' V;\n                    preds es' s'\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n   state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n                                     preds es s;\n        n -as\\<rightarrow>* n'; x # xs \\<preceq>\\<^sub>b y # ys;\n        slice_path as = x # xs; select_edge_kinds as (x # xs) = es;\n        select_edge_kinds as (y # ys) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 2. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; v # va \\<preceq>\\<^sub>b [];\n        slice_path as = v # va; select_edge_kinds as (v # va) = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 3. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b v # va;\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as (v # va) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s", "from \\<open>preds es' s'\\<close> \\<open>es' = ex'#esx'\\<close>"], ["proof (chain)\npicking this:\n  preds es' s'\n  es' = ex' # esx'", "have \"pred ex' s'\"\n    and \"preds esx' (transfer ex' s')\""], ["proof (prove)\nusing this:\n  preds es' s'\n  es' = ex' # esx'\n\ngoal (1 subgoal):\n 1. pred ex' s' &&& preds esx' (transfer ex' s')", "by simp_all"], ["proof (state)\nthis:\n  pred ex' s'\n  preds esx' (transfer ex' s')\n\ngoal (3 subgoals):\n 1. \\<And>x xs y ys as es es' n s s'.\n       \\<lbrakk>\\<And>as es es' n s s'.\n                   \\<lbrakk>n -as\\<rightarrow>* n'; xs \\<preceq>\\<^sub>b ys;\n                    slice_path as = xs; select_edge_kinds as xs = es;\n                    select_edge_kinds as ys = es';\n                    \\<forall>V xs.\n                       (V, xs, as)\n                       \\<in> dependent_live_vars n' \\<longrightarrow>\n                       state_val s V = state_val s' V;\n                    preds es' s'\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n   state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n                                     preds es s;\n        n -as\\<rightarrow>* n'; x # xs \\<preceq>\\<^sub>b y # ys;\n        slice_path as = x # xs; select_edge_kinds as (x # xs) = es;\n        select_edge_kinds as (y # ys) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 2. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; v # va \\<preceq>\\<^sub>b [];\n        slice_path as = v # va; select_edge_kinds as (v # va) = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 3. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b v # va;\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as (v # va) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "proof(cases \"as' = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. as' = [] \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. as' \\<noteq> [] \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "case True"], ["proof (state)\nthis:\n  as' = []\n\ngoal (2 subgoals):\n 1. as' = [] \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. as' \\<noteq> [] \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "hence [simp]:\"as' = []\""], ["proof (prove)\nusing this:\n  as' = []\n\ngoal (1 subgoal):\n 1. as' = []", "by simp"], ["proof (state)\nthis:\n  as' = []\n\ngoal (2 subgoals):\n 1. as' = [] \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. as' \\<noteq> [] \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with \\<open>slice_path as' = xs\\<close> \\<open>xs \\<preceq>\\<^sub>b ys\\<close>"], ["proof (chain)\npicking this:\n  slice_path as' = xs\n  xs \\<preceq>\\<^sub>b ys\n  as' = []", "have [simp]:\"xs = [] \\<and> ys = []\""], ["proof (prove)\nusing this:\n  slice_path as' = xs\n  xs \\<preceq>\\<^sub>b ys\n  as' = []\n\ngoal (1 subgoal):\n 1. xs = [] \\<and> ys = []", "by auto(cases ys,auto)+"], ["proof (state)\nthis:\n  xs = [] \\<and> ys = []\n\ngoal (2 subgoals):\n 1. as' = [] \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. as' \\<noteq> [] \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with \\<open>select_edge_kinds as' xs = esx\\<close> \\<open>select_edge_kinds as' ys = esx'\\<close>"], ["proof (chain)\npicking this:\n  select_edge_kinds as' xs = esx\n  select_edge_kinds as' ys = esx'\n  xs = [] \\<and> ys = []", "have [simp]:\"esx = []\" and [simp]:\"esx' = []\""], ["proof (prove)\nusing this:\n  select_edge_kinds as' xs = esx\n  select_edge_kinds as' ys = esx'\n  xs = [] \\<and> ys = []\n\ngoal (1 subgoal):\n 1. esx = [] &&& esx' = []", "by simp_all"], ["proof (state)\nthis:\n  esx = []\n  esx' = []\n\ngoal (2 subgoals):\n 1. as' = [] \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. as' \\<noteq> [] \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "from True \\<open>targetnode a' -as'\\<rightarrow>* n'\\<close>"], ["proof (chain)\npicking this:\n  as' = []\n  targetnode a' -as'\\<rightarrow>* n'", "have [simp]:\"n' = targetnode a'\""], ["proof (prove)\nusing this:\n  as' = []\n  targetnode a' -as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. n' = targetnode a'", "by(auto elim:path.cases)"], ["proof (state)\nthis:\n  n' = targetnode a'\n\ngoal (2 subgoals):\n 1. as' = [] \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. as' \\<noteq> [] \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "proof(cases x)"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> x \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "case True"], ["proof (state)\nthis:\n  x\n\ngoal (2 subgoals):\n 1. x \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> x \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with \\<open>x \\<longrightarrow> y\\<close> ex ex'"], ["proof (chain)\npicking this:\n  x \\<longrightarrow> y\n  ex =\n  (if x then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  ex' =\n  (if y then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  x", "have [simp]:\"ex = kind a' \\<and> ex' = kind a'\""], ["proof (prove)\nusing this:\n  x \\<longrightarrow> y\n  ex =\n  (if x then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  ex' =\n  (if y then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  x\n\ngoal (1 subgoal):\n 1. ex = kind a' \\<and> ex' = kind a'", "by simp"], ["proof (state)\nthis:\n  ex = kind a' \\<and> ex' = kind a'\n\ngoal (2 subgoals):\n 1. x \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> x \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "have \"pred ex s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pred ex s", "proof(cases ex)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1. ex = \\<Up>x1 \\<Longrightarrow> pred ex s\n 2. \\<And>x2. ex = (x2)\\<^sub>\\<surd> \\<Longrightarrow> pred ex s", "case (Predicate Q)"], ["proof (state)\nthis:\n  ex = (Q)\\<^sub>\\<surd>\n\ngoal (2 subgoals):\n 1. \\<And>x1. ex = \\<Up>x1 \\<Longrightarrow> pred ex s\n 2. \\<And>x2. ex = (x2)\\<^sub>\\<surd> \\<Longrightarrow> pred ex s", "with ex ex' True \\<open>x \\<longrightarrow> y\\<close>"], ["proof (chain)\npicking this:\n  ex =\n  (if x then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  ex' =\n  (if y then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  x\n  x \\<longrightarrow> y\n  ex = (Q)\\<^sub>\\<surd>", "have [simp]:\"transfer ex s = s\" \n          and [simp]:\"transfer ex' s' = s'\""], ["proof (prove)\nusing this:\n  ex =\n  (if x then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  ex' =\n  (if y then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  x\n  x \\<longrightarrow> y\n  ex = (Q)\\<^sub>\\<surd>\n\ngoal (1 subgoal):\n 1. transfer ex s = s &&& transfer ex' s' = s'", "by(cases \"kind a'\",auto)+"], ["proof (state)\nthis:\n  transfer ex s = s\n  transfer ex' s' = s'\n\ngoal (2 subgoals):\n 1. \\<And>x1. ex = \\<Up>x1 \\<Longrightarrow> pred ex s\n 2. \\<And>x2. ex = (x2)\\<^sub>\\<surd> \\<Longrightarrow> pred ex s", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. pred ex s", "proof(cases \"n -[a']\\<rightarrow>\\<^sub>c\\<^sub>d n'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n -[a']\\<rightarrow>\\<^sub>c\\<^sub>d n' \\<Longrightarrow> pred ex s\n 2. \\<not> n -[a']\\<rightarrow>\\<^sub>c\\<^sub>d n' \\<Longrightarrow>\n    pred ex s", "case True"], ["proof (state)\nthis:\n  n -[a']\\<rightarrow>\\<^sub>c\\<^sub>d n'\n\ngoal (2 subgoals):\n 1. n -[a']\\<rightarrow>\\<^sub>c\\<^sub>d n' \\<Longrightarrow> pred ex s\n 2. \\<not> n -[a']\\<rightarrow>\\<^sub>c\\<^sub>d n' \\<Longrightarrow>\n    pred ex s", "{"], ["proof (state)\nthis:\n  n -[a']\\<rightarrow>\\<^sub>c\\<^sub>d n'\n\ngoal (2 subgoals):\n 1. n -[a']\\<rightarrow>\\<^sub>c\\<^sub>d n' \\<Longrightarrow> pred ex s\n 2. \\<not> n -[a']\\<rightarrow>\\<^sub>c\\<^sub>d n' \\<Longrightarrow>\n    pred ex s", "fix V'"], ["proof (state)\ngoal (2 subgoals):\n 1. n -[a']\\<rightarrow>\\<^sub>c\\<^sub>d n' \\<Longrightarrow> pred ex s\n 2. \\<not> n -[a']\\<rightarrow>\\<^sub>c\\<^sub>d n' \\<Longrightarrow>\n    pred ex s", "assume \"V' \\<in> Use n\""], ["proof (state)\nthis:\n  V' \\<in> Use n\n\ngoal (2 subgoals):\n 1. n -[a']\\<rightarrow>\\<^sub>c\\<^sub>d n' \\<Longrightarrow> pred ex s\n 2. \\<not> n -[a']\\<rightarrow>\\<^sub>c\\<^sub>d n' \\<Longrightarrow>\n    pred ex s", "with True \\<open>valid_edge a'\\<close>"], ["proof (chain)\npicking this:\n  n -[a']\\<rightarrow>\\<^sub>c\\<^sub>d n'\n  valid_edge a'\n  V' \\<in> Use n", "have \"(V',[],a'#[]@[]) \\<in> dependent_live_vars n'\""], ["proof (prove)\nusing this:\n  n -[a']\\<rightarrow>\\<^sub>c\\<^sub>d n'\n  valid_edge a'\n  V' \\<in> Use n\n\ngoal (1 subgoal):\n 1. (V', [], a' # [] @ []) \\<in> dependent_live_vars n'", "by(fastforce intro:dep_vars_Cons_cdep DynPDG_path_Nil \n                          simp:targetnodes_def)"], ["proof (state)\nthis:\n  (V', [], a' # [] @ []) \\<in> dependent_live_vars n'\n\ngoal (2 subgoals):\n 1. n -[a']\\<rightarrow>\\<^sub>c\\<^sub>d n' \\<Longrightarrow> pred ex s\n 2. \\<not> n -[a']\\<rightarrow>\\<^sub>c\\<^sub>d n' \\<Longrightarrow>\n    pred ex s", "with all \\<open>as = a'#as'\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>V xs.\n     (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n     state_val s V = state_val s' V\n  as = a' # as'\n  (V', [], a' # [] @ []) \\<in> dependent_live_vars n'", "have \"state_val s V' = state_val s' V'\""], ["proof (prove)\nusing this:\n  \\<forall>V xs.\n     (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n     state_val s V = state_val s' V\n  as = a' # as'\n  (V', [], a' # [] @ []) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. state_val s V' = state_val s' V'", "by fastforce"], ["proof (state)\nthis:\n  state_val s V' = state_val s' V'\n\ngoal (2 subgoals):\n 1. n -[a']\\<rightarrow>\\<^sub>c\\<^sub>d n' \\<Longrightarrow> pred ex s\n 2. \\<not> n -[a']\\<rightarrow>\\<^sub>c\\<^sub>d n' \\<Longrightarrow>\n    pred ex s", "}"], ["proof (state)\nthis:\n  ?V'2 \\<in> Use n \\<Longrightarrow> state_val s ?V'2 = state_val s' ?V'2\n\ngoal (2 subgoals):\n 1. n -[a']\\<rightarrow>\\<^sub>c\\<^sub>d n' \\<Longrightarrow> pred ex s\n 2. \\<not> n -[a']\\<rightarrow>\\<^sub>c\\<^sub>d n' \\<Longrightarrow>\n    pred ex s", "with \\<open>pred ex' s'\\<close> \\<open>valid_edge a'\\<close>"], ["proof (chain)\npicking this:\n  pred ex' s'\n  valid_edge a'\n  ?V'2 \\<in> Use n \\<Longrightarrow> state_val s ?V'2 = state_val s' ?V'2", "show ?thesis"], ["proof (prove)\nusing this:\n  pred ex' s'\n  valid_edge a'\n  ?V'2 \\<in> Use n \\<Longrightarrow> state_val s ?V'2 = state_val s' ?V'2\n\ngoal (1 subgoal):\n 1. pred ex s", "by(fastforce elim:CFG_edge_Uses_pred_equal)"], ["proof (state)\nthis:\n  pred ex s\n\ngoal (1 subgoal):\n 1. \\<not> n -[a']\\<rightarrow>\\<^sub>c\\<^sub>d n' \\<Longrightarrow>\n    pred ex s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n -[a']\\<rightarrow>\\<^sub>c\\<^sub>d n' \\<Longrightarrow>\n    pred ex s", "case False"], ["proof (state)\nthis:\n  \\<not> n -[a']\\<rightarrow>\\<^sub>c\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. \\<not> n -[a']\\<rightarrow>\\<^sub>c\\<^sub>d n' \\<Longrightarrow>\n    pred ex s", "from ex True Predicate"], ["proof (chain)\npicking this:\n  ex =\n  (if x then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  x\n  ex = (Q)\\<^sub>\\<surd>", "have \"kind a' = (Q)\\<^sub>\\<surd>\""], ["proof (prove)\nusing this:\n  ex =\n  (if x then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  x\n  ex = (Q)\\<^sub>\\<surd>\n\ngoal (1 subgoal):\n 1. kind a' = (Q)\\<^sub>\\<surd>", "by(auto split:if_split_asm)"], ["proof (state)\nthis:\n  kind a' = (Q)\\<^sub>\\<surd>\n\ngoal (1 subgoal):\n 1. \\<not> n -[a']\\<rightarrow>\\<^sub>c\\<^sub>d n' \\<Longrightarrow>\n    pred ex s", "from True \\<open>slice_path as = x#xs\\<close> \\<open>as = a'#as'\\<close>"], ["proof (chain)\npicking this:\n  x\n  slice_path as = x # xs\n  as = a' # as'", "have \"n -[a']\\<rightarrow>\\<^sub>d* n'\""], ["proof (prove)\nusing this:\n  x\n  slice_path as = x # xs\n  as = a' # as'\n\ngoal (1 subgoal):\n 1. n -[a']\\<rightarrow>\\<^sub>d* n'", "by(auto simp:targetnodes_def)"], ["proof (state)\nthis:\n  n -[a']\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. \\<not> n -[a']\\<rightarrow>\\<^sub>c\\<^sub>d n' \\<Longrightarrow>\n    pred ex s", "thus ?thesis"], ["proof (prove)\nusing this:\n  n -[a']\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. pred ex s", "proof(induct rule:DynPDG_path.cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>n = n; [a'] = []; n' = n; valid_node n\\<rbrakk>\n       \\<Longrightarrow> pred ex s\n 2. \\<And>n as n'' as' n'a.\n       \\<lbrakk>n = n; [a'] = as @ as'; n' = n'a;\n        n -as\\<rightarrow>\\<^sub>d* n'';\n        n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'a\\<rbrakk>\n       \\<Longrightarrow> pred ex s\n 3. \\<And>n as n'' V as' n'a.\n       \\<lbrakk>n = n; [a'] = as @ as'; n' = n'a;\n        n -as\\<rightarrow>\\<^sub>d* n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'a\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "case (DynPDG_path_Nil nx)"], ["proof (state)\nthis:\n  n = nx\n  [a'] = []\n  n' = nx\n  valid_node nx\n\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>n = n; [a'] = []; n' = n; valid_node n\\<rbrakk>\n       \\<Longrightarrow> pred ex s\n 2. \\<And>n as n'' as' n'a.\n       \\<lbrakk>n = n; [a'] = as @ as'; n' = n'a;\n        n -as\\<rightarrow>\\<^sub>d* n'';\n        n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'a\\<rbrakk>\n       \\<Longrightarrow> pred ex s\n 3. \\<And>n as n'' V as' n'a.\n       \\<lbrakk>n = n; [a'] = as @ as'; n' = n'a;\n        n -as\\<rightarrow>\\<^sub>d* n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'a\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "hence False"], ["proof (prove)\nusing this:\n  n = nx\n  [a'] = []\n  n' = nx\n  valid_node nx\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>n = n; [a'] = []; n' = n; valid_node n\\<rbrakk>\n       \\<Longrightarrow> pred ex s\n 2. \\<And>n as n'' as' n'a.\n       \\<lbrakk>n = n; [a'] = as @ as'; n' = n'a;\n        n -as\\<rightarrow>\\<^sub>d* n'';\n        n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'a\\<rbrakk>\n       \\<Longrightarrow> pred ex s\n 3. \\<And>n as n'' V as' n'a.\n       \\<lbrakk>n = n; [a'] = as @ as'; n' = n'a;\n        n -as\\<rightarrow>\\<^sub>d* n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'a\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "thus ?case"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. pred ex s", "by simp"], ["proof (state)\nthis:\n  pred ex s\n\ngoal (2 subgoals):\n 1. \\<And>n as n'' as' n'a.\n       \\<lbrakk>n = n; [a'] = as @ as'; n' = n'a;\n        n -as\\<rightarrow>\\<^sub>d* n'';\n        n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'a\\<rbrakk>\n       \\<Longrightarrow> pred ex s\n 2. \\<And>n as n'' V as' n'a.\n       \\<lbrakk>n = n; [a'] = as @ as'; n' = n'a;\n        n -as\\<rightarrow>\\<^sub>d* n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'a\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n as n'' as' n'a.\n       \\<lbrakk>n = n; [a'] = as @ as'; n' = n'a;\n        n -as\\<rightarrow>\\<^sub>d* n'';\n        n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'a\\<rbrakk>\n       \\<Longrightarrow> pred ex s\n 2. \\<And>n as n'' V as' n'a.\n       \\<lbrakk>n = n; [a'] = as @ as'; n' = n'a;\n        n -as\\<rightarrow>\\<^sub>d* n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'a\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "case (DynPDG_path_Append_cdep nx asx n'' asx' nx')"], ["proof (state)\nthis:\n  n = nx\n  [a'] = asx @ asx'\n  n' = nx'\n  nx -asx\\<rightarrow>\\<^sub>d* n''\n  n'' -asx'\\<rightarrow>\\<^sub>c\\<^sub>d nx'\n\ngoal (2 subgoals):\n 1. \\<And>n as n'' as' n'a.\n       \\<lbrakk>n = n; [a'] = as @ as'; n' = n'a;\n        n -as\\<rightarrow>\\<^sub>d* n'';\n        n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'a\\<rbrakk>\n       \\<Longrightarrow> pred ex s\n 2. \\<And>n as n'' V as' n'a.\n       \\<lbrakk>n = n; [a'] = as @ as'; n' = n'a;\n        n -as\\<rightarrow>\\<^sub>d* n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'a\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "from \\<open>[a'] = asx@asx'\\<close>"], ["proof (chain)\npicking this:\n  [a'] = asx @ asx'", "have \"(asx = [a'] \\<and> asx' = []) \\<or> (asx = [] \\<and> asx' = [a'])\""], ["proof (prove)\nusing this:\n  [a'] = asx @ asx'\n\ngoal (1 subgoal):\n 1. asx = [a'] \\<and> asx' = [] \\<or> asx = [] \\<and> asx' = [a']", "by (cases asx) auto"], ["proof (state)\nthis:\n  asx = [a'] \\<and> asx' = [] \\<or> asx = [] \\<and> asx' = [a']\n\ngoal (2 subgoals):\n 1. \\<And>n as n'' as' n'a.\n       \\<lbrakk>n = n; [a'] = as @ as'; n' = n'a;\n        n -as\\<rightarrow>\\<^sub>d* n'';\n        n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'a\\<rbrakk>\n       \\<Longrightarrow> pred ex s\n 2. \\<And>n as n'' V as' n'a.\n       \\<lbrakk>n = n; [a'] = as @ as'; n' = n'a;\n        n -as\\<rightarrow>\\<^sub>d* n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'a\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "hence False"], ["proof (prove)\nusing this:\n  asx = [a'] \\<and> asx' = [] \\<or> asx = [] \\<and> asx' = [a']\n\ngoal (1 subgoal):\n 1. False", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. asx = [a'] \\<and> asx' = [] \\<Longrightarrow> False\n 2. asx = [] \\<and> asx' = [a'] \\<Longrightarrow> False", "assume \"asx = [a'] \\<and> asx' = []\""], ["proof (state)\nthis:\n  asx = [a'] \\<and> asx' = []\n\ngoal (2 subgoals):\n 1. asx = [a'] \\<and> asx' = [] \\<Longrightarrow> False\n 2. asx = [] \\<and> asx' = [a'] \\<Longrightarrow> False", "with \\<open>n'' -asx'\\<rightarrow>\\<^sub>c\\<^sub>d nx'\\<close>"], ["proof (chain)\npicking this:\n  n'' -asx'\\<rightarrow>\\<^sub>c\\<^sub>d nx'\n  asx = [a'] \\<and> asx' = []", "show False"], ["proof (prove)\nusing this:\n  n'' -asx'\\<rightarrow>\\<^sub>c\\<^sub>d nx'\n  asx = [a'] \\<and> asx' = []\n\ngoal (1 subgoal):\n 1. False", "by(fastforce elim:DynPDG_edge.cases dest:dyn_control_dependence_path)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. asx = [] \\<and> asx' = [a'] \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. asx = [] \\<and> asx' = [a'] \\<Longrightarrow> False", "assume \"asx = [] \\<and> asx' = [a']\""], ["proof (state)\nthis:\n  asx = [] \\<and> asx' = [a']\n\ngoal (1 subgoal):\n 1. asx = [] \\<and> asx' = [a'] \\<Longrightarrow> False", "with \\<open>nx -asx\\<rightarrow>\\<^sub>d* n''\\<close>"], ["proof (chain)\npicking this:\n  nx -asx\\<rightarrow>\\<^sub>d* n''\n  asx = [] \\<and> asx' = [a']", "have \"nx = n''\" and \"asx' = [a']\""], ["proof (prove)\nusing this:\n  nx -asx\\<rightarrow>\\<^sub>d* n''\n  asx = [] \\<and> asx' = [a']\n\ngoal (1 subgoal):\n 1. nx = n'' &&& asx' = [a']", "by(auto intro:DynPDG_empty_path_eq_nodes)"], ["proof (state)\nthis:\n  nx = n''\n  asx' = [a']\n\ngoal (1 subgoal):\n 1. asx = [] \\<and> asx' = [a'] \\<Longrightarrow> False", "with \\<open>n = nx\\<close> \\<open>n' = nx'\\<close> \\<open>n'' -asx'\\<rightarrow>\\<^sub>c\\<^sub>d nx'\\<close> False"], ["proof (chain)\npicking this:\n  n = nx\n  n' = nx'\n  n'' -asx'\\<rightarrow>\\<^sub>c\\<^sub>d nx'\n  \\<not> n -[a']\\<rightarrow>\\<^sub>c\\<^sub>d n'\n  nx = n''\n  asx' = [a']", "show False"], ["proof (prove)\nusing this:\n  n = nx\n  n' = nx'\n  n'' -asx'\\<rightarrow>\\<^sub>c\\<^sub>d nx'\n  \\<not> n -[a']\\<rightarrow>\\<^sub>c\\<^sub>d n'\n  nx = n''\n  asx' = [a']\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<And>n as n'' as' n'a.\n       \\<lbrakk>n = n; [a'] = as @ as'; n' = n'a;\n        n -as\\<rightarrow>\\<^sub>d* n'';\n        n'' -as'\\<rightarrow>\\<^sub>c\\<^sub>d n'a\\<rbrakk>\n       \\<Longrightarrow> pred ex s\n 2. \\<And>n as n'' V as' n'a.\n       \\<lbrakk>n = n; [a'] = as @ as'; n' = n'a;\n        n -as\\<rightarrow>\\<^sub>d* n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'a\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. pred ex s", "by simp"], ["proof (state)\nthis:\n  pred ex s\n\ngoal (1 subgoal):\n 1. \\<And>n as n'' V as' n'a.\n       \\<lbrakk>n = n; [a'] = as @ as'; n' = n'a;\n        n -as\\<rightarrow>\\<^sub>d* n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'a\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n as n'' V as' n'a.\n       \\<lbrakk>n = n; [a'] = as @ as'; n' = n'a;\n        n -as\\<rightarrow>\\<^sub>d* n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'a\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "case (DynPDG_path_Append_ddep nx asx n'' V asx' nx')"], ["proof (state)\nthis:\n  n = nx\n  [a'] = asx @ asx'\n  n' = nx'\n  nx -asx\\<rightarrow>\\<^sub>d* n''\n  n'' -{V}asx'\\<rightarrow>\\<^sub>d\\<^sub>d nx'\n\ngoal (1 subgoal):\n 1. \\<And>n as n'' V as' n'a.\n       \\<lbrakk>n = n; [a'] = as @ as'; n' = n'a;\n        n -as\\<rightarrow>\\<^sub>d* n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'a\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "from \\<open>[a'] = asx@asx'\\<close>"], ["proof (chain)\npicking this:\n  [a'] = asx @ asx'", "have \"(asx = [a'] \\<and> asx' = []) \\<or> (asx = [] \\<and> asx' = [a'])\""], ["proof (prove)\nusing this:\n  [a'] = asx @ asx'\n\ngoal (1 subgoal):\n 1. asx = [a'] \\<and> asx' = [] \\<or> asx = [] \\<and> asx' = [a']", "by (cases asx) auto"], ["proof (state)\nthis:\n  asx = [a'] \\<and> asx' = [] \\<or> asx = [] \\<and> asx' = [a']\n\ngoal (1 subgoal):\n 1. \\<And>n as n'' V as' n'a.\n       \\<lbrakk>n = n; [a'] = as @ as'; n' = n'a;\n        n -as\\<rightarrow>\\<^sub>d* n'';\n        n'' -{V}as'\\<rightarrow>\\<^sub>d\\<^sub>d n'a\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "thus ?case"], ["proof (prove)\nusing this:\n  asx = [a'] \\<and> asx' = [] \\<or> asx = [] \\<and> asx' = [a']\n\ngoal (1 subgoal):\n 1. pred ex s", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. asx = [a'] \\<and> asx' = [] \\<Longrightarrow> pred ex s\n 2. asx = [] \\<and> asx' = [a'] \\<Longrightarrow> pred ex s", "assume \"asx = [a'] \\<and> asx' = []\""], ["proof (state)\nthis:\n  asx = [a'] \\<and> asx' = []\n\ngoal (2 subgoals):\n 1. asx = [a'] \\<and> asx' = [] \\<Longrightarrow> pred ex s\n 2. asx = [] \\<and> asx' = [a'] \\<Longrightarrow> pred ex s", "with \\<open>n'' -{V}asx'\\<rightarrow>\\<^sub>d\\<^sub>d nx'\\<close>"], ["proof (chain)\npicking this:\n  n'' -{V}asx'\\<rightarrow>\\<^sub>d\\<^sub>d nx'\n  asx = [a'] \\<and> asx' = []", "have False"], ["proof (prove)\nusing this:\n  n'' -{V}asx'\\<rightarrow>\\<^sub>d\\<^sub>d nx'\n  asx = [a'] \\<and> asx' = []\n\ngoal (1 subgoal):\n 1. False", "by(fastforce elim:DynPDG_edge.cases simp:dyn_data_dependence_def)"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. asx = [a'] \\<and> asx' = [] \\<Longrightarrow> pred ex s\n 2. asx = [] \\<and> asx' = [a'] \\<Longrightarrow> pred ex s", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. pred ex s", "by simp"], ["proof (state)\nthis:\n  pred ex s\n\ngoal (1 subgoal):\n 1. asx = [] \\<and> asx' = [a'] \\<Longrightarrow> pred ex s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. asx = [] \\<and> asx' = [a'] \\<Longrightarrow> pred ex s", "assume \"asx = [] \\<and> asx' = [a']\""], ["proof (state)\nthis:\n  asx = [] \\<and> asx' = [a']\n\ngoal (1 subgoal):\n 1. asx = [] \\<and> asx' = [a'] \\<Longrightarrow> pred ex s", "with \\<open>nx -asx\\<rightarrow>\\<^sub>d* n''\\<close>"], ["proof (chain)\npicking this:\n  nx -asx\\<rightarrow>\\<^sub>d* n''\n  asx = [] \\<and> asx' = [a']", "have \"nx = n''\""], ["proof (prove)\nusing this:\n  nx -asx\\<rightarrow>\\<^sub>d* n''\n  asx = [] \\<and> asx' = [a']\n\ngoal (1 subgoal):\n 1. nx = n''", "by(simp add:DynPDG_empty_path_eq_nodes)"], ["proof (state)\nthis:\n  nx = n''\n\ngoal (1 subgoal):\n 1. asx = [] \\<and> asx' = [a'] \\<Longrightarrow> pred ex s", "{"], ["proof (state)\nthis:\n  nx = n''\n\ngoal (1 subgoal):\n 1. asx = [] \\<and> asx' = [a'] \\<Longrightarrow> pred ex s", "fix V'"], ["proof (state)\ngoal (1 subgoal):\n 1. asx = [] \\<and> asx' = [a'] \\<Longrightarrow> pred ex s", "assume \"V' \\<in> Use n\""], ["proof (state)\nthis:\n  V' \\<in> Use n\n\ngoal (1 subgoal):\n 1. asx = [] \\<and> asx' = [a'] \\<Longrightarrow> pred ex s", "from \\<open>n'' -{V}asx'\\<rightarrow>\\<^sub>d\\<^sub>d nx'\\<close> \\<open>asx = [] \\<and> asx' = [a']\\<close> \\<open>n' = nx'\\<close>"], ["proof (chain)\npicking this:\n  n'' -{V}asx'\\<rightarrow>\\<^sub>d\\<^sub>d nx'\n  asx = [] \\<and> asx' = [a']\n  n' = nx'", "have \"(V,[],[]) \\<in> dependent_live_vars n'\""], ["proof (prove)\nusing this:\n  n'' -{V}asx'\\<rightarrow>\\<^sub>d\\<^sub>d nx'\n  asx = [] \\<and> asx' = [a']\n  n' = nx'\n\ngoal (1 subgoal):\n 1. (V, [], []) \\<in> dependent_live_vars n'", "by(fastforce intro:dep_vars_Use elim:DynPDG_edge.cases\n                    simp:dyn_data_dependence_def)"], ["proof (state)\nthis:\n  (V, [], []) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. asx = [] \\<and> asx' = [a'] \\<Longrightarrow> pred ex s", "with \\<open>V' \\<in> Use n\\<close> \\<open>n'' -{V}asx'\\<rightarrow>\\<^sub>d\\<^sub>d nx'\\<close> \\<open>asx = [] \\<and> asx' = [a']\\<close>\n                  \\<open>n = nx\\<close> \\<open>nx = n''\\<close> \\<open>n' = nx'\\<close>"], ["proof (chain)\npicking this:\n  V' \\<in> Use n\n  n'' -{V}asx'\\<rightarrow>\\<^sub>d\\<^sub>d nx'\n  asx = [] \\<and> asx' = [a']\n  n = nx\n  nx = n''\n  n' = nx'\n  (V, [], []) \\<in> dependent_live_vars n'", "have \"(V',[],[a']) \\<in> dependent_live_vars n'\""], ["proof (prove)\nusing this:\n  V' \\<in> Use n\n  n'' -{V}asx'\\<rightarrow>\\<^sub>d\\<^sub>d nx'\n  asx = [] \\<and> asx' = [a']\n  n = nx\n  nx = n''\n  n' = nx'\n  (V, [], []) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. (V', [], [a']) \\<in> dependent_live_vars n'", "by(auto elim:dep_vars_Cons_ddep simp:targetnodes_def)"], ["proof (state)\nthis:\n  (V', [], [a']) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. asx = [] \\<and> asx' = [a'] \\<Longrightarrow> pred ex s", "with all \\<open>as = a'#as'\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>V xs.\n     (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n     state_val s V = state_val s' V\n  as = a' # as'\n  (V', [], [a']) \\<in> dependent_live_vars n'", "have \"state_val s V' = state_val s' V'\""], ["proof (prove)\nusing this:\n  \\<forall>V xs.\n     (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n     state_val s V = state_val s' V\n  as = a' # as'\n  (V', [], [a']) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. state_val s V' = state_val s' V'", "by fastforce"], ["proof (state)\nthis:\n  state_val s V' = state_val s' V'\n\ngoal (1 subgoal):\n 1. asx = [] \\<and> asx' = [a'] \\<Longrightarrow> pred ex s", "}"], ["proof (state)\nthis:\n  ?V'2 \\<in> Use n \\<Longrightarrow> state_val s ?V'2 = state_val s' ?V'2\n\ngoal (1 subgoal):\n 1. asx = [] \\<and> asx' = [a'] \\<Longrightarrow> pred ex s", "with \\<open>pred ex' s'\\<close> \\<open>valid_edge a'\\<close> ex ex' True \\<open>x \\<longrightarrow> y\\<close>"], ["proof (chain)\npicking this:\n  pred ex' s'\n  valid_edge a'\n  ex =\n  (if x then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  ex' =\n  (if y then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  x\n  x \\<longrightarrow> y\n  ?V'2 \\<in> Use n \\<Longrightarrow> state_val s ?V'2 = state_val s' ?V'2", "show ?thesis"], ["proof (prove)\nusing this:\n  pred ex' s'\n  valid_edge a'\n  ex =\n  (if x then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  ex' =\n  (if y then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  x\n  x \\<longrightarrow> y\n  ?V'2 \\<in> Use n \\<Longrightarrow> state_val s ?V'2 = state_val s' ?V'2\n\ngoal (1 subgoal):\n 1. pred ex s", "by(fastforce elim:CFG_edge_Uses_pred_equal)"], ["proof (state)\nthis:\n  pred ex s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  pred ex s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  pred ex s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  pred ex s\n\ngoal (1 subgoal):\n 1. \\<And>x1. ex = \\<Up>x1 \\<Longrightarrow> pred ex s", "qed simp"], ["proof (state)\nthis:\n  pred ex s\n\ngoal (2 subgoals):\n 1. x \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> x \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "{"], ["proof (state)\nthis:\n  pred ex s\n\ngoal (2 subgoals):\n 1. x \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> x \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "fix V"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> x \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "assume \"V \\<in> Use n'\""], ["proof (state)\nthis:\n  V \\<in> Use n'\n\ngoal (2 subgoals):\n 1. x \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> x \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "from \\<open>V \\<in> Use n'\\<close>"], ["proof (chain)\npicking this:\n  V \\<in> Use n'", "have \"(V,[],[]) \\<in> dependent_live_vars n'\""], ["proof (prove)\nusing this:\n  V \\<in> Use n'\n\ngoal (1 subgoal):\n 1. (V, [], []) \\<in> dependent_live_vars n'", "by(rule dep_vars_Use)"], ["proof (state)\nthis:\n  (V, [], []) \\<in> dependent_live_vars n'\n\ngoal (2 subgoals):\n 1. x \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> x \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "have \"state_val (transfer ex s) V = state_val (transfer ex' s') V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_val (transfer ex s) V = state_val (transfer ex' s') V", "proof(cases \"n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<Longrightarrow>\n    state_val (transfer ex s) V = state_val (transfer ex' s') V\n 2. \\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<Longrightarrow>\n    state_val (transfer ex s) V = state_val (transfer ex' s') V", "case True"], ["proof (state)\nthis:\n  n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (2 subgoals):\n 1. n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<Longrightarrow>\n    state_val (transfer ex s) V = state_val (transfer ex' s') V\n 2. \\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<Longrightarrow>\n    state_val (transfer ex s) V = state_val (transfer ex' s') V", "hence \"V \\<in> Def n\""], ["proof (prove)\nusing this:\n  n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. V \\<in> Def n", "by(auto elim:DynPDG_edge.cases simp:dyn_data_dependence_def)"], ["proof (state)\nthis:\n  V \\<in> Def n\n\ngoal (2 subgoals):\n 1. n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<Longrightarrow>\n    state_val (transfer ex s) V = state_val (transfer ex' s') V\n 2. \\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<Longrightarrow>\n    state_val (transfer ex s) V = state_val (transfer ex' s') V", "have \"\\<And>V. V \\<in> Use n \\<Longrightarrow> state_val s V = state_val s' V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>V. V \\<in> Use n \\<Longrightarrow> state_val s V = state_val s' V", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>V. V \\<in> Use n \\<Longrightarrow> state_val s V = state_val s' V", "fix V'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>V. V \\<in> Use n \\<Longrightarrow> state_val s V = state_val s' V", "assume \"V' \\<in> Use n\""], ["proof (state)\nthis:\n  V' \\<in> Use n\n\ngoal (1 subgoal):\n 1. \\<And>V. V \\<in> Use n \\<Longrightarrow> state_val s V = state_val s' V", "with \\<open>(V,[],[]) \\<in> dependent_live_vars n'\\<close> True"], ["proof (chain)\npicking this:\n  (V, [], []) \\<in> dependent_live_vars n'\n  n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  V' \\<in> Use n", "have \"(V',[],[a']) \\<in> dependent_live_vars n'\""], ["proof (prove)\nusing this:\n  (V, [], []) \\<in> dependent_live_vars n'\n  n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  V' \\<in> Use n\n\ngoal (1 subgoal):\n 1. (V', [], [a']) \\<in> dependent_live_vars n'", "by(fastforce intro:dep_vars_Cons_ddep simp:targetnodes_def)"], ["proof (state)\nthis:\n  (V', [], [a']) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. \\<And>V. V \\<in> Use n \\<Longrightarrow> state_val s V = state_val s' V", "with all \\<open>as = a'#as'\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>V xs.\n     (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n     state_val s V = state_val s' V\n  as = a' # as'\n  (V', [], [a']) \\<in> dependent_live_vars n'", "show \"state_val s V' = state_val s' V'\""], ["proof (prove)\nusing this:\n  \\<forall>V xs.\n     (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n     state_val s V = state_val s' V\n  as = a' # as'\n  (V', [], [a']) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. state_val s V' = state_val s' V'", "by auto"], ["proof (state)\nthis:\n  state_val s V' = state_val s' V'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?V \\<in> Use n \\<Longrightarrow> state_val s ?V = state_val s' ?V\n\ngoal (2 subgoals):\n 1. n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<Longrightarrow>\n    state_val (transfer ex s) V = state_val (transfer ex' s') V\n 2. \\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<Longrightarrow>\n    state_val (transfer ex s) V = state_val (transfer ex' s') V", "with \\<open>valid_edge a'\\<close> \\<open>pred ex' s'\\<close> \\<open>pred ex s\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a'\n  pred ex' s'\n  pred ex s\n  ?V \\<in> Use n \\<Longrightarrow> state_val s ?V = state_val s' ?V", "have \"\\<forall>V \\<in> Def n. state_val (transfer (kind a') s) V =\n                              state_val (transfer (kind a') s') V\""], ["proof (prove)\nusing this:\n  valid_edge a'\n  pred ex' s'\n  pred ex s\n  ?V \\<in> Use n \\<Longrightarrow> state_val s ?V = state_val s' ?V\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Def n.\n       state_val (transfer (kind a') s) V =\n       state_val (transfer (kind a') s') V", "by simp(rule CFG_edge_transfer_uses_only_Use,auto)"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Def n.\n     state_val (transfer (kind a') s) V =\n     state_val (transfer (kind a') s') V\n\ngoal (2 subgoals):\n 1. n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<Longrightarrow>\n    state_val (transfer ex s) V = state_val (transfer ex' s') V\n 2. \\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<Longrightarrow>\n    state_val (transfer ex s) V = state_val (transfer ex' s') V", "with \\<open>V \\<in> Def n\\<close>"], ["proof (chain)\npicking this:\n  V \\<in> Def n\n  \\<forall>V\\<in>Def n.\n     state_val (transfer (kind a') s) V =\n     state_val (transfer (kind a') s') V", "have \"state_val (transfer (kind a') s) V = \n                         state_val (transfer (kind a') s') V\""], ["proof (prove)\nusing this:\n  V \\<in> Def n\n  \\<forall>V\\<in>Def n.\n     state_val (transfer (kind a') s) V =\n     state_val (transfer (kind a') s') V\n\ngoal (1 subgoal):\n 1. state_val (transfer (kind a') s) V = state_val (transfer (kind a') s') V", "by simp"], ["proof (state)\nthis:\n  state_val (transfer (kind a') s) V = state_val (transfer (kind a') s') V\n\ngoal (2 subgoals):\n 1. n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<Longrightarrow>\n    state_val (transfer ex s) V = state_val (transfer ex' s') V\n 2. \\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<Longrightarrow>\n    state_val (transfer ex s) V = state_val (transfer ex' s') V", "thus ?thesis"], ["proof (prove)\nusing this:\n  state_val (transfer (kind a') s) V = state_val (transfer (kind a') s') V\n\ngoal (1 subgoal):\n 1. state_val (transfer ex s) V = state_val (transfer ex' s') V", "by fastforce"], ["proof (state)\nthis:\n  state_val (transfer ex s) V = state_val (transfer ex' s') V\n\ngoal (1 subgoal):\n 1. \\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<Longrightarrow>\n    state_val (transfer ex s) V = state_val (transfer ex' s') V", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<Longrightarrow>\n    state_val (transfer ex s) V = state_val (transfer ex' s') V", "case False"], ["proof (state)\nthis:\n  \\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. \\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<Longrightarrow>\n    state_val (transfer ex s) V = state_val (transfer ex' s') V", "with \\<open>last(targetnodes as) = n'\\<close> \\<open>as = a'#as'\\<close>\n            \\<open>(V,[],[]) \\<in> dependent_live_vars n'\\<close>"], ["proof (chain)\npicking this:\n  last (targetnodes as) = n'\n  as = a' # as'\n  (V, [], []) \\<in> dependent_live_vars n'\n  \\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n'", "have \"(V,[a'],[a']) \\<in> dependent_live_vars n'\""], ["proof (prove)\nusing this:\n  last (targetnodes as) = n'\n  as = a' # as'\n  (V, [], []) \\<in> dependent_live_vars n'\n  \\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. (V, [a'], [a']) \\<in> dependent_live_vars n'", "by(fastforce intro:dep_vars_Cons_keep)"], ["proof (state)\nthis:\n  (V, [a'], [a']) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. \\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<Longrightarrow>\n    state_val (transfer ex s) V = state_val (transfer ex' s') V", "from \\<open>(V,[a'],[a']) \\<in> dependent_live_vars n'\\<close> all \\<open>as = a'#as'\\<close>"], ["proof (chain)\npicking this:\n  (V, [a'], [a']) \\<in> dependent_live_vars n'\n  \\<forall>V xs.\n     (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n     state_val s V = state_val s' V\n  as = a' # as'", "have states_eq:\"state_val s V = state_val s' V\""], ["proof (prove)\nusing this:\n  (V, [a'], [a']) \\<in> dependent_live_vars n'\n  \\<forall>V xs.\n     (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n     state_val s V = state_val s' V\n  as = a' # as'\n\ngoal (1 subgoal):\n 1. state_val s V = state_val s' V", "by auto"], ["proof (state)\nthis:\n  state_val s V = state_val s' V\n\ngoal (1 subgoal):\n 1. \\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<Longrightarrow>\n    state_val (transfer ex s) V = state_val (transfer ex' s') V", "from \\<open>valid_edge a'\\<close> \\<open>V \\<in> Use n'\\<close> False \\<open>pred ex s\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a'\n  V \\<in> Use n'\n  \\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  pred ex s", "have \"state_val (transfers (kinds [a']) s) V = state_val s V\""], ["proof (prove)\nusing this:\n  valid_edge a'\n  V \\<in> Use n'\n  \\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  pred ex s\n\ngoal (1 subgoal):\n 1. state_val (transfers (kinds [a']) s) V = state_val s V", "apply(auto intro!:no_ddep_same_state path_edge simp:targetnodes_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>valid_edge a'; V \\<in> Use (targetnode a');\n     \\<not> sourcenode\n             a' -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d targetnode a';\n     pred (kind a') s\\<rbrakk>\n    \\<Longrightarrow> preds (kinds [a']) s\n 2. \\<And>as' a as''.\n       \\<lbrakk>valid_edge a'; V \\<in> Use (targetnode a');\n        \\<not> sourcenode\n                a' -{V}as' @\n                       a # as''\\<rightarrow>\\<^sub>d\\<^sub>d targetnode a';\n        pred (kind a') s; [a'] = as' @ a # as'';\n        sourcenode\n         a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d targetnode a'\\<rbrakk>\n       \\<Longrightarrow> False", "apply(simp add:kinds_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>as' a as''.\n       \\<lbrakk>valid_edge a'; V \\<in> Use (targetnode a');\n        \\<not> sourcenode\n                a' -{V}as' @\n                       a # as''\\<rightarrow>\\<^sub>d\\<^sub>d targetnode a';\n        pred (kind a') s; [a'] = as' @ a # as'';\n        sourcenode\n         a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d targetnode a'\\<rbrakk>\n       \\<Longrightarrow> False", "by(case_tac as',auto)"], ["proof (state)\nthis:\n  state_val (transfers (kinds [a']) s) V = state_val s V\n\ngoal (1 subgoal):\n 1. \\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<Longrightarrow>\n    state_val (transfer ex s) V = state_val (transfer ex' s') V", "moreover"], ["proof (state)\nthis:\n  state_val (transfers (kinds [a']) s) V = state_val s V\n\ngoal (1 subgoal):\n 1. \\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<Longrightarrow>\n    state_val (transfer ex s) V = state_val (transfer ex' s') V", "from \\<open>valid_edge a'\\<close> \\<open>V \\<in> Use n'\\<close> False \\<open>pred ex' s'\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a'\n  V \\<in> Use n'\n  \\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  pred ex' s'", "have \"state_val (transfers (kinds [a']) s') V = state_val s' V\""], ["proof (prove)\nusing this:\n  valid_edge a'\n  V \\<in> Use n'\n  \\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  pred ex' s'\n\ngoal (1 subgoal):\n 1. state_val (transfers (kinds [a']) s') V = state_val s' V", "apply(auto intro!:no_ddep_same_state path_edge simp:targetnodes_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>valid_edge a'; V \\<in> Use (targetnode a');\n     \\<not> sourcenode\n             a' -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d targetnode a';\n     pred (kind a') s'\\<rbrakk>\n    \\<Longrightarrow> preds (kinds [a']) s'\n 2. \\<And>as' a as''.\n       \\<lbrakk>valid_edge a'; V \\<in> Use (targetnode a');\n        \\<not> sourcenode\n                a' -{V}as' @\n                       a # as''\\<rightarrow>\\<^sub>d\\<^sub>d targetnode a';\n        pred (kind a') s'; [a'] = as' @ a # as'';\n        sourcenode\n         a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d targetnode a'\\<rbrakk>\n       \\<Longrightarrow> False", "apply(simp add:kinds_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>as' a as''.\n       \\<lbrakk>valid_edge a'; V \\<in> Use (targetnode a');\n        \\<not> sourcenode\n                a' -{V}as' @\n                       a # as''\\<rightarrow>\\<^sub>d\\<^sub>d targetnode a';\n        pred (kind a') s'; [a'] = as' @ a # as'';\n        sourcenode\n         a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d targetnode a'\\<rbrakk>\n       \\<Longrightarrow> False", "by(case_tac as',auto)"], ["proof (state)\nthis:\n  state_val (transfers (kinds [a']) s') V = state_val s' V\n\ngoal (1 subgoal):\n 1. \\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n' \\<Longrightarrow>\n    state_val (transfer ex s) V = state_val (transfer ex' s') V", "ultimately"], ["proof (chain)\npicking this:\n  state_val (transfers (kinds [a']) s) V = state_val s V\n  state_val (transfers (kinds [a']) s') V = state_val s' V", "show ?thesis"], ["proof (prove)\nusing this:\n  state_val (transfers (kinds [a']) s) V = state_val s V\n  state_val (transfers (kinds [a']) s') V = state_val s' V\n\ngoal (1 subgoal):\n 1. state_val (transfer ex s) V = state_val (transfer ex' s') V", "using states_eq"], ["proof (prove)\nusing this:\n  state_val (transfers (kinds [a']) s) V = state_val s V\n  state_val (transfers (kinds [a']) s') V = state_val s' V\n  state_val s V = state_val s' V\n\ngoal (1 subgoal):\n 1. state_val (transfer ex s) V = state_val (transfer ex' s') V", "by(auto simp:kinds_def)"], ["proof (state)\nthis:\n  state_val (transfer ex s) V = state_val (transfer ex' s') V\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  state_val (transfer ex s) V = state_val (transfer ex' s') V\n\ngoal (2 subgoals):\n 1. x \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> x \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "}"], ["proof (state)\nthis:\n  ?V2 \\<in> Use n' \\<Longrightarrow>\n  state_val (transfer ex s) ?V2 = state_val (transfer ex' s') ?V2\n\ngoal (2 subgoals):\n 1. x \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> x \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "hence \"\\<forall>V \\<in> Use n'. state_val (transfer ex s) V = \n                                state_val (transfer ex' s') V\""], ["proof (prove)\nusing this:\n  ?V2 \\<in> Use n' \\<Longrightarrow>\n  state_val (transfer ex s) ?V2 = state_val (transfer ex' s') ?V2\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Use n'.\n       state_val (transfer ex s) V = state_val (transfer ex' s') V", "by simp"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Use n'.\n     state_val (transfer ex s) V = state_val (transfer ex' s') V\n\ngoal (2 subgoals):\n 1. x \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> x \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with \\<open>pred ex s\\<close> \\<open>es = ex#esx\\<close> \\<open>es' = ex'#esx'\\<close>"], ["proof (chain)\npicking this:\n  pred ex s\n  es = ex # esx\n  es' = ex' # esx'\n  \\<forall>V\\<in>Use n'.\n     state_val (transfer ex s) V = state_val (transfer ex' s') V", "show ?thesis"], ["proof (prove)\nusing this:\n  pred ex s\n  es = ex # esx\n  es' = ex' # esx'\n  \\<forall>V\\<in>Use n'.\n     state_val (transfer ex s) V = state_val (transfer ex' s') V\n\ngoal (1 subgoal):\n 1. (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "by simp"], ["proof (state)\nthis:\n  (\\<forall>V\\<in>Use n'.\n      state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n  preds es s\n\ngoal (1 subgoal):\n 1. \\<not> x \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> x \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "case False"], ["proof (state)\nthis:\n  \\<not> x\n\ngoal (1 subgoal):\n 1. \\<not> x \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with ex"], ["proof (chain)\npicking this:\n  ex =\n  (if x then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  \\<not> x", "have cases_x:\"ex = (case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\""], ["proof (prove)\nusing this:\n  ex =\n  (if x then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  \\<not> x\n\ngoal (1 subgoal):\n 1. ex =\n    (case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n     | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)", "by simp"], ["proof (state)\nthis:\n  ex =\n  (case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n   | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n\ngoal (1 subgoal):\n 1. \\<not> x \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "from cases_x"], ["proof (chain)\npicking this:\n  ex =\n  (case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n   | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)", "have \"pred ex s\""], ["proof (prove)\nusing this:\n  ex =\n  (case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n   | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n\ngoal (1 subgoal):\n 1. pred ex s", "by(cases \"kind a'\",auto)"], ["proof (state)\nthis:\n  pred ex s\n\ngoal (1 subgoal):\n 1. \\<not> x \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "proof(cases y)"], ["proof (state)\ngoal (2 subgoals):\n 1. y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "case True"], ["proof (state)\nthis:\n  y\n\ngoal (2 subgoals):\n 1. y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with ex'"], ["proof (chain)\npicking this:\n  ex' =\n  (if y then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  y", "have [simp]:\"ex' = kind a'\""], ["proof (prove)\nusing this:\n  ex' =\n  (if y then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  y\n\ngoal (1 subgoal):\n 1. ex' = kind a'", "by simp"], ["proof (state)\nthis:\n  ex' = kind a'\n\ngoal (2 subgoals):\n 1. y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "{"], ["proof (state)\nthis:\n  ex' = kind a'\n\ngoal (2 subgoals):\n 1. y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "fix V"], ["proof (state)\ngoal (2 subgoals):\n 1. y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "assume \"V \\<in> Use n'\""], ["proof (state)\nthis:\n  V \\<in> Use n'\n\ngoal (2 subgoals):\n 1. y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "from \\<open>V \\<in> Use n'\\<close>"], ["proof (chain)\npicking this:\n  V \\<in> Use n'", "have \"(V,[],[]) \\<in> dependent_live_vars n'\""], ["proof (prove)\nusing this:\n  V \\<in> Use n'\n\ngoal (1 subgoal):\n 1. (V, [], []) \\<in> dependent_live_vars n'", "by(rule dep_vars_Use)"], ["proof (state)\nthis:\n  (V, [], []) \\<in> dependent_live_vars n'\n\ngoal (2 subgoals):\n 1. y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "from \\<open>slice_path as = x#xs\\<close> \\<open>as = a'#as'\\<close> \\<open>\\<not> x\\<close>"], ["proof (chain)\npicking this:\n  slice_path as = x # xs\n  as = a' # as'\n  \\<not> x", "have \"\\<not> n -[a']\\<rightarrow>\\<^sub>d* n'\""], ["proof (prove)\nusing this:\n  slice_path as = x # xs\n  as = a' # as'\n  \\<not> x\n\ngoal (1 subgoal):\n 1. \\<not> n -[a']\\<rightarrow>\\<^sub>d* n'", "by(simp add:targetnodes_def)"], ["proof (state)\nthis:\n  \\<not> n -[a']\\<rightarrow>\\<^sub>d* n'\n\ngoal (2 subgoals):\n 1. y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "hence \"\\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n'\""], ["proof (prove)\nusing this:\n  \\<not> n -[a']\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. \\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n'", "by(fastforce dest:DynPDG_path_ddep)"], ["proof (state)\nthis:\n  \\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (2 subgoals):\n 1. y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with \\<open>last(targetnodes as) = n'\\<close> \\<open>as = a'#as'\\<close>\n            \\<open>(V,[],[]) \\<in> dependent_live_vars n'\\<close>"], ["proof (chain)\npicking this:\n  last (targetnodes as) = n'\n  as = a' # as'\n  (V, [], []) \\<in> dependent_live_vars n'\n  \\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n'", "have \"(V,[a'],[a']) \\<in> dependent_live_vars n'\""], ["proof (prove)\nusing this:\n  last (targetnodes as) = n'\n  as = a' # as'\n  (V, [], []) \\<in> dependent_live_vars n'\n  \\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. (V, [a'], [a']) \\<in> dependent_live_vars n'", "by(fastforce intro:dep_vars_Cons_keep)"], ["proof (state)\nthis:\n  (V, [a'], [a']) \\<in> dependent_live_vars n'\n\ngoal (2 subgoals):\n 1. y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with all \\<open>as = a'#as'\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>V xs.\n     (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n     state_val s V = state_val s' V\n  as = a' # as'\n  (V, [a'], [a']) \\<in> dependent_live_vars n'", "have \"state_val s V = state_val s' V\""], ["proof (prove)\nusing this:\n  \\<forall>V xs.\n     (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n     state_val s V = state_val s' V\n  as = a' # as'\n  (V, [a'], [a']) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. state_val s V = state_val s' V", "by auto"], ["proof (state)\nthis:\n  state_val s V = state_val s' V\n\ngoal (2 subgoals):\n 1. y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "from \\<open>valid_edge a'\\<close> \\<open>V \\<in> Use n'\\<close> \\<open>pred ex' s'\\<close>\n            \\<open>\\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close> \\<open>last(targetnodes as) = n'\\<close> \\<open>as = a'#as'\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a'\n  V \\<in> Use n'\n  pred ex' s'\n  \\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  last (targetnodes as) = n'\n  as = a' # as'", "have \"state_val (transfers (kinds [a']) s') V = state_val s' V\""], ["proof (prove)\nusing this:\n  valid_edge a'\n  V \\<in> Use n'\n  pred ex' s'\n  \\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  last (targetnodes as) = n'\n  as = a' # as'\n\ngoal (1 subgoal):\n 1. state_val (transfers (kinds [a']) s') V = state_val s' V", "apply(auto intro!:no_ddep_same_state path_edge)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>valid_edge a'; V \\<in> Use (targetnode a'); pred (kind a') s';\n     \\<not> sourcenode\n             a' -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d targetnode a';\n     last (targetnodes [a']) = targetnode a'; as = [a']\\<rbrakk>\n    \\<Longrightarrow> preds (kinds [a']) s'\n 2. \\<And>as' a as''.\n       \\<lbrakk>valid_edge a'; V \\<in> Use (targetnode a');\n        pred (kind a') s';\n        \\<not> sourcenode\n                a' -{V}as' @\n                       a # as''\\<rightarrow>\\<^sub>d\\<^sub>d targetnode a';\n        last (targetnodes (as' @ a # as'')) = targetnode a';\n        as = as' @ a # as''; [a'] = as' @ a # as'';\n        sourcenode\n         a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d targetnode a'\\<rbrakk>\n       \\<Longrightarrow> False", "apply(simp add:kinds_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>as' a as''.\n       \\<lbrakk>valid_edge a'; V \\<in> Use (targetnode a');\n        pred (kind a') s';\n        \\<not> sourcenode\n                a' -{V}as' @\n                       a # as''\\<rightarrow>\\<^sub>d\\<^sub>d targetnode a';\n        last (targetnodes (as' @ a # as'')) = targetnode a';\n        as = as' @ a # as''; [a'] = as' @ a # as'';\n        sourcenode\n         a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d targetnode a'\\<rbrakk>\n       \\<Longrightarrow> False", "by(case_tac as',auto)"], ["proof (state)\nthis:\n  state_val (transfers (kinds [a']) s') V = state_val s' V\n\ngoal (2 subgoals):\n 1. y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with \\<open>state_val s V = state_val s' V\\<close> cases_x"], ["proof (chain)\npicking this:\n  state_val s V = state_val s' V\n  ex =\n  (case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n   | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  state_val (transfers (kinds [a']) s') V = state_val s' V", "have \"state_val (transfer ex s) V =\n                state_val (transfer ex' s') V\""], ["proof (prove)\nusing this:\n  state_val s V = state_val s' V\n  ex =\n  (case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n   | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  state_val (transfers (kinds [a']) s') V = state_val s' V\n\ngoal (1 subgoal):\n 1. state_val (transfer ex s) V = state_val (transfer ex' s') V", "by(cases \"kind a'\",simp_all add:kinds_def)"], ["proof (state)\nthis:\n  state_val (transfer ex s) V = state_val (transfer ex' s') V\n\ngoal (2 subgoals):\n 1. y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "}"], ["proof (state)\nthis:\n  ?V2 \\<in> Use n' \\<Longrightarrow>\n  state_val (transfer ex s) ?V2 = state_val (transfer ex' s') ?V2\n\ngoal (2 subgoals):\n 1. y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "hence \"\\<forall>V \\<in> Use n'. state_val (transfer ex s) V =\n                           state_val (transfer ex' s') V\""], ["proof (prove)\nusing this:\n  ?V2 \\<in> Use n' \\<Longrightarrow>\n  state_val (transfer ex s) ?V2 = state_val (transfer ex' s') ?V2\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Use n'.\n       state_val (transfer ex s) V = state_val (transfer ex' s') V", "by simp"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Use n'.\n     state_val (transfer ex s) V = state_val (transfer ex' s') V\n\ngoal (2 subgoals):\n 1. y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with \\<open>as = a'#as'\\<close> \\<open>es = ex#esx\\<close> \\<open>es' = ex'#esx'\\<close> \\<open>pred ex s\\<close>"], ["proof (chain)\npicking this:\n  as = a' # as'\n  es = ex # esx\n  es' = ex' # esx'\n  pred ex s\n  \\<forall>V\\<in>Use n'.\n     state_val (transfer ex s) V = state_val (transfer ex' s') V", "show ?thesis"], ["proof (prove)\nusing this:\n  as = a' # as'\n  es = ex # esx\n  es' = ex' # esx'\n  pred ex s\n  \\<forall>V\\<in>Use n'.\n     state_val (transfer ex s) V = state_val (transfer ex' s') V\n\ngoal (1 subgoal):\n 1. (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "by simp"], ["proof (state)\nthis:\n  (\\<forall>V\\<in>Use n'.\n      state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n  preds es s\n\ngoal (1 subgoal):\n 1. \\<not> y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "case False"], ["proof (state)\nthis:\n  \\<not> y\n\ngoal (1 subgoal):\n 1. \\<not> y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with ex'"], ["proof (chain)\npicking this:\n  ex' =\n  (if y then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  \\<not> y", "have cases_y:\"ex' = (case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\""], ["proof (prove)\nusing this:\n  ex' =\n  (if y then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  \\<not> y\n\ngoal (1 subgoal):\n 1. ex' =\n    (case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n     | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)", "by simp"], ["proof (state)\nthis:\n  ex' =\n  (case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n   | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n\ngoal (1 subgoal):\n 1. \\<not> y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with cases_x"], ["proof (chain)\npicking this:\n  ex =\n  (case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n   | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  ex' =\n  (case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n   | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)", "have [simp]:\"ex = ex'\""], ["proof (prove)\nusing this:\n  ex =\n  (case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n   | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  ex' =\n  (case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n   | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n\ngoal (1 subgoal):\n 1. ex = ex'", "by(cases \"kind a'\") auto"], ["proof (state)\nthis:\n  ex = ex'\n\ngoal (1 subgoal):\n 1. \\<not> y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "{"], ["proof (state)\nthis:\n  ex = ex'\n\ngoal (1 subgoal):\n 1. \\<not> y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "fix V"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "assume \"V \\<in> Use n'\""], ["proof (state)\nthis:\n  V \\<in> Use n'\n\ngoal (1 subgoal):\n 1. \\<not> y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "from \\<open>V \\<in> Use n'\\<close>"], ["proof (chain)\npicking this:\n  V \\<in> Use n'", "have \"(V,[],[]) \\<in> dependent_live_vars n'\""], ["proof (prove)\nusing this:\n  V \\<in> Use n'\n\ngoal (1 subgoal):\n 1. (V, [], []) \\<in> dependent_live_vars n'", "by(rule dep_vars_Use)"], ["proof (state)\nthis:\n  (V, [], []) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. \\<not> y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "from \\<open>slice_path as = x#xs\\<close> \\<open>as = a'#as'\\<close> \\<open>\\<not> x\\<close>"], ["proof (chain)\npicking this:\n  slice_path as = x # xs\n  as = a' # as'\n  \\<not> x", "have \"\\<not> n -[a']\\<rightarrow>\\<^sub>d* n'\""], ["proof (prove)\nusing this:\n  slice_path as = x # xs\n  as = a' # as'\n  \\<not> x\n\ngoal (1 subgoal):\n 1. \\<not> n -[a']\\<rightarrow>\\<^sub>d* n'", "by(simp add:targetnodes_def)"], ["proof (state)\nthis:\n  \\<not> n -[a']\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. \\<not> y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "hence no_dep:\"\\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n'\""], ["proof (prove)\nusing this:\n  \\<not> n -[a']\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. \\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n'", "by(fastforce dest:DynPDG_path_ddep)"], ["proof (state)\nthis:\n  \\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. \\<not> y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with \\<open>last(targetnodes as) = n'\\<close> \\<open>as = a'#as'\\<close>\n            \\<open>(V,[],[]) \\<in> dependent_live_vars n'\\<close>"], ["proof (chain)\npicking this:\n  last (targetnodes as) = n'\n  as = a' # as'\n  (V, [], []) \\<in> dependent_live_vars n'\n  \\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n'", "have \"(V,[a'],[a']) \\<in> dependent_live_vars n'\""], ["proof (prove)\nusing this:\n  last (targetnodes as) = n'\n  as = a' # as'\n  (V, [], []) \\<in> dependent_live_vars n'\n  \\<not> n -{V}[a']\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. (V, [a'], [a']) \\<in> dependent_live_vars n'", "by(fastforce intro:dep_vars_Cons_keep)"], ["proof (state)\nthis:\n  (V, [a'], [a']) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. \\<not> y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with all \\<open>as = a'#as'\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>V xs.\n     (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n     state_val s V = state_val s' V\n  as = a' # as'\n  (V, [a'], [a']) \\<in> dependent_live_vars n'", "have \"state_val s V = state_val s' V\""], ["proof (prove)\nusing this:\n  \\<forall>V xs.\n     (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n     state_val s V = state_val s' V\n  as = a' # as'\n  (V, [a'], [a']) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. state_val s V = state_val s' V", "by auto"], ["proof (state)\nthis:\n  state_val s V = state_val s' V\n\ngoal (1 subgoal):\n 1. \\<not> y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "}"], ["proof (state)\nthis:\n  ?V2 \\<in> Use n' \\<Longrightarrow> state_val s ?V2 = state_val s' ?V2\n\ngoal (1 subgoal):\n 1. \\<not> y \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with \\<open>as = a'#as'\\<close> cases_x \\<open>es = ex#esx\\<close> \\<open>es' = ex'#esx'\\<close> \\<open>pred ex s\\<close>"], ["proof (chain)\npicking this:\n  as = a' # as'\n  ex =\n  (case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n   | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  es = ex # esx\n  es' = ex' # esx'\n  pred ex s\n  ?V2 \\<in> Use n' \\<Longrightarrow> state_val s ?V2 = state_val s' ?V2", "show ?thesis"], ["proof (prove)\nusing this:\n  as = a' # as'\n  ex =\n  (case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n   | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  es = ex # esx\n  es' = ex' # esx'\n  pred ex s\n  ?V2 \\<in> Use n' \\<Longrightarrow> state_val s ?V2 = state_val s' ?V2\n\ngoal (1 subgoal):\n 1. (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "by(cases \"kind a'\",auto)"], ["proof (state)\nthis:\n  (\\<forall>V\\<in>Use n'.\n      state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n  preds es s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<forall>V\\<in>Use n'.\n      state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n  preds es s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<forall>V\\<in>Use n'.\n      state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n  preds es s\n\ngoal (1 subgoal):\n 1. as' \\<noteq> [] \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. as' \\<noteq> [] \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "case False"], ["proof (state)\nthis:\n  as' \\<noteq> []\n\ngoal (1 subgoal):\n 1. as' \\<noteq> [] \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "proof(cases \"\\<forall>V xs. (V,xs,as') \\<in> dependent_live_vars n' \\<longrightarrow>\n                        state_val (transfer ex s) V = state_val (transfer ex' s') V\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>V xs.\n       (V, xs, as') \\<in> dependent_live_vars n' \\<longrightarrow>\n       state_val (transfer ex s) V =\n       state_val (transfer ex' s') V \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> (\\<forall>V xs.\n               (V, xs, as') \\<in> dependent_live_vars n' \\<longrightarrow>\n               state_val (transfer ex s) V =\n               state_val (transfer ex' s') V) \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "case True"], ["proof (state)\nthis:\n  \\<forall>V xs.\n     (V, xs, as') \\<in> dependent_live_vars n' \\<longrightarrow>\n     state_val (transfer ex s) V = state_val (transfer ex' s') V\n\ngoal (2 subgoals):\n 1. \\<forall>V xs.\n       (V, xs, as') \\<in> dependent_live_vars n' \\<longrightarrow>\n       state_val (transfer ex s) V =\n       state_val (transfer ex' s') V \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> (\\<forall>V xs.\n               (V, xs, as') \\<in> dependent_live_vars n' \\<longrightarrow>\n               state_val (transfer ex s) V =\n               state_val (transfer ex' s') V) \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "hence imp':\"\\<forall>V xs. (V,xs,as') \\<in> dependent_live_vars n' \\<longrightarrow>\n                       state_val (transfer ex s) V = state_val (transfer ex' s') V\""], ["proof (prove)\nusing this:\n  \\<forall>V xs.\n     (V, xs, as') \\<in> dependent_live_vars n' \\<longrightarrow>\n     state_val (transfer ex s) V = state_val (transfer ex' s') V\n\ngoal (1 subgoal):\n 1. \\<forall>V xs.\n       (V, xs, as') \\<in> dependent_live_vars n' \\<longrightarrow>\n       state_val (transfer ex s) V = state_val (transfer ex' s') V", "."], ["proof (state)\nthis:\n  \\<forall>V xs.\n     (V, xs, as') \\<in> dependent_live_vars n' \\<longrightarrow>\n     state_val (transfer ex s) V = state_val (transfer ex' s') V\n\ngoal (2 subgoals):\n 1. \\<forall>V xs.\n       (V, xs, as') \\<in> dependent_live_vars n' \\<longrightarrow>\n       state_val (transfer ex s) V =\n       state_val (transfer ex' s') V \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> (\\<forall>V xs.\n               (V, xs, as') \\<in> dependent_live_vars n' \\<longrightarrow>\n               state_val (transfer ex s) V =\n               state_val (transfer ex' s') V) \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "from IH[OF \\<open>targetnode a' -as'\\<rightarrow>* n'\\<close> \\<open>xs \\<preceq>\\<^sub>b ys\\<close> \\<open>slice_path as' = xs\\<close>\n        \\<open>select_edge_kinds as' xs = esx\\<close> \\<open>select_edge_kinds as' ys = esx'\\<close> \n        this \\<open>preds esx' (transfer ex' s')\\<close>]"], ["proof (chain)\npicking this:\n  (\\<forall>V\\<in>Use n'.\n      state_val (transfers esx (transfer ex s)) V =\n      state_val (transfers esx' (transfer ex' s')) V) \\<and>\n  preds esx (transfer ex s)", "have all':\"\\<forall>V\\<in>Use n'. state_val (transfers esx (transfer ex s)) V =\n                             state_val (transfers esx' (transfer ex' s')) V\"\n        and \"preds esx (transfer ex s)\""], ["proof (prove)\nusing this:\n  (\\<forall>V\\<in>Use n'.\n      state_val (transfers esx (transfer ex s)) V =\n      state_val (transfers esx' (transfer ex' s')) V) \\<and>\n  preds esx (transfer ex s)\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Use n'.\n       state_val (transfers esx (transfer ex s)) V =\n       state_val (transfers esx' (transfer ex' s')) V &&&\n    preds esx (transfer ex s)", "by simp_all"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Use n'.\n     state_val (transfers esx (transfer ex s)) V =\n     state_val (transfers esx' (transfer ex' s')) V\n  preds esx (transfer ex s)\n\ngoal (2 subgoals):\n 1. \\<forall>V xs.\n       (V, xs, as') \\<in> dependent_live_vars n' \\<longrightarrow>\n       state_val (transfer ex s) V =\n       state_val (transfer ex' s') V \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> (\\<forall>V xs.\n               (V, xs, as') \\<in> dependent_live_vars n' \\<longrightarrow>\n               state_val (transfer ex s) V =\n               state_val (transfer ex' s') V) \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "have \"pred ex s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pred ex s", "proof(cases ex)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1. ex = \\<Up>x1 \\<Longrightarrow> pred ex s\n 2. \\<And>x2. ex = (x2)\\<^sub>\\<surd> \\<Longrightarrow> pred ex s", "case (Predicate Q)"], ["proof (state)\nthis:\n  ex = (Q)\\<^sub>\\<surd>\n\ngoal (2 subgoals):\n 1. \\<And>x1. ex = \\<Up>x1 \\<Longrightarrow> pred ex s\n 2. \\<And>x2. ex = (x2)\\<^sub>\\<surd> \\<Longrightarrow> pred ex s", "with \\<open>slice_path as = x#xs\\<close> \\<open>as = a'#as'\\<close> \\<open>last(targetnodes as) = n'\\<close> ex"], ["proof (chain)\npicking this:\n  slice_path as = x # xs\n  as = a' # as'\n  last (targetnodes as) = n'\n  ex =\n  (if x then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  ex = (Q)\\<^sub>\\<surd>", "have \"ex = (\\<lambda>s. True)\\<^sub>\\<surd> \\<or> n -a'#as'\\<rightarrow>\\<^sub>d* n'\""], ["proof (prove)\nusing this:\n  slice_path as = x # xs\n  as = a' # as'\n  last (targetnodes as) = n'\n  ex =\n  (if x then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  ex = (Q)\\<^sub>\\<surd>\n\ngoal (1 subgoal):\n 1. ex = (\\<lambda>s. True)\\<^sub>\\<surd> \\<or>\n    n -a' # as'\\<rightarrow>\\<^sub>d* n'", "by(cases \"kind a'\",auto split:if_split_asm)"], ["proof (state)\nthis:\n  ex = (\\<lambda>s. True)\\<^sub>\\<surd> \\<or>\n  n -a' # as'\\<rightarrow>\\<^sub>d* n'\n\ngoal (2 subgoals):\n 1. \\<And>x1. ex = \\<Up>x1 \\<Longrightarrow> pred ex s\n 2. \\<And>x2. ex = (x2)\\<^sub>\\<surd> \\<Longrightarrow> pred ex s", "thus ?thesis"], ["proof (prove)\nusing this:\n  ex = (\\<lambda>s. True)\\<^sub>\\<surd> \\<or>\n  n -a' # as'\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. pred ex s", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. ex = (\\<lambda>s. True)\\<^sub>\\<surd> \\<Longrightarrow> pred ex s\n 2. n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow> pred ex s", "assume \"ex = (\\<lambda>s. True)\\<^sub>\\<surd>\""], ["proof (state)\nthis:\n  ex = (\\<lambda>s. True)\\<^sub>\\<surd>\n\ngoal (2 subgoals):\n 1. ex = (\\<lambda>s. True)\\<^sub>\\<surd> \\<Longrightarrow> pred ex s\n 2. n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow> pred ex s", "thus ?thesis"], ["proof (prove)\nusing this:\n  ex = (\\<lambda>s. True)\\<^sub>\\<surd>\n\ngoal (1 subgoal):\n 1. pred ex s", "by simp"], ["proof (state)\nthis:\n  pred ex s\n\ngoal (1 subgoal):\n 1. n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow> pred ex s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow> pred ex s", "assume \"n -a'#as'\\<rightarrow>\\<^sub>d* n'\""], ["proof (state)\nthis:\n  n -a' # as'\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow> pred ex s", "with \\<open>slice_path as = x#xs\\<close> \\<open>as = a'#as'\\<close> \\<open>last(targetnodes as) = n'\\<close> ex"], ["proof (chain)\npicking this:\n  slice_path as = x # xs\n  as = a' # as'\n  last (targetnodes as) = n'\n  ex =\n  (if x then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  n -a' # as'\\<rightarrow>\\<^sub>d* n'", "have [simp]:\"ex = kind a'\""], ["proof (prove)\nusing this:\n  slice_path as = x # xs\n  as = a' # as'\n  last (targetnodes as) = n'\n  ex =\n  (if x then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  n -a' # as'\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. ex = kind a'", "by clarsimp"], ["proof (state)\nthis:\n  ex = kind a'\n\ngoal (1 subgoal):\n 1. n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow> pred ex s", "with \\<open>x \\<longrightarrow> y\\<close> ex ex'"], ["proof (chain)\npicking this:\n  x \\<longrightarrow> y\n  ex =\n  (if x then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  ex' =\n  (if y then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  ex = kind a'", "have [simp]:\"ex' = ex\""], ["proof (prove)\nusing this:\n  x \\<longrightarrow> y\n  ex =\n  (if x then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  ex' =\n  (if y then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  ex = kind a'\n\ngoal (1 subgoal):\n 1. ex' = ex", "by(cases x) auto"], ["proof (state)\nthis:\n  ex' = ex\n\ngoal (1 subgoal):\n 1. n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow> pred ex s", "from \\<open>n -a'#as'\\<rightarrow>\\<^sub>d* n'\\<close>"], ["proof (chain)\npicking this:\n  n -a' # as'\\<rightarrow>\\<^sub>d* n'", "show ?thesis"], ["proof (prove)\nusing this:\n  n -a' # as'\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. pred ex s", "proof(induct rule:DynPDG_path_rev_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>a' # as' = []; n = n'\\<rbrakk> \\<Longrightarrow> pred ex s\n 2. \\<And>n'' asx asx'.\n       \\<lbrakk>n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s\n 3. \\<And>V n'' asx asx'.\n       \\<lbrakk>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "case DynPDG_path_Nil"], ["proof (state)\nthis:\n  a' # as' = []\n  n = n'\n\ngoal (3 subgoals):\n 1. \\<lbrakk>a' # as' = []; n = n'\\<rbrakk> \\<Longrightarrow> pred ex s\n 2. \\<And>n'' asx asx'.\n       \\<lbrakk>n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s\n 3. \\<And>V n'' asx asx'.\n       \\<lbrakk>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "hence False"], ["proof (prove)\nusing this:\n  a' # as' = []\n  n = n'\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (3 subgoals):\n 1. \\<lbrakk>a' # as' = []; n = n'\\<rbrakk> \\<Longrightarrow> pred ex s\n 2. \\<And>n'' asx asx'.\n       \\<lbrakk>n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s\n 3. \\<And>V n'' asx asx'.\n       \\<lbrakk>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. pred ex s", "by simp"], ["proof (state)\nthis:\n  pred ex s\n\ngoal (2 subgoals):\n 1. \\<And>n'' asx asx'.\n       \\<lbrakk>n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s\n 2. \\<And>V n'' asx asx'.\n       \\<lbrakk>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n'' asx asx'.\n       \\<lbrakk>n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s\n 2. \\<And>V n'' asx asx'.\n       \\<lbrakk>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "case (DynPDG_path_cdep_Append n'' asx asx')"], ["proof (state)\nthis:\n  n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n''\n  n'' -asx'\\<rightarrow>\\<^sub>d* n'\n  a' # as' = asx @ asx'\n\ngoal (2 subgoals):\n 1. \\<And>n'' asx asx'.\n       \\<lbrakk>n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s\n 2. \\<And>V n'' asx asx'.\n       \\<lbrakk>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "from \\<open>n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n''\\<close>"], ["proof (chain)\npicking this:\n  n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n''", "have \"asx \\<noteq> []\""], ["proof (prove)\nusing this:\n  n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n''\n\ngoal (1 subgoal):\n 1. asx \\<noteq> []", "by(auto elim:DynPDG_edge.cases dest:dyn_control_dependence_path)"], ["proof (state)\nthis:\n  asx \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<And>n'' asx asx'.\n       \\<lbrakk>n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s\n 2. \\<And>V n'' asx asx'.\n       \\<lbrakk>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "with \\<open>n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n''\\<close> \\<open>n'' -asx'\\<rightarrow>\\<^sub>d* n'\\<close> \\<open>a'#as' = asx@asx'\\<close>"], ["proof (chain)\npicking this:\n  n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n''\n  n'' -asx'\\<rightarrow>\\<^sub>d* n'\n  a' # as' = asx @ asx'\n  asx \\<noteq> []", "have cdep:\"\\<exists>as1 as2 n''. n -a'#as1\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and> \n                                     n'' -as2\\<rightarrow>\\<^sub>d* n' \\<and> as' = as1@as2\""], ["proof (prove)\nusing this:\n  n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n''\n  n'' -asx'\\<rightarrow>\\<^sub>d* n'\n  a' # as' = asx @ asx'\n  asx \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 n''.\n       n -a' # as1\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n       n'' -as2\\<rightarrow>\\<^sub>d* n' \\<and> as' = as1 @ as2", "by(cases asx) auto"], ["proof (state)\nthis:\n  \\<exists>as1 as2 n''.\n     n -a' # as1\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n     n'' -as2\\<rightarrow>\\<^sub>d* n' \\<and> as' = as1 @ as2\n\ngoal (2 subgoals):\n 1. \\<And>n'' asx asx'.\n       \\<lbrakk>n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s\n 2. \\<And>V n'' asx asx'.\n       \\<lbrakk>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "{"], ["proof (state)\nthis:\n  \\<exists>as1 as2 n''.\n     n -a' # as1\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n     n'' -as2\\<rightarrow>\\<^sub>d* n' \\<and> as' = as1 @ as2\n\ngoal (2 subgoals):\n 1. \\<And>n'' asx asx'.\n       \\<lbrakk>n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s\n 2. \\<And>V n'' asx asx'.\n       \\<lbrakk>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "fix V"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n'' asx asx'.\n       \\<lbrakk>n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s\n 2. \\<And>V n'' asx asx'.\n       \\<lbrakk>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "assume \"V \\<in> Use n\""], ["proof (state)\nthis:\n  V \\<in> Use n\n\ngoal (2 subgoals):\n 1. \\<And>n'' asx asx'.\n       \\<lbrakk>n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s\n 2. \\<And>V n'' asx asx'.\n       \\<lbrakk>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "with cdep \\<open>last(targetnodes as) = n'\\<close> \\<open>as = a'#as'\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>as1 as2 n''.\n     n -a' # as1\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n     n'' -as2\\<rightarrow>\\<^sub>d* n' \\<and> as' = as1 @ as2\n  last (targetnodes as) = n'\n  as = a' # as'\n  V \\<in> Use n", "have \"(V,[],as) \\<in> dependent_live_vars n'\""], ["proof (prove)\nusing this:\n  \\<exists>as1 as2 n''.\n     n -a' # as1\\<rightarrow>\\<^sub>c\\<^sub>d n'' \\<and>\n     n'' -as2\\<rightarrow>\\<^sub>d* n' \\<and> as' = as1 @ as2\n  last (targetnodes as) = n'\n  as = a' # as'\n  V \\<in> Use n\n\ngoal (1 subgoal):\n 1. (V, [], as) \\<in> dependent_live_vars n'", "by(fastforce intro:dep_vars_Cons_cdep)"], ["proof (state)\nthis:\n  (V, [], as) \\<in> dependent_live_vars n'\n\ngoal (2 subgoals):\n 1. \\<And>n'' asx asx'.\n       \\<lbrakk>n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s\n 2. \\<And>V n'' asx asx'.\n       \\<lbrakk>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "with all"], ["proof (chain)\npicking this:\n  \\<forall>V xs.\n     (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n     state_val s V = state_val s' V\n  (V, [], as) \\<in> dependent_live_vars n'", "have \"state_val s V = state_val s' V\""], ["proof (prove)\nusing this:\n  \\<forall>V xs.\n     (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n     state_val s V = state_val s' V\n  (V, [], as) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. state_val s V = state_val s' V", "by blast"], ["proof (state)\nthis:\n  state_val s V = state_val s' V\n\ngoal (2 subgoals):\n 1. \\<And>n'' asx asx'.\n       \\<lbrakk>n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s\n 2. \\<And>V n'' asx asx'.\n       \\<lbrakk>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "}"], ["proof (state)\nthis:\n  ?V2 \\<in> Use n \\<Longrightarrow> state_val s ?V2 = state_val s' ?V2\n\ngoal (2 subgoals):\n 1. \\<And>n'' asx asx'.\n       \\<lbrakk>n -asx\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s\n 2. \\<And>V n'' asx asx'.\n       \\<lbrakk>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "with \\<open>valid_edge a'\\<close> \\<open>pred ex' s'\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a'\n  pred ex' s'\n  ?V2 \\<in> Use n \\<Longrightarrow> state_val s ?V2 = state_val s' ?V2", "show ?thesis"], ["proof (prove)\nusing this:\n  valid_edge a'\n  pred ex' s'\n  ?V2 \\<in> Use n \\<Longrightarrow> state_val s ?V2 = state_val s' ?V2\n\ngoal (1 subgoal):\n 1. pred ex s", "by(fastforce elim:CFG_edge_Uses_pred_equal)"], ["proof (state)\nthis:\n  pred ex s\n\ngoal (1 subgoal):\n 1. \\<And>V n'' asx asx'.\n       \\<lbrakk>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>V n'' asx asx'.\n       \\<lbrakk>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "case (DynPDG_path_ddep_Append V n'' asx asx')"], ["proof (state)\nthis:\n  n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''\n  n'' -asx'\\<rightarrow>\\<^sub>d* n'\n  a' # as' = asx @ asx'\n\ngoal (1 subgoal):\n 1. \\<And>V n'' asx asx'.\n       \\<lbrakk>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "from \\<open>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''\\<close>"], ["proof (chain)\npicking this:\n  n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''", "obtain ai ais where \"asx = ai#ais\""], ["proof (prove)\nusing this:\n  n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''\n\ngoal (1 subgoal):\n 1. (\\<And>ai ais.\n        asx = ai # ais \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases asx)(auto dest:DynPDG_ddep_edge_CFG_path)"], ["proof (state)\nthis:\n  asx = ai # ais\n\ngoal (1 subgoal):\n 1. \\<And>V n'' asx asx'.\n       \\<lbrakk>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "with \\<open>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''\\<close>"], ["proof (chain)\npicking this:\n  n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''\n  asx = ai # ais", "have \"sourcenode ai = n\""], ["proof (prove)\nusing this:\n  n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''\n  asx = ai # ais\n\ngoal (1 subgoal):\n 1. sourcenode ai = n", "by(fastforce dest:DynPDG_ddep_edge_CFG_path elim:path.cases)"], ["proof (state)\nthis:\n  sourcenode ai = n\n\ngoal (1 subgoal):\n 1. \\<And>V n'' asx asx'.\n       \\<lbrakk>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "from \\<open>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''\\<close> \\<open>asx = ai#ais\\<close>"], ["proof (chain)\npicking this:\n  n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''\n  asx = ai # ais", "have \"last(targetnodes asx) = n''\""], ["proof (prove)\nusing this:\n  n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''\n  asx = ai # ais\n\ngoal (1 subgoal):\n 1. last (targetnodes asx) = n''", "by(fastforce intro:path_targetnode dest:DynPDG_ddep_edge_CFG_path)"], ["proof (state)\nthis:\n  last (targetnodes asx) = n''\n\ngoal (1 subgoal):\n 1. \\<And>V n'' asx asx'.\n       \\<lbrakk>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "{"], ["proof (state)\nthis:\n  last (targetnodes asx) = n''\n\ngoal (1 subgoal):\n 1. \\<And>V n'' asx asx'.\n       \\<lbrakk>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "fix V'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>V n'' asx asx'.\n       \\<lbrakk>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "assume \"V' \\<in> Use n\""], ["proof (state)\nthis:\n  V' \\<in> Use n\n\ngoal (1 subgoal):\n 1. \\<And>V n'' asx asx'.\n       \\<lbrakk>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "from \\<open>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''\\<close>"], ["proof (chain)\npicking this:\n  n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''", "have \"(V,[],[]) \\<in> dependent_live_vars n''\""], ["proof (prove)\nusing this:\n  n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''\n\ngoal (1 subgoal):\n 1. (V, [], []) \\<in> dependent_live_vars n''", "by(fastforce elim:DynPDG_edge.cases dep_vars_Use \n                            simp:dyn_data_dependence_def)"], ["proof (state)\nthis:\n  (V, [], []) \\<in> dependent_live_vars n''\n\ngoal (1 subgoal):\n 1. \\<And>V n'' asx asx'.\n       \\<lbrakk>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "with \\<open>n'' -asx'\\<rightarrow>\\<^sub>d* n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -asx'\\<rightarrow>\\<^sub>d* n'\n  (V, [], []) \\<in> dependent_live_vars n''", "have \"(V,[],[]@asx') \\<in> dependent_live_vars n'\""], ["proof (prove)\nusing this:\n  n'' -asx'\\<rightarrow>\\<^sub>d* n'\n  (V, [], []) \\<in> dependent_live_vars n''\n\ngoal (1 subgoal):\n 1. (V, [], [] @ asx') \\<in> dependent_live_vars n'", "by(rule dependent_live_vars_dep_dependent_live_vars)"], ["proof (state)\nthis:\n  (V, [], [] @ asx') \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. \\<And>V n'' asx asx'.\n       \\<lbrakk>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "have \"(V',[],as) \\<in> dependent_live_vars n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (V', [], as) \\<in> dependent_live_vars n'", "proof(cases \"asx' = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. asx' = [] \\<Longrightarrow> (V', [], as) \\<in> dependent_live_vars n'\n 2. asx' \\<noteq> [] \\<Longrightarrow>\n    (V', [], as) \\<in> dependent_live_vars n'", "case True"], ["proof (state)\nthis:\n  asx' = []\n\ngoal (2 subgoals):\n 1. asx' = [] \\<Longrightarrow> (V', [], as) \\<in> dependent_live_vars n'\n 2. asx' \\<noteq> [] \\<Longrightarrow>\n    (V', [], as) \\<in> dependent_live_vars n'", "with \\<open>n'' -asx'\\<rightarrow>\\<^sub>d* n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -asx'\\<rightarrow>\\<^sub>d* n'\n  asx' = []", "have \"n'' = n'\""], ["proof (prove)\nusing this:\n  n'' -asx'\\<rightarrow>\\<^sub>d* n'\n  asx' = []\n\ngoal (1 subgoal):\n 1. n'' = n'", "by(fastforce intro:DynPDG_empty_path_eq_nodes)"], ["proof (state)\nthis:\n  n'' = n'\n\ngoal (2 subgoals):\n 1. asx' = [] \\<Longrightarrow> (V', [], as) \\<in> dependent_live_vars n'\n 2. asx' \\<noteq> [] \\<Longrightarrow>\n    (V', [], as) \\<in> dependent_live_vars n'", "with \\<open>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''\\<close> \\<open>V' \\<in> Use n\\<close> True \\<open>as = a'#as'\\<close>\n                  \\<open>a'#as' = asx@asx'\\<close>"], ["proof (chain)\npicking this:\n  n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''\n  V' \\<in> Use n\n  asx' = []\n  as = a' # as'\n  a' # as' = asx @ asx'\n  n'' = n'", "show ?thesis"], ["proof (prove)\nusing this:\n  n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''\n  V' \\<in> Use n\n  asx' = []\n  as = a' # as'\n  a' # as' = asx @ asx'\n  n'' = n'\n\ngoal (1 subgoal):\n 1. (V', [], as) \\<in> dependent_live_vars n'", "by(fastforce intro:dependent_live_vars_ddep_empty_fst)"], ["proof (state)\nthis:\n  (V', [], as) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. asx' \\<noteq> [] \\<Longrightarrow>\n    (V', [], as) \\<in> dependent_live_vars n'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. asx' \\<noteq> [] \\<Longrightarrow>\n    (V', [], as) \\<in> dependent_live_vars n'", "case False"], ["proof (state)\nthis:\n  asx' \\<noteq> []\n\ngoal (1 subgoal):\n 1. asx' \\<noteq> [] \\<Longrightarrow>\n    (V', [], as) \\<in> dependent_live_vars n'", "with \\<open>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''\\<close> \\<open>asx = ai#ais\\<close>\n                  \\<open>(V,[],[]@asx') \\<in> dependent_live_vars n'\\<close>"], ["proof (chain)\npicking this:\n  n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''\n  asx = ai # ais\n  (V, [], [] @ asx') \\<in> dependent_live_vars n'\n  asx' \\<noteq> []", "have \"(V,ais@[],ais@asx') \\<in> dependent_live_vars n'\""], ["proof (prove)\nusing this:\n  n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''\n  asx = ai # ais\n  (V, [], [] @ asx') \\<in> dependent_live_vars n'\n  asx' \\<noteq> []\n\ngoal (1 subgoal):\n 1. (V, ais @ [], ais @ asx') \\<in> dependent_live_vars n'", "by(fastforce intro:ddep_dependent_live_vars_keep_notempty)"], ["proof (state)\nthis:\n  (V, ais @ [], ais @ asx') \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. asx' \\<noteq> [] \\<Longrightarrow>\n    (V', [], as) \\<in> dependent_live_vars n'", "from \\<open>n'' -asx'\\<rightarrow>\\<^sub>d* n'\\<close> False"], ["proof (chain)\npicking this:\n  n'' -asx'\\<rightarrow>\\<^sub>d* n'\n  asx' \\<noteq> []", "have \"last(targetnodes asx') = n'\""], ["proof (prove)\nusing this:\n  n'' -asx'\\<rightarrow>\\<^sub>d* n'\n  asx' \\<noteq> []\n\ngoal (1 subgoal):\n 1. last (targetnodes asx') = n'", "by -(rule path_targetnode,rule DynPDG_path_CFG_path)"], ["proof (state)\nthis:\n  last (targetnodes asx') = n'\n\ngoal (1 subgoal):\n 1. asx' \\<noteq> [] \\<Longrightarrow>\n    (V', [], as) \\<in> dependent_live_vars n'", "with \\<open>(V,ais@[],ais@asx') \\<in> dependent_live_vars n'\\<close>\n                  \\<open>V' \\<in> Use n\\<close> \\<open>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''\\<close> \\<open>asx = ai#ais\\<close>\n                  \\<open>sourcenode ai = n\\<close> \\<open>last(targetnodes asx) = n''\\<close> False"], ["proof (chain)\npicking this:\n  (V, ais @ [], ais @ asx') \\<in> dependent_live_vars n'\n  V' \\<in> Use n\n  n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''\n  asx = ai # ais\n  sourcenode ai = n\n  last (targetnodes asx) = n''\n  asx' \\<noteq> []\n  last (targetnodes asx') = n'", "have \"(V',[],ai#ais@asx') \\<in> dependent_live_vars n'\""], ["proof (prove)\nusing this:\n  (V, ais @ [], ais @ asx') \\<in> dependent_live_vars n'\n  V' \\<in> Use n\n  n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n''\n  asx = ai # ais\n  sourcenode ai = n\n  last (targetnodes asx) = n''\n  asx' \\<noteq> []\n  last (targetnodes asx') = n'\n\ngoal (1 subgoal):\n 1. (V', [], ai # ais @ asx') \\<in> dependent_live_vars n'", "by(fastforce intro:dep_vars_Cons_ddep simp:targetnodes_def)"], ["proof (state)\nthis:\n  (V', [], ai # ais @ asx') \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. asx' \\<noteq> [] \\<Longrightarrow>\n    (V', [], as) \\<in> dependent_live_vars n'", "with \\<open>asx = ai#ais\\<close> \\<open>a'#as' = asx@asx'\\<close> \\<open>as = a'#as'\\<close>"], ["proof (chain)\npicking this:\n  asx = ai # ais\n  a' # as' = asx @ asx'\n  as = a' # as'\n  (V', [], ai # ais @ asx') \\<in> dependent_live_vars n'", "show ?thesis"], ["proof (prove)\nusing this:\n  asx = ai # ais\n  a' # as' = asx @ asx'\n  as = a' # as'\n  (V', [], ai # ais @ asx') \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. (V', [], as) \\<in> dependent_live_vars n'", "by simp"], ["proof (state)\nthis:\n  (V', [], as) \\<in> dependent_live_vars n'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (V', [], as) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. \\<And>V n'' asx asx'.\n       \\<lbrakk>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "with all"], ["proof (chain)\npicking this:\n  \\<forall>V xs.\n     (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n     state_val s V = state_val s' V\n  (V', [], as) \\<in> dependent_live_vars n'", "have \"state_val s V' = state_val s' V'\""], ["proof (prove)\nusing this:\n  \\<forall>V xs.\n     (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n     state_val s V = state_val s' V\n  (V', [], as) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. state_val s V' = state_val s' V'", "by blast"], ["proof (state)\nthis:\n  state_val s V' = state_val s' V'\n\ngoal (1 subgoal):\n 1. \\<And>V n'' asx asx'.\n       \\<lbrakk>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "}"], ["proof (state)\nthis:\n  ?V'2 \\<in> Use n \\<Longrightarrow> state_val s ?V'2 = state_val s' ?V'2\n\ngoal (1 subgoal):\n 1. \\<And>V n'' asx asx'.\n       \\<lbrakk>n -{V}asx\\<rightarrow>\\<^sub>d\\<^sub>d n'';\n        n'' -asx'\\<rightarrow>\\<^sub>d* n'; a' # as' = asx @ asx'\\<rbrakk>\n       \\<Longrightarrow> pred ex s", "with \\<open>pred ex' s'\\<close> \\<open>valid_edge a'\\<close>"], ["proof (chain)\npicking this:\n  pred ex' s'\n  valid_edge a'\n  ?V'2 \\<in> Use n \\<Longrightarrow> state_val s ?V'2 = state_val s' ?V'2", "show ?thesis"], ["proof (prove)\nusing this:\n  pred ex' s'\n  valid_edge a'\n  ?V'2 \\<in> Use n \\<Longrightarrow> state_val s ?V'2 = state_val s' ?V'2\n\ngoal (1 subgoal):\n 1. pred ex s", "by(fastforce elim:CFG_edge_Uses_pred_equal)"], ["proof (state)\nthis:\n  pred ex s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  pred ex s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  pred ex s\n\ngoal (1 subgoal):\n 1. \\<And>x1. ex = \\<Up>x1 \\<Longrightarrow> pred ex s", "qed simp"], ["proof (state)\nthis:\n  pred ex s\n\ngoal (2 subgoals):\n 1. \\<forall>V xs.\n       (V, xs, as') \\<in> dependent_live_vars n' \\<longrightarrow>\n       state_val (transfer ex s) V =\n       state_val (transfer ex' s') V \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> (\\<forall>V xs.\n               (V, xs, as') \\<in> dependent_live_vars n' \\<longrightarrow>\n               state_val (transfer ex s) V =\n               state_val (transfer ex' s') V) \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with all' \\<open>preds esx (transfer ex s)\\<close> \\<open>es = ex#esx\\<close> \\<open>es' = ex'#esx'\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>V\\<in>Use n'.\n     state_val (transfers esx (transfer ex s)) V =\n     state_val (transfers esx' (transfer ex' s')) V\n  preds esx (transfer ex s)\n  es = ex # esx\n  es' = ex' # esx'\n  pred ex s", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>V\\<in>Use n'.\n     state_val (transfers esx (transfer ex s)) V =\n     state_val (transfers esx' (transfer ex' s')) V\n  preds esx (transfer ex s)\n  es = ex # esx\n  es' = ex' # esx'\n  pred ex s\n\ngoal (1 subgoal):\n 1. (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "by simp"], ["proof (state)\nthis:\n  (\\<forall>V\\<in>Use n'.\n      state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n  preds es s\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>V xs.\n               (V, xs, as') \\<in> dependent_live_vars n' \\<longrightarrow>\n               state_val (transfer ex s) V =\n               state_val (transfer ex' s') V) \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>V xs.\n               (V, xs, as') \\<in> dependent_live_vars n' \\<longrightarrow>\n               state_val (transfer ex s) V =\n               state_val (transfer ex' s') V) \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<forall>V xs.\n             (V, xs, as') \\<in> dependent_live_vars n' \\<longrightarrow>\n             state_val (transfer ex s) V = state_val (transfer ex' s') V)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>V xs.\n               (V, xs, as') \\<in> dependent_live_vars n' \\<longrightarrow>\n               state_val (transfer ex s) V =\n               state_val (transfer ex' s') V) \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>V xs.\n             (V, xs, as') \\<in> dependent_live_vars n' \\<longrightarrow>\n             state_val (transfer ex s) V = state_val (transfer ex' s') V)", "obtain V' xs' where \"(V',xs',as') \\<in> dependent_live_vars n'\"\n        and \"state_val (transfer ex s) V' \\<noteq> state_val (transfer ex' s') V'\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>V xs.\n             (V, xs, as') \\<in> dependent_live_vars n' \\<longrightarrow>\n             state_val (transfer ex s) V = state_val (transfer ex' s') V)\n\ngoal (1 subgoal):\n 1. (\\<And>V' xs'.\n        \\<lbrakk>(V', xs', as') \\<in> dependent_live_vars n';\n         state_val (transfer ex s) V' \\<noteq>\n         state_val (transfer ex' s') V'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (V', xs', as') \\<in> dependent_live_vars n'\n  state_val (transfer ex s) V' \\<noteq> state_val (transfer ex' s') V'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>V xs.\n               (V, xs, as') \\<in> dependent_live_vars n' \\<longrightarrow>\n               state_val (transfer ex s) V =\n               state_val (transfer ex' s') V) \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "proof(cases \"n -a'#as'\\<rightarrow>\\<^sub>d* n'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "case True"], ["proof (state)\nthis:\n  n -a' # as'\\<rightarrow>\\<^sub>d* n'\n\ngoal (2 subgoals):\n 1. n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with \\<open>slice_path as = x#xs\\<close> \\<open>as = a'#as'\\<close> \\<open>last(targetnodes as) = n'\\<close> ex"], ["proof (chain)\npicking this:\n  slice_path as = x # xs\n  as = a' # as'\n  last (targetnodes as) = n'\n  ex =\n  (if x then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  n -a' # as'\\<rightarrow>\\<^sub>d* n'", "have [simp]:\"ex = kind a'\""], ["proof (prove)\nusing this:\n  slice_path as = x # xs\n  as = a' # as'\n  last (targetnodes as) = n'\n  ex =\n  (if x then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  n -a' # as'\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. ex = kind a'", "by clarsimp"], ["proof (state)\nthis:\n  ex = kind a'\n\ngoal (2 subgoals):\n 1. n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with \\<open>x \\<longrightarrow> y\\<close> ex ex'"], ["proof (chain)\npicking this:\n  x \\<longrightarrow> y\n  ex =\n  (if x then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  ex' =\n  (if y then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  ex = kind a'", "have [simp]:\"ex' = ex\""], ["proof (prove)\nusing this:\n  x \\<longrightarrow> y\n  ex =\n  (if x then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  ex' =\n  (if y then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  ex = kind a'\n\ngoal (1 subgoal):\n 1. ex' = ex", "by(cases x) auto"], ["proof (state)\nthis:\n  ex' = ex\n\ngoal (2 subgoals):\n 1. n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "{"], ["proof (state)\nthis:\n  ex' = ex\n\ngoal (2 subgoals):\n 1. n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "fix V"], ["proof (state)\ngoal (2 subgoals):\n 1. n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "assume \"V \\<in> Use (sourcenode a')\""], ["proof (state)\nthis:\n  V \\<in> Use (sourcenode a')\n\ngoal (2 subgoals):\n 1. n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "hence \"(V,[],[]) \\<in> dependent_live_vars (sourcenode a')\""], ["proof (prove)\nusing this:\n  V \\<in> Use (sourcenode a')\n\ngoal (1 subgoal):\n 1. (V, [], []) \\<in> dependent_live_vars (sourcenode a')", "by(rule dep_vars_Use)"], ["proof (state)\nthis:\n  (V, [], []) \\<in> dependent_live_vars (sourcenode a')\n\ngoal (2 subgoals):\n 1. n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with \\<open>n -a'#as'\\<rightarrow>\\<^sub>d* n'\\<close>"], ["proof (chain)\npicking this:\n  n -a' # as'\\<rightarrow>\\<^sub>d* n'\n  (V, [], []) \\<in> dependent_live_vars (sourcenode a')", "have \"(V,[],[]@a'#as') \\<in> dependent_live_vars n'\""], ["proof (prove)\nusing this:\n  n -a' # as'\\<rightarrow>\\<^sub>d* n'\n  (V, [], []) \\<in> dependent_live_vars (sourcenode a')\n\ngoal (1 subgoal):\n 1. (V, [], [] @ a' # as') \\<in> dependent_live_vars n'", "by(fastforce intro:dependent_live_vars_dep_dependent_live_vars)"], ["proof (state)\nthis:\n  (V, [], [] @ a' # as') \\<in> dependent_live_vars n'\n\ngoal (2 subgoals):\n 1. n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with all \\<open>as = a'#as'\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>V xs.\n     (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n     state_val s V = state_val s' V\n  as = a' # as'\n  (V, [], [] @ a' # as') \\<in> dependent_live_vars n'", "have \"state_val s V = state_val s' V\""], ["proof (prove)\nusing this:\n  \\<forall>V xs.\n     (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n     state_val s V = state_val s' V\n  as = a' # as'\n  (V, [], [] @ a' # as') \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. state_val s V = state_val s' V", "by fastforce"], ["proof (state)\nthis:\n  state_val s V = state_val s' V\n\ngoal (2 subgoals):\n 1. n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "}"], ["proof (state)\nthis:\n  ?V2 \\<in> Use (sourcenode a') \\<Longrightarrow>\n  state_val s ?V2 = state_val s' ?V2\n\ngoal (2 subgoals):\n 1. n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with \\<open>pred ex' s'\\<close> \\<open>valid_edge a'\\<close>"], ["proof (chain)\npicking this:\n  pred ex' s'\n  valid_edge a'\n  ?V2 \\<in> Use (sourcenode a') \\<Longrightarrow>\n  state_val s ?V2 = state_val s' ?V2", "have \"pred ex s\""], ["proof (prove)\nusing this:\n  pred ex' s'\n  valid_edge a'\n  ?V2 \\<in> Use (sourcenode a') \\<Longrightarrow>\n  state_val s ?V2 = state_val s' ?V2\n\ngoal (1 subgoal):\n 1. pred ex s", "by(fastforce intro:CFG_edge_Uses_pred_equal)"], ["proof (state)\nthis:\n  pred ex s\n\ngoal (2 subgoals):\n 1. n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "proof(cases \"V' \\<in> Def n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. V' \\<in> Def n \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. V' \\<notin> Def n \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "case True"], ["proof (state)\nthis:\n  V' \\<in> Def n\n\ngoal (2 subgoals):\n 1. V' \\<in> Def n \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. V' \\<notin> Def n \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with \\<open>state_val (transfer ex s) V' \\<noteq> state_val (transfer ex' s') V'\\<close>\n            \\<open>valid_edge a'\\<close> \\<open>pred ex' s'\\<close> \\<open>pred ex s\\<close>\n            CFG_edge_transfer_uses_only_Use[of a' s s']"], ["proof (chain)\npicking this:\n  state_val (transfer ex s) V' \\<noteq> state_val (transfer ex' s') V'\n  valid_edge a'\n  pred ex' s'\n  pred ex s\n  \\<lbrakk>valid_edge a';\n   \\<forall>V\\<in>Use (sourcenode a'). state_val s V = state_val s' V;\n   pred (kind a') s; pred (kind a') s'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>V\\<in>Def (sourcenode a').\n                       state_val (transfer (kind a') s) V =\n                       state_val (transfer (kind a') s') V\n  V' \\<in> Def n", "obtain V'' where \"V'' \\<in> Use n\"\n            and \"state_val s V'' \\<noteq> state_val s' V''\""], ["proof (prove)\nusing this:\n  state_val (transfer ex s) V' \\<noteq> state_val (transfer ex' s') V'\n  valid_edge a'\n  pred ex' s'\n  pred ex s\n  \\<lbrakk>valid_edge a';\n   \\<forall>V\\<in>Use (sourcenode a'). state_val s V = state_val s' V;\n   pred (kind a') s; pred (kind a') s'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>V\\<in>Def (sourcenode a').\n                       state_val (transfer (kind a') s) V =\n                       state_val (transfer (kind a') s') V\n  V' \\<in> Def n\n\ngoal (1 subgoal):\n 1. (\\<And>V''.\n        \\<lbrakk>V'' \\<in> Use n;\n         state_val s V'' \\<noteq> state_val s' V''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  V'' \\<in> Use n\n  state_val s V'' \\<noteq> state_val s' V''\n\ngoal (2 subgoals):\n 1. V' \\<in> Def n \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. V' \\<notin> Def n \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "from True \\<open>(V',xs',as') \\<in> dependent_live_vars n'\\<close>\n            \\<open>targetnode a' -as'\\<rightarrow>* n'\\<close> \\<open>last(targetnodes as) = n'\\<close> \\<open>as = a'#as'\\<close>\n            \\<open>valid_edge a'\\<close> \\<open>n = sourcenode a'\\<close>[THEN sym]"], ["proof (chain)\npicking this:\n  V' \\<in> Def n\n  (V', xs', as') \\<in> dependent_live_vars n'\n  targetnode a' -as'\\<rightarrow>* n'\n  last (targetnodes as) = n'\n  as = a' # as'\n  valid_edge a'\n  sourcenode a' = n", "have \"n -{V'}a'#xs'\\<rightarrow>\\<^sub>d\\<^sub>d last(targetnodes (a'#xs'))\""], ["proof (prove)\nusing this:\n  V' \\<in> Def n\n  (V', xs', as') \\<in> dependent_live_vars n'\n  targetnode a' -as'\\<rightarrow>* n'\n  last (targetnodes as) = n'\n  as = a' # as'\n  valid_edge a'\n  sourcenode a' = n\n\ngoal (1 subgoal):\n 1. n -{V'}a' #\n           xs'\\<rightarrow>\\<^sub>d\\<^sub>d last (targetnodes (a' # xs'))", "by -(drule dependent_live_vars_dependent_edge,\n              auto dest!: dependent_live_vars_dependent_edge \n                   dest:DynPDG_ddep_edge_CFG_path path_targetnode \n                   simp del:\\<open>n = sourcenode a'\\<close>)"], ["proof (state)\nthis:\n  n -{V'}a' # xs'\\<rightarrow>\\<^sub>d\\<^sub>d last (targetnodes (a' # xs'))\n\ngoal (2 subgoals):\n 1. V' \\<in> Def n \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. V' \\<notin> Def n \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with \\<open>(V',xs',as') \\<in> dependent_live_vars n'\\<close> \\<open>V'' \\<in> Use n\\<close>\n            \\<open>last(targetnodes as) = n'\\<close> \\<open>as = a'#as'\\<close>"], ["proof (chain)\npicking this:\n  (V', xs', as') \\<in> dependent_live_vars n'\n  V'' \\<in> Use n\n  last (targetnodes as) = n'\n  as = a' # as'\n  n -{V'}a' # xs'\\<rightarrow>\\<^sub>d\\<^sub>d last (targetnodes (a' # xs'))", "have \"(V'',[],as) \\<in> dependent_live_vars n'\""], ["proof (prove)\nusing this:\n  (V', xs', as') \\<in> dependent_live_vars n'\n  V'' \\<in> Use n\n  last (targetnodes as) = n'\n  as = a' # as'\n  n -{V'}a' # xs'\\<rightarrow>\\<^sub>d\\<^sub>d last (targetnodes (a' # xs'))\n\ngoal (1 subgoal):\n 1. (V'', [], as) \\<in> dependent_live_vars n'", "by(fastforce intro:dep_vars_Cons_ddep)"], ["proof (state)\nthis:\n  (V'', [], as) \\<in> dependent_live_vars n'\n\ngoal (2 subgoals):\n 1. V' \\<in> Def n \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. V' \\<notin> Def n \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with all"], ["proof (chain)\npicking this:\n  \\<forall>V xs.\n     (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n     state_val s V = state_val s' V\n  (V'', [], as) \\<in> dependent_live_vars n'", "have \"state_val s V'' = state_val s' V''\""], ["proof (prove)\nusing this:\n  \\<forall>V xs.\n     (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n     state_val s V = state_val s' V\n  (V'', [], as) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. state_val s V'' = state_val s' V''", "by blast"], ["proof (state)\nthis:\n  state_val s V'' = state_val s' V''\n\ngoal (2 subgoals):\n 1. V' \\<in> Def n \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. V' \\<notin> Def n \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with \\<open>state_val s V'' \\<noteq> state_val s' V''\\<close>"], ["proof (chain)\npicking this:\n  state_val s V'' \\<noteq> state_val s' V''\n  state_val s V'' = state_val s' V''", "have False"], ["proof (prove)\nusing this:\n  state_val s V'' \\<noteq> state_val s' V''\n  state_val s V'' = state_val s' V''\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. V' \\<in> Def n \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s\n 2. V' \\<notin> Def n \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "by simp"], ["proof (state)\nthis:\n  (\\<forall>V\\<in>Use n'.\n      state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n  preds es s\n\ngoal (1 subgoal):\n 1. V' \\<notin> Def n \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. V' \\<notin> Def n \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "case False"], ["proof (state)\nthis:\n  V' \\<notin> Def n\n\ngoal (1 subgoal):\n 1. V' \\<notin> Def n \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with \\<open>valid_edge a'\\<close> \\<open>pred ex s\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a'\n  pred ex s\n  V' \\<notin> Def n", "have \"state_val (transfer (kind a') s) V' = state_val s V'\""], ["proof (prove)\nusing this:\n  valid_edge a'\n  pred ex s\n  V' \\<notin> Def n\n\ngoal (1 subgoal):\n 1. state_val (transfer (kind a') s) V' = state_val s V'", "by(fastforce intro:CFG_edge_no_Def_equal)"], ["proof (state)\nthis:\n  state_val (transfer (kind a') s) V' = state_val s V'\n\ngoal (1 subgoal):\n 1. V' \\<notin> Def n \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "moreover"], ["proof (state)\nthis:\n  state_val (transfer (kind a') s) V' = state_val s V'\n\ngoal (1 subgoal):\n 1. V' \\<notin> Def n \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "from False \\<open>valid_edge a'\\<close> \\<open>pred ex' s'\\<close>"], ["proof (chain)\npicking this:\n  V' \\<notin> Def n\n  valid_edge a'\n  pred ex' s'", "have \"state_val (transfer (kind a') s') V' = state_val s' V'\""], ["proof (prove)\nusing this:\n  V' \\<notin> Def n\n  valid_edge a'\n  pred ex' s'\n\ngoal (1 subgoal):\n 1. state_val (transfer (kind a') s') V' = state_val s' V'", "by(fastforce intro:CFG_edge_no_Def_equal)"], ["proof (state)\nthis:\n  state_val (transfer (kind a') s') V' = state_val s' V'\n\ngoal (1 subgoal):\n 1. V' \\<notin> Def n \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "ultimately"], ["proof (chain)\npicking this:\n  state_val (transfer (kind a') s) V' = state_val s V'\n  state_val (transfer (kind a') s') V' = state_val s' V'", "have \"state_val s V' \\<noteq> state_val s' V'\""], ["proof (prove)\nusing this:\n  state_val (transfer (kind a') s) V' = state_val s V'\n  state_val (transfer (kind a') s') V' = state_val s' V'\n\ngoal (1 subgoal):\n 1. state_val s V' \\<noteq> state_val s' V'", "using \\<open>state_val (transfer ex s) V' \\<noteq> state_val (transfer ex' s') V'\\<close>"], ["proof (prove)\nusing this:\n  state_val (transfer (kind a') s) V' = state_val s V'\n  state_val (transfer (kind a') s') V' = state_val s' V'\n  state_val (transfer ex s) V' \\<noteq> state_val (transfer ex' s') V'\n\ngoal (1 subgoal):\n 1. state_val s V' \\<noteq> state_val s' V'", "by simp"], ["proof (state)\nthis:\n  state_val s V' \\<noteq> state_val s' V'\n\ngoal (1 subgoal):\n 1. V' \\<notin> Def n \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "from False"], ["proof (chain)\npicking this:\n  V' \\<notin> Def n", "have \"\\<not> n -{V'}a'#xs'\\<rightarrow>\\<^sub>d\\<^sub>d \n                           last(targetnodes (a'#xs'))\""], ["proof (prove)\nusing this:\n  V' \\<notin> Def n\n\ngoal (1 subgoal):\n 1. \\<not> n -{V'}a' #\n                  xs'\\<rightarrow>\\<^sub>d\\<^sub>d last\n              (targetnodes (a' # xs'))", "by(auto elim:DynPDG_edge.cases simp:dyn_data_dependence_def)"], ["proof (state)\nthis:\n  \\<not> n -{V'}a' #\n                xs'\\<rightarrow>\\<^sub>d\\<^sub>d last\n            (targetnodes (a' # xs'))\n\ngoal (1 subgoal):\n 1. V' \\<notin> Def n \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with \\<open>(V',xs',as') \\<in> dependent_live_vars n'\\<close> \\<open>last(targetnodes as) = n'\\<close>\n            \\<open>as = a'#as'\\<close>"], ["proof (chain)\npicking this:\n  (V', xs', as') \\<in> dependent_live_vars n'\n  last (targetnodes as) = n'\n  as = a' # as'\n  \\<not> n -{V'}a' #\n                xs'\\<rightarrow>\\<^sub>d\\<^sub>d last\n            (targetnodes (a' # xs'))", "have \"(V',a'#xs',a'#as') \\<in> dependent_live_vars n'\""], ["proof (prove)\nusing this:\n  (V', xs', as') \\<in> dependent_live_vars n'\n  last (targetnodes as) = n'\n  as = a' # as'\n  \\<not> n -{V'}a' #\n                xs'\\<rightarrow>\\<^sub>d\\<^sub>d last\n            (targetnodes (a' # xs'))\n\ngoal (1 subgoal):\n 1. (V', a' # xs', a' # as') \\<in> dependent_live_vars n'", "by(fastforce intro:dep_vars_Cons_keep)"], ["proof (state)\nthis:\n  (V', a' # xs', a' # as') \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. V' \\<notin> Def n \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with \\<open>as = a'#as'\\<close> all"], ["proof (chain)\npicking this:\n  as = a' # as'\n  \\<forall>V xs.\n     (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n     state_val s V = state_val s' V\n  (V', a' # xs', a' # as') \\<in> dependent_live_vars n'", "have \"state_val s V' = state_val s' V'\""], ["proof (prove)\nusing this:\n  as = a' # as'\n  \\<forall>V xs.\n     (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n     state_val s V = state_val s' V\n  (V', a' # xs', a' # as') \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. state_val s V' = state_val s' V'", "by auto"], ["proof (state)\nthis:\n  state_val s V' = state_val s' V'\n\ngoal (1 subgoal):\n 1. V' \\<notin> Def n \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with \\<open>state_val s V' \\<noteq> state_val s' V'\\<close>"], ["proof (chain)\npicking this:\n  state_val s V' \\<noteq> state_val s' V'\n  state_val s V' = state_val s' V'", "have False"], ["proof (prove)\nusing this:\n  state_val s V' \\<noteq> state_val s' V'\n  state_val s V' = state_val s' V'\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. V' \\<notin> Def n \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "by simp"], ["proof (state)\nthis:\n  (\\<forall>V\\<in>Use n'.\n      state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n  preds es s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<forall>V\\<in>Use n'.\n      state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n  preds es s\n\ngoal (1 subgoal):\n 1. \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "case False"], ["proof (state)\nthis:\n  \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "{"], ["proof (state)\nthis:\n  \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "assume \"V' \\<in> Def n\""], ["proof (state)\nthis:\n  V' \\<in> Def n\n\ngoal (1 subgoal):\n 1. \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with \\<open>(V',xs',as') \\<in> dependent_live_vars n'\\<close> \\<open>targetnode a' -as'\\<rightarrow>* n'\\<close>\n            \\<open>valid_edge a'\\<close>"], ["proof (chain)\npicking this:\n  (V', xs', as') \\<in> dependent_live_vars n'\n  targetnode a' -as'\\<rightarrow>* n'\n  valid_edge a'\n  V' \\<in> Def n", "have \"n -a'#as'\\<rightarrow>\\<^sub>d* n'\""], ["proof (prove)\nusing this:\n  (V', xs', as') \\<in> dependent_live_vars n'\n  targetnode a' -as'\\<rightarrow>* n'\n  valid_edge a'\n  V' \\<in> Def n\n\ngoal (1 subgoal):\n 1. n -a' # as'\\<rightarrow>\\<^sub>d* n'", "by -(drule dependent_live_vars_dependent_edge,\n              auto dest:DynPDG_path_ddep DynPDG_path_Append)"], ["proof (state)\nthis:\n  n -a' # as'\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with False"], ["proof (chain)\npicking this:\n  \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n'\n  n -a' # as'\\<rightarrow>\\<^sub>d* n'", "have \"False\""], ["proof (prove)\nusing this:\n  \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n'\n  n -a' # as'\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "}"], ["proof (state)\nthis:\n  V' \\<in> Def n \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "hence \"V' \\<notin> Def (sourcenode a')\""], ["proof (prove)\nusing this:\n  V' \\<in> Def n \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. V' \\<notin> Def (sourcenode a')", "by fastforce"], ["proof (state)\nthis:\n  V' \\<notin> Def (sourcenode a')\n\ngoal (1 subgoal):\n 1. \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "from False \\<open>slice_path as = x#xs\\<close> \\<open>as = a'#as'\\<close>\n          \\<open>last(targetnodes as) = n'\\<close> \\<open>as' \\<noteq> []\\<close>"], ["proof (chain)\npicking this:\n  \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n'\n  slice_path as = x # xs\n  as = a' # as'\n  last (targetnodes as) = n'\n  as' \\<noteq> []", "have \"\\<not> x\""], ["proof (prove)\nusing this:\n  \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n'\n  slice_path as = x # xs\n  as = a' # as'\n  last (targetnodes as) = n'\n  as' \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<not> x", "by(auto simp:targetnodes_def)"], ["proof (state)\nthis:\n  \\<not> x\n\ngoal (1 subgoal):\n 1. \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with ex"], ["proof (chain)\npicking this:\n  ex =\n  (if x then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  \\<not> x", "have cases:\"ex = (case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\""], ["proof (prove)\nusing this:\n  ex =\n  (if x then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  \\<not> x\n\ngoal (1 subgoal):\n 1. ex =\n    (case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n     | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)", "by simp"], ["proof (state)\nthis:\n  ex =\n  (case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n   | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n\ngoal (1 subgoal):\n 1. \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "have \"state_val s V' \\<noteq> state_val s' V'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_val s V' \\<noteq> state_val s' V'", "proof(cases y)"], ["proof (state)\ngoal (2 subgoals):\n 1. y \\<Longrightarrow> state_val s V' \\<noteq> state_val s' V'\n 2. \\<not> y \\<Longrightarrow> state_val s V' \\<noteq> state_val s' V'", "case True"], ["proof (state)\nthis:\n  y\n\ngoal (2 subgoals):\n 1. y \\<Longrightarrow> state_val s V' \\<noteq> state_val s' V'\n 2. \\<not> y \\<Longrightarrow> state_val s V' \\<noteq> state_val s' V'", "with ex'"], ["proof (chain)\npicking this:\n  ex' =\n  (if y then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  y", "have [simp]:\"ex' = kind a'\""], ["proof (prove)\nusing this:\n  ex' =\n  (if y then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  y\n\ngoal (1 subgoal):\n 1. ex' = kind a'", "by simp"], ["proof (state)\nthis:\n  ex' = kind a'\n\ngoal (2 subgoals):\n 1. y \\<Longrightarrow> state_val s V' \\<noteq> state_val s' V'\n 2. \\<not> y \\<Longrightarrow> state_val s V' \\<noteq> state_val s' V'", "from \\<open>V' \\<notin> Def (sourcenode a')\\<close> \\<open>valid_edge a'\\<close> \\<open>pred ex' s'\\<close>"], ["proof (chain)\npicking this:\n  V' \\<notin> Def (sourcenode a')\n  valid_edge a'\n  pred ex' s'", "have states_eq:\"state_val (transfer (kind a') s') V' = state_val s' V'\""], ["proof (prove)\nusing this:\n  V' \\<notin> Def (sourcenode a')\n  valid_edge a'\n  pred ex' s'\n\ngoal (1 subgoal):\n 1. state_val (transfer (kind a') s') V' = state_val s' V'", "by(fastforce intro:CFG_edge_no_Def_equal)"], ["proof (state)\nthis:\n  state_val (transfer (kind a') s') V' = state_val s' V'\n\ngoal (2 subgoals):\n 1. y \\<Longrightarrow> state_val s V' \\<noteq> state_val s' V'\n 2. \\<not> y \\<Longrightarrow> state_val s V' \\<noteq> state_val s' V'", "from cases"], ["proof (chain)\npicking this:\n  ex =\n  (case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n   | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)", "have \"state_val s V' = state_val (transfer ex s) V'\""], ["proof (prove)\nusing this:\n  ex =\n  (case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n   | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n\ngoal (1 subgoal):\n 1. state_val s V' = state_val (transfer ex s) V'", "by(cases \"kind a'\") auto"], ["proof (state)\nthis:\n  state_val s V' = state_val (transfer ex s) V'\n\ngoal (2 subgoals):\n 1. y \\<Longrightarrow> state_val s V' \\<noteq> state_val s' V'\n 2. \\<not> y \\<Longrightarrow> state_val s V' \\<noteq> state_val s' V'", "with states_eq\n            \\<open>state_val (transfer ex s) V' \\<noteq> state_val (transfer ex' s') V'\\<close>"], ["proof (chain)\npicking this:\n  state_val (transfer (kind a') s') V' = state_val s' V'\n  state_val (transfer ex s) V' \\<noteq> state_val (transfer ex' s') V'\n  state_val s V' = state_val (transfer ex s) V'", "show ?thesis"], ["proof (prove)\nusing this:\n  state_val (transfer (kind a') s') V' = state_val s' V'\n  state_val (transfer ex s) V' \\<noteq> state_val (transfer ex' s') V'\n  state_val s V' = state_val (transfer ex s) V'\n\ngoal (1 subgoal):\n 1. state_val s V' \\<noteq> state_val s' V'", "by simp"], ["proof (state)\nthis:\n  state_val s V' \\<noteq> state_val s' V'\n\ngoal (1 subgoal):\n 1. \\<not> y \\<Longrightarrow> state_val s V' \\<noteq> state_val s' V'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> y \\<Longrightarrow> state_val s V' \\<noteq> state_val s' V'", "case False"], ["proof (state)\nthis:\n  \\<not> y\n\ngoal (1 subgoal):\n 1. \\<not> y \\<Longrightarrow> state_val s V' \\<noteq> state_val s' V'", "with ex'"], ["proof (chain)\npicking this:\n  ex' =\n  (if y then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  \\<not> y", "have \"ex' = (case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\""], ["proof (prove)\nusing this:\n  ex' =\n  (if y then kind a'\n   else case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n        | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  \\<not> y\n\ngoal (1 subgoal):\n 1. ex' =\n    (case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n     | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)", "by simp"], ["proof (state)\nthis:\n  ex' =\n  (case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n   | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n\ngoal (1 subgoal):\n 1. \\<not> y \\<Longrightarrow> state_val s V' \\<noteq> state_val s' V'", "with cases"], ["proof (chain)\npicking this:\n  ex =\n  (case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n   | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  ex' =\n  (case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n   | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)", "have \"state_val s V' = state_val (transfer ex s) V'\"\n            and \"state_val s' V' = state_val (transfer ex' s') V'\""], ["proof (prove)\nusing this:\n  ex =\n  (case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n   | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n  ex' =\n  (case kind a' of \\<Up>f \\<Rightarrow> \\<Up>id\n   | (Q)\\<^sub>\\<surd> \\<Rightarrow> (\\<lambda>s. True)\\<^sub>\\<surd>)\n\ngoal (1 subgoal):\n 1. state_val s V' = state_val (transfer ex s) V' &&&\n    state_val s' V' = state_val (transfer ex' s') V'", "by(cases \"kind a'\",auto)+"], ["proof (state)\nthis:\n  state_val s V' = state_val (transfer ex s) V'\n  state_val s' V' = state_val (transfer ex' s') V'\n\ngoal (1 subgoal):\n 1. \\<not> y \\<Longrightarrow> state_val s V' \\<noteq> state_val s' V'", "with \\<open>state_val (transfer ex s) V' \\<noteq> state_val (transfer ex' s') V'\\<close>"], ["proof (chain)\npicking this:\n  state_val (transfer ex s) V' \\<noteq> state_val (transfer ex' s') V'\n  state_val s V' = state_val (transfer ex s) V'\n  state_val s' V' = state_val (transfer ex' s') V'", "show ?thesis"], ["proof (prove)\nusing this:\n  state_val (transfer ex s) V' \\<noteq> state_val (transfer ex' s') V'\n  state_val s V' = state_val (transfer ex s) V'\n  state_val s' V' = state_val (transfer ex' s') V'\n\ngoal (1 subgoal):\n 1. state_val s V' \\<noteq> state_val s' V'", "by simp"], ["proof (state)\nthis:\n  state_val s V' \\<noteq> state_val s' V'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  state_val s V' \\<noteq> state_val s' V'\n\ngoal (1 subgoal):\n 1. \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "from \\<open>V' \\<notin> Def (sourcenode a')\\<close>"], ["proof (chain)\npicking this:\n  V' \\<notin> Def (sourcenode a')", "have \"\\<not> n -{V'}a'#xs'\\<rightarrow>\\<^sub>d\\<^sub>d last(targetnodes (a'#xs'))\""], ["proof (prove)\nusing this:\n  V' \\<notin> Def (sourcenode a')\n\ngoal (1 subgoal):\n 1. \\<not> n -{V'}a' #\n                  xs'\\<rightarrow>\\<^sub>d\\<^sub>d last\n              (targetnodes (a' # xs'))", "by(auto elim:DynPDG_edge.cases simp:dyn_data_dependence_def)"], ["proof (state)\nthis:\n  \\<not> n -{V'}a' #\n                xs'\\<rightarrow>\\<^sub>d\\<^sub>d last\n            (targetnodes (a' # xs'))\n\ngoal (1 subgoal):\n 1. \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with \\<open>(V',xs',as') \\<in> dependent_live_vars n'\\<close> \\<open>last(targetnodes as) = n'\\<close>\n          \\<open>as = a'#as'\\<close>"], ["proof (chain)\npicking this:\n  (V', xs', as') \\<in> dependent_live_vars n'\n  last (targetnodes as) = n'\n  as = a' # as'\n  \\<not> n -{V'}a' #\n                xs'\\<rightarrow>\\<^sub>d\\<^sub>d last\n            (targetnodes (a' # xs'))", "have \"(V',a'#xs',a'#as') \\<in> dependent_live_vars n'\""], ["proof (prove)\nusing this:\n  (V', xs', as') \\<in> dependent_live_vars n'\n  last (targetnodes as) = n'\n  as = a' # as'\n  \\<not> n -{V'}a' #\n                xs'\\<rightarrow>\\<^sub>d\\<^sub>d last\n            (targetnodes (a' # xs'))\n\ngoal (1 subgoal):\n 1. (V', a' # xs', a' # as') \\<in> dependent_live_vars n'", "by(fastforce intro:dep_vars_Cons_keep)"], ["proof (state)\nthis:\n  (V', a' # xs', a' # as') \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with \\<open>as = a'#as'\\<close> all"], ["proof (chain)\npicking this:\n  as = a' # as'\n  \\<forall>V xs.\n     (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n     state_val s V = state_val s' V\n  (V', a' # xs', a' # as') \\<in> dependent_live_vars n'", "have \"state_val s V' = state_val s' V'\""], ["proof (prove)\nusing this:\n  as = a' # as'\n  \\<forall>V xs.\n     (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n     state_val s V = state_val s' V\n  (V', a' # xs', a' # as') \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. state_val s V' = state_val s' V'", "by auto"], ["proof (state)\nthis:\n  state_val s V' = state_val s' V'\n\ngoal (1 subgoal):\n 1. \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "with \\<open>state_val s V' \\<noteq> state_val s' V'\\<close>"], ["proof (chain)\npicking this:\n  state_val s V' \\<noteq> state_val s' V'\n  state_val s V' = state_val s' V'", "have False"], ["proof (prove)\nusing this:\n  state_val s V' \\<noteq> state_val s' V'\n  state_val s V' = state_val s' V'\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> n -a' # as'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n    (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. (\\<forall>V\\<in>Use n'.\n        state_val (transfers es s) V =\n        state_val (transfers es' s') V) \\<and>\n    preds es s", "by simp"], ["proof (state)\nthis:\n  (\\<forall>V\\<in>Use n'.\n      state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n  preds es s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<forall>V\\<in>Use n'.\n      state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n  preds es s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<forall>V\\<in>Use n'.\n      state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n  preds es s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<forall>V\\<in>Use n'.\n      state_val (transfers es s) V = state_val (transfers es' s') V) \\<and>\n  preds es s\n\ngoal (2 subgoals):\n 1. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; v # va \\<preceq>\\<^sub>b [];\n        slice_path as = v # va; select_edge_kinds as (v # va) = es;\n        select_edge_kinds as [] = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s\n 2. \\<And>v va as es es' n s s'.\n       \\<lbrakk>n -as\\<rightarrow>* n'; [] \\<preceq>\\<^sub>b v # va;\n        slice_path as = []; select_edge_kinds as [] = es;\n        select_edge_kinds as (v # va) = es';\n        \\<forall>V xs.\n           (V, xs, as) \\<in> dependent_live_vars n' \\<longrightarrow>\n           state_val s V = state_val s' V;\n        preds es' s'\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>V\\<in>Use n'.\n                             state_val (transfers es s) V =\n                             state_val (transfers es' s') V) \\<and>\n                         preds es s", "qed simp_all"], ["", "theorem fundamental_property_of_path_slicing:\n  assumes \"n -as\\<rightarrow>* n'\" and \"preds (kinds as) s\"\n  shows \"(\\<forall>V \\<in> Use n'. state_val (transfers (slice_kinds as) s) V = \n                         state_val (transfers (kinds as) s) V)\" \n  and \"preds (slice_kinds as) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Use n'.\n       state_val (transfers (slice_kinds as) s) V =\n       state_val (transfers (kinds as) s) V &&&\n    preds (slice_kinds as) s", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>V\\<in>Use n'.\n       state_val (transfers (slice_kinds as) s) V =\n       state_val (transfers (kinds as) s) V\n 2. preds (slice_kinds as) s", "have \"length as = length (slice_path as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length as = length (slice_path as)", "by(simp add:slice_path_length)"], ["proof (state)\nthis:\n  length as = length (slice_path as)\n\ngoal (2 subgoals):\n 1. \\<forall>V\\<in>Use n'.\n       state_val (transfers (slice_kinds as) s) V =\n       state_val (transfers (kinds as) s) V\n 2. preds (slice_kinds as) s", "hence \"slice_path as \\<preceq>\\<^sub>b replicate (length as) True\""], ["proof (prove)\nusing this:\n  length as = length (slice_path as)\n\ngoal (1 subgoal):\n 1. slice_path as \\<preceq>\\<^sub>b replicate (length as) True", "by(simp add:maximal_element)"], ["proof (state)\nthis:\n  slice_path as \\<preceq>\\<^sub>b replicate (length as) True\n\ngoal (2 subgoals):\n 1. \\<forall>V\\<in>Use n'.\n       state_val (transfers (slice_kinds as) s) V =\n       state_val (transfers (kinds as) s) V\n 2. preds (slice_kinds as) s", "have \"select_edge_kinds as (replicate (length as) True) = kinds as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. select_edge_kinds as (replicate (length as) True) = kinds as", "by(rule select_edge_kinds_max_bv)"], ["proof (state)\nthis:\n  select_edge_kinds as (replicate (length as) True) = kinds as\n\ngoal (2 subgoals):\n 1. \\<forall>V\\<in>Use n'.\n       state_val (transfers (slice_kinds as) s) V =\n       state_val (transfers (kinds as) s) V\n 2. preds (slice_kinds as) s", "with \\<open>n -as\\<rightarrow>* n'\\<close> \\<open>slice_path as \\<preceq>\\<^sub>b replicate (length as) True\\<close>\n    \\<open>preds (kinds as) s\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* n'\n  slice_path as \\<preceq>\\<^sub>b replicate (length as) True\n  preds (kinds as) s\n  select_edge_kinds as (replicate (length as) True) = kinds as", "have \"(\\<forall>V\\<in>Use n'. state_val (transfers (slice_kinds as) s) V =\n       state_val (transfers (kinds as) s) V) \\<and> preds (slice_kinds as) s\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n'\n  slice_path as \\<preceq>\\<^sub>b replicate (length as) True\n  preds (kinds as) s\n  select_edge_kinds as (replicate (length as) True) = kinds as\n\ngoal (1 subgoal):\n 1. (\\<forall>V\\<in>Use n'.\n        state_val (transfers (slice_kinds as) s) V =\n        state_val (transfers (kinds as) s) V) \\<and>\n    preds (slice_kinds as) s", "by -(rule slice_path_leqs_information_same_Uses,simp_all add:slice_kinds_def)"], ["proof (state)\nthis:\n  (\\<forall>V\\<in>Use n'.\n      state_val (transfers (slice_kinds as) s) V =\n      state_val (transfers (kinds as) s) V) \\<and>\n  preds (slice_kinds as) s\n\ngoal (2 subgoals):\n 1. \\<forall>V\\<in>Use n'.\n       state_val (transfers (slice_kinds as) s) V =\n       state_val (transfers (kinds as) s) V\n 2. preds (slice_kinds as) s", "thus \"\\<forall>V\\<in>Use n'. state_val (transfers (slice_kinds as) s) V =\n    state_val (transfers (kinds as) s) V\" and \"preds (slice_kinds as) s\""], ["proof (prove)\nusing this:\n  (\\<forall>V\\<in>Use n'.\n      state_val (transfers (slice_kinds as) s) V =\n      state_val (transfers (kinds as) s) V) \\<and>\n  preds (slice_kinds as) s\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Use n'.\n       state_val (transfers (slice_kinds as) s) V =\n       state_val (transfers (kinds as) s) V &&&\n    preds (slice_kinds as) s", "by simp_all"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Use n'.\n     state_val (transfers (slice_kinds as) s) V =\n     state_val (transfers (kinds as) s) V\n  preds (slice_kinds as) s\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>The fundamental property of (dynamic) slicing related to the semantics\\<close>"], ["", "locale BackwardPathSlice_wf = \n  DynPDG sourcenode targetnode kind valid_edge Entry Def Use state_val Exit \n    dyn_control_dependence +\n  CFG_semantics_wf sourcenode targetnode kind valid_edge Entry sem identifies\n  for sourcenode :: \"'edge \\<Rightarrow> 'node\" and targetnode :: \"'edge \\<Rightarrow> 'node\"\n  and kind :: \"'edge \\<Rightarrow> 'state edge_kind\" and valid_edge :: \"'edge \\<Rightarrow> bool\"\n  and Entry :: \"'node\" (\"'('_Entry'_')\") and Def :: \"'node \\<Rightarrow> 'var set\"\n  and Use :: \"'node \\<Rightarrow> 'var set\" and state_val :: \"'state \\<Rightarrow> 'var \\<Rightarrow> 'val\"\n  and dyn_control_dependence :: \"'node \\<Rightarrow> 'node \\<Rightarrow> 'edge list \\<Rightarrow> bool\" \n    (\"_ controls _ via _\" [51, 0, 0] 1000)\n  and Exit :: \"'node\" (\"'('_Exit'_')\") \n  and sem :: \"'com \\<Rightarrow> 'state \\<Rightarrow> 'com \\<Rightarrow> 'state \\<Rightarrow> bool\" \n    (\"((1\\<langle>_,/_\\<rangle>) \\<Rightarrow>/ (1\\<langle>_,/_\\<rangle>))\" [0,0,0,0] 81)\n  and identifies :: \"'node \\<Rightarrow> 'com \\<Rightarrow> bool\" (\"_ \\<triangleq> _\" [51, 0] 80) \n\nbegin"], ["", "theorem fundamental_property_of_path_slicing_semantically:\n  assumes \"n \\<triangleq> c\" and \"\\<langle>c,s\\<rangle> \\<Rightarrow> \\<langle>c',s'\\<rangle>\"\n  obtains n' as where \"n -as\\<rightarrow>* n'\" and \"preds (slice_kinds as) s\" \n  and \"n' \\<triangleq> c'\" \n  and \"\\<forall>V \\<in> Use n'. state_val (transfers (slice_kinds as) s) V = \n                     state_val s' V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as n'.\n        \\<lbrakk>n -as\\<rightarrow>* n'; preds (slice_kinds as) s;\n         n' \\<triangleq> c';\n         \\<forall>V\\<in>Use n'.\n            state_val (transfers (slice_kinds as) s) V =\n            state_val s' V\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(atomize_elim)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>as n'.\n       n -as\\<rightarrow>* n' \\<and>\n       preds (slice_kinds as) s \\<and>\n       n' \\<triangleq> c' \\<and>\n       (\\<forall>V\\<in>Use n'.\n           state_val (transfers (slice_kinds as) s) V = state_val s' V)", "from \\<open>n \\<triangleq> c\\<close> \\<open>\\<langle>c,s\\<rangle> \\<Rightarrow> \\<langle>c',s'\\<rangle>\\<close>"], ["proof (chain)\npicking this:\n  n \\<triangleq> c\n  \\<langle>c,s\\<rangle> \\<Rightarrow> \\<langle>c',s'\\<rangle>", "obtain n' as where \"n -as\\<rightarrow>* n'\"\n    and \"transfers (kinds as) s = s'\"\n    and \"preds (kinds as) s\"\n    and \"n' \\<triangleq> c'\""], ["proof (prove)\nusing this:\n  n \\<triangleq> c\n  \\<langle>c,s\\<rangle> \\<Rightarrow> \\<langle>c',s'\\<rangle>\n\ngoal (1 subgoal):\n 1. (\\<And>as n'.\n        \\<lbrakk>n -as\\<rightarrow>* n'; transfers (kinds as) s = s';\n         preds (kinds as) s; n' \\<triangleq> c'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce dest:fundamental_property)"], ["proof (state)\nthis:\n  n -as\\<rightarrow>* n'\n  transfers (kinds as) s = s'\n  preds (kinds as) s\n  n' \\<triangleq> c'\n\ngoal (1 subgoal):\n 1. \\<exists>as n'.\n       n -as\\<rightarrow>* n' \\<and>\n       preds (slice_kinds as) s \\<and>\n       n' \\<triangleq> c' \\<and>\n       (\\<forall>V\\<in>Use n'.\n           state_val (transfers (slice_kinds as) s) V = state_val s' V)", "with \\<open>n -as\\<rightarrow>* n'\\<close> \\<open>preds (kinds as) s\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* n'\n  preds (kinds as) s\n  n -as\\<rightarrow>* n'\n  transfers (kinds as) s = s'\n  preds (kinds as) s\n  n' \\<triangleq> c'", "have \"\\<forall>V \\<in> Use n'. state_val (transfers (slice_kinds as) s) V =\n    state_val (transfers (kinds as) s) V\" and \"preds (slice_kinds as) s\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n'\n  preds (kinds as) s\n  n -as\\<rightarrow>* n'\n  transfers (kinds as) s = s'\n  preds (kinds as) s\n  n' \\<triangleq> c'\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Use n'.\n       state_val (transfers (slice_kinds as) s) V =\n       state_val (transfers (kinds as) s) V &&&\n    preds (slice_kinds as) s", "by -(rule fundamental_property_of_path_slicing,simp_all)+"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Use n'.\n     state_val (transfers (slice_kinds as) s) V =\n     state_val (transfers (kinds as) s) V\n  preds (slice_kinds as) s\n\ngoal (1 subgoal):\n 1. \\<exists>as n'.\n       n -as\\<rightarrow>* n' \\<and>\n       preds (slice_kinds as) s \\<and>\n       n' \\<triangleq> c' \\<and>\n       (\\<forall>V\\<in>Use n'.\n           state_val (transfers (slice_kinds as) s) V = state_val s' V)", "with \\<open>transfers (kinds as) s = s'\\<close>"], ["proof (chain)\npicking this:\n  transfers (kinds as) s = s'\n  \\<forall>V\\<in>Use n'.\n     state_val (transfers (slice_kinds as) s) V =\n     state_val (transfers (kinds as) s) V\n  preds (slice_kinds as) s", "have \"\\<forall>V \\<in> Use n'. \n    state_val (transfers (slice_kinds as) s) V =\n    state_val s' V\""], ["proof (prove)\nusing this:\n  transfers (kinds as) s = s'\n  \\<forall>V\\<in>Use n'.\n     state_val (transfers (slice_kinds as) s) V =\n     state_val (transfers (kinds as) s) V\n  preds (slice_kinds as) s\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Use n'.\n       state_val (transfers (slice_kinds as) s) V = state_val s' V", "by simp"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Use n'.\n     state_val (transfers (slice_kinds as) s) V = state_val s' V\n\ngoal (1 subgoal):\n 1. \\<exists>as n'.\n       n -as\\<rightarrow>* n' \\<and>\n       preds (slice_kinds as) s \\<and>\n       n' \\<triangleq> c' \\<and>\n       (\\<forall>V\\<in>Use n'.\n           state_val (transfers (slice_kinds as) s) V = state_val s' V)", "with \\<open>n -as\\<rightarrow>* n'\\<close> \\<open>preds (slice_kinds as) s\\<close> \\<open>n' \\<triangleq> c'\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* n'\n  preds (slice_kinds as) s\n  n' \\<triangleq> c'\n  \\<forall>V\\<in>Use n'.\n     state_val (transfers (slice_kinds as) s) V = state_val s' V", "show \"\\<exists>as n'. n -as\\<rightarrow>* n' \\<and> preds (slice_kinds as) s \\<and> n' \\<triangleq> c' \\<and>\n       (\\<forall>V\\<in>Use n'. state_val (transfers (slice_kinds as) s) V = state_val s' V)\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n'\n  preds (slice_kinds as) s\n  n' \\<triangleq> c'\n  \\<forall>V\\<in>Use n'.\n     state_val (transfers (slice_kinds as) s) V = state_val s' V\n\ngoal (1 subgoal):\n 1. \\<exists>as n'.\n       n -as\\<rightarrow>* n' \\<and>\n       preds (slice_kinds as) s \\<and>\n       n' \\<triangleq> c' \\<and>\n       (\\<forall>V\\<in>Use n'.\n           state_val (transfers (slice_kinds as) s) V = state_val s' V)", "by blast"], ["proof (state)\nthis:\n  \\<exists>as n'.\n     n -as\\<rightarrow>* n' \\<and>\n     preds (slice_kinds as) s \\<and>\n     n' \\<triangleq> c' \\<and>\n     (\\<forall>V\\<in>Use n'.\n         state_val (transfers (slice_kinds as) s) V = state_val s' V)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}