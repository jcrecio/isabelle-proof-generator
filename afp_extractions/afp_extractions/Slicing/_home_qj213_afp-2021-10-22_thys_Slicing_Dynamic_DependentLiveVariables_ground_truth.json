{"file_name": "/home/qj213/afp-2021-10-22/thys/Slicing/Dynamic/DependentLiveVariables.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Slicing", "problem_names": ["lemma dependent_live_vars_fst_prefix_snd:\n  \"(V,as',as) \\<in> dependent_live_vars n' \\<Longrightarrow> \\<exists>as''. as'@as'' = as\"", "lemma dependent_live_vars_Exit_empty [dest]:\n  \"(V,as',as) \\<in> dependent_live_vars (_Exit_) \\<Longrightarrow> False\"", "lemma dependent_live_vars_lastnode:\n  \"\\<lbrakk>(V,as',as) \\<in> dependent_live_vars n'; as \\<noteq> []\\<rbrakk> \n  \\<Longrightarrow> n' = last(targetnodes as)\"", "lemma dependent_live_vars_Use_cases:\n  \"\\<lbrakk>(V,as',as) \\<in> dependent_live_vars n'; n -as\\<rightarrow>* n'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>nx as''. as = as'@as'' \\<and> n -as'\\<rightarrow>* nx \\<and> nx -as''\\<rightarrow>\\<^sub>d* n' \\<and> V \\<in> Use nx \\<and> \n               (\\<forall>n'' \\<in> set (sourcenodes as'). V \\<notin> Def n'')\"", "lemma dependent_live_vars_dependent_edge:\n  assumes \"(V,as',as) \\<in> dependent_live_vars n'\" \n  and \"targetnode a -as\\<rightarrow>* n'\"\n  and \"V \\<in> Def (sourcenode a)\" and \"valid_edge a\"\n  obtains nx as'' where \"as = as'@as''\" and \"sourcenode a -{V}a#as'\\<rightarrow>\\<^sub>d\\<^sub>d nx\"\n  and \"nx -as''\\<rightarrow>\\<^sub>d* n'\"", "lemma dependent_live_vars_same_pathsI:\n  assumes \"V \\<in> Use n'\"\n  shows \"\\<lbrakk>\\<forall>as' a as''. as = as'@a#as'' \\<longrightarrow> \\<not> sourcenode a -{V}a#as''\\<rightarrow>\\<^sub>d\\<^sub>d n'; \n          as \\<noteq> [] \\<longrightarrow> n' = last(targetnodes as)\\<rbrakk>\n  \\<Longrightarrow> (V,as,as) \\<in> dependent_live_vars n'\"", "lemma dependent_live_vars_same_pathsD:\n  \"\\<lbrakk>(V,as,as) \\<in> dependent_live_vars n';  as \\<noteq> [] \\<longrightarrow> n' = last(targetnodes as)\\<rbrakk>\n  \\<Longrightarrow> V \\<in> Use n' \\<and> (\\<forall>as' a as''. as = as'@a#as'' \\<longrightarrow>\n                       \\<not> sourcenode a -{V}a#as''\\<rightarrow>\\<^sub>d\\<^sub>d n')\"", "lemma dependent_live_vars_same_paths:\n  \"as \\<noteq> [] \\<longrightarrow> n' = last(targetnodes as) \\<Longrightarrow>\n  (V,as,as) \\<in> dependent_live_vars n' = \n  (V \\<in> Use n' \\<and> (\\<forall>as' a as''. as = as'@a#as'' \\<longrightarrow>\n                       \\<not> sourcenode a -{V}a#as''\\<rightarrow>\\<^sub>d\\<^sub>d n'))\"", "lemma dependent_live_vars_cdep_empty_fst:\nassumes \"n'' -as\\<rightarrow>\\<^sub>c\\<^sub>d n'\" and \"V' \\<in> Use n''\"\n  shows \"(V',[],as) \\<in> dependent_live_vars n'\"", "lemma dependent_live_vars_ddep_empty_fst:\n  assumes \"n'' -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n'\" and \"V' \\<in> Use n''\"\n  shows \"(V',[],as) \\<in> dependent_live_vars n'\"", "lemma ddep_dependent_live_vars_keep_notempty:\n  assumes \"n -{V}a#as\\<rightarrow>\\<^sub>d\\<^sub>d n''\" and \"as' \\<noteq> []\"\n  and \"(V,as'',as') \\<in> dependent_live_vars n'\"\n  shows \"(V,as@as'',as@as') \\<in> dependent_live_vars n'\"", "lemma dependent_live_vars_cdep_dependent_live_vars:\n  assumes \"n'' -as''\\<rightarrow>\\<^sub>c\\<^sub>d n'\" and \"(V',as',as) \\<in> dependent_live_vars n''\"\n  shows \"(V',as',as@as'') \\<in> dependent_live_vars n'\"", "lemma dependent_live_vars_ddep_dependent_live_vars:\n  assumes \"n'' -{V}as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\" and \"(V',as',as) \\<in> dependent_live_vars n''\"\n  shows \"(V',as',as@as'') \\<in> dependent_live_vars n'\"", "lemma dependent_live_vars_dep_dependent_live_vars:\n  \"\\<lbrakk>n'' -as''\\<rightarrow>\\<^sub>d* n'; (V',as',as) \\<in> dependent_live_vars n''\\<rbrakk>\n  \\<Longrightarrow> (V',as',as@as'') \\<in> dependent_live_vars n'\""], "translations": [["", "lemma dependent_live_vars_fst_prefix_snd:\n  \"(V,as',as) \\<in> dependent_live_vars n' \\<Longrightarrow> \\<exists>as''. as'@as'' = as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (V, as', as) \\<in> dependent_live_vars n' \\<Longrightarrow>\n    \\<exists>as''. as' @ as'' = as", "by(induct rule:dependent_live_vars.induct,simp_all)"], ["", "lemma dependent_live_vars_Exit_empty [dest]:\n  \"(V,as',as) \\<in> dependent_live_vars (_Exit_) \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (V, as', as) \\<in> dependent_live_vars (_Exit_) \\<Longrightarrow> False", "proof(induct rule:dependent_live_vars.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>V. V \\<in> Use (_Exit_) \\<Longrightarrow> False\n 2. \\<And>V a as' n'' as''.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -as''\\<rightarrow>\\<^sub>d* (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars (_Exit_); False;\n        V' \\<in> Use (sourcenode a); (_Exit_) = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars (_Exit_); False;\n        (_Exit_) = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> False", "case (dep_vars_Cons_cdep V a as' n'' as'')"], ["proof (state)\nthis:\n  V \\<in> Use (sourcenode a)\n  sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n''\n  n'' -as''\\<rightarrow>\\<^sub>d* (_Exit_)\n\ngoal (4 subgoals):\n 1. \\<And>V. V \\<in> Use (_Exit_) \\<Longrightarrow> False\n 2. \\<And>V a as' n'' as''.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -as''\\<rightarrow>\\<^sub>d* (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars (_Exit_); False;\n        V' \\<in> Use (sourcenode a); (_Exit_) = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars (_Exit_); False;\n        (_Exit_) = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> False", "from \\<open>n'' -as''\\<rightarrow>\\<^sub>d* (_Exit_)\\<close>"], ["proof (chain)\npicking this:\n  n'' -as''\\<rightarrow>\\<^sub>d* (_Exit_)", "have \"n'' = (_Exit_)\""], ["proof (prove)\nusing this:\n  n'' -as''\\<rightarrow>\\<^sub>d* (_Exit_)\n\ngoal (1 subgoal):\n 1. n'' = (_Exit_)", "by(fastforce intro:DynPDG_path_Exit)"], ["proof (state)\nthis:\n  n'' = (_Exit_)\n\ngoal (4 subgoals):\n 1. \\<And>V. V \\<in> Use (_Exit_) \\<Longrightarrow> False\n 2. \\<And>V a as' n'' as''.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -as''\\<rightarrow>\\<^sub>d* (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars (_Exit_); False;\n        V' \\<in> Use (sourcenode a); (_Exit_) = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars (_Exit_); False;\n        (_Exit_) = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> False", "with \\<open>sourcenode a -a#as'\\<rightarrow>\\<^sub>c\\<^sub>d n''\\<close>"], ["proof (chain)\npicking this:\n  sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n''\n  n'' = (_Exit_)", "have \"sourcenode a -a#as'\\<rightarrow>\\<^sub>d* (_Exit_)\""], ["proof (prove)\nusing this:\n  sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n''\n  n'' = (_Exit_)\n\ngoal (1 subgoal):\n 1. sourcenode a -a # as'\\<rightarrow>\\<^sub>d* (_Exit_)", "by(fastforce intro:DynPDG_path_cdep)"], ["proof (state)\nthis:\n  sourcenode a -a # as'\\<rightarrow>\\<^sub>d* (_Exit_)\n\ngoal (4 subgoals):\n 1. \\<And>V. V \\<in> Use (_Exit_) \\<Longrightarrow> False\n 2. \\<And>V a as' n'' as''.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -as''\\<rightarrow>\\<^sub>d* (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars (_Exit_); False;\n        V' \\<in> Use (sourcenode a); (_Exit_) = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars (_Exit_); False;\n        (_Exit_) = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"sourcenode a = (_Exit_)\""], ["proof (prove)\nusing this:\n  sourcenode a -a # as'\\<rightarrow>\\<^sub>d* (_Exit_)\n\ngoal (1 subgoal):\n 1. sourcenode a = (_Exit_)", "by(fastforce intro:DynPDG_path_Exit)"], ["proof (state)\nthis:\n  sourcenode a = (_Exit_)\n\ngoal (4 subgoals):\n 1. \\<And>V. V \\<in> Use (_Exit_) \\<Longrightarrow> False\n 2. \\<And>V a as' n'' as''.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -as''\\<rightarrow>\\<^sub>d* (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars (_Exit_); False;\n        V' \\<in> Use (sourcenode a); (_Exit_) = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars (_Exit_); False;\n        (_Exit_) = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> False", "with \\<open>V \\<in> Use (sourcenode a)\\<close>"], ["proof (chain)\npicking this:\n  V \\<in> Use (sourcenode a)\n  sourcenode a = (_Exit_)", "show False"], ["proof (prove)\nusing this:\n  V \\<in> Use (sourcenode a)\n  sourcenode a = (_Exit_)\n\ngoal (1 subgoal):\n 1. False", "by simp(erule Exit_Use_empty)"], ["proof (state)\nthis:\n  False\n\ngoal (3 subgoals):\n 1. \\<And>V. V \\<in> Use (_Exit_) \\<Longrightarrow> False\n 2. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars (_Exit_); False;\n        V' \\<in> Use (sourcenode a); (_Exit_) = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars (_Exit_); False;\n        (_Exit_) = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> False", "qed auto"], ["", "lemma dependent_live_vars_lastnode:\n  \"\\<lbrakk>(V,as',as) \\<in> dependent_live_vars n'; as \\<noteq> []\\<rbrakk> \n  \\<Longrightarrow> n' = last(targetnodes as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n     as \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> n' = last (targetnodes as)", "proof(induct rule:dependent_live_vars.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>V.\n       \\<lbrakk>V \\<in> Use n'; [] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> n' = last (targetnodes [])\n 2. \\<And>V a as' n'' as''.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -as''\\<rightarrow>\\<^sub>d* n';\n        a # as' @ as'' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> n' = last (targetnodes (a # as' @ as''))\n 3. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        as \\<noteq> [] \\<Longrightarrow> n' = last (targetnodes as);\n        V' \\<in> Use (sourcenode a); n' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'));\n        a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> n' = last (targetnodes (a # as))\n 4. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        as \\<noteq> [] \\<Longrightarrow> n' = last (targetnodes as);\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> n' = last (targetnodes (a # as))", "case (dep_vars_Cons_cdep V a as' n'' as'')"], ["proof (state)\nthis:\n  V \\<in> Use (sourcenode a)\n  sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n''\n  n'' -as''\\<rightarrow>\\<^sub>d* n'\n  a # as' @ as'' \\<noteq> []\n\ngoal (4 subgoals):\n 1. \\<And>V.\n       \\<lbrakk>V \\<in> Use n'; [] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> n' = last (targetnodes [])\n 2. \\<And>V a as' n'' as''.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -as''\\<rightarrow>\\<^sub>d* n';\n        a # as' @ as'' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> n' = last (targetnodes (a # as' @ as''))\n 3. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        as \\<noteq> [] \\<Longrightarrow> n' = last (targetnodes as);\n        V' \\<in> Use (sourcenode a); n' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'));\n        a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> n' = last (targetnodes (a # as))\n 4. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        as \\<noteq> [] \\<Longrightarrow> n' = last (targetnodes as);\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> n' = last (targetnodes (a # as))", "from \\<open>sourcenode a -a#as'\\<rightarrow>\\<^sub>c\\<^sub>d n''\\<close>"], ["proof (chain)\npicking this:\n  sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n''", "have \"sourcenode a -a#as'\\<rightarrow>* n''\""], ["proof (prove)\nusing this:\n  sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n''\n\ngoal (1 subgoal):\n 1. sourcenode a -a # as'\\<rightarrow>* n''", "by(rule DynPDG_cdep_edge_CFG_path(1))"], ["proof (state)\nthis:\n  sourcenode a -a # as'\\<rightarrow>* n''\n\ngoal (4 subgoals):\n 1. \\<And>V.\n       \\<lbrakk>V \\<in> Use n'; [] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> n' = last (targetnodes [])\n 2. \\<And>V a as' n'' as''.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -as''\\<rightarrow>\\<^sub>d* n';\n        a # as' @ as'' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> n' = last (targetnodes (a # as' @ as''))\n 3. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        as \\<noteq> [] \\<Longrightarrow> n' = last (targetnodes as);\n        V' \\<in> Use (sourcenode a); n' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'));\n        a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> n' = last (targetnodes (a # as))\n 4. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        as \\<noteq> [] \\<Longrightarrow> n' = last (targetnodes as);\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> n' = last (targetnodes (a # as))", "from \\<open>n'' -as''\\<rightarrow>\\<^sub>d* n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -as''\\<rightarrow>\\<^sub>d* n'", "have \"n'' -as''\\<rightarrow>* n'\""], ["proof (prove)\nusing this:\n  n'' -as''\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. n'' -as''\\<rightarrow>* n'", "by(rule DynPDG_path_CFG_path)"], ["proof (state)\nthis:\n  n'' -as''\\<rightarrow>* n'\n\ngoal (4 subgoals):\n 1. \\<And>V.\n       \\<lbrakk>V \\<in> Use n'; [] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> n' = last (targetnodes [])\n 2. \\<And>V a as' n'' as''.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -as''\\<rightarrow>\\<^sub>d* n';\n        a # as' @ as'' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> n' = last (targetnodes (a # as' @ as''))\n 3. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        as \\<noteq> [] \\<Longrightarrow> n' = last (targetnodes as);\n        V' \\<in> Use (sourcenode a); n' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'));\n        a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> n' = last (targetnodes (a # as))\n 4. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        as \\<noteq> [] \\<Longrightarrow> n' = last (targetnodes as);\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> n' = last (targetnodes (a # as))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. n' = last (targetnodes (a # as' @ as''))", "proof(cases \"as'' = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. as'' = [] \\<Longrightarrow> n' = last (targetnodes (a # as' @ as''))\n 2. as'' \\<noteq> [] \\<Longrightarrow>\n    n' = last (targetnodes (a # as' @ as''))", "case True"], ["proof (state)\nthis:\n  as'' = []\n\ngoal (2 subgoals):\n 1. as'' = [] \\<Longrightarrow> n' = last (targetnodes (a # as' @ as''))\n 2. as'' \\<noteq> [] \\<Longrightarrow>\n    n' = last (targetnodes (a # as' @ as''))", "with \\<open>n'' -as''\\<rightarrow>* n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -as''\\<rightarrow>* n'\n  as'' = []", "have \"n'' = n'\""], ["proof (prove)\nusing this:\n  n'' -as''\\<rightarrow>* n'\n  as'' = []\n\ngoal (1 subgoal):\n 1. n'' = n'", "by (auto elim: DynPDG.dependent_live_vars.cases)"], ["proof (state)\nthis:\n  n'' = n'\n\ngoal (2 subgoals):\n 1. as'' = [] \\<Longrightarrow> n' = last (targetnodes (a # as' @ as''))\n 2. as'' \\<noteq> [] \\<Longrightarrow>\n    n' = last (targetnodes (a # as' @ as''))", "with \\<open>sourcenode a -a#as'\\<rightarrow>* n''\\<close> True"], ["proof (chain)\npicking this:\n  sourcenode a -a # as'\\<rightarrow>* n''\n  as'' = []\n  n'' = n'", "show ?thesis"], ["proof (prove)\nusing this:\n  sourcenode a -a # as'\\<rightarrow>* n''\n  as'' = []\n  n'' = n'\n\ngoal (1 subgoal):\n 1. n' = last (targetnodes (a # as' @ as''))", "by(fastforce intro:path_targetnode[THEN sym])"], ["proof (state)\nthis:\n  n' = last (targetnodes (a # as' @ as''))\n\ngoal (1 subgoal):\n 1. as'' \\<noteq> [] \\<Longrightarrow>\n    n' = last (targetnodes (a # as' @ as''))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. as'' \\<noteq> [] \\<Longrightarrow>\n    n' = last (targetnodes (a # as' @ as''))", "case False"], ["proof (state)\nthis:\n  as'' \\<noteq> []\n\ngoal (1 subgoal):\n 1. as'' \\<noteq> [] \\<Longrightarrow>\n    n' = last (targetnodes (a # as' @ as''))", "with \\<open>n'' -as''\\<rightarrow>* n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -as''\\<rightarrow>* n'\n  as'' \\<noteq> []", "have \"n' = last(targetnodes as'')\""], ["proof (prove)\nusing this:\n  n'' -as''\\<rightarrow>* n'\n  as'' \\<noteq> []\n\ngoal (1 subgoal):\n 1. n' = last (targetnodes as'')", "by(fastforce intro:path_targetnode[THEN sym])"], ["proof (state)\nthis:\n  n' = last (targetnodes as'')\n\ngoal (1 subgoal):\n 1. as'' \\<noteq> [] \\<Longrightarrow>\n    n' = last (targetnodes (a # as' @ as''))", "with False"], ["proof (chain)\npicking this:\n  as'' \\<noteq> []\n  n' = last (targetnodes as'')", "show ?thesis"], ["proof (prove)\nusing this:\n  as'' \\<noteq> []\n  n' = last (targetnodes as'')\n\ngoal (1 subgoal):\n 1. n' = last (targetnodes (a # as' @ as''))", "by(fastforce simp:targetnodes_def)"], ["proof (state)\nthis:\n  n' = last (targetnodes (a # as' @ as''))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n' = last (targetnodes (a # as' @ as''))\n\ngoal (3 subgoals):\n 1. \\<And>V.\n       \\<lbrakk>V \\<in> Use n'; [] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> n' = last (targetnodes [])\n 2. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        as \\<noteq> [] \\<Longrightarrow> n' = last (targetnodes as);\n        V' \\<in> Use (sourcenode a); n' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'));\n        a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> n' = last (targetnodes (a # as))\n 3. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        as \\<noteq> [] \\<Longrightarrow> n' = last (targetnodes as);\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> n' = last (targetnodes (a # as))", "qed simp_all"], ["", "lemma dependent_live_vars_Use_cases:\n  \"\\<lbrakk>(V,as',as) \\<in> dependent_live_vars n'; n -as\\<rightarrow>* n'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>nx as''. as = as'@as'' \\<and> n -as'\\<rightarrow>* nx \\<and> nx -as''\\<rightarrow>\\<^sub>d* n' \\<and> V \\<in> Use nx \\<and> \n               (\\<forall>n'' \\<in> set (sourcenodes as'). V \\<notin> Def n'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n     n -as\\<rightarrow>* n'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>nx as''.\n                         as = as' @ as'' \\<and>\n                         n -as'\\<rightarrow>* nx \\<and>\n                         nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                         V \\<in> Use nx \\<and>\n                         (\\<forall>n''\\<in>set (sourcenodes as').\n                             V \\<notin> Def n'')", "proof(induct arbitrary:n rule:dependent_live_vars.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>V n.\n       \\<lbrakk>V \\<in> Use n'; n -[]\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            [] = [] @ as'' \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V \\<notin> Def n'')\n 2. \\<And>V a as' n'' as'' n.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -as''\\<rightarrow>\\<^sub>d* n';\n        n -a # as' @ as''\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''a.\n                            a # as' @ as'' = [] @ as''a \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''a\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V \\<notin> Def n'')\n 3. \\<And>V as' as V' a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        V' \\<in> Use (sourcenode a); n' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = [] @ as'' \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V' \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V' \\<notin> Def n'')\n 4. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "case (dep_vars_Use V)"], ["proof (state)\nthis:\n  V \\<in> Use n'\n  n -[]\\<rightarrow>* n'\n\ngoal (4 subgoals):\n 1. \\<And>V n.\n       \\<lbrakk>V \\<in> Use n'; n -[]\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            [] = [] @ as'' \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V \\<notin> Def n'')\n 2. \\<And>V a as' n'' as'' n.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -as''\\<rightarrow>\\<^sub>d* n';\n        n -a # as' @ as''\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''a.\n                            a # as' @ as'' = [] @ as''a \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''a\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V \\<notin> Def n'')\n 3. \\<And>V as' as V' a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        V' \\<in> Use (sourcenode a); n' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = [] @ as'' \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V' \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V' \\<notin> Def n'')\n 4. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "from \\<open>n -[]\\<rightarrow>* n'\\<close>"], ["proof (chain)\npicking this:\n  n -[]\\<rightarrow>* n'", "have \"valid_node n'\""], ["proof (prove)\nusing this:\n  n -[]\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. valid_node n'", "by(rule path_valid_node(2))"], ["proof (state)\nthis:\n  valid_node n'\n\ngoal (4 subgoals):\n 1. \\<And>V n.\n       \\<lbrakk>V \\<in> Use n'; n -[]\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            [] = [] @ as'' \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V \\<notin> Def n'')\n 2. \\<And>V a as' n'' as'' n.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -as''\\<rightarrow>\\<^sub>d* n';\n        n -a # as' @ as''\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''a.\n                            a # as' @ as'' = [] @ as''a \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''a\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V \\<notin> Def n'')\n 3. \\<And>V as' as V' a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        V' \\<in> Use (sourcenode a); n' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = [] @ as'' \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V' \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V' \\<notin> Def n'')\n 4. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "hence \"n' -[]\\<rightarrow>\\<^sub>d* n'\""], ["proof (prove)\nusing this:\n  valid_node n'\n\ngoal (1 subgoal):\n 1. n' -[]\\<rightarrow>\\<^sub>d* n'", "by(rule DynPDG_path_Nil)"], ["proof (state)\nthis:\n  n' -[]\\<rightarrow>\\<^sub>d* n'\n\ngoal (4 subgoals):\n 1. \\<And>V n.\n       \\<lbrakk>V \\<in> Use n'; n -[]\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            [] = [] @ as'' \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V \\<notin> Def n'')\n 2. \\<And>V a as' n'' as'' n.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -as''\\<rightarrow>\\<^sub>d* n';\n        n -a # as' @ as''\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''a.\n                            a # as' @ as'' = [] @ as''a \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''a\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V \\<notin> Def n'')\n 3. \\<And>V as' as V' a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        V' \\<in> Use (sourcenode a); n' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = [] @ as'' \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V' \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V' \\<notin> Def n'')\n 4. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "with \\<open>V \\<in> Use n'\\<close> \\<open>n -[]\\<rightarrow>* n'\\<close>"], ["proof (chain)\npicking this:\n  V \\<in> Use n'\n  n -[]\\<rightarrow>* n'\n  n' -[]\\<rightarrow>\\<^sub>d* n'", "show ?case"], ["proof (prove)\nusing this:\n  V \\<in> Use n'\n  n -[]\\<rightarrow>* n'\n  n' -[]\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. \\<exists>nx as''.\n       [] = [] @ as'' \\<and>\n       n -[]\\<rightarrow>* nx \\<and>\n       nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n       V \\<in> Use nx \\<and>\n       (\\<forall>n''\\<in>set (sourcenodes []). V \\<notin> Def n'')", "by(auto simp:sourcenodes_def)"], ["proof (state)\nthis:\n  \\<exists>nx as''.\n     [] = [] @ as'' \\<and>\n     n -[]\\<rightarrow>* nx \\<and>\n     nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n     V \\<in> Use nx \\<and>\n     (\\<forall>n''\\<in>set (sourcenodes []). V \\<notin> Def n'')\n\ngoal (3 subgoals):\n 1. \\<And>V a as' n'' as'' n.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -as''\\<rightarrow>\\<^sub>d* n';\n        n -a # as' @ as''\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''a.\n                            a # as' @ as'' = [] @ as''a \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''a\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V \\<notin> Def n'')\n 2. \\<And>V as' as V' a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        V' \\<in> Use (sourcenode a); n' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = [] @ as'' \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V' \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V' \\<notin> Def n'')\n 3. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>V a as' n'' as'' n.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -as''\\<rightarrow>\\<^sub>d* n';\n        n -a # as' @ as''\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''a.\n                            a # as' @ as'' = [] @ as''a \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''a\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V \\<notin> Def n'')\n 2. \\<And>V as' as V' a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        V' \\<in> Use (sourcenode a); n' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = [] @ as'' \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V' \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V' \\<notin> Def n'')\n 3. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "case (dep_vars_Cons_cdep V a as' n'' as'' n)"], ["proof (state)\nthis:\n  V \\<in> Use (sourcenode a)\n  sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n''\n  n'' -as''\\<rightarrow>\\<^sub>d* n'\n  n -a # as' @ as''\\<rightarrow>* n'\n\ngoal (3 subgoals):\n 1. \\<And>V a as' n'' as'' n.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -as''\\<rightarrow>\\<^sub>d* n';\n        n -a # as' @ as''\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''a.\n                            a # as' @ as'' = [] @ as''a \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''a\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V \\<notin> Def n'')\n 2. \\<And>V as' as V' a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        V' \\<in> Use (sourcenode a); n' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = [] @ as'' \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V' \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V' \\<notin> Def n'')\n 3. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "from \\<open>n -a#as'@as''\\<rightarrow>* n'\\<close>"], ["proof (chain)\npicking this:\n  n -a # as' @ as''\\<rightarrow>* n'", "have \"sourcenode a = n\""], ["proof (prove)\nusing this:\n  n -a # as' @ as''\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. sourcenode a = n", "by(auto elim:path.cases)"], ["proof (state)\nthis:\n  sourcenode a = n\n\ngoal (3 subgoals):\n 1. \\<And>V a as' n'' as'' n.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -as''\\<rightarrow>\\<^sub>d* n';\n        n -a # as' @ as''\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''a.\n                            a # as' @ as'' = [] @ as''a \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''a\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V \\<notin> Def n'')\n 2. \\<And>V as' as V' a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        V' \\<in> Use (sourcenode a); n' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = [] @ as'' \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V' \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V' \\<notin> Def n'')\n 3. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "from \\<open>sourcenode a -a#as'\\<rightarrow>\\<^sub>c\\<^sub>d n''\\<close>"], ["proof (chain)\npicking this:\n  sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n''", "have \"sourcenode a -a#as'\\<rightarrow>* n''\""], ["proof (prove)\nusing this:\n  sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n''\n\ngoal (1 subgoal):\n 1. sourcenode a -a # as'\\<rightarrow>* n''", "by(rule DynPDG_cdep_edge_CFG_path(1))"], ["proof (state)\nthis:\n  sourcenode a -a # as'\\<rightarrow>* n''\n\ngoal (3 subgoals):\n 1. \\<And>V a as' n'' as'' n.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -as''\\<rightarrow>\\<^sub>d* n';\n        n -a # as' @ as''\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''a.\n                            a # as' @ as'' = [] @ as''a \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''a\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V \\<notin> Def n'')\n 2. \\<And>V as' as V' a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        V' \\<in> Use (sourcenode a); n' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = [] @ as'' \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V' \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V' \\<notin> Def n'')\n 3. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "hence \"valid_edge a\""], ["proof (prove)\nusing this:\n  sourcenode a -a # as'\\<rightarrow>* n''\n\ngoal (1 subgoal):\n 1. valid_edge a", "by(auto elim:path.cases)"], ["proof (state)\nthis:\n  valid_edge a\n\ngoal (3 subgoals):\n 1. \\<And>V a as' n'' as'' n.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -as''\\<rightarrow>\\<^sub>d* n';\n        n -a # as' @ as''\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''a.\n                            a # as' @ as'' = [] @ as''a \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''a\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V \\<notin> Def n'')\n 2. \\<And>V as' as V' a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        V' \\<in> Use (sourcenode a); n' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = [] @ as'' \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V' \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V' \\<notin> Def n'')\n 3. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "hence \"sourcenode a -[]\\<rightarrow>* sourcenode a\""], ["proof (prove)\nusing this:\n  valid_edge a\n\ngoal (1 subgoal):\n 1. sourcenode a -[]\\<rightarrow>* sourcenode a", "by(fastforce intro:empty_path)"], ["proof (state)\nthis:\n  sourcenode a -[]\\<rightarrow>* sourcenode a\n\ngoal (3 subgoals):\n 1. \\<And>V a as' n'' as'' n.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -as''\\<rightarrow>\\<^sub>d* n';\n        n -a # as' @ as''\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''a.\n                            a # as' @ as'' = [] @ as''a \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''a\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V \\<notin> Def n'')\n 2. \\<And>V as' as V' a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        V' \\<in> Use (sourcenode a); n' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = [] @ as'' \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V' \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V' \\<notin> Def n'')\n 3. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "from \\<open>sourcenode a -a#as'\\<rightarrow>\\<^sub>c\\<^sub>d n''\\<close>"], ["proof (chain)\npicking this:\n  sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n''", "have \"sourcenode a -a#as'\\<rightarrow>\\<^sub>d* n''\""], ["proof (prove)\nusing this:\n  sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n''\n\ngoal (1 subgoal):\n 1. sourcenode a -a # as'\\<rightarrow>\\<^sub>d* n''", "by(rule DynPDG_path_cdep)"], ["proof (state)\nthis:\n  sourcenode a -a # as'\\<rightarrow>\\<^sub>d* n''\n\ngoal (3 subgoals):\n 1. \\<And>V a as' n'' as'' n.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -as''\\<rightarrow>\\<^sub>d* n';\n        n -a # as' @ as''\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''a.\n                            a # as' @ as'' = [] @ as''a \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''a\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V \\<notin> Def n'')\n 2. \\<And>V as' as V' a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        V' \\<in> Use (sourcenode a); n' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = [] @ as'' \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V' \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V' \\<notin> Def n'')\n 3. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "with \\<open>n'' -as''\\<rightarrow>\\<^sub>d* n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -as''\\<rightarrow>\\<^sub>d* n'\n  sourcenode a -a # as'\\<rightarrow>\\<^sub>d* n''", "have \"sourcenode a -(a#as')@as''\\<rightarrow>\\<^sub>d* n'\""], ["proof (prove)\nusing this:\n  n'' -as''\\<rightarrow>\\<^sub>d* n'\n  sourcenode a -a # as'\\<rightarrow>\\<^sub>d* n''\n\ngoal (1 subgoal):\n 1. sourcenode a -(a # as') @ as''\\<rightarrow>\\<^sub>d* n'", "by(rule DynPDG_path_Append)"], ["proof (state)\nthis:\n  sourcenode a -(a # as') @ as''\\<rightarrow>\\<^sub>d* n'\n\ngoal (3 subgoals):\n 1. \\<And>V a as' n'' as'' n.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n'';\n        n'' -as''\\<rightarrow>\\<^sub>d* n';\n        n -a # as' @ as''\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''a.\n                            a # as' @ as'' = [] @ as''a \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''a\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V \\<notin> Def n'')\n 2. \\<And>V as' as V' a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        V' \\<in> Use (sourcenode a); n' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = [] @ as'' \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V' \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V' \\<notin> Def n'')\n 3. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "with \\<open>sourcenode a -[]\\<rightarrow>* sourcenode a\\<close> \\<open>V \\<in> Use (sourcenode a)\\<close> \\<open>sourcenode a = n\\<close>"], ["proof (chain)\npicking this:\n  sourcenode a -[]\\<rightarrow>* sourcenode a\n  V \\<in> Use (sourcenode a)\n  sourcenode a = n\n  sourcenode a -(a # as') @ as''\\<rightarrow>\\<^sub>d* n'", "show ?case"], ["proof (prove)\nusing this:\n  sourcenode a -[]\\<rightarrow>* sourcenode a\n  V \\<in> Use (sourcenode a)\n  sourcenode a = n\n  sourcenode a -(a # as') @ as''\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. \\<exists>nx as''a.\n       a # as' @ as'' = [] @ as''a \\<and>\n       n -[]\\<rightarrow>* nx \\<and>\n       nx -as''a\\<rightarrow>\\<^sub>d* n' \\<and>\n       V \\<in> Use nx \\<and>\n       (\\<forall>n''\\<in>set (sourcenodes []). V \\<notin> Def n'')", "by(auto simp:sourcenodes_def)"], ["proof (state)\nthis:\n  \\<exists>nx as''a.\n     a # as' @ as'' = [] @ as''a \\<and>\n     n -[]\\<rightarrow>* nx \\<and>\n     nx -as''a\\<rightarrow>\\<^sub>d* n' \\<and>\n     V \\<in> Use nx \\<and>\n     (\\<forall>n''\\<in>set (sourcenodes []). V \\<notin> Def n'')\n\ngoal (2 subgoals):\n 1. \\<And>V as' as V' a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        V' \\<in> Use (sourcenode a); n' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = [] @ as'' \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V' \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V' \\<notin> Def n'')\n 2. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>V as' as V' a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        V' \\<in> Use (sourcenode a); n' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = [] @ as'' \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V' \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V' \\<notin> Def n'')\n 2. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "case(dep_vars_Cons_ddep V as' as V' a n)"], ["proof (state)\nthis:\n  (V, as', as) \\<in> dependent_live_vars n'\n  ?n -as\\<rightarrow>* n' \\<Longrightarrow>\n  \\<exists>nx as''.\n     as = as' @ as'' \\<and>\n     ?n -as'\\<rightarrow>* nx \\<and>\n     nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n     V \\<in> Use nx \\<and>\n     (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'')\n  V' \\<in> Use (sourcenode a)\n  n' = last (targetnodes (a # as))\n  sourcenode\n   a -{V}a # as'\\<rightarrow>\\<^sub>d\\<^sub>d last (targetnodes (a # as'))\n  n -a # as\\<rightarrow>* n'\n\ngoal (2 subgoals):\n 1. \\<And>V as' as V' a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        V' \\<in> Use (sourcenode a); n' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = [] @ as'' \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V' \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V' \\<notin> Def n'')\n 2. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "note ddep = \\<open>sourcenode a -{V}a#as'\\<rightarrow>\\<^sub>d\\<^sub>d last (targetnodes (a#as'))\\<close>"], ["proof (state)\nthis:\n  sourcenode\n   a -{V}a # as'\\<rightarrow>\\<^sub>d\\<^sub>d last (targetnodes (a # as'))\n\ngoal (2 subgoals):\n 1. \\<And>V as' as V' a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        V' \\<in> Use (sourcenode a); n' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = [] @ as'' \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V' \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V' \\<notin> Def n'')\n 2. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "note IH = \\<open>\\<And>n. n -as\\<rightarrow>* n'\n    \\<Longrightarrow> \\<exists>nx as''. as = as'@as'' \\<and> n -as'\\<rightarrow>* nx \\<and> nx -as''\\<rightarrow>\\<^sub>d* n' \\<and> \n                   V \\<in> Use nx \\<and> (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'')\\<close>"], ["proof (state)\nthis:\n  ?n -as\\<rightarrow>* n' \\<Longrightarrow>\n  \\<exists>nx as''.\n     as = as' @ as'' \\<and>\n     ?n -as'\\<rightarrow>* nx \\<and>\n     nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n     V \\<in> Use nx \\<and>\n     (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'')\n\ngoal (2 subgoals):\n 1. \\<And>V as' as V' a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        V' \\<in> Use (sourcenode a); n' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = [] @ as'' \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V' \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V' \\<notin> Def n'')\n 2. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "from \\<open>n -a#as\\<rightarrow>* n'\\<close>"], ["proof (chain)\npicking this:\n  n -a # as\\<rightarrow>* n'", "have \"n -[]@a#as\\<rightarrow>* n'\""], ["proof (prove)\nusing this:\n  n -a # as\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. n -[] @ a # as\\<rightarrow>* n'", "by simp"], ["proof (state)\nthis:\n  n -[] @ a # as\\<rightarrow>* n'\n\ngoal (2 subgoals):\n 1. \\<And>V as' as V' a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        V' \\<in> Use (sourcenode a); n' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = [] @ as'' \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V' \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V' \\<notin> Def n'')\n 2. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "hence \"n = sourcenode a\" and \"targetnode a -as\\<rightarrow>* n'\" and \"valid_edge a\""], ["proof (prove)\nusing this:\n  n -[] @ a # as\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. n = sourcenode a &&& targetnode a -as\\<rightarrow>* n' &&& valid_edge a", "by(fastforce dest:path_split)+"], ["proof (state)\nthis:\n  n = sourcenode a\n  targetnode a -as\\<rightarrow>* n'\n  valid_edge a\n\ngoal (2 subgoals):\n 1. \\<And>V as' as V' a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        V' \\<in> Use (sourcenode a); n' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = [] @ as'' \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V' \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V' \\<notin> Def n'')\n 2. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "hence \"n -[]\\<rightarrow>* n\""], ["proof (prove)\nusing this:\n  n = sourcenode a\n  targetnode a -as\\<rightarrow>* n'\n  valid_edge a\n\ngoal (1 subgoal):\n 1. n -[]\\<rightarrow>* n", "by(fastforce intro:empty_path simp:valid_node_def)"], ["proof (state)\nthis:\n  n -[]\\<rightarrow>* n\n\ngoal (2 subgoals):\n 1. \\<And>V as' as V' a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        V' \\<in> Use (sourcenode a); n' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = [] @ as'' \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V' \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V' \\<notin> Def n'')\n 2. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "from IH[OF \\<open>targetnode a -as\\<rightarrow>* n'\\<close>]"], ["proof (chain)\npicking this:\n  \\<exists>nx as''.\n     as = as' @ as'' \\<and>\n     targetnode a -as'\\<rightarrow>* nx \\<and>\n     nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n     V \\<in> Use nx \\<and>\n     (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'')", "have \"\\<exists>nx as''. as = as'@as'' \\<and> targetnode a -as'\\<rightarrow>* nx \\<and> nx -as''\\<rightarrow>\\<^sub>d* n' \\<and> \n                  V \\<in> Use nx \\<and> (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'')\""], ["proof (prove)\nusing this:\n  \\<exists>nx as''.\n     as = as' @ as'' \\<and>\n     targetnode a -as'\\<rightarrow>* nx \\<and>\n     nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n     V \\<in> Use nx \\<and>\n     (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'')\n\ngoal (1 subgoal):\n 1. \\<exists>nx as''.\n       as = as' @ as'' \\<and>\n       targetnode a -as'\\<rightarrow>* nx \\<and>\n       nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n       V \\<in> Use nx \\<and>\n       (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'')", "."], ["proof (state)\nthis:\n  \\<exists>nx as''.\n     as = as' @ as'' \\<and>\n     targetnode a -as'\\<rightarrow>* nx \\<and>\n     nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n     V \\<in> Use nx \\<and>\n     (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'')\n\ngoal (2 subgoals):\n 1. \\<And>V as' as V' a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        V' \\<in> Use (sourcenode a); n' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = [] @ as'' \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V' \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V' \\<notin> Def n'')\n 2. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "then"], ["proof (chain)\npicking this:\n  \\<exists>nx as''.\n     as = as' @ as'' \\<and>\n     targetnode a -as'\\<rightarrow>* nx \\<and>\n     nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n     V \\<in> Use nx \\<and>\n     (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'')", "obtain nx'' as'' where \"targetnode a -as'\\<rightarrow>* nx''\"\n    and \"nx'' -as''\\<rightarrow>\\<^sub>d* n'\" and \"as = as'@as''\""], ["proof (prove)\nusing this:\n  \\<exists>nx as''.\n     as = as' @ as'' \\<and>\n     targetnode a -as'\\<rightarrow>* nx \\<and>\n     nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n     V \\<in> Use nx \\<and>\n     (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'')\n\ngoal (1 subgoal):\n 1. (\\<And>nx'' as''.\n        \\<lbrakk>targetnode a -as'\\<rightarrow>* nx'';\n         nx'' -as''\\<rightarrow>\\<^sub>d* n'; as = as' @ as''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  targetnode a -as'\\<rightarrow>* nx''\n  nx'' -as''\\<rightarrow>\\<^sub>d* n'\n  as = as' @ as''\n\ngoal (2 subgoals):\n 1. \\<And>V as' as V' a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        V' \\<in> Use (sourcenode a); n' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = [] @ as'' \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V' \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V' \\<notin> Def n'')\n 2. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "have \"last (targetnodes (a#as')) -as''\\<rightarrow>\\<^sub>d* n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last (targetnodes (a # as')) -as''\\<rightarrow>\\<^sub>d* n'", "proof(cases as')"], ["proof (state)\ngoal (2 subgoals):\n 1. as' = [] \\<Longrightarrow>\n    last (targetnodes (a # as')) -as''\\<rightarrow>\\<^sub>d* n'\n 2. \\<And>aa list.\n       as' = aa # list \\<Longrightarrow>\n       last (targetnodes (a # as')) -as''\\<rightarrow>\\<^sub>d* n'", "case Nil"], ["proof (state)\nthis:\n  as' = []\n\ngoal (2 subgoals):\n 1. as' = [] \\<Longrightarrow>\n    last (targetnodes (a # as')) -as''\\<rightarrow>\\<^sub>d* n'\n 2. \\<And>aa list.\n       as' = aa # list \\<Longrightarrow>\n       last (targetnodes (a # as')) -as''\\<rightarrow>\\<^sub>d* n'", "with \\<open>targetnode a -as'\\<rightarrow>* nx''\\<close>"], ["proof (chain)\npicking this:\n  targetnode a -as'\\<rightarrow>* nx''\n  as' = []", "have \"nx'' = targetnode a\""], ["proof (prove)\nusing this:\n  targetnode a -as'\\<rightarrow>* nx''\n  as' = []\n\ngoal (1 subgoal):\n 1. nx'' = targetnode a", "by(auto elim:path.cases)"], ["proof (state)\nthis:\n  nx'' = targetnode a\n\ngoal (2 subgoals):\n 1. as' = [] \\<Longrightarrow>\n    last (targetnodes (a # as')) -as''\\<rightarrow>\\<^sub>d* n'\n 2. \\<And>aa list.\n       as' = aa # list \\<Longrightarrow>\n       last (targetnodes (a # as')) -as''\\<rightarrow>\\<^sub>d* n'", "with \\<open>nx'' -as''\\<rightarrow>\\<^sub>d* n'\\<close> Nil"], ["proof (chain)\npicking this:\n  nx'' -as''\\<rightarrow>\\<^sub>d* n'\n  as' = []\n  nx'' = targetnode a", "show ?thesis"], ["proof (prove)\nusing this:\n  nx'' -as''\\<rightarrow>\\<^sub>d* n'\n  as' = []\n  nx'' = targetnode a\n\ngoal (1 subgoal):\n 1. last (targetnodes (a # as')) -as''\\<rightarrow>\\<^sub>d* n'", "by(simp add:targetnodes_def)"], ["proof (state)\nthis:\n  last (targetnodes (a # as')) -as''\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       as' = aa # list \\<Longrightarrow>\n       last (targetnodes (a # as')) -as''\\<rightarrow>\\<^sub>d* n'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       as' = aa # list \\<Longrightarrow>\n       last (targetnodes (a # as')) -as''\\<rightarrow>\\<^sub>d* n'", "case (Cons ax asx)"], ["proof (state)\nthis:\n  as' = ax # asx\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       as' = aa # list \\<Longrightarrow>\n       last (targetnodes (a # as')) -as''\\<rightarrow>\\<^sub>d* n'", "hence \"last (targetnodes (a#as')) = last (targetnodes as')\""], ["proof (prove)\nusing this:\n  as' = ax # asx\n\ngoal (1 subgoal):\n 1. last (targetnodes (a # as')) = last (targetnodes as')", "by(simp add:targetnodes_def)"], ["proof (state)\nthis:\n  last (targetnodes (a # as')) = last (targetnodes as')\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       as' = aa # list \\<Longrightarrow>\n       last (targetnodes (a # as')) -as''\\<rightarrow>\\<^sub>d* n'", "from Cons \\<open>targetnode a -as'\\<rightarrow>* nx''\\<close>"], ["proof (chain)\npicking this:\n  as' = ax # asx\n  targetnode a -as'\\<rightarrow>* nx''", "have \"last (targetnodes as') = nx''\""], ["proof (prove)\nusing this:\n  as' = ax # asx\n  targetnode a -as'\\<rightarrow>* nx''\n\ngoal (1 subgoal):\n 1. last (targetnodes as') = nx''", "by(fastforce intro:path_targetnode)"], ["proof (state)\nthis:\n  last (targetnodes as') = nx''\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       as' = aa # list \\<Longrightarrow>\n       last (targetnodes (a # as')) -as''\\<rightarrow>\\<^sub>d* n'", "with \\<open>last (targetnodes (a#as')) = last (targetnodes as')\\<close> \\<open>nx'' -as''\\<rightarrow>\\<^sub>d* n'\\<close>"], ["proof (chain)\npicking this:\n  last (targetnodes (a # as')) = last (targetnodes as')\n  nx'' -as''\\<rightarrow>\\<^sub>d* n'\n  last (targetnodes as') = nx''", "show ?thesis"], ["proof (prove)\nusing this:\n  last (targetnodes (a # as')) = last (targetnodes as')\n  nx'' -as''\\<rightarrow>\\<^sub>d* n'\n  last (targetnodes as') = nx''\n\ngoal (1 subgoal):\n 1. last (targetnodes (a # as')) -as''\\<rightarrow>\\<^sub>d* n'", "by simp"], ["proof (state)\nthis:\n  last (targetnodes (a # as')) -as''\\<rightarrow>\\<^sub>d* n'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  last (targetnodes (a # as')) -as''\\<rightarrow>\\<^sub>d* n'\n\ngoal (2 subgoals):\n 1. \\<And>V as' as V' a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        V' \\<in> Use (sourcenode a); n' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = [] @ as'' \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V' \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V' \\<notin> Def n'')\n 2. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "with ddep \\<open>as = as'@as''\\<close>"], ["proof (chain)\npicking this:\n  sourcenode\n   a -{V}a # as'\\<rightarrow>\\<^sub>d\\<^sub>d last (targetnodes (a # as'))\n  as = as' @ as''\n  last (targetnodes (a # as')) -as''\\<rightarrow>\\<^sub>d* n'", "have \"sourcenode a -a#as\\<rightarrow>\\<^sub>d* n'\""], ["proof (prove)\nusing this:\n  sourcenode\n   a -{V}a # as'\\<rightarrow>\\<^sub>d\\<^sub>d last (targetnodes (a # as'))\n  as = as' @ as''\n  last (targetnodes (a # as')) -as''\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. sourcenode a -a # as\\<rightarrow>\\<^sub>d* n'", "by(fastforce dest:DynPDG_path_ddep DynPDG_path_Append)"], ["proof (state)\nthis:\n  sourcenode a -a # as\\<rightarrow>\\<^sub>d* n'\n\ngoal (2 subgoals):\n 1. \\<And>V as' as V' a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        V' \\<in> Use (sourcenode a); n' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = [] @ as'' \\<and>\n                            n -[]\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V' \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes []).\n                                V' \\<notin> Def n'')\n 2. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "with \\<open>V' \\<in> Use (sourcenode a)\\<close> \\<open>n = sourcenode a\\<close> \\<open>n -[]\\<rightarrow>* n\\<close>"], ["proof (chain)\npicking this:\n  V' \\<in> Use (sourcenode a)\n  n = sourcenode a\n  n -[]\\<rightarrow>* n\n  sourcenode a -a # as\\<rightarrow>\\<^sub>d* n'", "show ?case"], ["proof (prove)\nusing this:\n  V' \\<in> Use (sourcenode a)\n  n = sourcenode a\n  n -[]\\<rightarrow>* n\n  sourcenode a -a # as\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. \\<exists>nx as''.\n       a # as = [] @ as'' \\<and>\n       n -[]\\<rightarrow>* nx \\<and>\n       nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n       V' \\<in> Use nx \\<and>\n       (\\<forall>n''\\<in>set (sourcenodes []). V' \\<notin> Def n'')", "by(auto simp:sourcenodes_def)"], ["proof (state)\nthis:\n  \\<exists>nx as''.\n     a # as = [] @ as'' \\<and>\n     n -[]\\<rightarrow>* nx \\<and>\n     nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n     V' \\<in> Use nx \\<and>\n     (\\<forall>n''\\<in>set (sourcenodes []). V' \\<notin> Def n'')\n\ngoal (1 subgoal):\n 1. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "case (dep_vars_Cons_keep V as' as a n)"], ["proof (state)\nthis:\n  (V, as', as) \\<in> dependent_live_vars n'\n  ?n -as\\<rightarrow>* n' \\<Longrightarrow>\n  \\<exists>nx as''.\n     as = as' @ as'' \\<and>\n     ?n -as'\\<rightarrow>* nx \\<and>\n     nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n     V \\<in> Use nx \\<and>\n     (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'')\n  n' = last (targetnodes (a # as))\n  \\<not> sourcenode\n          a -{V}a #\n                as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n            (targetnodes (a # as'))\n  n -a # as\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "note no_dep = \\<open>\\<not> sourcenode a -{V}a#as'\\<rightarrow>\\<^sub>d\\<^sub>d last (targetnodes (a#as'))\\<close>"], ["proof (state)\nthis:\n  \\<not> sourcenode\n          a -{V}a #\n                as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n            (targetnodes (a # as'))\n\ngoal (1 subgoal):\n 1. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "note IH = \\<open>\\<And>n. n -as\\<rightarrow>* n'\n    \\<Longrightarrow> \\<exists>nx as''. (as = as'@as'') \\<and> (n -as'\\<rightarrow>* nx) \\<and> (nx -as''\\<rightarrow>\\<^sub>d* n') \\<and> \n                   V \\<in> Use nx \\<and> (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'')\\<close>"], ["proof (state)\nthis:\n  ?n -as\\<rightarrow>* n' \\<Longrightarrow>\n  \\<exists>nx as''.\n     as = as' @ as'' \\<and>\n     ?n -as'\\<rightarrow>* nx \\<and>\n     nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n     V \\<in> Use nx \\<and>\n     (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'')\n\ngoal (1 subgoal):\n 1. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "from \\<open>n -a#as\\<rightarrow>* n'\\<close>"], ["proof (chain)\npicking this:\n  n -a # as\\<rightarrow>* n'", "have \"n = sourcenode a\" and \"valid_edge a\"\n    and \"targetnode a -as\\<rightarrow>* n'\""], ["proof (prove)\nusing this:\n  n -a # as\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. n = sourcenode a &&& valid_edge a &&& targetnode a -as\\<rightarrow>* n'", "by(auto elim:path_split_Cons)"], ["proof (state)\nthis:\n  n = sourcenode a\n  valid_edge a\n  targetnode a -as\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "from IH[OF \\<open>targetnode a -as\\<rightarrow>* n'\\<close>]"], ["proof (chain)\npicking this:\n  \\<exists>nx as''.\n     as = as' @ as'' \\<and>\n     targetnode a -as'\\<rightarrow>* nx \\<and>\n     nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n     V \\<in> Use nx \\<and>\n     (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'')", "have \"\\<exists>nx as''. as = as'@as'' \\<and> targetnode a -as'\\<rightarrow>* nx \\<and> nx -as''\\<rightarrow>\\<^sub>d* n' \\<and> \n               V \\<in> Use nx \\<and> (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'')\""], ["proof (prove)\nusing this:\n  \\<exists>nx as''.\n     as = as' @ as'' \\<and>\n     targetnode a -as'\\<rightarrow>* nx \\<and>\n     nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n     V \\<in> Use nx \\<and>\n     (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'')\n\ngoal (1 subgoal):\n 1. \\<exists>nx as''.\n       as = as' @ as'' \\<and>\n       targetnode a -as'\\<rightarrow>* nx \\<and>\n       nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n       V \\<in> Use nx \\<and>\n       (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'')", "."], ["proof (state)\nthis:\n  \\<exists>nx as''.\n     as = as' @ as'' \\<and>\n     targetnode a -as'\\<rightarrow>* nx \\<and>\n     nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n     V \\<in> Use nx \\<and>\n     (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'')\n\ngoal (1 subgoal):\n 1. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "then"], ["proof (chain)\npicking this:\n  \\<exists>nx as''.\n     as = as' @ as'' \\<and>\n     targetnode a -as'\\<rightarrow>* nx \\<and>\n     nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n     V \\<in> Use nx \\<and>\n     (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'')", "obtain nx'' as'' where \"V \\<in> Use nx''\"\n    and \"\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n''\" and \"targetnode a -as'\\<rightarrow>* nx''\"\n    and \"nx'' -as''\\<rightarrow>\\<^sub>d* n'\" and \"as = as'@as''\""], ["proof (prove)\nusing this:\n  \\<exists>nx as''.\n     as = as' @ as'' \\<and>\n     targetnode a -as'\\<rightarrow>* nx \\<and>\n     nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n     V \\<in> Use nx \\<and>\n     (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'')\n\ngoal (1 subgoal):\n 1. (\\<And>nx'' as''.\n        \\<lbrakk>V \\<in> Use nx'';\n         \\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'';\n         targetnode a -as'\\<rightarrow>* nx'';\n         nx'' -as''\\<rightarrow>\\<^sub>d* n'; as = as' @ as''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  V \\<in> Use nx''\n  \\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n''\n  targetnode a -as'\\<rightarrow>* nx''\n  nx'' -as''\\<rightarrow>\\<^sub>d* n'\n  as = as' @ as''\n\ngoal (1 subgoal):\n 1. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "from \\<open>valid_edge a\\<close> \\<open>targetnode a -as'\\<rightarrow>* nx''\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a\n  targetnode a -as'\\<rightarrow>* nx''", "have \"sourcenode a -a#as'\\<rightarrow>* nx''\""], ["proof (prove)\nusing this:\n  valid_edge a\n  targetnode a -as'\\<rightarrow>* nx''\n\ngoal (1 subgoal):\n 1. sourcenode a -a # as'\\<rightarrow>* nx''", "by(fastforce intro:Cons_path)"], ["proof (state)\nthis:\n  sourcenode a -a # as'\\<rightarrow>* nx''\n\ngoal (1 subgoal):\n 1. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "hence \"last(targetnodes (a#as')) = nx''\""], ["proof (prove)\nusing this:\n  sourcenode a -a # as'\\<rightarrow>* nx''\n\ngoal (1 subgoal):\n 1. last (targetnodes (a # as')) = nx''", "by(fastforce dest:path_targetnode)"], ["proof (state)\nthis:\n  last (targetnodes (a # as')) = nx''\n\ngoal (1 subgoal):\n 1. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "{"], ["proof (state)\nthis:\n  last (targetnodes (a # as')) = nx''\n\ngoal (1 subgoal):\n 1. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "assume \"V \\<in> Def (sourcenode a)\""], ["proof (state)\nthis:\n  V \\<in> Def (sourcenode a)\n\ngoal (1 subgoal):\n 1. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "with \\<open>V \\<in> Use nx''\\<close> \\<open>sourcenode a -a#as'\\<rightarrow>* nx''\\<close>\n      \\<open>\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n''\\<close>"], ["proof (chain)\npicking this:\n  V \\<in> Use nx''\n  sourcenode a -a # as'\\<rightarrow>* nx''\n  \\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n''\n  V \\<in> Def (sourcenode a)", "have \"(sourcenode a) influences V in nx'' via a#as'\""], ["proof (prove)\nusing this:\n  V \\<in> Use nx''\n  sourcenode a -a # as'\\<rightarrow>* nx''\n  \\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n''\n  V \\<in> Def (sourcenode a)\n\ngoal (1 subgoal):\n 1. sourcenode a influences V in nx'' via a # as'", "by(simp add:dyn_data_dependence_def sourcenodes_def)"], ["proof (state)\nthis:\n  sourcenode a influences V in nx'' via a # as'\n\ngoal (1 subgoal):\n 1. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "with no_dep \\<open>last(targetnodes (a#as')) = nx''\\<close>\n      \\<open>\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n''\\<close> \\<open>V \\<in> Def (sourcenode a)\\<close>"], ["proof (chain)\npicking this:\n  \\<not> sourcenode\n          a -{V}a #\n                as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n            (targetnodes (a # as'))\n  last (targetnodes (a # as')) = nx''\n  \\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n''\n  V \\<in> Def (sourcenode a)\n  sourcenode a influences V in nx'' via a # as'", "have False"], ["proof (prove)\nusing this:\n  \\<not> sourcenode\n          a -{V}a #\n                as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n            (targetnodes (a # as'))\n  last (targetnodes (a # as')) = nx''\n  \\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n''\n  V \\<in> Def (sourcenode a)\n  sourcenode a influences V in nx'' via a # as'\n\ngoal (1 subgoal):\n 1. False", "by(fastforce dest:DynPDG_ddep_edge)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "}"], ["proof (state)\nthis:\n  V \\<in> Def (sourcenode a) \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "with \\<open>\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n''\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n''\n  V \\<in> Def (sourcenode a) \\<Longrightarrow> False", "have \"\\<forall>n''\\<in>set (sourcenodes (a#as')). V \\<notin> Def n''\""], ["proof (prove)\nusing this:\n  \\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n''\n  V \\<in> Def (sourcenode a) \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<forall>n''\\<in>set (sourcenodes (a # as')). V \\<notin> Def n''", "by(fastforce simp:sourcenodes_def)"], ["proof (state)\nthis:\n  \\<forall>n''\\<in>set (sourcenodes (a # as')). V \\<notin> Def n''\n\ngoal (1 subgoal):\n 1. \\<And>V as' as a n.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n';\n        \\<And>n.\n           n -as\\<rightarrow>* n' \\<Longrightarrow>\n           \\<exists>nx as''.\n              as = as' @ as'' \\<and>\n              n -as'\\<rightarrow>* nx \\<and>\n              nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n              V \\<in> Use nx \\<and>\n              (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'');\n        n' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'));\n        n -a # as\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx as''.\n                            a # as = (a # as') @ as'' \\<and>\n                            n -a # as'\\<rightarrow>* nx \\<and>\n                            nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n                            V \\<in> Use nx \\<and>\n                            (\\<forall>n''\\<in>set (sourcenodes (a # as')).\n                                V \\<notin> Def n'')", "with \\<open>V \\<in> Use nx''\\<close> \\<open>sourcenode a -a#as'\\<rightarrow>* nx''\\<close> \\<open>nx'' -as''\\<rightarrow>\\<^sub>d* n'\\<close>\n    \\<open>as = as'@as''\\<close> \\<open>n = sourcenode a\\<close>"], ["proof (chain)\npicking this:\n  V \\<in> Use nx''\n  sourcenode a -a # as'\\<rightarrow>* nx''\n  nx'' -as''\\<rightarrow>\\<^sub>d* n'\n  as = as' @ as''\n  n = sourcenode a\n  \\<forall>n''\\<in>set (sourcenodes (a # as')). V \\<notin> Def n''", "show ?case"], ["proof (prove)\nusing this:\n  V \\<in> Use nx''\n  sourcenode a -a # as'\\<rightarrow>* nx''\n  nx'' -as''\\<rightarrow>\\<^sub>d* n'\n  as = as' @ as''\n  n = sourcenode a\n  \\<forall>n''\\<in>set (sourcenodes (a # as')). V \\<notin> Def n''\n\ngoal (1 subgoal):\n 1. \\<exists>nx as''.\n       a # as = (a # as') @ as'' \\<and>\n       n -a # as'\\<rightarrow>* nx \\<and>\n       nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n       V \\<in> Use nx \\<and>\n       (\\<forall>n''\\<in>set (sourcenodes (a # as')). V \\<notin> Def n'')", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>nx as''.\n     a # as = (a # as') @ as'' \\<and>\n     n -a # as'\\<rightarrow>* nx \\<and>\n     nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n     V \\<in> Use nx \\<and>\n     (\\<forall>n''\\<in>set (sourcenodes (a # as')). V \\<notin> Def n'')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dependent_live_vars_dependent_edge:\n  assumes \"(V,as',as) \\<in> dependent_live_vars n'\" \n  and \"targetnode a -as\\<rightarrow>* n'\"\n  and \"V \\<in> Def (sourcenode a)\" and \"valid_edge a\"\n  obtains nx as'' where \"as = as'@as''\" and \"sourcenode a -{V}a#as'\\<rightarrow>\\<^sub>d\\<^sub>d nx\"\n  and \"nx -as''\\<rightarrow>\\<^sub>d* n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as'' nx.\n        \\<lbrakk>as = as' @ as'';\n         sourcenode a -{V}a # as'\\<rightarrow>\\<^sub>d\\<^sub>d nx;\n         nx -as''\\<rightarrow>\\<^sub>d* n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(atomize_elim)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>as'' nx.\n       as = as' @ as'' \\<and>\n       sourcenode a -{V}a # as'\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -as''\\<rightarrow>\\<^sub>d* n'", "from \\<open>(V,as',as) \\<in> dependent_live_vars n'\\<close> \\<open>targetnode a -as\\<rightarrow>* n'\\<close>"], ["proof (chain)\npicking this:\n  (V, as', as) \\<in> dependent_live_vars n'\n  targetnode a -as\\<rightarrow>* n'", "have \"\\<exists>nx as''. as = as'@as'' \\<and> targetnode a -as'\\<rightarrow>* nx \\<and> nx -as''\\<rightarrow>\\<^sub>d* n' \\<and> \n    V \\<in> Use nx \\<and> (\\<forall>n'' \\<in> set (sourcenodes as'). V \\<notin> Def n'')\""], ["proof (prove)\nusing this:\n  (V, as', as) \\<in> dependent_live_vars n'\n  targetnode a -as\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. \\<exists>nx as''.\n       as = as' @ as'' \\<and>\n       targetnode a -as'\\<rightarrow>* nx \\<and>\n       nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n       V \\<in> Use nx \\<and>\n       (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'')", "by(rule dependent_live_vars_Use_cases)"], ["proof (state)\nthis:\n  \\<exists>nx as''.\n     as = as' @ as'' \\<and>\n     targetnode a -as'\\<rightarrow>* nx \\<and>\n     nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n     V \\<in> Use nx \\<and>\n     (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'')\n\ngoal (1 subgoal):\n 1. \\<exists>as'' nx.\n       as = as' @ as'' \\<and>\n       sourcenode a -{V}a # as'\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -as''\\<rightarrow>\\<^sub>d* n'", "then"], ["proof (chain)\npicking this:\n  \\<exists>nx as''.\n     as = as' @ as'' \\<and>\n     targetnode a -as'\\<rightarrow>* nx \\<and>\n     nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n     V \\<in> Use nx \\<and>\n     (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'')", "obtain nx as'' where \"V \\<in> Use nx\"\n    and \"\\<forall>n''\\<in> set(sourcenodes as'). V \\<notin> Def n''\"\n    and \"targetnode a -as'\\<rightarrow>* nx\" and \"nx -as''\\<rightarrow>\\<^sub>d* n'\"\n    and \"as = as'@as''\""], ["proof (prove)\nusing this:\n  \\<exists>nx as''.\n     as = as' @ as'' \\<and>\n     targetnode a -as'\\<rightarrow>* nx \\<and>\n     nx -as''\\<rightarrow>\\<^sub>d* n' \\<and>\n     V \\<in> Use nx \\<and>\n     (\\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'')\n\ngoal (1 subgoal):\n 1. (\\<And>nx as''.\n        \\<lbrakk>V \\<in> Use nx;\n         \\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n'';\n         targetnode a -as'\\<rightarrow>* nx;\n         nx -as''\\<rightarrow>\\<^sub>d* n'; as = as' @ as''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  V \\<in> Use nx\n  \\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n''\n  targetnode a -as'\\<rightarrow>* nx\n  nx -as''\\<rightarrow>\\<^sub>d* n'\n  as = as' @ as''\n\ngoal (1 subgoal):\n 1. \\<exists>as'' nx.\n       as = as' @ as'' \\<and>\n       sourcenode a -{V}a # as'\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -as''\\<rightarrow>\\<^sub>d* n'", "from \\<open>targetnode a -as'\\<rightarrow>* nx\\<close> \\<open>valid_edge a\\<close>"], ["proof (chain)\npicking this:\n  targetnode a -as'\\<rightarrow>* nx\n  valid_edge a", "have \"sourcenode a -a#as'\\<rightarrow>* nx\""], ["proof (prove)\nusing this:\n  targetnode a -as'\\<rightarrow>* nx\n  valid_edge a\n\ngoal (1 subgoal):\n 1. sourcenode a -a # as'\\<rightarrow>* nx", "by(fastforce intro:Cons_path)"], ["proof (state)\nthis:\n  sourcenode a -a # as'\\<rightarrow>* nx\n\ngoal (1 subgoal):\n 1. \\<exists>as'' nx.\n       as = as' @ as'' \\<and>\n       sourcenode a -{V}a # as'\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -as''\\<rightarrow>\\<^sub>d* n'", "with \\<open>V \\<in> Def (sourcenode a)\\<close> \\<open>V \\<in> Use nx\\<close> \n    \\<open>\\<forall>n''\\<in> set(sourcenodes as'). V \\<notin> Def n''\\<close>"], ["proof (chain)\npicking this:\n  V \\<in> Def (sourcenode a)\n  V \\<in> Use nx\n  \\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n''\n  sourcenode a -a # as'\\<rightarrow>* nx", "have \"sourcenode a influences V in nx via a#as'\""], ["proof (prove)\nusing this:\n  V \\<in> Def (sourcenode a)\n  V \\<in> Use nx\n  \\<forall>n''\\<in>set (sourcenodes as'). V \\<notin> Def n''\n  sourcenode a -a # as'\\<rightarrow>* nx\n\ngoal (1 subgoal):\n 1. sourcenode a influences V in nx via a # as'", "by(auto simp:dyn_data_dependence_def sourcenodes_def)"], ["proof (state)\nthis:\n  sourcenode a influences V in nx via a # as'\n\ngoal (1 subgoal):\n 1. \\<exists>as'' nx.\n       as = as' @ as'' \\<and>\n       sourcenode a -{V}a # as'\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -as''\\<rightarrow>\\<^sub>d* n'", "hence \"sourcenode a -{V}a#as'\\<rightarrow>\\<^sub>d\\<^sub>d nx\""], ["proof (prove)\nusing this:\n  sourcenode a influences V in nx via a # as'\n\ngoal (1 subgoal):\n 1. sourcenode a -{V}a # as'\\<rightarrow>\\<^sub>d\\<^sub>d nx", "by(rule DynPDG_ddep_edge)"], ["proof (state)\nthis:\n  sourcenode a -{V}a # as'\\<rightarrow>\\<^sub>d\\<^sub>d nx\n\ngoal (1 subgoal):\n 1. \\<exists>as'' nx.\n       as = as' @ as'' \\<and>\n       sourcenode a -{V}a # as'\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -as''\\<rightarrow>\\<^sub>d* n'", "with \\<open>nx -as''\\<rightarrow>\\<^sub>d* n'\\<close> \\<open>as = as'@as''\\<close>"], ["proof (chain)\npicking this:\n  nx -as''\\<rightarrow>\\<^sub>d* n'\n  as = as' @ as''\n  sourcenode a -{V}a # as'\\<rightarrow>\\<^sub>d\\<^sub>d nx", "show \"\\<exists>as'' nx. (as = as'@as'') \\<and> (sourcenode a -{V}a#as'\\<rightarrow>\\<^sub>d\\<^sub>d nx) \\<and> \n    (nx -as''\\<rightarrow>\\<^sub>d* n')\""], ["proof (prove)\nusing this:\n  nx -as''\\<rightarrow>\\<^sub>d* n'\n  as = as' @ as''\n  sourcenode a -{V}a # as'\\<rightarrow>\\<^sub>d\\<^sub>d nx\n\ngoal (1 subgoal):\n 1. \\<exists>as'' nx.\n       as = as' @ as'' \\<and>\n       sourcenode a -{V}a # as'\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n       nx -as''\\<rightarrow>\\<^sub>d* n'", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>as'' nx.\n     as = as' @ as'' \\<and>\n     sourcenode a -{V}a # as'\\<rightarrow>\\<^sub>d\\<^sub>d nx \\<and>\n     nx -as''\\<rightarrow>\\<^sub>d* n'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dependent_live_vars_same_pathsI:\n  assumes \"V \\<in> Use n'\"\n  shows \"\\<lbrakk>\\<forall>as' a as''. as = as'@a#as'' \\<longrightarrow> \\<not> sourcenode a -{V}a#as''\\<rightarrow>\\<^sub>d\\<^sub>d n'; \n          as \\<noteq> [] \\<longrightarrow> n' = last(targetnodes as)\\<rbrakk>\n  \\<Longrightarrow> (V,as,as) \\<in> dependent_live_vars n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>as' a as''.\n                as = as' @ a # as'' \\<longrightarrow>\n                \\<not> sourcenode\n                        a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n';\n     as \\<noteq> [] \\<longrightarrow> n' = last (targetnodes as)\\<rbrakk>\n    \\<Longrightarrow> (V, as, as) \\<in> dependent_live_vars n'", "proof(induct as)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>as' a as''.\n                [] = as' @ a # as'' \\<longrightarrow>\n                \\<not> sourcenode\n                        a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n';\n     [] \\<noteq> [] \\<longrightarrow> n' = last (targetnodes [])\\<rbrakk>\n    \\<Longrightarrow> (V, [], []) \\<in> dependent_live_vars n'\n 2. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>\\<forall>as' a as''.\n                            as = as' @ a # as'' \\<longrightarrow>\n                            \\<not> sourcenode\n                                    a -{V}a #\n    as''\\<rightarrow>\\<^sub>d\\<^sub>d n';\n                 as \\<noteq> [] \\<longrightarrow>\n                 n' = last (targetnodes as)\\<rbrakk>\n                \\<Longrightarrow> (V, as, as) \\<in> dependent_live_vars n';\n        \\<forall>as' aa as''.\n           a # as = as' @ aa # as'' \\<longrightarrow>\n           \\<not> sourcenode\n                   aa -{V}aa # as''\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        a # as \\<noteq> [] \\<longrightarrow>\n        n' = last (targetnodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as, a # as) \\<in> dependent_live_vars n'", "case Nil"], ["proof (state)\nthis:\n  \\<forall>as' a as''.\n     [] = as' @ a # as'' \\<longrightarrow>\n     \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  [] \\<noteq> [] \\<longrightarrow> n' = last (targetnodes [])\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>as' a as''.\n                [] = as' @ a # as'' \\<longrightarrow>\n                \\<not> sourcenode\n                        a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n';\n     [] \\<noteq> [] \\<longrightarrow> n' = last (targetnodes [])\\<rbrakk>\n    \\<Longrightarrow> (V, [], []) \\<in> dependent_live_vars n'\n 2. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>\\<forall>as' a as''.\n                            as = as' @ a # as'' \\<longrightarrow>\n                            \\<not> sourcenode\n                                    a -{V}a #\n    as''\\<rightarrow>\\<^sub>d\\<^sub>d n';\n                 as \\<noteq> [] \\<longrightarrow>\n                 n' = last (targetnodes as)\\<rbrakk>\n                \\<Longrightarrow> (V, as, as) \\<in> dependent_live_vars n';\n        \\<forall>as' aa as''.\n           a # as = as' @ aa # as'' \\<longrightarrow>\n           \\<not> sourcenode\n                   aa -{V}aa # as''\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        a # as \\<noteq> [] \\<longrightarrow>\n        n' = last (targetnodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as, a # as) \\<in> dependent_live_vars n'", "from \\<open>V \\<in> Use n'\\<close>"], ["proof (chain)\npicking this:\n  V \\<in> Use n'", "show ?case"], ["proof (prove)\nusing this:\n  V \\<in> Use n'\n\ngoal (1 subgoal):\n 1. (V, [], []) \\<in> dependent_live_vars n'", "by(rule dep_vars_Use)"], ["proof (state)\nthis:\n  (V, [], []) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>\\<forall>as' a as''.\n                            as = as' @ a # as'' \\<longrightarrow>\n                            \\<not> sourcenode\n                                    a -{V}a #\n    as''\\<rightarrow>\\<^sub>d\\<^sub>d n';\n                 as \\<noteq> [] \\<longrightarrow>\n                 n' = last (targetnodes as)\\<rbrakk>\n                \\<Longrightarrow> (V, as, as) \\<in> dependent_live_vars n';\n        \\<forall>as' aa as''.\n           a # as = as' @ aa # as'' \\<longrightarrow>\n           \\<not> sourcenode\n                   aa -{V}aa # as''\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        a # as \\<noteq> [] \\<longrightarrow>\n        n' = last (targetnodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as, a # as) \\<in> dependent_live_vars n'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>\\<forall>as' a as''.\n                            as = as' @ a # as'' \\<longrightarrow>\n                            \\<not> sourcenode\n                                    a -{V}a #\n    as''\\<rightarrow>\\<^sub>d\\<^sub>d n';\n                 as \\<noteq> [] \\<longrightarrow>\n                 n' = last (targetnodes as)\\<rbrakk>\n                \\<Longrightarrow> (V, as, as) \\<in> dependent_live_vars n';\n        \\<forall>as' aa as''.\n           a # as = as' @ aa # as'' \\<longrightarrow>\n           \\<not> sourcenode\n                   aa -{V}aa # as''\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        a # as \\<noteq> [] \\<longrightarrow>\n        n' = last (targetnodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as, a # as) \\<in> dependent_live_vars n'", "case (Cons ax asx)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>as' a as''.\n              asx = as' @ a # as'' \\<longrightarrow>\n              \\<not> sourcenode\n                      a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n';\n   asx \\<noteq> [] \\<longrightarrow> n' = last (targetnodes asx)\\<rbrakk>\n  \\<Longrightarrow> (V, asx, asx) \\<in> dependent_live_vars n'\n  \\<forall>as' a as''.\n     ax # asx = as' @ a # as'' \\<longrightarrow>\n     \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  ax # asx \\<noteq> [] \\<longrightarrow> n' = last (targetnodes (ax # asx))\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>\\<forall>as' a as''.\n                            as = as' @ a # as'' \\<longrightarrow>\n                            \\<not> sourcenode\n                                    a -{V}a #\n    as''\\<rightarrow>\\<^sub>d\\<^sub>d n';\n                 as \\<noteq> [] \\<longrightarrow>\n                 n' = last (targetnodes as)\\<rbrakk>\n                \\<Longrightarrow> (V, as, as) \\<in> dependent_live_vars n';\n        \\<forall>as' aa as''.\n           a # as = as' @ aa # as'' \\<longrightarrow>\n           \\<not> sourcenode\n                   aa -{V}aa # as''\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        a # as \\<noteq> [] \\<longrightarrow>\n        n' = last (targetnodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as, a # as) \\<in> dependent_live_vars n'", "note lastnode = \\<open>ax#asx \\<noteq> [] \\<longrightarrow> n' = last (targetnodes (ax#asx))\\<close>"], ["proof (state)\nthis:\n  ax # asx \\<noteq> [] \\<longrightarrow> n' = last (targetnodes (ax # asx))\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>\\<forall>as' a as''.\n                            as = as' @ a # as'' \\<longrightarrow>\n                            \\<not> sourcenode\n                                    a -{V}a #\n    as''\\<rightarrow>\\<^sub>d\\<^sub>d n';\n                 as \\<noteq> [] \\<longrightarrow>\n                 n' = last (targetnodes as)\\<rbrakk>\n                \\<Longrightarrow> (V, as, as) \\<in> dependent_live_vars n';\n        \\<forall>as' aa as''.\n           a # as = as' @ aa # as'' \\<longrightarrow>\n           \\<not> sourcenode\n                   aa -{V}aa # as''\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        a # as \\<noteq> [] \\<longrightarrow>\n        n' = last (targetnodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as, a # as) \\<in> dependent_live_vars n'", "note IH = \\<open>\\<lbrakk>\\<forall>as' a as''. asx = as'@a#as'' \\<longrightarrow>\n                           \\<not> sourcenode a -{V}a#as''\\<rightarrow>\\<^sub>d\\<^sub>d n';\n             asx \\<noteq> [] \\<longrightarrow> n' = last (targetnodes asx)\\<rbrakk>\n           \\<Longrightarrow> (V, asx, asx) \\<in> dependent_live_vars n'\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>as' a as''.\n              asx = as' @ a # as'' \\<longrightarrow>\n              \\<not> sourcenode\n                      a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n';\n   asx \\<noteq> [] \\<longrightarrow> n' = last (targetnodes asx)\\<rbrakk>\n  \\<Longrightarrow> (V, asx, asx) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>\\<forall>as' a as''.\n                            as = as' @ a # as'' \\<longrightarrow>\n                            \\<not> sourcenode\n                                    a -{V}a #\n    as''\\<rightarrow>\\<^sub>d\\<^sub>d n';\n                 as \\<noteq> [] \\<longrightarrow>\n                 n' = last (targetnodes as)\\<rbrakk>\n                \\<Longrightarrow> (V, as, as) \\<in> dependent_live_vars n';\n        \\<forall>as' aa as''.\n           a # as = as' @ aa # as'' \\<longrightarrow>\n           \\<not> sourcenode\n                   aa -{V}aa # as''\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        a # as \\<noteq> [] \\<longrightarrow>\n        n' = last (targetnodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as, a # as) \\<in> dependent_live_vars n'", "from \\<open>\\<forall>as' a as''. ax#asx = as'@a#as'' \\<longrightarrow> \\<not> sourcenode a -{V}a#as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>as' a as''.\n     ax # asx = as' @ a # as'' \\<longrightarrow>\n     \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'", "have all':\"\\<forall>as' a as''. asx = as'@a#as'' \\<longrightarrow> \\<not> sourcenode a -{V}a#as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\"\n    and \"\\<not> sourcenode ax -{V}ax#asx\\<rightarrow>\\<^sub>d\\<^sub>d n'\""], ["proof (prove)\nusing this:\n  \\<forall>as' a as''.\n     ax # asx = as' @ a # as'' \\<longrightarrow>\n     \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. \\<forall>as' a as''.\n       asx = as' @ a # as'' \\<longrightarrow>\n       \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n' &&&\n    \\<not> sourcenode ax -{V}ax # asx\\<rightarrow>\\<^sub>d\\<^sub>d n'", "by simp_all"], ["proof (state)\nthis:\n  \\<forall>as' a as''.\n     asx = as' @ a # as'' \\<longrightarrow>\n     \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  \\<not> sourcenode ax -{V}ax # asx\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>\\<forall>as' a as''.\n                            as = as' @ a # as'' \\<longrightarrow>\n                            \\<not> sourcenode\n                                    a -{V}a #\n    as''\\<rightarrow>\\<^sub>d\\<^sub>d n';\n                 as \\<noteq> [] \\<longrightarrow>\n                 n' = last (targetnodes as)\\<rbrakk>\n                \\<Longrightarrow> (V, as, as) \\<in> dependent_live_vars n';\n        \\<forall>as' aa as''.\n           a # as = as' @ aa # as'' \\<longrightarrow>\n           \\<not> sourcenode\n                   aa -{V}aa # as''\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        a # as \\<noteq> [] \\<longrightarrow>\n        n' = last (targetnodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as, a # as) \\<in> dependent_live_vars n'", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (V, ax # asx, ax # asx) \\<in> dependent_live_vars n'", "proof(cases \"asx = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. asx = [] \\<Longrightarrow>\n    (V, ax # asx, ax # asx) \\<in> dependent_live_vars n'\n 2. asx \\<noteq> [] \\<Longrightarrow>\n    (V, ax # asx, ax # asx) \\<in> dependent_live_vars n'", "case True"], ["proof (state)\nthis:\n  asx = []\n\ngoal (2 subgoals):\n 1. asx = [] \\<Longrightarrow>\n    (V, ax # asx, ax # asx) \\<in> dependent_live_vars n'\n 2. asx \\<noteq> [] \\<Longrightarrow>\n    (V, ax # asx, ax # asx) \\<in> dependent_live_vars n'", "from \\<open>V \\<in> Use n'\\<close>"], ["proof (chain)\npicking this:\n  V \\<in> Use n'", "have \"(V,[],[]) \\<in> dependent_live_vars n'\""], ["proof (prove)\nusing this:\n  V \\<in> Use n'\n\ngoal (1 subgoal):\n 1. (V, [], []) \\<in> dependent_live_vars n'", "by(rule dep_vars_Use)"], ["proof (state)\nthis:\n  (V, [], []) \\<in> dependent_live_vars n'\n\ngoal (2 subgoals):\n 1. asx = [] \\<Longrightarrow>\n    (V, ax # asx, ax # asx) \\<in> dependent_live_vars n'\n 2. asx \\<noteq> [] \\<Longrightarrow>\n    (V, ax # asx, ax # asx) \\<in> dependent_live_vars n'", "with \\<open>\\<not> sourcenode ax -{V}ax#asx\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close> True lastnode"], ["proof (chain)\npicking this:\n  \\<not> sourcenode ax -{V}ax # asx\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  asx = []\n  ax # asx \\<noteq> [] \\<longrightarrow> n' = last (targetnodes (ax # asx))\n  (V, [], []) \\<in> dependent_live_vars n'", "have \"(V,[ax],[ax]) \\<in> dependent_live_vars n'\""], ["proof (prove)\nusing this:\n  \\<not> sourcenode ax -{V}ax # asx\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  asx = []\n  ax # asx \\<noteq> [] \\<longrightarrow> n' = last (targetnodes (ax # asx))\n  (V, [], []) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. (V, [ax], [ax]) \\<in> dependent_live_vars n'", "by(fastforce intro:dep_vars_Cons_keep)"], ["proof (state)\nthis:\n  (V, [ax], [ax]) \\<in> dependent_live_vars n'\n\ngoal (2 subgoals):\n 1. asx = [] \\<Longrightarrow>\n    (V, ax # asx, ax # asx) \\<in> dependent_live_vars n'\n 2. asx \\<noteq> [] \\<Longrightarrow>\n    (V, ax # asx, ax # asx) \\<in> dependent_live_vars n'", "with True"], ["proof (chain)\npicking this:\n  asx = []\n  (V, [ax], [ax]) \\<in> dependent_live_vars n'", "show ?thesis"], ["proof (prove)\nusing this:\n  asx = []\n  (V, [ax], [ax]) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. (V, ax # asx, ax # asx) \\<in> dependent_live_vars n'", "by simp"], ["proof (state)\nthis:\n  (V, ax # asx, ax # asx) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. asx \\<noteq> [] \\<Longrightarrow>\n    (V, ax # asx, ax # asx) \\<in> dependent_live_vars n'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. asx \\<noteq> [] \\<Longrightarrow>\n    (V, ax # asx, ax # asx) \\<in> dependent_live_vars n'", "case False"], ["proof (state)\nthis:\n  asx \\<noteq> []\n\ngoal (1 subgoal):\n 1. asx \\<noteq> [] \\<Longrightarrow>\n    (V, ax # asx, ax # asx) \\<in> dependent_live_vars n'", "with lastnode"], ["proof (chain)\npicking this:\n  ax # asx \\<noteq> [] \\<longrightarrow> n' = last (targetnodes (ax # asx))\n  asx \\<noteq> []", "have \"asx \\<noteq> [] \\<longrightarrow> n' = last (targetnodes asx)\""], ["proof (prove)\nusing this:\n  ax # asx \\<noteq> [] \\<longrightarrow> n' = last (targetnodes (ax # asx))\n  asx \\<noteq> []\n\ngoal (1 subgoal):\n 1. asx \\<noteq> [] \\<longrightarrow> n' = last (targetnodes asx)", "by(simp add:targetnodes_def)"], ["proof (state)\nthis:\n  asx \\<noteq> [] \\<longrightarrow> n' = last (targetnodes asx)\n\ngoal (1 subgoal):\n 1. asx \\<noteq> [] \\<Longrightarrow>\n    (V, ax # asx, ax # asx) \\<in> dependent_live_vars n'", "from IH[OF all' this]"], ["proof (chain)\npicking this:\n  (V, asx, asx) \\<in> dependent_live_vars n'", "have \"(V, asx, asx) \\<in> dependent_live_vars n'\""], ["proof (prove)\nusing this:\n  (V, asx, asx) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. (V, asx, asx) \\<in> dependent_live_vars n'", "."], ["proof (state)\nthis:\n  (V, asx, asx) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. asx \\<noteq> [] \\<Longrightarrow>\n    (V, ax # asx, ax # asx) \\<in> dependent_live_vars n'", "with \\<open>\\<not> sourcenode ax -{V}ax#asx\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close> lastnode"], ["proof (chain)\npicking this:\n  \\<not> sourcenode ax -{V}ax # asx\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  ax # asx \\<noteq> [] \\<longrightarrow> n' = last (targetnodes (ax # asx))\n  (V, asx, asx) \\<in> dependent_live_vars n'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> sourcenode ax -{V}ax # asx\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  ax # asx \\<noteq> [] \\<longrightarrow> n' = last (targetnodes (ax # asx))\n  (V, asx, asx) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. (V, ax # asx, ax # asx) \\<in> dependent_live_vars n'", "by(fastforce intro:dep_vars_Cons_keep)"], ["proof (state)\nthis:\n  (V, ax # asx, ax # asx) \\<in> dependent_live_vars n'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (V, ax # asx, ax # asx) \\<in> dependent_live_vars n'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dependent_live_vars_same_pathsD:\n  \"\\<lbrakk>(V,as,as) \\<in> dependent_live_vars n';  as \\<noteq> [] \\<longrightarrow> n' = last(targetnodes as)\\<rbrakk>\n  \\<Longrightarrow> V \\<in> Use n' \\<and> (\\<forall>as' a as''. as = as'@a#as'' \\<longrightarrow>\n                       \\<not> sourcenode a -{V}a#as''\\<rightarrow>\\<^sub>d\\<^sub>d n')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(V, as, as) \\<in> dependent_live_vars n';\n     as \\<noteq> [] \\<longrightarrow> n' = last (targetnodes as)\\<rbrakk>\n    \\<Longrightarrow> V \\<in> Use n' \\<and>\n                      (\\<forall>as' a as''.\n                          as = as' @ a # as'' \\<longrightarrow>\n                          \\<not> sourcenode\n                                  a -{V}a #\n  as''\\<rightarrow>\\<^sub>d\\<^sub>d n')", "proof(induct as)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>(V, [], []) \\<in> dependent_live_vars n';\n     [] \\<noteq> [] \\<longrightarrow> n' = last (targetnodes [])\\<rbrakk>\n    \\<Longrightarrow> V \\<in> Use n' \\<and>\n                      (\\<forall>as' a as''.\n                          [] = as' @ a # as'' \\<longrightarrow>\n                          \\<not> sourcenode\n                                  a -{V}a #\n  as''\\<rightarrow>\\<^sub>d\\<^sub>d n')\n 2. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>(V, as, as) \\<in> dependent_live_vars n';\n                 as \\<noteq> [] \\<longrightarrow>\n                 n' = last (targetnodes as)\\<rbrakk>\n                \\<Longrightarrow> V \\<in> Use n' \\<and>\n                                  (\\<forall>as' a as''.\nas = as' @ a # as'' \\<longrightarrow>\n\\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n');\n        (V, a # as, a # as) \\<in> dependent_live_vars n';\n        a # as \\<noteq> [] \\<longrightarrow>\n        n' = last (targetnodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> V \\<in> Use n' \\<and>\n                         (\\<forall>as' aa as''.\n                             a # as = as' @ aa # as'' \\<longrightarrow>\n                             \\<not> sourcenode\n                                     aa -{V}aa #\n      as''\\<rightarrow>\\<^sub>d\\<^sub>d n')", "case Nil"], ["proof (state)\nthis:\n  (V, [], []) \\<in> dependent_live_vars n'\n  [] \\<noteq> [] \\<longrightarrow> n' = last (targetnodes [])\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(V, [], []) \\<in> dependent_live_vars n';\n     [] \\<noteq> [] \\<longrightarrow> n' = last (targetnodes [])\\<rbrakk>\n    \\<Longrightarrow> V \\<in> Use n' \\<and>\n                      (\\<forall>as' a as''.\n                          [] = as' @ a # as'' \\<longrightarrow>\n                          \\<not> sourcenode\n                                  a -{V}a #\n  as''\\<rightarrow>\\<^sub>d\\<^sub>d n')\n 2. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>(V, as, as) \\<in> dependent_live_vars n';\n                 as \\<noteq> [] \\<longrightarrow>\n                 n' = last (targetnodes as)\\<rbrakk>\n                \\<Longrightarrow> V \\<in> Use n' \\<and>\n                                  (\\<forall>as' a as''.\nas = as' @ a # as'' \\<longrightarrow>\n\\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n');\n        (V, a # as, a # as) \\<in> dependent_live_vars n';\n        a # as \\<noteq> [] \\<longrightarrow>\n        n' = last (targetnodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> V \\<in> Use n' \\<and>\n                         (\\<forall>as' aa as''.\n                             a # as = as' @ aa # as'' \\<longrightarrow>\n                             \\<not> sourcenode\n                                     aa -{V}aa #\n      as''\\<rightarrow>\\<^sub>d\\<^sub>d n')", "have \"(V,[],[]) \\<in> dependent_live_vars n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (V, [], []) \\<in> dependent_live_vars n'", "by fact"], ["proof (state)\nthis:\n  (V, [], []) \\<in> dependent_live_vars n'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(V, [], []) \\<in> dependent_live_vars n';\n     [] \\<noteq> [] \\<longrightarrow> n' = last (targetnodes [])\\<rbrakk>\n    \\<Longrightarrow> V \\<in> Use n' \\<and>\n                      (\\<forall>as' a as''.\n                          [] = as' @ a # as'' \\<longrightarrow>\n                          \\<not> sourcenode\n                                  a -{V}a #\n  as''\\<rightarrow>\\<^sub>d\\<^sub>d n')\n 2. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>(V, as, as) \\<in> dependent_live_vars n';\n                 as \\<noteq> [] \\<longrightarrow>\n                 n' = last (targetnodes as)\\<rbrakk>\n                \\<Longrightarrow> V \\<in> Use n' \\<and>\n                                  (\\<forall>as' a as''.\nas = as' @ a # as'' \\<longrightarrow>\n\\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n');\n        (V, a # as, a # as) \\<in> dependent_live_vars n';\n        a # as \\<noteq> [] \\<longrightarrow>\n        n' = last (targetnodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> V \\<in> Use n' \\<and>\n                         (\\<forall>as' aa as''.\n                             a # as = as' @ aa # as'' \\<longrightarrow>\n                             \\<not> sourcenode\n                                     aa -{V}aa #\n      as''\\<rightarrow>\\<^sub>d\\<^sub>d n')", "thus ?case"], ["proof (prove)\nusing this:\n  (V, [], []) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. V \\<in> Use n' \\<and>\n    (\\<forall>as' a as''.\n        [] = as' @ a # as'' \\<longrightarrow>\n        \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n')", "by(fastforce elim:dependent_live_vars.cases simp:targetnodes_def sourcenodes_def)"], ["proof (state)\nthis:\n  V \\<in> Use n' \\<and>\n  (\\<forall>as' a as''.\n      [] = as' @ a # as'' \\<longrightarrow>\n      \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n')\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>(V, as, as) \\<in> dependent_live_vars n';\n                 as \\<noteq> [] \\<longrightarrow>\n                 n' = last (targetnodes as)\\<rbrakk>\n                \\<Longrightarrow> V \\<in> Use n' \\<and>\n                                  (\\<forall>as' a as''.\nas = as' @ a # as'' \\<longrightarrow>\n\\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n');\n        (V, a # as, a # as) \\<in> dependent_live_vars n';\n        a # as \\<noteq> [] \\<longrightarrow>\n        n' = last (targetnodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> V \\<in> Use n' \\<and>\n                         (\\<forall>as' aa as''.\n                             a # as = as' @ aa # as'' \\<longrightarrow>\n                             \\<not> sourcenode\n                                     aa -{V}aa #\n      as''\\<rightarrow>\\<^sub>d\\<^sub>d n')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>(V, as, as) \\<in> dependent_live_vars n';\n                 as \\<noteq> [] \\<longrightarrow>\n                 n' = last (targetnodes as)\\<rbrakk>\n                \\<Longrightarrow> V \\<in> Use n' \\<and>\n                                  (\\<forall>as' a as''.\nas = as' @ a # as'' \\<longrightarrow>\n\\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n');\n        (V, a # as, a # as) \\<in> dependent_live_vars n';\n        a # as \\<noteq> [] \\<longrightarrow>\n        n' = last (targetnodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> V \\<in> Use n' \\<and>\n                         (\\<forall>as' aa as''.\n                             a # as = as' @ aa # as'' \\<longrightarrow>\n                             \\<not> sourcenode\n                                     aa -{V}aa #\n      as''\\<rightarrow>\\<^sub>d\\<^sub>d n')", "case (Cons ax asx)"], ["proof (state)\nthis:\n  \\<lbrakk>(V, asx, asx) \\<in> dependent_live_vars n';\n   asx \\<noteq> [] \\<longrightarrow> n' = last (targetnodes asx)\\<rbrakk>\n  \\<Longrightarrow> V \\<in> Use n' \\<and>\n                    (\\<forall>as' a as''.\n                        asx = as' @ a # as'' \\<longrightarrow>\n                        \\<not> sourcenode\n                                a -{V}a #\nas''\\<rightarrow>\\<^sub>d\\<^sub>d n')\n  (V, ax # asx, ax # asx) \\<in> dependent_live_vars n'\n  ax # asx \\<noteq> [] \\<longrightarrow> n' = last (targetnodes (ax # asx))\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>(V, as, as) \\<in> dependent_live_vars n';\n                 as \\<noteq> [] \\<longrightarrow>\n                 n' = last (targetnodes as)\\<rbrakk>\n                \\<Longrightarrow> V \\<in> Use n' \\<and>\n                                  (\\<forall>as' a as''.\nas = as' @ a # as'' \\<longrightarrow>\n\\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n');\n        (V, a # as, a # as) \\<in> dependent_live_vars n';\n        a # as \\<noteq> [] \\<longrightarrow>\n        n' = last (targetnodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> V \\<in> Use n' \\<and>\n                         (\\<forall>as' aa as''.\n                             a # as = as' @ aa # as'' \\<longrightarrow>\n                             \\<not> sourcenode\n                                     aa -{V}aa #\n      as''\\<rightarrow>\\<^sub>d\\<^sub>d n')", "note IH = \\<open>\\<lbrakk>(V,asx,asx) \\<in> dependent_live_vars n'; \n              asx \\<noteq> [] \\<longrightarrow> n' = last (targetnodes asx)\\<rbrakk>\n    \\<Longrightarrow> V \\<in> Use n' \\<and> (\\<forall>as' a as''. asx = as'@a#as'' \\<longrightarrow>\n                          \\<not> sourcenode a -{V}a#as''\\<rightarrow>\\<^sub>d\\<^sub>d n')\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>(V, asx, asx) \\<in> dependent_live_vars n';\n   asx \\<noteq> [] \\<longrightarrow> n' = last (targetnodes asx)\\<rbrakk>\n  \\<Longrightarrow> V \\<in> Use n' \\<and>\n                    (\\<forall>as' a as''.\n                        asx = as' @ a # as'' \\<longrightarrow>\n                        \\<not> sourcenode\n                                a -{V}a #\nas''\\<rightarrow>\\<^sub>d\\<^sub>d n')\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>(V, as, as) \\<in> dependent_live_vars n';\n                 as \\<noteq> [] \\<longrightarrow>\n                 n' = last (targetnodes as)\\<rbrakk>\n                \\<Longrightarrow> V \\<in> Use n' \\<and>\n                                  (\\<forall>as' a as''.\nas = as' @ a # as'' \\<longrightarrow>\n\\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n');\n        (V, a # as, a # as) \\<in> dependent_live_vars n';\n        a # as \\<noteq> [] \\<longrightarrow>\n        n' = last (targetnodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> V \\<in> Use n' \\<and>\n                         (\\<forall>as' aa as''.\n                             a # as = as' @ aa # as'' \\<longrightarrow>\n                             \\<not> sourcenode\n                                     aa -{V}aa #\n      as''\\<rightarrow>\\<^sub>d\\<^sub>d n')", "from \\<open>(V,ax#asx,ax#asx) \\<in> dependent_live_vars n'\\<close>"], ["proof (chain)\npicking this:\n  (V, ax # asx, ax # asx) \\<in> dependent_live_vars n'", "have \"(V,asx,asx) \\<in> dependent_live_vars n'\"\n    and \"\\<not> sourcenode ax -{V}ax#asx\\<rightarrow>\\<^sub>d\\<^sub>d last(targetnodes (ax#asx))\""], ["proof (prove)\nusing this:\n  (V, ax # asx, ax # asx) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. (V, asx, asx) \\<in> dependent_live_vars n' &&&\n    \\<not> sourcenode\n            ax -{V}ax #\n                   asx\\<rightarrow>\\<^sub>d\\<^sub>d last\n               (targetnodes (ax # asx))", "by(auto elim:dependent_live_vars.cases)"], ["proof (state)\nthis:\n  (V, asx, asx) \\<in> dependent_live_vars n'\n  \\<not> sourcenode\n          ax -{V}ax #\n                 asx\\<rightarrow>\\<^sub>d\\<^sub>d last\n             (targetnodes (ax # asx))\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>(V, as, as) \\<in> dependent_live_vars n';\n                 as \\<noteq> [] \\<longrightarrow>\n                 n' = last (targetnodes as)\\<rbrakk>\n                \\<Longrightarrow> V \\<in> Use n' \\<and>\n                                  (\\<forall>as' a as''.\nas = as' @ a # as'' \\<longrightarrow>\n\\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n');\n        (V, a # as, a # as) \\<in> dependent_live_vars n';\n        a # as \\<noteq> [] \\<longrightarrow>\n        n' = last (targetnodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> V \\<in> Use n' \\<and>\n                         (\\<forall>as' aa as''.\n                             a # as = as' @ aa # as'' \\<longrightarrow>\n                             \\<not> sourcenode\n                                     aa -{V}aa #\n      as''\\<rightarrow>\\<^sub>d\\<^sub>d n')", "from \\<open>ax#asx \\<noteq> [] \\<longrightarrow> n' = last (targetnodes (ax#asx))\\<close>"], ["proof (chain)\npicking this:\n  ax # asx \\<noteq> [] \\<longrightarrow> n' = last (targetnodes (ax # asx))", "have \"n' = last (targetnodes (ax#asx))\""], ["proof (prove)\nusing this:\n  ax # asx \\<noteq> [] \\<longrightarrow> n' = last (targetnodes (ax # asx))\n\ngoal (1 subgoal):\n 1. n' = last (targetnodes (ax # asx))", "by simp"], ["proof (state)\nthis:\n  n' = last (targetnodes (ax # asx))\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>(V, as, as) \\<in> dependent_live_vars n';\n                 as \\<noteq> [] \\<longrightarrow>\n                 n' = last (targetnodes as)\\<rbrakk>\n                \\<Longrightarrow> V \\<in> Use n' \\<and>\n                                  (\\<forall>as' a as''.\nas = as' @ a # as'' \\<longrightarrow>\n\\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n');\n        (V, a # as, a # as) \\<in> dependent_live_vars n';\n        a # as \\<noteq> [] \\<longrightarrow>\n        n' = last (targetnodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> V \\<in> Use n' \\<and>\n                         (\\<forall>as' aa as''.\n                             a # as = as' @ aa # as'' \\<longrightarrow>\n                             \\<not> sourcenode\n                                     aa -{V}aa #\n      as''\\<rightarrow>\\<^sub>d\\<^sub>d n')", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. V \\<in> Use n' \\<and>\n    (\\<forall>as' a as''.\n        ax # asx = as' @ a # as'' \\<longrightarrow>\n        \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n')", "proof(cases \"asx = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. asx = [] \\<Longrightarrow>\n    V \\<in> Use n' \\<and>\n    (\\<forall>as' a as''.\n        ax # asx = as' @ a # as'' \\<longrightarrow>\n        \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n')\n 2. asx \\<noteq> [] \\<Longrightarrow>\n    V \\<in> Use n' \\<and>\n    (\\<forall>as' a as''.\n        ax # asx = as' @ a # as'' \\<longrightarrow>\n        \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n')", "case True"], ["proof (state)\nthis:\n  asx = []\n\ngoal (2 subgoals):\n 1. asx = [] \\<Longrightarrow>\n    V \\<in> Use n' \\<and>\n    (\\<forall>as' a as''.\n        ax # asx = as' @ a # as'' \\<longrightarrow>\n        \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n')\n 2. asx \\<noteq> [] \\<Longrightarrow>\n    V \\<in> Use n' \\<and>\n    (\\<forall>as' a as''.\n        ax # asx = as' @ a # as'' \\<longrightarrow>\n        \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n')", "with \\<open>(V,asx,asx) \\<in> dependent_live_vars n'\\<close>"], ["proof (chain)\npicking this:\n  (V, asx, asx) \\<in> dependent_live_vars n'\n  asx = []", "have \"V \\<in> Use n'\""], ["proof (prove)\nusing this:\n  (V, asx, asx) \\<in> dependent_live_vars n'\n  asx = []\n\ngoal (1 subgoal):\n 1. V \\<in> Use n'", "by(fastforce elim:dependent_live_vars.cases)"], ["proof (state)\nthis:\n  V \\<in> Use n'\n\ngoal (2 subgoals):\n 1. asx = [] \\<Longrightarrow>\n    V \\<in> Use n' \\<and>\n    (\\<forall>as' a as''.\n        ax # asx = as' @ a # as'' \\<longrightarrow>\n        \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n')\n 2. asx \\<noteq> [] \\<Longrightarrow>\n    V \\<in> Use n' \\<and>\n    (\\<forall>as' a as''.\n        ax # asx = as' @ a # as'' \\<longrightarrow>\n        \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n')", "from \\<open>\\<not> sourcenode ax -{V}ax#asx\\<rightarrow>\\<^sub>d\\<^sub>d last(targetnodes (ax#asx))\\<close> \n      True \\<open>n' = last (targetnodes (ax#asx))\\<close>"], ["proof (chain)\npicking this:\n  \\<not> sourcenode\n          ax -{V}ax #\n                 asx\\<rightarrow>\\<^sub>d\\<^sub>d last\n             (targetnodes (ax # asx))\n  asx = []\n  n' = last (targetnodes (ax # asx))", "have \"\\<forall>as' a as''. ax#asx = as'@a#as'' \\<longrightarrow> \\<not> sourcenode a -{V}a#as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\""], ["proof (prove)\nusing this:\n  \\<not> sourcenode\n          ax -{V}ax #\n                 asx\\<rightarrow>\\<^sub>d\\<^sub>d last\n             (targetnodes (ax # asx))\n  asx = []\n  n' = last (targetnodes (ax # asx))\n\ngoal (1 subgoal):\n 1. \\<forall>as' a as''.\n       ax # asx = as' @ a # as'' \\<longrightarrow>\n       \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'", "by auto(case_tac as',auto)"], ["proof (state)\nthis:\n  \\<forall>as' a as''.\n     ax # asx = as' @ a # as'' \\<longrightarrow>\n     \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (2 subgoals):\n 1. asx = [] \\<Longrightarrow>\n    V \\<in> Use n' \\<and>\n    (\\<forall>as' a as''.\n        ax # asx = as' @ a # as'' \\<longrightarrow>\n        \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n')\n 2. asx \\<noteq> [] \\<Longrightarrow>\n    V \\<in> Use n' \\<and>\n    (\\<forall>as' a as''.\n        ax # asx = as' @ a # as'' \\<longrightarrow>\n        \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n')", "with \\<open>V \\<in> Use n'\\<close>"], ["proof (chain)\npicking this:\n  V \\<in> Use n'\n  \\<forall>as' a as''.\n     ax # asx = as' @ a # as'' \\<longrightarrow>\n     \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'", "show ?thesis"], ["proof (prove)\nusing this:\n  V \\<in> Use n'\n  \\<forall>as' a as''.\n     ax # asx = as' @ a # as'' \\<longrightarrow>\n     \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. V \\<in> Use n' \\<and>\n    (\\<forall>as' a as''.\n        ax # asx = as' @ a # as'' \\<longrightarrow>\n        \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n')", "by simp"], ["proof (state)\nthis:\n  V \\<in> Use n' \\<and>\n  (\\<forall>as' a as''.\n      ax # asx = as' @ a # as'' \\<longrightarrow>\n      \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n')\n\ngoal (1 subgoal):\n 1. asx \\<noteq> [] \\<Longrightarrow>\n    V \\<in> Use n' \\<and>\n    (\\<forall>as' a as''.\n        ax # asx = as' @ a # as'' \\<longrightarrow>\n        \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. asx \\<noteq> [] \\<Longrightarrow>\n    V \\<in> Use n' \\<and>\n    (\\<forall>as' a as''.\n        ax # asx = as' @ a # as'' \\<longrightarrow>\n        \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n')", "case False"], ["proof (state)\nthis:\n  asx \\<noteq> []\n\ngoal (1 subgoal):\n 1. asx \\<noteq> [] \\<Longrightarrow>\n    V \\<in> Use n' \\<and>\n    (\\<forall>as' a as''.\n        ax # asx = as' @ a # as'' \\<longrightarrow>\n        \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n')", "with \\<open>n' = last (targetnodes (ax#asx))\\<close>"], ["proof (chain)\npicking this:\n  n' = last (targetnodes (ax # asx))\n  asx \\<noteq> []", "have \"asx \\<noteq> [] \\<longrightarrow> n' = last (targetnodes asx)\""], ["proof (prove)\nusing this:\n  n' = last (targetnodes (ax # asx))\n  asx \\<noteq> []\n\ngoal (1 subgoal):\n 1. asx \\<noteq> [] \\<longrightarrow> n' = last (targetnodes asx)", "by(simp add:targetnodes_def)"], ["proof (state)\nthis:\n  asx \\<noteq> [] \\<longrightarrow> n' = last (targetnodes asx)\n\ngoal (1 subgoal):\n 1. asx \\<noteq> [] \\<Longrightarrow>\n    V \\<in> Use n' \\<and>\n    (\\<forall>as' a as''.\n        ax # asx = as' @ a # as'' \\<longrightarrow>\n        \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n')", "from IH[OF \\<open>(V,asx,asx) \\<in> dependent_live_vars n'\\<close> this]"], ["proof (chain)\npicking this:\n  V \\<in> Use n' \\<and>\n  (\\<forall>as' a as''.\n      asx = as' @ a # as'' \\<longrightarrow>\n      \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n')", "have \"V \\<in> Use n' \\<and> (\\<forall>as' a as''. asx = as'@a#as'' \\<longrightarrow>\n                            \\<not> sourcenode a -{V}a#as''\\<rightarrow>\\<^sub>d\\<^sub>d n')\""], ["proof (prove)\nusing this:\n  V \\<in> Use n' \\<and>\n  (\\<forall>as' a as''.\n      asx = as' @ a # as'' \\<longrightarrow>\n      \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n')\n\ngoal (1 subgoal):\n 1. V \\<in> Use n' \\<and>\n    (\\<forall>as' a as''.\n        asx = as' @ a # as'' \\<longrightarrow>\n        \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n')", "."], ["proof (state)\nthis:\n  V \\<in> Use n' \\<and>\n  (\\<forall>as' a as''.\n      asx = as' @ a # as'' \\<longrightarrow>\n      \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n')\n\ngoal (1 subgoal):\n 1. asx \\<noteq> [] \\<Longrightarrow>\n    V \\<in> Use n' \\<and>\n    (\\<forall>as' a as''.\n        ax # asx = as' @ a # as'' \\<longrightarrow>\n        \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n')", "with \\<open>\\<not> sourcenode ax -{V}ax#asx\\<rightarrow>\\<^sub>d\\<^sub>d last(targetnodes (ax#asx))\\<close>\n      \\<open>n' = last (targetnodes (ax#asx))\\<close>"], ["proof (chain)\npicking this:\n  \\<not> sourcenode\n          ax -{V}ax #\n                 asx\\<rightarrow>\\<^sub>d\\<^sub>d last\n             (targetnodes (ax # asx))\n  n' = last (targetnodes (ax # asx))\n  V \\<in> Use n' \\<and>\n  (\\<forall>as' a as''.\n      asx = as' @ a # as'' \\<longrightarrow>\n      \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n')", "have \"V \\<in> Use n'\"\n      and \"\\<forall>as' a as''. ax#asx = as'@a#as'' \\<longrightarrow>\n                            \\<not> sourcenode a -{V}a#as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\""], ["proof (prove)\nusing this:\n  \\<not> sourcenode\n          ax -{V}ax #\n                 asx\\<rightarrow>\\<^sub>d\\<^sub>d last\n             (targetnodes (ax # asx))\n  n' = last (targetnodes (ax # asx))\n  V \\<in> Use n' \\<and>\n  (\\<forall>as' a as''.\n      asx = as' @ a # as'' \\<longrightarrow>\n      \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n')\n\ngoal (1 subgoal):\n 1. V \\<in> Use n' &&&\n    \\<forall>as' a as''.\n       ax # asx = as' @ a # as'' \\<longrightarrow>\n       \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'", "by auto(case_tac as',auto)"], ["proof (state)\nthis:\n  V \\<in> Use n'\n  \\<forall>as' a as''.\n     ax # asx = as' @ a # as'' \\<longrightarrow>\n     \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. asx \\<noteq> [] \\<Longrightarrow>\n    V \\<in> Use n' \\<and>\n    (\\<forall>as' a as''.\n        ax # asx = as' @ a # as'' \\<longrightarrow>\n        \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n')", "thus ?thesis"], ["proof (prove)\nusing this:\n  V \\<in> Use n'\n  \\<forall>as' a as''.\n     ax # asx = as' @ a # as'' \\<longrightarrow>\n     \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. V \\<in> Use n' \\<and>\n    (\\<forall>as' a as''.\n        ax # asx = as' @ a # as'' \\<longrightarrow>\n        \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n')", "by simp"], ["proof (state)\nthis:\n  V \\<in> Use n' \\<and>\n  (\\<forall>as' a as''.\n      ax # asx = as' @ a # as'' \\<longrightarrow>\n      \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  V \\<in> Use n' \\<and>\n  (\\<forall>as' a as''.\n      ax # asx = as' @ a # as'' \\<longrightarrow>\n      \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dependent_live_vars_same_paths:\n  \"as \\<noteq> [] \\<longrightarrow> n' = last(targetnodes as) \\<Longrightarrow>\n  (V,as,as) \\<in> dependent_live_vars n' = \n  (V \\<in> Use n' \\<and> (\\<forall>as' a as''. as = as'@a#as'' \\<longrightarrow>\n                       \\<not> sourcenode a -{V}a#as''\\<rightarrow>\\<^sub>d\\<^sub>d n'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<longrightarrow>\n    n' = last (targetnodes as) \\<Longrightarrow>\n    ((V, as, as) \\<in> dependent_live_vars n') =\n    (V \\<in> Use n' \\<and>\n     (\\<forall>as' a as''.\n         as = as' @ a # as'' \\<longrightarrow>\n         \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'))", "by(fastforce intro!:dependent_live_vars_same_pathsD dependent_live_vars_same_pathsI)"], ["", "lemma dependent_live_vars_cdep_empty_fst:\nassumes \"n'' -as\\<rightarrow>\\<^sub>c\\<^sub>d n'\" and \"V' \\<in> Use n''\"\n  shows \"(V',[],as) \\<in> dependent_live_vars n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (V', [], as) \\<in> dependent_live_vars n'", "proof(cases as)"], ["proof (state)\ngoal (2 subgoals):\n 1. as = [] \\<Longrightarrow> (V', [], as) \\<in> dependent_live_vars n'\n 2. \\<And>a list.\n       as = a # list \\<Longrightarrow>\n       (V', [], as) \\<in> dependent_live_vars n'", "case Nil"], ["proof (state)\nthis:\n  as = []\n\ngoal (2 subgoals):\n 1. as = [] \\<Longrightarrow> (V', [], as) \\<in> dependent_live_vars n'\n 2. \\<And>a list.\n       as = a # list \\<Longrightarrow>\n       (V', [], as) \\<in> dependent_live_vars n'", "with \\<open>n'' -as\\<rightarrow>\\<^sub>c\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -as\\<rightarrow>\\<^sub>c\\<^sub>d n'\n  as = []", "show ?thesis"], ["proof (prove)\nusing this:\n  n'' -as\\<rightarrow>\\<^sub>c\\<^sub>d n'\n  as = []\n\ngoal (1 subgoal):\n 1. (V', [], as) \\<in> dependent_live_vars n'", "by(fastforce elim:DynPDG_edge.cases dest:dyn_control_dependence_path)"], ["proof (state)\nthis:\n  (V', [], as) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       as = a # list \\<Longrightarrow>\n       (V', [], as) \\<in> dependent_live_vars n'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       as = a # list \\<Longrightarrow>\n       (V', [], as) \\<in> dependent_live_vars n'", "case (Cons ax asx)"], ["proof (state)\nthis:\n  as = ax # asx\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       as = a # list \\<Longrightarrow>\n       (V', [], as) \\<in> dependent_live_vars n'", "with \\<open>n'' -as\\<rightarrow>\\<^sub>c\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -as\\<rightarrow>\\<^sub>c\\<^sub>d n'\n  as = ax # asx", "have \"sourcenode ax = n''\""], ["proof (prove)\nusing this:\n  n'' -as\\<rightarrow>\\<^sub>c\\<^sub>d n'\n  as = ax # asx\n\ngoal (1 subgoal):\n 1. sourcenode ax = n''", "by(auto dest:DynPDG_cdep_edge_CFG_path elim:path.cases)"], ["proof (state)\nthis:\n  sourcenode ax = n''\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       as = a # list \\<Longrightarrow>\n       (V', [], as) \\<in> dependent_live_vars n'", "from \\<open>n'' -as\\<rightarrow>\\<^sub>c\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -as\\<rightarrow>\\<^sub>c\\<^sub>d n'", "have \"valid_node n'\""], ["proof (prove)\nusing this:\n  n'' -as\\<rightarrow>\\<^sub>c\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. valid_node n'", "by(fastforce intro:path_valid_node(2) DynPDG_cdep_edge_CFG_path(1))"], ["proof (state)\nthis:\n  valid_node n'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       as = a # list \\<Longrightarrow>\n       (V', [], as) \\<in> dependent_live_vars n'", "from Cons \\<open>n'' -as\\<rightarrow>\\<^sub>c\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  as = ax # asx\n  n'' -as\\<rightarrow>\\<^sub>c\\<^sub>d n'", "have \"last(targetnodes as) = n'\""], ["proof (prove)\nusing this:\n  as = ax # asx\n  n'' -as\\<rightarrow>\\<^sub>c\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. last (targetnodes as) = n'", "by(fastforce intro:path_targetnode dest:DynPDG_cdep_edge_CFG_path)"], ["proof (state)\nthis:\n  last (targetnodes as) = n'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       as = a # list \\<Longrightarrow>\n       (V', [], as) \\<in> dependent_live_vars n'", "with Cons \\<open>n'' -as\\<rightarrow>\\<^sub>c\\<^sub>d n'\\<close> \\<open>V' \\<in> Use n''\\<close> \\<open>sourcenode ax = n''\\<close> \\<open>valid_node n'\\<close>"], ["proof (chain)\npicking this:\n  as = ax # asx\n  n'' -as\\<rightarrow>\\<^sub>c\\<^sub>d n'\n  V' \\<in> Use n''\n  sourcenode ax = n''\n  valid_node n'\n  last (targetnodes as) = n'", "have \"(V', [], ax#asx@[]) \\<in> dependent_live_vars n'\""], ["proof (prove)\nusing this:\n  as = ax # asx\n  n'' -as\\<rightarrow>\\<^sub>c\\<^sub>d n'\n  V' \\<in> Use n''\n  sourcenode ax = n''\n  valid_node n'\n  last (targetnodes as) = n'\n\ngoal (1 subgoal):\n 1. (V', [], ax # asx @ []) \\<in> dependent_live_vars n'", "by(fastforce intro:dep_vars_Cons_cdep DynPDG_path_Nil)"], ["proof (state)\nthis:\n  (V', [], ax # asx @ []) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       as = a # list \\<Longrightarrow>\n       (V', [], as) \\<in> dependent_live_vars n'", "with Cons"], ["proof (chain)\npicking this:\n  as = ax # asx\n  (V', [], ax # asx @ []) \\<in> dependent_live_vars n'", "show ?thesis"], ["proof (prove)\nusing this:\n  as = ax # asx\n  (V', [], ax # asx @ []) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. (V', [], as) \\<in> dependent_live_vars n'", "by simp"], ["proof (state)\nthis:\n  (V', [], as) \\<in> dependent_live_vars n'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dependent_live_vars_ddep_empty_fst:\n  assumes \"n'' -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n'\" and \"V' \\<in> Use n''\"\n  shows \"(V',[],as) \\<in> dependent_live_vars n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (V', [], as) \\<in> dependent_live_vars n'", "proof(cases as)"], ["proof (state)\ngoal (2 subgoals):\n 1. as = [] \\<Longrightarrow> (V', [], as) \\<in> dependent_live_vars n'\n 2. \\<And>a list.\n       as = a # list \\<Longrightarrow>\n       (V', [], as) \\<in> dependent_live_vars n'", "case Nil"], ["proof (state)\nthis:\n  as = []\n\ngoal (2 subgoals):\n 1. as = [] \\<Longrightarrow> (V', [], as) \\<in> dependent_live_vars n'\n 2. \\<And>a list.\n       as = a # list \\<Longrightarrow>\n       (V', [], as) \\<in> dependent_live_vars n'", "with \\<open>n'' -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  as = []", "show ?thesis"], ["proof (prove)\nusing this:\n  n'' -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  as = []\n\ngoal (1 subgoal):\n 1. (V', [], as) \\<in> dependent_live_vars n'", "by(fastforce elim:DynPDG_edge.cases simp:dyn_data_dependence_def)"], ["proof (state)\nthis:\n  (V', [], as) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       as = a # list \\<Longrightarrow>\n       (V', [], as) \\<in> dependent_live_vars n'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       as = a # list \\<Longrightarrow>\n       (V', [], as) \\<in> dependent_live_vars n'", "case (Cons ax asx)"], ["proof (state)\nthis:\n  as = ax # asx\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       as = a # list \\<Longrightarrow>\n       (V', [], as) \\<in> dependent_live_vars n'", "with \\<open>n'' -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  as = ax # asx", "have \"sourcenode ax = n''\""], ["proof (prove)\nusing this:\n  n'' -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  as = ax # asx\n\ngoal (1 subgoal):\n 1. sourcenode ax = n''", "by(auto dest:DynPDG_ddep_edge_CFG_path elim:path.cases)"], ["proof (state)\nthis:\n  sourcenode ax = n''\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       as = a # list \\<Longrightarrow>\n       (V', [], as) \\<in> dependent_live_vars n'", "from Cons \\<open>n'' -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  as = ax # asx\n  n'' -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n'", "have \"last(targetnodes as) = n'\""], ["proof (prove)\nusing this:\n  as = ax # asx\n  n'' -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. last (targetnodes as) = n'", "by(fastforce intro:path_targetnode elim:DynPDG_ddep_edge_CFG_path(1))"], ["proof (state)\nthis:\n  last (targetnodes as) = n'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       as = a # list \\<Longrightarrow>\n       (V', [], as) \\<in> dependent_live_vars n'", "from Cons \\<open>n'' -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  as = ax # asx\n  n'' -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n'", "have all:\"\\<forall>as' a as''. asx = as'@a#as'' \\<longrightarrow>\n                             \\<not> sourcenode a -{V}a#as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\""], ["proof (prove)\nusing this:\n  as = ax # asx\n  n'' -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. \\<forall>as' a as''.\n       asx = as' @ a # as'' \\<longrightarrow>\n       \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'", "by(fastforce dest:DynPDG_ddep_edge_no_shorter_ddep_edge)"], ["proof (state)\nthis:\n  \\<forall>as' a as''.\n     asx = as' @ a # as'' \\<longrightarrow>\n     \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       as = a # list \\<Longrightarrow>\n       (V', [], as) \\<in> dependent_live_vars n'", "from \\<open>n'' -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n'", "have \"V \\<in> Use n'\""], ["proof (prove)\nusing this:\n  n'' -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. V \\<in> Use n'", "by(auto elim!:DynPDG_edge.cases simp:dyn_data_dependence_def)"], ["proof (state)\nthis:\n  V \\<in> Use n'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       as = a # list \\<Longrightarrow>\n       (V', [], as) \\<in> dependent_live_vars n'", "from Cons \\<open>n'' -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  as = ax # asx\n  n'' -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n'", "have \"as \\<noteq> [] \\<longrightarrow> n' = last(targetnodes as)\""], ["proof (prove)\nusing this:\n  as = ax # asx\n  n'' -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<longrightarrow> n' = last (targetnodes as)", "by(fastforce dest:DynPDG_ddep_edge_CFG_path path_targetnode)"], ["proof (state)\nthis:\n  as \\<noteq> [] \\<longrightarrow> n' = last (targetnodes as)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       as = a # list \\<Longrightarrow>\n       (V', [], as) \\<in> dependent_live_vars n'", "with Cons"], ["proof (chain)\npicking this:\n  as = ax # asx\n  as \\<noteq> [] \\<longrightarrow> n' = last (targetnodes as)", "have \"asx \\<noteq> [] \\<longrightarrow> n' = last(targetnodes asx)\""], ["proof (prove)\nusing this:\n  as = ax # asx\n  as \\<noteq> [] \\<longrightarrow> n' = last (targetnodes as)\n\ngoal (1 subgoal):\n 1. asx \\<noteq> [] \\<longrightarrow> n' = last (targetnodes asx)", "by(fastforce simp:targetnodes_def)"], ["proof (state)\nthis:\n  asx \\<noteq> [] \\<longrightarrow> n' = last (targetnodes asx)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       as = a # list \\<Longrightarrow>\n       (V', [], as) \\<in> dependent_live_vars n'", "with all \\<open>V \\<in> Use n'\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>as' a as''.\n     asx = as' @ a # as'' \\<longrightarrow>\n     \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  V \\<in> Use n'\n  asx \\<noteq> [] \\<longrightarrow> n' = last (targetnodes asx)", "have \"(V,asx,asx) \\<in> dependent_live_vars n'\""], ["proof (prove)\nusing this:\n  \\<forall>as' a as''.\n     asx = as' @ a # as'' \\<longrightarrow>\n     \\<not> sourcenode a -{V}a # as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  V \\<in> Use n'\n  asx \\<noteq> [] \\<longrightarrow> n' = last (targetnodes asx)\n\ngoal (1 subgoal):\n 1. (V, asx, asx) \\<in> dependent_live_vars n'", "by -(rule dependent_live_vars_same_pathsI)"], ["proof (state)\nthis:\n  (V, asx, asx) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       as = a # list \\<Longrightarrow>\n       (V', [], as) \\<in> dependent_live_vars n'", "with \\<open>V' \\<in> Use n''\\<close> \\<open>n'' -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close> \\<open>last(targetnodes as) = n'\\<close>\n    Cons \\<open>sourcenode ax = n''\\<close>"], ["proof (chain)\npicking this:\n  V' \\<in> Use n''\n  n'' -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  last (targetnodes as) = n'\n  as = ax # asx\n  sourcenode ax = n''\n  (V, asx, asx) \\<in> dependent_live_vars n'", "show ?thesis"], ["proof (prove)\nusing this:\n  V' \\<in> Use n''\n  n'' -{V}as\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  last (targetnodes as) = n'\n  as = ax # asx\n  sourcenode ax = n''\n  (V, asx, asx) \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. (V', [], as) \\<in> dependent_live_vars n'", "by(fastforce intro:dep_vars_Cons_ddep)"], ["proof (state)\nthis:\n  (V', [], as) \\<in> dependent_live_vars n'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ddep_dependent_live_vars_keep_notempty:\n  assumes \"n -{V}a#as\\<rightarrow>\\<^sub>d\\<^sub>d n''\" and \"as' \\<noteq> []\"\n  and \"(V,as'',as') \\<in> dependent_live_vars n'\"\n  shows \"(V,as@as'',as@as') \\<in> dependent_live_vars n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (V, as @ as'', as @ as') \\<in> dependent_live_vars n'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (V, as @ as'', as @ as') \\<in> dependent_live_vars n'", "from \\<open>n -{V}a#as\\<rightarrow>\\<^sub>d\\<^sub>d n''\\<close>"], ["proof (chain)\npicking this:\n  n -{V}a # as\\<rightarrow>\\<^sub>d\\<^sub>d n''", "have \"\\<forall>n'' \\<in> set (sourcenodes as). V \\<notin> Def n''\""], ["proof (prove)\nusing this:\n  n -{V}a # as\\<rightarrow>\\<^sub>d\\<^sub>d n''\n\ngoal (1 subgoal):\n 1. \\<forall>n''\\<in>set (sourcenodes as). V \\<notin> Def n''", "by(auto elim:DynPDG_edge.cases simp:dyn_data_dependence_def)"], ["proof (state)\nthis:\n  \\<forall>n''\\<in>set (sourcenodes as). V \\<notin> Def n''\n\ngoal (1 subgoal):\n 1. (V, as @ as'', as @ as') \\<in> dependent_live_vars n'", "with \\<open>(V,as'',as') \\<in> dependent_live_vars n'\\<close>"], ["proof (chain)\npicking this:\n  (V, as'', as') \\<in> dependent_live_vars n'\n  \\<forall>n''\\<in>set (sourcenodes as). V \\<notin> Def n''", "show ?thesis"], ["proof (prove)\nusing this:\n  (V, as'', as') \\<in> dependent_live_vars n'\n  \\<forall>n''\\<in>set (sourcenodes as). V \\<notin> Def n''\n\ngoal (1 subgoal):\n 1. (V, as @ as'', as @ as') \\<in> dependent_live_vars n'", "proof(induct as)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>(V, as'', as') \\<in> dependent_live_vars n';\n     \\<forall>n''\\<in>set (sourcenodes []). V \\<notin> Def n''\\<rbrakk>\n    \\<Longrightarrow> (V, [] @ as'', [] @ as') \\<in> dependent_live_vars n'\n 2. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>(V, as'', as') \\<in> dependent_live_vars n';\n                 \\<forall>n''\\<in>set (sourcenodes as).\n                    V \\<notin> Def n''\\<rbrakk>\n                \\<Longrightarrow> (V, as @ as'', as @ as')\n                                  \\<in> dependent_live_vars n';\n        (V, as'', as') \\<in> dependent_live_vars n';\n        \\<forall>n''\\<in>set (sourcenodes (a # as)).\n           V \\<notin> Def n''\\<rbrakk>\n       \\<Longrightarrow> (V, (a # as) @ as'', (a # as) @ as')\n                         \\<in> dependent_live_vars n'", "case Nil"], ["proof (state)\nthis:\n  (V, as'', as') \\<in> dependent_live_vars n'\n  \\<forall>n''\\<in>set (sourcenodes []). V \\<notin> Def n''\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(V, as'', as') \\<in> dependent_live_vars n';\n     \\<forall>n''\\<in>set (sourcenodes []). V \\<notin> Def n''\\<rbrakk>\n    \\<Longrightarrow> (V, [] @ as'', [] @ as') \\<in> dependent_live_vars n'\n 2. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>(V, as'', as') \\<in> dependent_live_vars n';\n                 \\<forall>n''\\<in>set (sourcenodes as).\n                    V \\<notin> Def n''\\<rbrakk>\n                \\<Longrightarrow> (V, as @ as'', as @ as')\n                                  \\<in> dependent_live_vars n';\n        (V, as'', as') \\<in> dependent_live_vars n';\n        \\<forall>n''\\<in>set (sourcenodes (a # as)).\n           V \\<notin> Def n''\\<rbrakk>\n       \\<Longrightarrow> (V, (a # as) @ as'', (a # as) @ as')\n                         \\<in> dependent_live_vars n'", "thus ?case"], ["proof (prove)\nusing this:\n  (V, as'', as') \\<in> dependent_live_vars n'\n  \\<forall>n''\\<in>set (sourcenodes []). V \\<notin> Def n''\n\ngoal (1 subgoal):\n 1. (V, [] @ as'', [] @ as') \\<in> dependent_live_vars n'", "by simp"], ["proof (state)\nthis:\n  (V, [] @ as'', [] @ as') \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>(V, as'', as') \\<in> dependent_live_vars n';\n                 \\<forall>n''\\<in>set (sourcenodes as).\n                    V \\<notin> Def n''\\<rbrakk>\n                \\<Longrightarrow> (V, as @ as'', as @ as')\n                                  \\<in> dependent_live_vars n';\n        (V, as'', as') \\<in> dependent_live_vars n';\n        \\<forall>n''\\<in>set (sourcenodes (a # as)).\n           V \\<notin> Def n''\\<rbrakk>\n       \\<Longrightarrow> (V, (a # as) @ as'', (a # as) @ as')\n                         \\<in> dependent_live_vars n'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>(V, as'', as') \\<in> dependent_live_vars n';\n                 \\<forall>n''\\<in>set (sourcenodes as).\n                    V \\<notin> Def n''\\<rbrakk>\n                \\<Longrightarrow> (V, as @ as'', as @ as')\n                                  \\<in> dependent_live_vars n';\n        (V, as'', as') \\<in> dependent_live_vars n';\n        \\<forall>n''\\<in>set (sourcenodes (a # as)).\n           V \\<notin> Def n''\\<rbrakk>\n       \\<Longrightarrow> (V, (a # as) @ as'', (a # as) @ as')\n                         \\<in> dependent_live_vars n'", "case (Cons ax asx)"], ["proof (state)\nthis:\n  \\<lbrakk>(V, as'', as') \\<in> dependent_live_vars n';\n   \\<forall>n''\\<in>set (sourcenodes asx). V \\<notin> Def n''\\<rbrakk>\n  \\<Longrightarrow> (V, asx @ as'', asx @ as') \\<in> dependent_live_vars n'\n  (V, as'', as') \\<in> dependent_live_vars n'\n  \\<forall>n''\\<in>set (sourcenodes (ax # asx)). V \\<notin> Def n''\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>(V, as'', as') \\<in> dependent_live_vars n';\n                 \\<forall>n''\\<in>set (sourcenodes as).\n                    V \\<notin> Def n''\\<rbrakk>\n                \\<Longrightarrow> (V, as @ as'', as @ as')\n                                  \\<in> dependent_live_vars n';\n        (V, as'', as') \\<in> dependent_live_vars n';\n        \\<forall>n''\\<in>set (sourcenodes (a # as)).\n           V \\<notin> Def n''\\<rbrakk>\n       \\<Longrightarrow> (V, (a # as) @ as'', (a # as) @ as')\n                         \\<in> dependent_live_vars n'", "note IH = \\<open>\\<lbrakk>(V,as'',as') \\<in> dependent_live_vars n';\n                \\<forall>n''\\<in>set (sourcenodes asx). V \\<notin> Def n''\\<rbrakk>\n               \\<Longrightarrow> (V, asx@as'',asx@as') \\<in> dependent_live_vars n'\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>(V, as'', as') \\<in> dependent_live_vars n';\n   \\<forall>n''\\<in>set (sourcenodes asx). V \\<notin> Def n''\\<rbrakk>\n  \\<Longrightarrow> (V, asx @ as'', asx @ as') \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>(V, as'', as') \\<in> dependent_live_vars n';\n                 \\<forall>n''\\<in>set (sourcenodes as).\n                    V \\<notin> Def n''\\<rbrakk>\n                \\<Longrightarrow> (V, as @ as'', as @ as')\n                                  \\<in> dependent_live_vars n';\n        (V, as'', as') \\<in> dependent_live_vars n';\n        \\<forall>n''\\<in>set (sourcenodes (a # as)).\n           V \\<notin> Def n''\\<rbrakk>\n       \\<Longrightarrow> (V, (a # as) @ as'', (a # as) @ as')\n                         \\<in> dependent_live_vars n'", "from \\<open>\\<forall>n''\\<in>set (sourcenodes (ax#asx)). V \\<notin> Def n''\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>n''\\<in>set (sourcenodes (ax # asx)). V \\<notin> Def n''", "have \"\\<forall>n''\\<in>set (sourcenodes asx). V \\<notin> Def n''\""], ["proof (prove)\nusing this:\n  \\<forall>n''\\<in>set (sourcenodes (ax # asx)). V \\<notin> Def n''\n\ngoal (1 subgoal):\n 1. \\<forall>n''\\<in>set (sourcenodes asx). V \\<notin> Def n''", "by(auto simp:sourcenodes_def)"], ["proof (state)\nthis:\n  \\<forall>n''\\<in>set (sourcenodes asx). V \\<notin> Def n''\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>(V, as'', as') \\<in> dependent_live_vars n';\n                 \\<forall>n''\\<in>set (sourcenodes as).\n                    V \\<notin> Def n''\\<rbrakk>\n                \\<Longrightarrow> (V, as @ as'', as @ as')\n                                  \\<in> dependent_live_vars n';\n        (V, as'', as') \\<in> dependent_live_vars n';\n        \\<forall>n''\\<in>set (sourcenodes (a # as)).\n           V \\<notin> Def n''\\<rbrakk>\n       \\<Longrightarrow> (V, (a # as) @ as'', (a # as) @ as')\n                         \\<in> dependent_live_vars n'", "from IH[OF \\<open>(V,as'',as') \\<in> dependent_live_vars n'\\<close> this]"], ["proof (chain)\npicking this:\n  (V, asx @ as'', asx @ as') \\<in> dependent_live_vars n'", "have \"(V,asx@as'',asx@as') \\<in> dependent_live_vars n'\""], ["proof (prove)\nusing this:\n  (V, asx @ as'', asx @ as') \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. (V, asx @ as'', asx @ as') \\<in> dependent_live_vars n'", "."], ["proof (state)\nthis:\n  (V, asx @ as'', asx @ as') \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>(V, as'', as') \\<in> dependent_live_vars n';\n                 \\<forall>n''\\<in>set (sourcenodes as).\n                    V \\<notin> Def n''\\<rbrakk>\n                \\<Longrightarrow> (V, as @ as'', as @ as')\n                                  \\<in> dependent_live_vars n';\n        (V, as'', as') \\<in> dependent_live_vars n';\n        \\<forall>n''\\<in>set (sourcenodes (a # as)).\n           V \\<notin> Def n''\\<rbrakk>\n       \\<Longrightarrow> (V, (a # as) @ as'', (a # as) @ as')\n                         \\<in> dependent_live_vars n'", "from \\<open>as' \\<noteq> []\\<close> \\<open>(V,as'',as') \\<in> dependent_live_vars n'\\<close>"], ["proof (chain)\npicking this:\n  as' \\<noteq> []\n  (V, as'', as') \\<in> dependent_live_vars n'", "have \"n' = last(targetnodes as')\""], ["proof (prove)\nusing this:\n  as' \\<noteq> []\n  (V, as'', as') \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. n' = last (targetnodes as')", "by(fastforce intro:dependent_live_vars_lastnode)"], ["proof (state)\nthis:\n  n' = last (targetnodes as')\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>(V, as'', as') \\<in> dependent_live_vars n';\n                 \\<forall>n''\\<in>set (sourcenodes as).\n                    V \\<notin> Def n''\\<rbrakk>\n                \\<Longrightarrow> (V, as @ as'', as @ as')\n                                  \\<in> dependent_live_vars n';\n        (V, as'', as') \\<in> dependent_live_vars n';\n        \\<forall>n''\\<in>set (sourcenodes (a # as)).\n           V \\<notin> Def n''\\<rbrakk>\n       \\<Longrightarrow> (V, (a # as) @ as'', (a # as) @ as')\n                         \\<in> dependent_live_vars n'", "with \\<open>as' \\<noteq> []\\<close>"], ["proof (chain)\npicking this:\n  as' \\<noteq> []\n  n' = last (targetnodes as')", "have \"n' = last(targetnodes (ax#asx@as'))\""], ["proof (prove)\nusing this:\n  as' \\<noteq> []\n  n' = last (targetnodes as')\n\ngoal (1 subgoal):\n 1. n' = last (targetnodes (ax # asx @ as'))", "by(fastforce simp:targetnodes_def)"], ["proof (state)\nthis:\n  n' = last (targetnodes (ax # asx @ as'))\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>(V, as'', as') \\<in> dependent_live_vars n';\n                 \\<forall>n''\\<in>set (sourcenodes as).\n                    V \\<notin> Def n''\\<rbrakk>\n                \\<Longrightarrow> (V, as @ as'', as @ as')\n                                  \\<in> dependent_live_vars n';\n        (V, as'', as') \\<in> dependent_live_vars n';\n        \\<forall>n''\\<in>set (sourcenodes (a # as)).\n           V \\<notin> Def n''\\<rbrakk>\n       \\<Longrightarrow> (V, (a # as) @ as'', (a # as) @ as')\n                         \\<in> dependent_live_vars n'", "have \"\\<not> sourcenode ax -{V}ax#asx@as''\\<rightarrow>\\<^sub>d\\<^sub>d last(targetnodes (ax#asx@as''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> sourcenode\n            ax -{V}ax #\n                   asx @\n                   as''\\<rightarrow>\\<^sub>d\\<^sub>d last\n                (targetnodes (ax # asx @ as''))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. sourcenode\n     ax -{V}ax #\n            asx @\n            as''\\<rightarrow>\\<^sub>d\\<^sub>d last\n         (targetnodes (ax # asx @ as'')) \\<Longrightarrow>\n    False", "assume \"sourcenode ax -{V}ax#asx@as''\\<rightarrow>\\<^sub>d\\<^sub>d last(targetnodes (ax#asx@as''))\""], ["proof (state)\nthis:\n  sourcenode\n   ax -{V}ax #\n          asx @\n          as''\\<rightarrow>\\<^sub>d\\<^sub>d last\n       (targetnodes (ax # asx @ as''))\n\ngoal (1 subgoal):\n 1. sourcenode\n     ax -{V}ax #\n            asx @\n            as''\\<rightarrow>\\<^sub>d\\<^sub>d last\n         (targetnodes (ax # asx @ as'')) \\<Longrightarrow>\n    False", "hence \"sourcenode ax -{V}ax#asx@as''\\<rightarrow>\\<^sub>d\\<^sub>d last(targetnodes (ax#asx@as''))\""], ["proof (prove)\nusing this:\n  sourcenode\n   ax -{V}ax #\n          asx @\n          as''\\<rightarrow>\\<^sub>d\\<^sub>d last\n       (targetnodes (ax # asx @ as''))\n\ngoal (1 subgoal):\n 1. sourcenode\n     ax -{V}ax #\n            asx @\n            as''\\<rightarrow>\\<^sub>d\\<^sub>d last\n         (targetnodes (ax # asx @ as''))", "by simp"], ["proof (state)\nthis:\n  sourcenode\n   ax -{V}ax #\n          asx @\n          as''\\<rightarrow>\\<^sub>d\\<^sub>d last\n       (targetnodes (ax # asx @ as''))\n\ngoal (1 subgoal):\n 1. sourcenode\n     ax -{V}ax #\n            asx @\n            as''\\<rightarrow>\\<^sub>d\\<^sub>d last\n         (targetnodes (ax # asx @ as'')) \\<Longrightarrow>\n    False", "with \\<open>\\<forall>n''\\<in>set (sourcenodes (ax#asx)). V \\<notin> Def n''\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>n''\\<in>set (sourcenodes (ax # asx)). V \\<notin> Def n''\n  sourcenode\n   ax -{V}ax #\n          asx @\n          as''\\<rightarrow>\\<^sub>d\\<^sub>d last\n       (targetnodes (ax # asx @ as''))", "show False"], ["proof (prove)\nusing this:\n  \\<forall>n''\\<in>set (sourcenodes (ax # asx)). V \\<notin> Def n''\n  sourcenode\n   ax -{V}ax #\n          asx @\n          as''\\<rightarrow>\\<^sub>d\\<^sub>d last\n       (targetnodes (ax # asx @ as''))\n\ngoal (1 subgoal):\n 1. False", "by(fastforce elim:DynPDG_edge.cases \n                    simp:dyn_data_dependence_def sourcenodes_def)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> sourcenode\n          ax -{V}ax #\n                 asx @\n                 as''\\<rightarrow>\\<^sub>d\\<^sub>d last\n              (targetnodes (ax # asx @ as''))\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>(V, as'', as') \\<in> dependent_live_vars n';\n                 \\<forall>n''\\<in>set (sourcenodes as).\n                    V \\<notin> Def n''\\<rbrakk>\n                \\<Longrightarrow> (V, as @ as'', as @ as')\n                                  \\<in> dependent_live_vars n';\n        (V, as'', as') \\<in> dependent_live_vars n';\n        \\<forall>n''\\<in>set (sourcenodes (a # as)).\n           V \\<notin> Def n''\\<rbrakk>\n       \\<Longrightarrow> (V, (a # as) @ as'', (a # as) @ as')\n                         \\<in> dependent_live_vars n'", "with \\<open>(V,asx@as'',asx@as') \\<in> dependent_live_vars n'\\<close> \n      \\<open>n' = last(targetnodes (ax#asx@as'))\\<close>"], ["proof (chain)\npicking this:\n  (V, asx @ as'', asx @ as') \\<in> dependent_live_vars n'\n  n' = last (targetnodes (ax # asx @ as'))\n  \\<not> sourcenode\n          ax -{V}ax #\n                 asx @\n                 as''\\<rightarrow>\\<^sub>d\\<^sub>d last\n              (targetnodes (ax # asx @ as''))", "show ?case"], ["proof (prove)\nusing this:\n  (V, asx @ as'', asx @ as') \\<in> dependent_live_vars n'\n  n' = last (targetnodes (ax # asx @ as'))\n  \\<not> sourcenode\n          ax -{V}ax #\n                 asx @\n                 as''\\<rightarrow>\\<^sub>d\\<^sub>d last\n              (targetnodes (ax # asx @ as''))\n\ngoal (1 subgoal):\n 1. (V, (ax # asx) @ as'', (ax # asx) @ as') \\<in> dependent_live_vars n'", "by(fastforce intro:dep_vars_Cons_keep)"], ["proof (state)\nthis:\n  (V, (ax # asx) @ as'', (ax # asx) @ as') \\<in> dependent_live_vars n'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (V, as @ as'', as @ as') \\<in> dependent_live_vars n'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dependent_live_vars_cdep_dependent_live_vars:\n  assumes \"n'' -as''\\<rightarrow>\\<^sub>c\\<^sub>d n'\" and \"(V',as',as) \\<in> dependent_live_vars n''\"\n  shows \"(V',as',as@as'') \\<in> dependent_live_vars n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (V', as', as @ as'') \\<in> dependent_live_vars n'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (V', as', as @ as'') \\<in> dependent_live_vars n'", "from \\<open>n'' -as''\\<rightarrow>\\<^sub>c\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -as''\\<rightarrow>\\<^sub>c\\<^sub>d n'", "have \"as'' \\<noteq> []\""], ["proof (prove)\nusing this:\n  n'' -as''\\<rightarrow>\\<^sub>c\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. as'' \\<noteq> []", "by(fastforce elim:DynPDG_edge.cases dest:dyn_control_dependence_path)"], ["proof (state)\nthis:\n  as'' \\<noteq> []\n\ngoal (1 subgoal):\n 1. (V', as', as @ as'') \\<in> dependent_live_vars n'", "with \\<open>n'' -as''\\<rightarrow>\\<^sub>c\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -as''\\<rightarrow>\\<^sub>c\\<^sub>d n'\n  as'' \\<noteq> []", "have \"last(targetnodes as'') = n'\""], ["proof (prove)\nusing this:\n  n'' -as''\\<rightarrow>\\<^sub>c\\<^sub>d n'\n  as'' \\<noteq> []\n\ngoal (1 subgoal):\n 1. last (targetnodes as'') = n'", "by(fastforce intro:path_targetnode elim:DynPDG_cdep_edge_CFG_path(1))"], ["proof (state)\nthis:\n  last (targetnodes as'') = n'\n\ngoal (1 subgoal):\n 1. (V', as', as @ as'') \\<in> dependent_live_vars n'", "from \\<open>(V',as',as) \\<in> dependent_live_vars n''\\<close>"], ["proof (chain)\npicking this:\n  (V', as', as) \\<in> dependent_live_vars n''", "show ?thesis"], ["proof (prove)\nusing this:\n  (V', as', as) \\<in> dependent_live_vars n''\n\ngoal (1 subgoal):\n 1. (V', as', as @ as'') \\<in> dependent_live_vars n'", "proof(induct rule:dependent_live_vars.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>V.\n       V \\<in> Use n'' \\<Longrightarrow>\n       (V, [], [] @ as'') \\<in> dependent_live_vars n'\n 2. \\<And>V a as' n''a as''a.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n''a;\n        n''a -as''a\\<rightarrow>\\<^sub>d* n''\\<rbrakk>\n       \\<Longrightarrow> (V, [], (a # as' @ as''a) @ as'')\n                         \\<in> dependent_live_vars n'\n 3. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        V' \\<in> Use (sourcenode a); n'' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V', [], (a # as) @ as'')\n                         \\<in> dependent_live_vars n'\n 4. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        n'' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as', (a # as) @ as'')\n                         \\<in> dependent_live_vars n'", "case (dep_vars_Use V')"], ["proof (state)\nthis:\n  V' \\<in> Use n''\n\ngoal (4 subgoals):\n 1. \\<And>V.\n       V \\<in> Use n'' \\<Longrightarrow>\n       (V, [], [] @ as'') \\<in> dependent_live_vars n'\n 2. \\<And>V a as' n''a as''a.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n''a;\n        n''a -as''a\\<rightarrow>\\<^sub>d* n''\\<rbrakk>\n       \\<Longrightarrow> (V, [], (a # as' @ as''a) @ as'')\n                         \\<in> dependent_live_vars n'\n 3. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        V' \\<in> Use (sourcenode a); n'' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V', [], (a # as) @ as'')\n                         \\<in> dependent_live_vars n'\n 4. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        n'' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as', (a # as) @ as'')\n                         \\<in> dependent_live_vars n'", "from \\<open>V' \\<in> Use n''\\<close> \\<open>n'' -as''\\<rightarrow>\\<^sub>c\\<^sub>d n'\\<close> \\<open>last(targetnodes as'') = n'\\<close>"], ["proof (chain)\npicking this:\n  V' \\<in> Use n''\n  n'' -as''\\<rightarrow>\\<^sub>c\\<^sub>d n'\n  last (targetnodes as'') = n'", "show ?case"], ["proof (prove)\nusing this:\n  V' \\<in> Use n''\n  n'' -as''\\<rightarrow>\\<^sub>c\\<^sub>d n'\n  last (targetnodes as'') = n'\n\ngoal (1 subgoal):\n 1. (V', [], [] @ as'') \\<in> dependent_live_vars n'", "by(fastforce intro:dependent_live_vars_cdep_empty_fst simp:targetnodes_def)"], ["proof (state)\nthis:\n  (V', [], [] @ as'') \\<in> dependent_live_vars n'\n\ngoal (3 subgoals):\n 1. \\<And>V a as' n''a as''a.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n''a;\n        n''a -as''a\\<rightarrow>\\<^sub>d* n''\\<rbrakk>\n       \\<Longrightarrow> (V, [], (a # as' @ as''a) @ as'')\n                         \\<in> dependent_live_vars n'\n 2. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        V' \\<in> Use (sourcenode a); n'' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V', [], (a # as) @ as'')\n                         \\<in> dependent_live_vars n'\n 3. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        n'' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as', (a # as) @ as'')\n                         \\<in> dependent_live_vars n'", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>V a as' n''a as''a.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n''a;\n        n''a -as''a\\<rightarrow>\\<^sub>d* n''\\<rbrakk>\n       \\<Longrightarrow> (V, [], (a # as' @ as''a) @ as'')\n                         \\<in> dependent_live_vars n'\n 2. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        V' \\<in> Use (sourcenode a); n'' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V', [], (a # as) @ as'')\n                         \\<in> dependent_live_vars n'\n 3. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        n'' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as', (a # as) @ as'')\n                         \\<in> dependent_live_vars n'", "case (dep_vars_Cons_cdep V a as' nx asx)"], ["proof (state)\nthis:\n  V \\<in> Use (sourcenode a)\n  sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d nx\n  nx -asx\\<rightarrow>\\<^sub>d* n''\n\ngoal (3 subgoals):\n 1. \\<And>V a as' n''a as''a.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n''a;\n        n''a -as''a\\<rightarrow>\\<^sub>d* n''\\<rbrakk>\n       \\<Longrightarrow> (V, [], (a # as' @ as''a) @ as'')\n                         \\<in> dependent_live_vars n'\n 2. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        V' \\<in> Use (sourcenode a); n'' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V', [], (a # as) @ as'')\n                         \\<in> dependent_live_vars n'\n 3. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        n'' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as', (a # as) @ as'')\n                         \\<in> dependent_live_vars n'", "from \\<open>n'' -as''\\<rightarrow>\\<^sub>c\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -as''\\<rightarrow>\\<^sub>c\\<^sub>d n'", "have \"n'' -as''\\<rightarrow>\\<^sub>d* n'\""], ["proof (prove)\nusing this:\n  n'' -as''\\<rightarrow>\\<^sub>c\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. n'' -as''\\<rightarrow>\\<^sub>d* n'", "by(rule DynPDG_path_cdep)"], ["proof (state)\nthis:\n  n'' -as''\\<rightarrow>\\<^sub>d* n'\n\ngoal (3 subgoals):\n 1. \\<And>V a as' n''a as''a.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n''a;\n        n''a -as''a\\<rightarrow>\\<^sub>d* n''\\<rbrakk>\n       \\<Longrightarrow> (V, [], (a # as' @ as''a) @ as'')\n                         \\<in> dependent_live_vars n'\n 2. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        V' \\<in> Use (sourcenode a); n'' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V', [], (a # as) @ as'')\n                         \\<in> dependent_live_vars n'\n 3. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        n'' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as', (a # as) @ as'')\n                         \\<in> dependent_live_vars n'", "with \\<open>nx -asx\\<rightarrow>\\<^sub>d* n''\\<close>"], ["proof (chain)\npicking this:\n  nx -asx\\<rightarrow>\\<^sub>d* n''\n  n'' -as''\\<rightarrow>\\<^sub>d* n'", "have \"nx -asx@as''\\<rightarrow>\\<^sub>d* n'\""], ["proof (prove)\nusing this:\n  nx -asx\\<rightarrow>\\<^sub>d* n''\n  n'' -as''\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. nx -asx @ as''\\<rightarrow>\\<^sub>d* n'", "by -(rule DynPDG_path_Append)"], ["proof (state)\nthis:\n  nx -asx @ as''\\<rightarrow>\\<^sub>d* n'\n\ngoal (3 subgoals):\n 1. \\<And>V a as' n''a as''a.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n''a;\n        n''a -as''a\\<rightarrow>\\<^sub>d* n''\\<rbrakk>\n       \\<Longrightarrow> (V, [], (a # as' @ as''a) @ as'')\n                         \\<in> dependent_live_vars n'\n 2. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        V' \\<in> Use (sourcenode a); n'' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V', [], (a # as) @ as'')\n                         \\<in> dependent_live_vars n'\n 3. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        n'' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as', (a # as) @ as'')\n                         \\<in> dependent_live_vars n'", "with \\<open>V \\<in> Use (sourcenode a)\\<close> \\<open>(sourcenode a) -a#as'\\<rightarrow>\\<^sub>c\\<^sub>d nx\\<close>"], ["proof (chain)\npicking this:\n  V \\<in> Use (sourcenode a)\n  sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d nx\n  nx -asx @ as''\\<rightarrow>\\<^sub>d* n'", "show ?case"], ["proof (prove)\nusing this:\n  V \\<in> Use (sourcenode a)\n  sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d nx\n  nx -asx @ as''\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. (V, [], (a # as' @ asx) @ as'') \\<in> dependent_live_vars n'", "by(fastforce intro:dependent_live_vars.dep_vars_Cons_cdep)"], ["proof (state)\nthis:\n  (V, [], (a # as' @ asx) @ as'') \\<in> dependent_live_vars n'\n\ngoal (2 subgoals):\n 1. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        V' \\<in> Use (sourcenode a); n'' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V', [], (a # as) @ as'')\n                         \\<in> dependent_live_vars n'\n 2. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        n'' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as', (a # as) @ as'')\n                         \\<in> dependent_live_vars n'", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        V' \\<in> Use (sourcenode a); n'' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V', [], (a # as) @ as'')\n                         \\<in> dependent_live_vars n'\n 2. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        n'' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as', (a # as) @ as'')\n                         \\<in> dependent_live_vars n'", "case (dep_vars_Cons_ddep V as' as V' a)"], ["proof (state)\nthis:\n  (V, as', as) \\<in> dependent_live_vars n''\n  (V, as', as @ as'') \\<in> dependent_live_vars n'\n  V' \\<in> Use (sourcenode a)\n  n'' = last (targetnodes (a # as))\n  sourcenode\n   a -{V}a # as'\\<rightarrow>\\<^sub>d\\<^sub>d last (targetnodes (a # as'))\n\ngoal (2 subgoals):\n 1. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        V' \\<in> Use (sourcenode a); n'' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V', [], (a # as) @ as'')\n                         \\<in> dependent_live_vars n'\n 2. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        n'' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as', (a # as) @ as'')\n                         \\<in> dependent_live_vars n'", "from \\<open>as'' \\<noteq> []\\<close> \\<open>last(targetnodes as'') = n'\\<close>"], ["proof (chain)\npicking this:\n  as'' \\<noteq> []\n  last (targetnodes as'') = n'", "have \"n' = last(targetnodes ((a#as)@as''))\""], ["proof (prove)\nusing this:\n  as'' \\<noteq> []\n  last (targetnodes as'') = n'\n\ngoal (1 subgoal):\n 1. n' = last (targetnodes ((a # as) @ as''))", "by(simp add:targetnodes_def)"], ["proof (state)\nthis:\n  n' = last (targetnodes ((a # as) @ as''))\n\ngoal (2 subgoals):\n 1. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        V' \\<in> Use (sourcenode a); n'' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V', [], (a # as) @ as'')\n                         \\<in> dependent_live_vars n'\n 2. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        n'' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as', (a # as) @ as'')\n                         \\<in> dependent_live_vars n'", "with dep_vars_Cons_ddep"], ["proof (chain)\npicking this:\n  (V, as', as) \\<in> dependent_live_vars n''\n  (V, as', as @ as'') \\<in> dependent_live_vars n'\n  V' \\<in> Use (sourcenode a)\n  n'' = last (targetnodes (a # as))\n  sourcenode\n   a -{V}a # as'\\<rightarrow>\\<^sub>d\\<^sub>d last (targetnodes (a # as'))\n  n' = last (targetnodes ((a # as) @ as''))", "show ?case"], ["proof (prove)\nusing this:\n  (V, as', as) \\<in> dependent_live_vars n''\n  (V, as', as @ as'') \\<in> dependent_live_vars n'\n  V' \\<in> Use (sourcenode a)\n  n'' = last (targetnodes (a # as))\n  sourcenode\n   a -{V}a # as'\\<rightarrow>\\<^sub>d\\<^sub>d last (targetnodes (a # as'))\n  n' = last (targetnodes ((a # as) @ as''))\n\ngoal (1 subgoal):\n 1. (V', [], (a # as) @ as'') \\<in> dependent_live_vars n'", "by(fastforce intro:dependent_live_vars.dep_vars_Cons_ddep)"], ["proof (state)\nthis:\n  (V', [], (a # as) @ as'') \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        n'' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as', (a # as) @ as'')\n                         \\<in> dependent_live_vars n'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        n'' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as', (a # as) @ as'')\n                         \\<in> dependent_live_vars n'", "case (dep_vars_Cons_keep V as' as a)"], ["proof (state)\nthis:\n  (V, as', as) \\<in> dependent_live_vars n''\n  (V, as', as @ as'') \\<in> dependent_live_vars n'\n  n'' = last (targetnodes (a # as))\n  \\<not> sourcenode\n          a -{V}a #\n                as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n            (targetnodes (a # as'))\n\ngoal (1 subgoal):\n 1. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        n'' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as', (a # as) @ as'')\n                         \\<in> dependent_live_vars n'", "from \\<open>as'' \\<noteq> []\\<close> \\<open>last(targetnodes as'') = n'\\<close>"], ["proof (chain)\npicking this:\n  as'' \\<noteq> []\n  last (targetnodes as'') = n'", "have \"n' = last(targetnodes ((a#as)@as''))\""], ["proof (prove)\nusing this:\n  as'' \\<noteq> []\n  last (targetnodes as'') = n'\n\ngoal (1 subgoal):\n 1. n' = last (targetnodes ((a # as) @ as''))", "by(simp add:targetnodes_def)"], ["proof (state)\nthis:\n  n' = last (targetnodes ((a # as) @ as''))\n\ngoal (1 subgoal):\n 1. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        n'' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as', (a # as) @ as'')\n                         \\<in> dependent_live_vars n'", "with dep_vars_Cons_keep"], ["proof (chain)\npicking this:\n  (V, as', as) \\<in> dependent_live_vars n''\n  (V, as', as @ as'') \\<in> dependent_live_vars n'\n  n'' = last (targetnodes (a # as))\n  \\<not> sourcenode\n          a -{V}a #\n                as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n            (targetnodes (a # as'))\n  n' = last (targetnodes ((a # as) @ as''))", "show ?case"], ["proof (prove)\nusing this:\n  (V, as', as) \\<in> dependent_live_vars n''\n  (V, as', as @ as'') \\<in> dependent_live_vars n'\n  n'' = last (targetnodes (a # as))\n  \\<not> sourcenode\n          a -{V}a #\n                as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n            (targetnodes (a # as'))\n  n' = last (targetnodes ((a # as) @ as''))\n\ngoal (1 subgoal):\n 1. (V, a # as', (a # as) @ as'') \\<in> dependent_live_vars n'", "by(fastforce intro:dependent_live_vars.dep_vars_Cons_keep)"], ["proof (state)\nthis:\n  (V, a # as', (a # as) @ as'') \\<in> dependent_live_vars n'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (V', as', as @ as'') \\<in> dependent_live_vars n'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dependent_live_vars_ddep_dependent_live_vars:\n  assumes \"n'' -{V}as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\" and \"(V',as',as) \\<in> dependent_live_vars n''\"\n  shows \"(V',as',as@as'') \\<in> dependent_live_vars n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (V', as', as @ as'') \\<in> dependent_live_vars n'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (V', as', as @ as'') \\<in> dependent_live_vars n'", "from \\<open>n'' -{V}as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -{V}as''\\<rightarrow>\\<^sub>d\\<^sub>d n'", "have \"as'' \\<noteq> []\""], ["proof (prove)\nusing this:\n  n'' -{V}as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. as'' \\<noteq> []", "by(rule DynPDG_ddep_edge_CFG_path(2))"], ["proof (state)\nthis:\n  as'' \\<noteq> []\n\ngoal (1 subgoal):\n 1. (V', as', as @ as'') \\<in> dependent_live_vars n'", "with \\<open>n'' -{V}as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -{V}as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  as'' \\<noteq> []", "have \"last(targetnodes as'') = n'\""], ["proof (prove)\nusing this:\n  n'' -{V}as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  as'' \\<noteq> []\n\ngoal (1 subgoal):\n 1. last (targetnodes as'') = n'", "by(fastforce intro:path_targetnode elim:DynPDG_ddep_edge_CFG_path(1))"], ["proof (state)\nthis:\n  last (targetnodes as'') = n'\n\ngoal (1 subgoal):\n 1. (V', as', as @ as'') \\<in> dependent_live_vars n'", "from \\<open>n'' -{V}as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -{V}as''\\<rightarrow>\\<^sub>d\\<^sub>d n'", "have notExit:\"n' \\<noteq> (_Exit_)\""], ["proof (prove)\nusing this:\n  n'' -{V}as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. n' \\<noteq> (_Exit_)", "by(fastforce elim:DynPDG_edge.cases simp:dyn_data_dependence_def)"], ["proof (state)\nthis:\n  n' \\<noteq> (_Exit_)\n\ngoal (1 subgoal):\n 1. (V', as', as @ as'') \\<in> dependent_live_vars n'", "from \\<open>(V',as',as) \\<in> dependent_live_vars n''\\<close>"], ["proof (chain)\npicking this:\n  (V', as', as) \\<in> dependent_live_vars n''", "show ?thesis"], ["proof (prove)\nusing this:\n  (V', as', as) \\<in> dependent_live_vars n''\n\ngoal (1 subgoal):\n 1. (V', as', as @ as'') \\<in> dependent_live_vars n'", "proof(induct rule:dependent_live_vars.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>V.\n       V \\<in> Use n'' \\<Longrightarrow>\n       (V, [], [] @ as'') \\<in> dependent_live_vars n'\n 2. \\<And>V a as' n''a as''a.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n''a;\n        n''a -as''a\\<rightarrow>\\<^sub>d* n''\\<rbrakk>\n       \\<Longrightarrow> (V, [], (a # as' @ as''a) @ as'')\n                         \\<in> dependent_live_vars n'\n 3. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        V' \\<in> Use (sourcenode a); n'' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V', [], (a # as) @ as'')\n                         \\<in> dependent_live_vars n'\n 4. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        n'' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as', (a # as) @ as'')\n                         \\<in> dependent_live_vars n'", "case (dep_vars_Use V')"], ["proof (state)\nthis:\n  V' \\<in> Use n''\n\ngoal (4 subgoals):\n 1. \\<And>V.\n       V \\<in> Use n'' \\<Longrightarrow>\n       (V, [], [] @ as'') \\<in> dependent_live_vars n'\n 2. \\<And>V a as' n''a as''a.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n''a;\n        n''a -as''a\\<rightarrow>\\<^sub>d* n''\\<rbrakk>\n       \\<Longrightarrow> (V, [], (a # as' @ as''a) @ as'')\n                         \\<in> dependent_live_vars n'\n 3. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        V' \\<in> Use (sourcenode a); n'' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V', [], (a # as) @ as'')\n                         \\<in> dependent_live_vars n'\n 4. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        n'' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as', (a # as) @ as'')\n                         \\<in> dependent_live_vars n'", "from \\<open>V' \\<in> Use n''\\<close> \\<open>n'' -{V}as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close> \\<open>last(targetnodes as'') = n'\\<close>"], ["proof (chain)\npicking this:\n  V' \\<in> Use n''\n  n'' -{V}as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  last (targetnodes as'') = n'", "show ?case"], ["proof (prove)\nusing this:\n  V' \\<in> Use n''\n  n'' -{V}as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  last (targetnodes as'') = n'\n\ngoal (1 subgoal):\n 1. (V', [], [] @ as'') \\<in> dependent_live_vars n'", "by(fastforce intro:dependent_live_vars_ddep_empty_fst simp:targetnodes_def)"], ["proof (state)\nthis:\n  (V', [], [] @ as'') \\<in> dependent_live_vars n'\n\ngoal (3 subgoals):\n 1. \\<And>V a as' n''a as''a.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n''a;\n        n''a -as''a\\<rightarrow>\\<^sub>d* n''\\<rbrakk>\n       \\<Longrightarrow> (V, [], (a # as' @ as''a) @ as'')\n                         \\<in> dependent_live_vars n'\n 2. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        V' \\<in> Use (sourcenode a); n'' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V', [], (a # as) @ as'')\n                         \\<in> dependent_live_vars n'\n 3. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        n'' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as', (a # as) @ as'')\n                         \\<in> dependent_live_vars n'", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>V a as' n''a as''a.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n''a;\n        n''a -as''a\\<rightarrow>\\<^sub>d* n''\\<rbrakk>\n       \\<Longrightarrow> (V, [], (a # as' @ as''a) @ as'')\n                         \\<in> dependent_live_vars n'\n 2. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        V' \\<in> Use (sourcenode a); n'' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V', [], (a # as) @ as'')\n                         \\<in> dependent_live_vars n'\n 3. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        n'' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as', (a # as) @ as'')\n                         \\<in> dependent_live_vars n'", "case (dep_vars_Cons_cdep V' a as' nx asx)"], ["proof (state)\nthis:\n  V' \\<in> Use (sourcenode a)\n  sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d nx\n  nx -asx\\<rightarrow>\\<^sub>d* n''\n\ngoal (3 subgoals):\n 1. \\<And>V a as' n''a as''a.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n''a;\n        n''a -as''a\\<rightarrow>\\<^sub>d* n''\\<rbrakk>\n       \\<Longrightarrow> (V, [], (a # as' @ as''a) @ as'')\n                         \\<in> dependent_live_vars n'\n 2. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        V' \\<in> Use (sourcenode a); n'' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V', [], (a # as) @ as'')\n                         \\<in> dependent_live_vars n'\n 3. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        n'' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as', (a # as) @ as'')\n                         \\<in> dependent_live_vars n'", "from \\<open>n'' -{V}as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -{V}as''\\<rightarrow>\\<^sub>d\\<^sub>d n'", "have \"n'' -as''\\<rightarrow>\\<^sub>d* n'\""], ["proof (prove)\nusing this:\n  n'' -{V}as''\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. n'' -as''\\<rightarrow>\\<^sub>d* n'", "by(rule DynPDG_path_ddep)"], ["proof (state)\nthis:\n  n'' -as''\\<rightarrow>\\<^sub>d* n'\n\ngoal (3 subgoals):\n 1. \\<And>V a as' n''a as''a.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n''a;\n        n''a -as''a\\<rightarrow>\\<^sub>d* n''\\<rbrakk>\n       \\<Longrightarrow> (V, [], (a # as' @ as''a) @ as'')\n                         \\<in> dependent_live_vars n'\n 2. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        V' \\<in> Use (sourcenode a); n'' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V', [], (a # as) @ as'')\n                         \\<in> dependent_live_vars n'\n 3. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        n'' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as', (a # as) @ as'')\n                         \\<in> dependent_live_vars n'", "with \\<open>nx -asx\\<rightarrow>\\<^sub>d* n''\\<close>"], ["proof (chain)\npicking this:\n  nx -asx\\<rightarrow>\\<^sub>d* n''\n  n'' -as''\\<rightarrow>\\<^sub>d* n'", "have \"nx -asx@as''\\<rightarrow>\\<^sub>d* n'\""], ["proof (prove)\nusing this:\n  nx -asx\\<rightarrow>\\<^sub>d* n''\n  n'' -as''\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. nx -asx @ as''\\<rightarrow>\\<^sub>d* n'", "by -(rule DynPDG_path_Append)"], ["proof (state)\nthis:\n  nx -asx @ as''\\<rightarrow>\\<^sub>d* n'\n\ngoal (3 subgoals):\n 1. \\<And>V a as' n''a as''a.\n       \\<lbrakk>V \\<in> Use (sourcenode a);\n        sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d n''a;\n        n''a -as''a\\<rightarrow>\\<^sub>d* n''\\<rbrakk>\n       \\<Longrightarrow> (V, [], (a # as' @ as''a) @ as'')\n                         \\<in> dependent_live_vars n'\n 2. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        V' \\<in> Use (sourcenode a); n'' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V', [], (a # as) @ as'')\n                         \\<in> dependent_live_vars n'\n 3. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        n'' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as', (a # as) @ as'')\n                         \\<in> dependent_live_vars n'", "with \\<open>V' \\<in> Use (sourcenode a)\\<close> \\<open>sourcenode a -a#as'\\<rightarrow>\\<^sub>c\\<^sub>d nx\\<close> notExit"], ["proof (chain)\npicking this:\n  V' \\<in> Use (sourcenode a)\n  sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d nx\n  n' \\<noteq> (_Exit_)\n  nx -asx @ as''\\<rightarrow>\\<^sub>d* n'", "show ?case"], ["proof (prove)\nusing this:\n  V' \\<in> Use (sourcenode a)\n  sourcenode a -a # as'\\<rightarrow>\\<^sub>c\\<^sub>d nx\n  n' \\<noteq> (_Exit_)\n  nx -asx @ as''\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. (V', [], (a # as' @ asx) @ as'') \\<in> dependent_live_vars n'", "by(fastforce intro:dependent_live_vars.dep_vars_Cons_cdep)"], ["proof (state)\nthis:\n  (V', [], (a # as' @ asx) @ as'') \\<in> dependent_live_vars n'\n\ngoal (2 subgoals):\n 1. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        V' \\<in> Use (sourcenode a); n'' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V', [], (a # as) @ as'')\n                         \\<in> dependent_live_vars n'\n 2. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        n'' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as', (a # as) @ as'')\n                         \\<in> dependent_live_vars n'", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        V' \\<in> Use (sourcenode a); n'' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V', [], (a # as) @ as'')\n                         \\<in> dependent_live_vars n'\n 2. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        n'' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as', (a # as) @ as'')\n                         \\<in> dependent_live_vars n'", "case (dep_vars_Cons_ddep V as' as V' a)"], ["proof (state)\nthis:\n  (V, as', as) \\<in> dependent_live_vars n''\n  (V, as', as @ as'') \\<in> dependent_live_vars n'\n  V' \\<in> Use (sourcenode a)\n  n'' = last (targetnodes (a # as))\n  sourcenode\n   a -{V}a # as'\\<rightarrow>\\<^sub>d\\<^sub>d last (targetnodes (a # as'))\n\ngoal (2 subgoals):\n 1. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        V' \\<in> Use (sourcenode a); n'' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V', [], (a # as) @ as'')\n                         \\<in> dependent_live_vars n'\n 2. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        n'' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as', (a # as) @ as'')\n                         \\<in> dependent_live_vars n'", "from \\<open>as'' \\<noteq> []\\<close> \\<open>last(targetnodes as'') = n'\\<close>"], ["proof (chain)\npicking this:\n  as'' \\<noteq> []\n  last (targetnodes as'') = n'", "have \"n' = last(targetnodes ((a#as)@as''))\""], ["proof (prove)\nusing this:\n  as'' \\<noteq> []\n  last (targetnodes as'') = n'\n\ngoal (1 subgoal):\n 1. n' = last (targetnodes ((a # as) @ as''))", "by(simp add:targetnodes_def)"], ["proof (state)\nthis:\n  n' = last (targetnodes ((a # as) @ as''))\n\ngoal (2 subgoals):\n 1. \\<And>V as' as V' a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        V' \\<in> Use (sourcenode a); n'' = last (targetnodes (a # as));\n        sourcenode\n         a -{V}a #\n               as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n           (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V', [], (a # as) @ as'')\n                         \\<in> dependent_live_vars n'\n 2. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        n'' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as', (a # as) @ as'')\n                         \\<in> dependent_live_vars n'", "with dep_vars_Cons_ddep"], ["proof (chain)\npicking this:\n  (V, as', as) \\<in> dependent_live_vars n''\n  (V, as', as @ as'') \\<in> dependent_live_vars n'\n  V' \\<in> Use (sourcenode a)\n  n'' = last (targetnodes (a # as))\n  sourcenode\n   a -{V}a # as'\\<rightarrow>\\<^sub>d\\<^sub>d last (targetnodes (a # as'))\n  n' = last (targetnodes ((a # as) @ as''))", "show ?case"], ["proof (prove)\nusing this:\n  (V, as', as) \\<in> dependent_live_vars n''\n  (V, as', as @ as'') \\<in> dependent_live_vars n'\n  V' \\<in> Use (sourcenode a)\n  n'' = last (targetnodes (a # as))\n  sourcenode\n   a -{V}a # as'\\<rightarrow>\\<^sub>d\\<^sub>d last (targetnodes (a # as'))\n  n' = last (targetnodes ((a # as) @ as''))\n\ngoal (1 subgoal):\n 1. (V', [], (a # as) @ as'') \\<in> dependent_live_vars n'", "by(fastforce intro:dependent_live_vars.dep_vars_Cons_ddep)"], ["proof (state)\nthis:\n  (V', [], (a # as) @ as'') \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        n'' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as', (a # as) @ as'')\n                         \\<in> dependent_live_vars n'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        n'' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as', (a # as) @ as'')\n                         \\<in> dependent_live_vars n'", "case (dep_vars_Cons_keep V as' as a)"], ["proof (state)\nthis:\n  (V, as', as) \\<in> dependent_live_vars n''\n  (V, as', as @ as'') \\<in> dependent_live_vars n'\n  n'' = last (targetnodes (a # as))\n  \\<not> sourcenode\n          a -{V}a #\n                as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n            (targetnodes (a # as'))\n\ngoal (1 subgoal):\n 1. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        n'' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as', (a # as) @ as'')\n                         \\<in> dependent_live_vars n'", "from \\<open>as'' \\<noteq> []\\<close> \\<open>last(targetnodes as'') = n'\\<close>"], ["proof (chain)\npicking this:\n  as'' \\<noteq> []\n  last (targetnodes as'') = n'", "have \"n' = last(targetnodes ((a#as)@as''))\""], ["proof (prove)\nusing this:\n  as'' \\<noteq> []\n  last (targetnodes as'') = n'\n\ngoal (1 subgoal):\n 1. n' = last (targetnodes ((a # as) @ as''))", "by(simp add:targetnodes_def)"], ["proof (state)\nthis:\n  n' = last (targetnodes ((a # as) @ as''))\n\ngoal (1 subgoal):\n 1. \\<And>V as' as a.\n       \\<lbrakk>(V, as', as) \\<in> dependent_live_vars n'';\n        (V, as', as @ as'') \\<in> dependent_live_vars n';\n        n'' = last (targetnodes (a # as));\n        \\<not> sourcenode\n                a -{V}a #\n                      as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n                  (targetnodes (a # as'))\\<rbrakk>\n       \\<Longrightarrow> (V, a # as', (a # as) @ as'')\n                         \\<in> dependent_live_vars n'", "with dep_vars_Cons_keep"], ["proof (chain)\npicking this:\n  (V, as', as) \\<in> dependent_live_vars n''\n  (V, as', as @ as'') \\<in> dependent_live_vars n'\n  n'' = last (targetnodes (a # as))\n  \\<not> sourcenode\n          a -{V}a #\n                as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n            (targetnodes (a # as'))\n  n' = last (targetnodes ((a # as) @ as''))", "show ?case"], ["proof (prove)\nusing this:\n  (V, as', as) \\<in> dependent_live_vars n''\n  (V, as', as @ as'') \\<in> dependent_live_vars n'\n  n'' = last (targetnodes (a # as))\n  \\<not> sourcenode\n          a -{V}a #\n                as'\\<rightarrow>\\<^sub>d\\<^sub>d last\n            (targetnodes (a # as'))\n  n' = last (targetnodes ((a # as) @ as''))\n\ngoal (1 subgoal):\n 1. (V, a # as', (a # as) @ as'') \\<in> dependent_live_vars n'", "by(fastforce intro:dependent_live_vars.dep_vars_Cons_keep)"], ["proof (state)\nthis:\n  (V, a # as', (a # as) @ as'') \\<in> dependent_live_vars n'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (V', as', as @ as'') \\<in> dependent_live_vars n'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dependent_live_vars_dep_dependent_live_vars:\n  \"\\<lbrakk>n'' -as''\\<rightarrow>\\<^sub>d* n'; (V',as',as) \\<in> dependent_live_vars n''\\<rbrakk>\n  \\<Longrightarrow> (V',as',as@as'') \\<in> dependent_live_vars n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n'' -as''\\<rightarrow>\\<^sub>d* n';\n     (V', as', as) \\<in> dependent_live_vars n''\\<rbrakk>\n    \\<Longrightarrow> (V', as', as @ as'') \\<in> dependent_live_vars n'", "proof(induct rule:DynPDG_path.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n;\n        (V', as', as) \\<in> dependent_live_vars n\\<rbrakk>\n       \\<Longrightarrow> (V', as', as @ []) \\<in> dependent_live_vars n\n 2. \\<And>n asa n'' as'a n'.\n       \\<lbrakk>n -asa\\<rightarrow>\\<^sub>d* n'';\n        (V', as', as) \\<in> dependent_live_vars n \\<Longrightarrow>\n        (V', as', as @ asa) \\<in> dependent_live_vars n'';\n        n'' -as'a\\<rightarrow>\\<^sub>c\\<^sub>d n';\n        (V', as', as) \\<in> dependent_live_vars n\\<rbrakk>\n       \\<Longrightarrow> (V', as', as @ asa @ as'a)\n                         \\<in> dependent_live_vars n'\n 3. \\<And>n asa n'' V as'a n'.\n       \\<lbrakk>n -asa\\<rightarrow>\\<^sub>d* n'';\n        (V', as', as) \\<in> dependent_live_vars n \\<Longrightarrow>\n        (V', as', as @ asa) \\<in> dependent_live_vars n'';\n        n'' -{V}as'a\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        (V', as', as) \\<in> dependent_live_vars n\\<rbrakk>\n       \\<Longrightarrow> (V', as', as @ asa @ as'a)\n                         \\<in> dependent_live_vars n'", "case (DynPDG_path_Nil n)"], ["proof (state)\nthis:\n  valid_node n\n  (V', as', as) \\<in> dependent_live_vars n\n\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n;\n        (V', as', as) \\<in> dependent_live_vars n\\<rbrakk>\n       \\<Longrightarrow> (V', as', as @ []) \\<in> dependent_live_vars n\n 2. \\<And>n asa n'' as'a n'.\n       \\<lbrakk>n -asa\\<rightarrow>\\<^sub>d* n'';\n        (V', as', as) \\<in> dependent_live_vars n \\<Longrightarrow>\n        (V', as', as @ asa) \\<in> dependent_live_vars n'';\n        n'' -as'a\\<rightarrow>\\<^sub>c\\<^sub>d n';\n        (V', as', as) \\<in> dependent_live_vars n\\<rbrakk>\n       \\<Longrightarrow> (V', as', as @ asa @ as'a)\n                         \\<in> dependent_live_vars n'\n 3. \\<And>n asa n'' V as'a n'.\n       \\<lbrakk>n -asa\\<rightarrow>\\<^sub>d* n'';\n        (V', as', as) \\<in> dependent_live_vars n \\<Longrightarrow>\n        (V', as', as @ asa) \\<in> dependent_live_vars n'';\n        n'' -{V}as'a\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        (V', as', as) \\<in> dependent_live_vars n\\<rbrakk>\n       \\<Longrightarrow> (V', as', as @ asa @ as'a)\n                         \\<in> dependent_live_vars n'", "thus ?case"], ["proof (prove)\nusing this:\n  valid_node n\n  (V', as', as) \\<in> dependent_live_vars n\n\ngoal (1 subgoal):\n 1. (V', as', as @ []) \\<in> dependent_live_vars n", "by simp"], ["proof (state)\nthis:\n  (V', as', as @ []) \\<in> dependent_live_vars n\n\ngoal (2 subgoals):\n 1. \\<And>n asa n'' as'a n'.\n       \\<lbrakk>n -asa\\<rightarrow>\\<^sub>d* n'';\n        (V', as', as) \\<in> dependent_live_vars n \\<Longrightarrow>\n        (V', as', as @ asa) \\<in> dependent_live_vars n'';\n        n'' -as'a\\<rightarrow>\\<^sub>c\\<^sub>d n';\n        (V', as', as) \\<in> dependent_live_vars n\\<rbrakk>\n       \\<Longrightarrow> (V', as', as @ asa @ as'a)\n                         \\<in> dependent_live_vars n'\n 2. \\<And>n asa n'' V as'a n'.\n       \\<lbrakk>n -asa\\<rightarrow>\\<^sub>d* n'';\n        (V', as', as) \\<in> dependent_live_vars n \\<Longrightarrow>\n        (V', as', as @ asa) \\<in> dependent_live_vars n'';\n        n'' -{V}as'a\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        (V', as', as) \\<in> dependent_live_vars n\\<rbrakk>\n       \\<Longrightarrow> (V', as', as @ asa @ as'a)\n                         \\<in> dependent_live_vars n'", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n asa n'' as'a n'.\n       \\<lbrakk>n -asa\\<rightarrow>\\<^sub>d* n'';\n        (V', as', as) \\<in> dependent_live_vars n \\<Longrightarrow>\n        (V', as', as @ asa) \\<in> dependent_live_vars n'';\n        n'' -as'a\\<rightarrow>\\<^sub>c\\<^sub>d n';\n        (V', as', as) \\<in> dependent_live_vars n\\<rbrakk>\n       \\<Longrightarrow> (V', as', as @ asa @ as'a)\n                         \\<in> dependent_live_vars n'\n 2. \\<And>n asa n'' V as'a n'.\n       \\<lbrakk>n -asa\\<rightarrow>\\<^sub>d* n'';\n        (V', as', as) \\<in> dependent_live_vars n \\<Longrightarrow>\n        (V', as', as @ asa) \\<in> dependent_live_vars n'';\n        n'' -{V}as'a\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        (V', as', as) \\<in> dependent_live_vars n\\<rbrakk>\n       \\<Longrightarrow> (V', as', as @ asa @ as'a)\n                         \\<in> dependent_live_vars n'", "case (DynPDG_path_Append_cdep n asx n'' asx' n')"], ["proof (state)\nthis:\n  n -asx\\<rightarrow>\\<^sub>d* n''\n  (V', as', as) \\<in> dependent_live_vars n \\<Longrightarrow>\n  (V', as', as @ asx) \\<in> dependent_live_vars n''\n  n'' -asx'\\<rightarrow>\\<^sub>c\\<^sub>d n'\n  (V', as', as) \\<in> dependent_live_vars n\n\ngoal (2 subgoals):\n 1. \\<And>n asa n'' as'a n'.\n       \\<lbrakk>n -asa\\<rightarrow>\\<^sub>d* n'';\n        (V', as', as) \\<in> dependent_live_vars n \\<Longrightarrow>\n        (V', as', as @ asa) \\<in> dependent_live_vars n'';\n        n'' -as'a\\<rightarrow>\\<^sub>c\\<^sub>d n';\n        (V', as', as) \\<in> dependent_live_vars n\\<rbrakk>\n       \\<Longrightarrow> (V', as', as @ asa @ as'a)\n                         \\<in> dependent_live_vars n'\n 2. \\<And>n asa n'' V as'a n'.\n       \\<lbrakk>n -asa\\<rightarrow>\\<^sub>d* n'';\n        (V', as', as) \\<in> dependent_live_vars n \\<Longrightarrow>\n        (V', as', as @ asa) \\<in> dependent_live_vars n'';\n        n'' -{V}as'a\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        (V', as', as) \\<in> dependent_live_vars n\\<rbrakk>\n       \\<Longrightarrow> (V', as', as @ asa @ as'a)\n                         \\<in> dependent_live_vars n'", "note IH = \\<open>(V', as', as) \\<in> dependent_live_vars n \\<Longrightarrow>\n             (V', as', as @ asx) \\<in> dependent_live_vars n''\\<close>"], ["proof (state)\nthis:\n  (V', as', as) \\<in> dependent_live_vars n \\<Longrightarrow>\n  (V', as', as @ asx) \\<in> dependent_live_vars n''\n\ngoal (2 subgoals):\n 1. \\<And>n asa n'' as'a n'.\n       \\<lbrakk>n -asa\\<rightarrow>\\<^sub>d* n'';\n        (V', as', as) \\<in> dependent_live_vars n \\<Longrightarrow>\n        (V', as', as @ asa) \\<in> dependent_live_vars n'';\n        n'' -as'a\\<rightarrow>\\<^sub>c\\<^sub>d n';\n        (V', as', as) \\<in> dependent_live_vars n\\<rbrakk>\n       \\<Longrightarrow> (V', as', as @ asa @ as'a)\n                         \\<in> dependent_live_vars n'\n 2. \\<And>n asa n'' V as'a n'.\n       \\<lbrakk>n -asa\\<rightarrow>\\<^sub>d* n'';\n        (V', as', as) \\<in> dependent_live_vars n \\<Longrightarrow>\n        (V', as', as @ asa) \\<in> dependent_live_vars n'';\n        n'' -{V}as'a\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        (V', as', as) \\<in> dependent_live_vars n\\<rbrakk>\n       \\<Longrightarrow> (V', as', as @ asa @ as'a)\n                         \\<in> dependent_live_vars n'", "from IH[OF \\<open>(V',as',as) \\<in> dependent_live_vars n\\<close>]"], ["proof (chain)\npicking this:\n  (V', as', as @ asx) \\<in> dependent_live_vars n''", "have \"(V',as',as@asx) \\<in> dependent_live_vars n''\""], ["proof (prove)\nusing this:\n  (V', as', as @ asx) \\<in> dependent_live_vars n''\n\ngoal (1 subgoal):\n 1. (V', as', as @ asx) \\<in> dependent_live_vars n''", "."], ["proof (state)\nthis:\n  (V', as', as @ asx) \\<in> dependent_live_vars n''\n\ngoal (2 subgoals):\n 1. \\<And>n asa n'' as'a n'.\n       \\<lbrakk>n -asa\\<rightarrow>\\<^sub>d* n'';\n        (V', as', as) \\<in> dependent_live_vars n \\<Longrightarrow>\n        (V', as', as @ asa) \\<in> dependent_live_vars n'';\n        n'' -as'a\\<rightarrow>\\<^sub>c\\<^sub>d n';\n        (V', as', as) \\<in> dependent_live_vars n\\<rbrakk>\n       \\<Longrightarrow> (V', as', as @ asa @ as'a)\n                         \\<in> dependent_live_vars n'\n 2. \\<And>n asa n'' V as'a n'.\n       \\<lbrakk>n -asa\\<rightarrow>\\<^sub>d* n'';\n        (V', as', as) \\<in> dependent_live_vars n \\<Longrightarrow>\n        (V', as', as @ asa) \\<in> dependent_live_vars n'';\n        n'' -{V}as'a\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        (V', as', as) \\<in> dependent_live_vars n\\<rbrakk>\n       \\<Longrightarrow> (V', as', as @ asa @ as'a)\n                         \\<in> dependent_live_vars n'", "with \\<open>n'' -asx'\\<rightarrow>\\<^sub>c\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -asx'\\<rightarrow>\\<^sub>c\\<^sub>d n'\n  (V', as', as @ asx) \\<in> dependent_live_vars n''", "have \"(V',as',(as@asx)@asx') \\<in> dependent_live_vars n'\""], ["proof (prove)\nusing this:\n  n'' -asx'\\<rightarrow>\\<^sub>c\\<^sub>d n'\n  (V', as', as @ asx) \\<in> dependent_live_vars n''\n\ngoal (1 subgoal):\n 1. (V', as', (as @ asx) @ asx') \\<in> dependent_live_vars n'", "by(rule dependent_live_vars_cdep_dependent_live_vars)"], ["proof (state)\nthis:\n  (V', as', (as @ asx) @ asx') \\<in> dependent_live_vars n'\n\ngoal (2 subgoals):\n 1. \\<And>n asa n'' as'a n'.\n       \\<lbrakk>n -asa\\<rightarrow>\\<^sub>d* n'';\n        (V', as', as) \\<in> dependent_live_vars n \\<Longrightarrow>\n        (V', as', as @ asa) \\<in> dependent_live_vars n'';\n        n'' -as'a\\<rightarrow>\\<^sub>c\\<^sub>d n';\n        (V', as', as) \\<in> dependent_live_vars n\\<rbrakk>\n       \\<Longrightarrow> (V', as', as @ asa @ as'a)\n                         \\<in> dependent_live_vars n'\n 2. \\<And>n asa n'' V as'a n'.\n       \\<lbrakk>n -asa\\<rightarrow>\\<^sub>d* n'';\n        (V', as', as) \\<in> dependent_live_vars n \\<Longrightarrow>\n        (V', as', as @ asa) \\<in> dependent_live_vars n'';\n        n'' -{V}as'a\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        (V', as', as) \\<in> dependent_live_vars n\\<rbrakk>\n       \\<Longrightarrow> (V', as', as @ asa @ as'a)\n                         \\<in> dependent_live_vars n'", "thus ?case"], ["proof (prove)\nusing this:\n  (V', as', (as @ asx) @ asx') \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. (V', as', as @ asx @ asx') \\<in> dependent_live_vars n'", "by simp"], ["proof (state)\nthis:\n  (V', as', as @ asx @ asx') \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. \\<And>n asa n'' V as'a n'.\n       \\<lbrakk>n -asa\\<rightarrow>\\<^sub>d* n'';\n        (V', as', as) \\<in> dependent_live_vars n \\<Longrightarrow>\n        (V', as', as @ asa) \\<in> dependent_live_vars n'';\n        n'' -{V}as'a\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        (V', as', as) \\<in> dependent_live_vars n\\<rbrakk>\n       \\<Longrightarrow> (V', as', as @ asa @ as'a)\n                         \\<in> dependent_live_vars n'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n asa n'' V as'a n'.\n       \\<lbrakk>n -asa\\<rightarrow>\\<^sub>d* n'';\n        (V', as', as) \\<in> dependent_live_vars n \\<Longrightarrow>\n        (V', as', as @ asa) \\<in> dependent_live_vars n'';\n        n'' -{V}as'a\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        (V', as', as) \\<in> dependent_live_vars n\\<rbrakk>\n       \\<Longrightarrow> (V', as', as @ asa @ as'a)\n                         \\<in> dependent_live_vars n'", "case (DynPDG_path_Append_ddep n asx n'' V asx' n')"], ["proof (state)\nthis:\n  n -asx\\<rightarrow>\\<^sub>d* n''\n  (V', as', as) \\<in> dependent_live_vars n \\<Longrightarrow>\n  (V', as', as @ asx) \\<in> dependent_live_vars n''\n  n'' -{V}asx'\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  (V', as', as) \\<in> dependent_live_vars n\n\ngoal (1 subgoal):\n 1. \\<And>n asa n'' V as'a n'.\n       \\<lbrakk>n -asa\\<rightarrow>\\<^sub>d* n'';\n        (V', as', as) \\<in> dependent_live_vars n \\<Longrightarrow>\n        (V', as', as @ asa) \\<in> dependent_live_vars n'';\n        n'' -{V}as'a\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        (V', as', as) \\<in> dependent_live_vars n\\<rbrakk>\n       \\<Longrightarrow> (V', as', as @ asa @ as'a)\n                         \\<in> dependent_live_vars n'", "note IH = \\<open>(V', as', as) \\<in> dependent_live_vars n \\<Longrightarrow>\n             (V', as', as @ asx) \\<in> dependent_live_vars n''\\<close>"], ["proof (state)\nthis:\n  (V', as', as) \\<in> dependent_live_vars n \\<Longrightarrow>\n  (V', as', as @ asx) \\<in> dependent_live_vars n''\n\ngoal (1 subgoal):\n 1. \\<And>n asa n'' V as'a n'.\n       \\<lbrakk>n -asa\\<rightarrow>\\<^sub>d* n'';\n        (V', as', as) \\<in> dependent_live_vars n \\<Longrightarrow>\n        (V', as', as @ asa) \\<in> dependent_live_vars n'';\n        n'' -{V}as'a\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        (V', as', as) \\<in> dependent_live_vars n\\<rbrakk>\n       \\<Longrightarrow> (V', as', as @ asa @ as'a)\n                         \\<in> dependent_live_vars n'", "from IH[OF \\<open>(V',as',as) \\<in> dependent_live_vars n\\<close>]"], ["proof (chain)\npicking this:\n  (V', as', as @ asx) \\<in> dependent_live_vars n''", "have \"(V',as',as@asx) \\<in> dependent_live_vars n''\""], ["proof (prove)\nusing this:\n  (V', as', as @ asx) \\<in> dependent_live_vars n''\n\ngoal (1 subgoal):\n 1. (V', as', as @ asx) \\<in> dependent_live_vars n''", "."], ["proof (state)\nthis:\n  (V', as', as @ asx) \\<in> dependent_live_vars n''\n\ngoal (1 subgoal):\n 1. \\<And>n asa n'' V as'a n'.\n       \\<lbrakk>n -asa\\<rightarrow>\\<^sub>d* n'';\n        (V', as', as) \\<in> dependent_live_vars n \\<Longrightarrow>\n        (V', as', as @ asa) \\<in> dependent_live_vars n'';\n        n'' -{V}as'a\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        (V', as', as) \\<in> dependent_live_vars n\\<rbrakk>\n       \\<Longrightarrow> (V', as', as @ asa @ as'a)\n                         \\<in> dependent_live_vars n'", "with \\<open>n'' -{V}asx'\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -{V}asx'\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  (V', as', as @ asx) \\<in> dependent_live_vars n''", "have \"(V',as',(as@asx)@asx') \\<in> dependent_live_vars n'\""], ["proof (prove)\nusing this:\n  n'' -{V}asx'\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  (V', as', as @ asx) \\<in> dependent_live_vars n''\n\ngoal (1 subgoal):\n 1. (V', as', (as @ asx) @ asx') \\<in> dependent_live_vars n'", "by(rule dependent_live_vars_ddep_dependent_live_vars)"], ["proof (state)\nthis:\n  (V', as', (as @ asx) @ asx') \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. \\<And>n asa n'' V as'a n'.\n       \\<lbrakk>n -asa\\<rightarrow>\\<^sub>d* n'';\n        (V', as', as) \\<in> dependent_live_vars n \\<Longrightarrow>\n        (V', as', as @ asa) \\<in> dependent_live_vars n'';\n        n'' -{V}as'a\\<rightarrow>\\<^sub>d\\<^sub>d n';\n        (V', as', as) \\<in> dependent_live_vars n\\<rbrakk>\n       \\<Longrightarrow> (V', as', as @ asa @ as'a)\n                         \\<in> dependent_live_vars n'", "thus ?case"], ["proof (prove)\nusing this:\n  (V', as', (as @ asx) @ asx') \\<in> dependent_live_vars n'\n\ngoal (1 subgoal):\n 1. (V', as', as @ asx @ asx') \\<in> dependent_live_vars n'", "by simp"], ["proof (state)\nthis:\n  (V', as', as @ asx @ asx') \\<in> dependent_live_vars n'\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}