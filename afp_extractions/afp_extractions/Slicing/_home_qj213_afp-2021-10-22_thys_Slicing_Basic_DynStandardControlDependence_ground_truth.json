{"file_name": "/home/qj213/afp-2021-10-22/thys/Slicing/Basic/DynStandardControlDependence.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Slicing", "problem_names": ["lemma Exit_not_dyn_standard_control_dependent:\n  assumes control:\"n controls\\<^sub>s (_Exit_) via as\" shows \"False\"", "lemma dyn_standard_control_dependence_def_variant:\n  \"n controls\\<^sub>s n' via as = ((n -as\\<rightarrow>* n') \\<and> (n \\<noteq> n') \\<and>\n    (\\<not> n' postdominates n) \\<and> (n' \\<notin> set(sourcenodes as)) \\<and>\n  (\\<forall>n'' \\<in> set(targetnodes as). n' postdominates n''))\"", "lemma which_node_dyn_standard_control_dependence_source:\n  assumes path:\"(_Entry_) -as@a#as'\\<rightarrow>* n\"\n  and Exit_path:\"n -as''\\<rightarrow>* (_Exit_)\" and source:\"sourcenode a = n'\" \n  and source':\"sourcenode a' = n'\"\n  and no_source:\"n \\<notin> set(sourcenodes (a#as'))\" and valid_edge':\"valid_edge a'\"\n  and inner_node:\"inner_node n\" and not_pd:\"\\<not> n postdominates (targetnode a')\"\n  and last:\"\\<forall>ax ax'. ax \\<in> set as' \\<and> sourcenode ax = sourcenode ax' \\<and>\n    valid_edge ax' \\<longrightarrow> n postdominates targetnode ax'\"\n  shows \"n' controls\\<^sub>s n via a#as'\"", "lemma inner_node_dyn_standard_control_dependence_predecessor:\n  assumes inner_node:\"inner_node n\"\n  obtains n' as where \"n' controls\\<^sub>s n via as\""], "translations": [["", "lemma Exit_not_dyn_standard_control_dependent:\n  assumes control:\"n controls\\<^sub>s (_Exit_) via as\" shows \"False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. False", "from control"], ["proof (chain)\npicking this:\n  n controls\\<^sub>s (_Exit_) via as", "obtain a as' where path:\"n -as\\<rightarrow>* (_Exit_)\" and as:\"as = a#as'\"\n    and pd:\"(_Exit_) postdominates (targetnode a)\""], ["proof (prove)\nusing this:\n  n controls\\<^sub>s (_Exit_) via as\n\ngoal (1 subgoal):\n 1. (\\<And>a as'.\n        \\<lbrakk>n -as\\<rightarrow>* (_Exit_); as = a # as';\n         (_Exit_) postdominates targetnode a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp:dyn_standard_control_dependence_def)"], ["proof (state)\nthis:\n  n -as\\<rightarrow>* (_Exit_)\n  as = a # as'\n  (_Exit_) postdominates targetnode a\n\ngoal (1 subgoal):\n 1. False", "from path as"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* (_Exit_)\n  as = a # as'", "have \"n -[]@a#as'\\<rightarrow>* (_Exit_)\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* (_Exit_)\n  as = a # as'\n\ngoal (1 subgoal):\n 1. n -[] @ a # as'\\<rightarrow>* (_Exit_)", "by simp"], ["proof (state)\nthis:\n  n -[] @ a # as'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. False", "hence \"valid_edge a\""], ["proof (prove)\nusing this:\n  n -[] @ a # as'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. valid_edge a", "by(fastforce dest:path_split)"], ["proof (state)\nthis:\n  valid_edge a\n\ngoal (1 subgoal):\n 1. False", "with pd"], ["proof (chain)\npicking this:\n  (_Exit_) postdominates targetnode a\n  valid_edge a", "show False"], ["proof (prove)\nusing this:\n  (_Exit_) postdominates targetnode a\n  valid_edge a\n\ngoal (1 subgoal):\n 1. False", "by -(rule Exit_no_postdominator,auto)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dyn_standard_control_dependence_def_variant:\n  \"n controls\\<^sub>s n' via as = ((n -as\\<rightarrow>* n') \\<and> (n \\<noteq> n') \\<and>\n    (\\<not> n' postdominates n) \\<and> (n' \\<notin> set(sourcenodes as)) \\<and>\n  (\\<forall>n'' \\<in> set(targetnodes as). n' postdominates n''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n controls\\<^sub>s n' via as =\n    (n -as\\<rightarrow>* n' \\<and>\n     n \\<noteq> n' \\<and>\n     \\<not> n' postdominates n \\<and>\n     n' \\<notin> set (sourcenodes as) \\<and>\n     (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n''))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. n controls\\<^sub>s n' via as \\<Longrightarrow>\n    n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')\n 2. n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as).\n        n' postdominates n'') \\<Longrightarrow>\n    n controls\\<^sub>s n' via as", "assume \"(n -as\\<rightarrow>* n') \\<and> (n \\<noteq> n') \\<and> (\\<not> n' postdominates n) \\<and> \n    (n' \\<notin> set(sourcenodes as)) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')\""], ["proof (state)\nthis:\n  n -as\\<rightarrow>* n' \\<and>\n  n \\<noteq> n' \\<and>\n  \\<not> n' postdominates n \\<and>\n  n' \\<notin> set (sourcenodes as) \\<and>\n  (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')\n\ngoal (2 subgoals):\n 1. n controls\\<^sub>s n' via as \\<Longrightarrow>\n    n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')\n 2. n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as).\n        n' postdominates n'') \\<Longrightarrow>\n    n controls\\<^sub>s n' via as", "hence path:\"n -as\\<rightarrow>* n'\" and noteq:\"n \\<noteq> n'\"\n    and not_pd:\"\\<not> n' postdominates n\"\n    and notin:\"n' \\<notin> set(sourcenodes as)\"\n    and all:\"\\<forall>n''\\<in>set (targetnodes as). n' postdominates n''\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n' \\<and>\n  n \\<noteq> n' \\<and>\n  \\<not> n' postdominates n \\<and>\n  n' \\<notin> set (sourcenodes as) \\<and>\n  (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')\n\ngoal (1 subgoal):\n 1. (n -as\\<rightarrow>* n' &&& n \\<noteq> n') &&&\n    \\<not> n' postdominates n &&&\n    n' \\<notin> set (sourcenodes as) &&&\n    \\<forall>n''\\<in>set (targetnodes as). n' postdominates n''", "by auto"], ["proof (state)\nthis:\n  n -as\\<rightarrow>* n'\n  n \\<noteq> n'\n  \\<not> n' postdominates n\n  n' \\<notin> set (sourcenodes as)\n  \\<forall>n''\\<in>set (targetnodes as). n' postdominates n''\n\ngoal (2 subgoals):\n 1. n controls\\<^sub>s n' via as \\<Longrightarrow>\n    n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')\n 2. n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as).\n        n' postdominates n'') \\<Longrightarrow>\n    n controls\\<^sub>s n' via as", "have notExit:\"n \\<noteq> (_Exit_)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<noteq> (_Exit_)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. n = (_Exit_) \\<Longrightarrow> False", "assume \"n = (_Exit_)\""], ["proof (state)\nthis:\n  n = (_Exit_)\n\ngoal (1 subgoal):\n 1. n = (_Exit_) \\<Longrightarrow> False", "with path"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* n'\n  n = (_Exit_)", "have \"n = n'\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n'\n  n = (_Exit_)\n\ngoal (1 subgoal):\n 1. n = n'", "by(fastforce dest:path_Exit_source)"], ["proof (state)\nthis:\n  n = n'\n\ngoal (1 subgoal):\n 1. n = (_Exit_) \\<Longrightarrow> False", "with noteq"], ["proof (chain)\npicking this:\n  n \\<noteq> n'\n  n = n'", "show False"], ["proof (prove)\nusing this:\n  n \\<noteq> n'\n  n = n'\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n \\<noteq> (_Exit_)\n\ngoal (2 subgoals):\n 1. n controls\\<^sub>s n' via as \\<Longrightarrow>\n    n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')\n 2. n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as).\n        n' postdominates n'') \\<Longrightarrow>\n    n controls\\<^sub>s n' via as", "from path"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* n'", "have valid:\"valid_node n\" and valid':\"valid_node n'\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. valid_node n &&& valid_node n'", "by(auto dest:path_valid_node)"], ["proof (state)\nthis:\n  valid_node n\n  valid_node n'\n\ngoal (2 subgoals):\n 1. n controls\\<^sub>s n' via as \\<Longrightarrow>\n    n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')\n 2. n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as).\n        n' postdominates n'') \\<Longrightarrow>\n    n controls\\<^sub>s n' via as", "show \"n controls\\<^sub>s n' via as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n controls\\<^sub>s n' via as", "proof(cases as)"], ["proof (state)\ngoal (2 subgoals):\n 1. as = [] \\<Longrightarrow> n controls\\<^sub>s n' via as\n 2. \\<And>a list.\n       as = a # list \\<Longrightarrow> n controls\\<^sub>s n' via as", "case Nil"], ["proof (state)\nthis:\n  as = []\n\ngoal (2 subgoals):\n 1. as = [] \\<Longrightarrow> n controls\\<^sub>s n' via as\n 2. \\<And>a list.\n       as = a # list \\<Longrightarrow> n controls\\<^sub>s n' via as", "with path valid not_pd notExit"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* n'\n  valid_node n\n  \\<not> n' postdominates n\n  n \\<noteq> (_Exit_)\n  as = []", "have False"], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n'\n  valid_node n\n  \\<not> n' postdominates n\n  n \\<noteq> (_Exit_)\n  as = []\n\ngoal (1 subgoal):\n 1. False", "by(fastforce elim:path.cases dest:postdominate_refl)"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. as = [] \\<Longrightarrow> n controls\\<^sub>s n' via as\n 2. \\<And>a list.\n       as = a # list \\<Longrightarrow> n controls\\<^sub>s n' via as", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. n controls\\<^sub>s n' via as", "by simp"], ["proof (state)\nthis:\n  n controls\\<^sub>s n' via as\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       as = a # list \\<Longrightarrow> n controls\\<^sub>s n' via as", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       as = a # list \\<Longrightarrow> n controls\\<^sub>s n' via as", "case (Cons ax asx)"], ["proof (state)\nthis:\n  as = ax # asx\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       as = a # list \\<Longrightarrow> n controls\\<^sub>s n' via as", "with all"], ["proof (chain)\npicking this:\n  \\<forall>n''\\<in>set (targetnodes as). n' postdominates n''\n  as = ax # asx", "have pd:\"n' postdominates targetnode ax\""], ["proof (prove)\nusing this:\n  \\<forall>n''\\<in>set (targetnodes as). n' postdominates n''\n  as = ax # asx\n\ngoal (1 subgoal):\n 1. n' postdominates targetnode ax", "by(auto simp:targetnodes_def)"], ["proof (state)\nthis:\n  n' postdominates targetnode ax\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       as = a # list \\<Longrightarrow> n controls\\<^sub>s n' via as", "from path Cons"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* n'\n  as = ax # asx", "have source:\"n = sourcenode ax\" \n      and path2:\"targetnode ax -asx\\<rightarrow>* n'\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n'\n  as = ax # asx\n\ngoal (1 subgoal):\n 1. n = sourcenode ax &&& targetnode ax -asx\\<rightarrow>* n'", "by(auto intro:path_split_Cons)"], ["proof (state)\nthis:\n  n = sourcenode ax\n  targetnode ax -asx\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       as = a # list \\<Longrightarrow> n controls\\<^sub>s n' via as", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. n controls\\<^sub>s n' via as", "proof(cases \"\\<exists>as'. n -as'\\<rightarrow>* (_Exit_)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>as'. n -as'\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n controls\\<^sub>s n' via as\n 2. \\<nexists>as'. n -as'\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n controls\\<^sub>s n' via as", "case True"], ["proof (state)\nthis:\n  \\<exists>as'. n -as'\\<rightarrow>* (_Exit_)\n\ngoal (2 subgoals):\n 1. \\<exists>as'. n -as'\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n controls\\<^sub>s n' via as\n 2. \\<nexists>as'. n -as'\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n controls\\<^sub>s n' via as", "with not_pd valid valid'"], ["proof (chain)\npicking this:\n  \\<not> n' postdominates n\n  valid_node n\n  valid_node n'\n  \\<exists>as'. n -as'\\<rightarrow>* (_Exit_)", "obtain as' where path':\"n -as'\\<rightarrow>* (_Exit_)\"\n        and not_isin:\"n' \\<notin> set (sourcenodes as')\""], ["proof (prove)\nusing this:\n  \\<not> n' postdominates n\n  valid_node n\n  valid_node n'\n  \\<exists>as'. n -as'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. (\\<And>as'.\n        \\<lbrakk>n -as'\\<rightarrow>* (_Exit_);\n         n' \\<notin> set (sourcenodes as')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp:postdominate_def)"], ["proof (state)\nthis:\n  n -as'\\<rightarrow>* (_Exit_)\n  n' \\<notin> set (sourcenodes as')\n\ngoal (2 subgoals):\n 1. \\<exists>as'. n -as'\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n controls\\<^sub>s n' via as\n 2. \\<nexists>as'. n -as'\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n controls\\<^sub>s n' via as", "have \"as' \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as' \\<noteq> []", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. as' = [] \\<Longrightarrow> False", "assume \"as' = []\""], ["proof (state)\nthis:\n  as' = []\n\ngoal (1 subgoal):\n 1. as' = [] \\<Longrightarrow> False", "with path'"], ["proof (chain)\npicking this:\n  n -as'\\<rightarrow>* (_Exit_)\n  as' = []", "have \"n = (_Exit_)\""], ["proof (prove)\nusing this:\n  n -as'\\<rightarrow>* (_Exit_)\n  as' = []\n\ngoal (1 subgoal):\n 1. n = (_Exit_)", "by(auto elim:path.cases)"], ["proof (state)\nthis:\n  n = (_Exit_)\n\ngoal (1 subgoal):\n 1. as' = [] \\<Longrightarrow> False", "with notExit"], ["proof (chain)\npicking this:\n  n \\<noteq> (_Exit_)\n  n = (_Exit_)", "show False"], ["proof (prove)\nusing this:\n  n \\<noteq> (_Exit_)\n  n = (_Exit_)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  as' \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<exists>as'. n -as'\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n controls\\<^sub>s n' via as\n 2. \\<nexists>as'. n -as'\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n controls\\<^sub>s n' via as", "then"], ["proof (chain)\npicking this:\n  as' \\<noteq> []", "obtain a' as'' where as':\"as' = a'#as''\""], ["proof (prove)\nusing this:\n  as' \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>a' as''.\n        as' = a' # as'' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases as',auto elim:path.cases)"], ["proof (state)\nthis:\n  as' = a' # as''\n\ngoal (2 subgoals):\n 1. \\<exists>as'. n -as'\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n controls\\<^sub>s n' via as\n 2. \\<nexists>as'. n -as'\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n controls\\<^sub>s n' via as", "with path'"], ["proof (chain)\npicking this:\n  n -as'\\<rightarrow>* (_Exit_)\n  as' = a' # as''", "have \"n -[]@a'#as''\\<rightarrow>* (_Exit_)\""], ["proof (prove)\nusing this:\n  n -as'\\<rightarrow>* (_Exit_)\n  as' = a' # as''\n\ngoal (1 subgoal):\n 1. n -[] @ a' # as''\\<rightarrow>* (_Exit_)", "by simp"], ["proof (state)\nthis:\n  n -[] @ a' # as''\\<rightarrow>* (_Exit_)\n\ngoal (2 subgoals):\n 1. \\<exists>as'. n -as'\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n controls\\<^sub>s n' via as\n 2. \\<nexists>as'. n -as'\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n controls\\<^sub>s n' via as", "hence source':\"n = sourcenode a'\" \n        and valid_edge:\"valid_edge a'\"\n        and path2':\"targetnode a' -as''\\<rightarrow>* (_Exit_)\""], ["proof (prove)\nusing this:\n  n -[] @ a' # as''\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. n = sourcenode a' &&&\n    valid_edge a' &&& targetnode a' -as''\\<rightarrow>* (_Exit_)", "by(fastforce dest:path_split)+"], ["proof (state)\nthis:\n  n = sourcenode a'\n  valid_edge a'\n  targetnode a' -as''\\<rightarrow>* (_Exit_)\n\ngoal (2 subgoals):\n 1. \\<exists>as'. n -as'\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n controls\\<^sub>s n' via as\n 2. \\<nexists>as'. n -as'\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n controls\\<^sub>s n' via as", "from path2' not_isin as' valid'"], ["proof (chain)\npicking this:\n  targetnode a' -as''\\<rightarrow>* (_Exit_)\n  n' \\<notin> set (sourcenodes as')\n  as' = a' # as''\n  valid_node n'", "have \"\\<not> n' postdominates (targetnode a')\""], ["proof (prove)\nusing this:\n  targetnode a' -as''\\<rightarrow>* (_Exit_)\n  n' \\<notin> set (sourcenodes as')\n  as' = a' # as''\n  valid_node n'\n\ngoal (1 subgoal):\n 1. \\<not> n' postdominates targetnode a'", "by(auto simp:postdominate_def sourcenodes_def)"], ["proof (state)\nthis:\n  \\<not> n' postdominates targetnode a'\n\ngoal (2 subgoals):\n 1. \\<exists>as'. n -as'\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n controls\\<^sub>s n' via as\n 2. \\<nexists>as'. n -as'\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n controls\\<^sub>s n' via as", "with pd path Cons source source' notin valid_edge"], ["proof (chain)\npicking this:\n  n' postdominates targetnode ax\n  n -as\\<rightarrow>* n'\n  as = ax # asx\n  n = sourcenode ax\n  n = sourcenode a'\n  n' \\<notin> set (sourcenodes as)\n  valid_edge a'\n  \\<not> n' postdominates targetnode a'", "show ?thesis"], ["proof (prove)\nusing this:\n  n' postdominates targetnode ax\n  n -as\\<rightarrow>* n'\n  as = ax # asx\n  n = sourcenode ax\n  n = sourcenode a'\n  n' \\<notin> set (sourcenodes as)\n  valid_edge a'\n  \\<not> n' postdominates targetnode a'\n\ngoal (1 subgoal):\n 1. n controls\\<^sub>s n' via as", "by(auto simp:dyn_standard_control_dependence_def)"], ["proof (state)\nthis:\n  n controls\\<^sub>s n' via as\n\ngoal (1 subgoal):\n 1. \\<nexists>as'. n -as'\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n controls\\<^sub>s n' via as", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>as'. n -as'\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n controls\\<^sub>s n' via as", "case False"], ["proof (state)\nthis:\n  \\<nexists>as'. n -as'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<nexists>as'. n -as'\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n controls\\<^sub>s n' via as", "with valid valid'"], ["proof (chain)\npicking this:\n  valid_node n\n  valid_node n'\n  \\<nexists>as'. n -as'\\<rightarrow>* (_Exit_)", "have \"n' postdominates n\""], ["proof (prove)\nusing this:\n  valid_node n\n  valid_node n'\n  \\<nexists>as'. n -as'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. n' postdominates n", "by(auto simp:postdominate_def)"], ["proof (state)\nthis:\n  n' postdominates n\n\ngoal (1 subgoal):\n 1. \\<nexists>as'. n -as'\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n controls\\<^sub>s n' via as", "with not_pd"], ["proof (chain)\npicking this:\n  \\<not> n' postdominates n\n  n' postdominates n", "have False"], ["proof (prove)\nusing this:\n  \\<not> n' postdominates n\n  n' postdominates n\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<nexists>as'. n -as'\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n    n controls\\<^sub>s n' via as", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. n controls\\<^sub>s n' via as", "by simp"], ["proof (state)\nthis:\n  n controls\\<^sub>s n' via as\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n controls\\<^sub>s n' via as\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n controls\\<^sub>s n' via as\n\ngoal (1 subgoal):\n 1. n controls\\<^sub>s n' via as \\<Longrightarrow>\n    n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n controls\\<^sub>s n' via as \\<Longrightarrow>\n    n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')", "assume \"n controls\\<^sub>s n' via as\""], ["proof (state)\nthis:\n  n controls\\<^sub>s n' via as\n\ngoal (1 subgoal):\n 1. n controls\\<^sub>s n' via as \\<Longrightarrow>\n    n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')", "then"], ["proof (chain)\npicking this:\n  n controls\\<^sub>s n' via as", "obtain a nx a' nx' as' where notin:\"n' \\<notin> set(sourcenodes as)\"\n    and path:\"n -as\\<rightarrow>* n'\" and as:\"as = a#as'\" and valid_edge:\"valid_edge a'\"\n    and pd:\"n' postdominates (targetnode a)\"\n    and source':\"sourcenode a' = n\"\n    and not_pd:\"\\<not> n' postdominates (targetnode a')\""], ["proof (prove)\nusing this:\n  n controls\\<^sub>s n' via as\n\ngoal (1 subgoal):\n 1. (\\<And>a as' a'.\n        \\<lbrakk>n' \\<notin> set (sourcenodes as); n -as\\<rightarrow>* n';\n         as = a # as'; valid_edge a'; n' postdominates targetnode a;\n         sourcenode a' = n; \\<not> n' postdominates targetnode a'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp:dyn_standard_control_dependence_def)"], ["proof (state)\nthis:\n  n' \\<notin> set (sourcenodes as)\n  n -as\\<rightarrow>* n'\n  as = a # as'\n  valid_edge a'\n  n' postdominates targetnode a\n  sourcenode a' = n\n  \\<not> n' postdominates targetnode a'\n\ngoal (1 subgoal):\n 1. n controls\\<^sub>s n' via as \\<Longrightarrow>\n    n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')", "from path as"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* n'\n  as = a # as'", "have source:\"sourcenode a = n\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n'\n  as = a # as'\n\ngoal (1 subgoal):\n 1. sourcenode a = n", "by(auto elim:path.cases)"], ["proof (state)\nthis:\n  sourcenode a = n\n\ngoal (1 subgoal):\n 1. n controls\\<^sub>s n' via as \\<Longrightarrow>\n    n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')", "from path as"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* n'\n  as = a # as'", "have notExit:\"n \\<noteq> (_Exit_)\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n'\n  as = a # as'\n\ngoal (1 subgoal):\n 1. n \\<noteq> (_Exit_)", "by(auto elim:path.cases)"], ["proof (state)\nthis:\n  n \\<noteq> (_Exit_)\n\ngoal (1 subgoal):\n 1. n controls\\<^sub>s n' via as \\<Longrightarrow>\n    n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')", "from path"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* n'", "have valid:\"valid_node n\" and valid':\"valid_node n'\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. valid_node n &&& valid_node n'", "by(auto dest:path_valid_node)"], ["proof (state)\nthis:\n  valid_node n\n  valid_node n'\n\ngoal (1 subgoal):\n 1. n controls\\<^sub>s n' via as \\<Longrightarrow>\n    n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')", "from notin as source"], ["proof (chain)\npicking this:\n  n' \\<notin> set (sourcenodes as)\n  as = a # as'\n  sourcenode a = n", "have noteq:\"n \\<noteq> n'\""], ["proof (prove)\nusing this:\n  n' \\<notin> set (sourcenodes as)\n  as = a # as'\n  sourcenode a = n\n\ngoal (1 subgoal):\n 1. n \\<noteq> n'", "by(fastforce simp:sourcenodes_def)"], ["proof (state)\nthis:\n  n \\<noteq> n'\n\ngoal (1 subgoal):\n 1. n controls\\<^sub>s n' via as \\<Longrightarrow>\n    n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')", "from valid_edge"], ["proof (chain)\npicking this:\n  valid_edge a'", "have valid_target':\"valid_node (targetnode a')\""], ["proof (prove)\nusing this:\n  valid_edge a'\n\ngoal (1 subgoal):\n 1. valid_node (targetnode a')", "by(fastforce simp:valid_node_def)"], ["proof (state)\nthis:\n  valid_node (targetnode a')\n\ngoal (1 subgoal):\n 1. n controls\\<^sub>s n' via as \\<Longrightarrow>\n    n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')", "{"], ["proof (state)\nthis:\n  valid_node (targetnode a')\n\ngoal (1 subgoal):\n 1. n controls\\<^sub>s n' via as \\<Longrightarrow>\n    n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')", "assume pd':\"n' postdominates n\""], ["proof (state)\nthis:\n  n' postdominates n\n\ngoal (1 subgoal):\n 1. n controls\\<^sub>s n' via as \\<Longrightarrow>\n    n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')", "hence all:\"\\<forall>as. n -as\\<rightarrow>* (_Exit_) \\<longrightarrow> n' \\<in> set (sourcenodes as)\""], ["proof (prove)\nusing this:\n  n' postdominates n\n\ngoal (1 subgoal):\n 1. \\<forall>as.\n       n -as\\<rightarrow>* (_Exit_) \\<longrightarrow>\n       n' \\<in> set (sourcenodes as)", "by(auto simp:postdominate_def)"], ["proof (state)\nthis:\n  \\<forall>as.\n     n -as\\<rightarrow>* (_Exit_) \\<longrightarrow>\n     n' \\<in> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. n controls\\<^sub>s n' via as \\<Longrightarrow>\n    n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')", "from not_pd valid' valid_target'"], ["proof (chain)\npicking this:\n  \\<not> n' postdominates targetnode a'\n  valid_node n'\n  valid_node (targetnode a')", "obtain as' \n      where \"targetnode a' -as'\\<rightarrow>* (_Exit_)\""], ["proof (prove)\nusing this:\n  \\<not> n' postdominates targetnode a'\n  valid_node n'\n  valid_node (targetnode a')\n\ngoal (1 subgoal):\n 1. (\\<And>as'.\n        targetnode a' -as'\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(auto simp:postdominate_def)"], ["proof (state)\nthis:\n  targetnode a' -as'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. n controls\\<^sub>s n' via as \\<Longrightarrow>\n    n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')", "with source' valid_edge"], ["proof (chain)\npicking this:\n  sourcenode a' = n\n  valid_edge a'\n  targetnode a' -as'\\<rightarrow>* (_Exit_)", "have path':\"n -a'#as'\\<rightarrow>* (_Exit_)\""], ["proof (prove)\nusing this:\n  sourcenode a' = n\n  valid_edge a'\n  targetnode a' -as'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. n -a' # as'\\<rightarrow>* (_Exit_)", "by(fastforce intro:Cons_path)"], ["proof (state)\nthis:\n  n -a' # as'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. n controls\\<^sub>s n' via as \\<Longrightarrow>\n    n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')", "with all"], ["proof (chain)\npicking this:\n  \\<forall>as.\n     n -as\\<rightarrow>* (_Exit_) \\<longrightarrow>\n     n' \\<in> set (sourcenodes as)\n  n -a' # as'\\<rightarrow>* (_Exit_)", "have \"n' \\<in> set (sourcenodes (a'#as'))\""], ["proof (prove)\nusing this:\n  \\<forall>as.\n     n -as\\<rightarrow>* (_Exit_) \\<longrightarrow>\n     n' \\<in> set (sourcenodes as)\n  n -a' # as'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. n' \\<in> set (sourcenodes (a' # as'))", "by blast"], ["proof (state)\nthis:\n  n' \\<in> set (sourcenodes (a' # as'))\n\ngoal (1 subgoal):\n 1. n controls\\<^sub>s n' via as \\<Longrightarrow>\n    n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')", "with source'"], ["proof (chain)\npicking this:\n  sourcenode a' = n\n  n' \\<in> set (sourcenodes (a' # as'))", "have \"n' = n \\<or> n' \\<in> set (sourcenodes as')\""], ["proof (prove)\nusing this:\n  sourcenode a' = n\n  n' \\<in> set (sourcenodes (a' # as'))\n\ngoal (1 subgoal):\n 1. n' = n \\<or> n' \\<in> set (sourcenodes as')", "by(fastforce simp:sourcenodes_def)"], ["proof (state)\nthis:\n  n' = n \\<or> n' \\<in> set (sourcenodes as')\n\ngoal (1 subgoal):\n 1. n controls\\<^sub>s n' via as \\<Longrightarrow>\n    n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')", "hence False"], ["proof (prove)\nusing this:\n  n' = n \\<or> n' \\<in> set (sourcenodes as')\n\ngoal (1 subgoal):\n 1. False", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. n' = n \\<Longrightarrow> False\n 2. n' \\<in> set (sourcenodes as') \\<Longrightarrow> False", "assume \"n' = n\""], ["proof (state)\nthis:\n  n' = n\n\ngoal (2 subgoals):\n 1. n' = n \\<Longrightarrow> False\n 2. n' \\<in> set (sourcenodes as') \\<Longrightarrow> False", "with noteq"], ["proof (chain)\npicking this:\n  n \\<noteq> n'\n  n' = n", "show ?thesis"], ["proof (prove)\nusing this:\n  n \\<noteq> n'\n  n' = n\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. n' \\<in> set (sourcenodes as') \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n' \\<in> set (sourcenodes as') \\<Longrightarrow> False", "assume isin:\"n' \\<in> set (sourcenodes as')\""], ["proof (state)\nthis:\n  n' \\<in> set (sourcenodes as')\n\ngoal (1 subgoal):\n 1. n' \\<in> set (sourcenodes as') \\<Longrightarrow> False", "from path'"], ["proof (chain)\npicking this:\n  n -a' # as'\\<rightarrow>* (_Exit_)", "have path2:\"targetnode a' -as'\\<rightarrow>* (_Exit_)\""], ["proof (prove)\nusing this:\n  n -a' # as'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. targetnode a' -as'\\<rightarrow>* (_Exit_)", "by(fastforce elim:path_split_Cons)"], ["proof (state)\nthis:\n  targetnode a' -as'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. n' \\<in> set (sourcenodes as') \\<Longrightarrow> False", "thus ?thesis"], ["proof (prove)\nusing this:\n  targetnode a' -as'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. False", "proof(cases \"as' = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>targetnode a' -as'\\<rightarrow>* (_Exit_); as' = []\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>targetnode a' -as'\\<rightarrow>* (_Exit_);\n     as' \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  as' = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>targetnode a' -as'\\<rightarrow>* (_Exit_); as' = []\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>targetnode a' -as'\\<rightarrow>* (_Exit_);\n     as' \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> False", "with path2"], ["proof (chain)\npicking this:\n  targetnode a' -as'\\<rightarrow>* (_Exit_)\n  as' = []", "have \"targetnode a' = (_Exit_)\""], ["proof (prove)\nusing this:\n  targetnode a' -as'\\<rightarrow>* (_Exit_)\n  as' = []\n\ngoal (1 subgoal):\n 1. targetnode a' = (_Exit_)", "by(auto elim:path.cases)"], ["proof (state)\nthis:\n  targetnode a' = (_Exit_)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>targetnode a' -as'\\<rightarrow>* (_Exit_); as' = []\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>targetnode a' -as'\\<rightarrow>* (_Exit_);\n     as' \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> False", "with valid_edge all source'"], ["proof (chain)\npicking this:\n  valid_edge a'\n  \\<forall>as.\n     n -as\\<rightarrow>* (_Exit_) \\<longrightarrow>\n     n' \\<in> set (sourcenodes as)\n  sourcenode a' = n\n  targetnode a' = (_Exit_)", "have \"n' = n\""], ["proof (prove)\nusing this:\n  valid_edge a'\n  \\<forall>as.\n     n -as\\<rightarrow>* (_Exit_) \\<longrightarrow>\n     n' \\<in> set (sourcenodes as)\n  sourcenode a' = n\n  targetnode a' = (_Exit_)\n\ngoal (1 subgoal):\n 1. n' = n", "by(fastforce dest:path_edge simp:sourcenodes_def)"], ["proof (state)\nthis:\n  n' = n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>targetnode a' -as'\\<rightarrow>* (_Exit_); as' = []\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>targetnode a' -as'\\<rightarrow>* (_Exit_);\n     as' \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> False", "with noteq"], ["proof (chain)\npicking this:\n  n \\<noteq> n'\n  n' = n", "show ?thesis"], ["proof (prove)\nusing this:\n  n \\<noteq> n'\n  n' = n\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>targetnode a' -as'\\<rightarrow>* (_Exit_);\n     as' \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>targetnode a' -as'\\<rightarrow>* (_Exit_);\n     as' \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  as' \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>targetnode a' -as'\\<rightarrow>* (_Exit_);\n     as' \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> False", "from path2 not_pd valid' valid_edge"], ["proof (chain)\npicking this:\n  targetnode a' -as'\\<rightarrow>* (_Exit_)\n  \\<not> n' postdominates targetnode a'\n  valid_node n'\n  valid_edge a'", "obtain as''\n          where path'':\"targetnode a' -as''\\<rightarrow>* (_Exit_)\"\n          and notin:\"n' \\<notin> set (sourcenodes as'')\""], ["proof (prove)\nusing this:\n  targetnode a' -as'\\<rightarrow>* (_Exit_)\n  \\<not> n' postdominates targetnode a'\n  valid_node n'\n  valid_edge a'\n\ngoal (1 subgoal):\n 1. (\\<And>as''.\n        \\<lbrakk>targetnode a' -as''\\<rightarrow>* (_Exit_);\n         n' \\<notin> set (sourcenodes as'')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp:postdominate_def)"], ["proof (state)\nthis:\n  targetnode a' -as''\\<rightarrow>* (_Exit_)\n  n' \\<notin> set (sourcenodes as'')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>targetnode a' -as'\\<rightarrow>* (_Exit_);\n     as' \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> False", "from valid_edge path''"], ["proof (chain)\npicking this:\n  valid_edge a'\n  targetnode a' -as''\\<rightarrow>* (_Exit_)", "have \"sourcenode a' -a'#as''\\<rightarrow>* (_Exit_)\""], ["proof (prove)\nusing this:\n  valid_edge a'\n  targetnode a' -as''\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. sourcenode a' -a' # as''\\<rightarrow>* (_Exit_)", "by(fastforce intro:Cons_path)"], ["proof (state)\nthis:\n  sourcenode a' -a' # as''\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>targetnode a' -as'\\<rightarrow>* (_Exit_);\n     as' \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> False", "with all source'"], ["proof (chain)\npicking this:\n  \\<forall>as.\n     n -as\\<rightarrow>* (_Exit_) \\<longrightarrow>\n     n' \\<in> set (sourcenodes as)\n  sourcenode a' = n\n  sourcenode a' -a' # as''\\<rightarrow>* (_Exit_)", "have \"n' \\<in> set (sourcenodes ([a']@as''))\""], ["proof (prove)\nusing this:\n  \\<forall>as.\n     n -as\\<rightarrow>* (_Exit_) \\<longrightarrow>\n     n' \\<in> set (sourcenodes as)\n  sourcenode a' = n\n  sourcenode a' -a' # as''\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. n' \\<in> set (sourcenodes ([a'] @ as''))", "by simp"], ["proof (state)\nthis:\n  n' \\<in> set (sourcenodes ([a'] @ as''))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>targetnode a' -as'\\<rightarrow>* (_Exit_);\n     as' \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> False", "with source'"], ["proof (chain)\npicking this:\n  sourcenode a' = n\n  n' \\<in> set (sourcenodes ([a'] @ as''))", "have \"n' = n \\<or> n' \\<in> set (sourcenodes as'')\""], ["proof (prove)\nusing this:\n  sourcenode a' = n\n  n' \\<in> set (sourcenodes ([a'] @ as''))\n\ngoal (1 subgoal):\n 1. n' = n \\<or> n' \\<in> set (sourcenodes as'')", "by(auto simp:sourcenodes_def)"], ["proof (state)\nthis:\n  n' = n \\<or> n' \\<in> set (sourcenodes as'')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>targetnode a' -as'\\<rightarrow>* (_Exit_);\n     as' \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> False", "thus ?thesis"], ["proof (prove)\nusing this:\n  n' = n \\<or> n' \\<in> set (sourcenodes as'')\n\ngoal (1 subgoal):\n 1. False", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. n' = n \\<Longrightarrow> False\n 2. n' \\<in> set (sourcenodes as'') \\<Longrightarrow> False", "assume \"n' = n\""], ["proof (state)\nthis:\n  n' = n\n\ngoal (2 subgoals):\n 1. n' = n \\<Longrightarrow> False\n 2. n' \\<in> set (sourcenodes as'') \\<Longrightarrow> False", "with noteq"], ["proof (chain)\npicking this:\n  n \\<noteq> n'\n  n' = n", "show ?thesis"], ["proof (prove)\nusing this:\n  n \\<noteq> n'\n  n' = n\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. n' \\<in> set (sourcenodes as'') \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n' \\<in> set (sourcenodes as'') \\<Longrightarrow> False", "assume \"n' \\<in> set (sourcenodes as'')\""], ["proof (state)\nthis:\n  n' \\<in> set (sourcenodes as'')\n\ngoal (1 subgoal):\n 1. n' \\<in> set (sourcenodes as'') \\<Longrightarrow> False", "with notin"], ["proof (chain)\npicking this:\n  n' \\<notin> set (sourcenodes as'')\n  n' \\<in> set (sourcenodes as'')", "show ?thesis"], ["proof (prove)\nusing this:\n  n' \\<notin> set (sourcenodes as'')\n  n' \\<in> set (sourcenodes as'')\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. n controls\\<^sub>s n' via as \\<Longrightarrow>\n    n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')", "}"], ["proof (state)\nthis:\n  n' postdominates n \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. n controls\\<^sub>s n' via as \\<Longrightarrow>\n    n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')", "hence not_pd':\"\\<not> n' postdominates n\""], ["proof (prove)\nusing this:\n  n' postdominates n \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> n' postdominates n", "by blast"], ["proof (state)\nthis:\n  \\<not> n' postdominates n\n\ngoal (1 subgoal):\n 1. n controls\\<^sub>s n' via as \\<Longrightarrow>\n    n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')", "{"], ["proof (state)\nthis:\n  \\<not> n' postdominates n\n\ngoal (1 subgoal):\n 1. n controls\\<^sub>s n' via as \\<Longrightarrow>\n    n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')", "fix n''"], ["proof (state)\ngoal (1 subgoal):\n 1. n controls\\<^sub>s n' via as \\<Longrightarrow>\n    n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')", "assume \"n'' \\<in> set (targetnodes as)\""], ["proof (state)\nthis:\n  n'' \\<in> set (targetnodes as)\n\ngoal (1 subgoal):\n 1. n controls\\<^sub>s n' via as \\<Longrightarrow>\n    n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')", "with as source"], ["proof (chain)\npicking this:\n  as = a # as'\n  sourcenode a = n\n  n'' \\<in> set (targetnodes as)", "have \"n'' = targetnode a \\<or> n'' \\<in> set (targetnodes as')\""], ["proof (prove)\nusing this:\n  as = a # as'\n  sourcenode a = n\n  n'' \\<in> set (targetnodes as)\n\ngoal (1 subgoal):\n 1. n'' = targetnode a \\<or> n'' \\<in> set (targetnodes as')", "by(auto simp:targetnodes_def)"], ["proof (state)\nthis:\n  n'' = targetnode a \\<or> n'' \\<in> set (targetnodes as')\n\ngoal (1 subgoal):\n 1. n controls\\<^sub>s n' via as \\<Longrightarrow>\n    n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')", "hence \"n' postdominates n''\""], ["proof (prove)\nusing this:\n  n'' = targetnode a \\<or> n'' \\<in> set (targetnodes as')\n\ngoal (1 subgoal):\n 1. n' postdominates n''", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. n'' = targetnode a \\<Longrightarrow> n' postdominates n''\n 2. n'' \\<in> set (targetnodes as') \\<Longrightarrow> n' postdominates n''", "assume \"n'' = targetnode a\""], ["proof (state)\nthis:\n  n'' = targetnode a\n\ngoal (2 subgoals):\n 1. n'' = targetnode a \\<Longrightarrow> n' postdominates n''\n 2. n'' \\<in> set (targetnodes as') \\<Longrightarrow> n' postdominates n''", "with pd"], ["proof (chain)\npicking this:\n  n' postdominates targetnode a\n  n'' = targetnode a", "show ?thesis"], ["proof (prove)\nusing this:\n  n' postdominates targetnode a\n  n'' = targetnode a\n\ngoal (1 subgoal):\n 1. n' postdominates n''", "by simp"], ["proof (state)\nthis:\n  n' postdominates n''\n\ngoal (1 subgoal):\n 1. n'' \\<in> set (targetnodes as') \\<Longrightarrow> n' postdominates n''", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n'' \\<in> set (targetnodes as') \\<Longrightarrow> n' postdominates n''", "assume isin:\"n'' \\<in> set (targetnodes as')\""], ["proof (state)\nthis:\n  n'' \\<in> set (targetnodes as')\n\ngoal (1 subgoal):\n 1. n'' \\<in> set (targetnodes as') \\<Longrightarrow> n' postdominates n''", "hence \"\\<exists>ni \\<in> set (targetnodes as'). ni = n''\""], ["proof (prove)\nusing this:\n  n'' \\<in> set (targetnodes as')\n\ngoal (1 subgoal):\n 1. \\<exists>ni\\<in>set (targetnodes as'). ni = n''", "by simp"], ["proof (state)\nthis:\n  \\<exists>ni\\<in>set (targetnodes as'). ni = n''\n\ngoal (1 subgoal):\n 1. n'' \\<in> set (targetnodes as') \\<Longrightarrow> n' postdominates n''", "then"], ["proof (chain)\npicking this:\n  \\<exists>ni\\<in>set (targetnodes as'). ni = n''", "obtain ns ns' where targets:\"targetnodes as' = ns@n''#ns'\"\n        and all_noteq:\"\\<forall>ni \\<in> set ns'. ni \\<noteq> n''\""], ["proof (prove)\nusing this:\n  \\<exists>ni\\<in>set (targetnodes as'). ni = n''\n\ngoal (1 subgoal):\n 1. (\\<And>ns ns'.\n        \\<lbrakk>targetnodes as' = ns @ n'' # ns';\n         \\<forall>ni\\<in>set ns'. ni \\<noteq> n''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim!:rightmost_element_property)"], ["proof (state)\nthis:\n  targetnodes as' = ns @ n'' # ns'\n  \\<forall>ni\\<in>set ns'. ni \\<noteq> n''\n\ngoal (1 subgoal):\n 1. n'' \\<in> set (targetnodes as') \\<Longrightarrow> n' postdominates n''", "from targets"], ["proof (chain)\npicking this:\n  targetnodes as' = ns @ n'' # ns'", "obtain xs ax ys where ys:\"ns' = targetnodes ys\"\n        and as':\"as' = xs@ax#ys\" and target'':\"targetnode ax = n''\""], ["proof (prove)\nusing this:\n  targetnodes as' = ns @ n'' # ns'\n\ngoal (1 subgoal):\n 1. (\\<And>ys xs ax.\n        \\<lbrakk>ns' = targetnodes ys; as' = xs @ ax # ys;\n         targetnode ax = n''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim:map_append_append_maps simp:targetnodes_def)"], ["proof (state)\nthis:\n  ns' = targetnodes ys\n  as' = xs @ ax # ys\n  targetnode ax = n''\n\ngoal (1 subgoal):\n 1. n'' \\<in> set (targetnodes as') \\<Longrightarrow> n' postdominates n''", "from all_noteq ys"], ["proof (chain)\npicking this:\n  \\<forall>ni\\<in>set ns'. ni \\<noteq> n''\n  ns' = targetnodes ys", "have notin_target:\"n'' \\<notin> set(targetnodes ys)\""], ["proof (prove)\nusing this:\n  \\<forall>ni\\<in>set ns'. ni \\<noteq> n''\n  ns' = targetnodes ys\n\ngoal (1 subgoal):\n 1. n'' \\<notin> set (targetnodes ys)", "by auto"], ["proof (state)\nthis:\n  n'' \\<notin> set (targetnodes ys)\n\ngoal (1 subgoal):\n 1. n'' \\<in> set (targetnodes as') \\<Longrightarrow> n' postdominates n''", "from path as"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* n'\n  as = a # as'", "have \"n -[]@a#as'\\<rightarrow>* n'\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n'\n  as = a # as'\n\ngoal (1 subgoal):\n 1. n -[] @ a # as'\\<rightarrow>* n'", "by simp"], ["proof (state)\nthis:\n  n -[] @ a # as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. n'' \\<in> set (targetnodes as') \\<Longrightarrow> n' postdominates n''", "hence \"targetnode a -as'\\<rightarrow>* n'\""], ["proof (prove)\nusing this:\n  n -[] @ a # as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. targetnode a -as'\\<rightarrow>* n'", "by(fastforce dest:path_split)"], ["proof (state)\nthis:\n  targetnode a -as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. n'' \\<in> set (targetnodes as') \\<Longrightarrow> n' postdominates n''", "with isin"], ["proof (chain)\npicking this:\n  n'' \\<in> set (targetnodes as')\n  targetnode a -as'\\<rightarrow>* n'", "have path':\"targetnode a -as'\\<rightarrow>* n'\""], ["proof (prove)\nusing this:\n  n'' \\<in> set (targetnodes as')\n  targetnode a -as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. targetnode a -as'\\<rightarrow>* n'", "by(fastforce split:if_split_asm simp:targetnodes_def)"], ["proof (state)\nthis:\n  targetnode a -as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. n'' \\<in> set (targetnodes as') \\<Longrightarrow> n' postdominates n''", "with as' target''"], ["proof (chain)\npicking this:\n  as' = xs @ ax # ys\n  targetnode ax = n''\n  targetnode a -as'\\<rightarrow>* n'", "have path1:\"targetnode a -xs\\<rightarrow>* sourcenode ax\"\n        and valid_edge':\"valid_edge ax\"\n        and path2:\"n'' -ys\\<rightarrow>* n'\""], ["proof (prove)\nusing this:\n  as' = xs @ ax # ys\n  targetnode ax = n''\n  targetnode a -as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. targetnode a -xs\\<rightarrow>* sourcenode ax &&&\n    valid_edge ax &&& n'' -ys\\<rightarrow>* n'", "by(auto intro:path_split)"], ["proof (state)\nthis:\n  targetnode a -xs\\<rightarrow>* sourcenode ax\n  valid_edge ax\n  n'' -ys\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. n'' \\<in> set (targetnodes as') \\<Longrightarrow> n' postdominates n''", "from valid_edge'"], ["proof (chain)\npicking this:\n  valid_edge ax", "have \"sourcenode ax -[ax]\\<rightarrow>* targetnode ax\""], ["proof (prove)\nusing this:\n  valid_edge ax\n\ngoal (1 subgoal):\n 1. sourcenode ax -[ax]\\<rightarrow>* targetnode ax", "by(rule path_edge)"], ["proof (state)\nthis:\n  sourcenode ax -[ax]\\<rightarrow>* targetnode ax\n\ngoal (1 subgoal):\n 1. n'' \\<in> set (targetnodes as') \\<Longrightarrow> n' postdominates n''", "with path1 target''"], ["proof (chain)\npicking this:\n  targetnode a -xs\\<rightarrow>* sourcenode ax\n  targetnode ax = n''\n  sourcenode ax -[ax]\\<rightarrow>* targetnode ax", "have path_n'':\"targetnode a -xs@[ax]\\<rightarrow>* n''\""], ["proof (prove)\nusing this:\n  targetnode a -xs\\<rightarrow>* sourcenode ax\n  targetnode ax = n''\n  sourcenode ax -[ax]\\<rightarrow>* targetnode ax\n\ngoal (1 subgoal):\n 1. targetnode a -xs @ [ax]\\<rightarrow>* n''", "by(fastforce intro:path_Append)"], ["proof (state)\nthis:\n  targetnode a -xs @ [ax]\\<rightarrow>* n''\n\ngoal (1 subgoal):\n 1. n'' \\<in> set (targetnodes as') \\<Longrightarrow> n' postdominates n''", "from notin as as'"], ["proof (chain)\npicking this:\n  n' \\<notin> set (sourcenodes as)\n  as = a # as'\n  as' = xs @ ax # ys", "have notin':\"n'\\<notin> set (sourcenodes (xs@[ax]))\""], ["proof (prove)\nusing this:\n  n' \\<notin> set (sourcenodes as)\n  as = a # as'\n  as' = xs @ ax # ys\n\ngoal (1 subgoal):\n 1. n' \\<notin> set (sourcenodes (xs @ [ax]))", "by(simp add:sourcenodes_def)"], ["proof (state)\nthis:\n  n' \\<notin> set (sourcenodes (xs @ [ax]))\n\ngoal (1 subgoal):\n 1. n'' \\<in> set (targetnodes as') \\<Longrightarrow> n' postdominates n''", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. n' postdominates n''", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n' postdominates n'' \\<Longrightarrow> False", "assume \"\\<not> n' postdominates n''\""], ["proof (state)\nthis:\n  \\<not> n' postdominates n''\n\ngoal (1 subgoal):\n 1. \\<not> n' postdominates n'' \\<Longrightarrow> False", "with valid' target'' valid_edge'"], ["proof (chain)\npicking this:\n  valid_node n'\n  targetnode ax = n''\n  valid_edge ax\n  \\<not> n' postdominates n''", "obtain asx' \n          where Exit_path:\"n'' -asx'\\<rightarrow>* (_Exit_)\"\n          and notin'':\"n' \\<notin> set(sourcenodes asx')\""], ["proof (prove)\nusing this:\n  valid_node n'\n  targetnode ax = n''\n  valid_edge ax\n  \\<not> n' postdominates n''\n\ngoal (1 subgoal):\n 1. (\\<And>asx'.\n        \\<lbrakk>n'' -asx'\\<rightarrow>* (_Exit_);\n         n' \\<notin> set (sourcenodes asx')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp:postdominate_def)"], ["proof (state)\nthis:\n  n'' -asx'\\<rightarrow>* (_Exit_)\n  n' \\<notin> set (sourcenodes asx')\n\ngoal (1 subgoal):\n 1. \\<not> n' postdominates n'' \\<Longrightarrow> False", "from path_n'' Exit_path"], ["proof (chain)\npicking this:\n  targetnode a -xs @ [ax]\\<rightarrow>* n''\n  n'' -asx'\\<rightarrow>* (_Exit_)", "have Exit_path':\"targetnode a -(xs@[ax])@asx'\\<rightarrow>* (_Exit_)\""], ["proof (prove)\nusing this:\n  targetnode a -xs @ [ax]\\<rightarrow>* n''\n  n'' -asx'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. targetnode a -(xs @ [ax]) @ asx'\\<rightarrow>* (_Exit_)", "by(fastforce intro:path_Append)"], ["proof (state)\nthis:\n  targetnode a -(xs @ [ax]) @ asx'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<not> n' postdominates n'' \\<Longrightarrow> False", "from notin' notin''"], ["proof (chain)\npicking this:\n  n' \\<notin> set (sourcenodes (xs @ [ax]))\n  n' \\<notin> set (sourcenodes asx')", "have \"n' \\<notin> set(sourcenodes (xs@ax#asx'))\""], ["proof (prove)\nusing this:\n  n' \\<notin> set (sourcenodes (xs @ [ax]))\n  n' \\<notin> set (sourcenodes asx')\n\ngoal (1 subgoal):\n 1. n' \\<notin> set (sourcenodes (xs @ ax # asx'))", "by(simp add:sourcenodes_def)"], ["proof (state)\nthis:\n  n' \\<notin> set (sourcenodes (xs @ ax # asx'))\n\ngoal (1 subgoal):\n 1. \\<not> n' postdominates n'' \\<Longrightarrow> False", "with pd Exit_path'"], ["proof (chain)\npicking this:\n  n' postdominates targetnode a\n  targetnode a -(xs @ [ax]) @ asx'\\<rightarrow>* (_Exit_)\n  n' \\<notin> set (sourcenodes (xs @ ax # asx'))", "show False"], ["proof (prove)\nusing this:\n  n' postdominates targetnode a\n  targetnode a -(xs @ [ax]) @ asx'\\<rightarrow>* (_Exit_)\n  n' \\<notin> set (sourcenodes (xs @ ax # asx'))\n\ngoal (1 subgoal):\n 1. False", "by(simp add:postdominate_def)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n' postdominates n''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n' postdominates n''\n\ngoal (1 subgoal):\n 1. n controls\\<^sub>s n' via as \\<Longrightarrow>\n    n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')", "}"], ["proof (state)\nthis:\n  ?n''3 \\<in> set (targetnodes as) \\<Longrightarrow> n' postdominates ?n''3\n\ngoal (1 subgoal):\n 1. n controls\\<^sub>s n' via as \\<Longrightarrow>\n    n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')", "with path not_pd' notin noteq"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* n'\n  \\<not> n' postdominates n\n  n' \\<notin> set (sourcenodes as)\n  n \\<noteq> n'\n  ?n''3 \\<in> set (targetnodes as) \\<Longrightarrow> n' postdominates ?n''3", "show \"(n -as\\<rightarrow>* n') \\<and> (n \\<noteq> n') \\<and>\n    (\\<not> n' postdominates n) \\<and> (n' \\<notin> set(sourcenodes as)) \\<and>\n    (\\<forall>n'' \\<in> set(targetnodes as). n' postdominates n'')\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n'\n  \\<not> n' postdominates n\n  n' \\<notin> set (sourcenodes as)\n  n \\<noteq> n'\n  ?n''3 \\<in> set (targetnodes as) \\<Longrightarrow> n' postdominates ?n''3\n\ngoal (1 subgoal):\n 1. n -as\\<rightarrow>* n' \\<and>\n    n \\<noteq> n' \\<and>\n    \\<not> n' postdominates n \\<and>\n    n' \\<notin> set (sourcenodes as) \\<and>\n    (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')", "by blast"], ["proof (state)\nthis:\n  n -as\\<rightarrow>* n' \\<and>\n  n \\<noteq> n' \\<and>\n  \\<not> n' postdominates n \\<and>\n  n' \\<notin> set (sourcenodes as) \\<and>\n  (\\<forall>n''\\<in>set (targetnodes as). n' postdominates n'')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma which_node_dyn_standard_control_dependence_source:\n  assumes path:\"(_Entry_) -as@a#as'\\<rightarrow>* n\"\n  and Exit_path:\"n -as''\\<rightarrow>* (_Exit_)\" and source:\"sourcenode a = n'\" \n  and source':\"sourcenode a' = n'\"\n  and no_source:\"n \\<notin> set(sourcenodes (a#as'))\" and valid_edge':\"valid_edge a'\"\n  and inner_node:\"inner_node n\" and not_pd:\"\\<not> n postdominates (targetnode a')\"\n  and last:\"\\<forall>ax ax'. ax \\<in> set as' \\<and> sourcenode ax = sourcenode ax' \\<and>\n    valid_edge ax' \\<longrightarrow> n postdominates targetnode ax'\"\n  shows \"n' controls\\<^sub>s n via a#as'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n' controls\\<^sub>s n via a # as'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. n' controls\\<^sub>s n via a # as'", "from path source"], ["proof (chain)\npicking this:\n  (_Entry_) -as @ a # as'\\<rightarrow>* n\n  sourcenode a = n'", "have path_n'n:\"n' -a#as'\\<rightarrow>* n\""], ["proof (prove)\nusing this:\n  (_Entry_) -as @ a # as'\\<rightarrow>* n\n  sourcenode a = n'\n\ngoal (1 subgoal):\n 1. n' -a # as'\\<rightarrow>* n", "by(fastforce dest:path_split_second)"], ["proof (state)\nthis:\n  n' -a # as'\\<rightarrow>* n\n\ngoal (1 subgoal):\n 1. n' controls\\<^sub>s n via a # as'", "from path"], ["proof (chain)\npicking this:\n  (_Entry_) -as @ a # as'\\<rightarrow>* n", "have valid_edge:\"valid_edge a\""], ["proof (prove)\nusing this:\n  (_Entry_) -as @ a # as'\\<rightarrow>* n\n\ngoal (1 subgoal):\n 1. valid_edge a", "by(fastforce intro:path_split)"], ["proof (state)\nthis:\n  valid_edge a\n\ngoal (1 subgoal):\n 1. n' controls\\<^sub>s n via a # as'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. n' controls\\<^sub>s n via a # as'", "proof(cases \"n postdominates (targetnode a)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n postdominates targetnode a \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'\n 2. \\<not> n postdominates targetnode a \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "case True"], ["proof (state)\nthis:\n  n postdominates targetnode a\n\ngoal (2 subgoals):\n 1. n postdominates targetnode a \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'\n 2. \\<not> n postdominates targetnode a \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "with path_n'n not_pd no_source source source' valid_edge'"], ["proof (chain)\npicking this:\n  n' -a # as'\\<rightarrow>* n\n  \\<not> n postdominates targetnode a'\n  n \\<notin> set (sourcenodes (a # as'))\n  sourcenode a = n'\n  sourcenode a' = n'\n  valid_edge a'\n  n postdominates targetnode a", "show ?thesis"], ["proof (prove)\nusing this:\n  n' -a # as'\\<rightarrow>* n\n  \\<not> n postdominates targetnode a'\n  n \\<notin> set (sourcenodes (a # as'))\n  sourcenode a = n'\n  sourcenode a' = n'\n  valid_edge a'\n  n postdominates targetnode a\n\ngoal (1 subgoal):\n 1. n' controls\\<^sub>s n via a # as'", "by(auto simp:dyn_standard_control_dependence_def)"], ["proof (state)\nthis:\n  n' controls\\<^sub>s n via a # as'\n\ngoal (1 subgoal):\n 1. \\<not> n postdominates targetnode a \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n postdominates targetnode a \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "case False"], ["proof (state)\nthis:\n  \\<not> n postdominates targetnode a\n\ngoal (1 subgoal):\n 1. \\<not> n postdominates targetnode a \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "hence not_pd':\"\\<not> n postdominates (targetnode a)\""], ["proof (prove)\nusing this:\n  \\<not> n postdominates targetnode a\n\ngoal (1 subgoal):\n 1. \\<not> n postdominates targetnode a", "."], ["proof (state)\nthis:\n  \\<not> n postdominates targetnode a\n\ngoal (1 subgoal):\n 1. \\<not> n postdominates targetnode a \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. n' controls\\<^sub>s n via a # as'", "proof(cases \"as' = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. as' = [] \\<Longrightarrow> n' controls\\<^sub>s n via a # as'\n 2. as' \\<noteq> [] \\<Longrightarrow> n' controls\\<^sub>s n via a # as'", "case True"], ["proof (state)\nthis:\n  as' = []\n\ngoal (2 subgoals):\n 1. as' = [] \\<Longrightarrow> n' controls\\<^sub>s n via a # as'\n 2. as' \\<noteq> [] \\<Longrightarrow> n' controls\\<^sub>s n via a # as'", "with path_n'n"], ["proof (chain)\npicking this:\n  n' -a # as'\\<rightarrow>* n\n  as' = []", "have \"targetnode a = n\""], ["proof (prove)\nusing this:\n  n' -a # as'\\<rightarrow>* n\n  as' = []\n\ngoal (1 subgoal):\n 1. targetnode a = n", "by(fastforce elim:path.cases)"], ["proof (state)\nthis:\n  targetnode a = n\n\ngoal (2 subgoals):\n 1. as' = [] \\<Longrightarrow> n' controls\\<^sub>s n via a # as'\n 2. as' \\<noteq> [] \\<Longrightarrow> n' controls\\<^sub>s n via a # as'", "with inner_node"], ["proof (chain)\npicking this:\n  inner_node n\n  targetnode a = n", "have \"n postdominates (targetnode a)\""], ["proof (prove)\nusing this:\n  inner_node n\n  targetnode a = n\n\ngoal (1 subgoal):\n 1. n postdominates targetnode a", "by(cases \"n = (_Exit_)\",auto intro:postdominate_refl simp:inner_node_def)"], ["proof (state)\nthis:\n  n postdominates targetnode a\n\ngoal (2 subgoals):\n 1. as' = [] \\<Longrightarrow> n' controls\\<^sub>s n via a # as'\n 2. as' \\<noteq> [] \\<Longrightarrow> n' controls\\<^sub>s n via a # as'", "with not_pd path_n'n no_source source source' valid_edge'"], ["proof (chain)\npicking this:\n  \\<not> n postdominates targetnode a'\n  n' -a # as'\\<rightarrow>* n\n  n \\<notin> set (sourcenodes (a # as'))\n  sourcenode a = n'\n  sourcenode a' = n'\n  valid_edge a'\n  n postdominates targetnode a", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> n postdominates targetnode a'\n  n' -a # as'\\<rightarrow>* n\n  n \\<notin> set (sourcenodes (a # as'))\n  sourcenode a = n'\n  sourcenode a' = n'\n  valid_edge a'\n  n postdominates targetnode a\n\ngoal (1 subgoal):\n 1. n' controls\\<^sub>s n via a # as'", "by(fastforce simp:dyn_standard_control_dependence_def)"], ["proof (state)\nthis:\n  n' controls\\<^sub>s n via a # as'\n\ngoal (1 subgoal):\n 1. as' \\<noteq> [] \\<Longrightarrow> n' controls\\<^sub>s n via a # as'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. as' \\<noteq> [] \\<Longrightarrow> n' controls\\<^sub>s n via a # as'", "case False"], ["proof (state)\nthis:\n  as' \\<noteq> []\n\ngoal (1 subgoal):\n 1. as' \\<noteq> [] \\<Longrightarrow> n' controls\\<^sub>s n via a # as'", "hence notempty':\"as' \\<noteq> []\""], ["proof (prove)\nusing this:\n  as' \\<noteq> []\n\ngoal (1 subgoal):\n 1. as' \\<noteq> []", "."], ["proof (state)\nthis:\n  as' \\<noteq> []\n\ngoal (1 subgoal):\n 1. as' \\<noteq> [] \\<Longrightarrow> n' controls\\<^sub>s n via a # as'", "with path"], ["proof (chain)\npicking this:\n  (_Entry_) -as @ a # as'\\<rightarrow>* n\n  as' \\<noteq> []", "have path_nxn:\"targetnode a -as'\\<rightarrow>* n\""], ["proof (prove)\nusing this:\n  (_Entry_) -as @ a # as'\\<rightarrow>* n\n  as' \\<noteq> []\n\ngoal (1 subgoal):\n 1. targetnode a -as'\\<rightarrow>* n", "by(fastforce dest:path_split)"], ["proof (state)\nthis:\n  targetnode a -as'\\<rightarrow>* n\n\ngoal (1 subgoal):\n 1. as' \\<noteq> [] \\<Longrightarrow> n' controls\\<^sub>s n via a # as'", "from Exit_path path_nxn"], ["proof (chain)\npicking this:\n  n -as''\\<rightarrow>* (_Exit_)\n  targetnode a -as'\\<rightarrow>* n", "have \"\\<exists>as. targetnode a -as\\<rightarrow>* (_Exit_)\""], ["proof (prove)\nusing this:\n  n -as''\\<rightarrow>* (_Exit_)\n  targetnode a -as'\\<rightarrow>* n\n\ngoal (1 subgoal):\n 1. \\<exists>as. targetnode a -as\\<rightarrow>* (_Exit_)", "by(fastforce dest:path_Append)"], ["proof (state)\nthis:\n  \\<exists>as. targetnode a -as\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. as' \\<noteq> [] \\<Longrightarrow> n' controls\\<^sub>s n via a # as'", "with not_pd' inner_node valid_edge"], ["proof (chain)\npicking this:\n  \\<not> n postdominates targetnode a\n  inner_node n\n  valid_edge a\n  \\<exists>as. targetnode a -as\\<rightarrow>* (_Exit_)", "obtain asx \n        where path_Exit:\"targetnode a -asx\\<rightarrow>* (_Exit_)\" \n        and notin:\"n \\<notin> set (sourcenodes asx)\""], ["proof (prove)\nusing this:\n  \\<not> n postdominates targetnode a\n  inner_node n\n  valid_edge a\n  \\<exists>as. targetnode a -as\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. (\\<And>asx.\n        \\<lbrakk>targetnode a -asx\\<rightarrow>* (_Exit_);\n         n \\<notin> set (sourcenodes asx)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp:postdominate_def inner_is_valid)"], ["proof (state)\nthis:\n  targetnode a -asx\\<rightarrow>* (_Exit_)\n  n \\<notin> set (sourcenodes asx)\n\ngoal (1 subgoal):\n 1. as' \\<noteq> [] \\<Longrightarrow> n' controls\\<^sub>s n via a # as'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. n' controls\\<^sub>s n via a # as'", "proof(cases \"\\<exists>asx'. asx = as'@asx'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'\n 2. \\<nexists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "case True"], ["proof (state)\nthis:\n  \\<exists>asx'. asx = as' @ asx'\n\ngoal (2 subgoals):\n 1. \\<exists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'\n 2. \\<nexists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "then"], ["proof (chain)\npicking this:\n  \\<exists>asx'. asx = as' @ asx'", "obtain asx' where asx:\"asx = as'@asx'\""], ["proof (prove)\nusing this:\n  \\<exists>asx'. asx = as' @ asx'\n\ngoal (1 subgoal):\n 1. (\\<And>asx'.\n        asx = as' @ asx' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  asx = as' @ asx'\n\ngoal (2 subgoals):\n 1. \\<exists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'\n 2. \\<nexists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "from path notempty'"], ["proof (chain)\npicking this:\n  (_Entry_) -as @ a # as'\\<rightarrow>* n\n  as' \\<noteq> []", "have \"targetnode a -as'\\<rightarrow>* n\""], ["proof (prove)\nusing this:\n  (_Entry_) -as @ a # as'\\<rightarrow>* n\n  as' \\<noteq> []\n\ngoal (1 subgoal):\n 1. targetnode a -as'\\<rightarrow>* n", "by(fastforce dest:path_split)"], ["proof (state)\nthis:\n  targetnode a -as'\\<rightarrow>* n\n\ngoal (2 subgoals):\n 1. \\<exists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'\n 2. \\<nexists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "with path_Exit inner_node asx notempty'"], ["proof (chain)\npicking this:\n  targetnode a -asx\\<rightarrow>* (_Exit_)\n  inner_node n\n  asx = as' @ asx'\n  as' \\<noteq> []\n  targetnode a -as'\\<rightarrow>* n", "obtain a'' as'' where \"asx' = a''#as'' \\<and> sourcenode a'' = n\""], ["proof (prove)\nusing this:\n  targetnode a -asx\\<rightarrow>* (_Exit_)\n  inner_node n\n  asx = as' @ asx'\n  as' \\<noteq> []\n  targetnode a -as'\\<rightarrow>* n\n\ngoal (1 subgoal):\n 1. (\\<And>a'' as''.\n        asx' = a'' # as'' \\<and> sourcenode a'' = n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "apply(cases asx')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>a'' as''.\n                asx' = a'' # as'' \\<and>\n                sourcenode a'' = n \\<Longrightarrow>\n                thesis;\n     targetnode a -asx\\<rightarrow>* (_Exit_); inner_node n;\n     asx = as' @ asx'; as' \\<noteq> []; targetnode a -as'\\<rightarrow>* n;\n     asx' = []\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>aa list.\n       \\<lbrakk>\\<And>a'' as''.\n                   asx' = a'' # as'' \\<and>\n                   sourcenode a'' = n \\<Longrightarrow>\n                   thesis;\n        targetnode a -asx\\<rightarrow>* (_Exit_); inner_node n;\n        asx = as' @ asx'; as' \\<noteq> [];\n        targetnode a -as'\\<rightarrow>* n; asx' = aa # list\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply(fastforce dest:path_det)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>\\<And>a'' as''.\n                   asx' = a'' # as'' \\<and>\n                   sourcenode a'' = n \\<Longrightarrow>\n                   thesis;\n        targetnode a -asx\\<rightarrow>* (_Exit_); inner_node n;\n        asx = as' @ asx'; as' \\<noteq> [];\n        targetnode a -as'\\<rightarrow>* n; asx' = aa # list\\<rbrakk>\n       \\<Longrightarrow> thesis", "by(fastforce dest:path_split path_det)"], ["proof (state)\nthis:\n  asx' = a'' # as'' \\<and> sourcenode a'' = n\n\ngoal (2 subgoals):\n 1. \\<exists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'\n 2. \\<nexists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "with asx"], ["proof (chain)\npicking this:\n  asx = as' @ asx'\n  asx' = a'' # as'' \\<and> sourcenode a'' = n", "have \"n \\<in> set(sourcenodes asx)\""], ["proof (prove)\nusing this:\n  asx = as' @ asx'\n  asx' = a'' # as'' \\<and> sourcenode a'' = n\n\ngoal (1 subgoal):\n 1. n \\<in> set (sourcenodes asx)", "by(simp add:sourcenodes_def)"], ["proof (state)\nthis:\n  n \\<in> set (sourcenodes asx)\n\ngoal (2 subgoals):\n 1. \\<exists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'\n 2. \\<nexists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "with notin"], ["proof (chain)\npicking this:\n  n \\<notin> set (sourcenodes asx)\n  n \\<in> set (sourcenodes asx)", "have False"], ["proof (prove)\nusing this:\n  n \\<notin> set (sourcenodes asx)\n  n \\<in> set (sourcenodes asx)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<exists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'\n 2. \\<nexists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. n' controls\\<^sub>s n via a # as'", "by simp"], ["proof (state)\nthis:\n  n' controls\\<^sub>s n via a # as'\n\ngoal (1 subgoal):\n 1. \\<nexists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "case False"], ["proof (state)\nthis:\n  \\<nexists>asx'. asx = as' @ asx'\n\ngoal (1 subgoal):\n 1. \\<nexists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "hence all:\"\\<forall>asx'. asx \\<noteq> as'@asx'\""], ["proof (prove)\nusing this:\n  \\<nexists>asx'. asx = as' @ asx'\n\ngoal (1 subgoal):\n 1. \\<forall>asx'. asx \\<noteq> as' @ asx'", "by simp"], ["proof (state)\nthis:\n  \\<forall>asx'. asx \\<noteq> as' @ asx'\n\ngoal (1 subgoal):\n 1. \\<nexists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "then"], ["proof (chain)\npicking this:\n  \\<forall>asx'. asx \\<noteq> as' @ asx'", "obtain j asx' where asx:\"asx = (take j as')@asx'\"\n          and length:\"j < length as'\"\n          and not_more:\"\\<forall>k > j. \\<forall>asx''. asx \\<noteq> (take k as')@asx''\""], ["proof (prove)\nusing this:\n  \\<forall>asx'. asx \\<noteq> as' @ asx'\n\ngoal (1 subgoal):\n 1. (\\<And>j asx'.\n        \\<lbrakk>asx = take j as' @ asx'; j < length as';\n         \\<forall>k>j.\n            \\<forall>asx''. asx \\<noteq> take k as' @ asx''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto elim:path_split_general)"], ["proof (state)\nthis:\n  asx = take j as' @ asx'\n  j < length as'\n  \\<forall>k>j. \\<forall>asx''. asx \\<noteq> take k as' @ asx''\n\ngoal (1 subgoal):\n 1. \\<nexists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "from asx length"], ["proof (chain)\npicking this:\n  asx = take j as' @ asx'\n  j < length as'", "have \"\\<exists>as'1 as'2. asx = as'1@asx' \\<and> \n          as' = as'1@as'2 \\<and> as'2 \\<noteq> [] \\<and> as'1 = take j as'\""], ["proof (prove)\nusing this:\n  asx = take j as' @ asx'\n  j < length as'\n\ngoal (1 subgoal):\n 1. \\<exists>as'1 as'2.\n       asx = as'1 @ asx' \\<and>\n       as' = as'1 @ as'2 \\<and> as'2 \\<noteq> [] \\<and> as'1 = take j as'", "by simp(rule_tac x= \"drop j as'\" in exI,simp)"], ["proof (state)\nthis:\n  \\<exists>as'1 as'2.\n     asx = as'1 @ asx' \\<and>\n     as' = as'1 @ as'2 \\<and> as'2 \\<noteq> [] \\<and> as'1 = take j as'\n\ngoal (1 subgoal):\n 1. \\<nexists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "then"], ["proof (chain)\npicking this:\n  \\<exists>as'1 as'2.\n     asx = as'1 @ asx' \\<and>\n     as' = as'1 @ as'2 \\<and> as'2 \\<noteq> [] \\<and> as'1 = take j as'", "obtain as'1 as'' where asx:\"asx = as'1@asx'\"\n          and take:\"as'1 = take j as'\"\n          and x:\"as' = as'1@as''\" and x':\"as'' \\<noteq> []\""], ["proof (prove)\nusing this:\n  \\<exists>as'1 as'2.\n     asx = as'1 @ asx' \\<and>\n     as' = as'1 @ as'2 \\<and> as'2 \\<noteq> [] \\<and> as'1 = take j as'\n\ngoal (1 subgoal):\n 1. (\\<And>as'1 as''.\n        \\<lbrakk>asx = as'1 @ asx'; as'1 = take j as'; as' = as'1 @ as'';\n         as'' \\<noteq> []\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  asx = as'1 @ asx'\n  as'1 = take j as'\n  as' = as'1 @ as''\n  as'' \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<nexists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "from x x'"], ["proof (chain)\npicking this:\n  as' = as'1 @ as''\n  as'' \\<noteq> []", "obtain a1 as'2 where as':\"as' = as'1@a1#as'2\" and \"as'' = a1#as'2\""], ["proof (prove)\nusing this:\n  as' = as'1 @ as''\n  as'' \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>a1 as'2.\n        \\<lbrakk>as' = as'1 @ a1 # as'2; as'' = a1 # as'2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases as'') auto"], ["proof (state)\nthis:\n  as' = as'1 @ a1 # as'2\n  as'' = a1 # as'2\n\ngoal (1 subgoal):\n 1. \\<nexists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "have notempty_x':\"asx' \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. asx' \\<noteq> []", "proof(cases \"asx' = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. asx' = [] \\<Longrightarrow> asx' \\<noteq> []\n 2. asx' \\<noteq> [] \\<Longrightarrow> asx' \\<noteq> []", "case True"], ["proof (state)\nthis:\n  asx' = []\n\ngoal (2 subgoals):\n 1. asx' = [] \\<Longrightarrow> asx' \\<noteq> []\n 2. asx' \\<noteq> [] \\<Longrightarrow> asx' \\<noteq> []", "with asx as'"], ["proof (chain)\npicking this:\n  asx = as'1 @ asx'\n  as' = as'1 @ a1 # as'2\n  asx' = []", "have \"as' = asx@a1#as'2\""], ["proof (prove)\nusing this:\n  asx = as'1 @ asx'\n  as' = as'1 @ a1 # as'2\n  asx' = []\n\ngoal (1 subgoal):\n 1. as' = asx @ a1 # as'2", "by simp"], ["proof (state)\nthis:\n  as' = asx @ a1 # as'2\n\ngoal (2 subgoals):\n 1. asx' = [] \\<Longrightarrow> asx' \\<noteq> []\n 2. asx' \\<noteq> [] \\<Longrightarrow> asx' \\<noteq> []", "with path_n'n"], ["proof (chain)\npicking this:\n  n' -a # as'\\<rightarrow>* n\n  as' = asx @ a1 # as'2", "have \"n' -(a#asx)@a1#as'2\\<rightarrow>* n\""], ["proof (prove)\nusing this:\n  n' -a # as'\\<rightarrow>* n\n  as' = asx @ a1 # as'2\n\ngoal (1 subgoal):\n 1. n' -(a # asx) @ a1 # as'2\\<rightarrow>* n", "by simp"], ["proof (state)\nthis:\n  n' -(a # asx) @ a1 # as'2\\<rightarrow>* n\n\ngoal (2 subgoals):\n 1. asx' = [] \\<Longrightarrow> asx' \\<noteq> []\n 2. asx' \\<noteq> [] \\<Longrightarrow> asx' \\<noteq> []", "hence \"n' -a#asx\\<rightarrow>* sourcenode a1\"\n            and valid_edge1:\"valid_edge a1\""], ["proof (prove)\nusing this:\n  n' -(a # asx) @ a1 # as'2\\<rightarrow>* n\n\ngoal (1 subgoal):\n 1. n' -a # asx\\<rightarrow>* sourcenode a1 &&& valid_edge a1", "by(fastforce elim:path_split)+"], ["proof (state)\nthis:\n  n' -a # asx\\<rightarrow>* sourcenode a1\n  valid_edge a1\n\ngoal (2 subgoals):\n 1. asx' = [] \\<Longrightarrow> asx' \\<noteq> []\n 2. asx' \\<noteq> [] \\<Longrightarrow> asx' \\<noteq> []", "hence \"targetnode a -asx\\<rightarrow>* sourcenode a1\""], ["proof (prove)\nusing this:\n  n' -a # asx\\<rightarrow>* sourcenode a1\n  valid_edge a1\n\ngoal (1 subgoal):\n 1. targetnode a -asx\\<rightarrow>* sourcenode a1", "by(fastforce intro:path_split_Cons)"], ["proof (state)\nthis:\n  targetnode a -asx\\<rightarrow>* sourcenode a1\n\ngoal (2 subgoals):\n 1. asx' = [] \\<Longrightarrow> asx' \\<noteq> []\n 2. asx' \\<noteq> [] \\<Longrightarrow> asx' \\<noteq> []", "with path_Exit"], ["proof (chain)\npicking this:\n  targetnode a -asx\\<rightarrow>* (_Exit_)\n  targetnode a -asx\\<rightarrow>* sourcenode a1", "have \"(_Exit_) = sourcenode a1\""], ["proof (prove)\nusing this:\n  targetnode a -asx\\<rightarrow>* (_Exit_)\n  targetnode a -asx\\<rightarrow>* sourcenode a1\n\ngoal (1 subgoal):\n 1. (_Exit_) = sourcenode a1", "by(rule path_det)"], ["proof (state)\nthis:\n  (_Exit_) = sourcenode a1\n\ngoal (2 subgoals):\n 1. asx' = [] \\<Longrightarrow> asx' \\<noteq> []\n 2. asx' \\<noteq> [] \\<Longrightarrow> asx' \\<noteq> []", "from this[THEN sym] valid_edge1"], ["proof (chain)\npicking this:\n  sourcenode a1 = (_Exit_)\n  valid_edge a1", "have False"], ["proof (prove)\nusing this:\n  sourcenode a1 = (_Exit_)\n  valid_edge a1\n\ngoal (1 subgoal):\n 1. False", "by -(rule Exit_source,simp_all)"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. asx' = [] \\<Longrightarrow> asx' \\<noteq> []\n 2. asx' \\<noteq> [] \\<Longrightarrow> asx' \\<noteq> []", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. asx' \\<noteq> []", "by simp"], ["proof (state)\nthis:\n  asx' \\<noteq> []\n\ngoal (1 subgoal):\n 1. asx' \\<noteq> [] \\<Longrightarrow> asx' \\<noteq> []", "qed simp"], ["proof (state)\nthis:\n  asx' \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<nexists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "with asx"], ["proof (chain)\npicking this:\n  asx = as'1 @ asx'\n  asx' \\<noteq> []", "obtain a2 asx'1 \n          where asx:\"asx = as'1@a2#asx'1\"\n          and asx':\"asx' = a2#asx'1\""], ["proof (prove)\nusing this:\n  asx = as'1 @ asx'\n  asx' \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>a2 asx'1.\n        \\<lbrakk>asx = as'1 @ a2 # asx'1; asx' = a2 # asx'1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases asx') auto"], ["proof (state)\nthis:\n  asx = as'1 @ a2 # asx'1\n  asx' = a2 # asx'1\n\ngoal (1 subgoal):\n 1. \\<nexists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "from path_n'n as'"], ["proof (chain)\npicking this:\n  n' -a # as'\\<rightarrow>* n\n  as' = as'1 @ a1 # as'2", "have \"n' -(a#as'1)@a1#as'2\\<rightarrow>* n\""], ["proof (prove)\nusing this:\n  n' -a # as'\\<rightarrow>* n\n  as' = as'1 @ a1 # as'2\n\ngoal (1 subgoal):\n 1. n' -(a # as'1) @ a1 # as'2\\<rightarrow>* n", "by simp"], ["proof (state)\nthis:\n  n' -(a # as'1) @ a1 # as'2\\<rightarrow>* n\n\ngoal (1 subgoal):\n 1. \\<nexists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "hence \"n' -a#as'1\\<rightarrow>* sourcenode a1\" and valid_edge1:\"valid_edge a1\""], ["proof (prove)\nusing this:\n  n' -(a # as'1) @ a1 # as'2\\<rightarrow>* n\n\ngoal (1 subgoal):\n 1. n' -a # as'1\\<rightarrow>* sourcenode a1 &&& valid_edge a1", "by(fastforce elim:path_split)+"], ["proof (state)\nthis:\n  n' -a # as'1\\<rightarrow>* sourcenode a1\n  valid_edge a1\n\ngoal (1 subgoal):\n 1. \\<nexists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "hence path1:\"targetnode a -as'1\\<rightarrow>* sourcenode a1\""], ["proof (prove)\nusing this:\n  n' -a # as'1\\<rightarrow>* sourcenode a1\n  valid_edge a1\n\ngoal (1 subgoal):\n 1. targetnode a -as'1\\<rightarrow>* sourcenode a1", "by(fastforce intro:path_split_Cons)"], ["proof (state)\nthis:\n  targetnode a -as'1\\<rightarrow>* sourcenode a1\n\ngoal (1 subgoal):\n 1. \\<nexists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "from path_Exit asx"], ["proof (chain)\npicking this:\n  targetnode a -asx\\<rightarrow>* (_Exit_)\n  asx = as'1 @ a2 # asx'1", "have \"targetnode a -as'1\\<rightarrow>* sourcenode a2\"\n          and valid_edge2:\"valid_edge a2\"\n          and path2:\"targetnode a2 -asx'1\\<rightarrow>* (_Exit_)\""], ["proof (prove)\nusing this:\n  targetnode a -asx\\<rightarrow>* (_Exit_)\n  asx = as'1 @ a2 # asx'1\n\ngoal (1 subgoal):\n 1. targetnode a -as'1\\<rightarrow>* sourcenode a2 &&&\n    valid_edge a2 &&& targetnode a2 -asx'1\\<rightarrow>* (_Exit_)", "by(auto intro:path_split)"], ["proof (state)\nthis:\n  targetnode a -as'1\\<rightarrow>* sourcenode a2\n  valid_edge a2\n  targetnode a2 -asx'1\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<nexists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "with path1"], ["proof (chain)\npicking this:\n  targetnode a -as'1\\<rightarrow>* sourcenode a1\n  targetnode a -as'1\\<rightarrow>* sourcenode a2\n  valid_edge a2\n  targetnode a2 -asx'1\\<rightarrow>* (_Exit_)", "have eq12:\"sourcenode a1 = sourcenode a2\""], ["proof (prove)\nusing this:\n  targetnode a -as'1\\<rightarrow>* sourcenode a1\n  targetnode a -as'1\\<rightarrow>* sourcenode a2\n  valid_edge a2\n  targetnode a2 -asx'1\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. sourcenode a1 = sourcenode a2", "by(cases as'1,auto dest:path_det)"], ["proof (state)\nthis:\n  sourcenode a1 = sourcenode a2\n\ngoal (1 subgoal):\n 1. \\<nexists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "from asx notin"], ["proof (chain)\npicking this:\n  asx = as'1 @ a2 # asx'1\n  n \\<notin> set (sourcenodes asx)", "have \"n \\<notin> set (sourcenodes asx'1)\""], ["proof (prove)\nusing this:\n  asx = as'1 @ a2 # asx'1\n  n \\<notin> set (sourcenodes asx)\n\ngoal (1 subgoal):\n 1. n \\<notin> set (sourcenodes asx'1)", "by(simp add:sourcenodes_def)"], ["proof (state)\nthis:\n  n \\<notin> set (sourcenodes asx'1)\n\ngoal (1 subgoal):\n 1. \\<nexists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "with path2"], ["proof (chain)\npicking this:\n  targetnode a2 -asx'1\\<rightarrow>* (_Exit_)\n  n \\<notin> set (sourcenodes asx'1)", "have not_pd'2:\"\\<not> n postdominates targetnode a2\""], ["proof (prove)\nusing this:\n  targetnode a2 -asx'1\\<rightarrow>* (_Exit_)\n  n \\<notin> set (sourcenodes asx'1)\n\ngoal (1 subgoal):\n 1. \\<not> n postdominates targetnode a2", "by(cases \"asx'1 = []\",auto simp:postdominate_def)"], ["proof (state)\nthis:\n  \\<not> n postdominates targetnode a2\n\ngoal (1 subgoal):\n 1. \\<nexists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "from as'"], ["proof (chain)\npicking this:\n  as' = as'1 @ a1 # as'2", "have \"a1 \\<in> set as'\""], ["proof (prove)\nusing this:\n  as' = as'1 @ a1 # as'2\n\ngoal (1 subgoal):\n 1. a1 \\<in> set as'", "by simp"], ["proof (state)\nthis:\n  a1 \\<in> set as'\n\ngoal (1 subgoal):\n 1. \\<nexists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "with eq12 last valid_edge2"], ["proof (chain)\npicking this:\n  sourcenode a1 = sourcenode a2\n  \\<forall>ax ax'.\n     ax \\<in> set as' \\<and>\n     sourcenode ax = sourcenode ax' \\<and> valid_edge ax' \\<longrightarrow>\n     n postdominates targetnode ax'\n  valid_edge a2\n  a1 \\<in> set as'", "have \"n postdominates targetnode a2\""], ["proof (prove)\nusing this:\n  sourcenode a1 = sourcenode a2\n  \\<forall>ax ax'.\n     ax \\<in> set as' \\<and>\n     sourcenode ax = sourcenode ax' \\<and> valid_edge ax' \\<longrightarrow>\n     n postdominates targetnode ax'\n  valid_edge a2\n  a1 \\<in> set as'\n\ngoal (1 subgoal):\n 1. n postdominates targetnode a2", "by blast"], ["proof (state)\nthis:\n  n postdominates targetnode a2\n\ngoal (1 subgoal):\n 1. \\<nexists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "with not_pd'2"], ["proof (chain)\npicking this:\n  \\<not> n postdominates targetnode a2\n  n postdominates targetnode a2", "have False"], ["proof (prove)\nusing this:\n  \\<not> n postdominates targetnode a2\n  n postdominates targetnode a2\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<nexists>asx'. asx = as' @ asx' \\<Longrightarrow>\n    n' controls\\<^sub>s n via a # as'", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. n' controls\\<^sub>s n via a # as'", "by simp"], ["proof (state)\nthis:\n  n' controls\\<^sub>s n via a # as'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n' controls\\<^sub>s n via a # as'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n' controls\\<^sub>s n via a # as'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n' controls\\<^sub>s n via a # as'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inner_node_dyn_standard_control_dependence_predecessor:\n  assumes inner_node:\"inner_node n\"\n  obtains n' as where \"n' controls\\<^sub>s n via as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n' as.\n        n' controls\\<^sub>s n via as \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "proof(atomize_elim)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n'. Ex (dyn_standard_control_dependence n' n)", "from inner_node"], ["proof (chain)\npicking this:\n  inner_node n", "obtain as' where pathExit:\"n -as'\\<rightarrow>* (_Exit_)\""], ["proof (prove)\nusing this:\n  inner_node n\n\ngoal (1 subgoal):\n 1. (\\<And>as'.\n        n -as'\\<rightarrow>* (_Exit_) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(fastforce dest:inner_is_valid Exit_path)"], ["proof (state)\nthis:\n  n -as'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<exists>n'. Ex (dyn_standard_control_dependence n' n)", "from inner_node"], ["proof (chain)\npicking this:\n  inner_node n", "obtain as where pathEntry:\"(_Entry_) -as\\<rightarrow>* n\""], ["proof (prove)\nusing this:\n  inner_node n\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        (_Entry_) -as\\<rightarrow>* n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(fastforce dest:inner_is_valid Entry_path)"], ["proof (state)\nthis:\n  (_Entry_) -as\\<rightarrow>* n\n\ngoal (1 subgoal):\n 1. \\<exists>n'. Ex (dyn_standard_control_dependence n' n)", "with inner_node"], ["proof (chain)\npicking this:\n  inner_node n\n  (_Entry_) -as\\<rightarrow>* n", "have notEmpty:\"as \\<noteq> []\""], ["proof (prove)\nusing this:\n  inner_node n\n  (_Entry_) -as\\<rightarrow>* n\n\ngoal (1 subgoal):\n 1. as \\<noteq> []", "by(auto elim:path.cases simp:inner_node_def)"], ["proof (state)\nthis:\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>n'. Ex (dyn_standard_control_dependence n' n)", "have \"\\<exists>a asx. (_Entry_) -a#asx\\<rightarrow>* n \\<and> n \\<notin> set (sourcenodes (a#asx))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))", "proof(cases \"n \\<in> set (sourcenodes as)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n \\<in> set (sourcenodes as) \\<Longrightarrow>\n    \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))\n 2. n \\<notin> set (sourcenodes as) \\<Longrightarrow>\n    \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))", "case True"], ["proof (state)\nthis:\n  n \\<in> set (sourcenodes as)\n\ngoal (2 subgoals):\n 1. n \\<in> set (sourcenodes as) \\<Longrightarrow>\n    \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))\n 2. n \\<notin> set (sourcenodes as) \\<Longrightarrow>\n    \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))", "hence \"\\<exists>n'' \\<in> set(sourcenodes as). n = n''\""], ["proof (prove)\nusing this:\n  n \\<in> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. \\<exists>n''\\<in>set (sourcenodes as). n = n''", "by simp"], ["proof (state)\nthis:\n  \\<exists>n''\\<in>set (sourcenodes as). n = n''\n\ngoal (2 subgoals):\n 1. n \\<in> set (sourcenodes as) \\<Longrightarrow>\n    \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))\n 2. n \\<notin> set (sourcenodes as) \\<Longrightarrow>\n    \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))", "then"], ["proof (chain)\npicking this:\n  \\<exists>n''\\<in>set (sourcenodes as). n = n''", "obtain ns' ns'' where nodes:\"sourcenodes as = ns'@n#ns''\"\n      and notin:\"\\<forall>n'' \\<in> set ns'. n \\<noteq> n''\""], ["proof (prove)\nusing this:\n  \\<exists>n''\\<in>set (sourcenodes as). n = n''\n\ngoal (1 subgoal):\n 1. (\\<And>ns' ns''.\n        \\<lbrakk>sourcenodes as = ns' @ n # ns'';\n         \\<forall>n''\\<in>set ns'. n \\<noteq> n''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim!:split_list_first_propE)"], ["proof (state)\nthis:\n  sourcenodes as = ns' @ n # ns''\n  \\<forall>n''\\<in>set ns'. n \\<noteq> n''\n\ngoal (2 subgoals):\n 1. n \\<in> set (sourcenodes as) \\<Longrightarrow>\n    \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))\n 2. n \\<notin> set (sourcenodes as) \\<Longrightarrow>\n    \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))", "from nodes"], ["proof (chain)\npicking this:\n  sourcenodes as = ns' @ n # ns''", "obtain xs ys a'\n      where xs:\"sourcenodes xs = ns'\" and as:\"as = xs@a'#ys\"\n      and source:\"sourcenode a' = n\""], ["proof (prove)\nusing this:\n  sourcenodes as = ns' @ n # ns''\n\ngoal (1 subgoal):\n 1. (\\<And>xs a' ys.\n        \\<lbrakk>sourcenodes xs = ns'; as = xs @ a' # ys;\n         sourcenode a' = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim:map_append_append_maps simp:sourcenodes_def)"], ["proof (state)\nthis:\n  sourcenodes xs = ns'\n  as = xs @ a' # ys\n  sourcenode a' = n\n\ngoal (2 subgoals):\n 1. n \\<in> set (sourcenodes as) \\<Longrightarrow>\n    \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))\n 2. n \\<notin> set (sourcenodes as) \\<Longrightarrow>\n    \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))", "from pathEntry as"], ["proof (chain)\npicking this:\n  (_Entry_) -as\\<rightarrow>* n\n  as = xs @ a' # ys", "have \"(_Entry_) -xs@a'#ys\\<rightarrow>* n\""], ["proof (prove)\nusing this:\n  (_Entry_) -as\\<rightarrow>* n\n  as = xs @ a' # ys\n\ngoal (1 subgoal):\n 1. (_Entry_) -xs @ a' # ys\\<rightarrow>* n", "by simp"], ["proof (state)\nthis:\n  (_Entry_) -xs @ a' # ys\\<rightarrow>* n\n\ngoal (2 subgoals):\n 1. n \\<in> set (sourcenodes as) \\<Longrightarrow>\n    \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))\n 2. n \\<notin> set (sourcenodes as) \\<Longrightarrow>\n    \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))", "hence path2:\"(_Entry_) -xs\\<rightarrow>* sourcenode a'\""], ["proof (prove)\nusing this:\n  (_Entry_) -xs @ a' # ys\\<rightarrow>* n\n\ngoal (1 subgoal):\n 1. (_Entry_) -xs\\<rightarrow>* sourcenode a'", "by(fastforce dest:path_split)"], ["proof (state)\nthis:\n  (_Entry_) -xs\\<rightarrow>* sourcenode a'\n\ngoal (2 subgoals):\n 1. n \\<in> set (sourcenodes as) \\<Longrightarrow>\n    \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))\n 2. n \\<notin> set (sourcenodes as) \\<Longrightarrow>\n    \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))", "proof(cases \"xs = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))\n 2. xs \\<noteq> [] \\<Longrightarrow>\n    \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))", "case True"], ["proof (state)\nthis:\n  xs = []\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))\n 2. xs \\<noteq> [] \\<Longrightarrow>\n    \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))", "with path2"], ["proof (chain)\npicking this:\n  (_Entry_) -xs\\<rightarrow>* sourcenode a'\n  xs = []", "have \"(_Entry_) = sourcenode a'\""], ["proof (prove)\nusing this:\n  (_Entry_) -xs\\<rightarrow>* sourcenode a'\n  xs = []\n\ngoal (1 subgoal):\n 1. (_Entry_) = sourcenode a'", "by(auto elim:path.cases)"], ["proof (state)\nthis:\n  (_Entry_) = sourcenode a'\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))\n 2. xs \\<noteq> [] \\<Longrightarrow>\n    \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))", "with pathEntry source notEmpty"], ["proof (chain)\npicking this:\n  (_Entry_) -as\\<rightarrow>* n\n  sourcenode a' = n\n  as \\<noteq> []\n  (_Entry_) = sourcenode a'", "have \"(_Entry_) -as\\<rightarrow>* (_Entry_) \\<and> as \\<noteq> []\""], ["proof (prove)\nusing this:\n  (_Entry_) -as\\<rightarrow>* n\n  sourcenode a' = n\n  as \\<noteq> []\n  (_Entry_) = sourcenode a'\n\ngoal (1 subgoal):\n 1. (_Entry_) -as\\<rightarrow>* (_Entry_) \\<and> as \\<noteq> []", "by(auto elim:path.cases)"], ["proof (state)\nthis:\n  (_Entry_) -as\\<rightarrow>* (_Entry_) \\<and> as \\<noteq> []\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))\n 2. xs \\<noteq> [] \\<Longrightarrow>\n    \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))", "hence False"], ["proof (prove)\nusing this:\n  (_Entry_) -as\\<rightarrow>* (_Entry_) \\<and> as \\<noteq> []\n\ngoal (1 subgoal):\n 1. False", "by(fastforce dest:path_Entry_target)"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))\n 2. xs \\<noteq> [] \\<Longrightarrow>\n    \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))", "by simp"], ["proof (state)\nthis:\n  \\<exists>a asx.\n     (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n     n \\<notin> set (sourcenodes (a # asx))\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow>\n    \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow>\n    \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))", "case False"], ["proof (state)\nthis:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow>\n    \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))", "then"], ["proof (chain)\npicking this:\n  xs \\<noteq> []", "obtain n a'' xs' where \"xs = a''#xs'\""], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>a'' xs'.\n        xs = a'' # xs' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases xs) auto"], ["proof (state)\nthis:\n  xs = a'' # xs'\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow>\n    \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))", "with False path2 notin xs source"], ["proof (chain)\npicking this:\n  xs \\<noteq> []\n  (_Entry_) -xs\\<rightarrow>* sourcenode a'\n  \\<forall>n''\\<in>set ns'. n \\<noteq> n''\n  sourcenodes xs = ns'\n  sourcenode a' = n\n  xs = a'' # xs'", "show ?thesis"], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n  (_Entry_) -xs\\<rightarrow>* sourcenode a'\n  \\<forall>n''\\<in>set ns'. n \\<noteq> n''\n  sourcenodes xs = ns'\n  sourcenode a' = n\n  xs = a'' # xs'\n\ngoal (1 subgoal):\n 1. \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))", "by simp blast"], ["proof (state)\nthis:\n  \\<exists>a asx.\n     (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n     n \\<notin> set (sourcenodes (a # asx))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>a asx.\n     (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n     n \\<notin> set (sourcenodes (a # asx))\n\ngoal (1 subgoal):\n 1. n \\<notin> set (sourcenodes as) \\<Longrightarrow>\n    \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<notin> set (sourcenodes as) \\<Longrightarrow>\n    \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))", "case False"], ["proof (state)\nthis:\n  n \\<notin> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. n \\<notin> set (sourcenodes as) \\<Longrightarrow>\n    \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))", "from notEmpty"], ["proof (chain)\npicking this:\n  as \\<noteq> []", "obtain a as' where \"as = a#as'\""], ["proof (prove)\nusing this:\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>a as'. as = a # as' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases as) auto"], ["proof (state)\nthis:\n  as = a # as'\n\ngoal (1 subgoal):\n 1. n \\<notin> set (sourcenodes as) \\<Longrightarrow>\n    \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))", "with False pathEntry"], ["proof (chain)\npicking this:\n  n \\<notin> set (sourcenodes as)\n  (_Entry_) -as\\<rightarrow>* n\n  as = a # as'", "show ?thesis"], ["proof (prove)\nusing this:\n  n \\<notin> set (sourcenodes as)\n  (_Entry_) -as\\<rightarrow>* n\n  as = a # as'\n\ngoal (1 subgoal):\n 1. \\<exists>a asx.\n       (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n       n \\<notin> set (sourcenodes (a # asx))", "by auto"], ["proof (state)\nthis:\n  \\<exists>a asx.\n     (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n     n \\<notin> set (sourcenodes (a # asx))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>a asx.\n     (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n     n \\<notin> set (sourcenodes (a # asx))\n\ngoal (1 subgoal):\n 1. \\<exists>n'. Ex (dyn_standard_control_dependence n' n)", "then"], ["proof (chain)\npicking this:\n  \\<exists>a asx.\n     (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n     n \\<notin> set (sourcenodes (a # asx))", "obtain a asx where pathEntry':\"(_Entry_) -a#asx\\<rightarrow>* n\"\n    and notin:\"n \\<notin> set (sourcenodes (a#asx))\""], ["proof (prove)\nusing this:\n  \\<exists>a asx.\n     (_Entry_) -a # asx\\<rightarrow>* n \\<and>\n     n \\<notin> set (sourcenodes (a # asx))\n\ngoal (1 subgoal):\n 1. (\\<And>a asx.\n        \\<lbrakk>(_Entry_) -a # asx\\<rightarrow>* n;\n         n \\<notin> set (sourcenodes (a # asx))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (_Entry_) -a # asx\\<rightarrow>* n\n  n \\<notin> set (sourcenodes (a # asx))\n\ngoal (1 subgoal):\n 1. \\<exists>n'. Ex (dyn_standard_control_dependence n' n)", "show \"\\<exists>n' as. n' controls\\<^sub>s n via as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n' as. n' controls\\<^sub>s n via as", "proof(cases \"\\<forall>a' a''. a' \\<in> set asx \\<and> sourcenode a' = sourcenode a'' \\<and> \n      valid_edge a'' \\<longrightarrow> n postdominates targetnode a''\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>a' a''.\n       a' \\<in> set asx \\<and>\n       sourcenode a' = sourcenode a'' \\<and>\n       valid_edge a'' \\<longrightarrow>\n       n postdominates targetnode a'' \\<Longrightarrow>\n    \\<exists>n' as. n' controls\\<^sub>s n via as\n 2. \\<not> (\\<forall>a' a''.\n               a' \\<in> set asx \\<and>\n               sourcenode a' = sourcenode a'' \\<and>\n               valid_edge a'' \\<longrightarrow>\n               n postdominates targetnode a'') \\<Longrightarrow>\n    \\<exists>n' as. n' controls\\<^sub>s n via as", "case True"], ["proof (state)\nthis:\n  \\<forall>a' a''.\n     a' \\<in> set asx \\<and>\n     sourcenode a' = sourcenode a'' \\<and> valid_edge a'' \\<longrightarrow>\n     n postdominates targetnode a''\n\ngoal (2 subgoals):\n 1. \\<forall>a' a''.\n       a' \\<in> set asx \\<and>\n       sourcenode a' = sourcenode a'' \\<and>\n       valid_edge a'' \\<longrightarrow>\n       n postdominates targetnode a'' \\<Longrightarrow>\n    \\<exists>n' as. n' controls\\<^sub>s n via as\n 2. \\<not> (\\<forall>a' a''.\n               a' \\<in> set asx \\<and>\n               sourcenode a' = sourcenode a'' \\<and>\n               valid_edge a'' \\<longrightarrow>\n               n postdominates targetnode a'') \\<Longrightarrow>\n    \\<exists>n' as. n' controls\\<^sub>s n via as", "from inner_node"], ["proof (chain)\npicking this:\n  inner_node n", "have not_pd:\"\\<not> n postdominates (_Exit_)\""], ["proof (prove)\nusing this:\n  inner_node n\n\ngoal (1 subgoal):\n 1. \\<not> n postdominates (_Exit_)", "by(fastforce intro:empty_path simp:postdominate_def sourcenodes_def)"], ["proof (state)\nthis:\n  \\<not> n postdominates (_Exit_)\n\ngoal (2 subgoals):\n 1. \\<forall>a' a''.\n       a' \\<in> set asx \\<and>\n       sourcenode a' = sourcenode a'' \\<and>\n       valid_edge a'' \\<longrightarrow>\n       n postdominates targetnode a'' \\<Longrightarrow>\n    \\<exists>n' as. n' controls\\<^sub>s n via as\n 2. \\<not> (\\<forall>a' a''.\n               a' \\<in> set asx \\<and>\n               sourcenode a' = sourcenode a'' \\<and>\n               valid_edge a'' \\<longrightarrow>\n               n postdominates targetnode a'') \\<Longrightarrow>\n    \\<exists>n' as. n' controls\\<^sub>s n via as", "from pathEntry'"], ["proof (chain)\npicking this:\n  (_Entry_) -a # asx\\<rightarrow>* n", "have path':\"(_Entry_) -[]@a#asx\\<rightarrow>* n\""], ["proof (prove)\nusing this:\n  (_Entry_) -a # asx\\<rightarrow>* n\n\ngoal (1 subgoal):\n 1. (_Entry_) -[] @ a # asx\\<rightarrow>* n", "by simp"], ["proof (state)\nthis:\n  (_Entry_) -[] @ a # asx\\<rightarrow>* n\n\ngoal (2 subgoals):\n 1. \\<forall>a' a''.\n       a' \\<in> set asx \\<and>\n       sourcenode a' = sourcenode a'' \\<and>\n       valid_edge a'' \\<longrightarrow>\n       n postdominates targetnode a'' \\<Longrightarrow>\n    \\<exists>n' as. n' controls\\<^sub>s n via as\n 2. \\<not> (\\<forall>a' a''.\n               a' \\<in> set asx \\<and>\n               sourcenode a' = sourcenode a'' \\<and>\n               valid_edge a'' \\<longrightarrow>\n               n postdominates targetnode a'') \\<Longrightarrow>\n    \\<exists>n' as. n' controls\\<^sub>s n via as", "hence eq:\"sourcenode a = (_Entry_)\""], ["proof (prove)\nusing this:\n  (_Entry_) -[] @ a # asx\\<rightarrow>* n\n\ngoal (1 subgoal):\n 1. sourcenode a = (_Entry_)", "by(fastforce dest:path_split elim:path.cases)"], ["proof (state)\nthis:\n  sourcenode a = (_Entry_)\n\ngoal (2 subgoals):\n 1. \\<forall>a' a''.\n       a' \\<in> set asx \\<and>\n       sourcenode a' = sourcenode a'' \\<and>\n       valid_edge a'' \\<longrightarrow>\n       n postdominates targetnode a'' \\<Longrightarrow>\n    \\<exists>n' as. n' controls\\<^sub>s n via as\n 2. \\<not> (\\<forall>a' a''.\n               a' \\<in> set asx \\<and>\n               sourcenode a' = sourcenode a'' \\<and>\n               valid_edge a'' \\<longrightarrow>\n               n postdominates targetnode a'') \\<Longrightarrow>\n    \\<exists>n' as. n' controls\\<^sub>s n via as", "from Entry_Exit_edge"], ["proof (chain)\npicking this:\n  \\<exists>a.\n     valid_edge a \\<and>\n     sourcenode a = (_Entry_) \\<and>\n     targetnode a = (_Exit_) \\<and>\n     kind a = (\\<lambda>s. False)\\<^sub>\\<surd>", "obtain a' where \"sourcenode a' = (_Entry_)\"\n      and \"targetnode a' = (_Exit_)\" and \"valid_edge a'\""], ["proof (prove)\nusing this:\n  \\<exists>a.\n     valid_edge a \\<and>\n     sourcenode a = (_Entry_) \\<and>\n     targetnode a = (_Exit_) \\<and>\n     kind a = (\\<lambda>s. False)\\<^sub>\\<surd>\n\ngoal (1 subgoal):\n 1. (\\<And>a'.\n        \\<lbrakk>sourcenode a' = (_Entry_); targetnode a' = (_Exit_);\n         valid_edge a'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  sourcenode a' = (_Entry_)\n  targetnode a' = (_Exit_)\n  valid_edge a'\n\ngoal (2 subgoals):\n 1. \\<forall>a' a''.\n       a' \\<in> set asx \\<and>\n       sourcenode a' = sourcenode a'' \\<and>\n       valid_edge a'' \\<longrightarrow>\n       n postdominates targetnode a'' \\<Longrightarrow>\n    \\<exists>n' as. n' controls\\<^sub>s n via as\n 2. \\<not> (\\<forall>a' a''.\n               a' \\<in> set asx \\<and>\n               sourcenode a' = sourcenode a'' \\<and>\n               valid_edge a'' \\<longrightarrow>\n               n postdominates targetnode a'') \\<Longrightarrow>\n    \\<exists>n' as. n' controls\\<^sub>s n via as", "with path' inner_node not_pd True eq notin pathExit"], ["proof (chain)\npicking this:\n  (_Entry_) -[] @ a # asx\\<rightarrow>* n\n  inner_node n\n  \\<not> n postdominates (_Exit_)\n  \\<forall>a' a''.\n     a' \\<in> set asx \\<and>\n     sourcenode a' = sourcenode a'' \\<and> valid_edge a'' \\<longrightarrow>\n     n postdominates targetnode a''\n  sourcenode a = (_Entry_)\n  n \\<notin> set (sourcenodes (a # asx))\n  n -as'\\<rightarrow>* (_Exit_)\n  sourcenode a' = (_Entry_)\n  targetnode a' = (_Exit_)\n  valid_edge a'", "have \"sourcenode a controls\\<^sub>s n via a#asx\""], ["proof (prove)\nusing this:\n  (_Entry_) -[] @ a # asx\\<rightarrow>* n\n  inner_node n\n  \\<not> n postdominates (_Exit_)\n  \\<forall>a' a''.\n     a' \\<in> set asx \\<and>\n     sourcenode a' = sourcenode a'' \\<and> valid_edge a'' \\<longrightarrow>\n     n postdominates targetnode a''\n  sourcenode a = (_Entry_)\n  n \\<notin> set (sourcenodes (a # asx))\n  n -as'\\<rightarrow>* (_Exit_)\n  sourcenode a' = (_Entry_)\n  targetnode a' = (_Exit_)\n  valid_edge a'\n\ngoal (1 subgoal):\n 1. sourcenode a controls\\<^sub>s n via a # asx", "by -(erule which_node_dyn_standard_control_dependence_source,auto)"], ["proof (state)\nthis:\n  sourcenode a controls\\<^sub>s n via a # asx\n\ngoal (2 subgoals):\n 1. \\<forall>a' a''.\n       a' \\<in> set asx \\<and>\n       sourcenode a' = sourcenode a'' \\<and>\n       valid_edge a'' \\<longrightarrow>\n       n postdominates targetnode a'' \\<Longrightarrow>\n    \\<exists>n' as. n' controls\\<^sub>s n via as\n 2. \\<not> (\\<forall>a' a''.\n               a' \\<in> set asx \\<and>\n               sourcenode a' = sourcenode a'' \\<and>\n               valid_edge a'' \\<longrightarrow>\n               n postdominates targetnode a'') \\<Longrightarrow>\n    \\<exists>n' as. n' controls\\<^sub>s n via as", "thus ?thesis"], ["proof (prove)\nusing this:\n  sourcenode a controls\\<^sub>s n via a # asx\n\ngoal (1 subgoal):\n 1. \\<exists>n' as. n' controls\\<^sub>s n via as", "by blast"], ["proof (state)\nthis:\n  \\<exists>n' as. n' controls\\<^sub>s n via as\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>a' a''.\n               a' \\<in> set asx \\<and>\n               sourcenode a' = sourcenode a'' \\<and>\n               valid_edge a'' \\<longrightarrow>\n               n postdominates targetnode a'') \\<Longrightarrow>\n    \\<exists>n' as. n' controls\\<^sub>s n via as", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>a' a''.\n               a' \\<in> set asx \\<and>\n               sourcenode a' = sourcenode a'' \\<and>\n               valid_edge a'' \\<longrightarrow>\n               n postdominates targetnode a'') \\<Longrightarrow>\n    \\<exists>n' as. n' controls\\<^sub>s n via as", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<forall>a' a''.\n             a' \\<in> set asx \\<and>\n             sourcenode a' = sourcenode a'' \\<and>\n             valid_edge a'' \\<longrightarrow>\n             n postdominates targetnode a'')\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>a' a''.\n               a' \\<in> set asx \\<and>\n               sourcenode a' = sourcenode a'' \\<and>\n               valid_edge a'' \\<longrightarrow>\n               n postdominates targetnode a'') \\<Longrightarrow>\n    \\<exists>n' as. n' controls\\<^sub>s n via as", "hence \"\\<exists>a' \\<in> set asx. \\<exists>a''. sourcenode a' = sourcenode a'' \\<and> valid_edge a'' \\<and>\n      \\<not> n postdominates targetnode a''\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>a' a''.\n             a' \\<in> set asx \\<and>\n             sourcenode a' = sourcenode a'' \\<and>\n             valid_edge a'' \\<longrightarrow>\n             n postdominates targetnode a'')\n\ngoal (1 subgoal):\n 1. \\<exists>a'\\<in>set asx.\n       \\<exists>a''.\n          sourcenode a' = sourcenode a'' \\<and>\n          valid_edge a'' \\<and> \\<not> n postdominates targetnode a''", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>a'\\<in>set asx.\n     \\<exists>a''.\n        sourcenode a' = sourcenode a'' \\<and>\n        valid_edge a'' \\<and> \\<not> n postdominates targetnode a''\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>a' a''.\n               a' \\<in> set asx \\<and>\n               sourcenode a' = sourcenode a'' \\<and>\n               valid_edge a'' \\<longrightarrow>\n               n postdominates targetnode a'') \\<Longrightarrow>\n    \\<exists>n' as. n' controls\\<^sub>s n via as", "then"], ["proof (chain)\npicking this:\n  \\<exists>a'\\<in>set asx.\n     \\<exists>a''.\n        sourcenode a' = sourcenode a'' \\<and>\n        valid_edge a'' \\<and> \\<not> n postdominates targetnode a''", "obtain ax asx' asx'' where \"asx = asx'@ax#asx'' \\<and>\n      (\\<exists>a''. sourcenode ax = sourcenode a'' \\<and> valid_edge a'' \\<and>\n      \\<not> n postdominates targetnode a'') \\<and>\n      (\\<forall>z \\<in> set asx''. \\<not> (\\<exists>a''. sourcenode z = sourcenode a'' \\<and> valid_edge a'' \\<and>\n      \\<not> n postdominates targetnode a''))\""], ["proof (prove)\nusing this:\n  \\<exists>a'\\<in>set asx.\n     \\<exists>a''.\n        sourcenode a' = sourcenode a'' \\<and>\n        valid_edge a'' \\<and> \\<not> n postdominates targetnode a''\n\ngoal (1 subgoal):\n 1. (\\<And>asx' ax asx''.\n        asx = asx' @ ax # asx'' \\<and>\n        (\\<exists>a''.\n            sourcenode ax = sourcenode a'' \\<and>\n            valid_edge a'' \\<and>\n            \\<not> n postdominates targetnode a'') \\<and>\n        (\\<forall>z\\<in>set asx''.\n            \\<nexists>a''.\n               sourcenode z = sourcenode a'' \\<and>\n               valid_edge a'' \\<and>\n               \\<not> n postdominates targetnode a'') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(blast elim!:rightmost_element_property)"], ["proof (state)\nthis:\n  asx = asx' @ ax # asx'' \\<and>\n  (\\<exists>a''.\n      sourcenode ax = sourcenode a'' \\<and>\n      valid_edge a'' \\<and> \\<not> n postdominates targetnode a'') \\<and>\n  (\\<forall>z\\<in>set asx''.\n      \\<nexists>a''.\n         sourcenode z = sourcenode a'' \\<and>\n         valid_edge a'' \\<and> \\<not> n postdominates targetnode a'')\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>a' a''.\n               a' \\<in> set asx \\<and>\n               sourcenode a' = sourcenode a'' \\<and>\n               valid_edge a'' \\<longrightarrow>\n               n postdominates targetnode a'') \\<Longrightarrow>\n    \\<exists>n' as. n' controls\\<^sub>s n via as", "then"], ["proof (chain)\npicking this:\n  asx = asx' @ ax # asx'' \\<and>\n  (\\<exists>a''.\n      sourcenode ax = sourcenode a'' \\<and>\n      valid_edge a'' \\<and> \\<not> n postdominates targetnode a'') \\<and>\n  (\\<forall>z\\<in>set asx''.\n      \\<nexists>a''.\n         sourcenode z = sourcenode a'' \\<and>\n         valid_edge a'' \\<and> \\<not> n postdominates targetnode a'')", "obtain a'' where as':\"asx = asx'@ax#asx''\"\n      and eq:\"sourcenode ax = sourcenode a''\"\n      and valid_edge:\"valid_edge a''\"\n      and not_pd:\"\\<not> n postdominates targetnode a''\"\n      and last:\"\\<forall>z \\<in> set asx''. \\<not> (\\<exists>a''. sourcenode z = sourcenode a'' \\<and> \n        valid_edge a'' \\<and> \\<not> n postdominates targetnode a'')\""], ["proof (prove)\nusing this:\n  asx = asx' @ ax # asx'' \\<and>\n  (\\<exists>a''.\n      sourcenode ax = sourcenode a'' \\<and>\n      valid_edge a'' \\<and> \\<not> n postdominates targetnode a'') \\<and>\n  (\\<forall>z\\<in>set asx''.\n      \\<nexists>a''.\n         sourcenode z = sourcenode a'' \\<and>\n         valid_edge a'' \\<and> \\<not> n postdominates targetnode a'')\n\ngoal (1 subgoal):\n 1. (\\<And>a''.\n        \\<lbrakk>asx = asx' @ ax # asx''; sourcenode ax = sourcenode a'';\n         valid_edge a''; \\<not> n postdominates targetnode a'';\n         \\<forall>z\\<in>set asx''.\n            \\<nexists>a''.\n               sourcenode z = sourcenode a'' \\<and>\n               valid_edge a'' \\<and>\n               \\<not> n postdominates targetnode a''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  asx = asx' @ ax # asx''\n  sourcenode ax = sourcenode a''\n  valid_edge a''\n  \\<not> n postdominates targetnode a''\n  \\<forall>z\\<in>set asx''.\n     \\<nexists>a''.\n        sourcenode z = sourcenode a'' \\<and>\n        valid_edge a'' \\<and> \\<not> n postdominates targetnode a''\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>a' a''.\n               a' \\<in> set asx \\<and>\n               sourcenode a' = sourcenode a'' \\<and>\n               valid_edge a'' \\<longrightarrow>\n               n postdominates targetnode a'') \\<Longrightarrow>\n    \\<exists>n' as. n' controls\\<^sub>s n via as", "from notin as'"], ["proof (chain)\npicking this:\n  n \\<notin> set (sourcenodes (a # asx))\n  asx = asx' @ ax # asx''", "have notin':\"n \\<notin> set (sourcenodes (ax#asx''))\""], ["proof (prove)\nusing this:\n  n \\<notin> set (sourcenodes (a # asx))\n  asx = asx' @ ax # asx''\n\ngoal (1 subgoal):\n 1. n \\<notin> set (sourcenodes (ax # asx''))", "by(auto simp:sourcenodes_def)"], ["proof (state)\nthis:\n  n \\<notin> set (sourcenodes (ax # asx''))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>a' a''.\n               a' \\<in> set asx \\<and>\n               sourcenode a' = sourcenode a'' \\<and>\n               valid_edge a'' \\<longrightarrow>\n               n postdominates targetnode a'') \\<Longrightarrow>\n    \\<exists>n' as. n' controls\\<^sub>s n via as", "from as' pathEntry'"], ["proof (chain)\npicking this:\n  asx = asx' @ ax # asx''\n  (_Entry_) -a # asx\\<rightarrow>* n", "have \"(_Entry_) -(a#asx')@ax#asx''\\<rightarrow>* n\""], ["proof (prove)\nusing this:\n  asx = asx' @ ax # asx''\n  (_Entry_) -a # asx\\<rightarrow>* n\n\ngoal (1 subgoal):\n 1. (_Entry_) -(a # asx') @ ax # asx''\\<rightarrow>* n", "by simp"], ["proof (state)\nthis:\n  (_Entry_) -(a # asx') @ ax # asx''\\<rightarrow>* n\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>a' a''.\n               a' \\<in> set asx \\<and>\n               sourcenode a' = sourcenode a'' \\<and>\n               valid_edge a'' \\<longrightarrow>\n               n postdominates targetnode a'') \\<Longrightarrow>\n    \\<exists>n' as. n' controls\\<^sub>s n via as", "with inner_node not_pd notin' eq last pathExit valid_edge"], ["proof (chain)\npicking this:\n  inner_node n\n  \\<not> n postdominates targetnode a''\n  n \\<notin> set (sourcenodes (ax # asx''))\n  sourcenode ax = sourcenode a''\n  \\<forall>z\\<in>set asx''.\n     \\<nexists>a''.\n        sourcenode z = sourcenode a'' \\<and>\n        valid_edge a'' \\<and> \\<not> n postdominates targetnode a''\n  n -as'\\<rightarrow>* (_Exit_)\n  valid_edge a''\n  (_Entry_) -(a # asx') @ ax # asx''\\<rightarrow>* n", "have \"sourcenode ax controls\\<^sub>s n via ax#asx''\""], ["proof (prove)\nusing this:\n  inner_node n\n  \\<not> n postdominates targetnode a''\n  n \\<notin> set (sourcenodes (ax # asx''))\n  sourcenode ax = sourcenode a''\n  \\<forall>z\\<in>set asx''.\n     \\<nexists>a''.\n        sourcenode z = sourcenode a'' \\<and>\n        valid_edge a'' \\<and> \\<not> n postdominates targetnode a''\n  n -as'\\<rightarrow>* (_Exit_)\n  valid_edge a''\n  (_Entry_) -(a # asx') @ ax # asx''\\<rightarrow>* n\n\ngoal (1 subgoal):\n 1. sourcenode ax controls\\<^sub>s n via ax # asx''", "by(fastforce elim!:which_node_dyn_standard_control_dependence_source)"], ["proof (state)\nthis:\n  sourcenode ax controls\\<^sub>s n via ax # asx''\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>a' a''.\n               a' \\<in> set asx \\<and>\n               sourcenode a' = sourcenode a'' \\<and>\n               valid_edge a'' \\<longrightarrow>\n               n postdominates targetnode a'') \\<Longrightarrow>\n    \\<exists>n' as. n' controls\\<^sub>s n via as", "thus ?thesis"], ["proof (prove)\nusing this:\n  sourcenode ax controls\\<^sub>s n via ax # asx''\n\ngoal (1 subgoal):\n 1. \\<exists>n' as. n' controls\\<^sub>s n via as", "by blast"], ["proof (state)\nthis:\n  \\<exists>n' as. n' controls\\<^sub>s n via as\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n' as. n' controls\\<^sub>s n via as\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}