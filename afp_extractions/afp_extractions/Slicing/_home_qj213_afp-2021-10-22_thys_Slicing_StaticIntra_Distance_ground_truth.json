{"file_name": "/home/qj213/afp-2021-10-22/thys/Slicing/StaticIntra/Distance.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Slicing", "problem_names": ["lemma every_path_distance:\n  assumes \"n -as\\<rightarrow>* n'\"\n  obtains x where \"distance n n' x\" and \"x \\<le> length as\"", "lemma distance_det:\n  \"\\<lbrakk>distance n n' x; distance n n' x'\\<rbrakk> \\<Longrightarrow> x = x'\"", "lemma only_one_SOME_dist_edge:\n  assumes valid:\"valid_edge a\" and dist:\"distance (targetnode a) n' x\"\n  shows \"\\<exists>!a'. sourcenode a = sourcenode a' \\<and> distance (targetnode a') n' x \\<and>\n               valid_edge a' \\<and>\n               targetnode a' = (SOME nx. \\<exists>a'. sourcenode a = sourcenode a' \\<and>\n                                              distance (targetnode a') n' x \\<and>\n                                              valid_edge a' \\<and> targetnode a' = nx)\"", "lemma distance_successor_distance:\n  assumes \"distance n n' x\" and \"x \\<noteq> 0\" \n  obtains a where \"valid_edge a\" and \"n = sourcenode a\" \n  and \"distance (targetnode a) n' (x - 1)\"\n  and \"targetnode a = (SOME nx. \\<exists>a'. sourcenode a = sourcenode a' \\<and> \n                                     distance (targetnode a') n' (x - 1) \\<and>\n                                     valid_edge a' \\<and> targetnode a' = nx)\""], "translations": [["", "lemma every_path_distance:\n  assumes \"n -as\\<rightarrow>* n'\"\n  obtains x where \"distance n n' x\" and \"x \\<le> length as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>distance n n' x; x \\<le> length as\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>distance n n' x; x \\<le> length as\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<exists>x. distance n n' x \\<and> x \\<le> length as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. distance n n' x \\<and> x \\<le> length as", "proof(cases \"\\<exists>as'. n -as'\\<rightarrow>* n' \\<and> \n                     (\\<forall>asx. n -asx\\<rightarrow>* n' \\<longrightarrow> length as' \\<le> length asx)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>as'.\n       n -as'\\<rightarrow>* n' \\<and>\n       (\\<forall>asx.\n           n -asx\\<rightarrow>* n' \\<longrightarrow>\n           length as' \\<le> length asx) \\<Longrightarrow>\n    \\<exists>x. distance n n' x \\<and> x \\<le> length as\n 2. \\<nexists>as'.\n       n -as'\\<rightarrow>* n' \\<and>\n       (\\<forall>asx.\n           n -asx\\<rightarrow>* n' \\<longrightarrow>\n           length as' \\<le> length asx) \\<Longrightarrow>\n    \\<exists>x. distance n n' x \\<and> x \\<le> length as", "case True"], ["proof (state)\nthis:\n  \\<exists>as'.\n     n -as'\\<rightarrow>* n' \\<and>\n     (\\<forall>asx.\n         n -asx\\<rightarrow>* n' \\<longrightarrow>\n         length as' \\<le> length asx)\n\ngoal (2 subgoals):\n 1. \\<exists>as'.\n       n -as'\\<rightarrow>* n' \\<and>\n       (\\<forall>asx.\n           n -asx\\<rightarrow>* n' \\<longrightarrow>\n           length as' \\<le> length asx) \\<Longrightarrow>\n    \\<exists>x. distance n n' x \\<and> x \\<le> length as\n 2. \\<nexists>as'.\n       n -as'\\<rightarrow>* n' \\<and>\n       (\\<forall>asx.\n           n -asx\\<rightarrow>* n' \\<longrightarrow>\n           length as' \\<le> length asx) \\<Longrightarrow>\n    \\<exists>x. distance n n' x \\<and> x \\<le> length as", "then"], ["proof (chain)\npicking this:\n  \\<exists>as'.\n     n -as'\\<rightarrow>* n' \\<and>\n     (\\<forall>asx.\n         n -asx\\<rightarrow>* n' \\<longrightarrow>\n         length as' \\<le> length asx)", "obtain as' \n      where \"n -as'\\<rightarrow>* n' \\<and> (\\<forall>asx. n -asx\\<rightarrow>* n' \\<longrightarrow> length as' \\<le> length asx)\""], ["proof (prove)\nusing this:\n  \\<exists>as'.\n     n -as'\\<rightarrow>* n' \\<and>\n     (\\<forall>asx.\n         n -asx\\<rightarrow>* n' \\<longrightarrow>\n         length as' \\<le> length asx)\n\ngoal (1 subgoal):\n 1. (\\<And>as'.\n        n -as'\\<rightarrow>* n' \\<and>\n        (\\<forall>asx.\n            n -asx\\<rightarrow>* n' \\<longrightarrow>\n            length as' \\<le> length asx) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  n -as'\\<rightarrow>* n' \\<and>\n  (\\<forall>asx.\n      n -asx\\<rightarrow>* n' \\<longrightarrow> length as' \\<le> length asx)\n\ngoal (2 subgoals):\n 1. \\<exists>as'.\n       n -as'\\<rightarrow>* n' \\<and>\n       (\\<forall>asx.\n           n -asx\\<rightarrow>* n' \\<longrightarrow>\n           length as' \\<le> length asx) \\<Longrightarrow>\n    \\<exists>x. distance n n' x \\<and> x \\<le> length as\n 2. \\<nexists>as'.\n       n -as'\\<rightarrow>* n' \\<and>\n       (\\<forall>asx.\n           n -asx\\<rightarrow>* n' \\<longrightarrow>\n           length as' \\<le> length asx) \\<Longrightarrow>\n    \\<exists>x. distance n n' x \\<and> x \\<le> length as", "hence \"n -as'\\<rightarrow>* n'\" and all:\"\\<forall>asx. n -asx\\<rightarrow>* n' \\<longrightarrow> length as' \\<le> length asx\""], ["proof (prove)\nusing this:\n  n -as'\\<rightarrow>* n' \\<and>\n  (\\<forall>asx.\n      n -asx\\<rightarrow>* n' \\<longrightarrow> length as' \\<le> length asx)\n\ngoal (1 subgoal):\n 1. n -as'\\<rightarrow>* n' &&&\n    \\<forall>asx.\n       n -asx\\<rightarrow>* n' \\<longrightarrow> length as' \\<le> length asx", "by simp_all"], ["proof (state)\nthis:\n  n -as'\\<rightarrow>* n'\n  \\<forall>asx.\n     n -asx\\<rightarrow>* n' \\<longrightarrow> length as' \\<le> length asx\n\ngoal (2 subgoals):\n 1. \\<exists>as'.\n       n -as'\\<rightarrow>* n' \\<and>\n       (\\<forall>asx.\n           n -asx\\<rightarrow>* n' \\<longrightarrow>\n           length as' \\<le> length asx) \\<Longrightarrow>\n    \\<exists>x. distance n n' x \\<and> x \\<le> length as\n 2. \\<nexists>as'.\n       n -as'\\<rightarrow>* n' \\<and>\n       (\\<forall>asx.\n           n -asx\\<rightarrow>* n' \\<longrightarrow>\n           length as' \\<le> length asx) \\<Longrightarrow>\n    \\<exists>x. distance n n' x \\<and> x \\<le> length as", "hence \"distance n n' (length as')\""], ["proof (prove)\nusing this:\n  n -as'\\<rightarrow>* n'\n  \\<forall>asx.\n     n -asx\\<rightarrow>* n' \\<longrightarrow> length as' \\<le> length asx\n\ngoal (1 subgoal):\n 1. distance n n' (length as')", "by(fastforce intro:distanceI)"], ["proof (state)\nthis:\n  distance n n' (length as')\n\ngoal (2 subgoals):\n 1. \\<exists>as'.\n       n -as'\\<rightarrow>* n' \\<and>\n       (\\<forall>asx.\n           n -asx\\<rightarrow>* n' \\<longrightarrow>\n           length as' \\<le> length asx) \\<Longrightarrow>\n    \\<exists>x. distance n n' x \\<and> x \\<le> length as\n 2. \\<nexists>as'.\n       n -as'\\<rightarrow>* n' \\<and>\n       (\\<forall>asx.\n           n -asx\\<rightarrow>* n' \\<longrightarrow>\n           length as' \\<le> length asx) \\<Longrightarrow>\n    \\<exists>x. distance n n' x \\<and> x \\<le> length as", "from \\<open>n -as\\<rightarrow>* n'\\<close> all"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* n'\n  \\<forall>asx.\n     n -asx\\<rightarrow>* n' \\<longrightarrow> length as' \\<le> length asx", "have \"length as' \\<le> length as\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n'\n  \\<forall>asx.\n     n -asx\\<rightarrow>* n' \\<longrightarrow> length as' \\<le> length asx\n\ngoal (1 subgoal):\n 1. length as' \\<le> length as", "by fastforce"], ["proof (state)\nthis:\n  length as' \\<le> length as\n\ngoal (2 subgoals):\n 1. \\<exists>as'.\n       n -as'\\<rightarrow>* n' \\<and>\n       (\\<forall>asx.\n           n -asx\\<rightarrow>* n' \\<longrightarrow>\n           length as' \\<le> length asx) \\<Longrightarrow>\n    \\<exists>x. distance n n' x \\<and> x \\<le> length as\n 2. \\<nexists>as'.\n       n -as'\\<rightarrow>* n' \\<and>\n       (\\<forall>asx.\n           n -asx\\<rightarrow>* n' \\<longrightarrow>\n           length as' \\<le> length asx) \\<Longrightarrow>\n    \\<exists>x. distance n n' x \\<and> x \\<le> length as", "with \\<open>distance n n' (length as')\\<close>"], ["proof (chain)\npicking this:\n  distance n n' (length as')\n  length as' \\<le> length as", "show ?thesis"], ["proof (prove)\nusing this:\n  distance n n' (length as')\n  length as' \\<le> length as\n\ngoal (1 subgoal):\n 1. \\<exists>x. distance n n' x \\<and> x \\<le> length as", "by blast"], ["proof (state)\nthis:\n  \\<exists>x. distance n n' x \\<and> x \\<le> length as\n\ngoal (1 subgoal):\n 1. \\<nexists>as'.\n       n -as'\\<rightarrow>* n' \\<and>\n       (\\<forall>asx.\n           n -asx\\<rightarrow>* n' \\<longrightarrow>\n           length as' \\<le> length asx) \\<Longrightarrow>\n    \\<exists>x. distance n n' x \\<and> x \\<le> length as", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>as'.\n       n -as'\\<rightarrow>* n' \\<and>\n       (\\<forall>asx.\n           n -asx\\<rightarrow>* n' \\<longrightarrow>\n           length as' \\<le> length asx) \\<Longrightarrow>\n    \\<exists>x. distance n n' x \\<and> x \\<le> length as", "case False"], ["proof (state)\nthis:\n  \\<nexists>as'.\n     n -as'\\<rightarrow>* n' \\<and>\n     (\\<forall>asx.\n         n -asx\\<rightarrow>* n' \\<longrightarrow>\n         length as' \\<le> length asx)\n\ngoal (1 subgoal):\n 1. \\<nexists>as'.\n       n -as'\\<rightarrow>* n' \\<and>\n       (\\<forall>asx.\n           n -asx\\<rightarrow>* n' \\<longrightarrow>\n           length as' \\<le> length asx) \\<Longrightarrow>\n    \\<exists>x. distance n n' x \\<and> x \\<le> length as", "hence all:\"\\<forall>as'. n -as'\\<rightarrow>* n' \\<longrightarrow> (\\<exists>asx. n -asx\\<rightarrow>* n' \\<and> length as' > length asx)\""], ["proof (prove)\nusing this:\n  \\<nexists>as'.\n     n -as'\\<rightarrow>* n' \\<and>\n     (\\<forall>asx.\n         n -asx\\<rightarrow>* n' \\<longrightarrow>\n         length as' \\<le> length asx)\n\ngoal (1 subgoal):\n 1. \\<forall>as'.\n       n -as'\\<rightarrow>* n' \\<longrightarrow>\n       (\\<exists>asx.\n           n -asx\\<rightarrow>* n' \\<and> length asx < length as')", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>as'.\n     n -as'\\<rightarrow>* n' \\<longrightarrow>\n     (\\<exists>asx. n -asx\\<rightarrow>* n' \\<and> length asx < length as')\n\ngoal (1 subgoal):\n 1. \\<nexists>as'.\n       n -as'\\<rightarrow>* n' \\<and>\n       (\\<forall>asx.\n           n -asx\\<rightarrow>* n' \\<longrightarrow>\n           length as' \\<le> length asx) \\<Longrightarrow>\n    \\<exists>x. distance n n' x \\<and> x \\<le> length as", "have \"wf (measure length)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (measure length)", "by simp"], ["proof (state)\nthis:\n  wf (measure length)\n\ngoal (1 subgoal):\n 1. \\<nexists>as'.\n       n -as'\\<rightarrow>* n' \\<and>\n       (\\<forall>asx.\n           n -asx\\<rightarrow>* n' \\<longrightarrow>\n           length as' \\<le> length asx) \\<Longrightarrow>\n    \\<exists>x. distance n n' x \\<and> x \\<le> length as", "from \\<open>n -as\\<rightarrow>* n'\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* n'", "have \"as \\<in> {as. n -as\\<rightarrow>* n'}\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. as \\<in> {as. n -as\\<rightarrow>* n'}", "by simp"], ["proof (state)\nthis:\n  as \\<in> {as. n -as\\<rightarrow>* n'}\n\ngoal (1 subgoal):\n 1. \\<nexists>as'.\n       n -as'\\<rightarrow>* n' \\<and>\n       (\\<forall>asx.\n           n -asx\\<rightarrow>* n' \\<longrightarrow>\n           length as' \\<le> length asx) \\<Longrightarrow>\n    \\<exists>x. distance n n' x \\<and> x \\<le> length as", "with \\<open>wf (measure length)\\<close>"], ["proof (chain)\npicking this:\n  wf (measure length)\n  as \\<in> {as. n -as\\<rightarrow>* n'}", "obtain as' where \"as' \\<in> {as. n -as\\<rightarrow>* n'}\" \n      and notin:\"\\<And>as''. (as'',as') \\<in> (measure length) \\<Longrightarrow> as'' \\<notin> {as. n -as\\<rightarrow>* n'}\""], ["proof (prove)\nusing this:\n  wf (measure length)\n  as \\<in> {as. n -as\\<rightarrow>* n'}\n\ngoal (1 subgoal):\n 1. (\\<And>as'.\n        \\<lbrakk>as' \\<in> {as. n -as\\<rightarrow>* n'};\n         \\<And>as''.\n            (as'', as') \\<in> measure length \\<Longrightarrow>\n            as'' \\<notin> {as. n -as\\<rightarrow>* n'}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(erule wfE_min)"], ["proof (state)\nthis:\n  as' \\<in> {as. n -as\\<rightarrow>* n'}\n  (?as''1, as') \\<in> measure length \\<Longrightarrow>\n  ?as''1 \\<notin> {as. n -as\\<rightarrow>* n'}\n\ngoal (1 subgoal):\n 1. \\<nexists>as'.\n       n -as'\\<rightarrow>* n' \\<and>\n       (\\<forall>asx.\n           n -asx\\<rightarrow>* n' \\<longrightarrow>\n           length as' \\<le> length asx) \\<Longrightarrow>\n    \\<exists>x. distance n n' x \\<and> x \\<le> length as", "from \\<open>as' \\<in> {as. n -as\\<rightarrow>* n'}\\<close>"], ["proof (chain)\npicking this:\n  as' \\<in> {as. n -as\\<rightarrow>* n'}", "have \"n -as'\\<rightarrow>* n'\""], ["proof (prove)\nusing this:\n  as' \\<in> {as. n -as\\<rightarrow>* n'}\n\ngoal (1 subgoal):\n 1. n -as'\\<rightarrow>* n'", "by simp"], ["proof (state)\nthis:\n  n -as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. \\<nexists>as'.\n       n -as'\\<rightarrow>* n' \\<and>\n       (\\<forall>asx.\n           n -asx\\<rightarrow>* n' \\<longrightarrow>\n           length as' \\<le> length asx) \\<Longrightarrow>\n    \\<exists>x. distance n n' x \\<and> x \\<le> length as", "with all"], ["proof (chain)\npicking this:\n  \\<forall>as'.\n     n -as'\\<rightarrow>* n' \\<longrightarrow>\n     (\\<exists>asx. n -asx\\<rightarrow>* n' \\<and> length asx < length as')\n  n -as'\\<rightarrow>* n'", "obtain asx where \"n -asx\\<rightarrow>* n'\"\n      and \"length as' > length asx\""], ["proof (prove)\nusing this:\n  \\<forall>as'.\n     n -as'\\<rightarrow>* n' \\<longrightarrow>\n     (\\<exists>asx. n -asx\\<rightarrow>* n' \\<and> length asx < length as')\n  n -as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. (\\<And>asx.\n        \\<lbrakk>n -asx\\<rightarrow>* n'; length asx < length as'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  n -asx\\<rightarrow>* n'\n  length asx < length as'\n\ngoal (1 subgoal):\n 1. \\<nexists>as'.\n       n -as'\\<rightarrow>* n' \\<and>\n       (\\<forall>asx.\n           n -asx\\<rightarrow>* n' \\<longrightarrow>\n           length as' \\<le> length asx) \\<Longrightarrow>\n    \\<exists>x. distance n n' x \\<and> x \\<le> length as", "with notin"], ["proof (chain)\npicking this:\n  (?as''1, as') \\<in> measure length \\<Longrightarrow>\n  ?as''1 \\<notin> {as. n -as\\<rightarrow>* n'}\n  n -asx\\<rightarrow>* n'\n  length asx < length as'", "have  \"asx \\<notin> {as. n -as\\<rightarrow>* n'}\""], ["proof (prove)\nusing this:\n  (?as''1, as') \\<in> measure length \\<Longrightarrow>\n  ?as''1 \\<notin> {as. n -as\\<rightarrow>* n'}\n  n -asx\\<rightarrow>* n'\n  length asx < length as'\n\ngoal (1 subgoal):\n 1. asx \\<notin> {as. n -as\\<rightarrow>* n'}", "by simp"], ["proof (state)\nthis:\n  asx \\<notin> {as. n -as\\<rightarrow>* n'}\n\ngoal (1 subgoal):\n 1. \\<nexists>as'.\n       n -as'\\<rightarrow>* n' \\<and>\n       (\\<forall>asx.\n           n -asx\\<rightarrow>* n' \\<longrightarrow>\n           length as' \\<le> length asx) \\<Longrightarrow>\n    \\<exists>x. distance n n' x \\<and> x \\<le> length as", "hence \"\\<not> n -asx\\<rightarrow>* n'\""], ["proof (prove)\nusing this:\n  asx \\<notin> {as. n -as\\<rightarrow>* n'}\n\ngoal (1 subgoal):\n 1. \\<not> n -asx\\<rightarrow>* n'", "by simp"], ["proof (state)\nthis:\n  \\<not> n -asx\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. \\<nexists>as'.\n       n -as'\\<rightarrow>* n' \\<and>\n       (\\<forall>asx.\n           n -asx\\<rightarrow>* n' \\<longrightarrow>\n           length as' \\<le> length asx) \\<Longrightarrow>\n    \\<exists>x. distance n n' x \\<and> x \\<le> length as", "with \\<open>n -asx\\<rightarrow>* n'\\<close>"], ["proof (chain)\npicking this:\n  n -asx\\<rightarrow>* n'\n  \\<not> n -asx\\<rightarrow>* n'", "have False"], ["proof (prove)\nusing this:\n  n -asx\\<rightarrow>* n'\n  \\<not> n -asx\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<nexists>as'.\n       n -as'\\<rightarrow>* n' \\<and>\n       (\\<forall>asx.\n           n -asx\\<rightarrow>* n' \\<longrightarrow>\n           length as' \\<le> length asx) \\<Longrightarrow>\n    \\<exists>x. distance n n' x \\<and> x \\<le> length as", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>x. distance n n' x \\<and> x \\<le> length as", "by simp"], ["proof (state)\nthis:\n  \\<exists>x. distance n n' x \\<and> x \\<le> length as\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x. distance n n' x \\<and> x \\<le> length as\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>distance n n' x; x \\<le> length as\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with that"], ["proof (chain)\npicking this:\n  \\<lbrakk>distance n n' ?x; ?x \\<le> length as\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<exists>x. distance n n' x \\<and> x \\<le> length as", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>distance n n' ?x; ?x \\<le> length as\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<exists>x. distance n n' x \\<and> x \\<le> length as\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma distance_det:\n  \"\\<lbrakk>distance n n' x; distance n n' x'\\<rbrakk> \\<Longrightarrow> x = x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distance n n' x; distance n n' x'\\<rbrakk>\n    \\<Longrightarrow> x = x'", "apply(erule distance.cases)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na as n'a xa naa asa n'aa xaa.\n       \\<lbrakk>n = na; n' = n'a; x = xa; na -as\\<rightarrow>* n'a;\n        length as = xa;\n        \\<forall>as'.\n           na -as'\\<rightarrow>* n'a \\<longrightarrow> xa \\<le> length as';\n        n = naa; n' = n'aa; x' = xaa; naa -asa\\<rightarrow>* n'aa;\n        length asa = xaa;\n        \\<forall>as'.\n           naa -as'\\<rightarrow>* n'aa \\<longrightarrow>\n           xaa \\<le> length as'\\<rbrakk>\n       \\<Longrightarrow> x = x'", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>as asa.\n       \\<lbrakk>n -as\\<rightarrow>* n';\n        \\<forall>as'.\n           n -as'\\<rightarrow>* n' \\<longrightarrow>\n           length as \\<le> length as';\n        n -asa\\<rightarrow>* n';\n        \\<forall>as'.\n           n -as'\\<rightarrow>* n' \\<longrightarrow>\n           length asa \\<le> length as';\n        x = length as; x' = length asa\\<rbrakk>\n       \\<Longrightarrow> length as = length asa", "apply(erule_tac x=\"asa\" in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>as asa.\n       \\<lbrakk>n -as\\<rightarrow>* n'; n -asa\\<rightarrow>* n';\n        \\<forall>as'.\n           n -as'\\<rightarrow>* n' \\<longrightarrow>\n           length asa \\<le> length as';\n        x = length as; x' = length asa;\n        n -asa\\<rightarrow>* n' \\<longrightarrow>\n        length as \\<le> length asa\\<rbrakk>\n       \\<Longrightarrow> length as = length asa", "apply(erule_tac x=\"as\" in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>as asa.\n       \\<lbrakk>n -as\\<rightarrow>* n'; n -asa\\<rightarrow>* n';\n        x = length as; x' = length asa;\n        n -asa\\<rightarrow>* n' \\<longrightarrow>\n        length as \\<le> length asa;\n        n -as\\<rightarrow>* n' \\<longrightarrow>\n        length asa \\<le> length as\\<rbrakk>\n       \\<Longrightarrow> length as = length asa", "by simp"], ["", "lemma only_one_SOME_dist_edge:\n  assumes valid:\"valid_edge a\" and dist:\"distance (targetnode a) n' x\"\n  shows \"\\<exists>!a'. sourcenode a = sourcenode a' \\<and> distance (targetnode a') n' x \\<and>\n               valid_edge a' \\<and>\n               targetnode a' = (SOME nx. \\<exists>a'. sourcenode a = sourcenode a' \\<and>\n                                              distance (targetnode a') n' x \\<and>\n                                              valid_edge a' \\<and> targetnode a' = nx)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!a'.\n       sourcenode a = sourcenode a' \\<and>\n       distance (targetnode a') n' x \\<and>\n       valid_edge a' \\<and>\n       targetnode a' =\n       (SOME nx.\n           \\<exists>a'.\n              sourcenode a = sourcenode a' \\<and>\n              distance (targetnode a') n' x \\<and>\n              valid_edge a' \\<and> targetnode a' = nx)", "proof(rule ex_ex1I)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>a'.\n       sourcenode a = sourcenode a' \\<and>\n       distance (targetnode a') n' x \\<and>\n       valid_edge a' \\<and>\n       targetnode a' =\n       (SOME nx.\n           \\<exists>a'.\n              sourcenode a = sourcenode a' \\<and>\n              distance (targetnode a') n' x \\<and>\n              valid_edge a' \\<and> targetnode a' = nx)\n 2. \\<And>a' y.\n       \\<lbrakk>sourcenode a = sourcenode a' \\<and>\n                distance (targetnode a') n' x \\<and>\n                valid_edge a' \\<and>\n                targetnode a' =\n                (SOME nx.\n                    \\<exists>a'.\n                       sourcenode a = sourcenode a' \\<and>\n                       distance (targetnode a') n' x \\<and>\n                       valid_edge a' \\<and> targetnode a' = nx);\n        sourcenode a = sourcenode y \\<and>\n        distance (targetnode y) n' x \\<and>\n        valid_edge y \\<and>\n        targetnode y =\n        (SOME nx.\n            \\<exists>a'.\n               sourcenode a = sourcenode a' \\<and>\n               distance (targetnode a') n' x \\<and>\n               valid_edge a' \\<and> targetnode a' = nx)\\<rbrakk>\n       \\<Longrightarrow> a' = y", "show \"\\<exists>a'. sourcenode a = sourcenode a' \\<and> \n             distance (targetnode a') n' x \\<and> valid_edge a' \\<and>\n             targetnode a' = (SOME nx. \\<exists>a'. sourcenode a = sourcenode a' \\<and> \n                                            distance (targetnode a') n' x \\<and>\n                                            valid_edge a' \\<and> targetnode a' = nx)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a'.\n       sourcenode a = sourcenode a' \\<and>\n       distance (targetnode a') n' x \\<and>\n       valid_edge a' \\<and>\n       targetnode a' =\n       (SOME nx.\n           \\<exists>a'.\n              sourcenode a = sourcenode a' \\<and>\n              distance (targetnode a') n' x \\<and>\n              valid_edge a' \\<and> targetnode a' = nx)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a'.\n       sourcenode a = sourcenode a' \\<and>\n       distance (targetnode a') n' x \\<and>\n       valid_edge a' \\<and>\n       targetnode a' =\n       (SOME nx.\n           \\<exists>a'.\n              sourcenode a = sourcenode a' \\<and>\n              distance (targetnode a') n' x \\<and>\n              valid_edge a' \\<and> targetnode a' = nx)", "have \"(\\<exists>a'. sourcenode a = sourcenode a' \\<and> \n                distance (targetnode a') n' x \\<and> valid_edge a' \\<and> \n                targetnode a' = (SOME nx. \\<exists>a'. sourcenode a = sourcenode a' \\<and>\n                                               distance (targetnode a') n' x \\<and>\n                                               valid_edge a' \\<and> targetnode a' = nx)) =\n      (\\<exists>nx. \\<exists>a'. sourcenode a = sourcenode a' \\<and> distance (targetnode a') n' x \\<and> \n                 valid_edge a' \\<and> targetnode a' = nx)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>a'.\n        sourcenode a = sourcenode a' \\<and>\n        distance (targetnode a') n' x \\<and>\n        valid_edge a' \\<and>\n        targetnode a' =\n        (SOME nx.\n            \\<exists>a'.\n               sourcenode a = sourcenode a' \\<and>\n               distance (targetnode a') n' x \\<and>\n               valid_edge a' \\<and> targetnode a' = nx)) =\n    (\\<exists>nx a'.\n        sourcenode a = sourcenode a' \\<and>\n        distance (targetnode a') n' x \\<and>\n        valid_edge a' \\<and> targetnode a' = nx)", "apply(unfold some_eq_ex[of \"\\<lambda>nx. \\<exists>a'. sourcenode a = sourcenode a' \\<and> \n                distance (targetnode a') n' x \\<and>valid_edge a' \\<and>  targetnode a' = nx\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>nx a'.\n        sourcenode a = sourcenode a' \\<and>\n        distance (targetnode a') n' x \\<and>\n        valid_edge a' \\<and> targetnode a' = nx) =\n    (\\<exists>nx a'.\n        sourcenode a = sourcenode a' \\<and>\n        distance (targetnode a') n' x \\<and>\n        valid_edge a' \\<and> targetnode a' = nx)", "by simp"], ["proof (state)\nthis:\n  (\\<exists>a'.\n      sourcenode a = sourcenode a' \\<and>\n      distance (targetnode a') n' x \\<and>\n      valid_edge a' \\<and>\n      targetnode a' =\n      (SOME nx.\n          \\<exists>a'.\n             sourcenode a = sourcenode a' \\<and>\n             distance (targetnode a') n' x \\<and>\n             valid_edge a' \\<and> targetnode a' = nx)) =\n  (\\<exists>nx a'.\n      sourcenode a = sourcenode a' \\<and>\n      distance (targetnode a') n' x \\<and>\n      valid_edge a' \\<and> targetnode a' = nx)\n\ngoal (1 subgoal):\n 1. \\<exists>a'.\n       sourcenode a = sourcenode a' \\<and>\n       distance (targetnode a') n' x \\<and>\n       valid_edge a' \\<and>\n       targetnode a' =\n       (SOME nx.\n           \\<exists>a'.\n              sourcenode a = sourcenode a' \\<and>\n              distance (targetnode a') n' x \\<and>\n              valid_edge a' \\<and> targetnode a' = nx)", "also"], ["proof (state)\nthis:\n  (\\<exists>a'.\n      sourcenode a = sourcenode a' \\<and>\n      distance (targetnode a') n' x \\<and>\n      valid_edge a' \\<and>\n      targetnode a' =\n      (SOME nx.\n          \\<exists>a'.\n             sourcenode a = sourcenode a' \\<and>\n             distance (targetnode a') n' x \\<and>\n             valid_edge a' \\<and> targetnode a' = nx)) =\n  (\\<exists>nx a'.\n      sourcenode a = sourcenode a' \\<and>\n      distance (targetnode a') n' x \\<and>\n      valid_edge a' \\<and> targetnode a' = nx)\n\ngoal (1 subgoal):\n 1. \\<exists>a'.\n       sourcenode a = sourcenode a' \\<and>\n       distance (targetnode a') n' x \\<and>\n       valid_edge a' \\<and>\n       targetnode a' =\n       (SOME nx.\n           \\<exists>a'.\n              sourcenode a = sourcenode a' \\<and>\n              distance (targetnode a') n' x \\<and>\n              valid_edge a' \\<and> targetnode a' = nx)", "have \"\\<dots>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>nx a'.\n       sourcenode a = sourcenode a' \\<and>\n       distance (targetnode a') n' x \\<and>\n       valid_edge a' \\<and> targetnode a' = nx", "using valid dist"], ["proof (prove)\nusing this:\n  valid_edge a\n  distance (targetnode a) n' x\n\ngoal (1 subgoal):\n 1. \\<exists>nx a'.\n       sourcenode a = sourcenode a' \\<and>\n       distance (targetnode a') n' x \\<and>\n       valid_edge a' \\<and> targetnode a' = nx", "by blast"], ["proof (state)\nthis:\n  \\<exists>nx a'.\n     sourcenode a = sourcenode a' \\<and>\n     distance (targetnode a') n' x \\<and>\n     valid_edge a' \\<and> targetnode a' = nx\n\ngoal (1 subgoal):\n 1. \\<exists>a'.\n       sourcenode a = sourcenode a' \\<and>\n       distance (targetnode a') n' x \\<and>\n       valid_edge a' \\<and>\n       targetnode a' =\n       (SOME nx.\n           \\<exists>a'.\n              sourcenode a = sourcenode a' \\<and>\n              distance (targetnode a') n' x \\<and>\n              valid_edge a' \\<and> targetnode a' = nx)", "finally"], ["proof (chain)\npicking this:\n  \\<exists>a'.\n     sourcenode a = sourcenode a' \\<and>\n     distance (targetnode a') n' x \\<and>\n     valid_edge a' \\<and>\n     targetnode a' =\n     (SOME nx.\n         \\<exists>a'.\n            sourcenode a = sourcenode a' \\<and>\n            distance (targetnode a') n' x \\<and>\n            valid_edge a' \\<and> targetnode a' = nx)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>a'.\n     sourcenode a = sourcenode a' \\<and>\n     distance (targetnode a') n' x \\<and>\n     valid_edge a' \\<and>\n     targetnode a' =\n     (SOME nx.\n         \\<exists>a'.\n            sourcenode a = sourcenode a' \\<and>\n            distance (targetnode a') n' x \\<and>\n            valid_edge a' \\<and> targetnode a' = nx)\n\ngoal (1 subgoal):\n 1. \\<exists>a'.\n       sourcenode a = sourcenode a' \\<and>\n       distance (targetnode a') n' x \\<and>\n       valid_edge a' \\<and>\n       targetnode a' =\n       (SOME nx.\n           \\<exists>a'.\n              sourcenode a = sourcenode a' \\<and>\n              distance (targetnode a') n' x \\<and>\n              valid_edge a' \\<and> targetnode a' = nx)", "."], ["proof (state)\nthis:\n  \\<exists>a'.\n     sourcenode a = sourcenode a' \\<and>\n     distance (targetnode a') n' x \\<and>\n     valid_edge a' \\<and>\n     targetnode a' =\n     (SOME nx.\n         \\<exists>a'.\n            sourcenode a = sourcenode a' \\<and>\n            distance (targetnode a') n' x \\<and>\n            valid_edge a' \\<and> targetnode a' = nx)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>a'.\n     sourcenode a = sourcenode a' \\<and>\n     distance (targetnode a') n' x \\<and>\n     valid_edge a' \\<and>\n     targetnode a' =\n     (SOME nx.\n         \\<exists>a'.\n            sourcenode a = sourcenode a' \\<and>\n            distance (targetnode a') n' x \\<and>\n            valid_edge a' \\<and> targetnode a' = nx)\n\ngoal (1 subgoal):\n 1. \\<And>a' y.\n       \\<lbrakk>sourcenode a = sourcenode a' \\<and>\n                distance (targetnode a') n' x \\<and>\n                valid_edge a' \\<and>\n                targetnode a' =\n                (SOME nx.\n                    \\<exists>a'.\n                       sourcenode a = sourcenode a' \\<and>\n                       distance (targetnode a') n' x \\<and>\n                       valid_edge a' \\<and> targetnode a' = nx);\n        sourcenode a = sourcenode y \\<and>\n        distance (targetnode y) n' x \\<and>\n        valid_edge y \\<and>\n        targetnode y =\n        (SOME nx.\n            \\<exists>a'.\n               sourcenode a = sourcenode a' \\<and>\n               distance (targetnode a') n' x \\<and>\n               valid_edge a' \\<and> targetnode a' = nx)\\<rbrakk>\n       \\<Longrightarrow> a' = y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a' y.\n       \\<lbrakk>sourcenode a = sourcenode a' \\<and>\n                distance (targetnode a') n' x \\<and>\n                valid_edge a' \\<and>\n                targetnode a' =\n                (SOME nx.\n                    \\<exists>a'.\n                       sourcenode a = sourcenode a' \\<and>\n                       distance (targetnode a') n' x \\<and>\n                       valid_edge a' \\<and> targetnode a' = nx);\n        sourcenode a = sourcenode y \\<and>\n        distance (targetnode y) n' x \\<and>\n        valid_edge y \\<and>\n        targetnode y =\n        (SOME nx.\n            \\<exists>a'.\n               sourcenode a = sourcenode a' \\<and>\n               distance (targetnode a') n' x \\<and>\n               valid_edge a' \\<and> targetnode a' = nx)\\<rbrakk>\n       \\<Longrightarrow> a' = y", "fix a' ax"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a' y.\n       \\<lbrakk>sourcenode a = sourcenode a' \\<and>\n                distance (targetnode a') n' x \\<and>\n                valid_edge a' \\<and>\n                targetnode a' =\n                (SOME nx.\n                    \\<exists>a'.\n                       sourcenode a = sourcenode a' \\<and>\n                       distance (targetnode a') n' x \\<and>\n                       valid_edge a' \\<and> targetnode a' = nx);\n        sourcenode a = sourcenode y \\<and>\n        distance (targetnode y) n' x \\<and>\n        valid_edge y \\<and>\n        targetnode y =\n        (SOME nx.\n            \\<exists>a'.\n               sourcenode a = sourcenode a' \\<and>\n               distance (targetnode a') n' x \\<and>\n               valid_edge a' \\<and> targetnode a' = nx)\\<rbrakk>\n       \\<Longrightarrow> a' = y", "assume \"sourcenode a = sourcenode a' \\<and> \n    distance (targetnode a') n' x \\<and> valid_edge a' \\<and>\n    targetnode a' = (SOME nx. \\<exists>a'. sourcenode a = sourcenode a' \\<and> \n                                   distance (targetnode a') n' x \\<and> \n                                   valid_edge a' \\<and> targetnode a' = nx)\"\n    and \"sourcenode a = sourcenode ax \\<and> \n    distance (targetnode ax) n' x \\<and> valid_edge ax \\<and>\n    targetnode ax = (SOME nx. \\<exists>a'. sourcenode a = sourcenode a' \\<and>\n                                   distance (targetnode a') n' x \\<and> \n                                   valid_edge a' \\<and> targetnode a' = nx)\""], ["proof (state)\nthis:\n  sourcenode a = sourcenode a' \\<and>\n  distance (targetnode a') n' x \\<and>\n  valid_edge a' \\<and>\n  targetnode a' =\n  (SOME nx.\n      \\<exists>a'.\n         sourcenode a = sourcenode a' \\<and>\n         distance (targetnode a') n' x \\<and>\n         valid_edge a' \\<and> targetnode a' = nx)\n  sourcenode a = sourcenode ax \\<and>\n  distance (targetnode ax) n' x \\<and>\n  valid_edge ax \\<and>\n  targetnode ax =\n  (SOME nx.\n      \\<exists>a'.\n         sourcenode a = sourcenode a' \\<and>\n         distance (targetnode a') n' x \\<and>\n         valid_edge a' \\<and> targetnode a' = nx)\n\ngoal (1 subgoal):\n 1. \\<And>a' y.\n       \\<lbrakk>sourcenode a = sourcenode a' \\<and>\n                distance (targetnode a') n' x \\<and>\n                valid_edge a' \\<and>\n                targetnode a' =\n                (SOME nx.\n                    \\<exists>a'.\n                       sourcenode a = sourcenode a' \\<and>\n                       distance (targetnode a') n' x \\<and>\n                       valid_edge a' \\<and> targetnode a' = nx);\n        sourcenode a = sourcenode y \\<and>\n        distance (targetnode y) n' x \\<and>\n        valid_edge y \\<and>\n        targetnode y =\n        (SOME nx.\n            \\<exists>a'.\n               sourcenode a = sourcenode a' \\<and>\n               distance (targetnode a') n' x \\<and>\n               valid_edge a' \\<and> targetnode a' = nx)\\<rbrakk>\n       \\<Longrightarrow> a' = y", "thus \"a' = ax\""], ["proof (prove)\nusing this:\n  sourcenode a = sourcenode a' \\<and>\n  distance (targetnode a') n' x \\<and>\n  valid_edge a' \\<and>\n  targetnode a' =\n  (SOME nx.\n      \\<exists>a'.\n         sourcenode a = sourcenode a' \\<and>\n         distance (targetnode a') n' x \\<and>\n         valid_edge a' \\<and> targetnode a' = nx)\n  sourcenode a = sourcenode ax \\<and>\n  distance (targetnode ax) n' x \\<and>\n  valid_edge ax \\<and>\n  targetnode ax =\n  (SOME nx.\n      \\<exists>a'.\n         sourcenode a = sourcenode a' \\<and>\n         distance (targetnode a') n' x \\<and>\n         valid_edge a' \\<and> targetnode a' = nx)\n\ngoal (1 subgoal):\n 1. a' = ax", "by(fastforce intro!:edge_det)"], ["proof (state)\nthis:\n  a' = ax\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma distance_successor_distance:\n  assumes \"distance n n' x\" and \"x \\<noteq> 0\" \n  obtains a where \"valid_edge a\" and \"n = sourcenode a\" \n  and \"distance (targetnode a) n' (x - 1)\"\n  and \"targetnode a = (SOME nx. \\<exists>a'. sourcenode a = sourcenode a' \\<and> \n                                     distance (targetnode a') n' (x - 1) \\<and>\n                                     valid_edge a' \\<and> targetnode a' = nx)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>valid_edge a; n = sourcenode a;\n         distance (targetnode a) n' (x - 1);\n         targetnode a =\n         (SOME nx.\n             \\<exists>a'.\n                sourcenode a = sourcenode a' \\<and>\n                distance (targetnode a') n' (x - 1) \\<and>\n                valid_edge a' \\<and> targetnode a' = nx)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>valid_edge a; n = sourcenode a;\n         distance (targetnode a) n' (x - 1);\n         targetnode a =\n         (SOME nx.\n             \\<exists>a'.\n                sourcenode a = sourcenode a' \\<and>\n                distance (targetnode a') n' (x - 1) \\<and>\n                valid_edge a' \\<and> targetnode a' = nx)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<exists>a. valid_edge a \\<and> n = sourcenode a \\<and> distance (targetnode a) n' (x - 1) \\<and>\n    targetnode a = (SOME nx. \\<exists>a'. sourcenode a = sourcenode a' \\<and> \n                                  distance (targetnode a') n' (x - 1) \\<and>\n                                  valid_edge a' \\<and> targetnode a' = nx)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a.\n       valid_edge a \\<and>\n       n = sourcenode a \\<and>\n       distance (targetnode a) n' (x - 1) \\<and>\n       targetnode a =\n       (SOME nx.\n           \\<exists>a'.\n              sourcenode a = sourcenode a' \\<and>\n              distance (targetnode a') n' (x - 1) \\<and>\n              valid_edge a' \\<and> targetnode a' = nx)", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>a.\n       valid_edge a \\<and>\n       n = sourcenode a \\<and>\n       distance (targetnode a) n' (x - 1) \\<and>\n       targetnode a =\n       (SOME nx.\n           \\<exists>a'.\n              sourcenode a = sourcenode a' \\<and>\n              distance (targetnode a') n' (x - 1) \\<and>\n              valid_edge a' \\<and> targetnode a' = nx) \\<Longrightarrow>\n    False", "assume \"\\<not> (\\<exists>a. valid_edge a \\<and> n = sourcenode a \\<and> \n                   distance (targetnode a) n' (x - 1) \\<and> \n                   targetnode a = (SOME nx. \\<exists>a'. sourcenode a = sourcenode a' \\<and> \n                                                 distance (targetnode a') n' (x - 1) \\<and>\n                                                 valid_edge a' \\<and> targetnode a' = nx))\""], ["proof (state)\nthis:\n  \\<nexists>a.\n     valid_edge a \\<and>\n     n = sourcenode a \\<and>\n     distance (targetnode a) n' (x - 1) \\<and>\n     targetnode a =\n     (SOME nx.\n         \\<exists>a'.\n            sourcenode a = sourcenode a' \\<and>\n            distance (targetnode a') n' (x - 1) \\<and>\n            valid_edge a' \\<and> targetnode a' = nx)\n\ngoal (1 subgoal):\n 1. \\<nexists>a.\n       valid_edge a \\<and>\n       n = sourcenode a \\<and>\n       distance (targetnode a) n' (x - 1) \\<and>\n       targetnode a =\n       (SOME nx.\n           \\<exists>a'.\n              sourcenode a = sourcenode a' \\<and>\n              distance (targetnode a') n' (x - 1) \\<and>\n              valid_edge a' \\<and> targetnode a' = nx) \\<Longrightarrow>\n    False", "hence imp:\"\\<forall>a. valid_edge a \\<and> n = sourcenode a \\<and>\n                   targetnode a = (SOME nx. \\<exists>a'. sourcenode a = sourcenode a' \\<and>\n                                                 distance (targetnode a') n' (x - 1) \\<and>\n                                                 valid_edge a' \\<and> targetnode a' = nx)\n                 \\<longrightarrow> \\<not> distance (targetnode a) n' (x - 1)\""], ["proof (prove)\nusing this:\n  \\<nexists>a.\n     valid_edge a \\<and>\n     n = sourcenode a \\<and>\n     distance (targetnode a) n' (x - 1) \\<and>\n     targetnode a =\n     (SOME nx.\n         \\<exists>a'.\n            sourcenode a = sourcenode a' \\<and>\n            distance (targetnode a') n' (x - 1) \\<and>\n            valid_edge a' \\<and> targetnode a' = nx)\n\ngoal (1 subgoal):\n 1. \\<forall>a.\n       valid_edge a \\<and>\n       n = sourcenode a \\<and>\n       targetnode a =\n       (SOME nx.\n           \\<exists>a'.\n              sourcenode a = sourcenode a' \\<and>\n              distance (targetnode a') n' (x - 1) \\<and>\n              valid_edge a' \\<and> targetnode a' = nx) \\<longrightarrow>\n       \\<not> distance (targetnode a) n' (x - 1)", "by blast"], ["proof (state)\nthis:\n  \\<forall>a.\n     valid_edge a \\<and>\n     n = sourcenode a \\<and>\n     targetnode a =\n     (SOME nx.\n         \\<exists>a'.\n            sourcenode a = sourcenode a' \\<and>\n            distance (targetnode a') n' (x - 1) \\<and>\n            valid_edge a' \\<and> targetnode a' = nx) \\<longrightarrow>\n     \\<not> distance (targetnode a) n' (x - 1)\n\ngoal (1 subgoal):\n 1. \\<nexists>a.\n       valid_edge a \\<and>\n       n = sourcenode a \\<and>\n       distance (targetnode a) n' (x - 1) \\<and>\n       targetnode a =\n       (SOME nx.\n           \\<exists>a'.\n              sourcenode a = sourcenode a' \\<and>\n              distance (targetnode a') n' (x - 1) \\<and>\n              valid_edge a' \\<and> targetnode a' = nx) \\<Longrightarrow>\n    False", "from \\<open>distance n n' x\\<close>"], ["proof (chain)\npicking this:\n  distance n n' x", "obtain as where \"n -as\\<rightarrow>* n'\" and \"x = length as\"\n      and \"\\<forall>as'. n -as'\\<rightarrow>* n' \\<longrightarrow> x \\<le> length as'\""], ["proof (prove)\nusing this:\n  distance n n' x\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>n -as\\<rightarrow>* n'; x = length as;\n         \\<forall>as'.\n            n -as'\\<rightarrow>* n' \\<longrightarrow>\n            x \\<le> length as'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto elim:distance.cases)"], ["proof (state)\nthis:\n  n -as\\<rightarrow>* n'\n  x = length as\n  \\<forall>as'. n -as'\\<rightarrow>* n' \\<longrightarrow> x \\<le> length as'\n\ngoal (1 subgoal):\n 1. \\<nexists>a.\n       valid_edge a \\<and>\n       n = sourcenode a \\<and>\n       distance (targetnode a) n' (x - 1) \\<and>\n       targetnode a =\n       (SOME nx.\n           \\<exists>a'.\n              sourcenode a = sourcenode a' \\<and>\n              distance (targetnode a') n' (x - 1) \\<and>\n              valid_edge a' \\<and> targetnode a' = nx) \\<Longrightarrow>\n    False", "thus False"], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n'\n  x = length as\n  \\<forall>as'. n -as'\\<rightarrow>* n' \\<longrightarrow> x \\<le> length as'\n\ngoal (1 subgoal):\n 1. False", "using imp"], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n'\n  x = length as\n  \\<forall>as'. n -as'\\<rightarrow>* n' \\<longrightarrow> x \\<le> length as'\n  \\<forall>a.\n     valid_edge a \\<and>\n     n = sourcenode a \\<and>\n     targetnode a =\n     (SOME nx.\n         \\<exists>a'.\n            sourcenode a = sourcenode a' \\<and>\n            distance (targetnode a') n' (x - 1) \\<and>\n            valid_edge a' \\<and> targetnode a' = nx) \\<longrightarrow>\n     \\<not> distance (targetnode a) n' (x - 1)\n\ngoal (1 subgoal):\n 1. False", "proof(induct rule:path.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n; x = length [];\n        \\<forall>as'.\n           n -as'\\<rightarrow>* n \\<longrightarrow> x \\<le> length as';\n        \\<forall>a.\n           valid_edge a \\<and>\n           n = sourcenode a \\<and>\n           targetnode a =\n           (SOME nx.\n               \\<exists>a'.\n                  sourcenode a = sourcenode a' \\<and>\n                  distance (targetnode a') n (x - 1) \\<and>\n                  valid_edge a' \\<and> targetnode a' = nx) \\<longrightarrow>\n           \\<not> distance (targetnode a) n (x - 1)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<lbrakk>x = length as;\n         \\<forall>as'.\n            n'' -as'\\<rightarrow>* n' \\<longrightarrow> x \\<le> length as';\n         \\<forall>a.\n            valid_edge a \\<and>\n            n'' = sourcenode a \\<and>\n            targetnode a =\n            (SOME nx.\n                \\<exists>a'.\n                   sourcenode a = sourcenode a' \\<and>\n                   distance (targetnode a') n' (x - 1) \\<and>\n                   valid_edge a' \\<and>\n                   targetnode a' = nx) \\<longrightarrow>\n            \\<not> distance (targetnode a) n' (x - 1)\\<rbrakk>\n        \\<Longrightarrow> False;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        x = length (a # as);\n        \\<forall>as'.\n           n -as'\\<rightarrow>* n' \\<longrightarrow> x \\<le> length as';\n        \\<forall>a.\n           valid_edge a \\<and>\n           n = sourcenode a \\<and>\n           targetnode a =\n           (SOME nx.\n               \\<exists>a'.\n                  sourcenode a = sourcenode a' \\<and>\n                  distance (targetnode a') n' (x - 1) \\<and>\n                  valid_edge a' \\<and> targetnode a' = nx) \\<longrightarrow>\n           \\<not> distance (targetnode a) n' (x - 1)\\<rbrakk>\n       \\<Longrightarrow> False", "case (empty_path n)"], ["proof (state)\nthis:\n  valid_node n\n  x = length []\n  \\<forall>as'. n -as'\\<rightarrow>* n \\<longrightarrow> x \\<le> length as'\n  \\<forall>a.\n     valid_edge a \\<and>\n     n = sourcenode a \\<and>\n     targetnode a =\n     (SOME nx.\n         \\<exists>a'.\n            sourcenode a = sourcenode a' \\<and>\n            distance (targetnode a') n (x - 1) \\<and>\n            valid_edge a' \\<and> targetnode a' = nx) \\<longrightarrow>\n     \\<not> distance (targetnode a) n (x - 1)\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n; x = length [];\n        \\<forall>as'.\n           n -as'\\<rightarrow>* n \\<longrightarrow> x \\<le> length as';\n        \\<forall>a.\n           valid_edge a \\<and>\n           n = sourcenode a \\<and>\n           targetnode a =\n           (SOME nx.\n               \\<exists>a'.\n                  sourcenode a = sourcenode a' \\<and>\n                  distance (targetnode a') n (x - 1) \\<and>\n                  valid_edge a' \\<and> targetnode a' = nx) \\<longrightarrow>\n           \\<not> distance (targetnode a) n (x - 1)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<lbrakk>x = length as;\n         \\<forall>as'.\n            n'' -as'\\<rightarrow>* n' \\<longrightarrow> x \\<le> length as';\n         \\<forall>a.\n            valid_edge a \\<and>\n            n'' = sourcenode a \\<and>\n            targetnode a =\n            (SOME nx.\n                \\<exists>a'.\n                   sourcenode a = sourcenode a' \\<and>\n                   distance (targetnode a') n' (x - 1) \\<and>\n                   valid_edge a' \\<and>\n                   targetnode a' = nx) \\<longrightarrow>\n            \\<not> distance (targetnode a) n' (x - 1)\\<rbrakk>\n        \\<Longrightarrow> False;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        x = length (a # as);\n        \\<forall>as'.\n           n -as'\\<rightarrow>* n' \\<longrightarrow> x \\<le> length as';\n        \\<forall>a.\n           valid_edge a \\<and>\n           n = sourcenode a \\<and>\n           targetnode a =\n           (SOME nx.\n               \\<exists>a'.\n                  sourcenode a = sourcenode a' \\<and>\n                  distance (targetnode a') n' (x - 1) \\<and>\n                  valid_edge a' \\<and> targetnode a' = nx) \\<longrightarrow>\n           \\<not> distance (targetnode a) n' (x - 1)\\<rbrakk>\n       \\<Longrightarrow> False", "from \\<open>x = length []\\<close> \\<open>x \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  x = length []\n  x \\<noteq> 0", "show False"], ["proof (prove)\nusing this:\n  x = length []\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<lbrakk>x = length as;\n         \\<forall>as'.\n            n'' -as'\\<rightarrow>* n' \\<longrightarrow> x \\<le> length as';\n         \\<forall>a.\n            valid_edge a \\<and>\n            n'' = sourcenode a \\<and>\n            targetnode a =\n            (SOME nx.\n                \\<exists>a'.\n                   sourcenode a = sourcenode a' \\<and>\n                   distance (targetnode a') n' (x - 1) \\<and>\n                   valid_edge a' \\<and>\n                   targetnode a' = nx) \\<longrightarrow>\n            \\<not> distance (targetnode a) n' (x - 1)\\<rbrakk>\n        \\<Longrightarrow> False;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        x = length (a # as);\n        \\<forall>as'.\n           n -as'\\<rightarrow>* n' \\<longrightarrow> x \\<le> length as';\n        \\<forall>a.\n           valid_edge a \\<and>\n           n = sourcenode a \\<and>\n           targetnode a =\n           (SOME nx.\n               \\<exists>a'.\n                  sourcenode a = sourcenode a' \\<and>\n                  distance (targetnode a') n' (x - 1) \\<and>\n                  valid_edge a' \\<and> targetnode a' = nx) \\<longrightarrow>\n           \\<not> distance (targetnode a) n' (x - 1)\\<rbrakk>\n       \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<lbrakk>x = length as;\n         \\<forall>as'.\n            n'' -as'\\<rightarrow>* n' \\<longrightarrow> x \\<le> length as';\n         \\<forall>a.\n            valid_edge a \\<and>\n            n'' = sourcenode a \\<and>\n            targetnode a =\n            (SOME nx.\n                \\<exists>a'.\n                   sourcenode a = sourcenode a' \\<and>\n                   distance (targetnode a') n' (x - 1) \\<and>\n                   valid_edge a' \\<and>\n                   targetnode a' = nx) \\<longrightarrow>\n            \\<not> distance (targetnode a) n' (x - 1)\\<rbrakk>\n        \\<Longrightarrow> False;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        x = length (a # as);\n        \\<forall>as'.\n           n -as'\\<rightarrow>* n' \\<longrightarrow> x \\<le> length as';\n        \\<forall>a.\n           valid_edge a \\<and>\n           n = sourcenode a \\<and>\n           targetnode a =\n           (SOME nx.\n               \\<exists>a'.\n                  sourcenode a = sourcenode a' \\<and>\n                  distance (targetnode a') n' (x - 1) \\<and>\n                  valid_edge a' \\<and> targetnode a' = nx) \\<longrightarrow>\n           \\<not> distance (targetnode a) n' (x - 1)\\<rbrakk>\n       \\<Longrightarrow> False", "case (Cons_path n'' as n' a n)"], ["proof (state)\nthis:\n  n'' -as\\<rightarrow>* n'\n  \\<lbrakk>x = length as;\n   \\<forall>as'.\n      n'' -as'\\<rightarrow>* n' \\<longrightarrow> x \\<le> length as';\n   \\<forall>a.\n      valid_edge a \\<and>\n      n'' = sourcenode a \\<and>\n      targetnode a =\n      (SOME nx.\n          \\<exists>a'.\n             sourcenode a = sourcenode a' \\<and>\n             distance (targetnode a') n' (x - 1) \\<and>\n             valid_edge a' \\<and> targetnode a' = nx) \\<longrightarrow>\n      \\<not> distance (targetnode a) n' (x - 1)\\<rbrakk>\n  \\<Longrightarrow> False\n  valid_edge a\n  sourcenode a = n\n  targetnode a = n''\n  x = length (a # as)\n  \\<forall>as'. n -as'\\<rightarrow>* n' \\<longrightarrow> x \\<le> length as'\n  \\<forall>a.\n     valid_edge a \\<and>\n     n = sourcenode a \\<and>\n     targetnode a =\n     (SOME nx.\n         \\<exists>a'.\n            sourcenode a = sourcenode a' \\<and>\n            distance (targetnode a') n' (x - 1) \\<and>\n            valid_edge a' \\<and> targetnode a' = nx) \\<longrightarrow>\n     \\<not> distance (targetnode a) n' (x - 1)\n\ngoal (1 subgoal):\n 1. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<lbrakk>x = length as;\n         \\<forall>as'.\n            n'' -as'\\<rightarrow>* n' \\<longrightarrow> x \\<le> length as';\n         \\<forall>a.\n            valid_edge a \\<and>\n            n'' = sourcenode a \\<and>\n            targetnode a =\n            (SOME nx.\n                \\<exists>a'.\n                   sourcenode a = sourcenode a' \\<and>\n                   distance (targetnode a') n' (x - 1) \\<and>\n                   valid_edge a' \\<and>\n                   targetnode a' = nx) \\<longrightarrow>\n            \\<not> distance (targetnode a) n' (x - 1)\\<rbrakk>\n        \\<Longrightarrow> False;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        x = length (a # as);\n        \\<forall>as'.\n           n -as'\\<rightarrow>* n' \\<longrightarrow> x \\<le> length as';\n        \\<forall>a.\n           valid_edge a \\<and>\n           n = sourcenode a \\<and>\n           targetnode a =\n           (SOME nx.\n               \\<exists>a'.\n                  sourcenode a = sourcenode a' \\<and>\n                  distance (targetnode a') n' (x - 1) \\<and>\n                  valid_edge a' \\<and> targetnode a' = nx) \\<longrightarrow>\n           \\<not> distance (targetnode a) n' (x - 1)\\<rbrakk>\n       \\<Longrightarrow> False", "note imp = \\<open>\\<forall>a. valid_edge a \\<and> n = sourcenode a \\<and>\n                      targetnode a = (SOME nx. \\<exists>a'. sourcenode a = sourcenode a' \\<and>\n                                                 distance (targetnode a') n' (x - 1) \\<and>\n                                                 valid_edge a' \\<and> targetnode a' = nx)\n                    \\<longrightarrow> \\<not> distance (targetnode a) n' (x - 1)\\<close>"], ["proof (state)\nthis:\n  \\<forall>a.\n     valid_edge a \\<and>\n     n = sourcenode a \\<and>\n     targetnode a =\n     (SOME nx.\n         \\<exists>a'.\n            sourcenode a = sourcenode a' \\<and>\n            distance (targetnode a') n' (x - 1) \\<and>\n            valid_edge a' \\<and> targetnode a' = nx) \\<longrightarrow>\n     \\<not> distance (targetnode a) n' (x - 1)\n\ngoal (1 subgoal):\n 1. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<lbrakk>x = length as;\n         \\<forall>as'.\n            n'' -as'\\<rightarrow>* n' \\<longrightarrow> x \\<le> length as';\n         \\<forall>a.\n            valid_edge a \\<and>\n            n'' = sourcenode a \\<and>\n            targetnode a =\n            (SOME nx.\n                \\<exists>a'.\n                   sourcenode a = sourcenode a' \\<and>\n                   distance (targetnode a') n' (x - 1) \\<and>\n                   valid_edge a' \\<and>\n                   targetnode a' = nx) \\<longrightarrow>\n            \\<not> distance (targetnode a) n' (x - 1)\\<rbrakk>\n        \\<Longrightarrow> False;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        x = length (a # as);\n        \\<forall>as'.\n           n -as'\\<rightarrow>* n' \\<longrightarrow> x \\<le> length as';\n        \\<forall>a.\n           valid_edge a \\<and>\n           n = sourcenode a \\<and>\n           targetnode a =\n           (SOME nx.\n               \\<exists>a'.\n                  sourcenode a = sourcenode a' \\<and>\n                  distance (targetnode a') n' (x - 1) \\<and>\n                  valid_edge a' \\<and> targetnode a' = nx) \\<longrightarrow>\n           \\<not> distance (targetnode a) n' (x - 1)\\<rbrakk>\n       \\<Longrightarrow> False", "note all = \\<open>\\<forall>as'. n -as'\\<rightarrow>* n' \\<longrightarrow> x \\<le> length as'\\<close>"], ["proof (state)\nthis:\n  \\<forall>as'. n -as'\\<rightarrow>* n' \\<longrightarrow> x \\<le> length as'\n\ngoal (1 subgoal):\n 1. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<lbrakk>x = length as;\n         \\<forall>as'.\n            n'' -as'\\<rightarrow>* n' \\<longrightarrow> x \\<le> length as';\n         \\<forall>a.\n            valid_edge a \\<and>\n            n'' = sourcenode a \\<and>\n            targetnode a =\n            (SOME nx.\n                \\<exists>a'.\n                   sourcenode a = sourcenode a' \\<and>\n                   distance (targetnode a') n' (x - 1) \\<and>\n                   valid_edge a' \\<and>\n                   targetnode a' = nx) \\<longrightarrow>\n            \\<not> distance (targetnode a) n' (x - 1)\\<rbrakk>\n        \\<Longrightarrow> False;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        x = length (a # as);\n        \\<forall>as'.\n           n -as'\\<rightarrow>* n' \\<longrightarrow> x \\<le> length as';\n        \\<forall>a.\n           valid_edge a \\<and>\n           n = sourcenode a \\<and>\n           targetnode a =\n           (SOME nx.\n               \\<exists>a'.\n                  sourcenode a = sourcenode a' \\<and>\n                  distance (targetnode a') n' (x - 1) \\<and>\n                  valid_edge a' \\<and> targetnode a' = nx) \\<longrightarrow>\n           \\<not> distance (targetnode a) n' (x - 1)\\<rbrakk>\n       \\<Longrightarrow> False", "from \\<open>n'' -as\\<rightarrow>* n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -as\\<rightarrow>* n'", "obtain y where \"distance n'' n' y\"\n        and \"y \\<le> length as\""], ["proof (prove)\nusing this:\n  n'' -as\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>distance n'' n' y; y \\<le> length as\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(erule every_path_distance)"], ["proof (state)\nthis:\n  distance n'' n' y\n  y \\<le> length as\n\ngoal (1 subgoal):\n 1. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<lbrakk>x = length as;\n         \\<forall>as'.\n            n'' -as'\\<rightarrow>* n' \\<longrightarrow> x \\<le> length as';\n         \\<forall>a.\n            valid_edge a \\<and>\n            n'' = sourcenode a \\<and>\n            targetnode a =\n            (SOME nx.\n                \\<exists>a'.\n                   sourcenode a = sourcenode a' \\<and>\n                   distance (targetnode a') n' (x - 1) \\<and>\n                   valid_edge a' \\<and>\n                   targetnode a' = nx) \\<longrightarrow>\n            \\<not> distance (targetnode a) n' (x - 1)\\<rbrakk>\n        \\<Longrightarrow> False;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        x = length (a # as);\n        \\<forall>as'.\n           n -as'\\<rightarrow>* n' \\<longrightarrow> x \\<le> length as';\n        \\<forall>a.\n           valid_edge a \\<and>\n           n = sourcenode a \\<and>\n           targetnode a =\n           (SOME nx.\n               \\<exists>a'.\n                  sourcenode a = sourcenode a' \\<and>\n                  distance (targetnode a') n' (x - 1) \\<and>\n                  valid_edge a' \\<and> targetnode a' = nx) \\<longrightarrow>\n           \\<not> distance (targetnode a) n' (x - 1)\\<rbrakk>\n       \\<Longrightarrow> False", "from \\<open>distance n'' n' y\\<close>"], ["proof (chain)\npicking this:\n  distance n'' n' y", "obtain as' where \"n'' -as'\\<rightarrow>* n'\"\n        and \"y = length as'\""], ["proof (prove)\nusing this:\n  distance n'' n' y\n\ngoal (1 subgoal):\n 1. (\\<And>as'.\n        \\<lbrakk>n'' -as'\\<rightarrow>* n'; y = length as'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto elim:distance.cases)"], ["proof (state)\nthis:\n  n'' -as'\\<rightarrow>* n'\n  y = length as'\n\ngoal (1 subgoal):\n 1. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<lbrakk>x = length as;\n         \\<forall>as'.\n            n'' -as'\\<rightarrow>* n' \\<longrightarrow> x \\<le> length as';\n         \\<forall>a.\n            valid_edge a \\<and>\n            n'' = sourcenode a \\<and>\n            targetnode a =\n            (SOME nx.\n                \\<exists>a'.\n                   sourcenode a = sourcenode a' \\<and>\n                   distance (targetnode a') n' (x - 1) \\<and>\n                   valid_edge a' \\<and>\n                   targetnode a' = nx) \\<longrightarrow>\n            \\<not> distance (targetnode a) n' (x - 1)\\<rbrakk>\n        \\<Longrightarrow> False;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        x = length (a # as);\n        \\<forall>as'.\n           n -as'\\<rightarrow>* n' \\<longrightarrow> x \\<le> length as';\n        \\<forall>a.\n           valid_edge a \\<and>\n           n = sourcenode a \\<and>\n           targetnode a =\n           (SOME nx.\n               \\<exists>a'.\n                  sourcenode a = sourcenode a' \\<and>\n                  distance (targetnode a') n' (x - 1) \\<and>\n                  valid_edge a' \\<and> targetnode a' = nx) \\<longrightarrow>\n           \\<not> distance (targetnode a) n' (x - 1)\\<rbrakk>\n       \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof(cases \"y < length as\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y < length as \\<Longrightarrow> False\n 2. \\<not> y < length as \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  y < length as\n\ngoal (2 subgoals):\n 1. y < length as \\<Longrightarrow> False\n 2. \\<not> y < length as \\<Longrightarrow> False", "from \\<open>valid_edge a\\<close> \\<open>sourcenode a = n\\<close> \\<open>targetnode a = n''\\<close> \\<open>n'' -as'\\<rightarrow>* n'\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a\n  sourcenode a = n\n  targetnode a = n''\n  n'' -as'\\<rightarrow>* n'", "have \"n -a#as'\\<rightarrow>* n'\""], ["proof (prove)\nusing this:\n  valid_edge a\n  sourcenode a = n\n  targetnode a = n''\n  n'' -as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. n -a # as'\\<rightarrow>* n'", "by -(rule path.Cons_path)"], ["proof (state)\nthis:\n  n -a # as'\\<rightarrow>* n'\n\ngoal (2 subgoals):\n 1. y < length as \\<Longrightarrow> False\n 2. \\<not> y < length as \\<Longrightarrow> False", "with all"], ["proof (chain)\npicking this:\n  \\<forall>as'. n -as'\\<rightarrow>* n' \\<longrightarrow> x \\<le> length as'\n  n -a # as'\\<rightarrow>* n'", "have \"x \\<le> length (a#as')\""], ["proof (prove)\nusing this:\n  \\<forall>as'. n -as'\\<rightarrow>* n' \\<longrightarrow> x \\<le> length as'\n  n -a # as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. x \\<le> length (a # as')", "by blast"], ["proof (state)\nthis:\n  x \\<le> length (a # as')\n\ngoal (2 subgoals):\n 1. y < length as \\<Longrightarrow> False\n 2. \\<not> y < length as \\<Longrightarrow> False", "with \\<open>x = length (a#as)\\<close> True \\<open>y = length as'\\<close>"], ["proof (chain)\npicking this:\n  x = length (a # as)\n  y < length as\n  y = length as'\n  x \\<le> length (a # as')", "show False"], ["proof (prove)\nusing this:\n  x = length (a # as)\n  y < length as\n  y = length as'\n  x \\<le> length (a # as')\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> y < length as \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> y < length as \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  \\<not> y < length as\n\ngoal (1 subgoal):\n 1. \\<not> y < length as \\<Longrightarrow> False", "with \\<open>y \\<le> length as\\<close> \\<open>x = length (a#as)\\<close>"], ["proof (chain)\npicking this:\n  y \\<le> length as\n  x = length (a # as)\n  \\<not> y < length as", "have \"y = x - 1\""], ["proof (prove)\nusing this:\n  y \\<le> length as\n  x = length (a # as)\n  \\<not> y < length as\n\ngoal (1 subgoal):\n 1. y = x - 1", "by simp"], ["proof (state)\nthis:\n  y = x - 1\n\ngoal (1 subgoal):\n 1. \\<not> y < length as \\<Longrightarrow> False", "from \\<open>targetnode a = n''\\<close> \\<open>distance n'' n' y\\<close>"], ["proof (chain)\npicking this:\n  targetnode a = n''\n  distance n'' n' y", "have \"distance (targetnode a) n' y\""], ["proof (prove)\nusing this:\n  targetnode a = n''\n  distance n'' n' y\n\ngoal (1 subgoal):\n 1. distance (targetnode a) n' y", "by simp"], ["proof (state)\nthis:\n  distance (targetnode a) n' y\n\ngoal (1 subgoal):\n 1. \\<not> y < length as \\<Longrightarrow> False", "with \\<open>valid_edge a\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a\n  distance (targetnode a) n' y", "obtain a' where \"sourcenode a = sourcenode a'\"\n          and \"distance (targetnode a') n' y\" and \"valid_edge a'\"\n          and \"targetnode a' = (SOME nx. \\<exists>a'. sourcenode a = sourcenode a' \\<and>\n                                              distance (targetnode a') n' y \\<and>\n                                              valid_edge a' \\<and> targetnode a' = nx)\""], ["proof (prove)\nusing this:\n  valid_edge a\n  distance (targetnode a) n' y\n\ngoal (1 subgoal):\n 1. (\\<And>a'.\n        \\<lbrakk>sourcenode a = sourcenode a';\n         distance (targetnode a') n' y; valid_edge a';\n         targetnode a' =\n         (SOME nx.\n             \\<exists>a'.\n                sourcenode a = sourcenode a' \\<and>\n                distance (targetnode a') n' y \\<and>\n                valid_edge a' \\<and> targetnode a' = nx)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto dest:only_one_SOME_dist_edge)"], ["proof (state)\nthis:\n  sourcenode a = sourcenode a'\n  distance (targetnode a') n' y\n  valid_edge a'\n  targetnode a' =\n  (SOME nx.\n      \\<exists>a'.\n         sourcenode a = sourcenode a' \\<and>\n         distance (targetnode a') n' y \\<and>\n         valid_edge a' \\<and> targetnode a' = nx)\n\ngoal (1 subgoal):\n 1. \\<not> y < length as \\<Longrightarrow> False", "with imp \\<open>sourcenode a = n\\<close> \\<open>y = x - 1\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>a.\n     valid_edge a \\<and>\n     n = sourcenode a \\<and>\n     targetnode a =\n     (SOME nx.\n         \\<exists>a'.\n            sourcenode a = sourcenode a' \\<and>\n            distance (targetnode a') n' (x - 1) \\<and>\n            valid_edge a' \\<and> targetnode a' = nx) \\<longrightarrow>\n     \\<not> distance (targetnode a) n' (x - 1)\n  sourcenode a = n\n  y = x - 1\n  sourcenode a = sourcenode a'\n  distance (targetnode a') n' y\n  valid_edge a'\n  targetnode a' =\n  (SOME nx.\n      \\<exists>a'.\n         sourcenode a = sourcenode a' \\<and>\n         distance (targetnode a') n' y \\<and>\n         valid_edge a' \\<and> targetnode a' = nx)", "show False"], ["proof (prove)\nusing this:\n  \\<forall>a.\n     valid_edge a \\<and>\n     n = sourcenode a \\<and>\n     targetnode a =\n     (SOME nx.\n         \\<exists>a'.\n            sourcenode a = sourcenode a' \\<and>\n            distance (targetnode a') n' (x - 1) \\<and>\n            valid_edge a' \\<and> targetnode a' = nx) \\<longrightarrow>\n     \\<not> distance (targetnode a) n' (x - 1)\n  sourcenode a = n\n  y = x - 1\n  sourcenode a = sourcenode a'\n  distance (targetnode a') n' y\n  valid_edge a'\n  targetnode a' =\n  (SOME nx.\n      \\<exists>a'.\n         sourcenode a = sourcenode a' \\<and>\n         distance (targetnode a') n' y \\<and>\n         valid_edge a' \\<and> targetnode a' = nx)\n\ngoal (1 subgoal):\n 1. False", "by fastforce"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>a.\n     valid_edge a \\<and>\n     n = sourcenode a \\<and>\n     distance (targetnode a) n' (x - 1) \\<and>\n     targetnode a =\n     (SOME nx.\n         \\<exists>a'.\n            sourcenode a = sourcenode a' \\<and>\n            distance (targetnode a') n' (x - 1) \\<and>\n            valid_edge a' \\<and> targetnode a' = nx)\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>valid_edge a; n = sourcenode a;\n         distance (targetnode a) n' (x - 1);\n         targetnode a =\n         (SOME nx.\n             \\<exists>a'.\n                sourcenode a = sourcenode a' \\<and>\n                distance (targetnode a') n' (x - 1) \\<and>\n                valid_edge a' \\<and> targetnode a' = nx)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with that"], ["proof (chain)\npicking this:\n  \\<lbrakk>valid_edge ?a; n = sourcenode ?a;\n   distance (targetnode ?a) n' (x - 1);\n   targetnode ?a =\n   (SOME nx.\n       \\<exists>a'.\n          sourcenode ?a = sourcenode a' \\<and>\n          distance (targetnode a') n' (x - 1) \\<and>\n          valid_edge a' \\<and> targetnode a' = nx)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<exists>a.\n     valid_edge a \\<and>\n     n = sourcenode a \\<and>\n     distance (targetnode a) n' (x - 1) \\<and>\n     targetnode a =\n     (SOME nx.\n         \\<exists>a'.\n            sourcenode a = sourcenode a' \\<and>\n            distance (targetnode a') n' (x - 1) \\<and>\n            valid_edge a' \\<and> targetnode a' = nx)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>valid_edge ?a; n = sourcenode ?a;\n   distance (targetnode ?a) n' (x - 1);\n   targetnode ?a =\n   (SOME nx.\n       \\<exists>a'.\n          sourcenode ?a = sourcenode a' \\<and>\n          distance (targetnode a') n' (x - 1) \\<and>\n          valid_edge a' \\<and> targetnode a' = nx)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<exists>a.\n     valid_edge a \\<and>\n     n = sourcenode a \\<and>\n     distance (targetnode a) n' (x - 1) \\<and>\n     targetnode a =\n     (SOME nx.\n         \\<exists>a'.\n            sourcenode a = sourcenode a' \\<and>\n            distance (targetnode a') n' (x - 1) \\<and>\n            valid_edge a' \\<and> targetnode a' = nx)\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}