{"file_name": "/home/qj213/afp-2021-10-22/thys/Slicing/StaticIntra/Observable.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Slicing", "problem_names": ["lemma obsE:\n  assumes \"n' \\<in> obs n S\"\n  obtains as where \"n -as\\<rightarrow>* n'\" and \"\\<forall>nx \\<in> set(sourcenodes as). nx \\<notin> S\"\n  and \"n' \\<in> S\"", "lemma n_in_obs:\n  assumes \"valid_node n\" and \"n \\<in> S\" shows \"obs n S = {n}\"", "lemma in_obs_valid:\n  assumes \"n' \\<in> obs n S\" shows \"valid_node n\" and \"valid_node n'\"", "lemma edge_obs_subset:\n  assumes\"valid_edge a\" and \"sourcenode a \\<notin> S\"\n  shows \"obs (targetnode a) S \\<subseteq> obs (sourcenode a) S\"", "lemma path_obs_subset:\n  \"\\<lbrakk>n -as\\<rightarrow>* n'; \\<forall>n' \\<in> set(sourcenodes as). n' \\<notin> S\\<rbrakk>\n  \\<Longrightarrow> obs n' S \\<subseteq> obs n S\"", "lemma path_ex_obs:\n  assumes \"n -as\\<rightarrow>* n'\" and \"n' \\<in> S\"\n  obtains m where \"m \\<in> obs n S\""], "translations": [["", "lemma obsE:\n  assumes \"n' \\<in> obs n S\"\n  obtains as where \"n -as\\<rightarrow>* n'\" and \"\\<forall>nx \\<in> set(sourcenodes as). nx \\<notin> S\"\n  and \"n' \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>n -as\\<rightarrow>* n';\n         \\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S;\n         n' \\<in> S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(atomize_elim)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>as.\n       n -as\\<rightarrow>* n' \\<and>\n       (\\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S) \\<and>\n       n' \\<in> S", "from \\<open>n' \\<in> obs n S\\<close>"], ["proof (chain)\npicking this:\n  n' \\<in> obs n S", "have \"\\<exists>as. n -as\\<rightarrow>* n' \\<and> (\\<forall>nx \\<in> set(sourcenodes as). nx \\<notin> S) \\<and> n' \\<in> S\""], ["proof (prove)\nusing this:\n  n' \\<in> obs n S\n\ngoal (1 subgoal):\n 1. \\<exists>as.\n       n -as\\<rightarrow>* n' \\<and>\n       (\\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S) \\<and>\n       n' \\<in> S", "by(auto elim:obs.cases)"], ["proof (state)\nthis:\n  \\<exists>as.\n     n -as\\<rightarrow>* n' \\<and>\n     (\\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S) \\<and> n' \\<in> S\n\ngoal (1 subgoal):\n 1. \\<exists>as.\n       n -as\\<rightarrow>* n' \\<and>\n       (\\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S) \\<and>\n       n' \\<in> S", "thus \"\\<exists>as. n -as\\<rightarrow>* n' \\<and> (\\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S) \\<and> n' \\<in> S\""], ["proof (prove)\nusing this:\n  \\<exists>as.\n     n -as\\<rightarrow>* n' \\<and>\n     (\\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S) \\<and> n' \\<in> S\n\ngoal (1 subgoal):\n 1. \\<exists>as.\n       n -as\\<rightarrow>* n' \\<and>\n       (\\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S) \\<and>\n       n' \\<in> S", "by blast"], ["proof (state)\nthis:\n  \\<exists>as.\n     n -as\\<rightarrow>* n' \\<and>\n     (\\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S) \\<and> n' \\<in> S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma n_in_obs:\n  assumes \"valid_node n\" and \"n \\<in> S\" shows \"obs n S = {n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obs n S = {n}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. obs n S = {n}", "from \\<open>valid_node n\\<close>"], ["proof (chain)\npicking this:\n  valid_node n", "have \"n -[]\\<rightarrow>* n\""], ["proof (prove)\nusing this:\n  valid_node n\n\ngoal (1 subgoal):\n 1. n -[]\\<rightarrow>* n", "by(rule empty_path)"], ["proof (state)\nthis:\n  n -[]\\<rightarrow>* n\n\ngoal (1 subgoal):\n 1. obs n S = {n}", "with \\<open>n \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n \\<in> S\n  n -[]\\<rightarrow>* n", "have \"n \\<in> obs n S\""], ["proof (prove)\nusing this:\n  n \\<in> S\n  n -[]\\<rightarrow>* n\n\ngoal (1 subgoal):\n 1. n \\<in> obs n S", "by(fastforce elim:obs_elem simp:sourcenodes_def)"], ["proof (state)\nthis:\n  n \\<in> obs n S\n\ngoal (1 subgoal):\n 1. obs n S = {n}", "{"], ["proof (state)\nthis:\n  n \\<in> obs n S\n\ngoal (1 subgoal):\n 1. obs n S = {n}", "fix n'"], ["proof (state)\ngoal (1 subgoal):\n 1. obs n S = {n}", "assume \"n' \\<in> obs n S\""], ["proof (state)\nthis:\n  n' \\<in> obs n S\n\ngoal (1 subgoal):\n 1. obs n S = {n}", "have \"n' = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n' = n", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. n' \\<noteq> n \\<Longrightarrow> False", "assume \"n' \\<noteq> n\""], ["proof (state)\nthis:\n  n' \\<noteq> n\n\ngoal (1 subgoal):\n 1. n' \\<noteq> n \\<Longrightarrow> False", "from \\<open>n' \\<in> obs n S\\<close>"], ["proof (chain)\npicking this:\n  n' \\<in> obs n S", "obtain as where \"n -as\\<rightarrow>* n'\"\n        and \"\\<forall>nx \\<in> set(sourcenodes as). nx \\<notin> S\"\n        and \"n' \\<in> S\""], ["proof (prove)\nusing this:\n  n' \\<in> obs n S\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>n -as\\<rightarrow>* n';\n         \\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S;\n         n' \\<in> S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(erule obsE)"], ["proof (state)\nthis:\n  n -as\\<rightarrow>* n'\n  \\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S\n  n' \\<in> S\n\ngoal (1 subgoal):\n 1. n' \\<noteq> n \\<Longrightarrow> False", "from \\<open>n -as\\<rightarrow>* n'\\<close> \\<open>\\<forall>nx \\<in> set(sourcenodes as). nx \\<notin> S\\<close> \\<open>n' \\<noteq> n\\<close> \\<open>n \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* n'\n  \\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S\n  n' \\<noteq> n\n  n \\<in> S", "show False"], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n'\n  \\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S\n  n' \\<noteq> n\n  n \\<in> S\n\ngoal (1 subgoal):\n 1. False", "proof(induct rule:path.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n;\n        \\<forall>nx\\<in>set (sourcenodes []). nx \\<notin> S; n \\<noteq> n;\n        n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<lbrakk>\\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S;\n         n' \\<noteq> n''; n'' \\<in> S\\<rbrakk>\n        \\<Longrightarrow> False;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        \\<forall>nx\\<in>set (sourcenodes (a # as)). nx \\<notin> S;\n        n' \\<noteq> n; n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> False", "case (Cons_path n'' as n' a n)"], ["proof (state)\nthis:\n  n'' -as\\<rightarrow>* n'\n  \\<lbrakk>\\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S;\n   n' \\<noteq> n''; n'' \\<in> S\\<rbrakk>\n  \\<Longrightarrow> False\n  valid_edge a\n  sourcenode a = n\n  targetnode a = n''\n  \\<forall>nx\\<in>set (sourcenodes (a # as)). nx \\<notin> S\n  n' \\<noteq> n\n  n \\<in> S\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n;\n        \\<forall>nx\\<in>set (sourcenodes []). nx \\<notin> S; n \\<noteq> n;\n        n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<lbrakk>\\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S;\n         n' \\<noteq> n''; n'' \\<in> S\\<rbrakk>\n        \\<Longrightarrow> False;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        \\<forall>nx\\<in>set (sourcenodes (a # as)). nx \\<notin> S;\n        n' \\<noteq> n; n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> False", "from \\<open>\\<forall>nx\\<in>set (sourcenodes (a#as)). nx \\<notin> S\\<close> \\<open>sourcenode a = n\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>nx\\<in>set (sourcenodes (a # as)). nx \\<notin> S\n  sourcenode a = n", "have \"n \\<notin> S\""], ["proof (prove)\nusing this:\n  \\<forall>nx\\<in>set (sourcenodes (a # as)). nx \\<notin> S\n  sourcenode a = n\n\ngoal (1 subgoal):\n 1. n \\<notin> S", "by(simp add:sourcenodes_def)"], ["proof (state)\nthis:\n  n \\<notin> S\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n;\n        \\<forall>nx\\<in>set (sourcenodes []). nx \\<notin> S; n \\<noteq> n;\n        n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<lbrakk>\\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S;\n         n' \\<noteq> n''; n'' \\<in> S\\<rbrakk>\n        \\<Longrightarrow> False;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        \\<forall>nx\\<in>set (sourcenodes (a # as)). nx \\<notin> S;\n        n' \\<noteq> n; n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> False", "with \\<open>n \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n \\<in> S\n  n \\<notin> S", "show False"], ["proof (prove)\nusing this:\n  n \\<in> S\n  n \\<notin> S\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n;\n        \\<forall>nx\\<in>set (sourcenodes []). nx \\<notin> S; n \\<noteq> n;\n        n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> False", "qed simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n' = n\n\ngoal (1 subgoal):\n 1. obs n S = {n}", "}"], ["proof (state)\nthis:\n  ?n'2 \\<in> obs n S \\<Longrightarrow> ?n'2 = n\n\ngoal (1 subgoal):\n 1. obs n S = {n}", "with \\<open>n \\<in> obs n S\\<close>"], ["proof (chain)\npicking this:\n  n \\<in> obs n S\n  ?n'2 \\<in> obs n S \\<Longrightarrow> ?n'2 = n", "show ?thesis"], ["proof (prove)\nusing this:\n  n \\<in> obs n S\n  ?n'2 \\<in> obs n S \\<Longrightarrow> ?n'2 = n\n\ngoal (1 subgoal):\n 1. obs n S = {n}", "by fastforce"], ["proof (state)\nthis:\n  obs n S = {n}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma in_obs_valid:\n  assumes \"n' \\<in> obs n S\" shows \"valid_node n\" and \"valid_node n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_node n &&& valid_node n'", "using \\<open>n' \\<in> obs n S\\<close>"], ["proof (prove)\nusing this:\n  n' \\<in> obs n S\n\ngoal (1 subgoal):\n 1. valid_node n &&& valid_node n'", "by(auto elim:obsE intro:path_valid_node)"], ["", "lemma edge_obs_subset:\n  assumes\"valid_edge a\" and \"sourcenode a \\<notin> S\"\n  shows \"obs (targetnode a) S \\<subseteq> obs (sourcenode a) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obs (targetnode a) S \\<subseteq> obs (sourcenode a) S", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> obs (targetnode a) S \\<Longrightarrow>\n       x \\<in> obs (sourcenode a) S", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> obs (targetnode a) S \\<Longrightarrow>\n       x \\<in> obs (sourcenode a) S", "assume \"n \\<in> obs (targetnode a) S\""], ["proof (state)\nthis:\n  n \\<in> obs (targetnode a) S\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> obs (targetnode a) S \\<Longrightarrow>\n       x \\<in> obs (sourcenode a) S", "then"], ["proof (chain)\npicking this:\n  n \\<in> obs (targetnode a) S", "obtain as where \"targetnode a -as\\<rightarrow>* n\" \n    and all:\"\\<forall>nx \\<in> set(sourcenodes as). nx \\<notin> S\" and \"n \\<in> S\""], ["proof (prove)\nusing this:\n  n \\<in> obs (targetnode a) S\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>targetnode a -as\\<rightarrow>* n;\n         \\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S;\n         n \\<in> S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(erule obsE)"], ["proof (state)\nthis:\n  targetnode a -as\\<rightarrow>* n\n  \\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S\n  n \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> obs (targetnode a) S \\<Longrightarrow>\n       x \\<in> obs (sourcenode a) S", "from \\<open>valid_edge a\\<close> \\<open>targetnode a -as\\<rightarrow>* n\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a\n  targetnode a -as\\<rightarrow>* n", "have \"sourcenode a -a#as\\<rightarrow>* n\""], ["proof (prove)\nusing this:\n  valid_edge a\n  targetnode a -as\\<rightarrow>* n\n\ngoal (1 subgoal):\n 1. sourcenode a -a # as\\<rightarrow>* n", "by(fastforce intro:Cons_path)"], ["proof (state)\nthis:\n  sourcenode a -a # as\\<rightarrow>* n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> obs (targetnode a) S \\<Longrightarrow>\n       x \\<in> obs (sourcenode a) S", "moreover"], ["proof (state)\nthis:\n  sourcenode a -a # as\\<rightarrow>* n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> obs (targetnode a) S \\<Longrightarrow>\n       x \\<in> obs (sourcenode a) S", "from all \\<open>sourcenode a \\<notin> S\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S\n  sourcenode a \\<notin> S", "have \"\\<forall>nx \\<in> set(sourcenodes (a#as)). nx \\<notin> S\""], ["proof (prove)\nusing this:\n  \\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S\n  sourcenode a \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<forall>nx\\<in>set (sourcenodes (a # as)). nx \\<notin> S", "by(simp add:sourcenodes_def)"], ["proof (state)\nthis:\n  \\<forall>nx\\<in>set (sourcenodes (a # as)). nx \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> obs (targetnode a) S \\<Longrightarrow>\n       x \\<in> obs (sourcenode a) S", "ultimately"], ["proof (chain)\npicking this:\n  sourcenode a -a # as\\<rightarrow>* n\n  \\<forall>nx\\<in>set (sourcenodes (a # as)). nx \\<notin> S", "show \"n \\<in> obs (sourcenode a) S\""], ["proof (prove)\nusing this:\n  sourcenode a -a # as\\<rightarrow>* n\n  \\<forall>nx\\<in>set (sourcenodes (a # as)). nx \\<notin> S\n\ngoal (1 subgoal):\n 1. n \\<in> obs (sourcenode a) S", "using \\<open>n \\<in> S\\<close>"], ["proof (prove)\nusing this:\n  sourcenode a -a # as\\<rightarrow>* n\n  \\<forall>nx\\<in>set (sourcenodes (a # as)). nx \\<notin> S\n  n \\<in> S\n\ngoal (1 subgoal):\n 1. n \\<in> obs (sourcenode a) S", "by(rule obs_elem)"], ["proof (state)\nthis:\n  n \\<in> obs (sourcenode a) S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path_obs_subset:\n  \"\\<lbrakk>n -as\\<rightarrow>* n'; \\<forall>n' \\<in> set(sourcenodes as). n' \\<notin> S\\<rbrakk>\n  \\<Longrightarrow> obs n' S \\<subseteq> obs n S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n -as\\<rightarrow>* n';\n     \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> S\\<rbrakk>\n    \\<Longrightarrow> obs n' S \\<subseteq> obs n S", "proof(induct rule:path.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n;\n        \\<forall>n'\\<in>set (sourcenodes []). n' \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> obs n S \\<subseteq> obs n S\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<forall>n'\\<in>set (sourcenodes as).\n           n' \\<notin> S \\<Longrightarrow>\n        obs n' S \\<subseteq> obs n'' S;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> obs n' S \\<subseteq> obs n S", "case (Cons_path n'' as n' a n)"], ["proof (state)\nthis:\n  n'' -as\\<rightarrow>* n'\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> S \\<Longrightarrow>\n  obs n' S \\<subseteq> obs n'' S\n  valid_edge a\n  sourcenode a = n\n  targetnode a = n''\n  \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> S\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n;\n        \\<forall>n'\\<in>set (sourcenodes []). n' \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> obs n S \\<subseteq> obs n S\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<forall>n'\\<in>set (sourcenodes as).\n           n' \\<notin> S \\<Longrightarrow>\n        obs n' S \\<subseteq> obs n'' S;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> obs n' S \\<subseteq> obs n S", "note IH = \\<open>\\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> S \\<Longrightarrow> obs n' S \\<subseteq> obs n'' S\\<close>"], ["proof (state)\nthis:\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> S \\<Longrightarrow>\n  obs n' S \\<subseteq> obs n'' S\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n;\n        \\<forall>n'\\<in>set (sourcenodes []). n' \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> obs n S \\<subseteq> obs n S\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<forall>n'\\<in>set (sourcenodes as).\n           n' \\<notin> S \\<Longrightarrow>\n        obs n' S \\<subseteq> obs n'' S;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> obs n' S \\<subseteq> obs n S", "from \\<open>\\<forall>n'\\<in>set (sourcenodes (a#as)). n' \\<notin> S\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> S", "have all:\"\\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> S\" and \"sourcenode a \\<notin> S\""], ["proof (prove)\nusing this:\n  \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> S &&&\n    sourcenode a \\<notin> S", "by(simp_all add:sourcenodes_def)"], ["proof (state)\nthis:\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> S\n  sourcenode a \\<notin> S\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n;\n        \\<forall>n'\\<in>set (sourcenodes []). n' \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> obs n S \\<subseteq> obs n S\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<forall>n'\\<in>set (sourcenodes as).\n           n' \\<notin> S \\<Longrightarrow>\n        obs n' S \\<subseteq> obs n'' S;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> obs n' S \\<subseteq> obs n S", "from IH[OF all]"], ["proof (chain)\npicking this:\n  obs n' S \\<subseteq> obs n'' S", "have \"obs n' S \\<subseteq> obs n'' S\""], ["proof (prove)\nusing this:\n  obs n' S \\<subseteq> obs n'' S\n\ngoal (1 subgoal):\n 1. obs n' S \\<subseteq> obs n'' S", "."], ["proof (state)\nthis:\n  obs n' S \\<subseteq> obs n'' S\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n;\n        \\<forall>n'\\<in>set (sourcenodes []). n' \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> obs n S \\<subseteq> obs n S\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<forall>n'\\<in>set (sourcenodes as).\n           n' \\<notin> S \\<Longrightarrow>\n        obs n' S \\<subseteq> obs n'' S;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> obs n' S \\<subseteq> obs n S", "from \\<open>valid_edge a\\<close> \\<open>targetnode a = n''\\<close> \\<open>sourcenode a = n\\<close> \\<open>sourcenode a \\<notin> S\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a\n  targetnode a = n''\n  sourcenode a = n\n  sourcenode a \\<notin> S", "have \"obs n'' S \\<subseteq> obs n S\""], ["proof (prove)\nusing this:\n  valid_edge a\n  targetnode a = n''\n  sourcenode a = n\n  sourcenode a \\<notin> S\n\ngoal (1 subgoal):\n 1. obs n'' S \\<subseteq> obs n S", "by(fastforce dest:edge_obs_subset)"], ["proof (state)\nthis:\n  obs n'' S \\<subseteq> obs n S\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n;\n        \\<forall>n'\\<in>set (sourcenodes []). n' \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> obs n S \\<subseteq> obs n S\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<forall>n'\\<in>set (sourcenodes as).\n           n' \\<notin> S \\<Longrightarrow>\n        obs n' S \\<subseteq> obs n'' S;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> obs n' S \\<subseteq> obs n S", "with \\<open>obs n' S \\<subseteq> obs n'' S\\<close>"], ["proof (chain)\npicking this:\n  obs n' S \\<subseteq> obs n'' S\n  obs n'' S \\<subseteq> obs n S", "show ?case"], ["proof (prove)\nusing this:\n  obs n' S \\<subseteq> obs n'' S\n  obs n'' S \\<subseteq> obs n S\n\ngoal (1 subgoal):\n 1. obs n' S \\<subseteq> obs n S", "by fastforce"], ["proof (state)\nthis:\n  obs n' S \\<subseteq> obs n S\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n;\n        \\<forall>n'\\<in>set (sourcenodes []). n' \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> obs n S \\<subseteq> obs n S", "qed simp"], ["", "lemma path_ex_obs:\n  assumes \"n -as\\<rightarrow>* n'\" and \"n' \\<in> S\"\n  obtains m where \"m \\<in> obs n S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m. m \\<in> obs n S \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(atomize_elim)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>m. m \\<in> obs n S", "show \"\\<exists>m. m \\<in> obs n S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m. m \\<in> obs n S", "proof(cases \"\\<forall>nx \\<in> set(sourcenodes as). nx \\<notin> S\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S \\<Longrightarrow>\n    \\<exists>m. m \\<in> obs n S\n 2. \\<not> (\\<forall>nx\\<in>set (sourcenodes as).\n               nx \\<notin> S) \\<Longrightarrow>\n    \\<exists>m. m \\<in> obs n S", "case True"], ["proof (state)\nthis:\n  \\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S\n\ngoal (2 subgoals):\n 1. \\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S \\<Longrightarrow>\n    \\<exists>m. m \\<in> obs n S\n 2. \\<not> (\\<forall>nx\\<in>set (sourcenodes as).\n               nx \\<notin> S) \\<Longrightarrow>\n    \\<exists>m. m \\<in> obs n S", "with \\<open>n -as\\<rightarrow>* n'\\<close> \\<open>n' \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* n'\n  n' \\<in> S\n  \\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S", "have \"n' \\<in> obs n S\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n'\n  n' \\<in> S\n  \\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S\n\ngoal (1 subgoal):\n 1. n' \\<in> obs n S", "by -(rule obs_elem)"], ["proof (state)\nthis:\n  n' \\<in> obs n S\n\ngoal (2 subgoals):\n 1. \\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S \\<Longrightarrow>\n    \\<exists>m. m \\<in> obs n S\n 2. \\<not> (\\<forall>nx\\<in>set (sourcenodes as).\n               nx \\<notin> S) \\<Longrightarrow>\n    \\<exists>m. m \\<in> obs n S", "thus ?thesis"], ["proof (prove)\nusing this:\n  n' \\<in> obs n S\n\ngoal (1 subgoal):\n 1. \\<exists>m. m \\<in> obs n S", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>m. m \\<in> obs n S\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>nx\\<in>set (sourcenodes as).\n               nx \\<notin> S) \\<Longrightarrow>\n    \\<exists>m. m \\<in> obs n S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>nx\\<in>set (sourcenodes as).\n               nx \\<notin> S) \\<Longrightarrow>\n    \\<exists>m. m \\<in> obs n S", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>nx\\<in>set (sourcenodes as).\n               nx \\<notin> S) \\<Longrightarrow>\n    \\<exists>m. m \\<in> obs n S", "hence \"\\<exists>nx \\<in> set(sourcenodes as). nx \\<in> S\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S)\n\ngoal (1 subgoal):\n 1. \\<exists>nx\\<in>set (sourcenodes as). nx \\<in> S", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>nx\\<in>set (sourcenodes as). nx \\<in> S\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>nx\\<in>set (sourcenodes as).\n               nx \\<notin> S) \\<Longrightarrow>\n    \\<exists>m. m \\<in> obs n S", "then"], ["proof (chain)\npicking this:\n  \\<exists>nx\\<in>set (sourcenodes as). nx \\<in> S", "obtain nx ns ns' where \"sourcenodes as = ns@nx#ns'\"\n      and \"nx \\<in> S\" and \"\\<forall>n' \\<in> set ns. n' \\<notin> S\""], ["proof (prove)\nusing this:\n  \\<exists>nx\\<in>set (sourcenodes as). nx \\<in> S\n\ngoal (1 subgoal):\n 1. (\\<And>ns nx ns'.\n        \\<lbrakk>sourcenodes as = ns @ nx # ns'; nx \\<in> S;\n         \\<forall>n'\\<in>set ns. n' \\<notin> S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim!:split_list_first_propE)"], ["proof (state)\nthis:\n  sourcenodes as = ns @ nx # ns'\n  nx \\<in> S\n  \\<forall>n'\\<in>set ns. n' \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>nx\\<in>set (sourcenodes as).\n               nx \\<notin> S) \\<Longrightarrow>\n    \\<exists>m. m \\<in> obs n S", "from \\<open>sourcenodes as = ns@nx#ns'\\<close>"], ["proof (chain)\npicking this:\n  sourcenodes as = ns @ nx # ns'", "obtain as' a as'' \n      where \"ns = sourcenodes as'\"\n      and \"as = as'@a#as''\" and \"sourcenode a = nx\""], ["proof (prove)\nusing this:\n  sourcenodes as = ns @ nx # ns'\n\ngoal (1 subgoal):\n 1. (\\<And>as' a as''.\n        \\<lbrakk>ns = sourcenodes as'; as = as' @ a # as'';\n         sourcenode a = nx\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim:map_append_append_maps simp:sourcenodes_def)"], ["proof (state)\nthis:\n  ns = sourcenodes as'\n  as = as' @ a # as''\n  sourcenode a = nx\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>nx\\<in>set (sourcenodes as).\n               nx \\<notin> S) \\<Longrightarrow>\n    \\<exists>m. m \\<in> obs n S", "with \\<open>n -as\\<rightarrow>* n'\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* n'\n  ns = sourcenodes as'\n  as = as' @ a # as''\n  sourcenode a = nx", "have \"n -as'\\<rightarrow>* nx\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n'\n  ns = sourcenodes as'\n  as = as' @ a # as''\n  sourcenode a = nx\n\ngoal (1 subgoal):\n 1. n -as'\\<rightarrow>* nx", "by(fastforce dest:path_split)"], ["proof (state)\nthis:\n  n -as'\\<rightarrow>* nx\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>nx\\<in>set (sourcenodes as).\n               nx \\<notin> S) \\<Longrightarrow>\n    \\<exists>m. m \\<in> obs n S", "with \\<open>nx \\<in> S\\<close> \\<open>\\<forall>n' \\<in> set ns. n' \\<notin> S\\<close> \\<open>ns = sourcenodes as'\\<close>"], ["proof (chain)\npicking this:\n  nx \\<in> S\n  \\<forall>n'\\<in>set ns. n' \\<notin> S\n  ns = sourcenodes as'\n  n -as'\\<rightarrow>* nx", "have \"nx \\<in> obs n S\""], ["proof (prove)\nusing this:\n  nx \\<in> S\n  \\<forall>n'\\<in>set ns. n' \\<notin> S\n  ns = sourcenodes as'\n  n -as'\\<rightarrow>* nx\n\ngoal (1 subgoal):\n 1. nx \\<in> obs n S", "by(fastforce intro:obs_elem)"], ["proof (state)\nthis:\n  nx \\<in> obs n S\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>nx\\<in>set (sourcenodes as).\n               nx \\<notin> S) \\<Longrightarrow>\n    \\<exists>m. m \\<in> obs n S", "thus ?thesis"], ["proof (prove)\nusing this:\n  nx \\<in> obs n S\n\ngoal (1 subgoal):\n 1. \\<exists>m. m \\<in> obs n S", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>m. m \\<in> obs n S\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>m. m \\<in> obs n S\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}