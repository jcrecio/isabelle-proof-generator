{"file_name": "/home/qj213/afp-2021-10-22/thys/Slicing/Basic/CFG_wf.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Slicing", "problem_names": ["lemma [dest!]: \"V \\<in> Use (_Entry_) \\<Longrightarrow> False\"", "lemma [dest!]: \"V \\<in> Def (_Entry_) \\<Longrightarrow> False\"", "lemma CFG_path_no_Def_equal:\n  \"\\<lbrakk>n -as\\<rightarrow>* n'; \\<forall>n \\<in> set (sourcenodes as). V \\<notin> Def n; preds (kinds as) s\\<rbrakk> \n    \\<Longrightarrow> state_val (transfers (kinds as) s) V = state_val s V\""], "translations": [["", "lemma [dest!]: \"V \\<in> Use (_Entry_) \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V \\<in> Use (_Entry_) \\<Longrightarrow> False", "by(simp add:Entry_empty)"], ["", "lemma [dest!]: \"V \\<in> Def (_Entry_) \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V \\<in> Def (_Entry_) \\<Longrightarrow> False", "by(simp add:Entry_empty)"], ["", "lemma CFG_path_no_Def_equal:\n  \"\\<lbrakk>n -as\\<rightarrow>* n'; \\<forall>n \\<in> set (sourcenodes as). V \\<notin> Def n; preds (kinds as) s\\<rbrakk> \n    \\<Longrightarrow> state_val (transfers (kinds as) s) V = state_val s V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n -as\\<rightarrow>* n';\n     \\<forall>n\\<in>set (sourcenodes as). V \\<notin> Def n;\n     preds (kinds as) s\\<rbrakk>\n    \\<Longrightarrow> state_val (transfers (kinds as) s) V = state_val s V", "proof(induct arbitrary:s rule:path.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n s.\n       \\<lbrakk>valid_node n;\n        \\<forall>n\\<in>set (sourcenodes []). V \\<notin> Def n;\n        preds (kinds []) s\\<rbrakk>\n       \\<Longrightarrow> state_val (transfers (kinds []) s) V =\n                         state_val s V\n 2. \\<And>n'' as n' a n s.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<And>s.\n           \\<lbrakk>\\<forall>n\\<in>set (sourcenodes as). V \\<notin> Def n;\n            preds (kinds as) s\\<rbrakk>\n           \\<Longrightarrow> state_val (transfers (kinds as) s) V =\n                             state_val s V;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        \\<forall>n\\<in>set (sourcenodes (a # as)). V \\<notin> Def n;\n        preds (kinds (a # as)) s\\<rbrakk>\n       \\<Longrightarrow> state_val (transfers (kinds (a # as)) s) V =\n                         state_val s V", "case (empty_path n)"], ["proof (state)\nthis:\n  valid_node n\n  \\<forall>n\\<in>set (sourcenodes []). V \\<notin> Def n\n  preds (kinds []) s\n\ngoal (2 subgoals):\n 1. \\<And>n s.\n       \\<lbrakk>valid_node n;\n        \\<forall>n\\<in>set (sourcenodes []). V \\<notin> Def n;\n        preds (kinds []) s\\<rbrakk>\n       \\<Longrightarrow> state_val (transfers (kinds []) s) V =\n                         state_val s V\n 2. \\<And>n'' as n' a n s.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<And>s.\n           \\<lbrakk>\\<forall>n\\<in>set (sourcenodes as). V \\<notin> Def n;\n            preds (kinds as) s\\<rbrakk>\n           \\<Longrightarrow> state_val (transfers (kinds as) s) V =\n                             state_val s V;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        \\<forall>n\\<in>set (sourcenodes (a # as)). V \\<notin> Def n;\n        preds (kinds (a # as)) s\\<rbrakk>\n       \\<Longrightarrow> state_val (transfers (kinds (a # as)) s) V =\n                         state_val s V", "thus ?case"], ["proof (prove)\nusing this:\n  valid_node n\n  \\<forall>n\\<in>set (sourcenodes []). V \\<notin> Def n\n  preds (kinds []) s\n\ngoal (1 subgoal):\n 1. state_val (transfers (kinds []) s) V = state_val s V", "by(simp add:sourcenodes_def kinds_def)"], ["proof (state)\nthis:\n  state_val (transfers (kinds []) s) V = state_val s V\n\ngoal (1 subgoal):\n 1. \\<And>n'' as n' a n s.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<And>s.\n           \\<lbrakk>\\<forall>n\\<in>set (sourcenodes as). V \\<notin> Def n;\n            preds (kinds as) s\\<rbrakk>\n           \\<Longrightarrow> state_val (transfers (kinds as) s) V =\n                             state_val s V;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        \\<forall>n\\<in>set (sourcenodes (a # as)). V \\<notin> Def n;\n        preds (kinds (a # as)) s\\<rbrakk>\n       \\<Longrightarrow> state_val (transfers (kinds (a # as)) s) V =\n                         state_val s V", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n'' as n' a n s.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<And>s.\n           \\<lbrakk>\\<forall>n\\<in>set (sourcenodes as). V \\<notin> Def n;\n            preds (kinds as) s\\<rbrakk>\n           \\<Longrightarrow> state_val (transfers (kinds as) s) V =\n                             state_val s V;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        \\<forall>n\\<in>set (sourcenodes (a # as)). V \\<notin> Def n;\n        preds (kinds (a # as)) s\\<rbrakk>\n       \\<Longrightarrow> state_val (transfers (kinds (a # as)) s) V =\n                         state_val s V", "case (Cons_path n'' as n' a n)"], ["proof (state)\nthis:\n  n'' -as\\<rightarrow>* n'\n  \\<lbrakk>\\<forall>n\\<in>set (sourcenodes as). V \\<notin> Def n;\n   preds (kinds as) ?s\\<rbrakk>\n  \\<Longrightarrow> state_val (transfers (kinds as) ?s) V = state_val ?s V\n  valid_edge a\n  sourcenode a = n\n  targetnode a = n''\n  \\<forall>n\\<in>set (sourcenodes (a # as)). V \\<notin> Def n\n  preds (kinds (a # as)) s\n\ngoal (1 subgoal):\n 1. \\<And>n'' as n' a n s.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<And>s.\n           \\<lbrakk>\\<forall>n\\<in>set (sourcenodes as). V \\<notin> Def n;\n            preds (kinds as) s\\<rbrakk>\n           \\<Longrightarrow> state_val (transfers (kinds as) s) V =\n                             state_val s V;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        \\<forall>n\\<in>set (sourcenodes (a # as)). V \\<notin> Def n;\n        preds (kinds (a # as)) s\\<rbrakk>\n       \\<Longrightarrow> state_val (transfers (kinds (a # as)) s) V =\n                         state_val s V", "note IH = \\<open>\\<And>s. \\<lbrakk>\\<forall>n\\<in>set (sourcenodes as). V \\<notin> Def n; preds (kinds as) s\\<rbrakk> \\<Longrightarrow>\n            state_val (transfers (kinds as) s) V = state_val s V\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>n\\<in>set (sourcenodes as). V \\<notin> Def n;\n   preds (kinds as) ?s\\<rbrakk>\n  \\<Longrightarrow> state_val (transfers (kinds as) ?s) V = state_val ?s V\n\ngoal (1 subgoal):\n 1. \\<And>n'' as n' a n s.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<And>s.\n           \\<lbrakk>\\<forall>n\\<in>set (sourcenodes as). V \\<notin> Def n;\n            preds (kinds as) s\\<rbrakk>\n           \\<Longrightarrow> state_val (transfers (kinds as) s) V =\n                             state_val s V;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        \\<forall>n\\<in>set (sourcenodes (a # as)). V \\<notin> Def n;\n        preds (kinds (a # as)) s\\<rbrakk>\n       \\<Longrightarrow> state_val (transfers (kinds (a # as)) s) V =\n                         state_val s V", "from \\<open>preds (kinds (a#as)) s\\<close>"], ["proof (chain)\npicking this:\n  preds (kinds (a # as)) s", "have \"pred (kind a) s\"\n    and \"preds (kinds as) (transfer (kind a) s)\""], ["proof (prove)\nusing this:\n  preds (kinds (a # as)) s\n\ngoal (1 subgoal):\n 1. pred (kind a) s &&& preds (kinds as) (transfer (kind a) s)", "by(simp_all add:kinds_def)"], ["proof (state)\nthis:\n  pred (kind a) s\n  preds (kinds as) (transfer (kind a) s)\n\ngoal (1 subgoal):\n 1. \\<And>n'' as n' a n s.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<And>s.\n           \\<lbrakk>\\<forall>n\\<in>set (sourcenodes as). V \\<notin> Def n;\n            preds (kinds as) s\\<rbrakk>\n           \\<Longrightarrow> state_val (transfers (kinds as) s) V =\n                             state_val s V;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        \\<forall>n\\<in>set (sourcenodes (a # as)). V \\<notin> Def n;\n        preds (kinds (a # as)) s\\<rbrakk>\n       \\<Longrightarrow> state_val (transfers (kinds (a # as)) s) V =\n                         state_val s V", "from \\<open>\\<forall>n\\<in>set (sourcenodes (a#as)). V \\<notin> Def n\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>n\\<in>set (sourcenodes (a # as)). V \\<notin> Def n", "have noDef:\"V \\<notin> Def (sourcenode a)\" \n    and all:\"\\<forall>n\\<in>set (sourcenodes as). V \\<notin> Def n\""], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>set (sourcenodes (a # as)). V \\<notin> Def n\n\ngoal (1 subgoal):\n 1. V \\<notin> Def (sourcenode a) &&&\n    \\<forall>n\\<in>set (sourcenodes as). V \\<notin> Def n", "by(auto simp:sourcenodes_def)"], ["proof (state)\nthis:\n  V \\<notin> Def (sourcenode a)\n  \\<forall>n\\<in>set (sourcenodes as). V \\<notin> Def n\n\ngoal (1 subgoal):\n 1. \\<And>n'' as n' a n s.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<And>s.\n           \\<lbrakk>\\<forall>n\\<in>set (sourcenodes as). V \\<notin> Def n;\n            preds (kinds as) s\\<rbrakk>\n           \\<Longrightarrow> state_val (transfers (kinds as) s) V =\n                             state_val s V;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        \\<forall>n\\<in>set (sourcenodes (a # as)). V \\<notin> Def n;\n        preds (kinds (a # as)) s\\<rbrakk>\n       \\<Longrightarrow> state_val (transfers (kinds (a # as)) s) V =\n                         state_val s V", "from \\<open>valid_edge a\\<close> noDef \\<open>pred (kind a) s\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a\n  V \\<notin> Def (sourcenode a)\n  pred (kind a) s", "have \"state_val (transfer (kind a) s) V = state_val s V\""], ["proof (prove)\nusing this:\n  valid_edge a\n  V \\<notin> Def (sourcenode a)\n  pred (kind a) s\n\ngoal (1 subgoal):\n 1. state_val (transfer (kind a) s) V = state_val s V", "by(rule CFG_edge_no_Def_equal)"], ["proof (state)\nthis:\n  state_val (transfer (kind a) s) V = state_val s V\n\ngoal (1 subgoal):\n 1. \\<And>n'' as n' a n s.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<And>s.\n           \\<lbrakk>\\<forall>n\\<in>set (sourcenodes as). V \\<notin> Def n;\n            preds (kinds as) s\\<rbrakk>\n           \\<Longrightarrow> state_val (transfers (kinds as) s) V =\n                             state_val s V;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        \\<forall>n\\<in>set (sourcenodes (a # as)). V \\<notin> Def n;\n        preds (kinds (a # as)) s\\<rbrakk>\n       \\<Longrightarrow> state_val (transfers (kinds (a # as)) s) V =\n                         state_val s V", "with IH[OF all \\<open>preds (kinds as) (transfer (kind a) s)\\<close>]"], ["proof (chain)\npicking this:\n  state_val (transfers (kinds as) (transfer (kind a) s)) V =\n  state_val (transfer (kind a) s) V\n  state_val (transfer (kind a) s) V = state_val s V", "show ?case"], ["proof (prove)\nusing this:\n  state_val (transfers (kinds as) (transfer (kind a) s)) V =\n  state_val (transfer (kind a) s) V\n  state_val (transfer (kind a) s) V = state_val s V\n\ngoal (1 subgoal):\n 1. state_val (transfers (kinds (a # as)) s) V = state_val s V", "by(simp add:kinds_def)"], ["proof (state)\nthis:\n  state_val (transfers (kinds (a # as)) s) V = state_val s V\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}